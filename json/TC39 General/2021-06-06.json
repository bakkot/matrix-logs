[
{"content":{"body":"* Property “names” probably would no longer be apt terminology; it could be more like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"* Property “names” probably would no longer be apt terminology; it could be more like <code>Object.getOwnPropertyKeys</code>.","m.new_content":{"body":"Property “names” probably would no longer be apt terminology; it could be more like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"Property “names” probably would no longer be apt terminology; it could be more like <code>Object.getOwnPropertyKeys</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$zrXlZpZBn46pDJ8C4bMqF8NCSAa6YTeXoniVoZauXZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1622943528517,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2kPYhfccQivqs8Rsh9TiG53_tXA69oQ-J9HLghOxD4g"},
{"content":{"body":"* Property “names” probably would no longer be apt terminology for non-string values; the method name could be like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"* Property “names” probably would no longer be apt terminology for non-string values; the method name could be like <code>Object.getOwnPropertyKeys</code>.","m.new_content":{"body":"Property “names” probably would no longer be apt terminology for non-string values; the method name could be like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"Property “names” probably would no longer be apt terminology for non-string values; the method name could be like <code>Object.getOwnPropertyKeys</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$zrXlZpZBn46pDJ8C4bMqF8NCSAa6YTeXoniVoZauXZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1622943867511,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MxDEvVLsC51fngcclym3-K4aRNJv89Ys7zAUG6LZKw4"},
{"content":{"body":"* Property “names” probably would no longer be apt terminology for non-string keys; the method name could be like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"* Property “names” probably would no longer be apt terminology for non-string keys; the method name could be like <code>Object.getOwnPropertyKeys</code>.","m.new_content":{"body":"Property “names” probably would no longer be apt terminology for non-string keys; the method name could be like `Object.getOwnPropertyKeys`.","format":"org.matrix.custom.html","formatted_body":"Property “names” probably would no longer be apt terminology for non-string keys; the method name could be like <code>Object.getOwnPropertyKeys</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$zrXlZpZBn46pDJ8C4bMqF8NCSAa6YTeXoniVoZauXZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1622943885446,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uDl6oQwqVv5aapC-35a87As6JQmzqJUBKGjdIcjODm4"},
{"content":{"body":"Anyone know what's going on here? Are we all misunderstanding? https://stackoverflow.com/questions/67855714/eval-declaration-instantiation-when-calling-context-is-evaluating-formal-param","msgtype":"m.text"},"ts":1622954016541,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$AEgkNNQw7VyB6ca8W_a331uTREXs2R6nq_AEasnV0lo"},
{"content":{"body":"loganfsmyth: that note became stale as of https://github.com/tc39/ecma262/pull/1046","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@loganfsmyth:mozilla.org\">loganfsmyth</a>: that note became stale as of https://github.com/tc39/ecma262/pull/1046","msgtype":"m.text"},"ts":1622958153855,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$amoFqc2RKLgEPdbLVvMyb_Y3ntR4WjiUFB4d9KJN5Wg"},
{"content":{"body":"I suppose I'll open a PR","msgtype":"m.text"},"ts":1622958205564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3E88s8t1VOAZ4dKcxG_Q2OrlukS7uEiYRRsMZ77MqCI"},
{"content":{"body":"excellent, that makes sense","msgtype":"m.text"},"ts":1622958297707,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$K0a1wNjHPWZyoOE5_XBoD1UZdHjLSvOIyHcfcunZtKs"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/2428","msgtype":"m.text"},"ts":1622958491618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sAXkRqcUVQQeQzTVHn9EWDfKVTBjb3lHcfnN1lE5wyI"},
{"content":{"body":"loganfsmyth: You want to answer the stackoverflow question or shall I try to dig up my old account?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@loganfsmyth:mozilla.org\">loganfsmyth</a>: You want to answer the stackoverflow question or shall I try to dig up my old account?","msgtype":"m.text"},"ts":1622958522996,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y7yaHmXsnaOTjrIok3uLW-BSPTSljz8PaS3nd1Z8kRE"},
{"content":{"body":"I posted an answer, thanks!","msgtype":"m.text"},"ts":1622958601509,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$r_Tv8CjWAx8h8YL2bsasgJGtoNR_BHDFlQj2R8y-EhY"},
{"content":{"body":"jmdyck: re https://github.com/tc39/ecma262/issues/2400, you suggest replacing \"Set the code evaluation state of contextA such that when evaluation is resumed with a Completion v [...].\" with \"Resume contextB passing B-VALUE. Let v be the value returned by the resumed computation.\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: re https://github.com/tc39/ecma262/issues/2400, you suggest replacing &quot;Set the code evaluation state of contextA such that when evaluation is resumed with a Completion v [...].&quot; with &quot;Resume contextB passing B-VALUE. Let v be the value returned by the resumed computation.&quot;","msgtype":"m.text"},"ts":1623004746092,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aj_MN8jfOxNZMzU_NKapfZg-QCCEyosUJ_GKyk0NrZs"},
{"content":{"body":" problem: it is not generally the case that contextB is the thing which resumes the thing just suspended.","msgtype":"m.text"},"ts":1623004757501,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lu5V0gk21uvftJzJsZ4x-nhWaZc7VcFX1UXh8-GrXAo"},
{"content":{"body":"e.g., in Await, it's not contextB which does the resumption, but rather some future Await Fulfilled Function (or Await Rejected Function, of course)","msgtype":"m.text"},"ts":1623004822294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SI8jUGZ72H3HuDYXchLIHYOSiNpQ4UwEr-HkXMVRNN4"},
{"content":{"body":"I'm trying to think of an alternative phrasing which avoids this, but haven't come up with anything I like yet","msgtype":"m.text"},"ts":1623004846978,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DwkjUMf4Tn0ZVn-cXJQCWwG3lNupS-qR6FojtcfBcbI"},
{"content":{"body":"\"the thing which resumes\" present tense? I say that contextB is the execution context that most recently *resumed* the evaluation of contextA.","format":"org.matrix.custom.html","formatted_body":"&quot;the thing which resumes&quot; present tense? I say that contextB is the execution context that most recently <em>resumed</em> the evaluation of contextA.","msgtype":"m.text"},"ts":1623004980616,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$IYXTFkCWPNXklSial2y3mZcb21ioHwgBvBYCAzZVTfM"},
{"content":{"body":"I'm focusing specifically on the step\n\n> Resume contextB passing B-VALUE. Let v be the value returned by the resumed computation.\n","format":"org.matrix.custom.html","formatted_body":"<p>I'm focusing specifically on the step</p>\n<blockquote>\n<p>Resume contextB passing B-VALUE. Let v be the value returned by the resumed computation.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1623005009448,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$an3KOqFnVIuIjZFcrjbYiin2KIN4r57EqESA33ifo8o"},
{"content":{"body":"to me, that step implies that contextB is going to be the thing which provides _v_.","format":"org.matrix.custom.html","formatted_body":"to me, that step implies that contextB is going to be the thing which provides <em>v</em>.","msgtype":"m.text"},"ts":1623005032369,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K1aMaJlB4WBGg1tVEWYgp8tcsPjbZ1h9CISs358QEKk"},
{"content":{"body":"and, by extension, is going to be the thing which _subsequently_ resumes contextA.","format":"org.matrix.custom.html","formatted_body":"and, by extension, is going to be the thing which <em>subsequently</em> resumes contextA.","msgtype":"m.text"},"ts":1623005058768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sjbt0px5NIVxTehsVGK4F5uieA9mYXECi6uaJS_CxS8"},
{"content":{"body":"Ah,okay. Well, it doesn't actually *say* that contextB will be returning v and resuming contextA, though that's what I would have thought.","format":"org.matrix.custom.html","formatted_body":"Ah,okay. Well, it doesn't actually <em>say</em> that contextB will be returning v and resuming contextA, though that's what I would have thought.","msgtype":"m.text"},"ts":1623005204315,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$97kP_r8Hq4_zWGzBmk5753oEPPI4GGE1r6Vicl4oYdI"},
{"content":{"body":"I still don't grok Await machinery","msgtype":"m.text"},"ts":1623005275984,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$W3wHKNUnmjevvevz8ekiq8rh3Ky8w3YpNDG5TBHpcEc"},
{"content":{"body":"It's not just Await; the same issue arises for plain generators. contextB is the _previous_ caller of `Generator.prototype.next`, whereas _v_ is going to be provided by the _next_ caller of `Generator.prototype.next`.","format":"org.matrix.custom.html","formatted_body":"It's not just Await; the same issue arises for plain generators. contextB is the <em>previous</em> caller of <code>Generator.prototype.next</code>, whereas <em>v</em> is going to be provided by the <em>next</em> caller of <code>Generator.prototype.next</code>.","msgtype":"m.text"},"ts":1623005394350,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1f7x71Yf92-nRhHM8aYsZFCfn3LyVSbfPgU_w16aaEE"},
{"content":{"body":"Maybe something like\n\n> 1. Resume contextB passing B-VALUE.\n> 1. Assert: when control reaches here, contextA is once again the running execution context.\n> 1. Let _v_ be the value with which contextA was resumed.","format":"org.matrix.custom.html","formatted_body":"<p>Maybe something like</p>\n<blockquote>\n<ol>\n<li>Resume contextB passing B-VALUE.</li>\n<li>Assert: when control reaches here, contextA is once again the running execution context.</li>\n<li>Let <em>v</em> be the value with which contextA was resumed.</li>\n</ol>\n</blockquote>\n","msgtype":"m.text"},"ts":1623005489174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YeKS6CXrHFsl0G2QJsO8T_Bv40Dn7B9x4iWtZHEQYdM"},
{"content":{"body":"and those can be 'in' different contexts (w plain generators)?","msgtype":"m.text"},"ts":1623005492447,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$XCWomsn36i9V4j8oXwbn8IurJqKVDiQogQsh1F3AiiU"},
{"content":{"body":"they are necessarily going to be in different contexts, since each call to `.next` (as with all function calls) creates and pushes a new context","format":"org.matrix.custom.html","formatted_body":"they are necessarily going to be in different contexts, since each call to <code>.next</code> (as with all function calls) creates and pushes a new context","msgtype":"m.text"},"ts":1623005525563,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bhv3UUBk1na4vZNFIVJYGSxV_Xd37y40ZoqZpWVmIgQ"},
{"content":{"body":"I guess I ought to have said \"contextB is the execution context of the previous call of Generator.prototype.next\", not \"is the caller of\"","msgtype":"m.text"},"ts":1623005581898,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PFnp7pCx0BwzICFsx8yWU_IC2_eTbGtGxH9sCmAijWg"},
{"content":{"body":"sorry, i need to page this in","msgtype":"m.text"},"ts":1623005587974,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$2Lu1WJq6j60gfF2qZpgIP_P2V5vbPZwaLuM9iFqhbtE"},
{"content":{"body":"haven't thought about it for a while","msgtype":"m.text"},"ts":1623005602639,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$paACE5hR25Rf6F7wJjO92K30-qOXW8fQn7dgpVH48JI"},
{"content":{"body":"Not to worry, lots to page in","msgtype":"m.text"},"ts":1623005882893,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ugMxmvSphkkuht5swKb7QorIx9ZhRZBrqRea7pmvpow"},
{"content":{"body":"I'll have a PR up in a bit","msgtype":"m.text"},"ts":1623005899303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gyX-Rzm3tThfBL1d5FLb8-G6il4Dl9X1ZAaz3xVutEg"},
{"content":{"body":"okay, i think i'm more or less up to speed","msgtype":"m.text"},"ts":1623006168102,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$_VxsJCnkvjOXx-XtDHAQUfzkE65HL7Y61B5YQ3UjN3Y"},
{"content":{"body":"And yeah, the wording could be improved, but I'm not sure about your suggestion.","msgtype":"m.text"},"ts":1623006226179,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$JNeUHgFsUGMxyc3Csk2SvXYBJnBQQJKULTzEHVQVsnM"},
{"content":{"body":"I think it needs to be clearer that the thread of control that performs the 'Resume' step has to then (suspend and) wait until *it* is Resumed (if ever), at which time a value (v) will be supplied.","format":"org.matrix.custom.html","formatted_body":"I think it needs to be clearer that the thread of control that performs the 'Resume' step has to then (suspend and) wait until <em>it</em> is Resumed (if ever), at which time a value (v) will be supplied.","msgtype":"m.text"},"ts":1623006598518,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PhZ_fmTEPxVg_kE2HOg-rMk9msGVPsfhwmlk4tIxUxQ"},
{"content":{"body":"Maybe it would suffice if just defined 'Resume' somewhere.","msgtype":"m.text"},"ts":1623006644587,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Z3k5qxLzxZukllGH2zbiQN3FTUdYq_ZHUgBVmkeeIcE"},
{"content":{"body":" * Maybe it would suffice if we just defined 'Resume' somewhere.","m.new_content":{"body":"Maybe it would suffice if we just defined 'Resume' somewhere.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Z3k5qxLzxZukllGH2zbiQN3FTUdYq_ZHUgBVmkeeIcE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1623006651551,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$cIRs83O2XwZD3c3IMdXdS1QFQRpne09N2k2PxSN0Y-Y"},
{"content":{"body":"There's always an explicit suspension before the Resume, which maybe makes it clearer?","msgtype":"m.text"},"ts":1623006762840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M2Tng6ZOz5nOP8GdC8QmvhrW3ktyh7YvlaeAPy72j5I"},
{"content":{"body":"Usually, but not quite always, immediately before the Resume","msgtype":"m.text"},"ts":1623006788697,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QPCs6K-H-4I3OVPhrJ3Kb7uTlhiowqK6S9VTGrodvyY"},
{"content":{"body":"Actually that's maybe false?","msgtype":"m.text"},"ts":1623006929763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WMUaant-nDhVcSMw3dTLWJrjODixxGW2mYDqod7o3xA"},
{"content":{"body":"Note that GeneratorResume, GeneratorResumeAbrupt , and AsyncGeneratorResumeNext use the \"Resume ... Let\" step format, although those are all going \"the other way\", right?","msgtype":"m.text"},"ts":1623006970773,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$1HGPWR9kx49gOG8ZDqzYFGCCI4ajwk1v-_Z7nU-oJQU"},
{"content":{"body":"There's always an explicit \"remove the current context from the stack\", though","msgtype":"m.text"},"ts":1623006973600,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tb3iqem6Yd4BqcvdI7flwxosDC5Rpwc2JMfQL9al-Fw"},
{"content":{"body":"Yeah. For those it makes sense because it really is the execution which is Resumed which is providing the value.","msgtype":"m.text"},"ts":1623007011899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fotr2xKfYyWPoIIcd_GPBeODHATRaZ710RbtCO9vkGI"},
{"content":{"body":"Having the \"Resume\" and \"Let\" in the same step helps (to some extent) convey that the 'lifetime' of the step includes a resume-to-suspend chunk of execution of another thread of control.","msgtype":"m.text"},"ts":1623007177784,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$csXePaqfeZxnNbFJqa5DZ2cS9q9fx163i4DcIC8nr44"},
{"content":{"body":"now have a draft at https://github.com/tc39/ecma262/pull/2429","msgtype":"m.text"},"ts":1623007256621,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2voy4S8YsEda7Z-wHCL5fsL4O1FQd0j7LaWJh6VeKI0"},
{"content":{"body":"I can see the case for having it be a single step, yeah. Hmm.","msgtype":"m.text"},"ts":1623007282113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R8_TjoYjzlkYvsX4_NvuhdcaakACYVy3X6UzXEf5pDU"},
{"content":{"body":"I have notes about suggesting an AO to have one place to clarify the semantics of transferring flow of control (suspend and resume).","msgtype":"m.text"},"ts":1623008071291,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$t-UpQJ64Pc-5xcEsYIwZsAttaQ3uN3_X3hbPIAOAG18"},
{"content":{"body":"Rather than having to convey it \"inline\" at each point where it occurs.","msgtype":"m.text"},"ts":1623008169447,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$B44XGk0ZWBIx1BRTEgHhyqZIpV7GC3SDSyzE0W-_1vw"},
{"content":{"body":"But I didn't want to pull that into 2400.","msgtype":"m.text"},"ts":1623008269523,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$aFTTuRQse384odcFYaKL8NwJZiJYhHknkpQRNIadNGE"},
{"content":{"body":"To the original point you raised, I could change \"Let v be the value returned by the resumed computation.\" to something like \"If _contextA_ is ever resumed again, let _v_ be the value supplied by the context that resumes it.\"","format":"org.matrix.custom.html","formatted_body":"To the original point you raised, I could change &quot;Let v be the value returned by the resumed computation.&quot; to something like &quot;If <em>contextA</em> is ever resumed again, let <em>v</em> be the value supplied by the context that resumes it.&quot;","msgtype":"m.text"},"ts":1623008627492,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$O95uOMGDOVbNetZHXFyVtgn2IIp-oW2DFajyPfcBAzU"},
{"content":{"body":"or maybe \"... the value supplied at the time of resumption\"","msgtype":"m.text"},"ts":1623008758829,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$28QHNx59AqXk_CMpHy-hVuktkNocdgbbZhw8z6EyHI4"},
{"content":{"body":"I am pretty indifferent between that and the wording I used in the PR, which is \"the value with which it was resumed\"","msgtype":"m.text"},"ts":1623008842099,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lk52o4rfci5lWiqAu_4JyfN9I63OPiPiwKRCqYhTeNA"},
{"content":{"body":"that's fine too.","msgtype":"m.text"},"ts":1623008859419,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$a-8nSTEmCuZejgADNSqRkaw0TU4Wiv5wGvsEJHdgE84"},
{"content":{"body":"I also changed all the places which do such a resumption to \"Resume ... with _v_\"","format":"org.matrix.custom.html","formatted_body":"I also changed all the places which do such a resumption to &quot;Resume ... with <em>v</em>&quot;","msgtype":"m.text"},"ts":1623008863392,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5bexGqb3-QiUoNfvPDLZpMC5w8o5JEv7RXn485ZuZvE"},
{"content":{"body":"PrepareForTail call is going to just remain incoherent, I guess","msgtype":"m.text"},"ts":1623009050953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EdjG-mc8-VpWnoV__KE9CsgwA8u7ok9gA8vtD15tTS0"},
{"content":{"body":" * PrepareForTailCall is going to just remain incoherent, I guess","m.new_content":{"body":"PrepareForTailCall is going to just remain incoherent, I guess","msgtype":"m.text"},"m.relates_to":{"event_id":"$EdjG-mc8-VpWnoV__KE9CsgwA8u7ok9gA8vtD15tTS0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1623009086408,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DKGW3rBrKv-ADcwrMmviiI6Zi0GmMm1ei4srbq_6UHM"},
{"content":{"body":"I've updated that comment in 2400.","msgtype":"m.text"},"ts":1623009215146,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$vlmP0-h5Lyr0nuCsoYg3ENWA41h1mCdtyxxsHfohfek"},
{"content":{"body":"I forget, where do you discuss PrepareForTailCall?","msgtype":"m.text"},"ts":1623010201841,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Gopn_M7SWc9TZm0iOqN5CUv8qpeRCm9ZEEh_8wWqH5w"},
{"content":{"body":"I don't","msgtype":"m.text"},"ts":1623010445401,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7gMvBqcal06pZANrvtch0LBvzZhTnl2gSTBTvGWTDho"},
{"content":{"body":"I've been ignoring it because it's obnoxious, basically","msgtype":"m.text"},"ts":1623010459995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2pLOFGFDsglUDz1kVPhCr73T_P-UVjLCb1l5zY06H9A"},
{"content":{"body":"what it _wants_ to say is, replace the current execution context with that of the new function, such that when you ultimately reach the Return algorithm step which would take you back to the `Let result be Call(...). Return result.` steps following this PrepareForTailCall, instead move control back to the most recent `Let result be OrdinaryCallEvaluateBody(...)` step, which is where the aforementioned `Return result.` step would have returned to","format":"org.matrix.custom.html","formatted_body":"what it <em>wants</em> to say is, replace the current execution context with that of the new function, such that when you ultimately reach the Return algorithm step which would take you back to the <code>Let result be Call(...). Return result.</code> steps following this PrepareForTailCall, instead move control back to the most recent <code>Let result be OrdinaryCallEvaluateBody(...)</code> step, which is where the aforementioned <code>Return result.</code> step would have returned to","msgtype":"m.text"},"ts":1623010727324,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BmZ7Y-E4ngGAKfLkYOsmxrDuYIMc0h6V67HVlEYp11U"},
{"content":{"body":"but the problem is that \"that of the new function\" isn't really coherent, and in fact not all function invocations push a new context as their first step - revoked proxies, in particular, do not","msgtype":"m.text"},"ts":1623010784326,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_Hasi-9Q3kCMXVJRZdFPH1913IWy3n00ZZLSnNU1tmM"},
{"content":{"body":"so, what PrepareForTailCall does instead is just pops the current execution context _without_ transferring control back to the underlying context, and continues execution into Call. When Call returns, you are supposed to understand that this transfers control back to the step which did OrdinaryCallEvaluateBody.","format":"org.matrix.custom.html","formatted_body":"so, what PrepareForTailCall does instead is just pops the current execution context <em>without</em> transferring control back to the underlying context, and continues execution into Call. When Call returns, you are supposed to understand that this transfers control back to the step which did OrdinaryCallEvaluateBody.","msgtype":"m.text"},"ts":1623010936958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DS17RBC_Oa75XhvXKsmPGlYnsDHBDcitS4pg7nONtnI"},
{"content":{"body":"\"the new function\" = the function passed to `Call` immediately after the invocation of PFTC?","format":"org.matrix.custom.html","formatted_body":"&quot;the new function&quot; = the function passed to <code>Call</code> immediately after the invocation of PFTC?","msgtype":"m.text"},"ts":1623010975394,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$IpBbnTOPm0xmQW501YldKZmg1HOUhGzLBkTDTv7_U_s"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1623011008071,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mbJ2boxY27h-crDFmKWDSgJ9RUEJ9oc_-vmOYbl-0Nc"},
{"content":{"body":"This involves EvaluateCall's Assert \"... the above call will not return here ...\"","msgtype":"m.text"},"ts":1623012441655,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$yu76ySFmIqNWEEyJT5NuSL6ozP-1CXRA21m5zQAQkz8"},
{"content":{"body":" * This involves EvaluateCall's Assert \"... the above call will not return here ...\"?","m.new_content":{"body":"This involves EvaluateCall's Assert \"... the above call will not return here ...\"?","msgtype":"m.text"},"m.relates_to":{"event_id":"$yu76ySFmIqNWEEyJT5NuSL6ozP-1CXRA21m5zQAQkz8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1623012609511,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$TaHibuGPSjtC0shAQPb7nETQQRAGEUgytS8baKNZ-tQ"},
{"content":{"body":"So it's similar to what I complain about in 2400, where manipulating the context stack is supposed to change where an operation will return to.","msgtype":"m.text"},"ts":1623012771778,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Wns0G252vy7YUiigBeydH8TTgERFh-I781zcGtF86k8"},
{"content":{"body":"Is tail-call optimization observable in the spec?","msgtype":"m.text"},"ts":1623013634314,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$3DBPOnmb25it8zNFz6q2faIPb49VJALtuGTTCliVsXs"},
{"content":{"body":"(I.e., did the addition of TailCall stuff to the spec change the behavior required of implementations?)","msgtype":"m.text"},"ts":1623013851721,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$-B3-XPx8c8xrEzKJynY0LqUeGmhgbyG_YbOfNCbcrgE"},
{"content":{"body":"Theoretically, yes, although more as a matter of social consensus than as a question of what's actually clear from the written specification: the TailCall stuff is supposed to require that implementations implement proper tail calls.","msgtype":"m.text"},"ts":1623015274636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iny7EFJ7krDIZn5PUURX4TUJZ11rEPwaiPlR5FIjydk"},
{"content":{"body":"i.e., to allow you to write code which depends on very deep recursion as long as each recursive call is in tail position","msgtype":"m.text"},"ts":1623015321312,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nhyBN34hd65LDRo0GSUjlF_b1PNZNUjLNR67ki-AjTM"},
{"content":{"body":"but since the spec as currently written does not have a notion of \"running out of stack space\", and since execution contexts are strictly a spec fiction, it's not entirely clear to me how the PrepareForTailCall stuff is supposed to require this","msgtype":"m.text"},"ts":1623015371596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xlhtRi_3oRR-HezDrBpGOiwsj0ACEUtktG4pATlVN1I"},
{"content":{"body":"however, as a stupid and I think unintentional side effect, it also has an effect on the realm used for the TypeError produced when invoking a revoked proxy","msgtype":"m.text"},"ts":1623015502471,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AcmPZscah71433HRVHEnSr6Z7PLsmoCmoqHTBJXiC0A"},
{"content":{"body":"when invoking such a proxy in tail position, that is","msgtype":"m.text"},"ts":1623015539491,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tCsutwxV1cmOimwCpOc8YigVPkFNJKfcZipVAdOW1m0"},
{"content":{"body":"previously it had a similar effect on the realm of the TypeError produced when invoking a class as a function, but that changed with the merge of https://github.com/tc39/ecma262/pull/2216.","msgtype":"m.text"},"ts":1623015562057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$67JgP_fOq2c2PH9IklpNfwXnlsQmrsnKY7Qo4YuU5ic"},
{"content":{"body":"(there's still incorrect test262 tests about this which I haven't been able to work up the willpower to fix, given how inane this corner of the spec is: https://github.com/tc39/test262/issues/2978 )","msgtype":"m.text"},"ts":1623015595924,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rjJJXO5eOmmMUuFDGfp8W7BFUQaB0vdHmMxxP8jPE4s"}
]