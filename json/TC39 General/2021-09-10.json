[
{"content":{"body":"is there a name for zipping iterators where the iteration goes until specifically the first iterator is empty","msgtype":"m.text"},"ts":1631300962822,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BSoOItbLXLkglWalSHU--CfTjUBb4SJa7A6q3xnHQJE"},
{"content":{"body":"instead of the shortest or longest iterator ","msgtype":"m.text"},"ts":1631300973833,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$JNKnPeMY9BomTAkue35L6w7f2kxc3Sra_v0LTnMWQyY"},
{"content":{"body":"I haven't heard of one, but `zip-first` is the obvious name from the standard naming scheme","format":"org.matrix.custom.html","formatted_body":"I haven't heard of one, but <code>zip-first</code> is the obvious name from the standard naming scheme","msgtype":"m.text"},"ts":1631301423428,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6lP4gny89XJm6Kz1gHGpu1FiZu4jqojjlw9goUKDNnM"},
{"content":{"body":"what do you do if the first one is shorter than the second?","msgtype":"m.text"},"ts":1631315733007,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E8XWh-dfoKmmqY_mPvaoGc10E0VRLYM8ttt43oP3jik"},
{"content":{"body":"stop, like a normal zip does","msgtype":"m.text"},"ts":1631316346929,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JWy-ESb5IHOIHOD0zWGIEqqwBOYm6_kFoFy9HO7SqEU"},
{"content":{"body":"(traditionally, zip stops at the length of the shortest input)","msgtype":"m.text"},"ts":1631316367423,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$K2-YQmcgAMSSXtZ5H_cxekS8UJISXVGJwP7sFQzdm14"},
{"content":{"body":"*longer, rather","msgtype":"m.text"},"ts":1631316403392,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o7XPwAPOw7PXedVJaszlQKnPMMFLUsWWyXD1bpyNh18"},
{"content":{"body":"if you meant the opposite case, where the first is longer than the second, then you need a default value for the additional iterators, just like `zip-longest` usually does <https://docs.python.org/3/library/itertools.html#itertools.zip_longest>","format":"org.matrix.custom.html","formatted_body":"if you meant the opposite case, where the first is longer than the second, then you need a default value for the additional iterators, just like <code>zip-longest</code> usually does <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\">https://docs.python.org/3/library/itertools.html#itertools.zip_longest</a>","msgtype":"m.text"},"ts":1631316421692,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pMEisoS88dtJUhrtUkkJuancLRt-QcJ3AyQ_j9oUgJo"},
{"content":{"body":"fascinating","msgtype":"m.text"},"ts":1631316440308,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Wu3nBlEjoMotSL4ng2SienPZYPNQqYJTKoVvVM7rWOM"},
{"content":{"body":"never seen that function before","msgtype":"m.text"},"ts":1631316443780,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0VgljU4_eeYC1IKGrpMKof9F7l8aCSpxIbGkaeP-n3c"},
{"content":{"body":"I get that response most of the time i pull out the itertools manual page","msgtype":"m.text"},"ts":1631316464109,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BJNQvdOMBXdPFISKZATRNjh7zPz8oIPDkZAZhBqU9lk"},
{"content":{"body":"I always written `zip(first, chain(second, repeat(default)))` or equivalents","format":"org.matrix.custom.html","formatted_body":"I always written <code>zip(first, chain(second, repeat(default)))</code> or equivalents","msgtype":"m.text"},"ts":1631316471413,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X-8BRwMuww2sVTjgIQj6nUlJtC59tiHOahTGOdzWi9M"},
{"content":{"body":"on reflection, I'm going to keep writing that, since it's composed of primitives people will have seen before instead of being a new thing","msgtype":"m.text"},"ts":1631316488273,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gWowHoam38qL5mR0XqF9ARhGSiAETgwAt-TPGGWYKas"},
{"content":{"body":"nothing wrong with that, tho it depends on knowing which one will end first (which you probably do usually know)","msgtype":"m.text"},"ts":1631316522322,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QrUAYnRM9vIehFHeznMuIpIoZOKQjqIUWDyu4vd6GLM"},
{"content":{"body":"sure is a lot of stuff in itertools","msgtype":"m.text"},"ts":1631316527235,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZxVCPJCHeLXVe6Dm_j1t8_dTzXBHjgCc7WYC6Az3y0g"},
{"content":{"body":"well, wait, no it doesn't - the second iterator is now infinite, so it'll always consume all of `first` and then stop. never mind.","format":"org.matrix.custom.html","formatted_body":"well, wait, no it doesn't - the second iterator is now infinite, so it'll always consume all of <code>first</code> and then stop. never mind.","msgtype":"m.text"},"ts":1631316557553,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GA-QCp11KZ96VnXyT0S6fVrKJgmR0TYXeRXEodZxLLA"},
{"content":{"body":"wait, hang on, does zip_longest not allow you to specify different values for the `first` and `second`?","format":"org.matrix.custom.html","formatted_body":"wait, hang on, does zip_longest not allow you to specify different values for the <code>first</code> and <code>second</code>?","msgtype":"m.text"},"ts":1631316573800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NoTl4zYeOsAS-1dWnhJK1zSoZodRrawtsGcQ6dnv0tw"},
{"content":{"body":"that seems like it would rarely be useful","msgtype":"m.text"},"ts":1631316577234,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gmJNaHj-PA4AjwGUF_J5R8qY1doNEdXO2rSjsGO4Dcg"},
{"content":{"body":"I feel like most of my zipping is of unlike types","msgtype":"m.text"},"ts":1631316582802,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hd2ezrw9xWt5eSDkj_QYQGCCO_R0MVpuqKudeVL4RP4"},
{"content":{"body":"correct, it doesn't. gotta chain if they're unlike types","msgtype":"m.text"},"ts":1631316600221,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$sr5UpMFg4rijdSkUAhNBpvzNqE_R-5PiZW9W7z_w22A"},
{"content":{"body":"huh","msgtype":"m.text"},"ts":1631316607742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bUwuWJvI56WzpZLXR89xT8HPfafqFu9DO8N7czlxmRg"}
]