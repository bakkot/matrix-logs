[
{"content":{"body":"\"this is so not zen\"","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$d7pjeoE8eCSlmPaZVoLwSSYAKgj1o1FmBU-Tmo8bm9I"}},"msgtype":"m.text"},"ts":1747637668060,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$KZgNlVHT1z1haQpoPjpmZjDXzPBwPj0PDNxpIfSTfI4"},
{"content":{"body":"The version I heard was that the comparison was between comprehensions and arrow functions, and people felt comprehensions didn't really add much once you had arrow functions and map/filter/etc.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hmFSospQg5Qy57Hh1UGPRlGnYzbNYUmx0atGrr5sJ78"}},"msgtype":"m.text"},"ts":1747641823871,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$j105lNKM5i6yGCtyf3sVyTVuPNWEELxDbyXWv0Nz3S4"},
{"content":{"body":"I think it was https://github.com/dherman/sudoku","m.mentions":{},"msgtype":"m.text"},"ts":1747641864916,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$LlpF_pvkG_jSjF7FmotulsO2l6ec5zuuylIzId6gY-E"},
{"content":{"body":"that would make sense","m.mentions":{},"msgtype":"m.text"},"ts":1747644001070,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$IlhhGUu8pO44kwsOuiv154CLFuL-Z58SDhyfan1Jyb4"},
{"content":{"body":"Python picked a weird horse in that race","m.mentions":{},"msgtype":"m.text"},"ts":1747644011953,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$hqAPJtdxYwc4CqOroM406qLw5SZili8t88s-6TOgNJw"},
{"content":{"body":"Given the limited power of lambdas in Python, I think they made the right one for them","msgtype":"m.text"},"ts":1747659748782,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$siP0CkNUpF7D_BPLbUbxkZq9TbW4gHk1jfW00X0nLAA"},
{"content":{"body":"ah I'd always viewed it as \"they made lambdas intentionally cumbersome such that comprehensions would become 'the one obvious way to do it'\"","m.mentions":{},"msgtype":"m.text"},"ts":1747664877880,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2zx3y0m6VZe1syH41RaBayifc-hvHAGVp_TIA1kSGGU"},
{"content":{"body":"not sure if that's a post-hoc rationalization though","m.mentions":{},"msgtype":"m.text"},"ts":1747664896490,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VDqXd5ZQg1Gmz29ZOnUYoZ0MimBWupVaQldji6rEp_k"},
{"content":{"body":"* ah I'd always viewed it as \"they made lambdas intentionally cumbersome such that comprehensions would be 'the one obvious way to do it'\"","m.mentions":{},"m.new_content":{"body":"ah I'd always viewed it as \"they made lambdas intentionally cumbersome such that comprehensions would be 'the one obvious way to do it'\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2zx3y0m6VZe1syH41RaBayifc-hvHAGVp_TIA1kSGGU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1747664933860,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$7ky1Lr6yTB0uuy-7VMGDlHP3ZiifLa9g3MFhHfu7EbI"},
{"content":{"body":"I think Python lambdas long predate comprehensions.","m.mentions":{},"msgtype":"m.text"},"ts":1747664975441,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$qir0p5A4CXUlVv1xcAZa0J6g1CbBN-SGVqhFNXkPvwQ"},
{"content":{"body":"I think either not existing must be prior to Python's popularity but I don't see a justification for making lambdas deliberately hard to use otherwise","m.mentions":{},"msgtype":"m.text"},"ts":1747665164358,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$okRVu1oyZ65Y3LSbgWHRrSI2PXrGGtikOiab4vf27I0"},
{"content":{"body":"lambdas were 1.0, comprehensions were 2.0","m.mentions":{},"msgtype":"m.text"},"ts":1747665174307,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$BxGKrZcNy86wd8MitoqF3EZQnju26KTiFgfkNYvpWUE"},
{"content":{"body":"Whenever I write Python I tend to avoid lambdas and comprehensions, though I won't rewrite them away after some copypasta. Certainly aspects of the language I like less. (Though the 2 to 3 switch I still dislike the most of all things Python ever did.)","m.mentions":{},"msgtype":"m.text"},"ts":1747665183142,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$ZX3T0seGl2cRHfJI0nQRneoD1J4g24bFJrUjNUrBADE"},
{"content":{"body":"Hey all... trying to decide if a new proposal is worthwhile... Node.js recently received a request to add APIs to the `Buffer` interface that would allow a `Buffer` to maintain an internal position for relative writes.. for instance, the following code:\n\n```\nconst buf = Buffer.alloc(10);\nlet pos = 0;\nbuf.writeInt8(1, pos++);\nbuf.writeInt8(2, pos++);\n// ..\n```\n\nwould become\n\n```\nconst buf = Buffer.alloc(10);\nbuf.writeInt8(1);\nbuf.writeInt8(2);\n// ..\n```\n\nOr something similar, with the `pos` identifying the offset being held by an internal slot.\n\nThere is, however, a preference within Node.js to avoid adding further to the `Buffer` API and we would instead prefer to see a mechanism added to the standard `DataView` for this purpose. The proposal would be to add a new `[[WriteOffset]]` internal slot and variations on the `setXXXXX` and `getXXXX` APIs that make use of it... for instance:\n\n```\nconst dv = new DataView(new ArrayBuffer(10));\ndv.writeInt8(1);\ndv.writeInt8(2);\n// ...\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<p>Hey all... trying to decide if a new proposal is worthwhile... Node.js recently received a request to add APIs to the <code>Buffer</code> interface that would allow a <code>Buffer</code> to maintain an internal position for relative writes.. for instance, the following code:</p>\n<pre><code>const buf = Buffer.alloc(10);\nlet pos = 0;\nbuf.writeInt8(1, pos++);\nbuf.writeInt8(2, pos++);\n// ..\n</code></pre>\n<p>would become</p>\n<pre><code>const buf = Buffer.alloc(10);\nbuf.writeInt8(1);\nbuf.writeInt8(2);\n// ..\n</code></pre>\n<p>Or something similar, with the <code>pos</code> identifying the offset being held by an internal slot.</p>\n<p>There is, however, a preference within Node.js to avoid adding further to the <code>Buffer</code> API and we would instead prefer to see a mechanism added to the standard <code>DataView</code> for this purpose. The proposal would be to add a new <code>[[WriteOffset]]</code> internal slot and variations on the <code>setXXXXX</code> and <code>getXXXX</code> APIs that make use of it... for instance:</p>\n<pre><code>const dv = new DataView(new ArrayBuffer(10));\ndv.writeInt8(1);\ndv.writeInt8(2);\n// ...\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1747671363578,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg"},
{"content":{"body":"This idea is that by building this into `DataView`, user code could avoid potentially buggy bookkeeping around the position","format":"org.matrix.custom.html","formatted_body":"This idea is that by building this into <code>DataView</code>, user code could avoid potentially buggy bookkeeping around the position","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747671394913,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$icYcTO0bAzVVFL6mmWuTNWE2n0-NSJkHEecPbG0mpHA"},
{"content":{"body":"But it's certainly not clear if there's enough motivation to formulate a full proposal","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$icYcTO0bAzVVFL6mmWuTNWE2n0-NSJkHEecPbG0mpHA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747671414280,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$bHNS0b11wFGCGNXeaYXh4hEHFZtPg6Cx4hhMd6YSa_k"},
{"content":{"body":"i don't think it would be a good idea to add statefulness anywhere, personally","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$bHNS0b11wFGCGNXeaYXh4hEHFZtPg6Cx4hhMd6YSa_k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747672224249,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uDWilyDPNiyLbioX6a-3M2ctBZ45ph4hyNraOwxlJVM"},
{"content":{"body":"the `pos++` code seems pretty simple as it is","format":"org.matrix.custom.html","formatted_body":"the <code>pos++</code> code seems pretty simple as it is","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$uDWilyDPNiyLbioX6a-3M2ctBZ45ph4hyNraOwxlJVM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747672232880,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KGfo9wi-LLiWA9HV2L2bjPzP0ePpqCj2ex5IlQ7qp_k"},
{"content":{"body":"it becomes a bit awkward and error prone when writing multiple values of different sizes but I share the concern about the statefulness. ","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$KGfo9wi-LLiWA9HV2L2bjPzP0ePpqCj2ex5IlQ7qp_k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747672363845,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$WqiEba25PddEZw-hPt1DdG0PvriUvw3XfMbPKWGECOE"},
{"content":{"body":"fwiw, here's the relevant issue in Node.js https://github.com/nodejs/node/issues/58348","m.mentions":{},"m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$WqiEba25PddEZw-hPt1DdG0PvriUvw3XfMbPKWGECOE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747672489408,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$yRZ3kpOhW1D-6N5w3nB4C4YzO3kQgv-6GTCJgI7zCUA"},
{"content":{"body":"I was just gonna say \"this sounds like they were inspired by Java's ByteBuffer\", then I open the issue and that's exactly what they said","m.mentions":{},"msgtype":"m.text"},"ts":1747675023943,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fsOwaIIwf63APzhEGgAE-TRWP35RLfA6H5QN_hNDzWQ"},
{"content":{"body":"I'd say they should use DataView and if they're concerned about the bookkeeping being messy, they should separate their business logic from the code that's responsible for serialisation to a bytestring so they're not interleaved","m.mentions":{},"msgtype":"m.text"},"ts":1747675391708,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0JiZGMFuW3ASjOUVPMXKVe7aNc4ygkO-FzzUSEV1hv4"},
{"content":{"body":"This seems like it'd be awkward to fit onto the DataView API; either you'd have new APIs that move the cursor, or have some mode that makes the cursor move when the existing write APIs are called... At index 0? No, I guess new APIs are the only choice.","m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$yRZ3kpOhW1D-6N5w3nB4C4YzO3kQgv-6GTCJgI7zCUA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747675726317,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$Y9xkvvHh3rFVtoVwgrXYdEavEud55tQP3bx9kE_1maY"},
{"content":{"body":"8 bytes more memory on DataView isn't too horrible, it's a rare object after all, but I guess the non-interaction between the cursor and the existing APIs would be somewhat weird.","m.relates_to":{"event_id":"$s8fZYyzJATgMVoSf8EQpxzA0JSDM5V43NXOxeziJ_sg","is_falling_back":true,"m.in_reply_to":{"event_id":"$Y9xkvvHh3rFVtoVwgrXYdEavEud55tQP3bx9kE_1maY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1747675807012,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$d9r9sCW7DaW80suw9seBAv0e0i8YYVoY_PSLjP2A0M8"},
{"content":{"body":"That seems similar to how RegExp has .lastIndex, do we consider it something good or a mistake?","msgtype":"m.text"},"ts":1747676179320,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZekSF-bLGUXwTLDpRMFmxfWfMx6-Ce_xCdinrSF_5Es"},
{"content":{"body":"I definitely consider it a mistake","m.mentions":{},"msgtype":"m.text"},"ts":1747676342716,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y-KFbzPAINx1m-Pfw8574iuqijiweBYb68z6_RDgB3c"},
{"content":{"body":"but a wrapper class which took a regexp and also kept an index would be fine","m.mentions":{},"msgtype":"m.text"},"ts":1747676362832,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DWOgOnfE1PMaBSfvAEG8YjCulm3jXkE7QsLjak0VzfQ"},
{"content":{"body":"similarly, I don't think DataView should have an offset, but I would be fine with having a different class which kept an offset","m.mentions":{},"msgtype":"m.text"},"ts":1747676408553,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$baSebmi3ICMWg8niqr09ME3FoNx9Rn1-GAtzhLuMe4k"},
{"content":{"body":"we shouldn't retrofit DataView","m.mentions":{},"msgtype":"m.text"},"ts":1747676469758,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tvLHc4u22IFuFvNpzISrXa6W77S1sVwau_R9t_tusn0"},
{"content":{"body":"> Claude, please write me a wrapper for DataView in JS which keeps an internal offset which is updated when calling read/write methods, like Java's ByteBuffer. Also add a method for reading/writing TypedArrays (writing should use a wrapper TypedArray, with appropriate offsets, so that you can `.set`  the entire argument instead of needing to write individual values).\n\nhttps://gist.github.com/bakkot/6726adcf9ed361790d1063b41dbf4148","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Claude, please write me a wrapper for DataView in JS which keeps an internal offset which is updated when calling read/write methods, like Java's ByteBuffer. Also add a method for reading/writing TypedArrays (writing should use a wrapper TypedArray, with appropriate offsets, so that you can <code>.set</code>  the entire argument instead of needing to write individual values).</p>\n</blockquote>\n<p>https://gist.github.com/bakkot/6726adcf9ed361790d1063b41dbf4148</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1747676477761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BW8YXK8ZNXoanVXbHmTIfjxBRVdx0DvRk-5nEg1IvHk"},
{"content":{"body":"this seems perfectly fine to be done in userland?","m.mentions":{},"msgtype":"m.text"},"ts":1747676490512,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xFXMypq6uNi9jimeRseuR7YsKi0MLUD-cY3v4Ah0Zwc"},
{"content":{"body":"not sure why it warrants a built-in","m.mentions":{},"msgtype":"m.text"},"ts":1747676499979,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iluHpgvPqeNhneL5X0QLCgXr-4M0MDoRKCzGCu4HVdw"},
{"content":{"body":"that said I don't think this is worth adding to the language; the current state of things is fine and it's not hard to do","m.mentions":{},"msgtype":"m.text"},"ts":1747676503641,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qCu25ZTDxVFx50izwslBBC2G5k1mmJjrO3BCh0H94D4"},
{"content":{"body":"not even done in userland, actually, Node can ship a thing if it thinks it's useful","m.mentions":{},"msgtype":"m.text"},"ts":1747676592319,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wbDQu4zSUDTtNrf9lvaz2XZFc6mUZntstrlx5hTlAHY"},
{"content":{"body":"(unless it also doesn't want to do so unilaterally anymore due to other server runtimes. not sure what the situation is)","m.mentions":{},"msgtype":"m.text"},"ts":1747676608013,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x6ewzdlKPTbJW7pjqRKb0ZMowZnRDe3BjonXpcqFWhw"}
]