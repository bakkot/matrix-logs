[
{"content":{"body":"Has there ever been discussion of adding _very common_ functions to the standard. In particular `noop` and `identity`? Is a palatable to propose adding something like `Function.noop` and `Function.identity` to the standard, so people stop creating `() => {}` and `x => x` over and over in their libraries and codebases?","format":"org.matrix.custom.html","formatted_body":"Has there ever been discussion of adding <em>very common</em> functions to the standard. In particular <code>noop</code> and <code>identity</code>? Is a palatable to propose adding something like <code>Function.noop</code> and <code>Function.identity</code> to the standard, so people stop creating <code>() =&gt; {}</code> and <code>x =&gt; x</code> over and over in their libraries and codebases?","msgtype":"m.text"},"ts":1695318470937,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$q43fx0GLz4TGz6uiZS6wxXMmGP6lK-uHznHpZcE2Z0s"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1695318575890,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PJj0g_swAo0VQyl7_EoSz3TlyMwVfT3_Abx909BudBc"},
{"content":{"body":"i tried doing that early in my tc39 time, and before i even got to proposal stage nobody found it valuable. engines seem pretty good at optimizing `() => {}`","format":"org.matrix.custom.html","formatted_body":"i tried doing that early in my tc39 time, and before i even got to proposal stage nobody found it valuable. engines seem pretty good at optimizing <code>() =&gt; {}</code>","msgtype":"m.text"},"ts":1695318595975,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fEbDogZ8NRaQ9oNMqNqsA6fmGi1UkE7oKwawiwfWu1E"},
{"content":{"body":"Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :) ","format":"org.matrix.custom.html","formatted_body":"Interesting. I mean the next thing I'd ask for would be a <code>Function.pipe</code> but given the discussion over <code>|&gt;</code> I suspect that wouldn't go over. :)","msgtype":"m.text"},"ts":1695318665641,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$Bfnzu03oQFrUH7-JCSmMSqn85E6PlrI-8UjWuPWLm2g"},
{"content":{"body":"unrelated to pipe, that was rejected on its own merits, let me find the link","msgtype":"m.text"},"ts":1695318725323,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VmJvcZ6DcYRUsNIzXA9P-OsLNmu4vgLlBe7HHF0HPgg"},
{"content":{"body":"https://github.com/tc39/proposal-function-pipe-flow","msgtype":"m.text"},"ts":1695318734994,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4gudhs5lkpZ6QHWfnIQZPaCaR4xdmzR-k3OrShsi_eI"},
{"content":{"body":"ah, i guess not unrelated to pipe","msgtype":"m.text"},"ts":1695318747008,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mEvj2bpuxTMLbV5b0q5zcCfm4z8FPlagscPooqBOGvM"},
{"content":{"body":" * ah, i guess not entirely unrelated to pipe","m.new_content":{"body":"ah, i guess not entirely unrelated to pipe","msgtype":"m.text"},"m.relates_to":{"event_id":"$mEvj2bpuxTMLbV5b0q5zcCfm4z8FPlagscPooqBOGvM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695318847226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yyuYN-Lv0T1MZ71rSGikDwGViQ9I1u7CMT5Olh23LLM"},
{"content":{"body":"Yeah, that's pretty much exactly what I'm proposing. Haha. Disappointing but not at all surprising. ðŸ˜…","msgtype":"m.text"},"ts":1695319132824,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$Dk8wRlkFSgNUfRFd_r5JLP8qr_Paoa6Szzfb3G-B9TE"},
{"content":{"body":"Have there been any updates to the `::` bind proposal? That's been dead-ish since about 2015, I think.","format":"org.matrix.custom.html","formatted_body":"Have there been any updates to the <code>::</code> bind proposal? That's been dead-ish since about 2015, I think.","msgtype":"m.text"},"ts":1695319207783,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$BqOQ8Gjpj-5ZwK6noMvx2ZZMcyYQ53NsjMkjAZ_iMvM"},
{"content":{"body":"https://github.com/tc39/proposal-bind-operator .. seems still dead.","msgtype":"m.text"},"ts":1695319286789,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$cJOGsH3ipNQoaslJVNZRU9mjDZTZZmaHVfNtMhEfcD0"},
{"content":{"body":"> <@benlesh:matrix.org> Has there ever been discussion of adding _very common_ functions to the standard. In particular `noop` and `identity`? Is a palatable to propose adding something like `Function.noop` and `Function.identity` to the standard, so people stop creating `() => {}` and `x => x` over and over in their libraries and codebases?\n\nWe already have noop, it's just got a weird name `Function.prototype` ðŸ«£","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24q43fx0GLz4TGz6uiZS6wxXMmGP6lK-uHznHpZcE2Z0s\">In reply to</a> <a href=\"https://matrix.to/#/@benlesh:matrix.org\">@benlesh:matrix.org</a><br>Has there ever been discussion of adding <em>very common</em> functions to the standard. In particular <code>noop</code> and <code>identity</code>? Is a palatable to propose adding something like <code>Function.noop</code> and <code>Function.identity</code> to the standard, so people stop creating <code>() =&gt; {}</code> and <code>x =&gt; x</code> over and over in their libraries and codebases?</blockquote></mx-reply>We already have noop, it's just got a weird name `Function.prototype` ðŸ«£","m.relates_to":{"m.in_reply_to":{"event_id":"$q43fx0GLz4TGz6uiZS6wxXMmGP6lK-uHznHpZcE2Z0s"}},"msgtype":"m.text"},"ts":1695319444943,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0ELkFFQR7Vp3rJA48fJxWVs3V5tbXZpC7xrzC0zugLc"},
{"content":{"body":"> <@benlesh:matrix.org> Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :)\n\nI think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows over reading a call to `pipe`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Bfnzu03oQFrUH7-JCSmMSqn85E6PlrI-8UjWuPWLm2g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benlesh:matrix.org\">@benlesh:matrix.org</a><br>Interesting. I mean the next thing I'd ask for would be a <code>Function.pipe</code> but given the discussion over <code>|&gt;</code> I suspect that wouldn't go over. :)</blockquote></mx-reply>I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows over reading a call to <code>pipe</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Bfnzu03oQFrUH7-JCSmMSqn85E6PlrI-8UjWuPWLm2g"}},"msgtype":"m.text"},"ts":1695319580653,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F1cZ6GWPk_MlnQC3imbPX7sB7ThXNqIGGe6O2mV1TZE"},
{"content":{"body":"> <@benlesh:matrix.org> Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :)\n\n * I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows or chained calls over reading a call to `pipe`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Bfnzu03oQFrUH7-JCSmMSqn85E6PlrI-8UjWuPWLm2g?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benlesh:matrix.org\">@benlesh:matrix.org</a><br>Interesting. I mean the next thing I'd ask for would be a <code>Function.pipe</code> but given the discussion over <code>|&gt;</code> I suspect that wouldn't go over. :)</blockquote></mx-reply> * I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows or chained calls over reading a call to <code>pipe</code>","m.new_content":{"body":"I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows or chained calls over reading a call to `pipe`","format":"org.matrix.custom.html","formatted_body":"I think if the syntax proposal dies there's at least some chance the stdlib function might come back, though tbh I kind of prefer reading chained arrows or chained calls over reading a call to <code>pipe</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$F1cZ6GWPk_MlnQC3imbPX7sB7ThXNqIGGe6O2mV1TZE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695319595028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$COiSE1pMaG3lSMucVuW4e2AFNacIRjlsyN31MISFdZg"},
{"content":{"body":"Haha. Yeah, I used to do that trick, but i got tired of explaining it to people. Also passing it around is like `noop.lol = 'wee'` and everyone has `fn.lol` from then on.  Or `delete noop.call` ","format":"org.matrix.custom.html","formatted_body":"Haha. Yeah, I used to do that trick, but i got tired of explaining it to people. Also passing it around is like <code>noop.lol = 'wee'</code> and everyone has <code>fn.lol</code> from then on.  Or <code>delete noop.call</code>","msgtype":"m.text"},"ts":1695319600363,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$ZUD6tJ8CBzXgW0jV_34s_rn3rpqTgrOJnJXy0E-3x7w"},
{"content":{"body":"Well, the current `|>` proposal makes me sad. I really don't like it at all... which historically means it will do well in the TC39.  In fact, if you all want me to be a fortune teller, you could just point me at a proposal, and if I don't like it, it's probably going to Stage 2 minimum. If I do like it, it'll be stuck in Stage 1 forever. ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"Well, the current <code>|&gt;</code> proposal makes me sad. I really don't like it at all... which historically means it will do well in the TC39.  In fact, if you all want me to be a fortune teller, you could just point me at a proposal, and if I don't like it, it's probably going to Stage 2 minimum. If I do like it, it'll be stuck in Stage 1 forever. ðŸ˜…","msgtype":"m.text"},"ts":1695319946761,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$jd298JdbCEgGLqEZHPgUXh6ovaFUjnX2UdVnT0Z_hRk"},
{"content":{"body":"I have a proposal idea. If your fortune telling rates are resonance I'll DM you ðŸ˜Ž","format":"org.matrix.custom.html","formatted_body":"I have a proposal idea. If your fortune telling rates are resonance I'll DM you ðŸ˜Ž","m.relates_to":{"event_id":"$jd298JdbCEgGLqEZHPgUXh6ovaFUjnX2UdVnT0Z_hRk","is_falling_back":true,"m.in_reply_to":{"event_id":"$jd298JdbCEgGLqEZHPgUXh6ovaFUjnX2UdVnT0Z_hRk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695320379483,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yecuig0o0QEWSVIUWYau4dmLRMnqdhF22sNLH7vNG1M"},
{"content":{"body":"* I have a proposal idea. If your fortune telling rates are reasonable  I'll DM you ðŸ˜Ž","format":"org.matrix.custom.html","formatted_body":"* I have a proposal idea. If your fortune telling rates are reasonableÂ Â I'll DM you ðŸ˜Ž","m.new_content":{"body":"I have a proposal idea. If your fortune telling rates are reasonable  I'll DM you ðŸ˜Ž","format":"org.matrix.custom.html","formatted_body":"I have a proposal idea. If your fortune telling rates are reasonableÂ Â I'll DM you ðŸ˜Ž","msgtype":"m.text"},"m.relates_to":{"event_id":"$yecuig0o0QEWSVIUWYau4dmLRMnqdhF22sNLH7vNG1M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695320394046,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$8tPTP4gYPKMGTia4ePsVJEM5mPr2Bs-ZLWEjUloMZeY"},
{"content":{"body":"> <@benlesh:matrix.org> Have there been any updates to the `::` bind proposal? That's been dead-ish since about 2015, I think.\n\nyes! https://github.com/tc39/proposal-call-this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$BqOQ8Gjpj-5ZwK6noMvx2ZZMcyYQ53NsjMkjAZ_iMvM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benlesh:matrix.org\">@benlesh:matrix.org</a><br>Have there been any updates to the <code>::</code> bind proposal? That's been dead-ish since about 2015, I think.</blockquote></mx-reply>yes! https://github.com/tc39/proposal-call-this","m.relates_to":{"m.in_reply_to":{"event_id":"$BqOQ8Gjpj-5ZwK6noMvx2ZZMcyYQ53NsjMkjAZ_iMvM"}},"msgtype":"m.text"},"ts":1695320421162,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dsXp2G4QKvhDd1PR3lL7r-r0awy5q_09pXSv6Gvci4A"},
{"content":{"body":"> <@ljharb:matrix.org> yes! https://github.com/tc39/proposal-call-this\n\nI like it! Therefor it's dead at the next discussion. Sorry.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$dsXp2G4QKvhDd1PR3lL7r-r0awy5q_09pXSv6Gvci4A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes! https://github.com/tc39/proposal-call-this</blockquote></mx-reply>I like it! Therefor it's dead at the next discussion. Sorry.","m.relates_to":{"m.in_reply_to":{"event_id":"$dsXp2G4QKvhDd1PR3lL7r-r0awy5q_09pXSv6Gvci4A"}},"msgtype":"m.text"},"ts":1695320553036,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$YkH2FZOjG3VS56owZ6kt6g82Z-wNK1f-Yw77BGFJ95w"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1695320586071,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0diYRvfYS_i5f86GsWvhrGBBSezQkBQWaQm70d31yaE"},
{"content":{"body":"there's a variant of it that tab has suggested as well","msgtype":"m.text"},"ts":1695320595800,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BZ-3O7QMhpxuKU8PL1_adYwnTTnQ0uXY3VGs8bBfzmg"},
{"content":{"body":"fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or `::` being on a likely path to advancement, if that helps","format":"org.matrix.custom.html","formatted_body":"fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or <code>::</code> being on a likely path to advancement, if that helps","msgtype":"m.text"},"ts":1695320626861,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ue9g2kU3boYkQLXCNRKmsWm0cczgL5Payks0yYKslAs"},
{"content":{"body":"> <@ljharb:matrix.org> fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or `::` being on a likely path to advancement, if that helps\n\nI care more that I get something I can prepare for reasonably, and something that doesn't make code that is hitting libraries I'm responsible for _more_ verbose (and arguably less readable).  So what happens with `|>` at this point, I guess I don't care because I have very little use for that in anything I'm working on at the moment. `~>` or the like, on the other hand ARE interesting to me, and it's plausible that RxJS and other libraries could pivot that way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Ue9g2kU3boYkQLXCNRKmsWm0cczgL5Payks0yYKslAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>fwiw i made it pretty clear at pipeline advancing to stage 2 that a requirement for going to stage 3 was something like call-this or <code>::</code> being on a likely path to advancement, if that helps</blockquote></mx-reply>I care more that I get something I can prepare for reasonably, and something that doesn't make code that is hitting libraries I'm responsible for <em>more</em> verbose (and arguably less readable).  So what happens with <code>|&gt;</code> at this point, I guess I don't care because I have very little use for that in anything I'm working on at the moment. <code>~&gt;</code> or the like, on the other hand ARE interesting to me, and it's plausible that RxJS and other libraries could pivot that way.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ue9g2kU3boYkQLXCNRKmsWm0cczgL5Payks0yYKslAs"}},"msgtype":"m.text"},"ts":1695320990622,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$wXLrn5Irfn5rlvjNYluysdGO3r5ltpKKMLAAzT8ls60"},
{"content":{"body":"I want neither of these things :(","msgtype":"m.text"},"ts":1695321508426,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FU_SFpTFB3IGwepe4MIiIy6WDCQoNCmOI-RFUOXhrWU"},
{"content":{"body":"I would've been OK with pipe if there was a version which made everyone happy, but there isn't","msgtype":"m.text"},"ts":1695321533198,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a6i__o9mYL3_UBaYHVGhqV0rGgTZDfuAZwWADnVytiE"},
{"content":{"body":"the call-this operator I am still confused why people think it's a good idea despite me being like a 98%ile user of `.call`","format":"org.matrix.custom.html","formatted_body":"the call-this operator I am still confused why people think it's a good idea despite me being like a 98%ile user of <code>.call</code>","msgtype":"m.text"},"ts":1695321549315,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kOa4ZwfRvAupe-IlJLyQh3QTcr8rJPW5EOQHh2_g5Is"},
{"content":{"body":"I'd only want call-this because pipeline is wrong, TBH. I'm looking to see if there are ways to prep libraries that compose like RxJS does for either the current pipeline proposal or call-this. Current pipeline proposal isn't something people can engineer towards right now in an ergonomic way... We might be able to with call-this though. Still experimenting for my use cases.","msgtype":"m.text"},"ts":1695321702766,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$owqSuGYBzYOpxePwh9OCwnVvPwyU5QkVM0vldvMcO7A"},
{"content":{"body":"it's a good idea because of the order being wrong with .call, and also syntax is undeniable and robust, which is pretty important for invoking functions","msgtype":"m.text"},"ts":1695321872839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D12qRlpSHBqsGLGBrcLwd7jmiZjpIPYKkE4uXAp2-80"},
{"content":{"body":"\"syntax is undeniable and robust\" is important to rounds-to-0% of programs","msgtype":"m.text"},"ts":1695321935816,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-nNf8bGEL1Jn6mj1PYfC4qfaz92s76HX11-prq6Zpr0"},
{"content":{"body":"For those programs (like Node.js core), the performance cost of uncurryThis is good to avoid.","msgtype":"m.text"},"ts":1695322024935,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8IUhyehJlnKIDrDr7ygbhr20n6teZWQ_eR7V1WaXkxs"},
{"content":{"body":"if you're trying to be defensive against people mutating builtins you have to run first cache all of the other standard library stuff anyway, at which point a.) your ergonomics are already shot and b.) caching `call` in addition is a very small burden","format":"org.matrix.custom.html","formatted_body":"if you're trying to be defensive against people mutating builtins you have to run first cache all of the other standard library stuff anyway, at which point a.) your ergonomics are already shot and b.) caching <code>call</code> in addition is a very small burden","msgtype":"m.text"},"ts":1695322052110,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zNMqlWh4mvBOvybSiFOlR3-dzrx50B-gG0lEs06jtPM"},
{"content":{"body":"> <@kriskowal:matrix.org> For those programs (like Node.js core), the performance cost of uncurryThis is good to avoid.\n\nyou may be interested in https://github.com/nodejs/TSC/issues/1438","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8IUhyehJlnKIDrDr7ygbhr20n6teZWQ_eR7V1WaXkxs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>For those programs (like Node.js core), the performance cost of uncurryThis is good to avoid.</blockquote></mx-reply>you may be interested in https://github.com/nodejs/TSC/issues/1438","m.relates_to":{"m.in_reply_to":{"event_id":"$8IUhyehJlnKIDrDr7ygbhr20n6teZWQ_eR7V1WaXkxs"}},"msgtype":"m.text"},"ts":1695322089477,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$07MNj4ciGqf9vMTeO7J3HJol7KP6iNl3bWv1xa4D1WE"},
{"content":{"body":"it's important to a MUCH larger percentage than that, because they transitively run code they didn't author","msgtype":"m.text"},"ts":1695322130096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8JIrsFmgNttW_VC7hGz_g3sjrPF0GE-5weXU8CFc6U0"},
{"content":{"body":"the reason node wants to remove primordials isn't because robustness doesn't matter, it's because the current approach sucks for ergonomics and perf","msgtype":"m.text"},"ts":1695322159131,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BzR_NyWWrGgaR0grH7rQCDGhUn4MIQ-v9ErdykNlw8s"},
{"content":{"body":"call-this, specifically, would be a huge benefit for node, which would help quite a lot of programs.","msgtype":"m.text"},"ts":1695322175001,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C8JpyFHH9Y8WGZBSN1GjnT-yqziBXf3GRLpl4n_E980"},
{"content":{"body":"just because a program has a dependency which makes use of a particular feature doesn't mean that the feature is important to the program","msgtype":"m.text"},"ts":1695322193835,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AD-OMXEmM1A7DGM4OHVRt-w6s3zosmZMXHOmK-dZuuk"},
{"content":{"body":"it may be - as it is in this case - that the dependency is using something so that it can provide a guarantee (e.g. \"robust against other code on the page messing with built-ins) which the actual program doesn't care about","msgtype":"m.text"},"ts":1695322234037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RgDJTsW9U5tzUQEK96S0ST1yknbwjIhWYNOtddKQyh0"},
{"content":{"body":"it would be odd for javascript to accept defeat as a safe sandbox language in the face of supply chain attacks when itâ€™s the closest language to winning and the most important field to win.","msgtype":"m.text"},"ts":1695322337053,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qfESnRJ_WIXmmcQUXalZN-k62Kn0YPPE_mTDsKvyYDI"},
{"content":{"body":"true. but the program also may only be *able* to not care about it because that guarantee is already provided without them knowing","format":"org.matrix.custom.html","formatted_body":"true. but the program also may only be <em>able</em> to not care about it because that guarantee is already provided without them knowing","msgtype":"m.text"},"ts":1695322342060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VFAMj2R1ZsQ-eBFHuQE_aYUb4mTg2uQF7IluV6ZfOXI"},
{"content":{"body":"it's a really strange argument to me that because people don't yet care about robustness, the language shouldn't make it maximally easy and performant to be robust.","msgtype":"m.text"},"ts":1695322371026,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C_7TcWiug442F8DsuOGesuI7THWCO-WUObWU1yhdekg"},
{"content":{"body":"> <@kriskowal:matrix.org> it would be odd for javascript to accept defeat as a safe sandbox language in the face of supply chain attacks when itâ€™s the closest language to winning and the most important field to win.\n\n\"you have to use `.call`\" is not \"accepting defeat as a safe sandbox language\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qfESnRJ_WIXmmcQUXalZN-k62Kn0YPPE_mTDsKvyYDI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>it would be odd for javascript to accept defeat as a safe sandbox language in the face of supply chain attacks when itâ€™s the closest language to winning and the most important field to win.</blockquote></mx-reply>\"you have to use <code>.call</code>\" is not \"accepting defeat as a safe sandbox language\"","m.relates_to":{"m.in_reply_to":{"event_id":"$qfESnRJ_WIXmmcQUXalZN-k62Kn0YPPE_mTDsKvyYDI"}},"msgtype":"m.text"},"ts":1695322377699,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DAPFSZ0qlbaV7_yK2iEd6mXIJ4UIX7n8LEHJr8wxsyw"},
{"content":{"body":"> <@ljharb:matrix.org> it's a really strange argument to me that because people don't yet care about robustness, the language shouldn't make it maximally easy and performant to be robust.\n\nno feature that we ever add to the language is going to cause people to write anything other than `array.push`, nor should it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$C_7TcWiug442F8DsuOGesuI7THWCO-WUObWU1yhdekg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it&#39;s a really strange argument to me that because people don&#39;t yet care about robustness, the language shouldn&#39;t make it maximally easy and performant to be robust.</blockquote></mx-reply>no feature that we ever add to the language is going to cause people to write anything other than <code>array.push</code>, nor should it","m.relates_to":{"m.in_reply_to":{"event_id":"$C_7TcWiug442F8DsuOGesuI7THWCO-WUObWU1yhdekg"}},"msgtype":"m.text"},"ts":1695322409637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eapN-oU2WPsvFaBxykZR8VWlGpa7WROvBALfBH2Y5hU"},
{"content":{"body":"you canâ€™t use .call. You have to use uncurryThis, which frustrates optimization.","msgtype":"m.text"},"ts":1695322415485,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yQEq6ABpYGKBzFHwGihvOpArCuS4y6tIXZ4Qv4m_ZRU"},
{"content":{"body":"\"engines haven't optimized userland uncurryThis\" is also not \"accepting defeat as a safe sandbox language\"","msgtype":"m.text"},"ts":1695322459729,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jj1-V2Mw5O0ndZKT56eREPoNC2FrY4UHvmZBjcT0H0Q"},
{"content":{"body":"> <@bakkot:matrix.org> no feature that we ever add to the language is going to cause people to write anything other than `array.push`, nor should it\n\non this we agree, at least, but it doesnâ€™t completely eliminate the need for fast call bind for some foundational code that has to run before the prototypes can be made immutable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$eapN-oU2WPsvFaBxykZR8VWlGpa7WROvBALfBH2Y5hU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>no feature that we ever add to the language is going to cause people to write anything other than <code>array.push</code>, nor should it</blockquote></mx-reply>on this we agree, at least, but it doesnâ€™t completely eliminate the need for fast call bind for some foundational code that has to run before the prototypes can be made immutable.","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$eapN-oU2WPsvFaBxykZR8VWlGpa7WROvBALfBH2Y5hU"}},"msgtype":"m.text"},"ts":1695322524329,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$w4fW2fYut31EZfXPOpaKczgoduiaWg-aqu-gid_AJAU"},
{"content":{"body":"engines optimizing uncurryThis would also be an acceptable outcome.","msgtype":"m.text"},"ts":1695322552153,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$CdIZ_xP8C3Ih5rJjZDwfxq8guWi16v1YuosIorm_7QA"},
{"content":{"body":"> <@ljharb:matrix.org> true. but the program also may only be *able* to not care about it because that guarantee is already provided without them knowing\n\nthey are already relying on `array.push()` working in their own program, so the fact that the dependency wants to be robust against people mutating `Array.prototype` is completely irrelevant to their program","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VFAMj2R1ZsQ-eBFHuQE_aYUb4mTg2uQF7IluV6ZfOXI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>true. but the program also may only be <em>able</em> to not care about it because that guarantee is already provided without them knowing</blockquote></mx-reply>they are already relying on <code>array.push()</code> working in their own program, so the fact that the dependency wants to be robust against people mutating <code>Array.prototype</code> is completely irrelevant to their program","m.relates_to":{"m.in_reply_to":{"event_id":"$VFAMj2R1ZsQ-eBFHuQE_aYUb4mTg2uQF7IluV6ZfOXI"}},"msgtype":"m.text"},"ts":1695322552631,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tNIleAx3IvPu8rVPLGW4PCG2kkJD-z1EaBzFBa_HgNs"},
{"content":{"body":"so, no. they are able to not care because it does not in fact matter in practice in almost any program.","msgtype":"m.text"},"ts":1695322570994,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$02hTbV5AF8I0hdIhoorfcYBzFguQZdqi59XCxd0g8ow"},
{"content":{"body":"> <@kriskowal:matrix.org> engines optimizing uncurryThis would also be an acceptable outcome.\n\nA _stdlib_ proposal for `uncurryThis` and similar would be fine by me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$CdIZ_xP8C3Ih5rJjZDwfxq8guWi16v1YuosIorm_7QA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>engines optimizing uncurryThis would also be an acceptable outcome.</blockquote></mx-reply>A <em>stdlib</em> proposal for <code>uncurryThis</code> and similar would be fine by me","m.relates_to":{"m.in_reply_to":{"event_id":"$CdIZ_xP8C3Ih5rJjZDwfxq8guWi16v1YuosIorm_7QA"}},"msgtype":"m.text"},"ts":1695322592131,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g40ZtCIfQ_PMRVfP_EnVC-PDwWvI1vqDmuoXxJfYlhc"},
{"content":{"body":"just not syntax","msgtype":"m.text"},"ts":1695322595603,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PpUC5YHy6c8fd3cs6hIt4yr5Qv3gH2EfnZSOwO5MyMg"},
{"content":{"body":"(wasn't there one, actually?)","msgtype":"m.text"},"ts":1695322606163,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xAhFZI387KrVR2qc1cviJZh9PyV25q7jfOQIWjX_j-M"},
{"content":{"body":"ah https://github.com/js-choi/proposal-function-demethodize","msgtype":"m.text"},"ts":1695322689733,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ig5GL4Tlu6yovD-mS5sgQ4CFS8D_BrHuFy-AO-AvgJo"},
{"content":{"body":"not all programs mutate arrays.","msgtype":"m.text"},"ts":1695322773069,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7_N-AU45gVWnSmF-YLqHhfV4QQTRVufED_Feh0LsznE"},
{"content":{"body":"very nearly all programs are written in a style which assumes builtins are intact.","msgtype":"m.text"},"ts":1695322858059,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$byenxXdihiyZCV7zWRjyAgs9vlZceiWlGL7hx6IuN8c"},
{"content":{"body":"as well they should.","msgtype":"m.text"},"ts":1695322860981,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-P8foDArFC6WNQtz9Vls72iGEQHGHQq3fPEStV7_3IA"},
{"content":{"body":"no feature we ever add to the language is going to cause people to write in a way which does not assume that, nor should it.","msgtype":"m.text"},"ts":1695322893622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HItIaEhaZZPearc-zHWDceUz1WOhNjhPLao3zJfPu3U"},
{"content":{"body":"i see no argument that suggests anyone here holds the contrary position","msgtype":"m.text"},"ts":1695323010667,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RgolK6pVm-0namF7DSQ1c-mE41d0NAo3wukRXV0rqN0"},
{"content":{"body":"the specific claim I am defending is\n\n> \"syntax is undeniable and robust\" is important to rounds-to-0% of programs\n","format":"org.matrix.custom.html","formatted_body":"<p>the specific claim I am defending is</p>\n<blockquote>\n<p>\"syntax is undeniable and robust\" is important to rounds-to-0% of programs</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1695323039725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VCvzP0WC592CcUEI3Zp5qE_kZq-81NYBmNguf2GTEqM"},
{"content":{"body":"but i for one propose that under some conditions it is both valuable and possible to not only assume theyâ€™re in tact, but to make it possible to rely on their being in tact.","msgtype":"m.text"},"ts":1695323054348,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6-5h0yuPWcThF4b9lfIe5KIbuqIbAQjpo0QmQq4fTN0"},
{"content":{"body":"i agree that very few existing programs rely on the immutability of shared primordials, but thatâ€™s circular. they are rare because of the economics of security, which we are in a position to adjust.","msgtype":"m.text"},"ts":1695323180555,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$76eGOePnVXecaZWSoYMdpm1weiATmQ64j1TY0VCd13M"},
{"content":{"body":"I am ok with exploring adjustments which don't require people to completely change the style in which they write their programs, for sure","msgtype":"m.text"},"ts":1695323230622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZtzZHlKdrE9eghH6x9Snt81FAkodCvU_pzAMFXi5u1Q"},
{"content":{"body":"however, that does not include the call-this proposal","msgtype":"m.text"},"ts":1695323237812,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LdcJUG7-l_kVsX6dHeMJ-Jre8xTDBTJnSJesVtnD-Rs"},
{"content":{"body":"and on that, i think you and i at least agree that a non-syntactic solution is acceptable","msgtype":"m.text"},"ts":1695323287436,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yNF-3VvrXYsc2V0XPPegAyS0F1qGaH990vgEuqlLxjw"},
{"content":{"body":"i merely disagree that the winning argument is based on the unimportance of defending language integrity in mutitenant (read: effectively all) programs","msgtype":"m.text"},"ts":1695323448240,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yT9p66zgS6hbA-tKob7KyGEq9kMQnqQQHi0XbYzLg1E"},
{"content":{"body":"the winning argument is that itâ€™s possible to achieve that goal without syntax that a minority of programs will need to use before making intrinsics immutable","msgtype":"m.text"},"ts":1695323508943,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uDMqpkG4bUQosfVtJkzpRodoFrWDKBOYsxmCW3WD3iw"},
{"content":{"body":"and in some flavors, systems like airgap would prefer to accept the ergonomic cost of using a call-bind pattern pervasively _instead_ of making intrinsics immutable.","format":"org.matrix.custom.html","formatted_body":"and in some flavors, systems like airgap would prefer to accept the ergonomic cost of using a call-bind pattern pervasively <em>instead</em> of making intrinsics immutable.","msgtype":"m.text"},"ts":1695323585112,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KMOwx4sp4RdDnxxJ4Jyn8m1J2dro_0ucxzqUWG_U8Ds"},
{"content":{"body":"if that's the path forward you'd also need to ensure making intrinsics immutable doesn't break everything, which is... demonstrably tricky","msgtype":"m.text"},"ts":1695323617233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Al9VnYibFxH-4wcwT7u0NfB68RrXyI2wRQ5X2go1fm4"},
{"content":{"body":"for sure","msgtype":"m.text"},"ts":1695323657633,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$sBWZCcY_-EYRUZVlRy98cK7fjb-ADir8Husy4_5hzyE"},
{"content":{"body":"not as bad as youâ€™d think for specific applications, but override mistake is certainly a recurring theme in herding the ecosystem into the safe subset.","msgtype":"m.text"},"ts":1695323713235,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iBYxBs_gBNbiPsGdJlTpm1W7gjXg7Jn9ml9E_ly1jvs"},
{"content":{"body":"at the very least it entails replacing everything with accessors, doesn't it?","msgtype":"m.text"},"ts":1695323751811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3ljQii8LLw3jwLF3tyMzlR5cFsLeqCMOoK42OEOATD0"},
{"content":{"body":"which is... oof","msgtype":"m.text"},"ts":1695323754764,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pZTRUKaQoTMA1W7EPQwETY8K5ak3v5JchxXjUXartOw"}
]