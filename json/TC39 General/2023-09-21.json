[
{"content":{"body":"Has there ever been discussion of adding _very common_ functions to the standard. In particular `noop` and `identity`? Is a palatable to propose adding something like `Function.noop` and `Function.identity` to the standard, so people stop creating `() => {}` and `x => x` over and over in their libraries and codebases?","format":"org.matrix.custom.html","formatted_body":"Has there ever been discussion of adding <em>very common</em> functions to the standard. In particular <code>noop</code> and <code>identity</code>? Is a palatable to propose adding something like <code>Function.noop</code> and <code>Function.identity</code> to the standard, so people stop creating <code>() =&gt; {}</code> and <code>x =&gt; x</code> over and over in their libraries and codebases?","msgtype":"m.text"},"ts":1695318470937,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$q43fx0GLz4TGz6uiZS6wxXMmGP6lK-uHznHpZcE2Z0s"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1695318575890,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PJj0g_swAo0VQyl7_EoSz3TlyMwVfT3_Abx909BudBc"},
{"content":{"body":"i tried doing that early in my tc39 time, and before i even got to proposal stage nobody found it valuable. engines seem pretty good at optimizing `() => {}`","format":"org.matrix.custom.html","formatted_body":"i tried doing that early in my tc39 time, and before i even got to proposal stage nobody found it valuable. engines seem pretty good at optimizing <code>() =&gt; {}</code>","msgtype":"m.text"},"ts":1695318595975,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fEbDogZ8NRaQ9oNMqNqsA6fmGi1UkE7oKwawiwfWu1E"},
{"content":{"body":"Interesting. I mean the next thing I'd ask for would be a `Function.pipe` but given the discussion over `|>` I suspect that wouldn't go over. :) ","format":"org.matrix.custom.html","formatted_body":"Interesting. I mean the next thing I'd ask for would be a <code>Function.pipe</code> but given the discussion over <code>|&gt;</code> I suspect that wouldn't go over. :)","msgtype":"m.text"},"ts":1695318665641,"senderName":"Ben Lesh","senderId":"@benlesh:matrix.org","id":"$Bfnzu03oQFrUH7-JCSmMSqn85E6PlrI-8UjWuPWLm2g"},
{"content":{"body":"unrelated to pipe, that was rejected on its own merits, let me find the link","msgtype":"m.text"},"ts":1695318725323,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VmJvcZ6DcYRUsNIzXA9P-OsLNmu4vgLlBe7HHF0HPgg"},
{"content":{"body":"https://github.com/tc39/proposal-function-pipe-flow","msgtype":"m.text"},"ts":1695318734994,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4gudhs5lkpZ6QHWfnIQZPaCaR4xdmzR-k3OrShsi_eI"},
{"content":{"body":"ah, i guess not unrelated to pipe","msgtype":"m.text"},"ts":1695318747008,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mEvj2bpuxTMLbV5b0q5zcCfm4z8FPlagscPooqBOGvM"},
{"content":{"body":" * ah, i guess not entirely unrelated to pipe","m.new_content":{"body":"ah, i guess not entirely unrelated to pipe","msgtype":"m.text"},"m.relates_to":{"event_id":"$mEvj2bpuxTMLbV5b0q5zcCfm4z8FPlagscPooqBOGvM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695318847226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yyuYN-Lv0T1MZ71rSGikDwGViQ9I1u7CMT5Olh23LLM"}
]