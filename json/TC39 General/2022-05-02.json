[
{"content":{"body":"I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the `forEach` methods just visit every entry \"live\" and can potentially run forever if the callback keeps adding entries.","format":"org.matrix.custom.html","formatted_body":"I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the <code>forEach</code> methods just visit every entry &quot;live&quot; and can potentially run forever if the callback keeps adding entries.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the `forEach` methods just visit every entry \"live\" and can potentially run forever if the callback keeps adding entries.","mimetype":"text/plain"},{"body":"I'm translating the Map/Set prototype methods over to WebIDL-ese (so we can define maplikes and setlikes in terms of Infra maps and sets, rather than doing weird and fraught indirections to actual ES Maps and Sets), and I noticed that while the @@iterator for them records the initial length and only iterates to that length at max (can stop earlier if things are deleted so it hits the end before that point), the <code>forEach</code> methods just visit every entry &quot;live&quot; and can potentially run forever if the callback keeps adding entries.","mimetype":"text/html"}]},"ts":1651520233040,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tFw2qeWPGFopflMQEVfdD4nK44p-_U3N544B3cjJG6Q"},
{"content":{"body":"Is this behavior difference intentional?","msgtype":"m.text","org.matrix.msc1767.text":"Is this behavior difference intentional?"},"ts":1651520241583,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9w24S8gPvuUaySPii-TNQ8Nyosdp75rwJYrdTYi021M"},
{"content":{"body":"uh","msgtype":"m.text","org.matrix.msc1767.text":"uh"},"ts":1651520610619,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jd4eMw2uxn5KdhpD7zjC7mc6DSYpUBzG1iiwK-2D71c"},
{"content":{"body":"that's probably a bug from when we refactored those","msgtype":"m.text","org.matrix.msc1767.text":"that's probably a bug from when we refactored those"},"ts":1651520615503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3yNFE1m-MBBQJR4_LD0cDvXGvNSTcCzFS4w2ZXoBi8U"},
{"content":{"body":" * that's probably a bug from when we refactored those","m.new_content":{"body":"that's probably a bug from when we refactored those","msgtype":"m.text","org.matrix.msc1767.text":"that's probably a bug from when we refactored those"},"m.relates_to":{"event_id":"$3yNFE1m-MBBQJR4_LD0cDvXGvNSTcCzFS4w2ZXoBi8U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * that's probably a bug from when we refactored those"},"ts":1651520624682,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$miq7_gc2xjZwBGiAYgBoLFv7f121nvo4dLOpej3l5Tk"},
{"content":{"body":"oh, wait, no it's not","msgtype":"m.text","org.matrix.msc1767.text":"oh, wait, no it's not"},"ts":1651520641233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WcXkvpkeX2XtdJpaU32Lx52NuoyI1rktH_6JJdxXC24"},
{"content":{"body":"you missed a step:","msgtype":"m.text","org.matrix.msc1767.text":"you missed a step:"},"ts":1651520644055,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6vR_BX2rTHawoQbkhlGAwa_qnHKUQ3k1NiZeuxIp9ho"},
{"content":{"body":"CreateMapIterator step 2.d.iii.6: Set numEntries to the number of elements of entries.","msgtype":"m.text","org.matrix.msc1767.text":"CreateMapIterator step 2.d.iii.6: Set numEntries to the number of elements of entries."},"ts":1651520661127,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wcyldLBLeIH-hlq3EC5L8DJP3_jnA-ewZDgv-Q8CQ3w"},
{"content":{"body":"Right, I mentioned that.","msgtype":"m.text","org.matrix.msc1767.text":"Right, I mentioned that."},"ts":1651520676312,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$g75ZIghoYveioSHJK77AhAE7gosbfVgcOOEMyP6jncg"},
{"content":{"body":"no, that's in the loop","msgtype":"m.text","org.matrix.msc1767.text":"no, that's in the loop"},"ts":1651520690553,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t8Hqo-IRmebNWr-NU4sOoi3grK70aojwQDlC1Hytm_g"},
{"content":{"body":"it updates numEntries within the loop","msgtype":"m.text","org.matrix.msc1767.text":"it updates numEntries within the loop"},"ts":1651520703292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CJDGxVtIS-ZkdWYPrrGCdCtTHjtP7uoYyAHme0eSWyA"}
]