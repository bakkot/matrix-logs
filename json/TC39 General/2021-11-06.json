[
{"content":{"body":"^^ That's how I do it with prettier and eslint","msgtype":"m.text"},"ts":1636163591114,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AVOFq4tGrTJ9g0WueYaWX18ZUBZc9i6saiB2CuB7rbc"},
{"content":{"body":"I've never seen a good CST system yet","msgtype":"m.text"},"ts":1636163609542,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_V-BZ33UNnpt78FZXiFZcnz8WOk6Dz3Bd4a1mFk0Oic"},
{"content":{"body":"Rome is apparently trying with Red/Green Trees: https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust","msgtype":"m.text"},"ts":1636163716515,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dj3hIZUOcMDqszIhti-VM45lIjqWIiggxGhSipnLoM4"},
{"content":{"body":"oh interesting, thanks for the link","msgtype":"m.text"},"ts":1636170693951,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$vkJE2ZfQrka8Npa5yOfMrmqlsYGXBHfbRKw5p97jTM8"},
{"content":{"body":"Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\nDo the set up callbacks go in some JS callback space as closures, where they can be called or what?","msgtype":"m.text"},"ts":1636192801101,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$VWe5b86gizo7z48ecpWHk7av8zg2jLhlOo24uLD9Xhk"},
{"content":{"body":" * Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS callback space as closures, where they can be called or what?","m.new_content":{"body":"Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS callback space as closures, where they can be called or what?","msgtype":"m.text"},"m.relates_to":{"event_id":"$VWe5b86gizo7z48ecpWHk7av8zg2jLhlOo24uLD9Xhk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636195003684,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$-IPjF77F12h7YxhBxn33nrahJejZFVg_3vTO14YPBI0"},
{"content":{"body":" * Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?","m.new_content":{"body":"Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?","msgtype":"m.text"},"m.relates_to":{"event_id":"$VWe5b86gizo7z48ecpWHk7av8zg2jLhlOo24uLD9Xhk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636195122323,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$ppZijkk_pZ2JiVTuB5fqbTTSg-PsAtUyPovC8nd5c8o"},
{"content":{"body":" * Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\n\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?","m.new_content":{"body":"Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\n\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDo the set up callback closures go in some JS closures space with some internal ID, where they get referenced by the task in event loop queue and invoked when its time?","msgtype":"m.text"},"m.relates_to":{"event_id":"$VWe5b86gizo7z48ecpWHk7av8zg2jLhlOo24uLD9Xhk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636195125487,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$TICx-w45aM8YPVvxGgx_UUbB4hisv4LO-mR1y5o7jpw"},
{"content":{"body":" * Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\n\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDoes the set up callback closures go in some separate JS-closures-memory-space and gets assigned some reference? This reference is used by the task in the task queue, and when it's its time to run, the task says to the engine to put the referenced closure on the main thread?","m.new_content":{"body":"Can someone help me understand how \"browser's built-in API callbacks\" work? For example when I define websocket's onmessage, or fetch callback.\n\nFor example with fetch. this is basically a promise which when resolved needs to process the then callback with the result. The callback closure is defined at the time of \"then\" method invocation.\nDoes the set up callback closures go in some separate JS-closures-memory-space and gets assigned some reference? This reference is used by the task in the task queue, and when it's its time to run, the task says to the engine to put the referenced closure on the main thread?","msgtype":"m.text"},"m.relates_to":{"event_id":"$VWe5b86gizo7z48ecpWHk7av8zg2jLhlOo24uLD9Xhk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636196335062,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$tBreozIJTKAn3Y6baII56tYtBK9Gm8FUcvZuOFZmypI"},
{"content":{"body":"I think your understanding is correct. Though there isn’t necessarily a need for a “separate JS-closures-memory-space”. Closures can be objects that live on the same JS heap as the other JS objects. And host-integrations can keep references to JS objects that will be compatible with the JS garbage collector.","msgtype":"m.text"},"ts":1636203396402,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Sg3g0FmdHDvTDn8EkL8iLWjdmaU2kmg9rA7qAFE0NW4"},
{"content":{"body":"> <@aclaymore:matrix.org> I think your understanding is correct. Though there isn’t necessarily a need for a “separate JS-closures-memory-space”. Closures can be objects that live on the same JS heap as the other JS objects. And host-integrations can keep references to JS objects that will be compatible with the JS garbage collector.\n\nyea, later i realized this might be more natural","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Sg3g0FmdHDvTDn8EkL8iLWjdmaU2kmg9rA7qAFE0NW4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I think your understanding is correct. Though there isn’t necessarily a need for a “separate JS-closures-memory-space”. Closures can be objects that live on the same JS heap as the other JS objects. And host-integrations can keep references to JS objects that will be compatible with the JS garbage collector.</blockquote></mx-reply>yea, later i realized this might be more natural","m.relates_to":{"m.in_reply_to":{"event_id":"$Sg3g0FmdHDvTDn8EkL8iLWjdmaU2kmg9rA7qAFE0NW4"}},"msgtype":"m.text"},"ts":1636203827786,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$LCzjnQr1CvObzWOyhbJuhrH-x9ie6bhPPnLxr2nNY1M"},
{"content":{"body":"The only difference is that these objects are not referenced from JS \"context\" but from outside of the context","msgtype":"m.text"},"ts":1636203862081,"senderName":"vrafaeli","senderId":"@vrafaeli:matrix.org","id":"$rSy7txzprHn__gxxK1XtPmaB_vsVksyPlXZrS1h1Xbc"}
]