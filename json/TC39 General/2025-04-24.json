[
{"content":{"body":"If a string cannot be allocated, what exception should be thrown? Should it be RangeError to match the ArrayBuffer case?","m.mentions":{},"msgtype":"m.text"},"ts":1745493104115,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$QxcE640n7Akq2CvKVutaokSlTYB6bNfhW2CuX44nkNI"},
{"content":{"body":"Would anyone here happen to have more intimate knowledge of how SpiderMonkey's `Number.prototype.toString` works with non-10 bases? I'm stuck at `(1.7976931348623157e308).toString(3)`: a naïve \"divide by 3 until 0\" implementation gives one answer which is equal to what Ladybird's result is, but SM and V8 both disagree with this answer to their own ends:\n\nFor V8, the result has a huge number of 0s at the end, basically saying \"you can't know what the digits here are anyway since this isn't a safe number, so we'll just not try to show them\". But! If turned into a BigInt and using `BigInt.prototype.toString` then a different, more accurate answer appears. For SM, the result for either case is the same as V8's BigInt version. Ladybird's BigInt version also agrees with this.\n\nI _think_ SM's version of `Number.prototype.toString` seems to be the most accurate and I'd like to reproduce it, but am unable to find the code that they run.","format":"org.matrix.custom.html","formatted_body":"<p>Would anyone here happen to have more intimate knowledge of how SpiderMonkey's <code>Number.prototype.toString</code> works with non-10 bases? I'm stuck at <code>(1.7976931348623157e308).toString(3)</code>: a naïve \"divide by 3 until 0\" implementation gives one answer which is equal to what Ladybird's result is, but SM and V8 both disagree with this answer to their own ends:</p>\n<p>For V8, the result has a huge number of 0s at the end, basically saying \"you can't know what the digits here are anyway since this isn't a safe number, so we'll just not try to show them\". But! If turned into a BigInt and using <code>BigInt.prototype.toString</code> then a different, more accurate answer appears. For SM, the result for either case is the same as V8's BigInt version. Ladybird's BigInt version also agrees with this.</p>\n<p>I <em>think</em> SM's version of <code>Number.prototype.toString</code> seems to be the most accurate and I'd like to reproduce it, but am unable to find the code that they run.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1745500286216,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$6D3xLyaeb_Zu0TO5cTFHmocBKiKiuO-d0ajAwrPVW_Q"}
]