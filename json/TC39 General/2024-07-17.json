[
{"content":{"body":"that aspect may not have been made clear to those objectors tho; asynccontext is a tough proposal to grok imo","m.mentions":{},"msgtype":"m.text"},"ts":1721186197286,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5LIJMwV2T26T0-tmusLpmLuY25DCVwXQt0U1L6xwwGs"},
{"content":{"body":"> <@shuyuguo:matrix.org> since then, i suppose those objectors have gotten over the philosophical objection that it was tantamount to unacceptabel dynamic scope, given the enthusiasm about AsyncContext\n\nMark did a rather rigorous analysis of AsyncContext last year to settle those objections preemptively. I was taking a walk with my neighbor Malte Ubl who mentioned Vercel had hired Justin and that he was excited to push AsyncContext. My first thought was that our friendship might not endure that tension, but I arranged for Mark and Justin to talk thru how the design addresses OCap concerns over four or so meetings and we’re good now. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24fdgb3nMBuOmD9ATx99rPvM3S8nWUJDhp31uK07EgymA\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>since then, i suppose those objectors have gotten over the philosophical objection that it was tantamount to unacceptabel dynamic scope, given the enthusiasm about AsyncContext</blockquote></mx-reply>Mark did a rather rigorous analysis of AsyncContext last year to settle those objections preemptively. I was taking a walk with my neighbor Malte Ubl who mentioned Vercel had hired Justin and that he was excited to push AsyncContext. My first thought was that our friendship might not endure that tension, but I arranged for Mark and Justin to talk thru how the design addresses OCap concerns over four or so meetings and we’re good now.","m.relates_to":{"m.in_reply_to":{"event_id":"$fdgb3nMBuOmD9ATx99rPvM3S8nWUJDhp31uK07EgymA"}},"msgtype":"m.text"},"ts":1721188856000,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$UsRi3q_fWA49j-_4rLzR-McFsO7Rh_3mTI5_7bsmJw0"},
{"content":{"body":"Enthusiastic even, since we need such a thing for causal tracing. ","format":"org.matrix.custom.html","formatted_body":"Enthusiastic even, since we need such a thing for causal tracing.","msgtype":"m.text"},"ts":1721188920989,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$v0J81OuRUQDGzK4fc92ylpLVBFTz0uPPHouL1A_LDHk"},
{"content":{"body":"> <@abotella:igalia.com> the other half of what they do seems to be making it so the dynamic import in ``Promise.resolve('import(`./example.mjs`)').then(eval);`` resolves relative to the script active when the promise job is enqueued\n\nI believe the dynamic import *should* be resolved in the context of the script associated with the environment record internal slot on the globalThis.eval in the lexical scope. Else, bug.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$mPnz6DNjyowmCUEw5qHP1e8kOQBS6jVaHsUaOrBwAag?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>the other half of what they do seems to be making it so the dynamic import in <code>Promise.resolve('import(`./example.mjs`)').then(eval);</code> resolves relative to the script active when the promise job is enqueued</blockquote></mx-reply>I believe the dynamic import <em>should</em> be resolved in the context of the script associated with the environment record internal slot on the globalThis.eval in the lexical scope. Else, bug.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mPnz6DNjyowmCUEw5qHP1e8kOQBS6jVaHsUaOrBwAag"}},"msgtype":"m.text"},"ts":1721189504491,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$4ctb16I8aLhDzjVIbcxQu44IHxBnFI9w4-rWPto07uI"},
{"content":{"body":"Also https://github.com/tc39/ecma262/issues/3160","m.mentions":{},"msgtype":"m.text"},"ts":1721189525019,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2De1GGMdiYv7ov2u5v4B3wFzAKNXQ-TUg0ZbVkloymo"},
{"content":{"body":"> <@shuyuguo:matrix.org> since then, i suppose those objectors have gotten over the philosophical objection that it was tantamount to unacceptabel dynamic scope, given the enthusiasm about AsyncContext\n\nI'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$fdgb3nMBuOmD9ATx99rPvM3S8nWUJDhp31uK07EgymA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />since then, i suppose those objectors have gotten over the philosophical objection that it was tantamount to unacceptabel dynamic scope, given the enthusiasm about AsyncContext</blockquote></mx-reply>I'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.","m.relates_to":{"m.in_reply_to":{"event_id":"$fdgb3nMBuOmD9ATx99rPvM3S8nWUJDhp31uK07EgymA"}},"msgtype":"m.text"},"ts":1721196021966,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3d1OOiNLo1_NPmi9cy7wSuK5PTU9MCzuZzgDTilYwAw"},
{"content":{"body":"That is the same kind of concern I raised with the Signals proposal as currently designed.","msgtype":"m.text"},"ts":1721196208517,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cczbKB9Fa63rE7RXmHA5WLzOd1C1eJvVjkok13r7czc"},
{"content":{"body":"> <@mhofman:matrix.org> I'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.\n\nI don't fully understand the whole incumbent realms thing, but from what I've looked at, it doesn't seem like that would be any different from having a userland library and scheduler that uses AsyncContext variables under the hood to know whether to expose something or other","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$3d1OOiNLo1_NPmi9cy7wSuK5PTU9MCzuZzgDTilYwAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.</blockquote></mx-reply>I don't fully understand the whole incumbent realms thing, but from what I've looked at, it doesn't seem like that would be any different from having a userland library and scheduler that uses AsyncContext variables under the hood to know whether to expose something or other","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3d1OOiNLo1_NPmi9cy7wSuK5PTU9MCzuZzgDTilYwAw"}},"msgtype":"m.text"},"ts":1721209196976,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$VWBkaNtET8o05-M7AiHmvgGVcS8nGD0h1k89Rj0iL84"},
{"content":{"body":"> <@kriskowal:aelf.land> I believe the dynamic import *should* be resolved in the context of the script associated with the environment record internal slot on the globalThis.eval in the lexical scope. Else, bug.\n\nSeems like we are all in agreement, great to have an idea about how this relates to evaluators, which I hadn’t thought through","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%244ctb16I8aLhDzjVIbcxQu44IHxBnFI9w4-rWPto07uI\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>I believe the dynamic import <em>should</em> be resolved in the context of the script associated with the environment record internal slot on the globalThis.eval in the lexical scope. Else, bug.</blockquote></mx-reply>Seems like we are all in agreement, great to have an idea about how this relates to evaluators, which I hadn’t thought through","m.relates_to":{"m.in_reply_to":{"event_id":"$4ctb16I8aLhDzjVIbcxQu44IHxBnFI9w4-rWPto07uI"}},"msgtype":"m.text"},"ts":1721215708089,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Bk6xus0_A51ZnyB_EKGBaVugbBti4TYtkY04qIqevm4"},
{"content":{"body":"> <@mhofman:matrix.org> That is the same kind of concern I raised with the Signals proposal as currently designed.\n\nOh I thought the signals concern was about certain leaks that were fixable, not the general mechanism ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24cczbKB9Fa63rE7RXmHA5WLzOd1C1eJvVjkok13r7czc\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>That is the same kind of concern I raised with the Signals proposal as currently designed.</blockquote></mx-reply>Oh I thought the signals concern was about certain leaks that were fixable, not the general mechanism","m.relates_to":{"m.in_reply_to":{"event_id":"$cczbKB9Fa63rE7RXmHA5WLzOd1C1eJvVjkok13r7czc"}},"msgtype":"m.text"},"ts":1721215754757,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1DGjx80ridu3vlN4C3lDWdHHy-cXdFi1sidmSYAx2WQ"},
{"content":{"body":"> <@mhofman:matrix.org> I'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.\n\nCan you say why?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%243d1OOiNLo1_NPmi9cy7wSuK5PTU9MCzuZzgDTilYwAw\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I'd like to clarify that exposing AsyncContext as a feature is not the same as allowing a host or the 262 spec itself to use the AsyncContext mechanism to create a variable and make the state of that variable observable in any way. That is still completely unacceptable from an Ocap and dynamic scoping pov.</blockquote></mx-reply>Can you say why?","m.relates_to":{"m.in_reply_to":{"event_id":"$3d1OOiNLo1_NPmi9cy7wSuK5PTU9MCzuZzgDTilYwAw"}},"msgtype":"m.text"},"ts":1721215761811,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8miw-GruisfQY1uCAIec43dXU0Q1fTEQjl2PH8BlLQI"},
{"content":{"body":"And if this is terrible for JS to do, is it terrible for the web to do?","msgtype":"m.text"},"ts":1721215871213,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GZvw35Rq6ve0Em0oYeNjYfXluTF--WfQ5awOC_VNPGA"},
{"content":{"body":"> <@abotella:igalia.com> I don't fully understand the whole incumbent realms thing, but from what I've looked at, it doesn't seem like that would be any different from having a userland library and scheduler that uses AsyncContext variables under the hood to know whether to expose something or other\n\nAnd that is the problem. A library or user code can use AsyncContext all it wants. The spec could use an AsyncContext variable as long as it doesn't make it observable, which is roughly the same as saying it cannot. It's the same as saying user code can freely create global mutable variables, but the spec only can if it doesn't make them observable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VWBkaNtET8o05-M7AiHmvgGVcS8nGD0h1k89Rj0iL84?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br />I don't fully understand the whole incumbent realms thing, but from what I've looked at, it doesn't seem like that would be any different from having a userland library and scheduler that uses AsyncContext variables under the hood to know whether to expose something or other</blockquote></mx-reply>And that is the problem. A library or user code can use AsyncContext all it wants. The spec could use an AsyncContext variable as long as it doesn't make it observable, which is roughly the same as saying it cannot. It's the same as saying user code can freely create global mutable variables, but the spec only can if it doesn't make them observable.","m.relates_to":{"m.in_reply_to":{"event_id":"$VWBkaNtET8o05-M7AiHmvgGVcS8nGD0h1k89Rj0iL84"}},"msgtype":"m.text"},"ts":1721223985008,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$b47mAK_odEi9ID2fDChFH0rhTD2Tv_n0nNkPZRCb8Sg"},
{"content":{"body":"> <@littledan:matrix.org> Can you say why?\n\nBecause observable global mutable state is bad? More specifically it enables 2 parties that have not been explicitly introduced to communicate using ambient powers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8miw-GruisfQY1uCAIec43dXU0Q1fTEQjl2PH8BlLQI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Can you say why?</blockquote></mx-reply>Because observable global mutable state is bad? More specifically it enables 2 parties that have not been explicitly introduced to communicate using ambient powers.","m.relates_to":{"m.in_reply_to":{"event_id":"$8miw-GruisfQY1uCAIec43dXU0Q1fTEQjl2PH8BlLQI"}},"msgtype":"m.text"},"ts":1721224244862,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$t22GKelusKn1x1r0Da1fZ5mekSEmRCk-8sD-LtG8Jfg"},
{"content":{"body":"So, are you upset about scheduler.yield(), which does this?","msgtype":"m.text"},"ts":1721224401128,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TwA6_-OsQq1RSkBPH_-rjNEWfcQ5-cgGwH5C6gJ_B50"},
{"content":{"body":"> <@littledan:matrix.org> Oh I thought the signals concern was about certain leaks that were fixable, not the general mechanism \n\nMy concern with Signals are about leaks of global mutable state. Whether they're fixable or not, I still don't know, but you and the champions did seem optimistic. Maybe there was a misunderstanding in the nature of the leak?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$1DGjx80ridu3vlN4C3lDWdHHy-cXdFi1sidmSYAx2WQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Oh I thought the signals concern was about certain leaks that were fixable, not the general mechanism</blockquote></mx-reply>My concern with Signals are about leaks of global mutable state. Whether they're fixable or not, I still don't know, but you and the champions did seem optimistic. Maybe there was a misunderstanding in the nature of the leak?","m.relates_to":{"m.in_reply_to":{"event_id":"$1DGjx80ridu3vlN4C3lDWdHHy-cXdFi1sidmSYAx2WQ"}},"msgtype":"m.text"},"ts":1721224405228,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OoJNLGoGCc60pjkE9fRZhMw5Z8LqxB6weCih1-l63e0"},
{"content":{"body":"> <@mhofman:matrix.org> My concern with Signals are about leaks of global mutable state. Whether they're fixable or not, I still don't know, but you and the champions did seem optimistic. Maybe there was a misunderstanding in the nature of the leak?\n\nYeah in particular I am wondering if there are any leaks without the subtle APIs, so without currentComputed or introspection ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24OoJNLGoGCc60pjkE9fRZhMw5Z8LqxB6weCih1-l63e0\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>My concern with Signals are about leaks of global mutable state. Whether they're fixable or not, I still don't know, but you and the champions did seem optimistic. Maybe there was a misunderstanding in the nature of the leak?</blockquote></mx-reply>Yeah in particular I am wondering if there are any leaks without the subtle APIs, so without currentComputed or introspection","m.relates_to":{"m.in_reply_to":{"event_id":"$OoJNLGoGCc60pjkE9fRZhMw5Z8LqxB6weCih1-l63e0"}},"msgtype":"m.text"},"ts":1721224461013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vmIurpEWJVpyGRXhnZYx3G98ZdhWVhx9ry49F0N7dH0"},
{"content":{"body":"> <@littledan:matrix.org> So, are you upset about scheduler.yield(), which does this?\n\nI wasn't aware of this API but in general the web has a lot of APIs that are not Ocap friendly and ambiently expose I/O or mutable state. That's the prerogative of the host, as long as it doesn't affect 262 behavior. One problem with the above is that it affects module resolution. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$TwA6_-OsQq1RSkBPH_-rjNEWfcQ5-cgGwH5C6gJ_B50?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />So, are you upset about scheduler.yield(), which does this?</blockquote></mx-reply>I wasn't aware of this API but in general the web has a lot of APIs that are not Ocap friendly and ambiently expose I/O or mutable state. That's the prerogative of the host, as long as it doesn't affect 262 behavior. One problem with the above is that it affects module resolution.","m.relates_to":{"m.in_reply_to":{"event_id":"$TwA6_-OsQq1RSkBPH_-rjNEWfcQ5-cgGwH5C6gJ_B50"}},"msgtype":"m.text"},"ts":1721224737540,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NjtgEXKUvmvpd_i2qX1Y-ajhO9Eil2fPe1Pm1SSqqzE"}
]