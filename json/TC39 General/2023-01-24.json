[
{"content":{"body":"I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?","msgtype":"m.text","org.matrix.msc1767.text":"I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?"},"ts":1674531717070,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$1HjMYL02c9EaBe6bTY-FjbPBUyPt1-koVx_ao1uB_SI"},
{"content":{"body":" * I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?","m.new_content":{"body":"I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?","msgtype":"m.text","org.matrix.msc1767.text":"I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?"},"m.relates_to":{"event_id":"$1HjMYL02c9EaBe6bTY-FjbPBUyPt1-koVx_ao1uB_SI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I remember seeing something years ago, but I can't remember if it had a name. A keyword on functions that reversed the async/await calls, so every result in the function was awaited unless marked as async. Anyone know what I'm talking about?"},"ts":1674531748769,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Jp-Kfm-Ib2JJ6J8qpBxTOsNhaLNnjq3RdsJbeF8Io40"},
{"content":{"body":"i'm not sure how that could reasonably work. it might have been on esdiscuss or the discourse tho","msgtype":"m.text"},"ts":1674531787696,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aIfA9lKg4QVe29ZvFJRzZzYts9A6Vuyt5MWhqzX6vCE"},
{"content":{"body":"https://github.com/ziolko/babel-plugin-auto-await ?","msgtype":"m.text"},"ts":1674537184636,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HP09naSGMLWn_OeTTHIpeiKib5GFvy-IQfYGVgmJVbs"},
{"content":{"body":"ah yes, that was probably it. Thank you.","msgtype":"m.text","org.matrix.msc1767.text":"ah yes, that was probably it. Thank you."},"ts":1674537230882,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$2xvzHxrTxLZSgHzWo0pX7fBWGpfTrDtaOmvCYkyD19E"},
{"content":{"body":"It's not the discussion I was thinking of, but I think it might have been referenced. Like a lot of modern projects I deal with a lot of async code. Was thinking if there wasn't a quick fix for simple functions. (Assuming the programmer knows what they're doing awaiting everything in a function).","msgtype":"m.text","org.matrix.msc1767.text":"It's not the discussion I was thinking of, but I think it might have been referenced. Like a lot of modern projects I deal with a lot of async code. Was thinking if there wasn't a quick fix for simple functions. (Assuming the programmer knows what they're doing awaiting everything in a function)."},"ts":1674537629283,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$7qJC7RtE_CnCiaqxuUQfW9ZA-PKOfyuy-hqtsSqNJBs"},
{"content":{"body":"> <@aclaymore:matrix.org> https://github.com/ziolko/babel-plugin-auto-await ?\n\nLooks like a performance super footgun (if no type information involved)🤣","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HP09naSGMLWn_OeTTHIpeiKib5GFvy-IQfYGVgmJVbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a><br />https://github.com/ziolko/babel-plugin-auto-await ?</blockquote></mx-reply>Looks like a performance super footgun (if no type information involved)🤣","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$HP09naSGMLWn_OeTTHIpeiKib5GFvy-IQfYGVgmJVbs"}}},"ts":1674537643208,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5nELh_1eSUJx5XeglBbXkV50qfGJ8MTfOULd8qhrdfk"},
{"content":{"body":"* Looks like a performance super footgun (if no type information involved)🤣","m.new_content":{"body":"> <@aclaymore:matrix.org> https://github.com/ziolko/babel-plugin-auto-await ?\n\nLooks like a performance super footgun (if no type information involved)🤣","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HP09naSGMLWn_OeTTHIpeiKib5GFvy-IQfYGVgmJVbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a><br />https://github.com/ziolko/babel-plugin-auto-await ?</blockquote></mx-reply>Looks like a performance super footgun (if no type information involved)🤣","msgtype":"m.text"},"m.relates_to":{"event_id":"$5nELh_1eSUJx5XeglBbXkV50qfGJ8MTfOULd8qhrdfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1674537666330,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NSbqVsuIDm3ZSg2U5MMBE_FRIfEjUdLqvMaaDFervx0"},
{"content":{"body":"yes, it would be, especially on large functions.","msgtype":"m.text","org.matrix.msc1767.text":"yes, it would be, especially on large functions."},"ts":1674537669672,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$fDJbJIz-HeXGqw5RD7-EIjFgfRsjIPHLLILDhQOAGeM"},
{"content":{"body":"re: pipeline functionality, while I frequently complain about the increasing complexity of JS (and feel that some of the more recent additions were a mistake), I do not agree that the pipeline syntax is pointless or unnecessary. it solves a very real, irritating and widespread problem (mixing method and function invocations in a readable manner), and as someone who actually *is* maintaining a [userland implementation](https://www.npmjs.com/package/syncpipe) of sorts for this kind of functionality, the inability to use `await` is a limitation I haven't been able to find a workaround for without language changes either. using regular old Promise syntax (ie. `.then`) is a little better, but only a little.","format":"org.matrix.custom.html","formatted_body":"re: pipeline functionality, while I frequently complain about the increasing complexity of JS (and feel that some of the more recent additions were a mistake), I do not agree that the pipeline syntax is pointless or unnecessary. it solves a very real, irritating and widespread problem (mixing method and function invocations in a readable manner), and as someone who actually <em>is</em> maintaining a <a href=\"https://www.npmjs.com/package/syncpipe\">userland implementation</a> of sorts for this kind of functionality, the inability to use <code>await</code> is a limitation I haven't been able to find a workaround for without language changes either. using regular old Promise syntax (ie. <code>.then</code>) is a little better, but only a little.","msgtype":"m.text"},"ts":1674591883658,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$yhqyIIQ9nCIqh3qL_Ew0_Ix--_cr5kQSJ1Ieq5sYlZw"},
{"content":{"body":"I really hate new things being added to core in general but this is one of the few things that passes even my criteria :p","msgtype":"m.text"},"ts":1674591933234,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$M9vrWIce0eNGbl9y5otliVgAZwu89uASRUYxLH5yh88"},
{"content":{"body":"not totally convinced by \"method and function invocations in a readable manner\" - you can go one way (methods, then functions), but not the other (functions, then methods)","msgtype":"m.text","org.matrix.msc1767.text":"not totally convinced by \"method and function invocations in a readable manner\" - you can go one way (methods, then functions), but not the other (functions, then methods)"},"ts":1674593334943,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TrPc0CEotDa29GCVmmAmLCwcgaMGnNiFb9jjOtN8Hb0"},
{"content":{"body":"like:\n```\nx\n  .filter()\n  .transform()\n  |> apply1(%)\n  |> apply2(%)\n```\nworks fine, but if the function applications are first, you're stuck with\n```\n(x\n  |> apply1(%)\n  |> apply2(%))\n  .filter()\n  .transform()\n```\nor giving up on using the original method application syntax entirely, as in\n```\nx\n  |> apply1(%)\n  |> apply2(%))\n  |> %.filter()\n  |> %.transform()\n```","format":"org.matrix.custom.html","formatted_body":"<p>like:</p>\n<pre><code>x\n  .filter()\n  .transform()\n  |&gt; apply1(%)\n  |&gt; apply2(%)\n</code></pre>\n<p>works fine, but if the function applications are first, you're stuck with</p>\n<pre><code>(x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  .filter()\n  .transform()\n</code></pre>\n<p>or giving up on using the original method application syntax entirely, as in</p>\n<pre><code>x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  |&gt; %.filter()\n  |&gt; %.transform()\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like:\n```\nx\n  .filter()\n  .transform()\n  |> apply1(%)\n  |> apply2(%)\n```\nworks fine, but if the function applications are first, you're stuck with\n```\n(x\n  |> apply1(%)\n  |> apply2(%))\n  .filter()\n  .transform()\n```\nor giving up on using the original method application syntax entirely, as in\n```\nx\n  |> apply1(%)\n  |> apply2(%))\n  |> %.filter()\n  |> %.transform()\n```","mimetype":"text/plain"},{"body":"<p>like:</p>\n<pre><code>x\n  .filter()\n  .transform()\n  |&gt; apply1(%)\n  |&gt; apply2(%)\n</code></pre>\n<p>works fine, but if the function applications are first, you're stuck with</p>\n<pre><code>(x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  .filter()\n  .transform()\n</code></pre>\n<p>or giving up on using the original method application syntax entirely, as in</p>\n<pre><code>x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  |&gt; %.filter()\n  |&gt; %.transform()\n</code></pre>\n","mimetype":"text/html"}]},"ts":1674593464619,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IdqrGecMn_yCGvmk55aFN9MNJ-kkmHkYqH-Wy4NeMFM"},
{"content":{"body":"```\nx\n  |> apply1(%)\n  .  filter(f)\n  |> apply2(%)\n  .  map(f2)\n``` \n\nBrackets aren't required, if ok that the scope of the pipe leaks into subsequent lines.","format":"org.matrix.custom.html","formatted_body":"<pre><code>x\n  |&gt; apply1(%)\n  .  filter(f)\n  |&gt; apply2(%)\n  .  map(f2)\n</code></pre>\n<p>Brackets aren't required, if ok that the scope of the pipe leaks into subsequent lines.</p>","msgtype":"m.text"},"ts":1674597069268,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yN28-ANeKM9p3k85uJ5scj3eR2PVIYmWadvdXDrHfvo"},
{"content":{"body":"Though I would probably write it like the last example with all pipes","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$IdqrGecMn_yCGvmk55aFN9MNJ-kkmHkYqH-Wy4NeMFM"}}},"ts":1674597091570,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cKzIorPw20C12ivyCjvj6QHYQgiXl1ZDXXE432FxcN4"},
{"content":{"body":"> <@bakkot:matrix.org> like:\n> ```\n> x\n>   .filter()\n>   .transform()\n>   |> apply1(%)\n>   |> apply2(%)\n> ```\n> works fine, but if the function applications are first, you're stuck with\n> ```\n> (x\n>   |> apply1(%)\n>   |> apply2(%))\n>   .filter()\n>   .transform()\n> ```\n> or giving up on using the original method application syntax entirely, as in\n> ```\n> x\n>   |> apply1(%)\n>   |> apply2(%))\n>   |> %.filter()\n>   |> %.transform()\n> ```\n\n * Though I would probably write it like the last example with all pipes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24IdqrGecMn_yCGvmk55aFN9MNJ-kkmHkYqH-Wy4NeMFM\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>like:</p>\n<pre><code>x\n  .filter()\n  .transform()\n  |&gt; apply1(%)\n  |&gt; apply2(%)\n</code></pre>\n<p>works fine, but if the function applications are first, you're stuck with</p>\n<pre><code>(x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  .filter()\n  .transform()\n</code></pre>\n<p>or giving up on using the original method application syntax entirely, as in</p>\n<pre><code>x\n  |&gt; apply1(%)\n  |&gt; apply2(%))\n  |&gt; %.filter()\n  |&gt; %.transform()\n</code></pre>\n</blockquote></mx-reply> * Though I would probably write it like the last example with all pipes","m.new_content":{"body":"Though I would probably write it like the last example with all pipes","msgtype":"m.text"},"m.relates_to":{"event_id":"$cKzIorPw20C12ivyCjvj6QHYQgiXl1ZDXXE432FxcN4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1674597166787,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$USm9CnU762ArBntez7ML_sdj_jHV9PdKaguWZNGTel4"}
]