[
{"content":{"body":"The sad part, you have to do this even if you're using typescript ","msgtype":"m.text"},"ts":1648433115650,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$xsazIh_piYZ4x5HgGCWVvZoz2Y59aQrupDVqZM86d7g"},
{"content":{"body":"it‚Äôd be weird if typescript could magically implement overloads for you","msgtype":"m.text"},"ts":1648433354335,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$TZBOY7x0tPVgixHrx3GBHeMr9iSm06prlk9ZI2UJDsg"},
{"content":{"body":"would likely end up with C++ name mangling and having to annotate functions meant to interop with regular JavaScript as ‚Äúextern‚Äù","msgtype":"m.text"},"ts":1648433388710,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$jWnFzZDFgaY41YuFGKZwCKnlKMeRb3VDiuOSFxZmGQY"},
{"content":{"body":"That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as `function foo(index, name=index)` today, if i'm reading correctly","format":"org.matrix.custom.html","formatted_body":"That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as <code>function foo(index, name=index)</code> today, if i'm reading correctly","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as `function foo(index, name=index)` today, if i'm reading correctly","mimetype":"text/plain"},{"body":"That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as <code>function foo(index, name=index)</code> today, if i'm reading correctly","mimetype":"text/html"}]},"ts":1648482332815,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JVCXGZ7vM3wYS9ttlRP28faa0GomFBqaU8jUaoOWLUU"},
{"content":{"body":"> <@tabatkins:matrix.org> That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as `function foo(index, name=index)` today, if i'm reading correctly\n\nNote that the example sets `name` to `index` if `name` is undefined. So it‚Äôs not similar to `function foo(index, name=index)`; it‚Äôs basically `function foo(¬´optional index¬ª, name)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$JVCXGZ7vM3wYS9ttlRP28faa0GomFBqaU8jUaoOWLUU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as <code>function foo(index, name=index)</code> today, if i'm reading correctly</blockquote></mx-reply>Note that the example sets <code>name</code> to <code>index</code> if <code>name</code> is undefined. So it‚Äôs not similar to <code>function foo(index, name=index)</code>; it‚Äôs basically <code>function foo(¬´optional index¬ª, name)</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$JVCXGZ7vM3wYS9ttlRP28faa0GomFBqaU8jUaoOWLUU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as `function foo(index, name=index)` today, if i'm reading correctly\n\nNote that the example sets `name` to `index` if `name` is undefined. So it‚Äôs not similar to `function foo(index, name=index)`; it‚Äôs basically `function foo(¬´optional index¬ª, name)`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$JVCXGZ7vM3wYS9ttlRP28faa0GomFBqaU8jUaoOWLUU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>That example just shows ordinary end-of-signature optionality, doesn't it? you could just write it as <code>function foo(index, name=index)</code> today, if i'm reading correctly</blockquote></mx-reply>Note that the example sets <code>name</code> to <code>index</code> if <code>name</code> is undefined. So it‚Äôs not similar to <code>function foo(index, name=index)</code>; it‚Äôs basically <code>function foo(¬´optional index¬ª, name)</code>.","mimetype":"text/html"}]},"ts":1648482609514,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1ggeojls9bBlXHt7Ct_ZrH2gjrGIi2eyeANGj5N7y3o"},
{"content":{"body":"??? You just explained what my code did, then gave an example that didn't match.","msgtype":"m.text","org.matrix.msc1767.text":"??? You just explained what my code did, then gave an example that didn't match."},"ts":1648482682568,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oIx9sx2qTJppwHI-mK1Fkqu2n7qIwAdLDgiu-f7CcQg"},
{"content":{"body":"TabAtkins: except that defaulting only works on `undefined`, and \"the arg isn't passed\" is usually pivoting on more than that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: except that defaulting only works on <code>undefined</code>, and &quot;the arg isn't passed&quot; is usually pivoting on more than that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: except that defaulting only works on `undefined`, and \"the arg isn't passed\" is usually pivoting on more than that","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: except that defaulting only works on <code>undefined</code>, and &quot;the arg isn't passed&quot; is usually pivoting on more than that","mimetype":"text/html"}]},"ts":1648482931690,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DryCtDpW-hGgrSzL1GT_AiDkua50PbmWrIS-wwXwI5I"},
{"content":{"body":"jschoi: can brief feedback be provided here or should it be on that issue specifically?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: can brief feedback be provided here or should it be on that issue specifically?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: can brief feedback be provided here or should it be on that issue specifically?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: can brief feedback be provided here or should it be on that issue specifically?","mimetype":"text/html"}]},"ts":1648482943401,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$AEX__zWUchGD8roQsUsObbxvQVfsT0f_6q_5SP451RU"},
{"content":{"body":"like, \"is this arg a function? it's a callback, else it's an options bag\"","msgtype":"m.text","org.matrix.msc1767.text":"like, \"is this arg a function? it's a callback, else it's an options bag\""},"ts":1648482947372,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$21RAhJ7k-A9hgUhMumBeszuT02wbEjyrkHIwrfWwTXk"},
{"content":{"body":"ljharb: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting","mimetype":"text/html"}]},"ts":1648483021005,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dmKxWDLJISbThM48mFF26xjGu2_TZbmH38DjSADZ2Jc"},
{"content":{"body":"joepie91 üè≥Ô∏è‚Äçüåà: on the issue, please","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@joepie91:pixie.town\">joepie91 üè≥Ô∏è‚Äçüåà</a>: on the issue, please","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"joepie91 üè≥Ô∏è‚Äçüåà: on the issue, please","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@joepie91:pixie.town\">joepie91 üè≥Ô∏è‚Äçüåà</a>: on the issue, please","mimetype":"text/html"}]},"ts":1648483037741,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uA-_PcPTvpHtamCVOT3WtpLm-UkoYzy199wuZSD-izM"},
{"content":{"body":"my specific reaction was to typescript overloads; if you just do trailing optional arguments then you don‚Äôt need overloads; typescript overloads do a whole lot more than awkwardly expressing optionality","msgtype":"m.text"},"ts":1648483042605,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$8IPtz17kC4xM-tf8FPcYCcE0AOC_ZdM8tQgrtfm__TA"},
{"content":{"body":"alright :)","msgtype":"m.text","org.matrix.msc1767.text":"alright :)"},"ts":1648483043214,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$rdIdIPF_UpxsUJREg8WjQ1ZdMXMqCWbszTlfxcM9naA"},
{"content":{"body":"notes that a far more common case of prefix optionality is based on runtime type-checking of the first arguments rather than existence of the last ones","msgtype":"m.emote","org.matrix.msc1767.text":"notes that a far more common case of prefix optionality is based on runtime type-checking of the first arguments rather than existence of the last ones"},"ts":1648483096635,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$8PVnxh2jb3HONKsmBVxixbnA0gPQy4Bg9GExZlwCoo0"},
{"content":{"body":"(source: N=1, all the various code I've seen pass by as a professional dependency auditor)","msgtype":"m.text","org.matrix.msc1767.text":"(source: N=1, all the various code I've seen pass by as a professional dependency auditor)"},"ts":1648483136695,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$HaPfylbCgjxh7jFHNGV5az8DyLf0AHcpXIV0x90MVRw"},
{"content":{"body":"so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing","msgtype":"m.text","org.matrix.msc1767.text":"so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing"},"ts":1648483190153,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$bRsBQZ9cq_Vo8Ga-hG-xWDBfIrEVhH_mFiYTreWwAQM"},
{"content":{"body":" * so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing","m.new_content":{"body":"so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing","msgtype":"m.text","org.matrix.msc1767.text":"so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing"},"m.relates_to":{"event_id":"$bRsBQZ9cq_Vo8Ga-hG-xWDBfIrEVhH_mFiYTreWwAQM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so eg. if the first argument is a number then that implies that the first argument was left out and the second should be moved to the first, but if the first argument is a string then a second argument will be expected, that sort of thing"},"ts":1648483201694,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$qsFAhq34oqIgkldfAY-YiHXL2Gzc-rmpLS_c75wPNUk"},
{"content":{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","format":"org.matrix.custom.html","formatted_body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","mimetype":"text/plain"},{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","mimetype":"text/html"}]},"ts":1648485235099,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vRvBc-GVnfyEY5qdQoC6UGiyLDOQZJ08E40DlOT_R48"},
{"content":{"body":" * Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","format":"org.matrix.custom.html","formatted_body":" * Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","m.new_content":{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","format":"org.matrix.custom.html","formatted_body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","mimetype":"text/plain"},{"body":"Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vRvBc-GVnfyEY5qdQoC6UGiyLDOQZJ08E40DlOT_R48","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either `(end)` (implied start of 0) or `(start, end)`).","mimetype":"text/plain"},{"body":" * Yeah, I've seen that before (and written it - canonical example is a range() function, where the arglists are either <code>(end)</code> (implied start of 0) or <code>(start, end)</code>).","mimetype":"text/html"}]},"ts":1648485242537,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DnRCM0HewGR7qLa5HYEDgw9BT4OwNV_wWXt-SaI-bYw"},
{"content":{"body":"> <@tabatkins:matrix.org> ljharb: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting\n\nOh wait, I misread your example, oops. Need coffee. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24dmKxWDLJISbThM48mFF26xjGu2_TZbmH38DjSADZ2Jc\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yeah i get the case they're talking about, but the code example given was literally checking the final argument for === undefined, and defaulting it to a preceding argument, which is just a manual implementation of normal argument defaulting</blockquote></mx-reply>Oh wait, I misread your example, oops. Need coffee.","m.relates_to":{"m.in_reply_to":{"event_id":"$dmKxWDLJISbThM48mFF26xjGu2_TZbmH38DjSADZ2Jc"}},"msgtype":"m.text"},"ts":1648486520232,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_DDMZrBLCjUzzTG2rhqdwF_1QJMOHxcUNsAWEuTc0FQ"}
]