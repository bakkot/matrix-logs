[
{"content":{"body":"Hello, maybe someone here knows the history of block-scoped functions.\n\nWe have a very old Babel plugin, enabled by default, that does this transform ([@babel/plugin-transform-block-scoped-functions](https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions)):\n```js\n{ function f() {} }\n// --->\n{ let f = function f() {} }\n```\n\nThis plugin was created in response to this issue: https://github.com/babel/babel/issues/514\n\nDoes anyone know:\n- why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?\n- should the transform use `let` or `var`?","format":"org.matrix.custom.html","formatted_body":"<p>Hello, maybe someone here knows the history of block-scoped functions.</p>\n<p>We have a very old Babel plugin, enabled by default, that does this transform (<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions\">@babel/plugin-transform-block-scoped-functions</a>):</p>\n<pre><code class=\"language-js\">{ function f() {} }\n// ---&gt;\n{ let f = function f() {} }\n</code></pre>\n<p>This plugin was created in response to this issue: https://github.com/babel/babel/issues/514</p>\n<p>Does anyone know:</p>\n<ul>\n<li>why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?</li>\n<li>should the transform use <code>let</code> or <code>var</code>?</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hello, maybe someone here knows the history of block-scoped functions.\n\nWe have a very old Babel plugin, enabled by default, that does this transform ([@babel/plugin-transform-block-scoped-functions](https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions)):\n```js\n{ function f() {} }\n// --->\n{ let f = function f() {} }\n```\n\nThis plugin was created in response to this issue: https://github.com/babel/babel/issues/514\n\nDoes anyone know:\n- why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?\n- should the transform use `let` or `var`?","mimetype":"text/plain"},{"body":"<p>Hello, maybe someone here knows the history of block-scoped functions.</p>\n<p>We have a very old Babel plugin, enabled by default, that does this transform (<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions\">@babel/plugin-transform-block-scoped-functions</a>):</p>\n<pre><code class=\"language-js\">{ function f() {} }\n// ---&gt;\n{ let f = function f() {} }\n</code></pre>\n<p>This plugin was created in response to this issue: https://github.com/babel/babel/issues/514</p>\n<p>Does anyone know:</p>\n<ul>\n<li>why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?</li>\n<li>should the transform use <code>let</code> or <code>var</code>?</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1668526720993,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ElD8CmBOcJV46ebRggJ-5JbhS48HCSZhhXR2dAAAqzA"},
{"content":{"body":"the transform should use `let` because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","format":"org.matrix.custom.html","formatted_body":"the transform should use <code>let</code> because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the transform should use `let` because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","mimetype":"text/plain"},{"body":"the transform should use <code>let</code> because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","mimetype":"text/html"}]},"ts":1668527249402,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VVUPgSaIe89vmF1Wsf-WXeq9ycTLxZWdBWyBtV0UyK0"},
{"content":{"body":"The history is that, prior to ES6, in sloppy mode, each engine had its own way of hoisting functions out of blocks. This transform prevents that non-standard behavior.","msgtype":"m.text","org.matrix.msc1767.text":"The history is that, prior to ES6, in sloppy mode, each engine had its own way of hoisting functions out of blocks. This transform prevents that non-standard behavior."},"ts":1668527281796,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ia6j6czW2IL7o-0iBe4-tv2XGBrXKvWLiqLye-IIX9I"},
{"content":{"body":"it sounds like the transform implements the strict mode semantics. Sloppy mode semantics, in Annex B 3.3, is a mess and I don't recommend looking at it if you want to maintain your sanity :)","msgtype":"m.text","org.matrix.msc1767.text":"it sounds like the transform implements the strict mode semantics. Sloppy mode semantics, in Annex B 3.3, is a mess and I don't recommend looking at it if you want to maintain your sanity :)"},"ts":1668527340825,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T1BwjRljSJALDMIvV3NAj19Q6GfqBaid5LJLQVy01Rs"},
{"content":{"body":"I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine","msgtype":"m.text","org.matrix.msc1767.text":"I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine"},"ts":1668527366059,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VcexUcQHiin61NWTVnxdUetEbX0_Lo49f_ZlP-nnuhw"}
]