[
{"content":{"body":"Hello, maybe someone here knows the history of block-scoped functions.\n\nWe have a very old Babel plugin, enabled by default, that does this transform ([@babel/plugin-transform-block-scoped-functions](https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions)):\n```js\n{ function f() {} }\n// --->\n{ let f = function f() {} }\n```\n\nThis plugin was created in response to this issue: https://github.com/babel/babel/issues/514\n\nDoes anyone know:\n- why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?\n- should the transform use `let` or `var`?","format":"org.matrix.custom.html","formatted_body":"<p>Hello, maybe someone here knows the history of block-scoped functions.</p>\n<p>We have a very old Babel plugin, enabled by default, that does this transform (<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions\">@babel/plugin-transform-block-scoped-functions</a>):</p>\n<pre><code class=\"language-js\">{ function f() {} }\n// ---&gt;\n{ let f = function f() {} }\n</code></pre>\n<p>This plugin was created in response to this issue: https://github.com/babel/babel/issues/514</p>\n<p>Does anyone know:</p>\n<ul>\n<li>why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?</li>\n<li>should the transform use <code>let</code> or <code>var</code>?</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hello, maybe someone here knows the history of block-scoped functions.\n\nWe have a very old Babel plugin, enabled by default, that does this transform ([@babel/plugin-transform-block-scoped-functions](https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions)):\n```js\n{ function f() {} }\n// --->\n{ let f = function f() {} }\n```\n\nThis plugin was created in response to this issue: https://github.com/babel/babel/issues/514\n\nDoes anyone know:\n- why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?\n- should the transform use `let` or `var`?","mimetype":"text/plain"},{"body":"<p>Hello, maybe someone here knows the history of block-scoped functions.</p>\n<p>We have a very old Babel plugin, enabled by default, that does this transform (<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-block-scoped-functions\">@babel/plugin-transform-block-scoped-functions</a>):</p>\n<pre><code class=\"language-js\">{ function f() {} }\n// ---&gt;\n{ let f = function f() {} }\n</code></pre>\n<p>This plugin was created in response to this issue: https://github.com/babel/babel/issues/514</p>\n<p>Does anyone know:</p>\n<ul>\n<li>why does Babel need to transform functions in blocks? Do they not work in older engines or older ECMAScript versions?</li>\n<li>should the transform use <code>let</code> or <code>var</code>?</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1668526720993,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ElD8CmBOcJV46ebRggJ-5JbhS48HCSZhhXR2dAAAqzA"},
{"content":{"body":"the transform should use `let` because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","format":"org.matrix.custom.html","formatted_body":"the transform should use <code>let</code> because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the transform should use `let` because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","mimetype":"text/plain"},{"body":"the transform should use <code>let</code> because the semantics of JS of functions in a block is that they're lexically scoped to the block (modulo Annex B 3.3)","mimetype":"text/html"}]},"ts":1668527249402,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VVUPgSaIe89vmF1Wsf-WXeq9ycTLxZWdBWyBtV0UyK0"},
{"content":{"body":"The history is that, prior to ES6, in sloppy mode, each engine had its own way of hoisting functions out of blocks. This transform prevents that non-standard behavior.","msgtype":"m.text","org.matrix.msc1767.text":"The history is that, prior to ES6, in sloppy mode, each engine had its own way of hoisting functions out of blocks. This transform prevents that non-standard behavior."},"ts":1668527281796,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ia6j6czW2IL7o-0iBe4-tv2XGBrXKvWLiqLye-IIX9I"},
{"content":{"body":"it sounds like the transform implements the strict mode semantics. Sloppy mode semantics, in Annex B 3.3, is a mess and I don't recommend looking at it if you want to maintain your sanity :)","msgtype":"m.text","org.matrix.msc1767.text":"it sounds like the transform implements the strict mode semantics. Sloppy mode semantics, in Annex B 3.3, is a mess and I don't recommend looking at it if you want to maintain your sanity :)"},"ts":1668527340825,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T1BwjRljSJALDMIvV3NAj19Q6GfqBaid5LJLQVy01Rs"},
{"content":{"body":"I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine","msgtype":"m.text","org.matrix.msc1767.text":"I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine"},"ts":1668527366059,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VcexUcQHiin61NWTVnxdUetEbX0_Lo49f_ZlP-nnuhw"},
{"content":{"body":"Thank you! Follow-up question:\n\nWe also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling `let`/`const` to `var`):\n```js\nvar run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT --->\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n```\n\nis this annex b behavior?","format":"org.matrix.custom.html","formatted_body":"<p>Thank you! Follow-up question:</p>\n<p>We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling <code>let</code>/<code>const</code> to <code>var</code>):</p>\n<pre><code class=\"language-js\">var run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT ---&gt;\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n</code></pre>\n<p>is this annex b behavior?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thank you! Follow-up question:\n\nWe also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling `let`/`const` to `var`):\n```js\nvar run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT --->\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n```\n\nis this annex b behavior?","mimetype":"text/plain"},{"body":"<p>Thank you! Follow-up question:</p>\n<p>We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling <code>let</code>/<code>const</code> to <code>var</code>):</p>\n<pre><code class=\"language-js\">var run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT ---&gt;\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n</code></pre>\n<p>is this annex b behavior?</p>\n","mimetype":"text/html"}]},"ts":1668527511184,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZmEEmUp1m1hNqanSgwoVlVKiAoZi2yHMtFxhSVAqRpc"},
{"content":{"body":"> <@littledan:matrix.org> I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine\n\nYeah right now we compile down to the oldest targets we support; this is going to change in Babel 8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VcexUcQHiin61NWTVnxdUetEbX0_Lo49f_ZlP-nnuhw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it&#39;s not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine</blockquote></mx-reply>Yeah right now we compile down to the oldest targets we support; this is going to change in Babel 8","m.relates_to":{"m.in_reply_to":{"event_id":"$VcexUcQHiin61NWTVnxdUetEbX0_Lo49f_ZlP-nnuhw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I think it's not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine\n\nYeah right now we compile down to the oldest targets we support; this is going to change in Babel 8","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VcexUcQHiin61NWTVnxdUetEbX0_Lo49f_ZlP-nnuhw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it&#39;s not necessary to enable this plugin by default since it is only needed if you target a pretty old JS engine</blockquote></mx-reply>Yeah right now we compile down to the oldest targets we support; this is going to change in Babel 8","mimetype":"text/html"}]},"ts":1668527534338,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KZ5WzCrAkxdTFRKPn4FS7yjAfuiPaii-M6A83fbtkWM"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Thank you! Follow-up question:\n> \n> We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling `let`/`const` to `var`):\n> ```js\n> var run = function () {\n>   return false;\n> };\n> \n> if (true) {\n>   function run() {\n>     return true;\n>   }\n> }\n> \n> function test() {\n>   return run();\n> }\n> \n> // ---- OUTPUT --->\n> \n> var run = function () {\n>   return false;\n> };\n> if (true) {\n>   var run = function () {\n>     return true;\n>   };\n> }\n> function test() {\n>   return run();\n> }\n> ```\n> \n> is this annex b behavior?\n\nreviewing https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics  (actually B 3.2 now), yeah, it looks like an outer var declaration does not block this hoisting, though a let declaration would","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZmEEmUp1m1hNqanSgwoVlVKiAoZi2yHMtFxhSVAqRpc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>Thank you! Follow-up question:</p>\n<p>We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling <code>let</code>/<code>const</code> to <code>var</code>):</p>\n<pre><code class=\"language-js\">var run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT ---&gt;\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n</code></pre>\n<p>is this annex b behavior?</p>\n</blockquote></mx-reply>reviewing https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics  (actually B 3.2 now), yeah, it looks like an outer var declaration does not block this hoisting, though a let declaration would","m.relates_to":{"m.in_reply_to":{"event_id":"$ZmEEmUp1m1hNqanSgwoVlVKiAoZi2yHMtFxhSVAqRpc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> Thank you! Follow-up question:\n> \n> We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling `let`/`const` to `var`):\n> ```js\n> var run = function () {\n>   return false;\n> };\n> \n> if (true) {\n>   function run() {\n>     return true;\n>   }\n> }\n> \n> function test() {\n>   return run();\n> }\n> \n> // ---- OUTPUT --->\n> \n> var run = function () {\n>   return false;\n> };\n> if (true) {\n>   var run = function () {\n>     return true;\n>   };\n> }\n> function test() {\n>   return run();\n> }\n> ```\n> \n> is this annex b behavior?\n\nreviewing https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics  (actually B 3.2 now), yeah, it looks like an outer var declaration does not block this hoisting, though a let declaration would","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZmEEmUp1m1hNqanSgwoVlVKiAoZi2yHMtFxhSVAqRpc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>Thank you! Follow-up question:</p>\n<p>We also have this test, that ensures that the function is hoisted to the outer scope when there is a variable with the same name (but only when we are also compiling <code>let</code>/<code>const</code> to <code>var</code>):</p>\n<pre><code class=\"language-js\">var run = function () {\n  return false;\n};\n\nif (true) {\n  function run() {\n    return true;\n  }\n}\n\nfunction test() {\n  return run();\n}\n\n// ---- OUTPUT ---&gt;\n\nvar run = function () {\n  return false;\n};\nif (true) {\n  var run = function () {\n    return true;\n  };\n}\nfunction test() {\n  return run();\n}\n</code></pre>\n<p>is this annex b behavior?</p>\n</blockquote></mx-reply>reviewing https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics  (actually B 3.2 now), yeah, it looks like an outer var declaration does not block this hoisting, though a let declaration would","mimetype":"text/html"}]},"ts":1668527704611,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1-SgPalalBFTj3aRCKLBET138i2w4AuCLJ56kA1ExfM"},
{"content":{"body":"Thank you!\n\nAnother thing we should to in Babel 8 is deciding if we want to consider Annex B or not, instead of enabling it _sometimes_","format":"org.matrix.custom.html","formatted_body":"<p>Thank you!</p>\n<p>Another thing we should to in Babel 8 is deciding if we want to consider Annex B or not, instead of enabling it <em>sometimes</em></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thank you!\n\nAnother thing we should to in Babel 8 is deciding if we want to consider Annex B or not, instead of enabling it _sometimes_","mimetype":"text/plain"},{"body":"<p>Thank you!</p>\n<p>Another thing we should to in Babel 8 is deciding if we want to consider Annex B or not, instead of enabling it <em>sometimes</em></p>\n","mimetype":"text/html"}]},"ts":1668527789903,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$o1mSkb7jGgPV-jYMsysddWwUD8j1M98sAA68ewGE-j8"},
{"content":{"body":"IMO it should be enabled always in Babel, given that Babel tends to target web/Node environments, which always enable Annex B","msgtype":"m.text","org.matrix.msc1767.text":"IMO it should be enabled always in Babel, given that Babel tends to target web/Node environments, which always enable Annex B"},"ts":1668527955531,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sD4YPupw3MWhJmDy7dhilVI3-GcRQCVrzBGJD9Ekwzs"}
]