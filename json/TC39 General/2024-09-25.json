[
{"content":{"body":"> <@bakkot:matrix.org> There is still the old issue about `f() = y` being legal syntax in engines\n\nits never too late for `array.at(-1) = y`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$1tkGQC1heQ0qh_kpo9xru0XHmGuSoPJu7J4PmNDLqIY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>There is still the old issue about `f() = y` being legal syntax in engines</blockquote></mx-reply>its never too late for <code>array.at(-1) = y</code>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1tkGQC1heQ0qh_kpo9xru0XHmGuSoPJu7J4PmNDLqIY"}},"msgtype":"m.text"},"ts":1727286207227,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5CS5Y2KJl7s4Cp-iEejZOI7nvw5q8KO1x-z5vxckOmk"},
{"content":{"body":"ðŸ˜ ","m.mentions":{},"msgtype":"m.text"},"ts":1727286282895,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lpWbpNZO9wwk0KVZkecSFhVfkBfki3cMaijxnK0obzg"},
{"content":{"body":"You're right, we just need hookable square brackets, so `array.at[-1] = y` works","format":"org.matrix.custom.html","formatted_body":"You're right, we just need hookable square brackets, so <code>array.at[-1] = y</code> works","m.mentions":{},"msgtype":"m.text"},"ts":1727287925952,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Hq3sT-4qiPulohucBxLsfK2NrX0Z1lQpjSt9kPzjJVA"},
{"content":{"body":"There was a harmony wiki page for that from Allen I think...","m.mentions":{},"msgtype":"m.text"},"ts":1727287951870,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$9GR_JrinyR3WfH1ZgbgZu9mNSZ2j0Mm8o8TdmauYnOI"},
{"content":{"body":"Yup, was referring to that obliquely ^_^","m.mentions":{},"msgtype":"m.text"},"ts":1727287968753,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oyMXJXURrAySbHUv5UYWaqfMWDgWd7R68sj7u7S-pG0"},
{"content":{"body":"There are such treasures hidden in those archives... look at what they took from us https://web.archive.org/web/20160429210828/http://wiki.ecmascript.org/doku.php?id=harmony:object_extension_literal_class_pattern","m.mentions":{},"msgtype":"m.text"},"ts":1727288044282,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$nPNMGyS2y_AEOhv7UL81Fo1r2qcaJwhBmBWThEfs9AM"},
{"content":{"body":"is web archive the only place that the old wiki data exists now","m.mentions":{},"msgtype":"m.text"},"ts":1727289275347,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rT_d3c4C3fG2ZyFIOmto_yIN9vS52QcsI-IIsmQ5urI"},
{"content":{"body":"does anyone know off top-of-head where in test262 the \"Array prototype method property sets occur in 'strict mode'\" semantics are asserted? having a hard time locating that sort of check in the Array prototype method tests. Any one of them for a prototype method would work, just want to assert something locally.","m.mentions":{},"msgtype":"m.text"},"ts":1727290042875,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$mXsa7uNMSxAdPWf77rWsYwRbYt5-nIM1JNRIfOcrwcY"},
{"content":{"body":"by \"strict mode semantics\" do you mean like throwing if the assignment fails? if so, https://github.com/tc39/test262/blob/0c784ef9541fad7e38036a5e6019990ddad81659/test/built-ins/Array/prototype/fill/return-abrupt-from-setting-property-value.js is an example ","m.mentions":{},"msgtype":"m.text"},"ts":1727290370795,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rETKvZ1Sxl__gPUuNWnqfoDswtXHhjpEiH4JKteBcY4"},
{"content":{"body":"or https://github.com/tc39/test262/blob/0c784ef9541fad7e38036a5e6019990ddad81659/test/built-ins/Array/prototype/push/set-length-zero-array-length-is-non-writable.js","m.mentions":{},"msgtype":"m.text"},"ts":1727290413739,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DDSpMRXocZgW1rAvjPtNQKelv51t9mMSCjb2XR6STzM"},
{"content":{"body":"generally Array.prototype methods live under built-ins/Array/prototype and then old tests have uninformative names but new ones you can usually guess what they're getting at from the name","m.mentions":{},"msgtype":"m.text"},"ts":1727290448321,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nQP_KAg1Eoi-cjT4ADta4xH3ftvhzE9XSxMzQNs0O2c"},
{"content":{"body":" * generally tests for Array.prototype methods live under built-ins/Array/prototype and then old tests have uninformative names but new ones you can usually guess what they're getting at from the name","m.mentions":{},"m.new_content":{"body":"generally tests for Array.prototype methods live under built-ins/Array/prototype and then old tests have uninformative names but new ones you can usually guess what they're getting at from the name","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nQP_KAg1Eoi-cjT4ADta4xH3ftvhzE9XSxMzQNs0O2c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727290457448,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W9GYWYJlSWhfpDdQKRFjU-sX_22_cpGRr4a91utF3As"},
{"content":{"body":"yeah exactly, throwing if assignment fails","m.mentions":{},"msgtype":"m.text"},"ts":1727290515833,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Rwn2_4wm35V5tZ1NVRaDDXkPQbM0j-6Gh34Hd1ROa6g"},
{"content":{"body":"and yeah I was looking there, but missed that second one you linked, ty!","m.mentions":{},"msgtype":"m.text"},"ts":1727290574703,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$eMrwOJQ-PesJRBLoKDQezrZ35Ro6Mlb60L5XgPaawwE"},
{"content":{"body":"It doesn't quite hit the specific edge case I'm testing, where an array with specifically a getter only property is set, but close enough for now.","m.mentions":{},"msgtype":"m.text"},"ts":1727290624849,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$D5MCLVBDO9ep3EtgjQkxuH4Z2CDLJV3stMekbYbYm2U"},
{"content":{"body":" * It doesn't quite hit the specific edge case I'm testing, where an array-like with specifically a getter only property is set, but close enough for now.","m.mentions":{},"m.new_content":{"body":"It doesn't quite hit the specific edge case I'm testing, where an array-like with specifically a getter only property is set, but close enough for now.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$D5MCLVBDO9ep3EtgjQkxuH4Z2CDLJV3stMekbYbYm2U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727290680436,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$ZIGVkjzmwXLJ7LimiQLcTX-qhX4KeBjqEQ4XNxysPQQ"},
{"content":{"body":"> <@devsnek:matrix.org> its never too late for `array.at(-1) = y`\n\nEven rbuckton 's ref proposal doesn't allow that sadly. let ref x = array.atRef(-1); x = y; or array.at(-1).value = y; I think, haven't looked at it in a while.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$5CS5Y2KJl7s4Cp-iEejZOI7nvw5q8KO1x-z5vxckOmk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>its never too late for <code>array.at(-1) = y</code></blockquote></mx-reply>Even <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> 's ref proposal doesn't allow that sadly. let ref x = array.atRef(-1); x = y; or array.at(-1).value = y; I think, haven't looked at it in a while.","m.mentions":{"user_ids":["@devsnek:matrix.org","@bakkot:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5CS5Y2KJl7s4Cp-iEejZOI7nvw5q8KO1x-z5vxckOmk"}},"msgtype":"m.text"},"ts":1727302896935,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$a9RhfNLaW4CqlZQidO9BusbGILmY79dfb-drF3efb2Y"},
{"content":{"body":"Also, extractors make `array.at(x) = y` mean something else.","format":"org.matrix.custom.html","formatted_body":"Also, extractors make <code>array.at(x) = y</code> mean something else.","m.mentions":{},"msgtype":"m.text"},"ts":1727302982680,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vnoSkA2ctI4EDOdUyPO5UiN4xvJ63DM9CgBJrSHScKQ"},
{"content":{"body":"ah good call, we'll need to cancel extractors /s","m.mentions":{},"msgtype":"m.text"},"ts":1727303012815,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1wmlCAbbfI4tvA_etwWgaEFYqVgPe1SfC70OeNk7HFY"},
{"content":{"body":"why do people want to type a[-1] = x anyway","m.mentions":{},"msgtype":"m.text"},"ts":1727303024351,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5k7yZGdnNUxBXzNPey_gC0bWH3G2MdqawAbYEXUsOks"},
{"content":{"body":"when you have a stack, the end of the array is the main area you work with","m.mentions":{},"msgtype":"m.text"},"ts":1727303084138,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-EU3_g5Sg9ImK_Lo9dRFHM-5H09qBUKuB6RalI1F7UI"},
{"content":{"body":"i guess you could use shift/unshift but the performance of that across engines and such is not great not terrible","m.mentions":{},"msgtype":"m.text"},"ts":1727303110847,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GJW77ANLa6yZ2H2tWwel9QCzH4RKS0hkmdmgk-_i2-0"},
{"content":{"body":"like, not just peeking at the top of the stack, but actually overwriting it?","m.mentions":{},"msgtype":"m.text"},"ts":1727303198759,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0od_StvZQYEQYIz7PyJ77Uc8VscBS5zI7cN5pPSI7XQ"},
{"content":{"body":"> <@tabatkins:matrix.org> You're right, we just need hookable square brackets, so `array.at[-1] = y` works\n\nI'd love to have hookable indexers, something like:\n```js\nclass C {\n  get this[key]() { ... }\n  set this[key](value) { ... }\n}\n```\nI was just discussing this in the context of the shared structs proposal the other day, since a `SharedArray` can't have extra properties while a normal `Array` can.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Hq3sT-4qiPulohucBxLsfK2NrX0Z1lQpjSt9kPzjJVA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>You're right, we just need hookable square brackets, so <code>array.at[-1] = y</code> works</blockquote></mx-reply><p>I'd love to have hookable indexers, something like:</p>\n<pre><code class=\"language-js\">class C {\n  get this[key]() { ... }\n  set this[key](value) { ... }\n}\n</code></pre>\n<p>I was just discussing this in the context of the shared structs proposal the other day, since a <code>SharedArray</code> can't have extra properties while a normal <code>Array</code> can.</p>\n","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Hq3sT-4qiPulohucBxLsfK2NrX0Z1lQpjSt9kPzjJVA"}},"msgtype":"m.text"},"ts":1727303200288,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zmqWGLGYIkjGA9clVskSI_YUM-0ArEEQ88lTweS69hM"},
{"content":{"body":"or as an optimization to avoid a pop/push?","m.mentions":{},"msgtype":"m.text"},"ts":1727303203069,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yk9om5XkY3VICcCK5iqY1ttDW7EA__MCK57Opdm4aHs"},
{"content":{"body":"There is/was a proposal for relative indexing, i.e. `ar[^1]`","format":"org.matrix.custom.html","formatted_body":"There is/was a proposal for relative indexing, i.e. <code>ar[^1]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727303248304,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZEewjr2Fkoej0BAsSL-Jelb3Suy3BEw-LjbdnzHvbEg"},
{"content":{"body":"i wonder if we can actually just break negative integer indices behavior","m.mentions":{},"msgtype":"m.text"},"ts":1727303339347,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WrxMm7Yv1H8E3kbzaO-prxU66ralJK2vJp1m3dqq20M"},
{"content":{"body":"it probably is an optimization to avoid pop/push sometimes. but other times it may just match the intent more. ","m.mentions":{},"msgtype":"m.text"},"ts":1727303339754,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$md5dkSpdS0a7y76uGeUh8MjhuotgWcClQapTeSUZ_tY"},
{"content":{"body":"v8 not signing up for gathering compat data though","m.mentions":{},"msgtype":"m.text"},"ts":1727303373602,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sodg80iCM9cqIFMe_JxiJqgMXvDWGhZzlr29bbHhgeM"},
{"content":{"body":"that's ok we can just overwrite arc's firebase to inject a script to collect the data","m.mentions":{},"msgtype":"m.text"},"ts":1727303432731,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ae5KLTUyOXeFGayESdiRq-DtqrzqgkxrydxAMwS72Js"},
{"content":{"body":"> <@rbuckton:matrix.org> There is/was a proposal for relative indexing, i.e. `ar[^1]`\n\nI can't find it, but it was discussed in the context of the slice notation proposal. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZEewjr2Fkoej0BAsSL-Jelb3Suy3BEw-LjbdnzHvbEg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There is/was a proposal for relative indexing, i.e. <code>ar[^1]</code></blockquote></mx-reply>I can't find it, but it was discussed in the context of the slice notation proposal.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZEewjr2Fkoej0BAsSL-Jelb3Suy3BEw-LjbdnzHvbEg"}},"msgtype":"m.text"},"ts":1727303433537,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VDWmixMZvp-roH0x4NHTCDiSPfKi2KDdXofkvOenu-s"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd love to have hookable indexers, something like:\n> ```js\n> class C {\n>   get this[key]() { ... }\n>   set this[key](value) { ... }\n> }\n> ```\n> I was just discussing this in the context of the shared structs proposal the other day, since a `SharedArray` can't have extra properties while a normal `Array` can.\n\nthis has definitely interested me at times. i don't think i'd be against it but i'd feel a bit bad about dropping more exotic objects on implementers ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zmqWGLGYIkjGA9clVskSI_YUM-0ArEEQ88lTweS69hM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I'd love to have hookable indexers, something like:</p>\n<pre><code class=\"language-js\">class C {\n  get this[key]() { ... }\n  set this[key](value) { ... }\n}\n</code></pre>\n<p>I was just discussing this in the context of the shared structs proposal the other day, since a <code>SharedArray</code> can't have extra properties while a normal <code>Array</code> can.</p>\n</blockquote></mx-reply>this has definitely interested me at times. i don't think i'd be against it but i'd feel a bit bad about dropping more exotic objects on implementers ðŸ˜…","m.mentions":{"user_ids":["@rbuckton:matrix.org","@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zmqWGLGYIkjGA9clVskSI_YUM-0ArEEQ88lTweS69hM"}},"msgtype":"m.text"},"ts":1727303502478,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$r2b5pCNJuxzesvgvNTr4twNPdAq2WXz5PmHfYXUgZjk"},
{"content":{"body":"> <@devsnek:matrix.org> this has definitely interested me at times. i don't think i'd be against it but i'd feel a bit bad about dropping more exotic objects on implementers ðŸ˜…\n\nThe discussion was about how making indexers first class would allow us to decrease the number of exotic objects. Most of them are \"exotic\" because they have unique indexing capabilities. An actual indexers proposal would need to handle more than just `get`/`set` though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$r2b5pCNJuxzesvgvNTr4twNPdAq2WXz5PmHfYXUgZjk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>this has definitely interested me at times. i don't think i'd be against it but i'd feel a bit bad about dropping more exotic objects on implementers ðŸ˜…</blockquote></mx-reply>The discussion was about how making indexers first class would allow us to decrease the number of exotic objects. Most of them are \"exotic\" because they have unique indexing capabilities. An actual indexers proposal would need to handle more than just <code>get</code>/<code>set</code> though.","m.mentions":{"user_ids":["@devsnek:matrix.org","@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$r2b5pCNJuxzesvgvNTr4twNPdAq2WXz5PmHfYXUgZjk"}},"msgtype":"m.text"},"ts":1727303589756,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3DhZInSNYJdr0EoAAbtrcmndYvG9Bw6UNeHu3hy3c_s"},
{"content":{"body":"> <@shuyuguo:matrix.org> i wonder if we can actually just break negative integer indices behavior\n\ncertainly not for reading; lots of code walks past the end of arrays and looks for `undefined`. probably not for writing either","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WrxMm7Yv1H8E3kbzaO-prxU66ralJK2vJp1m3dqq20M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i wonder if we can actually just break negative integer indices behavior</blockquote></mx-reply>certainly not for reading; lots of code walks past the end of arrays and looks for <code>undefined</code>. probably not for writing either","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WrxMm7Yv1H8E3kbzaO-prxU66ralJK2vJp1m3dqq20M"}},"msgtype":"m.text"},"ts":1727303632836,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7tD_rmoJGsap1oFUoAPhLWcLlLpv40DTKkM6z_ciI4k"},
{"content":{"body":"> <@shuyuguo:matrix.org> or as an optimization to avoid a pop/push?\n\nI have code which does `arr[arr.length - 1] = foo` somewhere on the order of billions of times per day, yes. though I don't think `arr[^-1]` or whatever would be notable faster","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yk9om5XkY3VICcCK5iqY1ttDW7EA__MCK57Opdm4aHs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>or as an optimization to avoid a pop/push?</blockquote></mx-reply>I have code which does <code>arr[arr.length - 1] = foo</code> somewhere on the order of billions of times per day, yes. though I don't think <code>arr[^-1]</code> or whatever would be notable faster","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yk9om5XkY3VICcCK5iqY1ttDW7EA__MCK57Opdm4aHs"}},"msgtype":"m.text"},"ts":1727303715232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cpMnVbDdp3KpaVN6YTwpK1slJMsfKQDoTURtkMy8Ho4"},
{"content":{"body":"in the relative indexing syntax, `^` means \"from end\", so you'd just write `arr[^1]`, not `arr[^-1]`","format":"org.matrix.custom.html","formatted_body":"in the relative indexing syntax, <code>^</code> means \"from end\", so you'd just write <code>arr[^1]</code>, not <code>arr[^-1]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727303781579,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tQG-h09pA-EQDQ-P_IlgEGwEim4lhCnj4kPyqK3F2Ig"}
]