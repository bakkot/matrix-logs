[
{"content":{"body":"jschoi: btw you can link to specific lines by clicking on the timestamp (and optionally shift-clicking on another timestamp to link to a range)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: btw you can link to specific lines by clicking on the timestamp (and optionally shift-clicking on another timestamp to link to a range)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: btw you can link to specific lines by clicking on the timestamp (and optionally shift-clicking on another timestamp to link to a range)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: btw you can link to specific lines by clicking on the timestamp (and optionally shift-clicking on another timestamp to link to a range)","mimetype":"text/html"}]},"ts":1657238675935,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cvRianEx1feGhrplMNe3_MErR5pnXn9GWaVy2IZlgCc"},
{"content":{"body":"> <@jschoi:matrix.org> @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.\n> I don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.\n\ni'm confused; `=>` like in an arrow function? how is that an operator? what's the LHS operand in `(a, b) => {}`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$dDW4gwLegOmx0qosGFVxcYQshYb-q-Dll1rYtW_l82Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and =&gt; from being operators.<br />\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =&gt;, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.</blockquote></mx-reply>i'm confused; <code>=&gt;</code> like in an arrow function? how is that an operator? what's the LHS operand in <code>(a, b) =&gt; {}</code>?","m.relates_to":{"m.in_reply_to":{"event_id":"$dDW4gwLegOmx0qosGFVxcYQshYb-q-Dll1rYtW_l82Q"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.\n> I don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.\n\ni'm confused; `=>` like in an arrow function? how is that an operator? what's the LHS operand in `(a, b) => {}`?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$dDW4gwLegOmx0qosGFVxcYQshYb-q-Dll1rYtW_l82Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and =&gt; from being operators.<br />\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =&gt;, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.</blockquote></mx-reply>i'm confused; <code>=&gt;</code> like in an arrow function? how is that an operator? what's the LHS operand in <code>(a, b) =&gt; {}</code>?","mimetype":"text/html"}]},"ts":1657248899499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_WXHqQGHjdSboAm0WAtIL9PHctO0f3pXSZ_un94iiGM"}
]