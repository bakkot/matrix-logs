[
{"content":{"body":"I know this is a very very old topic. Whatever happens to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was.","msgtype":"m.text","org.matrix.msc1767.text":"I know this is a very very old topic. Whatever happens to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was."},"ts":1671172702047,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$5pQZtCFYX88QEckFcrdFDarlnGAGW7SRCIl-Rv5IVg4"},
{"content":{"body":"I sometimes like it, but it really isn't easy to encourage people to use it. ","msgtype":"m.text"},"ts":1671172783056,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ePg2LkF-L6VUuubyVT2HhXkOtgzYQKbQVhAv5Kvjnso"},
{"content":{"body":" * I know this is a very very old topic. Whatever happened to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was.","m.new_content":{"body":"I know this is a very very old topic. Whatever happened to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was.","msgtype":"m.text","org.matrix.msc1767.text":"I know this is a very very old topic. Whatever happened to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was."},"m.relates_to":{"event_id":"$5pQZtCFYX88QEckFcrdFDarlnGAGW7SRCIl-Rv5IVg4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I know this is a very very old topic. Whatever happened to const parameters? function f(const a){}. I might need that as an assumption to one of my ideas, but was it not possible? It seems straightforward, but I feel like I'm missing some technical issue perhaps that stopped it from being put in when const was."},"ts":1671172865303,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$dlk5uDR3ia0HlDky4H2EPl565KrQptaaluvZ3mNI3Xs"},
{"content":{"body":"It's been 2 weeks since the TC39 meeting, time for Notes to be published?","msgtype":"m.text","org.matrix.msc1767.text":"It's been 2 weeks since the TC39 meeting, time for Notes to be published?"},"ts":1671205581338,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$bkivUo3NGIThqPzWAHgSLGCdg-71JeQAL7GR6Dl2qKA"},
{"content":{"body":"Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","format":"org.matrix.custom.html","formatted_body":"<p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","mimetype":"text/plain"},{"body":"<p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","mimetype":"text/html"}]},"ts":1671216553555,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$lhGAEBu7CkBUBuf4W5JJK_3YjzU_ehkQ0xBImvRPYwY"},
{"content":{"body":" * Question about [Annex B.3.4](https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","format":"org.matrix.custom.html","formatted_body":" * <p>Question about <a href=\"https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\">Annex B.3.4</a>:</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","m.new_content":{"body":"Question about [Annex B.3.4](https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","format":"org.matrix.custom.html","formatted_body":"<p>Question about <a href=\"https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\">Annex B.3.4</a>:</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Question about [Annex B.3.4](https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","mimetype":"text/plain"},{"body":"<p>Question about <a href=\"https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\">Annex B.3.4</a>:</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lhGAEBu7CkBUBuf4W5JJK_3YjzU_ehkQ0xBImvRPYwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Question about [Annex B.3.4](https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","mimetype":"text/plain"},{"body":" * <p>Question about <a href=\"https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\">Annex B.3.4</a>:</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","mimetype":"text/html"}]},"ts":1671216561925,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7ae4TONtGIBffVYlxnZXdRraMtnYczodjMEzMnagwVM"},
{"content":{"body":" * Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","format":"org.matrix.custom.html","formatted_body":" * <p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","m.new_content":{"body":"Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","format":"org.matrix.custom.html","formatted_body":"<p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","mimetype":"text/plain"},{"body":"<p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lhGAEBu7CkBUBuf4W5JJK_3YjzU_ehkQ0xBImvRPYwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):\n\nWhy does the text before the note only modify `var`, while the text after the note also modifies `function`?","mimetype":"text/plain"},{"body":" * <p>Question about Annex B.3.4 (https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks):</p>\n<p>Why does the text before the note only modify <code>var</code>, while the text after the note also modifies <code>function</code>?</p>\n","mimetype":"text/html"}]},"ts":1671216574735,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nuBdUiNc1MC5Q2j3vDlKHQta_hUo6PtDUdRvdQsym4A"},
{"content":{"body":"sorry can you use a content warning for such questions?","msgtype":"m.text","org.matrix.msc1767.text":"sorry can you use a content warning for such questions?"},"ts":1671218127731,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jIIL15dyFRQzQMGp0bxR5Et8WfzNfF_mFAqmzZ9qWDc"},
{"content":{"body":"I was seriously considering doing it ðŸ˜¬","msgtype":"m.text"},"ts":1671218162282,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4T_VgZNL6cqmyZ_sesEuyvldbDd_KYFTORe5sD_65zg"},
{"content":{"body":"i don't understand the question","msgtype":"m.text","org.matrix.msc1767.text":"i don't understand the question"},"ts":1671218347146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IO1t_A1CK1iHeQrQBiatzvETiqrA3HnvJy6Gf2LR2-s"},
{"content":{"body":"oh i think maybe i understand the question","msgtype":"m.text","org.matrix.msc1767.text":"oh i think maybe i understand the question"},"ts":1671218588277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3wnpLSpEXprRPzhC50WDemsG_jd9HmQ2t7TL-vGMqNE"},
{"content":{"body":"Is that section only changing the semantics for function declarations in eval, or also outside of eval?","msgtype":"m.text"},"ts":1671218640478,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$X-iqoz8MBpTvQXuixg25i13g3m65cwqyNKkB08V8fLU"},
{"content":{"body":"i think in practice it's for both","msgtype":"m.text","org.matrix.msc1767.text":"i think in practice it's for both"},"ts":1671218775760,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0AyoaAelCi-SdPN2TlLwk0CeLf9pIwwrBxw7RMlQzAs"},
{"content":{"body":"wouldn't function declarations outside of direct evals already be covered by LexicallyDeclaredNames?","msgtype":"m.text","org.matrix.msc1767.text":"wouldn't function declarations outside of direct evals already be covered by LexicallyDeclaredNames?"},"ts":1671218789089,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xeL73ZBTfPop4Rpgs3AZEsj4_3JI5Pf_BzsO7ELR0FM"},
{"content":{"body":"but function declarations inside direct evals need special handling because top-level function declarations in direct evals only introduce var bindings in the outside scope in B.3.2 semantics anyway... or something like that?","msgtype":"m.text","org.matrix.msc1767.text":"but function declarations inside direct evals need special handling because top-level function declarations in direct evals only introduce var bindings in the outside scope in B.3.2 semantics anyway... or something like that?"},"ts":1671218826414,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vY3WZaizczf4SZOz8sjRrAv_5aerayxqIk-e7P0r0Pc"},
{"content":{"body":"Oh because 11.b of functions in eval (\"If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for body, then\") never produces an early error, so it's different from non-eval functions...","format":"org.matrix.custom.html","formatted_body":"Oh because 11.b of functions in eval (&quot;If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for body, then&quot;) never produces an early error, so it's different from non-eval functions...","msgtype":"m.text"},"ts":1671219020173,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SIxQSO_pgnKJNhw4tfyBoTrkqlsi7UVNIMn3cRU5eYQ"},
{"content":{"body":"Thank you!","msgtype":"m.text"},"ts":1671219023476,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TqiaMmIuRFvJIygqmP601F6vbHGn15zRVk2Lm_xxs94"},
{"content":{"body":"the fact that b.3.2 (formerly b.3.3) semantics are specified with \"as if\" has caused no end of pain","msgtype":"m.text","org.matrix.msc1767.text":"the fact that b.3.2 (formerly b.3.3) semantics are specified with \"as if\" has caused no end of pain"},"ts":1671219147010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qai7hfIlXYkY6fkVRTV_rKEc79tXC-daXjtNpuQlVzs"},
{"content":{"body":"i still have a big bone to pick with specifying any semantics as counterfactuals","msgtype":"m.text","org.matrix.msc1767.text":"i still have a big bone to pick with specifying any semantics as counterfactuals"},"ts":1671219147310,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZZ8nAgp-avrCzUAzNpWaFd4IL8bTrm40LZfHRyneGr4"},
{"content":{"body":"terribly confusing","msgtype":"m.text","org.matrix.msc1767.text":"terribly confusing"},"ts":1671219149153,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mt7cAE-7FCePKgDst8-2mphLx1cLgbgJGTRGoYY4Cwo"},
{"content":{"body":"in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","format":"org.matrix.custom.html","formatted_body":"in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","mimetype":"text/plain"},{"body":"in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","mimetype":"text/html"}]},"ts":1671219160979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AGIOn1nitkXk0uH1FI_kEpu98P25ffGlrQUAVxyvRsc"},
{"content":{"body":"and I am genuinely unclear on whether that's correct per spec","msgtype":"m.text","org.matrix.msc1767.text":"and I am genuinely unclear on whether that's correct per spec"},"ts":1671219174297,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hu3B-PFORs65tkSgCt_8dROKMBtmXZFa-rDn4Vt6zt4"},
{"content":{"body":" * and I am genuinely unclear on whether that's correct per spec","m.new_content":{"body":"and I am genuinely unclear on whether that's correct per spec","msgtype":"m.text","org.matrix.msc1767.text":"and I am genuinely unclear on whether that's correct per spec"},"m.relates_to":{"event_id":"$Hu3B-PFORs65tkSgCt_8dROKMBtmXZFa-rDn4Vt6zt4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * and I am genuinely unclear on whether that's correct per spec"},"ts":1671219180970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eeZatOrdYsPQOi3p4D3avNyt-fPyQ2NA2f90G5fIXCs"},
{"content":{"body":"i think the spirit of it is correct","msgtype":"m.text","org.matrix.msc1767.text":"i think the spirit of it is correct"},"ts":1671219192165,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kio5opEd7DpuJpDK_jr8ats3RyyGdiinCW7DeMHBNo0"},
{"content":{"body":" * in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","format":"org.matrix.custom.html","formatted_body":" * in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","m.new_content":{"body":"in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","format":"org.matrix.custom.html","formatted_body":"in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","mimetype":"text/plain"},{"body":"in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AGIOn1nitkXk0uH1FI_kEpu98P25ffGlrQUAVxyvRsc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * in both chrome and FF (but not JSC) `try {} catch (e) { function e(){} }` is in fact an error","mimetype":"text/plain"},{"body":" * in both chrome and FF (but not JSC) <code>try {} catch (e) { function e(){} }</code> is in fact an error","mimetype":"text/html"}]},"ts":1671219192225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4iYDRXpISdtq6Q_c4kqfxS1oeojEGQLi5dGMrVI8KDg"},
{"content":{"body":"anyways i hope for safari to 1) grow its market share a lot and 2) never implement annex B FiB semantics correctly","msgtype":"m.text","org.matrix.msc1767.text":"anyways i hope for safari to 1) grow its market share a lot and 2) never implement annex B FiB semantics correctly"},"ts":1671219239217,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yMr1zC3fp7JfThdHbAiSgYJPLTI3YTSFYNk-94mQYpM"},
{"content":{"body":"in a few years we rip it out","msgtype":"m.text","org.matrix.msc1767.text":"in a few years we rip it out"},"ts":1671219244129,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_r5B4O-xfYsAzoHDVRyRDFYpCr7q8nIRTSO_CJz-1Bk"},
{"content":{"body":"I guess it's correct because of the \"also occurs in the LexicallyDeclaredNames of Block.\" rule actually, yeah","msgtype":"m.text","org.matrix.msc1767.text":"I guess it's correct because of the \"also occurs in the LexicallyDeclaredNames of Block.\" rule actually, yeah"},"ts":1671219249787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8P5GqjIGdvG7x5esj5SYl2mRT38UKnicn_H-2qhi2V0"},
{"content":{"body":"it's an error not because of the synthetic b.3.2 `var` binding but because of the normal lexically scoped binding","format":"org.matrix.custom.html","formatted_body":"it's an error not because of the synthetic b.3.2 <code>var</code> binding but because of the normal lexically scoped binding","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's an error not because of the synthetic b.3.2 `var` binding but because of the normal lexically scoped binding","mimetype":"text/plain"},{"body":"it's an error not because of the synthetic b.3.2 <code>var</code> binding but because of the normal lexically scoped binding","mimetype":"text/html"}]},"ts":1671219268855,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SLnW6XuioxDrNQe1XHZGeT8uhK5I_HaWhaT-0UTdX_0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1671219277213,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vmvgf3OJy5KYmSaFWKxv0C0bwmTbLYhmXWc8xeRv4iI"}
]