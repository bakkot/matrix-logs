[
{"content":{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/html"}]},"ts":1670302568311,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$eFGY1WQek5i7A0hPOtk-BEjHOQ4M8eGN0YhCw8AmtfU"},
{"content":{"body":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?"},"ts":1670302609901,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IfS5W6rMKvfdnI9XMan6IqScqDbuVSe54SL2XRey0m8"},
{"content":{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","format":"org.matrix.custom.html","formatted_body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/plain"},{"body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/html"}]},"ts":1670302700512,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"},
{"content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(but, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"ts":1670303401109,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo"},
{"content":{"body":"* Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","m.new_content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670303423114,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$muZHgUmfS6tFR4RFhB6f8pBjshOc9dLh3LCzTg3geWs"},
{"content":{"body":"I certainly wouldn't mind a language level take/move type construct tho","msgtype":"m.text"},"ts":1670303576280,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$0z5zMfmJquy9zi6Yr7mWivtN8j9r9NffkWs2e0WWQek"},
{"content":{"body":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge."},"ts":1670303710716,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$QUTvmNBeWDjn9FkVUVV9n1QgpxMFpR1ICTzJ_P5YO1M"},
{"content":{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","format":"org.matrix.custom.html","formatted_body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","mimetype":"text/plain"},{"body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","mimetype":"text/html"}]},"ts":1670303818908,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"},
{"content":{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","format":"org.matrix.custom.html","formatted_body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/plain"},{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/html"}]},"ts":1670303820891,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$1AENqg15iqVDYkhaj5tvquII5KnNu8wF5jC8hW_33mw"},
{"content":{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","format":"org.matrix.custom.html","formatted_body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/plain"},{"body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/html"}]},"ts":1670303861805,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$6b-aFINAg0Rkj5X5T00JgejL9vxSN7IQrKtp9cOg8lA"},
{"content":{"body":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs","msgtype":"m.text","org.matrix.msc1767.text":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs"},"ts":1670303919920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wP5h-0fZTPPeNqdcpAdMiNo-q4MCz7m2cNiLG48nnWA"},
{"content":{"body":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it","msgtype":"m.text","org.matrix.msc1767.text":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it"},"ts":1670303955467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WbbeMg9tXxm4skqu8ocLhH4ALb86frgTY4njC5g2kr8"},
{"content":{"body":"Don't actually know if that's at all feasible though.","msgtype":"m.text","org.matrix.msc1767.text":"Don't actually know if that's at all feasible though."},"ts":1670303964781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C-FvV5EAJroeEXWohWOc1q5v1zLGhvdrceOz7TR2psw"},
{"content":{"body":"Yeah if you could pull that off it seems pretty reasonable.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah if you could pull that off it seems pretty reasonable."},"ts":1670303976141,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ub4dXayAQFyRe5442CTAPpfliR0mlaNdwXD3AB1JZYE"},
{"content":{"body":"> <@domenicdenicola:matrix.org> But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.\n\nYeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.</blockquote></mx-reply>Yeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","m.relates_to":{"m.in_reply_to":{"event_id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"}},"msgtype":"m.text"},"ts":1670316321578,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$uxlo8ZrDSg80ZlCHdX_NuuyRNLcLe09z82zo3tlC_C0"},
{"content":{"body":"> <@bakkot:matrix.org> I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize\n\nI can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize</blockquote></mx-reply>I can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","m.relates_to":{"m.in_reply_to":{"event_id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"}},"msgtype":"m.text"},"ts":1670316425828,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$MCXQBKY5TBc8Q5i4PVBiiUrEQIarlhf-CAEyjBSVXlM"},
{"content":{"body":"It doesn’t seem very difficult","msgtype":"m.text"},"ts":1670316443802,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$CSdNTzQnFrRUsKpxTNe9Oj1l4Es214AJc6FtW8ce7I4"},
{"content":{"body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in `new Response` because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","format":"org.matrix.custom.html","formatted_body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in <code>new Response</code> because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","msgtype":"m.text"},"ts":1670316562460,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$v5ZfXC_5mq2Rpta6RKTV-Je7bW0hT1-HVMN_5bDnvy4"},
{"content":{"body":"Would it be that difficult? You could use the `BackingStore` as the \"owned buffer\".","format":"org.matrix.custom.html","formatted_body":"Would it be that difficult? You could use the <code>BackingStore</code> as the &quot;owned buffer&quot;.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Would it be that difficult? You could use the `BackingStore` as the \"owned buffer\".","mimetype":"text/plain"},{"body":"Would it be that difficult? You could use the <code>BackingStore</code> as the &quot;owned buffer&quot;.","mimetype":"text/html"}]},"ts":1670316744833,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CY5FUmq9DSEfnBHt110AnDWhLr2b0l9c89ja6likDEs"},
{"content":{"body":"The issue that we've been thinking about a lot for Deno is that there are a number of async APIs that take buffers, and those can lead to data races","msgtype":"m.text","org.matrix.msc1767.text":"The issue that we've been thinking about a lot for Deno is that there are a number of async APIs that take buffers, and those can lead to data races"},"ts":1670316814034,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Bfd6NmCQzMlSNl2KhcNScHqvrUM_49q6IGOjtzWSrc4"},
{"content":{"body":"yes, that would be difficult for an API to tell its argument is in fact not aliased without some pretty deep VM support exposed at the API boundary, if there's no language equivalent to, like, rvalue references","msgtype":"m.text","org.matrix.msc1767.text":"yes, that would be difficult for an API to tell its argument is in fact not aliased without some pretty deep VM support exposed at the API boundary, if there's no language equivalent to, like, rvalue references"},"ts":1670341245277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QULUX7S0casdaC6kDbl-yZkLeiSW4F4WqLy9QecVdH8"},
{"content":{"body":"dynamic rvalue references also does not seem like a thing that anyone would want to implement","msgtype":"m.text","org.matrix.msc1767.text":"dynamic rvalue references also does not seem like a thing that anyone would want to implement"},"ts":1670341288109,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d0tCgkS4Q-uyXumqysqT8_WpOLIMYeIc309JDEz4KYE"},
{"content":{"body":"well, i guess it doesn't have to be dynamic","msgtype":"m.text","org.matrix.msc1767.text":"well, i guess it doesn't have to be dynamic"},"ts":1670341311242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wa_uuryH2uFDPd1aEP9o8l0pY-aGEKE-GikYtbhO_YE"},
{"content":{"body":"can we just transition to refcounting? that makes alias detection easier.","msgtype":"m.text","org.matrix.msc1767.text":"can we just transition to refcounting? that makes alias detection easier."},"ts":1670341321739,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VgYBrvk2jw-IXR_RhQdks_ndMan_j_qnCGlZDTxi6sI"},
{"content":{"body":"i hear refcounting is also faster","msgtype":"m.text","org.matrix.msc1767.text":"i hear refcounting is also faster"},"ts":1670341357417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z9cTw_MQg9dz6pSSODR8Y8Rp6RUPtHhQ8jQX6UG3OtM"},
{"content":{"body":"totally","msgtype":"m.text","org.matrix.msc1767.text":"totally"},"ts":1670341371117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$26FdV0AX0eqB8XTJTdgn1kpkCZ6AmjapUN2vLgYy7WY"},
{"content":{"body":"shu: hard to do precisely, but what about a conservative thing where it can say \"not aliased\" or \"maybe aliased\" and be precise enough for `new Response(body.transfer())` to be analyzed as \"not aliased\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: hard to do precisely, but what about a conservative thing where it can say &quot;not aliased&quot; or &quot;maybe aliased&quot; and be precise enough for <code>new Response(body.transfer())</code> to be analyzed as &quot;not aliased&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: hard to do precisely, but what about a conservative thing where it can say \"not aliased\" or \"maybe aliased\" and be precise enough for `new Response(body.transfer())` to be analyzed as \"not aliased\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: hard to do precisely, but what about a conservative thing where it can say &quot;not aliased&quot; or &quot;maybe aliased&quot; and be precise enough for <code>new Response(body.transfer())</code> to be analyzed as &quot;not aliased&quot;","mimetype":"text/html"}]},"ts":1670342376240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iVG8s3Fv8kU_pn36KNjlcNatdLI3cyGSu-lPyl98xj0"},
{"content":{"body":"this is the kind of thing Swift uses to omit the refcounting operations. It just composes so beautifully.","msgtype":"m.text","org.matrix.msc1767.text":"this is the kind of thing Swift uses to omit the refcounting operations. It just composes so beautifully."},"ts":1670343285093,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aC3uLdp4UdOPwlF8BuMhXzVsEK4ydq_12B_to8g6O-k"},
{"content":{"body":"Stage 1? 🥺","msgtype":"m.text","org.matrix.msc1767.text":"Stage 1? 🥺"},"ts":1670343308897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3Agdhoqsl62wTWox_fUh3Yv4Hzq5nnTjkCBgXDz2NcY"},
{"content":{"body":"bakkot: where do we track this bit, for every single argument?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: where do we track this bit, for every single argument?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: where do we track this bit, for every single argument?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: where do we track this bit, for every single argument?","mimetype":"text/html"}]},"ts":1670343427552,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8AjEDJnyrFCPSrnMyM4yvErtxb7g8MGFv3ubswlHCp8"},
{"content":{"body":"just for array buffers","msgtype":"m.text","org.matrix.msc1767.text":"just for array buffers"},"ts":1670343988535,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_pDJVOrmDgoPgH0jCgxFDJfWB00JwNqgzlvr9KwlY4"},
{"content":{"body":"the \"may aliased\" analysis is a static one, no?","msgtype":"m.text","org.matrix.msc1767.text":"the \"may aliased\" analysis is a static one, no?"},"ts":1670344066534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2Zxw4-mWIO0eXF6EOo5JHgtOJHFbJHBs3w0tvSFwApg"},
{"content":{"body":"like, once things are compiled to bytecode, how do i know if a virtual register store (in a register VM) or a stack push (in a stack VM) is an actual binding assignment or a temporary?","msgtype":"m.text","org.matrix.msc1767.text":"like, once things are compiled to bytecode, how do i know if a virtual register store (in a register VM) or a stack push (in a stack VM) is an actual binding assignment or a temporary?"},"ts":1670344104797,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QLfLAtZW9h8DLAruOwkcEM0x6MhhZkU8SSAWkw0-hiY"},
{"content":{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or `dup` etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","format":"org.matrix.custom.html","formatted_body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or <code>dup</code> etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or `dup` etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","mimetype":"text/plain"},{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or <code>dup</code> etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","mimetype":"text/html"}]},"ts":1670344274923,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RylzOvO9CwxljL6FM5DmVUD8G5eY1YptxmuFIf_WmlQ"},
{"content":{"body":"indeed, my point is i suspect to get that bit for ArrayBuffers you need to implement that bit for all data flow","msgtype":"m.text","org.matrix.msc1767.text":"indeed, my point is i suspect to get that bit for ArrayBuffers you need to implement that bit for all data flow"},"ts":1670344982283,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SHWjf020fLehTx4KqmaSBXyjl7pZXpnRr-56zItxpeQ"},
{"content":{"body":"which is a tall ask","msgtype":"m.text","org.matrix.msc1767.text":"which is a tall ask"},"ts":1670344986631,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$913OY1OF7zj0i1UUoKOCJJV08WSpHoZqnKOTT5kHB2g"},
{"content":{"body":"yeah fair enough","msgtype":"m.text","org.matrix.msc1767.text":"yeah fair enough"},"ts":1670347386204,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bYIIkHzZ0CJaYRR6ABjXnNvBt2ix6HYaXaErWBRGOZY"},
{"content":{"body":"Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)","msgtype":"m.text","org.matrix.msc1767.text":"Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)"},"ts":1670348024203,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$Ewo2B3BbfkNyE4FdDTWz5af0TY54Xsu3Os9JL_zUxlQ"},
{"content":{"body":"I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.\n\nThe current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do `ab.slice(0)` in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.\n\nI can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.","format":"org.matrix.custom.html","formatted_body":"<p>I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.</p>\n<p>The current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do <code>ab.slice(0)</code> in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.</p>\n<p>I can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.\n\nThe current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do `ab.slice(0)` in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.\n\nI can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.","mimetype":"text/plain"},{"body":"<p>I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.</p>\n<p>The current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do <code>ab.slice(0)</code> in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.</p>\n<p>I can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.</p>\n","mimetype":"text/html"}]},"ts":1670348085848,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y4bK1MkfOwh9knjJy9cEAn7WoKp0P1MhY_2neLUZs2A"},
{"content":{"body":"Mathieu Hofman: my characterization is \"security risk\" and not just \"complication\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: my characterization is &quot;security risk&quot; and not just &quot;complication&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mathieu Hofman: my characterization is \"security risk\" and not just \"complication\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: my characterization is &quot;security risk&quot; and not just &quot;complication&quot;","mimetype":"text/html"}]},"ts":1670349544093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qgX3pVkd2IMZIcn1mSd8shSF0HjY7z7Il2TZufTvrZU"},
{"content":{"body":"like, a direct security risk instead of security risk arising from more complexity","msgtype":"m.text","org.matrix.msc1767.text":"like, a direct security risk instead of security risk arising from more complexity"},"ts":1670349553562,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2BM-5K2A7iD09qXqUFNixaHGegrYrIEVXZ4t1xMqBts"},
{"content":{"body":"and in that light, i stand by that increasing likelihood of browser users not being exploited is the correct tradeoff","msgtype":"m.text","org.matrix.msc1767.text":"and in that light, i stand by that increasing likelihood of browser users not being exploited is the correct tradeoff"},"ts":1670349592529,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$peA_gBv75AayXHeeq-qscAwRU9YqXtZdsbqc2eigiVc"}
]