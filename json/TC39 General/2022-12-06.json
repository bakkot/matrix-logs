[
{"content":{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/html"}]},"ts":1670302568311,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$eFGY1WQek5i7A0hPOtk-BEjHOQ4M8eGN0YhCw8AmtfU"},
{"content":{"body":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?"},"ts":1670302609901,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IfS5W6rMKvfdnI9XMan6IqScqDbuVSe54SL2XRey0m8"},
{"content":{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","format":"org.matrix.custom.html","formatted_body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/plain"},{"body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/html"}]},"ts":1670302700512,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"},
{"content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(but, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"ts":1670303401109,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo"}
]