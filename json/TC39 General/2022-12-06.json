[
{"content":{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/html"}]},"ts":1670302568311,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$eFGY1WQek5i7A0hPOtk-BEjHOQ4M8eGN0YhCw8AmtfU"},
{"content":{"body":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?"},"ts":1670302609901,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IfS5W6rMKvfdnI9XMan6IqScqDbuVSe54SL2XRey0m8"},
{"content":{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","format":"org.matrix.custom.html","formatted_body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/plain"},{"body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/html"}]},"ts":1670302700512,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"},
{"content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(but, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"ts":1670303401109,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo"},
{"content":{"body":"* Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","m.new_content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670303423114,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$muZHgUmfS6tFR4RFhB6f8pBjshOc9dLh3LCzTg3geWs"},
{"content":{"body":"I certainly wouldn't mind a language level take/move type construct tho","msgtype":"m.text"},"ts":1670303576280,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$0z5zMfmJquy9zi6Yr7mWivtN8j9r9NffkWs2e0WWQek"},
{"content":{"body":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge."},"ts":1670303710716,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$QUTvmNBeWDjn9FkVUVV9n1QgpxMFpR1ICTzJ_P5YO1M"},
{"content":{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","format":"org.matrix.custom.html","formatted_body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","mimetype":"text/plain"},{"body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","mimetype":"text/html"}]},"ts":1670303818908,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"},
{"content":{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","format":"org.matrix.custom.html","formatted_body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/plain"},{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/html"}]},"ts":1670303820891,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$1AENqg15iqVDYkhaj5tvquII5KnNu8wF5jC8hW_33mw"},
{"content":{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","format":"org.matrix.custom.html","formatted_body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/plain"},{"body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/html"}]},"ts":1670303861805,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$6b-aFINAg0Rkj5X5T00JgejL9vxSN7IQrKtp9cOg8lA"},
{"content":{"body":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs","msgtype":"m.text","org.matrix.msc1767.text":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs"},"ts":1670303919920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wP5h-0fZTPPeNqdcpAdMiNo-q4MCz7m2cNiLG48nnWA"},
{"content":{"body":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it","msgtype":"m.text","org.matrix.msc1767.text":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it"},"ts":1670303955467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WbbeMg9tXxm4skqu8ocLhH4ALb86frgTY4njC5g2kr8"},
{"content":{"body":"Don't actually know if that's at all feasible though.","msgtype":"m.text","org.matrix.msc1767.text":"Don't actually know if that's at all feasible though."},"ts":1670303964781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C-FvV5EAJroeEXWohWOc1q5v1zLGhvdrceOz7TR2psw"},
{"content":{"body":"Yeah if you could pull that off it seems pretty reasonable.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah if you could pull that off it seems pretty reasonable."},"ts":1670303976141,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ub4dXayAQFyRe5442CTAPpfliR0mlaNdwXD3AB1JZYE"},
{"content":{"body":"> <@domenicdenicola:matrix.org> But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.\n\nYeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.</blockquote></mx-reply>Yeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","m.relates_to":{"m.in_reply_to":{"event_id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"}},"msgtype":"m.text"},"ts":1670316321578,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$uxlo8ZrDSg80ZlCHdX_NuuyRNLcLe09z82zo3tlC_C0"},
{"content":{"body":"> <@bakkot:matrix.org> I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize\n\nI can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize</blockquote></mx-reply>I can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","m.relates_to":{"m.in_reply_to":{"event_id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"}},"msgtype":"m.text"},"ts":1670316425828,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$MCXQBKY5TBc8Q5i4PVBiiUrEQIarlhf-CAEyjBSVXlM"},
{"content":{"body":"It doesn’t seem very difficult","msgtype":"m.text"},"ts":1670316443802,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$CSdNTzQnFrRUsKpxTNe9Oj1l4Es214AJc6FtW8ce7I4"},
{"content":{"body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in `new Response` because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","format":"org.matrix.custom.html","formatted_body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in <code>new Response</code> because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","msgtype":"m.text"},"ts":1670316562460,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$v5ZfXC_5mq2Rpta6RKTV-Je7bW0hT1-HVMN_5bDnvy4"},
{"content":{"body":"Would it be that difficult? You could use the `BackingStore` as the \"owned buffer\".","format":"org.matrix.custom.html","formatted_body":"Would it be that difficult? You could use the <code>BackingStore</code> as the &quot;owned buffer&quot;.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Would it be that difficult? You could use the `BackingStore` as the \"owned buffer\".","mimetype":"text/plain"},{"body":"Would it be that difficult? You could use the <code>BackingStore</code> as the &quot;owned buffer&quot;.","mimetype":"text/html"}]},"ts":1670316744833,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CY5FUmq9DSEfnBHt110AnDWhLr2b0l9c89ja6likDEs"},
{"content":{"body":"The issue that we've been thinking about a lot for Deno is that there are a number of async APIs that take buffers, and those can lead to data races","msgtype":"m.text","org.matrix.msc1767.text":"The issue that we've been thinking about a lot for Deno is that there are a number of async APIs that take buffers, and those can lead to data races"},"ts":1670316814034,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Bfd6NmCQzMlSNl2KhcNScHqvrUM_49q6IGOjtzWSrc4"},
{"content":{"body":"yes, that would be difficult for an API to tell its argument is in fact not aliased without some pretty deep VM support exposed at the API boundary, if there's no language equivalent to, like, rvalue references","msgtype":"m.text","org.matrix.msc1767.text":"yes, that would be difficult for an API to tell its argument is in fact not aliased without some pretty deep VM support exposed at the API boundary, if there's no language equivalent to, like, rvalue references"},"ts":1670341245277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QULUX7S0casdaC6kDbl-yZkLeiSW4F4WqLy9QecVdH8"},
{"content":{"body":"dynamic rvalue references also does not seem like a thing that anyone would want to implement","msgtype":"m.text","org.matrix.msc1767.text":"dynamic rvalue references also does not seem like a thing that anyone would want to implement"},"ts":1670341288109,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d0tCgkS4Q-uyXumqysqT8_WpOLIMYeIc309JDEz4KYE"},
{"content":{"body":"well, i guess it doesn't have to be dynamic","msgtype":"m.text","org.matrix.msc1767.text":"well, i guess it doesn't have to be dynamic"},"ts":1670341311242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wa_uuryH2uFDPd1aEP9o8l0pY-aGEKE-GikYtbhO_YE"},
{"content":{"body":"can we just transition to refcounting? that makes alias detection easier.","msgtype":"m.text","org.matrix.msc1767.text":"can we just transition to refcounting? that makes alias detection easier."},"ts":1670341321739,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VgYBrvk2jw-IXR_RhQdks_ndMan_j_qnCGlZDTxi6sI"},
{"content":{"body":"i hear refcounting is also faster","msgtype":"m.text","org.matrix.msc1767.text":"i hear refcounting is also faster"},"ts":1670341357417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z9cTw_MQg9dz6pSSODR8Y8Rp6RUPtHhQ8jQX6UG3OtM"},
{"content":{"body":"totally","msgtype":"m.text","org.matrix.msc1767.text":"totally"},"ts":1670341371117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$26FdV0AX0eqB8XTJTdgn1kpkCZ6AmjapUN2vLgYy7WY"},
{"content":{"body":"shu: hard to do precisely, but what about a conservative thing where it can say \"not aliased\" or \"maybe aliased\" and be precise enough for `new Response(body.transfer())` to be analyzed as \"not aliased\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: hard to do precisely, but what about a conservative thing where it can say &quot;not aliased&quot; or &quot;maybe aliased&quot; and be precise enough for <code>new Response(body.transfer())</code> to be analyzed as &quot;not aliased&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: hard to do precisely, but what about a conservative thing where it can say \"not aliased\" or \"maybe aliased\" and be precise enough for `new Response(body.transfer())` to be analyzed as \"not aliased\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: hard to do precisely, but what about a conservative thing where it can say &quot;not aliased&quot; or &quot;maybe aliased&quot; and be precise enough for <code>new Response(body.transfer())</code> to be analyzed as &quot;not aliased&quot;","mimetype":"text/html"}]},"ts":1670342376240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iVG8s3Fv8kU_pn36KNjlcNatdLI3cyGSu-lPyl98xj0"},
{"content":{"body":"this is the kind of thing Swift uses to omit the refcounting operations. It just composes so beautifully.","msgtype":"m.text","org.matrix.msc1767.text":"this is the kind of thing Swift uses to omit the refcounting operations. It just composes so beautifully."},"ts":1670343285093,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aC3uLdp4UdOPwlF8BuMhXzVsEK4ydq_12B_to8g6O-k"},
{"content":{"body":"Stage 1? 🥺","msgtype":"m.text","org.matrix.msc1767.text":"Stage 1? 🥺"},"ts":1670343308897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3Agdhoqsl62wTWox_fUh3Yv4Hzq5nnTjkCBgXDz2NcY"},
{"content":{"body":"bakkot: where do we track this bit, for every single argument?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: where do we track this bit, for every single argument?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: where do we track this bit, for every single argument?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: where do we track this bit, for every single argument?","mimetype":"text/html"}]},"ts":1670343427552,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8AjEDJnyrFCPSrnMyM4yvErtxb7g8MGFv3ubswlHCp8"},
{"content":{"body":"just for array buffers","msgtype":"m.text","org.matrix.msc1767.text":"just for array buffers"},"ts":1670343988535,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_pDJVOrmDgoPgH0jCgxFDJfWB00JwNqgzlvr9KwlY4"},
{"content":{"body":"the \"may aliased\" analysis is a static one, no?","msgtype":"m.text","org.matrix.msc1767.text":"the \"may aliased\" analysis is a static one, no?"},"ts":1670344066534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2Zxw4-mWIO0eXF6EOo5JHgtOJHFbJHBs3w0tvSFwApg"},
{"content":{"body":"like, once things are compiled to bytecode, how do i know if a virtual register store (in a register VM) or a stack push (in a stack VM) is an actual binding assignment or a temporary?","msgtype":"m.text","org.matrix.msc1767.text":"like, once things are compiled to bytecode, how do i know if a virtual register store (in a register VM) or a stack push (in a stack VM) is an actual binding assignment or a temporary?"},"ts":1670344104797,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QLfLAtZW9h8DLAruOwkcEM0x6MhhZkU8SSAWkw0-hiY"},
{"content":{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or `dup` etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","format":"org.matrix.custom.html","formatted_body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or <code>dup</code> etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or `dup` etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","mimetype":"text/plain"},{"body":"the register store / stack push isn't aliasing in itself, presumably - it only becomes aliased once you read it off the stack (or <code>dup</code> etc). but I suppose updating all those ops so that they'd know to set the bit is expensive","mimetype":"text/html"}]},"ts":1670344274923,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RylzOvO9CwxljL6FM5DmVUD8G5eY1YptxmuFIf_WmlQ"},
{"content":{"body":"indeed, my point is i suspect to get that bit for ArrayBuffers you need to implement that bit for all data flow","msgtype":"m.text","org.matrix.msc1767.text":"indeed, my point is i suspect to get that bit for ArrayBuffers you need to implement that bit for all data flow"},"ts":1670344982283,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SHWjf020fLehTx4KqmaSBXyjl7pZXpnRr-56zItxpeQ"},
{"content":{"body":"which is a tall ask","msgtype":"m.text","org.matrix.msc1767.text":"which is a tall ask"},"ts":1670344986631,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$913OY1OF7zj0i1UUoKOCJJV08WSpHoZqnKOTT5kHB2g"},
{"content":{"body":"yeah fair enough","msgtype":"m.text","org.matrix.msc1767.text":"yeah fair enough"},"ts":1670347386204,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bYIIkHzZ0CJaYRR6ABjXnNvBt2ix6HYaXaErWBRGOZY"},
{"content":{"body":"Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)","msgtype":"m.text","org.matrix.msc1767.text":"Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)"},"ts":1670348024203,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$Ewo2B3BbfkNyE4FdDTWz5af0TY54Xsu3Os9JL_zUxlQ"},
{"content":{"body":"I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.\n\nThe current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do `ab.slice(0)` in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.\n\nI can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.","format":"org.matrix.custom.html","formatted_body":"<p>I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.</p>\n<p>The current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do <code>ab.slice(0)</code> in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.</p>\n<p>I can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.\n\nThe current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do `ab.slice(0)` in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.\n\nI can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.","mimetype":"text/plain"},{"body":"<p>I'm still of the opinion that Copy-on-Write is the least intrusive change for developers, and would provide performance improvements for existing programs that use array buffers.</p>\n<p>The current paradigm is that if you want to make sure the receiver of an arraybuffer doesn't change the data, or if as the receiver you want to use the data asynchronously insulating yourself from later changes by the caller, you simply do <code>ab.slice(0)</code> in both cases. If the implementation would keep the same memory backing store until either side attempts to write in it, all these use cases would now be zero copy unless they attempted to do the mutation this pattern is protecting against. No need for explicit transfer of ownership, which is somewhat a foreign concept in JavaScript.</p>\n<p>I can understand such a level of indirection is a complication for implementations, and the write guards would make optimizations more difficult, but I am wondering if we're weighting the potential improvements for users correctly related to the implementation's concerns.</p>\n","mimetype":"text/html"}]},"ts":1670348085848,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y4bK1MkfOwh9knjJy9cEAn7WoKp0P1MhY_2neLUZs2A"},
{"content":{"body":"Mathieu Hofman: my characterization is \"security risk\" and not just \"complication\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: my characterization is &quot;security risk&quot; and not just &quot;complication&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mathieu Hofman: my characterization is \"security risk\" and not just \"complication\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: my characterization is &quot;security risk&quot; and not just &quot;complication&quot;","mimetype":"text/html"}]},"ts":1670349544093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qgX3pVkd2IMZIcn1mSd8shSF0HjY7z7Il2TZufTvrZU"},
{"content":{"body":"like, a direct security risk instead of security risk arising from more complexity","msgtype":"m.text","org.matrix.msc1767.text":"like, a direct security risk instead of security risk arising from more complexity"},"ts":1670349553562,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2BM-5K2A7iD09qXqUFNixaHGegrYrIEVXZ4t1xMqBts"},
{"content":{"body":"and in that light, i stand by that increasing likelihood of browser users not being exploited is the correct tradeoff","msgtype":"m.text","org.matrix.msc1767.text":"and in that light, i stand by that increasing likelihood of browser users not being exploited is the correct tradeoff"},"ts":1670349592529,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$peA_gBv75AayXHeeq-qscAwRU9YqXtZdsbqc2eigiVc"},
{"content":{"body":"V8 has CoW optimization for regular arrays, for instance, which aren't used as an attack vector as much","msgtype":"m.text","org.matrix.msc1767.text":"V8 has CoW optimization for regular arrays, for instance, which aren't used as an attack vector as much"},"ts":1670349646760,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uqNXZ1NARcUIeU80zYXPfc0MVEcKIY3azTLDLco2RV8"},
{"content":{"body":"i would also contend transfer of ownership is not at all a foreign concept in JS, because detaching obviously exists?","msgtype":"m.text","org.matrix.msc1767.text":"i would also contend transfer of ownership is not at all a foreign concept in JS, because detaching obviously exists?"},"ts":1670349677339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gxYxWavGpDMU8V91MP2MmCNhfKWWbsMEVpZuKzGTsjc"},
{"content":{"body":"I don't understand what is fundamentally a security risk about copy on write? I understand it's possible for optimizations to be buggy and miss the update in backing memory, but that stems from an implementation complexity","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand what is fundamentally a security risk about copy on write? I understand it's possible for optimizations to be buggy and miss the update in backing memory, but that stems from an implementation complexity"},"ts":1670349683331,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CSquaK3Mklu3Cgr3xYKvI_KaTBpiAtu2b1rVubn4S5M"},
{"content":{"body":"detaching doesn't exist in JS itself, it only happens when integrating with host APIs","msgtype":"m.text","org.matrix.msc1767.text":"detaching doesn't exist in JS itself, it only happens when integrating with host APIs"},"ts":1670349735420,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MswteMBCwuETp-ZOrwNn7yd9wGsb2yr8EhLq1PMkrPY"},
{"content":{"body":"Mathieu Hofman: it is as i described here: https://github.com/tc39/proposal-arraybuffer-transfer#if-performance-is-the-goal-why-add-new-methods-instead-of-implementing-copy-on-write-cow-as-a-transparent-optimization","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: it is as i described here: https://github.com/tc39/proposal-arraybuffer-transfer#if-performance-is-the-goal-why-add-new-methods-instead-of-implementing-copy-on-write-cow-as-a-transparent-optimization","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mathieu Hofman: it is as i described here: https://github.com/tc39/proposal-arraybuffer-transfer#if-performance-is-the-goal-why-add-new-methods-instead-of-implementing-copy-on-write-cow-as-a-transparent-optimization","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: it is as i described here: https://github.com/tc39/proposal-arraybuffer-transfer#if-performance-is-the-goal-why-add-new-methods-instead-of-implementing-copy-on-write-cow-as-a-transparent-optimization","mimetype":"text/html"}]},"ts":1670349739415,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0W6Gt_y1FB8jnAJB8tkdlLDJMvL42Nb4EsBrh7tDVbQ"},
{"content":{"body":"I read that, and understood the it as an implementation choice, which is impacting the usability by end users.","msgtype":"m.text","org.matrix.msc1767.text":"I read that, and understood the it as an implementation choice, which is impacting the usability by end users."},"ts":1670349912731,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$i2zF575YVk4cmKx54BMHnNJBxp9nlYAQ_ra_T2zDKoE"},
{"content":{"body":"if your rebuttal is \"bugs are an implementation problem\", the response is that there are bugs we have seen crop up over and over to an extent that we consider other mitigations necessary than just \"be really correct\"","msgtype":"m.text","org.matrix.msc1767.text":"if your rebuttal is \"bugs are an implementation problem\", the response is that there are bugs we have seen crop up over and over to an extent that we consider other mitigations necessary than just \"be really correct\""},"ts":1670349942968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nz4vKftUGsoXbusZ3Pt3ltbFjez-RFPUbxh0_3D6c50"},
{"content":{"body":"because, you know, engineers aren't perfect","msgtype":"m.text","org.matrix.msc1767.text":"because, you know, engineers aren't perfect"},"ts":1670349955534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9qwyYkF1w5cWyEvBDro28jkfk7VSFF44ohmi8iLYz0Y"},
{"content":{"body":"i can't help but feel that reducing that motivation to \"implementation choices should never impact usability of end users\" is naive","msgtype":"m.text","org.matrix.msc1767.text":"i can't help but feel that reducing that motivation to \"implementation choices should never impact usability of end users\" is naive"},"ts":1670349993020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D8qMtZ7QFQslZyzigm4FyzyA2LbgHR0Bssg7zfB9FWE"},
{"content":{"body":"I think I was just asking if there was a way to estimate the performance improvement CoW would bring to existing programs, so that it can be weighted against the implementation complexity it'd require","msgtype":"m.text","org.matrix.msc1767.text":"I think I was just asking if there was a way to estimate the performance improvement CoW would bring to existing programs, so that it can be weighted against the implementation complexity it'd require"},"ts":1670350037582,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fX2VTK1VBGAoClnlB5HOyXEpAaxI3cb7JQa4q9X6Jf8"},
{"content":{"body":"i don't know how one would estimate that except by doing the implementation","msgtype":"m.text","org.matrix.msc1767.text":"i don't know how one would estimate that except by doing the implementation"},"ts":1670350074505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9yGPdzQPg0j0Eva8KZV3qrznYw7RqvlRpv4XDw9QYO4"},
{"content":{"body":"I'm not asking to strictly put the need of end users above the needs of implementation","msgtype":"m.text","org.matrix.msc1767.text":"I'm not asking to strictly put the need of end users above the needs of implementation"},"ts":1670350076289,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$X-Q-4UikTSkIQFnhyO9LF4DiBWqbURk0fzBnC4ZcNTY"},
{"content":{"body":"should the risk calculus change in the future (like, we figure out another mitigation that is even better and less constraining of APIs), having a transfer method certainly doesn't preclude CoW optimizations","msgtype":"m.text","org.matrix.msc1767.text":"should the risk calculus change in the future (like, we figure out another mitigation that is even better and less constraining of APIs), having a transfer method certainly doesn't preclude CoW optimizations"},"ts":1670350234626,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8ZfLUu4z2thO16dS-AJEz3Pzm2RVcYtOINuZc5xp8aw"},
{"content":{"body":"fair","msgtype":"m.text","org.matrix.msc1767.text":"fair"},"ts":1670350301207,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ys3kWBSQ23BisgjgFZifbyWwUN72kQGIN5LKAl-A6yg"},
{"content":{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","format":"org.matrix.custom.html","formatted_body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/plain"},{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$MswteMBCwuETp-ZOrwNn7yd9wGsb2yr8EhLq1PMkrPY"}}},"ts":1670350350242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$roIwV9rJa45BVnA6Bl0H3T_MoEBhPyErd5lbAexz-68"},
{"content":{"body":"> <@mhofman:matrix.org> detaching doesn't exist in JS itself, it only happens when integrating with host APIs\n\n * for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MswteMBCwuETp-ZOrwNn7yd9wGsb2yr8EhLq1PMkrPY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>detaching doesn't exist in JS itself, it only happens when integrating with host APIs</blockquote></mx-reply> * for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","m.new_content":{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","format":"org.matrix.custom.html","formatted_body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/plain"},{"body":"for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$roIwV9rJa45BVnA6Bl0H3T_MoEBhPyErd5lbAexz-68","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> detaching doesn't exist in JS itself, it only happens when integrating with host APIs\n\n * for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MswteMBCwuETp-ZOrwNn7yd9wGsb2yr8EhLq1PMkrPY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>detaching doesn't exist in JS itself, it only happens when integrating with host APIs</blockquote></mx-reply> * for this point, i contend it doesn't serve us well to not consider hosts in language design, and further, transferables are a well established part of the ecosystem","mimetype":"text/html"}]},"ts":1670350371467,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sdmVrAfn8tzct2jaFQaEgGBDNKT6rlmZRz30DsB2cpw"},
{"content":{"body":"but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling `.transfer()`, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit `transfer` option). As I said, transfer is not a concept core to the JS language","format":"org.matrix.custom.html","formatted_body":"but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling <code>.transfer()</code>, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit <code>transfer</code> option). As I said, transfer is not a concept core to the JS language","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling `.transfer()`, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit `transfer` option). As I said, transfer is not a concept core to the JS language","mimetype":"text/plain"},{"body":"but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling <code>.transfer()</code>, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit <code>transfer</code> option). As I said, transfer is not a concept core to the JS language","mimetype":"text/html"}]},"ts":1670350485766,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h5zVO3E68fW-Ct2q0im52kfdSzsmc_5K1gZeuF2o6p4"},
{"content":{"body":"What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?","msgtype":"m.text","org.matrix.msc1767.text":"What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?"},"ts":1670350583603,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$R_ZHfq5Fxuq5D6ldFjXpcmo-n5tnV0WlSbRKwQe_Dso"},
{"content":{"body":"I am wondering if we should also add a way to make the target buffer \"read-only\" when transferring, and a way to test whether the AB is read-only.","msgtype":"m.text","org.matrix.msc1767.text":"I am wondering if we should also add a way to make the target buffer \"read-only\" when transferring, and a way to test whether the AB is read-only."},"ts":1670350900088,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$PmhTt46J8pf3NwbulwjZWGQfHUgOZLCMcMzzv9YqSkY"},
{"content":{"body":"I believe Jack Works started exploring that in https://github.com/tc39/proposal-limited-arraybuffer","format":"org.matrix.custom.html","formatted_body":"I believe <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> started exploring that in https://github.com/tc39/proposal-limited-arraybuffer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I believe Jack Works started exploring that in https://github.com/tc39/proposal-limited-arraybuffer","mimetype":"text/plain"},{"body":"I believe <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> started exploring that in https://github.com/tc39/proposal-limited-arraybuffer","mimetype":"text/html"}]},"ts":1670351098618,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WN-l5XM1hU37fUpoO2i5ruemft_p6J5S7eTJQ5NLeG8"},
{"content":{"body":"> <@tolmasky:matrix.org> Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)\n\nIt sounds like you're talking about the `id` attribute of `<emu-clause>` elements. It's true that the mapping from section-title to section-id isn't entirely consistent, but how does that make tooling difficult? Can't the tool just get the title-to-id mapping (e.g. from a biblio file) and remember it? Also, your example is odd, because there's no section with `id=\"sec-async-function\"`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Ewo2B3BbfkNyE4FdDTWz5af0TY54Xsu3Os9JL_zUxlQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tolmasky:matrix.org\">@tolmasky:matrix.org</a><br>Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)</blockquote></mx-reply>It sounds like you're talking about the <code>id</code> attribute of <code>&lt;emu-clause&gt;</code> elements. It's true that the mapping from section-title to section-id isn't entirely consistent, but how does that make tooling difficult? Can't the tool just get the title-to-id mapping (e.g. from a biblio file) and remember it? Also, your example is odd, because there's no section with <code>id=&quot;sec-async-function&quot;</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ewo2B3BbfkNyE4FdDTWz5af0TY54Xsu3Os9JL_zUxlQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tolmasky:matrix.org> Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)\n\nIt sounds like you're talking about the `id` attribute of `<emu-clause>` elements. It's true that the mapping from section-title to section-id isn't entirely consistent, but how does that make tooling difficult? Can't the tool just get the title-to-id mapping (e.g. from a biblio file) and remember it? Also, your example is odd, because there's no section with `id=\"sec-async-function\"`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Ewo2B3BbfkNyE4FdDTWz5af0TY54Xsu3Os9JL_zUxlQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tolmasky:matrix.org\">@tolmasky:matrix.org</a><br>Another nitpick about the spec that makes certain tooling difficult: sometimes camel case intrinsics are simply lowercased for their sections (such as sec-asycngeneratorfunction), but other times they are dash cased (such as sec-async-function)</blockquote></mx-reply>It sounds like you're talking about the <code>id</code> attribute of <code>&lt;emu-clause&gt;</code> elements. It's true that the mapping from section-title to section-id isn't entirely consistent, but how does that make tooling difficult? Can't the tool just get the title-to-id mapping (e.g. from a biblio file) and remember it? Also, your example is odd, because there's no section with <code>id=&quot;sec-async-function&quot;</code>.","mimetype":"text/html"}]},"ts":1670352379928,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$B3KVok6NAgEY5RyYCZPpclqQfH5pVWa0EMCikd1x0HE"},
{"content":{"body":"sec-async-function-.*","msgtype":"m.text","org.matrix.msc1767.text":"sec-async-function-.*"},"ts":1670352448027,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$Ni1zQ18pq2dBUukhj8-REteKoyJQGAYi0zW3dIleviw"},
{"content":{"body":"I go intrinsics table -> `sec-${transform(intrinsic_name)-*` to grab all the methods/etc., the actual selector is now `sec-${intrinsic_name.toLowercase()` or `sec-get-${intrinsic_name.toLowerCase()}` or `sec-${dashcase(intrinsic_name)}` or `sec-get-${dashcase(intrinsic_name)`","format":"org.matrix.custom.html","formatted_body":"I go intrinsics table -&gt; <code>sec-${transform(intrinsic_name)-*</code> to grab all the methods/etc., the actual selector is now <code>sec-${intrinsic_name.toLowercase()</code> or <code>sec-get-${intrinsic_name.toLowerCase()}</code> or <code>sec-${dashcase(intrinsic_name)}</code> or <code>sec-get-${dashcase(intrinsic_name)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I go intrinsics table -> `sec-${transform(intrinsic_name)-*` to grab all the methods/etc., the actual selector is now `sec-${intrinsic_name.toLowercase()` or `sec-get-${intrinsic_name.toLowerCase()}` or `sec-${dashcase(intrinsic_name)}` or `sec-get-${dashcase(intrinsic_name)`","mimetype":"text/plain"},{"body":"I go intrinsics table -&gt; <code>sec-${transform(intrinsic_name)-*</code> to grab all the methods/etc., the actual selector is now <code>sec-${intrinsic_name.toLowercase()</code> or <code>sec-get-${intrinsic_name.toLowerCase()}</code> or <code>sec-${dashcase(intrinsic_name)}</code> or <code>sec-get-${dashcase(intrinsic_name)</code>","mimetype":"text/html"}]},"ts":1670352580000,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$91VsuIKvxRKmUDiCUSFCbubgeqL9dZBxvVdP1Zw_VRQ"},
{"content":{"body":"Unfortunately the biblio seems to be missing certain things, I am just trying to get every intrinsic (not just top level ones, so like, Array.whatever.whatever), along with its parameters, etc. in a structured format)","msgtype":"m.text","org.matrix.msc1767.text":"Unfortunately the biblio seems to be missing certain things, I am just trying to get every intrinsic (not just top level ones, so like, Array.whatever.whatever), along with its parameters, etc. in a structured format)"},"ts":1670352626611,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$s_cN9tLtBsEmFiKoUW4JN5Ar43U39caHQpS4oxwgAoM"},
{"content":{"body":"the above seems to grab everything","msgtype":"m.text","org.matrix.msc1767.text":"the above seems to grab everything"},"ts":1670352637368,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$kPYrnqIALoQ5hBbbZqOQSiwsn9GYGGncUo9caFv-RcQ"},
{"content":{"body":"The table is only the \"well known\" intrinsics, not every intrinsic.","msgtype":"m.text","org.matrix.msc1767.text":"The table is only the \"well known\" intrinsics, not every intrinsic."},"ts":1670352671017,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$JMWsYHxYfJRrmH4SIQ2V8L3eIThJktoUqmncM8qC6A0"},
{"content":{"body":"right, thats why I then climb the rest of the spec","msgtype":"m.text","org.matrix.msc1767.text":"right, thats why I then climb the rest of the spec"},"ts":1670352761079,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$D_Zo7XESkKJVmcOb-MLMzrGKel9YDmx9nWx3M0eREnc"},
{"content":{"body":"not sure if that is what you mean, or just wanted me to correct my statement to say \"I want to grab all the well known intrinsics\", either way, sure","msgtype":"m.text","org.matrix.msc1767.text":"not sure if that is what you mean, or just wanted me to correct my statement to say \"I want to grab all the well known intrinsics\", either way, sure"},"ts":1670352786608,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$qLOw2Fm_80ElWMcpSj8Y0YpyQ7ymNx9T1JYtw0ekRuw"},
{"content":{"body":"okay, so if you're crawling the rest of the spec anyway, you could pick up the id for each intrinsic in the process. I.e., you don't really need the well-known intrinsics table? ","msgtype":"m.text","org.matrix.msc1767.text":"okay, so if you're crawling the rest of the spec anyway, you could pick up the id for each intrinsic in the process. I.e., you don't really need the well-known intrinsics table? "},"ts":1670352945585,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$I8EoQVkJ2vgabJ7ZFZUzSE0PLVYsEZRtaUAlM4FfyMM"},
{"content":{"body":"I climb the spec to find all the intrinsics, then i want to find their definitions, hence needing to create the id. so, if I want to find what the parameters of AsyncFunction, then I have to go to sec-asyncfunction-constructor or whatever, hence the need to generate these things. I already find them all, I was just commenting that I noticed this. It's not a super big deal and would just remove 2 lines. If there's opposition to standardizing around lowercasing or dashcasing its certainly not *preventing* me from doing anything","format":"org.matrix.custom.html","formatted_body":"I climb the spec to find all the intrinsics, then i want to find their definitions, hence needing to create the id. so, if I want to find what the parameters of AsyncFunction, then I have to go to sec-asyncfunction-constructor or whatever, hence the need to generate these things. I already find them all, I was just commenting that I noticed this. It's not a super big deal and would just remove 2 lines. If there's opposition to standardizing around lowercasing or dashcasing its certainly not <em>preventing</em> me from doing anything","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I climb the spec to find all the intrinsics, then i want to find their definitions, hence needing to create the id. so, if I want to find what the parameters of AsyncFunction, then I have to go to sec-asyncfunction-constructor or whatever, hence the need to generate these things. I already find them all, I was just commenting that I noticed this. It's not a super big deal and would just remove 2 lines. If there's opposition to standardizing around lowercasing or dashcasing its certainly not *preventing* me from doing anything","mimetype":"text/plain"},{"body":"I climb the spec to find all the intrinsics, then i want to find their definitions, hence needing to create the id. so, if I want to find what the parameters of AsyncFunction, then I have to go to sec-asyncfunction-constructor or whatever, hence the need to generate these things. I already find them all, I was just commenting that I noticed this. It's not a super big deal and would just remove 2 lines. If there's opposition to standardizing around lowercasing or dashcasing its certainly not <em>preventing</em> me from doing anything","mimetype":"text/html"}]},"ts":1670353148698,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$iWe0xsrAeTnAaTN6zdXCMbfMbEp80rzkZEdiD-C4Z0I"},
{"content":{"body":"> <@mhofman:matrix.org> I am wondering if we should also add a way to make the target buffer \"read-only\" when transferring, and a way to test whether the AB is read-only.\n\nwhat's the argument for making it the same API?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$PmhTt46J8pf3NwbulwjZWGQfHUgOZLCMcMzzv9YqSkY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I am wondering if we should also add a way to make the target buffer &quot;read-only&quot; when transferring, and a way to test whether the AB is read-only.</blockquote></mx-reply>what's the argument for making it the same API?","m.relates_to":{"m.in_reply_to":{"event_id":"$PmhTt46J8pf3NwbulwjZWGQfHUgOZLCMcMzzv9YqSkY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> I am wondering if we should also add a way to make the target buffer \"read-only\" when transferring, and a way to test whether the AB is read-only.\n\nwhat's the argument for making it the same API?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$PmhTt46J8pf3NwbulwjZWGQfHUgOZLCMcMzzv9YqSkY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I am wondering if we should also add a way to make the target buffer &quot;read-only&quot; when transferring, and a way to test whether the AB is read-only.</blockquote></mx-reply>what's the argument for making it the same API?","mimetype":"text/html"}]},"ts":1670353194901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hIUDJq0sZsnHPlqwLqKlXs-hcTB-dgwHl2UpIPjR9xo"},
{"content":{"body":"i'm open to the idea of RO buffers","msgtype":"m.text","org.matrix.msc1767.text":"i'm open to the idea of RO buffers"},"ts":1670353201817,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uq6Okvnaar-IL_6qjn_dSo-YcGDQ2cfs040T1gHT4XI"},
{"content":{"body":"> <@mhofman:matrix.org> What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?\n\njust structured clone afaik, but that's a pretty core part of the ecosystem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$R_ZHfq5Fxuq5D6ldFjXpcmo-n5tnV0WlSbRKwQe_Dso?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?</blockquote></mx-reply>just structured clone afaik, but that's a pretty core part of the ecosystem","m.relates_to":{"m.in_reply_to":{"event_id":"$R_ZHfq5Fxuq5D6ldFjXpcmo-n5tnV0WlSbRKwQe_Dso"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?\n\njust structured clone afaik, but that's a pretty core part of the ecosystem","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$R_ZHfq5Fxuq5D6ldFjXpcmo-n5tnV0WlSbRKwQe_Dso?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What other parts of the ecosystem besides structured cloning have a concept of transfer of ownership ?</blockquote></mx-reply>just structured clone afaik, but that's a pretty core part of the ecosystem","mimetype":"text/html"}]},"ts":1670353243942,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ilyi7KVthD1VgnnIWS2FE8_jUbVEK4vWncD9wRrZZpQ"},
{"content":{"body":"tolmasky: I don't understand how you can find all the intrinsics *without* finding their definitions.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: I don't understand how you can find all the intrinsics <em>without</em> finding their definitions.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tolmasky: I don't understand how you can find all the intrinsics *without* finding their definitions.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: I don't understand how you can find all the intrinsics <em>without</em> finding their definitions.","mimetype":"text/html"}]},"ts":1670353467939,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$XaGgRA0Cmx4qUjFxnBWPPf7p3S8gmgs5rZk5Zn_RgjY"},
{"content":{"body":"I'm putting the code online so I can show you, one sec","msgtype":"m.text","org.matrix.msc1767.text":"I'm putting the code online so I can show you, one sec"},"ts":1670353622320,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$4UDKSKGZ_-cjEsuaqgHHCMnz8gzxw_1xLo0nvxOKws8"},
{"content":{"body":"> <@mhofman:matrix.org> but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling `.transfer()`, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit `transfer` option). As I said, transfer is not a concept core to the JS language\n\ni don't quite see it that way, i think the transfer semantics is a core concept to the JS language, and the discussion above is about the scalability challenges of the status quo of expressing move-semantics APIs, which is a separate options bag or overloads (like the transfer list in structured cloning) or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$h5zVO3E68fW-Ct2q0im52kfdSzsmc_5K1gZeuF2o6p4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling <code>.transfer()</code>, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit <code>transfer</code> option). As I said, transfer is not a concept core to the JS language</blockquote></mx-reply>i don't quite see it that way, i think the transfer semantics is a core concept to the JS language, and the discussion above is about the scalability challenges of the status quo of expressing move-semantics APIs, which is a separate options bag or overloads (like the transfer list in structured cloning) or something","m.relates_to":{"m.in_reply_to":{"event_id":"$h5zVO3E68fW-Ct2q0im52kfdSzsmc_5K1gZeuF2o6p4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling `.transfer()`, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit `transfer` option). As I said, transfer is not a concept core to the JS language\n\ni don't quite see it that way, i think the transfer semantics is a core concept to the JS language, and the discussion above is about the scalability challenges of the status quo of expressing move-semantics APIs, which is a separate options bag or overloads (like the transfer list in structured cloning) or something","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$h5zVO3E68fW-Ct2q0im52kfdSzsmc_5K1gZeuF2o6p4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>but I don't see how transfer solves all the use cases. As the discussion goes above, as the receiver of an array buffer, how can I guarantee I have exclusive access to the buffer, besides myself calling <code>.transfer()</code>, which would be a breaking change for existing APIs, and hard to express would happen in the API contract (besides as mentioned, an explicit <code>transfer</code> option). As I said, transfer is not a concept core to the JS language</blockquote></mx-reply>i don't quite see it that way, i think the transfer semantics is a core concept to the JS language, and the discussion above is about the scalability challenges of the status quo of expressing move-semantics APIs, which is a separate options bag or overloads (like the transfer list in structured cloning) or something","mimetype":"text/html"}]},"ts":1670353758268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nsC5tcqQOUnsHe0kw_MehtiRpmz4_XKyJn-Mcjqm5gI"},
{"content":{"body":"having a language level affordance like `take` doesn't really answer the question of the API design, like the fast-path slow-path thing","format":"org.matrix.custom.html","formatted_body":"having a language level affordance like <code>take</code> doesn't really answer the question of the API design, like the fast-path slow-path thing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"having a language level affordance like `take` doesn't really answer the question of the API design, like the fast-path slow-path thing","mimetype":"text/plain"},{"body":"having a language level affordance like <code>take</code> doesn't really answer the question of the API design, like the fast-path slow-path thing","mimetype":"text/html"}]},"ts":1670353813084,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eOFrxG0mCxqwooetuBRmDckim-EfTskZ3cjv_6XhIn0"},
{"content":{"body":"do you have overloads for all existing buffersource-taking APIs? do all future APIs need to have both overloads? those still need to be answered","msgtype":"m.text","org.matrix.msc1767.text":"do you have overloads for all existing buffersource-taking APIs? do all future APIs need to have both overloads? those still need to be answered"},"ts":1670353833149,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ukI4qXqCagC6PC61RIjD7_QfNAgN8G0EFNpQYkh1PEk"},
{"content":{"body":"CoW comes at it at a different angle, but is not ideal in its own way since you can still end up with a copy, and i think is an independent optimization that shouldn't be depended to motivate move semantics in either direction","msgtype":"m.text","org.matrix.msc1767.text":"CoW comes at it at a different angle, but is not ideal in its own way since you can still end up with a copy, and i think is an independent optimization that shouldn't be depended to motivate move semantics in either direction"},"ts":1670353940743,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qofnpY3UmH8aJAMrbt4B-BC65hKz4rIxalKYN-OErqA"},
{"content":{"body":"Here's an updated gist that we discussed in module meeting: https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e","msgtype":"m.text","org.matrix.msc1767.text":"Here's an updated gist that we discussed in module meeting: https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e"},"ts":1670354380739,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vxYZN2El-k52ru0FvWYtYiNbC5NxmZD5JX7gj0-SV24"},
{"content":{"body":"The way that I think about all features we add is  \"how would I write this today\", and this is how I would write `module` keyword today","format":"org.matrix.custom.html","formatted_body":"The way that I think about all features we add is  &quot;how would I write this today&quot;, and this is how I would write <code>module</code> keyword today","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The way that I think about all features we add is  \"how would I write this today\", and this is how I would write `module` keyword today","mimetype":"text/plain"},{"body":"The way that I think about all features we add is  &quot;how would I write this today&quot;, and this is how I would write <code>module</code> keyword today","mimetype":"text/html"}]},"ts":1670354448007,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Y7YCEuo77466hmf_iyyHYhdYHyx7s7W9gsDb_4TSOTQ"},
{"content":{"body":"If we were to switch to `as ‘foo’`, it solves my main concern (how do we do runtime reflections using a single syntax, eg `as ‘text’` or `as ‘buffer’`","format":"org.matrix.custom.html","formatted_body":"If we were to switch to <code>as ‘foo’</code>, it solves my main concern (how do we do runtime reflections using a single syntax, eg <code>as ‘text’</code> or <code>as ‘buffer’</code>","msgtype":"m.text"},"ts":1670354998762,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$T2xE2K_Tj1dqUk-9cUov1aa80kxKEE_a3msoiorREyY"},
{"content":{"body":"But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an `<img src>`. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an <code>&lt;img src&gt;</code>. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","msgtype":"m.text"},"ts":1670355153270,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sNPyBB-YeEsHaOhiCdtSBg2erLX9Wn-KUHfaxdVPRb8"},
{"content":{"body":"* But we’re likely to see conflicts, eg next’s as ‘image’` would include the intrinsic width/height of the original image, and an asset url usable in `. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"* But we’re likely to see conflicts, eg next’s as ‘image’<code>would include the intrinsic width/height of the original image, and an asset url usable in</code>. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","m.new_content":{"body":"But we’re likely to see conflicts, eg next’s as ‘image’` would include the intrinsic width/height of the original image, and an asset url usable in `. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"But we’re likely to see conflicts, eg next’s as ‘image’<code>would include the intrinsic width/height of the original image, and an asset url usable in</code>. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","msgtype":"m.text"},"m.relates_to":{"event_id":"$sNPyBB-YeEsHaOhiCdtSBg2erLX9Wn-KUHfaxdVPRb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670355174443,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hO_mSSOB-qS-50zcjgG6k4wmjAuwaX3Mv1OdPym0ieM"},
{"content":{"body":"* But we’re likely to see conflicts, eg next’s `as ‘image’` would include the intrinsic width/height of the original image, and an asset url usable in. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"* But we’re likely to see conflicts, eg next’s <code>as ‘image’</code> would include the intrinsic width/height of the original image, and an asset url usable in. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","m.new_content":{"body":"But we’re likely to see conflicts, eg next’s `as ‘image’` would include the intrinsic width/height of the original image, and an asset url usable in. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"But we’re likely to see conflicts, eg next’s <code>as ‘image’</code> would include the intrinsic width/height of the original image, and an asset url usable in. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","msgtype":"m.text"},"m.relates_to":{"event_id":"$sNPyBB-YeEsHaOhiCdtSBg2erLX9Wn-KUHfaxdVPRb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670355226790,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xvtQtRwcWcIpk-QS_C2ecjhfCrb9Q3CjdV2Qs8opurQ"},
{"content":{"body":"* But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an `<img src>`. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"* But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an <code>&lt;img src&gt;</code>. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","m.new_content":{"body":"But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an `<img src>`. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","format":"org.matrix.custom.html","formatted_body":"But we’re likely to see conflicts, eg next’s as ‘image’ would include the intrinsic width/height of the original image, and an asset url usable in an <code>&lt;img src&gt;</code>. I imagine other frameworks might want the aspect ratio, or another optional value. Maybe they just want a data url (AMP needed that)","msgtype":"m.text"},"m.relates_to":{"event_id":"$sNPyBB-YeEsHaOhiCdtSBg2erLX9Wn-KUHfaxdVPRb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670355261576,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1-qU1ZFW91KTLS6tFkwMgHxNu53OgwuaUIqcEQHaIxM"},
{"content":{"body":"> <@shuyuguo:matrix.org> what's the argument for making it the same API?\n\navoid some of the pitfalls of `Object.freeze` which if replicated would allow anyone with access to the ArrayBuffer to make read-only in place, potentially violating the expectations of the sharer. However since this is also a concern I have for transfer as well, aka if just holding an arraybuffer should give you the authority to detach it, maybe that ship has sailed?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$hIUDJq0sZsnHPlqwLqKlXs-hcTB-dgwHl2UpIPjR9xo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what's the argument for making it the same API?</blockquote></mx-reply>avoid some of the pitfalls of <code>Object.freeze</code> which if replicated would allow anyone with access to the ArrayBuffer to make read-only in place, potentially violating the expectations of the sharer. However since this is also a concern I have for transfer as well, aka if just holding an arraybuffer should give you the authority to detach it, maybe that ship has sailed?","m.relates_to":{"m.in_reply_to":{"event_id":"$hIUDJq0sZsnHPlqwLqKlXs-hcTB-dgwHl2UpIPjR9xo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> what's the argument for making it the same API?\n\navoid some of the pitfalls of `Object.freeze` which if replicated would allow anyone with access to the ArrayBuffer to make read-only in place, potentially violating the expectations of the sharer. However since this is also a concern I have for transfer as well, aka if just holding an arraybuffer should give you the authority to detach it, maybe that ship has sailed?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$hIUDJq0sZsnHPlqwLqKlXs-hcTB-dgwHl2UpIPjR9xo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what's the argument for making it the same API?</blockquote></mx-reply>avoid some of the pitfalls of <code>Object.freeze</code> which if replicated would allow anyone with access to the ArrayBuffer to make read-only in place, potentially violating the expectations of the sharer. However since this is also a concern I have for transfer as well, aka if just holding an arraybuffer should give you the authority to detach it, maybe that ship has sailed?","mimetype":"text/html"}]},"ts":1670358446253,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mHU407bknWxMCiV4Y8Tz70q0LUGQaozQnzHHOrHoRwY"},
{"content":{"body":"> <@shuyuguo:matrix.org> just structured clone afaik, but that's a pretty core part of the ecosystem\n\nYeah structured cloning is very web specific, and I don't know of any generic user libraries which deals with such concepts at their interface","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ilyi7KVthD1VgnnIWS2FE8_jUbVEK4vWncD9wRrZZpQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>just structured clone afaik, but that's a pretty core part of the ecosystem</blockquote></mx-reply>Yeah structured cloning is very web specific, and I don't know of any generic user libraries which deals with such concepts at their interface","m.relates_to":{"m.in_reply_to":{"event_id":"$ilyi7KVthD1VgnnIWS2FE8_jUbVEK4vWncD9wRrZZpQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> just structured clone afaik, but that's a pretty core part of the ecosystem\n\nYeah structured cloning is very web specific, and I don't know of any generic user libraries which deals with such concepts at their interface","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ilyi7KVthD1VgnnIWS2FE8_jUbVEK4vWncD9wRrZZpQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>just structured clone afaik, but that's a pretty core part of the ecosystem</blockquote></mx-reply>Yeah structured cloning is very web specific, and I don't know of any generic user libraries which deals with such concepts at their interface","mimetype":"text/html"}]},"ts":1670358515839,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aIGD91QzJ-XFPEQl6R5BpJmmGjklWH-LaztYGelmmCs"},
{"content":{"body":"I think in general JS has a concept of access through possession of object references, but in my opinion, the language itself does not have a built-in notion of ownership, and by extension of transfer of such ownership. We may introduce some notion of ownership with resource management, but that'd be somewhat tied with the concept of scope. The semantics of that proposal make it unlikely for these managed resources to be shared further than the owner, and I don't think transfer of ownership will mix.","msgtype":"m.text","org.matrix.msc1767.text":"I think in general JS has a concept of access through possession of object references, but in my opinion, the language itself does not have a built-in notion of ownership, and by extension of transfer of such ownership. We may introduce some notion of ownership with resource management, but that'd be somewhat tied with the concept of scope. The semantics of that proposal make it unlikely for these managed resources to be shared further than the owner, and I don't think transfer of ownership will mix."},"ts":1670358816180,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rgGMm9Ms1j_KtyhzZSCITDeMWWqHjoAcnMaTG51R-KA"},
{"content":{"body":"jmdyck: Here: https://runkit.com/tolmasky/extracting-intrinsic-objects-from-ecmascript-specification --  I am not aware of an easier way of doing this. I found it pretty difficult to navigate biblio successfully. (shouldn't really be necessary to make your way through this, but here is parseSignature if it matters: https://runkit-packages.com/14.x.x/1670358356466/@reified/ecma262/tools/update-intrinsics/parse-signature.js )","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: Here: https://runkit.com/tolmasky/extracting-intrinsic-objects-from-ecmascript-specification --  I am not aware of an easier way of doing this. I found it pretty difficult to navigate biblio successfully. (shouldn't really be necessary to make your way through this, but here is parseSignature if it matters: https://runkit-packages.com/14.x.x/1670358356466/@reified/ecma262/tools/update-intrinsics/parse-signature.js )","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jmdyck: Here: https://runkit.com/tolmasky/extracting-intrinsic-objects-from-ecmascript-specification --  I am not aware of an easier way of doing this. I found it pretty difficult to navigate biblio successfully. (shouldn't really be necessary to make your way through this, but here is parseSignature if it matters: https://runkit-packages.com/14.x.x/1670358356466/@reified/ecma262/tools/update-intrinsics/parse-signature.js )","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jmdyck:matrix.org\">jmdyck</a>: Here: https://runkit.com/tolmasky/extracting-intrinsic-objects-from-ecmascript-specification --  I am not aware of an easier way of doing this. I found it pretty difficult to navigate biblio successfully. (shouldn't really be necessary to make your way through this, but here is parseSignature if it matters: https://runkit-packages.com/14.x.x/1670358356466/@reified/ecma262/tools/update-intrinsics/parse-signature.js )","mimetype":"text/html"}]},"ts":1670358879457,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$jV0KuncQxG26iw2HSbPMwmtRLIFzcy3xtPewsqZFkOM"},
{"content":{"body":"Anyways, the only reason I asked about the consistency of the IDs is that it would allow me to avoid testing so many permutations (line 33). But again, it's not *actually* a big deal, I was moreso curious if there was a reason for it, and if not, maybe I would in my free time do a PR making them consistent","format":"org.matrix.custom.html","formatted_body":"Anyways, the only reason I asked about the consistency of the IDs is that it would allow me to avoid testing so many permutations (line 33). But again, it's not <em>actually</em> a big deal, I was moreso curious if there was a reason for it, and if not, maybe I would in my free time do a PR making them consistent","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, the only reason I asked about the consistency of the IDs is that it would allow me to avoid testing so many permutations (line 33). But again, it's not *actually* a big deal, I was moreso curious if there was a reason for it, and if not, maybe I would in my free time do a PR making them consistent","mimetype":"text/plain"},{"body":"Anyways, the only reason I asked about the consistency of the IDs is that it would allow me to avoid testing so many permutations (line 33). But again, it's not <em>actually</em> a big deal, I was moreso curious if there was a reason for it, and if not, maybe I would in my free time do a PR making them consistent","mimetype":"text/html"}]},"ts":1670358963541,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$cW-hD3_pULMCEM5jiTzyDbUAPWg222Y03CmTvi6v8LE"},
{"content":{"body":"The same way programmers share object references and can spread it to capture the (shallow) state of that object, I see CoW as optimizing the same pattern for byte arrays, where you shared the data, and expressing that you're interested in capturing the state of that data.","msgtype":"m.text","org.matrix.msc1767.text":"The same way programmers share object references and can spread it to capture the (shallow) state of that object, I see CoW as optimizing the same pattern for byte arrays, where you shared the data, and expressing that you're interested in capturing the state of that data."},"ts":1670359078486,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hfLjOMdNq7BxZ6ssILUE2subE_r0n_iPa-BVgFelADM"},
{"content":{"body":"Which is why I suggested readonly array buffers as an alternative, where you explicitly create an immutable copy, which can be relied upon. If Records and Tuples catch on, this would roughly be the equivalent for bytes (which raises the question whether those have any links)","msgtype":"m.text","org.matrix.msc1767.text":"Which is why I suggested readonly array buffers as an alternative, where you explicitly create an immutable copy, which can be relied upon. If Records and Tuples catch on, this would roughly be the equivalent for bytes (which raises the question whether those have any links)"},"ts":1670359251065,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$YMu-ofyaKsnSWyMXVqMQYMLe68twxdz_4QDQVrp3EWk"},
{"content":{"body":"We could probably argue that \"read-only\" array buffers may need to be non-transferable, so that they are really immutable, aka they will keep working.","msgtype":"m.text","org.matrix.msc1767.text":"We could probably argue that \"read-only\" array buffers may need to be non-transferable, so that they are really immutable, aka they will keep working."},"ts":1670359380862,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-FeqHR1aLgYvqpWQCVOYFES2Zz-ln2gAPX7rGzkFzLU"},
{"content":{"body":"tolmasky: no reason for the inconsistency in IDs, just different authors writing different parts and not doing exactly the same things","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: no reason for the inconsistency in IDs, just different authors writing different parts and not doing exactly the same things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tolmasky: no reason for the inconsistency in IDs, just different authors writing different parts and not doing exactly the same things","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: no reason for the inconsistency in IDs, just different authors writing different parts and not doing exactly the same things","mimetype":"text/html"}]},"ts":1670359564312,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BW23g2L6LAwtv9ByuKntPidTffSn1oCwIUuDfOwD9ZQ"},
{"content":{"body":"wouldn't say no to a PR making them consistent if you feel like doing it, though mind that we'd need oldids on everything to keep old links working","msgtype":"m.text","org.matrix.msc1767.text":"wouldn't say no to a PR making them consistent if you feel like doing it, though mind that we'd need oldids on everything to keep old links working"},"ts":1670359588753,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GfFDZXG05COatgOIa8VxDtB3jRxv_4MFYtySlzXuGSI"},
{"content":{"body":"If I did a PR to make them consistent, would that be useful, or are we afraid of breaking links or something","msgtype":"m.text","org.matrix.msc1767.text":"If I did a PR to make them consistent, would that be useful, or are we afraid of breaking links or something"},"ts":1670359615253,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$otYGvkWeclu4DqV0MfNilyFA1GxiXZTJ-GFXwfkUWWU"},
{"content":{"body":"kind of makes no difference to me since we want to run this on every iteration of the spec, so we'll need this code forever either way, but just curious","msgtype":"m.text","org.matrix.msc1767.text":"kind of makes no difference to me since we want to run this on every iteration of the spec, so we'll need this code forever either way, but just curious"},"ts":1670359641668,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$McZaNH75YV_hsKpYEO1I-trOaTzb31vzLI_g0MlkTLY"},
{"content":{"body":"if you put oldids links won't break, so no particular risk","msgtype":"m.text","org.matrix.msc1767.text":"if you put oldids links won't break, so no particular risk"},"ts":1670359805106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bk-2Ksuxi6qlJ1DZaGT1lHyuAUF3dTl25KdC78tBoqQ"},
{"content":{"body":"I don't know if anyone else has ever been affected about the inconsistency, though, so I don't know if it's necessarily _useful_ per se","format":"org.matrix.custom.html","formatted_body":"I don't know if anyone else has ever been affected about the inconsistency, though, so I don't know if it's necessarily <em>useful</em> per se","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't know if anyone else has ever been affected about the inconsistency, though, so I don't know if it's necessarily _useful_ per se","mimetype":"text/plain"},{"body":"I don't know if anyone else has ever been affected about the inconsistency, though, so I don't know if it's necessarily <em>useful</em> per se","mimetype":"text/html"}]},"ts":1670359826528,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_z_OVJgGc17DVM2fBe8pFLRrrlDfLKg-tPS8QDaLgGk"},
{"content":{"body":"Mathieu Hofman: as for web specificity, i point you to the other champions of the proposal coming from node","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: as for web specificity, i point you to the other champions of the proposal coming from node","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mathieu Hofman: as for web specificity, i point you to the other champions of the proposal coming from node","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: as for web specificity, i point you to the other champions of the proposal coming from node","mimetype":"text/html"}]},"ts":1670365811828,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XiIcdptHLgA3qFpp3Vi3UDmvoyaxNhNYICR0F82lGww"},
{"content":{"body":"structured clone may be have originated from the web, but it is a core part of the ecosystem","msgtype":"m.text","org.matrix.msc1767.text":"structured clone may be have originated from the web, but it is a core part of the ecosystem"},"ts":1670365826859,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KqNhRV05LGYcOQJ8LVYObZD9lHglkn2g_4T9AAnnjag"},
{"content":{"body":"CoW and RO TAs are orthogonal and i am supportive of exploring them independently","msgtype":"m.text","org.matrix.msc1767.text":"CoW and RO TAs are orthogonal and i am supportive of exploring them independently"},"ts":1670365864180,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-ftRboU41IJT0qjyLWgGF5GBO-ARwGKjS63Quae_Fy8"},
{"content":{"body":"\"The semantics of that proposal make it unlikely for these managed resources to be shared further than the owner, and I don't think transfer of ownership will mix.\" <- i don't understand this","msgtype":"m.text","org.matrix.msc1767.text":"\"The semantics of that proposal make it unlikely for these managed resources to be shared further than the owner, and I don't think transfer of ownership will mix.\" <- i don't understand this"},"ts":1670365909408,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GOoEeAMCZwKoChtFQRvCGz66oTOZW60LW0Rt8wvZQrM"},
{"content":{"body":"oh \"that proposal\" is referring to resource management, i see","msgtype":"m.text","org.matrix.msc1767.text":"oh \"that proposal\" is referring to resource management, i see"},"ts":1670365932707,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KZfC9-khvpTyF2l-KwUyx_dr3DhO0l6k9k-lE-Fznr4"},
{"content":{"body":"i mean i also disagree? DisposableStacks have a move?","msgtype":"m.text","org.matrix.msc1767.text":"i mean i also disagree? DisposableStacks have a move?"},"ts":1670365953307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_A9vyjyIQEaOQtAqi44pq1DnWG9bvEc1HetE_tk-zwY"},
{"content":{"body":"i agree that there's no built-in notion of ownership in the formal sense, but there's certainly a sense of \"i'm going to neuter the object\"","msgtype":"m.text","org.matrix.msc1767.text":"i agree that there's no built-in notion of ownership in the formal sense, but there's certainly a sense of \"i'm going to neuter the object\""},"ts":1670366013542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$l7VlHgM2pNrGwLYDfQVakSc9Xct81FUzenjzxqBV2KY"},
{"content":{"body":"I think the use case for move is mainly for moving a set of resource ownership from a constructor scope to the constructed object. I don't see it as aimed to move ownership to a 3rd party","msgtype":"m.text"},"ts":1670366043411,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Joke-6i8B4dswAR2VyHlfgHCmpb7Ze3TLLWjHC_Pfi0"},
{"content":{"body":"it's the same use case as the buffer one, no?","msgtype":"m.text","org.matrix.msc1767.text":"it's the same use case as the buffer one, no?"},"ts":1670366082108,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yoOGmukliUtQBA6WudY24XUox-TV2zP9kat15ed4ts0"},
{"content":{"body":"i mean the buffer reader isn't an unknown 3p","msgtype":"m.text","org.matrix.msc1767.text":"i mean the buffer reader isn't an unknown 3p"},"ts":1670366091338,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rfM39HmMKtRp_QgLjIPzAAfwPLI9B4avmFmSGu4tjCY"},
{"content":{"body":"that is -- if the disagreement is with how widely applicable the notion of \"ownership\" is in the transfer proposal, i contend it is exactly as widely applicable as DisposableStack's","msgtype":"m.text","org.matrix.msc1767.text":"that is -- if the disagreement is with how widely applicable the notion of \"ownership\" is in the transfer proposal, i contend it is exactly as widely applicable as DisposableStack's"},"ts":1670366129812,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3jnWMBuxe1eVGydc-tDXwdsbQplSR6gbb-nyiCVU-go"},
{"content":{"body":"like this isn't designed to enable native APIs to take ownership, that _does_ require more work","format":"org.matrix.custom.html","formatted_body":"like this isn't designed to enable native APIs to take ownership, that <em>does</em> require more work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like this isn't designed to enable native APIs to take ownership, that _does_ require more work","mimetype":"text/plain"},{"body":"like this isn't designed to enable native APIs to take ownership, that <em>does</em> require more work","mimetype":"text/html"}]},"ts":1670366180486,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6NABUmJ-yqS4GUTadXekneQ37zu7Tq8QZLdtRith8GY"},
{"content":{"body":"I dunno about the reader API specifically, but having written a decent amount of code dealing with node streams, it never seemed clear to me what the expected semantics of passing array buffers around were. It seems that the receiver often assumes the producer will no longer mutate the buffer, but that is far from being enforced / checked or even explicit.","msgtype":"m.text"},"ts":1670366336581,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$d7TLLYorFoISiwVBT7kz_idE1UvSlCIDdt2b63NqUlA"},
{"content":{"body":"And I think maybe that's where read-only stream would at least make those semantics more explicit.","msgtype":"m.text"},"ts":1670366399320,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2L9lzpdhY4TErsnAT_pEtTNMbyCKKyuu_r5x4SK0kZY"},
{"content":{"body":"i confess i don't know what the immediate disagreement is","msgtype":"m.text","org.matrix.msc1767.text":"i confess i don't know what the immediate disagreement is"},"ts":1670366419382,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VOFcswut25p4Jzf8LVNkQU9zm43WQopUGPiPW3HrxbQ"},
{"content":{"body":"Regarding structured cloned I guess we'll have to disagree how relevant it is to the ecosystem. One particular web API used in node for roughly the same use case (worker rpc) does not make it a strong precedent in my mind for a widely used pattern.","msgtype":"m.text"},"ts":1670366489300,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$b1DbukL9YiZ_iT8NXGo0ZxR9I1U-9uLPyAtxGa1T9bM"},
{"content":{"body":"well, what's your position on the proposal? the closest i can make out is perhaps that you think it is mutually exclusive with CoW optimizations and RO buffers","msgtype":"m.text","org.matrix.msc1767.text":"well, what's your position on the proposal? the closest i can make out is perhaps that you think it is mutually exclusive with CoW optimizations and RO buffers"},"ts":1670366536052,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7zmN6JtmYPYYqvLLLwSxdontBAy2jfRuGJUW5mtUm4k"},
{"content":{"body":"I think all I'm trying to say is that I don't believe transfer sufficiently solves all the use cases related to the expression of \"ownership intent\" for array buffers, and that defensive code does need more tools. Currently defensive code uses `slice` but if we can't optimize that, I'd like the transfer proposal to try and tackle more fully the ergonomics of passing array buffers around.","msgtype":"m.text"},"ts":1670366711332,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7bRliLFMFmbJe6IMpd47CyZRafgY_F71KJKZWh-u5P0"},
{"content":{"body":"i see","msgtype":"m.text","org.matrix.msc1767.text":"i see"},"ts":1670366722592,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J8PQoSlVTtDv-Lb0CHdIbIzJry4H085geyP-ovAe1vs"},
{"content":{"body":"thank you, noted, and i will ponder it. i would love some dynamic notion of ownership","msgtype":"m.text","org.matrix.msc1767.text":"thank you, noted, and i will ponder it. i would love some dynamic notion of ownership"},"ts":1670366752356,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HzDu7SJVAkYez9atv6FqWA9QvVn04Fwo8LlXk-N8umk"},
{"content":{"body":"I think I agree that CoW would be an orthogonal optimization.","msgtype":"m.text"},"ts":1670366758905,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Z9il98_YnVHbb3GHP9jP2jS-tCcYijBusW9T-zD-wOY"},
{"content":{"body":"i think ownership is very important for shared memory work as well","msgtype":"m.text","org.matrix.msc1767.text":"i think ownership is very important for shared memory work as well"},"ts":1670366769065,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FG16l4xvVFwRHq1kbrVhzDIKxQp3MUjvGLKiD6fme2I"},
{"content":{"body":"* I think all I'm trying to say is that I don't believe transfer sufficiently solves all the use cases related to the expression of \"ownership intent\" for array buffers, and that defensive code does need more tools. Currently defensive code uses `slice` but if we can't optimize that, I'd like the transfer proposal to try and tackle more fully the ergonomics of passing array buffers around.","m.new_content":{"body":"I think all I'm trying to say is that I don't believe transfer sufficiently solves all the use cases related to the expression of \"ownership intent\" for array buffers, and that defensive code does need more tools. Currently defensive code uses `slice` but if we can't optimize that, I'd like the transfer proposal to try and tackle more fully the ergonomics of passing array buffers around.","msgtype":"m.text"},"m.relates_to":{"event_id":"$7bRliLFMFmbJe6IMpd47CyZRafgY_F71KJKZWh-u5P0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670366801129,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dOBLQJWjwtJsW6xh-X4xQlWght5mk9suZUjZJYLMoT4"},
{"content":{"body":"ReadableStream as implemented in the web/Node/Deno/etc. has transfer semantics","msgtype":"m.text","org.matrix.msc1767.text":"ReadableStream as implemented in the web/Node/Deno/etc. has transfer semantics"},"ts":1670367033055,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$SfZLGsm8Ef60u-2WbdqlEzdF1KGd6jx2zZA7gZixE3s"},
{"content":{"body":"Yeah I am confused by this whole discussion ","format":"org.matrix.custom.html","formatted_body":"Yeah I am confused by this whole discussion","msgtype":"m.text"},"ts":1670367092228,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dyD2VZa6TIf4dBRf17pPP0LCenZV5xZ1Fhd9mzWcLrU"},
{"content":{"body":"Let me try to generalize my original \"proposals\" into a problem statement. \n\nThere are a lot of BufferSource-accepting APIs that cannot deal with mutations after accepting the value. They have two choices today: clone or transfer. Transfer is a bit of a risky choice for API authors. If we could somehow make it the caller's choice which semantics are done, that would lead to a lot more efficiently. And, opting in to the efficient \"don't copy\" path should be automatic, or at least extremely easy to opt in to, for API authors. In particular, it should be something doable from any code generator like Web IDL, so that every BufferSource-accepting API can generate a prelude that handles this.","msgtype":"m.text","org.matrix.msc1767.text":"Let me try to generalize my original \"proposals\" into a problem statement. \n\nThere are a lot of BufferSource-accepting APIs that cannot deal with mutations after accepting the value. They have two choices today: clone or transfer. Transfer is a bit of a risky choice for API authors. If we could somehow make it the caller's choice which semantics are done, that would lead to a lot more efficiently. And, opting in to the efficient \"don't copy\" path should be automatic, or at least extremely easy to opt in to, for API authors. In particular, it should be something doable from any code generator like Web IDL, so that every BufferSource-accepting API can generate a prelude that handles this."},"ts":1670367448345,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$CUkbGJRe2BZagWW08P0MpRfiuRheAV69Wm7i6te5ljE"},
{"content":{"body":"Oh yeah the Wasm JS API has some unfortunate cloning, for example. And I was always confused why it wasn’t transfer.","msgtype":"m.text"},"ts":1670367605112,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7G_7B8PMLSd2zlshGfHcExlTeiC1Ai4ZKWRpGl-SQDY"},
{"content":{"body":"I for one am also on team zero-copy, by whatever means necessary.","msgtype":"m.text","org.matrix.msc1767.text":"I for one am also on team zero-copy, by whatever means necessary."},"ts":1670367643496,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rk0peA6mtXJHGc5HMLHy9nKLBUqM2jOgCKZeBwXqdAo"},
{"content":{"body":"So a more relevant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.","msgtype":"m.text"},"ts":1670367650109,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY"},
{"content":{"body":"* So a more relanvant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.","m.new_content":{"body":"So a more relanvant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.","msgtype":"m.text"},"m.relates_to":{"event_id":"$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670367664243,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jr8NVPvs7f_00ida_VHfBL2JBOWFQerpbdl_MPH76vA"},
{"content":{"body":"* So a more relevant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.","m.new_content":{"body":"So a more relevant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.","msgtype":"m.text"},"m.relates_to":{"event_id":"$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670367684563,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$T_fhQcrwdQRy2gY9O8VmdiWKSGJxWBwmTNy87wUH2Hg"},
{"content":{"body":"Here is a strawperson with lots of objectionable properties, but hopefully it communicates the idea. There is a new argument-passing syntax, `f(take arg)`. This sets a bit on `arg` and also puts `arg` into a TDZ-like state, so the caller can't use it. API authors can then do something like `function f(arg) { if (!isBitSet(arg) { arg = arg.slice(); } ... }`.","format":"org.matrix.custom.html","formatted_body":"Here is a strawperson with lots of objectionable properties, but hopefully it communicates the idea. There is a new argument-passing syntax, <code>f(take arg)</code>. This sets a bit on <code>arg</code> and also puts <code>arg</code> into a TDZ-like state, so the caller can't use it. API authors can then do something like <code>function f(arg) { if (!isBitSet(arg) { arg = arg.slice(); } ... }</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here is a strawperson with lots of objectionable properties, but hopefully it communicates the idea. There is a new argument-passing syntax, `f(take arg)`. This sets a bit on `arg` and also puts `arg` into a TDZ-like state, so the caller can't use it. API authors can then do something like `function f(arg) { if (!isBitSet(arg) { arg = arg.slice(); } ... }`.","mimetype":"text/plain"},{"body":"Here is a strawperson with lots of objectionable properties, but hopefully it communicates the idea. There is a new argument-passing syntax, <code>f(take arg)</code>. This sets a bit on <code>arg</code> and also puts <code>arg</code> into a TDZ-like state, so the caller can't use it. API authors can then do something like <code>function f(arg) { if (!isBitSet(arg) { arg = arg.slice(); } ... }</code>.","mimetype":"text/html"}]},"ts":1670367711460,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$5JqPKppctqDVf2xRarkoqIHqzlSFV-oLe2FjKLStJEo"},
{"content":{"body":"> <@mhofman:matrix.org> So a more relevant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.\n\nWritableStream is not yet zero-copy friendly. ReadableStream is the relevant example here. https://streams.spec.whatwg.org/#byob-reader-prototype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>So a more relevant example would be `WritableStreamDefaultWriter.write()`? It&#39;s not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.</blockquote></mx-reply>WritableStream is not yet zero-copy friendly. ReadableStream is the relevant example here. https://streams.spec.whatwg.org/#byob-reader-prototype","m.relates_to":{"m.in_reply_to":{"event_id":"$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> So a more relevant example would be `WritableStreamDefaultWriter.write()`? It's not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.\n\nWritableStream is not yet zero-copy friendly. ReadableStream is the relevant example here. https://streams.spec.whatwg.org/#byob-reader-prototype","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$J_qg4nHrSRJf4P_4TGohSEZqDOJHgb56F1_5qbVLEsY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>So a more relevant example would be `WritableStreamDefaultWriter.write()`? It&#39;s not clear what would happen if you pass a chunk to that API and mutate the array buffer before the promise resolves.</blockquote></mx-reply>WritableStream is not yet zero-copy friendly. ReadableStream is the relevant example here. https://streams.spec.whatwg.org/#byob-reader-prototype","mimetype":"text/html"}]},"ts":1670367749528,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$b85K8RQJlQI13__hK0O057YCI0FW2_MgGss9qkbPvcU"},
{"content":{"body":"This is also a description of linear types, fwiw.","msgtype":"m.text","org.matrix.msc1767.text":"This is also a description of linear types, fwiw."},"ts":1670367762820,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Btbyftu0MIwUh-lKjbxMYhgIjXc_PDRd8V5fta_AWn8"},
{"content":{"body":"Wouldn't that `take` only impact the binding? What if the array buffer had been assigned to another variable?","msgtype":"m.text"},"ts":1670367807739,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NnKnPs2-2YOxCtdqEL2ypuUdP_J9BEY4tY65H6d5m24"},
{"content":{"body":"Yes, that doesn't really work","msgtype":"m.text","org.matrix.msc1767.text":"Yes, that doesn't really work"},"ts":1670367816111,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XQrYvsKWR3HkzPSBNYjYqwXRj__1E16sqaUQxl9SKUQ"},
{"content":{"body":"I guess you want `take` to do something more directly related to ArrayBuffer transferring","format":"org.matrix.custom.html","formatted_body":"I guess you want <code>take</code> to do something more directly related to ArrayBuffer transferring","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess you want `take` to do something more directly related to ArrayBuffer transferring","mimetype":"text/plain"},{"body":"I guess you want <code>take</code> to do something more directly related to ArrayBuffer transferring","mimetype":"text/html"}]},"ts":1670367866566,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$bVezbJyfdcX8hl18IuziYFhjgv1Hlxz265FmtVywh40"},
{"content":{"body":"It seems what tou want is transferring the buffer temporarily and transferring it back. Or somehow put it in an \"exclusive use\" mode","msgtype":"m.text"},"ts":1670367903770,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ReghEmU03GQmaZMBSdRkIsyKRauWJVGfGQnGfwvdk0I"},
{"content":{"body":"Such that\n\n```js\nconst ab = getArrrayBuffer();\nf(take ab);\n\nfunction f(abArg) {\n  console.assert(abArg !== ab);\n}\n```\n\nwhich is weird, but whatever.","format":"org.matrix.custom.html","formatted_body":"<p>Such that</p>\n<pre><code class=\"language-js\">const ab = getArrrayBuffer();\nf(take ab);\n\nfunction f(abArg) {\n  console.assert(abArg !== ab);\n}\n</code></pre>\n<p>which is weird, but whatever.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Such that\n\n```js\nconst ab = getArrrayBuffer();\nf(take ab);\n\nfunction f(abArg) {\n  console.assert(abArg !== ab);\n}\n```\n\nwhich is weird, but whatever.","mimetype":"text/plain"},{"body":"<p>Such that</p>\n<pre><code class=\"language-js\">const ab = getArrrayBuffer();\nf(take ab);\n\nfunction f(abArg) {\n  console.assert(abArg !== ab);\n}\n</code></pre>\n<p>which is weird, but whatever.</p>\n","mimetype":"text/html"}]},"ts":1670367905829,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$aEgesx3nl2l_b3nsbJ0cK0aUNCkDXXY09w8Z4YCfCi4"},
{"content":{"body":"* It seems what you want is transferring the buffer temporarily and transferring it back. Or somehow put it in an \"exclusive use\" mode","m.new_content":{"body":"It seems what you want is transferring the buffer temporarily and transferring it back. Or somehow put it in an \"exclusive use\" mode","msgtype":"m.text"},"m.relates_to":{"event_id":"$ReghEmU03GQmaZMBSdRkIsyKRauWJVGfGQnGfwvdk0I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670367912182,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0LQXLwR1N3NlMsVy196TksL3M2NQHSRB4rTaf934TpM"},
{"content":{"body":"I don't think transferring it back is necessary in a majority of cases. But it would be a fun bonus.","msgtype":"m.text","org.matrix.msc1767.text":"I don't think transferring it back is necessary in a majority of cases. But it would be a fun bonus."},"ts":1670367927247,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ysv97QKx14qROMKzXU1Xvpg5zhhfBzVLuD_qt19ndRE"},
{"content":{"body":"Presumably this is a well-researched area in programming language design.","msgtype":"m.text","org.matrix.msc1767.text":"Presumably this is a well-researched area in programming language design."},"ts":1670367934028,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$uqycwTJPqFzUjnE8kcUhZXraVfqH5Pdkhkj7w7qcUfI"},
{"content":{"body":"So I feel pretty silly just spouting strawpeople around.","msgtype":"m.text","org.matrix.msc1767.text":"So I feel pretty silly just spouting strawpeople around."},"ts":1670367944189,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$LOd669hcOf0__DWRif29w-sPEU_i6BHv8v2SUPd_hGc"},
{"content":{"body":"Is it for reference types though? I can see this kind of flow analysis with value types.","msgtype":"m.text"},"ts":1670367981485,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RKP_VI6uaVlMBa6YVjSioTZ-TIkXhb3zFzJB1JMQr6w"},
{"content":{"body":"I think this is the ancient linear types vs copy on write dilemma. Rust and Swift take opposite defaults here.","msgtype":"m.text"},"ts":1670367995128,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6Mvv_1F_-9UZVCY-aCHGfWpS2PtBcIoHBT7kcVenJ28"},
{"content":{"body":"I don’t know how this stuff can be added to languages later—that is the real research problem here","msgtype":"m.text"},"ts":1670368036002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$G3lG2MLHfgMGVJQfoqzWKR6FkeMwHzYI64fVfH_LPEw"},
{"content":{"body":"It feels like if you scoped it to ArrayBuffers and made some compromises, it might be doable?","msgtype":"m.text","org.matrix.msc1767.text":"It feels like if you scoped it to ArrayBuffers and made some compromises, it might be doable?"},"ts":1670368059761,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$yTv_9MIaVajvqmv2k5nW-m4ewS5Z_LDo3k5eWEHk3JM"},
{"content":{"body":"(e.g., no transferring back)","msgtype":"m.text","org.matrix.msc1767.text":"(e.g., no transferring back)"},"ts":1670368070138,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Z1eL9D3AZa_Qg3YUZWIKgBelNwnVgqCB7bpV2QfnnXs"},
{"content":{"body":"? I am willing to believe it but I can’t picture it yet","msgtype":"m.text"},"ts":1670368081765,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XsusIBF1RdK8psTBGph5L16D09CgwFFgzySQm6GMO-Y"},
{"content":{"body":"In the case of Deno, there are APIs like `async Deno.writeFile(path, buffer)` which don't currently clone or detach the buffer, and therefore have latent memory soundness or data race bugs","format":"org.matrix.custom.html","formatted_body":"In the case of Deno, there are APIs like <code>async Deno.writeFile(path, buffer)</code> which don't currently clone or detach the buffer, and therefore have latent memory soundness or data race bugs","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In the case of Deno, there are APIs like `async Deno.writeFile(path, buffer)` which don't currently clone or detach the buffer, and therefore have latent memory soundness or data race bugs","mimetype":"text/plain"},{"body":"In the case of Deno, there are APIs like <code>async Deno.writeFile(path, buffer)</code> which don't currently clone or detach the buffer, and therefore have latent memory soundness or data race bugs","mimetype":"text/html"}]},"ts":1670368096816,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ijDCvzQzZqiPeV-FJGW0EdMDaLcHlFvbft3_0OYtDtg"},
{"content":{"body":"I don't think such APIs can be changed to detach the buffer without breakage","msgtype":"m.text","org.matrix.msc1767.text":"I don't think such APIs can be changed to detach the buffer without breakage"},"ts":1670368107102,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kLZqv3AhQJLRqgxF4ZCVd3S3k9QfHNbbnyIRpsnLP_o"},
{"content":{"body":"In Swift and Rust, this stuff is really core to how variables work in the first place","msgtype":"m.text"},"ts":1670368110482,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DDkHOE_PBFyuRjqC558tjCUHRaMddwwR1Xw73N2TrCY"},
{"content":{"body":"Swift is actually working on adding linear types now to help you avoid unintentional copying","msgtype":"m.text"},"ts":1670368198234,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yiXW1FIGg9Yi-zG7LeGC753y1sdY7cQfTbt9U845xrk"},
{"content":{"body":"But it is a huge change to the model of everything ","format":"org.matrix.custom.html","formatted_body":"But it is a huge change to the model of everything","msgtype":"m.text"},"ts":1670368218066,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fwsobh5stLfI_X1VZHw64HAniUz58fOi-4BmoXJs2Z0"},
{"content":{"body":"> <@domenicdenicola:matrix.org> (e.g., no transferring back)\n\nLinear types takes this stance. They take the stronger stance that a variable may only be written once (TDZ) and can only be read once (your post-TDZ)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Z1eL9D3AZa_Qg3YUZWIKgBelNwnVgqCB7bpV2QfnnXs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>(e.g., no transferring back)</blockquote></mx-reply>Linear types takes this stance. They take the stronger stance that a variable may only be written once (TDZ) and can only be read once (your post-TDZ)","m.relates_to":{"m.in_reply_to":{"event_id":"$Z1eL9D3AZa_Qg3YUZWIKgBelNwnVgqCB7bpV2QfnnXs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> (e.g., no transferring back)\n\nLinear types takes this stance. They take the stronger stance that a variable may only be written once (TDZ) and can only be read once (your post-TDZ)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Z1eL9D3AZa_Qg3YUZWIKgBelNwnVgqCB7bpV2QfnnXs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>(e.g., no transferring back)</blockquote></mx-reply>Linear types takes this stance. They take the stronger stance that a variable may only be written once (TDZ) and can only be read once (your post-TDZ)","mimetype":"text/html"}]},"ts":1670369471085,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FF2n94oMUUCFLrdd3LiXMGlU-0YSu_glcH391nMAPUU"},
{"content":{"body":"It makes for programs that can be represented with wire diagrams, and made parallel trivially, which is nifty. But, would weird to bolt post-TDZ onto JavaScript in its old age.","msgtype":"m.text","org.matrix.msc1767.text":"It makes for programs that can be represented with wire diagrams, and made parallel trivially, which is nifty. But, would weird to bolt post-TDZ onto JavaScript in its old age."},"ts":1670369559238,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jKXlIVkW3A3jxIIDHK-J8axdcZElLY9UN76nrWFV5v8"},
{"content":{"body":"But doing that kind of stuff with revokable object APIs as a matter of analogy to linear types seems like fair game to me.","msgtype":"m.text","org.matrix.msc1767.text":"But doing that kind of stuff with revokable object APIs as a matter of analogy to linear types seems like fair game to me."},"ts":1670369616380,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H3jwTcUkwd1Rlxo-OwB9MGmWxHHhKlGaDehmdPAJXbQ"},
{"content":{"body":"But as littledan said and Mathieu Hofman is arguing, this is indeed the age old conversation about linear types versus CoW and both can be made to work.","format":"org.matrix.custom.html","formatted_body":"But as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> said and <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> is arguing, this is indeed the age old conversation about linear types versus CoW and both can be made to work.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But as littledan said and Mathieu Hofman is arguing, this is indeed the age old conversation about linear types versus CoW and both can be made to work.","mimetype":"text/plain"},{"body":"But as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> said and <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> is arguing, this is indeed the age old conversation about linear types versus CoW and both can be made to work.","mimetype":"text/html"}]},"ts":1670369722620,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eKN8ZXblah9dzelNiXRneasz9szgC28suRDQ-8Zxrh0"},
{"content":{"body":"I think I’m more sympathetic at the moment to the “whatever WebGL needs” is the fixed point in this design, regardless of my preference for CoW just in terms of developer ergonomics.","msgtype":"m.text","org.matrix.msc1767.text":"I think I’m more sympathetic at the moment to the “whatever WebGL needs” is the fixed point in this design, regardless of my preference for CoW just in terms of developer ergonomics."},"ts":1670369839113,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nYpKIjHVbNGx22jkpvA3WazHRYOEB04e0dhJtRMTrLs"},
{"content":{"body":"So…does WebGL require transfer and detach semantics for TypedArrays?","msgtype":"m.text","org.matrix.msc1767.text":"So…does WebGL require transfer and detach semantics for TypedArrays?"},"ts":1670369878825,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YUP05M9DNd4jsbr7I5EBP8ZJ0d0AAPNewZ-0d_-V7vM"},
{"content":{"body":"I think we should take the example of piping in user land from a readable stream to a writable stream, and make that work with a single reusable buffer using zero copies besides into and out of that buffer, while guaranteeing the userland cannot do the wrong thing (aka ask the reader to write in the buffer before the writer is done reading out of the buffer)","msgtype":"m.text"},"ts":1670369982223,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4DUbL33X1uXmIvKYDutEXPm1D2clcDjtASpPgmp7m0o"}
]