[
{"content":{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"James M Snell: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say \"please transfer this to yourself, I won't use it\" and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: BTW I think it would be really cool if there were some sort of language feature (?) where we could give a BufferSource to platform APIs and say &quot;please transfer this to yourself, I won't use it&quot; and then they wouldn't need to do copies. It's hard to imagine how it would work though... there's nothing straightforward, like there is in languages with move semantics that parameters can declare themselves as having.","mimetype":"text/html"}]},"ts":1670302568311,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$eFGY1WQek5i7A0hPOtk-BEjHOQ4M8eGN0YhCw8AmtfU"},
{"content":{"body":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we were starting from scratch maybe we'd design every BufferSource-taking API as transferring, and ask you to make a copy if you plan to use it later?"},"ts":1670302609901,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IfS5W6rMKvfdnI9XMan6IqScqDbuVSe54SL2XRey0m8"},
{"content":{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","format":"org.matrix.custom.html","formatted_body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/plain"},{"body":"But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.","mimetype":"text/html"}]},"ts":1670302700512,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"},
{"content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(but, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"ts":1670303401109,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo"},
{"content":{"body":"* Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","m.new_content":{"body":"Yeah definitely difficult. For apis like the Request and Response constructors we could probably get away with a new option that communicates the intent, e.g. `new Response(buf, { transfer: true })`... but that's difficult to do consistently for all apis. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$hlzfzfMLLcfbXKCR6LplBXXqS00PucBEhGLtxLeV5lo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670303423114,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$muZHgUmfS6tFR4RFhB6f8pBjshOc9dLh3LCzTg3geWs"},
{"content":{"body":"I certainly wouldn't mind a language level take/move type construct tho","msgtype":"m.text"},"ts":1670303576280,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$0z5zMfmJquy9zi6Yr7mWivtN8j9r9NffkWs2e0WWQek"},
{"content":{"body":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah and it feels unfortunate to have to program it in one-off for each API. Then you have to litigate whether that API's really in the fast-path or not, and that'll have different answers for web vs. server... this feels like an area where the language can come in and just say \"now there's a global fast thing available\" because it doesn't have to judge."},"ts":1670303710716,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$QUTvmNBeWDjn9FkVUVV9n1QgpxMFpR1ICTzJ_P5YO1M"},
{"content":{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","format":"org.matrix.custom.html","formatted_body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize","mimetype":"text/plain"},{"body":"I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize","mimetype":"text/html"}]},"ts":1670303818908,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"},
{"content":{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","format":"org.matrix.custom.html","formatted_body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable `new Response(body.transfer())` can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/plain"},{"body":"I guess the most feasible path would be trying to hack on an engine to see how optimizable <code>new Response(body.transfer())</code> can be, and then whether that hack can be generalized, or if generalizing it would benefit from some annotation (ideally in IDL to do code-gen for all BufferSource cases)","mimetype":"text/html"}]},"ts":1670303820891,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$1AENqg15iqVDYkhaj5tvquII5KnNu8wF5jC8hW_33mw"},
{"content":{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","format":"org.matrix.custom.html","formatted_body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the difficulty is not as much technical as \"codebase-organizational\" in that the teams that implement `new Response()` are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/plain"},{"body":"I think the difficulty is not as much technical as &quot;codebase-organizational&quot; in that the teams that implement <code>new Response()</code> are pretty far from the teams that implement the JS engine, and want to operate without too much interaction and intertwingling of code.","mimetype":"text/html"}]},"ts":1670303861805,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$6b-aFINAg0Rkj5X5T00JgejL9vxSN7IQrKtp9cOg8lA"},
{"content":{"body":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs","msgtype":"m.text","org.matrix.msc1767.text":"I'm imagining an internal bit on array buffers which is like \"this is not aliased anywhere\", which could be checked by platform APIs"},"ts":1670303919920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wP5h-0fZTPPeNqdcpAdMiNo-q4MCz7m2cNiLG48nnWA"},
{"content":{"body":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it","msgtype":"m.text","org.matrix.msc1767.text":"So the JS engine people could be responsible for figuring out how to set that bit, and the platform people would just need to check it"},"ts":1670303955467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WbbeMg9tXxm4skqu8ocLhH4ALb86frgTY4njC5g2kr8"},
{"content":{"body":"Don't actually know if that's at all feasible though.","msgtype":"m.text","org.matrix.msc1767.text":"Don't actually know if that's at all feasible though."},"ts":1670303964781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C-FvV5EAJroeEXWohWOc1q5v1zLGhvdrceOz7TR2psw"},
{"content":{"body":"Yeah if you could pull that off it seems pretty reasonable.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah if you could pull that off it seems pretty reasonable."},"ts":1670303976141,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ub4dXayAQFyRe5442CTAPpfliR0mlaNdwXD3AB1JZYE"},
{"content":{"body":"> <@domenicdenicola:matrix.org> But something like `new Response(body.take())` or `new Response(take body)` or something would be neat, where it's a call-site opt-in. I guess maybe `new Response(body.transfer())` (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.\n\nYeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>But something like <code>new Response(body.take())</code> or <code>new Response(take body)</code> or something would be neat, where it's a call-site opt-in. I guess maybe <code>new Response(body.transfer())</code> (with https://github.com/tc39/proposal-arraybuffer-transfer) is possible for a highly-integrated platform + JS engine to recognize and optimize, but that's a hard lift.</blockquote></mx-reply>Yeah - we’ve been thinking about this a lot for Deno. The least invasive solution we’ve been able to come up with so far is copy-on-write clones, but unfortunately V8 looks unlikely to implement these due to security concerns","m.relates_to":{"m.in_reply_to":{"event_id":"$MlHtWgj6vGGU6S0vLFrG0o-hNi5irRHQ87kMAifdq70"}},"msgtype":"m.text"},"ts":1670316321578,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$uxlo8ZrDSg80ZlCHdX_NuuyRNLcLe09z82zo3tlC_C0"},
{"content":{"body":"> <@bakkot:matrix.org> I wonder how hard the `new Response(body.transfer())` pattern actually is to optimize\n\nI can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I wonder how hard the <code>new Response(body.transfer())</code> pattern actually is to optimize</blockquote></mx-reply>I can’t speak for all runtimes, but for Deno this would maybe be a 100 LOC change after we’ve specified the behavior","m.relates_to":{"m.in_reply_to":{"event_id":"$KgQEp5URlBfejgPgMTc2eTEWnjciBz1A-E9LQ3Lov5c"}},"msgtype":"m.text"},"ts":1670316425828,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$MCXQBKY5TBc8Q5i4PVBiiUrEQIarlhf-CAEyjBSVXlM"},
{"content":{"body":"It doesn’t seem very difficult","msgtype":"m.text"},"ts":1670316443802,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$CSdNTzQnFrRUsKpxTNe9Oj1l4Es214AJc6FtW8ce7I4"},
{"content":{"body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in `new Response` because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","format":"org.matrix.custom.html","formatted_body":"Oh actually I think I misunderstood - the idea for the optimization is to prevent the clone in <code>new Response</code> because they passed in buffer is “fresh” and not anymore accessible by any other JS? This would be much more difficult, maybe impossible at our current integration level with V8","msgtype":"m.text"},"ts":1670316562460,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$v5ZfXC_5mq2Rpta6RKTV-Je7bW0hT1-HVMN_5bDnvy4"}
]