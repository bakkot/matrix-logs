[
{"content":{"body":"Regarding Array.from: In https://tc39.es/ecma262/#sec-array.from, why is usingIterator created? Wouldn’t GetIterator(items, sync) do the job of checking for a sync iterator and throwing TypeError if it can’t? (What is even the purpose of the third parameter of GetIterator?)","msgtype":"m.text"},"ts":1631673513989,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vajc2dviifQTZ1AXQufdVOau0ZHSTYjSMZT_EhdfDAg"},
{"content":{"body":"Is it to maintain a specific order of attempting to construct C, then calling GetIterator?","msgtype":"m.text"},"ts":1631673609213,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oH8JdAO4NahTUIVFaIYIpBxlpqkX6Fr4Aer58HyQZvY"},
{"content":{"body":" * Regarding Array.from: In https://tc39.es/ecma262/#sec-array.from, why is usingIterator created in step 4? Wouldn’t GetIterator(items, sync) in step 5c do the job of checking for a sync iterator and throwing TypeError if it can’t? (What is even the purpose of the third parameter of GetIterator?)","m.new_content":{"body":"Regarding Array.from: In https://tc39.es/ecma262/#sec-array.from, why is usingIterator created in step 4? Wouldn’t GetIterator(items, sync) in step 5c do the job of checking for a sync iterator and throwing TypeError if it can’t? (What is even the purpose of the third parameter of GetIterator?)","msgtype":"m.text"},"m.relates_to":{"event_id":"$vajc2dviifQTZ1AXQufdVOau0ZHSTYjSMZT_EhdfDAg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631673636096,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fegBTGIt3mO3BrauFDtlFAP_dvJlGvzVwJaAHWnnchg"},
{"content":{"body":"GetIterator unconditionally attempts to call the `Symbol.iterator` property, even if it's undefined, whereas `Array.from` needs to not enter step 5 at all if the `Symbol.iterator` property is `undefined`","format":"org.matrix.custom.html","formatted_body":"GetIterator unconditionally attempts to call the <code>Symbol.iterator</code> property, even if it's undefined, whereas <code>Array.from</code> needs to not enter step 5 at all if the <code>Symbol.iterator</code> property is <code>undefined</code>","msgtype":"m.text"},"ts":1631673801746,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_iE2S9ArZfT_KquO7EejcqJRSQr2-n8tB7U5soaWrwo"},
{"content":{"body":"the purpose of the third parameter of GetIterator is in case you have already done the property lookup of `Symbol.iterator`, to avoid doing the property lookup again","format":"org.matrix.custom.html","formatted_body":"the purpose of the third parameter of GetIterator is in case you have already done the property lookup of <code>Symbol.iterator</code>, to avoid doing the property lookup again","msgtype":"m.text"},"ts":1631673839396,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U_Ai7fMa38xuE2oC4CT_7Yx5eIupo6vyCEOYrneGnaw"},
{"content":{"body":"Right, and I suppose this is observable by the user, because they can observe whether Construct(_C_) is called before Symbol.iterator.","format":"org.matrix.custom.html","formatted_body":"Right, and I suppose this is observable by the user, because they can observe whether Construct(<em>C</em>) is called before Symbol.iterator.","msgtype":"m.text"},"ts":1631673856293,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lFIEW_j_n9ElRVPhK697i4lmZ20NFu3Lo1OOuMhvFxI"},
{"content":{"body":"It's not just about order; it's about only accessing the property once","msgtype":"m.text"},"ts":1631673887476,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1DUyGcTQ6H-pSIaAgi5l7oNR-pFvm93ncExSxW9pg8A"},
{"content":{"body":"e.g. if you have a getter for `Symbol.iterator`, `Array.from` should only invoke that getter one time","format":"org.matrix.custom.html","formatted_body":"e.g. if you have a getter for <code>Symbol.iterator</code>, <code>Array.from</code> should only invoke that getter one time","msgtype":"m.text"},"ts":1631673902203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pu_EgB9zAwhxfqE0_6_ZVORH9BKQY9g-X02jvrPhPpg"},
{"content":{"body":"Ah, okay.","msgtype":"m.text"},"ts":1631673937097,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lGGyKPT7rkdzChz9eTDoePvvT-CCdGRLdtHW27rGYG8"},
{"content":{"body":"Thanks!","msgtype":"m.text"},"ts":1631673939958,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fokIdpNUD-Q5IrfKPducUfCkcOkmQE9bAESQwM_IgIQ"},
{"content":{"body":"I don't think we actually cared much about the order of the call to `C` vs to `Symbol.iterator`, but we definitely do care that the property is only accessed a single time","format":"org.matrix.custom.html","formatted_body":"I don't think we actually cared much about the order of the call to <code>C</code> vs to <code>Symbol.iterator</code>, but we definitely do care that the property is only accessed a single time","msgtype":"m.text"},"ts":1631673976415,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rSJdx5QnXtwYEP37SdiUn8KieEWx_0avJc89-coYxrc"},
{"content":{"body":"I guess I’m confused why step 4 isn’t what step 5c currently is.","msgtype":"m.text"},"ts":1631674019059,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FM0wHlX4LFlYyzqsJ66geySHkhnVR7aC_3sQTfI-aIs"},
{"content":{"body":"uh","msgtype":"m.text"},"ts":1631674030577,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Araywic6T-Btp-yZaktLBPgSmRHMEz5F_ARBT6qp4pI"},
{"content":{"body":"I don't know what that means","msgtype":"m.text"},"ts":1631674036109,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pzGUU-qZz9KlgKUPz-9HUqUaroTvJYeCpZehKMiGLTE"},
{"content":{"body":"Another way to put it: why would “Let _iteratorRecord_ be ? GetIterator(items, sync)” result in two accesses of item’s Symbol.iterator property?","format":"org.matrix.custom.html","formatted_body":"Another way to put it: why would “Let <em>iteratorRecord</em> be ? GetIterator(items, sync)” result in two accesses of item’s Symbol.iterator property?","msgtype":"m.text"},"ts":1631674081624,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jeIANSsteFQrhQIguT58SQ8HRuRCbOOEA-8Xzus0kRE"},
{"content":{"body":"oh, you mean, why is step 4 not `GetIterator`? it's because GetIterator unconditionally attempts to call the `Symbol.iterator` property, even if it's `undefined`","format":"org.matrix.custom.html","formatted_body":"oh, you mean, why is step 4 not <code>GetIterator</code>? it's because GetIterator unconditionally attempts to call the <code>Symbol.iterator</code> property, even if it's <code>undefined</code>","msgtype":"m.text"},"ts":1631674088714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3B9vpeD7UXg0pgw_PvKBDgwj2n9QT1mYs8xwZLtkk-I"},
{"content":{"body":" * Another way to put it: why would “Let _iteratorRecord_ be ? GetIterator(_items_, sync)” result in two accesses of item’s Symbol.iterator property?","format":"org.matrix.custom.html","formatted_body":" * Another way to put it: why would “Let <em>iteratorRecord</em> be ? GetIterator(<em>items</em>, sync)” result in two accesses of item’s Symbol.iterator property?","m.new_content":{"body":"Another way to put it: why would “Let _iteratorRecord_ be ? GetIterator(_items_, sync)” result in two accesses of item’s Symbol.iterator property?","format":"org.matrix.custom.html","formatted_body":"Another way to put it: why would “Let <em>iteratorRecord</em> be ? GetIterator(<em>items</em>, sync)” result in two accesses of item’s Symbol.iterator property?","msgtype":"m.text"},"m.relates_to":{"event_id":"$jeIANSsteFQrhQIguT58SQ8HRuRCbOOEA-8Xzus0kRE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631674089716,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RSMoFBtIO6wcYIiulf9WvWrjP8fosMSkJCt32F_6gQU"},
{"content":{"body":"Mm, yeah, I see now that’s true in GetIterator’s definition. That’s a bit surprising.","msgtype":"m.text"},"ts":1631674124784,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aLQjgTyETdDc6IzS6mdemxx-3O7KT1vvERcH0yplh08"},
{"content":{"body":"that is, there's two things happening here:\n- step 4 can't use `GetIterator` because `GetIterator` will _throw_ if Symbol.iterator is missing\n- step 5c needs to forward `usingIterator` so that it doesn't do another access of Symbol.iterator","format":"org.matrix.custom.html","formatted_body":"<p>that is, there's two things happening here:</p>\n<ul>\n<li>step 4 can't use <code>GetIterator</code> because <code>GetIterator</code> will <em>throw</em> if Symbol.iterator is missing</li>\n<li>step 5c needs to forward <code>usingIterator</code> so that it doesn't do another access of Symbol.iterator</li>\n</ul>\n","msgtype":"m.text"},"ts":1631674138468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EvJ6xWD8RBxvB8llw9U7DdWKvUzdIwjW0hzYxBCalBo"},
{"content":{"body":" * Mm, yeah, I see now that’s true in GetIterator’s definition. That’s a bit surprising.\nIt does check that the result of the Symbol.iterator-value’s function call is an object.","m.new_content":{"body":"Mm, yeah, I see now that’s true in GetIterator’s definition. That’s a bit surprising.\nIt does check that the result of the Symbol.iterator-value’s function call is an object.","msgtype":"m.text"},"m.relates_to":{"event_id":"$aLQjgTyETdDc6IzS6mdemxx-3O7KT1vvERcH0yplh08","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631674172066,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s3IVC3wcMatAnLUp5ha33Zeylz2PIQq3GBC2VcIaRWg"}
]