[
{"content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328565937,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE"},
{"content":{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","m.new_content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328796191,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$CUqV141Mq69M62ffOEt8Ggj0iNABWnVxu16rO7Sn1Pk"},
{"content":{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","m.new_content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328829323,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$D6FxPsW8WiFBFgquf9baWSs8OLtFZNRQLaR0uzWwoiE"}
]