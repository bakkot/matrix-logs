[
{"content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328565937,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE"},
{"content":{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","m.new_content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nfunction* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328796191,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$CUqV141Mq69M62ffOEt8Ggj0iNABWnVxu16rO7Sn1Pk"},
{"content":{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","m.new_content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 500ms\nasync function* gen() {\n  yield* [[500, 500, 500, 'a'], [500, 500, 500, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650328829323,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$D6FxPsW8WiFBFgquf9baWSs8OLtFZNRQLaR0uzWwoiE"},
{"content":{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","m.new_content":{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":"<p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wVthMf4uW79m-AG1e5Epu0CNgtX3njecWFVQVAmo_cE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Here's an example:\n```\n// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item => {\n\tawait new Promise(resolve => setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n```","mimetype":"text/plain"},{"body":" * <p>Here's an example:</p>\n<pre><code>// Each item has a few pipelined actions that take time indicated by the number. So the first item does 3 operations each taking 100ms\nasync function* gen() {\n  yield* [[100, 100, 100, 'a'], [100, 100, 100, 'b'], [10, 10, 10, 'c'], [10, 10, 10, 'd'], [10, 10, 10, 'e'], [10, 10, 10, 'f']];\n}\nfor await (const i of gen.map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n}).map(async item =&gt; {\n\tawait new Promise(resolve =&gt; setTimeout(resolve, item.shift()));\n  return item;\n})) {\n  // This will after summation of all the times in each array.\n  console.log(item.shift());\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650329296683,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$xvOC4Sazwd5YcCufu61Reo7vxtZc6eMR_1TwVzIjTmc"},
{"content":{"body":"Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example.","msgtype":"m.text","org.matrix.msc1767.text":"Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example."},"ts":1650329507988,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$DrNcaxHVcnhSpTjcNUa3-Ryon2zmfrBqBZ5JBKKfOTQ"},
{"content":{"body":" * Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example.","m.new_content":{"body":"Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example.","msgtype":"m.text","org.matrix.msc1767.text":"Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example."},"m.relates_to":{"event_id":"$DrNcaxHVcnhSpTjcNUa3-Ryon2zmfrBqBZ5JBKKfOTQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Handled in-order one must wait 300ms to see the first result. All the operations are handled sequentially taking a total 300 * 2 + 30 * 4 = 720ms. An out of order first come with a task limit of 5 for each step (assume these are network or single worker thread delays) would take 300ms. Even a task limit of 3 would take 300ms. in that example."},"ts":1650329597476,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Qv50709L6oNe_TDlppaAw9sPeOjiZKBtAmj4cTY3ul8"},
{"content":{"body":"sirisian: yeah it looks like you're trying to do things with sync iterables of promises, which isn't a concept the language ever really works with, right now. except in like `Promise.all` I guess.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: yeah it looks like you're trying to do things with sync iterables of promises, which isn't a concept the language ever really works with, right now. except in like <code>Promise.all</code> I guess.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: yeah it looks like you're trying to do things with sync iterables of promises, which isn't a concept the language ever really works with, right now. except in like `Promise.all` I guess.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: yeah it looks like you're trying to do things with sync iterables of promises, which isn't a concept the language ever really works with, right now. except in like <code>Promise.all</code> I guess.","mimetype":"text/html"}]},"ts":1650334491935,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E-Pv9SLXR1ssyyU5eEwUjdWIdWkea8Y6e1uVYNS6q9A"},
{"content":{"body":"bakkot: https://jsfiddle.net/9xsyev61/ This isn't cursed at all.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: https://jsfiddle.net/9xsyev61/ This isn't cursed at all.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: https://jsfiddle.net/9xsyev61/ This isn't cursed at all.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: https://jsfiddle.net/9xsyev61/ This isn't cursed at all.","mimetype":"text/html"}]},"ts":1650336326633,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$xqUsmfgNDDdtCDVLYDFfa9tvlVbU9Cv38kTdR50nFcU"},
{"content":{"body":"sirisian: lol","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: lol","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: lol","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: lol","mimetype":"text/html"}]},"ts":1650336497398,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ytYpDr4Fp0PkecA-gIXTrdDle1sdG9Ms0T623VXyt8E"},
{"content":{"body":"looks like it dropped some though? I only see a single `1` in the console","format":"org.matrix.custom.html","formatted_body":"looks like it dropped some though? I only see a single <code>1</code> in the console","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"looks like it dropped some though? I only see a single `1` in the console","mimetype":"text/plain"},{"body":"looks like it dropped some though? I only see a single <code>1</code> in the console","mimetype":"text/html"}]},"ts":1650336512482,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oVBhqBGHEbUebzK2fFgIawJl6bcDhE5wWhrpVHBK23g"},
{"content":{"body":"oh, wait, that's just the wrapping, sigh","msgtype":"m.text","org.matrix.msc1767.text":"oh, wait, that's just the wrapping, sigh"},"ts":1650336522288,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PApcTzOTlwvSrT14bVH4GmWY8NfAQR1tmzgyo_ZAOqo"},
{"content":{"body":"that still only works with finite iterators though","msgtype":"m.text","org.matrix.msc1767.text":"that still only works with finite iterators though"},"ts":1650336564453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fkb7REukaHUAJZWA-t2yVbhoQ-VEOX8oNBPmy0F0sZE"},
{"content":{"body":"finite underlying iterators, that is","msgtype":"m.text","org.matrix.msc1767.text":"finite underlying iterators, that is"},"ts":1650336570128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F54qiOlJK8SfIB9_gLbvZkTyQikYxWdASkBxBjbCWlU"},
{"content":{"body":"well... maybe it could be made to work with infinite ones, hmm","msgtype":"m.text","org.matrix.msc1767.text":"well... maybe it could be made to work with infinite ones, hmm"},"ts":1650336588943,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$omkcN5KUQuzzOabzvt2UkWWDm_yIH32kw1ETy6dhs_8"},
{"content":{"body":"yes it should be able to. Just pass in the iterator.","msgtype":"m.text","org.matrix.msc1767.text":"yes it should be able to. Just pass in the iterator."},"ts":1650336604017,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Rq7rMCEnnZI5P0O1H_fBbM9eK538ztBBOdDP2YcnB98"},
{"content":{"body":"take(5) kind of thing then next to get the next work.","msgtype":"m.text","org.matrix.msc1767.text":"take(5) kind of thing then next to get the next work."},"ts":1650336621012,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$aBx4hcohLODW6Tuupfele4me6J4hRI3rq9Zo8avmVUE"},
{"content":{"body":"oh, but it doesn't compose, because it produces an async iterator rather than a sync iterator of promises","msgtype":"m.text","org.matrix.msc1767.text":"oh, but it doesn't compose, because it produces an async iterator rather than a sync iterator of promises"},"ts":1650336857920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rGI50r9-RduohMhgjZcq8te5y1cL3bOx0kSCvgi8J-4"},
{"content":{"body":"so you can't do it twice with different mapping functions","msgtype":"m.text","org.matrix.msc1767.text":"so you can't do it twice with different mapping functions"},"ts":1650336870117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GN4mgThMk9oF2sIRFaNycCON4sHD2yK60GC6WFGUDgU"},
{"content":{"body":"bakkot: https://jsfiddle.net/xs1brkL8/ Wait, I don't use these much. Can you detect the break in code like that to print \"map done\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: https://jsfiddle.net/xs1brkL8/ Wait, I don't use these much. Can you detect the break in code like that to print &quot;map done&quot;?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: https://jsfiddle.net/xs1brkL8/ Wait, I don't use these much. Can you detect the break in code like that to print \"map done\"?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: https://jsfiddle.net/xs1brkL8/ Wait, I don't use these much. Can you detect the break in code like that to print &quot;map done&quot;?","mimetype":"text/html"}]},"ts":1650338803079,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$kRuK9Z2TbT1IaVf-nTnmJKG0KUz1WHRHHfw92bvvJsg"},
{"content":{"body":"sirisian: i don't understand the question","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: i don't understand the question","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: i don't understand the question","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: i don't understand the question","mimetype":"text/html"}]},"ts":1650338857620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$odLABBlQre7TljgAEXh2CJ2QC4lzMTf5oi0s4yNFycs"},
{"content":{"body":"oh, do you mean, the `break` in the bottom loop? yes: it will cause the `yield` to be a `return`, and you can use a try/finally to do cleanup ","format":"org.matrix.custom.html","formatted_body":"oh, do you mean, the <code>break</code> in the bottom loop? yes: it will cause the <code>yield</code> to be a <code>return</code>, and you can use a try/finally to do cleanup","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh, do you mean, the `break` in the bottom loop? yes: it will cause the `yield` to be a `return`, and you can use a try/finally to do cleanup ","mimetype":"text/plain"},{"body":"oh, do you mean, the <code>break</code> in the bottom loop? yes: it will cause the <code>yield</code> to be a <code>return</code>, and you can use a try/finally to do cleanup","mimetype":"text/html"}]},"ts":1650339121814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4KiNHWkIKhA93ISl289pXE9igSkEOXEQOs0ItiGjpZU"},
{"content":{"body":"oh it throws. I see.","msgtype":"m.text","org.matrix.msc1767.text":"oh it throws. I see."},"ts":1650339132243,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$zObZCF4roGLvxvv4KHaUTuJmV5wVdLYr4HKI-rTY_ag"},
{"content":{"body":"it doesn't throw","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't throw"},"ts":1650339155648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X4EGgcNWgNVILwtbJqTBuHAX9i2FT7slJ6S8QrbHn50"},
{"content":{"body":"it puts a `return`","format":"org.matrix.custom.html","formatted_body":"it puts a <code>return</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it puts a `return`","mimetype":"text/plain"},{"body":"it puts a <code>return</code>","mimetype":"text/html"}]},"ts":1650339160165,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CL4_zPcAexgccQTN0IvnoS7PCv9inhnor7eLm0V3g9c"},
{"content":{"body":"a `finally` will trigger, but not a `catch`","format":"org.matrix.custom.html","formatted_body":"a <code>finally</code> will trigger, but not a <code>catch</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a `finally` will trigger, but not a `catch`","mimetype":"text/plain"},{"body":"a <code>finally</code> will trigger, but not a <code>catch</code>","mimetype":"text/html"}]},"ts":1650339175645,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jr6Scq2grg2eKv71x7QjvJLtj0Lq5iVIIVBEr8-7d8g"},
{"content":{"body":"```\nasync function* map(tasks, n) {\n  try {\n    // Start n work\n    const parallel = new Set();\n    for (let i = 0; !tasks.done && i < n; ++i) {\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n    // Process the work yielding the first one done in the set of n work\n    while (parallel.length != 0 && !tasks.done) {\n      const task = await Promise.race([...parallel].map(t => t.promise));\n      parallel.delete(task);\n      yield task;\n      // Add 1 more work\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n  } finally {\n    console.log('map done');\n    tasks?.return();\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>async function* map(tasks, n) {\n  try {\n    // Start n work\n    const parallel = new Set();\n    for (let i = 0; !tasks.done &amp;&amp; i &lt; n; ++i) {\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n    // Process the work yielding the first one done in the set of n work\n    while (parallel.length != 0 &amp;&amp; !tasks.done) {\n      const task = await Promise.race([...parallel].map(t =&gt; t.promise));\n      parallel.delete(task);\n      yield task;\n      // Add 1 more work\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n  } finally {\n    console.log('map done');\n    tasks?.return();\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nasync function* map(tasks, n) {\n  try {\n    // Start n work\n    const parallel = new Set();\n    for (let i = 0; !tasks.done && i < n; ++i) {\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n    // Process the work yielding the first one done in the set of n work\n    while (parallel.length != 0 && !tasks.done) {\n      const task = await Promise.race([...parallel].map(t => t.promise));\n      parallel.delete(task);\n      yield task;\n      // Add 1 more work\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n  } finally {\n    console.log('map done');\n    tasks?.return();\n  }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code>async function* map(tasks, n) {\n  try {\n    // Start n work\n    const parallel = new Set();\n    for (let i = 0; !tasks.done &amp;&amp; i &lt; n; ++i) {\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n    // Process the work yielding the first one done in the set of n work\n    while (parallel.length != 0 &amp;&amp; !tasks.done) {\n      const task = await Promise.race([...parallel].map(t =&gt; t.promise));\n      parallel.delete(task);\n      yield task;\n      // Add 1 more work\n      parallel.add(makeWork((await tasks.next()).value));\n    }\n  } finally {\n    console.log('map done');\n    tasks?.return();\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650339181004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0RkC9XOShP6vban31nsHlLp5vomsEeM-A8QK1FxYzps"},
{"content":{"body":" * it doesn't throw","m.new_content":{"body":"it doesn't throw","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't throw"},"m.relates_to":{"event_id":"$X4EGgcNWgNVILwtbJqTBuHAX9i2FT7slJ6S8QrbHn50","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it doesn't throw"},"ts":1650339189269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_0ODrPRSOdK2zqroeARs-IxU_pyY9mbJsMvz_pvHyKk"},
{"content":{"body":"https://jsfiddle.net/xs1brkL8/1/ neat, is this composable?","msgtype":"m.text","org.matrix.msc1767.text":"https://jsfiddle.net/xs1brkL8/1/ neat, is this composable?"},"ts":1650339280951,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$oH1viNog8KrGIMsSeQmFCy9YEoYAoMXgsycHk6ZXs9E"},
{"content":{"body":"In the actual helper setup it would need to be on the iterator, but that should be fine. I could rewrite it do that I think.","msgtype":"m.text","org.matrix.msc1767.text":"In the actual helper setup it would need to be on the iterator, but that should be fine. I could rewrite it do that I think."},"ts":1650339359871,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$O7uehUpiCgB3uhbVWuKloUZFXJj8T45aaGlfeoks4ck"},
{"content":{"body":"Oh wait, can you modify all iterators to add functions to them. (I know this would be bad).","msgtype":"m.text","org.matrix.msc1767.text":"Oh wait, can you modify all iterators to add functions to them. (I know this would be bad)."},"ts":1650339462881,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$en1fSuD1W-HnFwDTBIu4CIOYTHolRn2SyiBX1BHAma8"},
{"content":{"body":"that's what the iterator helpers proposal is","msgtype":"m.text","org.matrix.msc1767.text":"that's what the iterator helpers proposal is"},"ts":1650339483832,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$amduxCrWtUVrYHQ-WDRpcOaWwkMbVPsvTd41NJty2SQ"},
{"content":{"body":"i.e. adding functions to all iterators (all iterators which inherit from iterator.prototype, anyway)","msgtype":"m.text","org.matrix.msc1767.text":"i.e. adding functions to all iterators (all iterators which inherit from iterator.prototype, anyway)"},"ts":1650339515528,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eoxhYOxTfyRNtm-g0lTihfvqeN9a1N63L1pco11cJXQ"},
{"content":{"body":"I can't quite tell if your thing actually composes properly just from staring at it","msgtype":"m.text","org.matrix.msc1767.text":"I can't quite tell if your thing actually composes properly just from staring at it"},"ts":1650339540566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wKRtrzj3enimYjDxdmXmH_9cPIub5v7f5eJBapvqvJY"},
{"content":{"body":"oh, `!tasks.done` isn't a thing, though","format":"org.matrix.custom.html","formatted_body":"oh, <code>!tasks.done</code> isn't a thing, though","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh, `!tasks.done` isn't a thing, though","mimetype":"text/plain"},{"body":"oh, <code>!tasks.done</code> isn't a thing, though","mimetype":"text/html"}]},"ts":1650339636623,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wLLlG-joA-zzOcmqdSkSV5X1dQAP5sg-jeo2_vumy9Y"},
{"content":{"body":"whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/","msgtype":"m.text","org.matrix.msc1767.text":"whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/"},"ts":1650339661335,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$diSiqHVclyNzqBvKUJ-DRm9pYjoETHQKfirPdETEv8A"},
{"content":{"body":" * whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/","m.new_content":{"body":"whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/","msgtype":"m.text","org.matrix.msc1767.text":"whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/"},"m.relates_to":{"event_id":"$diSiqHVclyNzqBvKUJ-DRm9pYjoETHQKfirPdETEv8A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * whoops forgot that one. https://jsfiddle.net/xs1brkL8/2/"},"ts":1650339683081,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$FDQ4wJl69UdvPE57alFXs64WKw-G3qvXgjxM0qNsSFM"},
{"content":{"body":"I mean can you edit the iterator prototype right now for testing polyfills?","msgtype":"m.text","org.matrix.msc1767.text":"I mean can you edit the iterator prototype right now for testing polyfills?"},"ts":1650339713274,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$UvjVy3iamQCg9hxrnMeH3XtvKEGCpDnlyD1uv17tAnc"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1650339719238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uM_v4mgtKEttr3n_hfLaDoUrYYes2k6-c8kIYdx-tAE"},
{"content":{"body":"re^, you have to check the `done` property of the result every time you call `.next()`","format":"org.matrix.custom.html","formatted_body":"re^, you have to check the <code>done</code> property of the result every time you call <code>.next()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"re^, you have to check the `done` property of the result every time you call `.next()`","mimetype":"text/plain"},{"body":"re^, you have to check the <code>done</code> property of the result every time you call <code>.next()</code>","mimetype":"text/html"}]},"ts":1650339741921,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8lzXoOdFKTLWqJlgnjudVq6Lt0s29nAwA-OqSBSZUhM"},
{"content":{"body":"you have to check `done` before reading `value` ","format":"org.matrix.custom.html","formatted_body":"you have to check <code>done</code> before reading <code>value</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you have to check `done` before reading `value` ","mimetype":"text/plain"},{"body":"you have to check <code>done</code> before reading <code>value</code>","mimetype":"text/html"}]},"ts":1650339758857,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6jDnEdt4GjgukFTWGNWsAxFiK3H-65GlCRaozooytkA"},
{"content":{"body":"(to obey the iterator contract, anyway; you don't _have_ to but it's going to behave weirdly if you don't)","format":"org.matrix.custom.html","formatted_body":"(to obey the iterator contract, anyway; you don't <em>have</em> to but it's going to behave weirdly if you don't)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(to obey the iterator contract, anyway; you don't _have_ to but it's going to behave weirdly if you don't)","mimetype":"text/plain"},{"body":"(to obey the iterator contract, anyway; you don't <em>have</em> to but it's going to behave weirdly if you don't)","mimetype":"text/html"}]},"ts":1650339781615,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$goP1CfTA_9U4twVK-sDOW6VxUE2eLRk86Yu1awna0Vs"},
{"content":{"body":" * whoops forgot that one. ~~https://jsfiddle.net/xs1brkL8/2/~~ https://jsfiddle.net/xs1brkL8/3/","m.new_content":{"body":"whoops forgot that one. ~~https://jsfiddle.net/xs1brkL8/2/~~ https://jsfiddle.net/xs1brkL8/3/","msgtype":"m.text","org.matrix.msc1767.text":"whoops forgot that one. ~~https://jsfiddle.net/xs1brkL8/2/~~ https://jsfiddle.net/xs1brkL8/3/"},"m.relates_to":{"event_id":"$diSiqHVclyNzqBvKUJ-DRm9pYjoETHQKfirPdETEv8A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * whoops forgot that one. ~~https://jsfiddle.net/xs1brkL8/2/~~ https://jsfiddle.net/xs1brkL8/3/"},"ts":1650340476579,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$1J-T1L447_k_Guo4nDPZaBuMdvJz9x2WJFFi5gT8Krk"},
{"content":{"body":"Wait, how do you edit the iterator prototype? What is it called?","msgtype":"m.text","org.matrix.msc1767.text":"Wait, how do you edit the iterator prototype? What is it called?"},"ts":1650340597542,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$d5D59-c4InymEfBd4iAJzX63-hNNZbOymq0sLge01Jg"},
{"content":{"body":"it's called `[].values().__proto__.__proto__`","format":"org.matrix.custom.html","formatted_body":"it's called <code>[].values().__proto__.__proto__</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's called `[].values().__proto__.__proto__`","mimetype":"text/plain"},{"body":"it's called <code>[].values().__proto__.__proto__</code>","mimetype":"text/html"}]},"ts":1650340637151,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$05WsGik7_likR1roSj3cq9z7f3mF5uo5lqIyeZ22ulM"},
{"content":{"body":"That's how I know this is a good idea.","msgtype":"m.text","org.matrix.msc1767.text":"That's how I know this is a good idea."},"ts":1650340673631,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Y1k8BAcj7LoYn3QgIqY0Foz2ciD4n5_h_hifFlxokww"},
{"content":{"body":"Is the async iterator a different one then?","msgtype":"m.text","org.matrix.msc1767.text":"Is the async iterator a different one then?"},"ts":1650341210244,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$yzQhuVlsLd-6JWtAGaWE7CmvYmUjdAb5AFcI96sh5jY"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1650341222315,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zWkHKpcO6gI0eCYZkZAlAWViyPH0VDN3mwRXm8dPaXc"},
{"content":{"body":"(it's `(async function*(){})().__proto__.__proto__.__proto__`)","format":"org.matrix.custom.html","formatted_body":"(it's <code>(async function*(){})().__proto__.__proto__.__proto__</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(it's `(async function*(){})().__proto__.__proto__.__proto__`)","mimetype":"text/plain"},{"body":"(it's <code>(async function*(){})().__proto__.__proto__.__proto__</code>)","mimetype":"text/html"}]},"ts":1650341477898,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$USCZQMNv8GxS8lOj45WiWAi3VF-ahgFhS8uvObwlc2g"},
{"content":{"body":"ah, I was off one proto","msgtype":"m.text","org.matrix.msc1767.text":"ah, I was off one proto"},"ts":1650341505659,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$11ohFmAIXEKI-HxytzuQfDmGvhzFYXqtF-T6O-opLnI"},
{"content":{"body":"sirisian: ok I looked again and I am pretty sure this implementation will never start the third phase until at least 5 items from the second phase have finished, which I think is not what you intend","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: ok I looked again and I am pretty sure this implementation will never start the third phase until at least 5 items from the second phase have finished, which I think is not what you intend","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: ok I looked again and I am pretty sure this implementation will never start the third phase until at least 5 items from the second phase have finished, which I think is not what you intend","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: ok I looked again and I am pretty sure this implementation will never start the third phase until at least 5 items from the second phase have finished, which I think is not what you intend","mimetype":"text/html"}]},"ts":1650342292358,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pVcYuw5d81xYwAa9HyY2i3crKhpjwe3GGOss4JkBjH4"},
{"content":{"body":"where you have `await tasks.next()` you want to instead have a race with that and the existing work queue items, and if one from the work queue finishes you yield it right away","format":"org.matrix.custom.html","formatted_body":"where you have <code>await tasks.next()</code> you want to instead have a race with that and the existing work queue items, and if one from the work queue finishes you yield it right away","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"where you have `await tasks.next()` you want to instead have a race with that and the existing work queue items, and if one from the work queue finishes you yield it right away","mimetype":"text/plain"},{"body":"where you have <code>await tasks.next()</code> you want to instead have a race with that and the existing work queue items, and if one from the work queue finishes you yield it right away","mimetype":"text/html"}]},"ts":1650342357306,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xScQ0FAkJlf9fA85Zokirn0rg8By4WFPgxCmbkgANmo"},
{"content":{"body":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more.","msgtype":"m.text","org.matrix.msc1767.text":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more."},"ts":1650342366233,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Lqt5xYW9rUghLoVlHZKUZwlGojPss-a_XKFAbZrd7f4"},
{"content":{"body":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more.","m.new_content":{"body":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more.","msgtype":"m.text","org.matrix.msc1767.text":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more."},"m.relates_to":{"event_id":"$Lqt5xYW9rUghLoVlHZKUZwlGojPss-a_XKFAbZrd7f4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more."},"ts":1650342406968,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$NCAh7WPj44VkrD7mMpSK-atTrRg3FKvW-9Abcrckw7k"},
{"content":{"body":"ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it.","msgtype":"m.text","org.matrix.msc1767.text":"ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it."},"ts":1650342752990,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Q82xvCaCsqYOgWE1ge4DXry0cltZxSWOJA3FYhEu_Vg"},
{"content":{"body":" * ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it.","m.new_content":{"body":"ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it.","msgtype":"m.text","org.matrix.msc1767.text":"ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it."},"m.relates_to":{"event_id":"$Q82xvCaCsqYOgWE1ge4DXry0cltZxSWOJA3FYhEu_Vg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * ah, I think I see what you mean since the iterator can take a while to yield. I'll put a sleep in my makeALotOfWork just to make it more clear also and handle it."},"ts":1650342801496,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$UwE2B2Lc87R1EiNkov6pP0jkxJJGgBreqT8MAi7JwYY"},
{"content":{"body":"There's no way to get the Promise from Promise.race along with the value without creating another promise right?","msgtype":"m.text","org.matrix.msc1767.text":"There's no way to get the Promise from Promise.race along with the value without creating another promise right?"},"ts":1650346162725,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$lSqxQ1Zzpi59mdmwYYIHirrSGgvKYhwCEHR83J2v0wo"},
{"content":{"body":" * There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what value that promise corresponds to.","m.new_content":{"body":"There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what value that promise corresponds to.","msgtype":"m.text","org.matrix.msc1767.text":"There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what value that promise corresponds to."},"m.relates_to":{"event_id":"$lSqxQ1Zzpi59mdmwYYIHirrSGgvKYhwCEHR83J2v0wo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what value that promise corresponds to."},"ts":1650346218997,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$F0jJpWbauPx9w0lxHsIMMRhuKs-7yMc8bSkquG6ye9k"},
{"content":{"body":" * There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what promise that value corresponds to.","m.new_content":{"body":"There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what promise that value corresponds to.","msgtype":"m.text","org.matrix.msc1767.text":"There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what promise that value corresponds to."},"m.relates_to":{"event_id":"$lSqxQ1Zzpi59mdmwYYIHirrSGgvKYhwCEHR83J2v0wo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * There's no way to get the Promise from Promise.race along with the value without creating another promise right? Like it returns the value, but if you have say 10 promises you don't know what promise that value corresponds to."},"ts":1650346284711,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$H1p1BuREwhfeZurcm60qLqVWDkIp1c7I6Ydd-VUQ83E"},
{"content":{"body":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/9/","m.new_content":{"body":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/9/","msgtype":"m.text","org.matrix.msc1767.text":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/9/"},"m.relates_to":{"event_id":"$Lqt5xYW9rUghLoVlHZKUZwlGojPss-a_XKFAbZrd7f4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/9/"},"ts":1650354031385,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$ME8qlQTCbw1lYnhrd_WMo71bPI6e1p54qZ2f8IW_jn4"},
{"content":{"body":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/10/","m.new_content":{"body":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/10/","msgtype":"m.text","org.matrix.msc1767.text":"https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/10/"},"m.relates_to":{"event_id":"$Lqt5xYW9rUghLoVlHZKUZwlGojPss-a_XKFAbZrd7f4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * https://jsfiddle.net/xs1brkL8/4/ My current one for reference. Thinking more. Updated: https://jsfiddle.net/xs1brkL8/10/"},"ts":1650354113081,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$w12dnUlgHB8K52_uJ6JzhJ-v80MZSUHm4USvwaJ_b3U"},
{"content":{"body":"I made a few concurrent async iterable helpers at https://github.com/jridgewell/minx/blob/main/src/async-iterable-concurrent.mjs","msgtype":"m.text"},"ts":1650370792204,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QrUp9L4GgbImF6O2YjUAOONuBSfHeHCloxu9l7FrLxE"},
{"content":{"body":"Why does tc39.es not host ECMA-404?","msgtype":"m.text","org.matrix.msc1767.text":"Why does tc39.es not host ECMA-404?"},"ts":1650372050426,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$ndsu2NRZfyPe7OADwCIf_C3lbypeN_qY0B5mB4lWTcw"},
{"content":{"body":"That is probably just an oversight..","msgtype":"m.text","org.matrix.msc1767.text":"That is probably just an oversight.."},"ts":1650372455893,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$f75-f0kHIzeig32km0b-WJ2NvU_jOfwdI1TX9LCDT08"},
{"content":{"body":"yulia: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track","mimetype":"text/html"}]},"ts":1650375938668,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$FD_Tud3c7CXLAgQfUzUj2pNwn-jPWbJ3koDToqTZUzw"},
{"content":{"body":"> <@annevk:mozilla.org> yulia: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track\n\nthanks, we are discussing it in #tc39-website:matrix.org ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$FD_Tud3c7CXLAgQfUzUj2pNwn-jPWbJ3koDToqTZUzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track</blockquote></mx-reply>thanks, we are discussing it in <a href=\"https://matrix.to/#/#tc39-website:matrix.org\">#tc39-website:matrix.org</a>","m.relates_to":{"m.in_reply_to":{"event_id":"$FD_Tud3c7CXLAgQfUzUj2pNwn-jPWbJ3koDToqTZUzw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:mozilla.org> yulia: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track\n\nthanks, we are discussing it in #tc39-website:matrix.org ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$FD_Tud3c7CXLAgQfUzUj2pNwn-jPWbJ3koDToqTZUzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ta, filed https://github.com/tc39/tc39.github.io/issues/283 to track</blockquote></mx-reply>thanks, we are discussing it in <a href=\"https://matrix.to/#/#tc39-website:matrix.org\">#tc39-website:matrix.org</a>","mimetype":"text/html"}]},"ts":1650375961823,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$anJknnhHzcBaHKOIhLgWJxsNQOZdFgnVselg0I5JOfA"},
{"content":{"body":"we don't seem to have an html source anywhere -- i think it predates that","msgtype":"m.text","org.matrix.msc1767.text":"we don't seem to have an html source anywhere -- i think it predates that"},"ts":1650375984717,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xs8a4G7VMmix8rJHrneVvjPfM-8EUDK9DgFd4wunkYk"},
{"content":{"body":"so we likely need to write that up","msgtype":"m.text","org.matrix.msc1767.text":"so we likely need to write that up"},"ts":1650375988951,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$9ZYqiCE3DxgApGl7Ty9SJtSCbsy8tkKO7a_VrG5J6qg"},
{"content":{"body":"We will get in touch with Chip","msgtype":"m.text","org.matrix.msc1767.text":"We will get in touch with Chip"},"ts":1650375996924,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wApHCV01-G1PWljGKnfR9RNd9y16s-tVsH6-0JFb-5A"},
{"content":{"body":"for now we might just host the pdf under the usual url","msgtype":"m.text","org.matrix.msc1767.text":"for now we might just host the pdf under the usual url"},"ts":1650376024128,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$vVzB1TFXjlkOpwW_spcGNo-RNApWuPsRSHXiw0m-toM"},
{"content":{"body":"I figured that might be part of the problem, but PDF could be linked until hosting is sorted in the future","msgtype":"m.text","org.matrix.msc1767.text":"I figured that might be part of the problem, but PDF could be linked until hosting is sorted in the future"},"ts":1650376029788,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$aeRjkk4I1MRQAbJs-UtvSm7oNis8_uEQ6Ts16TE0-Ro"},
{"content":{"body":"yeah","msgtype":"m.text","org.matrix.msc1767.text":"yeah"},"ts":1650376036865,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$bMZXj5yHmCQzmLhUykZTn_1nnp94k8qDM1918gIohpA"},
{"content":{"body":"sirisian: you can get substantially simpler, I think: https://gist.github.com/bakkot/6bee327466c06887d96a65f88f4cf728","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: you can get substantially simpler, I think: https://gist.github.com/bakkot/6bee327466c06887d96a65f88f4cf728","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: you can get substantially simpler, I think: https://gist.github.com/bakkot/6bee327466c06887d96a65f88f4cf728","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: you can get substantially simpler, I think: https://gist.github.com/bakkot/6bee327466c06887d96a65f88f4cf728","mimetype":"text/html"}]},"ts":1650380747044,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ms8pq1Ds-i4mGaeSN7uvgUXDl3iI__8D_qSpzeS2svo"},
{"content":{"body":"though I notice there's another way this could be configurable, which is, there is both \"number of tasks running in the mapping function\" and \"number of unsettled promises read from the underlying iterator\", and those don't actually need to be the same number","msgtype":"m.text","org.matrix.msc1767.text":"though I notice there's another way this could be configurable, which is, there is both \"number of tasks running in the mapping function\" and \"number of unsettled promises read from the underlying iterator\", and those don't actually need to be the same number"},"ts":1650381276849,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Py-jPFtMjww4lEtR0KWiB7aB7EXc-xgK503MZ0fztis"},
{"content":{"body":"in my gist I have it so that the sum of those two numbers is `n`, but they could reasonably be independently configured","format":"org.matrix.custom.html","formatted_body":"in my gist I have it so that the sum of those two numbers is <code>n</code>, but they could reasonably be independently configured","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in my gist I have it so that the sum of those two numbers is `n`, but they could reasonably be independently configured","mimetype":"text/plain"},{"body":"in my gist I have it so that the sum of those two numbers is <code>n</code>, but they could reasonably be independently configured","mimetype":"text/html"}]},"ts":1650381321322,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x-6q4_la-TlwOOQimiHHO2BxXO-9Coth_ygYNfX5Mvo"},
{"content":{"body":"Justin Ridgewell: hmm, I wonder if we should make iterator helpers work like your mapper...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: hmm, I wonder if we should make iterator helpers work like your mapper...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: hmm, I wonder if we should make iterator helpers work like your mapper...","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: hmm, I wonder if we should make iterator helpers work like your mapper...","mimetype":"text/html"}]},"ts":1650381805670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HPivWTr83yAbMLe6z8bZ7dyleDge3nR9THVuDGm-YTc"},
{"content":{"body":"probably not I guess? it would maybe be surprising.","msgtype":"m.text","org.matrix.msc1767.text":"probably not I guess? it would maybe be surprising."},"ts":1650381831676,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xA2NrGJQ_aeZRwUQHaa7gfXaatigZZCCEy-TPABPuuo"},
{"content":{"body":"though I guess you're only exposed to the difference if you're manually pumping the iterator rather than just using `for await`","format":"org.matrix.custom.html","formatted_body":"though I guess you're only exposed to the difference if you're manually pumping the iterator rather than just using <code>for await</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"though I guess you're only exposed to the difference if you're manually pumping the iterator rather than just using `for await`","mimetype":"text/plain"},{"body":"though I guess you're only exposed to the difference if you're manually pumping the iterator rather than just using <code>for await</code>","mimetype":"text/html"}]},"ts":1650381914756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AlpPO97bKZSpDGIZ7vsykhHoPnzL1fJhRjwOg_7nF5c"},
{"content":{"body":"It’s really difficult to reason about my way.","msgtype":"m.text"},"ts":1650382422421,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SCch-dUBbXhWJSFdXdpDTwwAugQFkvR1J5XAjMkss2Q"},
{"content":{"body":"You can get a done message before all the previous messages have completed","msgtype":"m.text"},"ts":1650382443222,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_DGOT_qNpXkzFbWJ884IQVhS26Nc0LzbJMXk6w2mIBE"},
{"content":{"body":"I had to write the cap iterator to help me reason about the end states when using the map and interleave","msgtype":"m.text"},"ts":1650382495479,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zEi2mPFQuculflXQoUXQA5rI4TLJlcJfHf3an91ugIM"},
{"content":{"body":"Even map, you have to be aware of reentrancy during any async portions, which was difficult","msgtype":"m.text"},"ts":1650382557307,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bzlUGcPSBn6cKVurxcSjGKBSk7BD26yOGGbexeWpJKM"},
{"content":{"body":"I do not recommend we make standard iterators that behave this way","msgtype":"m.text"},"ts":1650382622414,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IFickw0bW2CZCAD0lPFeVf5fHjbf7brWWVH_3aX1g1M"},
{"content":{"body":"Backpressure may be slow but it has a very predictable result","msgtype":"m.text"},"ts":1650382642289,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JmMOr0l6QpEHkDVVWBYAmHSocfa1hE3RROezfJjPpA0"},
{"content":{"body":"Yeah, sounds good.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, sounds good."},"ts":1650382717555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N_0JbIrFu_6fcUxbfB_EP2dTbSujHyFISi05F7M2hrs"},
{"content":{"body":"Staring at this async code above has been making my head hurt also. Which says there's maybe a place for the language to help out, but as a power tool, not one of the simple helpers.","msgtype":"m.text","org.matrix.msc1767.text":"Staring at this async code above has been making my head hurt also. Which says there's maybe a place for the language to help out, but as a power tool, not one of the simple helpers."},"ts":1650382759367,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ukF0Yy0scNzOS3lb-z7zi22U99Ne1AGzB6JHPsz-L28"},
{"content":{"body":"* Backpressure may be slow but it has a very predictable ordering","m.new_content":{"body":"Backpressure may be slow but it has a very predictable ordering","msgtype":"m.text"},"m.relates_to":{"event_id":"$JmMOr0l6QpEHkDVVWBYAmHSocfa1hE3RROezfJjPpA0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1650382863320,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PdmB0Ce-KxVYAV8SXyiBKP6bRvr5Z950UdCRr2QX8dQ"}
]