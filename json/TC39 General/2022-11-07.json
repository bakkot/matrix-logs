[
{"content":{"body":"I'm looking into the Array.fromAsync proposal and have a question about what people's understanding of \"Zalgo\" is (to explain the [jargon](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/), Zalgo is a reference to a meme, that is used as shorthand for the situation where an async operation sometimes calls a callback and sometimes doesn't)","format":"org.matrix.custom.html","formatted_body":"I'm looking into the Array.fromAsync proposal and have a question about what people's understanding of &quot;Zalgo&quot; is (to explain the <a href=\"https://blog.izs.me/2013/08/designing-apis-for-asynchrony/\">jargon</a>, Zalgo is a reference to a meme, that is used as shorthand for the situation where an async operation sometimes calls a callback and sometimes doesn't)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm looking into the Array.fromAsync proposal and have a question about what people's understanding of \"Zalgo\" is (to explain the [jargon](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/), Zalgo is a reference to a meme, that is used as shorthand for the situation where an async operation sometimes calls a callback and sometimes doesn't)","mimetype":"text/plain"},{"body":"I'm looking into the Array.fromAsync proposal and have a question about what people's understanding of &quot;Zalgo&quot; is (to explain the <a href=\"https://blog.izs.me/2013/08/designing-apis-for-asynchrony/\">jargon</a>, Zalgo is a reference to a meme, that is used as shorthand for the situation where an async operation sometimes calls a callback and sometimes doesn't)","mimetype":"text/html"}]},"ts":1667846281228,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$edWNGTjDw4wm91iCiAEX47ZDlEZDgF5tfC7Y444L_0s"},
{"content":{"body":"is throwing an error immediately, on bad input, Zalgo?","msgtype":"m.text","org.matrix.msc1767.text":"is throwing an error immediately, on bad input, Zalgo?"},"ts":1667846351388,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ZKrh6KW72XYvsT82ge4_hwNp1LSh3cgSOkHehX-IkAA"},
{"content":{"body":"i.e.\n```js\nfunction myfunc(input) {\n  if (isBad(input)) throw new Error('bad!');\n  return promiseFromAsyncOperation(input);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>i.e.</p>\n<pre><code class=\"language-js\">function myfunc(input) {\n  if (isBad(input)) throw new Error('bad!');\n  return promiseFromAsyncOperation(input);\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i.e.\n```js\nfunction myfunc(input) {\n  if (isBad(input)) throw new Error('bad!');\n  return promiseFromAsyncOperation(input);\n}\n```","mimetype":"text/plain"},{"body":"<p>i.e.</p>\n<pre><code class=\"language-js\">function myfunc(input) {\n  if (isBad(input)) throw new Error('bad!');\n  return promiseFromAsyncOperation(input);\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1667846414234,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$8Ew_pnPuJPLjD4_B4ZUG4bSqCS8x_My-ynbRedndg8M"},
{"content":{"body":"the Array.fromAsync proposal [says yes](https://github.com/tc39/proposal-array-from-async#errors) and takes care to check its input only inside its async closure, which means rejecting the promise, not throwing an error synchronously","format":"org.matrix.custom.html","formatted_body":"the Array.fromAsync proposal <a href=\"https://github.com/tc39/proposal-array-from-async#errors\">says yes</a> and takes care to check its input only inside its async closure, which means rejecting the promise, not throwing an error synchronously","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the Array.fromAsync proposal [says yes](https://github.com/tc39/proposal-array-from-async#errors) and takes care to check its input only inside its async closure, which means rejecting the promise, not throwing an error synchronously","mimetype":"text/plain"},{"body":"the Array.fromAsync proposal <a href=\"https://github.com/tc39/proposal-array-from-async#errors\">says yes</a> and takes care to check its input only inside its async closure, which means rejecting the promise, not throwing an error synchronously","mimetype":"text/html"}]},"ts":1667846472352,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$O5jfW2ETFdmu6q5GGr8xT4T13_BtDYDduS4qYgOdCZQ"},
{"content":{"body":"Atomics.waitAsync, on the other hand, does throw errors synchronously on bad input: (steps 1 and 2 of https://tc39.es/proposal-atomics-wait-async/#sec-dowait)","msgtype":"m.text","org.matrix.msc1767.text":"Atomics.waitAsync, on the other hand, does throw errors synchronously on bad input: (steps 1 and 2 of https://tc39.es/proposal-atomics-wait-async/#sec-dowait)"},"ts":1667846511206,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$hxUB5373Bp4vBywbw0qkU4cDO4VCdlegqAxLjXRphC4"},
{"content":{"body":"reading the [original](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/) [definitions](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/) of Zalgo, I'd say this is not Zalgo as originally defined","format":"org.matrix.custom.html","formatted_body":"reading the <a href=\"https://blog.izs.me/2013/08/designing-apis-for-asynchrony/\">original</a> <a href=\"https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/\">definitions</a> of Zalgo, I'd say this is not Zalgo as originally defined","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"reading the [original](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/) [definitions](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/) of Zalgo, I'd say this is not Zalgo as originally defined","mimetype":"text/plain"},{"body":"reading the <a href=\"https://blog.izs.me/2013/08/designing-apis-for-asynchrony/\">original</a> <a href=\"https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/\">definitions</a> of Zalgo, I'd say this is not Zalgo as originally defined","mimetype":"text/html"}]},"ts":1667846601323,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$3Hmv289hrbgvXge0_WS5R2qvCBHcGSKECLkeSKFc_5M"},
{"content":{"body":"however, maybe it is still desirable to do one or the other; in which case we should probably adjust one of these two proposals","msgtype":"m.text","org.matrix.msc1767.text":"however, maybe it is still desirable to do one or the other; in which case we should probably adjust one of these two proposals"},"ts":1667846652226,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$HW24YHkvhX7rXi6tmWqg4xAMnkuRdlJ9WRp5vUu0lT8"},
{"content":{"body":"Zalgo in short is a combinatoric explosion of behaviors that may be either synchronous or anachronous, such that it is not practical to test every combination that will be seen in production.","msgtype":"m.text","org.matrix.msc1767.text":"Zalgo in short is a combinatoric explosion of behaviors that may be either synchronous or anachronous, such that it is not practical to test every combination that will be seen in production."},"ts":1667846706162,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TTy-6TZySZcnQYdf_71jYh53OQETJbmf7YzuBdXhaKE"},
{"content":{"body":"Vetting inputs is I believe debatable. It depends on whether the errant behavior can possibly vary at runtime.","msgtype":"m.text","org.matrix.msc1767.text":"Vetting inputs is I believe debatable. It depends on whether the errant behavior can possibly vary at runtime."},"ts":1667846795793,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$upJO8zOV9e_4XvX_nVCQr6wQHEAtBuTtzG2ogmvclzQ"},
{"content":{"body":"Being JavaScript, it almost certainly can.","msgtype":"m.text","org.matrix.msc1767.text":"Being JavaScript, it almost certainly can."},"ts":1667846825899,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OxtbqwzwJeDHnA-lO92191lPqMJrX-bdNJm8rJTpkw0"},
{"content":{"body":"the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that","format":"org.matrix.custom.html","formatted_body":"the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that","mimetype":"text/plain"},{"body":"the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that","mimetype":"text/html"}]},"ts":1667846835497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8"},
{"content":{"body":"ptomato: I would say that Atomics.waitAsync is actually a sync function, despite the name","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: I would say that Atomics.waitAsync is actually a sync function, despite the name","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ptomato: I would say that Atomics.waitAsync is actually a sync function, despite the name","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: I would say that Atomics.waitAsync is actually a sync function, despite the name","mimetype":"text/html"}]},"ts":1667846846709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5yiuCcMWMbsXdfmLYPq8M-UQZHuymzYcyyHX81SYykY"},
{"content":{"body":"it does not return a promise; it returns an object which is synchronously usable","msgtype":"m.text","org.matrix.msc1767.text":"it does not return a promise; it returns an object which is synchronously usable"},"ts":1667846855970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gp-cL8fGLguT7oA1ceytfo0c8-wu0ON6zAHLCLUv0uk"},
{"content":{"body":"can it return a promise?","msgtype":"m.text","org.matrix.msc1767.text":"can it return a promise?"},"ts":1667846857128,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C5WpjQGMRe4MwPj5ftawq99Y3T2AmJakcLtLt0Tw7y8"},
{"content":{"body":"ah ok","msgtype":"m.text","org.matrix.msc1767.text":"ah ok"},"ts":1667846859233,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oUh9wDZrBTwJoRaRAjZxXbzmtHttOanx8CEknROiJJM"},
{"content":{"body":"then i would agree","msgtype":"m.text","org.matrix.msc1767.text":"then i would agree"},"ts":1667846862632,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XYYlnfOo9YJ3sfyPdhjyJ7ry7MDJemRs-ZTSgWFjEAc"},
{"content":{"body":"(one of the properties of that object can be a promise)","msgtype":"m.text","org.matrix.msc1767.text":"(one of the properties of that object can be a promise)"},"ts":1667846869999,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ndwHv16prjZDRB9LKt9Hm3YY2fZSMfSdG2-ZTtqCsg0"},
{"content":{"body":"Atomics.waitAsync is the way it is explicitly to avoid zalgo","msgtype":"m.text","org.matrix.msc1767.text":"Atomics.waitAsync is the way it is explicitly to avoid zalgo"},"ts":1667846877568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yv_lr9hw_ardACAvQf9-Uyt0LQZSMy-dBtsHrOMi9JU"},
{"content":{"body":"zalgo is basically \"always, or never, return a promise\"","msgtype":"m.text","org.matrix.msc1767.text":"zalgo is basically \"always, or never, return a promise\""},"ts":1667846878169,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j0bqNJ4nIqlD6U0TzWu-vNcfEEisO_cDh-T1XhJMVq0"},
{"content":{"body":"\"an object containing a promise\" is definitely not a promise :-)","msgtype":"m.text","org.matrix.msc1767.text":"\"an object containing a promise\" is definitely not a promise :-)"},"ts":1667846893997,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0rrK9ACQ_whOJbhwl2blb7scThynFIO3yWVN1-Gp89I"},
{"content":{"body":"in particular, Atomics.waitAsync *needs* to fail fast because it's built to mutexes -- you can't wait until the next microtask tick to find out you couldn't acquire the lock and need to go into the slow path ","format":"org.matrix.custom.html","formatted_body":"in particular, Atomics.waitAsync <em>needs</em> to fail fast because it's built to mutexes -- you can't wait until the next microtask tick to find out you couldn't acquire the lock and need to go into the slow path","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in particular, Atomics.waitAsync *needs* to fail fast because it's built to mutexes -- you can't wait until the next microtask tick to find out you couldn't acquire the lock and need to go into the slow path ","mimetype":"text/plain"},{"body":"in particular, Atomics.waitAsync <em>needs</em> to fail fast because it's built to mutexes -- you can't wait until the next microtask tick to find out you couldn't acquire the lock and need to go into the slow path","mimetype":"text/html"}]},"ts":1667846933680,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qykN181ViIVdbmCFyEPNrTr3XrjTB2EEMjxoAtDYhsY"},
{"content":{"body":"> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that\n\nAnd also the Promise constructor.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that</blockquote></mx-reply>And also the Promise constructor.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that\n\nAnd also the Promise constructor.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that</blockquote></mx-reply>And also the Promise constructor.","mimetype":"text/html"}]},"ts":1667846941138,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LGr3dCw6FI92V5h9rY6owB2h0Xn2PaEAMeGplADDZfY"},
{"content":{"body":"so, instead of always returning a Promise it does this wrapping","msgtype":"m.text","org.matrix.msc1767.text":"so, instead of always returning a Promise it does this wrapping"},"ts":1667846944650,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CNUBrIaygwzquysPbZ1cotN2GzHPmzr8dUp83RjDDRI"},
{"content":{"body":"fair enough. I got misled by the first sentence of MDN on Atomics.waitAsync: \"The static Atomics.waitAsync() method waits asynchronously on a shared memory location and returns a Promise.\"","msgtype":"m.text","org.matrix.msc1767.text":"fair enough. I got misled by the first sentence of MDN on Atomics.waitAsync: \"The static Atomics.waitAsync() method waits asynchronously on a shared memory location and returns a Promise.\""},"ts":1667846974656,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LSG6PjHcX38mAj5lewhkpkH9e0tVYmSmzpyG8G8KAYQ"},
{"content":{"body":"it waits asynchronously if it waits at all","msgtype":"m.text","org.matrix.msc1767.text":"it waits asynchronously if it waits at all"},"ts":1667846988595,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I4dke93pdl1uGqaqGdQHYKu4kPazCwUBZ6fDzVxtByI"},
{"content":{"body":"reading further down, you are right that it actually does not return a Promise","msgtype":"m.text","org.matrix.msc1767.text":"reading further down, you are right that it actually does not return a Promise"},"ts":1667846992802,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$5ikCSpLUIPn0YKgd0dNWGgczDrN-lG-DPLneXHfdTco"},
{"content":{"body":"if it doesn't wait, you can find out synchronously","msgtype":"m.text","org.matrix.msc1767.text":"if it doesn't wait, you can find out synchronously"},"ts":1667846996835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Jnwn9zhWHmEG-jGMrXAJPUujPwxVKNxCYtRKaK3Y1D4"},
{"content":{"body":"> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that\n\nis there documentation for this decision? seems like a good thing to put in https://github.com/tc39/how-we-work/pull/119 once that document is established","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that</blockquote></mx-reply>is there documentation for this decision? seems like a good thing to put in https://github.com/tc39/how-we-work/pull/119 once that document is established","m.relates_to":{"m.in_reply_to":{"event_id":"$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the language has explicit decided with `async function` that sync exceptions should *never* be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that\n\nis there documentation for this decision? seems like a good thing to put in https://github.com/tc39/how-we-work/pull/119 once that document is established","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ZdkkdAyLBFXbMPNnP9hxoyzV84mzpjmN7VzxDt-qtP8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language has explicit decided with <code>async function</code> that sync exceptions should <em>never</em> be thrown from something that returns a promise. there's a few exceptions, i think, if you're calling something on the wrong receiver, but generally we should avoid that</blockquote></mx-reply>is there documentation for this decision? seems like a good thing to put in https://github.com/tc39/how-we-work/pull/119 once that document is established","mimetype":"text/html"}]},"ts":1667847147581,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$4ZFARrowvxBLMGH578nUnVIzQea_jGe290VNAYtkPOM"},
{"content":{"body":"all that said i love zalgo","msgtype":"m.text","org.matrix.msc1767.text":"all that said i love zalgo"},"ts":1667847154713,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1QS1GMjskbaOMMYm_0Gx0IYWr-uF1y6kybx5km2tD6M"},
{"content":{"body":"i wish we had zalgo","msgtype":"m.text","org.matrix.msc1767.text":"i wish we had zalgo"},"ts":1667847156957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xu3NRlicwcRH1oM2MJh25YCGBrvjxx1sNyl7NF0ULeU"},
{"content":{"body":"but alas","msgtype":"m.text","org.matrix.msc1767.text":"but alas"},"ts":1667847158139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cgYPqZlNzhxRKEQbe5ad6KQjmDRjuWZvJmZeritKJhY"}
]