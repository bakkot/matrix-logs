[
{"content":{"body":"oh I wonder what's the motivation for BigInt TAs","msgtype":"m.text","org.matrix.msc1767.text":"oh I wonder what's the motivation for BigInt TAs"},"ts":1668653878343,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rzytB-oaMM6fM7-tJzLqo1wsI9-czpssH5y01IrgiF0"},
{"content":{"body":"I thought TA is for low level calculations, is there a cross-platform representation (like IEEE floating points) for BigInt?","msgtype":"m.text","org.matrix.msc1767.text":"I thought TA is for low level calculations, is there a cross-platform representation (like IEEE floating points) for BigInt?"},"ts":1668653913018,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7t9hvPvwZxcE8AGfDeLI6FDNg_JleAqfkrpqEcL0sl8"},
{"content":{"body":"oh the TAs aren't actually storing BigInts, they're storing (u)int64","msgtype":"m.text","org.matrix.msc1767.text":"oh the TAs aren't actually storing BigInts, they're storing (u)int64"},"ts":1668653925499,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Pqv1AB1ohQwRYBs6roKkAHwn0F_w23qxiHGeOMkCAc4"},
{"content":{"body":"but to get the values out / or assign into them we need to put them into BigInts","msgtype":"m.text","org.matrix.msc1767.text":"but to get the values out / or assign into them we need to put them into BigInts"},"ts":1668653942343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_T35cXuiE4Kebwge8AmhWjFRSCG9T2bu40MV5SRwewI"},
{"content":{"body":"since Numbers don't have enough bits to hold int64s","msgtype":"m.text","org.matrix.msc1767.text":"since Numbers don't have enough bits to hold int64s"},"ts":1668653948922,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FwJ2YQjFyVHnXEfn9M3NV0dfeugK53CjsL2jUcJrrVE"},
{"content":{"body":"ðŸ¤” so it cannot store infinitely big number?","msgtype":"m.text","org.matrix.msc1767.text":"ðŸ¤” so it cannot store infinitely big number?"},"ts":1668654092051,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Zf5wTsnR5PwauV96DbLK1UM7Ay2Ccs22PgLHZ6H8bH0"},
{"content":{"body":"oh I see","msgtype":"m.text","org.matrix.msc1767.text":"oh I see"},"ts":1668654144926,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$U1IM1Gd9io7isgv6eXFPic2dMuPD3YsdOScmXjNjbWs"},
{"content":{"body":"So here is a fun case. On the web platform we have `Headers`, which is supposed to be `Map`-like. However, we want its entries to be sorted (based on their keys), when iterating.\n\nOK. So what happens if you mutate during iteration? In particular, consider starting with keys `[\"a\", \"c\", \"d\"]`. `\"a\"` is visited. `\"c\"` is visited. At this point `\"b\"` is inserted. Now what?\n\nIf we naively copy `Map`'s iteration algorithm, we get `[\"a\", \"c\", \"c\", \"d\"]`, since `\"c\"` moved from index 1 to index 2 when we inserted `\"b\"`.\n\nWe could output `[\"a\", \"c\", \"b\", \"d\"]` (breaking the ordering invariant), or `[\"a\", \"c\", \"d\"]` (breaking the invariant that things added during iteration are always visited). Or we could stick with the natural extension of `Map`'s behavior and do `[\"a\", \"c\", \"c\", \"d\"]`. Which is least-bad?","format":"org.matrix.custom.html","formatted_body":"<p>So here is a fun case. On the web platform we have <code>Headers</code>, which is supposed to be <code>Map</code>-like. However, we want its entries to be sorted (based on their keys), when iterating.</p>\n<p>OK. So what happens if you mutate during iteration? In particular, consider starting with keys <code>[&quot;a&quot;, &quot;c&quot;, &quot;d&quot;]</code>. <code>&quot;a&quot;</code> is visited. <code>&quot;c&quot;</code> is visited. At this point <code>&quot;b&quot;</code> is inserted. Now what?</p>\n<p>If we naively copy <code>Map</code>'s iteration algorithm, we get <code>[&quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot;]</code>, since <code>&quot;c&quot;</code> moved from index 1 to index 2 when we inserted <code>&quot;b&quot;</code>.</p>\n<p>We could output <code>[&quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;d&quot;]</code> (breaking the ordering invariant), or <code>[&quot;a&quot;, &quot;c&quot;, &quot;d&quot;]</code> (breaking the invariant that things added during iteration are always visited). Or we could stick with the natural extension of <code>Map</code>'s behavior and do <code>[&quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot;]</code>. Which is least-bad?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So here is a fun case. On the web platform we have `Headers`, which is supposed to be `Map`-like. However, we want its entries to be sorted (based on their keys), when iterating.\n\nOK. So what happens if you mutate during iteration? In particular, consider starting with keys `[\"a\", \"c\", \"d\"]`. `\"a\"` is visited. `\"c\"` is visited. At this point `\"b\"` is inserted. Now what?\n\nIf we naively copy `Map`'s iteration algorithm, we get `[\"a\", \"c\", \"c\", \"d\"]`, since `\"c\"` moved from index 1 to index 2 when we inserted `\"b\"`.\n\nWe could output `[\"a\", \"c\", \"b\", \"d\"]` (breaking the ordering invariant), or `[\"a\", \"c\", \"d\"]` (breaking the invariant that things added during iteration are always visited). Or we could stick with the natural extension of `Map`'s behavior and do `[\"a\", \"c\", \"c\", \"d\"]`. Which is least-bad?","mimetype":"text/plain"},{"body":"<p>So here is a fun case. On the web platform we have <code>Headers</code>, which is supposed to be <code>Map</code>-like. However, we want its entries to be sorted (based on their keys), when iterating.</p>\n<p>OK. So what happens if you mutate during iteration? In particular, consider starting with keys <code>[&quot;a&quot;, &quot;c&quot;, &quot;d&quot;]</code>. <code>&quot;a&quot;</code> is visited. <code>&quot;c&quot;</code> is visited. At this point <code>&quot;b&quot;</code> is inserted. Now what?</p>\n<p>If we naively copy <code>Map</code>'s iteration algorithm, we get <code>[&quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot;]</code>, since <code>&quot;c&quot;</code> moved from index 1 to index 2 when we inserted <code>&quot;b&quot;</code>.</p>\n<p>We could output <code>[&quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;d&quot;]</code> (breaking the ordering invariant), or <code>[&quot;a&quot;, &quot;c&quot;, &quot;d&quot;]</code> (breaking the invariant that things added during iteration are always visited). Or we could stick with the natural extension of <code>Map</code>'s behavior and do <code>[&quot;a&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot;]</code>. Which is least-bad?</p>\n","mimetype":"text/html"}]},"ts":1668674773912,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$I5g0PbjN6tIr9MXQ690SLRaSQrrDw_wH9M3J53z6Vk4"},
{"content":{"body":"I haven't run this, but from what I can tell in c++ it would just move on to \"d\" because \"b\" is behind the iterator. That's logically what I would expect myself. ","msgtype":"m.text"},"ts":1668675525289,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$KYrF4jWf5Ud9lbgXTn9dDXnVMry0HvUFboCgwcC4wrE"},
{"content":{"body":"So I guess that's the middle option you gave reading again. If you insert during iteration you could miss elements. ","msgtype":"m.text"},"ts":1668675695012,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$UlnCXPF3TIBDpyOgv_H3jEuwfsFHXwtIGcrkgwM3pks"},
{"content":{"body":"TIL, Map delete doesn't actually remove the entry from the list (but implementations can avoid the memory leak)","msgtype":"m.text"},"ts":1668677339858,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nv9FzbR1dP4xBVB_vNiT2SvmqysOMy5fJYu6VeOyV7g"},
{"content":{"body":"```\nlet m = new Map();\n[...\"abcde\"].forEach(m.set.bind(m));\n\nfor (const [k] of m) {\n  console.log(k);\n  if (k === \"c\") m.delete(\"b\");\n}\n\n\nã€ > a\nã€ > b\nã€ > c\nã€ > d\nã€ > e\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>let m = new Map();\n[...&quot;abcde&quot;].forEach(m.set.bind(m));\n\nfor (const [k] of m) {\n  console.log(k);\n  if (k === &quot;c&quot;) m.delete(&quot;b&quot;);\n}\n\n\nã€ &gt; a\nã€ &gt; b\nã€ &gt; c\nã€ &gt; d\nã€ &gt; e\n</code></pre>","msgtype":"m.text"},"ts":1668677360432,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4iZZWSrvQ2d0FOktPvfPARGIBL2x5gtoJXN7M-F2VN4"}
]