[
{"content":{"body":"what do people do if they want to take the maximum of an with like 200k items in it, such that `Math.max(...arr)` overflows","format":"org.matrix.custom.html","formatted_body":"what do people do if they want to take the maximum of an with like 200k items in it, such that <code>Math.max(...arr)</code> overflows","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what do people do if they want to take the maximum of an with like 200k items in it, such that `Math.max(...arr)` overflows","mimetype":"text/plain"},{"body":"what do people do if they want to take the maximum of an with like 200k items in it, such that <code>Math.max(...arr)</code> overflows","mimetype":"text/html"}]},"ts":1666837257802,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ln2yHeKNAMER8j-wU4OqR7nQ1qVKjNxPZ4acB3Aqs-Q"},
{"content":{"body":"does this just not happen?","msgtype":"m.text","org.matrix.msc1767.text":"does this just not happen?"},"ts":1666837263749,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TeJoEqnqfhCEaIWiGg-vhTFGd3r2qm29C3KCLTz36Hw"},
{"content":{"body":"context: I am thinking about how `Math.sum` should work - it could take an iterable, which seems like the obvious thing, but then it wouldn't match `Math.max`","format":"org.matrix.custom.html","formatted_body":"context: I am thinking about how <code>Math.sum</code> should work - it could take an iterable, which seems like the obvious thing, but then it wouldn't match <code>Math.max</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"context: I am thinking about how `Math.sum` should work - it could take an iterable, which seems like the obvious thing, but then it wouldn't match `Math.max`","mimetype":"text/plain"},{"body":"context: I am thinking about how <code>Math.sum</code> should work - it could take an iterable, which seems like the obvious thing, but then it wouldn't match <code>Math.max</code>","mimetype":"text/html"}]},"ts":1666837292338,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-5GyzTgsIxrR4Hcg5jiQbre2sSgCZEdE_aZhy-h9mjU"},
{"content":{"body":"you’d probably slice it and max the slices? but i think it largely doesn’t happen","msgtype":"m.text"},"ts":1666840424837,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FOzBULZAjVnaMvJi9JA0QnlEMAuPUaL3kidqosCDTjU"},
{"content":{"body":"however I’d assume that it should be possible for engines to handle too-large arg arrays that are spread into a call to a builtin function?","msgtype":"m.text"},"ts":1666840500009,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xKFL6TzqhA6jNOzf_7eLgAU7KMCDuHU0mJ8oQOJHrys"},
{"content":{"body":"it is possible in principle but difficult in practice; none of the major engines support passing an array of length 1e6 in my testing","msgtype":"m.text","org.matrix.msc1767.text":"it is possible in principle but difficult in practice; none of the major engines support passing an array of length 1e6 in my testing"},"ts":1666841071090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d_PZH4OKXS0CixP9NVwS0WEb2rxOAa-zvopnFFaGg9s"},
{"content":{"body":"I would if we could reasonably overload `Math.max` such that if you call it with exactly one argument, and that argument is an object, it does a lookup of `Symbol.iterator` on that object and then uses that","format":"org.matrix.custom.html","formatted_body":"I would if we could reasonably overload <code>Math.max</code> such that if you call it with exactly one argument, and that argument is an object, it does a lookup of <code>Symbol.iterator</code> on that object and then uses that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would if we could reasonably overload `Math.max` such that if you call it with exactly one argument, and that argument is an object, it does a lookup of `Symbol.iterator` on that object and then uses that","mimetype":"text/plain"},{"body":"I would if we could reasonably overload <code>Math.max</code> such that if you call it with exactly one argument, and that argument is an object, it does a lookup of <code>Symbol.iterator</code> on that object and then uses that","mimetype":"text/html"}]},"ts":1666841473221,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ULPyC1WencpY6iaUgxnPIrvmiEBNRkOh5ppUoRxRSfw"},
{"content":{"body":"possibly this is a bad idea though","msgtype":"m.text","org.matrix.msc1767.text":"possibly this is a bad idea though"},"ts":1666841478559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8cIt88Ul9-QeUyZUd8PXmBxjAYGTtjWgLr0pCIVDLu8"},
{"content":{"body":"probably someone out there is somehow relying `Math.max([0, 1])` being NaN","format":"org.matrix.custom.html","formatted_body":"probably someone out there is somehow relying <code>Math.max([0, 1])</code> being NaN","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"probably someone out there is somehow relying `Math.max([0, 1])` being NaN","mimetype":"text/plain"},{"body":"probably someone out there is somehow relying <code>Math.max([0, 1])</code> being NaN","mimetype":"text/html"}]},"ts":1666841508629,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$veDBsUpjXRr5nALUU7WbZjkDQ8AKW5yflCtMEyamM0o"},
{"content":{"body":"> <@bakkot:matrix.org> what do people do if they want to take the maximum of an with like 200k items in it, such that `Math.max(...arr)` overflows\n\nAt some point, I ran into this with `splice`, because it was useful to funnel insertion and deletion operations through a single method. I ended up adding an `swap(index, count, replacements) => void` that was `splice` but not-variadic and also didn’t return a useless `slice`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ln2yHeKNAMER8j-wU4OqR7nQ1qVKjNxPZ4acB3Aqs-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>what do people do if they want to take the maximum of an with like 200k items in it, such that <code>Math.max(...arr)</code> overflows</blockquote></mx-reply>At some point, I ran into this with <code>splice</code>, because it was useful to funnel insertion and deletion operations through a single method. I ended up adding an <code>swap(index, count, replacements) =&gt; void</code> that was <code>splice</code> but not-variadic and also didn’t return a useless <code>slice</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$ln2yHeKNAMER8j-wU4OqR7nQ1qVKjNxPZ4acB3Aqs-Q"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> what do people do if they want to take the maximum of an with like 200k items in it, such that `Math.max(...arr)` overflows\n\nAt some point, I ran into this with `splice`, because it was useful to funnel insertion and deletion operations through a single method. I ended up adding an `swap(index, count, replacements) => void` that was `splice` but not-variadic and also didn’t return a useless `slice`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ln2yHeKNAMER8j-wU4OqR7nQ1qVKjNxPZ4acB3Aqs-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>what do people do if they want to take the maximum of an with like 200k items in it, such that <code>Math.max(...arr)</code> overflows</blockquote></mx-reply>At some point, I ran into this with <code>splice</code>, because it was useful to funnel insertion and deletion operations through a single method. I ended up adding an <code>swap(index, count, replacements) =&gt; void</code> that was <code>splice</code> but not-variadic and also didn’t return a useless <code>slice</code>.","mimetype":"text/html"}]},"ts":1666841768200,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$h26XPzIynRoUGH3NHaKz89tWSOBOZamwtjxLvelE9-0"},
{"content":{"body":"I think the bigger concern with unadic overloads of `min` and `max` would be the behavior of `Math.min(...array)` for arrays that happen to only have one value.","format":"org.matrix.custom.html","formatted_body":"I think the bigger concern with unadic overloads of <code>min</code> and <code>max</code> would be the behavior of <code>Math.min(...array)</code> for arrays that happen to only have one value.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the bigger concern with unadic overloads of `min` and `max` would be the behavior of `Math.min(...array)` for arrays that happen to only have one value.","mimetype":"text/plain"},{"body":"I think the bigger concern with unadic overloads of <code>min</code> and <code>max</code> would be the behavior of <code>Math.min(...array)</code> for arrays that happen to only have one value.","mimetype":"text/html"}]},"ts":1666841946526,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tFVir6Gn7wDlQwIBguVGwo-nGs7SZxxh7l6pjcQZc6o"},
{"content":{"body":"Perhaps it makes more sense to leave `Math` behind and `Number.min,max,sum`.","format":"org.matrix.custom.html","formatted_body":"Perhaps it makes more sense to leave <code>Math</code> behind and <code>Number.min,max,sum</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Perhaps it makes more sense to leave `Math` behind and `Number.min,max,sum`.","mimetype":"text/plain"},{"body":"Perhaps it makes more sense to leave <code>Math</code> behind and <code>Number.min,max,sum</code>.","mimetype":"text/html"}]},"ts":1666842033525,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5wbfvzCgvUjMHKfJZN1dWsKqeuw8KjO_etSkQroc99E"},
{"content":{"body":"Also `String.join(iterable)`","format":"org.matrix.custom.html","formatted_body":"Also <code>String.join(iterable)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also `String.join(iterable)`","mimetype":"text/plain"},{"body":"Also <code>String.join(iterable)</code>","mimetype":"text/html"}]},"ts":1666842082566,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$80orWPc1hwSRY2mAycJ8dKjC34Wy2UTL9kIsQMKL4qA"},
{"content":{"body":"I would not want to have both `Math.max` and also `Number.max`, especially with different behaviors","format":"org.matrix.custom.html","formatted_body":"I would not want to have both <code>Math.max</code> and also <code>Number.max</code>, especially with different behaviors","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would not want to have both `Math.max` and also `Number.max`, especially with different behaviors","mimetype":"text/plain"},{"body":"I would not want to have both <code>Math.max</code> and also <code>Number.max</code>, especially with different behaviors","mimetype":"text/html"}]},"ts":1666843379461,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YKdAxUJ6nuAAEpoRELf0vLcY9_OJN1h6-zLz0JNuhQw"},
{"content":{"body":"> `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","mimetype":"text/plain"},{"body":"<blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","mimetype":"text/html"}]},"ts":1666843428939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2rQ7qwlw3iseQ7cIADtA8eJpd5AB56yZBGWuoSZrJAw"},
{"content":{"body":" * > `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","m.new_content":{"body":"> `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","mimetype":"text/plain"},{"body":"<blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$2rQ7qwlw3iseQ7cIADtA8eJpd5AB56yZBGWuoSZrJAw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > `Math.min(...array)` for arrays that happen to only have one value\n\nwith my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)","mimetype":"text/plain"},{"body":" * <blockquote>\n<p><code>Math.min(...array)</code> for arrays that happen to only have one value</p>\n</blockquote>\n<p>with my suggestion this would only be problematic if the first value in the array happened to be an object with a Symbol.iterator method (or such that accessing that property was side-effecting, I guess)</p>\n","mimetype":"text/html"}]},"ts":1666843449911,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6UfoRfnydC_8YIz7cHXJlU4BVKZizu1mOFOHW0lbexU"},
{"content":{"body":"which seems unlikely, or at least unlikely-ish","msgtype":"m.text","org.matrix.msc1767.text":"which seems unlikely, or at least unlikely-ish"},"ts":1666843459834,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eejvnH8Ggd3Ncdbq1YZ6OU_z5YQx9r-LqeK3Fs7WD6g"},
{"content":{"body":"I for one don't support that kind of overloading. If such behavior is to be added to the standard library, it should be in the form of new functions that always read `Symbol.iterator`.","format":"org.matrix.custom.html","formatted_body":"I for one don't support that kind of overloading. If such behavior is to be added to the standard library, it should be in the form of new functions that always read <code>Symbol.iterator</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I for one don't support that kind of overloading. If such behavior is to be added to the standard library, it should be in the form of new functions that always read `Symbol.iterator`.","mimetype":"text/plain"},{"body":"I for one don't support that kind of overloading. If such behavior is to be added to the standard library, it should be in the form of new functions that always read <code>Symbol.iterator</code>.","mimetype":"text/html"}]},"ts":1666845944754,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$7fSa4cU_DdnpQL_OMzYrmsHmYjVGmuTOiMey4QtobsE"},
{"content":{"body":"Richard Gibson do you think `Math.sum` should be such a new function, inconsistent with `Math.max`? or would you want like a `Math.maxList` and `Math.sumList` so they could be consistent?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> do you think <code>Math.sum</code> should be such a new function, inconsistent with <code>Math.max</code>? or would you want like a <code>Math.maxList</code> and <code>Math.sumList</code> so they could be consistent?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson do you think `Math.sum` should be such a new function, inconsistent with `Math.max`? or would you want like a `Math.maxList` and `Math.sumList` so they could be consistent?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> do you think <code>Math.sum</code> should be such a new function, inconsistent with <code>Math.max</code>? or would you want like a <code>Math.maxList</code> and <code>Math.sumList</code> so they could be consistent?","mimetype":"text/html"}]},"ts":1666846616766,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UI8lJtFx5nRg9Uy4-aeQFRyVdBSml87afJfBHypRqsw"},
{"content":{"body":"the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern.","msgtype":"m.text","org.matrix.msc1767.text":"the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern."},"ts":1666846809259,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$HOH8v4O-ImOlayKsTgOUBqzHdZVgGUA6aqIZXTJTvZU"},
{"content":{"body":" * the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern.","m.new_content":{"body":"the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern.","msgtype":"m.text","org.matrix.msc1767.text":"the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern."},"m.relates_to":{"event_id":"$HOH8v4O-ImOlayKsTgOUBqzHdZVgGUA6aqIZXTJTvZU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the latter. We've got precedent for Math functions that operate on an arbitrary number of values to accept each one as an argument, so new Math functions that accept an arbitrary number of values from an iterable should indicate that distinction by a common naming pattern."},"ts":1666846817538,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$92b5FtV_WAPCaCeTup6_BnxIEH9R6eEwY4M5xM_AzOE"},
{"content":{"body":"similar to how `Array.from` process its argument as an iterable but `Array` does not","format":"org.matrix.custom.html","formatted_body":"similar to how <code>Array.from</code> process its argument as an iterable but <code>Array</code> does not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"similar to how `Array.from` process its argument as an iterable but `Array` does not","mimetype":"text/plain"},{"body":"similar to how <code>Array.from</code> process its argument as an iterable but <code>Array</code> does not","mimetype":"text/html"}]},"ts":1666847492844,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$iBe77A9v3rF2vbtZaTYOJAJ2NkJUVDYp62q1igcjto0"},
{"content":{"body":"python's `max` appears to be overloaded exactly as I suggested above, incidentally","format":"org.matrix.custom.html","formatted_body":"python's <code>max</code> appears to be overloaded exactly as I suggested above, incidentally","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"python's `max` appears to be overloaded exactly as I suggested above, incidentally","mimetype":"text/plain"},{"body":"python's <code>max</code> appears to be overloaded exactly as I suggested above, incidentally","mimetype":"text/html"}]},"ts":1666849284659,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AxFU0NA0alUXrKk2t42v-uIyvbqTpZ_QSi-0jC-sszo"},
{"content":{"body":"and their `sum` only takes an iterable","format":"org.matrix.custom.html","formatted_body":"and their <code>sum</code> only takes an iterable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and their `sum` only takes an iterable","mimetype":"text/plain"},{"body":"and their <code>sum</code> only takes an iterable","mimetype":"text/html"}]},"ts":1666849301653,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KY1AFt6SFd9Gpx1gBdXA3dlw6LgN65rRNhF2msLuGIw"},
{"content":{"body":"I guess their `max` isn't _exactly_ as I suggested; if you pass it exactly one item it assumes it's iterable and throws if not","format":"org.matrix.custom.html","formatted_body":"I guess their <code>max</code> isn't <em>exactly</em> as I suggested; if you pass it exactly one item it assumes it's iterable and throws if not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess their `max` isn't _exactly_ as I suggested; if you pass it exactly one item it assumes it's iterable and throws if not","mimetype":"text/plain"},{"body":"I guess their <code>max</code> isn't <em>exactly</em> as I suggested; if you pass it exactly one item it assumes it's iterable and throws if not","mimetype":"text/html"}]},"ts":1666849355641,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yEk7GGky_JqfPwzEzpkD54uFwowbIGEnKPXtPr4IUd0"},
{"content":{"body":"which, alas, we could not do at this point","msgtype":"m.text","org.matrix.msc1767.text":"which, alas, we could not do at this point"},"ts":1666849364785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uMbAYgCZGHbPPi8JXy2jklwoh3zV1ILZh_H1YuPzXvE"},
{"content":{"body":"was wondering about “what if you want to sum more than one iterable”, and the obvious answer is to spread them, but that’d be an eager operation that’d result in double iteration and extra GC garbage; perhaps that’s a use case for concat in iteratorhelpers, or perhaps I’m just overthinking","msgtype":"m.text"},"ts":1666849586716,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$9s67VAS_HVNC6bWNhuZySZZC6EShBlks4K8nx071etc"},
{"content":{"body":"* was wondering about “what if you want to sum more than one iterable”, and the obvious answer is to spread them, but that’d be an eager operation that’d result in double iteration and extra GC garbage; perhaps that’s a use case for concat in iteratorhelpers, or perhaps I’m just overthinking","m.new_content":{"body":"was wondering about “what if you want to sum more than one iterable”, and the obvious answer is to spread them, but that’d be an eager operation that’d result in double iteration and extra GC garbage; perhaps that’s a use case for concat in iteratorhelpers, or perhaps I’m just overthinking","msgtype":"m.text"},"m.relates_to":{"event_id":"$9s67VAS_HVNC6bWNhuZySZZC6EShBlks4K8nx071etc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1666849616240,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$_0kNUr_8ycmjucwC1hKmHTpZ7MSOJnaiIhqrUE1H3SI"},
{"content":{"body":"Jessidhia: yeah, concat in iterator helpers would work, though that's not in V1; flatmap serves the same purpose though","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jessidhia:matrix.org\">Jessidhia</a>: yeah, concat in iterator helpers would work, though that's not in V1; flatmap serves the same purpose though","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jessidhia: yeah, concat in iterator helpers would work, though that's not in V1; flatmap serves the same purpose though","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jessidhia:matrix.org\">Jessidhia</a>: yeah, concat in iterator helpers would work, though that's not in V1; flatmap serves the same purpose though","mimetype":"text/html"}]},"ts":1666850362214,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tcghwTVZ-q6voOWf9mwNfADzMFFS-z4HwKV8HOPrMDk"},
{"content":{"body":"`Math.sumList(Iterator.from(arrayOfIterables).flatMap(x => x))`","format":"org.matrix.custom.html","formatted_body":"<code>Math.sumList(Iterator.from(arrayOfIterables).flatMap(x =&gt; x))</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Math.sumList(Iterator.from(arrayOfIterables).flatMap(x => x))`","mimetype":"text/plain"},{"body":"<code>Math.sumList(Iterator.from(arrayOfIterables).flatMap(x =&gt; x))</code>","mimetype":"text/html"}]},"ts":1666850388841,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z9SIOMc6gznaMMekh4fOZIYfiJpBAKInT47d1ndM4cg"}
]