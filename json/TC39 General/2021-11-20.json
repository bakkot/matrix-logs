[
{"content":{"body":"sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","msgtype":"m.text"},"ts":1637367713328,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY"},
{"content":{"body":" * sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why `x = 3; x.p = 2` doesn’t actually assign anything.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why <code>x = 3; x.p = 2</code> doesn’t actually assign anything.","m.new_content":{"body":"sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why `x = 3; x.p = 2` doesn’t actually assign anything.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why <code>x = 3; x.p = 2</code> doesn’t actually assign anything.","msgtype":"m.text"},"m.relates_to":{"event_id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637367720488,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$A55HSi8qCkSiYTRRCSUbuOgZO8EwMQCKAvQpgBvtKQE"},
{"content":{"body":" * sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","m.new_content":{"body":"sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","msgtype":"m.text"},"m.relates_to":{"event_id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637367762319,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$noFZ6fKs3uz1T965IhBLA6mNkpunfaottLFS1bhzoFo"},
{"content":{"body":" * sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why the `x.p = 2` in `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why the <code>x.p = 2</code> in <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","m.new_content":{"body":"sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why the `x.p = 2` in `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up documentation on why the <code>x.p = 2</code> in <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","msgtype":"m.text"},"m.relates_to":{"event_id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637367934058,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UQOygxWjYUbEIRbuM97N0yyRxiEeqa-RqcOZs7VwCdE"},
{"content":{"body":" * sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the `x.p = 2` in `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the <code>x.p = 2</code> in <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","m.new_content":{"body":"sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the `x.p = 2` in `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the <code>x.p = 2</code> in <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”","msgtype":"m.text"},"m.relates_to":{"event_id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637367947243,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$H4fcz0uqZ4EoGJDP_FzyrpzDkQGyhGz7GAKuAedvJok"},
{"content":{"body":"it's probably worth having such documentation, but in real life people should use strict mode so that `x.p = 2` is an error and they don't have to think about it","format":"org.matrix.custom.html","formatted_body":"it's probably worth having such documentation, but in real life people should use strict mode so that <code>x.p = 2</code> is an error and they don't have to think about it","msgtype":"m.text"},"ts":1637367957240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PXp18e3nw50LIIjjph6HtXM6P8uQ3vUtuzNLfsZD75Q"},
{"content":{"body":"I don’t think auto boxing happens for a set operation ","format":"org.matrix.custom.html","formatted_body":"I don’t think auto boxing happens for a set operation","msgtype":"m.text"},"ts":1637367958662,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$e16VrR9am_Fc8yyBycEZZMuQVeL5nj05NV3l70c9kO4"},
{"content":{"body":"> <@aclaymore:matrix.org> I don’t think auto boxing happens for a set operation\n\nMaybe I’m misunderstanding why it’s a no-op that doesn’t throw an error, then, haha.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$e16VrR9am_Fc8yyBycEZZMuQVeL5nj05NV3l70c9kO4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I don’t think auto boxing happens for a set operation</blockquote></mx-reply>Maybe I’m misunderstanding why it’s a no-op that doesn’t throw an error, then, haha.","m.relates_to":{"m.in_reply_to":{"event_id":"$e16VrR9am_Fc8yyBycEZZMuQVeL5nj05NV3l70c9kO4"}},"msgtype":"m.text"},"ts":1637367988219,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$q2Ws6ZxXqWupzg7W2mHOf1xW68wqj42L2kEaWNbz6Tk"},
{"content":{"body":"it does; see GetValue step 4.a: https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-getvalue","msgtype":"m.text"},"ts":1637368036831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JKuUdAOO92y5ZVJLo0QGCIKaKfhVRzGj07vGggW6STI"},
{"content":{"body":"I’m writing beginner documentation about `obj.prop = val` that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","format":"org.matrix.custom.html","formatted_body":"I’m writing beginner documentation about <code>obj.prop = val</code> that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","msgtype":"m.text"},"ts":1637368097474,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RxA5rF6D5_ObOWuaJ2xqfOZYW9fSySibJ4voVZYVaPk"},
{"content":{"body":"or I guess PutValue 5.a., rather: https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-putvalue","msgtype":"m.text"},"ts":1637368097477,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3YeLG94VI_glEADbu_05aqT_YcDbNgUUCAnGyQTJqvw"},
{"content":{"body":"PutValue is invoked in step 1.e. of the evaluation semantics for assignment: https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-assignment-operators-runtime-semantics-evaluation","msgtype":"m.text"},"ts":1637368124440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P9TWnI_OkJK7956ZfQQFV_snqgtRTmVl5FdVFGbnnTk"},
{"content":{"body":" * I’m writing beginner documentation about `obj.prop = val` that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","format":"org.matrix.custom.html","formatted_body":" * I’m writing beginner documentation about <code>obj.prop = val</code> that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","m.new_content":{"body":"I’m writing beginner documentation about `obj.prop = val` that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","format":"org.matrix.custom.html","formatted_body":"I’m writing beginner documentation about <code>obj.prop = val</code> that mentions this idiosyncrasy and says, “Don’t do this,” but maybe I should just avoid mentioning it at all for now. MDN doesn’t talk about primitives in its tutorial until its “Advanced” level.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RxA5rF6D5_ObOWuaJ2xqfOZYW9fSySibJ4voVZYVaPk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637368142077,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Gs91qPeixmeKOyFz1CPVWU_CCL1UfpP_wzwDU6lgKfc"},
{"content":{"body":"`\"\".prop = 1` // throws\n`Object(\"\").prop = 1` OK","format":"org.matrix.custom.html","formatted_body":"<code>&quot;&quot;.prop = 1</code> // throws<br />\n<code>Object(&quot;&quot;).prop = 1</code> OK","msgtype":"m.text"},"ts":1637368146152,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0NDrpmG2VjNj1KZ5M1ZMfomJpnV4IWf3ZZIv778AWXM"},
{"content":{"body":"Ashley Claymore: only in strict mode!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: only in strict mode!","msgtype":"m.text"},"ts":1637368161673,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TiFSZBRHFzyy4Z6uimyRbp6tzQl6LdVyDr_JdyMBm14"},
{"content":{"body":"jschoi: I would encourage telling beginners to only ever write or think about strict mode code, and to avoid telling them things which are only relevant to sloppy mode","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I would encourage telling beginners to only ever write or think about strict mode code, and to avoid telling them things which are only relevant to sloppy mode","msgtype":"m.text"},"ts":1637368222362,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dq_59_ioq5aGT-3jlrqJi4PmJLAGoBRYfmlxgds6WN4"},
{"content":{"body":"Right, if set returns false it only throws in strict.","msgtype":"m.text"},"ts":1637368233741,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cwXVG0t1r79TFInhRtPSkvaKoND4APbL76IKmVohJNg"},
{"content":{"body":"What I mean is you get a different behaviour between auto-box and explicit box ","format":"org.matrix.custom.html","formatted_body":"What I mean is you get a different behaviour between auto-box and explicit box","msgtype":"m.text"},"ts":1637368252722,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_b9MkXg3aRliapf9szEuF9cWxyLyIbTmWu89NhnXbzQ"},
{"content":{"body":"the auto-box acts like it’s non-extensible, but the actual box is extensible ","format":"org.matrix.custom.html","formatted_body":"the auto-box acts like it’s non-extensible, but the actual box is extensible","msgtype":"m.text"},"ts":1637368295533,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5cDC7u2q52rwMt-pz1CAbBeNf1maNy6P6z9bfoJXgq8"},
{"content":{"body":"it's... actually weirder than that","msgtype":"m.text"},"ts":1637368414966,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2Qj_omDkIXHOm5KhjEo19KPR6RwHkZuNCmgzfFOFez0"},
{"content":{"body":"Can ECMA262 have a tagline?","msgtype":"m.text"},"ts":1637368449324,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg"},
{"content":{"body":"`'use strict'; Object.defineProperty(Number.prototype, 'x', { set: () => { console.log(this) } }); (3).x = 2; // works!`","format":"org.matrix.custom.html","formatted_body":"<code>'use strict'; Object.defineProperty(Number.prototype, 'x', { set: () =&gt; { console.log(this) } }); (3).x = 2; // works!</code>","msgtype":"m.text"},"ts":1637368521614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LL-OxCx7vKsIbjxnQkvnWLdgBvA2ebTouKTf-aTM-k4"},
{"content":{"body":"it's not that the auto-box acts like it's non-extensible, it's that in strict mode the [[Set]] sees the target as the primitive, rather than as the box, which is observable with setters","msgtype":"m.text"},"ts":1637368585263,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$69Ly5dEbAWsH3iunL3paXIjtRwzMlvbLoXhQak8jN2I"},
{"content":{"body":"In sloppy mode `this` gets converted to object, so `PutValue` operates on the boxed version, and ToObject simply returns the already boxed value\nIn strict mode, the value stays a primitive, ToObject boxes it, so `set` is given the primitive as receiver, which it checks, and throws","format":"org.matrix.custom.html","formatted_body":"In sloppy mode <code>this</code> gets converted to object, so <code>PutValue</code> operates on the boxed version, and ToObject simply returns the already boxed value<br>In strict mode, the value stays a primitive, ToObject boxes it, so <code>set</code> is given the primitive as receiver, which it checks, and throws","msgtype":"m.text"},"ts":1637368596720,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WvT9mltJ-TZ330dWGLpR4MMd61smmEf8muU5XcjHoPk"},
{"content":{"body":"> <@jugglinmike:matrix.org> Can ECMA262 have a tagline?\n\n“The ubiquitous language.” ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">@jugglinmike:matrix.org</a><br>Can ECMA262 have a tagline?</blockquote></mx-reply>“The ubiquitous language.”","m.relates_to":{"m.in_reply_to":{"event_id":"$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg"}},"msgtype":"m.text"},"ts":1637368620403,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eMrFOmbEJYmUtia3jlDuGk2H4tSVqhVSpFH4BIsVBRo"},
{"content":{"body":"`Reflect.set(Object(3), 'x', 2, 3)` vs `tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)`","format":"org.matrix.custom.html","formatted_body":"<code>Reflect.set(Object(3), 'x', 2, 3)</code> vs <code>tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)</code>","msgtype":"m.text"},"ts":1637368663948,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-RRKpColf1N2JHByEkOzh4vuGGZbcY8tZd7yradA9YU"},
{"content":{"body":" * `Reflect.set(Object(3), 'x', 2, 3)` vs `tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)`","format":"org.matrix.custom.html","formatted_body":" * <code>Reflect.set(Object(3), 'x', 2, 3)</code> vs <code>tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)</code>","m.new_content":{"body":"`Reflect.set(Object(3), 'x', 2, 3)` vs `tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)`","format":"org.matrix.custom.html","formatted_body":"<code>Reflect.set(Object(3), 'x', 2, 3)</code> vs <code>tmp = Object(3); Reflect.set(tmp, 'x', 2, tmp)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$-RRKpColf1N2JHByEkOzh4vuGGZbcY8tZd7yradA9YU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637368727171,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Co5JhWprKmahv-sd1anYBou04AOzhSJD_4tLMEkA8Z4"},
{"content":{"body":" * In strict mode `this` gets converted to object, so `PutValue` operates on the boxed version, and ToObject simply returns the already boxed value\nIn sloppy mode, the value stays a primitive, ToObject boxes it, so `set` is given the primitive as receiver, which it checks, and throws","format":"org.matrix.custom.html","formatted_body":" * In strict mode <code>this</code> gets converted to object, so <code>PutValue</code> operates on the boxed version, and ToObject simply returns the already boxed value<br>In sloppy mode, the value stays a primitive, ToObject boxes it, so <code>set</code> is given the primitive as receiver, which it checks, and throws","m.new_content":{"body":"In strict mode `this` gets converted to object, so `PutValue` operates on the boxed version, and ToObject simply returns the already boxed value\nIn sloppy mode, the value stays a primitive, ToObject boxes it, so `set` is given the primitive as receiver, which it checks, and throws","format":"org.matrix.custom.html","formatted_body":"In strict mode <code>this</code> gets converted to object, so <code>PutValue</code> operates on the boxed version, and ToObject simply returns the already boxed value<br>In sloppy mode, the value stays a primitive, ToObject boxes it, so <code>set</code> is given the primitive as receiver, which it checks, and throws","msgtype":"m.text"},"m.relates_to":{"event_id":"$WvT9mltJ-TZ330dWGLpR4MMd61smmEf8muU5XcjHoPk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637368752784,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nelJoJBW1I_u1pGFwloGHnOyfgVTk4UnGZ7dZgJcD-A"},
{"content":{"body":"Thanks, nice explanation!","msgtype":"m.text"},"ts":1637368766034,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$fF1-z6dlPJngD9h62Hk9C130FjuN_a1l56IBpbDTFsw"},
{"content":{"body":" * In sloppy mode `this` gets converted to object, so `PutValue` operates on the boxed version, and ToObject simply returns the already boxed value\nIn strict mode, the value stays a primitive, ToObject boxes it, so `set` is given the primitive as receiver, which it checks, and throws","format":"org.matrix.custom.html","formatted_body":" * In sloppy mode <code>this</code> gets converted to object, so <code>PutValue</code> operates on the boxed version, and ToObject simply returns the already boxed value<br>In strict mode, the value stays a primitive, ToObject boxes it, so <code>set</code> is given the primitive as receiver, which it checks, and throws","m.new_content":{"body":"In sloppy mode `this` gets converted to object, so `PutValue` operates on the boxed version, and ToObject simply returns the already boxed value\nIn strict mode, the value stays a primitive, ToObject boxes it, so `set` is given the primitive as receiver, which it checks, and throws","format":"org.matrix.custom.html","formatted_body":"In sloppy mode <code>this</code> gets converted to object, so <code>PutValue</code> operates on the boxed version, and ToObject simply returns the already boxed value<br>In strict mode, the value stays a primitive, ToObject boxes it, so <code>set</code> is given the primitive as receiver, which it checks, and throws","msgtype":"m.text"},"m.relates_to":{"event_id":"$WvT9mltJ-TZ330dWGLpR4MMd61smmEf8muU5XcjHoPk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637368792994,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wAutIa1xkr9esycDlR87oiukQ3BMHB2_IpzaSr5lFeQ"},
{"content":{"body":"I was very confused the other day where the different throwing happened in strict mode, so I had just looked it up","msgtype":"m.text"},"ts":1637368852090,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FZnBIKL2bWnVf7MbAuUrj8pxlHXweVOTrivIhPoZGl8"},
{"content":{"body":"> <@jugglinmike:matrix.org> Can ECMA262 have a tagline?\n\n\"I Can't Believe It's Not JavaScript\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">@jugglinmike:matrix.org</a><br>Can ECMA262 have a tagline?</blockquote></mx-reply>&quot;I Can't Believe It's Not JavaScript&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg"}},"msgtype":"m.text"},"ts":1637369374043,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qnIqX94-os4Dhon_W3dqSZDKiv0igeyBIuVx09lE-nQ"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1637369420996,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$HL5KxPVIrL8acclt8h8Lia7wo5T_yEhv2WWAnzgZ388"},
{"content":{"body":"I was thinking of bakkot 's comment, \"it's... actually weirder than that\", but these are good, too","format":"org.matrix.custom.html","formatted_body":"I was thinking of <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> 's comment, &quot;it's... actually weirder than that&quot;, but these are good, too","msgtype":"m.text"},"ts":1637369461690,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$0CnKoZ0JYkfbj3BGs8X7evvKj6p5HPv2Q1wOzHPqvv8"},
{"content":{"body":"relatedly my favorite margarine tagline remains \"Memories of Butter\", but \"Memories of JavaScript\" doesn't work as well here","msgtype":"m.text"},"ts":1637369509106,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TEUpAAjsCrx7z41dST6MeTJEKXT5YOMcZPr6IpZ13-k"},
{"content":{"body":"\"Memories of Restraint\"","msgtype":"m.text"},"ts":1637369692067,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$BiWJmdGLjGNgnNm02VSGfjqR_SPciXOW6XGxT9Kr7eo"},
{"content":{"body":"dang","msgtype":"m.text"},"ts":1637369779980,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$X9XSs__nzFimnHRaT5RCGc1VQFt7LRdj02wDKLKe3oI"},
{"content":{"body":"> <@jschoi:matrix.org> sideshowbarker: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the `x.p = 2` in `x = 3; x.p = 2` doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The `3` gets autoboxed into a Number object that then gets discarded.”\n\nI think MDN does not, yet","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">sideshowbarker</a>: Does MDN document the autoboxing of primitives anywhere? I’m writing up beginner documentation that mentions that the <code>x.p = 2</code> in <code>x = 3; x.p = 2</code> doesn’t actually assign anything, and I’d like to be able to link to somewhere that explains, “The <code>3</code> gets autoboxed into a Number object that then gets discarded.”</blockquote></mx-reply>I think MDN does not, yet","m.relates_to":{"m.in_reply_to":{"event_id":"$1xy1mqbb0ESsqtP3o7vuMNpBjQe_ImZMmyzOZpGgunY"}},"msgtype":"m.text"},"ts":1637369913063,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$s4jMj7ftzgVZMVqBWsDR5pCVZFwSuNARCvlZrOaV0Z8"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> I think MDN does not, yet\n\nThanks. Maybe we can work on that later. I’m about to put in a big pull request about assignment right now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$s4jMj7ftzgVZMVqBWsDR5pCVZFwSuNARCvlZrOaV0Z8?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br>I think MDN does not, yet</blockquote></mx-reply>Thanks. Maybe we can work on that later. I’m about to put in a big pull request about assignment right now.","m.relates_to":{"m.in_reply_to":{"event_id":"$s4jMj7ftzgVZMVqBWsDR5pCVZFwSuNARCvlZrOaV0Z8"}},"msgtype":"m.text"},"ts":1637369970840,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1nbpWaMfJI0zCA2jPxnZInOoisP7oIHnlxI8wSC0fiA"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> I think MDN does not, yet\n\n * Thanks. Maybe we can work on that later. I’m about to put in a big pull request on the tutorial section on assignment right now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$s4jMj7ftzgVZMVqBWsDR5pCVZFwSuNARCvlZrOaV0Z8?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br>I think MDN does not, yet</blockquote></mx-reply> * Thanks. Maybe we can work on that later. I’m about to put in a big pull request on the tutorial section on assignment right now.","m.new_content":{"body":"Thanks. Maybe we can work on that later. I’m about to put in a big pull request on the tutorial section on assignment right now.","format":"org.matrix.custom.html","formatted_body":"Thanks. Maybe we can work on that later. I’m about to put in a big pull request on the tutorial section on assignment right now.","msgtype":"m.text"},"m.relates_to":{"event_id":"$1nbpWaMfJI0zCA2jPxnZInOoisP7oIHnlxI8wSC0fiA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370017631,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3JhQ97iDkDQFZL5iFBV-7WNAESOqrreJJeIiccp2700"},
{"content":{"body":"https://github.com/mdn/content/pull/10648\n","msgtype":"m.text"},"ts":1637370085567,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FXHEaH1V3wq3bJJud24hbzyh-z_SAYJhoZliVTNjsGE"},
{"content":{"body":"Some of you here might remember a person (and their probable sock puppet) persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, on the pipe-operator repository and also MDN’s repository…Hopefully this will prevent further confusion for any coming newcomers.","msgtype":"m.text"},"ts":1637370085968,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EsA92CHocG5Nmr4xVT4pJmDH3-ajp0cexAglo1hm-Gw"},
{"content":{"body":" * Some of you here might remember a person making a problem about “evaluation order” in JavaScript a couple of months ago in relation to the pipe operator…Hopefully this will prevent further confusion for any coming newcomers.","m.new_content":{"body":"Some of you here might remember a person making a problem about “evaluation order” in JavaScript a couple of months ago in relation to the pipe operator…Hopefully this will prevent further confusion for any coming newcomers.","msgtype":"m.text"},"m.relates_to":{"event_id":"$EsA92CHocG5Nmr4xVT4pJmDH3-ajp0cexAglo1hm-Gw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370089018,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0uWD3_oU6gJ45HsvNin_jil7DsQTXNvezB8zZefYJ6I"},
{"content":{"body":" * Some of you here might remember a person persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, in relation to the pipe operator…Hopefully this will prevent further confusion for any coming newcomers.","m.new_content":{"body":"Some of you here might remember a person persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, in relation to the pipe operator…Hopefully this will prevent further confusion for any coming newcomers.","msgtype":"m.text"},"m.relates_to":{"event_id":"$EsA92CHocG5Nmr4xVT4pJmDH3-ajp0cexAglo1hm-Gw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370109389,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2D8pDyMowr-u91J4SDhtH1aQOaIVOyxEgHwK7vdpuqU"},
{"content":{"body":"(I was inspired by devsnek’s changes in response to that in mdn/content#9243.)","format":"org.matrix.custom.html","formatted_body":"(I was inspired by <a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>’s changes in response to that in mdn/content#9243.)","msgtype":"m.text"},"ts":1637370129698,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5TBYE0EmNZuVEX3i6FWfB4bLxsAa4wnoBTX7qC6yFhU"},
{"content":{"body":" * Some of you here might remember a person persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, on the pipe-operator repository and also MDN’s repository…Hopefully this will prevent further confusion for any coming newcomers.","m.new_content":{"body":"Some of you here might remember a person persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, on the pipe-operator repository and also MDN’s repository…Hopefully this will prevent further confusion for any coming newcomers.","msgtype":"m.text"},"m.relates_to":{"event_id":"$EsA92CHocG5Nmr4xVT4pJmDH3-ajp0cexAglo1hm-Gw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370159280,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NHSu_yXq_l5v6vy1sEKiY4OUo4NQ3GFswySZJtAMlEU"},
{"content":{"body":" * Some of you here might remember a person (and their probable sock puppet) persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, on the pipe-operator repository and also MDN’s repository…Hopefully this will prevent further confusion for any coming newcomers.","m.new_content":{"body":"Some of you here might remember a person (and their probable sock puppet) persistently raising somewhat confused points about “evaluation order” in JavaScript a couple of months ago, on the pipe-operator repository and also MDN’s repository…Hopefully this will prevent further confusion for any coming newcomers.","msgtype":"m.text"},"m.relates_to":{"event_id":"$EsA92CHocG5Nmr4xVT4pJmDH3-ajp0cexAglo1hm-Gw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370217763,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wjrV_zv-W_UE4ZNokI10qXUTMCL5IpMBXwlwudvFmyg"},
{"content":{"body":" * (I was inspired by devsnek’s changes in response to that in mdn/content#9243.)","format":"org.matrix.custom.html","formatted_body":" * (I was inspired by <a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>’s changes in response to that in mdn/content#9243.)","m.new_content":{"body":"(I was inspired by devsnek’s changes in response to that in mdn/content#9243.)","format":"org.matrix.custom.html","formatted_body":"(I was inspired by <a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>’s changes in response to that in mdn/content#9243.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$5TBYE0EmNZuVEX3i6FWfB4bLxsAa4wnoBTX7qC6yFhU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637370246955,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YMEsCjaDX043VSMH4FWBC52SXF2ceSMtk1sjSRQ9yrw"},
{"content":{"body":"> <@jugglinmike:matrix.org> Can ECMA262 have a tagline?\n\n\"your mistakes will outlive you\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jugglinmike:matrix.org\">@jugglinmike:matrix.org</a><br>Can ECMA262 have a tagline?</blockquote></mx-reply>&quot;your mistakes will outlive you&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$vnHMv1xrw2_V28bECMm6px9wsYZ-rUXJPMn9D7y_UTg"}},"msgtype":"m.text"},"ts":1637370556818,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$l8vSYwe892bF8Vz223B12a7QCbYtUFeGqf7Bpc2lD0A"},
{"content":{"body":"Oooh, so somber","msgtype":"m.text"},"ts":1637370872723,"senderName":"jugglinmike","senderId":"@jugglinmike:matrix.org","id":"$jugdcSmPWsUiYqVs78tClh2o9vOxmsxTdICXqS7kwIU"},
{"content":{"body":"yikes","msgtype":"m.text"},"ts":1637373000178,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$gCU2sDqlfkqPwgYhoNoWT8JQdvl646lshGkBGPqoF2E"},
{"content":{"body":"> <@jschoi:matrix.org> I wouldn’t envy anyone given the task to write a complete formal specification for TypeScript, even if it’s all defined in terms of transforms to ECMAScript.\n\nTypeScript used to had a specification in 1.x age but they have abandoned it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$h5bR0AmQnAQljhNcg0gH-h0dTnCihFiVUjl4ibmxN-U?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I wouldn’t envy anyone given the task to write a complete formal specification for TypeScript, even if it’s all defined in terms of transforms to ECMAScript.</blockquote></mx-reply>TypeScript used to had a specification in 1.x age but they have abandoned it.","m.relates_to":{"m.in_reply_to":{"event_id":"$h5bR0AmQnAQljhNcg0gH-h0dTnCihFiVUjl4ibmxN-U"}},"msgtype":"m.text"},"ts":1637405310672,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$42aOK3sqLFveu9xD6IMI5mO0jzoNPleEzvxWerfPWkU"},
{"content":{"body":"if we just removed isConcatSpreadable would anyone notice","msgtype":"m.text"},"ts":1637418331678,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ou8xzddhV5XEkNCggXpHR7YrmkNMWSo2EdtVL0jwIN0"},
{"content":{"body":"Is it possible/allowed for an object to be the global object of two different realms? The line in the spec that would appear to answer this isn't entirely clear.","msgtype":"m.text"},"ts":1637422882043,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$WNaJnnJzy7vve6b5KbyFs9d2-JTF4dD9VRm0LMYc0YE"},
{"content":{"body":"There's the question of which intrinsics (i.e., from what realm) its properties would point to.","msgtype":"m.text"},"ts":1637423373813,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$neJZtTe0Xd5_qkH4CusSQnr-LRdWbd2gS336a0bMrHA"},
{"content":{"body":"> <@jschoi:matrix.org> https://github.com/mdn/content/pull/10648\n\nNice work — merged","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$FXHEaH1V3wq3bJJud24hbzyh-z_SAYJhoZliVTNjsGE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>https://github.com/mdn/content/pull/10648<br/></blockquote></mx-reply>Nice work — merged","m.relates_to":{"m.in_reply_to":{"event_id":"$FXHEaH1V3wq3bJJud24hbzyh-z_SAYJhoZliVTNjsGE"}},"msgtype":"m.text"},"ts":1637423382977,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$n0_eaSlnd_e2ziJJcxgGZzkyEWKXedAC4lXI5FVf8sc"},
{"content":{"body":"And it's unclear what effect SetDefaultGlobalBindings would have, if any. (It would depend on how the object's  [[DefineOwnProperty]] method is defined.)","msgtype":"m.text"},"ts":1637423580975,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$n7VBR6u0a-8SB0iQpRoyRaAUMCWT37TfCAOjvq7FhiU"},
{"content":{"body":"It seems like the spec didn't anticipate the possibility, but hasn't actually disallowed it.","msgtype":"m.text"},"ts":1637423643403,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$lqHbQcUXW_TNnTrQSEEI9MU30eMAWWjYaV0d6yzxw1U"},
{"content":{"body":"E.g., I don't think there's an Assert that would fail.","msgtype":"m.text"},"ts":1637424031165,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$3JhYodt9iEiBbyEOgGpPIZg13ybgQPfnfLJhvcr0yjY"},
{"content":{"body":"So each realm would have its own set of intrinsics, but in at least one, the global object's properties wouldn't point to the realm's well-known intrinsics. That'd be pretty weird, right?","msgtype":"m.text"},"ts":1637426916383,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$rqJrtQKOrhHuv-opPPkk0RGmYbk-0f2iIWatZu_8H7w"},
{"content":{"body":"Right, but I believe nothing prevents a host or first run code to modify the global in a similar way. It wouldn't be the same object, but all the properties could be copied from another realm.","msgtype":"m.text"},"ts":1637427073494,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-brs6_wuMyV_hPc4TIJYLacpwdICORU193bHhTY_088"},
{"content":{"body":"Jest actually has a bad problem of copying some of the intrinsics from the incubator realm to the test realms it creates, which causes a ton of issues.","msgtype":"m.text"},"ts":1637427174259,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GMVblVibqx1y876nxvHmZHcTOzS7gohenfWnAxSuzz0"},
{"content":{"body":"SetDefaultGlobalBindings is certainly *trying* to make a realm's global object's properties point to the realm's intrinsics. You're saying it's allowed for a host to 'get around' that?","format":"org.matrix.custom.html","formatted_body":"SetDefaultGlobalBindings is certainly <em>trying</em> to make a realm's global object's properties point to the realm's intrinsics. You're saying it's allowed for a host to 'get around' that?","msgtype":"m.text"},"ts":1637427424789,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$nNHBU9andNVhfXvaVzhLt1YhO-aL-h1yxIA-GXjj4Vk"},
{"content":{"body":"(E.g., by making an exotic global object with a [[DefineOwnProperty]] that spurns SetDefaultGlobalBindings attempts.)","msgtype":"m.text"},"ts":1637427495410,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$REgON1lfdP2QmyeI3G6JpQNQy0atnjrXB2E_7vASk5w"},
{"content":{"body":"I'm saying since the host controls the global object, the only thing we can do is add new constraints on what a host is allowed to do with the global object.","msgtype":"m.text"},"ts":1637427630785,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e5TAEq4ZOkD8ZgDnRs6eMXCwe1ggf6l7md9FJXrlf18"},
{"content":{"body":"There are other cases of constraints we'd like to add, such as the host cannot add any non configurable properties.","msgtype":"m.text"},"ts":1637427738561,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$AwectEMsCNgJJilo399SCoN_OTiaj-1pPr0I8AIuDTM"},
{"content":{"body":"In that case, do you think we should add a constraint that the host can't use an object as the global object of multiple realms?","msgtype":"m.text"},"ts":1637427834986,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Nv3KPAKTEaBRSSWKvNSLnf5rRk7ttitw-Ws1ivbfoRY"},
{"content":{"body":"Possibly. I haven't really thought about it. Maybe it could say something about what the global object's exotic operations are allowed to do, then we can add assertions in the setup phase","msgtype":"m.text"},"ts":1637428166726,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1tleIIg7RxHiv1QrkwpdAaq4b2vQq7g0TkMUcleiJgc"},
{"content":{"body":"Now I'm wondering if a [[DefineOwnProperty]] that thwarts SetDefaultGlobalBindings could satisfy the object invariants.","msgtype":"m.text"},"ts":1637428258206,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Y9NJA0xC6xUQIytd4mkXx4wPpHpUvKFXBNX3_7KoQoA"},
{"content":{"body":" * Now I'm wondering if a [[DefineOwnProperty]] that thwarts SetDefaultGlobalBindings could satisfy the object invariants.","m.new_content":{"body":"Now I'm wondering if a [[DefineOwnProperty]] that thwarts SetDefaultGlobalBindings could satisfy the object invariants.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Y9NJA0xC6xUQIytd4mkXx4wPpHpUvKFXBNX3_7KoQoA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637428271978,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$sWe6CT5rq0Xf3hvZvm4nW1oM5XXY6wRr5TLEJwZqAmY"}
]