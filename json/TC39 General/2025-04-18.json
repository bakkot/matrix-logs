[
{"content":{"body":"Regarding https://tc39.es/ecma262/#sec-typedarray-create-same-type there's a marking for user-code on the second step\n\n> 2. Let result be ? TypedArrayCreateFromConstructor(constructor, argumentList).\n\nThe constructor is chosen from the intrinsics list, while argumentList comes as a parameter.\n\nIf I'm not badly mistaken, this could call user code only if argumentList contained a user-provided iterable value, but at least all of the in-spec call sites always pass in `<< F(len) >>`. Would it thus be correct to change those call sites to not have UC marking on them, since we know statically that they'll enter the 6.c Else branch of TypedArray(...args) with a number that will not call into JavaScript from `ToIndex(firstArgument)`, thus just calling to `AllocateTypedArray` where the only UC would happen from getting `constructor.prototype` which is likewise statically knowable to be the `%TypedArray%.prototype` as that's an unconfigurable, unwritable property.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding https://tc39.es/ecma262/#sec-typedarray-create-same-type there's a marking for user-code on the second step</p>\n<blockquote>\n<ol start=\"2\">\n<li>Let result be ? TypedArrayCreateFromConstructor(constructor, argumentList).</li>\n</ol>\n</blockquote>\n<p>The constructor is chosen from the intrinsics list, while argumentList comes as a parameter.</p>\n<p>If I'm not badly mistaken, this could call user code only if argumentList contained a user-provided iterable value, but at least all of the in-spec call sites always pass in <code>&lt;&lt; F(len) &gt;&gt;</code>. Would it thus be correct to change those call sites to not have UC marking on them, since we know statically that they'll enter the 6.c Else branch of TypedArray(...args) with a number that will not call into JavaScript from <code>ToIndex(firstArgument)</code>, thus just calling to <code>AllocateTypedArray</code> where the only UC would happen from getting <code>constructor.prototype</code> which is likewise statically knowable to be the <code>%TypedArray%.prototype</code> as that's an unconfigurable, unwritable property.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744980892616,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$U9kIEYc9zYlg0Lrlsqe_bB15acH58F5TG_Oaz8GK3Lo"},
{"content":{"body":"Aapo Alasuutari: as long as it's specified to take a list of ES language values and there's no asserts about only taking numbers, we should leave the UC annotation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aapo.alasuutari:matrix.org\">Aapo Alasuutari</a>: as long as it's specified to take a list of ES language values and there's no asserts about only taking numbers, we should leave the UC annotation","m.mentions":{"user_ids":["@aapo.alasuutari:matrix.org"]},"msgtype":"m.text"},"ts":1744986419640,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sZL7WVLdixTaJ-J0MUVe3tLoGG-4_6baahiN6jOkig0"},
{"content":{"body":"but we could reasonably change it to take a length instead of a list of ES language values and then drop the annotation","m.mentions":{},"msgtype":"m.text"},"ts":1744986439595,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$75fLuToLFyEip1Cl5POrbLvsVB5W1xyqj1Ng-uzZqvU"}
]