[
{"content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(O, value).","msgtype":"m.text"},"ts":1633031668774,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA"},
{"content":{"body":" * Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value).","format":"org.matrix.custom.html","formatted_body":" * <p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value).</p>\n","m.new_content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value).","format":"org.matrix.custom.html","formatted_body":"<p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value).</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031677133,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Jiu17pVT4isUAP89WsO2V8qWKtez5WXG2ss1s7U-Otg"},
{"content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?","msgtype":"m.text"},"ts":1633031734930,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U"},
{"content":{"body":" * (Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?)","m.new_content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031736993,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Xcn24uqm4z8BW4qRbyBj-GLs0XHBdMK3a11qB-huY44"},
{"content":{"body":" * Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value) (https://tc39.es/ecma262/#sec-array.prototype.values).","format":"org.matrix.custom.html","formatted_body":" * <p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value) (https://tc39.es/ecma262/#sec-array.prototype.values).</p>\n","m.new_content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value) (https://tc39.es/ecma262/#sec-array.prototype.values).","format":"org.matrix.custom.html","formatted_body":"<p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value) (https://tc39.es/ecma262/#sec-array.prototype.values).</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031773798,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qn2FDjKQdw7F22P2liGuOz4ycmVMYyKLLxX2hWzKlCs"},
{"content":{"body":" * (Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but the former returns an iterator and the latter requires an iterator record. Surely there’s a way to do this without manually creating a record, right?)","m.new_content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but the former returns an iterator and the latter requires an iterator record. Surely there’s a way to do this without manually creating a record, right?)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031792286,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$klnVCTaxjQg9DrbMt_70m-kAkkS7VffBlwrl-Rz17Hs"},
{"content":{"body":"> How is it that %Array.prototype.values% returns an iterator record?\n\nIt doesn't; it returns an actual iterator (i.e. an object with a `.next` method). Maybe you have this question backwards?\n\n(Iterator Records, like all records, are never exposed to user code.)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n","msgtype":"m.text"},"ts":1633031957821,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ"},
{"content":{"body":"> Surely there’s a way to do this without manually creating a record, right?\n\nNot that I'm aware of. The normal flow is to call `GetIterator`, which does the work for you. But manually making the record should just be a one-liner, so I don't think it's worth abstracting it out.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Surely there’s a way to do this without manually creating a record, right?</p>\n</blockquote>\n<p>Not that I'm aware of. The normal flow is to call <code>GetIterator</code>, which does the work for you. But manually making the record should just be a one-liner, so I don't think it's worth abstracting it out.</p>\n","msgtype":"m.text"},"ts":1633032147343,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hNL1CvZ-4lhAVnNRn_WEUxB0TwaAdXZDUzLGTas8a1A"},
{"content":{"body":"(just `Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.`, I think)","format":"org.matrix.custom.html","formatted_body":"(just <code>Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.</code>, I think)","msgtype":"m.text"},"ts":1633032212105,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0"},
{"content":{"body":"> <@bakkot:matrix.org> (just `Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.`, I think)\n\nGot it, thanks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(just <code>Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.</code>, I think)</blockquote></mx-reply>Got it, thanks.","m.relates_to":{"m.in_reply_to":{"event_id":"$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0"}},"msgtype":"m.text"},"ts":1633032815812,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jjAyLcrEfi_CbVNM5AJRkGDaFMf-4DDtnE3Q4TmW8Iw"},
{"content":{"body":"> <@bakkot:matrix.org> > How is it that %Array.prototype.values% returns an iterator record?\n> \n> It doesn't; it returns an actual iterator (i.e. an object with a `.next` method). Maybe you have this question backwards?\n> \n> (Iterator Records, like all records, are never exposed to user code.)\n\nI was confused because that’s what zloirock had said it does.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n</blockquote></mx-reply>I was confused because that’s what zloirock had said it does.","m.relates_to":{"m.in_reply_to":{"event_id":"$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ"}},"msgtype":"m.text"},"ts":1633032869510,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AUjTWfuz0WOknFiCbdEjFcAn9Xg0j9gFiJVYlSJxVp8"},
{"content":{"body":" * I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n</blockquote></mx-reply> * I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","m.new_content":{"body":"I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","format":"org.matrix.custom.html","formatted_body":"I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","msgtype":"m.text"},"m.relates_to":{"event_id":"$AUjTWfuz0WOknFiCbdEjFcAn9Xg0j9gFiJVYlSJxVp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633032889440,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Ai5DtkTENsKuEBP7cUe3TwOZNJyyD7iJ31mvdQ5S-pI"},
{"content":{"body":"Oh, wait, he was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That *should* work…","format":"org.matrix.custom.html","formatted_body":"Oh, wait, he was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","msgtype":"m.text"},"ts":1633032934600,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zl1gY819TBh7WpKMx7fXDmF0xRwIVDoO7_YnQXBKABc"},
{"content":{"body":" * Oh, wait, I had misunderstood him. He was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That _should_ work…","format":"org.matrix.custom.html","formatted_body":" * Oh, wait, I had misunderstood him. He was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","m.new_content":{"body":"Oh, wait, I had misunderstood him. He was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That _should_ work…","format":"org.matrix.custom.html","formatted_body":"Oh, wait, I had misunderstood him. He was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","msgtype":"m.text"},"m.relates_to":{"event_id":"$zl1gY819TBh7WpKMx7fXDmF0xRwIVDoO7_YnQXBKABc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633032943253,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gu9shTxwdDNVUxofeJhUKVIMKvUV1iX6fQ3Gq33FtCA"},
{"content":{"body":"jschoi: In your bind-this, you have some text about the operator \"creating bound functions\" like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always `randomObj->fakeMethod(x)` (equivalent to `fakeMethod.call(randomObj, x)`), never `randomObj->fakeMethod` (equivalent to `fakeMethod.bind(randomObj)`). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: In your bind-this, you have some text about the operator &quot;creating bound functions&quot; like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always <code>randomObj-&gt;fakeMethod(x)</code> (equivalent to <code>fakeMethod.call(randomObj, x)</code>), never <code>randomObj-&gt;fakeMethod</code> (equivalent to <code>fakeMethod.bind(randomObj)</code>). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?","msgtype":"m.text"},"ts":1633038525669,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw"},
{"content":{"body":"> <@tabatkins:matrix.org> jschoi: In your bind-this, you have some text about the operator \"creating bound functions\" like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always `randomObj->fakeMethod(x)` (equivalent to `fakeMethod.call(randomObj, x)`), never `randomObj->fakeMethod` (equivalent to `fakeMethod.bind(randomObj)`). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?\n\nThe examples are too limited. `o->fn` is `fn.bind(o)`, \nand `o->fn(a)` is `fn.call(o, a)`, because `fn.call(o, a)` is indistinguishable from `fn.bind(o)(a)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: In your bind-this, you have some text about the operator &quot;creating bound functions&quot; like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always <code>randomObj-&gt;fakeMethod(x)</code> (equivalent to <code>fakeMethod.call(randomObj, x)</code>), never <code>randomObj-&gt;fakeMethod</code> (equivalent to <code>fakeMethod.bind(randomObj)</code>). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?</blockquote></mx-reply>The examples are too limited. <code>o-&gt;fn</code> is <code>fn.bind(o)</code>,<br />\nand <code>o-&gt;fn(a)</code> is <code>fn.call(o, a)</code>, because <code>fn.call(o, a)</code> is indistinguishable from <code>fn.bind(o)(a)</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw"}},"msgtype":"m.text"},"ts":1633039057501,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kru22Ns5WjTzxDIviuvKCLQkB005dllQFJnQQpK6RHY"},
{"content":{"body":"`fakeMethod.call(randomObj, x)` is indistinguishable from `fakeMethod.bind(randomObj)(x)`. ","format":"org.matrix.custom.html","formatted_body":"<code>fakeMethod.call(randomObj, x)</code> is indistinguishable from <code>fakeMethod.bind(randomObj)(x)</code>.","msgtype":"m.text"},"ts":1633039110352,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qeRQHu4NYho5Q0gNUAwYl1JfkOxDwwXF27m2ILlJSjU"},
{"content":{"body":"Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.","format":"org.matrix.custom.html","formatted_body":"Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.","msgtype":"m.text"},"ts":1633039597969,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s"},
{"content":{"body":"Then there's no intermediate object creation when using just `->`","format":"org.matrix.custom.html","formatted_body":"Then there's no intermediate object creation when using just <code>-&gt;</code>","msgtype":"m.text"},"ts":1633039634433,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw"},
{"content":{"body":"> <@tabatkins:matrix.org> Then there's no intermediate object creation when using just `->`\n\nMy current understanding is that no object creation has to occur with `x->o(a)`. It can always be optimizable to a direct call without constructing a bound function. There’s no way for the developer to distinguish between `Function.bind(o)(a)` and `Function.call(o, a)`, so the engine is free to optimize `x->o(a)` to use `call` rather than `bind`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Then there's no intermediate object creation when using just <code>-&gt;</code></blockquote></mx-reply>My current understanding is that no object creation has to occur with <code>x-&gt;o(a)</code>. It can always be optimizable to a direct call without constructing a bound function. There’s no way for the developer to distinguish between <code>Function.bind(o)(a)</code> and <code>Function.call(o, a)</code>, so the engine is free to optimize <code>x-&gt;o(a)</code> to use <code>call</code> rather than <code>bind</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw"}},"msgtype":"m.text"},"ts":1633040023727,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$n-KzDXwr0X9LGvdS9DTlgdkKYzZl9Jjce8LoSHcVRKM"},
{"content":{"body":"> <@tabatkins:matrix.org> Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.\n\nljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.</blockquote></mx-reply><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call.","m.relates_to":{"m.in_reply_to":{"event_id":"$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s"}},"msgtype":"m.text"},"ts":1633040235290,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU"},
{"content":{"body":"> <@tabatkins:matrix.org> Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.\n\n * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.</blockquote></mx-reply> * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040352847,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8E-r2v4iMcAT_tVmIQda_4uX5xmiQ2ECy86qPPLTves"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040367426,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4epkDAjYfaTINKSDFFE-kPiriY4TuD1BpFux78BfW7I"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040438648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wYLQlNv6m8Xlj329LHdWbrBw-tRXToekVNU3lC1_CU4"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct a bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct a bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040521537,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3EuhIJll8ir8DLi6hQkzkSKnT0vaClwqdKNKkvkxfjs"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040532243,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PQia6nPlxZGuYP8BXFg4cZ71jHWUC8jsGON94Tw5Yok"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040552559,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DoMUh0yZqkq-_W_Sj63PARxHatpQ2Hz0nc1q6sJMKRM"},
{"content":{"body":"i am very unoptimistic about the timeline of PFA advancing and would not want to subjugate any other proposal to it at this time.","msgtype":"m.text"},"ts":1633040610729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uLd3eLeHXKRMD13ObH8gQTsxRXC3jBUtymWlm5Ix77o"},
{"content":{"body":"FYI, ljharb: bakkot gave some negative signals towards this-bind `->`, especially if its primary use case is global protection (https://github.com/js-choi/proposal-bind-this/issues/8). \n\nWe might run into some headwinds from the rest of the Committee, too, but we’ll see…I’ll do my best to make its case, though.","format":"org.matrix.custom.html","formatted_body":"<p>FYI, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> gave some negative signals towards this-bind <code>-&gt;</code>, especially if its primary use case is global protection (https://github.com/js-choi/proposal-bind-this/issues/8).</p>\n<p>We might run into some headwinds from the rest of the Committee, too, but we’ll see…I’ll do my best to make its case, though.</p>\n","msgtype":"m.text"},"ts":1633040782695,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tOK-1WQlacrQfNcHSdN4HQekSCzbir-g_fVzSx59dss"},
{"content":{"body":"jschoi: if you present the case as it is in the readme, I do not expect you'll be able to get even stage 1","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: if you present the case as it is in the readme, I do not expect you'll be able to get even stage 1","msgtype":"m.text"},"ts":1633040906869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r7M4-7iKU0DqQElUQxJhWp03d7D4vJDsRLAxjJWWwv4"},
{"content":{"body":"i think stage 1 is basically a certainty - it's something we've discussed many times and will do so again - but obviously we wouldn't want to present in a way that would make stage 2 harder to get","msgtype":"m.text"},"ts":1633041078735,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$61lDywi4Vitikz59xVRLkBELv09v1VbN2xzrFEuS9hg"},
{"content":{"body":"Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":"<p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","msgtype":"m.text"},"ts":1633041080984,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2horJCUphwUtPsZ9pt3LT7-_XekiSlyHFrh5cJUX-ZU"},
{"content":{"body":"specifically: stage 1 is laying out a problem statement. If the problem statement is \"people who want to be defensive against mutation of the global methods find that the standard `uncurryThis` helper is too slow\", I think the committee as a whole - certainly me personally - would not be receptive to that being a problem worth spending more time on","format":"org.matrix.custom.html","formatted_body":"specifically: stage 1 is laying out a problem statement. If the problem statement is &quot;people who want to be defensive against mutation of the global methods find that the standard <code>uncurryThis</code> helper is too slow&quot;, I think the committee as a whole - certainly me personally - would not be receptive to that being a problem worth spending more time on","msgtype":"m.text"},"ts":1633041093931,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1nXP7Iij1Dmlgv-WviS4mhmSES48gJV4RiRajgPUtC0"},
{"content":{"body":" * Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":" * <p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","m.new_content":{"body":"Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":"<p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$2horJCUphwUtPsZ9pt3LT7-_XekiSlyHFrh5cJUX-ZU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041093979,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fO6nvEXlrp4evm72GWFGTrtmfjxf5xMYfuD2jjho48M"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1633041102714,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Zv8Y2UI1LNEM9co0kO4a2VC1227nT7EgmcRvym2Q--4"},
{"content":{"body":"if there is a different problem statement, it's more likely you'd get stage 1","msgtype":"m.text"},"ts":1633041105598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NlEtrbNBf0_u7lhAhYKJVqijwZqmyjAUMCg0IlEv6fE"},
{"content":{"body":"Would “binding and calling with `this` is very common and is worth lubricating with syntax” be more compelling to you?","format":"org.matrix.custom.html","formatted_body":"Would “binding and calling with <code>this</code> is very common and is worth lubricating with syntax” be more compelling to you?","msgtype":"m.text"},"ts":1633041137948,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0Jpnv7TVSOgBlqKjZyHUOa0b47Mej0hv1RAGkqXBq5c"},
{"content":{"body":"much more compelling, yes","msgtype":"m.text"},"ts":1633041151790,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fUTHx6KADbYxKsR8SFMQPJnQIHEyi9-1MurLbhwMdTU"},
{"content":{"body":"I might not agree it's worth new syntax, but that's more of a stage 2 concern","msgtype":"m.text"},"ts":1633041163449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f30YJS3J9jtpCctzKRF0-5Bz2rhbZN1hkE2Mt58ErB4"},
{"content":{"body":"(that is, a concern for getting stage 2, rather than getting stage 1)","msgtype":"m.text"},"ts":1633041194792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$coLW5FmpP8OoA6iUVsbFh-TP0nlcDwX9rg5HbcNLNto"},
{"content":{"body":"Right, okay. So I need to focus less on the security aspect. Thanks for the feedback.\nFiguring out what was compelling enough for the prior bind operator and for Extensions to reach Stage 1…although it’s true that neither of them have reached Stage 2…","msgtype":"m.text"},"ts":1633041207038,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lQ4sPSTENJ2aX96oEGYoyLu3pwXLt-x-KIrug5UZTrM"},
{"content":{"body":"(i.e. I agree with the problem statement of \"it could be easier to bind `.this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":"(i.e. I agree with the problem statement of &quot;it could be easier to bind <code>.this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","msgtype":"m.text"},"ts":1633041266410,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cHfGZwhPv2BbuCz1Am7r89-yXre_psG32bbdF-vAZ6U"},
{"content":{"body":" * (i.e. I agree with the problem statement of \"it could be easier to bind `this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":" * (i.e. I agree with the problem statement of &quot;it could be easier to bind <code>this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","m.new_content":{"body":"(i.e. I agree with the problem statement of \"it could be easier to bind `this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":"(i.e. I agree with the problem statement of &quot;it could be easier to bind <code>this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$cHfGZwhPv2BbuCz1Am7r89-yXre_psG32bbdF-vAZ6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041292139,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4y_TYOw0RsuweN2xEolrzOmALeqbfmbg-JLFMWZ_Dtc"}
]