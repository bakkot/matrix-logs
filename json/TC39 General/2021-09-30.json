[
{"content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(O, value).","msgtype":"m.text"},"ts":1633031668774,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA"},
{"content":{"body":" * Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value).","format":"org.matrix.custom.html","formatted_body":" * <p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value).</p>\n","m.new_content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value).","format":"org.matrix.custom.html","formatted_body":"<p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value).</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031677133,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Jiu17pVT4isUAP89WsO2V8qWKtez5WXG2ss1s7U-Otg"},
{"content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?","msgtype":"m.text"},"ts":1633031734930,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U"},
{"content":{"body":" * (Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?)","m.new_content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but it’s a type mismatch. Surely there’s a way to do this without manually creating a record, right?)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031736993,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Xcn24uqm4z8BW4qRbyBj-GLs0XHBdMK3a11qB-huY44"},
{"content":{"body":" * Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value) (https://tc39.es/ecma262/#sec-array.prototype.values).","format":"org.matrix.custom.html","formatted_body":" * <p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value) (https://tc39.es/ecma262/#sec-array.prototype.values).</p>\n","m.new_content":{"body":"Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?\n\nHow is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(_O_, value) (https://tc39.es/ecma262/#sec-array.prototype.values).","format":"org.matrix.custom.html","formatted_body":"<p>Could someone familiar with the spec explain https://github.com/tc39/proposal-array-from-async/pull/11#discussion_r719681385 ?</p>\n<p>How is it that %Array.prototype.values% returns an iterator record? It just returns CreateArrayIterator(<em>O</em>, value) (https://tc39.es/ecma262/#sec-array.prototype.values).</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$4N9r1JLaIQWDM9LCtQ8UD7ImYGSQi1IGpj-UeQeZzaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031773798,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qn2FDjKQdw7F22P2liGuOz4ycmVMYyKLLxX2hWzKlCs"},
{"content":{"body":" * (Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but the former returns an iterator and the latter requires an iterator record. Surely there’s a way to do this without manually creating a record, right?)","m.new_content":{"body":"(Basically, I’m trying to plug the result of CreateArrayIterator into CreateAsyncFromSyncIterator, but the former returns an iterator and the latter requires an iterator record. Surely there’s a way to do this without manually creating a record, right?)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0OV9lb9QYWsQHMnNFpxF3fskJN0AKrdj0LG5FEwsv6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633031792286,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$klnVCTaxjQg9DrbMt_70m-kAkkS7VffBlwrl-Rz17Hs"},
{"content":{"body":"> How is it that %Array.prototype.values% returns an iterator record?\n\nIt doesn't; it returns an actual iterator (i.e. an object with a `.next` method). Maybe you have this question backwards?\n\n(Iterator Records, like all records, are never exposed to user code.)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n","msgtype":"m.text"},"ts":1633031957821,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ"},
{"content":{"body":"> Surely there’s a way to do this without manually creating a record, right?\n\nNot that I'm aware of. The normal flow is to call `GetIterator`, which does the work for you. But manually making the record should just be a one-liner, so I don't think it's worth abstracting it out.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Surely there’s a way to do this without manually creating a record, right?</p>\n</blockquote>\n<p>Not that I'm aware of. The normal flow is to call <code>GetIterator</code>, which does the work for you. But manually making the record should just be a one-liner, so I don't think it's worth abstracting it out.</p>\n","msgtype":"m.text"},"ts":1633032147343,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hNL1CvZ-4lhAVnNRn_WEUxB0TwaAdXZDUzLGTas8a1A"},
{"content":{"body":"(just `Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.`, I think)","format":"org.matrix.custom.html","formatted_body":"(just <code>Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.</code>, I think)","msgtype":"m.text"},"ts":1633032212105,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0"},
{"content":{"body":"> <@bakkot:matrix.org> (just `Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.`, I think)\n\nGot it, thanks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(just <code>Let _iteratorRecord_ be the Record { [[Iterator]]: _iterator_, [[NextMethod]]: %ArrayIteratorPrototype.next%, [[Done]]: false }.</code>, I think)</blockquote></mx-reply>Got it, thanks.","m.relates_to":{"m.in_reply_to":{"event_id":"$_7ccMbXM-y0lz10VTMLXgdpVxNeYDZVCzzkYxByooQ0"}},"msgtype":"m.text"},"ts":1633032815812,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jjAyLcrEfi_CbVNM5AJRkGDaFMf-4DDtnE3Q4TmW8Iw"},
{"content":{"body":"> <@bakkot:matrix.org> > How is it that %Array.prototype.values% returns an iterator record?\n> \n> It doesn't; it returns an actual iterator (i.e. an object with a `.next` method). Maybe you have this question backwards?\n> \n> (Iterator Records, like all records, are never exposed to user code.)\n\nI was confused because that’s what zloirock had said it does.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n</blockquote></mx-reply>I was confused because that’s what zloirock had said it does.","m.relates_to":{"m.in_reply_to":{"event_id":"$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ"}},"msgtype":"m.text"},"ts":1633032869510,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AUjTWfuz0WOknFiCbdEjFcAn9Xg0j9gFiJVYlSJxVp8"},
{"content":{"body":" * I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ATjCarFH_DECqcyQm-KJOh_2Ioq6NzolVwbwiaTJ5LQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><blockquote>\n<p>How is it that %Array.prototype.values% returns an iterator record?</p>\n</blockquote>\n<p>It doesn't; it returns an actual iterator (i.e. an object with a <code>.next</code> method). Maybe you have this question backwards?</p>\n<p>(Iterator Records, like all records, are never exposed to user code.)</p>\n</blockquote></mx-reply> * I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","m.new_content":{"body":"I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","format":"org.matrix.custom.html","formatted_body":"I was confused because that’s what zloirock had said it does. It’s good to know that it actually doesn’t; I am no longer confused.","msgtype":"m.text"},"m.relates_to":{"event_id":"$AUjTWfuz0WOknFiCbdEjFcAn9Xg0j9gFiJVYlSJxVp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633032889440,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Ai5DtkTENsKuEBP7cUe3TwOZNJyyD7iJ31mvdQ5S-pI"},
{"content":{"body":"Oh, wait, he was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That *should* work…","format":"org.matrix.custom.html","formatted_body":"Oh, wait, he was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","msgtype":"m.text"},"ts":1633032934600,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zl1gY819TBh7WpKMx7fXDmF0xRwIVDoO7_YnQXBKABc"},
{"content":{"body":" * Oh, wait, I had misunderstood him. He was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That _should_ work…","format":"org.matrix.custom.html","formatted_body":" * Oh, wait, I had misunderstood him. He was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","m.new_content":{"body":"Oh, wait, I had misunderstood him. He was suggesting using `%Array.prototype.values%` as the method argument to GetIterator. That _should_ work…","format":"org.matrix.custom.html","formatted_body":"Oh, wait, I had misunderstood him. He was suggesting using <code>%Array.prototype.values%</code> as the method argument to GetIterator. That <em>should</em> work…","msgtype":"m.text"},"m.relates_to":{"event_id":"$zl1gY819TBh7WpKMx7fXDmF0xRwIVDoO7_YnQXBKABc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633032943253,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gu9shTxwdDNVUxofeJhUKVIMKvUV1iX6fQ3Gq33FtCA"},
{"content":{"body":"jschoi: In your bind-this, you have some text about the operator \"creating bound functions\" like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always `randomObj->fakeMethod(x)` (equivalent to `fakeMethod.call(randomObj, x)`), never `randomObj->fakeMethod` (equivalent to `fakeMethod.bind(randomObj)`). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: In your bind-this, you have some text about the operator &quot;creating bound functions&quot; like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always <code>randomObj-&gt;fakeMethod(x)</code> (equivalent to <code>fakeMethod.call(randomObj, x)</code>), never <code>randomObj-&gt;fakeMethod</code> (equivalent to <code>fakeMethod.bind(randomObj)</code>). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?","msgtype":"m.text"},"ts":1633038525669,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw"},
{"content":{"body":"> <@tabatkins:matrix.org> jschoi: In your bind-this, you have some text about the operator \"creating bound functions\" like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always `randomObj->fakeMethod(x)` (equivalent to `fakeMethod.call(randomObj, x)`), never `randomObj->fakeMethod` (equivalent to `fakeMethod.bind(randomObj)`). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?\n\nThe examples are too limited. `o->fn` is `fn.bind(o)`, \nand `o->fn(a)` is `fn.call(o, a)`, because `fn.call(o, a)` is indistinguishable from `fn.bind(o)(a)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: In your bind-this, you have some text about the operator &quot;creating bound functions&quot; like .bind() does, but as far as I can tell it doesn't do this. Every example you have is using it immediately as part of a call expression; always <code>randomObj-&gt;fakeMethod(x)</code> (equivalent to <code>fakeMethod.call(randomObj, x)</code>), never <code>randomObj-&gt;fakeMethod</code> (equivalent to <code>fakeMethod.bind(randomObj)</code>). Are your examples too limited, or did the scope change at some point to be a call operator rather than a bind operator?</blockquote></mx-reply>The examples are too limited. <code>o-&gt;fn</code> is <code>fn.bind(o)</code>,<br />\nand <code>o-&gt;fn(a)</code> is <code>fn.call(o, a)</code>, because <code>fn.call(o, a)</code> is indistinguishable from <code>fn.bind(o)(a)</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$lKUQlmxtSAei1KUrraXhIgIt11rBYnmxptV4Suu-nFw"}},"msgtype":"m.text"},"ts":1633039057501,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kru22Ns5WjTzxDIviuvKCLQkB005dllQFJnQQpK6RHY"},
{"content":{"body":"`fakeMethod.call(randomObj, x)` is indistinguishable from `fakeMethod.bind(randomObj)(x)`. ","format":"org.matrix.custom.html","formatted_body":"<code>fakeMethod.call(randomObj, x)</code> is indistinguishable from <code>fakeMethod.bind(randomObj)(x)</code>.","msgtype":"m.text"},"ts":1633039110352,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qeRQHu4NYho5Q0gNUAwYl1JfkOxDwwXF27m2ILlJSjU"},
{"content":{"body":"Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.","format":"org.matrix.custom.html","formatted_body":"Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.","msgtype":"m.text"},"ts":1633039597969,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s"},
{"content":{"body":"Then there's no intermediate object creation when using just `->`","format":"org.matrix.custom.html","formatted_body":"Then there's no intermediate object creation when using just <code>-&gt;</code>","msgtype":"m.text"},"ts":1633039634433,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw"},
{"content":{"body":"> <@tabatkins:matrix.org> Then there's no intermediate object creation when using just `->`\n\nMy current understanding is that no object creation has to occur with `x->o(a)`. It can always be optimizable to a direct call without constructing a bound function. There’s no way for the developer to distinguish between `Function.bind(o)(a)` and `Function.call(o, a)`, so the engine is free to optimize `x->o(a)` to use `call` rather than `bind`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Then there's no intermediate object creation when using just <code>-&gt;</code></blockquote></mx-reply>My current understanding is that no object creation has to occur with <code>x-&gt;o(a)</code>. It can always be optimizable to a direct call without constructing a bound function. There’s no way for the developer to distinguish between <code>Function.bind(o)(a)</code> and <code>Function.call(o, a)</code>, so the engine is free to optimize <code>x-&gt;o(a)</code> to use <code>call</code> rather than <code>bind</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$jOk0jWydZLOi7NZWrJXOcvDW4Ajm1He3nOvP8RpL6Zw"}},"msgtype":"m.text"},"ts":1633040023727,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$n-KzDXwr0X9LGvdS9DTlgdkKYzZl9Jjce8LoSHcVRKM"},
{"content":{"body":"> <@tabatkins:matrix.org> Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.\n\nljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.</blockquote></mx-reply><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call.","m.relates_to":{"m.in_reply_to":{"event_id":"$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s"}},"msgtype":"m.text"},"ts":1633040235290,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU"},
{"content":{"body":"> <@tabatkins:matrix.org> Do you have thoughts about dropping that case in favor of letting PFA + `->`-as-a-call-operator handle it? `o->fn` would instead be `o->fn~(...)`, which also produces bound functions that record the receiver; the `->` here sets the receiver in time for PFA to record it.\n\n * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$0QrBXr85fJDZWsbUgEGAgApEWlXEyp2AFADMPExXp5s?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Do you have thoughts about dropping that case in favor of letting PFA + <code>-&gt;</code>-as-a-call-operator handle it? <code>o-&gt;fn</code> would instead be <code>o-&gt;fn~(...)</code>, which also produces bound functions that record the receiver; the <code>-&gt;</code> here sets the receiver in time for PFA to record it.</blockquote></mx-reply> * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Optimization, though of course if it isn’t then I would have to reevaluate my approach.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040352847,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8E-r2v4iMcAT_tVmIQda_4uX5xmiQ2ECy86qPPLTves"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™, though of course if it isn’t then I would have to reevaluate my approach.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040367426,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4epkDAjYfaTINKSDFFE-kPiriY4TuD1BpFux78BfW7I"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn()` call. (And `o->fn(a)` need not construct a bound function, because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn()</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function, because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040438648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wYLQlNv6m8Xlj329LHdWbrBw-tRXToekVNU3lC1_CU4"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct a bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct a bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct a bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040521537,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3EuhIJll8ir8DLi6hQkzkSKnT0vaClwqdKNKkvkxfjs"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040532243,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PQia6nPlxZGuYP8BXFg4cZ71jHWUC8jsGON94Tw5Yok"},
{"content":{"body":" * ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","m.new_content":{"body":"ljharb, rbuckton (OOF til Oct-1), and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture `this` if `o->fn~(…)` was given a special case…but that seems more complicated than just making `o->fn` bind and `o->fn(a)` call. (And `o->fn(a)` need not construct an intermediate bound function. It could simply call `fn` on `o` directly—because `fn.bind(o)(a)` is user-indistinguishable from `fn.call(o, a)`. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF til Oct-1)</a>, and I have talked a little about how PFA syntax would interact with this use case. PFA syntax in of itself cannot address the call-this use case. But it’s true that it could capture <code>this</code> if <code>o-&gt;fn~(…)</code> was given a special case…but that seems more complicated than just making <code>o-&gt;fn</code> bind and <code>o-&gt;fn(a)</code> call. (And <code>o-&gt;fn(a)</code> need not construct an intermediate bound function. It could simply call <code>fn</code> on <code>o</code> directly—because <code>fn.bind(o)(a)</code> is user-indistinguishable from <code>fn.call(o, a)</code>. This hopefully would be an Easy Engine Optimization™. If this optimization turns out not to be Easy, then I would have to reevaluate my approach, but I would also be quite surprised.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$LDfvkKNEy6AI5_3qOJlIDra66lkqPKV0Lz2zuM1CkmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633040552559,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DoMUh0yZqkq-_W_Sj63PARxHatpQ2Hz0nc1q6sJMKRM"},
{"content":{"body":"i am very unoptimistic about the timeline of PFA advancing and would not want to subjugate any other proposal to it at this time.","msgtype":"m.text"},"ts":1633040610729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uLd3eLeHXKRMD13ObH8gQTsxRXC3jBUtymWlm5Ix77o"},
{"content":{"body":"FYI, ljharb: bakkot gave some negative signals towards this-bind `->`, especially if its primary use case is global protection (https://github.com/js-choi/proposal-bind-this/issues/8). \n\nWe might run into some headwinds from the rest of the Committee, too, but we’ll see…I’ll do my best to make its case, though.","format":"org.matrix.custom.html","formatted_body":"<p>FYI, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> gave some negative signals towards this-bind <code>-&gt;</code>, especially if its primary use case is global protection (https://github.com/js-choi/proposal-bind-this/issues/8).</p>\n<p>We might run into some headwinds from the rest of the Committee, too, but we’ll see…I’ll do my best to make its case, though.</p>\n","msgtype":"m.text"},"ts":1633040782695,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tOK-1WQlacrQfNcHSdN4HQekSCzbir-g_fVzSx59dss"},
{"content":{"body":"jschoi: if you present the case as it is in the readme, I do not expect you'll be able to get even stage 1","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: if you present the case as it is in the readme, I do not expect you'll be able to get even stage 1","msgtype":"m.text"},"ts":1633040906869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r7M4-7iKU0DqQElUQxJhWp03d7D4vJDsRLAxjJWWwv4"},
{"content":{"body":"i think stage 1 is basically a certainty - it's something we've discussed many times and will do so again - but obviously we wouldn't want to present in a way that would make stage 2 harder to get","msgtype":"m.text"},"ts":1633041078735,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$61lDywi4Vitikz59xVRLkBELv09v1VbN2xzrFEuS9hg"},
{"content":{"body":"Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":"<p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","msgtype":"m.text"},"ts":1633041080984,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2horJCUphwUtPsZ9pt3LT7-_XekiSlyHFrh5cJUX-ZU"},
{"content":{"body":"specifically: stage 1 is laying out a problem statement. If the problem statement is \"people who want to be defensive against mutation of the global methods find that the standard `uncurryThis` helper is too slow\", I think the committee as a whole - certainly me personally - would not be receptive to that being a problem worth spending more time on","format":"org.matrix.custom.html","formatted_body":"specifically: stage 1 is laying out a problem statement. If the problem statement is &quot;people who want to be defensive against mutation of the global methods find that the standard <code>uncurryThis</code> helper is too slow&quot;, I think the committee as a whole - certainly me personally - would not be receptive to that being a problem worth spending more time on","msgtype":"m.text"},"ts":1633041093931,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1nXP7Iij1Dmlgv-WviS4mhmSES48gJV4RiRajgPUtC0"},
{"content":{"body":" * Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":" * <p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","m.new_content":{"body":"Understood. I’m guessing that you’d block Stage 1?\n\nWe might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and HE Shi-Jun’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.","format":"org.matrix.custom.html","formatted_body":"<p>Understood. I’m guessing that you’d block Stage 1?</p>\n<p>We might need more time than to October to build its case, then…though I need to reinvestigate what the differences between this proposal and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>’s Extensions or the prior bind-operator proposal are, since this proposal is meant to replace both of them.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$2horJCUphwUtPsZ9pt3LT7-_XekiSlyHFrh5cJUX-ZU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041093979,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fO6nvEXlrp4evm72GWFGTrtmfjxf5xMYfuD2jjho48M"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1633041102714,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Zv8Y2UI1LNEM9co0kO4a2VC1227nT7EgmcRvym2Q--4"},
{"content":{"body":"if there is a different problem statement, it's more likely you'd get stage 1","msgtype":"m.text"},"ts":1633041105598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NlEtrbNBf0_u7lhAhYKJVqijwZqmyjAUMCg0IlEv6fE"},
{"content":{"body":"Would “binding and calling with `this` is very common and is worth lubricating with syntax” be more compelling to you?","format":"org.matrix.custom.html","formatted_body":"Would “binding and calling with <code>this</code> is very common and is worth lubricating with syntax” be more compelling to you?","msgtype":"m.text"},"ts":1633041137948,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0Jpnv7TVSOgBlqKjZyHUOa0b47Mej0hv1RAGkqXBq5c"},
{"content":{"body":"much more compelling, yes","msgtype":"m.text"},"ts":1633041151790,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fUTHx6KADbYxKsR8SFMQPJnQIHEyi9-1MurLbhwMdTU"},
{"content":{"body":"I might not agree it's worth new syntax, but that's more of a stage 2 concern","msgtype":"m.text"},"ts":1633041163449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f30YJS3J9jtpCctzKRF0-5Bz2rhbZN1hkE2Mt58ErB4"},
{"content":{"body":"(that is, a concern for getting stage 2, rather than getting stage 1)","msgtype":"m.text"},"ts":1633041194792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$coLW5FmpP8OoA6iUVsbFh-TP0nlcDwX9rg5HbcNLNto"},
{"content":{"body":"Right, okay. So I need to focus less on the security aspect. Thanks for the feedback.\nFiguring out what was compelling enough for the prior bind operator and for Extensions to reach Stage 1…although it’s true that neither of them have reached Stage 2…","msgtype":"m.text"},"ts":1633041207038,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lQ4sPSTENJ2aX96oEGYoyLu3pwXLt-x-KIrug5UZTrM"},
{"content":{"body":"(i.e. I agree with the problem statement of \"it could be easier to bind `.this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":"(i.e. I agree with the problem statement of &quot;it could be easier to bind <code>.this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","msgtype":"m.text"},"ts":1633041266410,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cHfGZwhPv2BbuCz1Am7r89-yXre_psG32bbdF-vAZ6U"},
{"content":{"body":" * (i.e. I agree with the problem statement of \"it could be easier to bind `this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":" * (i.e. I agree with the problem statement of &quot;it could be easier to bind <code>this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","m.new_content":{"body":"(i.e. I agree with the problem statement of \"it could be easier to bind `this`\" but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is _expensive_)","format":"org.matrix.custom.html","formatted_body":"(i.e. I agree with the problem statement of &quot;it could be easier to bind <code>this</code>&quot; but am skeptical of the cost/benefit of adding new syntax to solve that problem - syntax is <em>expensive</em>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$cHfGZwhPv2BbuCz1Am7r89-yXre_psG32bbdF-vAZ6U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041292139,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4y_TYOw0RsuweN2xEolrzOmALeqbfmbg-JLFMWZ_Dtc"},
{"content":{"body":"i am pretty unconvinced this needs syntax","msgtype":"m.text"},"ts":1633041305996,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ST82awvhSOH5W5_TePTh5j0OndBnklGm0mw_2PJBSsQ"},
{"content":{"body":"I think anything that aids tree shake ability for bundles is a huge improvement","msgtype":"m.text"},"ts":1633041484233,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$o2Hk5-vt1RvPJ073ltRSWxHmFxux73wX3ObjTXhNDH8"},
{"content":{"body":" * Right, okay. So I need to focus less on the security aspect or at least subsume it under “bind/call is very common”. Thanks for the feedback.\nFiguring out what was compelling enough for the prior bind operator and for Extensions to reach Stage 1…although it’s true that neither of them have reached Stage 2…","m.new_content":{"body":"Right, okay. So I need to focus less on the security aspect or at least subsume it under “bind/call is very common”. Thanks for the feedback.\nFiguring out what was compelling enough for the prior bind operator and for Extensions to reach Stage 1…although it’s true that neither of them have reached Stage 2…","msgtype":"m.text"},"m.relates_to":{"event_id":"$lQ4sPSTENJ2aX96oEGYoyLu3pwXLt-x-KIrug5UZTrM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041488172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HyRlQz9gGdY7QsClVBjbbnieSdVwujF7xRAco6myVhQ"},
{"content":{"body":"This and pipelines is how we get nice APIs without resorting to really ugly nested calls","msgtype":"m.text"},"ts":1633041542102,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cEw-pMFHhXQXJI9r1aUX_dQQzVLnDK3H_C4y2R8SPAU"},
{"content":{"body":"i'm missing some steps there. how would syntax for bind help tree shaking?","msgtype":"m.text"},"ts":1633041555843,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bVKDmYYdJhGftT1usa5S7ZCt2L50B_DPOLWl0HKBWmE"},
{"content":{"body":"It seems that call-this syntax would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":"It seems that call-this syntax would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","msgtype":"m.text"},"ts":1633041621220,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE"},
{"content":{"body":"Syntax for *call* helps there","format":"org.matrix.custom.html","formatted_body":"Syntax for <em>call</em> helps there","msgtype":"m.text"},"ts":1633041626288,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qHseL6XClI0Bfc_utxJdY9iBpx0QEOyOfkyDtSLzul8"},
{"content":{"body":" * It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. RxJS was going to do this in v5.","format":"org.matrix.custom.html","formatted_body":" * It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. RxJS was going to do this in v5.","m.new_content":{"body":"It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. RxJS was going to do this in v5.","format":"org.matrix.custom.html","formatted_body":"It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. RxJS was going to do this in v5.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041627708,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2iKqglqt3TkPA56HowqQson-JLvG3cQSNNQD6DNqfYU"},
{"content":{"body":" * It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. RxJS was going to do this in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":" * It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. RxJS was going to do this in v5, although they switched away when it became clear that <code>::</code> was stuck.","m.new_content":{"body":"It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. RxJS was going to do this in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":"It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. RxJS was going to do this in v5, although they switched away when it became clear that <code>::</code> was stuck.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041636558,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8RRnN5fRf308oz7HoBXLO-ItRAAk-yGuy_9PCkUpd34"},
{"content":{"body":" * It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":" * It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","m.new_content":{"body":"It seems that it would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":"It seems that it would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041644705,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0qqVvcX9UgUVIseRVhHoDiAxVvYe04P2bl62wTCRmZQ"},
{"content":{"body":" * It seems that bind/call-this syntax would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":" * It seems that bind/call-this syntax would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","m.new_content":{"body":"It seems that bind/call-this syntax would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":"It seems that bind/call-this syntax would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041658248,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tb7hQ7olheOpQYuHY86HbJneHZQ33hCC4kvtn7-vnv8"},
{"content":{"body":" * It seems that call-this syntax would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":" * It seems that call-this syntax would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","m.new_content":{"body":"It seems that call-this syntax would encourage library developers to create separate “methods” that use `this` and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that `::` was stuck.","format":"org.matrix.custom.html","formatted_body":"It seems that call-this syntax would encourage library developers to create separate “methods” that use <code>this</code> and which are individually importable. For example, RxJS was doing that in v5, although they switched away when it became clear that <code>::</code> was stuck.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xhtRuMtnmOd-IigjYAQ93bEbE-aTmhS97cdtTphUHIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041664410,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Qvn_83BKhnx-09qm0-XDRBe2Rubrx207pqAZV6JVerw"},
{"content":{"body":"i still don't understand, how does syntax for call help there?","msgtype":"m.text"},"ts":1633041669841,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g0v2FgNG2nYKJrMGXJW23M2SL6u9IlwybWmnhYW0-OM"},
{"content":{"body":"`bind` doesn't matter for tree-shake, it's just the `call` syntax","format":"org.matrix.custom.html","formatted_body":"<code>bind</code> doesn't matter for tree-shake, it's just the <code>call</code> syntax","msgtype":"m.text"},"ts":1633041673335,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YiPoAiYsnnnRfGiPRZXK3kYC_q--NkGs8zzNUILVzSg"},
{"content":{"body":"Example: https://github.com/ReactiveX/rxjs/tree/5.x#es6-via-npm","msgtype":"m.text"},"ts":1633041718614,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oTmVnj_sa-ki-4yXAEqEGieolPAL8ERvDAp6912ky1Q"},
{"content":{"body":"shu: If you want to write good APIs that look like `foo.bar()` but with free functions that you can import/tree-shake, you want a call operator so you can do `foo->bar()` or whatever","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: If you want to write good APIs that look like <code>foo.bar()</code> but with free functions that you can import/tree-shake, you want a call operator so you can do <code>foo-&gt;bar()</code> or whatever","msgtype":"m.text"},"ts":1633041723006,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fAF6jm512xUwX1oxduECJEyegzqqB0E_S5c8HVo5lUg"},
{"content":{"body":"```js\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operator/map';\n\nObservable::of(1,2,3)::map(x => x + '!!!'); // etc\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">import { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operator/map';\n\nObservable::of(1,2,3)::map(x =&gt; x + '!!!'); // etc\n</code></pre>\n","msgtype":"m.text"},"ts":1633041727472,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jLx0DNfoUeoNBdd5iiSSttNdJUmj4BALP7kfYtx1y2I"},
{"content":{"body":"personally i only really need `.call` syntax, but both bind and call come together so naturally just by including or omitting the invocation parens","format":"org.matrix.custom.html","formatted_body":"personally i only really need <code>.call</code> syntax, but both bind and call come together so naturally just by including or omitting the invocation parens","msgtype":"m.text"},"ts":1633041728264,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RrCaclDuRJuq0T3IFfKKdxwewL4REYcjcGb7yuMmcYc"},
{"content":{"body":"(or write them to use their first arg rather than `this` and use pipe: `foo |> bar(^)`)","format":"org.matrix.custom.html","formatted_body":"(or write them to use their first arg rather than <code>this</code> and use pipe: <code>foo |&gt; bar(^)</code>)","msgtype":"m.text"},"ts":1633041747437,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dekUKuQjbPeZkIAKhQWpnYp-8wN995m4KXUPzeEiKCE"},
{"content":{"body":" * (or write them to use their first arg rather than `this` and use pipe: `foo |> bar(^)`)","format":"org.matrix.custom.html","formatted_body":" * (or write them to use their first arg rather than <code>this</code> and use pipe: <code>foo |&gt; bar(^)</code>)","m.new_content":{"body":"(or write them to use their first arg rather than `this` and use pipe: `foo |> bar(^)`)","format":"org.matrix.custom.html","formatted_body":"(or write them to use their first arg rather than <code>this</code> and use pipe: <code>foo |&gt; bar(^)</code>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$dekUKuQjbPeZkIAKhQWpnYp-8wN995m4KXUPzeEiKCE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041752322,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$e1v8txa9jBBab7ZPxabIcVf98XRbLBlWioYcW30A0zg"},
{"content":{"body":"Tab explains it really well.","msgtype":"m.text"},"ts":1633041767181,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$P9wREwTfbNjMqOC5tr80ClMea_2fLbUnxsqkkHs_VUM"},
{"content":{"body":"and `bar.call(foo)` defeats tree shaking because `call` is configurable/writable?","format":"org.matrix.custom.html","formatted_body":"and <code>bar.call(foo)</code> defeats tree shaking because <code>call</code> is configurable/writable?","msgtype":"m.text"},"ts":1633041783770,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a3ugsPJD2i6yOFRBLwX029HI7vsCuJtab6sEg4ua_GI"},
{"content":{"body":"But it's anything to avoid the kitchen-sink style object APIs, where they're almost impossible to tree-shake","msgtype":"m.text"},"ts":1633041785590,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KbyYfG14PKAUAlUflLpPvXeZBo0MhYMqdn6je5BxFQQ"},
{"content":{"body":"Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when `::` failed.","format":"org.matrix.custom.html","formatted_body":"Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when <code>::</code> failed.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$a3ugsPJD2i6yOFRBLwX029HI7vsCuJtab6sEg4ua_GI"}}},"ts":1633041805426,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uTuHEJaS1SL7RBhQ6aFypeCSltsonU25faA8VNcpyaQ"},
{"content":{"body":"No, it defeats \"fluent API\"","msgtype":"m.text"},"ts":1633041806268,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3__kTngLPQHayYiuaTnWKnY4QwQZk8_B9w14ZAK_CF4"},
{"content":{"body":"No, that would work, but you'll never see users actually wanting to write that.","msgtype":"m.text"},"ts":1633041818051,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2tGaGZYGJhsmVL9gDaKoyB7030wQeONakRWhNCJjI3A"},
{"content":{"body":"i... see","msgtype":"m.text"},"ts":1633041818686,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3-6W3_ksN8_wec50zITnV0BwbMel8Xt71qWl4IZACq8"},
{"content":{"body":"`baz.call(bar.call(foo))`","format":"org.matrix.custom.html","formatted_body":"<code>baz.call(bar.call(foo))</code>","msgtype":"m.text"},"ts":1633041819892,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$beR-ddrcA1ryeVn91RwKySrIigBgrIa3Ayt9DjoGiEw"},
{"content":{"body":"> <@shuyuguo:matrix.org> and `bar.call(foo)` defeats tree shaking because `call` is configurable/writable?\n\n * Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when `::` failed.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$a3ugsPJD2i6yOFRBLwX029HI7vsCuJtab6sEg4ua_GI?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and <code>bar.call(foo)</code> defeats tree shaking because <code>call</code> is configurable/writable?</blockquote></mx-reply> * Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when <code>::</code> failed.","m.new_content":{"body":"Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when `::` failed.","format":"org.matrix.custom.html","formatted_body":"Nah, it’s just much less ergonomic. Which is why RxJS moved away from it when <code>::</code> failed.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uTuHEJaS1SL7RBhQ6aFypeCSltsonU25faA8VNcpyaQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041820335,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gOPngZgxLYuaOv4en-_CZ7wVQ2pzbOQyLP__iEIi8ag"},
{"content":{"body":"that's ugly as sin ^^_","msgtype":"m.text"},"ts":1633041827461,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SLOhMCqvwDjX_app-Ng44ug4uNtHFKrI7II9SsCPrMY"},
{"content":{"body":"i have no qualms, but okay","msgtype":"m.text"},"ts":1633041836259,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f5wYI72CS37MyL4Obs-pxcpLYNTn5Zwjfm0AEMXUmQw"},
{"content":{"body":"versus `foo.bar().baz()`?","format":"org.matrix.custom.html","formatted_body":"versus <code>foo.bar().baz()</code>?","msgtype":"m.text"},"ts":1633041846673,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1ztZi63sVkqmzqa-N-LGs-PiVHhK7ielLukDtwnM9Uw"},
{"content":{"body":"it is uglier than that, yes","msgtype":"m.text"},"ts":1633041876139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XsdTAno0pk1fMgud9ybDXlXgdVnSP7Or6-vKoisxyiU"},
{"content":{"body":"Well, we know from wide experience at this point that it's *sufficiently* ugly that literally nobody does it, and instead they invent `.pipe()` and start using HOF","format":"org.matrix.custom.html","formatted_body":"Well, we know from wide experience at this point that it's <em>sufficiently</em> ugly that literally nobody does it, and instead they invent <code>.pipe()</code> and start using HOF","msgtype":"m.text"},"ts":1633041908225,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VaB8CnHxNg88CP4E500piye-oaGWYjJR4OvCpfGG_0w"},
{"content":{"body":"it is not ugly enough for me to prioritize over applying DCE if that were an impactful optimization for a library","msgtype":"m.text"},"ts":1633041911070,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gB7tHYvHMx54f-1BlgSfvvhvY9GtA7ty0JjHiwGQYyk"},
{"content":{"body":"Think of a beginner's perspective, they'll never write `baz.call(bar.call(foo))` and it'll be hard for them to understand what's really happening.","format":"org.matrix.custom.html","formatted_body":"Think of a beginner's perspective, they'll never write <code>baz.call(bar.call(foo))</code> and it'll be hard for them to understand what's really happening.","msgtype":"m.text"},"ts":1633041935311,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HjdN1FZ6Y_YU2mUkaXdbL7Fc0LNEOZ6CG7RQ-058FDs"},
{"content":{"body":"`foo.bar().baz()` is extremely intuitive","format":"org.matrix.custom.html","formatted_body":"<code>foo.bar().baz()</code> is extremely intuitive","msgtype":"m.text"},"ts":1633041946393,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HUPh7p-hGVLWcW0AFa9CUPx-H3D4J6LW1HDGHIV12iA"},
{"content":{"body":"My hope is `foo->bar()->baz()` will be, too.","format":"org.matrix.custom.html","formatted_body":"My hope is <code>foo-&gt;bar()-&gt;baz()</code> will be, too.","msgtype":"m.text"},"ts":1633041957429,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uaCGnvqm3ehjCDlYJrVk0XfyA6dRNA1nyz2GWY6ZuO4"},
{"content":{"body":"(I still find .call() hard to understand in anything beyond trivial cases, and I'm far from a beginner.)","msgtype":"m.text"},"ts":1633041960477,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$sDkwK9NdkXRWEvcnOPNw8aSXp8Gbz7WG19mLyObn74o"},
{"content":{"body":" * Think of a beginner's perspective, they'll never write `baz.call(bar.call(foo))` and it'll be hard for them to understand what's really happening.","format":"org.matrix.custom.html","formatted_body":" * Think of a beginner's perspective, they'll never write <code>baz.call(bar.call(foo))</code> and it'll be hard for them to understand what's really happening.","m.new_content":{"body":"Think of a beginner's perspective, they'll never write `baz.call(bar.call(foo))` and it'll be hard for them to understand what's really happening.","format":"org.matrix.custom.html","formatted_body":"Think of a beginner's perspective, they'll never write <code>baz.call(bar.call(foo))</code> and it'll be hard for them to understand what's really happening.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HjdN1FZ6Y_YU2mUkaXdbL7Fc0LNEOZ6CG7RQ-058FDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633041988744,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NlQPPoqBm5KFLi3QSlznMTnJ0ujGZhVtCZ4zHJKXfHY"},
{"content":{"body":"I see `->` and `|>` as the next way libraries are written, with the explicit goal of tree-shaking out every unused piece of code","format":"org.matrix.custom.html","formatted_body":"I see <code>-&gt;</code> and <code>|&gt;</code> as the next way libraries are written, with the explicit goal of tree-shaking out every unused piece of code","msgtype":"m.text"},"ts":1633042052164,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$N3IfvN2WeC1PaoCiEfwcBY2I0cfgx92fNa8f4_JckM0"},
{"content":{"body":"If we start exporting a bunch of top-level functions (with either a `this` context or a first-param), our libraries can encompass every use case with 0 bloat","format":"org.matrix.custom.html","formatted_body":"If we start exporting a bunch of top-level functions (with either a <code>this</code> context or a first-param), our libraries can encompass every use case with 0 bloat","msgtype":"m.text"},"ts":1633042120805,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MxC7Qoulx1ud62ILXFjdR02m3nNxIyI_YUO24TwF8qY"},
{"content":{"body":"why even use `this`","format":"org.matrix.custom.html","formatted_body":"why even use <code>this</code>","msgtype":"m.text"},"ts":1633042132294,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6twvpOk8k46_KBg4jMcI-LKsrA_Rdj3353HZhJ375vc"},
{"content":{"body":"why not just do it the old OO-in-C way, and just take the receiver as the actual first argument","msgtype":"m.text"},"ts":1633042148836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cBiXmD7rK4b6EsTfOTcrbJ-6ZAzZSAvd7RRO01tGqic"},
{"content":{"body":"Because people are used to `foo.bar().baz()`","format":"org.matrix.custom.html","formatted_body":"Because people are used to <code>foo.bar().baz()</code>","msgtype":"m.text"},"ts":1633042194391,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dAZTJWb4j4xt-vQBetxBbCXJdmiJ45AxQbvEsbKbh5U"},
{"content":{"body":"That's the ideal","msgtype":"m.text"},"ts":1633042211284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SH9fwx9itM72P2LJRVCucZk7cm6POBWpoRSn_naMLzA"},
{"content":{"body":"The closer we can make the final syntax to the ideal syntax, the better adoption we'll see","msgtype":"m.text"},"ts":1633042225085,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DR-8U_ePzOPCUu0YqHJ7gxJKQFZbpR-hmebgYiVr2SY"},
{"content":{"body":"i have a hard time with this because that is an aesthetic i do not share","msgtype":"m.text"},"ts":1633042235350,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jVk24Qk7d7qIMa48cn6meTpHVjAngjRjy6AA7tw-Wjs"},
{"content":{"body":"(I don't think it's that bad, and suspect `foo |> bar(^) |> baz(^)` will be a significant objection.)","format":"org.matrix.custom.html","formatted_body":"(I don't think it's that bad, and suspect <code>foo |&gt; bar(^) |&gt; baz(^)</code> will be a significant objection.)","msgtype":"m.text"},"ts":1633042245056,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CgaVgmbNeSmGNQezai5c3v1e38nfPfwIf0Dt42ma_Og"},
{"content":{"body":"See also firebase's redesign: https://www.youtube.com/watch?v=r5eJQ3nPc6A","msgtype":"m.text"},"ts":1633042564215,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$L5hWiMFitk7Apc887LM2n0124RzlsrFyS-S6bwjDKfw"},
{"content":{"body":"They're using first-param, which I think is fine","msgtype":"m.text"},"ts":1633042587895,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SbVA5_-emQXehCAl6Fka0TEVyhLEFuaZlwVlAc8L0pg"},
{"content":{"body":"But I adoption will be better if we had `->`","format":"org.matrix.custom.html","formatted_body":"But I adoption will be better if we had <code>-&gt;</code>","msgtype":"m.text"},"ts":1633042618759,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rjeKjseI7pQvD_fRCeKNdKJDLGA1TMlB1eIxe3ca2do"},
{"content":{"body":"yes, the firebase redesign convinced me of pipe operators' utility beyond catering to those who want more FP in JS, which i categorically don't want","msgtype":"m.text"},"ts":1633042645327,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_LbCH38PrnzXdcjmiH63Quwauj14yW1q14m2hGhd3fQ"},
{"content":{"body":" * But I think adoption will be better if we had `->`","format":"org.matrix.custom.html","formatted_body":" * But I think adoption will be better if we had <code>-&gt;</code>","m.new_content":{"body":"But I think adoption will be better if we had `->`","format":"org.matrix.custom.html","formatted_body":"But I think adoption will be better if we had <code>-&gt;</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$rjeKjseI7pQvD_fRCeKNdKJDLGA1TMlB1eIxe3ca2do","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633042650095,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$e7VSLV-KoRPTrBl3jfkhPLn4vUJr3i0FAv4m9ilWAPs"},
{"content":{"body":"> <@shuyuguo:matrix.org> yes, the firebase redesign convinced me of pipe operators' utility beyond catering to those who want more FP in JS, which i categorically don't want\n\nyou _know_ I gotta ask whether that pun was intended","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_LbCH38PrnzXdcjmiH63Quwauj14yW1q14m2hGhd3fQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>yes, the firebase redesign convinced me of pipe operators&#39; utility beyond catering to those who want more FP in JS, which i categorically don&#39;t want</blockquote></mx-reply>you <em>know</em> I gotta ask whether that pun was intended","m.relates_to":{"m.in_reply_to":{"event_id":"$_LbCH38PrnzXdcjmiH63Quwauj14yW1q14m2hGhd3fQ"}},"msgtype":"m.text"},"ts":1633043180523,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5sW3XrGUA6-5Ptr9VRWfgsaGOfklfRDh-FvNuFYqNK0"},
{"content":{"body":"on topic though, the thought of `->` really makes me feel like \"oh no we're turning into Perl\"","format":"org.matrix.custom.html","formatted_body":"on topic though, the thought of <code>-&gt;</code> really makes me feel like &quot;oh no we're turning into Perl&quot;","msgtype":"m.text"},"ts":1633043419617,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$y8m95dXzICv4bBDhToZhNqjzrokApMu6G6wsge9CrI4"},
{"content":{"body":"...except it's worse, because `foo->` isn't accessing something related to `foo` 😓","format":"org.matrix.custom.html","formatted_body":"...except it's worse, because <code>foo-&gt;</code> isn't accessing something related to <code>foo</code> 😓","msgtype":"m.text"},"ts":1633043448507,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$V2iqTnR-H_i_BjCKZ5cHIfaAA3fE-Oh36Au8lcO4LqI"},
{"content":{"body":"If I remember my Perl correctly, `foo->bar()` is a method call, right? That’s actually pretty similar…","format":"org.matrix.custom.html","formatted_body":"If I remember my Perl correctly, <code>foo-&gt;bar()</code> is a method call, right? That’s actually pretty similar…","msgtype":"m.text"},"ts":1633043520838,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aMpjrN6C1cJt2bRH6qBh2mx0bbriPU9Adad4ZxU0sUs"},
{"content":{"body":"(that's also a PHP method call ^_^)","msgtype":"m.text"},"ts":1633043622348,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yLg_8an1UtnF4rkC8DqXQZNZQPDMuGuZM33w7xGO5Wo"},
{"content":{"body":"er well, hmm, yeah","msgtype":"m.text"},"ts":1633043625141,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Pv-CunzmuShEpAK5U-nnX2S2EjQ60vJW2V-spzyn02c"},
{"content":{"body":"I guess my last sentence isn't quite right","msgtype":"m.text"},"ts":1633043647683,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5aofvXvL52KjxEDUgaSG8ayIq0iPeaHpyuyVHDIDYzk"},
{"content":{"body":"but it does feel like promoting something unusual in a way that makes very basic things confusing","msgtype":"m.text"},"ts":1633043675020,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$uHUIzbeIxp07k4ojzHELUjf9nqzxL3-htLwYAu9GQlE"},
{"content":{"body":"I can understand that. `this`, bind, and call are all pretty confusing in JavaScript. \nBut they’re all still very common, too, so it may be worth lubricating them…Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to `Function` mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","format":"org.matrix.custom.html","formatted_body":"I can understand that. <code>this</code>, bind, and call are all pretty confusing in JavaScript.<br>But they’re all still very common, too, so it may be worth lubricating them…Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to <code>Function</code> mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","msgtype":"m.text"},"ts":1633043816190,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4cQUw3m4qIcXD5MJkWhu0jcSh0b4NI20IkMDjIUoQbc"},
{"content":{"body":" * I can understand that. `this`, bind, and call are all pretty confusing in JavaScript.\nBut they’re all still very common, too; they’re core parts of JavaScript. So it still may be worth lubricating them. Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to `Function` mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","format":"org.matrix.custom.html","formatted_body":" * I can understand that. <code>this</code>, bind, and call are all pretty confusing in JavaScript.<br>But they’re all still very common, too; they’re core parts of JavaScript. So it still may be worth lubricating them. Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to <code>Function</code> mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","m.new_content":{"body":"I can understand that. `this`, bind, and call are all pretty confusing in JavaScript.\nBut they’re all still very common, too; they’re core parts of JavaScript. So it still may be worth lubricating them. Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to `Function` mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","format":"org.matrix.custom.html","formatted_body":"I can understand that. <code>this</code>, bind, and call are all pretty confusing in JavaScript.<br>But they’re all still very common, too; they’re core parts of JavaScript. So it still may be worth lubricating them. Jordan’s global-protection use cases were what spurred me to actually make this proposal, and it’s impossible without the proposal (due to <code>Function</code> mutation)…but I’m sure it’s only a tiny subset of what people use bind and call for in general.","msgtype":"m.text"},"m.relates_to":{"event_id":"$4cQUw3m4qIcXD5MJkWhu0jcSh0b4NI20IkMDjIUoQbc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633043842311,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5nqXbnrPmrN96QVxxan6zzT_lLYkPRlOM06YD3gp_uo"},
{"content":{"body":"I suppose since arrow functions’ premiere, bind and call became much less prevalent…","msgtype":"m.text"},"ts":1633043913363,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wx4BBK7olpCputa9dD8ABGe1P5QjULbU-46croIFDXE"},
{"content":{"body":"right but these things are longwinded because they're not the things beginners do","msgtype":"m.text"},"ts":1633043916961,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$tyr1q0vf2u_D2vHeAKPyb6piFqF6HCS9KVjOfCJvxfg"},
{"content":{"body":"I would be GENUINELY scared at making every beginner worry about \"was it `.` that I'm supposed to write? but there's also `->`...\"","format":"org.matrix.custom.html","formatted_body":"I would be GENUINELY scared at making every beginner worry about &quot;was it <code>.</code> that I'm supposed to write? but there's also <code>-&gt;</code>...&quot;","msgtype":"m.text"},"ts":1633043959246,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yxmX0auhTJdsWGMepPDlhzU1bPg_uBzlAAL18s88qwI"},
{"content":{"body":"...which was my first reaction to needing to edit a Perl script","msgtype":"m.text"},"ts":1633043991298,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xlm_ov6k_5cmBUUezqG3Pdo44Sr02o9sPC5HMT-EpH8"},
{"content":{"body":"rkirsling: That’s understandable. Would you have similar concerns about the old `::` bind operator and the Extensions proposal, too?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: That’s understandable. Would you have similar concerns about the old <code>::</code> bind operator and the Extensions proposal, too?","msgtype":"m.text"},"ts":1633044288182,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tazVXNGe2usGM_A28ra6pZSpUtIcw6DOvY3eg1Kzw6A"}
]