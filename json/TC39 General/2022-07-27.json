[
{"content":{"body":"what do y'all figure the odds are that we could make `Object.assign` special-case `__proto__` to not trigger the setter on `Object.prototype`","format":"org.matrix.custom.html","formatted_body":"what do y'all figure the odds are that we could make <code>Object.assign</code> special-case <code>__proto__</code> to not trigger the setter on <code>Object.prototype</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what do y'all figure the odds are that we could make `Object.assign` special-case `__proto__` to not trigger the setter on `Object.prototype`","mimetype":"text/plain"},{"body":"what do y'all figure the odds are that we could make <code>Object.assign</code> special-case <code>__proto__</code> to not trigger the setter on <code>Object.prototype</code>","mimetype":"text/html"}]},"ts":1658897546422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg"},
{"content":{"body":"probably not high, I guess","msgtype":"m.text","org.matrix.msc1767.text":"probably not high, I guess"},"ts":1658897551946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FMVVNpVw-Tn6pKDXQ3Ra-MxFm_H9wGT_NszrmRXURGI"},
{"content":{"body":"but I would like that","msgtype":"m.text","org.matrix.msc1767.text":"but I would like that"},"ts":1658897559726,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nm9fG_m9lweoc5H1Q0A97i_CfuD74IAPtb7kKCDQoz4"},
{"content":{"body":"(not trigger any setters on Object.prototype, ideally.)","msgtype":"m.text","org.matrix.msc1767.text":"(not trigger any setters on Object.prototype, ideally.)"},"ts":1658897578544,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FWy9MQEkBm6_OZbXHDAfX9tS35V3OUJjO4ejXZXdrbQ"},
{"content":{"body":"huh, are you seeing a particular sort of injection attack occur?","msgtype":"m.text","org.matrix.msc1767.text":"huh, are you seeing a particular sort of injection attack occur?"},"ts":1658928153711,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-8ujnLN-VXx_HzGco0nyedhYm8V5-3X73p675l4xZGE"},
{"content":{"body":"or like where is this coming up?","msgtype":"m.text","org.matrix.msc1767.text":"or like where is this coming up?"},"ts":1658928165434,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LLoC3aI9WzUe-u3sBa_5grJrX_X6puM4bfuxdS765h8"},
{"content":{"body":"Oh this is what everyone is talking about for \"secure\" JSON parse?","msgtype":"m.text","org.matrix.msc1767.text":"Oh this is what everyone is talking about for \"secure\" JSON parse?"},"ts":1658928256605,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n5e3Vv18HXZBYi_Ghpf2Hkvg5HPoE0rgRqiK-ru-C-M"},
{"content":{"body":"littledan: yeah","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: yeah","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: yeah","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: yeah","mimetype":"text/html"}]},"ts":1658929875078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s5eDHtQfBPJ2RvvPtq0Gqrxopcu9YguVZdhotXlqzJ0"},
{"content":{"body":"some actually exploitable issues, for a change, e.g. https://github.com/advisories/GHSA-p6h4-93qp-jhcm","msgtype":"m.text","org.matrix.msc1767.text":"some actually exploitable issues, for a change, e.g. https://github.com/advisories/GHSA-p6h4-93qp-jhcm"},"ts":1658930022872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YBdekZlQBu46fNgaAVorG4i3sXcL6pkz9GV9KmdhSTc"},
{"content":{"body":"> <@bakkot:matrix.org> what do y'all figure the odds are that we could make `Object.assign` special-case `__proto__` to not trigger the setter on `Object.prototype`\n\nMaybe we should let SES shim to do that ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />what do y'all figure the odds are that we could make <code>Object.assign</code> special-case <code>__proto__</code> to not trigger the setter on <code>Object.prototype</code></blockquote></mx-reply>Maybe we should let SES shim to do that ðŸ¤”","m.relates_to":{"m.in_reply_to":{"event_id":"$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg"}},"msgtype":"m.text"},"ts":1658930048018,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-L7nLXjSNIAYx5G81NL3GmkIKOAWnm0C_v_y0f_vx-w"},
{"content":{"body":"also just a violation of expectations, really","msgtype":"m.text","org.matrix.msc1767.text":"also just a violation of expectations, really"},"ts":1658930053832,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tacEochdyPHrBT1-M2tYzNYSJtCoDz8A85V1JVpV_9w"},
{"content":{"body":"Oh I don't know if SES is removing __proto__ accessors","msgtype":"m.text"},"ts":1658930090477,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$xyogydxUvSmnsEYp-1F4i2mZFM0EnqWLeyFV_JKXA_E"},
{"content":{"body":"so this is entirely avoided by Object spread right?","msgtype":"m.text","org.matrix.msc1767.text":"so this is entirely avoided by Object spread right?"},"ts":1658930843697,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5uNaf247ACGL4BPp9ChNYO9jauJrmudfGB8wxP24OSs"},
{"content":{"body":"> <@bakkot:matrix.org> what do y'all figure the odds are that we could make `Object.assign` special-case `__proto__` to not trigger the setter on `Object.prototype`\n\nidk seeing the implications I'd be OK with this change as a security/legacy hotfix","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>what do y'all figure the odds are that we could make <code>Object.assign</code> special-case <code>__proto__</code> to not trigger the setter on <code>Object.prototype</code></blockquote></mx-reply>idk seeing the implications I'd be OK with this change as a security/legacy hotfix","m.relates_to":{"m.in_reply_to":{"event_id":"$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> what do y'all figure the odds are that we could make `Object.assign` special-case `__proto__` to not trigger the setter on `Object.prototype`\n\nidk seeing the implications I'd be OK with this change as a security/legacy hotfix","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$46qyowa86GbEvyNoQ9wFnrLBZXSc_796QaVhOztYILg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>what do y'all figure the odds are that we could make <code>Object.assign</code> special-case <code>__proto__</code> to not trigger the setter on <code>Object.prototype</code></blockquote></mx-reply>idk seeing the implications I'd be OK with this change as a security/legacy hotfix","mimetype":"text/html"}]},"ts":1658930878742,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xnmbrDs4h8XucEr_SokY2LZ0GT6d9MHQmRa4Qdek9Kc"},
{"content":{"body":" * so this is entirely avoided by Object spread right?","m.new_content":{"body":"so this is entirely avoided by Object spread right?","msgtype":"m.text","org.matrix.msc1767.text":"so this is entirely avoided by Object spread right?"},"m.relates_to":{"event_id":"$5uNaf247ACGL4BPp9ChNYO9jauJrmudfGB8wxP24OSs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so this is entirely avoided by Object spread right?"},"ts":1658930892143,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CbG3dNUsltrDsuqqeHvR8jaWiAP77jw8BtT7TEGG1rQ"},
{"content":{"body":"at this point I guess we could agree that Object.assign should've had {... } semantics","msgtype":"m.text","org.matrix.msc1767.text":"at this point I guess we could agree that Object.assign should've had {... } semantics"},"ts":1658930921225,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$udUnNf3HWzZ-u3UoTGSGwkIFHlon92R6C1mFej3NQNc"},
{"content":{"body":"> this is entirely avoided by Object spread right\n\nyup","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>this is entirely avoided by Object spread right</p>\n</blockquote>\n<p>yup</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> this is entirely avoided by Object spread right\n\nyup","mimetype":"text/plain"},{"body":"<blockquote>\n<p>this is entirely avoided by Object spread right</p>\n</blockquote>\n<p>yup</p>\n","mimetype":"text/html"}]},"ts":1658930928045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UOLINycH5aMOahvtg8IVrcGULuGmCQ-dVbPVEgAWU9w"},
{"content":{"body":"though I guess there are still _some_ cases where you want to mutate rather than making a new object, and spread doesn't help there","format":"org.matrix.custom.html","formatted_body":"though I guess there are still <em>some</em> cases where you want to mutate rather than making a new object, and spread doesn't help there","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"though I guess there are still _some_ cases where you want to mutate rather than making a new object, and spread doesn't help there","mimetype":"text/plain"},{"body":"though I guess there are still <em>some</em> cases where you want to mutate rather than making a new object, and spread doesn't help there","mimetype":"text/html"}]},"ts":1658931008982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MimzW0Bgy8mb9KeoG8bSx2XZwUgtDwiZ5Bfz9DNRjPw"},
{"content":{"body":"right, but we kinda should've done the other aspects of spread semantics, but it's too late now","msgtype":"m.text","org.matrix.msc1767.text":"right, but we kinda should've done the other aspects of spread semantics, but it's too late now"},"ts":1658931340701,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wx2MX-bzEEwciFWUiFDVZD8OzyZ9o4m8a6zb1rueY6Y"},
{"content":{"body":"yeah the small patch sounds like a good approach to me","msgtype":"m.text","org.matrix.msc1767.text":"yeah the small patch sounds like a good approach to me"},"ts":1658931348935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5_0aNg1gTyz42Zqa8Qw7CvlOl20XlkAJylUruCupf6I"},
{"content":{"body":"there's still going to be bugs with manually copying properties, which happens pretty often, but this would be an improvement at least","msgtype":"m.text","org.matrix.msc1767.text":"there's still going to be bugs with manually copying properties, which happens pretty often, but this would be an improvement at least"},"ts":1658931541465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8WmSIkmz23Kz8mBQuTXuP4dBxJpOB4_eOkXYYNWsJ2E"},
{"content":{"body":"looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )","msgtype":"m.text","org.matrix.msc1767.text":"looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )"},"ts":1658931993366,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5uI4BBQBgX5LLRRMa4XmqCp5UjYlxnJrLIqPsUE8gCo"},
{"content":{"body":"can't do much about the manual copying cases, though","msgtype":"m.text","org.matrix.msc1767.text":"can't do much about the manual copying cases, though"},"ts":1658932041769,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dk_9YFUDNok7S_klRZIh3QlVdWC18QNyMwGNuXjsPGg"},
{"content":{"body":" * looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )","m.new_content":{"body":"looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )","msgtype":"m.text","org.matrix.msc1767.text":"looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )"},"m.relates_to":{"event_id":"$5uI4BBQBgX5LLRRMa4XmqCp5UjYlxnJrLIqPsUE8gCo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * looking in a little more detail https://arxiv.org/pdf/2207.11171.pdf reports one object.assign issue (linked above) and then two manual copying issues, both in the npm cli (patches for which are https://github.com/angus-c/just/blob/66b8abacba16fff2f16a61620ddaddbcad092349/packages/collection-diff-apply/index.js#L109-L113 and https://github.com/npm/parse-conflict-json/blob/6de41ffe0715cedcd92840e7b463b965461d6235/lib/index.js#L92-L94 )"},"ts":1658932069827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F1RGTTwddjGopJp4m61NJlw63whXKdo5pTieuHcc3DY"},
{"content":{"body":"Do we have any evidence that this error is common?","msgtype":"m.text","org.matrix.msc1767.text":"Do we have any evidence that this error is common?"},"ts":1658932488113,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3a21fiR4eCzOelpg3_p3zia46DgxR2davbMRitJQFOo"}
]