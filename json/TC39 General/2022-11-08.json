[
{"content":{"body":"Is it possible to freeze the [[Prototype]] of an ordinary object without wrapping it with Proxy? ","msgtype":"m.text"},"ts":1667897961662,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$grT8q2cLFnra_vmadF1bvlT9DjAnFKMj7hjfYxH9kMs"},
{"content":{"body":"Nope. Can only make it non-extensible. Props and prototype all part of the same bag","msgtype":"m.text"},"ts":1667902434448,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BCVfGTxZ9Dx8xq_pZWEHyjsiItRJ4BVJB6TCdTwY7rM"},
{"content":{"body":"https://github.com/tc39/proposal-freeze-prototype","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/proposal-freeze-prototype"},"ts":1667904045803,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nRnH5Zf78kPO-JqpCnhW54fh5D_Bgw-QCpWju9M5A7o"},
{"content":{"body":"https://matrixlogs.bakkot.com/TC39_Delegates/2021-09-20#L1","msgtype":"m.text","org.matrix.msc1767.text":"https://matrixlogs.bakkot.com/TC39_Delegates/2021-09-20#L1"},"ts":1667904143611,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RjlHvN1bMv4o_x2BRslvQKKBYpQdd3n0LpFutd8S2_0"},
{"content":{"body":"Is there an es5 way of creating a function with length n (where n is known statically when I'm writing the code), and for which `IsConstructor` returns `false`?","format":"org.matrix.custom.html","formatted_body":"Is there an es5 way of creating a function with length n (where n is known statically when I'm writing the code), and for which <code>IsConstructor</code> returns <code>false</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Is there an es5 way of creating a function with length n (where n is known statically when I'm writing the code), and for which `IsConstructor` returns `false`?","mimetype":"text/plain"},{"body":"Is there an es5 way of creating a function with length n (where n is known statically when I'm writing the code), and for which <code>IsConstructor</code> returns <code>false</code>?","mimetype":"text/html"}]},"ts":1667921419394,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5V6l89QEPLBXrS6_az4SAD1z_GLJhCX7NKsN1dT8e4A"},
{"content":{"body":"As far as I can tell, in es5, the only functions that don't have a [[Construct]] internal method are all built-ins. So even without the length constraint, the answer looks like no.","msgtype":"m.text","org.matrix.msc1767.text":"As far as I can tell, in es5, the only functions that don't have a [[Construct]] internal method are all built-ins. So even without the length constraint, the answer looks like no."},"ts":1667922666837,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$dmCLBZM2O1POVT4ScyGsQaSmPd5CL5AhyWqNfRKaDvA"},
{"content":{"body":"Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args.","msgtype":"m.text","org.matrix.msc1767.text":"Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args."},"ts":1667923883082,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DqM4lMYDWueFOc3gPci2JLlJVsQlNPFRD3h51mlaqwM"},
{"content":{"body":" * Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args.","m.new_content":{"body":"Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args.","msgtype":"m.text","org.matrix.msc1767.text":"Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args."},"m.relates_to":{"event_id":"$DqM4lMYDWueFOc3gPci2JLlJVsQlNPFRD3h51mlaqwM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Ok thanks, that matches what I expected but I was hoping for secret hacks ðŸ˜‚\nI know that I can create functions with length 0 and 1 using getters and setters in object literals, but it does not generalize to 2+ args."},"ts":1667923903973,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jowxcl2Y5IRlZlcUDDTxZpVDq0XHJ4qdJm-iAF5q114"},
{"content":{"body":"those functions are constructors tho, aren't they?","msgtype":"m.text","org.matrix.msc1767.text":"those functions are constructors tho, aren't they?"},"ts":1667931562093,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8PTxhFIrzD40wSoDw2tj_nyfmpDbxnQAMGIcvMNkDwE"},
{"content":{"body":"Nope:\n```js\nnew (Object.getOwnPropertyDescriptor({ get x() {} }, \"x\").get) \n// TypeError: Object.getOwnPropertyDescriptor(...).get is not a constructor\n```","format":"org.matrix.custom.html","formatted_body":"<p>Nope:</p>\n<pre><code class=\"language-js\">new (Object.getOwnPropertyDescriptor({ get x() {} }, &quot;x&quot;).get) \n// TypeError: Object.getOwnPropertyDescriptor(...).get is not a constructor\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Nope:\n```js\nnew (Object.getOwnPropertyDescriptor({ get x() {} }, \"x\").get) \n// TypeError: Object.getOwnPropertyDescriptor(...).get is not a constructor\n```","mimetype":"text/plain"},{"body":"<p>Nope:</p>\n<pre><code class=\"language-js\">new (Object.getOwnPropertyDescriptor({ get x() {} }, &quot;x&quot;).get) \n// TypeError: Object.getOwnPropertyDescriptor(...).get is not a constructor\n</code></pre>\n","mimetype":"text/html"}]},"ts":1667931893373,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hilKsZr6c1fK5mvxnM2Fqzqr8VR5sP1U3dlo7s0RHWM"},
{"content":{"body":"yeah, all concise methods, e.g., `new ({x() {}}.x)`","format":"org.matrix.custom.html","formatted_body":"yeah, all concise methods, e.g., <code>new ({x() {}}.x)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah, all concise methods, e.g., `new ({x() {}}.x)`","mimetype":"text/plain"},{"body":"yeah, all concise methods, e.g., <code>new ({x() {}}.x)</code>","mimetype":"text/html"}]},"ts":1667932011182,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iCmtan1ueaYmcHYCw1eDqFaUJ6mAqc_re5H5lQTUdGY"},
{"content":{"body":"and arrow functions","msgtype":"m.text","org.matrix.msc1767.text":"and arrow functions"},"ts":1667932018030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XLmX4KMu_VzeWbUHWSq6wnaE6kXn6XA-Q9S8CEp0CKY"},
{"content":{"body":"Are you running that in an ES5 engine?","msgtype":"m.text","org.matrix.msc1767.text":"Are you running that in an ES5 engine?"},"ts":1667933089514,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$NoEoa6iVY2q1avVBt3GxoHBL6e5MjQ_o-8foX0h0fEo"}
]