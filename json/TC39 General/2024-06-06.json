[
{"content":{"body":"I only have 3 of them in my codebase. Very niche.","m.mentions":{},"msgtype":"m.text"},"ts":1717632090797,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$0cOYgJyJ6GVMAzH15sza9R68qYep2owodKQsNbt-S4s"},
{"content":{"body":"Speaking of niche.. I haven't come across a use-case for that specifically, but I have on occasion wished there was something like a `Symbol.self` for use when accessing an object's properties.\ne.g. `x[Symbol.self] === x`\n\nIt's weird that my need for this has occurred more than a few times in the past year. (Easy to get around, but still)","format":"org.matrix.custom.html","formatted_body":"<p>Speaking of niche.. I haven't come across a use-case for that specifically, but I have on occasion wished there was something like a <code>Symbol.self</code> for use when accessing an object's properties.<br>e.g. <code>x[Symbol.self] === x</code></p>\n<p>It's weird that my need for this has occurred more than a few times in the past year. (Easy to get around, but still)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1717632163748,"senderName":"whosy","senderId":"@whosy:matrix.org","id":"$-hF2xj8sxvlux3eQ8dVF55EgLkWcJiKj3wWM9HicL5U"},
{"content":{"body":"Also seems pretty niche? and since the only way for that to work would be to put it on Object.prototype I think we would not want that","m.mentions":{},"msgtype":"m.text"},"ts":1717632252041,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uh8dg__as0B6jT3LEyBGe9ZAmCKcKNowMzyicZUYKD0"},
{"content":{"body":"both because new things on Object.prototype are scary in several ways, and because it wouldn't work everywhere and it would be very annoying for `x[Symbol.self]` to just not work when `x` happens to have a null prototype","format":"org.matrix.custom.html","formatted_body":"both because new things on Object.prototype are scary in several ways, and because it wouldn't work everywhere and it would be very annoying for <code>x[Symbol.self]</code> to just not work when <code>x</code> happens to have a null prototype","m.mentions":{},"msgtype":"m.text"},"ts":1717632285076,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bayICqLRYVGtftAJvNW2A43fuHNyut7rg6FNlnbybCg"},
{"content":{"body":"@bakkot My previous assumption was that we in TC39 would be uncomfortable adding wait because we don’t have a concept of an event loop. Also we would need host integration for stuff like banning it in worklets. But I guess at this point we have other features that get at each of those things (eg Atomics.waitAsync)","msgtype":"m.text"},"ts":1717650824183,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CdAv5UqLwEgTqhRXtpw97eQkZdgB0sk0nL7VC4U-0Hw"},
{"content":{"body":"But at the same time I don’t see a huge disadvantage to using the scheduler namespace (that’s all it amounts to; it’s not like the scheduler object has state) given that we are trying to share APIs across web and non-web environments, WinterCG-style","msgtype":"m.text"},"ts":1717650949161,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ATqb_Pk82RbItPVqcVnOz0-EE7JPDDG5qGe1jnDUymM"},
{"content":{"body":"Are there particular design mistakes we might make with scheduler?","msgtype":"m.text"},"ts":1717650949784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70"},
{"content":{"body":"I have not thought about scheduler at all and trust the people working on it to do it reasonably well","m.mentions":{},"msgtype":"m.text"},"ts":1717651130440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9l3OxuQATKKhdJfBULbnVXdcSzNCBNshYTqYewnaVSg"},
{"content":{"body":"but \"I want to wait for a period of time\" is a much more primitive operation than the rest of that API so it seems a shame to require people to think about the much more complex thing in order to get access to the simple thing","m.mentions":{},"msgtype":"m.text"},"ts":1717651167799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-rnutc9xunZu05xUh0ZYPlgmDwxupei-4TGQZQWJq5Y"},
{"content":{"body":"So I am curious how you feel about the situation with getting random bytes with crypto, which seems like an analogous situation. In both cases, there is just a funny lowercase namespace, no state in the object, and it is possible to implement just that method on the object without the rest of the API if you are subsetting the web platform.","msgtype":"m.text"},"ts":1717651987811,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6PsMUEED-F9cE2us7Qobt6iYcbJYgSJhUz91j8alGtU"},
{"content":{"body":"it may be the security person in me but `crypto` feels like a very reasonable place to be reaching for a large quantity of random bytes","format":"org.matrix.custom.html","formatted_body":"it may be the security person in me but <code>crypto</code> feels like a very reasonable place to be reaching for a large quantity of random bytes","m.mentions":{},"msgtype":"m.text"},"ts":1717653814768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hcfYGacjwhghstJr8r-p96zl7FyzG_kp6MvtP2wZj9c"},
{"content":{"body":"my problem with `scheduler` is not that it's a namespace per se, just that the namespace is kind of a powertool which is likely to be confusing to people who don't need it, whereas `crypto` it's pretty obvious what it does and what it's for ","format":"org.matrix.custom.html","formatted_body":"my problem with <code>scheduler</code> is not that it's a namespace per se, just that the namespace is kind of a powertool which is likely to be confusing to people who don't need it, whereas <code>crypto</code> it's pretty obvious what it does and what it's for","m.mentions":{},"msgtype":"m.text"},"ts":1717653876782,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UTkIJxEovL_MnKE4bQ_EfHMizMsOYWlXrpQzJ2SyR9I"},
{"content":{"body":"I'm not aware of any big arguments for why it must be in scheduler, maybe it just feels right to people working on it. In any case, if we want this in TC39, someone should bring a proposal to committee; I'm not sure how much active work there is on scheduler.wait, if any (not that it needs much work).","m.mentions":{},"msgtype":"m.text"},"ts":1717677582791,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$foE1SghUwzVKNaxma8qWtWCGtG-FxcgwVzYbOqneZ4k"},
{"content":{"body":"does anyone know why `Math.sqrt` is implementation-approximated in JS?","format":"org.matrix.custom.html","formatted_body":"does anyone know why <code data-md=\"`\">Math.sqrt</code> is implementation-approximated in JS?","msgtype":"m.text"},"ts":1717680083512,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$W_TvUIh4PG-6R-Mk19xHH4zQiVX509BqaQHM31ZA_rA"},
{"content":{"body":"Dan Gohman (@sunfishcode) says that wasm has it fully-defined and implementations are actually compatible because they defer to a single hardware instruction on all of their supported architectures","msgtype":"m.text"},"ts":1717680134508,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$C7-_hwgPehHdwaB1qDvLbtkvhyoapXBXHOCSqWBytWw"},
{"content":{"body":"so why would we allow approximation?","msgtype":"m.text"},"ts":1717680146813,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DeCAbqa-2lXNHrCZbbTR5LpnJY6ri-8bbnu1v4A3NqM"},
{"content":{"body":"that's just what we do for all of those functions, like sin/cos too. My understanding was that it's always been that way, or something.","m.mentions":{},"msgtype":"m.text"},"ts":1717680147938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Auzan0MATyz3jtSghL5cSfHsAYBdxIO6ebrQQa6GXcw"},
{"content":{"body":"A proposal to make these things more fully-defined sounds like a great idea to me, if implementations are up for it (historically V8 wanted to take shortcuts, not sure how they feel right now)","m.mentions":{},"msgtype":"m.text"},"ts":1717680193304,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X4Dxi2ODWv8ERbmRjk5U3eBNK6Dcuq0PT-VuOmhq5HA"},
{"content":{"body":"well V8 is already doing fully determined sqrt in wasm","msgtype":"m.text"},"ts":1717680385384,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MYX8_DQmQm2MpbE0X_HiqlTXafAmfkghNtP3n6e2Qzg"},
{"content":{"body":"right I'm optimistic","m.mentions":{},"msgtype":"m.text"},"ts":1717680400632,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IXTES8dhPDG9Uy7H2rPzpODM0D8qOoqSKJCyVp2LzQI"},
{"content":{"body":"I haven't looked recently at whether implementations disagree on some results of sqrt, but I believe they used to","msgtype":"m.text"},"ts":1717680422314,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_0U25SefC6N1obfpk8fheAhU9Bb4_1K1pmcXWjm7rSU"},
{"content":{"body":"I think historical goals around not regressing Octane by making things more accurate have fallen away","m.mentions":{},"msgtype":"m.text"},"ts":1717680423809,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-HSSySAh40iiIPJHFjCDuL98KxL-sWBYsXfY8HHtla4"},
{"content":{"body":"also maybe the hardware support just wasn't there 10 years ago","msgtype":"m.text"},"ts":1717680465211,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$M3KkvssauHNBGlhVxw7J0caLEkzw6I0CYiB6dJ0u_SQ"},
{"content":{"body":"I opened a needs-consensus PR: https://github.com/tc39/ecma262/pull/3345","msgtype":"m.text"},"ts":1717689110271,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KldrHCoCZV-N9OVO3TDTX18AKgSgErknRbDGRz_2ljQ"},
{"content":{"body":"it'd be great if someone did the investigation to confirm that modern implementations do indeed already agree on all sqrt input/output pairs","msgtype":"m.text"},"ts":1717689185623,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iwL46RuQxR95cdfhgE5wOc07x5yzMaC9_-4WUa7yFDg"},
{"content":{"body":"you'd need to ensure this was the case on all the hardware they each support also","m.mentions":{},"msgtype":"m.text"},"ts":1717689794830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E6x-LYHbPUxN93ydHv-oiW--7fcO5DEkuZzJBGqaXUE"},
{"content":{"body":"It looks like the process for adding a time constraint to the agenda is just to commit directly and push it; is that the case, or should I PR it?","m.mentions":{},"msgtype":"m.text"},"ts":1717693369538,"senderName":"leftmostcat (UTC-7)","senderId":"@leftmostcat:matrix.org","id":"$6QbqbrQtJpMbwzgnIKDzPBU23Ha1w8_bP0_-mTx0V18"},
{"content":{"body":"please always PR","m.mentions":{},"msgtype":"m.text"},"ts":1717693415243,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$PKGALkFojiH4QIBhQlMwaaK_kOAJdI96gXs8ysTGGME"},
{"content":{"body":"even if you immediately merge it without review/approval","m.mentions":{},"msgtype":"m.text"},"ts":1717693428718,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$tCvjGSOMHqbIPf-EYtmXrWCKXdxlvxlNmhMeLYP04H4"},
{"content":{"body":"Alright, thanks. I just saw a couple that looked to have been added without PRs, hence the question.","m.mentions":{},"msgtype":"m.text"},"ts":1717693518213,"senderName":"leftmostcat (UTC-7)","senderId":"@leftmostcat:matrix.org","id":"$j4gS2vbPusP5a1eIqoIOZVZmqP0oFWe9iB4WzabbghE"},
{"content":{"body":"yes, people do that, and it's acceptable, but not ideal 🙂","m.mentions":{},"msgtype":"m.text"},"ts":1717694229546,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$gCWyTQNZbWIscBjF-QIx6zAkqdVECET207mPa7F_LzE"},
{"content":{"body":"what's the difference?","m.mentions":{},"msgtype":"m.text"},"ts":1717697359417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gRfm-by6Q_kauaeL6kRHmprnQAGK5rZactUhrcmXPiw"},
{"content":{"body":"@shuyuguo:matrix.org whether people watching the repo get pinged about it or not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a> whether people watching the repo get pinged about it or not","msgtype":"m.text"},"ts":1717698079035,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$n6UTLsoRBocXFr27a5Z9unrmosJi8YSKkvARj9B5Eqk"},
{"content":{"body":"Dan Gohman brings up another good point: should we put some kind of lower bound on what we mean by \"implementation-approximated\"? Should a `Math.cos` that only returns `1` or `-1` be considered compliant?","format":"org.matrix.custom.html","formatted_body":"Dan Gohman brings up another good point: should we put some kind of lower bound on what we mean by &quot;implementation-approximated&quot;? Should a <code data-md=\"`\">Math.cos</code> that only returns <code data-md=\"`\">1</code> or <code data-md=\"`\">-1</code> be considered compliant?","msgtype":"m.text"},"ts":1717698824025,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pKN_7ll8a1McAdaECPgsImagnGRYrFPT7iJa4FHri3Q"},
{"content":{"body":"we definitely should, and we’ve talked about that in plenary multiple times - generally speaking everyone seemed positive on it, but nobody was confident about having the expertise required to do so correctly","msgtype":"m.text"},"ts":1717700963031,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NoyZNlXvOI3D_ByHCv7Eh145GhXrAOJ_XCa2kZcMSOw"},
{"content":{"body":"I frankly don't think it's worth spending time on","m.mentions":{},"msgtype":"m.text"},"ts":1717701184754,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yCZ-SCGZecFnaYysQCbY6kZ7IngkEBkxk9Ruf7tJOfk"},
{"content":{"body":"it's not like we offer a certification","m.mentions":{},"msgtype":"m.text"},"ts":1717701189169,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6rwwC0KkxEkjpq6FsaGsJcf1WOuYgiUi9Pfv2LBde-Q"},
{"content":{"body":"oh man what a great idea","m.mentions":{},"msgtype":"m.text"},"ts":1717701687774,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qpn-RyiwkbwiaO66rSjhpBurkSujTzrMIS6e1yg2-1U"},
{"content":{"body":"i want one of those holographic gold stickers","m.mentions":{},"msgtype":"m.text"},"ts":1717701695483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IN97AOtyg8pi0KRPR1M3sSo6BRrl20tEQR_ZLQcmiok"},
{"content":{"body":"> We are pleased to announce that our JavaScript engine has been officially certified as compliant with the ECMAScript (ECMA-262) specification. This certification was achieved through rigorous testing using the comprehensive Test262 suite, the official conformance test suite for the ECMAScript Language Specification maintained by TC39, the technical committee responsible for the standardization of ECMAScript.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We are pleased to announce that our JavaScript engine has been officially certified as compliant with the ECMAScript (ECMA-262) specification. This certification was achieved through rigorous testing using the comprehensive Test262 suite, the official conformance test suite for the ECMAScript Language Specification maintained by TC39, the technical committee responsible for the standardization of ECMAScript.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1717701750488,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$In2yHfeV226AU48i-cHrTKD_ujksFU7y6q0RtRpQR7s"},
{"content":{"body":"apparently there was real web compat issues in the past when Chrome made significant compromises to their trig functions in the name of speed","msgtype":"m.text"},"ts":1717702059799,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$b4742peeLiu-8Jl3WM1ZdJEC_jGV22ekZTkQ9fMxN2U"},
{"content":{"body":"so there's probably *something* that should be said about accuracy","format":"org.matrix.custom.html","formatted_body":"so there&#39;s probably <i data-md=\"*\">something</i> that should be said about accuracy","msgtype":"m.text"},"ts":1717702074730,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xdhYx_ZFiyfkeeaDvNfSvX3ocxVyu8_X6zUGA1gcPt4"},
{"content":{"body":"i agree","m.mentions":{},"msgtype":"m.text"},"ts":1717702147671,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ip8QfbF9_mCKIzvE8uxZ8hZp9rRDecyhju1lAOJbopA"},
{"content":{"body":" * i agree (and remember those compat issues viscerally)","m.mentions":{},"m.new_content":{"body":"i agree (and remember those compat issues viscerally)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ip8QfbF9_mCKIzvE8uxZ8hZp9rRDecyhju1lAOJbopA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717702157092,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vAWpr_FqxexB2LZLVyGjv4-ZTdVkZXFDrvuYINOyCRA"},
{"content":{"body":"@ljharb:matrix.org you got any links to issues?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb</a> you got any links to issues?","msgtype":"m.text"},"ts":1717702178252,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MpPAbHrPwyM-jS09xeNJzpw88rFZ1FoRFdouUFchlZs"},
{"content":{"body":"we should collect them in an ecma262 issue","msgtype":"m.text"},"ts":1717702187069,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$72_LGDhktvUACHHw-GV256VO_I6NJ-22bOVri8GBD30"},
{"content":{"body":"https://github.com/compat-table/compat-table/issues/392#issuecomment-70381406 i think?","m.mentions":{},"msgtype":"m.text"},"ts":1717702247075,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mwIwnfbZovDRiUx55T8HRLUSPkgRvHQdzRjXXNlQB58"},
{"content":{"body":"https://github.com/es-shims/es6-shim/commit/90c803f68390dd13fd5297b1e2d54d44f8dac94b is where i patched it in es6-shim","m.mentions":{},"msgtype":"m.text"},"ts":1717702258133,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AGtvdsbT5C9UozqUjBAlu6gAXn15Yq7WCXjktsJgFDY"},
{"content":{"body":"started an issue: https://github.com/tc39/ecma262/issues/3347","msgtype":"m.text"},"ts":1717702674127,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sIO6OCwhsDwP9OQYzjFBzFzgKkk58rbVH1DCEx0Egn0"}
]