[
{"content":{"body":"I only have 3 of them in my codebase. Very niche.","m.mentions":{},"msgtype":"m.text"},"ts":1717632090797,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$0cOYgJyJ6GVMAzH15sza9R68qYep2owodKQsNbt-S4s"},
{"content":{"body":"Speaking of niche.. I haven't come across a use-case for that specifically, but I have on occasion wished there was something like a `Symbol.self` for use when accessing an object's properties.\ne.g. `x[Symbol.self] === x`\n\nIt's weird that my need for this has occurred more than a few times in the past year. (Easy to get around, but still)","format":"org.matrix.custom.html","formatted_body":"<p>Speaking of niche.. I haven't come across a use-case for that specifically, but I have on occasion wished there was something like a <code>Symbol.self</code> for use when accessing an object's properties.<br>e.g. <code>x[Symbol.self] === x</code></p>\n<p>It's weird that my need for this has occurred more than a few times in the past year. (Easy to get around, but still)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1717632163748,"senderName":"whosy","senderId":"@whosy:matrix.org","id":"$-hF2xj8sxvlux3eQ8dVF55EgLkWcJiKj3wWM9HicL5U"},
{"content":{"body":"Also seems pretty niche? and since the only way for that to work would be to put it on Object.prototype I think we would not want that","m.mentions":{},"msgtype":"m.text"},"ts":1717632252041,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uh8dg__as0B6jT3LEyBGe9ZAmCKcKNowMzyicZUYKD0"},
{"content":{"body":"both because new things on Object.prototype are scary in several ways, and because it wouldn't work everywhere and it would be very annoying for `x[Symbol.self]` to just not work when `x` happens to have a null prototype","format":"org.matrix.custom.html","formatted_body":"both because new things on Object.prototype are scary in several ways, and because it wouldn't work everywhere and it would be very annoying for <code>x[Symbol.self]</code> to just not work when <code>x</code> happens to have a null prototype","m.mentions":{},"msgtype":"m.text"},"ts":1717632285076,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bayICqLRYVGtftAJvNW2A43fuHNyut7rg6FNlnbybCg"},
{"content":{"body":"@bakkot My previous assumption was that we in TC39 would be uncomfortable adding wait because we don’t have a concept of an event loop. Also we would need host integration for stuff like banning it in worklets. But I guess at this point we have other features that get at each of those things (eg Atomics.waitAsync)","msgtype":"m.text"},"ts":1717650824183,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CdAv5UqLwEgTqhRXtpw97eQkZdgB0sk0nL7VC4U-0Hw"},
{"content":{"body":"But at the same time I don’t see a huge disadvantage to using the scheduler namespace (that’s all it amounts to; it’s not like the scheduler object has state) given that we are trying to share APIs across web and non-web environments, WinterCG-style","msgtype":"m.text"},"ts":1717650949161,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ATqb_Pk82RbItPVqcVnOz0-EE7JPDDG5qGe1jnDUymM"},
{"content":{"body":"Are there particular design mistakes we might make with scheduler?","msgtype":"m.text"},"ts":1717650949784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70"},
{"content":{"body":"I have not thought about scheduler at all and trust the people working on it to do it reasonably well","m.mentions":{},"msgtype":"m.text"},"ts":1717651130440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9l3OxuQATKKhdJfBULbnVXdcSzNCBNshYTqYewnaVSg"},
{"content":{"body":"but \"I want to wait for a period of time\" is a much more primitive operation than the rest of that API so it seems a shame to require people to think about the much more complex thing in order to get access to the simple thing","m.mentions":{},"msgtype":"m.text"},"ts":1717651167799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-rnutc9xunZu05xUh0ZYPlgmDwxupei-4TGQZQWJq5Y"},
{"content":{"body":"So I am curious how you feel about the situation with getting random bytes with crypto, which seems like an analogous situation. In both cases, there is just a funny lowercase namespace, no state in the object, and it is possible to implement just that method on the object without the rest of the API if you are subsetting the web platform.","msgtype":"m.text"},"ts":1717651987811,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6PsMUEED-F9cE2us7Qobt6iYcbJYgSJhUz91j8alGtU"},
{"content":{"body":"it may be the security person in me but `crypto` feels like a very reasonable place to be reaching for a large quantity of random bytes","format":"org.matrix.custom.html","formatted_body":"it may be the security person in me but <code>crypto</code> feels like a very reasonable place to be reaching for a large quantity of random bytes","m.mentions":{},"msgtype":"m.text"},"ts":1717653814768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hcfYGacjwhghstJr8r-p96zl7FyzG_kp6MvtP2wZj9c"},
{"content":{"body":"my problem with `scheduler` is not that it's a namespace per se, just that the namespace is kind of a powertool which is likely to be confusing to people who don't need it, whereas `crypto` it's pretty obvious what it does and what it's for ","format":"org.matrix.custom.html","formatted_body":"my problem with <code>scheduler</code> is not that it's a namespace per se, just that the namespace is kind of a powertool which is likely to be confusing to people who don't need it, whereas <code>crypto</code> it's pretty obvious what it does and what it's for","m.mentions":{},"msgtype":"m.text"},"ts":1717653876782,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UTkIJxEovL_MnKE4bQ_EfHMizMsOYWlXrpQzJ2SyR9I"}
]