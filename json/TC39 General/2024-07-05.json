[
{"content":{"body":"> <@softwarechris:matrix.org> the longer answer is that in order to get some flavor of `sleep()`, you would have to add various other things in the language first in order to support it\n\nwell, we already have timers in the spec, in the Atomics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$mMV31dlaZatm4taXRjwJ87qDKb708RbtLaSGV7EG6lI\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>the longer answer is that in order to get some flavor of <code>sleep()</code>, you would have to add various other things in the language first in order to support it</blockquote></mx-reply>well, we already have timers in the spec, in the Atomics.","m.relates_to":{"m.in_reply_to":{"event_id":"$mMV31dlaZatm4taXRjwJ87qDKb708RbtLaSGV7EG6lI"}},"msgtype":"m.text"},"ts":1720149571064,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w44uI5gpgpbro9_v8wfMefLdPyQQ-vB0zJIIEnEQqjk"},
{"content":{"body":"> <@sirisian:matrix.org> Maybe I'm blanking since I forget proposals. Has anyone suggested an operator like f??.() that is equivalent to `typeof f === 'function' ? f() : f` ?\n\nrather than this, I have a lot of code doing things like `expr ? f(expr) : undefined`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$wSFmb9tEAEYvicE9ipOyCe9W9w8-OdyBa7CXr_U3uzE\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Maybe I'm blanking since I forget proposals. Has anyone suggested an operator like f??.() that is equivalent to <code>typeof f === 'function' ? f() : f</code> ?</blockquote></mx-reply>rather than this, I have a lot of code doing things like <code>expr ? f(expr) : undefined</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$wSFmb9tEAEYvicE9ipOyCe9W9w8-OdyBa7CXr_U3uzE"}},"msgtype":"m.text"},"ts":1720149640816,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NcEPCiqyvzv_ux4xbdYxTNjmzN5_yuUItAEnPNfpEP0"},
{"content":{"body":"> <@littledan:matrix.org> Are there particular design mistakes we might make with scheduler?\n\nsince `.wait` is not available for now, I don't think `await scheduler.postTask(() => {}, { delay: time })` is better in any sense than `await new Promise(r => setTimeout(r, time))` in this use case. The old classic one is even shorter.\n\n```js\nawait scheduler.postTask(() => {}, { delay: time })\nawait new Promise(r => setTimeout(r, time))\nawait scheduler.wait(time) // but it is not here yet!\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Are there particular design mistakes we might make with scheduler?</blockquote></mx-reply><p>since <code>.wait</code> is not available for now, I don't think <code>await scheduler.postTask(() =&gt; {}, { delay: time })</code> is better in any sense than <code>await new Promise(r =&gt; setTimeout(r, time))</code> in this use case. The old classic one is even shorter.</p><pre><code class=\"language-js\">await scheduler.postTask(() =&gt; {}, { delay: time })\nawait new Promise(r =&gt; setTimeout(r, time))\nawait scheduler.wait(time) // but it is not here yet!\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70"}},"msgtype":"m.text"},"ts":1720150020445,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SI64-x4T05yQyo532AMNtlkJypcv5803nT_beTvixrE"},
{"content":{"body":"> <@shaylew:matrix.org> I wonder how far just pattern matching gets you in that domain. (might be asking a lot from the type inference)\n\na lot, but we may not get all the features mentioned below (since the committee think it contains too much things)\n\n```js\nmatch (userData) {\n    when { type: 'a', field: Number and > 0 and < 100 }: ...\n    default: ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KhHRVUMeeUMJrjrwDSjtOnBbRSIeDnpRCxix9Te5a2s\">In reply to</a> <a href=\"https://matrix.to/#/@shaylew:matrix.org\">@shaylew:matrix.org</a><br>I wonder how far just pattern matching gets you in that domain. (might be asking a lot from the type inference)</blockquote></mx-reply><p>a lot, but we may not get all the features mentioned below (since the committee think it contains too much things)</p><pre><code class=\"language-js\">match (userData) {\n    when { type: 'a', field: Number and &gt; 0 and &lt; 100 }: ...\n    default: ...\n}\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$KhHRVUMeeUMJrjrwDSjtOnBbRSIeDnpRCxix9Te5a2s"}},"msgtype":"m.text"},"ts":1720150365813,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JA17hIPmsAhGYcSFUrBh9Ja3X1idMLaDwnpthNIg6y4"},
{"content":{"body":"> <@dalechyn:matrix.org> Hi folks! Great seeing TC39 being an open and collaborative space!\n> I joined here to express the problems and possible solutions over JSON serialization when it comes to `BigInt` type.\n> \n> I originally come from Web3 where we are dealing with `uint256` – 32byte unsigned integer values and folks from Web3 space used to align on third party libraries to support numbers that big (https://github.com/GoogleChromeLabs/jsbi) until the official support for `BigInt`s came live in 2020!\n> There have been many editions of ECMA-262 published since 1999, and to my belief it needs an upgrade to handle `BigInt` types.\n> \n> I will be honest I did not spend that much time to research the efforts of handling such but I've seen many discussions evolving around somehow \"smartly\" detecting wether a number value should be parsed as a `BigInt` or `Number`. I don't believe that those are correct nor backwards compatible.\n> \n> What if JSON as a whole could retrieve an upgrade to support BigInt literals ending with \"n\", as it does now in JS?\n> \n> ```json\n> {\n>   \"value\": 1337n\n> }\n> ```\n> \n> I'd like to hear your thoughts wether you think if this possible and if so, what kind of backwards incompatibility issues this might have!\n> Regarding the latter I don't think this will introduce any issues as this addition doesn't change the serialization behavior of fields of other types – but instead introduces a new one.\n> I understand that making an addition like this is gonna introduce chain of changes of parsing JSON in different programming languages, but I believe this needs a review.\n> \n> \n\nJSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.\n\n```js\nJSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n }, (key, val) => typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vk4AHzbPY1BSDke1baj05Nlllom9yNAWiRw8TyEX_X0\">In reply to</a> <a href=\"https://matrix.to/#/@dalechyn:matrix.org\">@dalechyn:matrix.org</a><br><p>Hi folks! Great seeing TC39 being an open and collaborative space!<br>I joined here to express the problems and possible solutions over JSON serialization when it comes to <code>BigInt</code> type.</p>\n<p>I originally come from Web3 where we are dealing with <code>uint256</code> – 32byte unsigned integer values and folks from Web3 space used to align on third party libraries to support numbers that big (https://github.com/GoogleChromeLabs/jsbi) until the official support for <code>BigInt</code>s came live in 2020!<br>There have been many editions of ECMA-262 published since 1999, and to my belief it needs an upgrade to handle <code>BigInt</code> types.</p>\n<p>I will be honest I did not spend that much time to research the efforts of handling such but I've seen many discussions evolving around somehow \"smartly\" detecting wether a number value should be parsed as a <code>BigInt</code> or <code>Number</code>. I don't believe that those are correct nor backwards compatible.</p>\n<p>What if JSON as a whole could retrieve an upgrade to support BigInt literals ending with \"n\", as it does now in JS?</p>\n<pre><code class=\"language-json\">{\n  \"value\": 1337n\n}\n</code></pre>\n<p>I'd like to hear your thoughts wether you think if this possible and if so, what kind of backwards incompatibility issues this might have!<br>Regarding the latter I don't think this will introduce any issues as this addition doesn't change the serialization behavior of fields of other types – but instead introduces a new one.<br>I understand that making an addition like this is gonna introduce chain of changes of parsing JSON in different programming languages, but I believe this needs a review.</p>\n</blockquote></mx-reply><p>JSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.</p><pre><code class=\"language-js\">JSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n }, (key, val) =&gt; typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$vk4AHzbPY1BSDke1baj05Nlllom9yNAWiRw8TyEX_X0"}},"msgtype":"m.text"},"ts":1720150936426,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4qhZnAP3yLq52Yns7BaZ_GpmV-cNLRkk9_-GHjlNmi4"},
{"content":{"body":"* JSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.\n\n```js\nJSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n\n }, (key, val) => typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n```","format":"org.matrix.custom.html","formatted_body":"* <p>JSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.</p><pre><code class=\"language-js\">JSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n\n }, (key, val) =&gt; typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n</code></pre>","m.new_content":{"body":"JSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.\n\n```js\nJSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n\n }, (key, val) => typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n```","format":"org.matrix.custom.html","formatted_body":"<p>JSON numbers don't have a limit on numbers, you can already represent bigint numbers. you just need a special serializer.</p><pre><code class=\"language-js\">JSON.stringify({ x: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999n\n }, (key, val) =&gt; typeof val === 'bigint' ? JSON.rawJSON(val) : val)\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$4qhZnAP3yLq52Yns7BaZ_GpmV-cNLRkk9_-GHjlNmi4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720151895777,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QDdjTnQnKg70ejsyw1_IxQSeqhbe-zIBKVq9xvdDadk"}
]