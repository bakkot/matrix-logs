[
{"content":{"body":"> <@softwarechris:matrix.org> the longer answer is that in order to get some flavor of `sleep()`, you would have to add various other things in the language first in order to support it\n\nwell, we already have timers in the spec, in the Atomics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$mMV31dlaZatm4taXRjwJ87qDKb708RbtLaSGV7EG6lI\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>the longer answer is that in order to get some flavor of <code>sleep()</code>, you would have to add various other things in the language first in order to support it</blockquote></mx-reply>well, we already have timers in the spec, in the Atomics.","m.relates_to":{"m.in_reply_to":{"event_id":"$mMV31dlaZatm4taXRjwJ87qDKb708RbtLaSGV7EG6lI"}},"msgtype":"m.text"},"ts":1720149571064,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w44uI5gpgpbro9_v8wfMefLdPyQQ-vB0zJIIEnEQqjk"},
{"content":{"body":"> <@sirisian:matrix.org> Maybe I'm blanking since I forget proposals. Has anyone suggested an operator like f??.() that is equivalent to `typeof f === 'function' ? f() : f` ?\n\nrather than this, I have a lot of code doing things like `expr ? f(expr) : undefined`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$wSFmb9tEAEYvicE9ipOyCe9W9w8-OdyBa7CXr_U3uzE\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Maybe I'm blanking since I forget proposals. Has anyone suggested an operator like f??.() that is equivalent to <code>typeof f === 'function' ? f() : f</code> ?</blockquote></mx-reply>rather than this, I have a lot of code doing things like <code>expr ? f(expr) : undefined</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$wSFmb9tEAEYvicE9ipOyCe9W9w8-OdyBa7CXr_U3uzE"}},"msgtype":"m.text"},"ts":1720149640816,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NcEPCiqyvzv_ux4xbdYxTNjmzN5_yuUItAEnPNfpEP0"},
{"content":{"body":"> <@littledan:matrix.org> Are there particular design mistakes we might make with scheduler?\n\nsince `.wait` is not available for now, I don't think `await scheduler.postTask(() => {}, { delay: time })` is better in any sense than `await new Promise(r => setTimeout(r, time))` in this use case. The old classic one is even shorter.\n\n```js\nawait scheduler.postTask(() => {}, { delay: time })\nawait new Promise(r => setTimeout(r, time))\nawait scheduler.wait(time) // but it is not here yet!\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Are there particular design mistakes we might make with scheduler?</blockquote></mx-reply><p>since <code>.wait</code> is not available for now, I don't think <code>await scheduler.postTask(() =&gt; {}, { delay: time })</code> is better in any sense than <code>await new Promise(r =&gt; setTimeout(r, time))</code> in this use case. The old classic one is even shorter.</p><pre><code class=\"language-js\">await scheduler.postTask(() =&gt; {}, { delay: time })\nawait new Promise(r =&gt; setTimeout(r, time))\nawait scheduler.wait(time) // but it is not here yet!\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$vO8BTtILslG-aUBJyJ_rYNNMeL2Y_Nn3FiNyYZuQp70"}},"msgtype":"m.text"},"ts":1720150020445,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SI64-x4T05yQyo532AMNtlkJypcv5803nT_beTvixrE"},
{"content":{"body":"> <@shaylew:matrix.org> I wonder how far just pattern matching gets you in that domain. (might be asking a lot from the type inference)\n\na lot, but we may not get all the features mentioned below (since the committee think it contains too much things)\n\n```js\nmatch (userData) {\n    when { type: 'a', field: Number and > 0 and < 100 }: ...\n    default: ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KhHRVUMeeUMJrjrwDSjtOnBbRSIeDnpRCxix9Te5a2s\">In reply to</a> <a href=\"https://matrix.to/#/@shaylew:matrix.org\">@shaylew:matrix.org</a><br>I wonder how far just pattern matching gets you in that domain. (might be asking a lot from the type inference)</blockquote></mx-reply><p>a lot, but we may not get all the features mentioned below (since the committee think it contains too much things)</p><pre><code class=\"language-js\">match (userData) {\n    when { type: 'a', field: Number and &gt; 0 and &lt; 100 }: ...\n    default: ...\n}\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$KhHRVUMeeUMJrjrwDSjtOnBbRSIeDnpRCxix9Te5a2s"}},"msgtype":"m.text"},"ts":1720150365813,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JA17hIPmsAhGYcSFUrBh9Ja3X1idMLaDwnpthNIg6y4"}
]