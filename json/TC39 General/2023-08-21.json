[
{"content":{"body":"> <@tewuzij:tzchat.org> What is the TC39 space id on Matrix?\n\nhttps://matrix.to/#/#tc39-space:matrix.org","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$iqR3a0GG5ZpB5YhLuQnksNxuf2D_QFfpwoxO8o453BE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tewuzij:tzchat.org\">@tewuzij:tzchat.org</a><br>What is the TC39 space id on Matrix?</blockquote></mx-reply>https://matrix.to/#/#tc39-space:matrix.org","m.relates_to":{"m.in_reply_to":{"event_id":"$iqR3a0GG5ZpB5YhLuQnksNxuf2D_QFfpwoxO8o453BE"}},"msgtype":"m.text"},"ts":1692627809333,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$OtATYnRJI7wK5aMpGdjx34XxaiL7s6zVu6GsdKl1rFg"},
{"content":{"body":"Hey there! üëã \nI had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.\n\nHere is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables\nPlease correct me if I'm wrong somewhere and I'm open for the discussion.\nThanks! üôè\n\n```javascript\nfunction func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>Hey there! üëã<br>I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.</p>\n<p>Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables<br>Please correct me if I'm wrong somewhere and I'm open for the discussion.<br>Thanks! üôè</p>\n<pre><code class=\"language-javascript\">function func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n</code></pre>\n","msgtype":"m.text"},"ts":1692655123458,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$Cxq9ISESOg15QYL5S_INZhqMfFw39kmk4yCo-dKc9NA"},
{"content":{"body":" * Hey there! üëã\nI had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.\n\nHere is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables\n\nPlease correct me if I'm wrong somewhere and I'm open for the discussion.\nThanks! üôè\n\n```javascript\nfunction func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Hey there! üëã<br>I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.</p>\n<p>Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables</p>\n<p>Please correct me if I'm wrong somewhere and I'm open for the discussion.<br>Thanks! üôè</p>\n<pre><code class=\"language-javascript\">function func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n</code></pre>\n","m.new_content":{"body":"Hey there! üëã\nI had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.\n\nHere is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables\n\nPlease correct me if I'm wrong somewhere and I'm open for the discussion.\nThanks! üôè\n\n```javascript\nfunction func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>Hey there! üëã<br>I had an idea for a long time related to static variables inside the functions like how it's implemented in other low-level languages like C++ and I finally and I finally decided to start describing the document. Unfortunately, I have not yet figured out exactly how to describe it correctly and where I should publish it, but I found this chat in the CONTRIBUTING document of the ecma262 repo.</p>\n<p>Here is my proposal: https://github.com/yehoryatskevych/proposal-function-static-variables</p>\n<p>Please correct me if I'm wrong somewhere and I'm open for the discussion.<br>Thanks! üôè</p>\n<pre><code class=\"language-javascript\">function func() {\n    static let isFirstCall = true;\n    static let counter = 0;\n\n    if (isFirstCall) {\n        isFirstCall = false;\n        console.log('Static variables initialized!');\n    }\n\n    console.log(\"Counter:\", counter);\n\n    counter++;\n}\n\nfunc(); // OUT: \"Static variables initialized!\", \"Counter: 0\"\nfunc(); // OUT: \"Counter: 1\"\nfunc(); // OUT: \"Counter: 2\"\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Cxq9ISESOg15QYL5S_INZhqMfFw39kmk4yCo-dKc9NA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692655150764,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$x6cOw8TZfkPaOHB63dudayql5XJ-MVeqhquFZpDFQg8"},
{"content":{"body":"Yehor Yatskevych the most important part of any proposal is to explain what problem you're solving, compared to what you'd currently do.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yehoryatskevych:matrix.org\">Yehor Yatskevych</a> the most important part of any proposal is to explain what problem you're solving, compared to what you'd currently do.","msgtype":"m.text"},"ts":1692655704988,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ajMv28p7L4Kw_UY8ttoX_GgjrQBuM8w5aWLGXAlS4Ks"},
{"content":{"body":"What's the problem this is solving? How would this work better than:\n```\nlet isFirstCall = true;\nlet counter = 0;\nfunction func() {\n  ‚Ä¶\n```\n?","format":"org.matrix.custom.html","formatted_body":"<p>What's the problem this is solving? How would this work better than:</p>\n<pre><code>let isFirstCall = true;\nlet counter = 0;\nfunction func() {\n  ‚Ä¶\n</code></pre>\n<p>?</p>\n","msgtype":"m.text"},"ts":1692655728762,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g_FLnv06gW60GXrow7IP36APAo0KX0SSjSD28G-WswA"},
{"content":{"body":"Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?","format":"org.matrix.custom.html","formatted_body":"Right now the thing you'd do is use a closure, and hoist the <code>static</code> variables out of the closure. How is your suggestion better than that?","msgtype":"m.text"},"ts":1692655728878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x4KVsTikmjkyd9YUiQgAo0RZvtQJBbBjsxINmSkNWFU"},
{"content":{"body":"(also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )","msgtype":"m.text"},"ts":1692655993187,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E5xp3Ub3xTH1k1O0UPiCUoR3L6saK9Tim_oPboUaMO0"},
{"content":{"body":"> <@bakkot:matrix.org> Right now the thing you'd do is use a closure, and hoist the `static` variables out of the closure. How is your suggestion better than that?\n\nI see, I'll try to write about the problem more, thanks for your answer!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$x4KVsTikmjkyd9YUiQgAo0RZvtQJBbBjsxINmSkNWFU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Right now the thing you'd do is use a closure, and hoist the <code>static</code> variables out of the closure. How is your suggestion better than that?</blockquote></mx-reply>I see, I'll try to write about the problem more, thanks for your answer!","m.relates_to":{"m.in_reply_to":{"event_id":"$x4KVsTikmjkyd9YUiQgAo0RZvtQJBbBjsxINmSkNWFU"}},"msgtype":"m.text"},"ts":1692656013820,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$BfwtQiQGilZ4TxkenOAdjXhNnSnI7I3E4zdswM-_jfE"},
{"content":{"body":"> <@bakkot:matrix.org> (also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it's pretty brief https://es.discourse.group/t/c-style-static-variables/511 )\n\nOh, let me take a look! Thanks!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$E5xp3Ub3xTH1k1O0UPiCUoR3L6saK9Tim_oPboUaMO0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(also the main place suggestions go is the discourse; in this case this exact thing was proposed a few years ago; you may find the discussion helpful though it&#39;s pretty brief https://es.discourse.group/t/c-style-static-variables/511 )</blockquote></mx-reply>Oh, let me take a look! Thanks!","m.relates_to":{"m.in_reply_to":{"event_id":"$E5xp3Ub3xTH1k1O0UPiCUoR3L6saK9Tim_oPboUaMO0"}},"msgtype":"m.text"},"ts":1692656103081,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$6RMM7VUZq_sMIrkXk_BEBwawfgFKTMK2ubKn3qEbIVM"},
{"content":{"body":"> <@ljharb:matrix.org> What's the problem this is solving? How would this work better than:\n> ```\n> let isFirstCall = true;\n> let counter = 0;\n> function func() {\n>   ‚Ä¶\n> ```\n> ?\n\nBetter, because functions can have their own state independently from the global context and remove the problem with naming variables and name conflicts, also the function can be easily refactored and moved to another file without wasting time on finding all variables the function depends on.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$g_FLnv06gW60GXrow7IP36APAo0KX0SSjSD28G-WswA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>What's the problem this is solving? How would this work better than:</p>\n<pre><code>let isFirstCall = true;\nlet counter = 0;\nfunction func() {\n  ‚Ä¶\n</code></pre>\n<p>?</p>\n</blockquote></mx-reply>Better, because functions can have their own state independently from the global context and remove the problem with naming variables and name conflicts, also the function can be easily refactored and moved to another file without wasting time on finding all variables the function depends on.","m.relates_to":{"m.in_reply_to":{"event_id":"$g_FLnv06gW60GXrow7IP36APAo0KX0SSjSD28G-WswA"}},"msgtype":"m.text"},"ts":1692656301931,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$3fiKjZzv3j82XKDOtCh8k4cP2tCH5nHS1wnMKZPyCIE"},
{"content":{"body":"If it's just about encapsulation, you can do that pretty easily:\n\n```\nlet fn = (() => {\n  let isFirstCall = true;\n  let counter = 0;\n  return function fn() {...};\n})();\n```","format":"org.matrix.custom.html","formatted_body":"<p>If it's just about encapsulation, you can do that pretty easily:</p>\n<pre><code>let fn = (() =&gt; {\n  let isFirstCall = true;\n  let counter = 0;\n  return function fn() {...};\n})();\n</code></pre>\n","msgtype":"m.text"},"ts":1692656370883,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AsIyBZyQqK9bB9VlNRSTFJldbjs5JnswSn2BOIklvQk"},
{"content":{"body":"That would get even simpler with https://github.com/tc39/proposal-do-expressions/, if that ends up happening","msgtype":"m.text"},"ts":1692656398578,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OyAZdWLjkByc2xxx5CVhOpvkiB5cJmvk-OLUveMsDy4"},
{"content":{"body":"> <@bakkot:matrix.org> If it's just about encapsulation, you can do that pretty easily:\n> \n> ```\n> let fn = (() => {\n>   let isFirstCall = true;\n>   let counter = 0;\n>   return function fn() {...};\n> })();\n> ```\n\nof course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$AsIyBZyQqK9bB9VlNRSTFJldbjs5JnswSn2BOIklvQk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>If it's just about encapsulation, you can do that pretty easily:</p>\n<pre><code>let fn = (() =&gt; {\n  let isFirstCall = true;\n  let counter = 0;\n  return function fn() {...};\n})();\n</code></pre>\n</blockquote></mx-reply>of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame.","m.relates_to":{"m.in_reply_to":{"event_id":"$AsIyBZyQqK9bB9VlNRSTFJldbjs5JnswSn2BOIklvQk"}},"msgtype":"m.text"},"ts":1692656650580,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$yRqKBcKEP3fEopsBE-PBjEFHcxZLi1eHOiSy1nqGInM"},
{"content":{"body":"I don't think it's especially dirty code? And it works fine for methods, not sure what you mean there.","msgtype":"m.text"},"ts":1692656688225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QFavKiQCesWzWzAKUvUvGuMVhpY1yNW2MHHnr5d5nzo"},
{"content":{"body":" * of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$AsIyBZyQqK9bB9VlNRSTFJldbjs5JnswSn2BOIklvQk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>If it's just about encapsulation, you can do that pretty easily:</p>\n<pre><code>let fn = (() =&gt; {\n  let isFirstCall = true;\n  let counter = 0;\n  return function fn() {...};\n})();\n</code></pre>\n</blockquote></mx-reply> * of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.","m.new_content":{"body":"of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.","format":"org.matrix.custom.html","formatted_body":"of course, that's how you can do it right now, but that's dirty code and it is already problematic to use this in methods. At the moment I'm looking for solutions and I'm trying to create a concept in which JS can be used as scripting engine for the gamedev and static variables is extremely useful for \"update\" and other functions which should be called every frame. This is also applicable for other high performance programs and recursion to avoid unnecessary allocations.","msgtype":"m.text"},"m.relates_to":{"event_id":"$yRqKBcKEP3fEopsBE-PBjEFHcxZLi1eHOiSy1nqGInM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692656701023,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$nXhL-P57ARPoUj2hvVpmV1_xSAkir9a_NYL6LOekuyA"},
{"content":{"body":"Closure\n```javascript\nGameEvents.subscribe('frame', (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(position).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n```\n\n```javascript\nconst onServerFrame = (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(position).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n```\n\nVersus static proposal.\n\n```javascript\nGameEvents.subscribe('frame', () => {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(position).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n```\n```javascript\nGameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(position).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n```\n\nBetter readability, function declaration pattern support, less code","format":"org.matrix.custom.html","formatted_body":"<p>Closure</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(position).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n</code></pre>\n<pre><code class=\"language-javascript\">const onServerFrame = (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(position).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n</code></pre>\n<p>Versus static proposal.</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', () =&gt; {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(position).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n</code></pre>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(position).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n</code></pre>\n<p>Better readability, function declaration pattern support, less code</p>\n","msgtype":"m.text"},"ts":1692657466861,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$7sxr72ujHPjvexuGTRJ7nXlEUF52XYsFVM_bCHiQWVA"},
{"content":{"body":" * Closure\n\n```javascript\nGameEvents.subscribe('frame', (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n```\n\n```javascript\nconst onServerFrame = (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n```\n\nVersus static proposal.\n\n```javascript\nGameEvents.subscribe('frame', () => {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n```\n\n```javascript\nGameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n```\n\nBetter readability, function declaration pattern support, less code","format":"org.matrix.custom.html","formatted_body":" * <p>Closure</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n</code></pre>\n<pre><code class=\"language-javascript\">const onServerFrame = (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n</code></pre>\n<p>Versus static proposal.</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', () =&gt; {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n</code></pre>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n</code></pre>\n<p>Better readability, function declaration pattern support, less code</p>\n","m.new_content":{"body":"Closure\n\n```javascript\nGameEvents.subscribe('frame', (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n```\n\n```javascript\nconst onServerFrame = (\n    () => {\n        let velocity = new Vec3();\n\n        return () => {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n```\n\nVersus static proposal.\n\n```javascript\nGameEvents.subscribe('frame', () => {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n```\n\n```javascript\nGameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n```\n\nBetter readability, function declaration pattern support, less code","format":"org.matrix.custom.html","formatted_body":"<p>Closure</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)());\n</code></pre>\n<pre><code class=\"language-javascript\">const onServerFrame = (\n    () =&gt; {\n        let velocity = new Vec3();\n\n        return () =&gt; {\n            for (player of getPlayers()) {\n                const position = player.getPosition();\n                const dir = player.getAngles().toVector();\n                velocity.set(0, 0, 0).addScaled(dir, 200);\n                player.setVelocity(velocity);\n            }\n        };\n    }\n)();\n\nGameEvents.subscribe('frame', onServerFrame);\n</code></pre>\n<p>Versus static proposal.</p>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', () =&gt; {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n});\n</code></pre>\n<pre><code class=\"language-javascript\">GameEvents.subscribe('frame', onServerFrame);\n\nfunction onServerFrame() {\n    static let velocity = new Vec3();\n\n    for (player of getPlayers()) {\n        const position = player.getPosition();\n        const dir = player.getAngles().toVector();\n        velocity.set(0, 0, 0).addScaled(dir, 200);\n        player.setVelocity(velocity);\n    }\n}\n</code></pre>\n<p>Better readability, function declaration pattern support, less code</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$7sxr72ujHPjvexuGTRJ7nXlEUF52XYsFVM_bCHiQWVA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692657540675,"senderName":"Yehor Yatskevych","senderId":"@yehoryatskevych:matrix.org","id":"$3emzPqTYJcyuWEK30-GqUTZUs35h9EZD9_Ohp3qlU5Q"}
]