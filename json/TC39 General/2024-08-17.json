[
{"content":{"body":"> <@kriskowal:aelf.land> Also, `for (var i = 0, l = array.length; i < l; i++) {`, which remains the faster pattern on XS, fwiw.\n\n`for..of` is fastest in my engine lol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$0F65QJt-RoU88a5xE-aGcOtyxsPskIfNnHbFzoYA6ko\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>Also, <code>for (var i = 0, l = array.length; i &lt; l; i++) {</code>, which remains the faster pattern on XS, fwiw.</blockquote></mx-reply><p><code>for..of</code> is fastest in my engine lol</p>\n","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0F65QJt-RoU88a5xE-aGcOtyxsPskIfNnHbFzoYA6ko"}},"msgtype":"m.text"},"ts":1723903696144,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$1rZvoqFymctkN9hobMd4WMFHE1DX9QsECJZU3PpEBsE"},
{"content":{"body":"> <@canadahonk:matrix.org> `for..of` is fastest in my engine lol\n\nI should check, that might be the case for XS. Just, there is no loop optimization around a constant guard in XS. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%241rZvoqFymctkN9hobMd4WMFHE1DX9QsECJZU3PpEBsE\">In reply to</a> <a href=\"https://matrix.to/#/@canadahonk:matrix.org\">@canadahonk:matrix.org</a><br><p><code>for..of</code> is fastest in my engine lol</p>\n</blockquote></mx-reply>I should check, that might be the case for XS. Just, there is no loop optimization around a constant guard in XS.","m.relates_to":{"m.in_reply_to":{"event_id":"$1rZvoqFymctkN9hobMd4WMFHE1DX9QsECJZU3PpEBsE"}},"msgtype":"m.text"},"ts":1723911333018,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$3XAUqNvfSoqs5K_C2Wo4NXYlPFRGMtZFiLz8DsixPIo"},
{"content":{"body":"I just tested `i < l` vs. `i < arr.length` vs. `for..of` over a 500k array of numbers across implementations on amd64 (excluding Hermes for lack of async function support that my tool currently requires):\n* GraalJS and SpiderMonkey and V8 all favor the first two forms about equally, and it's much faster than `for..of` (8x for V8, 5x for the other two)\n* in JSC, `i < l` is about 2.5x the speed of both `i < arr.length` and `for..of` (but the former is about 10% faster than the latter)\n* in XS, `i < l` is almost 50% faster than `i < arr.length`, which is almost 50% faster than `for..of`\n* in QuickJS, `for..of` is about 12% faster than `i < l` and 35% faster than `i < arr.length` (the only tested implementation that favors `for..of`)\n* in absolute terms, V8 is about 2 times faster than JSC, which is about two times faster than SM, which is almost 3 times faster than GraalJS, which is almost 10 times faster than QuickJS, which is almost 2 times faster than XS","format":"org.matrix.custom.html","formatted_body":"<p>I just tested <code>i &lt; l</code> vs. <code>i &lt; arr.length</code> vs. <code>for..of</code> over a 500k array of numbers across implementations on amd64 (excluding Hermes for lack of async function support that my tool currently requires):</p>\n<ul>\n<li>GraalJS and SpiderMonkey and V8 all favor the first two forms about equally, and it's much faster than <code>for..of</code> (8x for V8, 5x for the other two)</li>\n<li>in JSC, <code>i &lt; l</code> is about 2.5x the speed of both <code>i &lt; arr.length</code> and <code>for..of</code> (but the former is about 10% faster than the latter)</li>\n<li>in XS, <code>i &lt; l</code> is almost 50% faster than <code>i &lt; arr.length</code>, which is almost 50% faster than <code>for..of</code></li>\n<li>in QuickJS, <code>for..of</code> is about 12% faster than <code>i &lt; l</code> and 35% faster than <code>i &lt; arr.length</code> (the only tested implementation that favors <code>for..of</code>)</li>\n<li>in absolute terms, V8 is about 2 times faster than JSC, which is about two times faster than SM, which is almost 3 times faster than GraalJS, which is almost 10 times faster than QuickJS, which is almost 2 times faster than XS</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723922280093,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$-4p0udkoVEG2oDJRDLbzekA9jJT4xwoQnmmLJ7R75RU"}
]