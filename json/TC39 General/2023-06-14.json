[
{"content":{"body":"if mutation is desired to be avoided, `toEmpty()` could be used, but then its essentially `= []` and falls under the same issues as it, so it becomes worthless","format":"org.matrix.custom.html","formatted_body":"if mutation is desired to be avoided, <code>toEmpty()</code> could be used, but then its essentially <code>= []</code> and falls under the same issues as it, so it becomes worthless","msgtype":"m.text"},"ts":1686701016561,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$tHOc_U_bVcIonIlAyKVzjc3D0Z9ar6ry3etKZA_TZTI"},
{"content":{"body":"Symmetry with other languages is generally something I'm in favor of when designing new features but is not in itself adequate reason to add a new feature when there is already a fine way of accomplishing the same thing.","msgtype":"m.text"},"ts":1686701234940,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZSRtprTECzbszEVZ2po5-anDn9-hplmfQrZ1Qv_rmqA"},
{"content":{"body":"tbh I don't understand the reasoning against adding methods to `Array.prototype`, or rather I couldn't even find one","format":"org.matrix.custom.html","formatted_body":"tbh I don't understand the reasoning against adding methods to <code>Array.prototype</code>, or rather I couldn't even find one","msgtype":"m.text"},"ts":1686703750783,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$uyU5NnPrKkCopEfrc7fJI2J_qrrzC7AWqK-78A7Xg9Q"},
{"content":{"body":"what was linked were *statements* of Mozilla's (and them only) stance against them, with no actual backstory on the reasoning","format":"org.matrix.custom.html","formatted_body":"what was linked were <em>statements</em> of Mozilla's (and them only) stance against them, with no actual backstory on the reasoning","msgtype":"m.text"},"ts":1686703787227,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$XCl5mh3Axq9IfvxTK1KaQ5SDa1CILEfrV6Dws5v-UpY"},
{"content":{"body":"the reason was that adding methods with reasonable names breaks websites","msgtype":"m.text"},"ts":1686704065316,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pz6WstlICI6x79V7mtFuXgjYpiy2VqwWnzgOul2Vo_A"},
{"content":{"body":"e.g. we tried to add `groupBy` and that broke stuff, and then we tried `group` instead and that broke other stuff","format":"org.matrix.custom.html","formatted_body":"e.g. we tried to add <code>groupBy</code> and that broke stuff, and then we tried <code>group</code> instead and that broke other stuff","msgtype":"m.text"},"ts":1686704084019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CQkUNREYLovhU9xWCqAtVmEPRQOSvGDbcLTfbI0wNXo"},
{"content":{"body":"and the breakage is often quite subtle","msgtype":"m.text"},"ts":1686704090282,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1VZYP37mf7hLaMAt7_ox1WCkYqRfMFvH-PyrDfYl9Ww"},
{"content":{"body":"this is a bad experience for everyone and Mozilla would like to avoid repeating that experience","msgtype":"m.text"},"ts":1686704104692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yS4w3cT4CgDhZ_jLj6FOWN3xZtNQ-KBcjK1LfC-96ow"},
{"content":{"body":"Chrome agrees with Mozilla on this btw","msgtype":"m.text"},"ts":1686704227718,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FzQZleCleTN818f4MvZbqBGgMQhReIK5vzq08S770eQ"},
{"content":{"body":"how does it breaks websites to add properties that never existed before?","msgtype":"m.text"},"ts":1686704599837,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$YqPFjo4Xp9Q_feZEgkH3rD2Zb0q5egNXpgnZOyxMYQ4"},
{"content":{"body":"many ways, one particular frustrating way was that there were uses of `Array` instances as hash maps, and `group` was being used as a key","format":"org.matrix.custom.html","formatted_body":"many ways, one particular frustrating way was that there were uses of <code>Array</code> instances as hash maps, and <code>group</code> was being used as a key","msgtype":"m.text"},"ts":1686704792997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WvKuB6zkX7XgVeISPO2tAXHXnGpiSkukcyaWd7iYFSM"},
{"content":{"body":"\nlibraries that monkey-patched prototypes with the same method name break if you replace them with a function that does something different","msgtype":"m.text"},"ts":1686704804618,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$13PSx7lVjTJMusiu-7_xRzrp6ocnCqA0vnO9bSAVRhQ"},
{"content":{"body":"some of these are interesting","msgtype":"m.text"},"ts":1686704822984,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uPphPsIm1_qBVmTkplasHeOMbDyx9eRLCqcAR19piZ0"},
{"content":{"body":"for example, that one time I monkey patched Array.prototype.clear such that .clear called .splice such that registered change observers would fire","msgtype":"m.text"},"ts":1686704857944,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LN8Ushb3e1s7u-8EoS4LV445cf2ZTUnZ_lAzvzC8gAw"},
{"content":{"body":"pretty sure that code is in WRT modems now","msgtype":"m.text"},"ts":1686704912123,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5cVCmkbXj3FkwvQ-cWPRbUwIbcygYBpUitAkIepnwpQ"},
{"content":{"body":"```\nfunction getGroupFromThing(x) {\n  return x.group || x;\n}\n\nlet things = [\n  {\n    group: [42],\n  },\n  [42],\n  [44, 45],\n  {\n    group: [46],\n  }\n];\n\nconsole.log(things.map(getGroupFromThing)); // good, all arrays\n\nArray.prototype.group = function(){/*...*/};\nconsole.log(things.map(getGroupFromThing)); // oh no :(\n\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>function getGroupFromThing(x) {\n  return x.group || x;\n}\n\nlet things = [\n  {\n    group: [42],\n  },\n  [42],\n  [44, 45],\n  {\n    group: [46],\n  }\n];\n\nconsole.log(things.map(getGroupFromThing)); // good, all arrays\n\nArray.prototype.group = function(){/*...*/};\nconsole.log(things.map(getGroupFromThing)); // oh no :(\n\n</code></pre>\n","msgtype":"m.text"},"ts":1686704970932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G7x4vbWRLw_4AS94nZQ0c0oKqzeaiQFn6TchXsGB4fQ"},
{"content":{"body":"but people monkeypatch all sorts of things in all sorts of JS builtins, not just Array","msgtype":"m.text"},"ts":1686705221959,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$qEkKb4rwXlPFBBZkPok89uTxmotd81rrMdU2W_chcv0"},
{"content":{"body":"if we start catering to those where does it stop? are we just going to forget the idea of adding new methods to anything ever? ","msgtype":"m.text"},"ts":1686705285704,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$chFb5TDGzHNc_zh0KS1AzWPeqiY3Xt2mS8xDU_zfk2M"},
{"content":{"body":"what about top level variables? are we going to also stop considering adding new builtins entirely some random person could have a top level variable with the same name?","msgtype":"m.text"},"ts":1686705326402,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$w-13n-mRs7z8XfUZ4gTioHmjvURl7DX8JgTDZkPutuw"},
{"content":{"body":"https://developer.chrome.com/blog/smooshgate/#why-dont-we-just-keep-the-existing-name-and-break-the-web","msgtype":"m.text"},"ts":1686705428175,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wlR_EwzrpH2ImbYAICSVedvC2cdZykkJze0584k90Po"},
{"content":{"body":"it seems to me like a terrible and extremely disruptive to the language's progress decision to care for behavior in clear violation of the standard, every monkeypatcher is (or should) be aware that their code is invading a place it should not and it has no safety guarantee to itself","msgtype":"m.text"},"ts":1686705453736,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$2kr8nyWdbsB7ndKKM0XjRLP58IdnzdDUtmZu4bvwqqE"},
{"content":{"body":"this conversation has been had at length; I'm happy to link you to resources but we're not going to rehash it","msgtype":"m.text"},"ts":1686705458960,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KknJTXzJ3w5FhJn5oEiazktDT1d0lt_ANSA9U055voA"},
{"content":{"body":"also the code I wrote does not do any monkeypatching","msgtype":"m.text"},"ts":1686705469739,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$axipKMgQT3rTsnIBVGJxGsRX5m1NNsN7R1JiIub7IzA"},
{"content":{"body":"if you read it","msgtype":"m.text"},"ts":1686705472035,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XAOapHUne9I2JzSgyKP_m4YzYhIX_TU57kdziSDzkc4"},
{"content":{"body":"(not that this really makes a difference to anything)","msgtype":"m.text"},"ts":1686705493310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$993E8cW6AdJx8prkom9olZNBwAlnTgNUqapVm0500t8"},
{"content":{"body":"I've read the SmooshGate link, interesting history that I didn't know happened, but it doesn't really answer my question at all, where is the line drawn between caring or not about monkeypatches for a specific name for some new feature? How is anything able to be added if we constantly worry about this?","msgtype":"m.text"},"ts":1686706127129,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$jIXyM7oZ7QS3lDLASvDevE-NknaYupWLuHbLfIjjQMs"},
{"content":{"body":"if we think the risk is low enough we try it and see","msgtype":"m.text"},"ts":1686706157932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$62x3wiGXis1pz7G6aIQ-fIdLUDgUqgRMGwcKXdEpbaA"},
{"content":{"body":"For instance what differs `flatten` or `group` from `at` or `toSorted`","format":"org.matrix.custom.html","formatted_body":"For instance what differs <code>flatten</code> or <code>group</code> from <code>at</code> or <code>toSorted</code>","msgtype":"m.text"},"ts":1686706167664,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$k5AmxlTFPWjhsrxH6oIN7WyL6lWuAS8lSf3Ljg1p_tU"},
{"content":{"body":"Mozilla no longer considers the risk to be low enough for new array prototype methods with reasonable names","msgtype":"m.text"},"ts":1686706196713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eSwc_VOAmxMcMZErCxbxxS5pixYGRF03Q5yHvKvWoAA"}
]