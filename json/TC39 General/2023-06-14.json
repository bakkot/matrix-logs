[
{"content":{"body":"if mutation is desired to be avoided, `toEmpty()` could be used, but then its essentially `= []` and falls under the same issues as it, so it becomes worthless","format":"org.matrix.custom.html","formatted_body":"if mutation is desired to be avoided, <code>toEmpty()</code> could be used, but then its essentially <code>= []</code> and falls under the same issues as it, so it becomes worthless","msgtype":"m.text"},"ts":1686701016561,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$tHOc_U_bVcIonIlAyKVzjc3D0Z9ar6ry3etKZA_TZTI"},
{"content":{"body":"Symmetry with other languages is generally something I'm in favor of when designing new features but is not in itself adequate reason to add a new feature when there is already a fine way of accomplishing the same thing.","msgtype":"m.text"},"ts":1686701234940,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZSRtprTECzbszEVZ2po5-anDn9-hplmfQrZ1Qv_rmqA"},
{"content":{"body":"tbh I don't understand the reasoning against adding methods to `Array.prototype`, or rather I couldn't even find one","format":"org.matrix.custom.html","formatted_body":"tbh I don't understand the reasoning against adding methods to <code>Array.prototype</code>, or rather I couldn't even find one","msgtype":"m.text"},"ts":1686703750783,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$uyU5NnPrKkCopEfrc7fJI2J_qrrzC7AWqK-78A7Xg9Q"},
{"content":{"body":"what was linked were *statements* of Mozilla's (and them only) stance against them, with no actual backstory on the reasoning","format":"org.matrix.custom.html","formatted_body":"what was linked were <em>statements</em> of Mozilla's (and them only) stance against them, with no actual backstory on the reasoning","msgtype":"m.text"},"ts":1686703787227,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$XCl5mh3Axq9IfvxTK1KaQ5SDa1CILEfrV6Dws5v-UpY"},
{"content":{"body":"the reason was that adding methods with reasonable names breaks websites","msgtype":"m.text"},"ts":1686704065316,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pz6WstlICI6x79V7mtFuXgjYpiy2VqwWnzgOul2Vo_A"},
{"content":{"body":"e.g. we tried to add `groupBy` and that broke stuff, and then we tried `group` instead and that broke other stuff","format":"org.matrix.custom.html","formatted_body":"e.g. we tried to add <code>groupBy</code> and that broke stuff, and then we tried <code>group</code> instead and that broke other stuff","msgtype":"m.text"},"ts":1686704084019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CQkUNREYLovhU9xWCqAtVmEPRQOSvGDbcLTfbI0wNXo"},
{"content":{"body":"and the breakage is often quite subtle","msgtype":"m.text"},"ts":1686704090282,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1VZYP37mf7hLaMAt7_ox1WCkYqRfMFvH-PyrDfYl9Ww"},
{"content":{"body":"this is a bad experience for everyone and Mozilla would like to avoid repeating that experience","msgtype":"m.text"},"ts":1686704104692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yS4w3cT4CgDhZ_jLj6FOWN3xZtNQ-KBcjK1LfC-96ow"},
{"content":{"body":"Chrome agrees with Mozilla on this btw","msgtype":"m.text"},"ts":1686704227718,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FzQZleCleTN818f4MvZbqBGgMQhReIK5vzq08S770eQ"},
{"content":{"body":"how does it breaks websites to add properties that never existed before?","msgtype":"m.text"},"ts":1686704599837,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$YqPFjo4Xp9Q_feZEgkH3rD2Zb0q5egNXpgnZOyxMYQ4"},
{"content":{"body":"many ways, one particular frustrating way was that there were uses of `Array` instances as hash maps, and `group` was being used as a key","format":"org.matrix.custom.html","formatted_body":"many ways, one particular frustrating way was that there were uses of <code>Array</code> instances as hash maps, and <code>group</code> was being used as a key","msgtype":"m.text"},"ts":1686704792997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WvKuB6zkX7XgVeISPO2tAXHXnGpiSkukcyaWd7iYFSM"},
{"content":{"body":"\nlibraries that monkey-patched prototypes with the same method name break if you replace them with a function that does something different","msgtype":"m.text"},"ts":1686704804618,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$13PSx7lVjTJMusiu-7_xRzrp6ocnCqA0vnO9bSAVRhQ"},
{"content":{"body":"some of these are interesting","msgtype":"m.text"},"ts":1686704822984,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uPphPsIm1_qBVmTkplasHeOMbDyx9eRLCqcAR19piZ0"},
{"content":{"body":"for example, that one time I monkey patched Array.prototype.clear such that .clear called .splice such that registered change observers would fire","msgtype":"m.text"},"ts":1686704857944,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LN8Ushb3e1s7u-8EoS4LV445cf2ZTUnZ_lAzvzC8gAw"},
{"content":{"body":"pretty sure that code is in WRT modems now","msgtype":"m.text"},"ts":1686704912123,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5cVCmkbXj3FkwvQ-cWPRbUwIbcygYBpUitAkIepnwpQ"},
{"content":{"body":"```\nfunction getGroupFromThing(x) {\n  return x.group || x;\n}\n\nlet things = [\n  {\n    group: [42],\n  },\n  [42],\n  [44, 45],\n  {\n    group: [46],\n  }\n];\n\nconsole.log(things.map(getGroupFromThing)); // good, all arrays\n\nArray.prototype.group = function(){/*...*/};\nconsole.log(things.map(getGroupFromThing)); // oh no :(\n\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>function getGroupFromThing(x) {\n  return x.group || x;\n}\n\nlet things = [\n  {\n    group: [42],\n  },\n  [42],\n  [44, 45],\n  {\n    group: [46],\n  }\n];\n\nconsole.log(things.map(getGroupFromThing)); // good, all arrays\n\nArray.prototype.group = function(){/*...*/};\nconsole.log(things.map(getGroupFromThing)); // oh no :(\n\n</code></pre>\n","msgtype":"m.text"},"ts":1686704970932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G7x4vbWRLw_4AS94nZQ0c0oKqzeaiQFn6TchXsGB4fQ"},
{"content":{"body":"but people monkeypatch all sorts of things in all sorts of JS builtins, not just Array","msgtype":"m.text"},"ts":1686705221959,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$qEkKb4rwXlPFBBZkPok89uTxmotd81rrMdU2W_chcv0"},
{"content":{"body":"if we start catering to those where does it stop? are we just going to forget the idea of adding new methods to anything ever? ","msgtype":"m.text"},"ts":1686705285704,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$chFb5TDGzHNc_zh0KS1AzWPeqiY3Xt2mS8xDU_zfk2M"},
{"content":{"body":"what about top level variables? are we going to also stop considering adding new builtins entirely some random person could have a top level variable with the same name?","msgtype":"m.text"},"ts":1686705326402,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$w-13n-mRs7z8XfUZ4gTioHmjvURl7DX8JgTDZkPutuw"},
{"content":{"body":"https://developer.chrome.com/blog/smooshgate/#why-dont-we-just-keep-the-existing-name-and-break-the-web","msgtype":"m.text"},"ts":1686705428175,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wlR_EwzrpH2ImbYAICSVedvC2cdZykkJze0584k90Po"},
{"content":{"body":"it seems to me like a terrible and extremely disruptive to the language's progress decision to care for behavior in clear violation of the standard, every monkeypatcher is (or should) be aware that their code is invading a place it should not and it has no safety guarantee to itself","msgtype":"m.text"},"ts":1686705453736,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$2kr8nyWdbsB7ndKKM0XjRLP58IdnzdDUtmZu4bvwqqE"},
{"content":{"body":"this conversation has been had at length; I'm happy to link you to resources but we're not going to rehash it","msgtype":"m.text"},"ts":1686705458960,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KknJTXzJ3w5FhJn5oEiazktDT1d0lt_ANSA9U055voA"},
{"content":{"body":"also the code I wrote does not do any monkeypatching","msgtype":"m.text"},"ts":1686705469739,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$axipKMgQT3rTsnIBVGJxGsRX5m1NNsN7R1JiIub7IzA"},
{"content":{"body":"if you read it","msgtype":"m.text"},"ts":1686705472035,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XAOapHUne9I2JzSgyKP_m4YzYhIX_TU57kdziSDzkc4"},
{"content":{"body":"(not that this really makes a difference to anything)","msgtype":"m.text"},"ts":1686705493310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$993E8cW6AdJx8prkom9olZNBwAlnTgNUqapVm0500t8"},
{"content":{"body":"I've read the SmooshGate link, interesting history that I didn't know happened, but it doesn't really answer my question at all, where is the line drawn between caring or not about monkeypatches for a specific name for some new feature? How is anything able to be added if we constantly worry about this?","msgtype":"m.text"},"ts":1686706127129,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$jIXyM7oZ7QS3lDLASvDevE-NknaYupWLuHbLfIjjQMs"},
{"content":{"body":"if we think the risk is low enough we try it and see","msgtype":"m.text"},"ts":1686706157932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$62x3wiGXis1pz7G6aIQ-fIdLUDgUqgRMGwcKXdEpbaA"},
{"content":{"body":"For instance what differs `flatten` or `group` from `at` or `toSorted`","format":"org.matrix.custom.html","formatted_body":"For instance what differs <code>flatten</code> or <code>group</code> from <code>at</code> or <code>toSorted</code>","msgtype":"m.text"},"ts":1686706167664,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$k5AmxlTFPWjhsrxH6oIN7WyL6lWuAS8lSf3Ljg1p_tU"},
{"content":{"body":"Mozilla no longer considers the risk to be low enough for new array prototype methods with reasonable names","msgtype":"m.text"},"ts":1686706196713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eSwc_VOAmxMcMZErCxbxxS5pixYGRF03Q5yHvKvWoAA"},
{"content":{"body":"how is that risk factor measured exactly?","msgtype":"m.text"},"ts":1686706239949,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$qvyBZ3CdT35y2mXfkaPQh9l49o1v0rK7Av4ieURYfFo"},
{"content":{"body":"we just sort of guess","msgtype":"m.text"},"ts":1686706263870,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EgDvTXjCzKg8wt1mlzvrhVW9oH8NUf7G4rW3OvWXPvI"},
{"content":{"body":"I mean, what happened with `flatten` is that we tried, and it broke stuff","format":"org.matrix.custom.html","formatted_body":"I mean, what happened with <code>flatten</code> is that we tried, and it broke stuff","msgtype":"m.text"},"ts":1686706272249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x680mu4I9siXEYwbM1IR0O4K7ZWO2M1kr9wKbaC5cRo"},
{"content":{"body":"that is to say, browsers shipped it, that broke a bunch of websites, so they unshipped it","msgtype":"m.text"},"ts":1686706294663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dEVcol0G78OEWl71zAxIeHAJPFn61uAYiEUjtKKIpRs"},
{"content":{"body":"this did not happen for `toSorted`","format":"org.matrix.custom.html","formatted_body":"this did not happen for <code>toSorted</code>","msgtype":"m.text"},"ts":1686706300969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AawZ-FhBdNTQRYS-9YpQbGqXN9G0RhPH7CxyStxnYZg"},
{"content":{"body":"but whenever this happens it is very bad, even though we can in principle unship and find a new name","msgtype":"m.text"},"ts":1686706317596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2bhUP7KLs5QxOsCHJYBiioOaysVQPwk3gzvRAKyqvJY"},
{"content":{"body":"this happened multiple times for `group` and Mozilla is not willing to pay that cost for future methods unless we think the risk is very very low","format":"org.matrix.custom.html","formatted_body":"this happened multiple times for <code>group</code> and Mozilla is not willing to pay that cost for future methods unless we think the risk is very very low","msgtype":"m.text"},"ts":1686706342384,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PfANVJ7kWLf5Mr-5bRjV7aHhUJWfMFQ70Q6ZPuAf_48"},
{"content":{"body":"which there is no practical way to objectively measure without shipping and seeing what breaks, and shipping is the thing they want to avoid, so we're just going to have to guess","msgtype":"m.text"},"ts":1686706377115,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rzuN6_f5yabfszv1F14nQZbf53eeZQpuCclZgm86_No"},
{"content":{"body":"so just trial and error, I see, I also found out `at` actually apparently went through the same kind of problem being originally to be called `item`, ironically I'm actually a little glad about that one, `at` is much nicer 😂","format":"org.matrix.custom.html","formatted_body":"so just trial and error, I see, I also found out <code>at</code> actually apparently went through the same kind of problem being originally to be called <code>item</code>, ironically I'm actually a little glad about that one, <code>at</code> is much nicer 😂","msgtype":"m.text"},"ts":1686706740355,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$dPWBh5YnlNDjDQ1MSPKEgEj5-nZc7iJ_RzpAWAdRCxA"},
{"content":{"body":"> <@twixes3d:matrix.org> So to condense the point, in my view there are a _few_ arguments for adding `Array.prototype.clear()` as stdlib sugar *for `.length = 0`*:\n> 1. The base case for it is just that it would be the \"one obvious way\" of performing a common operation – emptying an array. Obvious in terms of the developer experience as well as performance, which is not quite the case for any of the solutions JS developers have today (and usually have to learn from StackOverflow):\n>     - `= []` for one requires usage of `var`/`let`; not in-place, which can be seen at a glance, so immediately not ideal performance-wise\n>     - `.length = 0` is just not the way this works in any mainstream other language, this trips developers up\n>     - `.splice(0)` works quite sensibly, but the semantics of splicing are a bit different, so this again isn't the obvious way of doing this\n> 2. Coming from most other mainstream languages (e.g. Java, C#, C++, Python, Rust, Kotlin), you just use `.clear()` to empty an array (aka vector/list). The convention is basic to the core.\n> 3. In terms of the cost of adding Array methods, JS has come a long way since ES2015 and the new annual release process. There's really good precedent:\n>     - `Array.prototype.find()` in ES2015 (just sugar over a `for` loop),\n>     - `Array.prototype.includes()` in ES2016 (sugar over `.indexOf()`, which itself is sugar over a `for` loop)\n>     - or this year: `Array.prototype.toSorted()` (sugar over `.slice().sort()`, again all coming down to iteration).\n>     All really good quality-of-life improvements, and rather comparable to `Array.prototype.clear()` both in terms of implementation complexity (low on the scale) and utility (fulfilling a specific but universal use case)\n> \n\nI’m skeptical it’s actually all that common.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24BEg5CqreyMR6MpaMurnaaVz1z7fpJjP3LUHIDBZm-00\">In reply to</a> <a href=\"https://matrix.to/#/@twixes3d:matrix.org\">@twixes3d:matrix.org</a><br><p>So to condense the point, in my view there are a <em>few</em> arguments for adding <code>Array.prototype.clear()</code> as stdlib sugar <em>for <code>.length = 0</code></em>:</p>\n<ol>\n<li>The base case for it is just that it would be the \"one obvious way\" of performing a common operation – emptying an array. Obvious in terms of the developer experience as well as performance, which is not quite the case for any of the solutions JS developers have today (and usually have to learn from StackOverflow):\n<ul>\n<li><code>= []</code> for one requires usage of <code>var</code>/<code>let</code>; not in-place, which can be seen at a glance, so immediately not ideal performance-wise</li>\n<li><code>.length = 0</code> is just not the way this works in any mainstream other language, this trips developers up</li>\n<li><code>.splice(0)</code> works quite sensibly, but the semantics of splicing are a bit different, so this again isn't the obvious way of doing this</li>\n</ul>\n</li>\n<li>Coming from most other mainstream languages (e.g. Java, C#, C++, Python, Rust, Kotlin), you just use <code>.clear()</code> to empty an array (aka vector/list). The convention is basic to the core.</li>\n<li>In terms of the cost of adding Array methods, JS has come a long way since ES2015 and the new annual release process. There's really good precedent:\n<ul>\n<li><code>Array.prototype.find()</code> in ES2015 (just sugar over a <code>for</code> loop),</li>\n<li><code>Array.prototype.includes()</code> in ES2016 (sugar over <code>.indexOf()</code>, which itself is sugar over a <code>for</code> loop)</li>\n<li>or this year:&nbsp;<code>Array.prototype.toSorted()</code> (sugar over <code>.slice().sort()</code>, again all coming down to iteration).<br>All really good quality-of-life improvements, and rather comparable to <code>Array.prototype.clear()</code> both in terms of implementation complexity (low on the scale) and utility (fulfilling a specific but universal use case)</li>\n</ul>\n</li>\n</ol>\n</blockquote></mx-reply>I’m skeptical it’s actually all that common.","m.relates_to":{"m.in_reply_to":{"event_id":"$BEg5CqreyMR6MpaMurnaaVz1z7fpJjP3LUHIDBZm-00"}},"msgtype":"m.text"},"ts":1686710865322,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$unXOFC_G-die27uZ6uBNkR_a0Ya8P7hPS_k9lfl9dw4"},
{"content":{"body":"Is there a good way to verify that the web won't break that'd be a step short of shipping an implementation in browser stable channels? Well, MooTools for one does not set `Array.prototype.clear`, so that's a relief. I remember that affair, but I'm not familiar with `group` woes. I'm curious, what was the pain there?","format":"org.matrix.custom.html","formatted_body":"Is there a good way to verify that the web won't break that'd be a step short of shipping an implementation in browser stable channels? Well, MooTools for one does not set <code>Array.prototype.clear</code>, so that's a relief. I remember that affair, but I'm not familiar with <code>group</code> woes. I'm curious, what was the pain there?","msgtype":"m.text"},"ts":1686735408821,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$fX1JLVpxFcuS_ZZ8Ke955HsIrj755jcWiIaaEJJV4wY"},
{"content":{"body":"You could do some research with HTTPArchive data and maybe GitHub (and that might make your case stronger if you did it well), but generally actually shipping is the real test.","msgtype":"m.text"},"ts":1686735574311,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$kbWIMs0nj4MGt9nmdlR5MsIsD5qnKky1D_mmmE4BfjI"},
{"content":{"body":"HTTPArchive wouldn't've caught the `group` ones","format":"org.matrix.custom.html","formatted_body":"HTTPArchive wouldn't've caught the <code>group</code> ones","msgtype":"m.text"},"ts":1686756980766,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yDnZhaRlO2KwqFLaZNMXBX941RsRZpLsqG5q0rme8zk"},
{"content":{"body":"regressions included https://bugzilla.mozilla.org/show_bug.cgi?id=1791415 https://bugzilla.mozilla.org/show_bug.cgi?id=1799522 https://github.com/webcompat/web-bugs/issues/112552","msgtype":"m.text"},"ts":1686757061090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5DtmeADgYSkjcnk-0v2BONrIBACndF-1jrLEt0VU8rM"},
{"content":{"body":"So, no, there is not any way to verify the web won't break short of shipping","msgtype":"m.text"},"ts":1686757129036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ByDnV2cOjsxzGh9HfWGqnVVkbWSgy5U9XBXj3blAqGk"},
{"content":{"body":"It wouldn't have caught those regressions, but maybe there were more. It's been quite a useful tool for evolving HTML.","msgtype":"m.text"},"ts":1686759027492,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$kOya21MrtqBfrtwDu3BTXUpTTTNG8d-ZQLefcZPFLEM"},
{"content":{"body":"Yeah, it can confirm presence but not absence of issues","msgtype":"m.text"},"ts":1686759310169,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a_imgQLoarR0c3mqzVQRXNu8PfxSbuWF60UEqcQND0o"},
{"content":{"body":"> ECMAScript 2023, the 14th edition, introduced the toSorted, toReversed, with, findLast, and findLastIndex methods on Array.prototype and TypedArray.prototype, as well as the toSpliced method on Array.prototype","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>ECMAScript 2023, the 14th edition, introduced the toSorted, toReversed, with, findLast, and findLastIndex methods on Array.prototype and TypedArray.prototype, as well as the toSpliced method on Array.prototype</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1686760748036,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y_Bm8NTmW3zBzyBEN0KlIY8A_cvOy_-cs3HNxIR49lk"},
{"content":{"body":"sounds like adding methods to Array.prototype actually works out more often than it doesn't 🤔","msgtype":"m.text"},"ts":1686760770549,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$a9cUQ_TzIuI1jKThy5-Gvr-Lts4aKnOoMMmDFptHEjM"},
{"content":{"body":"Probably multi-word methods are safer","msgtype":"m.text"},"ts":1686761127639,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gD0LaKzdnIYAxPHdIocRKtoaPIC9Mr1uOGTxcP7LplE"},
{"content":{"body":"And `with` is a bad keyword so probably people were scared of using it :P","format":"org.matrix.custom.html","formatted_body":"And <code>with</code> is a bad keyword so probably people were scared of using it :P","msgtype":"m.text"},"ts":1686761159638,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LTPelJ2bJ5Pick5k6FPiFF14ajzoncAuVZAC4u9SHhs"},
{"content":{"body":"also \"this only causes us a huge amount of pain a third of the time we try it\" isn't that compelling really","msgtype":"m.text"},"ts":1686761258989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2mdFoQdsUZjDtx2UQP-RPXaX0eAgodAtmdI47oxJweU"},
{"content":{"body":"it's way less than a third. but it's such a huge amount of pain that mozilla and google's position here is understandable.","msgtype":"m.text"},"ts":1686761444718,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CAlbbJYpjJxqG98KZ_xwOFhSu_FpLBjvmeMbyXfJSlI"},
{"content":{"body":"`flatten`, `item`, `groupBy`, and `group` all had in-the-wild webcompat issues. by my count we've attempted to add a total of 14 methods to Array.prototype since 2015 (`flatten`, `item`, `groupBy`, `group`, `flat`, `flatMap`, `at`, `toSorted`, `toReversed`, `toSpliced`, `with`, `findLast`, `findLastIndex`, `includes`). so it's pretty close to a third.","format":"org.matrix.custom.html","formatted_body":"<code>flatten</code>, <code>item</code>, <code>groupBy</code>, and <code>group</code> all had in-the-wild webcompat issues. by my count we've attempted to add a total of 14 methods to Array.prototype since 2015 (<code>flatten</code>, <code>item</code>, <code>groupBy</code>, <code>group</code>, <code>flat</code>, <code>flatMap</code>, <code>at</code>, <code>toSorted</code>, <code>toReversed</code>, <code>toSpliced</code>, <code>with</code>, <code>findLast</code>, <code>findLastIndex</code>, <code>includes</code>). so it's pretty close to a third.","msgtype":"m.text"},"ts":1686761845721,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XSXrzpiDSEe96nJhkIsdruFrRZ76iquOtCJD8nVv6Gw"},
{"content":{"body":"and `includes` was renamed from `contains` after it was found to break mootools IIRC","format":"org.matrix.custom.html","formatted_body":"and <code>includes</code> was renamed from <code>contains</code> after it was found to break mootools IIRC","msgtype":"m.text"},"ts":1686761911225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y4OD_ZYuXPtrSUOCeh5_woeest_sQbl7rkW3W3lVRxE"},
{"content":{"body":"`at` also had in-the-wild issues, come to think, we just managed to paper over them","format":"org.matrix.custom.html","formatted_body":"<code>at</code> also had in-the-wild issues, come to think, we just managed to paper over them","msgtype":"m.text"},"ts":1686761978588,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3fxSfXVA-U7kDPDD-Al7mtNE8xkWiyYbmtKtUx8jD0s"},
{"content":{"body":"yeah `contains` was also an in-the-wild breakage, just that it was prior to 2015 https://bugzilla.mozilla.org/show_bug.cgi?id=1075059","format":"org.matrix.custom.html","formatted_body":"yeah <code>contains</code> was also an in-the-wild breakage, just that it was prior to 2015 https://bugzilla.mozilla.org/show_bug.cgi?id=1075059","msgtype":"m.text"},"ts":1686762054042,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WsOiFL-zTCdE8ZZSpZd0Y9ltrXbzBXyrNQxw3k0sYrA"},
{"content":{"body":"`Array.prototype.jettison(all)`","format":"org.matrix.custom.html","formatted_body":"<code>Array.prototype.jettison(all)</code>","msgtype":"m.text"},"ts":1686762964611,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$yILz8uURBX4KeuYzxPp-DZWhcvoJrSqATI46yWjAE2A"},
{"content":{"body":"`Array.prototype.engroupen`","format":"org.matrix.custom.html","formatted_body":"<code>Array.prototype.engroupen</code>","msgtype":"m.text"},"ts":1686763018570,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$w4xjB_mNCknpiLdkHWdEo8cmvQviPPEjvSxm6deTGLQ"},
{"content":{"body":"isn't grouping just a special case of smooshing, if you think about it","msgtype":"m.text"},"ts":1686763168789,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$gqplQyONFCP7Q3GyZghBzqWNn0y5gvpcm-WyxL90iJ4"},
{"content":{"body":"fair enough on the stats","msgtype":"m.text"},"ts":1686763501127,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UtEuOsnnqsSN0w4MHXKBgES1bYUJVJuZ6HZ2qxwZq7k"}
]