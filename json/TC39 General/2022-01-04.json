[
{"content":{"body":"FYI/help-wanted https://github.com/mdn/content/issues/11665","msgtype":"m.text"},"ts":1641258228736,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$QSIAVtYvctPeCL86ekUOVea42tk1YlBBX-U8xuz33mc"},
{"content":{"body":"in general, for anybody wanting to help out with the MDN JS docs, and looking for some low-hanging fruit, we have 4 issues labeled as needing 30 minutes or less to resolve https://github.com/mdn/content/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22+label%3AContent%3AJS+label%3A%22time%3A+-30mins%22+","msgtype":"m.text"},"ts":1641259023290,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$pPq5ETjHSnPIFZxOtYd0YmD9UVX2qEsRJX67GgkmsLA"},
{"content":{"body":"…and overall we have just 34 issues for the JS docs that are labeled as “help wanted” https://github.com/mdn/content/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22+label%3AContent%3AJS (out of 620 open MDN issues overall)","msgtype":"m.text"},"ts":1641259122278,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$aBVlK4d4WOO8gmBFdK-anduV-4lEXpR92H_abaFShjE"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> FYI/help-wanted https://github.com/mdn/content/issues/11665\n\nI can’t find an official source. But I thought one of the reasons for not offering iteration of Weak{Map,Set} was also to allow a variety of implementation approaches. e.g. storing the values on the object keys themselves.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24QSIAVtYvctPeCL86ekUOVea42tk1YlBBX-U8xuz33mc\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br>FYI/help-wanted https://github.com/mdn/content/issues/11665</blockquote></mx-reply>I can’t find an official source. But I thought one of the reasons for not offering iteration of Weak{Map,Set} was also to allow a variety of implementation approaches. e.g. storing the values on the object keys themselves.","m.relates_to":{"m.in_reply_to":{"event_id":"$QSIAVtYvctPeCL86ekUOVea42tk1YlBBX-U8xuz33mc"}},"msgtype":"m.text"},"ts":1641301355939,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$f5_-zHSEb9drRGw5qGD7CZY1v5qgN-_LziNLJVM9XXw"},
{"content":{"body":"Did JSC implement them this way maybe?","msgtype":"m.text"},"ts":1641302109886,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Q0eAlLhv7cPkvjTm_xhS9xiMN9eOGOk4JdG--JRDfbE"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=142408#c4","msgtype":"m.text"},"ts":1641302214709,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IIXGqIIPitxWPTwhhNLkdnc75A0Qixn7e8KQ9b8y4E8"},
{"content":{"body":"https://bugs.webkit.org/show_bug.cgi?id=179929#c0","msgtype":"m.text"},"ts":1641302257772,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$VPTHjs-oGufkZ8rQUs_RG78zoaNOPeUGqH3LVNGFS-k"},
{"content":{"body":"lack of enumeration also allowed weakmap/weakset to be polyfilled by storing the value on the key instead of in the map","msgtype":"m.text"},"ts":1641312391306,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$-y1aV7Y9KaYg2GOn8F4C56iVBsLiQg8DuKKAF2kN5wo"},
{"content":{"body":"Ashley Claymore: devsnek Thanks (and thanks bakkot for https://github.com/mdn/content/issues/11665#issuecomment-1004486740). If nobody else creates a PR for that in the meantime, I think I’ll end up creating a PR that just adds the content of bakkot ’s comment (about avoiding to expose GC details) to that part of the article.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: <a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a> Thanks (and thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> for https://github.com/mdn/content/issues/11665#issuecomment-1004486740). If nobody else creates a PR for that in the meantime, I think I’ll end up creating a PR that just adds the content of <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> ’s comment (about avoiding to expose GC details) to that part of the article.","msgtype":"m.text"},"ts":1641320232848,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$nwreaEGDzfBao7a0OpoPnNBfjH9SoZLrYW-BVtzOs84"},
{"content":{"body":"meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:\n\n> The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.","format":"org.matrix.custom.html","formatted_body":"<p>meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:</p>\n<blockquote>\n<p>The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641320419164,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$mkMEzMsuwbkAqV37xmuPpIviBFsEMJ7QyqM8ZcaQ-PY"},
{"content":{"body":" * meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:\n\n> The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.","format":"org.matrix.custom.html","formatted_body":" * <p>meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:</p>\n<blockquote>\n<p>The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.</p>\n</blockquote>\n","m.new_content":{"body":"meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:\n\n> The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.","format":"org.matrix.custom.html","formatted_body":"<p>meanwhile, I’m confused by a sentence at https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.lastindexof in the spec:</p>\n<blockquote>\n<p>The optional second argument _fromIndex_ defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_. If the computed index is less than +0𝔽, -1𝔽 is returned.</p>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$mkMEzMsuwbkAqV37xmuPpIviBFsEMJ7QyqM8ZcaQ-PY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641320451831,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$LIbNxGmb_Me4HLRy0eRjagLzNB1HTGJ8y3-57-sN8IQ"},
{"content":{"body":"The sentence I’m confused by is “If it is less than +0𝔽, it is used as the offset from the end of the array to compute _fromIndex_”","format":"org.matrix.custom.html","formatted_body":"The sentence I’m confused by is “If it is less than +0𝔽, it is used as the offset from the end of the array to compute <em>fromIndex</em>”","msgtype":"m.text"},"ts":1641320493122,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$hbVkLI06fuuHIcizdZKqqoorPwqUGIBzCUmjnMBVL-k"},
{"content":{"body":"What confuses me is that _fromIndex_ is an explicitly-specified value — specified as the second argument to `Array.prototype.lastIndexOf()` — so why does the spec then change to talking about it being computed?","format":"org.matrix.custom.html","formatted_body":"What confuses me is that <em>fromIndex</em> is an explicitly-specified value — specified as the second argument to <code>Array.prototype.lastIndexOf()</code> — so why does the spec then change to talking about it being computed?","msgtype":"m.text"},"ts":1641320619134,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Uut8c3uIxPptH06RCpZKLpJ0Hk5yzuWZrs6jKXU39xA"},
{"content":{"body":"\"to compute fromIndex\" is a weird way of saying it","msgtype":"m.text"},"ts":1641320664400,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VdzJ_higDq5QcUWMZ-i3wv7LULEv11DMzUapTNBVEDE"},
{"content":{"body":"or in other words, what’s *“it”* in that sentence — if not _fromIndex_?","format":"org.matrix.custom.html","formatted_body":"or in other words, what’s <em>“it”</em> in that sentence — if not <em>fromIndex</em>?","msgtype":"m.text"},"ts":1641320667811,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ecNv83RKdx0pv9CLm7zIPsLZIBSP_kyOat6_1ZCixUg"},
{"content":{"body":"it should be \"to compute the position from which to start searching\"","msgtype":"m.text"},"ts":1641320673492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8WbDT5xAYf0eRYenCLgABg4VzZRR1oQH6iCzsqQPUuo"},
{"content":{"body":"aha","msgtype":"m.text"},"ts":1641320679584,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$WHOFDVdp6jxHK1EgvAeJDdZlHbMnZ8eSQizsYfXmQ5U"},
{"content":{"body":"OK yeah, then that makes sense, yeah","msgtype":"m.text"},"ts":1641320687414,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$yND4z8qCRLYsuPd5bMjpbxn9ygp0SbN9L8ceE3KUQTM"},
{"content":{"body":"Also it's not actually \"from the end of the array\" in the case of `lastIndexOf`","format":"org.matrix.custom.html","formatted_body":"Also it's not actually &quot;from the end of the array&quot; in the case of <code>lastIndexOf</code>","msgtype":"m.text"},"ts":1641320796760,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qujLWwG7_Hb8aZdxFepA5MASfB0pvmjO4GAXgFof6YE"},
{"content":{"body":"actually, no, I guess it is","msgtype":"m.text"},"ts":1641320859325,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p0LKJow18_iG237Lftz0uTPuW7fotRaptjdoiax4O8w"},
{"content":{"body":"anyway yeah these notes are bad","msgtype":"m.text"},"ts":1641320908533,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yZAYqlAMEaU4IFZ2KAyEHG0TQZBEu10a6FtV4pDngig"},
{"content":{"body":"`indexOf` has the same problem","format":"org.matrix.custom.html","formatted_body":"<code>indexOf</code> has the same problem","msgtype":"m.text"},"ts":1641320911929,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4L4toGniQ6O20ANJY0DsjNauuYUzxwHl1EQ_h-okeGs"},
{"content":{"body":"yeah the corresponding MDN articles also have similar problems… Trying now to figure out how to re-word them","msgtype":"m.text"},"ts":1641321277809,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$UNxJA2amC-n2uQ2sljkMdxsVXQ41FV4BdKo7pLWTzGM"},
{"content":{"body":"should probably be more like (for `lastIndexOf`)\n\n\"The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched.\"","format":"org.matrix.custom.html","formatted_body":"<p>should probably be more like (for <code>lastIndexOf</code>)</p>\n<p>&quot;The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched.&quot;</p>\n","msgtype":"m.text"},"ts":1641321483549,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q3vbBiLyj_zIcQg3NBPV_gxVQLEAMUJ4Ep0bL78OPK8"},
{"content":{"body":" * should probably be more like (for `lastIndexOf`)\n\n\"The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If it is not provided, it defaults to the last index of the array.\"","format":"org.matrix.custom.html","formatted_body":" * <p>should probably be more like (for <code>lastIndexOf</code>)</p>\n<p>&quot;The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If it is not provided, it defaults to the last index of the array.&quot;</p>\n","m.new_content":{"body":"should probably be more like (for `lastIndexOf`)\n\n\"The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If it is not provided, it defaults to the last index of the array.\"","format":"org.matrix.custom.html","formatted_body":"<p>should probably be more like (for <code>lastIndexOf</code>)</p>\n<p>&quot;The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If it is not provided, it defaults to the last index of the array.&quot;</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q3vbBiLyj_zIcQg3NBPV_gxVQLEAMUJ4Ep0bL78OPK8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641321661599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pCW92LM_ZdKxCbK0gJcgHUwTyfep1eSgRI9TQm3gt-I"},
{"content":{"body":" * should probably be more like (for `lastIndexOf`)\n\n\"The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If fromIndex is not provided, it defaults to the last index of the array.\"","format":"org.matrix.custom.html","formatted_body":" * <p>should probably be more like (for <code>lastIndexOf</code>)</p>\n<p>&quot;The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If fromIndex is not provided, it defaults to the last index of the array.&quot;</p>\n","m.new_content":{"body":"should probably be more like (for `lastIndexOf`)\n\n\"The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If fromIndex is not provided, it defaults to the last index of the array.\"","format":"org.matrix.custom.html","formatted_body":"<p>should probably be more like (for <code>lastIndexOf</code>)</p>\n<p>&quot;The optional second argument fromIndex specifies the offset from which to begin the search. If it is non-negative, it is an offset from the beginning of the array; if negative, an offset from the end. If the resulting offset is greater than or equal to the length of the array, the whole array will be searched. If it is less than 0, -1 is returned, i.e. the array is not searched. If fromIndex is not provided, it defaults to the last index of the array.&quot;</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q3vbBiLyj_zIcQg3NBPV_gxVQLEAMUJ4Ep0bL78OPK8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641321670276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zad70jyFO3TKvibpuCjTcjjo5Lq0FP1bzMhqMxnSHOQ"},
{"content":{"body":"bakkot: if you’re still around and you have a few minutes to review a related, PR: https://github.com/mdn/content/pull/11731","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: if you’re still around and you have a few minutes to review a related, PR: https://github.com/mdn/content/pull/11731","msgtype":"m.text"},"ts":1641326654036,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$9-E4xm01ammZ7jORU0HkLfZPi-nU6ZSxFtBtwyv0ST8"},
{"content":{"body":"https://pr11731.content.dev.mdn.mozit.cloud/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf#_flaws has the preview of the rendered article with the PR changes incorporated","msgtype":"m.text"},"ts":1641326718644,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$BYPHAZqzFlQDiVZWC_yqzOgaQI9Icrg3rSmY-l_t3aM"},
{"content":{"body":"(and/or if anybody else is around and has time to review that)","msgtype":"m.text"},"ts":1641326744316,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$FPa-pATcu77itbHDN8xVT0kVOoFSGwmNBnKC6guGP0M"}
]