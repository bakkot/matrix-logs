[
{"content":{"body":"Does anyone know if the iterator helper proposal has ever discussed parallel/batch features for v1? A lot of my use cases for lazy iterators involve async operations that benefit from parallel requests. Maybe I'm thinking of this wrong, but like for (const item of webpages.map(async url => return await op(url), { batch: 5 })){} where 5 are executed in parallel and are handled out of order first come. (In theory if a break is called then the other 4 pending would be cancelled by the generator's return). The big picture is handling tasks that might look like [500ms, 10ms, 10ms, 10ms, 10ms...] where a random long task blocks the whole pipeline. With more complex pipelines this snowballs into large delays.","msgtype":"m.text","org.matrix.msc1767.text":"Does anyone know if the iterator helper proposal has ever discussed parallel/batch features for v1? A lot of my use cases for lazy iterators involve async operations that benefit from parallel requests. Maybe I'm thinking of this wrong, but like for (const item of webpages.map(async url => return await op(url), { batch: 5 })){} where 5 are executed in parallel and are handled out of order first come. (In theory if a break is called then the other 4 pending would be cancelled by the generator's return). The big picture is handling tasks that might look like [500ms, 10ms, 10ms, 10ms, 10ms...] where a random long task blocks the whole pipeline. With more complex pipelines this snowballs into large delays."},"ts":1650313585197,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$ceL6Rhnm_akh3oCAEzslSR_pfSzw8lx8s0mkLUk5Pxs"},
{"content":{"body":"sirisian: not for v1, no. I would also like to see such a thing at some point but it doesn't really fit with the simpler v1 helpers; it would be its own thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: not for v1, no. I would also like to see such a thing at some point but it doesn't really fit with the simpler v1 helpers; it would be its own thing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: not for v1, no. I would also like to see such a thing at some point but it doesn't really fit with the simpler v1 helpers; it would be its own thing","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: not for v1, no. I would also like to see such a thing at some point but it doesn't really fit with the simpler v1 helpers; it would be its own thing","mimetype":"text/html"}]},"ts":1650314902103,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q4AfznkIfuNkILCKrXYE3IeczKkGaKEzznKjIlry03o"},
{"content":{"body":"As long as it's possible later, that's all that matters.","msgtype":"m.text","org.matrix.msc1767.text":"As long as it's possible later, that's all that matters."},"ts":1650314938600,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$cJsuXhYq0-l3IHSDJ53_stt4Qz1BOKzoNYRvPHVmFM4"},
{"content":{"body":"I haven't thought about it really hard but I expect it should be. and at the very least nothing in this proposal is likely to make it harder.","msgtype":"m.text","org.matrix.msc1767.text":"I haven't thought about it really hard but I expect it should be. and at the very least nothing in this proposal is likely to make it harder."},"ts":1650314990531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mXNoIMQdX9A1NXhwfSCTqE8Ra5DAL35Le3Ol8jwFvok"},
{"content":{"body":"Ixjs has this with a `concurrent` param for `flatMap` https://github.com/ReactiveX/IxJS/blob/master/src/asynciterable/operators/flatmap.ts","format":"org.matrix.custom.html","formatted_body":"Ixjs has this with a <code>concurrent</code> param for <code>flatMap</code> https://github.com/ReactiveX/IxJS/blob/master/src/asynciterable/operators/flatmap.ts","msgtype":"m.text"},"ts":1650315054884,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ONi_Id1W0GzBqKembDcdyPLCG_SxuykxlBcQp_fh1vc"},
{"content":{"body":"for the particular example you give I think the thing you actually want is a helper to bound how many invocations of an async function can be running simultaneously","msgtype":"m.text","org.matrix.msc1767.text":"for the particular example you give I think the thing you actually want is a helper to bound how many invocations of an async function can be running simultaneously"},"ts":1650315768183,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jvIefOtqX4RuR91LAS53-cXPvez1Je8HDoV3P5ipRQA"},
{"content":{"body":"```\nfunction boundAsyncFunctionConcurrency(f, N) {\n  let waiting = [];\n  let available = N;\n  function lock() {\n    if (available > 0) {\n      --available;\n      return;\n    }\n    return new Promise(res => {\n      waiting.push(res);\n    });\n  }\n  function unlock() {\n    if (waiting.length > 0) {\n      waiting.shift()();\n    } else {\n      ++available;\n    }\n  }\n\n  return async function(...args) {\n    try {\n      await lock();\n      return await f.apply(this, args);\n    } finally {\n      unlock();\n    }\n  };\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code>function boundAsyncFunctionConcurrency(f, N) {\n  let waiting = [];\n  let available = N;\n  function lock() {\n    if (available &gt; 0) {\n      --available;\n      return;\n    }\n    return new Promise(res =&gt; {\n      waiting.push(res);\n    });\n  }\n  function unlock() {\n    if (waiting.length &gt; 0) {\n      waiting.shift()();\n    } else {\n      ++available;\n    }\n  }\n\n  return async function(...args) {\n    try {\n      await lock();\n      return await f.apply(this, args);\n    } finally {\n      unlock();\n    }\n  };\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nfunction boundAsyncFunctionConcurrency(f, N) {\n  let waiting = [];\n  let available = N;\n  function lock() {\n    if (available > 0) {\n      --available;\n      return;\n    }\n    return new Promise(res => {\n      waiting.push(res);\n    });\n  }\n  function unlock() {\n    if (waiting.length > 0) {\n      waiting.shift()();\n    } else {\n      ++available;\n    }\n  }\n\n  return async function(...args) {\n    try {\n      await lock();\n      return await f.apply(this, args);\n    } finally {\n      unlock();\n    }\n  };\n}\n```\n","mimetype":"text/plain"},{"body":"<pre><code>function boundAsyncFunctionConcurrency(f, N) {\n  let waiting = [];\n  let available = N;\n  function lock() {\n    if (available &gt; 0) {\n      --available;\n      return;\n    }\n    return new Promise(res =&gt; {\n      waiting.push(res);\n    });\n  }\n  function unlock() {\n    if (waiting.length &gt; 0) {\n      waiting.shift()();\n    } else {\n      ++available;\n    }\n  }\n\n  return async function(...args) {\n    try {\n      await lock();\n      return await f.apply(this, args);\n    } finally {\n      unlock();\n    }\n  };\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650316045823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hi9OJWO2pCgpHJ0KKs8QG1qvO2xcUG5o0O2EhhD5eXM"},
{"content":{"body":"or something to that effect","msgtype":"m.text","org.matrix.msc1767.text":"or something to that effect"},"ts":1650316049425,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lPkknv31z5TQmbGfJ6CW4LMsZCxE2r6-y2ksL6fy37k"},
{"content":{"body":"so you can do `.map(boundAsyncFunctionConcurrency(async url => await op(url), 5))`","format":"org.matrix.custom.html","formatted_body":"so you can do <code>.map(boundAsyncFunctionConcurrency(async url =&gt; await op(url), 5))</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so you can do `.map(boundAsyncFunctionConcurrency(async url => await op(url), 5))`","mimetype":"text/plain"},{"body":"so you can do <code>.map(boundAsyncFunctionConcurrency(async url =&gt; await op(url), 5))</code>","mimetype":"text/html"}]},"ts":1650316078564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8aNFnf1obs8Pzaq0HypxjBmE55FtsMdTz8uQ394Nk0c"},
{"content":{"body":"rather than getting the iterator helpers involved directly","msgtype":"m.text","org.matrix.msc1767.text":"rather than getting the iterator helpers involved directly"},"ts":1650316091084,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pZCOw2vo_dvIZss5Pk6j8eRV7uIZpDcAscdpto6iVlI"},
{"content":{"body":"but there are probably other cases where you'd want the iterator helpers to be involved","msgtype":"m.text","org.matrix.msc1767.text":"but there are probably other cases where you'd want the iterator helpers to be involved"},"ts":1650316107078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EG9nhCmBneJ24edHUkRwBU2IxLqFZs42DhEq0nqSamQ"},
{"content":{"body":"I've used https://www.npmjs.com/package/throat in the past","msgtype":"m.text","org.matrix.msc1767.text":"I've used https://www.npmjs.com/package/throat in the past"},"ts":1650318922747,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$0AGWqx0rhUGB0KwKjBuias90mbFrkstUCiaSiKQJ0Wg"}
]