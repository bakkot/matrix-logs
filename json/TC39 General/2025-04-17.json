[
{"content":{"body":"Regarding this, I think I figured out another place where `%TypedArray%.prototype.sort` implicitly relies on canonicalisation: if I'm not badly mistaken, the CompareTypedArrayElements AO is designed to invoke the \"usual\" total ordering for floats (convert to uint64, compare by value), but with the assumption that all NaNs are the usual canonical positive NaNs. If the sentence about canonicalisation is dropped, then the sorting algorithm is no longer the usual total ordering but instead something more custom with presumably a branch for NaNs needed.","format":"org.matrix.custom.html","formatted_body":"Regarding this, I think I figured out another place where <code>%TypedArray%.prototype.sort</code> implicitly relies on canonicalisation: if I'm not badly mistaken, the CompareTypedArrayElements AO is designed to invoke the \"usual\" total ordering for floats (convert to uint64, compare by value), but with the assumption that all NaNs are the usual canonical positive NaNs. If the sentence about canonicalisation is dropped, then the sorting algorithm is no longer the usual total ordering but instead something more custom with presumably a branch for NaNs needed.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8SjEr6tEthHgcQxwLoFnnXn-MzfAyOEYnMmH7HMMqNg"}},"msgtype":"m.text"},"ts":1744912514626,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$YBe_cqQlvEIDiHp2AgAazY5QuzNTR3Eu5jgE9Bx6q0E"}
]