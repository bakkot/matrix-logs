[
{"content":{"body":"> <@jmdyck:matrix.org> Jack Works: where can I see a rendered version of the new-spec branch?\n\nhttps://htmlpreview.github.io/?https://github.com/tc39/proposal-pattern-matching/blob/new-spec/index.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8DNEveBApB27KwqjBp_0FIiQQCjWwlEuracwakZzLOI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br /><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: where can I see a rendered version of the new-spec branch?</blockquote></mx-reply>https://htmlpreview.github.io/?https://github.com/tc39/proposal-pattern-matching/blob/new-spec/index.html","m.relates_to":{"m.in_reply_to":{"event_id":"$8DNEveBApB27KwqjBp_0FIiQQCjWwlEuracwakZzLOI"}},"msgtype":"m.text"},"ts":1700445370504,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qESH8eXY33P5pxUXxqHrl3wtXvr3gQ9QQTCG7YpikMg"},
{"content":{"body":"I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like `.await` in Rust).","format":"org.matrix.custom.html","formatted_body":"I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like <code>.await</code> in Rust).","m.mentions":{},"msgtype":"m.text"},"ts":1700476278649,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$p9WuESS_S7dAr7LgJ0HHtkgP1wt7N74jZNhxSMY67ro"},
{"content":{"body":" * I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like `.await` in Rust)","format":"org.matrix.custom.html","formatted_body":" * I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like <code>.await</code> in Rust)","m.mentions":{},"m.new_content":{"body":"I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like `.await` in Rust)","format":"org.matrix.custom.html","formatted_body":"I was just having a bit of thought about allowing the await operator to be suffixed rather than prefixed (e.g. like <code>.await</code> in Rust)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$p9WuESS_S7dAr7LgJ0HHtkgP1wt7N74jZNhxSMY67ro","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700476281278,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$Fs4GHUpMvCPTc0b-ouc5Sc6C8iMODnKzAAeYfK6KJU0"},
{"content":{"body":"This could make chaining more readable, for example\n```js\n// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n```","format":"org.matrix.custom.html","formatted_body":"<p>This could make chaining more readable, for example</p>\n<pre><code class=\"language-js\">// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700476472109,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$MgLOZINxwp8nF9T2seVp1QAGPER9mYLlqc8I2ZXgPwE"},
{"content":{"body":" * This could make chaining more readable (reduced the need for parentheses), for example\n\n```js\n// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n```","format":"org.matrix.custom.html","formatted_body":" * <p>This could make chaining more readable (reduced the need for parentheses), for example</p>\n<pre><code class=\"language-js\">// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"This could make chaining more readable (reduced the need for parentheses), for example\n\n```js\n// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n```","format":"org.matrix.custom.html","formatted_body":"<p>This could make chaining more readable (reduced the need for parentheses), for example</p>\n<pre><code class=\"language-js\">// before\n(await fetch()).props\nawait (await someAsyncMethod()).someReturnedAsyncMethod()\n\n// after\nfetch().await.props\nsomeAsyncMethod().await.someReturnedAsyncMethod().await\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MgLOZINxwp8nF9T2seVp1QAGPER9mYLlqc8I2ZXgPwE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700476498967,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$o1YCi-lxV4tS7_Gyl1TNtyOzDBBiem0bYVmgSQDDdoU"},
{"content":{"body":"That feels similar to https://github.com/tc39/proposal-wavy-dot","msgtype":"m.text"},"ts":1700476590785,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$R0fGGlV7k5BcET38hvDGDkhd_Bh5uaYOjJ6um2d8JEA"},
{"content":{"body":"Hmm, I didn't notice that. It is similar, but I think spelling out `.await` is a bit more readable than `~.`?\nThere is another example:\n```js\nasync function someFunc() { /* do something and returns 3 */ }\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n","format":"org.matrix.custom.html","formatted_body":"<p>Hmm, I didn't notice that. It is similar, but I think spelling out <code>.await</code> is a bit more readable than <code>~.</code>?<br>There is another example:</p>\n<pre><code class=\"language-js\">async function someFunc() { /* do something and returns 3 */ }\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700477103859,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$_33bZBsSf4_rJaKD0gx3yjxyHIdsIa0PChca80IU1mY"},
{"content":{"body":" * Hmm, I didn't notice that. It is similar, but I think spelling out `.await` is a bit more readable than `~.`?\nThere is another example:\n\n```js\nasync function someFunc() { /* do something and returns 3 */ }\n\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n// This is feel more natural since it is certain that we get an awaited result and added it by 5\nsomeFunc().await + 5\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Hmm, I didn't notice that. It is similar, but I think spelling out <code>.await</code> is a bit more readable than <code>~.</code>?<br>There is another example:</p>\n<pre><code class=\"language-js\">async function someFunc() { /* do something and returns 3 */ }\n\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n// This is feel more natural since it is certain that we get an awaited result and added it by 5\nsomeFunc().await + 5\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Hmm, I didn't notice that. It is similar, but I think spelling out `.await` is a bit more readable than `~.`?\nThere is another example:\n\n```js\nasync function someFunc() { /* do something and returns 3 */ }\n\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n// This is feel more natural since it is certain that we get an awaited result and added it by 5\nsomeFunc().await + 5\n```","format":"org.matrix.custom.html","formatted_body":"<p>Hmm, I didn't notice that. It is similar, but I think spelling out <code>.await</code> is a bit more readable than <code>~.</code>?<br>There is another example:</p>\n<pre><code class=\"language-js\">async function someFunc() { /* do something and returns 3 */ }\n\n// This produces the intended behavior though to me it feels somehow odd\nawait someFunc() + 5\n\n// This is feel more natural since it is certain that we get an awaited result and added it by 5\nsomeFunc().await + 5\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_33bZBsSf4_rJaKD0gx3yjxyHIdsIa0PChca80IU1mY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700477142541,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$QbazxJm9PwsvoMNMT7IHL8G0eKoFFYv2BguwHq8cXv8"},
{"content":{"body":"Purely my opinion though","m.mentions":{},"msgtype":"m.text"},"ts":1700477155121,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$v1w5JEfAq0WkOMPwQLofa3-9L1Vf8WqAaJuYMZ46S9Q"},
{"content":{"body":"Spelling out .await is already valid JS code, so we'd need different syntax anyway ","msgtype":"m.text"},"ts":1700477159379,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$u9dBpf2_98KfKU3uqjOuzgTa-6qF6D-Nb43euFqtHjk"},
{"content":{"body":"```\nvar o = { await: 2 }\nvar two = o.await;\n```","msgtype":"m.text"},"ts":1700477184380,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fkzdh3VBR2Q6Q_N37LWrpeogvwxt5wtqeg9SAbeT5yc"},
{"content":{"body":"Oh, I incorrectly assumed that await cannot be used as a field name, my fault","m.mentions":{},"msgtype":"m.text"},"ts":1700477223183,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$YvebCg9xutluaibcNvOxk4tUSri-fVQsZWWYQRzN7uY"},
{"content":{"body":"Then maybe yes, the wavy dot is kind of what I wanted","m.mentions":{},"msgtype":"m.text"},"ts":1700477247877,"senderName":"mika_akizuki","senderId":"@mika_akizuki:matrix.org","id":"$nQB-psGpDiPFIOokgUmLuyzQPfQguZixVEWHDgiGV8I"},
{"content":{"body":"> <@jmdyck:matrix.org> Jack Works: where can I see a rendered version of the new-spec branch?\n\n * https://raw.githack.com/tc39/proposal-pattern-matching/new-spec/index.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8DNEveBApB27KwqjBp_0FIiQQCjWwlEuracwakZzLOI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: where can I see a rendered version of the new-spec branch?</blockquote></mx-reply> * https://raw.githack.com/tc39/proposal-pattern-matching/new-spec/index.html","m.mentions":{"user_ids":["@jmdyck:matrix.org"]},"m.new_content":{"body":"https://raw.githack.com/tc39/proposal-pattern-matching/new-spec/index.html","format":"org.matrix.custom.html","formatted_body":"https://raw.githack.com/tc39/proposal-pattern-matching/new-spec/index.html","m.mentions":{"user_ids":["@jmdyck:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qESH8eXY33P5pxUXxqHrl3wtXvr3gQ9QQTCG7YpikMg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700496846402,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FY_FwDNnXO8pGPnYaLuE1OaGtmq1FQd1DotLC2D-hEg"},
{"content":{"body":"The pipeline operator ends up solving this as well - `fetch() |> await ^^ |> ^^.props`, etc","format":"org.matrix.custom.html","formatted_body":"The pipeline operator ends up solving this as well - <code>fetch() |&gt; await ^^ |&gt; ^^.props</code>, etc","m.mentions":{},"msgtype":"m.text"},"ts":1700506541893,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QVHJnaPY7ZwSswUbIbrxC8iEf53yH87Nfx0I1sBT4G0"},
{"content":{"body":"or even `await fetch() |> ^^.props`, i think","format":"org.matrix.custom.html","formatted_body":"or even <code>await fetch() |&gt; ^^.props</code>, i think","m.mentions":{},"m.relates_to":{"event_id":"$QVHJnaPY7ZwSswUbIbrxC8iEf53yH87Nfx0I1sBT4G0","is_falling_back":true,"m.in_reply_to":{"event_id":"$QVHJnaPY7ZwSswUbIbrxC8iEf53yH87Nfx0I1sBT4G0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1700520715349,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X9N2MwTpRbaIuxaBd-6LHXvlp86Dg8Bnu3PNN1ZRABs"}
]