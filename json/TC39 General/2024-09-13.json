[
{"content":{"body":"> <@domenicdenicola:matrix.org> A colleague wants to know if we've seen requests from developers, especially non-web JS developers like Node/Deno devs, for \"isolated module graphs\". That is, same-realm, but you can load a module multiple times in different graphs, executing its side effects each time.\n> \n> I suspect not much but I wanted to ask.\n\nYes. I’m with Mathieu in the Compartment camp. Agoric, Moddable, and MetaMask so far (that we know about) are using Compartments to isolate globals and module subgraphs. Motivating use cases are to enforce TOFU policies for transitive dependencies and separating a user space host API from guest code. The other case we are paying attention to is per-test module mocks for testing harnesses, and lightweight HMR","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2447vixShW_x24YcUy1jTrdfcXh7C_qI4xCFCJwmfwWvE\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>A colleague wants to know if we've seen requests from developers, especially non-web JS developers like Node/Deno devs, for \"isolated module graphs\". That is, same-realm, but you can load a module multiple times in different graphs, executing its side effects each time.\n\nI suspect not much but I wanted to ask.</blockquote></mx-reply>Yes. I’m with Mathieu in the Compartment camp. Agoric, Moddable, and MetaMask so far (that we know about) are using Compartments to isolate globals and module subgraphs. Motivating use cases are to enforce TOFU policies for transitive dependencies and separating a user space host API from guest code. The other case we are paying attention to is per-test module mocks for testing harnesses, and lightweight HMR","m.relates_to":{"m.in_reply_to":{"event_id":"$47vixShW_x24YcUy1jTrdfcXh7C_qI4xCFCJwmfwWvE"}},"msgtype":"m.text"},"ts":1726188449496,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$XusuZ1uPkNZ2i0yb74DQqkes7wSXohtMohmUxQBTvJY"},
{"content":{"body":"> <@kriskowal:aelf.land> Yes. I’m with Mathieu in the Compartment camp. Agoric, Moddable, and MetaMask so far (that we know about) are using Compartments to isolate globals and module subgraphs. Motivating use cases are to enforce TOFU policies for transitive dependencies and separating a user space host API from guest code. The other case we are paying attention to is per-test module mocks for testing harnesses, and lightweight HMR\n\nThe notion is to distribute the module map to individual instances that retain their direct import instances. Sources can be reused and reevaluated. https://tc39.es/proposal-compartments/0-module-and-module-source.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24XusuZ1uPkNZ2i0yb74DQqkes7wSXohtMohmUxQBTvJY\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>Yes. I’m with Mathieu in the Compartment camp. Agoric, Moddable, and MetaMask so far (that we know about) are using Compartments to isolate globals and module subgraphs. Motivating use cases are to enforce TOFU policies for transitive dependencies and separating a user space host API from guest code. The other case we are paying attention to is per-test module mocks for testing harnesses, and lightweight HMR</blockquote></mx-reply>The notion is to distribute the module map to individual instances that retain their direct import instances. Sources can be reused and reevaluated. https://tc39.es/proposal-compartments/0-module-and-module-source.html","m.relates_to":{"m.in_reply_to":{"event_id":"$XusuZ1uPkNZ2i0yb74DQqkes7wSXohtMohmUxQBTvJY"}},"msgtype":"m.text"},"ts":1726189125781,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$XgMd8cPUxoy2h1vTMczHYkWG-oN62FNKx-CYL5cRQ_Y"},
{"content":{"body":"This doesn’t interfere with the host module map but allows a virtualized module graph to grow out from it. ","format":"org.matrix.custom.html","formatted_body":"This doesn’t interfere with the host module map but allows a virtualized module graph to grow out from it.","msgtype":"m.text"},"ts":1726189169132,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$dQwQzB9CJAbyAUO7idKN1OHIUpVEP-kMfmqp12P2RSk"},
{"content":{"body":"> <@domenicdenicola:matrix.org> A colleague wants to know if we've seen requests from developers, especially non-web JS developers like Node/Deno devs, for \"isolated module graphs\". That is, same-realm, but you can load a module multiple times in different graphs, executing its side effects each time.\n> \n> I suspect not much but I wanted to ask.\n\nnode's vm Module api has use cases (for example, testing) and it can build a new graph in the same realm","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$47vixShW_x24YcUy1jTrdfcXh7C_qI4xCFCJwmfwWvE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>A colleague wants to know if we&#39;ve seen requests from developers, especially non-web JS developers like Node/Deno devs, for &quot;isolated module graphs&quot;. That is, same-realm, but you can load a module multiple times in different graphs, executing its side effects each time.<br/><br/>I suspect not much but I wanted to ask.</blockquote></mx-reply>node's vm Module api has use cases (for example, testing) and it can build a new graph in the same realm","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$47vixShW_x24YcUy1jTrdfcXh7C_qI4xCFCJwmfwWvE"}},"msgtype":"m.text"},"ts":1726192443156,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1rz-leNdpAwNSjsoDoFuC8Ogh4B7jVrjshYeOSKHpZs"},
{"content":{"body":"but the isolation of the compartment proposal gets in the way of that so its kind of a moot point i think","m.mentions":{},"msgtype":"m.text"},"ts":1726192487890,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$r5RNJ-DSqY7k56CDG9cIUwY60EUY6fw0WK4HH4rCTN8"},
{"content":{"body":"actually i guess that's the realm proposal not the compartment proposal","m.mentions":{},"msgtype":"m.text"},"ts":1726192682747,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3G2qhtZjNtBex86IVsXTHOgXzUiK0E-owMajWSRnbKs"},
{"content":{"body":" * node's vm Module api has use cases (for example, jest uses it for testing) and it can build a new graph in the same realm","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$47vixShW_x24YcUy1jTrdfcXh7C_qI4xCFCJwmfwWvE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>A colleague wants to know if we've seen requests from developers, especially non-web JS developers like Node/Deno devs, for \"isolated module graphs\". That is, same-realm, but you can load a module multiple times in different graphs, executing its side effects each time.<br><br>I suspect not much but I wanted to ask.</blockquote></mx-reply> * node's vm Module api has use cases (for example, jest uses it for testing) and it can build a new graph in the same realm","m.mentions":{},"m.new_content":{"body":"node's vm Module api has use cases (for example, jest uses it for testing) and it can build a new graph in the same realm","format":"org.matrix.custom.html","formatted_body":"node's vm Module api has use cases (for example, jest uses it for testing) and it can build a new graph in the same realm","m.mentions":{"user_ids":["@domenicdenicola:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1rz-leNdpAwNSjsoDoFuC8Ogh4B7jVrjshYeOSKHpZs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1726192791760,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$o6LtSiKpTh3e_WlSck9bbiJUswJA5YOlZPpkuvB_jj4"},
{"content":{"body":"I would like the Module and Evaluators proposals (which are coherent with Compartments) to be suitable for the Jest case and I think they can. snek let me know if that sounds achievable and worthwhile.","format":"org.matrix.custom.html","formatted_body":"I would like the Module and Evaluators proposals (which are coherent with Compartments) to be suitable for the Jest case and I think they can. <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a> let me know if that sounds achievable and worthwhile.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1726242101175,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$cJdyOlazdknAijbpTBYZJpYshVnkLuZCpLesXr-XOWI"},
{"content":{"body":"i don't know the specifics, but i assume as long as they can share objects it will be fine","m.mentions":{},"msgtype":"m.text"},"ts":1726247696450,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YTqZECHcFGYk3lpOmIDS74njz14noEMOGF0sNx74fMw"},
{"content":{"body":"i would really just love for the vm module in node to be obsolete ","m.mentions":{},"msgtype":"m.text"},"ts":1726247707882,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$t6SnPDLJu-h9XOeqJfvuqUfCfF-k7EcJHM_AL80UGsY"},
{"content":{"body":"For test runners, in most cases a compartment ought to be sufficient. The main problem is if the test mutates the intrinsics. That can be solved a couple different ways:\n- freeze the intrinsics, but that breaks some legitimate cases, namely tripping the override mistake, and preventing tests of polyfills\n- capture the original intrinsics before running the test, and restore them after, assuming they were left configurable / extensible. That's somewhat heavy handed.\nOf course my preference would be to run everything in a world where intrinsics are frozen, as besides init code, there really should be no need for them to remain mutable for normal code","format":"org.matrix.custom.html","formatted_body":"<p>For test runners, in most cases a compartment ought to be sufficient. The main problem is if the test mutates the intrinsics. That can be solved a couple different ways:</p>\n<ul>\n<li>freeze the intrinsics, but that breaks some legitimate cases, namely tripping the override mistake, and preventing tests of polyfills</li>\n<li>capture the original intrinsics before running the test, and restore them after, assuming they were left configurable / extensible. That's somewhat heavy handed.<br>Of course my preference would be to run everything in a world where intrinsics are frozen, as besides init code, there really should be no need for them to remain mutable for normal code</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1726255382649,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cSm6qTzW5TZtrr6Z5OIokZrKMgdqEWNK7UNcTpCom1A"},
{"content":{"body":"And can fall back to ShadowRealm for the legit cases where that’s unreasonable.","m.mentions":{},"msgtype":"m.text"},"ts":1726255442646,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$NqQr_pc4YTOIFdXU-de4ZX0KOcqyxwEDbqTdoihAe7Y"}
]