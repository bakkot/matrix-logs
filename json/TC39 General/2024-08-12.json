[
{"content":{"body":"Does anybody remember why we have a `[no LineTerminator here]` restriction in arrow functions, before `=>`? I don't think it's solving any ambiguity","format":"org.matrix.custom.html","formatted_body":"Does anybody remember why we have a <code>[no LineTerminator here]</code> restriction in arrow functions, before <code>=&gt;</code>? I don't think it's solving any ambiguity","m.mentions":{},"msgtype":"m.text"},"ts":1723473763932,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Oeug-YhAqR7pZnvnT81ft7DpKTSWLkCWp_PqoqQT5rE"},
{"content":{"body":"That restriction was added to the ArrowFunction production in draft 24 of ES6 (roughly April 2014?), if that helps you find notes.","m.mentions":{},"msgtype":"m.text"},"ts":1723476687438,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$r0OeXtR78uqBQ1Sc_z-4NgMzftawLfNWPHE9vXpCl5Y"},
{"content":{"body":"I think this was for consistency with async arrow functions","m.mentions":{},"msgtype":"m.text"},"ts":1723477332723,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q6yytcH3_ysI158gmjFOGlYf-WyGxQ1yjzTs67a5wRc"},
{"content":{"body":"AsyncArrowFunctions were added in PR #692, a couple years later.","m.mentions":{},"msgtype":"m.text"},"ts":1723477624226,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$ccGZbT1Lt9fT7CCPLnmUUP8Y3ovYjLJA2kjKDuBTrtw"},
{"content":{"body":"yeah but I think this future thing was anticipated","m.mentions":{},"msgtype":"m.text"},"ts":1723477637313,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a813XHkYWUbVMkxVI2C0AEB6vBAdF2Tlnz7jH9L0R0Y"},
{"content":{"body":"> <@jmdyck:matrix.org> That restriction was added to the ArrowFunction production in draft 24 of ES6 (roughly April 2014?), if that helps you find notes.\n\nThanks!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$r0OeXtR78uqBQ1Sc_z-4NgMzftawLfNWPHE9vXpCl5Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br>That restriction was added to the ArrowFunction production in draft 24 of ES6 (roughly April 2014?), if that helps you find notes.</blockquote></mx-reply>Thanks!","m.mentions":{"user_ids":["@jmdyck:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$r0OeXtR78uqBQ1Sc_z-4NgMzftawLfNWPHE9vXpCl5Y"}},"msgtype":"m.text"},"ts":1723479042014,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GBStRJFBzSXjlxMbdk7CQKBVYj4yAf22TTUyykM-pVY"},
{"content":{"body":"> <@littledan:matrix.org> yeah but I think this future thing was anticipated\n\nasync arrow functions also do not need that restriction, it was done just for consistency with the sync version","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$a813XHkYWUbVMkxVI2C0AEB6vBAdF2Tlnz7jH9L0R0Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yeah but I think this future thing was anticipated</blockquote></mx-reply>async arrow functions also do not need that restriction, it was done just for consistency with the sync version","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a813XHkYWUbVMkxVI2C0AEB6vBAdF2Tlnz7jH9L0R0Y"}},"msgtype":"m.text"},"ts":1723479047210,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bX1NRsOrE2sTSuUUR0lFPMZM1qdRJtLnBKr_xNXyG3Y"},
{"content":{"body":"> <@littledan:matrix.org> yeah but I think this future thing was anticipated\n\n * async arrow functions also do not need that restriction, I believe it was done just for consistency with the sync version","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$a813XHkYWUbVMkxVI2C0AEB6vBAdF2Tlnz7jH9L0R0Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yeah but I think this future thing was anticipated</blockquote></mx-reply> * async arrow functions also do not need that restriction, I believe it was done just for consistency with the sync version","m.mentions":{},"m.new_content":{"body":"async arrow functions also do not need that restriction, I believe it was done just for consistency with the sync version","format":"org.matrix.custom.html","formatted_body":"async arrow functions also do not need that restriction, I believe it was done just for consistency with the sync version","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bX1NRsOrE2sTSuUUR0lFPMZM1qdRJtLnBKr_xNXyG3Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1723479286147,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$NVBgnowowjJMO8yk2YJhGFYR9n0i2x4LGlmnCSHjRrc"},
{"content":{"body":"Looking at https://github.com/tc39/notes/blob/main/meetings/2014-01/jan-30.md#asyncawait it looks indeed like it was added to disambiguate this case:\n```js\nasync (foo)\n=> bar\n```\nbut that's not (and wasn't, at the time) ambiguous ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"<p>Looking at https://github.com/tc39/notes/blob/main/meetings/2014-01/jan-30.md#asyncawait it looks indeed like it was added to disambiguate this case:</p>\n<pre><code class=\"language-js\">async (foo)\n=&gt; bar\n</code></pre>\n<p>but that's not (and wasn't, at the time) ambiguous ðŸ¤”</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723479642013,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zgYAC3_ULUxaPPGMVkHr5apu_did5VdjCyB99Siqvmk"},
{"content":{"body":"The reason I'm asking is because this rule adds some annoying complexity to Babel's code printer (for some reason more than the other no-LineTerminator-here restrictions), and I know that it's also being problematic for tools that do position-preserving type stripping","m.mentions":{},"msgtype":"m.text"},"ts":1723479696303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-sUATDrhQ1T5jL830aYvnmJPJ8wrDwf4BLl7FdrYyM4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Looking at https://github.com/tc39/notes/blob/main/meetings/2014-01/jan-30.md#asyncawait it looks indeed like it was added to disambiguate this case:\n> ```js\n> async (foo)\n> => bar\n> ```\n> but that's not (and wasn't, at the time) ambiguous ðŸ¤”\n\nisn't `async` a valid identifier?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zgYAC3_ULUxaPPGMVkHr5apu_did5VdjCyB99Siqvmk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>Looking at https://github.com/tc39/notes/blob/main/meetings/2014-01/jan-30.md#asyncawait it looks indeed like it was added to disambiguate this case:</p>\n<pre><code class=\"language-js\">async (foo)\n=&gt; bar\n</code></pre>\n<p>but that's not (and wasn't, at the time) ambiguous ðŸ¤”</p>\n</blockquote></mx-reply>isn't <code>async</code> a valid identifier?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zgYAC3_ULUxaPPGMVkHr5apu_did5VdjCyB99Siqvmk"}},"msgtype":"m.text"},"ts":1723479737207,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$NZOcYZ2ZzeI9LPX8J8bizui-D5PMku5loj2jt9DGvGM"},
{"content":{"body":"> <@abotella:igalia.com> isn't `async` a valid identifier?\n\nYes, and?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$NZOcYZ2ZzeI9LPX8J8bizui-D5PMku5loj2jt9DGvGM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>isn't <code>async</code> a valid identifier?</blockquote></mx-reply>Yes, and?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NZOcYZ2ZzeI9LPX8J8bizui-D5PMku5loj2jt9DGvGM"}},"msgtype":"m.text"},"ts":1723479929963,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q5avklP977yvOlEo13LeQdClj7iOwb_jUsCtyxia9X8"},
{"content":{"body":"so isn't `async (foo)` ambiguous with calling an function called `async`?","format":"org.matrix.custom.html","formatted_body":"so isn't <code>async (foo)</code> ambiguous with calling an function called <code>async</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1723479996139,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-qnk9wroXKv58H32p5Rgi-3hDjSXmX7sEOyeqGmINMk"},
{"content":{"body":"The `=>` after disambiguates it. Same for\n```js\n(foo)\n=> 2\n```\n`(foo)` could be its own expression, but then `=>` can disambiguate it","format":"org.matrix.custom.html","formatted_body":"<p>The <code>=&gt;</code> after disambiguates it. Same for</p>\n<pre><code class=\"language-js\">(foo)\n=&gt; 2\n</code></pre>\n<p><code>(foo)</code> could be its own expression, but then <code>=&gt;</code> can disambiguate it</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723480063490,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3KPZxPIWawy-lQ2KpQ1JYtEcCpfP261JggEdDeFAiD8"},
{"content":{"body":" * The `=>` after disambiguates it. Same for\n\n```js\n(foo)\n=> 2\n```\n\n`(foo)` could be its own expression, but then `=>` disambiguates it","format":"org.matrix.custom.html","formatted_body":" * <p>The <code>=&gt;</code> after disambiguates it. Same for</p>\n<pre><code class=\"language-js\">(foo)\n=&gt; 2\n</code></pre>\n<p><code>(foo)</code> could be its own expression, but then <code>=&gt;</code> disambiguates it</p>\n","m.mentions":{},"m.new_content":{"body":"The `=>` after disambiguates it. Same for\n\n```js\n(foo)\n=> 2\n```\n\n`(foo)` could be its own expression, but then `=>` disambiguates it","format":"org.matrix.custom.html","formatted_body":"<p>The <code>=&gt;</code> after disambiguates it. Same for</p>\n<pre><code class=\"language-js\">(foo)\n=&gt; 2\n</code></pre>\n<p><code>(foo)</code> could be its own expression, but then <code>=&gt;</code> disambiguates it</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3KPZxPIWawy-lQ2KpQ1JYtEcCpfP261JggEdDeFAiD8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1723480083731,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5uaSQIPf4y47ItKz0jittq3hZsJa61D7T23WOFrkYaY"},
{"content":{"body":"Ok, it looks like the reason was for forward compatibility with this proposal: https://bterlson.github.io/headless-arrows/\n\nIn the past 10 years nobody pushed for that proposal and even the proposal itself explains why it would be confusing due to async arrow functions, probably we don't need the restriction anymore","m.mentions":{},"msgtype":"m.text"},"ts":1723480208301,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$t5TvXgPeSkAr4bc2OXIR2ZpTMvW0zuNB1F4ApK9tWUg"},
{"content":{"body":"yeah, that's right, we were discussing headless arrow functions back then. And you don't even need async for that to be ambiguous, e.g., this is ambiguous:\n```js\nx\n=> y\n```","format":"org.matrix.custom.html","formatted_body":"<p>yeah, that's right, we were discussing headless arrow functions back then. And you don't even need async for that to be ambiguous, e.g., this is ambiguous:</p>\n<pre><code class=\"language-js\">x\n=&gt; y\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723480820715,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eCD6T-Q4nPoO-5LWIdBYM1Un0v1TL49ml_SFNLlxjOY"},
{"content":{"body":"(also, even without the restriction that proposal could still happen, same as we have prefix and infix `+`)","format":"org.matrix.custom.html","formatted_body":"(also, even without the restriction that proposal could still happen, same as we have prefix and infix <code>+</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1723480820807,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ESJqJOcyZZZMoXLYM1_z-YhJz8dvK80rITNMZiGiUOE"},
{"content":{"body":"honestly I'd still like some kind of headless arrow functions to happen--they'd make signals more ergonomic! But I'd type them as `^y` instead","format":"org.matrix.custom.html","formatted_body":"honestly I'd still like some kind of headless arrow functions to happen--they'd make signals more ergonomic! But I'd type them as <code>^y</code> instead","m.mentions":{},"msgtype":"m.text"},"ts":1723480862614,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_gojO1tDrezN_QnFshSktQTrzrM09X4CFR_UX6YXths"},
{"content":{"body":"`^` has the same ambiguity! :P\n\n```js\nX\n^y\n```","format":"org.matrix.custom.html","formatted_body":"<p><code>^</code> has the same ambiguity! :P</p>\n<pre><code class=\"language-js\">X\n^y\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723480884265,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5XTTCnNxzux1l_KCvBD11oTrpbcsL7EQ1MrwuV2yRe8"},
{"content":{"body":"Which I consider perfectly fine -- if somebody likes ASI they just have to learn to prefix lines starting with `^`/`=>` with a semicolon","format":"org.matrix.custom.html","formatted_body":"Which I consider perfectly fine -- if somebody likes ASI they just have to learn to prefix lines starting with <code>^</code>/<code>=&gt;</code> with a semicolon","m.mentions":{},"msgtype":"m.text"},"ts":1723480928121,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oiGPo14uzHNQ6svXhL45-E1Jc_R_IE-qMJXL3UXbomM"},
{"content":{"body":"right... it is fine","m.mentions":{},"msgtype":"m.text"},"ts":1723481020747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ijEUWSQf63RXCNdaXu5LB4dNxBPgqRYdph_UpGnJfi4"},
{"content":{"body":"you don't usually want to do an ExpressionStatement with an arrow function anyway! not very useful","m.mentions":{},"msgtype":"m.text"},"ts":1723481085863,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3054pRLzfUK2eS-gTBd2xodJf9TgWfskM5hpJfsuD8k"},
{"content":{"body":"oh jeeze I would prefer we not introduce yet another syntax for functions","m.mentions":{},"msgtype":"m.text"},"ts":1723482116929,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jhMoMZpwbt7xR_GPlCXOg2MmSjG6DbaGA19QLQr00UQ"},
{"content":{"body":"don't worry I'm not actually pushing that (since it seems too unlikely that it'll get consensus)","m.mentions":{},"msgtype":"m.text"},"ts":1723489002404,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_QcTUACdTlRI11iFegrV-q3m9DsSC83SOZDPqCR9JYw"}
]