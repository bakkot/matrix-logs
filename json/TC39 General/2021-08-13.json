[
{"content":{"body":"I don't remember why I removed extending null from the March agenda but perhaps I can bring it to August.","msgtype":"m.text"},"ts":1628852478379,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XhFWfVokFR-wlDAJ0BY0TmbnPbuwiTLDLTmyb8uHqhA"},
{"content":{"body":"New proposal for extending `Math` methods to handle BigInts. https://github.com/js-choi/proposal-bigint-math, https://jschoi.org/21/es-bigint-math/","format":"org.matrix.custom.html","formatted_body":"New proposal for extending <code>Math</code> methods to handle BigInts. https://github.com/js-choi/proposal-bigint-math, https://jschoi.org/21/es-bigint-math/","msgtype":"m.text"},"ts":1628863100253,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rP9Uca6NeenM0vMVqvctBA1MDaUjXo7KkSGuIdemCz0"},
{"content":{"body":"Might present at next meeting for Stage 1. Stuck on a couple of questions.","msgtype":"m.text"},"ts":1628863107132,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2ZrKsKg7G8ZyMPWm3B9ASRErankc09G7fugOnuE5pvA"},
{"content":{"body":"1. Should there be any methods that would return Numbers from BigInts, like `Math.sin`? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.)\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions?\n3. Are there any real-use cases for hyperbolic functions on BigInts?","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would return Numbers from BigInts, like <code>Math.sin</code>? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.)</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions?</li>\n<li>Are there any real-use cases for hyperbolic functions on BigInts?</li>\n</ol>\n","msgtype":"m.text"},"ts":1628863209309,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8"},
{"content":{"body":" * 1. Should there be any methods that would return Numbers from BigInts, like `Math.sin`? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic functions on BigInts? Answer is currently don’t know but they’re specified anyway.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should there be any methods that would return Numbers from BigInts, like <code>Math.sin</code>? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n</ol>\n","m.new_content":{"body":"1. Should there be any methods that would return Numbers from BigInts, like `Math.sin`? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic functions on BigInts? Answer is currently don’t know but they’re specified anyway.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would return Numbers from BigInts, like <code>Math.sin</code>? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628863243170,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gM7jpYSUBPcE6k37BhK6IHYj80jfLIfVe_Et6JXj35A"},
{"content":{"body":" * 1. Should there be any methods that would return Numbers from BigInts, like `Math.sin`? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should there be any methods that would return Numbers from BigInts, like <code>Math.sin</code>? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n</ol>\n","m.new_content":{"body":"1. Should there be any methods that would return Numbers from BigInts, like `Math.sin`? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would return Numbers from BigInts, like <code>Math.sin</code>? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628863512009,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aQ0u5rfSLj4E5aBxeODSICD5VDbOFjjIViaZGLUhTOE"},
{"content":{"body":"ljharb: You mentioned a few months ago you were interested in such a proposal.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: You mentioned a few months ago you were interested in such a proposal.","msgtype":"m.text"},"ts":1628863533814,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YT5weS3KvDXIShzByQX9_zJ56qiN7GFzEzrwBzZDljI"},
{"content":{"body":" * 1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n</ol>\n","m.new_content":{"body":"1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628863742869,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sSl76e48YVU0QLytlO8vTyrex-YQW-bWYCfIrq_PxHM"},
{"content":{"body":" * 1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? (Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? (Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? (Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? (Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628864006763,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NEWvpZSxYVQhffvqo31v5x-xf0P05kXMqIPJitmM3uM"},
{"content":{"body":"Richard Gibson: yup, basically want a bunch of intrinsics methods that act like @@species is never anything except what the intrinsic they are directly on the prototype of","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: yup, basically want a bunch of intrinsics methods that act like @@species is never anything except what the intrinsic they are directly on the prototype of","msgtype":"m.text"},"ts":1628864008292,"senderName":"bradleymeck","senderId":"@bradleymeck:matrix.org","id":"$xT5l7cb2qFNW3bOnx3Ak9wuTkn0aCQ3xu6QO0DWjf-I"},
{"content":{"body":" * 1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should there be any methods that would have to return Numbers from BigInts, like `Math.sin`, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.\n2. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n3. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n4. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should there be any methods that would have to return Numbers from BigInts, like <code>Math.sin</code>, which ranges within ±1? (Trigonometric functions would have to return Numbers, although hyperbolic functions would not.) Answer is currently no.</li>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628864012218,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$O23EiQp0Oj0kWzBmJewT9tAbYn9RDKzFhEs3LsoXlwI"},
{"content":{"body":" * 1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm/irrational functions on BigInts? Answer is currently don’t know but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628866184518,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4Ol7FD-u6WCn1PpuWzUZ_e5_hZnWe2fQYajWXzpLYmA"},
{"content":{"body":" * 1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628866271523,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6j664owAf6TlIRU-ZyE3yejwc1GUwjQ3VIo_v5J5eVc"},
{"content":{"body":" * 1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no, we are not currently extending the trigonometric functions.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no, we are not currently extending the trigonometric functions.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no, we are not currently extending the trigonometric functions.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is currently no, we are not currently extending the trigonometric functions.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628866362098,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jNNR5MidzNS5wKIwDeJnjbfl6kO0nCavrJ_GUIJ_npY"},
{"content":{"body":" * 1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is no, and because of this we are not currently extending the trigonometric functions.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is no, and because of this we are not currently extending the trigonometric functions.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","m.new_content":{"body":"1. Should `round`, `floor`, etc. take BigInts, acting as identity functions? Answer is currently no.\n2. Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.\n3. If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.\n4. Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is no, and because of this we are not currently extending the trigonometric functions.\n5. What should the variadic `Math.hypot`, `max`, and `min` return when given no BigInt arguments? Answer: We make new `big` versions of each of them, and we make `bigHypot` return `0`, and `bigMax`/`bigMin` throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Should <code>round</code>, <code>floor</code>, etc. take BigInts, acting as identity functions? Answer is currently no.</li>\n<li>Are there any real-use cases for hyperbolic/root/logarithm functions on BigInts? Answer is currently “don’t know” but they’re specified anyway.</li>\n<li>If we do extend hyperbolic/root/logarithm/irrational functions to accept BigInts, then should they return BigInts, and if so, how should they be rounded? Answer is currently yes and “it’s ‘implementation-approximated’”.</li>\n<li>Should trigonometric functions, which generally have small domains and ranges, return Numbers when given BigInts? Answer is no, and because of this we are not currently extending the trigonometric functions.</li>\n<li>What should the variadic <code>Math.hypot</code>, <code>max</code>, and <code>min</code> return when given no BigInt arguments? Answer: We make new <code>big</code> versions of each of them, and we make <code>bigHypot</code> return <code>0</code>, and <code>bigMax</code>/<code>bigMin</code> throw a TypeError.</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$dVpZcixiYSRT8BncbHnRw3z_vwKWiG6G3bYGKVH9Po8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628866400619,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$q-fnME89PYcU68i_7J2a-1plQryRdntkGsboEadK5OA"},
{"content":{"body":"@jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible ","format":"org.matrix.custom.html","formatted_body":"@jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible","msgtype":"m.text"},"ts":1628867890240,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x42wjUEo2dq9QBZNq6QeX2yEdyIueU_1botgvtsyiD8"},
{"content":{"body":"> <@ljharb:matrix.org> @jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible\n\nWhat I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different things, which might cause bugs if that breaks programmer intuition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$x42wjUEo2dq9QBZNq6QeX2yEdyIueU_1botgvtsyiD8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>@jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible</blockquote></mx-reply>What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different things, which might cause bugs if that breaks programmer intuition.","m.relates_to":{"m.in_reply_to":{"event_id":"$x42wjUEo2dq9QBZNq6QeX2yEdyIueU_1botgvtsyiD8"}},"msgtype":"m.text"},"ts":1628868201684,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AmLvM-0hqaiSQx3uQxcD-oQpsmhiitXLV97Ou0KCqV0"},
{"content":{"body":"> <@ljharb:matrix.org> @jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible\n\n * What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types, which might cause bugs if that breaks programmer intuition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$x42wjUEo2dq9QBZNq6QeX2yEdyIueU_1botgvtsyiD8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>@jschoi my answers are yes, don’t know, sounds good, probably reasonable, and I’d prefer not making new versions if possible</blockquote></mx-reply> * What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types, which might cause bugs if that breaks programmer intuition.","m.new_content":{"body":"What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types, which might cause bugs if that breaks programmer intuition.","format":"org.matrix.custom.html","formatted_body":"What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types, which might cause bugs if that breaks programmer intuition.","msgtype":"m.text"},"m.relates_to":{"event_id":"$AmLvM-0hqaiSQx3uQxcD-oQpsmhiitXLV97Ou0KCqV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628868210780,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ozeKIGBhc4e3hkN78fiWtlhurnp-D51kO1REIX1-i38"},
{"content":{"body":"Likewise with `Math.hypot(arrayOfBigIntsButItIsActuallyEmpty)` returning `+0` the Number.","format":"org.matrix.custom.html","formatted_body":"Likewise with <code>Math.hypot(arrayOfBigIntsButItIsActuallyEmpty)</code> returning <code>+0</code> the Number.","msgtype":"m.text"},"ts":1628868238277,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gzv0vQIEnxytcDB26325bdPSUJHVjQKjSgmc1ayMFE4"},
{"content":{"body":" * Likewise with `Math.hypot(...arrayOfBigIntsButItIsActuallyEmpty)` returning `+0` the Number.","format":"org.matrix.custom.html","formatted_body":" * Likewise with <code>Math.hypot(...arrayOfBigIntsButItIsActuallyEmpty)</code> returning <code>+0</code> the Number.","m.new_content":{"body":"Likewise with `Math.hypot(...arrayOfBigIntsButItIsActuallyEmpty)` returning `+0` the Number.","format":"org.matrix.custom.html","formatted_body":"Likewise with <code>Math.hypot(...arrayOfBigIntsButItIsActuallyEmpty)</code> returning <code>+0</code> the Number.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gzv0vQIEnxytcDB26325bdPSUJHVjQKjSgmc1ayMFE4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628868255687,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_lhO3S7E0tsAHerjl7B_ggIMTI79dCnGniLE3HM4QRg"},
{"content":{"body":"This probably would cause the same sort of implicit Number/BigInt type mixing that the original design was trying to avoid.","msgtype":"m.text"},"ts":1628868301208,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Y3RjeC6OdrSvz7pzCw2vaWt0TACBxIK0r3MS3nfBvJw"},
{"content":{"body":" * Regarding the last question—What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types, which might cause bugs if that breaks programmer intuition.","format":"org.matrix.custom.html","formatted_body":" * Regarding the last question—What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types, which might cause bugs if that breaks programmer intuition.","m.new_content":{"body":"Regarding the last question—What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types, which might cause bugs if that breaks programmer intuition.","format":"org.matrix.custom.html","formatted_body":"Regarding the last question—What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types, which might cause bugs if that breaks programmer intuition.","msgtype":"m.text"},"m.relates_to":{"event_id":"$AmLvM-0hqaiSQx3uQxcD-oQpsmhiitXLV97Ou0KCqV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628868329901,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$noZwxJRRZ5MU3qMxJ4DZgZc3P_G4QG7FLS6_Td_8OLA"},
{"content":{"body":" * Regarding the last question—What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types `1n` and `+Infinity`, which might cause bugs if that type switching breaks programmer intuition with arrays of BigInts.","format":"org.matrix.custom.html","formatted_body":" * Regarding the last question—What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types <code>1n</code> and <code>+Infinity</code>, which might cause bugs if that type switching breaks programmer intuition with arrays of BigInts.","m.new_content":{"body":"Regarding the last question—What I’m concerned about is `Math.max(0n, 1n)` and `Math.max()` returning different types `1n` and `+Infinity`, which might cause bugs if that type switching breaks programmer intuition with arrays of BigInts.","format":"org.matrix.custom.html","formatted_body":"Regarding the last question—What I’m concerned about is <code>Math.max(0n, 1n)</code> and <code>Math.max()</code> returning different types <code>1n</code> and <code>+Infinity</code>, which might cause bugs if that type switching breaks programmer intuition with arrays of BigInts.","msgtype":"m.text"},"m.relates_to":{"event_id":"$AmLvM-0hqaiSQx3uQxcD-oQpsmhiitXLV97Ou0KCqV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1628868537418,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gBKbSugzsWbn0FFZqIDnG29tp6RgG9Zgw_rG5EF6v-0"}
]