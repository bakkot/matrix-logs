[
{"content":{"body":"> <@joepie91:pixie.town> the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections\n\nWe already lost that battle when we added `Promise.resolve`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw\">In reply to</a> <a href=\"https://matrix.to/#/@joepie91:pixie.town\">@joepie91:pixie.town</a><br>the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections</blockquote></mx-reply>We already lost that battle when we added <code>Promise.resolve</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw"}},"msgtype":"m.text"},"ts":1655082620999,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc"},
{"content":{"body":"Iâ€™ve hit the queueing usecase enough times that it seems like a deferred struct is a good addition.","msgtype":"m.text"},"ts":1655082679766,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NI5ZM5JI-uI2SSbV5oxkMJQfEJ9PlgjDS9l2a1KPemQ"}
]