[
{"content":{"body":"> <@joepie91:pixie.town> the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections\n\nWe already lost that battle when we added `Promise.resolve`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw\">In reply to</a> <a href=\"https://matrix.to/#/@joepie91:pixie.town\">@joepie91:pixie.town</a><br>the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections</blockquote></mx-reply>We already lost that battle when we added <code>Promise.resolve</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw"}},"msgtype":"m.text"},"ts":1655082620999,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc"},
{"content":{"body":"I’ve hit the queueing usecase enough times that it seems like a deferred struct is a good addition.","msgtype":"m.text"},"ts":1655082679766,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NI5ZM5JI-uI2SSbV5oxkMJQfEJ9PlgjDS9l2a1KPemQ"},
{"content":{"body":"ljharb: I lack experience here; what does misuse look like?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I lack experience here; what does misuse look like?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: I lack experience here; what does misuse look like?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I lack experience here; what does misuse look like?","mimetype":"text/html"}]},"ts":1655083019828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c79XsB-13Jby67OxN8PdXIwjTc4tpm9Ui2SO2Myw5pM"},
{"content":{"body":"I’ve seen tons of people use the pattern when it’s not needed; the number of times those legit use cases come up are very rare ime","msgtype":"m.text"},"ts":1655089226113,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5EDgji8ovzAg6Hm8KmD2CZkBCrzea8XyAVlYgmK_o4Y"},
{"content":{"body":"I’ve seen this pattern often be needed when adapting a callback-based API to promises","msgtype":"m.text"},"ts":1655090103048,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Gwcg6-aAqR7ui-Y-9Qj71HUukFp7ubTCgik1xSGIX8o"},
{"content":{"body":"Otoh I think people overused it back when promises were just coming out, async await was not yet standard, and people didn’t really understand .then","msgtype":"m.text"},"ts":1655090153301,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XXBJrX-cB1IKlqAq5nNuxvzZt7JYgzoKnfAyiOT4ulY"},
{"content":{"body":"I think now would probably be a good time to add Promise.defer given the improved environment and continued need","msgtype":"m.text"},"ts":1655090177408,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$edHVMenCGOebcY0lbZynXIuyEnZtgxkh5FPoapSr-mI"},
{"content":{"body":"I don’t think the legit use case is rare. It is just that, before async await, everyone was very confused all the time ","format":"org.matrix.custom.html","formatted_body":"I don’t think the legit use case is rare. It is just that, before async await, everyone was very confused all the time","msgtype":"m.text"},"ts":1655090224760,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oQusnjYrAMPrJXJldhYtijCHRXuRSWX18QyKlKbVMMg"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> There is some popular prior art: jQuery's `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.\n\nThe chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>There is some popular prior art: jQuery&#39;s `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.</blockquote></mx-reply>The chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","m.relates_to":{"m.in_reply_to":{"event_id":"$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> There is some popular prior art: jQuery's `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.\n\nThe chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>There is some popular prior art: jQuery&#39;s `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.</blockquote></mx-reply>The chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","mimetype":"text/html"}]},"ts":1655090518494,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VfQtg4npZSHvkjIgdYd59Gv_jhzLZRiA7JOJIvEadUs"},
{"content":{"body":"That is to say, Promise.defer() => {promise, resolve, reject} is sound design (since by default promise and resolve should be held by different parties for POLA purposes), and while I named it “defer” originally as a nod to “Deferreds” in Python’s Twisted, it doesn’t suffer the same design error.","msgtype":"m.text","org.matrix.msc1767.text":"That is to say, Promise.defer() => {promise, resolve, reject} is sound design (since by default promise and resolve should be held by different parties for POLA purposes), and while I named it “defer” originally as a nod to “Deferreds” in Python’s Twisted, it doesn’t suffer the same design error."},"ts":1655090633913,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aT2OAGyGkXCXKP7fsLx3ux_uCmfIhr5rM4-Fwu9DNpo"},
{"content":{"body":"Yeah it is important that the callbacks returned close over the capability related to the individual promise (this was an issue in V8’s weird defer)","msgtype":"m.text"},"ts":1655090651060,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z6keFJXZ5-0_v5pTCFASHSo2laO566vrId8NJ9kGR1g"},
{"content":{"body":"I was skeptical of defer at some point due to making all the callbacks but that was too much of a microoptimization I think ","format":"org.matrix.custom.html","formatted_body":"I was skeptical of defer at some point due to making all the callbacks but that was too much of a microoptimization I think","msgtype":"m.text"},"ts":1655090723095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aA05oWxFe5ye2augvtDpO9QILz775fTVYExBOE5gtPc"},
{"content":{"body":"I find myself using Promise.defer() for async queues too, but it’s stuffed in a library and only gets used that way once. But I also get a lot of use of Promise.defer() for 1. broadcasting a drain event 2. broadcasting a fast moving state change to a slow consumer (replace the deferred when the consumer observes the current state) 3. chaining mutual exclusion for stateful protocols or “baton passing”","msgtype":"m.text","org.matrix.msc1767.text":"I find myself using Promise.defer() for async queues too, but it’s stuffed in a library and only gets used that way once. But I also get a lot of use of Promise.defer() for 1. broadcasting a drain event 2. broadcasting a fast moving state change to a slow consumer (replace the deferred when the consumer observes the current state) 3. chaining mutual exclusion for stateful protocols or “baton passing”"},"ts":1655090881594,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ep75rxWBZcxArzkC206Ou1WvuZreS95w3IX4EA4hn8A"},
{"content":{"body":"Async queue https://github.com/endojs/endo/blob/master/packages/stream/index.js#L31-L50","msgtype":"m.text","org.matrix.msc1767.text":"Async queue https://github.com/endojs/endo/blob/master/packages/stream/index.js#L31-L50"},"ts":1655090953191,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zBvS09IjloTDLaZb5rcyXiztIxLtCkbsJQT_e0XuOL0"}
]