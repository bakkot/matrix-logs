[
{"content":{"body":"> <@joepie91:pixie.town> the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections\n\nWe already lost that battle when we added `Promise.resolve`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw\">In reply to</a> <a href=\"https://matrix.to/#/@joepie91:pixie.town\">@joepie91:pixie.town</a><br>the primary reason for doing so, aside from the self-contained nature of the resulting promise, is that it will also capture synchronously thrown errors in the conversion code and propagate them as promise rejections</blockquote></mx-reply>We already lost that battle when we added <code>Promise.resolve</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$qEJa2oAOtE2TWwgegfXM8adVvbqguNeLnXClw1Q_Auw"}},"msgtype":"m.text"},"ts":1655082620999,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc"},
{"content":{"body":"I’ve hit the queueing usecase enough times that it seems like a deferred struct is a good addition.","msgtype":"m.text"},"ts":1655082679766,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NI5ZM5JI-uI2SSbV5oxkMJQfEJ9PlgjDS9l2a1KPemQ"},
{"content":{"body":"ljharb: I lack experience here; what does misuse look like?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I lack experience here; what does misuse look like?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: I lack experience here; what does misuse look like?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I lack experience here; what does misuse look like?","mimetype":"text/html"}]},"ts":1655083019828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c79XsB-13Jby67OxN8PdXIwjTc4tpm9Ui2SO2Myw5pM"},
{"content":{"body":"I’ve seen tons of people use the pattern when it’s not needed; the number of times those legit use cases come up are very rare ime","msgtype":"m.text"},"ts":1655089226113,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5EDgji8ovzAg6Hm8KmD2CZkBCrzea8XyAVlYgmK_o4Y"},
{"content":{"body":"I’ve seen this pattern often be needed when adapting a callback-based API to promises","msgtype":"m.text"},"ts":1655090103048,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Gwcg6-aAqR7ui-Y-9Qj71HUukFp7ubTCgik1xSGIX8o"},
{"content":{"body":"Otoh I think people overused it back when promises were just coming out, async await was not yet standard, and people didn’t really understand .then","msgtype":"m.text"},"ts":1655090153301,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XXBJrX-cB1IKlqAq5nNuxvzZt7JYgzoKnfAyiOT4ulY"},
{"content":{"body":"I think now would probably be a good time to add Promise.defer given the improved environment and continued need","msgtype":"m.text"},"ts":1655090177408,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$edHVMenCGOebcY0lbZynXIuyEnZtgxkh5FPoapSr-mI"},
{"content":{"body":"I don’t think the legit use case is rare. It is just that, before async await, everyone was very confused all the time ","format":"org.matrix.custom.html","formatted_body":"I don’t think the legit use case is rare. It is just that, before async await, everyone was very confused all the time","msgtype":"m.text"},"ts":1655090224760,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oQusnjYrAMPrJXJldhYtijCHRXuRSWX18QyKlKbVMMg"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> There is some popular prior art: jQuery's `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.\n\nThe chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>There is some popular prior art: jQuery&#39;s `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.</blockquote></mx-reply>The chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","m.relates_to":{"m.in_reply_to":{"event_id":"$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> There is some popular prior art: jQuery's `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.\n\nThe chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>There is some popular prior art: jQuery&#39;s `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.</blockquote></mx-reply>The chain of prior art continues. jQuery’s deferred() comes from the bad chain, because it conflated promise and resolver, allowing people to optionally separate them. jQuery took its cues from Python Twisted Deferred, which in turn took some of its cues from E promises. Whereas, Promise.defer() (from an early draft of the Promises proposal) takes its cues from Q.defer() is more like what @bakkot proposes, which in turn came from MarkM’s proposal for promises back in 2010, then from Tyler Close’s Waterken, which in turn took its cues from E.","mimetype":"text/html"}]},"ts":1655090518494,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VfQtg4npZSHvkjIgdYd59Gv_jhzLZRiA7JOJIvEadUs"},
{"content":{"body":"That is to say, Promise.defer() => {promise, resolve, reject} is sound design (since by default promise and resolve should be held by different parties for POLA purposes), and while I named it “defer” originally as a nod to “Deferreds” in Python’s Twisted, it doesn’t suffer the same design error.","msgtype":"m.text","org.matrix.msc1767.text":"That is to say, Promise.defer() => {promise, resolve, reject} is sound design (since by default promise and resolve should be held by different parties for POLA purposes), and while I named it “defer” originally as a nod to “Deferreds” in Python’s Twisted, it doesn’t suffer the same design error."},"ts":1655090633913,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aT2OAGyGkXCXKP7fsLx3ux_uCmfIhr5rM4-Fwu9DNpo"},
{"content":{"body":"Yeah it is important that the callbacks returned close over the capability related to the individual promise (this was an issue in V8’s weird defer)","msgtype":"m.text"},"ts":1655090651060,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z6keFJXZ5-0_v5pTCFASHSo2laO566vrId8NJ9kGR1g"},
{"content":{"body":"I was skeptical of defer at some point due to making all the callbacks but that was too much of a microoptimization I think ","format":"org.matrix.custom.html","formatted_body":"I was skeptical of defer at some point due to making all the callbacks but that was too much of a microoptimization I think","msgtype":"m.text"},"ts":1655090723095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aA05oWxFe5ye2augvtDpO9QILz775fTVYExBOE5gtPc"},
{"content":{"body":"I find myself using Promise.defer() for async queues too, but it’s stuffed in a library and only gets used that way once. But I also get a lot of use of Promise.defer() for 1. broadcasting a drain event 2. broadcasting a fast moving state change to a slow consumer (replace the deferred when the consumer observes the current state) 3. chaining mutual exclusion for stateful protocols or “baton passing”","msgtype":"m.text","org.matrix.msc1767.text":"I find myself using Promise.defer() for async queues too, but it’s stuffed in a library and only gets used that way once. But I also get a lot of use of Promise.defer() for 1. broadcasting a drain event 2. broadcasting a fast moving state change to a slow consumer (replace the deferred when the consumer observes the current state) 3. chaining mutual exclusion for stateful protocols or “baton passing”"},"ts":1655090881594,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ep75rxWBZcxArzkC206Ou1WvuZreS95w3IX4EA4hn8A"},
{"content":{"body":"Async queue https://github.com/endojs/endo/blob/master/packages/stream/index.js#L31-L50","msgtype":"m.text","org.matrix.msc1767.text":"Async queue https://github.com/endojs/endo/blob/master/packages/stream/index.js#L31-L50"},"ts":1655090953191,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zBvS09IjloTDLaZb5rcyXiztIxLtCkbsJQT_e0XuOL0"},
{"content":{"body":"(At Agoric, we’re calling Promise.defer() makePromiseKit() but Promise.defer() is definitely the right name.)","msgtype":"m.text","org.matrix.msc1767.text":"(At Agoric, we’re calling Promise.defer() makePromiseKit() but Promise.defer() is definitely the right name.)"},"ts":1655091012397,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wB_tXWTVDyU57GubuGm45cLWIxShvvMJ7_Ki8PR4iTY"},
{"content":{"body":"I think we ended up where we were because the Promise constructor needed to have *some* behavior and Promise.defer() was duplicative, so it could be punted indefinitely. It’s trivial to make a defer() from Promise(), so it was a disappointing concession but easy to recover from.","format":"org.matrix.custom.html","formatted_body":"I think we ended up where we were because the Promise constructor needed to have <em>some</em> behavior and Promise.defer() was duplicative, so it could be punted indefinitely. It’s trivial to make a defer() from Promise(), so it was a disappointing concession but easy to recover from.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think we ended up where we were because the Promise constructor needed to have *some* behavior and Promise.defer() was duplicative, so it could be punted indefinitely. It’s trivial to make a defer() from Promise(), so it was a disappointing concession but easy to recover from.","mimetype":"text/plain"},{"body":"I think we ended up where we were because the Promise constructor needed to have <em>some</em> behavior and Promise.defer() was duplicative, so it could be punted indefinitely. It’s trivial to make a defer() from Promise(), so it was a disappointing concession but easy to recover from.","mimetype":"text/html"}]},"ts":1655091280383,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ri0S0I4XTiNhSBuARX_JIZA7fkPtqoqq1Df6ZjUWH1g"},
{"content":{"body":"yeah, it makes sense how we ended up here. it's not that it's hard to do the thing given the Promise constructor, just annoying.","msgtype":"m.text","org.matrix.msc1767.text":"yeah, it makes sense how we ended up here. it's not that it's hard to do the thing given the Promise constructor, just annoying."},"ts":1655091371080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1x5f9h4CXZGRqclKCjQj1NXpeZPNrh_bFlqYeGoYvgc"},
{"content":{"body":"I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language.","msgtype":"m.text","org.matrix.msc1767.text":"I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language."},"ts":1655091610860,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ma_hQPrEJy2lyPAz2LTaRwpVXQTJYKG_CaCVK-0PcJ0"},
{"content":{"body":" * I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language.","m.new_content":{"body":"I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language.","msgtype":"m.text","org.matrix.msc1767.text":"I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language."},"m.relates_to":{"event_id":"$ma_hQPrEJy2lyPAz2LTaRwpVXQTJYKG_CaCVK-0PcJ0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I for one thing it would be worth the cost to add Promise.defer() => {promise, resolve, reject} to the language."},"ts":1655091631336,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Yrz23yvyrywDCmfliIlzPkE460cRzdNWA16t9hwZ1xA"},
{"content":{"body":"Also noting that I’d also enjoy `Promise.defer() => {promise, resolve}` since `resolve(Promise.reject(error))` recovers the absent `reject`.","format":"org.matrix.custom.html","formatted_body":"Also noting that I’d also enjoy <code>Promise.defer() =&gt; {promise, resolve}</code> since <code>resolve(Promise.reject(error))</code> recovers the absent <code>reject</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also noting that I’d also enjoy `Promise.defer() => {promise, resolve}` since `resolve(Promise.reject(error))` recovers the absent `reject`.","mimetype":"text/plain"},{"body":"Also noting that I’d also enjoy <code>Promise.defer() =&gt; {promise, resolve}</code> since <code>resolve(Promise.reject(error))</code> recovers the absent <code>reject</code>.","mimetype":"text/html"}]},"ts":1655091703145,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8h8TGclz53n8JiozSi-5JjWcNnRlzzECWc51xs3eXCY"},
{"content":{"body":"> <@kriskowal:matrix.org> Also noting that I’d also enjoy `Promise.defer() => {promise, resolve}` since `resolve(Promise.reject(error))` recovers the absent `reject`.\n\nseems like a _safe_ optimisation, Whenever I’ve used this pattern I’ve only ever needed to expose resolve","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%248h8TGclz53n8JiozSi-5JjWcNnRlzzECWc51xs3eXCY\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Also noting that I’d also enjoy <code>Promise.defer() =&gt; {promise, resolve}</code> since <code>resolve(Promise.reject(error))</code> recovers the absent <code>reject</code>.</blockquote></mx-reply>seems like a <em>safe</em> optimisation, Whenever I’ve used this pattern I’ve only ever needed to expose resolve","m.relates_to":{"m.in_reply_to":{"event_id":"$8h8TGclz53n8JiozSi-5JjWcNnRlzzECWc51xs3eXCY"}},"msgtype":"m.text"},"ts":1655101450437,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$1IAwW3TI24YDSyncPdeS23cnI9yRChnfyl-30RKPXu8"},
{"content":{"body":"i have definitely needed reject, and it seems odd to make you write `resolve(Promise.reject(error))` in that case","format":"org.matrix.custom.html","formatted_body":"i have definitely needed reject, and it seems odd to make you write <code>resolve(Promise.reject(error))</code> in that case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i have definitely needed reject, and it seems odd to make you write `resolve(Promise.reject(error))` in that case","mimetype":"text/plain"},{"body":"i have definitely needed reject, and it seems odd to make you write <code>resolve(Promise.reject(error))</code> in that case","mimetype":"text/html"}]},"ts":1655102922332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qYP6Nw6zI5q5Be6LzNJdG722T7lNCaXMSKS4ZvBzNdg"},
{"content":{"body":"> <@jridgewell:matrix.org> We already lost that battle when we added `Promise.resolve`.\n\nhuh? `Promise.resolve` does not do the same kind of thing - it produces an immediately-settled Promise. the problem with deferred Promises is that they produce *pending* Promises and expect some outside call to settle it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>We already lost that battle when we added <code>Promise.resolve</code>.</blockquote></mx-reply>huh? <code>Promise.resolve</code> does not do the same kind of thing - it produces an immediately-settled Promise. the problem with deferred Promises is that they produce <em>pending</em> Promises and expect some outside call to settle it","m.relates_to":{"m.in_reply_to":{"event_id":"$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> We already lost that battle when we added `Promise.resolve`.\n\nhuh? `Promise.resolve` does not do the same kind of thing - it produces an immediately-settled Promise. the problem with deferred Promises is that they produce *pending* Promises and expect some outside call to settle it","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>We already lost that battle when we added <code>Promise.resolve</code>.</blockquote></mx-reply>huh? <code>Promise.resolve</code> does not do the same kind of thing - it produces an immediately-settled Promise. the problem with deferred Promises is that they produce <em>pending</em> Promises and expect some outside call to settle it","mimetype":"text/html"}]},"ts":1655112391295,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$gZdlU3CoJCRhL7070dAJ5aMypedWu7NkX-Bdwd_k_9Q"},
{"content":{"body":"and keep in mind that adding something like defer to the language spec doesn't just \"make it available\", it also expresses a strong endorsement of *using* it, and over the years I've repeatedly found \"it's defined by the language\" to be a stronger-weighing argument for people than \"is this tool appropriate for the usecase\".","format":"org.matrix.custom.html","formatted_body":"and keep in mind that adding something like defer to the language spec doesn't just &quot;make it available&quot;, it also expresses a strong endorsement of <em>using</em> it, and over the years I've repeatedly found &quot;it's defined by the language&quot; to be a stronger-weighing argument for people than &quot;is this tool appropriate for the usecase&quot;.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and keep in mind that adding something like defer to the language spec doesn't just \"make it available\", it also expresses a strong endorsement of *using* it, and over the years I've repeatedly found \"it's defined by the language\" to be a stronger-weighing argument for people than \"is this tool appropriate for the usecase\".","mimetype":"text/plain"},{"body":"and keep in mind that adding something like defer to the language spec doesn't just &quot;make it available&quot;, it also expresses a strong endorsement of <em>using</em> it, and over the years I've repeatedly found &quot;it's defined by the language&quot; to be a stronger-weighing argument for people than &quot;is this tool appropriate for the usecase&quot;.","mimetype":"text/html"}]},"ts":1655112473887,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$fq9Zd_drjobHxh7pvHKt882FyqawkgaT7PCbtOR5BYA"},
{"content":{"body":"How do you get the value you pass to `Promise.resolve`?","format":"org.matrix.custom.html","formatted_body":"How do you get the value you pass to <code>Promise.resolve</code>?","msgtype":"m.text"},"ts":1655134530622,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$M2MMsOCUspzBHTCPLRoP3kKmR3UQKIimZaX9oko9jKU"},
{"content":{"body":"Likely it’s a function call.","msgtype":"m.text"},"ts":1655134540477,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dVHyeBv4s_vAZAjGEsMU0zAr3AMFviNJce_ISJUTp-Y"},
{"content":{"body":"you await it?","msgtype":"m.text","org.matrix.msc1767.text":"you await it?"},"ts":1655134582300,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b12HZakAJwL-7f-tr-xnDdNtU7QAe_cPJmiEKJ_1UnU"},
{"content":{"body":"```\nconst value = fn();\nPromise.resolve(value);\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>const value = fn();\nPromise.resolve(value);\n</code></pre>","msgtype":"m.text"},"ts":1655134600858,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ckPPPqEP9q6LvRND3h-zKgP67NR4_FGWnIpkhCKzEYo"},
{"content":{"body":"That `fn()` isn’t being caught on anything","format":"org.matrix.custom.html","formatted_body":"That <code>fn()</code> isn’t being caught on anything","msgtype":"m.text"},"ts":1655134617216,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qj2qmHWUTTdxtwlU78C0KumNk9HdWqs4W32SxyvhFIk"},
{"content":{"body":"So we’ve arrived at the same problem of not properly catching the rejection in your promise","msgtype":"m.text"},"ts":1655134640371,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vd-txRNi68CRz5RSDPjA4AAs9oZGUeAMRqN78ojJ2UM"},
{"content":{"body":"well, this is something that the Promise constructor does","msgtype":"m.text","org.matrix.msc1767.text":"well, this is something that the Promise constructor does"},"ts":1655134659384,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LWkNXwQmYcCpjntpeOEUYPidc-BYExiugyxgxduKl4E"},
{"content":{"body":"(or maybe I misunderstand what you are asking)","msgtype":"m.text","org.matrix.msc1767.text":"(or maybe I misunderstand what you are asking)"},"ts":1655134669578,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b821Y2Gc-2I1SpaQzc7SfmmoW9WWQnIPDwCGNMs9_sw"},
{"content":{"body":"Exposing a deferred just makes the queue case easier, and it’s impossible to express in any other way.","msgtype":"m.text"},"ts":1655134702762,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1W34ufUHTi_BFTYkcejZoR6TahOkj5DUX9PRLDEQKvA"},
{"content":{"body":"(it's clearly already possible)","msgtype":"m.text","org.matrix.msc1767.text":"(it's clearly already possible)"},"ts":1655134724305,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NPhNB7Gl_MvA8i9D84Aj6R8RRYaU1p8gCsjTQigHLpg"},
{"content":{"body":"People don’t use the constructor, they use `Promise.resolve` when the value is simple. We already opened that door for them.","format":"org.matrix.custom.html","formatted_body":"People don’t use the constructor, they use <code>Promise.resolve</code> when the value is simple. We already opened that door for them.","msgtype":"m.text"},"ts":1655134744583,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2YGHyWeXM24sGhHHZj9PvAI5c-Dai2wMhHOVIi9d6WI"},
{"content":{"body":"> <@littledan:matrix.org> (it's clearly already possible)\n\nHow? How else besides storing a deferred and resolving it later?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24NPhNB7Gl_MvA8i9D84Aj6R8RRYaU1p8gCsjTQigHLpg\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>(it's clearly already possible)</blockquote></mx-reply>How? How else besides storing a deferred and resolving it later?","m.relates_to":{"m.in_reply_to":{"event_id":"$NPhNB7Gl_MvA8i9D84Aj6R8RRYaU1p8gCsjTQigHLpg"}},"msgtype":"m.text"},"ts":1655134781132,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bTb4DdXgBCYVri-1tCwzbJl5z-7p2LJl4fv_XaVxtMg"},
{"content":{"body":"right, I mean, it's possible with the Promise constructor. We're not talking about adding a new capability","msgtype":"m.text","org.matrix.msc1767.text":"right, I mean, it's possible with the Promise constructor. We're not talking about adding a new capability"},"ts":1655134830067,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TgRQkzRHgnDTETMU6cQL1O5Vb8NkUdB1Q1Q98xwrDCY"},
{"content":{"body":"Dan, we’re talking about two separate things.","msgtype":"m.text"},"ts":1655134847685,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qtE7u0LjloxbqCRdPoW33l3ZxEclAYOjS8QVxMVRWN0"},
{"content":{"body":"sorry for my confusion","msgtype":"m.text","org.matrix.msc1767.text":"sorry for my confusion"},"ts":1655134853702,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZWg5uwsiMgpGpNASX1yQsF8tlgO68F2QVBQhJ-ZLbWI"},
{"content":{"body":"The promise constructor vs `Promise.resolve`. Then whether deferred allow you to not capture a thrown error.","format":"org.matrix.custom.html","formatted_body":"The promise constructor vs <code>Promise.resolve</code>. Then whether deferred allow you to not capture a thrown error.","msgtype":"m.text"},"ts":1655134894069,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9XXB2aq3JdF8eXa_1JUiUjzKsteZumsBxjf3PQoHVoY"},
{"content":{"body":"The first is already there, and people prefer `Promise.resolve`.","format":"org.matrix.custom.html","formatted_body":"The first is already there, and people prefer <code>Promise.resolve</code>.","msgtype":"m.text"},"ts":1655134922823,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$u5uw83gjpMINllioO_vWIfQ3hMNGAu_fmMySS9-UaZY"},
{"content":{"body":"well, deferred is more powerful than Promise.resolve, because... it's not resolved immediately. I think that's the difference.","msgtype":"m.text","org.matrix.msc1767.text":"well, deferred is more powerful than Promise.resolve, because... it's not resolved immediately. I think that's the difference."},"ts":1655134927386,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BC6-NUzdBOiuiWsRvrxA6PpPj5VrJBe-tuBIUohzSRk"},
{"content":{"body":"Because of that, adding deferred isn’t opening up anything g that we haven’t already opened.","msgtype":"m.text"},"ts":1655134948053,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RG0cocPO7ICgFC8hIBuusOvZ9l_p9rEGze8mFVvMBNA"},
{"content":{"body":"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ucmxi_iERR-4n8X_rOaL_yKvlbNpxiaWawsRESJDwcc","msgtype":"m.text"},"ts":1655135002688,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bUl5S13YC7rM-thGt3CCcFShy3n66TImXa4v-ygJAY4"},
{"content":{"body":"I find \"we already have a misuse-prone thing, so we might as well add another misuse-prone thing\" to not be a terribly convincing argument, personally","msgtype":"m.text","org.matrix.msc1767.text":"I find \"we already have a misuse-prone thing, so we might as well add another misuse-prone thing\" to not be a terribly convincing argument, personally"},"ts":1655135150445,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$klJMpnLleNyL-TzdxbJ6GvCI9bGcAiJxTmhioloyQ18"},
{"content":{"body":"(I'm not free for a call right now if this is what you're suggesting, but I'm happy to drop this subject until we can do so)","msgtype":"m.text","org.matrix.msc1767.text":"(I'm not free for a call right now if this is what you're suggesting, but I'm happy to drop this subject until we can do so)"},"ts":1655135182971,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dYLBclq0vPQgi8aW5wUYS-uTsUrwp4OWqT9oe7-sBXc"},
{"content":{"body":"if you're arguing, adding Promise.defer would not be a huge change and would be aligned with what we already have, I agree","msgtype":"m.text","org.matrix.msc1767.text":"if you're arguing, adding Promise.defer would not be a huge change and would be aligned with what we already have, I agree"},"ts":1655135233440,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N65_8qlBW3v39n6Kte1S6kHvZaaFEoYXbsynTu028rs"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1655135251298,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RGYJ68zddHqeWQp7TarpoAJ_89geWvKEZLLgxkD7F1g"},
{"content":{"body":"I also don’t think many would reach for it, except those that explicitly need the queueing case.","msgtype":"m.text"},"ts":1655135286176,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$n2X3qMyN3_ZO-bdeKganQr88Fym0jfo4ofJ6dtl-ukU"},
{"content":{"body":"you don't think adapting callback-based APIs is also a big use case?","msgtype":"m.text","org.matrix.msc1767.text":"you don't think adapting callback-based APIs is also a big use case?"},"ts":1655135307111,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ucRdOSYheuklM0VrI4BNkhElejg52yq31o8IZDelLgQ"},
{"content":{"body":"Can you explain?","msgtype":"m.text"},"ts":1655135334211,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_sLTU2VcRUCt0SRTHpdkDmGX9hcFE1QVqGQBzNhH8tM"},
{"content":{"body":"Just as a datapoint, I think we'd end up using `Promise.defer()` fairly extensively on the Node.js internals. We have about 40 or so cases where we currently use that pattern internally, and we have a `createDeferredPromise()` utility to accomplish this","format":"org.matrix.custom.html","formatted_body":"Just as a datapoint, I think we'd end up using <code>Promise.defer()</code> fairly extensively on the Node.js internals. We have about 40 or so cases where we currently use that pattern internally, and we have a <code>createDeferredPromise()</code> utility to accomplish this","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just as a datapoint, I think we'd end up using `Promise.defer()` fairly extensively on the Node.js internals. We have about 40 or so cases where we currently use that pattern internally, and we have a `createDeferredPromise()` utility to accomplish this","mimetype":"text/plain"},{"body":"Just as a datapoint, I think we'd end up using <code>Promise.defer()</code> fairly extensively on the Node.js internals. We have about 40 or so cases where we currently use that pattern internally, and we have a <code>createDeferredPromise()</code> utility to accomplish this","mimetype":"text/html"}]},"ts":1655135407515,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$lcwzVpRnub1FDusaWga-yeN4LYzXs4747ShNfRfdHek"},
{"content":{"body":"like, if you want to make a Promise-based setTimeout, you can do something like `let {promise, resolve} = Promise.defer(); setTimeout(resolve, 1000)`. IMO this is cleaner than using the Promise constructor","format":"org.matrix.custom.html","formatted_body":"like, if you want to make a Promise-based setTimeout, you can do something like <code>let {promise, resolve} = Promise.defer(); setTimeout(resolve, 1000)</code>. IMO this is cleaner than using the Promise constructor","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, if you want to make a Promise-based setTimeout, you can do something like `let {promise, resolve} = Promise.defer(); setTimeout(resolve, 1000)`. IMO this is cleaner than using the Promise constructor","mimetype":"text/plain"},{"body":"like, if you want to make a Promise-based setTimeout, you can do something like <code>let {promise, resolve} = Promise.defer(); setTimeout(resolve, 1000)</code>. IMO this is cleaner than using the Promise constructor","mimetype":"text/html"}]},"ts":1655135409489,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CGtfZYvE8_KvA_D56CeAE485nNokO9JUceOMYD8wqCw"},
{"content":{"body":"(this is where I've wanted it in the past)","msgtype":"m.text","org.matrix.msc1767.text":"(this is where I've wanted it in the past)"},"ts":1655135437685,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AMGf29DlxLC07E3ScP-dv6KoL5GpHN57KyEf0pQBDhI"},
{"content":{"body":"aside from \"cleaner\" being an ambiguous term, I disagree that it is more readable; you lose the visual grouping indicating that the setTimeout is internal logic for the Promise.","msgtype":"m.text","org.matrix.msc1767.text":"aside from \"cleaner\" being an ambiguous term, I disagree that it is more readable; you lose the visual grouping indicating that the setTimeout is internal logic for the Promise."},"ts":1655135517617,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$JPBmqpq2X6M5XuF4R49KEPOg3GKDf0wcq9luTWRfMnw"},
{"content":{"body":"more crucially, it is *already* possible to write precisely such a `createDeferredPromise` utility function today, trivially so, and there are several implementations of it in library form. this is not something that *needs* to be part of the language spec from a functionality perspective","format":"org.matrix.custom.html","formatted_body":"more crucially, it is <em>already</em> possible to write precisely such a <code>createDeferredPromise</code> utility function today, trivially so, and there are several implementations of it in library form. this is not something that <em>needs</em> to be part of the language spec from a functionality perspective","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"more crucially, it is *already* possible to write precisely such a `createDeferredPromise` utility function today, trivially so, and there are several implementations of it in library form. this is not something that *needs* to be part of the language spec from a functionality perspective","mimetype":"text/plain"},{"body":"more crucially, it is <em>already</em> possible to write precisely such a <code>createDeferredPromise</code> utility function today, trivially so, and there are several implementations of it in library form. this is not something that <em>needs</em> to be part of the language spec from a functionality perspective","mimetype":"text/html"}]},"ts":1655135574595,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$Lj-RpFYaLdUcirCnzbajKf7rYtcOmRimJmHK9v7HAdY"},
{"content":{"body":"adding something to the language has serious implications and outsized ecosystem costs compared to shipping something in library form, and to be honest it's concerning to me how easily people gloss over the \"encourages misuse\" problem for something that's ultimately of extremely questionable value to have in the language to begin with","msgtype":"m.text","org.matrix.msc1767.text":"adding something to the language has serious implications and outsized ecosystem costs compared to shipping something in library form, and to be honest it's concerning to me how easily people gloss over the \"encourages misuse\" problem for something that's ultimately of extremely questionable value to have in the language to begin with"},"ts":1655135639090,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$XI1YBNNQ3ocOzJSJwW52WX0oE0ncITb_o67V-ueukEw"},
{"content":{"body":"I would argue that the prevalence of utility functions to accomplish it are an argument in *favor* of adding the mechanism to the language. It would be nice to eliminate a dependency ","format":"org.matrix.custom.html","formatted_body":"I would argue that the prevalence of utility functions to accomplish it are an argument in <em>favor</em> of adding the mechanism to the language. It would be nice to eliminate a dependency","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would argue that the prevalence of utility functions to accomplish it are an argument in *favor* of adding the mechanism to the language. It would be nice to eliminate a dependency ","mimetype":"text/plain"},{"body":"I would argue that the prevalence of utility functions to accomplish it are an argument in <em>favor</em> of adding the mechanism to the language. It would be nice to eliminate a dependency","mimetype":"text/html"}]},"ts":1655135649493,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$zYY4rARfrYNiq01UxAkxNK3bm8Jo6QoiP1EHgX_AkOs"},
{"content":{"body":"\"a lot of people do this\" is, in and of itself, not a good argument to add something to the language","msgtype":"m.text","org.matrix.msc1767.text":"\"a lot of people do this\" is, in and of itself, not a good argument to add something to the language"},"ts":1655135672824,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$MgxAlXbXPKMJ_6k92QSx2slA0ULWVQ2RiqJpCvWEVzM"},
{"content":{"body":"that's how you end up with, say, Python's standard library","msgtype":"m.text","org.matrix.msc1767.text":"that's how you end up with, say, Python's standard library"},"ts":1655135687613,"senderName":"joepie91 🏳️‍🌈","senderId":"@joepie91:pixie.town","id":"$PD9rqswBmcaEE6XeB9N0w7KuDHfudK7q9346Xs7RnTk"}
]