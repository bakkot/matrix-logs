[
{"content":{"body":"as i commented there, i think import.meta only makes sense for things that are specific to the ES module it’s used in, and env vars are globals","msgtype":"m.text"},"ts":1722992721375,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2SY9LQ1lL3TjO9sq7Uk8V29UTUNdi2Dre3EwdjtcdK0"},
{"content":{"body":"have there been proposals in the past for a seedable prng?","m.mentions":{},"msgtype":"m.text"},"ts":1722994973643,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$Rw-zZmQbVTAWGkQfZpBwJZhJpZSdQVueG8z5ZKRPkyI"},
{"content":{"body":"> <@meghanbun:matrix.org> have there been proposals in the past for a seedable prng?\n\nI like to think of all such proposals as `new Math`. But, in earnest there is TabAtkins‘s https://github.com/tc39/proposal-seeded-random","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Rw-zZmQbVTAWGkQfZpBwJZhJpZSdQVueG8z5ZKRPkyI\">In reply to</a> <a href=\"https://matrix.to/#/@meghanbun:matrix.org\">@meghanbun:matrix.org</a><br>have there been proposals in the past for a seedable prng?</blockquote></mx-reply>I like to think of all such proposals as <code>new Math</code>. But, in earnest there is <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>‘s https://github.com/tc39/proposal-seeded-random","m.relates_to":{"m.in_reply_to":{"event_id":"$Rw-zZmQbVTAWGkQfZpBwJZhJpZSdQVueG8z5ZKRPkyI"}},"msgtype":"m.text"},"ts":1722995652160,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$IR98sTwhxpZHfSEiel8f_sbCdJtXu9Yum5si78ADAdw"},
{"content":{"body":"thanks!","m.mentions":{},"msgtype":"m.text"},"ts":1722995949135,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$eHANTDuzdzLBXKikVr2A6fyu8Gy5SB4kVVHERd3cxqc"},
{"content":{"body":"For anybody good ad grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189\n\nOr is it invalid syntax because once we enter the MethodDefinition (which we can enter, because `get` is a valid first token for it) we don't backtrack?","format":"org.matrix.custom.html","formatted_body":"<p>For anybody good ad grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189</p>\n<p>Or is it invalid syntax because once we enter the MethodDefinition (which we can enter, because <code>get</code> is a valid first token for it) we don't backtrack?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723046702479,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W-AwQwZnfL8N2xS77qg8g5csVPMcN_CBYZ75xyQs2rU"},
{"content":{"body":" * For anybody good at grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189\n\nOr is it invalid syntax because once we enter the MethodDefinition (which we can enter, because `get` is a valid first token for it) we don't backtrack?","format":"org.matrix.custom.html","formatted_body":" * <p>For anybody good at grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189</p>\n<p>Or is it invalid syntax because once we enter the MethodDefinition (which we can enter, because <code>get</code> is a valid first token for it) we don't backtrack?</p>\n","m.mentions":{},"m.new_content":{"body":"For anybody good at grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189\n\nOr is it invalid syntax because once we enter the MethodDefinition (which we can enter, because `get` is a valid first token for it) we don't backtrack?","format":"org.matrix.custom.html","formatted_body":"<p>For anybody good at grammar -- is this reading of the spec correct? https://github.com/tc39/test262/pull/4189</p>\n<p>Or is it invalid syntax because once we enter the MethodDefinition (which we can enter, because <code>get</code> is a valid first token for it) we don't backtrack?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$W-AwQwZnfL8N2xS77qg8g5csVPMcN_CBYZ75xyQs2rU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1723047405258,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FWXwC0vLffs8myW45rDwZRn6IGXnjBZgkgalMBfIMQc"},
{"content":{"body":"the test looks correct to me","msgtype":"m.text"},"ts":1723047416964,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1QsnB1xzTefpWll6E3j66KIvnpjlDwx8yD8XOS80F1A"},
{"content":{"body":"Ok thanks!","m.mentions":{},"msgtype":"m.text"},"ts":1723047430245,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$G4Xo2MCU0QN_x-Zk51ixAE_wOhzRvxauF2GU1_xC6hs"},
{"content":{"body":"grammar alternatives in 262 are not ordered as they are in PEGs","msgtype":"m.text"},"ts":1723047568522,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$H4BaASrugNrLjFGePHkE2xmxBHoDVC-OXRy2suf60og"},
{"content":{"body":"And here there is no ASI right? Because the offending token is `x` and not `async`:\n```js\nclass B {\n    get\n    async x() {}\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And here there is no ASI right? Because the offending token is <code>x</code> and not <code>async</code>:</p>\n<pre><code class=\"language-js\">class B {\n    get\n    async x() {}\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1723047673462,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M3B41PqdHG0rnwkIAIr3t4JIocakeq_OXx9OWrSj5wU"}
]