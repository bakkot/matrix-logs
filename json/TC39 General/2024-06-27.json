[
{"content":{"body":"Hi folks! Great seeing TC39 being an open and collaborative space!\nI joined here to express the problems and possible solutions over JSON serialization when it comes to `BigInt` type.\n\nI originally come from Web3 where we are dealing with `uint256` – 32byte unsigned integer values and folks from Web3 space used to align on third party libraries to support numbers that big (https://github.com/GoogleChromeLabs/jsbi) until the official support for `BigInt`s came live in 2020!\nThere have been many editions of ECMA-262 published since 1999, and to my belief it needs an upgrade to handle `BigInt` types.\n\nI will be honest I did not spend that much time to research the efforts of handling such but I've seen many discussions evolving around somehow \"smartly\" detecting wether a number value should be parsed as a `BigInt` or `Number`. I don't believe that those are correct nor backwards compatible.\n\nWhat if JSON as a whole could retrieve an upgrade to support BigInt literals ending with \"n\", as it does now in JS?\n\n```json\n{\n  \"value\": 1337n\n}\n```\n\nI'd like to hear your thoughts wether you think if this possible and if so, what kind of backwards incompatibility issues this might have!\nRegarding the latter I don't think this will introduce any issues as this addition doesn't change the serialization behavior of fields of other types – but instead introduces a new one.\nI understand that making an addition like this is gonna introduce chain of changes of parsing JSON in different programming languages, but I believe this needs a review.\n\n","format":"org.matrix.custom.html","formatted_body":"<p>Hi folks! Great seeing TC39 being an open and collaborative space!<br>I joined here to express the problems and possible solutions over JSON serialization when it comes to <code>BigInt</code> type.</p>\n<p>I originally come from Web3 where we are dealing with <code>uint256</code> – 32byte unsigned integer values and folks from Web3 space used to align on third party libraries to support numbers that big (https://github.com/GoogleChromeLabs/jsbi) until the official support for <code>BigInt</code>s came live in 2020!<br>There have been many editions of ECMA-262 published since 1999, and to my belief it needs an upgrade to handle <code>BigInt</code> types.</p>\n<p>I will be honest I did not spend that much time to research the efforts of handling such but I've seen many discussions evolving around somehow \"smartly\" detecting wether a number value should be parsed as a <code>BigInt</code> or <code>Number</code>. I don't believe that those are correct nor backwards compatible.</p>\n<p>What if JSON as a whole could retrieve an upgrade to support BigInt literals ending with \"n\", as it does now in JS?</p>\n<pre><code class=\"language-json\">{\n  \"value\": 1337n\n}\n</code></pre>\n<p>I'd like to hear your thoughts wether you think if this possible and if so, what kind of backwards incompatibility issues this might have!<br>Regarding the latter I don't think this will introduce any issues as this addition doesn't change the serialization behavior of fields of other types – but instead introduces a new one.<br>I understand that making an addition like this is gonna introduce chain of changes of parsing JSON in different programming languages, but I believe this needs a review.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1719497317596,"senderName":"Vladyslav Dalechyn","senderId":"@dalechyn:matrix.org","id":"$vk4AHzbPY1BSDke1baj05Nlllom9yNAWiRw8TyEX_X0"}
]