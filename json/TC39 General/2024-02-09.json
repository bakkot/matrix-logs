[
{"content":{"body":"2 years later I remembered to type this up. Was thinking someone else was going to. Is there any issues with adding optional chaining to the LHS for statements as presented here: https://github.com/sirisian/optional-operators It does take up a lot of syntax so I kind of get why it wasn't considered early on. I'll make a post on es discourse if there's nothing obvious like parsing ambiguities.","m.mentions":{},"msgtype":"m.text"},"ts":1707456304696,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$B-54qYtr-RKNDH5_qqN0FiDvhGe6Bjez6MweuQeTXH4"},
{"content":{"body":"> <@sirisian:matrix.org> 2 years later I remembered to type this up. Was thinking someone else was going to. Is there any issues with adding optional chaining to the LHS for statements as presented here: https://github.com/sirisian/optional-operators It does take up a lot of syntax so I kind of get why it wasn't considered early on. I'll make a post on es discourse if there's nothing obvious like parsing ambiguities.\n\nThere’s a Stage 1 proposal for that: https://github.com/tc39/proposal-optional-chaining-assignment","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24B-54qYtr-RKNDH5_qqN0FiDvhGe6Bjez6MweuQeTXH4\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>2 years later I remembered to type this up. Was thinking someone else was going to. Is there any issues with adding optional chaining to the LHS for statements as presented here: https://github.com/sirisian/optional-operators It does take up a lot of syntax so I kind of get why it wasn't considered early on. I'll make a post on es discourse if there's nothing obvious like parsing ambiguities.</blockquote></mx-reply>There’s a Stage 1 proposal for that: https://github.com/tc39/proposal-optional-chaining-assignment","m.relates_to":{"m.in_reply_to":{"event_id":"$B-54qYtr-RKNDH5_qqN0FiDvhGe6Bjez6MweuQeTXH4"}},"msgtype":"m.text"},"ts":1707458140295,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1ZI4znGlmajv4ZU1ajI7TaBKhEwuL73-TRP8bwTne2s"},
{"content":{"body":"I told myself to go check the stage 1 and figured there wasn't one. That's awesome to see.","m.mentions":{},"msgtype":"m.text"},"ts":1707458207216,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$4R7-oPaJPRNm3alfWrhdsu0Zy_0ajfRJWF3l5c7Yl1Y"},
{"content":{"body":"I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I need to `memo` it, I had to rewrite it to `export const C = () => {}`.\n\nIf we have this, I can attach `@memo` before the declaration and all things done","format":"org.matrix.custom.html","formatted_body":"<p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I need to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code>.</p>\n<p>If we have this, I can attach <code>@memo</code> before the declaration and all things done</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707463762453,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY"},
{"content":{"body":" * I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can attach `@memo` before the declaration, and all things done","format":"org.matrix.custom.html","formatted_body":" * <p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can attach <code>@memo</code> before the declaration, and all things done</p>\n","m.mentions":{},"m.new_content":{"body":"I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can attach `@memo` before the declaration, and all things done","format":"org.matrix.custom.html","formatted_body":"<p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can attach <code>@memo</code> before the declaration, and all things done</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707463783663,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jPulRJFY3Alfkqh48TTkxHHNIrtdE8yBHGevBGind64"},
{"content":{"body":" * I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can attach `export @memo function C() {}` before the declaration, and all things done","format":"org.matrix.custom.html","formatted_body":" * <p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can attach <code>export @memo function C() {}</code> before the declaration, and all things done</p>\n","m.mentions":{},"m.new_content":{"body":"I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can attach `export @memo function C() {}` before the declaration, and all things done","format":"org.matrix.custom.html","formatted_body":"<p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can attach <code>export @memo function C() {}</code> before the declaration, and all things done</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707463794146,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Nh5uUNA9e3DfOF7lRwFMk8qYQk_7vw-wGyCSxnXQIc0"},
{"content":{"body":" * I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can do this `export @memo function C() {}`","format":"org.matrix.custom.html","formatted_body":" * <p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can do this <code>export @memo function C() {}</code></p>\n","m.mentions":{},"m.new_content":{"body":"I feel very excited about function decorators. It can improve DX when I write React.\n\nI used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n\nIf we have this, I can do this `export @memo function C() {}`","format":"org.matrix.custom.html","formatted_body":"<p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can do this <code>export @memo function C() {}</code></p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707463804015,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VBcOzEmrqLfFz06ESC59n3c2MP5ngRGo1P0Sy3qk0UY"},
{"content":{"body":"nicolo-ribaudo: When you were working on the LHS optional chaining did having optional operators come up? (As a separate proposal). a.b ?+= 1 behavior where if b is undefined or null the nothing happens.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: When you were working on the LHS optional chaining did having optional operators come up? (As a separate proposal). a.b ?+= 1 behavior where if b is undefined or null the nothing happens.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1707514879784,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$hYpyno6ZKc-9jKEOZwMO6oF25U6TeAU0tEdsUajEzzo"},
{"content":{"body":"> <@jackworks:matrix.org> I feel very excited about function decorators. It can improve DX when I write React.\n> \n> I used to write components like this (because function declaration has no evaluation step in the debugger) `export function C() {}`, but when I needed to `memo` it, I had to rewrite it to `export const C = () => {}` then `export const C = memo(() => {})`.\n> \n> If we have this, I can do this `export @memo function C() {}`\n\nCan you elaborate on why this is better?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>I feel very excited about function decorators. It can improve DX when I write React.</p>\n<p>I used to write components like this (because function declaration has no evaluation step in the debugger) <code>export function C() {}</code>, but when I needed to <code>memo</code> it, I had to rewrite it to <code>export const C = () =&gt; {}</code> then <code>export const C = memo(() =&gt; {})</code>.</p>\n<p>If we have this, I can do this <code>export @memo function C() {}</code></p>\n</blockquote></mx-reply>Can you elaborate on why this is better?","m.relates_to":{"m.in_reply_to":{"event_id":"$yfAXG85dwl3cT1LYyy9pJsv8jcTSnkBwCtU6hhtuAfY"}},"msgtype":"m.text"},"ts":1707514890097,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a3R2bjR1rPWEhu8fz384_CoV4hzjuvO42BQRO2izYZM"},
{"content":{"body":"One thing that is annoying with currently needing to do `export const Button = React.memo((props => { ... });` is that the function becomes anonymous.\n\nbeing able to do\n\n```\n@React.memo\nexport function Button(props) { ... }\n```\n\nis easier to keep the name, and didn't need to rearrange the code to add the wrapper ","format":"org.matrix.custom.html","formatted_body":"One thing that is annoying with currently needing to do `export const Button = React.memo((props =&gt; { ... });` is that the function becomes anonymous.<br /><br />being able to do<br /><br />```<br />@React.memo<br />export function Button(props) { ... }<br />```<br /><br />is easier to keep the name, and didn't need to rearrange the code to add the wrapper ","msgtype":"m.text"},"ts":1707518928410,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$DtdbSbhH7Zb8fwnAE-Tpjv6JUYRPPo9AX2OQN5HAvJw"},
{"content":{"body":"No, the optionality was only ever for property access","m.relates_to":{"event_id":"$hYpyno6ZKc-9jKEOZwMO6oF25U6TeAU0tEdsUajEzzo","is_falling_back":true,"m.in_reply_to":{"event_id":"$hYpyno6ZKc-9jKEOZwMO6oF25U6TeAU0tEdsUajEzzo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707520167901,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oZ_-7oF3zgECh52UrVETwh9klrdMGWJddXnV_7qZr0g"},
{"content":{"body":"> <@littledan:matrix.org> Can you elaborate on why this is better?\n\nI can add @memo directly, without having to convert function declaration into lexical declaration + function expression manually","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$a3R2bjR1rPWEhu8fz384_CoV4hzjuvO42BQRO2izYZM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Can you elaborate on why this is better?</blockquote></mx-reply>I can add @memo directly, without having to convert function declaration into lexical declaration + function expression manually","m.relates_to":{"m.in_reply_to":{"event_id":"$a3R2bjR1rPWEhu8fz384_CoV4hzjuvO42BQRO2izYZM"}},"msgtype":"m.text"},"ts":1707521100017,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rJR5vNH15JgYmqk_lZ1xB7YblTK8GYnVS0zGP1yc6-E"},
{"content":{"body":"(although I can do `C = memo(C)` but typescript won't be happy, I think `export function C` should not be reassigned)","msgtype":"m.text"},"ts":1707521196753,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UIBZFTlrR5yQdz_Cn2BU6iKnSU7rJJCSMsX0TDdzR2k"}
]