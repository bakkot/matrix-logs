[
{"content":{"body":"stupid question: private methods are not bindable is that right?","msgtype":"m.text"},"ts":1637599192568,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$HL7qbtUhS3rjsvVIkjJCR4CG4yKRu0OKmMNse1MBj8I"},
{"content":{"body":"ðŸ¤”why not","msgtype":"m.text"},"ts":1637599242326,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SzxPjqSww7zk4cCxLTxvEe0iZlzqbma2W0ILWOU-JLo"},
{"content":{"body":"you can bind them, it just takes a bit of effort, i want to check if that is right and also what the thinking was behind it","msgtype":"m.text"},"ts":1637599343931,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$WaniwBmdZb5JXmXoUcHSUVX8dJkhqdUiGStoKs5qxC4"},
{"content":{"body":"I think it makes sense ","msgtype":"m.text"},"ts":1637599395021,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nZTV69EoQ28ll6AZLgfrCWr2cRaIp3u5YYBEgx4lHes"},
{"content":{"body":"the issue is constructor patterns like this: \n\n```\n  constructor() {\n    this._onSomeEvent = this._onSomeEvent.bind(this);\n    // constructor implementation\n  }\n```","format":"org.matrix.custom.html","formatted_body":"<p>the issue is constructor patterns like this:</p>\n<pre><code>  constructor() {\n    this._onSomeEvent = this._onSomeEvent.bind(this);\n    // constructor implementation\n  }\n</code></pre>\n","msgtype":"m.text"},"ts":1637599410142,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NRuwURViKBBPIPwlGZs01px-EfKKS9IrEW2vIC6wmXs"},
{"content":{"body":"the person I am speaking with mentioned that you can't reassign private methods in the constructor","msgtype":"m.text"},"ts":1637599428788,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fI5uXgohyTdGa4P6Ps6Vw5rs4Ujnn3olPRAHSwNof2s"},
{"content":{"body":" * the person I am speaking with mentioned that you can't reassign private fields in the constructor","m.new_content":{"body":"the person I am speaking with mentioned that you can't reassign private fields in the constructor","msgtype":"m.text"},"m.relates_to":{"event_id":"$fI5uXgohyTdGa4P6Ps6Vw5rs4Ujnn3olPRAHSwNof2s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637599454017,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NgnxIlpWnCjFLB_J4zuDwB4pq9Q3x0Im4vBkgmSs0zA"},
{"content":{"body":" * the person I am speaking with mentioned that you can't reassign private methods in the constructor","m.new_content":{"body":"the person I am speaking with mentioned that you can't reassign private methods in the constructor","msgtype":"m.text"},"m.relates_to":{"event_id":"$fI5uXgohyTdGa4P6Ps6Vw5rs4Ujnn3olPRAHSwNof2s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637599466828,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mq8t99XNivY20xJxoQeXzTuLuRiBax1XdACOsDKiiIY"},
{"content":{"body":"that is a pretty common pattern, so im checking if we got this right, and what thoughts were for this pattern","msgtype":"m.text"},"ts":1637599492231,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dbXYyPqXNaPbxvVGI-el0oN3zJ_tgS67uoGxbip9xuc"},
{"content":{"body":"im wondering if we need bind in that case at all... i need to check","msgtype":"m.text"},"ts":1637599570875,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ol4Z01mXiBZjPjbrepRVMkTUKHa2K4fYqjBicK69M8k"},
{"content":{"body":"yeaeh... ok so it does become a problem with aliasing, and the arrow function is the most elegant way to deal with it","msgtype":"m.text"},"ts":1637599950951,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$slCvPk6Qh3TBjTw_WI6GQu9yNfXfoBlGgjyOpmVUfTs"},
{"content":{"body":"was that intentional?","msgtype":"m.text"},"ts":1637599953727,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ivKls512RuixnbSADCqP-MNP7Ek81G7RlpsLt8IaQBA"},
{"content":{"body":"yulia: https://github.com/tc39/proposal-private-methods/issues/11","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: https://github.com/tc39/proposal-private-methods/issues/11","msgtype":"m.text"},"ts":1637600019947,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0cyZ3_in3vDSSlBAXyO_qqb3548_xKJbAgTX-0EXzi4"},
{"content":{"body":"bakkot: thanks, that answers it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks, that answers it","msgtype":"m.text"},"ts":1637600065983,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yLOHO6le0dncQLzUel-uFcFU6OUBqCkO7YhaFYt_Vs0"},
{"content":{"body":"rbuckton: RegExp stuff was added to the spec in ES3. At the time, the algorithms in the rest of the spec were written in a fairly primitive form of pseudocode (e.g., \"go to\" instructions, limited use of aliases, no block structure). My guess is, whoever wrote the RegExp semantics didn't want to be limited to that style.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: RegExp stuff was added to the spec in ES3. At the time, the algorithms in the rest of the spec were written in a fairly primitive form of pseudocode (e.g., &quot;go to&quot; instructions, limited use of aliases, no block structure). My guess is, whoever wrote the RegExp semantics didn't want to be limited to that style.","msgtype":"m.text"},"ts":1637615067214,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$ybxJCrDaZ6X9OnvL_cP-UVPd63iOJmdNGxyYw9Xi534"}
]