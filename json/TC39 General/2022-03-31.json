[
{"content":{"body":"https://1drv.ms/b/s!AltPy8G9ZDJdq3JSrN6Dh1XYVwpW","msgtype":"m.text","org.matrix.msc1767.text":"https://1drv.ms/b/s!AltPy8G9ZDJdq3JSrN6Dh1XYVwpW"},"ts":1648750814267,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$tpTKc0Rh8JLZwORKE3aP9bCRSaL0jcYuUPqQNVsDsAw"},
{"content":{"body":"jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","mimetype":"text/html"}]},"ts":1648764536014,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$73-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA"},
{"content":{"body":"I continue to believe that these data structures should've used SameValue, and this is a perfect example of why","msgtype":"m.text","org.matrix.msc1767.text":"I continue to believe that these data structures should've used SameValue, and this is a perfect example of why"},"ts":1648764599882,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Gv095vnObXMkIzlKkw3ySQM9ETV5l7Abf9hvnZBGILo"},
{"content":{"body":"you could easily have the current behaviour by replacing `-0` with `0` before doing any map operations, but you can't easily go the other way around","format":"org.matrix.custom.html","formatted_body":"you could easily have the current behaviour by replacing <code>-0</code> with <code>0</code> before doing any map operations, but you can't easily go the other way around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you could easily have the current behaviour by replacing `-0` with `0` before doing any map operations, but you can't easily go the other way around","mimetype":"text/plain"},{"body":"you could easily have the current behaviour by replacing <code>-0</code> with <code>0</code> before doing any map operations, but you can't easily go the other way around","mimetype":"text/html"}]},"ts":1648764648961,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jbFQ7O3xb0IyiL9gSSy7A01acTJXo8VnRC52cq6W_v8"},
{"content":{"body":"We you can easily replace with a unique symbol","msgtype":"m.text","org.matrix.msc1767.text":"We you can easily replace with a unique symbol"},"ts":1648764684642,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EOJ1FQ_k2zzij62gaI87kmQiAv4y2TRrRh9PdZhGRyY"},
{"content":{"body":"That's what I've done when I needed to support `-0` in Map/Set","format":"org.matrix.custom.html","formatted_body":"That's what I've done when I needed to support <code>-0</code> in Map/Set","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's what I've done when I needed to support `-0` in Map/Set","mimetype":"text/plain"},{"body":"That's what I've done when I needed to support <code>-0</code> in Map/Set","mimetype":"text/html"}]},"ts":1648764703685,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$57QjRwCVXDSw9yr2Anqt8J5lHhHW71M9g7Ai2be6I8w"},
{"content":{"body":"as long as that symbol doesn't escape, which you can't guarantee when the map is user-provided","msgtype":"m.text","org.matrix.msc1767.text":"as long as that symbol doesn't escape, which you can't guarantee when the map is user-provided"},"ts":1648764718690,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ndIByD4g4jX476eOkjeRNEMFLvjLroS7WeBJH93zDHs"},
{"content":{"body":"if the map is user provided, sure","msgtype":"m.text","org.matrix.msc1767.text":"if the map is user provided, sure"},"ts":1648764731916,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IoBHqNQhsfYD6urkLcpyxUT6j9wRr-cmdTB9QumLp3c"},
{"content":{"body":"I'm talking in the case of wrapping a map","msgtype":"m.text","org.matrix.msc1767.text":"I'm talking in the case of wrapping a map"},"ts":1648764751754,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kE5S516-SkUstnl9EmTG6r9x5x__umLAQLgIslC-v_Q"},
{"content":{"body":"also jschoi has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","format":"org.matrix.custom.html","formatted_body":"also <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also jschoi has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","mimetype":"text/plain"},{"body":"also <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","mimetype":"text/html"}]},"ts":1648764762994,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e_wScxtZG_190BY4fXL5upNRyQ99PCDY_SrJ-V5pQDQ"},
{"content":{"body":"which as we agreed was the only way to preserve that kind of invariants","msgtype":"m.text","org.matrix.msc1767.text":"which as we agreed was the only way to preserve that kind of invariants"},"ts":1648764773964,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$l8QhesXczB0hSmW5Jpz1sogv_PW8hm8v2-d3a-QX4tw"},
{"content":{"body":"yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there","msgtype":"m.text","org.matrix.msc1767.text":"yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there"},"ts":1648764826006,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU"},
{"content":{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose `SameValueZero` as a predicate the same way `SameValue` is exposed as `Object.is`, so that not providing a comparison predicate isn't magical. ","format":"org.matrix.custom.html","formatted_body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose <code>SameValueZero</code> as a predicate the same way <code>SameValue</code> is exposed as <code>Object.is</code>, so that not providing a comparison predicate isn't magical.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose `SameValueZero` as a predicate the same way `SameValue` is exposed as `Object.is`, so that not providing a comparison predicate isn't magical. ","mimetype":"text/plain"},{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose <code>SameValueZero</code> as a predicate the same way <code>SameValue</code> is exposed as <code>Object.is</code>, so that not providing a comparison predicate isn't magical.","mimetype":"text/html"}]},"ts":1648764915805,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sup5t3UCOASgkGpNTntJlEg-SEO-L2ZGl2kmCFUoGio"},
{"content":{"body":"`const SameValueZero = (a, b) => a === 0 && b === 0 || Object.is(a, b);`","format":"org.matrix.custom.html","formatted_body":"<code>const SameValueZero = (a, b) =&gt; a === 0 &amp;&amp; b === 0 || Object.is(a, b);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`const SameValueZero = (a, b) => a === 0 && b === 0 || Object.is(a, b);`","mimetype":"text/plain"},{"body":"<code>const SameValueZero = (a, b) =&gt; a === 0 &amp;&amp; b === 0 || Object.is(a, b);</code>","mimetype":"text/html"}]},"ts":1648765046632,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7KCEfbVMmVxcAjx2u4Fd0MJ-7je6Q1fOezrcZ5AO81g"},
{"content":{"body":"are you saying that passing that in would be too slow because it's not built-in?","msgtype":"m.text","org.matrix.msc1767.text":"are you saying that passing that in would be too slow because it's not built-in?"},"ts":1648765149059,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$birEsKD1QuG3ocp8rwHOBtuhzep0CDVSyPJ4shqpeFo"},
{"content":{"body":"passing it in fundamentally does not work because that means you have to do a comparison against every element","msgtype":"m.text","org.matrix.msc1767.text":"passing it in fundamentally does not work because that means you have to do a comparison against every element"},"ts":1648765285033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IdpSQC5U1qsAro99XUCB4OGxc-T8v2fn3TOocFE-V1E"},
{"content":{"body":"you need a user-defined hash function as well; just having user-defined equality is not useful","msgtype":"m.text","org.matrix.msc1767.text":"you need a user-defined hash function as well; just having user-defined equality is not useful"},"ts":1648765300330,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G4ltfVkMUwULpjwrE6MHv7U3oVavHhaha59Wz_q9KEg"},
{"content":{"body":"Why so complicated? `const SameValueZero = (a, b) => a === b`, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","format":"org.matrix.custom.html","formatted_body":"Why so complicated? <code>const SameValueZero = (a, b) =&gt; a === b</code>, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Why so complicated? `const SameValueZero = (a, b) => a === b`, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","mimetype":"text/plain"},{"body":"Why so complicated? <code>const SameValueZero = (a, b) =&gt; a === b</code>, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","mimetype":"text/html"}]},"ts":1648765315454,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fJoCEQuLASi0pfar4_hDNGDkgK4S1saONQeqQywIR0U"},
{"content":{"body":"NaN","msgtype":"m.text","org.matrix.msc1767.text":"NaN"},"ts":1648765328497,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YgARnqpkigdcIu5G0M9Ca9jzyfSr72-GYdvlzLUtAkM"},
{"content":{"body":"not sure if trolling...","msgtype":"m.text","org.matrix.msc1767.text":"not sure if trolling..."},"ts":1648765335780,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BrIiLxRUSGLeVNK0E6lOcy78h6NMvg05wfZYk2XCi8I"},
{"content":{"body":"Oh right, ugh I'm tired","msgtype":"m.text","org.matrix.msc1767.text":"Oh right, ugh I'm tired"},"ts":1648765392253,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Tvtz2lOgmLD9TMh1OlwfVA-CcWnW-XzyhfZTQ3YJB7o"},
{"content":{"body":"we all are after this week","msgtype":"m.text","org.matrix.msc1767.text":"we all are after this week"},"ts":1648765422349,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$x7vW848dcaoI5fdeio5NkiBmVGi-qXacfqb5IwlDQ6M"},
{"content":{"body":"Ok nvm forget all of the above","msgtype":"m.text","org.matrix.msc1767.text":"Ok nvm forget all of the above"},"ts":1648765434202,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kdU3dzhQbVZAgvf7fMjuFkKoHBPbLM1l6IWEvKu3_p8"},
{"content":{"body":"yeah in that case the only other alternative I can think of if would be providing mapping functions that transform keys before insertion, probably with a SameValue based caching mechanism to be robust against instability of the transform function if the initial key is already known","msgtype":"m.text","org.matrix.msc1767.text":"yeah in that case the only other alternative I can think of if would be providing mapping functions that transform keys before insertion, probably with a SameValue based caching mechanism to be robust against instability of the transform function if the initial key is already known"},"ts":1648765739945,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EJAS15IMGCWQl0txRFYvrcPFlPNwR-QoP-S973qSFmE"},
{"content":{"body":"which seems not very efficient","msgtype":"m.text","org.matrix.msc1767.text":"which seems not very efficient"},"ts":1648765771137,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Aoa1CrYPGTdVqzz3IZ6k6gPCbU4gsICqE2QvfS0yqKo"},
{"content":{"body":"> <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU"}}},"ts":1648765846054,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cNjzGgh1zsA49bXj2vmrfzIqPKXvPl32BhZKAEcWZVU"},
{"content":{"body":"* > <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","m.new_content":{"body":"> <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","msgtype":"m.text"},"m.relates_to":{"event_id":"$cNjzGgh1zsA49bXj2vmrfzIqPKXvPl32BhZKAEcWZVU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648765902398,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$h4FzjXwqiVEDWPEVkRB4uC5VGZV_kfFbsYDaSwNA8J4"},
{"content":{"body":"efficiency is nice, but the capability is more important","msgtype":"m.text","org.matrix.msc1767.text":"efficiency is nice, but the capability is more important"},"ts":1648765949377,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nzV6cKiSwD3UMFh87R6YNFeRn590EGgsqA48a_JGPH0"},
{"content":{"body":"what's the typical range of map/set content counts?","msgtype":"m.text","org.matrix.msc1767.text":"what's the typical range of map/set content counts?"},"ts":1648765973351,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tIUHSHPDx85Dy87E7tOJCZbqpetppyeoApIBLrUekfA"},
{"content":{"body":"are many people making maps and sets with a million+ things, in a hot path, and who *also* want this extra capability?","format":"org.matrix.custom.html","formatted_body":"are many people making maps and sets with a million+ things, in a hot path, and who <em>also</em> want this extra capability?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"are many people making maps and sets with a million+ things, in a hot path, and who *also* want this extra capability?","mimetype":"text/plain"},{"body":"are many people making maps and sets with a million+ things, in a hot path, and who <em>also</em> want this extra capability?","mimetype":"text/html"}]},"ts":1648766008227,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$irGwsIqoHYVfLtGbfY4NrOFGNJNvm__inkCEil1fYn8"},
{"content":{"body":"I think tens of thousands is a pretty reasonable estimate for a production-sized Map in some Node.js applications.","msgtype":"m.text","org.matrix.msc1767.text":"I think tens of thousands is a pretty reasonable estimate for a production-sized Map in some Node.js applications."},"ts":1648766454177,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XW3xSK6YtDXjD_g06TSqdOJ9HuOV4TE-h1MMupv1gNA"},
{"content":{"body":"if they're backing their memoisation implementation with it, it could see a lot of content","msgtype":"m.text","org.matrix.msc1767.text":"if they're backing their memoisation implementation with it, it could see a lot of content"},"ts":1648766592783,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ui6pvXE_E8Tog1iysmaCZ5evd_otyzrZyVllEfGIa_4"},
{"content":{"body":"and would any of these use cases (which obviously exist; i'm asking about %) need any of the functionality from these hooks?","msgtype":"m.text","org.matrix.msc1767.text":"and would any of these use cases (which obviously exist; i'm asking about %) need any of the functionality from these hooks?"},"ts":1648766642771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7d5EQozRqVCDn29yttclMlNCvdoWDBK9PkcJaFwX59I"},
{"content":{"body":"because if so, they're probably already paying the perf cost, and if not, they presumably wouldn't pay it (we wouldn't want to add a feature that penalized existing code paths, obv)","msgtype":"m.text","org.matrix.msc1767.text":"because if so, they're probably already paying the perf cost, and if not, they presumably wouldn't pay it (we wouldn't want to add a feature that penalized existing code paths, obv)"},"ts":1648766675287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IBQ9An5WlqO_Qed5J1PK1_71G8KoMffDq0Tp8Hm4eAw"}
]