[
{"content":{"body":"https://1drv.ms/b/s!AltPy8G9ZDJdq3JSrN6Dh1XYVwpW","msgtype":"m.text","org.matrix.msc1767.text":"https://1drv.ms/b/s!AltPy8G9ZDJdq3JSrN6Dh1XYVwpW"},"ts":1648750814267,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$tpTKc0Rh8JLZwORKE3aP9bCRSaL0jcYuUPqQNVsDsAw"},
{"content":{"body":"jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular","mimetype":"text/html"}]},"ts":1648764536014,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$73-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA"},
{"content":{"body":"I continue to believe that these data structures should've used SameValue, and this is a perfect example of why","msgtype":"m.text","org.matrix.msc1767.text":"I continue to believe that these data structures should've used SameValue, and this is a perfect example of why"},"ts":1648764599882,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Gv095vnObXMkIzlKkw3ySQM9ETV5l7Abf9hvnZBGILo"},
{"content":{"body":"you could easily have the current behaviour by replacing `-0` with `0` before doing any map operations, but you can't easily go the other way around","format":"org.matrix.custom.html","formatted_body":"you could easily have the current behaviour by replacing <code>-0</code> with <code>0</code> before doing any map operations, but you can't easily go the other way around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you could easily have the current behaviour by replacing `-0` with `0` before doing any map operations, but you can't easily go the other way around","mimetype":"text/plain"},{"body":"you could easily have the current behaviour by replacing <code>-0</code> with <code>0</code> before doing any map operations, but you can't easily go the other way around","mimetype":"text/html"}]},"ts":1648764648961,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jbFQ7O3xb0IyiL9gSSy7A01acTJXo8VnRC52cq6W_v8"},
{"content":{"body":"We you can easily replace with a unique symbol","msgtype":"m.text","org.matrix.msc1767.text":"We you can easily replace with a unique symbol"},"ts":1648764684642,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EOJ1FQ_k2zzij62gaI87kmQiAv4y2TRrRh9PdZhGRyY"},
{"content":{"body":"That's what I've done when I needed to support `-0` in Map/Set","format":"org.matrix.custom.html","formatted_body":"That's what I've done when I needed to support <code>-0</code> in Map/Set","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's what I've done when I needed to support `-0` in Map/Set","mimetype":"text/plain"},{"body":"That's what I've done when I needed to support <code>-0</code> in Map/Set","mimetype":"text/html"}]},"ts":1648764703685,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$57QjRwCVXDSw9yr2Anqt8J5lHhHW71M9g7Ai2be6I8w"},
{"content":{"body":"as long as that symbol doesn't escape, which you can't guarantee when the map is user-provided","msgtype":"m.text","org.matrix.msc1767.text":"as long as that symbol doesn't escape, which you can't guarantee when the map is user-provided"},"ts":1648764718690,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ndIByD4g4jX476eOkjeRNEMFLvjLroS7WeBJH93zDHs"},
{"content":{"body":"if the map is user provided, sure","msgtype":"m.text","org.matrix.msc1767.text":"if the map is user provided, sure"},"ts":1648764731916,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IoBHqNQhsfYD6urkLcpyxUT6j9wRr-cmdTB9QumLp3c"},
{"content":{"body":"I'm talking in the case of wrapping a map","msgtype":"m.text","org.matrix.msc1767.text":"I'm talking in the case of wrapping a map"},"ts":1648764751754,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kE5S516-SkUstnl9EmTG6r9x5x__umLAQLgIslC-v_Q"},
{"content":{"body":"also jschoi has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","format":"org.matrix.custom.html","formatted_body":"also <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also jschoi has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","mimetype":"text/plain"},{"body":"also <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> has use cases in mind like the user priming the cache, which again wouldn't work with a special replacement symbol","mimetype":"text/html"}]},"ts":1648764762994,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e_wScxtZG_190BY4fXL5upNRyQ99PCDY_SrJ-V5pQDQ"},
{"content":{"body":"which as we agreed was the only way to preserve that kind of invariants","msgtype":"m.text","org.matrix.msc1767.text":"which as we agreed was the only way to preserve that kind of invariants"},"ts":1648764773964,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$l8QhesXczB0hSmW5Jpz1sogv_PW8hm8v2-d3a-QX4tw"},
{"content":{"body":"yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there","msgtype":"m.text","org.matrix.msc1767.text":"yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there"},"ts":1648764826006,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU"},
{"content":{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose `SameValueZero` as a predicate the same way `SameValue` is exposed as `Object.is`, so that not providing a comparison predicate isn't magical. ","format":"org.matrix.custom.html","formatted_body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose <code>SameValueZero</code> as a predicate the same way <code>SameValue</code> is exposed as <code>Object.is</code>, so that not providing a comparison predicate isn't magical.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose `SameValueZero` as a predicate the same way `SameValue` is exposed as `Object.is`, so that not providing a comparison predicate isn't magical. ","mimetype":"text/plain"},{"body":"That said, I'd love if we could have a comparison predicate configurable when building the map, but to no shoot down performance, we may need to expose <code>SameValueZero</code> as a predicate the same way <code>SameValue</code> is exposed as <code>Object.is</code>, so that not providing a comparison predicate isn't magical.","mimetype":"text/html"}]},"ts":1648764915805,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sup5t3UCOASgkGpNTntJlEg-SEO-L2ZGl2kmCFUoGio"},
{"content":{"body":"`const SameValueZero = (a, b) => a === 0 && b === 0 || Object.is(a, b);`","format":"org.matrix.custom.html","formatted_body":"<code>const SameValueZero = (a, b) =&gt; a === 0 &amp;&amp; b === 0 || Object.is(a, b);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`const SameValueZero = (a, b) => a === 0 && b === 0 || Object.is(a, b);`","mimetype":"text/plain"},{"body":"<code>const SameValueZero = (a, b) =&gt; a === 0 &amp;&amp; b === 0 || Object.is(a, b);</code>","mimetype":"text/html"}]},"ts":1648765046632,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7KCEfbVMmVxcAjx2u4Fd0MJ-7je6Q1fOezrcZ5AO81g"},
{"content":{"body":"are you saying that passing that in would be too slow because it's not built-in?","msgtype":"m.text","org.matrix.msc1767.text":"are you saying that passing that in would be too slow because it's not built-in?"},"ts":1648765149059,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$birEsKD1QuG3ocp8rwHOBtuhzep0CDVSyPJ4shqpeFo"},
{"content":{"body":"passing it in fundamentally does not work because that means you have to do a comparison against every element","msgtype":"m.text","org.matrix.msc1767.text":"passing it in fundamentally does not work because that means you have to do a comparison against every element"},"ts":1648765285033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IdpSQC5U1qsAro99XUCB4OGxc-T8v2fn3TOocFE-V1E"},
{"content":{"body":"you need a user-defined hash function as well; just having user-defined equality is not useful","msgtype":"m.text","org.matrix.msc1767.text":"you need a user-defined hash function as well; just having user-defined equality is not useful"},"ts":1648765300330,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G4ltfVkMUwULpjwrE6MHv7U3oVavHhaha59Wz_q9KEg"},
{"content":{"body":"Why so complicated? `const SameValueZero = (a, b) => a === b`, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","format":"org.matrix.custom.html","formatted_body":"Why so complicated? <code>const SameValueZero = (a, b) =&gt; a === b</code>, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Why so complicated? `const SameValueZero = (a, b) => a === b`, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","mimetype":"text/plain"},{"body":"Why so complicated? <code>const SameValueZero = (a, b) =&gt; a === b</code>, but the point is that this wouldn't be optimizable as the implementation has to call the user predicate instead or recognizing it as its own","mimetype":"text/html"}]},"ts":1648765315454,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fJoCEQuLASi0pfar4_hDNGDkgK4S1saONQeqQywIR0U"},
{"content":{"body":"NaN","msgtype":"m.text","org.matrix.msc1767.text":"NaN"},"ts":1648765328497,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YgARnqpkigdcIu5G0M9Ca9jzyfSr72-GYdvlzLUtAkM"},
{"content":{"body":"not sure if trolling...","msgtype":"m.text","org.matrix.msc1767.text":"not sure if trolling..."},"ts":1648765335780,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BrIiLxRUSGLeVNK0E6lOcy78h6NMvg05wfZYk2XCi8I"},
{"content":{"body":"Oh right, ugh I'm tired","msgtype":"m.text","org.matrix.msc1767.text":"Oh right, ugh I'm tired"},"ts":1648765392253,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Tvtz2lOgmLD9TMh1OlwfVA-CcWnW-XzyhfZTQ3YJB7o"},
{"content":{"body":"we all are after this week","msgtype":"m.text","org.matrix.msc1767.text":"we all are after this week"},"ts":1648765422349,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$x7vW848dcaoI5fdeio5NkiBmVGi-qXacfqb5IwlDQ6M"},
{"content":{"body":"Ok nvm forget all of the above","msgtype":"m.text","org.matrix.msc1767.text":"Ok nvm forget all of the above"},"ts":1648765434202,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kdU3dzhQbVZAgvf7fMjuFkKoHBPbLM1l6IWEvKu3_p8"},
{"content":{"body":"yeah in that case the only other alternative I can think of if would be providing mapping functions that transform keys before insertion, probably with a SameValue based caching mechanism to be robust against instability of the transform function if the initial key is already known","msgtype":"m.text","org.matrix.msc1767.text":"yeah in that case the only other alternative I can think of if would be providing mapping functions that transform keys before insertion, probably with a SameValue based caching mechanism to be robust against instability of the transform function if the initial key is already known"},"ts":1648765739945,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EJAS15IMGCWQl0txRFYvrcPFlPNwR-QoP-S973qSFmE"},
{"content":{"body":"which seems not very efficient","msgtype":"m.text","org.matrix.msc1767.text":"which seems not very efficient"},"ts":1648765771137,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Aoa1CrYPGTdVqzz3IZ6k6gPCbU4gsICqE2QvfS0yqKo"},
{"content":{"body":"> <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU"}}},"ts":1648765846054,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cNjzGgh1zsA49bXj2vmrfzIqPKXvPl32BhZKAEcWZVU"},
{"content":{"body":"* > <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","m.new_content":{"body":"> <@michaelficarra:matrix.org> yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there\n\nAt first I thought the second set was just to store the `-0`, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24KvJPz9aZ1rr-BB1D7Ztx8mBwGZkUjhGxg8h38uQylKU\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah I used the strategy of wrapping two sets in https://www.npmjs.com/package/samevalueset, but a symbol probably would've worked fine there</blockquote></mx-reply>At first I thought the second set was just to store the <code>-0</code>, then checked the code. Using two sets to also preserve the insertion order is a classy touch!","msgtype":"m.text"},"m.relates_to":{"event_id":"$cNjzGgh1zsA49bXj2vmrfzIqPKXvPl32BhZKAEcWZVU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648765902398,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$h4FzjXwqiVEDWPEVkRB4uC5VGZV_kfFbsYDaSwNA8J4"},
{"content":{"body":"efficiency is nice, but the capability is more important","msgtype":"m.text","org.matrix.msc1767.text":"efficiency is nice, but the capability is more important"},"ts":1648765949377,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nzV6cKiSwD3UMFh87R6YNFeRn590EGgsqA48a_JGPH0"},
{"content":{"body":"what's the typical range of map/set content counts?","msgtype":"m.text","org.matrix.msc1767.text":"what's the typical range of map/set content counts?"},"ts":1648765973351,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tIUHSHPDx85Dy87E7tOJCZbqpetppyeoApIBLrUekfA"},
{"content":{"body":"are many people making maps and sets with a million+ things, in a hot path, and who *also* want this extra capability?","format":"org.matrix.custom.html","formatted_body":"are many people making maps and sets with a million+ things, in a hot path, and who <em>also</em> want this extra capability?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"are many people making maps and sets with a million+ things, in a hot path, and who *also* want this extra capability?","mimetype":"text/plain"},{"body":"are many people making maps and sets with a million+ things, in a hot path, and who <em>also</em> want this extra capability?","mimetype":"text/html"}]},"ts":1648766008227,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$irGwsIqoHYVfLtGbfY4NrOFGNJNvm__inkCEil1fYn8"},
{"content":{"body":"I think tens of thousands is a pretty reasonable estimate for a production-sized Map in some Node.js applications.","msgtype":"m.text","org.matrix.msc1767.text":"I think tens of thousands is a pretty reasonable estimate for a production-sized Map in some Node.js applications."},"ts":1648766454177,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XW3xSK6YtDXjD_g06TSqdOJ9HuOV4TE-h1MMupv1gNA"},
{"content":{"body":"if they're backing their memoisation implementation with it, it could see a lot of content","msgtype":"m.text","org.matrix.msc1767.text":"if they're backing their memoisation implementation with it, it could see a lot of content"},"ts":1648766592783,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ui6pvXE_E8Tog1iysmaCZ5evd_otyzrZyVllEfGIa_4"},
{"content":{"body":"and would any of these use cases (which obviously exist; i'm asking about %) need any of the functionality from these hooks?","msgtype":"m.text","org.matrix.msc1767.text":"and would any of these use cases (which obviously exist; i'm asking about %) need any of the functionality from these hooks?"},"ts":1648766642771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7d5EQozRqVCDn29yttclMlNCvdoWDBK9PkcJaFwX59I"},
{"content":{"body":"because if so, they're probably already paying the perf cost, and if not, they presumably wouldn't pay it (we wouldn't want to add a feature that penalized existing code paths, obv)","msgtype":"m.text","org.matrix.msc1767.text":"because if so, they're probably already paying the perf cost, and if not, they presumably wouldn't pay it (we wouldn't want to add a feature that penalized existing code paths, obv)"},"ts":1648766675287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IBQ9An5WlqO_Qed5J1PK1_71G8KoMffDq0Tp8Hm4eAw"},
{"content":{"body":"I think a lot of people would be very surprised if using a hook made set membership O(n) instead of ~constant","msgtype":"m.text","org.matrix.msc1767.text":"I think a lot of people would be very surprised if using a hook made set membership O(n) instead of ~constant"},"ts":1648766743568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UW-uxE-D1Vifo0BKIXEcC4jPtHY2kocpqlKSQXvCmkA"},
{"content":{"body":"you don't need large sets for that to be a problem, you just need to be doing lots of queries","msgtype":"m.text","org.matrix.msc1767.text":"you don't need large sets for that to be a problem, you just need to be doing lots of queries"},"ts":1648766779238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E2x3zK4z2-Q_BQi3Fd-jyeK2gRfLTgdhBLG_yTITSNs"},
{"content":{"body":"like if you don't want fast membership tests, you can just use a list and `.find`. which is what this would amount to anyway","format":"org.matrix.custom.html","formatted_body":"like if you don't want fast membership tests, you can just use a list and <code>.find</code>. which is what this would amount to anyway","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you don't want fast membership tests, you can just use a list and `.find`. which is what this would amount to anyway","mimetype":"text/plain"},{"body":"like if you don't want fast membership tests, you can just use a list and <code>.find</code>. which is what this would amount to anyway","mimetype":"text/html"}]},"ts":1648766800974,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d3MVF2MUaaULyeAsQ0jr6YdB4lm01rYgh5fmeiaM7G4"},
{"content":{"body":"> <@michaelficarra:matrix.org> jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular\n\nDistinguishing `-0` is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if `memo` takes a Map-like cache argument. I’m already going to propose LRUMap and friends. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular</blockquote></mx-reply>Distinguishing <code>-0</code> is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if <code>memo</code> takes a Map-like cache argument. I’m already going to propose LRUMap and friends.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$73-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA"}}},"ts":1648766888654,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eP8usRKVCmrywwlbaXXcNCnx9rR3UGE5nMBK9ik6wvI"},
{"content":{"body":"> <@ljharb:matrix.org> efficiency is nice, but the capability is more important\n\nif that is the case just write your own set?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$nzV6cKiSwD3UMFh87R6YNFeRn590EGgsqA48a_JGPH0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>efficiency is nice, but the capability is more important</blockquote></mx-reply>if that is the case just write your own set?","m.relates_to":{"m.in_reply_to":{"event_id":"$nzV6cKiSwD3UMFh87R6YNFeRn590EGgsqA48a_JGPH0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> efficiency is nice, but the capability is more important\n\nif that is the case just write your own set?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$nzV6cKiSwD3UMFh87R6YNFeRn590EGgsqA48a_JGPH0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>efficiency is nice, but the capability is more important</blockquote></mx-reply>if that is the case just write your own set?","mimetype":"text/html"}]},"ts":1648766900229,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Fq5huNAO-pVNHfxAu7q2nuO6rqPiXwVi_Y1pZhgmR74"},
{"content":{"body":"or map, i guess this conversation is about map","msgtype":"m.text","org.matrix.msc1767.text":"or map, i guess this conversation is about map"},"ts":1648766915029,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R4dwyqXADlCsovsk9SyzAfA6pj_st22jbqyjaDgHv-I"},
{"content":{"body":"> <@shuyuguo:matrix.org> if that is the case just write your own set?\n\nthat's what folks already are doing. but it's not ergonomic to do so, and, there's a bunch of other downsides including that your invariants are hard to enforce","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Fq5huNAO-pVNHfxAu7q2nuO6rqPiXwVi_Y1pZhgmR74?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if that is the case just write your own set?</blockquote></mx-reply>that's what folks already are doing. but it's not ergonomic to do so, and, there's a bunch of other downsides including that your invariants are hard to enforce","m.relates_to":{"m.in_reply_to":{"event_id":"$Fq5huNAO-pVNHfxAu7q2nuO6rqPiXwVi_Y1pZhgmR74"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> if that is the case just write your own set?\n\nthat's what folks already are doing. but it's not ergonomic to do so, and, there's a bunch of other downsides including that your invariants are hard to enforce","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Fq5huNAO-pVNHfxAu7q2nuO6rqPiXwVi_Y1pZhgmR74?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if that is the case just write your own set?</blockquote></mx-reply>that's what folks already are doing. but it's not ergonomic to do so, and, there's a bunch of other downsides including that your invariants are hard to enforce","mimetype":"text/html"}]},"ts":1648766933329,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GmNsZLP17Bt6ElAY05eg_0vpzE-TTV4nXbbaQUOGZNo"},
{"content":{"body":"* > <@michaelficarra:matrix.org> jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular\n\nDistinguishing `-0` is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if `memo` takes a Map-like cache argument. I’m already going to propose LRUMap and friends. ","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular</blockquote></mx-reply>Distinguishing <code>-0</code> is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if <code>memo</code> takes a Map-like cache argument. I’m already going to propose LRUMap and friends.","m.new_content":{"body":"> <@michaelficarra:matrix.org> jschoi: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular\n\nDistinguishing `-0` is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if `memo` takes a Map-like cache argument. I’m already going to propose LRUMap and friends. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473-EWV9xqAKeOQ35hDzz81Fy_x8EiOECcufk24oCYuA\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: you could start by proposing a SameValueSet and SameValueMap, though I doubt it would be too popular</blockquote></mx-reply>Distinguishing <code>-0</code> is probably uncommon enough that we can punt doing so to a userland Map-like class. But at least it would be possible, if <code>memo</code> takes a Map-like cache argument. I’m already going to propose LRUMap and friends.","msgtype":"m.text"},"m.relates_to":{"event_id":"$eP8usRKVCmrywwlbaXXcNCnx9rR3UGE5nMBK9ik6wvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648766939438,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bIIN7h_06qOzCjGSa4Ryfr3gMqx_-zC5tzPI8uTe7ms"},
{"content":{"body":"jschoi: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.","mimetype":"text/html"}]},"ts":1648766961933,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gFY7yuCs9zbiMvbXURKzPckomkIbmtGKh7O6sCec9as"},
{"content":{"body":"i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)","msgtype":"m.text","org.matrix.msc1767.text":"i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)"},"ts":1648766972857,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8"},
{"content":{"body":"we just... we cannot do that","msgtype":"m.text","org.matrix.msc1767.text":"we just... we cannot do that"},"ts":1648766977750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tcG66itfxDtBF3ROi-AcTPE7dWYXQ7d_Kontt793K0s"},
{"content":{"body":"the _whole point_ of the data structure is to have Not That","format":"org.matrix.custom.html","formatted_body":"the <em>whole point</em> of the data structure is to have Not That","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the _whole point_ of the data structure is to have Not That","mimetype":"text/plain"},{"body":"the <em>whole point</em> of the data structure is to have Not That","mimetype":"text/html"}]},"ts":1648766995838,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_37G6JL7kX_BDuVo6FM3YumXo3MA1yrnVWSnV_jzLIA"},
{"content":{"body":"ergonomics is a bad reason to slow down cases that do require performance","msgtype":"m.text","org.matrix.msc1767.text":"ergonomics is a bad reason to slow down cases that do require performance"},"ts":1648767028860,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dd_S2bIJisQu3JafTcK98yxiWKKzuUyZm9aLCtwu7Zc"},
{"content":{"body":"> <@michaelficarra:matrix.org> jschoi: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.\n\nDo you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24gFY7yuCs9zbiMvbXURKzPckomkIbmtGKh7O6sCec9as\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.</blockquote></mx-reply>Do you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$gFY7yuCs9zbiMvbXURKzPckomkIbmtGKh7O6sCec9as"}}},"ts":1648767033624,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gimy2tk8Ktokmn4VWdNCyx7esg9aCtm07u6dv-dZsMw"},
{"content":{"body":"* > <@michaelficarra:matrix.org> jschoi: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.\n\nDo you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24gFY7yuCs9zbiMvbXURKzPckomkIbmtGKh7O6sCec9as\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.</blockquote></mx-reply>Do you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","m.new_content":{"body":"> <@michaelficarra:matrix.org> jschoi: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.\n\nDo you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24gFY7yuCs9zbiMvbXURKzPckomkIbmtGKh7O6sCec9as\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I guess? It's a design worth considering, but it feels a bit icky for default memoise to do any coalescing.</blockquote></mx-reply>Do you think a EquivalenceMap(mapLike, equivalenceFn) built-in would be useful?","msgtype":"m.text"},"m.relates_to":{"event_id":"$gimy2tk8Ktokmn4VWdNCyx7esg9aCtm07u6dv-dZsMw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648767048158,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Ku9BRW6GKMt1TpnSbqOwKS39mFkrB1lf6Gbo_lkLY-M"},
{"content":{"body":"jschoi: no, for the reasons we're talking about above","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, for the reasons we're talking about above","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: no, for the reasons we're talking about above","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, for the reasons we're talking about above","mimetype":"text/html"}]},"ts":1648767049725,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FZGxPfO66-5Eyo5GmJX_7hOEj42svMX348WlY_TMUB4"},
{"content":{"body":"i'm slowly being radicalized into something more extreme, which is that ergonomics is a bad argument","msgtype":"m.text","org.matrix.msc1767.text":"i'm slowly being radicalized into something more extreme, which is that ergonomics is a bad argument"},"ts":1648767053500,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RKfOZBG1AosazznpgKjpAQmhZBfsdbEAnIn3DiAXqm8"},
{"content":{"body":"> <@bakkot:matrix.org> i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)\n\ni mean, i would hope that's not the case, and i think we could design something where it wouldn't have to be","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)</blockquote></mx-reply>i mean, i would hope that's not the case, and i think we could design something where it wouldn't have to be","m.relates_to":{"m.in_reply_to":{"event_id":"$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)\n\ni mean, i would hope that's not the case, and i think we could design something where it wouldn't have to be","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)</blockquote></mx-reply>i mean, i would hope that's not the case, and i think we could design something where it wouldn't have to be","mimetype":"text/html"}]},"ts":1648767128990,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Bb5abAihyGeUc8ZZW_KTyaUtAKha-qm8qQF-5Mz_o6g"},
{"content":{"body":"> <@bakkot:matrix.org> i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)\n\ni am also strongly opposed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)</blockquote></mx-reply>i am also strongly opposed","m.relates_to":{"m.in_reply_to":{"event_id":"$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)\n\ni am also strongly opposed","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$HxOu_G0tfDstfPQUeVZ-SvFyVu-_b8adX7RCrdWGOa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i am very, very strongly opposed to having hooks which cause set membership querying to be O(n)</blockquote></mx-reply>i am also strongly opposed","mimetype":"text/html"}]},"ts":1648767139193,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QtcpaqAGd2ZSQlPy7y6O0dS1ox8sbIdKU2SP9Io2r7k"},
{"content":{"body":"for example, instead of a \"predicate\" hook, a \"comparison value\" hook, that by default is `x => x` but could be made to return a string, or a unique symbol, or something","format":"org.matrix.custom.html","formatted_body":"for example, instead of a &quot;predicate&quot; hook, a &quot;comparison value&quot; hook, that by default is <code>x =&gt; x</code> but could be made to return a string, or a unique symbol, or something","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, instead of a \"predicate\" hook, a \"comparison value\" hook, that by default is `x => x` but could be made to return a string, or a unique symbol, or something","mimetype":"text/plain"},{"body":"for example, instead of a &quot;predicate&quot; hook, a &quot;comparison value&quot; hook, that by default is <code>x =&gt; x</code> but could be made to return a string, or a unique symbol, or something","mimetype":"text/html"}]},"ts":1648767164259,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$18cg4u0menf0JlxpZDEz2_-1LERtJJXkrhl0bdej4IQ"},
{"content":{"body":"i assume that would have potential memory costs but little to no lookup costs","msgtype":"m.text","org.matrix.msc1767.text":"i assume that would have potential memory costs but little to no lookup costs"},"ts":1648767179524,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kZ0zWYLHQH3AwW7Wc0eHtsGzRpQ_WVbruLTJ3FMBjYk"},
{"content":{"body":"My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.","msgtype":"m.text","org.matrix.msc1767.text":"My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier."},"ts":1648767233551,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$73YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs"},
{"content":{"body":"Right that's what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results","msgtype":"m.text","org.matrix.msc1767.text":"Right that's what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results"},"ts":1648767256563,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yWOXpd5RBCmgWjXN9652hbnTfdC-6t0n62mgn76M0tY"},
{"content":{"body":"> <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nyes but `Map.prototype.set.call` will continue to not work properly on these userland maps","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$73YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply>yes but <code>Map.prototype.set.call</code> will continue to not work properly on these userland maps","m.relates_to":{"m.in_reply_to":{"event_id":"$73YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nyes but `Map.prototype.set.call` will continue to not work properly on these userland maps","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$73YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply>yes but <code>Map.prototype.set.call</code> will continue to not work properly on these userland maps","mimetype":"text/html"}]},"ts":1648767262641,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MqTzGZNbgQWUgWQbfBxhshFxwxB0gWWpaPDILMHEp38"},
{"content":{"body":"sure they will","msgtype":"m.text","org.matrix.msc1767.text":"sure they will"},"ts":1648767272589,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T6lnXqNM_T_Mm42tWVsE3YPUoSPM4rvk1KRYE4YCilg"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1648767274164,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$42DRx3IMgroIViKjF9k123U2GX2EMapDTvnZj1mGGiA"},
{"content":{"body":"it will throw","msgtype":"m.text","org.matrix.msc1767.text":"it will throw"},"ts":1648767275349,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-90FLkIbuScEZjdrgRFz0hrtlcsc9ibKgRBq8lNT1fM"},
{"content":{"body":"> <@mhofman:matrix.org> Right that's what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results\n\nyes, in that example the hook is only ever called once per key","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yWOXpd5RBCmgWjXN9652hbnTfdC-6t0n62mgn76M0tY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right that&#39;s what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results</blockquote></mx-reply>yes, in that example the hook is only ever called once per key","m.relates_to":{"m.in_reply_to":{"event_id":"$yWOXpd5RBCmgWjXN9652hbnTfdC-6t0n62mgn76M0tY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Right that's what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results\n\nyes, in that example the hook is only ever called once per key","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yWOXpd5RBCmgWjXN9652hbnTfdC-6t0n62mgn76M0tY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right that&#39;s what I suggested earlier, but to prevent bugs due to instability of the mapping function, you have to cache its results</blockquote></mx-reply>yes, in that example the hook is only ever called once per key","mimetype":"text/html"}]},"ts":1648767276509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q6mjY9q0gLcvZ_bQxepbU7PRGO5kwMAVeOfet5JH7Is"},
{"content":{"body":"it won't violate any invariants","msgtype":"m.text","org.matrix.msc1767.text":"it won't violate any invariants"},"ts":1648767278490,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BM3XD4lU4zf5UG3SGiX3_aJ-M88Y8SBCJWeu2KiLJh8"},
{"content":{"body":"so, seems fine","msgtype":"m.text","org.matrix.msc1767.text":"so, seems fine"},"ts":1648767279970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H6s17Wqel6kJB15Hzb6_XtzJI-36PKJawTc3-u8QFUw"},
{"content":{"body":"why do you want built-in map methods to work for your userland maps?","msgtype":"m.text","org.matrix.msc1767.text":"why do you want built-in map methods to work for your userland maps?"},"ts":1648767287538,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wPsBMPnHco0Rm4fr8V1X08yYaKMTINK4yTVUqCXoh9U"},
{"content":{"body":"the same reason i want built-in iteration syntax to work for userland iterables?","msgtype":"m.text","org.matrix.msc1767.text":"the same reason i want built-in iteration syntax to work for userland iterables?"},"ts":1648767300756,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z1LDdC08SEpqSTtEpB3PUYu9dVmpoqCOXQd1cn3C6E0"},
{"content":{"body":"> <@shuyuguo:matrix.org> why do you want built-in map methods to work for your userland maps?\n\nI certainly have no such expectation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$wPsBMPnHco0Rm4fr8V1X08yYaKMTINK4yTVUqCXoh9U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>why do you want built-in map methods to work for your userland maps?</blockquote></mx-reply>I certainly have no such expectation.","m.relates_to":{"m.in_reply_to":{"event_id":"$wPsBMPnHco0Rm4fr8V1X08yYaKMTINK4yTVUqCXoh9U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> why do you want built-in map methods to work for your userland maps?\n\nI certainly have no such expectation.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$wPsBMPnHco0Rm4fr8V1X08yYaKMTINK4yTVUqCXoh9U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>why do you want built-in map methods to work for your userland maps?</blockquote></mx-reply>I certainly have no such expectation.","mimetype":"text/html"}]},"ts":1648767304923,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Od2Y4lekv6jsOyBFhj1spR0vfFLYetFfgCi_srX2Huo"},
{"content":{"body":"those are... very... different","msgtype":"m.text","org.matrix.msc1767.text":"those are... very... different"},"ts":1648767309341,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C16yleDU5Ekvje4x36p9XuxMjzHq6gyR2GRLFmPgb4Y"},
{"content":{"body":"> <@ljharb:matrix.org> the same reason i want built-in iteration syntax to work for userland iterables?\n\nlol i am leaving this convo","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z1LDdC08SEpqSTtEpB3PUYu9dVmpoqCOXQd1cn3C6E0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the same reason i want built-in iteration syntax to work for userland iterables?</blockquote></mx-reply>lol i am leaving this convo","m.relates_to":{"m.in_reply_to":{"event_id":"$z1LDdC08SEpqSTtEpB3PUYu9dVmpoqCOXQd1cn3C6E0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the same reason i want built-in iteration syntax to work for userland iterables?\n\nlol i am leaving this convo","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z1LDdC08SEpqSTtEpB3PUYu9dVmpoqCOXQd1cn3C6E0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the same reason i want built-in iteration syntax to work for userland iterables?</blockquote></mx-reply>lol i am leaving this convo","mimetype":"text/html"}]},"ts":1648767315367,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$68xooXNhQg_g0JqV9zrApqifyCuGUgAyuJFFqKpijZQ"},
{"content":{"body":"to me they're all conceptual protocols","msgtype":"m.text","org.matrix.msc1767.text":"to me they're all conceptual protocols"},"ts":1648767319699,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K5uVTOatbESOJ_tMDjfUVebELcSZVsdSj1IudE0uT3s"},
{"content":{"body":"i want to be able to work with map-like collections in a robust fashion","msgtype":"m.text","org.matrix.msc1767.text":"i want to be able to work with map-like collections in a robust fashion"},"ts":1648767336798,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TL5JoLrD4EJpbsqa9O3-A49GA5DEQMNPhjsq8AZLfqE"},
{"content":{"body":"just call `.set`","format":"org.matrix.custom.html","formatted_body":"just call <code>.set</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"just call `.set`","mimetype":"text/plain"},{"body":"just call <code>.set</code>","mimetype":"text/html"}]},"ts":1648767345239,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eXyn_UknlLahOK_6I4qe9U_RYkS8Ko_Ar9fOklmxdqY"},
{"content":{"body":"that is how you work with map-likes","msgtype":"m.text","org.matrix.msc1767.text":"that is how you work with map-likes"},"ts":1648767351474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxQ3NTZOiiizt5B4FPuq-kjzjjnXGbfcClaVfvfO7cI"},
{"content":{"body":"The protocol in this case is `.get`, `.set`, `.delete` ?","format":"org.matrix.custom.html","formatted_body":"The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The protocol in this case is `.get`, `.set`, `.delete` ?","mimetype":"text/plain"},{"body":"The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","mimetype":"text/html"}]},"ts":1648767360931,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VWiE4kpoWI9-BSdJFOt2sO3mMxqq3X7GAJGkKZDfhkM"},
{"content":{"body":" * The protocol in this case is `.get`, `.set`, `.delete` ?","format":"org.matrix.custom.html","formatted_body":" * The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","m.new_content":{"body":"The protocol in this case is `.get`, `.set`, `.delete` ?","format":"org.matrix.custom.html","formatted_body":"The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The protocol in this case is `.get`, `.set`, `.delete` ?","mimetype":"text/plain"},{"body":"The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$VWiE4kpoWI9-BSdJFOt2sO3mMxqq3X7GAJGkKZDfhkM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The protocol in this case is `.get`, `.set`, `.delete` ?","mimetype":"text/plain"},{"body":" * The protocol in this case is <code>.get</code>, <code>.set</code>, <code>.delete</code> ?","mimetype":"text/html"}]},"ts":1648767381671,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nC-KlFYt8qv_-sD4xRPpnSdmgFoIKglBquTAjQYmAaI"},
{"content":{"body":"lol i can see none of you are going to react well to my preferences here","msgtype":"m.text","org.matrix.msc1767.text":"lol i can see none of you are going to react well to my preferences here"},"ts":1648767383934,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TABrYzc7y74xWRpG55XZh_rce_EvzmrMnRluzbAxfsA"},
{"content":{"body":"I mean, I love protocols.","msgtype":"m.text","org.matrix.msc1767.text":"I mean, I love protocols."},"ts":1648767392760,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qd7Jsh6Iee_PqaJvbWF3qXaBD7TP-toNu_a3km567RA"},
{"content":{"body":"in general, i want to minimize how much i trust other code.","msgtype":"m.text","org.matrix.msc1767.text":"in general, i want to minimize how much i trust other code."},"ts":1648767405951,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J7IQxhZ1hA5YHC2XibuHDILwGPVuYHyYM07vZTkojGg"},
{"content":{"body":"\"just call .foo on the argument\" is not doing that","msgtype":"m.text","org.matrix.msc1767.text":"\"just call .foo on the argument\" is not doing that"},"ts":1648767417475,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JZoWgwVzixAQuEq2fvbGiSrMZnbIZ1rWaHJcSYvRSJk"},
{"content":{"body":"> <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nSpeaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n\nThe alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply><p>Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$73YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs"}}},"ts":1648767434425,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw"},
{"content":{"body":"* > <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nSpeaking of tuples, has there been any recent activity around composite keys? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n\nThe alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap. ","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply><p>Speaking of tuples, has there been any recent activity around composite keys? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p>","m.new_content":{"body":"> <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nSpeaking of tuples, has there been any recent activity around composite keys? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n\nThe alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply><p>Speaking of tuples, has there been any recent activity around composite keys? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648767449250,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gBQaj0iMjYmpRwvcSVITP_VTraIL4Oz5gQEF3sFnNq4"},
{"content":{"body":"> <@shuyuguo:matrix.org> lol i am leaving this convo\n\nright but see this kind of reaction to the things i find important encourages me to react equally strongly to things like structs and atomics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$68xooXNhQg_g0JqV9zrApqifyCuGUgAyuJFFqKpijZQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>lol i am leaving this convo</blockquote></mx-reply>right but see this kind of reaction to the things i find important encourages me to react equally strongly to things like structs and atomics.","m.relates_to":{"m.in_reply_to":{"event_id":"$68xooXNhQg_g0JqV9zrApqifyCuGUgAyuJFFqKpijZQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> lol i am leaving this convo\n\nright but see this kind of reaction to the things i find important encourages me to react equally strongly to things like structs and atomics.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$68xooXNhQg_g0JqV9zrApqifyCuGUgAyuJFFqKpijZQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>lol i am leaving this convo</blockquote></mx-reply>right but see this kind of reaction to the things i find important encourages me to react equally strongly to things like structs and atomics.","mimetype":"text/html"}]},"ts":1648767492669,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o9wJ8NtHukxbzu8JcMUcTtRUE1N9gOTQJjMGY2_kyuA"},
{"content":{"body":"* > <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nSpeaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n\nThe alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap. ","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply><p>Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p>","m.new_content":{"body":"> <@kriskowal:matrix.org> My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.\n\nSpeaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n\nThe alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%2473YolOrWp3ogoO83cMYGhAwCExwuiupxFvjdAzoxKUs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My position is approximately that more interesting Maps and Sets can be created in user code by composition, without inheritance, using what we already have, and that record and tuple keys will just make that easier.</blockquote></mx-reply><p>Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648767502456,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Gv8791cOK4sP9sBNz3pDyPE15TQQwCK8yU_B9DAr5o8"},
{"content":{"body":"excuse me?","msgtype":"m.text","org.matrix.msc1767.text":"excuse me?"},"ts":1648767513667,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qOcyGkqbbEAvEEgkj8lilmAQP6y_Iy-2cenMWPhN5IU"},
{"content":{"body":"Unfortunately I hear there is push back against considering tuples of unique symbols as WeakMap keys ...","msgtype":"m.text","org.matrix.msc1767.text":"Unfortunately I hear there is push back against considering tuples of unique symbols as WeakMap keys ..."},"ts":1648767520386,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eyYGlBDpqvt0Mv_Uzwi1OD3eb7vqv-jHOPcRPIlRjHY"},
{"content":{"body":"because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them","msgtype":"m.text","org.matrix.msc1767.text":"because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them"},"ts":1648767523378,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pCws7QdFofgLBaLeI61FDTM9yOlpgNZT7fi1_ffpaEk"},
{"content":{"body":" * because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them","m.new_content":{"body":"because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them","msgtype":"m.text","org.matrix.msc1767.text":"because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them"},"m.relates_to":{"event_id":"$pCws7QdFofgLBaLeI61FDTM9yOlpgNZT7fi1_ffpaEk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them"},"ts":1648767536874,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6K7npxNDeYriiIJtRxh-WMnqPZCKZPolRtqVoq0JbOo"},
{"content":{"body":"> <@jschoi:matrix.org> Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n> \n> The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.\n\nWe have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><p>Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p></blockquote></mx-reply>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m","m.relates_to":{"m.in_reply_to":{"event_id":"$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.\n> \n> The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.\n\nWe have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Nml6Hy7zumdoPR3xUfAAbOKSlLXnLDtzgr5SU_s3VYw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><p>Speaking of tuples, has there been any recent activity around composite keys (which are kind of an alternative to tuple keys)? I ask because someone has suggested them for https://github.com/js-choi/proposal-function-memo/issues/4#issuecomment-1083552333, and I don’t see any activity around them since 2019.</p>\n<p>The alternative for memo would be to use argument tuples as keys in the Map-like cache and to replace objects in the tuple with symbols from a WeakMap.</p></blockquote></mx-reply>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m","mimetype":"text/html"}]},"ts":1648767554866,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c"},
{"content":{"body":"i think i'm going to step out of the convo myself; this is reminding me of the completely BS response i get to \"brand checking\" desires, and i'm a bit too tired to handle it well.","msgtype":"m.text","org.matrix.msc1767.text":"i think i'm going to step out of the convo myself; this is reminding me of the completely BS response i get to \"brand checking\" desires, and i'm a bit too tired to handle it well."},"ts":1648767579062,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nfZYUmRAfVTB5eN790-0IAhoPmfBxYxLts7M2fkFQyM"},
{"content":{"body":"> <@mhofman:matrix.org> Unfortunately I hear there is push back against considering tuples of unique symbols as WeakMap keys ...\n\nYeah, fortunately in this case, the object-replacement symbols would be the WeakMap’s values, not its keys. See https://github.com/js-choi/proposal-function-memo/blob/main/README.md#result-caches.\n\nBut we couldn’t use a WeakMap directly as the cache, though, if we used tuple keys, since tuples can’t contain objects anyway. But that’s fine. We’re using user-provided Map-likes anyway. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24eyYGlBDpqvt0Mv_Uzwi1OD3eb7vqv-jHOPcRPIlRjHY\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Unfortunately I hear there is push back against considering tuples of unique symbols as WeakMap keys ...</blockquote></mx-reply><p>Yeah, fortunately in this case, the object-replacement symbols would be the WeakMap’s values, not its keys. See https://github.com/js-choi/proposal-function-memo/blob/main/README.md#result-caches.</p>\n<p>But we couldn’t use a WeakMap directly as the cache, though, if we used tuple keys, since tuples can’t contain objects anyway. But that’s fine. We’re using user-provided Map-likes anyway.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$eyYGlBDpqvt0Mv_Uzwi1OD3eb7vqv-jHOPcRPIlRjHY"}},"msgtype":"m.text"},"ts":1648767646137,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$G1oZqaXe4DlUFdCJl-EequDBGSuuzfKYynGfDhVrT8E"},
{"content":{"body":"> <@ljharb:matrix.org> because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them\n\nit is not the case i don't value the motivation, it is that i think i understand the motivation, and that it is the wrong thing to trade off, and that i find your equivocating of _very_ different things in the language frustrating","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$pCws7QdFofgLBaLeI61FDTM9yOlpgNZT7fi1_ffpaEk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>because i don&#39;t value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them</blockquote></mx-reply>it is not the case i don't value the motivation, it is that i think i understand the motivation, and that it is the wrong thing to trade off, and that i find your equivocating of <em>very</em> different things in the language frustrating","m.relates_to":{"m.in_reply_to":{"event_id":"$pCws7QdFofgLBaLeI61FDTM9yOlpgNZT7fi1_ffpaEk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> because i don't value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them\n\nit is not the case i don't value the motivation, it is that i think i understand the motivation, and that it is the wrong thing to trade off, and that i find your equivocating of _very_ different things in the language frustrating","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$pCws7QdFofgLBaLeI61FDTM9yOlpgNZT7fi1_ffpaEk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>because i don&#39;t value any of the motivations for either of those, personally, but that should mean i stay out of the conversation, not that i ridicule or block them</blockquote></mx-reply>it is not the case i don't value the motivation, it is that i think i understand the motivation, and that it is the wrong thing to trade off, and that i find your equivocating of <em>very</em> different things in the language frustrating","mimetype":"text/html"}]},"ts":1648767648605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$016M-S9fV-XwfgkOIWQCVBBVeES2-9bac0pJGxeEehA"},
{"content":{"body":"my reaction is not because \"lol i don't care about robustness, get out of here with that proposal\"","msgtype":"m.text","org.matrix.msc1767.text":"my reaction is not because \"lol i don't care about robustness, get out of here with that proposal\""},"ts":1648767685239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UdWwGjNLo91-Vg_RevlTAhyepS1zg4gP_Q3l-_bUtRs"},
{"content":{"body":"> <@kriskowal:matrix.org> We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m\n\nSorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m</blockquote></mx-reply>Sorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c"}}},"ts":1648767710624,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gEMoDKRdDgCxbV6tY8xHDDANDqttxfUoKOBB9vI1wks"},
{"content":{"body":"* > <@kriskowal:matrix.org> We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m\n\nSorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not arums tuples. ","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m</blockquote></mx-reply>Sorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not arums tuples.","m.new_content":{"body":"> <@kriskowal:matrix.org> We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m\n\nSorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not arums tuples. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m</blockquote></mx-reply>Sorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not arums tuples.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gEMoDKRdDgCxbV6tY8xHDDANDqttxfUoKOBB9vI1wks","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648767722245,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Lnixmm8EsWnr1QmtMZ-Ry1oO4KG0gnti1s10um14CGk"},
{"content":{"body":"* > <@kriskowal:matrix.org> We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m\n\nSorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples. ","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m</blockquote></mx-reply>Sorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples.","m.new_content":{"body":"> <@kriskowal:matrix.org> We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m\n\nSorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ryvV80IfvFjDpAY94PXyYlHnEFf0XDszLWDOkXt7v-c\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We have certainly had conversations about records and tuples as recently as last December in the SES calls https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#heading=h.kf3ndl27679m</blockquote></mx-reply>Sorry, I had meant recent activity around compositeKeys (https://github.com/tc39/proposal-richer-keys/blob/master/compositeKey/README.md), not around tuples.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gEMoDKRdDgCxbV6tY8xHDDANDqttxfUoKOBB9vI1wks","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648767737234,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Av6B8-2BNWV8r7s602DIwgrkYzOF8vBBshlSCQnTVWA"},
{"content":{"body":"> <@ljharb:matrix.org> in general, i want to minimize how much i trust other code.\n\nSympathetic to this position, since I find myself in situations where reentrance of guest code can violate my invariants. Protocols are actually a hazard in these situations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$J7IQxhZ1hA5YHC2XibuHDILwGPVuYHyYM07vZTkojGg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>in general, i want to minimize how much i trust other code.</blockquote></mx-reply>Sympathetic to this position, since I find myself in situations where reentrance of guest code can violate my invariants. Protocols are actually a hazard in these situations.","m.relates_to":{"m.in_reply_to":{"event_id":"$J7IQxhZ1hA5YHC2XibuHDILwGPVuYHyYM07vZTkojGg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> in general, i want to minimize how much i trust other code.\n\nSympathetic to this position, since I find myself in situations where reentrance of guest code can violate my invariants. Protocols are actually a hazard in these situations.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$J7IQxhZ1hA5YHC2XibuHDILwGPVuYHyYM07vZTkojGg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>in general, i want to minimize how much i trust other code.</blockquote></mx-reply>Sympathetic to this position, since I find myself in situations where reentrance of guest code can violate my invariants. Protocols are actually a hazard in these situations.","mimetype":"text/html"}]},"ts":1648767739079,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZN2vNPhyfBqmk9jZtf1nXVT_af_Iko9zXW6UvwsqYpc"},
{"content":{"body":"But I do like collection protocols, though there is a design tension in performance.","msgtype":"m.text","org.matrix.msc1767.text":"But I do like collection protocols, though there is a design tension in performance."},"ts":1648767790601,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$N8nMYzfc4zuBunaP-M-WqrO2zuck5lzd0zhkfvRwKPE"},
{"content":{"body":"Much depends on what kind of contract you’re providing.","msgtype":"m.text","org.matrix.msc1767.text":"Much depends on what kind of contract you’re providing."},"ts":1648767831005,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dfI9zRZRlFFWKsH5O5x37h0y4itIztWeq04qCe1yrK0"},
{"content":{"body":"In the situations where we find ourselves `uncurryThis(String.prototype.set)`, the contract is not object oriented, not lazy bound, instances must be Sets and anything else is going to be ignored.","format":"org.matrix.custom.html","formatted_body":"In the situations where we find ourselves <code>uncurryThis(String.prototype.set)</code>, the contract is not object oriented, not lazy bound, instances must be Sets and anything else is going to be ignored.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In the situations where we find ourselves `uncurryThis(String.prototype.set)`, the contract is not object oriented, not lazy bound, instances must be Sets and anything else is going to be ignored.","mimetype":"text/plain"},{"body":"In the situations where we find ourselves <code>uncurryThis(String.prototype.set)</code>, the contract is not object oriented, not lazy bound, instances must be Sets and anything else is going to be ignored.","mimetype":"text/html"}]},"ts":1648767887347,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OgKd6ROx61LmPBEZ21McP4AhkfbZGcOEX7vYHQdcTgE"}
]