[
{"content":{"body":"I wonder if there would be appetite for making Array holes and Array indexed property descriptors (possibly also Array overindexing going into the prototype chain) into either Annex B material, or into normative legacy?\n\nie. Change the spec to first and foremost define Array indexing in the same kind of terms as TypedArray indexing works, while leaving the current definition there as an optional implementation. The change could likely never enter browsers, but on the server-side this sort of change might be possible over the years.","m.mentions":{},"msgtype":"m.text"},"ts":1739621600056,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$B-bcENrw8BImjG_00BWAor85TnxqgOlC4xt9wcmtsrw"},
{"content":{"body":"if itâ€™s not possible in the web why would it be possible outside the web? Lots of code runs in both.","msgtype":"m.text"},"ts":1739640044612,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U86b5dgAOxWebsCcG0pfWpJ_9i02wyfOgtr-cJj731A"},
{"content":{"body":"Because while a browser can hardly ship a breaking change, runtimes fairly \"regularly\" do (over a time frame of multiple years, though). Of course, usually those breaking changes only affect their own runtime-related APIs or embedding APIs but there isn't really anything to say that those couldn't also affect some deeper JS APIs.","m.mentions":{},"msgtype":"m.text"},"ts":1739649161523,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$iMUuPC1JkQO8nlnZbTVfR-CiM8tIYNUzCS4gFgUSb4U"}
]