[
{"content":{"body":"I noticed an interoperability issue between Firefox and Chrome when it comes to Array sort(), in particular, the presence of an undefined/NaN can not only affect the positin of the NaN but the order of all other items which seems problematic?\n\nMinimal example at https://phabricator.wikimedia.org/P63711","m.mentions":{},"msgtype":"m.text"},"ts":1717083308179,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$O-BEuRKq1-Fsu_r_xcwWdpyqJwXMkhsBY4kj25id2s4"},
{"content":{"body":" * I noticed an interoperability issue between Firefox and Chrome when it comes to Array sort(), in particular, the presence of an undefined/NaN can not only affect the position of the NaN but the order of all other items which seems problematic?\n\nMinimal example at https://phabricator.wikimedia.org/P63711","m.mentions":{},"m.new_content":{"body":"I noticed an interoperability issue between Firefox and Chrome when it comes to Array sort(), in particular, the presence of an undefined/NaN can not only affect the position of the NaN but the order of all other items which seems problematic?\n\nMinimal example at https://phabricator.wikimedia.org/P63711","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$O-BEuRKq1-Fsu_r_xcwWdpyqJwXMkhsBY4kj25id2s4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717083325164,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$sYDBxZLINi8pVzHK0EBgv-BWDh3XynoSCp_FepxNW2w"},
{"content":{"body":"Firefox: `0, 1, undefined, -10, -9`\nChrome: `-10, -9, 0, 1, undefined`","format":"org.matrix.custom.html","formatted_body":"Firefox: <code>0, 1, undefined, -10, -9</code><br>Chrome: <code>-10, -9, 0, 1, undefined</code>","m.mentions":{},"msgtype":"m.text"},"ts":1717083364929,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$R9YRaxBMpzPqDOv91urK8zGw-BudB-5V8hMkShUz0tM"},
{"content":{"body":"Timo Tijhof: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#sorting_with_non-well-formed_comparator","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@timotijhof:matrix.org\">Timo Tijhof</a>: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#sorting_with_non-well-formed_comparator","m.mentions":{"user_ids":["@timotijhof:matrix.org"]},"msgtype":"m.text"},"ts":1717084156940,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$NskwI6qdITttGseGy2fQP8vb3-6jGPUBHwasmZZU6fM"},
{"content":{"body":"eemeli: Is there no apetite for tightening the spec around this? I get the argument for purity and stability, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.\n\n","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: Is there no apetite for tightening the spec around this? I get the argument for purity and stability, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1717084342023,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$Qu8wy1Nqb1kCQB556A-D67Ek_BYk6xQRfMPaLRVvpi8"},
{"content":{"body":" * eemeli: Is there no apetite for tightening the spec around this? I get the argument for mathematical purity, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: Is there no apetite for tightening the spec around this? I get the argument for mathematical purity, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.","m.mentions":{},"m.new_content":{"body":"eemeli: Is there no apetite for tightening the spec around this? I get the argument for mathematical purity, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: Is there no apetite for tightening the spec around this? I get the argument for mathematical purity, but I don't see the benefit in allowing it to remain as unspecified/undefined behaviour. We've already crossed the bridge of stable sorting for identical values based on input. Standardising behaviour around NaN seems like a natural next step.","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Qu8wy1Nqb1kCQB556A-D67Ek_BYk6xQRfMPaLRVvpi8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717084354441,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$0mCdtFS0UVwuFMgu9StKrIz6FxA1mJGilH_swGgCsLQ"},
{"content":{"body":"It's not the behavior around NaN, it's the behavior around inconsistent comparators","m.mentions":{},"msgtype":"m.text"},"ts":1717084814340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FKdSqRrUeiQcs5cdTf_JXOe4WqMXMk3pA_s-cUDv-Hk"},
{"content":{"body":"My guess would be that it would be difficult to define the sorting behaviour more strictly without introducing performance penalties for some implementations.","m.mentions":{},"msgtype":"m.text"},"ts":1717084832287,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$qk2HYRHjcFbt-gBnhjXhGz4h_Yp-SLwUch6aPKORkJs"},
{"content":{"body":"there might someday be appetite to fully specify behavior even in the presence of inconsistent comparators, but that would require a particular sorting algorithm (or at least more specific than currently), which would prevent implementations with experimenting with alternative sorting algorithms, which is a very nice thing for them to be able to do","m.mentions":{},"msgtype":"m.text"},"ts":1717084907461,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xbU_DThqWo70peZch-eSJyxPdxIV8KuHoJxiHC_cOeg"},
{"content":{"body":"Is there anything we can do to make it easier to write compliant comparators for the more frequent and trivial cases, such as the example above?","m.mentions":{},"msgtype":"m.text"},"ts":1717085600611,"senderName":"whosy","senderId":"@whosy:matrix.org","id":"$IoJmdpJx4a8jK3C_pgCVDHABQzMF7CG_kop64HXBHZo"},
{"content":{"body":"we could provide a `sortBy` method that takes a function from list members to numbers and then sorts according to the result, and if we specified where `NaN` goes in such a list (or that getting `NaN` throws, my preference) that would address this case","format":"org.matrix.custom.html","formatted_body":"we could provide a <code>sortBy</code> method that takes a function from list members to numbers and then sorts according to the result, and if we specified where <code>NaN</code> goes in such a list (or that getting <code>NaN</code> throws, my preference) that would address this case","m.mentions":{},"msgtype":"m.text"},"ts":1717086133637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G8T5He_HYgsodFEDp0bTJZeaPn0K4uURBpebgt4Oy78"},
{"content":{"body":"I have wanted this for a while but not had time to pursue it","m.mentions":{},"msgtype":"m.text"},"ts":1717086146446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aPwsFqmQR0jSdx8KNXSIuqvioklVb2shLF87I-al6Tw"},
{"content":{"body":"also we could provide a built-in comparator for the common case of sorting a list of numbers, though it wouldn't help in the given example","m.mentions":{},"msgtype":"m.text"},"ts":1717086154402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6U9VGBxbXhtqEQwgI5cOnb77OcKZuvMueKJYTB9TfQk"},
{"content":{"body":"`(a, b) => (a.index - b.index) || 0` seems like it'd make it consistent?","format":"org.matrix.custom.html","formatted_body":"<code>(a, b) =&gt; (a.index - b.index) || 0</code> seems like it'd make it consistent?","m.mentions":{},"msgtype":"m.text"},"ts":1717086312729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$065fWh2_ado9LsYIw1dRjfFqYwsUjeDWrlkS6UblQU0"},
{"content":{"body":"If I might ask a question to such experienced people, as someone working on their first proposal:\n\nHow opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?\n\nOr am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?","m.mentions":{},"msgtype":"m.text"},"ts":1717100785521,"senderName":"whosy","senderId":"@whosy:matrix.org","id":"$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg"},
{"content":{"body":"> <@ljharb:matrix.org> `(a, b) => (a.index - b.index) || 0` seems like it'd make it consistent?\n\nHm..  no, result remains different in Chrome/Firefox in the same way with this change applied.\n\nI also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.\n\nIf it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell , that has effectively been done already (not sure how recent, if recent).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$065fWh2_ado9LsYIw1dRjfFqYwsUjeDWrlkS6UblQU0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>(a, b) =&gt; (a.index - b.index) || 0</code> seems like it'd make it consistent?</blockquote></mx-reply><p>Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.</p>\n<p>I also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.</p>\n<p>If it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell , that has effectively been done already (not sure how recent, if recent).</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$065fWh2_ado9LsYIw1dRjfFqYwsUjeDWrlkS6UblQU0"}},"msgtype":"m.text"},"ts":1717101191983,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$U2f9m0CsWjopwLg51d_21zuJxCSVBAtQM20lIcqvuYU"},
{"content":{"body":"> <@ljharb:matrix.org> `(a, b) => (a.index - b.index) || 0` seems like it'd make it consistent?\n\n * Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.\n\nI also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.\n\nIf it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$065fWh2_ado9LsYIw1dRjfFqYwsUjeDWrlkS6UblQU0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>(a, b) =&gt; (a.index - b.index) || 0</code> seems like it'd make it consistent?</blockquote></mx-reply> * <p>Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.</p>\n<p>I also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.</p>\n<p>If it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).</p>\n","m.mentions":{},"m.new_content":{"body":"Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.\n\nI also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.\n\nIf it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).","format":"org.matrix.custom.html","formatted_body":"<p>Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.</p>\n<p>I also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.</p>\n<p>If it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$U2f9m0CsWjopwLg51d_21zuJxCSVBAtQM20lIcqvuYU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717101234445,"senderName":"Timo Tijhof","senderId":"@timotijhof:matrix.org","id":"$jgKupHu-jGTkKQhq6siR9WkjTtpbpE9DIQqbVpe23so"},
{"content":{"body":"> <@whosy:matrix.org> If I might ask a question to such experienced people, as someone working on their first proposal:\n> \n> How opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?\n> \n> Or am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?\n\nat stage 0 and 1, a proposal is really just a _problem_ (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@whosy:matrix.org\">@whosy:matrix.org</a><br>If I might ask a question to such experienced people, as someone working on their first proposal:<br/><br/>How opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?<br/><br/>Or am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?</blockquote></mx-reply>at stage 0 and 1, a proposal is really just a <em>problem</em> (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\"","m.mentions":{"user_ids":["@whosy:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg"}},"msgtype":"m.text"},"ts":1717101384336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$acneNP4avPe7EaI_vncvW7oRUXkVFJAtTwGiKpsAOu8"},
{"content":{"body":" * at stage 0 and 1, a proposal is really just a _problem_ (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\". so if you're that deep into a solution i'd say it might be too early to do so :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@whosy:matrix.org\">@whosy:matrix.org</a><br>If I might ask a question to such experienced people, as someone working on their first proposal:<br><br>How opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?<br><br>Or am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?</blockquote></mx-reply> * at stage 0 and 1, a proposal is really just a <em>problem</em> (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\". so if you're that deep into a solution i'd say it might be too early to do so :-)","m.mentions":{},"m.new_content":{"body":"at stage 0 and 1, a proposal is really just a _problem_ (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\". so if you're that deep into a solution i'd say it might be too early to do so :-)","format":"org.matrix.custom.html","formatted_body":"at stage 0 and 1, a proposal is really just a <em>problem</em> (altho it's nice to have a suggested solution). it's tough to be too opinionated about a problem, besides \"i actively don't want this part of the problem solved\". so if you're that deep into a solution i'd say it might be too early to do so :-)","m.mentions":{"user_ids":["@whosy:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$acneNP4avPe7EaI_vncvW7oRUXkVFJAtTwGiKpsAOu8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717101408531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$otz0WCCu1gQgnn4GhaORkgd-b-_NqlEZxeK6bJLPoF0"},
{"content":{"body":"> <@whosy:matrix.org> If I might ask a question to such experienced people, as someone working on their first proposal:\n> \n> How opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?\n> \n> Or am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?\n\nit really depends.  sometimes, especially on very small proposals, it can make sense that a solution has already taken shape.  but stage 0/1 is just about defining the problem and seeing if the committee agrees that exploring solutions to the problem is worthwhile","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@whosy:matrix.org\">@whosy:matrix.org</a><br>If I might ask a question to such experienced people, as someone working on their first proposal:<br/><br/>How opinionated should a proposal be at stage 0? Should it try to be loose and open for many ideas and suggestions from others, or should it try to be more rigorous and concrete already at this stage?<br/><br/>Or am I thinking too much of the solution when I should really focus more effort on the initial problem at this point?</blockquote></mx-reply>it really depends.  sometimes, especially on very small proposals, it can make sense that a solution has already taken shape.  but stage 0/1 is just about defining the problem and seeing if the committee agrees that exploring solutions to the problem is worthwhile","m.mentions":{"user_ids":["@whosy:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EhVA8-0Bt5dNr8IEZfr1B2c4CnZca1uUerErirR48sg"}},"msgtype":"m.text"},"ts":1717101514060,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$TMUChEOsMDugM9TjBfT60GUDzoRLY01fNjVMVJbDv60"},
{"content":{"body":"I appreciate the feedback. The proposal is not exactly complex or controversial and exists in pretty much every other language (methods for generating random numbers, outside just a [0-1) float).\nI think I am just battling my perfectionist side here, and am trying to make things far too complete for where I am in the proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1717101715617,"senderName":"whosy","senderId":"@whosy:matrix.org","id":"$k8tYZ3bSJyXmlqZvExSYNItHsizx5JnFZW6h09aJpZE"},
{"content":{"body":"> <@timotijhof:matrix.org> Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.\n> \n> I also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.\n> \n> If it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).\n\nyeah, it's not the NaN per se (which does indeed get treated as 0). it's the fact that you have three elements `a`, `b`, `c` such that`a = b` and `b = c` but not `a = c` when `b` is the value without an index (because in that case the comparison function will return `NaN` when comparing `b` to either `a` or `c`). this makes it not a consistent comparator and the spec doesn't mandate any particular order here.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$U2f9m0CsWjopwLg51d_21zuJxCSVBAtQM20lIcqvuYU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@timotijhof:matrix.org\">@timotijhof:matrix.org</a><br><p>Hm..  no, result remains different in Chrome/Firefox in the same way with this change applied.</p>\n<p>I also thought at first it was the NaN messing it up. It does seem to play a role, but it's not strictly the presence of NaN. From what I can tell, NaN is for all intends and purposes already treated by all implementations as 0. I haven't checked engine sources, but observationally, this appears to be true.</p>\n<p>If it was that simple, I would imagine a spec change would be less controversial as well to make it so, but from what I can tell, that has effectively been done already (not sure how recent, if recent).</p>\n</blockquote></mx-reply>yeah, it's not the NaN per se (which does indeed get treated as 0). it's the fact that you have three elements <code>a</code>, <code>b</code>, <code>c</code> such that<code>a = b</code> and <code>b = c</code> but not <code>a = c</code> when <code>b</code> is the value without an index (because in that case the comparison function will return <code>NaN</code> when comparing <code>b</code> to either <code>a</code> or <code>c</code>). this makes it not a consistent comparator and the spec doesn't mandate any particular order here.","m.mentions":{"user_ids":["@timotijhof:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$U2f9m0CsWjopwLg51d_21zuJxCSVBAtQM20lIcqvuYU"}},"msgtype":"m.text"},"ts":1717101857363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KuT90PQaWgC31dqoXZQg18i6dalL5mDnq38-lUf95bY"},
{"content":{"body":"it is hard to specify exactly what the order should be when a comparator is not consistent without mandating engines either do a bunch of additional work or implement precisely the same algorithm, neither of which is desirable","m.mentions":{},"msgtype":"m.text"},"ts":1717101898643,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Nr4kt6Wsa927cYLv6gf8IS0F1ERLNXb0IfJ82p75yS8"}
]