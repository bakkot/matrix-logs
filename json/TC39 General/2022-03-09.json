[
{"content":{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","format":"org.matrix.custom.html","formatted_body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/plain"},{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$_iLk88cMoEZ7cb3uaGslgX94Psel7A7TKCqrQjuvX-8"}}},"ts":1646789931117,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$YAw80R2As-6MkGaOiaH9W22FaPhx64i7dPRq9sFZmx0"},
{"content":{"body":"> <@shuyuguo:matrix.org> i... wouldn't put too much weight on content farm articles\n\n * oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_iLk88cMoEZ7cb3uaGslgX94Psel7A7TKCqrQjuvX-8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i... wouldn't put too much weight on content farm articles</blockquote></mx-reply> * oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","m.new_content":{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","format":"org.matrix.custom.html","formatted_body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/plain"},{"body":"oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YAw80R2As-6MkGaOiaH9W22FaPhx64i7dPRq9sFZmx0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> i... wouldn't put too much weight on content farm articles\n\n * oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_iLk88cMoEZ7cb3uaGslgX94Psel7A7TKCqrQjuvX-8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i... wouldn't put too much weight on content farm articles</blockquote></mx-reply> * oh... I though dev.to is a new blogger for programmers. And how people misunderstand the API also give us information about how to improve it","mimetype":"text/html"}]},"ts":1646789942530,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F0qaQNjh5zM5hvag1tRYm9DPyoC-SXQjSoS_41mdjfU"},
{"content":{"body":"dev.to makes me very sad. so much useful content pushed out of the way for incorrect clickbait articles.","msgtype":"m.text","org.matrix.msc1767.text":"dev.to makes me very sad. so much useful content pushed out of the way for incorrect clickbait articles."},"ts":1646799552429,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$l3fPgWIcdzURIFp351UODIr1cXFaYTMXdLo0MYkM4Sc"},
{"content":{"body":"If anybody has a few minutes to do a technical review of https://github.com/mdn/content/pull/13681 that’d be great\n…as far as whether it’s a useful addition to the docs, and accurate","msgtype":"m.text","org.matrix.msc1767.text":"If anybody has a few minutes to do a technical review of https://github.com/mdn/content/pull/13681 that’d be great\n…as far as whether it’s a useful addition to the docs, and accurate"},"ts":1646813246465,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ek4JE6LSeFFfy3fEtAbG60q7UeVWHIZV57ljfQpqrTw"},
{"content":{"body":"comments welcome here or there","msgtype":"m.text","org.matrix.msc1767.text":"comments welcome here or there"},"ts":1646813273620,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$l39tnG7y_lgvEbHgeYVY434_GvGhAnXqpk6nxIw6A0s"},
{"content":{"body":"I'd rather just say \"the sort implementation can vary among engines, so there is no guarantee about the order array elements are compared or how many times `compareFn` is called\"","msgtype":"m.text"},"ts":1646813951803,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dCHWJfETqTgQTObYtglmHEGS5A8VWEac8Xbr1esZiSQ"},
{"content":{"body":"I find mentioning the array length to be confusing, since in the general case sort algorithms are expected to be O(n*log(n)) or O(n²) (regardless of what JS engines do)","msgtype":"m.text"},"ts":1646814070310,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ecMW33fEoS8UHGfXBB7B4rN2oig8SdrGfcPsQb3k_bM"},
{"content":{"body":"* I find mentioning the array length to be confusing, since in the general case sort algorithms are expected to be O(n*log(n)) or O(n²) (regardless of what JS engines do)","m.new_content":{"body":"I find mentioning the array length to be confusing, since in the general case sort algorithms are expected to be O(n*log(n)) or O(n²) (regardless of what JS engines do)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ecMW33fEoS8UHGfXBB7B4rN2oig8SdrGfcPsQb3k_bM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1646814089531,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$x9w2blTBe0nRIeQggubpiiLj3VSTv5qgWpkBnfoc5jY"},
{"content":{"body":"nicolo-ribaudo: thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: thanks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: thanks","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: thanks","mimetype":"text/html"}]},"ts":1646814980959,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$gH7xY4BMzcMute_ZkBOxy0gXojNF9mAGjt9BendOx90"},
{"content":{"body":"so uh","msgtype":"m.text","org.matrix.msc1767.text":"so uh"},"ts":1646853973961,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4sJLtcmPMMRDeUKjAx5gQV535j3Ndz5vkX9HAR3X_G4"},
{"content":{"body":"https://devblogs.microsoft.com/typescript/a-proposal-for-type-syntax-in-javascript/","msgtype":"m.text","org.matrix.msc1767.text":"https://devblogs.microsoft.com/typescript/a-proposal-for-type-syntax-in-javascript/"},"ts":1646853975440,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jlap899XMIHJwqHtjAvPSWmqzn6V5rCQUoPwGJvuaYg"},
{"content":{"body":"i will be very sad if we put type syntax in the language and it doesn't have some sort of reflection capability like python","msgtype":"m.text","org.matrix.msc1767.text":"i will be very sad if we put type syntax in the language and it doesn't have some sort of reflection capability like python"},"ts":1646854030754,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$7z9JZ7NS540rCM8DRpsOLNyYiflJrT7JBrVC48uYSwM"},
{"content":{"body":"I would not regard this as \"putting type syntax in the language\"","msgtype":"m.text","org.matrix.msc1767.text":"I would not regard this as \"putting type syntax in the language\""},"ts":1646854105643,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HAN5ZtXLx5ZmekGmhBEd1GjFknthsLptrVUV5d87y3w"},
{"content":{"body":"it's just adding a dozen new, weird comment forms","msgtype":"m.text","org.matrix.msc1767.text":"it's just adding a dozen new, weird comment forms"},"ts":1646854112662,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uffzY5U25uhz0qnQ4KAtUFfuYPs5tSKYrDiLg4oFMX4"},
{"content":{"body":"personally I am inclined to regard the existing comment forms as adequate","msgtype":"m.text","org.matrix.msc1767.text":"personally I am inclined to regard the existing comment forms as adequate"},"ts":1646854125550,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nzWRh2pFeYkJUF2gK2SqkuRmJjXxnOluJMMZ4nl2dyE"},
{"content":{"body":"yeah calling them comment forms is what makes me sad","msgtype":"m.text","org.matrix.msc1767.text":"yeah calling them comment forms is what makes me sad"},"ts":1646854147092,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$aS-j-GuvK-WcLB9lqyp6hzwoq8WulBFxPvzyjPRhdWM"},
{"content":{"body":"i mean they don't need to be evaluated, python just gives you strings of them","msgtype":"m.text","org.matrix.msc1767.text":"i mean they don't need to be evaluated, python just gives you strings of them"},"ts":1646854242096,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$teei8LtzAYwn-Z5cOjXmJUAuLjuuh59sZBw4s-tpGyg"},
{"content":{"body":"I can't say I've ever used python's type reflection","msgtype":"m.text","org.matrix.msc1767.text":"I can't say I've ever used python's type reflection"},"ts":1646854352480,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CHgWxLo3SJWfnFotArWMvz2mJCJGBtCjIgjk1QPxL3M"},
{"content":{"body":"or, for that kind of types","msgtype":"m.text","org.matrix.msc1767.text":"or, for that kind of types"},"ts":1646854359077,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KmxWmyMIDMgzkOhuNiRdonLJ1tFY0Ffm_fzxZDL3YTc"},
{"content":{"body":"it enables some very cool stuff","msgtype":"m.text","org.matrix.msc1767.text":"it enables some very cool stuff"},"ts":1646854364448,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$32JZxYyoEEd4uNmRkbSHC9z78uudJxYeN-0DF1NkeAU"},
{"content":{"body":"what is the thing you use it for?","msgtype":"m.text","org.matrix.msc1767.text":"what is the thing you use it for?"},"ts":1646854364805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kRMSEXvRHRsUI2kxKDDf1M3L0ZxOzACnJy-rNmJ8sSA"},
{"content":{"body":"for example, `@server.route('/foo') fn get_foo(body: T)`","format":"org.matrix.custom.html","formatted_body":"for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, `@server.route('/foo') fn get_foo(body: T)`","mimetype":"text/plain"},{"body":"for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","mimetype":"text/html"}]},"ts":1646854395387,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$_QsY0PuWnYnkVHpJxSWd7IcCiM8OZQ7gSjd4FlhtHsU"},
{"content":{"body":" * for example, `@server.route('/foo') fn get_foo(body: T)`","format":"org.matrix.custom.html","formatted_body":" * for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","m.new_content":{"body":"for example, `@server.route('/foo') fn get_foo(body: T)`","format":"org.matrix.custom.html","formatted_body":"for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, `@server.route('/foo') fn get_foo(body: T)`","mimetype":"text/plain"},{"body":"for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_QsY0PuWnYnkVHpJxSWd7IcCiM8OZQ7gSjd4FlhtHsU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * for example, `@server.route('/foo') fn get_foo(body: T)`","mimetype":"text/plain"},{"body":" * for example, <code>@server.route('/foo') fn get_foo(body: T)</code>","mimetype":"text/html"}]},"ts":1646854405953,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WFpcqZXGN7ar9UV-N2LoAfsZxAl0U9L0DIaiDDSWDRc"},
{"content":{"body":"server can automatically validate the body against T","msgtype":"m.text","org.matrix.msc1767.text":"server can automatically validate the body against T"},"ts":1646854414699,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DJYhVwAiLh_YzAsXvKYjuGc-y5BcVMvNNRyeaZpDMU8"},
{"content":{"body":"another example i think is very cool is discord.py, which allows you to specify how discord bot commands are parsed, like `def ban_user(user: User)`","format":"org.matrix.custom.html","formatted_body":"another example i think is very cool is discord.py, which allows you to specify how discord bot commands are parsed, like <code>def ban_user(user: User)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"another example i think is very cool is discord.py, which allows you to specify how discord bot commands are parsed, like `def ban_user(user: User)`","mimetype":"text/plain"},{"body":"another example i think is very cool is discord.py, which allows you to specify how discord bot commands are parsed, like <code>def ban_user(user: User)</code>","mimetype":"text/html"}]},"ts":1646854482617,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$z3bDjM0rDtltqoA3zqSNqe2YuHazb_1LSnkmDg3Rfl0"},
{"content":{"body":"i don't think i'd be supportive of having reflection capabilities here","msgtype":"m.text","org.matrix.msc1767.text":"i don't think i'd be supportive of having reflection capabilities here"},"ts":1646854561058,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ryZR4BtGY4EXVx03KHiKvQlu-Lvg51Xr_YeP4wKrgq4"},
{"content":{"body":"the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there's no way it'd be acceptable to parse it and actually keep the info around","msgtype":"m.text","org.matrix.msc1767.text":"the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there's no way it'd be acceptable to parse it and actually keep the info around"},"ts":1646854606240,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ItoXe7kg4XkRCuVqYE5syVcupTNoOfRIUzkd2Zb53kE"},
{"content":{"body":"i really wish we could combine the usefulness of python with the expressiveness of js","msgtype":"m.text","org.matrix.msc1767.text":"i really wish we could combine the usefulness of python with the expressiveness of js"},"ts":1646854607943,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WWvG8u-iolhVJkyTTaInqVQ6tHfU2a0hwlAs2zsKhVU"},
{"content":{"body":"> <@shuyuguo:matrix.org> the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there's no way it'd be acceptable to parse it and actually keep the info around\n\ni think all impls already support lazy parsing for errors, so really it would just be doing a getter of a symbol or something i think.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ItoXe7kg4XkRCuVqYE5syVcupTNoOfRIUzkd2Zb53kE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there&#39;s no way it&#39;d be acceptable to parse it and actually keep the info around</blockquote></mx-reply>i think all impls already support lazy parsing for errors, so really it would just be doing a getter of a symbol or something i think.","m.relates_to":{"m.in_reply_to":{"event_id":"$ItoXe7kg4XkRCuVqYE5syVcupTNoOfRIUzkd2Zb53kE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there's no way it'd be acceptable to parse it and actually keep the info around\n\ni think all impls already support lazy parsing for errors, so really it would just be doing a getter of a symbol or something i think.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ItoXe7kg4XkRCuVqYE5syVcupTNoOfRIUzkd2Zb53kE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>the implementation complexity and runtime costs would be too high -- i can only imagine some kind of reparsing when reflection is actually required, there&#39;s no way it&#39;d be acceptable to parse it and actually keep the info around</blockquote></mx-reply>i think all impls already support lazy parsing for errors, so really it would just be doing a getter of a symbol or something i think.","mimetype":"text/html"}]},"ts":1646854646164,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$H9P91IJdlVyeLWe6ji5BsEielRMDFV-CAI7agHtB1y8"},
{"content":{"body":"basically exactly like how Error.prototype.stack is a lazy property in v8","msgtype":"m.text","org.matrix.msc1767.text":"basically exactly like how Error.prototype.stack is a lazy property in v8"},"ts":1646854818182,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$IIOfQih54bgIEFZG7_WiGeUdNpY1ghb4UB6BwKbsZT4"},
{"content":{"body":"i'm not claiming impossibility, just undesirability","msgtype":"m.text","org.matrix.msc1767.text":"i'm not claiming impossibility, just undesirability"},"ts":1646855025347,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CWMM_WEUvQDDbCZ6_lKTTb1w8XMdV6ZJUMRbSF9jLZw"},
{"content":{"body":"> <@devsnek:matrix.org> basically exactly like how Error.prototype.stack is a lazy property in v8\n\nfwiw unless v8 is willing to make it work eagerly, like everyone else, i doubt we'd be able to standardize stacks","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$IIOfQih54bgIEFZG7_WiGeUdNpY1ghb4UB6BwKbsZT4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>basically exactly like how Error.prototype.stack is a lazy property in v8</blockquote></mx-reply>fwiw unless v8 is willing to make it work eagerly, like everyone else, i doubt we'd be able to standardize stacks","m.relates_to":{"m.in_reply_to":{"event_id":"$IIOfQih54bgIEFZG7_WiGeUdNpY1ghb4UB6BwKbsZT4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> basically exactly like how Error.prototype.stack is a lazy property in v8\n\nfwiw unless v8 is willing to make it work eagerly, like everyone else, i doubt we'd be able to standardize stacks","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$IIOfQih54bgIEFZG7_WiGeUdNpY1ghb4UB6BwKbsZT4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>basically exactly like how Error.prototype.stack is a lazy property in v8</blockquote></mx-reply>fwiw unless v8 is willing to make it work eagerly, like everyone else, i doubt we'd be able to standardize stacks","mimetype":"text/html"}]},"ts":1646859931862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rpj5mIrOnvtWaqoKBJYeJO9huYNU_R8CNgcsQkmtJtE"},
{"content":{"body":"(but the stacks proposal isn't anywhere near close enough to advancing for that to be a discussion point yet)","msgtype":"m.text","org.matrix.msc1767.text":"(but the stacks proposal isn't anywhere near close enough to advancing for that to be a discussion point yet)"},"ts":1646859971995,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YwwbzQUr4Ex6zUvB6SGfDsnUWCiSqy4K3TqboE91o7E"},
{"content":{"body":"wdym eagerly?","msgtype":"m.text","org.matrix.msc1767.text":"wdym eagerly?"},"ts":1646859983604,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$sibnhJGpjfcqh4TRRxahHvgRj0I9GHsW91PEOnmHzaE"},
{"content":{"body":"like generate a stack trace string on new Error() instead of when the .stack property is accessed?","msgtype":"m.text","org.matrix.msc1767.text":"like generate a stack trace string on new Error() instead of when the .stack property is accessed?"},"ts":1646860016729,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$uPTCUBXQJxKAf_zAM1ujm3OIALLbRyKF6qQeMas7oL4"},
{"content":{"body":"correct","msgtype":"m.text","org.matrix.msc1767.text":"correct"},"ts":1646860023765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ORU84lXeTOpQl5qPzU-ura9G2X3R0kE_xh7qndAhDO4"},
{"content":{"body":"i mean it should be invisible to js code","msgtype":"m.text","org.matrix.msc1767.text":"i mean it should be invisible to js code"},"ts":1646860033469,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$itlIubsvHxIFMWj131dFsWHNHErpnsJsEkCd7NhluLc"},
{"content":{"body":"true, if it can be unobservably optimized then obv the proposal/spec wouldn't care :-)","msgtype":"m.text","org.matrix.msc1767.text":"true, if it can be unobservably optimized then obv the proposal/spec wouldn't care :-)"},"ts":1646860047863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XgCjuEpyB3yIX_0Qbswb8XDkrdyIKdUD2bF0je7SdN4"},
{"content":{"body":"i guess its (error instance).stack instead of on the prototype but","msgtype":"m.text","org.matrix.msc1767.text":"i guess its (error instance).stack instead of on the prototype but"},"ts":1646860116712,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$LhZTWY7RHxHdNuw9aWy5f0KskZSZllIT8Wl6VzcpxdU"},
{"content":{"body":"its not a js getter so that should be fine","msgtype":"m.text","org.matrix.msc1767.text":"its not a js getter so that should be fine"},"ts":1646860145142,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$3d4yaxDoZJkvY6R5gJ-DkD9ePrUOQ_3dirS-4BUtIr0"},
{"content":{"body":"its engine magic","msgtype":"m.text","org.matrix.msc1767.text":"its engine magic"},"ts":1646860149907,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Udztqz2zRkV5geOxJAKcGyiLhEs4IOAZS4-l_yYZCbI"},
{"content":{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","format":"org.matrix.custom.html","formatted_body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","mimetype":"text/plain"},{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","mimetype":"text/html"}]},"ts":1646860211808,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gCsRM1vPqydJhlOBUNAsB52Td43v5-LRHjfqXo9j5LM"},
{"content":{"body":" * the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","format":"org.matrix.custom.html","formatted_body":" * the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","m.new_content":{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","format":"org.matrix.custom.html","formatted_body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","mimetype":"text/plain"},{"body":"the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$gCsRM1vPqydJhlOBUNAsB52Td43v5-LRHjfqXo9j5LM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (_not_ an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched \"as if\" they were eagerly generated","mimetype":"text/plain"},{"body":" * the proposal would make it an internal slot, observable via a normative-optional getter on the prototype (<em>not</em> an own property), and also via a static method or two on Error. so it def could be lazily generated as long as the contents matched &quot;as if&quot; they were eagerly generated","mimetype":"text/html"}]},"ts":1646860236589,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bNMsDjH0kBkDYfAMpojTQ3uZMdlnM_lXpqZBr0VljR8"}
]