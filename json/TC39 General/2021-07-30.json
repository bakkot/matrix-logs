[
{"content":{"body":"Domenic: Give at least a little while longer, we're circling towards `do` (and thus `async do`) relatively productively.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: Give at least a little while longer, we're circling towards <code>do</code> (and thus <code>async do</code>) relatively productively.","msgtype":"m.text"},"ts":1627688465153,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$dkiphlPc3-4YJFsTsD4oebeHHbJtwzwXlqyoM6huejI"},
{"content":{"body":"Ah bakkot already said that, tho in a more pessimistic fashion","msgtype":"m.text"},"ts":1627688493626,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$OM8492qleUoXnLIIZoEwVi6bUD-QoFErRTjlwkd67ew"},
{"content":{"body":"anyway","msgtype":"m.text"},"ts":1627688494914,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$kQ84VmuRr36jSsgrE_pQjF6iHLYLjZi1Od7du8p5CUQ"},
{"content":{"body":"In ecmarkup, what does `type=\"abstract operation\"` do, and what is its relationship with the `aoid` attribute?","format":"org.matrix.custom.html","formatted_body":"In ecmarkup, what does <code>type=&quot;abstract operation&quot;</code> do, and what is its relationship with the <code>aoid</code> attribute?","msgtype":"m.text"},"ts":1627688556686,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9q4V12shZlAZZkgnZGmVlzaUGd3-C-QOTl7msMXL7GI"},
{"content":{"body":"Some clauses are annotated, but I can’t find any examples where both occur. I had thought that the point of `aoid` was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where `type=\"abstract operation \"` comes in.","format":"org.matrix.custom.html","formatted_body":"Some clauses are annotated, but I can’t find any examples where both occur. I had thought that the point of <code>aoid</code> was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where <code>type=&quot;abstract operation &quot;</code> comes in.","msgtype":"m.text"},"ts":1627688755462,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tdkyoqMMxdlyL6o6KOIs0R_Wm81zdY08Sz4rX2xpUIU"},
{"content":{"body":"* Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of `aoid` was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where `type=\"abstract operation \"` comes in.","format":"org.matrix.custom.html","formatted_body":"* Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of <code>aoid</code> was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where <code>type=&quot;abstract operation &quot;</code> comes in.","m.new_content":{"body":"Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of `aoid` was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where `type=\"abstract operation \"` comes in.","format":"org.matrix.custom.html","formatted_body":"Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of <code>aoid</code> was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where <code>type=&quot;abstract operation &quot;</code> comes in.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tdkyoqMMxdlyL6o6KOIs0R_Wm81zdY08Sz4rX2xpUIU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1627688766994,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$w4MiifOUuQUV1qZRpjRojrC009HqZaQFgrz8SD4i9aE"},
{"content":{"body":"* Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of `aoid` was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where `type=\"abstract operation\"` comes in.","format":"org.matrix.custom.html","formatted_body":"* Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of <code>aoid</code> was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where <code>type=&quot;abstract operation&quot;</code> comes in.","m.new_content":{"body":"Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of `aoid` was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where `type=\"abstract operation\"` comes in.","format":"org.matrix.custom.html","formatted_body":"Some clauses are annotated with one or the other, but I can’t find any examples where both occur. I had thought that the point of <code>aoid</code> was to mark the clause where an abstract operation gets defined with its name, so that the name could automatically get cross-referenced—but then I don’t know where <code>type=&quot;abstract operation&quot;</code> comes in.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tdkyoqMMxdlyL6o6KOIs0R_Wm81zdY08Sz4rX2xpUIU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1627688789807,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zDW_FaWNXsrMzvJ5dEc3dHqSdNpsm7Sxahb5IhNW3OY"},
{"content":{"body":"Ah, I see, so `type=\"abstract operation\"` automatically generates a paragraph about its parameters…","format":"org.matrix.custom.html","formatted_body":"Ah, I see, so <code>type=&quot;abstract operation&quot;</code> automatically generates a paragraph about its parameters…","msgtype":"m.text"},"ts":1627689192009,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YCpMz7XQCLfRq8iIHKI17G5m1WGmul8Qyywb38Sh0OU"},
{"content":{"body":"* Ah, I see, so `type=\"abstract operation\"` seems to automatically generate a paragraph about its parameters…","format":"org.matrix.custom.html","formatted_body":"* Ah, I see, so <code>type=&quot;abstract operation&quot;</code> seems to automatically generate a paragraph about its parameters…","m.new_content":{"body":"Ah, I see, so `type=\"abstract operation\"` seems to automatically generate a paragraph about its parameters…","format":"org.matrix.custom.html","formatted_body":"Ah, I see, so <code>type=&quot;abstract operation&quot;</code> seems to automatically generate a paragraph about its parameters…","msgtype":"m.text"},"m.relates_to":{"event_id":"$YCpMz7XQCLfRq8iIHKI17G5m1WGmul8Qyywb38Sh0OU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1627689203918,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8vcdUUhP3fVUTiCE_l-Zn-8UWZ8YvvqVsDSPFB94NVA"}
]