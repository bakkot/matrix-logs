[
{"content":{"body":"So in the latest round of JS-is-missing-features discourse, one request that stands out is for Jack Works ‘s Number.range/BigInt.range. I am wondering, how can we move that forward? Is it blocked on anything?","format":"org.matrix.custom.html","formatted_body":"So in the latest round of JS-is-missing-features discourse, one request that stands out is for <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> ‘s Number.range/BigInt.range. I am wondering, how can we move that forward? Is it blocked on anything?","msgtype":"m.text"},"ts":1675736566135,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZX-tWNVgaYj4OxGigQ1rpvNG2KiPaRJt1SQfq7X_S_U"},
{"content":{"body":"I remember we had some kind of debate around how exactly arguments should work but everyone was positive about it IIRC","msgtype":"m.text"},"ts":1675736654590,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_mRcEsoGufOMUKcZylhUPyIn7wx6fTeO7CXmE1EfLf8"},
{"content":{"body":"I think the main blocker was whether the resulting thing should be one-shot or reusable","msgtype":"m.text"},"ts":1675738842202,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HYDO3jqgn4cHZREZpyf3c7-Zlqz9p61SQtH3EyaiRR0"},
{"content":{"body":"and we just need to actually decide","msgtype":"m.text"},"ts":1675738848716,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O9hVZATDFc023Ss8HnS_Sy7UGHNSZOHuInT-LhzA8_Y"},
{"content":{"body":" * I think the main blocker was whether the resulting thing should be one-shot or reusable","m.new_content":{"body":"I think the main blocker was whether the resulting thing should be one-shot or reusable","msgtype":"m.text"},"m.relates_to":{"event_id":"$HYDO3jqgn4cHZREZpyf3c7-Zlqz9p61SQtH3EyaiRR0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675738856236,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L4KHxbdhGsNIkaUy258FdPG1kYmxgNWBYbpy1wDHUyA"},
{"content":{"body":"https://github.com/tc39/proposal-Number.range/issues/17, which is well on its way to being a centithread...","msgtype":"m.text"},"ts":1675738898775,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H0F1_XiW0nalu1zX6xTAJXeqIdZIuJ1Fqh62WRnbQzM"},
{"content":{"body":"indeed i think that's the open question. some iterators are reusable, so one might expect these to be; but most aren't, so one might expect these not to be","msgtype":"m.text"},"ts":1675738969727,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iVPpLdlPEx1zi1LucoOl-NLJA6xBdtx-1KPZYA-2xsM"},
{"content":{"body":"iterators are never reusable, but many iterables are","msgtype":"m.text"},"ts":1675739027700,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pIAV6KL3bWlrUfOTRk3LqIOqcXdAeWnDl3Ct2tVrbzo"},
{"content":{"body":"(iterators being inherently stateful)","msgtype":"m.text"},"ts":1675739050396,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mt-S-pvHOZwx4pCPJs4KUNhtjRr9oqzqvrH2UuQTalU"},
{"content":{"body":"ah right, that's it","msgtype":"m.text"},"ts":1675739066863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qAHO6rrHc5tBSFtwdCpLrRN2m_AqsF6iEia6iyyM3_E"},
{"content":{"body":"from https://twitter.com/tesseralis/status/1622787957261488128, I am actually inspired to do `Math.randomInt()`,  I think","format":"org.matrix.custom.html","formatted_body":"from https://twitter.com/tesseralis/status/1622787957261488128, I am actually inspired to do <code>Math.randomInt()</code>,  I think","msgtype":"m.text"},"ts":1675740084981,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3pCt4_8lb141d4hQGbhUuyTvFgOLITX5KOliFYhyNw8"},
{"content":{"body":"where, I guess, it is overloaded based on whether you pass numbers or bigints (and forbids both)","msgtype":"m.text"},"ts":1675740101729,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u42fEvdMfrWJmpUPvgue3DT5VjbREMl3J1no6BBZ36g"},
{"content":{"body":"or it could be called `randomInRange` or something","format":"org.matrix.custom.html","formatted_body":"or it could be called <code>randomInRange</code> or something","msgtype":"m.text"},"ts":1675740137888,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jaa1vr-cNF-SWNJeQH2m4Ore_ixrwFc0ZfqogriEfxA"},
{"content":{"body":"though, if `Number.range()` gave you a re-usable thing, it could be a class instance with a `.selectRandom()` member...","format":"org.matrix.custom.html","formatted_body":"though, if <code>Number.range()</code> gave you a re-usable thing, it could be a class instance with a <code>.selectRandom()</code> member...","msgtype":"m.text"},"ts":1675740177883,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eBG0u2nvTvIgQe6fedkdm_QkYaXM4tnXciKdRVrCym8"},
{"content":{"body":"(that is mostly a joke, not a design I would seriously pursue)","msgtype":"m.text"},"ts":1675740191446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x9BvZSMEOKdN-fxcuzKD36pUWp72qJ8MRixDm55PKHo"},
{"content":{"body":"`let getRandomItem = array => array[Number.range(array.length).selectRandom()]`","format":"org.matrix.custom.html","formatted_body":"<code>let getRandomItem = array =&gt; array[Number.range(array.length).selectRandom()]</code>","msgtype":"m.text"},"ts":1675740238667,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4shveks_8h_6b70rdXbWA8vrxWiD-nSyFKFBitRhSRU"},
{"content":{"body":"ok hear me out: `for await.concurrent[2] (item of asyncIter) { ... }` to run the body of the for-await concurrently. equivalent to `await asyncIter.map(item => {...}).bufferAhead(2).forEach(() => {})` except that the body of the for-await can still do stuff like `break` and `return` (which prevent further iterations of the loop from starting, though any which have already started still run to the end of the loop body)","format":"org.matrix.custom.html","formatted_body":"ok hear me out: <code>for await.concurrent[2] (item of asyncIter) { ... }</code> to run the body of the for-await concurrently. equivalent to <code>await asyncIter.map(item =&gt; {...}).bufferAhead(2).forEach(() =&gt; {})</code> except that the body of the for-await can still do stuff like <code>break</code> and <code>return</code> (which prevent further iterations of the loop from starting, though any which have already started still run to the end of the loop body)","msgtype":"m.text"},"ts":1675741992131,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Pc-nZmr0xBJuFp1TgwJmGjAia6bxv7EOWmwpmU3jzo"},
{"content":{"body":"> <@bakkot:matrix.org> https://github.com/tc39/proposal-Number.range/issues/17, which is well on its way to being a centithread...\n\nI think I was on the “reusable” side previously but I am now am leaning one shot given what we decided about iterator helpers since then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24H0F1_XiW0nalu1zX6xTAJXeqIdZIuJ1Fqh62WRnbQzM\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>https://github.com/tc39/proposal-Number.range/issues/17, which is well on its way to being a centithread...</blockquote></mx-reply>I think I was on the “reusable” side previously but I am now am leaning one shot given what we decided about iterator helpers since then","m.relates_to":{"m.in_reply_to":{"event_id":"$H0F1_XiW0nalu1zX6xTAJXeqIdZIuJ1Fqh62WRnbQzM"}},"msgtype":"m.text"},"ts":1675742288623,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bSRUjBWExbF_UBg7hQNPwJDZEEo7-yJM14zp_VfJt_w"},
{"content":{"body":"You should be able to use an iterator helper directly on a range ","format":"org.matrix.custom.html","formatted_body":"You should be able to use an iterator helper directly on a range","msgtype":"m.text"},"ts":1675742322130,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rx2x_U6AGT7cuMH6SEScitqjtSDv2_NXuWfYWx-SiFM"}
]