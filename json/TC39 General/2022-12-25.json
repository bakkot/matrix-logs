[
{"content":{"body":"I suppose what I'm asking is which use cases benefit to have deep immutable and/or seamless deep equality in the form of a drop-in replacement of an object/array. It sounds like the react prop object itself is not one of them. I'd argue that option bags themselves are not either.\n\nIn my opinion, either we need to find a way to safely include regular objects and functions in R&T, or we need to accept R&T are not drop-in/transparent replacements and that nested access needs to be explicit.\n\nSimilarly, I don't know which use cases benefit from a seamless === deep equality.\n\nTo be clear, what I'm the most interested in is a way to have immutable, inert (guaranteed not to trigger user code like proxies or getters), and recognizible object-like structures that can contain nested functions and class instances (mutable exits).\nI would prefer for DX if access to the latter was seamless (dot access, destructure, etc) but would be ok requiring an explicit operation, preferably standardized a-la Box.\nI don't care about === equality of these structures, but having a way to explicitly compare shape (excluding of these mutable exits) would be preferable, as well as a somewhat efficient way to get the entries (path, values) of these mutable exits.","msgtype":"m.text"},"ts":1671927938884,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xJhEjH154D-bGS2PyDGUHY_WFgQ4IAN28N22h_QXrY4"}
]