[
{"content":{"body":"I just don't think there is a way in JS to express linear types, which would pretty much be required for any sender opt-in of exclusive use ","msgtype":"m.text"},"ts":1670371210493,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vx8Vsd2Akm7YE9wjWy28nvBK2G_C_lltycM_pAByW4A"},
{"content":{"body":"True.","msgtype":"m.text","org.matrix.msc1767.text":"True."},"ts":1670371236424,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lqDaX5F6AE_ejA6JybhRN7oTZGe4gVRcohjujMHzn7o"},
{"content":{"body":"Are you arguing that detachment is a composition hazard we shouldn’t tolerate?","msgtype":"m.text","org.matrix.msc1767.text":"Are you arguing that detachment is a composition hazard we shouldn’t tolerate?"},"ts":1670371260864,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw"},
{"content":{"body":"Ah you'd need to add an explicit \"detach\" for CoW to make sense, so that the program can express release of the copy before GC can figure that out","msgtype":"m.text"},"ts":1670371305363,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B5sqQaMcmfvtQot1PEqwq0ajaMOTPmY4Th6k_K17PtQ"},
{"content":{"body":"And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.","msgtype":"m.text","org.matrix.msc1767.text":"And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver."},"ts":1670371368156,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc"},
{"content":{"body":"> <@kriskowal:matrix.org> Are you arguing that detachment is a composition hazard we shouldn’t tolerate?\n\nCorrect. The sender would need to somehow opt-in it expect the receiver to temporarily claim a lock ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />Are you arguing that detachment is a composition hazard we shouldn’t tolerate?</blockquote></mx-reply>Correct. The sender would need to somehow opt-in it expect the receiver to temporarily claim a lock","m.relates_to":{"m.in_reply_to":{"event_id":"$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw"}},"msgtype":"m.text"},"ts":1670371371787,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e8WWyN9eyltJzKkiNX0dJiiTHIkqPyeZ8Sq8kvgMWxk"},
{"content":{"body":"Thus `take()`","format":"org.matrix.custom.html","formatted_body":"Thus <code>take()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thus `take()`","mimetype":"text/plain"},{"body":"Thus <code>take()</code>","mimetype":"text/html"}]},"ts":1670371374708,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$w34PCQtbYd-uqqUTmzGEUgho7zOYky7Eyrucknlj7lk"},
{"content":{"body":"Or rather, `give()`","format":"org.matrix.custom.html","formatted_body":"Or rather, <code>give()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or rather, `give()`","mimetype":"text/plain"},{"body":"Or rather, <code>give()</code>","mimetype":"text/html"}]},"ts":1670371391947,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PUdq5YZrV1HrwQS1YDemkZ-LtgAAx8Xh12utLLe2E4g"},
{"content":{"body":"Or rather, `transfer()`? I think I see where this is headed.","format":"org.matrix.custom.html","formatted_body":"Or rather, <code>transfer()</code>? I think I see where this is headed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or rather, `transfer()`? I think I see where this is headed.","mimetype":"text/plain"},{"body":"Or rather, <code>transfer()</code>? I think I see where this is headed.","mimetype":"text/html"}]},"ts":1670371418061,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9Ae85NBrxb_dXIFSI184GljgzkRsqkpHZgryFRuCkLs"},
{"content":{"body":"> <@kriskowal:matrix.org> And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.\n\nIf by view you mean the array buffer, then there's already an API for that: `slice()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.</blockquote></mx-reply>If by view you mean the array buffer, then there's already an API for that: <code>slice()</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc"}},"msgtype":"m.text"},"ts":1670371435004,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kSYqqaEhTwis2S9klSXKVBOKHeFGoohZ2agOpGo26Jo"},
{"content":{"body":"Fair.","msgtype":"m.text","org.matrix.msc1767.text":"Fair."},"ts":1670371454971,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-NwbuZdkJ4sjW9NT820SOJxS9azokZsK27bYkjVZ7YA"},
{"content":{"body":"(for CoW)","msgtype":"m.text"},"ts":1670371455505,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4WkGPpEnrwVRwfuKThEI5vo1URiIZ3w0bGHdP-F0KNY"},
{"content":{"body":"Sorry I'm jumping back and forth between the 2 approaches.","msgtype":"m.text"},"ts":1670371486865,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs"},
{"content":{"body":"Anyway, it seems that CoW is not the way, but I really don't know how to solve all uses cases without it.","msgtype":"m.text"},"ts":1670371529617,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1jIVYyIEUTjtW86u21XSXdp02lUM1505ZFK6wzLVF3c"},
{"content":{"body":"> <@mhofman:matrix.org> Sorry I'm jumping back and forth between the 2 approaches.\n\nYeah, I got lost with `slice()` for CoW because it doesn’t express detachment to the original.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Sorry I&#39;m jumping back and forth between the 2 approaches.</blockquote></mx-reply>Yeah, I got lost with <code>slice()</code> for CoW because it doesn’t express detachment to the original.","m.relates_to":{"m.in_reply_to":{"event_id":"$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Sorry I'm jumping back and forth between the 2 approaches.\n\nYeah, I got lost with `slice()` for CoW because it doesn’t express detachment to the original.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Sorry I&#39;m jumping back and forth between the 2 approaches.</blockquote></mx-reply>Yeah, I got lost with <code>slice()</code> for CoW because it doesn’t express detachment to the original.","mimetype":"text/html"}]},"ts":1670371607234,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$81uQzCMtMmlcIrvAI8xg1Pc2c5Itk6nz-5iJRWe-HBU"},
{"content":{"body":"Ok to summarize:\n\nFor CoW, you'd do: `writer.write(ab);` with `async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }`\n\nFor explicit take you'd have to do something like: `write.write(ab.getTaker())` with `async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }`\n\n`taker()` could only be called once (throws after) and returns both the ab and a `release` function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?\n\nThere's always the risk that the receiver to which you provide the taker will never call release.","format":"org.matrix.custom.html","formatted_body":"<p>Ok to summarize:</p>\n<p>For CoW, you'd do: <code>writer.write(ab);</code> with <code>async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }</code></p>\n<p>For explicit take you'd have to do something like: <code>write.write(ab.getTaker())</code> with <code>async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }</code></p>\n<p><code>taker()</code> could only be called once (throws after) and returns both the ab and a <code>release</code> function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?</p>\n<p>There's always the risk that the receiver to which you provide the taker will never call release.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ok to summarize:\n\nFor CoW, you'd do: `writer.write(ab);` with `async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }`\n\nFor explicit take you'd have to do something like: `write.write(ab.getTaker())` with `async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }`\n\n`taker()` could only be called once (throws after) and returns both the ab and a `release` function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?\n\nThere's always the risk that the receiver to which you provide the taker will never call release.","mimetype":"text/plain"},{"body":"<p>Ok to summarize:</p>\n<p>For CoW, you'd do: <code>writer.write(ab);</code> with <code>async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }</code></p>\n<p>For explicit take you'd have to do something like: <code>write.write(ab.getTaker())</code> with <code>async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }</code></p>\n<p><code>taker()</code> could only be called once (throws after) and returns both the ab and a <code>release</code> function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?</p>\n<p>There's always the risk that the receiver to which you provide the taker will never call release.</p>\n","mimetype":"text/html"}]},"ts":1670372444893,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$c3ik3te6bnF9feM2iDKJOmc7OY4kryBVdzP-xZHHggo"},
{"content":{"body":"That's the only pattern I can imagine right now providing for the explicit/opt-in and guaranteed transfer of use, while still allowing the buffer to be reused.","msgtype":"m.text","org.matrix.msc1767.text":"That's the only pattern I can imagine right now providing for the explicit/opt-in and guaranteed transfer of use, while still allowing the buffer to be reused."},"ts":1670372575100,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$U9BZ6D6mD6PRpGfXjkv7ANMDhxu5mn9BLF3XCFiW60c"},
{"content":{"body":"I think the two-stage getTaker/take pattern works. It could be implemented today if you don't care about releasing it back.","msgtype":"m.text","org.matrix.msc1767.text":"I think the two-stage getTaker/take pattern works. It could be implemented today if you don't care about releasing it back."},"ts":1670376425124,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$hRcEldoFQAIB_w91SS11RjM7tC6mh5SkkJ_30RZEo3g"},
{"content":{"body":"https://gist.github.com/domenic/a9343fa787ba54b4ba3a60882c49cc32#file-zero-copy-mjs","msgtype":"m.text","org.matrix.msc1767.text":"https://gist.github.com/domenic/a9343fa787ba54b4ba3a60882c49cc32#file-zero-copy-mjs"},"ts":1670377070102,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$133sPytOsMTO_DK5OPtFlp32GwcQyj7tDGpNXVBKiao"},
{"content":{"body":"I just fixed a crucial bug, please reload :)","msgtype":"m.text","org.matrix.msc1767.text":"I just fixed a crucial bug, please reload :)"},"ts":1670377530760,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Kw8sAfyXM6PA40oVinYK2CsWRekp91N7XBQKPM29dho"},
{"content":{"body":"You'd still need a mechanism to guarantee the uniqueness of a taker for a given array buffer, and for the take to guarantee the original array buffer gets detached (at least temporarily). For these reasons it cannot currently be done in userland","msgtype":"m.text","org.matrix.msc1767.text":"You'd still need a mechanism to guarantee the uniqueness of a taker for a given array buffer, and for the take to guarantee the original array buffer gets detached (at least temporarily). For these reasons it cannot currently be done in userland"},"ts":1670377578777,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$frJ1x5_5WfrdsYloRTBwF3Fv5NwZjW258i3AB0rdGAk"},
{"content":{"body":"transfer() is that mechanism","msgtype":"m.text","org.matrix.msc1767.text":"transfer() is that mechanism"},"ts":1670377595315,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$siYHx7tBM5XJhxrGSpq2fzrSrt3_BS07EW9ayUn6sMQ"},
{"content":{"body":"Or `structuredClone(ab, { transfer: [ab] })` if you want it literally today","format":"org.matrix.custom.html","formatted_body":"Or <code>structuredClone(ab, { transfer: [ab] })</code> if you want it literally today","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or `structuredClone(ab, { transfer: [ab] })` if you want it literally today","mimetype":"text/plain"},{"body":"Or <code>structuredClone(ab, { transfer: [ab] })</code> if you want it literally today","mimetype":"text/html"}]},"ts":1670377615660,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$yk2Rog6OwQ30pXS3RUsw4SR1e3EAQ0XVtBh6iEBjtHM"},
{"content":{"body":"Oh that's the refresh needed, yes","msgtype":"m.text","org.matrix.msc1767.text":"Oh that's the refresh needed, yes"},"ts":1670377637188,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NMEMwNLIyky0YaFjTWU3at8jN7KbLJrV19GE5oPizMA"},
{"content":{"body":"yeah if we give up on the reusable aspect, transfer would do","msgtype":"m.text","org.matrix.msc1767.text":"yeah if we give up on the reusable aspect, transfer would do"},"ts":1670377656273,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-emy8g9Zv_vhVDCKxco5TCELSLmvb-eukR2pivuIKWs"},
{"content":{"body":"technically we'd still need some kind of brand check to ensure the taker function is actually the thing that implements the right transfer semantics","msgtype":"m.text","org.matrix.msc1767.text":"technically we'd still need some kind of brand check to ensure the taker function is actually the thing that implements the right transfer semantics"},"ts":1670377738481,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2I3ROg4ROif9gGehi-TJgXiJiV9xfZL7Y3Ah6_RAvzc"},
{"content":{"body":"oh `takeOrCopy` does that","format":"org.matrix.custom.html","formatted_body":"oh <code>takeOrCopy</code> does that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh `takeOrCopy` does that","mimetype":"text/plain"},{"body":"oh <code>takeOrCopy</code> does that","mimetype":"text/html"}]},"ts":1670377752436,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0s1R7CnSFy0fOWDkxYUCQ-CC6zOBwIruJY2kTBoGoGE"},
{"content":{"body":"Yeah this needs to be reimplemented in C++ or non-idiomatic first-running JS to actually give the guarantee it claims.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah this needs to be reimplemented in C++ or non-idiomatic first-running JS to actually give the guarantee it claims."},"ts":1670377783359,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$bT4iG9_DckXi0yGaare_z6KUVaQw_ptMVb1dMT6hKsA"},
{"content":{"body":"right, I had read too quickly and missed the `take()` was actually done through `takeOrCopy` which brand checks the taker","format":"org.matrix.custom.html","formatted_body":"right, I had read too quickly and missed the <code>take()</code> was actually done through <code>takeOrCopy</code> which brand checks the taker","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"right, I had read too quickly and missed the `take()` was actually done through `takeOrCopy` which brand checks the taker","mimetype":"text/plain"},{"body":"right, I had read too quickly and missed the <code>take()</code> was actually done through <code>takeOrCopy</code> which brand checks the taker","mimetype":"text/html"}]},"ts":1670377835296,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$56rMr7RHdKsxfbEefcyXBLRo_1kDgIOFin2C2p_zlZU"},
{"content":{"body":"of course that assumes `ArrayBufferTaker.takeOrCopy` is the original, but that's the same constraint for every other JS API","format":"org.matrix.custom.html","formatted_body":"of course that assumes <code>ArrayBufferTaker.takeOrCopy</code> is the original, but that's the same constraint for every other JS API","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"of course that assumes `ArrayBufferTaker.takeOrCopy` is the original, but that's the same constraint for every other JS API","mimetype":"text/plain"},{"body":"of course that assumes <code>ArrayBufferTaker.takeOrCopy</code> is the original, but that's the same constraint for every other JS API","mimetype":"text/html"}]},"ts":1670377878377,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vI7ou9mrifcMQT3hfCVv2SPXnKwfuGFqIOawokZcbmc"},
{"content":{"body":"I think we should still look at a release pattern, which would require changes to the AB internals, as to keep the re-use use cases","msgtype":"m.text","org.matrix.msc1767.text":"I think we should still look at a release pattern, which would require changes to the AB internals, as to keep the re-use use cases"},"ts":1670377987173,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$071RZA8SzSNI-G69i6nmD8TmXKvdkX7WqxFAqnmI-hc"},
{"content":{"body":"Streams would definitely use that. Right now users have to do\n\n```js\nconst { value: newUint8Array } = reader.read(inputUint8Array);\n```\n\nwhere `newUint8Array.buffer !== inputUint8Array.buffer` but they point to the same backing memory. If people didn't have to juggle multiple variables for the same backing memory, that would be nicer.","format":"org.matrix.custom.html","formatted_body":"<p>Streams would definitely use that. Right now users have to do</p>\n<pre><code class=\"language-js\">const { value: newUint8Array } = reader.read(inputUint8Array);\n</code></pre>\n<p>where <code>newUint8Array.buffer !== inputUint8Array.buffer</code> but they point to the same backing memory. If people didn't have to juggle multiple variables for the same backing memory, that would be nicer.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Streams would definitely use that. Right now users have to do\n\n```js\nconst { value: newUint8Array } = reader.read(inputUint8Array);\n```\n\nwhere `newUint8Array.buffer !== inputUint8Array.buffer` but they point to the same backing memory. If people didn't have to juggle multiple variables for the same backing memory, that would be nicer.","mimetype":"text/plain"},{"body":"<p>Streams would definitely use that. Right now users have to do</p>\n<pre><code class=\"language-js\">const { value: newUint8Array } = reader.read(inputUint8Array);\n</code></pre>\n<p>where <code>newUint8Array.buffer !== inputUint8Array.buffer</code> but they point to the same backing memory. If people didn't have to juggle multiple variables for the same backing memory, that would be nicer.</p>\n","mimetype":"text/html"}]},"ts":1670378120539,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$sVi3g-16VAi_gZHLoewq5pXMUC9o75vIRn1W1EQqXUM"},
{"content":{"body":"(`inputUint8Array.buffer` gets detached, with `newUint8Array.buffer` pointing to the same memory, with data read into it from the stream.)","format":"org.matrix.custom.html","formatted_body":"(<code>inputUint8Array.buffer</code> gets detached, with <code>newUint8Array.buffer</code> pointing to the same memory, with data read into it from the stream.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(`inputUint8Array.buffer` gets detached, with `newUint8Array.buffer` pointing to the same memory, with data read into it from the stream.)","mimetype":"text/plain"},{"body":"(<code>inputUint8Array.buffer</code> gets detached, with <code>newUint8Array.buffer</code> pointing to the same memory, with data read into it from the stream.)","mimetype":"text/html"}]},"ts":1670378166879,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$3hhfvvBrIePeZ5X9eXAmTC6WgrWJPfM-NWGETVXWeW8"},
{"content":{"body":"ha I didn't realize the reader did a double transfer","msgtype":"m.text","org.matrix.msc1767.text":"ha I didn't realize the reader did a double transfer"},"ts":1670378436686,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e2yVHyjtVahrfQRCHq6nvLgsQNk6SxKUZI5YDjBjTz4"},
{"content":{"body":"honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees","msgtype":"m.text","org.matrix.msc1767.text":"honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees"},"ts":1670378497135,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qQxpKVmWw_lYiZIwVC21qgD2doAqhBGK9bYuceSD-xo"},
{"content":{"body":" * honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees","m.new_content":{"body":"honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees","msgtype":"m.text","org.matrix.msc1767.text":"honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees"},"m.relates_to":{"event_id":"$qQxpKVmWw_lYiZIwVC21qgD2doAqhBGK9bYuceSD-xo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * honestly I haven't had the opportunity to use the Web streams API yet, but that makes sense to implement the exclusivity guarantees"},"ts":1670378518575,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BAbRNWuVj0Iz1AcdfAXCQSxUZ5s8vdERiYFc6XcGY40"},
{"content":{"body":"If I go to a PR's discussion page and see an entry saying \"jmdyck started a review\" and then \"Pending\" (because apparently I never submitted it), how do I do anything with it now (e.g., submit, cancel, modify)?","msgtype":"m.text","org.matrix.msc1767.text":"If I go to a PR's discussion page and see an entry saying \"jmdyck started a review\" and then \"Pending\" (because apparently I never submitted it), how do I do anything with it now (e.g., submit, cancel, modify)?"},"ts":1670387163829,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Vv73yfl0wGdmCLOhD9sADm8zFg1o4uM2naRPwQSUDW0"},
{"content":{"body":"Never mind, it looks like I can Delete individual comments.","msgtype":"m.text","org.matrix.msc1767.text":"Never mind, it looks like I can Delete individual comments."},"ts":1670387373213,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$a2-wB79vM9yrQCFBHXsq0Lpw6Wk0X47B3IF1b3HEnzo"},
{"content":{"body":"Domenic: it would be nice if that gist had a sentence or two about why it's not as simple as detaching the input","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: it would be nice if that gist had a sentence or two about why it's not as simple as detaching the input","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: it would be nice if that gist had a sentence or two about why it's not as simple as detaching the input","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: it would be nice if that gist had a sentence or two about why it's not as simple as detaching the input","mimetype":"text/html"}]},"ts":1670403837876,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$hpzDzNM8hN-DdbhL7WFH7imL4ozy7YDayjc15Oc8kkA"},
{"content":{"body":"Done","msgtype":"m.text","org.matrix.msc1767.text":"Done"},"ts":1670409452540,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$WN3YWac4qI2G0dB2RSdAJBzYQo-sjSbnGbHlXDv5LVQ"},
{"content":{"body":"Wait, do Web APIs that process the buffer sync also make slices of the buffer?","msgtype":"m.text","org.matrix.msc1767.text":"Wait, do Web APIs that process the buffer sync also make slices of the buffer?"},"ts":1670424866057,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sjrDd_S1th2sORkQfLLJXdNXNwYhkGFyUY1g9sBSQuw"},
{"content":{"body":"Is it only APIs that hold on to the buffer past the current execution?","msgtype":"m.text","org.matrix.msc1767.text":"Is it only APIs that hold on to the buffer past the current execution?"},"ts":1670424880118,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_dmfbgfrPOdkAuXkKsONRSuRxPeagcSXFe0_46pguwU"},
{"content":{"body":"Justin Ridgewell: it depends, if the processing happens in a method call a copy is typically made if the API has [AllowShared] or if the API needs to manipulate the buffer for some reason","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: it depends, if the processing happens in a method call a copy is typically made if the API has [AllowShared] or if the API needs to manipulate the buffer for some reason","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: it depends, if the processing happens in a method call a copy is typically made if the API has [AllowShared] or if the API needs to manipulate the buffer for some reason","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: it depends, if the processing happens in a method call a copy is typically made if the API has [AllowShared] or if the API needs to manipulate the buffer for some reason","mimetype":"text/html"}]},"ts":1670425127367,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$WVBB69cfZzpHHKPwf1AMWcKO2I3RM6-Ev_Xt1Hzq1xA"},
{"content":{"body":"Justin Ridgewell: I recommend looking at Encoding and Fetch for some representative examples","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: I recommend looking at Encoding and Fetch for some representative examples","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: I recommend looking at Encoding and Fetch for some representative examples","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: I recommend looking at Encoding and Fetch for some representative examples","mimetype":"text/html"}]},"ts":1670425196855,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$paH7xUEgrT2ptjmfVoGX0rENb9_cvhzIV5dwcXeA86k"},
{"content":{"body":"There could be an even fancier version of this: many APIs just need a read-only view of the buffer, and only to borrow it for a limited amount of time. We could allow others to also take a simultaneous read-only view as well, or even to do direct read operations if we want to get super fancy.","msgtype":"m.text","org.matrix.msc1767.text":"There could be an even fancier version of this: many APIs just need a read-only view of the buffer, and only to borrow it for a limited amount of time. We could allow others to also take a simultaneous read-only view as well, or even to do direct read operations if we want to get super fancy."},"ts":1670427518495,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KeLPMv6Tnczub-Zxsg3A_tW_9PmGvnLqbixjK1ENa08"},
{"content":{"body":"One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back","msgtype":"m.text","org.matrix.msc1767.text":"One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back"},"ts":1670429885841,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ugcBGREfUGhpwYXNBUr8YuPyXWH4ye7qcpLTTwG7TK0"},
{"content":{"body":" * One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back","m.new_content":{"body":"One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back","msgtype":"m.text","org.matrix.msc1767.text":"One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back"},"m.relates_to":{"event_id":"$ugcBGREfUGhpwYXNBUr8YuPyXWH4ye7qcpLTTwG7TK0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * One issue is that a take of a read-only version in this case shouldn't allow to detach the array buffer, as it'd prevent the sender to get it back"},"ts":1670429896565,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oIBeV6OU-HHLRGxpsRIlSa9SwLtm32gIiDTCKqFw_OM"},
{"content":{"body":"I definitely like the idea of this API. I think I'd prefer to generalize it a bit so it's not tied specifically to ArrayBuffer/ArrayBuffer views only. If a generic concept of a \"transferable\" object were introduced to in the language (of which only ArrayBuffer and TypedArrays would initially be included), then this taker api would work with any transferable that is introduced later or by any objects that other specifications separately define as transferable (https://html.spec.whatwg.org/multipage/structured-data.html#transferable). \n\nTo modify Domenic s example a bit.. it would be something like... `const holder = new TransferableHolder(anyTransferable); const thing = holder.take();`\n\nThe question then becomes what objects are Transferables? We can introduce two new well-known Symbols to address that and the relevant use cases: `Symbol.transfer` and `Symbol.clone`.","format":"org.matrix.custom.html","formatted_body":"<p>I definitely like the idea of this API. I think I'd prefer to generalize it a bit so it's not tied specifically to ArrayBuffer/ArrayBuffer views only. If a generic concept of a &quot;transferable&quot; object were introduced to in the language (of which only ArrayBuffer and TypedArrays would initially be included), then this taker api would work with any transferable that is introduced later or by any objects that other specifications separately define as transferable (https://html.spec.whatwg.org/multipage/structured-data.html#transferable).</p>\n<p>To modify <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> s example a bit.. it would be something like... <code>const holder = new TransferableHolder(anyTransferable); const thing = holder.take();</code></p>\n<p>The question then becomes what objects are Transferables? We can introduce two new well-known Symbols to address that and the relevant use cases: <code>Symbol.transfer</code> and <code>Symbol.clone</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I definitely like the idea of this API. I think I'd prefer to generalize it a bit so it's not tied specifically to ArrayBuffer/ArrayBuffer views only. If a generic concept of a \"transferable\" object were introduced to in the language (of which only ArrayBuffer and TypedArrays would initially be included), then this taker api would work with any transferable that is introduced later or by any objects that other specifications separately define as transferable (https://html.spec.whatwg.org/multipage/structured-data.html#transferable). \n\nTo modify Domenic s example a bit.. it would be something like... `const holder = new TransferableHolder(anyTransferable); const thing = holder.take();`\n\nThe question then becomes what objects are Transferables? We can introduce two new well-known Symbols to address that and the relevant use cases: `Symbol.transfer` and `Symbol.clone`.","mimetype":"text/plain"},{"body":"<p>I definitely like the idea of this API. I think I'd prefer to generalize it a bit so it's not tied specifically to ArrayBuffer/ArrayBuffer views only. If a generic concept of a &quot;transferable&quot; object were introduced to in the language (of which only ArrayBuffer and TypedArrays would initially be included), then this taker api would work with any transferable that is introduced later or by any objects that other specifications separately define as transferable (https://html.spec.whatwg.org/multipage/structured-data.html#transferable).</p>\n<p>To modify <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> s example a bit.. it would be something like... <code>const holder = new TransferableHolder(anyTransferable); const thing = holder.take();</code></p>\n<p>The question then becomes what objects are Transferables? We can introduce two new well-known Symbols to address that and the relevant use cases: <code>Symbol.transfer</code> and <code>Symbol.clone</code>.</p>\n","mimetype":"text/html"}]},"ts":1670430348558,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$FCaFEUn3LJFm4AQgoHgwLB8hh8lbCAqEfR-0SPBxQvU"},
{"content":{"body":"I think more things are transferrable/shareable within an Agent than between Agents","msgtype":"m.text","org.matrix.msc1767.text":"I think more things are transferrable/shareable within an Agent than between Agents"},"ts":1670431485108,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$i2nMwrTABkEdjExlQU1Yj1tY-ocSiOoGAeNdZSnGMxg"},
{"content":{"body":"the Symbol approach is a lot easier if it's within the same memory space","msgtype":"m.text","org.matrix.msc1767.text":"the Symbol approach is a lot easier if it's within the same memory space"},"ts":1670431497788,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BRm08M2vCJdPdjKIpnnVqmoLJNTDlrT7lTIE7OLRGRw"},
{"content":{"body":" * the Symbol approach is a lot easier if it's within the same Agent","m.new_content":{"body":"the Symbol approach is a lot easier if it's within the same Agent","msgtype":"m.text","org.matrix.msc1767.text":"the Symbol approach is a lot easier if it's within the same Agent"},"m.relates_to":{"event_id":"$BRm08M2vCJdPdjKIpnnVqmoLJNTDlrT7lTIE7OLRGRw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the Symbol approach is a lot easier if it's within the same Agent"},"ts":1670431509311,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mvBpOJL2RkBqtkLozK-Bzsnd2Efbn7Yu7jY52RDSWHU"},
{"content":{"body":"From a terminology perspective, given a well-known intrinsic object \"%name%\", if the spec references \"%name.a.b%\", it that ALSO considered to be a \"well-known intrinsic object\" (just like %name%), or it *just* an \"intrinsic object\"? ","format":"org.matrix.custom.html","formatted_body":"From a terminology perspective, given a well-known intrinsic object &quot;%name%&quot;, if the spec references &quot;%name.a.b%&quot;, it that ALSO considered to be a &quot;well-known intrinsic object&quot; (just like %name%), or it <em>just</em> an &quot;intrinsic object&quot;?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"From a terminology perspective, given a well-known intrinsic object \"%name%\", if the spec references \"%name.a.b%\", it that ALSO considered to be a \"well-known intrinsic object\" (just like %name%), or it *just* an \"intrinsic object\"? ","mimetype":"text/plain"},{"body":"From a terminology perspective, given a well-known intrinsic object &quot;%name%&quot;, if the spec references &quot;%name.a.b%&quot;, it that ALSO considered to be a &quot;well-known intrinsic object&quot; (just like %name%), or it <em>just</em> an &quot;intrinsic object&quot;?","mimetype":"text/html"}]},"ts":1670446141703,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$7cSdrqADy7It3ufmmtlB5QCIUDGlNNZi5HE4YkWKuCM"},
{"content":{"body":"Is there an observable difference?","msgtype":"m.text","org.matrix.msc1767.text":"Is there an observable difference?"},"ts":1670446171693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y1z0KqJ9AMT6_16bBGdC7Evcw311R5wJzF_M1q3qDxE"},
{"content":{"body":"I guess that is part of my question, they *also* are unique per realm, but *don't* show up in the well-known intrinsic objects table, so if I were to make an \"exploded table\" of all the referenced items, just want to know whether to refer to them as well-known or not. Perhaps, for example, there is an observable difference somewhere else in the spec that I haven't put together","format":"org.matrix.custom.html","formatted_body":"I guess that is part of my question, they <em>also</em> are unique per realm, but <em>don't</em> show up in the well-known intrinsic objects table, so if I were to make an &quot;exploded table&quot; of all the referenced items, just want to know whether to refer to them as well-known or not. Perhaps, for example, there is an observable difference somewhere else in the spec that I haven't put together","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess that is part of my question, they *also* are unique per realm, but *don't* show up in the well-known intrinsic objects table, so if I were to make an \"exploded table\" of all the referenced items, just want to know whether to refer to them as well-known or not. Perhaps, for example, there is an observable difference somewhere else in the spec that I haven't put together","mimetype":"text/plain"},{"body":"I guess that is part of my question, they <em>also</em> are unique per realm, but <em>don't</em> show up in the well-known intrinsic objects table, so if I were to make an &quot;exploded table&quot; of all the referenced items, just want to know whether to refer to them as well-known or not. Perhaps, for example, there is an observable difference somewhere else in the spec that I haven't put together","mimetype":"text/html"}]},"ts":1670446264752,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$NpP7e1F0SoOxg0og8Ulg0EIh3vLl7IEfQHbkKLjf4CQ"},
{"content":{"body":"tolmasky: technically only the things in the table are well-known, but because of the way the notation is specified now, that distinction doesn't make a difference anymore","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: technically only the things in the table are well-known, but because of the way the notation is specified now, that distinction doesn't make a difference anymore","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tolmasky: technically only the things in the table are well-known, but because of the way the notation is specified now, that distinction doesn't make a difference anymore","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: technically only the things in the table are well-known, but because of the way the notation is specified now, that distinction doesn't make a difference anymore","mimetype":"text/html"}]},"ts":1670446679816,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eM1x2iLbWDYBLRaDsY7BB4C_pK37Pvoy2fCojRliGE8"},
{"content":{"body":"i'd just call them all \"intrinsics\"","msgtype":"m.text","org.matrix.msc1767.text":"i'd just call them all \"intrinsics\""},"ts":1670446691721,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uzIyoTldDk6gP2jzS4Waw-AAe5VsSiW8lkhh4LQCj-4"},
{"content":{"body":"Gotcha, so just to clarify then, \"intrinsics\" are \"built-ins\" referenced in the spec. If there is a built-in in the particular engine that is not referenced in the spec (but otherwise behaves identically, unique copy per realm, etc. etc.), it is *not* an intrinsic","format":"org.matrix.custom.html","formatted_body":"Gotcha, so just to clarify then, &quot;intrinsics&quot; are &quot;built-ins&quot; referenced in the spec. If there is a built-in in the particular engine that is not referenced in the spec (but otherwise behaves identically, unique copy per realm, etc. etc.), it is <em>not</em> an intrinsic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Gotcha, so just to clarify then, \"intrinsics\" are \"built-ins\" referenced in the spec. If there is a built-in in the particular engine that is not referenced in the spec (but otherwise behaves identically, unique copy per realm, etc. etc.), it is *not* an intrinsic","mimetype":"text/plain"},{"body":"Gotcha, so just to clarify then, &quot;intrinsics&quot; are &quot;built-ins&quot; referenced in the spec. If there is a built-in in the particular engine that is not referenced in the spec (but otherwise behaves identically, unique copy per realm, etc. etc.), it is <em>not</em> an intrinsic","mimetype":"text/html"}]},"ts":1670446776038,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$TMEm3BOfb5vuebW0qommyyVipSeALdyrbJvWspv0LZw"},
{"content":{"body":"In other words well-known-intrinsic=intrinsic, but intrinsic!=built-in","msgtype":"m.text","org.matrix.msc1767.text":"In other words well-known-intrinsic=intrinsic, but intrinsic!=built-in"},"ts":1670446794515,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$9tGsvL3ISA0Y42ndQYt3s5yjWReoynhlFEl9znNPfSA"},
{"content":{"body":"what'd you have in mind as an example of one that's not?","msgtype":"m.text","org.matrix.msc1767.text":"what'd you have in mind as an example of one that's not?"},"ts":1670446795997,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qXeP-7YNKvEfiMTpQlJzLk1qioTKCo36hLSFK8ZY0PI"},
{"content":{"body":"every intrinsic is indeed built in","msgtype":"m.text","org.matrix.msc1767.text":"every intrinsic is indeed built in"},"ts":1670446807242,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PkBl4NSwUbqp0erpDlTzgI_GVlI4XlzaMIZaD2Xrj-I"},
{"content":{"body":"but not all built-ins are intrinsic is what i mean","msgtype":"m.text","org.matrix.msc1767.text":"but not all built-ins are intrinsic is what i mean"},"ts":1670446817533,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$vpX7xY-jbWZEqYzFvfgpEHnniCxxX4yACf2wP-NjHag"},
{"content":{"body":"like, if I just write a custom engine and make available global.Francisco = { }, its built-in but not intrinsic","msgtype":"m.text","org.matrix.msc1767.text":"like, if I just write a custom engine and make available global.Francisco = { }, its built-in but not intrinsic"},"ts":1670446835574,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$mI0gyIXFGyCsUhi-ExRxYv6s6xetu61lhow6l6DxKu0"},
{"content":{"body":"Or, if Function.prototype happens to have some custom added property in my custom engine, it also is not intrinsic, despite being built in, and getting a fresh copy in every realm","msgtype":"m.text","org.matrix.msc1767.text":"Or, if Function.prototype happens to have some custom added property in my custom engine, it also is not intrinsic, despite being built in, and getting a fresh copy in every realm"},"ts":1670446894074,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$DWc6A0D_yFSnxWjkX6EA86V-Nl_pPV32TbyjPvRF0XQ"},
{"content":{"body":"In other words, is \"intrinsicness\" meant to represent any properties beyond built-inness, like a \"ECMA seal of official spec approval\" vs. just \"its a thing thats around at the beginning, that gets a custom copy in every realm\"","msgtype":"m.text","org.matrix.msc1767.text":"In other words, is \"intrinsicness\" meant to represent any properties beyond built-inness, like a \"ECMA seal of official spec approval\" vs. just \"its a thing thats around at the beginning, that gets a custom copy in every realm\""},"ts":1670447061539,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$L4dPd0OzV5lMZM4xYfaxdLonyycCd1m7l31T9KwmxwA"},
{"content":{"body":"I usually take “intrinsic” to be short for “intrinsic to a realm”.","msgtype":"m.text","org.matrix.msc1767.text":"I usually take “intrinsic” to be short for “intrinsic to a realm”."},"ts":1670449172496,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JYx0nFNP-T62KBF9RxOCh3o6M9JUvNvjwz3qMx2KSJo"},
{"content":{"body":"MarkM begs a distinction between intrinsics and his own invention of “primordial” that I cannot explain, but the distinction might be germane here.","msgtype":"m.text","org.matrix.msc1767.text":"MarkM begs a distinction between intrinsics and his own invention of “primordial” that I cannot explain, but the distinction might be germane here."},"ts":1670449213415,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QqY3KVBizfxulat2t2xOj4GBBYHBkvkvan7WvJeY4z0"},
{"content":{"body":"tolmasky: i would just say those are different kinds of intrinsics - one's a language intrinsic, and the other is a platform intrinsic","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: i would just say those are different kinds of intrinsics - one's a language intrinsic, and the other is a platform intrinsic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tolmasky: i would just say those are different kinds of intrinsics - one's a language intrinsic, and the other is a platform intrinsic","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: i would just say those are different kinds of intrinsics - one's a language intrinsic, and the other is a platform intrinsic","mimetype":"text/html"}]},"ts":1670450841964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WLYQ1OIERZFLUQs1sdIfhd4R9gmX0WiFFrIfdmTXweQ"},
{"content":{"body":"gotcha","msgtype":"m.text","org.matrix.msc1767.text":"gotcha"},"ts":1670450883721,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$0yyPekPKDGXDZ2kOTnAx3Am_9o59-_XjwmDc4L7yomQ"},
{"content":{"body":"and, not to complicate this further, but intrinsics *can* be values, in the case of the well-known Symbols, which are not \"Objects\"","format":"org.matrix.custom.html","formatted_body":"and, not to complicate this further, but intrinsics <em>can</em> be values, in the case of the well-known Symbols, which are not &quot;Objects&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and, not to complicate this further, but intrinsics *can* be values, in the case of the well-known Symbols, which are not \"Objects\"","mimetype":"text/plain"},{"body":"and, not to complicate this further, but intrinsics <em>can</em> be values, in the case of the well-known Symbols, which are not &quot;Objects&quot;","mimetype":"text/html"}]},"ts":1670450927288,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$ao1xnOQgvJlcSNDblnHSuPwpOMB6KNr8soTc6nIvGkE"},
{"content":{"body":"of course, `Number.MAX_SAFE_INTEGER` is an intrinsic","format":"org.matrix.custom.html","formatted_body":"of course, <code>Number.MAX_SAFE_INTEGER</code> is an intrinsic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"of course, `Number.MAX_SAFE_INTEGER` is an intrinsic","mimetype":"text/plain"},{"body":"of course, <code>Number.MAX_SAFE_INTEGER</code> is an intrinsic","mimetype":"text/html"}]},"ts":1670450947499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ot5kh04RELinvpKM6uvOZUpg9Ri1lQucS1P-vjjEbkk"},
{"content":{"body":"but, there isnt a different \"copy\" of MAX_SAFE_INTEGER across realms (they all have value identity), however, there *are* different copies of the well-known symbols per realm, realm1.Symbol.iterator !== realm2.Symbol.iterator (or ARE they value identical?)","format":"org.matrix.custom.html","formatted_body":"but, there isnt a different &quot;copy&quot; of MAX_SAFE_INTEGER across realms (they all have value identity), however, there <em>are</em> different copies of the well-known symbols per realm, realm1.Symbol.iterator !== realm2.Symbol.iterator (or ARE they value identical?)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but, there isnt a different \"copy\" of MAX_SAFE_INTEGER across realms (they all have value identity), however, there *are* different copies of the well-known symbols per realm, realm1.Symbol.iterator !== realm2.Symbol.iterator (or ARE they value identical?)","mimetype":"text/plain"},{"body":"but, there isnt a different &quot;copy&quot; of MAX_SAFE_INTEGER across realms (they all have value identity), however, there <em>are</em> different copies of the well-known symbols per realm, realm1.Symbol.iterator !== realm2.Symbol.iterator (or ARE they value identical?)","mimetype":"text/html"}]},"ts":1670451004785,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$Fs00PoU3dbmWhtPxLRay0LKibsjZlodmAyQHu1j8jFI"}
]