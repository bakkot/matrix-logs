[
{"content":{"body":"I just don't think there is a way in JS to express linear types, which would pretty much be required for any sender opt-in of exclusive use ","msgtype":"m.text"},"ts":1670371210493,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vx8Vsd2Akm7YE9wjWy28nvBK2G_C_lltycM_pAByW4A"},
{"content":{"body":"True.","msgtype":"m.text","org.matrix.msc1767.text":"True."},"ts":1670371236424,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lqDaX5F6AE_ejA6JybhRN7oTZGe4gVRcohjujMHzn7o"},
{"content":{"body":"Are you arguing that detachment is a composition hazard we shouldn’t tolerate?","msgtype":"m.text","org.matrix.msc1767.text":"Are you arguing that detachment is a composition hazard we shouldn’t tolerate?"},"ts":1670371260864,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw"},
{"content":{"body":"Ah you'd need to add an explicit \"detach\" for CoW to make sense, so that the program can express release of the copy before GC can figure that out","msgtype":"m.text"},"ts":1670371305363,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B5sqQaMcmfvtQot1PEqwq0ajaMOTPmY4Th6k_K17PtQ"},
{"content":{"body":"And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.","msgtype":"m.text","org.matrix.msc1767.text":"And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver."},"ts":1670371368156,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc"},
{"content":{"body":"> <@kriskowal:matrix.org> Are you arguing that detachment is a composition hazard we shouldn’t tolerate?\n\nCorrect. The sender would need to somehow opt-in it expect the receiver to temporarily claim a lock ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />Are you arguing that detachment is a composition hazard we shouldn’t tolerate?</blockquote></mx-reply>Correct. The sender would need to somehow opt-in it expect the receiver to temporarily claim a lock","m.relates_to":{"m.in_reply_to":{"event_id":"$iHGu9AYqHehg1AVqxPU4V72WduZhGD9qwZQbqcoOapw"}},"msgtype":"m.text"},"ts":1670371371787,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e8WWyN9eyltJzKkiNX0dJiiTHIkqPyeZ8Sq8kvgMWxk"},
{"content":{"body":"Thus `take()`","format":"org.matrix.custom.html","formatted_body":"Thus <code>take()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thus `take()`","mimetype":"text/plain"},{"body":"Thus <code>take()</code>","mimetype":"text/html"}]},"ts":1670371374708,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$w34PCQtbYd-uqqUTmzGEUgho7zOYky7Eyrucknlj7lk"},
{"content":{"body":"Or rather, `give()`","format":"org.matrix.custom.html","formatted_body":"Or rather, <code>give()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or rather, `give()`","mimetype":"text/plain"},{"body":"Or rather, <code>give()</code>","mimetype":"text/html"}]},"ts":1670371391947,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PUdq5YZrV1HrwQS1YDemkZ-LtgAAx8Xh12utLLe2E4g"},
{"content":{"body":"Or rather, `transfer()`? I think I see where this is headed.","format":"org.matrix.custom.html","formatted_body":"Or rather, <code>transfer()</code>? I think I see where this is headed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or rather, `transfer()`? I think I see where this is headed.","mimetype":"text/plain"},{"body":"Or rather, <code>transfer()</code>? I think I see where this is headed.","mimetype":"text/html"}]},"ts":1670371418061,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9Ae85NBrxb_dXIFSI184GljgzkRsqkpHZgryFRuCkLs"},
{"content":{"body":"> <@kriskowal:matrix.org> And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.\n\nIf by view you mean the array buffer, then there's already an API for that: `slice()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />And the sender and receiver would need separate views so the sender’s detachment doesn’t break the receiver.</blockquote></mx-reply>If by view you mean the array buffer, then there's already an API for that: <code>slice()</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$WrhMCBp4zuIInrQsNbgk4O8GcqpdLy33NC17d3euxZc"}},"msgtype":"m.text"},"ts":1670371435004,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kSYqqaEhTwis2S9klSXKVBOKHeFGoohZ2agOpGo26Jo"},
{"content":{"body":"Fair.","msgtype":"m.text","org.matrix.msc1767.text":"Fair."},"ts":1670371454971,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-NwbuZdkJ4sjW9NT820SOJxS9azokZsK27bYkjVZ7YA"},
{"content":{"body":"(for CoW)","msgtype":"m.text"},"ts":1670371455505,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4WkGPpEnrwVRwfuKThEI5vo1URiIZ3w0bGHdP-F0KNY"},
{"content":{"body":"Sorry I'm jumping back and forth between the 2 approaches.","msgtype":"m.text"},"ts":1670371486865,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs"},
{"content":{"body":"Anyway, it seems that CoW is not the way, but I really don't know how to solve all uses cases without it.","msgtype":"m.text"},"ts":1670371529617,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1jIVYyIEUTjtW86u21XSXdp02lUM1505ZFK6wzLVF3c"},
{"content":{"body":"> <@mhofman:matrix.org> Sorry I'm jumping back and forth between the 2 approaches.\n\nYeah, I got lost with `slice()` for CoW because it doesn’t express detachment to the original.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Sorry I&#39;m jumping back and forth between the 2 approaches.</blockquote></mx-reply>Yeah, I got lost with <code>slice()</code> for CoW because it doesn’t express detachment to the original.","m.relates_to":{"m.in_reply_to":{"event_id":"$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Sorry I'm jumping back and forth between the 2 approaches.\n\nYeah, I got lost with `slice()` for CoW because it doesn’t express detachment to the original.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$yhWa_I2ZJbX6Quk7yTpwfi7VdEArchIag88edr76FAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Sorry I&#39;m jumping back and forth between the 2 approaches.</blockquote></mx-reply>Yeah, I got lost with <code>slice()</code> for CoW because it doesn’t express detachment to the original.","mimetype":"text/html"}]},"ts":1670371607234,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$81uQzCMtMmlcIrvAI8xg1Pc2c5Itk6nz-5iJRWe-HBU"},
{"content":{"body":"Ok to summarize:\n\nFor CoW, you'd do: `writer.write(ab);` with `async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }`\n\nFor explicit take you'd have to do something like: `write.write(ab.getTaker())` with `async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }`\n\n`taker()` could only be called once (throws after) and returns both the ab and a `release` function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?\n\nThere's always the risk that the receiver to which you provide the taker will never call release.","format":"org.matrix.custom.html","formatted_body":"<p>Ok to summarize:</p>\n<p>For CoW, you'd do: <code>writer.write(ab);</code> with <code>async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }</code></p>\n<p>For explicit take you'd have to do something like: <code>write.write(ab.getTaker())</code> with <code>async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }</code></p>\n<p><code>taker()</code> could only be called once (throws after) and returns both the ab and a <code>release</code> function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?</p>\n<p>There's always the risk that the receiver to which you provide the taker will never call release.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ok to summarize:\n\nFor CoW, you'd do: `writer.write(ab);` with `async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }`\n\nFor explicit take you'd have to do something like: `write.write(ab.getTaker())` with `async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }`\n\n`taker()` could only be called once (throws after) and returns both the ab and a `release` function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?\n\nThere's always the risk that the receiver to which you provide the taker will never call release.","mimetype":"text/plain"},{"body":"<p>Ok to summarize:</p>\n<p>For CoW, you'd do: <code>writer.write(ab);</code> with <code>async write (ab) { const copy = ab.slice(0); try { await doWrite(copy); } finally { copy.detach() } }</code></p>\n<p>For explicit take you'd have to do something like: <code>write.write(ab.getTaker())</code> with <code>async write (taker) { const [ab, release] = taker(); try { await doWrite(ab); } finally { release(); } }</code></p>\n<p><code>taker()</code> could only be called once (throws after) and returns both the ab and a <code>release</code> function, which once called restore the state of the original array buffer instance. I guess we could imagine different modes for the taker. For example readonly would yield a readonly buffer and put the original buffer in read-only mode, which means they could be the same object. A write mode would yield a mutable buffer, putting the original buffer in read-only mode?</p>\n<p>There's always the risk that the receiver to which you provide the taker will never call release.</p>\n","mimetype":"text/html"}]},"ts":1670372444893,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$c3ik3te6bnF9feM2iDKJOmc7OY4kryBVdzP-xZHHggo"},
{"content":{"body":"That's the only pattern I can imagine right now providing for the explicit/opt-in and guaranteed transfer of use, while still allowing the buffer to be reused.","msgtype":"m.text","org.matrix.msc1767.text":"That's the only pattern I can imagine right now providing for the explicit/opt-in and guaranteed transfer of use, while still allowing the buffer to be reused."},"ts":1670372575100,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$U9BZ6D6mD6PRpGfXjkv7ANMDhxu5mn9BLF3XCFiW60c"}
]