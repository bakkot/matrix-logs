[
{"content":{"body":"We have a 262 issue for that","msgtype":"m.text"},"ts":1639700064733,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DD5uVew-MuazR_7Uz-MDk74m6-WY71DFmlyBXfW5oBY"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/1849","msgtype":"m.text"},"ts":1639700090538,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$V0j4QDOLIq5m6L5PiXpgl1TQZUV-Zv6Bl2cWSbClMzI"},
{"content":{"body":"Looks like you and I arrived at the same conclusion","msgtype":"m.text"},"ts":1639700222503,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$86Ywh7nl67MbPZWUbyuVzbr17ke4fhOd-_V_U5G8OrY"},
{"content":{"body":"Lol, yah down to the step number","msgtype":"m.text"},"ts":1639700312805,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0UsrjIOXyqmVWHTZijuGMT7ORiFXGTZ6WI1FzYOdIV4"},
{"content":{"body":"Actually rejecting the capability wouldn't close the sync iterator, would it? That's the problem today, the rejection flows into the promise capability, and into the consumer of the async iterator, which then quarantines the async iterator","msgtype":"m.text"},"ts":1639700571983,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mV-2JXjtBWv3R6V-Wm8BVp4tdki-xjiwk5uOvmPQ_Lw"},
{"content":{"body":"It should, given a `throw` will close via the `IfAbruptRejectPromise`, which just calls `capability.[[Reject]]`","format":"org.matrix.custom.html","formatted_body":"It should, given a <code>throw</code> will close via the <code>IfAbruptRejectPromise</code>, which just calls <code>capability.[[Reject]]</code>","msgtype":"m.text"},"ts":1639702745486,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NaWsW4vSmV3Uz5JTz_K7dp6UzMw6nWR1fBI2iqDkqIw"},
{"content":{"body":"I don't see it","msgtype":"m.text"},"ts":1639702942843,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zlLyXOdNSLV5UpzgLudRW9vbkcUVFVquhFl4V7Id3as"},
{"content":{"body":"I don't see anything that will close the `syncIterator` if the `promiseCapability` is rejected. For that matter, the `syncIterator` is not given to `AsyncFromSyncIteratorContinuation`, so it wouldn't have a way to do it.","format":"org.matrix.custom.html","formatted_body":"I don't see anything that will close the <code>syncIterator</code> if the <code>promiseCapability</code> is rejected. For that matter, the <code>syncIterator</code> is not given to <code>AsyncFromSyncIteratorContinuation</code>, so it wouldn't have a way to do it.","msgtype":"m.text"},"ts":1639703265326,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EF28Cq7q6YB_02QvxfPpIhQ9o9nn6VtcR1XLIpDh66U"},
{"content":{"body":"it'd have to be plumbed through as an optional 3rd argument in the case of `next`, as `return` and `throw` already close the `syncIterator` by definition","format":"org.matrix.custom.html","formatted_body":"it'd have to be plumbed through as an optional 3rd argument in the case of <code>next</code>, as <code>return</code> and <code>throw</code> already close the <code>syncIterator</code> by definition","msgtype":"m.text"},"ts":1639703345752,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xt66mpSoI94IB-6xBKCN0_I3oGOkWUGchCK7XvpxIfc"},
{"content":{"body":"Let me try digging in again","msgtype":"m.text"},"ts":1639703814064,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8XD6JDhyoLMt1PHlNXE9fZvUiKse172mwf6t8n-KqHI"},
{"content":{"body":"https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.next","msgtype":"m.text"},"ts":1639704081255,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ywqx1uG_pSkjCfVrCmMBxw9IbejahbygFUbXBX8GYqY"},
{"content":{"body":"Step 6.a gets the `sync.next()` value","format":"org.matrix.custom.html","formatted_body":"Step 6.a gets the <code>sync.next()</code> value","msgtype":"m.text"},"ts":1639704095986,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JzDLnP31zT6tBVWVI1bqgHToRhmR7gGZQCma5cN2nzk"},
{"content":{"body":"it gets the result, aka `{value: Promise, done: boolean}`","format":"org.matrix.custom.html","formatted_body":"it gets the result, aka <code>{value: Promise, done: boolean}</code>","msgtype":"m.text"},"ts":1639704157605,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y8uBot0PYxr9kg6_dFQbm8GIYpazQHSM_jQYu5KRz4g"},
{"content":{"body":"Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":"Which gets us an <code>{ value, done }</code> value","msgtype":"m.text"},"ts":1639704162386,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$B6jOTs_oShC61g84L9vttp6QpRpYOIz1HFxFJWsiO5g"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1639704163090,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GTSAPQo3sjnLGsW3jziL1LA6bZYe1rY8jNFxI0qaV2w"},
{"content":{"body":"Now, `done` doesn't really matter","format":"org.matrix.custom.html","formatted_body":"Now, <code>done</code> doesn't really matter","msgtype":"m.text"},"ts":1639704182679,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Cn92qACbFOyE3ABGm-4VdB05OCHWDbhwQFf2n_0Q2I0"},
{"content":{"body":" * Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":" * Which gets us an <code>{ value, done }</code> value","m.new_content":{"body":"Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":"Which gets us an <code>{ value, done }</code> value","msgtype":"m.text"},"m.relates_to":{"event_id":"$B6jOTs_oShC61g84L9vttp6QpRpYOIz1HFxFJWsiO5g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704195454,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WqPG5a4ozUCXvZIFuLJ7vXMbq-j4oh-xbKnuDcolj4g"},
{"content":{"body":"But we get the `value`","format":"org.matrix.custom.html","formatted_body":"But we get the <code>value</code>","msgtype":"m.text"},"ts":1639704202244,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0gG-efOuZwOtIYKiPHKcKRGM9gYKhmSwOp-Ff4fhPvA"},
{"content":{"body":"In https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation","msgtype":"m.text"},"ts":1639704213046,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$funK_4g_nhD_VYpneoDbcDPVbznANg8THHIIuW1EWw4"},
{"content":{"body":"The promise itself is received as a normal completion, but it's either rejected or will reject","msgtype":"m.text"},"ts":1639704252186,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ipsG3_AGw0gXMVCvrvmK0LyrRQSoJZX3NQ38XW3738E"},
{"content":{"body":"and from what I understand `AsyncFromSyncIteratorContinuation` grabs `done` and `value` from the result, awaits the `value` and resolves a promise with `{done, value: awaitedValue}`","format":"org.matrix.custom.html","formatted_body":"and from what I understand <code>AsyncFromSyncIteratorContinuation</code> grabs <code>done</code> and <code>value</code> from the result, awaits the <code>value</code> and resolves a promise with <code>{done, value: awaitedValue}</code>","msgtype":"m.text"},"ts":1639704273641,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3roK1Uql8q5QtnnldoHK8PbuUKqm3rCTAQgJwuzSCWA"},
{"content":{"body":"If we pass `capibility.[[Reject]]` to `PerformPromiseThen`, then it'll eventually call that reject","format":"org.matrix.custom.html","formatted_body":"If we pass <code>capibility.[[Reject]]</code> to <code>PerformPromiseThen</code>, then it'll eventually call that reject","msgtype":"m.text"},"ts":1639704310206,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9ceuYg4tLgEZo8joSZgW9ztxgZn_U7gjnCw4uacG3Kg"},
{"content":{"body":"if the await throws, it rejects the promise, but the `syncIterator` is not touched anymore","format":"org.matrix.custom.html","formatted_body":"if the await throws, it rejects the promise, but the <code>syncIterator</code> is not touched anymore","msgtype":"m.text"},"ts":1639704324906,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$6fzXu0tfCJWL8QGYMLry_kqb5Bhv0Ogfh-ZldQDf46I"},
{"content":{"body":"There's a close step","msgtype":"m.text"},"ts":1639704337877,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FWhekYaQpxiU2mhJCAagR8zgvpr9kwv8Tu4DbjhGgTQ"},
{"content":{"body":"right but rejecting the promise does nothing besides giving a rejected promise to the async iterator consumer","msgtype":"m.text"},"ts":1639704365541,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cm-V9u2QgooJbw5FWpOxRmyCh1NidFl4txEFrNRTl6Y"},
{"content":{"body":"one fix to this would be to add a handler to `valueWrapper` which closes the iterator, though that seems kinda silly","format":"org.matrix.custom.html","formatted_body":"one fix to this would be to add a handler to <code>valueWrapper</code> which closes the iterator, though that seems kinda silly","msgtype":"m.text"},"ts":1639704441987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B5tr_FZUzSfATGw9I1tye4s4o1b5XXmdlw23AqzZ4bw"},
{"content":{"body":"aye that's what I'm arguing we need to do","msgtype":"m.text"},"ts":1639704456528,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Xn7KalGwT-Cq6vFT0qWJUdbmSLhKEgqfoGAeQq167oU"},
{"content":{"body":"another fix is to have for-await-of explicitly coordinate with the wrapper, which seems kinda painful","msgtype":"m.text"},"ts":1639704460939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1Z7pWBlvRHj5xrWplH_naiZRoYlzGrYih5R1qSZ4l2o"},
{"content":{"body":"why is it silly ?","msgtype":"m.text"},"ts":1639704474892,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nZj8FD_7QjtXY0yqmLCbj2PvP48U9S97AjQSRJquBWs"},
{"content":{"body":"what we have right now is basically the wrapper not cleaning up after itself","msgtype":"m.text"},"ts":1639704492761,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mNjO3kTEaMcXG3X5b06YromfPFtqPjls7ATEFmMkM40"},
{"content":{"body":"because we'd be unwrapping the promise twice","msgtype":"m.text"},"ts":1639704508770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YFvgaaL8wWr48sGXPWLu-ctCq3Ez4ePCfo4IGqFF9wQ"},
{"content":{"body":"it missed a `try-catch` when `await`ing the value","format":"org.matrix.custom.html","formatted_body":"it missed a <code>try-catch</code> when <code>await</code>ing the value","msgtype":"m.text"},"ts":1639704515561,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zpgH1pA0Fzj83hm8pxzAs7kvRKvpWLwuKPFik_n-7Kc"},
{"content":{"body":"how so, the 3rd argument in step 10 does nothing right now, instead it needs to cleanup and passthrough the error","msgtype":"m.text"},"ts":1639704557808,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zbomVQvXVWWAemLmCQgrjtw-PGhtrRsDX-yRqYxsPKI"},
{"content":{"body":"yeah, that's fair","msgtype":"m.text"},"ts":1639704568712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ePaXbIyRKOgd9sw3Um2uLZBqIdlTlc6WYvhkhZh11CU"},
{"content":{"body":" * it missed a `try-catch` when `await`ing the value","format":"org.matrix.custom.html","formatted_body":" * it missed a <code>try-catch</code> when <code>await</code>ing the value","m.new_content":{"body":"it missed a `try-catch` when `await`ing the value","format":"org.matrix.custom.html","formatted_body":"it missed a <code>try-catch</code> when <code>await</code>ing the value","msgtype":"m.text"},"m.relates_to":{"event_id":"$zpgH1pA0Fzj83hm8pxzAs7kvRKvpWLwuKPFik_n-7Kc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704578821,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ar8C1EGQWh3ypa0t0CN0NfVnDPckFz1m7BDa6FCNyrs"},
{"content":{"body":"not really unwrapping it twice so much as handling both branches","msgtype":"m.text"},"ts":1639704585795,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TUDTTKHu6_vAwQdslHURs9Sm_mZ2t9fwRTonGdO_ytI"},
{"content":{"body":"sgtm, needs-consensus PRs welcome","msgtype":"m.text"},"ts":1639704599045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$baf30CGMXwElH7K9RH4cymzHZ1Noh4cUPFPPOiwA6aE"},
{"content":{"body":"It's up the chain a bit","msgtype":"m.text"},"ts":1639704762548,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$llGirbC7my_2fPFp2O8kLhTA9QOa5WJm72Y3dsjLcXQ"},
{"content":{"body":"https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset","msgtype":"m.text"},"ts":1639704771804,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jCUzU-PEfsVi7WagiKTSmnlA2pUpETmDz5qqyzahV4M"},
{"content":{"body":"This is the thing that runs `for await (…)`","format":"org.matrix.custom.html","formatted_body":"This is the thing that runs <code>for await (…)</code>","msgtype":"m.text"},"ts":1639704785174,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KtsmOxraoRPp09PNkjSPUpMujYIhDZA_UDXyIekDTqE"},
{"content":{"body":"For us, `iteratorRecord` is the wrapped asyncSync iterable, `iterationKind` is `iterate`, and `iteratorKind` is `async`","format":"org.matrix.custom.html","formatted_body":"For us, <code>iteratorRecord</code> is the wrapped asyncSync iterable, <code>iterationKind</code> is <code>iterate</code>, and <code>iteratorKind</code> is <code>async</code>","msgtype":"m.text"},"ts":1639704842422,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z4c8I2slKxw0nzKZFohdAAcXT3BSt_4tOZ5eb9qfuyA"},
{"content":{"body":" * For us, `iteratorRecord` is the wrapped asyncSync iterable, and `iteratorKind` is `iterate`","format":"org.matrix.custom.html","formatted_body":" * For us, <code>iteratorRecord</code> is the wrapped asyncSync iterable, and <code>iteratorKind</code> is <code>iterate</code>","m.new_content":{"body":"For us, `iteratorRecord` is the wrapped asyncSync iterable, and `iteratorKind` is `iterate`","format":"org.matrix.custom.html","formatted_body":"For us, <code>iteratorRecord</code> is the wrapped asyncSync iterable, and <code>iteratorKind</code> is <code>iterate</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Z4c8I2slKxw0nzKZFohdAAcXT3BSt_4tOZ5eb9qfuyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704871113,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$500o7eaeFhYtao8u-qpyjqJY4F-Z4zfQM0Ty9ZUwZYs"},
{"content":{"body":" * For us, `iteratorRecord` is the wrapped asyncSync iterable, `iterationKind` is `iterate`, and `iteratorKind` is `async`","format":"org.matrix.custom.html","formatted_body":" * For us, <code>iteratorRecord</code> is the wrapped asyncSync iterable, <code>iterationKind</code> is <code>iterate</code>, and <code>iteratorKind</code> is <code>async</code>","m.new_content":{"body":"For us, `iteratorRecord` is the wrapped asyncSync iterable, `iterationKind` is `iterate`, and `iteratorKind` is `async`","format":"org.matrix.custom.html","formatted_body":"For us, <code>iteratorRecord</code> is the wrapped asyncSync iterable, <code>iterationKind</code> is <code>iterate</code>, and <code>iteratorKind</code> is <code>async</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Z4c8I2slKxw0nzKZFohdAAcXT3BSt_4tOZ5eb9qfuyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704892393,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yHsP2qbaMF28Ieqnm7pTD0fUjJsdFDA5u4FACgOLGJQ"},
{"content":{"body":"Step 6.b says \"If iteratorKind is async, set nextResult to ? Await(nextResult).\"","msgtype":"m.text"},"ts":1639704924775,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fYVcmL6GBo9kZEQYIYSC8HTGx7KBwQt3eeEpDa6jSTk"},
{"content":{"body":"ForIn/OfBodyEvaluation isn't really in a position to handle the issue, because it can't tell the difference between an async iterator which threw and a sync iterator which returned a rejected promise","msgtype":"m.text"},"ts":1639704932845,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tNdZgua6JQCnOVIhh3vOxviAiC9HCsxaD_H1R6oc49E"},
{"content":{"body":"Step 6.\n> b. If iteratorKind is async, set nextResult to ? Await(nextResult).\n> c. If Type(nextResult) is not Object, throw a TypeError exception.\n\nThere is no cleanup of the iterator","format":"org.matrix.custom.html","formatted_body":"<p>Step 6.</p>\n<blockquote>\n<p>b. If iteratorKind is async, set nextResult to ? Await(nextResult).<br>c. If Type(nextResult) is not Object, throw a TypeError exception.</p>\n</blockquote>\n<p>There is no cleanup of the iterator</p>\n","msgtype":"m.text"},"ts":1639704937980,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aM5GdFtTepVhrY87xWd6vFKvtQpAS-vAU294-MPLlIA"},
{"content":{"body":"it's the wrapper which has to deal with it","msgtype":"m.text"},"ts":1639704938543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mnVOfAYCZpZ-dKLWJybmRkoNbDRvMs3hIYpx4QXW82E"},
{"content":{"body":" * Step 6.\n> b. If iteratorKind is async, set nextResult to ? Await(nextResult).\n> c. If Type(nextResult) is not Object, throw a TypeError exception.\n\nThere is no cleanup of the iterator","format":"org.matrix.custom.html","formatted_body":" * <p>Step 6.</p>\n<blockquote>\n<p>b. If iteratorKind is async, set nextResult to ? Await(nextResult).<br>c. If Type(nextResult) is not Object, throw a TypeError exception.</p>\n</blockquote>\n<p>There is no cleanup of the iterator</p>\n","m.new_content":{"body":"Step 6.\n> b. If iteratorKind is async, set nextResult to ? Await(nextResult).\n> c. If Type(nextResult) is not Object, throw a TypeError exception.\n\nThere is no cleanup of the iterator","format":"org.matrix.custom.html","formatted_body":"<p>Step 6.</p>\n<blockquote>\n<p>b. If iteratorKind is async, set nextResult to ? Await(nextResult).<br>c. If Type(nextResult) is not Object, throw a TypeError exception.</p>\n</blockquote>\n<p>There is no cleanup of the iterator</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$aM5GdFtTepVhrY87xWd6vFKvtQpAS-vAU294-MPLlIA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704951822,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$HTMibvQMlgd0lDMFn6XtPPJFHM_Nq4zF6W5SYxaKsM4"},
{"content":{"body":"We can't make those different cases","msgtype":"m.text"},"ts":1639704975156,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$X89xy3b0VfMNkwq0dEOLt2tH8d-U2D8nhkU1rR7z8_M"},
{"content":{"body":"Which?","msgtype":"m.text"},"ts":1639704996219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8u9icwI0hTfVdnbRTHYYC5DSveE9sHPHGp_A8suODqw"},
{"content":{"body":"I agree we can't make `ForIn/OfBodyEvaluation` differentiate","format":"org.matrix.custom.html","formatted_body":"I agree we can't make <code>ForIn/OfBodyEvaluation</code> differentiate","msgtype":"m.text"},"ts":1639705003320,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zywOBl2A5PSUdbURMRnhjcMvXV0JAetzZVMLOL0iaFM"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/1849#issuecomment-584961565","msgtype":"m.text"},"ts":1639705005194,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hQk7XjdxX1zAJfi7GaDfnWitB6spST-yjTLYa9QcHG4"},
{"content":{"body":"They should both be calling the cleanup function","msgtype":"m.text"},"ts":1639705029357,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mWoKv9gUj0inbJVhfjqq7kCuvCaM1lC8CfIQVe5ZoEw"},
{"content":{"body":"no, neither of them should be","msgtype":"m.text"},"ts":1639705040088,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kSNKMjbQlqEaYXn399Vn5gz3lhoGdnxhP6g3wIUTwRA"},
{"content":{"body":"_the wrapper_ should do be calling cleanup when its underlying iterator returns a promise which rejects","format":"org.matrix.custom.html","formatted_body":"<em>the wrapper</em> should do be calling cleanup when its underlying iterator returns a promise which rejects","msgtype":"m.text"},"ts":1639705059957,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cqH4XTf0F8wJJeJ8MnKr3mMxCfl5uknW6B4BXAt6m5Y"},
{"content":{"body":"iterator throw / reject on `next` exits the iteration abruptly","format":"org.matrix.custom.html","formatted_body":"iterator throw / reject on <code>next</code> exits the iteration abruptly","msgtype":"m.text"},"ts":1639705066756,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MgTJ5zY7zBKGWusSSIz1OkIyhZB-oWeT4o-YMVL5_aw"},
{"content":{"body":"because at that point it's going to stop iterating the underlying iterator","msgtype":"m.text"},"ts":1639705068363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wMpqGzqqlD9eHtLqyyIY1Um8AsNSyyVOHkPMXPBFFcA"},
{"content":{"body":"and when you stop iterating over a well-behaved iterator, you close it","msgtype":"m.text"},"ts":1639705095836,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rWP_m_XhR2QGHSoRPEvBTcRVtct3B4CJ5G7vCA9bHDg"},
{"content":{"body":"cf https://github.com/tc39/rationale/issues/2","msgtype":"m.text"},"ts":1639705096951,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w7Nlgrww6mQNX2cdAWu1fjKujr6h7SZKVtnSW3qDBAo"},
{"content":{"body":"from ForIn/OfBodyEvaluation's point of view, the thing being iterated is not well-behaved, because its next method returned a promise which rejects","msgtype":"m.text"},"ts":1639705137705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hGTe-6uUWocS9yULyJc-0eSmR1IvzxFL4rGDLEwzpmQ"},
{"content":{"body":"so ForIn/OfBodyEvaluation should not be doing any cleanup","msgtype":"m.text"},"ts":1639705144614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jmtsFIHmwMilYpOjLQKHxeo6DiRQXX-Pc30v7VWOh1k"},
{"content":{"body":"I disagree","msgtype":"m.text"},"ts":1639705165564,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TTBMbbz9XST07YGio3E0zp2_h6zNf4Idzwm0e1-NIGk"},
{"content":{"body":"Which with part?","msgtype":"m.text"},"ts":1639705173362,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kTki3tuDaWYz_1CrG14s7F6SfYXLAdCgxRKg4QYtvcU"},
{"content":{"body":"Non-well behaved iterators should cleanup","msgtype":"m.text"},"ts":1639705188080,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2SpWMTT4ByKK_9tEEUdiTvv25trdRDTn3FiZiIE7MmI"},
{"content":{"body":"Well, they don't, anywhere","msgtype":"m.text"},"ts":1639705194693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$juUw4tm4aOpGrl7CeIb2xZIKjgOg0kD0J-AgRJ_7ErA"},
{"content":{"body":"If my iterator throws, it needs to clean up","msgtype":"m.text"},"ts":1639705198159,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZbBBBZV2LaqM86qT8MlnhfEMNNuMHZ53KMHkYsRF8-Y"},
{"content":{"body":"if your iterator throws, it can do the cleanup itself","msgtype":"m.text"},"ts":1639705206868,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7Jiy8GLQ8IDvbwsvN0fX0FEU-4WA5klMW14vqz0WQkA"},
{"content":{"body":"we only ever call IteratorClose when we stop iterating for reasons which the iterator could not have known","msgtype":"m.text"},"ts":1639705252255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JRVuGHOkT-F8Rmpu6bEWn-e9hFwegeWfXv1UtLvdG68"},
{"content":{"body":"e.g. breaking out of a loop, etc","msgtype":"m.text"},"ts":1639705259601,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QAnipjVKsanA_D06CunvD9TgVq2T95tzrw6-a11qIGg"},
{"content":{"body":"yeah even I was surprised at first, I agree the behavior on broken iterators make sense, and it'd be impossible to change it. Here however it's the wrapper that's not well behaved by not cleaning up when the consumer would think the wrapper itself is misbehaved for throwing","msgtype":"m.text"},"ts":1639705299876,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1R6gYWOBstsBwujn_gCRC1W9hiNp1T-isYWaOaorvwE"},
{"content":{"body":"if the iterator itself is saying that it is done, then it's the iterator's responsibility to do the cleanup","msgtype":"m.text"},"ts":1639705299920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u26wLc8vszNaTkdS21QzP8gYSsBjz0BerhXC66CZ2Xk"},
{"content":{"body":"Ok, I think we're talking about two separate things now","msgtype":"m.text"},"ts":1639705346497,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VMYpoi11N8ffwcNrRFpOn19GgrXopo7NytZKuNqiOhs"},
{"content":{"body":"The async wrapper is stopping iteration","msgtype":"m.text"},"ts":1639705372789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$h-52eIgxAj4F8nDSvYjMa49yxaRZVbiLQ8OTR-0BBec"},
{"content":{"body":"The underlying sync iterator didn't do anything wrong","msgtype":"m.text"},"ts":1639705384183,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$x69t4s-jY0rIQ5_TNXGk-8nzzbYW4laghcTKNqSjyUc"},
{"content":{"body":" * yeah even I was surprised at first, I agree the behavior on broken iterators make sense, and it'd be impossible to change it. Here however it's the wrapper that's not well behaved by not cleaning up when the consumer would think the wrapper itself is misbehaved for throwing","m.new_content":{"body":"yeah even I was surprised at first, I agree the behavior on broken iterators make sense, and it'd be impossible to change it. Here however it's the wrapper that's not well behaved by not cleaning up when the consumer would think the wrapper itself is misbehaved for throwing","msgtype":"m.text"},"m.relates_to":{"event_id":"$1R6gYWOBstsBwujn_gCRC1W9hiNp1T-isYWaOaorvwE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639705385910,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LOPIOm1FZJSpyI-uK8ay6fZEDIjW5D0MbHdQec3Guyk"},
{"content":{"body":"It can either be left open, or we can clean it up.","msgtype":"m.text"},"ts":1639705395676,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$17IYZTe3d6z0utjytF4iP8m5yuc89RCvGL2CEVdBnb4"},
{"content":{"body":"Right, my position is that the _wrapper_ should clean up the sync iterator at that point","format":"org.matrix.custom.html","formatted_body":"Right, my position is that the <em>wrapper</em> should clean up the sync iterator at that point","msgtype":"m.text"},"ts":1639705427393,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WMoxHFDjiFWGqKPrnlbz2tprGNw2zFo31cdri60kI_g"},
{"content":{"body":"the async wrapper is returning a rejection, which is construed by the consumer as misbehaving. It should know it won't be called again, so it should close its sync source","msgtype":"m.text"},"ts":1639705456547,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JHgzvlpeMmNeAyMK3wYsbjdnNOlWOD5u1vv1HxHHHGw"},
{"content":{"body":"Ok","msgtype":"m.text"},"ts":1639705462236,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bEK7BKXZthTg5thy81LLMIKv5HUMUv5ruaGZAIa67ek"},
{"content":{"body":"i.e. we should add a handler to the third argument in step 10 of AsyncFromSyncIteratorContinuation which closes the sync iterator","msgtype":"m.text"},"ts":1639705468327,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6bIE7OJG6_Plg2RrZf4-yuINO6876jU1WECWsXBWWT8"},
{"content":{"body":"Lol, I think that's what I suggested","msgtype":"m.text"},"ts":1639705488513,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CW1UYvq0FeLU022RDN8d7LeNCMF6nxsGVO946RGPYOk"},
{"content":{"body":"hah, well","msgtype":"m.text"},"ts":1639705493901,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YIrPnTbMtRTf3ujvZzEGcWynaQUD2r1LnLN_0E6SPZM"},
{"content":{"body":"I am glad we are agreement then, even if violent","msgtype":"m.text"},"ts":1639705503399,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cIoTL0C6K7rrGPk1rQ0liLsJKEyKU_a1bcz7IyAMyfQ"},
{"content":{"body":"what you suggested is forwarding the rejection, which already happens. The wrapper needs to explicitly close the sync iterator it holds","msgtype":"m.text"},"ts":1639705537285,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zzX7L1j7hETRVlfnkpZme4-qr_5WtXW8AQYOlp0WLqY"},
{"content":{"body":"oh, yeah","msgtype":"m.text"},"ts":1639705544107,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7UlqvAcOuQpOubDRzQf4UG9QCBDoikgmjbnvvY7m8u4"},
{"content":{"body":"admittedly the flow inversion in iterators is a bit mindbending","msgtype":"m.text"},"ts":1639705579081,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JayouIwt3RDd_6PuB9jBkjFCsoo62Ltsg7z7MqZZZlY"},
{"content":{"body":"Alright, since this is my first spec PR, can someone take a preliminary look and tell me if that makes sense before I mark it as ready? bakkot maybe?\nhttps://github.com/tc39/ecma262/pull/2600","format":"org.matrix.custom.html","formatted_body":"Alright, since this is my first spec PR, can someone take a preliminary look and tell me if that makes sense before I mark it as ready? <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> maybe?<br>https://github.com/tc39/ecma262/pull/2600","msgtype":"m.text"},"ts":1639710739601,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gKNNN18vREe4E2J67y461WghRDpCX_Q07E1dlPAuv7o"}
]