[
{"content":{"body":"We have a 262 issue for that","msgtype":"m.text"},"ts":1639700064733,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DD5uVew-MuazR_7Uz-MDk74m6-WY71DFmlyBXfW5oBY"},
{"content":{"body":"https://github.com/tc39/ecma262/issues/1849","msgtype":"m.text"},"ts":1639700090538,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$V0j4QDOLIq5m6L5PiXpgl1TQZUV-Zv6Bl2cWSbClMzI"},
{"content":{"body":"Looks like you and I arrived at the same conclusion","msgtype":"m.text"},"ts":1639700222503,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$86Ywh7nl67MbPZWUbyuVzbr17ke4fhOd-_V_U5G8OrY"},
{"content":{"body":"Lol, yah down to the step number","msgtype":"m.text"},"ts":1639700312805,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0UsrjIOXyqmVWHTZijuGMT7ORiFXGTZ6WI1FzYOdIV4"},
{"content":{"body":"Actually rejecting the capability wouldn't close the sync iterator, would it? That's the problem today, the rejection flows into the promise capability, and into the consumer of the async iterator, which then quarantines the async iterator","msgtype":"m.text"},"ts":1639700571983,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mV-2JXjtBWv3R6V-Wm8BVp4tdki-xjiwk5uOvmPQ_Lw"},
{"content":{"body":"It should, given a `throw` will close via the `IfAbruptRejectPromise`, which just calls `capability.[[Reject]]`","format":"org.matrix.custom.html","formatted_body":"It should, given a <code>throw</code> will close via the <code>IfAbruptRejectPromise</code>, which just calls <code>capability.[[Reject]]</code>","msgtype":"m.text"},"ts":1639702745486,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NaWsW4vSmV3Uz5JTz_K7dp6UzMw6nWR1fBI2iqDkqIw"},
{"content":{"body":"I don't see it","msgtype":"m.text"},"ts":1639702942843,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zlLyXOdNSLV5UpzgLudRW9vbkcUVFVquhFl4V7Id3as"},
{"content":{"body":"I don't see anything that will close the `syncIterator` if the `promiseCapability` is rejected. For that matter, the `syncIterator` is not given to `AsyncFromSyncIteratorContinuation`, so it wouldn't have a way to do it.","format":"org.matrix.custom.html","formatted_body":"I don't see anything that will close the <code>syncIterator</code> if the <code>promiseCapability</code> is rejected. For that matter, the <code>syncIterator</code> is not given to <code>AsyncFromSyncIteratorContinuation</code>, so it wouldn't have a way to do it.","msgtype":"m.text"},"ts":1639703265326,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EF28Cq7q6YB_02QvxfPpIhQ9o9nn6VtcR1XLIpDh66U"},
{"content":{"body":"it'd have to be plumbed through as an optional 3rd argument in the case of `next`, as `return` and `throw` already close the `syncIterator` by definition","format":"org.matrix.custom.html","formatted_body":"it'd have to be plumbed through as an optional 3rd argument in the case of <code>next</code>, as <code>return</code> and <code>throw</code> already close the <code>syncIterator</code> by definition","msgtype":"m.text"},"ts":1639703345752,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xt66mpSoI94IB-6xBKCN0_I3oGOkWUGchCK7XvpxIfc"},
{"content":{"body":"Let me try digging in again","msgtype":"m.text"},"ts":1639703814064,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8XD6JDhyoLMt1PHlNXE9fZvUiKse172mwf6t8n-KqHI"},
{"content":{"body":"https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%.next","msgtype":"m.text"},"ts":1639704081255,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ywqx1uG_pSkjCfVrCmMBxw9IbejahbygFUbXBX8GYqY"},
{"content":{"body":"Step 6.a gets the `sync.next()` value","format":"org.matrix.custom.html","formatted_body":"Step 6.a gets the <code>sync.next()</code> value","msgtype":"m.text"},"ts":1639704095986,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JzDLnP31zT6tBVWVI1bqgHToRhmR7gGZQCma5cN2nzk"},
{"content":{"body":"it gets the result, aka `{value: Promise, done: boolean}`","format":"org.matrix.custom.html","formatted_body":"it gets the result, aka <code>{value: Promise, done: boolean}</code>","msgtype":"m.text"},"ts":1639704157605,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y8uBot0PYxr9kg6_dFQbm8GIYpazQHSM_jQYu5KRz4g"},
{"content":{"body":"Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":"Which gets us an <code>{ value, done }</code> value","msgtype":"m.text"},"ts":1639704162386,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$B6jOTs_oShC61g84L9vttp6QpRpYOIz1HFxFJWsiO5g"},
{"content":{"body":"Yah","msgtype":"m.text"},"ts":1639704163090,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GTSAPQo3sjnLGsW3jziL1LA6bZYe1rY8jNFxI0qaV2w"},
{"content":{"body":"Now, `done` doesn't really matter","format":"org.matrix.custom.html","formatted_body":"Now, <code>done</code> doesn't really matter","msgtype":"m.text"},"ts":1639704182679,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Cn92qACbFOyE3ABGm-4VdB05OCHWDbhwQFf2n_0Q2I0"},
{"content":{"body":" * Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":" * Which gets us an <code>{ value, done }</code> value","m.new_content":{"body":"Which gets us an `{ value, done }` value","format":"org.matrix.custom.html","formatted_body":"Which gets us an <code>{ value, done }</code> value","msgtype":"m.text"},"m.relates_to":{"event_id":"$B6jOTs_oShC61g84L9vttp6QpRpYOIz1HFxFJWsiO5g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639704195454,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WqPG5a4ozUCXvZIFuLJ7vXMbq-j4oh-xbKnuDcolj4g"},
{"content":{"body":"But we get the `value`","format":"org.matrix.custom.html","formatted_body":"But we get the <code>value</code>","msgtype":"m.text"},"ts":1639704202244,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0gG-efOuZwOtIYKiPHKcKRGM9gYKhmSwOp-Ff4fhPvA"},
{"content":{"body":"In https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation","msgtype":"m.text"},"ts":1639704213046,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$funK_4g_nhD_VYpneoDbcDPVbznANg8THHIIuW1EWw4"},
{"content":{"body":"The promise itself is received as a normal completion, but it's either rejected or will reject","msgtype":"m.text"},"ts":1639704252186,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ipsG3_AGw0gXMVCvrvmK0LyrRQSoJZX3NQ38XW3738E"},
{"content":{"body":"and from what I understand `AsyncFromSyncIteratorContinuation` grabs `done` and `value` from the result, awaits the `value` and resolves a promise with `{done, value: awaitedValue}`","format":"org.matrix.custom.html","formatted_body":"and from what I understand <code>AsyncFromSyncIteratorContinuation</code> grabs <code>done</code> and <code>value</code> from the result, awaits the <code>value</code> and resolves a promise with <code>{done, value: awaitedValue}</code>","msgtype":"m.text"},"ts":1639704273641,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3roK1Uql8q5QtnnldoHK8PbuUKqm3rCTAQgJwuzSCWA"}
]