[
{"content":{"body":"In terms of the C++/Rust memory model, SharedArrayBuffer's UNORDERED ordering is just an ordinary read or write, right? (Assuming the platform doesn't need locks to write a value of that size in a single operation.) And not Relaxed.","msgtype":"m.text"},"ts":1758016633442,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$MozXindqruUTtw6tVJIE_CGpXyF7THOuF9IZtIhGIoA"},
{"content":{"body":"my understanding is that in the C++/Rust memory model, \"ordinary\" reads and writes to a shared buffer, even if fine by the platform, can lead to compiler optimizations that might still mess things up","m.mentions":{},"msgtype":"m.text"},"ts":1758016691684,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$vtxcSGdlpeScK8QYFziKlHOj5KVwOH7xNhGaxqPcCAU"},
{"content":{"body":"I think relaxed will do the right thing","m.mentions":{},"msgtype":"m.text"},"ts":1758016713885,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$IUoeP6VfwUbS5_wLy3gFEK3p8-IP5OKb3sCQ3spJ8pI"},
{"content":{"body":"or rather, \"ordinary\" reads and writes to the same memory across threads are a data race, with is UB in C++ and Rust","m.mentions":{},"msgtype":"m.text"},"ts":1758016914706,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hTGsdH5RQv4fqIyUNAAA97FupnIc0KReDzENelHe53U"},
{"content":{"body":"* or in other words, \"ordinary\" reads and writes to the same memory across threads are a data race, with is UB in C++ and Rust","m.mentions":{},"m.new_content":{"body":"or in other words, \"ordinary\" reads and writes to the same memory across threads are a data race, with is UB in C++ and Rust","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hTGsdH5RQv4fqIyUNAAA97FupnIc0KReDzENelHe53U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758016922860,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fYFb0GhZORDGtz1w9wwiX7IY_1X5gTXVu4EKLKPi790"},
{"content":{"body":"* or in other words, \"ordinary\" reads and writes to the same memory across threads without any other kind of synchronization, are a data race, with is UB in C++ and Rust","m.mentions":{},"m.new_content":{"body":"or in other words, \"ordinary\" reads and writes to the same memory across threads without any other kind of synchronization, are a data race, with is UB in C++ and Rust","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hTGsdH5RQv4fqIyUNAAA97FupnIc0KReDzENelHe53U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758016947243,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ijJztDq63QQJJjvkAHtHqQ2UrPwDKFk2BF4YTyiHM70"},
{"content":{"body":"relaxed is a stronger constraint than the spec requires","m.mentions":{},"msgtype":"m.text"},"ts":1758017049689,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tJN832noeaUSD3nckjNj0IPM87WSNPXpkY7IKc1dDlM"},
{"content":{"body":"Yeah, the spec just kindly asks devs to refrain from writing data races, so Relaxed seems to be the \"right but wrong\" thing.","m.mentions":{},"msgtype":"m.text"},"ts":1758017117445,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$Q5OLjH5ptd5OBQcwUsQzayRF3MxCOEBwB7WxOCW6338"}
]