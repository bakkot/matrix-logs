[
{"content":{"body":"Eg, for a proxied promise, you want to wait to adopt the thenable into your native promise","msgtype":"m.text","org.matrix.msc1767.text":"Eg, for a proxied promise, you want to wait to adopt the thenable into your native promise"},"ts":1652313620314,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5gwM3Xf2THJGSOoV5NTQgyPo5zbsm7UwaQ9iDzYwTMI"},
{"content":{"body":"It seems the goal isn't determine whether a promise is safe, it's to safely cast it to a native promise","msgtype":"m.text","org.matrix.msc1767.text":"It seems the goal isn't determine whether a promise is safe, it's to safely cast it to a native promise"},"ts":1652313657519,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5-hEcyLer7Mah74nC-YJ6MWcDOA-_qvABMdi9b2rOu0"},
{"content":{"body":"Why not just add that instead?","msgtype":"m.text","org.matrix.msc1767.text":"Why not just add that instead?"},"ts":1652313663962,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$C0t6V0kPh7kFeQbGrE285cGYirjcGnZzJGvvhFEnrVE"},
{"content":{"body":"I do believe `Promise.resolveSkepitcally(landmine)` would be equally satisfying for the hardened JavaScript trade-offs.","format":"org.matrix.custom.html","formatted_body":"I do believe <code>Promise.resolveSkepitcally(landmine)</code> would be equally satisfying for the hardened JavaScript trade-offs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do believe `Promise.resolveSkepitcally(landmine)` would be equally satisfying for the hardened JavaScript trade-offs.","mimetype":"text/plain"},{"body":"I do believe <code>Promise.resolveSkepitcally(landmine)</code> would be equally satisfying for the hardened JavaScript trade-offs.","mimetype":"text/html"}]},"ts":1652313803896,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qjlXklLPWkQdK6rTSkJ6W5ucZ0sOs_27UNuGl-PiuyY"},
{"content":{"body":"\"is safe promise\" is a user land thing","msgtype":"m.text","org.matrix.msc1767.text":"\"is safe promise\" is a user land thing"},"ts":1652313833233,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qzGohuNyOo3uDjYQFaM4bDYlH2K3W3z_DqfwjNTY26k"},
{"content":{"body":"```\nPromise.safeResolve = (input) => {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% && then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() => input);\n};\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>Promise.safeResolve = (input) =&gt; {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% &amp;&amp; then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() =&gt; input);\n};\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nPromise.safeResolve = (input) => {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% && then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() => input);\n};\n```","mimetype":"text/plain"},{"body":"<pre><code>Promise.safeResolve = (input) =&gt; {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% &amp;&amp; then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() =&gt; input);\n};\n</code></pre>\n","mimetype":"text/html"}]},"ts":1652313841960,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$De5oWZ9pZR1i3fUNK1K37MqS9z_K_SXk1ZzX5dIDDJA"},
{"content":{"body":"Now, given that `Promise.resolve` already isn't safe and there's some need for `Promise.safeResolve`, can we make the `then` call sync?","format":"org.matrix.custom.html","formatted_body":"Now, given that <code>Promise.resolve</code> already isn't safe and there's some need for <code>Promise.safeResolve</code>, can we make the <code>then</code> call sync?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Now, given that `Promise.resolve` already isn't safe and there's some need for `Promise.safeResolve`, can we make the `then` call sync?","mimetype":"text/plain"},{"body":"Now, given that <code>Promise.resolve</code> already isn't safe and there's some need for <code>Promise.safeResolve</code>, can we make the <code>then</code> call sync?","mimetype":"text/html"}]},"ts":1652313915901,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MhA0nmHK3lRuJv_vuDcoAUIE4k7hXZoHExSWm9yyo84"},
{"content":{"body":"But yes, a \"safeResolve\" would work as well","msgtype":"m.text","org.matrix.msc1767.text":"But yes, a \"safeResolve\" would work as well"},"ts":1652313927258,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cGand77WNFN7VIMWJxD29SkKQJv10jOhWWt4zQ68-vs"},
{"content":{"body":"The `Promise.safeResolve` would protect you from the sync `then`, and we could make regular code using `Promise.resolve`/`then`-return-value/Promise-constructor-executor-resolve/direct-return-async-fn faster","format":"org.matrix.custom.html","formatted_body":"The <code>Promise.safeResolve</code> would protect you from the sync <code>then</code>, and we could make regular code using <code>Promise.resolve</code>/<code>then</code>-return-value/Promise-constructor-executor-resolve/direct-return-async-fn faster","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `Promise.safeResolve` would protect you from the sync `then`, and we could make regular code using `Promise.resolve`/`then`-return-value/Promise-constructor-executor-resolve/direct-return-async-fn faster","mimetype":"text/plain"},{"body":"The <code>Promise.safeResolve</code> would protect you from the sync <code>then</code>, and we could make regular code using <code>Promise.resolve</code>/<code>then</code>-return-value/Promise-constructor-executor-resolve/direct-return-async-fn faster","mimetype":"text/html"}]},"ts":1652314004665,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$m-LsdF-Qzk04pdpO751FeWxAvZnxMGBAg5zEjgAlRd0"},
{"content":{"body":"I do consider my inquiry orthogonal to the \"call then sync\" question. I am not concerned regarding safety on that since we established it's already unsafe. My concern on that is what was raised on github, that at this point people do expect a thenable to be called in a new tick.","msgtype":"m.text","org.matrix.msc1767.text":"I do consider my inquiry orthogonal to the \"call then sync\" question. I am not concerned regarding safety on that since we established it's already unsafe. My concern on that is what was raised on github, that at this point people do expect a thenable to be called in a new tick."},"ts":1652314124678,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IPmZL9OWhGrTEzllZT498MIgDUh5XGtF7U37_q27I9s"},
{"content":{"body":"I'm ok with fast-tracking native promises, but I'm skeptical about calling random `then` synchronously","format":"org.matrix.custom.html","formatted_body":"I'm ok with fast-tracking native promises, but I'm skeptical about calling random <code>then</code> synchronously","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm ok with fast-tracking native promises, but I'm skeptical about calling random `then` synchronously","mimetype":"text/plain"},{"body":"I'm ok with fast-tracking native promises, but I'm skeptical about calling random <code>then</code> synchronously","mimetype":"text/html"}]},"ts":1652314178477,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wSrHCNALkkzX_kM4LQ7NL9hBsaOMbXkbs7Jn-vHgbFE"},
{"content":{"body":"> that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","mimetype":"text/plain"},{"body":"<blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","mimetype":"text/html"}]},"ts":1652314319692,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wC1_dkPJDzHrPnpmb2Vl1-7wENicHxEdfYugb007tN8"},
{"content":{"body":" * > that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","m.new_content":{"body":"> that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","mimetype":"text/plain"},{"body":"<blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wC1_dkPJDzHrPnpmb2Vl1-7wENicHxEdfYugb007tN8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > that at this point people do expect a thenable to be called in a new tick\n\nI'm hopeful that there are very few programs that need this","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>that at this point people do expect a thenable to be called in a new tick</p>\n</blockquote>\n<p>I'm hopeful that there are very few programs that need this</p>\n","mimetype":"text/html"}]},"ts":1652314323539,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yv7_f8B1YK2R9Si62I0YP9AMdlcMYAwIAm_b19biZqw"},
{"content":{"body":"Or that there's some other way to fix those programs","msgtype":"m.text","org.matrix.msc1767.text":"Or that there's some other way to fix those programs"},"ts":1652314350639,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WlOggdYDbQ2ObwAB4OOFLYCjwWM-Eauz6LeepnclIUY"},
{"content":{"body":"Eg, your async_hooks example is looking for `then` being used to adopt state, but that could be an async_hook itself.","format":"org.matrix.custom.html","formatted_body":"Eg, your async_hooks example is looking for <code>then</code> being used to adopt state, but that could be an async_hook itself.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Eg, your async_hooks example is looking for `then` being used to adopt state, but that could be an async_hook itself.","mimetype":"text/plain"},{"body":"Eg, your async_hooks example is looking for <code>then</code> being used to adopt state, but that could be an async_hook itself.","mimetype":"text/html"}]},"ts":1652314427866,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$I2HHoDPmcJVTkq5eDEc2wniOb_WOHtkPiPJvEmlH3Ko"},
{"content":{"body":"Yes and I would very much prefer it to be a first class hook","msgtype":"m.text","org.matrix.msc1767.text":"Yes and I would very much prefer it to be a first class hook"},"ts":1652314495488,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y_0IokdFmtw0nIpN5fsupRV-hoEH5A8VkhNIGn-zPJE"},
{"content":{"body":"I'm just not sure trying to reduce the ticks of non-native-promise thenables is worth the risk of breakage","msgtype":"m.text","org.matrix.msc1767.text":"I'm just not sure trying to reduce the ticks of non-native-promise thenables is worth the risk of breakage"},"ts":1652314566619,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8_5-uPoh1V6Pt_OKYsKQHqs6O3PvmpFDfyfsLheJt7w"}
]