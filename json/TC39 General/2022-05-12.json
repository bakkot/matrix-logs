[
{"content":{"body":"Eg, for a proxied promise, you want to wait to adopt the thenable into your native promise","msgtype":"m.text","org.matrix.msc1767.text":"Eg, for a proxied promise, you want to wait to adopt the thenable into your native promise"},"ts":1652313620314,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5gwM3Xf2THJGSOoV5NTQgyPo5zbsm7UwaQ9iDzYwTMI"},
{"content":{"body":"It seems the goal isn't determine whether a promise is safe, it's to safely cast it to a native promise","msgtype":"m.text","org.matrix.msc1767.text":"It seems the goal isn't determine whether a promise is safe, it's to safely cast it to a native promise"},"ts":1652313657519,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5-hEcyLer7Mah74nC-YJ6MWcDOA-_qvABMdi9b2rOu0"},
{"content":{"body":"Why not just add that instead?","msgtype":"m.text","org.matrix.msc1767.text":"Why not just add that instead?"},"ts":1652313663962,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$C0t6V0kPh7kFeQbGrE285cGYirjcGnZzJGvvhFEnrVE"},
{"content":{"body":"I do believe `Promise.resolveSkepitcally(landmine)` would be equally satisfying for the hardened JavaScript trade-offs.","format":"org.matrix.custom.html","formatted_body":"I do believe <code>Promise.resolveSkepitcally(landmine)</code> would be equally satisfying for the hardened JavaScript trade-offs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do believe `Promise.resolveSkepitcally(landmine)` would be equally satisfying for the hardened JavaScript trade-offs.","mimetype":"text/plain"},{"body":"I do believe <code>Promise.resolveSkepitcally(landmine)</code> would be equally satisfying for the hardened JavaScript trade-offs.","mimetype":"text/html"}]},"ts":1652313803896,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qjlXklLPWkQdK6rTSkJ6W5ucZ0sOs_27UNuGl-PiuyY"},
{"content":{"body":"\"is safe promise\" is a user land thing","msgtype":"m.text","org.matrix.msc1767.text":"\"is safe promise\" is a user land thing"},"ts":1652313833233,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qzGohuNyOo3uDjYQFaM4bDYlH2K3W3z_DqfwjNTY26k"},
{"content":{"body":"```\nPromise.safeResolve = (input) => {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% && then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() => input);\n};\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>Promise.safeResolve = (input) =&gt; {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% &amp;&amp; then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() =&gt; input);\n};\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nPromise.safeResolve = (input) => {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% && then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() => input);\n};\n```","mimetype":"text/plain"},{"body":"<pre><code>Promise.safeResolve = (input) =&gt; {\n  if (input.[[PromiseState]]) {\n    // guaranteed to not be a proxy, so no GetOwnDesc traps\n    const constructor = GetOwnPropertyDescriptor(input, 'constrcutor);\n    const then = GetOwnPropertyDescriptor(input, 'then');\n    if (constructor?.value === %Promise% &amp;&amp; then?.value === %Promise.p.then%) {\n      return input;\n    }\n  }\n  return Promise.resolve().then(() =&gt; input);\n};\n</code></pre>\n","mimetype":"text/html"}]},"ts":1652313841960,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$De5oWZ9pZR1i3fUNK1K37MqS9z_K_SXk1ZzX5dIDDJA"}
]