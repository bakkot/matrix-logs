[
{"content":{"body":"I am still suspicious of any R&T use cases that are drop-in replacement of objects but with deep immutability and/or equality semantics. In both cases the fact that the structure has to be deeply immutable, aka no objects directly contained, makes me believe that the code will have to be aware the value is a R/T and handle it explicitly.","msgtype":"m.text"},"ts":1671759754158,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$z3_qpvR1NPxsyJJsNJzp_m75d_t0D9wwpnaK7c7j8QM"},
{"content":{"body":"And by extension I suppose I don't fully understand the use cases motivating implicit equality semantics. I do agree it would be much better DX though.","msgtype":"m.text"},"ts":1671760104835,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JbDc1ol4UeJaUMsliDbRyoK3nLSXZme76S5PvzMBuiU"},
{"content":{"body":"I am all for a way to deeply compare R&T and I actually believe we'll need a way to also easily compare the structure of a R&T ignoring the unique symbols it contains. This is where I still wish we had Box as it would have not conflated the type of unique symbols contained in a R/T.","msgtype":"m.text"},"ts":1671760343920,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VKtgEclYdnkXCMgBxXKZBLxrEGVz20XydZ3qr0OyqRU"}
]