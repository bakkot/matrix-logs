[
{"content":{"body":"what's up with the requirement that if the target is not extensible, proxy ownKeys can't return a different set of keys?","m.mentions":{},"msgtype":"m.text"},"ts":1725565063341,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x0JyDK6lHMqt3XMlj7Oj_272tynu60o4ki8B8htRjss"},
{"content":{"body":"like if i define the other traps to behave consistently, shouldn't it be fine","m.mentions":{},"msgtype":"m.text"},"ts":1725565094611,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$w-SZzSphAkr5YqRbVDgnBbYpettKmNhcbbD5MGSzQaU"},
{"content":{"body":"I guess it's because otherwise there is no way to guarantee that it behaves as not extensible ","msgtype":"m.text"},"ts":1725565530000,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$tzFc9Fdppo4TTQ77C-tr62YLTwMyv3_F9BOYtf2dEOk"},
{"content":{"body":"how could it know that the other traps behave consistently without calling them?","m.mentions":{},"msgtype":"m.text"},"ts":1725566023340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_MnoKI8-aMMBcMPZpp2v326rk_oh--fK5h5o_wFiXh0"},
{"content":{"body":"or remembering their results, I suppose","m.mentions":{},"msgtype":"m.text"},"ts":1725566043691,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QNI_iIAqo_N8qhm328GbgLttreC8K-FVnDbXMDVLcos"},
{"content":{"body":"you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants. and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":"you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants. and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","m.mentions":{},"msgtype":"m.text"},"ts":1725566175036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UIHScejrLUkQuGImz95acYI3PJBuTO_vRBDM-Ner4CI"},
{"content":{"body":" * you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (or at least, is as consistent as the underlying thing). and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":" * you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (or at least, is as consistent as the underlying thing). and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","m.mentions":{},"m.new_content":{"body":"you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (or at least, is as consistent as the underlying thing). and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":"you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (or at least, is as consistent as the underlying thing). and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UIHScejrLUkQuGImz95acYI3PJBuTO_vRBDM-Ner4CI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725566200213,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NChm03qXED_f8cm50iY3E4j8Kza1Yf_ZqT_Mw28nUpc"},
{"content":{"body":" * you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).\n\nand one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":" * <p>you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).</p>\n<p>and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.</p>\n","m.mentions":{},"m.new_content":{"body":"you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).\n\nand one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":"<p>you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).</p>\n<p>and one of the behaviors is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UIHScejrLUkQuGImz95acYI3PJBuTO_vRBDM-Ner4CI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725566220970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t97JkDAgkk1aPfrYy5Jdm5QV4t6mX9i3RbwGiZVuEfo"},
{"content":{"body":" * you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).\n\nand one of the invariants is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":" * <p>you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).</p>\n<p>and one of the invariants is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.</p>\n","m.mentions":{},"m.new_content":{"body":"you should understand the target as serving as a _witness_, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).\n\nand one of the invariants is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.","format":"org.matrix.custom.html","formatted_body":"<p>you should understand the target as serving as a <em>witness</em>, a proof-by-example that the behavior you are representing is consistent with the essential invariants (at least assuming that you don't already have something inconsistent to use as the target).</p>\n<p>and one of the invariants is, if something is reported to be not-extensible, then it will never get new keys. the way this is enforced is, a proxy can only report being not-extensible if its target is not-extensible, and if the target is not-extensible then it must report having the same keys as the target. if either of these properties was not enforced then you could have behavior which is not consistent with the essential invariants.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UIHScejrLUkQuGImz95acYI3PJBuTO_vRBDM-Ner4CI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725566235395,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j-_9iyxmqX97bcd1QOtGzJ2VAwqAXwEClNJnkbEUOPI"},
{"content":{"body":"currently it checks if it's consistent by calling the mop methods on the target. it could call them on itself for example.","m.mentions":{},"msgtype":"m.text"},"ts":1725566541850,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$X5DNJOroZ6Ci-9RMP4Nvstvc42VIRZGj4Gv0bHHsqw4"},
{"content":{"body":"but oh well","m.mentions":{},"msgtype":"m.text"},"ts":1725566551539,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QapC1QT2-qsfdS6gIcnRow5tWjxr340kWTZ9iaxi4Sw"},
{"content":{"body":"how could it check that the ownKeys trap is consistent over time?","m.mentions":{},"msgtype":"m.text"},"ts":1725566571874,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o7kfgeGQYtAFi4nAKHmRDpHc9SeaBDxOuRKgC_OyfyE"},
{"content":{"body":"other than by remembering the results, which gets expensive","m.mentions":{},"msgtype":"m.text"},"ts":1725566585988,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ji_XCtmOcpupznfRgXJZ8PbYpltrqWhLhyNcI_sQkhU"},
{"content":{"body":"imo if its not consistent you just have to enjoy the cthulhu you have unleashed","m.mentions":{},"msgtype":"m.text"},"ts":1725566629700,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dfIbNkieupJAWQ14zNpn6V1Yd3nBsDFOXfA6NmCj5B8"},
{"content":{"body":"but i guess folks specifying proxies felt differently","m.mentions":{},"msgtype":"m.text"},"ts":1725566647931,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UqokrkMAghR39HtnuT_8MBz6JFVlEAeCjsqJ2aXSM6o"},
{"content":{"body":"personally I like being able to reason about programs","m.mentions":{},"msgtype":"m.text"},"ts":1725566651810,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D_V4KJdrAS87e9agSpOIumjwO-7rKyOoQ3PzzUi83mI"},
{"content":{"body":"and write code which is robust even if other people are doing weird stuff","m.mentions":{},"msgtype":"m.text"},"ts":1725566669086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s8WrZl1MsJv6xpGuJfa63jbUvSkvChIJbuhf_qxNh5w"},
{"content":{"body":"on a normal business webpage there's code from like 20 different vendors interoperating and having _some_ invariants actually enforced by the language is the only thing which makes that work at all","format":"org.matrix.custom.html","formatted_body":"on a normal business webpage there's code from like 20 different vendors interoperating and having <em>some</em> invariants actually enforced by the language is the only thing which makes that work at all","m.mentions":{},"msgtype":"m.text"},"ts":1725566733285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t8hbhbUvHD6e9skHGT745aDRWiYIkqIZmwMfhMMI6xk"},
{"content":{"body":"(in fact I think proxies already make it far too hard to reason about code, and they should never have been added in the first place. but that ship has sailed.)","m.mentions":{},"msgtype":"m.text"},"ts":1725566878981,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cPJhXoQDEkIbaNZD2-006Mph09GMKeQHNqMdFUW7WRU"},
{"content":{"body":"I saw Tom van Cutsem’s original Proxy presentation a long time ago. At lunch, Doug Crockford was behind me in line and asked “what do _you_ think of Proxy” and it was obviously a personality test.","format":"org.matrix.custom.html","formatted_body":"I saw Tom van Cutsem’s original Proxy presentation a long time ago. At lunch, Doug Crockford was behind me in line and asked “what do <em>you</em> think of Proxy” and it was obviously a personality test.","m.mentions":{},"msgtype":"m.text"},"ts":1725566984552,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$CEXSf4Gny3K72bAIkXY-e7OjSpRm4oPpxUjq-RSdKT0"},
{"content":{"body":"I would like to think that I said something clever like, “It’s obviously sharp on both ends.”.","m.mentions":{},"msgtype":"m.text"},"ts":1725567119383,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2xYZdtqGmahRt5Jg_yt5q-4YdMjZBVZ55UEhhRo9Uas"},
{"content":{"body":"At the same meeting, Doug also said “You should pick either `import(\"specifier\")` or `import \"specifier\"`. If you pick one or the other, half the room will hate it. If you pick neither, everyone will hate it.","format":"org.matrix.custom.html","formatted_body":"At the same meeting, Doug also said “You should pick either <code>import(\"specifier\")</code> or <code>import \"specifier\"</code>. If you pick one or the other, half the room will hate it. If you pick neither, everyone will hate it.","m.mentions":{},"msgtype":"m.text"},"ts":1725567191712,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$fEdhZMqW2Qa-rBJ0poBhi0JoD7WP6Zu1bOMiric0tF8"},
{"content":{"body":"haha we did pick both","m.mentions":{},"msgtype":"m.text"},"ts":1725567212249,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7S9NDY3MUDpX1eUrMWRUrKVaDtSv4fsc0EM54PjWvlQ"},
{"content":{"body":"It hadn’t occurred to me yet that I should pick both.","m.mentions":{},"msgtype":"m.text"},"ts":1725567216728,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$bHWpUwwwIRBz5LvNntrSr1JY-rfOdYAwnDSHHbrMQu4"},
{"content":{"body":"anyway i don't like to think","m.mentions":{},"msgtype":"m.text"},"ts":1725567242387,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xRGoCySzpJBY_Kcymi1I6YgcKxCz2C2nwFByltjCEJA"},
{"content":{"body":"the greatest disservice my college did me was to make me think i ought to enjoy thinking and strive to keep thinking","m.mentions":{},"msgtype":"m.text"},"ts":1725567259450,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DRHPm_XL2ZmatM4PVhbqI8u5ARhS9FH0IgXv47oSddQ"}
]