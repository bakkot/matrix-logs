[
{"content":{"body":"> <@abotella:igalia.com> I wonder if having an optional form without an identifier would be possible, from a parsing standpoint\n> ```js\n> using ident = expression(1);\n> using expression(2);\n> ```\n\nSee https://github.com/rbuckton/proposal-void-binding, which I plan to discuss at an upcoming TC39 meeting. This was originally part of the `using` proposal and was pulled out to serve as a broader independent proposal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$24AF4xEZ4NiQinMgZDfVm3ypnfKc-nsb1rOGkO9b0fk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br><p>I wonder if having an optional form without an identifier would be possible, from a parsing standpoint</p>\n<pre><code class=\"language-js\">using ident = expression(1);\nusing expression(2);\n</code></pre>\n</blockquote></mx-reply>See https://github.com/rbuckton/proposal-void-binding, which I plan to discuss at an upcoming TC39 meeting. This was originally part of the <code>using</code> proposal and was pulled out to serve as a broader independent proposal.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$24AF4xEZ4NiQinMgZDfVm3ypnfKc-nsb1rOGkO9b0fk"}},"msgtype":"m.text"},"ts":1705722971782,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KEgAsM2mNTHJKBQ5-4GF_J-WO71ioCo_q_TX3hbiA9o"},
{"content":{"body":"> Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).\namusingly there is a comma confusion here (should be [, a,])","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).<br />\namusingly there is a comma confusion here (should be [, a,])</p>\n</blockquote>","msgtype":"m.text"},"ts":1705723169617,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$SP5A3FUOZNDnG8m9SGvnSF4yaVskqCbu-RX9XGOr7_o"},
{"content":{"body":"* Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).\n amusingly there is a comma confusion here (should be [, a,])","format":"org.matrix.custom.html","formatted_body":"* Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).<br />\n amusingly there is a comma confusion here (should be [, a,])","m.new_content":{"body":"Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).\n amusingly there is a comma confusion here (should be [, a,])","format":"org.matrix.custom.html","formatted_body":"Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).<br />\n amusingly there is a comma confusion here (should be [, a,])","msgtype":"m.text"},"m.relates_to":{"event_id":"$SP5A3FUOZNDnG8m9SGvnSF4yaVskqCbu-RX9XGOr7_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705723175025,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$UxUFzVp18bGlaK-ULf3Js1s1xzEJFtOo1nC7VQ07OUY"},
{"content":{"body":"* > Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])","format":"org.matrix.custom.html","formatted_body":"* <blockquote>\n<p>Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])</p>\n</blockquote>","m.new_content":{"body":"> Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])</p>\n</blockquote>","msgtype":"m.text"},"m.relates_to":{"event_id":"$SP5A3FUOZNDnG8m9SGvnSF4yaVskqCbu-RX9XGOr7_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705723181447,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$xheHr-6TvztTf2Gsr0HSwQjvGADZUFhtAaQqDpilPPE"},
{"content":{"body":"* Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])","m.new_content":{"body":"Discards in array binding and assignment patterns (i.e., const [void, a, void] = iter) to explicitly mark elisions and avoid trailing , confusion ([a, ,]).  amusingly there is a comma confusion here (should be [, a,])","msgtype":"m.text"},"m.relates_to":{"event_id":"$SP5A3FUOZNDnG8m9SGvnSF4yaVskqCbu-RX9XGOr7_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705723187995,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$C-Xd_F7gUYb1s4QVmKNxG_d06z_atbebDEI7C5h_37g"},
{"content":{"body":"working on simple Go To Definition functionality","m.mentions":{},"msgtype":"m.text"},"ts":1705739218037,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$k5vAyvoGuCAHsRiN1pkMDRx2yeWmJb1PKp80OtijURs"},
{"content":{"body":"The proposal-void-binding is compelling in how it lists lots of cases where this would be moderately useful. Still, for the original case of `using`, `using void = new UniqueLock(mutex)` feels sadly lame, compared to `using new UniqueLock(mutex)`. I think because, unlike cases such as parameter bindings or destructuring, I'm not trying to express \"don't put anything in this slot\"; I'm actually trying to avoid the \"slot\" (binding) concept at all, and just say \"I am using this resource\".","format":"org.matrix.custom.html","formatted_body":"The proposal-void-binding is compelling in how it lists lots of cases where this would be moderately useful. Still, for the original case of <code>using</code>, <code>using void = new UniqueLock(mutex)</code> feels sadly lame, compared to <code>using new UniqueLock(mutex)</code>. I think because, unlike cases such as parameter bindings or destructuring, I'm not trying to express \"don't put anything in this slot\"; I'm actually trying to avoid the \"slot\" (binding) concept at all, and just say \"I am using this resource\".","m.mentions":{},"msgtype":"m.text"},"ts":1705743861986,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$a_f3j8UnG54k-kamU7uule7YTQwi3WwxV6sGQbD4qTw"},
{"content":{"body":"So to me it feels like a tradeoff between trying to create a generally useful void-binding concept, versus making the using-a-resource case more idiomatic with specialized syntax like `using! expression` or something else. Since it's maybe not possible to create something both unambiguous and not-super-weird-looking, I guess `using void =` is probably the best place to end up. Still sad.","format":"org.matrix.custom.html","formatted_body":"So to me it feels like a tradeoff between trying to create a generally useful void-binding concept, versus making the using-a-resource case more idiomatic with specialized syntax like <code>using! expression</code> or something else. Since it's maybe not possible to create something both unambiguous and not-super-weird-looking, I guess <code>using void =</code> is probably the best place to end up. Still sad.","m.mentions":{},"msgtype":"m.text"},"ts":1705744007675,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$m3OIe3jrArb3mzH3i4LY3xSJ5KKSclYATp-Ort8kT1c"}
]