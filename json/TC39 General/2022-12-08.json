[
{"content":{"body":"bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","mimetype":"text/html"}]},"ts":1670457609002,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$qobKeze0Vd2WINKLh3zhIAKxnFHOGpZvO0QTcsOzvO0"},
{"content":{"body":" * bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","m.new_content":{"body":"bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qobKeze0Vd2WINKLh3zhIAKxnFHOGpZvO0QTcsOzvO0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2\\*\\*63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)\\*\\*uint64(63)).","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: , Grammar/engine question on an idea I've had in my issues for ages. Related to this issue: https://github.com/sirisian/ecmascript-types/issues/79 Basically say an engine is aware of types, could it handle transferring the type to argument expressions. f(a:uint64){} and you called f(2**63); The engine when parsing would choose the overload (in this case there's only one function) and propagate the type, so it's like f(uint64(2)**uint64(63)).","mimetype":"text/html"}]},"ts":1670457637868,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Wld9gVI4XYBXyl83q9JL55dIfICzpVQKjXVSvOmwjdg"},
{"content":{"body":"@tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","format":"org.matrix.custom.html","formatted_body":"@tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"@tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/plain"},{"body":"@tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/html"}]},"ts":1670457802442,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$rXwu7rrVyhHxsmPqqEcmnqEojmtezhDsH6aUqgR3-w8"},
{"content":{"body":" * @tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","format":"org.matrix.custom.html","formatted_body":" * @tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","m.new_content":{"body":"@tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","format":"org.matrix.custom.html","formatted_body":"@tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"@tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/plain"},{"body":"@tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rXwu7rrVyhHxsmPqqEcmnqEojmtezhDsH6aUqgR3-w8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * @tolmasky: I don't think the spec really says whether or not your `global.Francisco = { }` qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/plain"},{"body":" * @tolmasky: I don't think the spec really says whether or not your <code>global.Francisco = { }</code> qualifies as an intrinsic. Personally, I'd call it one, I think.","mimetype":"text/html"}]},"ts":1670457841370,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$8bBVBh7VeOKwh6gzoln5L-i8rnOfsbbKghXjflOZ-qA"},
{"content":{"body":"See also https://github.com/tc39/ecma262/issues/1540 and the https://github.com/tc39/how-we-work/pull/64 that it links to.","msgtype":"m.text","org.matrix.msc1767.text":"See also https://github.com/tc39/ecma262/issues/1540 and the https://github.com/tc39/how-we-work/pull/64 that it links to."},"ts":1670458039738,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$aW3GuSUgbFgKF6ybmuMo106FK2143oCyGGo8hc-WCuo"},
{"content":{"body":"sirisian: a number of programming languages use the type of the position to determine the type of literals in that position, yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: a number of programming languages use the type of the position to determine the type of literals in that position, yes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sirisian: a number of programming languages use the type of the position to determine the type of literals in that position, yes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: a number of programming languages use the type of the position to determine the type of literals in that position, yes","mimetype":"text/html"}]},"ts":1670458127334,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$54oZk5wLN04Ab0EuK3L0hmTwuUAWMQT5eF6wzyvRYwo"},
{"content":{"body":"Which languages?","msgtype":"m.text","org.matrix.msc1767.text":"Which languages?"},"ts":1670458160625,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$nI_lyoJYHZajhPssbW-hkbg0pl5ejw0Z3Ke8KcTQlVc"}
]