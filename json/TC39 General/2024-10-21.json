[
{"content":{"body":"I've duplicated the 2023 State of JS survey as a starting point to discuss the contents of the 2024 edition. More info here: https://github.com/Devographics/surveys/issues/252","m.mentions":{},"msgtype":"m.text"},"ts":1729484072341,"senderName":"sachag","senderId":"@sachag:matrix.org","id":"$KeGUjM7OrQGqBKX6DCM8m9FgEQIUH7kNH-hgNOOn-4A"},
{"content":{"body":"https://github.com/nodejs/node/issues/55468","msgtype":"m.text"},"ts":1729512175034,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JjbbFkO-3hFENy5e8fAAM329_1icdAkBkYsbUiYXpU4"},
{"content":{"body":"Allowing TLA in non-entrypoint modules was a mistake.","msgtype":"m.text"},"ts":1729518184729,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$C3RNAohdZR-lmbxx7D7m47KdP1jPe8Pj-n0UByl58Rg"},
{"content":{"body":"we added this feature on purpose. Sometimes you have to load something in a non-entrypoint module before that module can be used. Better to use asynchronous I/O than blocking sync I/O (or, background thread computation instead of foreground, for the Wasm case we were discussing) when that happens.","m.mentions":{},"msgtype":"m.text"},"ts":1729518292352,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BlWNKjooMLV8dHPJiJk1TzcyOlggJwfgZNgF6F6VYOc"},
{"content":{"body":"it doesn't work well in cycles; we knew that. cycles have to be broken. This is also a problem for classes.","m.mentions":{},"msgtype":"m.text"},"ts":1729518320598,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vdulKNf2tia0pJ1LGC_jdXtpIwA77otElApHCDkqJMM"}
]