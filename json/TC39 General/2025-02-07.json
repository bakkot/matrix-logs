[
{"content":{"body":"does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an `Assignment","m.mentions":{},"msgtype":"m.text"},"ts":1738952244272,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$hoND5tlEbBAT73kBrmgXA_Q_r1eLLTm8xi75GVdGCLs"},
{"content":{"body":"* does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an `AssignmentExpression`?","format":"org.matrix.custom.html","formatted_body":"* does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an <code>AssignmentExpression</code>?","m.mentions":{},"m.new_content":{"body":"does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an `AssignmentExpression`?","format":"org.matrix.custom.html","formatted_body":"does anyone off top-of-head recall the historical reasons behind why the Array prototype methods always throw when attempting to assign a non-writable length property, regardless of strictness, unlike the runtime semantics of an <code>AssignmentExpression</code>?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hoND5tlEbBAT73kBrmgXA_Q_r1eLLTm8xi75GVdGCLs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1738952251386,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$P5-V5eoNBQ3SVizPqRc0JP5VD2Cb6SUqUD1yeb6nK4M"}
]