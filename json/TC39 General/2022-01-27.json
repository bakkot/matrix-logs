[
{"content":{"body":"I’m overhauling the MDN `Array` article at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array and one big change I’m making is to reduce the **Description** section down to just a bulleted list of the essential core characteristics of JavaScript arrays.","format":"org.matrix.custom.html","formatted_body":"I’m overhauling the MDN <code>Array</code> article at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array and one big change I’m making is to reduce the __Description__ section down to just a bulleted list of the essential core characteristics of JavaScript arrays.","msgtype":"m.text"},"ts":1643249263889,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$al6P8k6cCx5bFezNurUl_mGATNjxb4KR3EOr0OKhKVQ"},
{"content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643249315534,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n[typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n`1`. See the \n[access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n`undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as \n**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n[typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n`1`. See the \n[access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n`undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as \n**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249345063,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$qEwikuYKVhqNBzNkxVuXt10UU_nA68Q5X9er3NEC7Fk"},
{"content":{"body":"probably also important to mention sparse arrays; just because length > 0 it doesn’t mean there are actually length items in it","format":"org.matrix.custom.html","formatted_body":"probably also important to mention sparse arrays; just because length &gt; 0 it doesn’t mean there are actually length items in it","msgtype":"m.text"},"ts":1643249400124,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249407237,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$RV6mLGI75AqtovuA359OO91V8bDnhB9uvaRJhUcR7uU"},
{"content":{"body":"> <@jessidhia:matrix.org> probably also important to mention sparse arrays; just because length > 0 it doesn’t mean there are actually length items in it\n\nThanks yeah, I have that further on in a Notes section","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jessidhia:matrix.org\">@jessidhia:matrix.org</a><br>probably also important to mention sparse arrays; just because length &gt; 0 it doesn’t mean there are actually length items in it</blockquote></mx-reply>Thanks yeah, I have that further on in a Notes section","m.relates_to":{"m.in_reply_to":{"event_id":"$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ"}},"msgtype":"m.text"},"ts":1643249432645,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$rc_FX1wF5lB76-he7nJzHmByjxtWW6Ytuue_9aTWT6w"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n> `1`. See the  \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br>\n<a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n> `1`. See the  \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br>\n<a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249501132,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$hFGmCi99OGVN821DDKIifyF-_NpvOZ63VpZNwiu0vO4"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the\n> \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns\n> \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n> _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n> [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the</p>\n<p><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns</p>\n<p><code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the\n> \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns\n> \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n> _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n> [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the</p>\n<p><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns</p>\n<p><code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249516578,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$PNwQXrv4yYX2cj6_m2XdULf3aVAO1oTqe6rDB-znz_Q"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249550354,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$2VLKfVWr7d1ysigOm_NcO6vK_8SvS3tuq_Q3DdSzqTY"},
{"content":{"body":"For clarity I might remove the negations in the first bullet - say what the arrays are rather than what they aren't?","msgtype":"m.text"},"ts":1643249565463,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$mE4NvW1GIa_E_XMmzHguYBOfTvdbq48SeekTxBBz4fE"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n>\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the<a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n>\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the<a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249586054,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$TKbSO8AcA1DXdLqT0hX2HSY3ux401-jwyzcUhOI4lwE"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> `1`. See the \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with _any_ JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with <em>any</em> JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> `1`. See the \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with _any_ JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with <em>any</em> JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249636682,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$XSxSSUdDKVHWnUPZ9zdpHDIyb-1cjS1T6OY8e7Ww47E"},
{"content":{"body":" * Here’s what I have so far:\n>\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n>\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249679750,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$f-k6tjiK0Ke6jWwYPhekwSx4CM51WK8Xgt1SP-IlypI"}
]