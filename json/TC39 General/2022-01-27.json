[
{"content":{"body":"I’m overhauling the MDN `Array` article at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array and one big change I’m making is to reduce the **Description** section down to just a bulleted list of the essential core characteristics of JavaScript arrays.","format":"org.matrix.custom.html","formatted_body":"I’m overhauling the MDN <code>Array</code> article at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array and one big change I’m making is to reduce the __Description__ section down to just a bulleted list of the essential core characteristics of JavaScript arrays.","msgtype":"m.text"},"ts":1643249263889,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$al6P8k6cCx5bFezNurUl_mGATNjxb4KR3EOr0OKhKVQ"},
{"content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643249315534,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n[typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n`1`. See the \n[access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n`undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as \n**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n[typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n`1`. See the \n[access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n`undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as \n**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249345063,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$qEwikuYKVhqNBzNkxVuXt10UU_nA68Q5X9er3NEC7Fk"},
{"content":{"body":"probably also important to mention sparse arrays; just because length > 0 it doesn’t mean there are actually length items in it","format":"org.matrix.custom.html","formatted_body":"probably also important to mention sparse arrays; just because length &gt; 0 it doesn’t mean there are actually length items in it","msgtype":"m.text"},"ts":1643249400124,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus `1`. See the  [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as\n> \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus <code>1</code>. See the  <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as</p>\n</li>\n</ul>\n<p><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249407237,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$RV6mLGI75AqtovuA359OO91V8bDnhB9uvaRJhUcR7uU"},
{"content":{"body":"> <@jessidhia:matrix.org> probably also important to mention sparse arrays; just because length > 0 it doesn’t mean there are actually length items in it\n\nThanks yeah, I have that further on in a Notes section","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jessidhia:matrix.org\">@jessidhia:matrix.org</a><br>probably also important to mention sparse arrays; just because length &gt; 0 it doesn’t mean there are actually length items in it</blockquote></mx-reply>Thanks yeah, I have that further on in a Notes section","m.relates_to":{"m.in_reply_to":{"event_id":"$optpfECmJBCJ5TDf8lPFRuL9C59L88QMhkqv0CyO-iQ"}},"msgtype":"m.text"},"ts":1643249432645,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$rc_FX1wF5lB76-he7nJzHmByjxtWW6Ytuue_9aTWT6w"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n> `1`. See the  \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br>\n<a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus \n> `1`. See the  \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br>\n<a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249501132,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$hFGmCi99OGVN821DDKIifyF-_NpvOZ63VpZNwiu0vO4"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the\n> \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns\n> \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n> _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n> [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the</p>\n<p><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns</p>\n<p><code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the\n> \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns\n> \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as \n> **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a \n> _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the \n> [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the</p>\n<p><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns</p>\n<p><code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<br><strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a<br><em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the<br><a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249516578,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$PNwQXrv4yYX2cj6_m2XdULf3aVAO1oTqe6rDB-znz_Q"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> \n> \n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> \n> `1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a _reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index</p>\n</li>\n</ul>\n<p><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus</p>\n<p><code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n<ul>\n<li><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a <em>reference</em> to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249550354,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$2VLKfVWr7d1ysigOm_NcO6vK_8SvS3tuq_Q3DdSzqTY"},
{"content":{"body":"For clarity I might remove the negations in the first bullet - say what the arrays are rather than what they aren't?","msgtype":"m.text"},"ts":1643249565463,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$mE4NvW1GIa_E_XMmzHguYBOfTvdbq48SeekTxBBz4fE"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n>\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the<a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n>\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index`0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n>\n> - **JavaScript array-copy operations create shallow copies** — (just as**copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the[copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as<strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the<a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249586054,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$TKbSO8AcA1DXdLqT0hX2HSY3ux401-jwyzcUhOI4lwE"},
{"content":{"body":" * Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> `1`. See the \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with _any_ JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with <em>any</em> JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use \n> [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index\n> `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus\n> `1`. See the \n> [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns \n> `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with _any_ JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n> ","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use<br><a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index<br><code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<br><code>1</code>. See the<br><a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns<br><code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with <em>any</em> JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249636682,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$XSxSSUdDKVHWnUPZ9zdpHDIyb-1cjS1T6OY8e7Ww47E"},
{"content":{"body":" * Here’s what I have so far:\n>\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":" * <p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","m.new_content":{"body":"Here’s what I have so far:\n>\n> In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> \n> - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> \n> - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(&quot;Array.length&quot;, &quot;length&quot;)}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643249679750,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$f-k6tjiK0Ke6jWwYPhekwSx4CM51WK8Xgt1SP-IlypI"},
{"content":{"body":"> <@bterlson:matrix.org> For clarity I might remove the negations in the first bullet - say what the arrays are rather than what they aren't?\n\nOK, will give it a try that way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$mE4NvW1GIa_E_XMmzHguYBOfTvdbq48SeekTxBBz4fE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">@bterlson:matrix.org</a><br>For clarity I might remove the negations in the first bullet - say what the arrays are rather than what they aren&#39;t?</blockquote></mx-reply>OK, will give it a try that way","m.relates_to":{"m.in_reply_to":{"event_id":"$mE4NvW1GIa_E_XMmzHguYBOfTvdbq48SeekTxBBz4fE"}},"msgtype":"m.text"},"ts":1643249737814,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$iP__k1-4UYg0RVcqIH9fCfZ4RH9V9DDkkn1dlsgQfVY"},
{"content":{"body":"Maybe mention that array elements are object properties, and that an array can have other properties as well. Or maybe that's not 'core'.","msgtype":"m.text"},"ts":1643249777953,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$qYA57E-n1WsJ0quq2CX5ykP87DS_SbBQL_B7UbmYSyw"},
{"content":{"body":"> <@jmdyck:matrix.org> Maybe mention that array elements are object properties, and that an array can have other properties as well. Or maybe that's not 'core'.\n\nwill add that in the Notes section","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qYA57E-n1WsJ0quq2CX5ykP87DS_SbBQL_B7UbmYSyw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br>Maybe mention that array elements are object properties, and that an array can have other properties as well. Or maybe that&#39;s not &#39;core&#39;.</blockquote></mx-reply>will add that in the Notes section","m.relates_to":{"m.in_reply_to":{"event_id":"$qYA57E-n1WsJ0quq2CX5ykP87DS_SbBQL_B7UbmYSyw"}},"msgtype":"m.text"},"ts":1643250111672,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$QJjoba_8worEaSS6hCkTNU3aCI7eVaF1B5lTWFVUZPA"},
{"content":{"body":"Should it mention that JavaScript arrays are multidimensional?","msgtype":"m.text"},"ts":1643250460795,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$tYI9JTZx-JCfzObFZe3eYKeyvq7wU2-a42Ml8hMHTyE"},
{"content":{"body":"hmm I guess not","msgtype":"m.text"},"ts":1643250496251,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$QlXsTltfpD-JLdhI2xAZlQRE7zj7_BKvjIfyyVPlGGk"},
{"content":{"body":"they are not, though","msgtype":"m.text"},"ts":1643250498485,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$5d2bHVpngb_dXwtc7atwcuiTOUZ-6-5MXSnLoI45bSw"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1643250506589,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$ZCcw07kCEoQYYGQnr1xGNzRQZK5xqxFt9gEZZzH9pl4"},
{"content":{"body":"you can nest arrays but that’s not what a multidimensional array is","msgtype":"m.text"},"ts":1643250518256,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$njWYSEbMkYkx9-NVCMzp1SbFKpBr-KCdb3lHX0u1UBA"},
{"content":{"body":"ah yeah OK","msgtype":"m.text"},"ts":1643250525094,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$UHzCjoexgak7UMxlaPvRA-zuML1xeIZ6LNz04A7TYiQ"},
{"content":{"body":"I think C# is the only language where I remember having seen multidimensional arrays 🤔","msgtype":"m.text"},"ts":1643250582901,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$8pnvrQYsZqpV_D_B-oARefHrC4oIc4SYG5nsikOaeH0"},
{"content":{"body":"yeah I meant in the sense that you can have an array of arrays — but I guess that’s true of pretty much any other language too","msgtype":"m.text"},"ts":1643250588330,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Zz-NetCC2wthxfSNQLm8AjcHL7dSGwOZ4Sl5bXkfB8A"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1643250595833,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$WTB4w7pKi2ispAbCPhXsEQKE-7TJCJS7iszoaJSiUrU"},
{"content":{"body":"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays","msgtype":"m.text"},"ts":1643250614715,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$JmvDJASqQA7cu_azcJx-7lIf-baSo5WGAOK82Y3KAMk"},
{"content":{"body":"nested arrays in C# conversely are https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays","msgtype":"m.text"},"ts":1643250660802,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$byL17oW-eBJ9NXlcWLohpM0K2OSsW3RfxzNWosbSYsQ"},
{"content":{"body":"they have different memory layouts and algorithmic complexity","msgtype":"m.text"},"ts":1643250694896,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$_cxd_5diNIgMlE3Ro74F4MMf0_HJFQmAXJmZRmM_KGw"},
{"content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# is a bit of an outlier, as it has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, multidimensional arrays are more useful -- they describe what they are. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"ts":1643274611886,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# is a bit of an outlier, as it has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, multidimensional arrays are more useful -- they describe what they are. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# is a bit of an outlier, as it has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, multidimensional arrays are more useful -- they describe what they are. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643274689954,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3jBEMatyGYKqAfVANe2JYKE3SIi4is5NoQGf5vZ61Hs"},
{"content":{"body":"I am not super familiar with c#, but what they may have been trying to get across really was first class support for a matrix ++. A matrix is a well defined concept with associated algebraic transformations. You can represent one as a multidimensional array, but making it efficient would need certain adjustments that don't make sense for a simple array (which is the common case for most languages). This is a more tightly defined concept in my opinion than multidimensional array.","msgtype":"m.text"},"ts":1643275216630,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$umDGWwveL68spnv_XtMYiL6o1ZVaIkfiJXWVe_lszE0"},
{"content":{"body":" * I am not super familiar with c#, but what they may have been trying to get across really was first class support for a matrix ++. A matrix is a well defined concept with associated algebraic transformations. You can represent one as a multidimensional array, but making it efficient would need certain adjustments that don't make sense for a simple array (which is the common case for most languages). This is a more tightly defined concept in my opinion than multidimensional array.","m.new_content":{"body":"I am not super familiar with c#, but what they may have been trying to get across really was first class support for a matrix ++. A matrix is a well defined concept with associated algebraic transformations. You can represent one as a multidimensional array, but making it efficient would need certain adjustments that don't make sense for a simple array (which is the common case for most languages). This is a more tightly defined concept in my opinion than multidimensional array.","msgtype":"m.text"},"m.relates_to":{"event_id":"$umDGWwveL68spnv_XtMYiL6o1ZVaIkfiJXWVe_lszE0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643275366435,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$z51MK_MpYfJgtWBY2gkMfNfpTfQt3XKi8hcRnnrn5cM"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, multidimensional arrays are more useful -- they describe what they are. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, multidimensional arrays are more useful -- they describe what they are. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643275503746,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_0VqJIIdKATZ6rQ6UB6JDPtbHGB6BbW9oCDPi6oi8Ak"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, i we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful -- it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, i we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful -- it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643275544132,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$M7SKKAuT0RXoDItDKZ-3nAihDtXXwUPRPEIQcEU0fw8"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643275785202,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$SfI1lc3JDcMCB69IGUid9HOI0WOiuGo3KoJhYRcii8k"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  C# has first class support and optimization for multidimensional arrays. Jagged arrays are a unique distinction in that language compared to others, as in most languages those two are used interchangeably due to sharing an implementation. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643276022809,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dVWfNeN7oUIYU3V4eF0zncaGLHDi60BSQAjypaezzkY"},
{"content":{"body":" * As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643276231088,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$py22G167klAs-X_bwOTq8G_nePGDICniMzgZ15Bze9U"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> Here’s what I have so far:\n> >\n> > In JavaScript, arrays are not [primitives](https://chat.mozilla.org/en-US/docs/Glossary/Primitive) but are instead represented with `Array` objects, which have the following core characteristics:\n> > - **JavaScript arrays are not fixed-length and not restricted to containing a single data type** but can have a mix of data types. (When those characteristics are undesirable, use [typed arrays](https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) instead.)\n> > \n> > - **JavaScript arrays are zero-indexed**: the first element of a JavaScript array is at index `0`, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus`1`. See the [access an array item by its index](https://chat.mozilla.org/#access_an_array_item_by_its_index) example. Using an invalid or out-range index number returns `undefined`.\n> > \n> > - **JavaScript array-copy operations create shallow copies** — (just as **copy operations with any JavaScript objects create shallow copies**): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the [copy an array](https://chat.mozilla.org/#copy_an_array) examples.\n\n> \"In JavaScript, arrays are not primitives but are instead represented with Array objects\"\n\nThis reminds me of when I was first learning to program, in JS. And it was a while before I realized that arrays and regexes are '_just_ objects', in my mind because they had a literal version that meant they were a primitive","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br><p>Here’s what I have so far:</p>\n<blockquote>\n<p>In JavaScript, arrays are not <a href=\"https://chat.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> but are instead represented with <code>Array</code> objects, which have the following core characteristics:</p>\n<ul>\n<li>\n<p><strong>JavaScript arrays are not fixed-length and not restricted to containing a single data type</strong> but can have a mix of data types. (When those characteristics are undesirable, use <a href=\"https://chat.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">typed arrays</a> instead.)</p>\n</li>\n<li>\n<p><strong>JavaScript arrays are zero-indexed</strong>: the first element of a JavaScript array is at index <code>0</code>, and the last element is at the value of the array's {{jsxref(\"Array.length\", \"length\")}} property minus<code>1</code>. See the <a href=\"https://chat.mozilla.org/#access_an_array_item_by_its_index\">access an array item by its index</a> example. Using an invalid or out-range index number returns <code>undefined</code>.</p>\n</li>\n<li>\n<p><strong>JavaScript array-copy operations create shallow copies</strong> — (just as <strong>copy operations with any JavaScript objects create shallow copies</strong>): assigning an existing array to a new variable does not create a copy. Instead the new variable contains a_reference_ to the original array. If you change a value in the original array, it will be reflected in the new array. See the <a href=\"https://chat.mozilla.org/#copy_an_array\">copy an array</a> examples.</p>\n</li>\n</ul>\n</blockquote>\n</blockquote></mx-reply><blockquote>\n<p>&quot;In JavaScript, arrays are not primitives but are instead represented with Array objects&quot;</p>\n</blockquote>\n<p>This reminds me of when I was first learning to program, in JS. And it was a while before I realized that arrays and regexes are '<em>just</em> objects', in my mind because they had a literal version that meant they were a primitive</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$sU39hE5y640tumOrMtZA-u7gCqRze-YNDE7Ol8ptQ_4"}},"msgtype":"m.text"},"ts":1643276615584,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Mm6kiAD90CUBMXQk1VyN1VFgSP7-b8VgIUbd_9MxDd0"},
{"content":{"body":"I like to hold onto these memories","msgtype":"m.text"},"ts":1643276639972,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cnhodv4HF3RKvTcJylUIW36SjPla5bxRa4TLoaH6510"},
{"content":{"body":"objects being the operative word 😬","msgtype":"m.text"},"ts":1643276728458,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$W6U7fbNIKtYZu0uzAdTqpqtl_BLGc_-zNqjjMPQYCQI"},
{"content":{"body":"I guess, i would also link what an object is there. It may be useful to have a page on javascript types and the weirdness that is 'everything is an object'","msgtype":"m.text"},"ts":1643276818409,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$9fUAd5dneybPBMWgCyLT4aDsL8fF3jzkpVk3LmL7ioQ"},
{"content":{"body":"I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":"<p>I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","msgtype":"m.text"},"ts":1643277131044,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$bX_vlCkjP4kULN7aW09KI_fwbVdczeP6J2C_ush9APc"},
{"content":{"body":" * I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":" * <p>I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","m.new_content":{"body":"I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":"<p>I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any javascript value, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$bX_vlCkjP4kULN7aW09KI_fwbVdczeP6J2C_ush9APc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643277159589,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$i99y_ycKGj-70rfCA9IQuZI4rlj1sjEzSnLlabqEsNY"},
{"content":{"body":" * I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":" * <p>I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","m.new_content":{"body":"I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":"<p>I think that, if you don't want to explicitly call out matrices (which i don't think is a good idea, we don't give any real support for it, you have to do it yourself), then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$bX_vlCkjP4kULN7aW09KI_fwbVdczeP6J2C_ush9APc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643277193265,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AekfS6ybwIuCf5aFb1-GLeOzoURfqvRW_jATZK-f_Gg"},
{"content":{"body":" * I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered indicies as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered indicies as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643279490277,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1CkCe0NbOyiiL7eLxHB-cTQt5dKD8zaB-yTTMsDh3gA"},
{"content":{"body":" * I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c, python, javascript etc, or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643279499189,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e1Bn_lKQnTQTuhgXvdvnJq1p_nxhfSDhe69Z4gbW-Mo"},
{"content":{"body":" * I think that, if you don't want to explicitly call out arrays-in-arrays, then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":" * <p>I think that, if you don't want to explicitly call out arrays-in-arrays, then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","m.new_content":{"body":"I think that, if you don't want to explicitly call out arrays-in-arrays, then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":"<p>I think that, if you don't want to explicitly call out arrays-in-arrays, then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$bX_vlCkjP4kULN7aW09KI_fwbVdczeP6J2C_ush9APc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643279551399,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ofh4lD3ScGJxLgksT_HrFJf03tOeefdB11el7CrXcaY"},
{"content":{"body":" * I think that, if you don't want to explicitly call out arrays-in-arrays and the things that can represent, then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":" * <p>I think that, if you don't want to explicitly call out arrays-in-arrays and the things that can represent, then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","m.new_content":{"body":"I think that, if you don't want to explicitly call out arrays-in-arrays and the things that can represent, then this line covers it\n> JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.\n\nIt could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.","format":"org.matrix.custom.html","formatted_body":"<p>I think that, if you don't want to explicitly call out arrays-in-arrays and the things that can represent, then this line covers it</p>\n<blockquote>\n<p>JavaScript arrays are not fixed-length and not restricted to containing a single data type but can have a mix of data types.</p>\n</blockquote>\n<p>It could something to the effect that '... and can hold any mix of javascript values, including primitives, objects, functions, and other arrays'. If someone is learning about arrays for the first time, multidimensional sounds complicated. The flexibility should be explicit.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$bX_vlCkjP4kULN7aW09KI_fwbVdczeP6J2C_ush9APc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643279610013,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$KIHLIBrPG_K_Ym_Rg08tL8VHzGqfAcdaXYbUC5aeYeM"},
{"content":{"body":" * I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c or as a dedicated constructor/layout as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643281115580,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$co0X3XciKLX4UzxMNGETbH-jevhMrs6d5hAAJ07ZO20"},
{"content":{"body":" * I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c or as a dedicated named constructor as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","m.new_content":{"body":"I guess it really depends on what you want to communicate. Arrays in JS are objects with numbered fields as an implementation, but we wouldn't say that JavaScript doesn't have Arrays. As a concept, rather than an implementation, Multidimensional arrays are arrays with multiple dimensions. That can be represented as an array of arrays as in c or as a dedicated named constructor as in c#. Everything that can be represented in C# as a multidimensional array can be represented as an array of arrays where each sub array is of the same length. \n\nThis difference is of implementation rather than of concept. A good discussion of different representations of this concept can be found here: https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/ -- a single implementation isn't the right one for all cases.  With regards to terminology, Jagged arrays are a unique distinction in C# that is not commonly used in other languages, especially where there is no implementation distinction. For documentation purposes, if we need to say that javascript can, for example, represent a matrix, then the term multidimensional arrays is more useful as it is descriptive. \"jagged\" is less useful without first defining multidimensional, as it describes (in short hand, relative to the other datastructure) how it is different from a classic multidimensional array. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$y6FRT3tGBzDIsujUAZ75pIW3AnW9vV1b0nHJf3ift9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643281241699,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$F_CSeTx3ike941zCXXLsuiHnLTLvRU9iESxScBCH4tU"},
{"content":{"body":"the usual way of doing multidimensional arrays on languages without the distinction between multidimensional and jagged arrays actually is to use stride (aka pitch); you probably saw something about it if you ever did 2d graphics\n\nnested arrays are actually pretty weird as far as representing “data with multiple dimensions” go, or at least I wouldn’t consider, say, an array of pairs an n-by-2 multidimensional array\n\nthis is more of a philosophical discussion, though 😇","format":"org.matrix.custom.html","formatted_body":"<p>the usual way of doing multidimensional arrays on languages without the distinction between multidimensional and jagged arrays actually is to use stride (aka pitch); you probably saw something about it if you ever did 2d graphics</p>\n<p>nested arrays are actually pretty weird as far as representing “data with multiple dimensions” go, or at least I wouldn’t consider, say, an array of pairs an n-by-2 multidimensional array</p>\n<p>this is more of a philosophical discussion, though 😇</p>","msgtype":"m.text"},"ts":1643281919201,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$zYH374ht1IZg0zIcCOElkvsetlVE1syyBogRa0i8d3Y"},
{"content":{"body":"yep, agreed!","msgtype":"m.text"},"ts":1643281958248,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$SlFXy8UlXA3dhdJeJLBh0wxHLDHmg958kDs6jEgTQ_I"},
{"content":{"body":"when it comes to communicating with learners i would go for simpler language in any case.","msgtype":"m.text"},"ts":1643282008162,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$XIXvKYRi2M3nidPtVTKSxjySn_yx3tvKe3muab7NI9Y"},
{"content":{"body":"we had a proposal to introduce stride to typed arrays, but it isn't going forwards for a few reasons","msgtype":"m.text"},"ts":1643282071371,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oHFvUGpjRQpB7zmzJICJ9hhbDfmlheTK_j8WGfwNwRM"},
{"content":{"body":" * we had a proposal to introduce stride to typed arrays, but it isn't going forwards for a few reasons","m.new_content":{"body":"we had a proposal to introduce stride to typed arrays, but it isn't going forwards for a few reasons","msgtype":"m.text"},"m.relates_to":{"event_id":"$oHFvUGpjRQpB7zmzJICJ9hhbDfmlheTK_j8WGfwNwRM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643282077475,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JAOmFae2xzD9yNnuAwxvOLyj6WsTHemLXCar0zbUXv0"},
{"content":{"body":"thanks all for the feedback about the `Array` article","format":"org.matrix.custom.html","formatted_body":"thanks all for the feedback about the <code>Array</code> article","msgtype":"m.text"},"ts":1643290475969,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$FbHhDdzcDb_dvOzLY06mfV1412JuKjnqlzr8rMHjMd8"},
{"content":{"body":"another thing I’ve run into with the rewrite is, at MDN we lack a good explanation of what a “shallow copy” is, specifically for JavaScript objects","msgtype":"m.text"},"ts":1643290539524,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$5EHb1Ku2Xzw_rCHU0Syk_IXGPWp1vXDoCMiWEfqGZGE"},
{"content":{"body":"so as part of that, I have question: Is it accurate to state something like, *“JavaScript objects can contain two broad types of things: primitives, and references to objects”* ?","format":"org.matrix.custom.html","formatted_body":"so as part of that, I have question: Is it accurate to state something like, <em>“JavaScript objects can contain two broad types of things: primitives, and references to objects”</em> ?","msgtype":"m.text"},"ts":1643290642441,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$WAalkRWpZGSfTJ4Em9CxQL7seH7_bvM6OVetSAs7kGs"},
{"content":{"body":"in other words, is any object member actually a reference to an object? — including one that’s an object literal? (rather than a variable)","msgtype":"m.text"},"ts":1643290733671,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$0AlS0dO9WNAbHDFriKNbvu_OOLn3GHdF-InqZD4UReo"},
{"content":{"body":"for example, in `let foo = [\"bar\",  { \"hoge\": \"moge\" }]`, is the second array member actually a _reference_ to a `{\"hoge\": \"moge\"}` object?","format":"org.matrix.custom.html","formatted_body":"for example, in <code>let foo = [&quot;bar&quot;,  { &quot;hoge&quot;: &quot;moge&quot; }]</code>, is the second array member actually a <em>reference</em> to a <code>{&quot;hoge&quot;: &quot;moge&quot;}</code> object?","msgtype":"m.text"},"ts":1643290907402,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$r9qDL2U_jzPOJedla-pLyHCxlvFOtAa-isnNsMGs1mA"},
{"content":{"body":"That's right","msgtype":"m.text"},"ts":1643291270249,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$HCWyKE31Qj4vbJSvpt7PF6VTA59u1M5dCUFBlOw2rEw"},
{"content":{"body":"But IMO I'm not sure treating primitives and references as two separate things is necessarily the best model, at least for beginners","msgtype":"m.text"},"ts":1643291304209,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$kcFZHox8jdcvwVLWvzDSItgcYFMjVS5p8FeBgtPFodY"},
{"content":{"body":"You can treat primitives as essentially immutable interned references","msgtype":"m.text"},"ts":1643291330755,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$iVnLvqZZMe48YYS7FnlXFaYcmjKuXiCIRRbg7wdVdGQ"},
{"content":{"body":"That doesn't work with, say, proxies, but we're talking beginners","msgtype":"m.text"},"ts":1643291367781,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$kgjYbGMfkzyDejahtYFzt0BbtY1dXbbBPkktoFu9b80"},
{"content":{"body":"I wonder if explaining interned references might be more than needed for beginners, in the context of this","msgtype":"m.text"},"ts":1643292256794,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$et2a5IxSPqBfFt2sQIB0jfJ63FfYGEfRtGjOjIihFeQ"},
{"content":{"body":"I quite like the model described by the JustJavascript course. How everything is a value and objects can point to other values. ","format":"org.matrix.custom.html","formatted_body":"I quite like the model described by the JustJavascript course. How everything is a value and objects can point to other values.","msgtype":"m.text"},"ts":1643292486706,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$soN_IG3RUAP2jRf13CqQCJ2g51xcc_49y0TdS4KlMP8"}
]