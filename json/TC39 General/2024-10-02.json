[
{"content":{"body":"wait I don't think I realized that it's legal to return random crap from a constructor","m.mentions":{},"msgtype":"m.text"},"ts":1727847369957,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2pVSmQ8AvBh-ZXAdemfGNSRVuSU1lePZQhjMzYqYFWI"},
{"content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` in an uninstantiable class then? (in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> in an uninstantiable class then? (in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"msgtype":"m.text"},"ts":1727847442625,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM"},
{"content":{"body":"does that have a non-illegitimate usage?","m.mentions":{},"msgtype":"m.text"},"ts":1727847459164,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$85wBVdwjt3TVutTS8sTRk_kfdNkt0Fjf1R5O-e5Ca3o"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847482907,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2LzxnIpvPIRbEDqh2qB1nzhbb4smRollN2cKNC7NtcQ"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\" and you could only access `foo` via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\" and you could only access <code>foo</code> via <code>C.prototype</code>)","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\" and you could only access `foo` via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\" and you could only access <code>foo</code> via <code>C.prototype</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847544984,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$aDlUreuOmZ4mKmpNT8oORIgeHIfxDKkEYP92B9G0Rd0"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\", so `foo` could only be accessed via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\", so <code>foo</code> could only be accessed via <code>C.prototype</code>)","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\", so `foo` could only be accessed via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\", so <code>foo</code> could only be accessed via <code>C.prototype</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847602974,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o8Y2oeOpFuhtbGqPChtQmEV1W_IcpmSyZ4pXj1tElE4"}
]