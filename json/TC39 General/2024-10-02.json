[
{"content":{"body":"wait I don't think I realized that it's legal to return random crap from a constructor","m.mentions":{},"msgtype":"m.text"},"ts":1727847369957,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2pVSmQ8AvBh-ZXAdemfGNSRVuSU1lePZQhjMzYqYFWI"},
{"content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` in an uninstantiable class then? (in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> in an uninstantiable class then? (in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"msgtype":"m.text"},"ts":1727847442625,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM"},
{"content":{"body":"does that have a non-illegitimate usage?","m.mentions":{},"msgtype":"m.text"},"ts":1727847459164,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$85wBVdwjt3TVutTS8sTRk_kfdNkt0Fjf1R5O-e5Ca3o"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\")","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\")","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847482907,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2LzxnIpvPIRbEDqh2qB1nzhbb4smRollN2cKNC7NtcQ"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\" and you could only access `foo` via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\" and you could only access <code>foo</code> via <code>C.prototype</code>)","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\" and you could only access `foo` via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\" and you could only access <code>foo</code> via <code>C.prototype</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847544984,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$aDlUreuOmZ4mKmpNT8oORIgeHIfxDKkEYP92B9G0Rd0"},
{"content":{"body":" * so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\", so `foo` could only be accessed via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":" * so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\", so <code>foo</code> could only be accessed via <code>C.prototype</code>)","m.mentions":{},"m.new_content":{"body":"so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n(in the sense that you can call `new C()` but you can never get \"a `C`\", so `foo` could only be accessed via `C.prototype`)","format":"org.matrix.custom.html","formatted_body":"so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\", so <code>foo</code> could only be accessed via <code>C.prototype</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727847602974,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o8Y2oeOpFuhtbGqPChtQmEV1W_IcpmSyZ4pXj1tElE4"},
{"content":{"body":"> <@rkirsling:matrix.org> so `class C { foo() { return 3; } constructor() { return [1]; } }` is an uninstantiable class then?\n> (in the sense that you can call `new C()` but you can never get \"a `C`\", so `foo` could only be accessed via `C.prototype`)\n\nReturning an object is valid.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br />so <code>class C { foo() { return 3; } constructor() { return [1]; } }</code> is an uninstantiable class then?<br>(in the sense that you can call <code>new C()</code> but you can never get \"a <code>C</code>\", so <code>foo</code> could only be accessed via <code>C.prototype</code>)</blockquote></mx-reply>Returning an object is valid.","m.relates_to":{"m.in_reply_to":{"event_id":"$dzl7DuLTI2j-bA-ZKedDAM683xgHewitiQrydbAoiSM"}},"msgtype":"m.text"},"ts":1727882126788,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$z4s_wQZuIXVqyA2-EPuoGfqyRCdeR8jii06r-S0_buM"},
{"content":{"body":"it is valid code, yes, otherwise I wouldn't be talking about it lol","msgtype":"m.text"},"ts":1727882207222,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Ex-H34PUqL-b0BmFUH-qA-d0_QAnYY0RZISKOjTxv2o"},
{"content":{"body":"depends on what you mean by \"illegitimate\". i believe the functionality is there so you could match es5-style \"classes\" which did the same thing. also lets you wrap the return value in a Proxy or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1727882346972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$htslZV5AUHwBlm3T3XNRWDdBKPvwTWKJH-cAuUOfbXs"},
{"content":{"body":"these days the only real use I see for it is to stamp private fields on existing objects (`class id { constructor(x){ return x } }; class stamp { #priv; constructor(o){ super(o) } }; new stamp(foo); // foo now has .#priv`","format":"org.matrix.custom.html","formatted_body":"these days the only real use I see for it is to stamp private fields on existing objects (<code>class id { constructor(x){ return x } }; class stamp { #priv; constructor(o){ super(o) } }; new stamp(foo); // foo now has .#priv</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727882431769,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$--oOaVj9BKofvYCPu4UZUTKm94sGrZWYnR5hlELHo0A"},
{"content":{"body":"the \"return override trick\"","m.mentions":{},"msgtype":"m.text"},"ts":1727882436076,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1WYBJDABgqLGcuAhW0QjGQebaGeykf3DF1aRs8wJAC4"},
{"content":{"body":"but this is hateful and you shouldn't do it","m.mentions":{},"msgtype":"m.text"},"ts":1727882440225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LaN0Fd8yKogS2nyC3MvGFRiy6kKmPACNNDXd3U0mES8"},
{"content":{"body":"loathsome return override","m.mentions":{},"msgtype":"m.text"},"ts":1727883693407,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8ExX3hOGjBrbNmL173GnU_KBB48l2umhj1VI1Ap75u8"},
{"content":{"body":"yeah by legitimate I meant not hateful/loathsome ðŸ˜… thanks for confirming","msgtype":"m.text"},"ts":1727884891331,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o7ZjtS6Z2yHTm8zuj4ygcpycPEbCqVHfax36kgK1tR4"},
{"content":{"body":"I learned this from Shu's Shared Structs deck","msgtype":"m.text"},"ts":1727884914232,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$k-dDMNJB7f5ljG3ycj6MdCveA9JQvgGdPU71n1MH6VI"},
{"content":{"body":"* (I learned this from Shu's Shared Structs deck)","m.new_content":{"body":"(I learned this from Shu's Shared Structs deck)","msgtype":"m.text"},"m.relates_to":{"event_id":"$k-dDMNJB7f5ljG3ycj6MdCveA9JQvgGdPU71n1MH6VI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727884923112,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$X56BVi5asXjh2FLbAi8fAc4Ry1IIxe-d9w0_udpQVqE"}
]