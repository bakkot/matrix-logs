[
{"content":{"body":"danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> / <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: The new What's Changed Since RC/Beta in the TS release notes are üëç","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> / <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: The new What's Changed Since RC/Beta in the TS release notes are üëç","mimetype":"text/html"}]},"ts":1646096147607,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WFDpgyFgJAlJ-Gw27OfkqLKO5wOtv47NxKIIB5Y94TU"},
{"content":{"body":"Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?","msgtype":"m.text","org.matrix.msc1767.text":"Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?"},"ts":1646099265044,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4"},
{"content":{"body":"\"intuitive shared state\" is a contradiction in terms","msgtype":"m.text","org.matrix.msc1767.text":"\"intuitive shared state\" is a contradiction in terms"},"ts":1646099708758,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s-3R3LfGBpPS02Ks8btuGTKRWHMHqOYhSNnlu4gOVz0"},
{"content":{"body":"the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday","msgtype":"m.text","org.matrix.msc1767.text":"the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday"},"ts":1646099751018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EeV0VBN1e-p8fmWcrnHrgEQiCqi-1vUtW2EGC66ZcsY"},
{"content":{"body":"or, well, not there precisely, but somewhere like it","msgtype":"m.text","org.matrix.msc1767.text":"or, well, not there precisely, but somewhere like it"},"ts":1646099763616,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U4dP3gDEYO83hpHZUg2x5eGXzVM6ImXXPkHiZqgT8S8"},
{"content":{"body":"> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?\n\nwe're on the route of that. ü§î\nsearch for those proposals:\n- struct (shared struct section)\n- module block","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Question. Possibly I&#39;m not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I&#39;ve done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?</blockquote></mx-reply><p>we're on the route of that. ü§î<br>search for those proposals:</p>\n<ul>\n<li>struct (shared struct section)</li>\n<li>module block</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?\n\nwe're on the route of that. ü§î\nsearch for those proposals:\n- struct (shared struct section)\n- module block","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Question. Possibly I&#39;m not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I&#39;ve done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?</blockquote></mx-reply><p>we're on the route of that. ü§î<br>search for those proposals:</p>\n<ul>\n<li>struct (shared struct section)</li>\n<li>module block</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1646101163514,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9lHmQ4eLAGSWYvI1C7NRKQXPx5_37F_jzyiTmmdbEYQ"},
{"content":{"body":"> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?\n> ```\n> $ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding => [\"()\", \"(..._)\", \"(_=0)\"].map(params => { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> object    // function(..._){return typeof arguments; var arguments}\n> object    // function(_=0){return typeof arguments; var arguments}\n> \n> #### V8\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> undefined // function(..._){return typeof arguments; var arguments}\n> undefined // function(_=0){return typeof arguments; var arguments}\n> ```\n\nTracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?</p>\n<pre><code>$ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding =&gt; [\"()\", \"(..._)\", \"(_=0)\"].map(params =&gt; { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n#### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nobject    // function(..._){return typeof arguments; var arguments}\nobject    // function(_=0){return typeof arguments; var arguments}\n\n#### V8\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nundefined // function(..._){return typeof arguments; var arguments}\nundefined // function(_=0){return typeof arguments; var arguments}\n</code></pre>\n</blockquote></mx-reply>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations","m.relates_to":{"m.in_reply_to":{"event_id":"$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?\n> ```\n> $ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding => [\"()\", \"(..._)\", \"(_=0)\"].map(params => { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> object    // function(..._){return typeof arguments; var arguments}\n> object    // function(_=0){return typeof arguments; var arguments}\n> \n> #### V8\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> undefined // function(..._){return typeof arguments; var arguments}\n> undefined // function(_=0){return typeof arguments; var arguments}\n> ```\n\nTracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?</p>\n<pre><code>$ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding =&gt; [\"()\", \"(..._)\", \"(_=0)\"].map(params =&gt; { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n#### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nobject    // function(..._){return typeof arguments; var arguments}\nobject    // function(_=0){return typeof arguments; var arguments}\n\n#### V8\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nundefined // function(..._){return typeof arguments; var arguments}\nundefined // function(_=0){return typeof arguments; var arguments}\n</code></pre>\n</blockquote></mx-reply>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations","mimetype":"text/html"}]},"ts":1646102516618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bjSbF-2vIGESyGns1Bw8NvuOr1DGNPtYI5-HcaGDNVg"},
{"content":{"body":"Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just \"work\" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API.","msgtype":"m.text","org.matrix.msc1767.text":"Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just \"work\" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API."},"ts":1646102551371,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Ie8KzfiMda_raF0XpaLzmncUfb2cpIZJHU42TKqfMwY"},
{"content":{"body":"SABs are the single most \"handle with care\" part of the entire language, especially when used without atomics; making it so that every single thing in the language behaved like that would be... not an idea I'd endorse, to put it lightly, and I imagine that's a common sentiment among the committee","msgtype":"m.text","org.matrix.msc1767.text":"SABs are the single most \"handle with care\" part of the entire language, especially when used without atomics; making it so that every single thing in the language behaved like that would be... not an idea I'd endorse, to put it lightly, and I imagine that's a common sentiment among the committee"},"ts":1646102712310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xD9XQSpyI0wNXXHMfPoFZeOn4uM0zaVA7cg5oJRYrGg"},
{"content":{"body":"Like, just getting the memory model right for SABs was incredibly complicated, and not without bugs; see e.g. https://github.com/tc39/ecma262/issues/1680 https://github.com/tc39/ecma262/issues/2231 https://github.com/tc39/ecma262/pull/1511","msgtype":"m.text","org.matrix.msc1767.text":"Like, just getting the memory model right for SABs was incredibly complicated, and not without bugs; see e.g. https://github.com/tc39/ecma262/issues/1680 https://github.com/tc39/ecma262/issues/2231 https://github.com/tc39/ecma262/pull/1511"},"ts":1646102792295,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9GFXW5ZJGtmGtER83-l4lmQJzlsfKMDi_ZhPsTWItTs"},
{"content":{"body":"and that's the _simple_ case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","format":"org.matrix.custom.html","formatted_body":"and that's the <em>simple</em> case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and that's the _simple_ case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","mimetype":"text/plain"},{"body":"and that's the <em>simple</em> case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","mimetype":"text/html"}]},"ts":1646102812305,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tdyBKkmgB6gpRSvtO1-jKGa885ummZ3OIompB4un5-g"},
{"content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"ts":1646102983636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s"},
{"content":{"body":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","m.new_content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"m.relates_to":{"event_id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"ts":1646102998546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x_RJCKhsnYwzBVuXU6t1pSTvFYqlHJt_rk2YyD2E4N8"},
{"content":{"body":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)","m.new_content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)"},"m.relates_to":{"event_id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)"},"ts":1646103007307,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Us760k75tOENxC1hNAfqoJXbVi-Gcbsynf_a6mwrDBg"},
{"content":{"body":"I meant incrementing in other threads. My general thinking is I'd like for SharedArrayBuffer to be deprecated such that a variable and thread system works more like C++. In this case everything is handled with care implied. Was talking to someone about my type proposal/notes and they commented that you can't just create say an integer in the main thread and increment it in multiple threads (with atomics). In this setup you'd be able to do things like swap two object references atomically or set a variable object atomically. It definitely would be very complex to implement, but for the user they could just call functions to create threads and implement parallelism without any extra sugar (wrapping of objects, functions, variables).","msgtype":"m.text","org.matrix.msc1767.text":"I meant incrementing in other threads. My general thinking is I'd like for SharedArrayBuffer to be deprecated such that a variable and thread system works more like C++. In this case everything is handled with care implied. Was talking to someone about my type proposal/notes and they commented that you can't just create say an integer in the main thread and increment it in multiple threads (with atomics). In this setup you'd be able to do things like swap two object references atomically or set a variable object atomically. It definitely would be very complex to implement, but for the user they could just call functions to create threads and implement parallelism without any extra sugar (wrapping of objects, functions, variables)."},"ts":1646103883339,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$6Un6XmokakkchIvtgonk2wxLD9V1QlNUCHkcg7kr230"},
{"content":{"body":"also, not everyone on the committee :cough: is convinced that threads are \"not incredibly harmful\" :-)","msgtype":"m.text","org.matrix.msc1767.text":"also, not everyone on the committee :cough: is convinced that threads are \"not incredibly harmful\" :-)"},"ts":1646103906557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FPi7fU35xspUNP_NZbIG1pG1tDAaipdT3dswY7SuDHw"},
{"content":{"body":"I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.","msgtype":"m.text","org.matrix.msc1767.text":"I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads."},"ts":1646104128643,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68"},
{"content":{"body":"As a rule we don't usually introduce features only intended to be used in toy projects, particularly when they have sharp edges","msgtype":"m.text","org.matrix.msc1767.text":"As a rule we don't usually introduce features only intended to be used in toy projects, particularly when they have sharp edges"},"ts":1646104177328,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$azYJMWIKwjvxqYlsuQBb3mr_BJ8TU6yfw4rt0iQkIPo"},
{"content":{"body":"and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades","msgtype":"m.text","org.matrix.msc1767.text":"and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades"},"ts":1646104212960,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s"},
{"content":{"body":"> <@bakkot:matrix.org> and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades\n\nso how u think about the shared structs proposal?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and shared-memory parallelism isn&#39;t just a sharp edge, it&#39;s an entire box of rusty razor blades</blockquote></mx-reply>so how u think about the shared structs proposal?","m.relates_to":{"m.in_reply_to":{"event_id":"$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades\n\nso how u think about the shared structs proposal?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and shared-memory parallelism isn&#39;t just a sharp edge, it&#39;s an entire box of rusty razor blades</blockquote></mx-reply>so how u think about the shared structs proposal?","mimetype":"text/html"}]},"ts":1646104244440,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$bRIrAmPZDuc8M4PGFadLlIdxwhJ7szvooWJqvPaI5xU"},
{"content":{"body":"Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","mimetype":"text/html"}]},"ts":1646104321716,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo"},
{"content":{"body":"it's carefully designed so that the shared memory parts are constrained to the struct and its references, and doesn't get out into the rest of your program, which is the only thing which makes it even conceivably a good idea","msgtype":"m.text","org.matrix.msc1767.text":"it's carefully designed so that the shared memory parts are constrained to the struct and its references, and doesn't get out into the rest of your program, which is the only thing which makes it even conceivably a good idea"},"ts":1646104394651,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wXdxoE0IMk4R7HS2G8IoL3MME8bFCANLMvZo4DsMydA"},
{"content":{"body":"that is, I agree with the readme:\n\n> Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.","format":"org.matrix.custom.html","formatted_body":"<p>that is, I agree with the readme:</p>\n<blockquote>\n<p>Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that is, I agree with the readme:\n\n> Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.","mimetype":"text/plain"},{"body":"<p>that is, I agree with the readme:</p>\n<blockquote>\n<p>Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1646104432803,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bsmxn2MsuSHDR9F7ezlmzu6_MDUIRlsk6sfNBqbOIyM"},
{"content":{"body":"> <@bakkot:matrix.org> Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life\n\nonce it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life</blockquote></mx-reply>once it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","m.relates_to":{"m.in_reply_to":{"event_id":"$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life\n\nonce it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life</blockquote></mx-reply>once it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","mimetype":"text/html"}]},"ts":1646104436733,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$TBF2qVEQljEqUKrHbnU6NVQW6tX2NHlj69QUgpGJN-0"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1646104445084,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ay6ILBTvkL5FSa_LToNDrfWADMR7vU8B-NT1VIReLws"},
{"content":{"body":"seems bad","msgtype":"m.text","org.matrix.msc1767.text":"seems bad"},"ts":1646104447179,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rNuu4xOq3UlT-CP3aSAhA0SQ6cxhy199T8dBl8kr5qw"},
{"content":{"body":"lol","msgtype":"m.text","org.matrix.msc1767.text":"lol"},"ts":1646104451859,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$izyFmp8qVLpIq15VEk916oGMLwHMPZyuV-jkgt8cO5M"},
{"content":{"body":"if we actually think that's going to happen, it's probably not worth putting in the language","msgtype":"m.text","org.matrix.msc1767.text":"if we actually think that's going to happen, it's probably not worth putting in the language"},"ts":1646104455817,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8bJ5iCJzTtr8r-3onENpX-CEMsYDDM0brq6yKQEs_Sg"},
{"content":{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking _extremely_ carefully about it","format":"org.matrix.custom.html","formatted_body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking <em>extremely</em> carefully about it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking _extremely_ carefully about it","mimetype":"text/plain"},{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking <em>extremely</em> carefully about it","mimetype":"text/html"}]},"ts":1646104506585,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PyXX6V3bzKjVOawc30p23UxSHSyvMXIqFo_VDyppLPU"},
{"content":{"body":"no one use SAB+worker because it's too hard to create one than just following JS style of multi-thread programming ","msgtype":"m.text","org.matrix.msc1767.text":"no one use SAB+worker because it's too hard to create one than just following JS style of multi-thread programming "},"ts":1646104518687,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5JWC7So7OMPNWRAnYvv-AFOdbB-nhd5OQpgqvBobU8Q"},
{"content":{"body":"I use SABs...","msgtype":"m.text","org.matrix.msc1767.text":"I use SABs..."},"ts":1646104542800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6rfn5h2rA4t-ID4FlJSf8VgTYC3g6N6ycde6F8KEPP0"},
{"content":{"body":"but, you know, only after thinking extremely carefully about it","msgtype":"m.text","org.matrix.msc1767.text":"but, you know, only after thinking extremely carefully about it"},"ts":1646104562938,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5oVOioLxqVoq2zkfJr1740hRo29ZC5pUz6r9KJvPD2s"},
{"content":{"body":"and emscripten uses them to good effect as well","msgtype":"m.text","org.matrix.msc1767.text":"and emscripten uses them to good effect as well"},"ts":1646104573919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vr8u4ZvlUKyqXp-RpE2QNmUxJamykLgkL9VQWuZ_djk"},
{"content":{"body":"I think module blocks will make workers more popular in general, tbh","msgtype":"m.text","org.matrix.msc1767.text":"I think module blocks will make workers more popular in general, tbh"},"ts":1646104605896,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cIM7UAiaM9k7U_16PayOryLJdUJTFiwvusn2KkXDhvE"},
{"content":{"body":"> <@sirisian:matrix.org> I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.\n\nü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>I completely get that. I&#39;m migrating over to WebGPU for my current toy projects. Most of my applications were more &quot;spin up 8 threads because I can&#39;t use the GPU to compute this&quot; situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I&#39;m not sharing state between threads.</blockquote></mx-reply>ü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","m.relates_to":{"m.in_reply_to":{"event_id":"$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.\n\nü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>I completely get that. I&#39;m migrating over to WebGPU for my current toy projects. Most of my applications were more &quot;spin up 8 threads because I can&#39;t use the GPU to compute this&quot; situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I&#39;m not sharing state between threads.</blockquote></mx-reply>ü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","mimetype":"text/html"}]},"ts":1646104622815,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$e3249-8j1QKBdlOep1CdTmgaWxEpDDfSzAsbla6E1mw"},
{"content":{"body":"if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language","msgtype":"m.text","org.matrix.msc1767.text":"if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language"},"ts":1646104626434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg"},
{"content":{"body":"multi-threading is good!","msgtype":"m.text","org.matrix.msc1767.text":"multi-threading is good!"},"ts":1646104634140,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ofefdKO_awbWohg5ywsaeKc0NvglApmicHTVjYoN-Og"},
{"content":{"body":"\"being single-threaded\" is a feature, not a bug","msgtype":"m.text","org.matrix.msc1767.text":"\"being single-threaded\" is a feature, not a bug"},"ts":1646104634805,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg"},
{"content":{"body":"Well WebGPU makes it not a toy project technically since it's identical to an existing piece of software. The performance issue of doing the project with web workers made it very suboptimal compared to usual approaches (like much slower with limitations a GPU approach wouldn't have). The main idea though is taking a data structure and passing it through a pipeline where each operation is expensive. One could imagine say using the pipeline proposal and each function just calls a thread? yeah, that's probably close, but simplified.","msgtype":"m.text","org.matrix.msc1767.text":"Well WebGPU makes it not a toy project technically since it's identical to an existing piece of software. The performance issue of doing the project with web workers made it very suboptimal compared to usual approaches (like much slower with limitations a GPU approach wouldn't have). The main idea though is taking a data structure and passing it through a pipeline where each operation is expensive. One could imagine say using the pipeline proposal and each function just calls a thread? yeah, that's probably close, but simplified."},"ts":1646104636216,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$8ZA9dyFjZCfwarO7GnoUzPxdvtFTqU16j74iKFv4YeQ"},
{"content":{"body":"shared-memory multithreading is bad","msgtype":"m.text","org.matrix.msc1767.text":"shared-memory multithreading is bad"},"ts":1646104640962,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xnYOvE1smwSSv2oHvblqmtItxjF8QHoz4h7Ny69KEpU"},
{"content":{"body":"but multiple threads are good","msgtype":"m.text","org.matrix.msc1767.text":"but multiple threads are good"},"ts":1646104645919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rId3eKwIceLezWlIAWu7fdMoP1pQnKrgtgtYOlfYAB8"},
{"content":{"body":"CPUs have many cores","msgtype":"m.text","org.matrix.msc1767.text":"CPUs have many cores"},"ts":1646104658830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RVoN0x4KZmKpasHhUINW4jdsFWT6te_ELF6w3F1ZV2U"},
{"content":{"body":"i can agree that things that are observably the same as \"being single-threaded\" is good","msgtype":"m.text","org.matrix.msc1767.text":"i can agree that things that are observably the same as \"being single-threaded\" is good"},"ts":1646104663400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L85dT1klS6EFBLTqlQbMTqurxxH2_pXclASsEs7RWuE"},
{"content":{"body":"the thing i value is that things must act as if they're single-threaded. they can be faster than that if i can't tell the difference, and that's a good thing","msgtype":"m.text","org.matrix.msc1767.text":"the thing i value is that things must act as if they're single-threaded. they can be faster than that if i can't tell the difference, and that's a good thing"},"ts":1646104690593,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yf8MQKM-MT7lznoYDj9nsFFoa6GcCum9oiklzBq7MNc"},
{"content":{"body":"deliberately limiting your programming language so that it can't use more than 1/16th of the CPU seems like... bad","msgtype":"m.text","org.matrix.msc1767.text":"deliberately limiting your programming language so that it can't use more than 1/16th of the CPU seems like... bad"},"ts":1646104692630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RVq-xmWQDX_9fpln561P5M2uGrpiXmAhuOPHnDGhrcE"},
{"content":{"body":"I have a 12900k for reference. :|","msgtype":"m.text","org.matrix.msc1767.text":"I have a 12900k for reference. :|"},"ts":1646104708620,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$e6Pk5GDv7tj1_3_1EnG-MIzupH1CHwMBrzWpcpikYCI"},
{"content":{"body":"we shouldn't be optimizing for people with 12900ks","msgtype":"m.text","org.matrix.msc1767.text":"we shouldn't be optimizing for people with 12900ks"},"ts":1646104747801,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RwVdD_1RpdYYp3T-NcZZg0M6v5SjndqUA_edSOL5Y2I"},
{"content":{"body":"> <@ljharb:matrix.org> \"being single-threaded\" is a feature, not a bug\n\nthis goes too far. i support multi-thread by message passing, not memory sharing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>&quot;being single-threaded&quot; is a feature, not a bug</blockquote></mx-reply>this goes too far. i support multi-thread by message passing, not memory sharing","m.relates_to":{"m.in_reply_to":{"event_id":"$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> \"being single-threaded\" is a feature, not a bug\n\nthis goes too far. i support multi-thread by message passing, not memory sharing","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>&quot;being single-threaded&quot; is a feature, not a bug</blockquote></mx-reply>this goes too far. i support multi-thread by message passing, not memory sharing","mimetype":"text/html"}]},"ts":1646104764616,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dYgwPDlWGwSkxdK5ZmDtMxd7TvHLrI4h6dWJ22-AilU"},
{"content":{"body":"but even the cheapest android phones available have 4 cores these days","msgtype":"m.text","org.matrix.msc1767.text":"but even the cheapest android phones available have 4 cores these days"},"ts":1646104766333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x9pMCVj5ZTyrRrnM3EGM94bXuMax8rQRuluSH4X_cPQ"},
{"content":{"body":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","msgtype":"m.text","org.matrix.msc1767.text":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"ts":1646104883012,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc"},
{"content":{"body":" * We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","m.new_content":{"body":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","msgtype":"m.text","org.matrix.msc1767.text":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"m.relates_to":{"event_id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"ts":1646104895740,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$3sUYJdWCECutBYrPF6aMW2KAcmE2sdfcM5Ab_azfj_g"},
{"content":{"body":"actually I'm curious about, if Record&Tuple are shipped and highly optimized by the engine, does that make life easier?","msgtype":"m.text","org.matrix.msc1767.text":"actually I'm curious about, if Record&Tuple are shipped and highly optimized by the engine, does that make life easier?"},"ts":1646104922476,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$plWiZTRUmotAqPjqLh1MdVDzO55etDqqC3fNznzIx4I"},
{"content":{"body":"records and tuples are immutable so it doesn't much matter","msgtype":"m.text","org.matrix.msc1767.text":"records and tuples are immutable so it doesn't much matter"},"ts":1646104950437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jCbOUDTw8y564CwiiuvgWcVdDjWbt9lV_v5mpHU0Jmw"},
{"content":{"body":"we can pass immutable object/arrays with 0 serialization cost (engine can share the memory)","msgtype":"m.text","org.matrix.msc1767.text":"we can pass immutable object/arrays with 0 serialization cost (engine can share the memory)"},"ts":1646104957048,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$sqDlmJxHlDSicA0RyExLxxnERRBvt3HGkIuEHsWS2dU"},
{"content":{"body":"you'd still have to `postMessage` them, and you can do that with a plain object","format":"org.matrix.custom.html","formatted_body":"you'd still have to <code>postMessage</code> them, and you can do that with a plain object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you'd still have to `postMessage` them, and you can do that with a plain object","mimetype":"text/plain"},{"body":"you'd still have to <code>postMessage</code> them, and you can do that with a plain object","mimetype":"text/html"}]},"ts":1646104958197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y"},
{"content":{"body":"> <@bakkot:matrix.org> you'd still have to `postMessage` them, and you can do that with a plain object\n\nyeah, but that need a clone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you'd still have to <code>postMessage</code> them, and you can do that with a plain object</blockquote></mx-reply>yeah, but that need a clone","m.relates_to":{"m.in_reply_to":{"event_id":"$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> you'd still have to `postMessage` them, and you can do that with a plain object\n\nyeah, but that need a clone","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you'd still have to <code>postMessage</code> them, and you can do that with a plain object</blockquote></mx-reply>yeah, but that need a clone","mimetype":"text/html"}]},"ts":1646104970823,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$70p4xrppx6GkrNzJygarnZckNR80rBR4jXM7tfry-Ws"},
{"content":{"body":"yeah that's fair","msgtype":"m.text","org.matrix.msc1767.text":"yeah that's fair"},"ts":1646104974308,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mXyATjriMvs3OTvX4j-lmuc8_Q2sNEp5Iuv3g5u6WV8"},
{"content":{"body":"my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects","msgtype":"m.text","org.matrix.msc1767.text":"my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects"},"ts":1646105018057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78"},
{"content":{"body":"> <@pokute:matrix.org> We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé\n\nWeakMap[@@iterator]!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé</blockquote></mx-reply>WeakMap[@@iterator]!","m.relates_to":{"m.in_reply_to":{"event_id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pokute:matrix.org> We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé\n\nWeakMap[@@iterator]!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé</blockquote></mx-reply>WeakMap[@@iterator]!","mimetype":"text/html"}]},"ts":1646105031863,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZtZKJn6mzKXbNvaiNONgVB6iywwt210Nu_03C16WiII"},
{"content":{"body":"that's been proposed...","msgtype":"m.text","org.matrix.msc1767.text":"that's been proposed..."},"ts":1646105047494,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_zW142t9IfCA2petU3NUbJ8g0bXp7fqdodsea2eSEw"},
{"content":{"body":"you can do it yourself with weakrefs if you really want to","msgtype":"m.text","org.matrix.msc1767.text":"you can do it yourself with weakrefs if you really want to"},"ts":1646105054977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wluX9zzrWAa16-FoeRy4U2gd-6gBlS5zecBcub3fmIc"},
{"content":{"body":"but, like","msgtype":"m.text","org.matrix.msc1767.text":"but, like"},"ts":1646105056614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T5bw1FI4JcGxkreZmdyjTfnFQns4BozaJSVWsIaaop8"},
{"content":{"body":"don't","msgtype":"m.text","org.matrix.msc1767.text":"don't"},"ts":1646105057232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PeJgzHUBmaCsmIaUqkMu6Gf5sGNe28Gy8cTW1kNaL-4"},
{"content":{"body":"> <@bakkot:matrix.org> my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects\n\nüëÄ what's the common limit?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects</blockquote></mx-reply>üëÄ what's the common limit?","m.relates_to":{"m.in_reply_to":{"event_id":"$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects\n\nüëÄ what's the common limit?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects</blockquote></mx-reply>üëÄ what's the common limit?","mimetype":"text/html"}]},"ts":1646105111342,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ezpvEDhrFX2S9Q0D59pQjzJrXExG5gfVuyQahQoHCPM"},
{"content":{"body":"workers are annoying to create, mostly","msgtype":"m.text","org.matrix.msc1767.text":"workers are annoying to create, mostly"},"ts":1646105155423,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o69q5o5ZIwAtLL-Ol9ernlGsogdQUqAUBRLkf8H2lP8"},
{"content":{"body":"and postmessage is annoying to use","msgtype":"m.text","org.matrix.msc1767.text":"and postmessage is annoying to use"},"ts":1646105161347,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RRMlh9g71fedFWYGpOVw9L6FZCy2iLTCLJLCtKaBVKU"},
{"content":{"body":"you can't just `await` stuff without building some wrappers","format":"org.matrix.custom.html","formatted_body":"you can't just <code>await</code> stuff without building some wrappers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can't just `await` stuff without building some wrappers","mimetype":"text/plain"},{"body":"you can't just <code>await</code> stuff without building some wrappers","mimetype":"text/html"}]},"ts":1646105171469,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uCGXUvgzxi1hBJA_BDuN564ppxGrp1LQuxaKgHHT0WA"},
{"content":{"body":"> <@ljharb:matrix.org> if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language\n\nMy thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another \"thread\" with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language</blockquote></mx-reply>My thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another &quot;thread&quot; with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","m.relates_to":{"m.in_reply_to":{"event_id":"$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language\n\nMy thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another \"thread\" with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language</blockquote></mx-reply>My thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another &quot;thread&quot; with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","mimetype":"text/html"}]},"ts":1646105243324,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$P1fnZ7qC2B1q9S5mXICBNEXOozdtxD0dr-KrND5HrR0"},
{"content":{"body":"I think requiring memory-sharing in JS is like requiring imperative style programming in haskell ü§î","msgtype":"m.text","org.matrix.msc1767.text":"I think requiring memory-sharing in JS is like requiring imperative style programming in haskell ü§î"},"ts":1646105279220,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$o12L2GefFIdiw_eHhX9OEVkMzdBirWBe195VzG01W68"},
{"content":{"body":"you've got a lot of \"shoulds\" in there that seem pretty informed by C++ experience, which isn't something most JS programmers have or will ever have","msgtype":"m.text","org.matrix.msc1767.text":"you've got a lot of \"shoulds\" in there that seem pretty informed by C++ experience, which isn't something most JS programmers have or will ever have"},"ts":1646105281716,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HX3JtakPmRTXBIYQM2jhgRhpDljU8XULg2fxNcdh4xo"}
]