[
{"content":{"body":"danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> / <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: The new What's Changed Since RC/Beta in the TS release notes are üëç","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"danielrosenwasser / rbuckton: The new What's Changed Since RC/Beta in the TS release notes are üëç","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> / <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: The new What's Changed Since RC/Beta in the TS release notes are üëç","mimetype":"text/html"}]},"ts":1646096147607,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WFDpgyFgJAlJ-Gw27OfkqLKO5wOtv47NxKIIB5Y94TU"},
{"content":{"body":"Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?","msgtype":"m.text","org.matrix.msc1767.text":"Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?"},"ts":1646099265044,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4"},
{"content":{"body":"\"intuitive shared state\" is a contradiction in terms","msgtype":"m.text","org.matrix.msc1767.text":"\"intuitive shared state\" is a contradiction in terms"},"ts":1646099708758,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s-3R3LfGBpPS02Ks8btuGTKRWHMHqOYhSNnlu4gOVz0"},
{"content":{"body":"the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday","msgtype":"m.text","org.matrix.msc1767.text":"the thing you're proposing would be incredibly complicated to specify or implement, and we're just now getting to the point where we're fleshing out the building blocks which might let us get there someday"},"ts":1646099751018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EeV0VBN1e-p8fmWcrnHrgEQiCqi-1vUtW2EGC66ZcsY"},
{"content":{"body":"or, well, not there precisely, but somewhere like it","msgtype":"m.text","org.matrix.msc1767.text":"or, well, not there precisely, but somewhere like it"},"ts":1646099763616,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U4dP3gDEYO83hpHZUg2x5eGXzVM6ImXXPkHiZqgT8S8"},
{"content":{"body":"> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?\n\nwe're on the route of that. ü§î\nsearch for those proposals:\n- struct (shared struct section)\n- module block","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Question. Possibly I&#39;m not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I&#39;ve done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?</blockquote></mx-reply><p>we're on the route of that. ü§î<br>search for those proposals:</p>\n<ul>\n<li>struct (shared struct section)</li>\n<li>module block</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> Question. Possibly I'm not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I've done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?\n\nwe're on the route of that. ü§î\nsearch for those proposals:\n- struct (shared struct section)\n- module block","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$19H9I6AwTYr-pJkIRFzfYhDeL6FC7jeR8DYqZRu8NE4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Question. Possibly I&#39;m not searching the right terms, but when async/await was added to ECMAScript, why was threading never pulled into the core language away from Web Workers? (As others I&#39;ve done the blob thing for years with workers when doing heavily threaded things). I kind of expected that one would be able to just call an async function and have it execute on another thread by now with intuitive shared state, but that was never proposed. Why not?</blockquote></mx-reply><p>we're on the route of that. ü§î<br>search for those proposals:</p>\n<ul>\n<li>struct (shared struct section)</li>\n<li>module block</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1646101163514,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9lHmQ4eLAGSWYvI1C7NRKQXPx5_37F_jzyiTmmdbEYQ"},
{"content":{"body":"> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?\n> ```\n> $ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding => [\"()\", \"(..._)\", \"(_=0)\"].map(params => { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> object    // function(..._){return typeof arguments; var arguments}\n> object    // function(_=0){return typeof arguments; var arguments}\n> \n> #### V8\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> undefined // function(..._){return typeof arguments; var arguments}\n> undefined // function(_=0){return typeof arguments; var arguments}\n> ```\n\nTracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?</p>\n<pre><code>$ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding =&gt; [\"()\", \"(..._)\", \"(_=0)\"].map(params =&gt; { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n#### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nobject    // function(..._){return typeof arguments; var arguments}\nobject    // function(_=0){return typeof arguments; var arguments}\n\n#### V8\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nundefined // function(..._){return typeof arguments; var arguments}\nundefined // function(_=0){return typeof arguments; var arguments}\n</code></pre>\n</blockquote></mx-reply>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations","m.relates_to":{"m.in_reply_to":{"event_id":"$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?\n> ```\n> $ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding => [\"()\", \"(..._)\", \"(_=0)\"].map(params => { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n> #### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> object    // function(..._){return typeof arguments; var arguments}\n> object    // function(_=0){return typeof arguments; var arguments}\n> \n> #### V8\n> function  // function(){return typeof arguments; function arguments(){}}\n> function  // function(..._){return typeof arguments; function arguments(){}}\n> function  // function(_=0){return typeof arguments; function arguments(){}}\n> object    // function(){return typeof arguments; var arguments}\n> undefined // function(..._){return typeof arguments; var arguments}\n> undefined // function(_=0){return typeof arguments; var arguments}\n> ```\n\nTracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UoMfJyqjHWTLn805JYO7qj_JZxFqTbDKvQvXl7yd9FI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>can someone verify my assessment that https://github.com/mishoo/UglifyJS/issues/5370 represents a deviation of V8 from other major implementations in FunctionDeclarationInstantiation with respect to non-simple parameter lists when VarDeclaredNames includes \"arguments\"?</p>\n<pre><code>$ eshost -se '[].concat(...[\"function arguments(){}\", \"var arguments\"].map(occluding =&gt; [\"()\", \"(..._)\", \"(_=0)\"].map(params =&gt; { const r=\"return typeof arguments; \", f=Function(params.slice(1,-1), r+occluding); return `${f().padEnd(9)} // function${params}{${r+occluding}}`; }))).join(\"\\n\")'\n#### ChakraCore, engine262, JavaScriptCore, Moddable XS, SpiderMonkey\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nobject    // function(..._){return typeof arguments; var arguments}\nobject    // function(_=0){return typeof arguments; var arguments}\n\n#### V8\nfunction  // function(){return typeof arguments; function arguments(){}}\nfunction  // function(..._){return typeof arguments; function arguments(){}}\nfunction  // function(_=0){return typeof arguments; function arguments(){}}\nobject    // function(){return typeof arguments; var arguments}\nundefined // function(..._){return typeof arguments; var arguments}\nundefined // function(_=0){return typeof arguments; var arguments}\n</code></pre>\n</blockquote></mx-reply>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations","mimetype":"text/html"}]},"ts":1646102516618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bjSbF-2vIGESyGns1Bw8NvuOr1DGNPtYI5-HcaGDNVg"},
{"content":{"body":"Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just \"work\" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API.","msgtype":"m.text","org.matrix.msc1767.text":"Well intuitive as in all closed over variables and they automatically behave like SharedArrayBuffer items without the bloat. (And in scope functions can just be called without any module syntax). Creating a variable and using an atomic to increment it or other operation would just \"work\" without stuff like shared structs or shuffling stuff into TypedArrays like it's some separate API."},"ts":1646102551371,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Ie8KzfiMda_raF0XpaLzmncUfb2cpIZJHU42TKqfMwY"},
{"content":{"body":"SABs are the single most \"handle with care\" part of the entire language, especially when used without atomics; making it so that every single thing in the language behaved like that would be... not an idea I'd endorse, to put it lightly, and I imagine that's a common sentiment among the committee","msgtype":"m.text","org.matrix.msc1767.text":"SABs are the single most \"handle with care\" part of the entire language, especially when used without atomics; making it so that every single thing in the language behaved like that would be... not an idea I'd endorse, to put it lightly, and I imagine that's a common sentiment among the committee"},"ts":1646102712310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xD9XQSpyI0wNXXHMfPoFZeOn4uM0zaVA7cg5oJRYrGg"},
{"content":{"body":"Like, just getting the memory model right for SABs was incredibly complicated, and not without bugs; see e.g. https://github.com/tc39/ecma262/issues/1680 https://github.com/tc39/ecma262/issues/2231 https://github.com/tc39/ecma262/pull/1511","msgtype":"m.text","org.matrix.msc1767.text":"Like, just getting the memory model right for SABs was incredibly complicated, and not without bugs; see e.g. https://github.com/tc39/ecma262/issues/1680 https://github.com/tc39/ecma262/issues/2231 https://github.com/tc39/ecma262/pull/1511"},"ts":1646102792295,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9GFXW5ZJGtmGtER83-l4lmQJzlsfKMDi_ZhPsTWItTs"},
{"content":{"body":"and that's the _simple_ case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","format":"org.matrix.custom.html","formatted_body":"and that's the <em>simple</em> case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and that's the _simple_ case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","mimetype":"text/plain"},{"body":"and that's the <em>simple</em> case, where you're just dealing with raw bytes; it gets more complicated when you get more complicated data structures involved","mimetype":"text/html"}]},"ts":1646102812305,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tdyBKkmgB6gpRSvtO1-jKGa885ummZ3OIompB4un5-g"},
{"content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"ts":1646102983636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s"},
{"content":{"body":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","m.new_content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"m.relates_to":{"event_id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense at least not on the main thread)"},"ts":1646102998546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x_RJCKhsnYwzBVuXU6t1pSTvFYqlHJt_rk2YyD2E4N8"},
{"content":{"body":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)","m.new_content":{"body":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)","msgtype":"m.text","org.matrix.msc1767.text":"(also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)"},"m.relates_to":{"event_id":"$zooKGJapnkIHRwmDn_uB2aWUpTIMlWVFk8anL22WR9s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (also blocking atomics don't work on the main thread, so the \"using an atomic to increment it\" thing doesn't really make sense, at least not on the main thread)"},"ts":1646103007307,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Us760k75tOENxC1hNAfqoJXbVi-Gcbsynf_a6mwrDBg"},
{"content":{"body":"I meant incrementing in other threads. My general thinking is I'd like for SharedArrayBuffer to be deprecated such that a variable and thread system works more like C++. In this case everything is handled with care implied. Was talking to someone about my type proposal/notes and they commented that you can't just create say an integer in the main thread and increment it in multiple threads (with atomics). In this setup you'd be able to do things like swap two object references atomically or set a variable object atomically. It definitely would be very complex to implement, but for the user they could just call functions to create threads and implement parallelism without any extra sugar (wrapping of objects, functions, variables).","msgtype":"m.text","org.matrix.msc1767.text":"I meant incrementing in other threads. My general thinking is I'd like for SharedArrayBuffer to be deprecated such that a variable and thread system works more like C++. In this case everything is handled with care implied. Was talking to someone about my type proposal/notes and they commented that you can't just create say an integer in the main thread and increment it in multiple threads (with atomics). In this setup you'd be able to do things like swap two object references atomically or set a variable object atomically. It definitely would be very complex to implement, but for the user they could just call functions to create threads and implement parallelism without any extra sugar (wrapping of objects, functions, variables)."},"ts":1646103883339,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$6Un6XmokakkchIvtgonk2wxLD9V1QlNUCHkcg7kr230"},
{"content":{"body":"also, not everyone on the committee :cough: is convinced that threads are \"not incredibly harmful\" :-)","msgtype":"m.text","org.matrix.msc1767.text":"also, not everyone on the committee :cough: is convinced that threads are \"not incredibly harmful\" :-)"},"ts":1646103906557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FPi7fU35xspUNP_NZbIG1pG1tDAaipdT3dswY7SuDHw"},
{"content":{"body":"I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.","msgtype":"m.text","org.matrix.msc1767.text":"I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads."},"ts":1646104128643,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68"},
{"content":{"body":"As a rule we don't usually introduce features only intended to be used in toy projects, particularly when they have sharp edges","msgtype":"m.text","org.matrix.msc1767.text":"As a rule we don't usually introduce features only intended to be used in toy projects, particularly when they have sharp edges"},"ts":1646104177328,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$azYJMWIKwjvxqYlsuQBb3mr_BJ8TU6yfw4rt0iQkIPo"},
{"content":{"body":"and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades","msgtype":"m.text","org.matrix.msc1767.text":"and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades"},"ts":1646104212960,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s"},
{"content":{"body":"> <@bakkot:matrix.org> and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades\n\nso how u think about the shared structs proposal?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and shared-memory parallelism isn&#39;t just a sharp edge, it&#39;s an entire box of rusty razor blades</blockquote></mx-reply>so how u think about the shared structs proposal?","m.relates_to":{"m.in_reply_to":{"event_id":"$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> and shared-memory parallelism isn't just a sharp edge, it's an entire box of rusty razor blades\n\nso how u think about the shared structs proposal?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$KfMGN5hY5zIDh4EwMHPnhKNtwocn8_5fu_j_giUQm7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and shared-memory parallelism isn&#39;t just a sharp edge, it&#39;s an entire box of rusty razor blades</blockquote></mx-reply>so how u think about the shared structs proposal?","mimetype":"text/html"}]},"ts":1646104244440,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$bRIrAmPZDuc8M4PGFadLlIdxwhJ7szvooWJqvPaI5xU"},
{"content":{"body":"Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life","mimetype":"text/html"}]},"ts":1646104321716,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo"},
{"content":{"body":"it's carefully designed so that the shared memory parts are constrained to the struct and its references, and doesn't get out into the rest of your program, which is the only thing which makes it even conceivably a good idea","msgtype":"m.text","org.matrix.msc1767.text":"it's carefully designed so that the shared memory parts are constrained to the struct and its references, and doesn't get out into the rest of your program, which is the only thing which makes it even conceivably a good idea"},"ts":1646104394651,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wXdxoE0IMk4R7HS2G8IoL3MME8bFCANLMvZo4DsMydA"},
{"content":{"body":"that is, I agree with the readme:\n\n> Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.","format":"org.matrix.custom.html","formatted_body":"<p>that is, I agree with the readme:</p>\n<blockquote>\n<p>Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that is, I agree with the readme:\n\n> Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.","mimetype":"text/plain"},{"body":"<p>that is, I agree with the readme:</p>\n<blockquote>\n<p>Like other shared memory features in JavaScript, it is high in expressive power and high in difficulty to use correctly. This proposal is both intended as an incremental step towards higher-level, easier-to-use (e.g. data-race free by construction) concurrency abstractions as well as an escape hatch for expert programmers who need the expressivity.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1646104432803,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bsmxn2MsuSHDR9F7ezlmzu6_MDUIRlsk6sfNBqbOIyM"},
{"content":{"body":"> <@bakkot:matrix.org> Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life\n\nonce it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life</blockquote></mx-reply>once it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","m.relates_to":{"m.in_reply_to":{"event_id":"$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> Jack Works: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life\n\nonce it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$WtPynNbX95YB_E-kUOPcBzza2nWhTiYjf0CgC2d4-eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: as with SABs it's something which will be useful to build safe-to-use libraries on top of, but not something I'd expect users to touch in everyday life</blockquote></mx-reply>once it is available, it will be used in everyday life by programmers that has c++/rust/java/... background","mimetype":"text/html"}]},"ts":1646104436733,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$TBF2qVEQljEqUKrHbnU6NVQW6tX2NHlj69QUgpGJN-0"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1646104445084,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ay6ILBTvkL5FSa_LToNDrfWADMR7vU8B-NT1VIReLws"},
{"content":{"body":"seems bad","msgtype":"m.text","org.matrix.msc1767.text":"seems bad"},"ts":1646104447179,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rNuu4xOq3UlT-CP3aSAhA0SQ6cxhy199T8dBl8kr5qw"},
{"content":{"body":"lol","msgtype":"m.text","org.matrix.msc1767.text":"lol"},"ts":1646104451859,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$izyFmp8qVLpIq15VEk916oGMLwHMPZyuV-jkgt8cO5M"},
{"content":{"body":"if we actually think that's going to happen, it's probably not worth putting in the language","msgtype":"m.text","org.matrix.msc1767.text":"if we actually think that's going to happen, it's probably not worth putting in the language"},"ts":1646104455817,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8bJ5iCJzTtr8r-3onENpX-CEMsYDDM0brq6yKQEs_Sg"},
{"content":{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking _extremely_ carefully about it","format":"org.matrix.custom.html","formatted_body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking <em>extremely</em> carefully about it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking _extremely_ carefully about it","mimetype":"text/plain"},{"body":"that said, I have a background in all of those languages and still wouldn't touch structs without thinking <em>extremely</em> carefully about it","mimetype":"text/html"}]},"ts":1646104506585,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PyXX6V3bzKjVOawc30p23UxSHSyvMXIqFo_VDyppLPU"},
{"content":{"body":"no one use SAB+worker because it's too hard to create one than just following JS style of multi-thread programming ","msgtype":"m.text","org.matrix.msc1767.text":"no one use SAB+worker because it's too hard to create one than just following JS style of multi-thread programming "},"ts":1646104518687,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5JWC7So7OMPNWRAnYvv-AFOdbB-nhd5OQpgqvBobU8Q"},
{"content":{"body":"I use SABs...","msgtype":"m.text","org.matrix.msc1767.text":"I use SABs..."},"ts":1646104542800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6rfn5h2rA4t-ID4FlJSf8VgTYC3g6N6ycde6F8KEPP0"},
{"content":{"body":"but, you know, only after thinking extremely carefully about it","msgtype":"m.text","org.matrix.msc1767.text":"but, you know, only after thinking extremely carefully about it"},"ts":1646104562938,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5oVOioLxqVoq2zkfJr1740hRo29ZC5pUz6r9KJvPD2s"},
{"content":{"body":"and emscripten uses them to good effect as well","msgtype":"m.text","org.matrix.msc1767.text":"and emscripten uses them to good effect as well"},"ts":1646104573919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vr8u4ZvlUKyqXp-RpE2QNmUxJamykLgkL9VQWuZ_djk"},
{"content":{"body":"I think module blocks will make workers more popular in general, tbh","msgtype":"m.text","org.matrix.msc1767.text":"I think module blocks will make workers more popular in general, tbh"},"ts":1646104605896,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cIM7UAiaM9k7U_16PayOryLJdUJTFiwvusn2KkXDhvE"},
{"content":{"body":"> <@sirisian:matrix.org> I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.\n\nü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>I completely get that. I&#39;m migrating over to WebGPU for my current toy projects. Most of my applications were more &quot;spin up 8 threads because I can&#39;t use the GPU to compute this&quot; situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I&#39;m not sharing state between threads.</blockquote></mx-reply>ü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","m.relates_to":{"m.in_reply_to":{"event_id":"$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> I completely get that. I'm migrating over to WebGPU for my current toy projects. Most of my applications were more \"spin up 8 threads because I can't use the GPU to compute this\" situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I'm not sharing state between threads.\n\nü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$MpNTrEfpvMpMJq8yrNF_aVmGVJD7vpk6udrBc3SSe68?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>I completely get that. I&#39;m migrating over to WebGPU for my current toy projects. Most of my applications were more &quot;spin up 8 threads because I can&#39;t use the GPU to compute this&quot; situation. Still for simple projects for demos it would be nice to write a few lines of code to say run a pathfinding algorithm on multiple threads. Though the module block fits those kind of applications cleanly where I&#39;m not sharing state between threads.</blockquote></mx-reply>ü§î for a toy project maybe you can try a toy runtime. I've heard that the structed proposal has a demo implementation in V8. maybe u can contact v8 team to get a demo build and play around","mimetype":"text/html"}]},"ts":1646104622815,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$e3249-8j1QKBdlOep1CdTmgaWxEpDDfSzAsbla6E1mw"},
{"content":{"body":"if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language","msgtype":"m.text","org.matrix.msc1767.text":"if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language"},"ts":1646104626434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg"},
{"content":{"body":"multi-threading is good!","msgtype":"m.text","org.matrix.msc1767.text":"multi-threading is good!"},"ts":1646104634140,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ofefdKO_awbWohg5ywsaeKc0NvglApmicHTVjYoN-Og"},
{"content":{"body":"\"being single-threaded\" is a feature, not a bug","msgtype":"m.text","org.matrix.msc1767.text":"\"being single-threaded\" is a feature, not a bug"},"ts":1646104634805,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg"},
{"content":{"body":"Well WebGPU makes it not a toy project technically since it's identical to an existing piece of software. The performance issue of doing the project with web workers made it very suboptimal compared to usual approaches (like much slower with limitations a GPU approach wouldn't have). The main idea though is taking a data structure and passing it through a pipeline where each operation is expensive. One could imagine say using the pipeline proposal and each function just calls a thread? yeah, that's probably close, but simplified.","msgtype":"m.text","org.matrix.msc1767.text":"Well WebGPU makes it not a toy project technically since it's identical to an existing piece of software. The performance issue of doing the project with web workers made it very suboptimal compared to usual approaches (like much slower with limitations a GPU approach wouldn't have). The main idea though is taking a data structure and passing it through a pipeline where each operation is expensive. One could imagine say using the pipeline proposal and each function just calls a thread? yeah, that's probably close, but simplified."},"ts":1646104636216,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$8ZA9dyFjZCfwarO7GnoUzPxdvtFTqU16j74iKFv4YeQ"},
{"content":{"body":"shared-memory multithreading is bad","msgtype":"m.text","org.matrix.msc1767.text":"shared-memory multithreading is bad"},"ts":1646104640962,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xnYOvE1smwSSv2oHvblqmtItxjF8QHoz4h7Ny69KEpU"},
{"content":{"body":"but multiple threads are good","msgtype":"m.text","org.matrix.msc1767.text":"but multiple threads are good"},"ts":1646104645919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rId3eKwIceLezWlIAWu7fdMoP1pQnKrgtgtYOlfYAB8"},
{"content":{"body":"CPUs have many cores","msgtype":"m.text","org.matrix.msc1767.text":"CPUs have many cores"},"ts":1646104658830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RVoN0x4KZmKpasHhUINW4jdsFWT6te_ELF6w3F1ZV2U"},
{"content":{"body":"i can agree that things that are observably the same as \"being single-threaded\" is good","msgtype":"m.text","org.matrix.msc1767.text":"i can agree that things that are observably the same as \"being single-threaded\" is good"},"ts":1646104663400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L85dT1klS6EFBLTqlQbMTqurxxH2_pXclASsEs7RWuE"},
{"content":{"body":"the thing i value is that things must act as if they're single-threaded. they can be faster than that if i can't tell the difference, and that's a good thing","msgtype":"m.text","org.matrix.msc1767.text":"the thing i value is that things must act as if they're single-threaded. they can be faster than that if i can't tell the difference, and that's a good thing"},"ts":1646104690593,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yf8MQKM-MT7lznoYDj9nsFFoa6GcCum9oiklzBq7MNc"},
{"content":{"body":"deliberately limiting your programming language so that it can't use more than 1/16th of the CPU seems like... bad","msgtype":"m.text","org.matrix.msc1767.text":"deliberately limiting your programming language so that it can't use more than 1/16th of the CPU seems like... bad"},"ts":1646104692630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RVq-xmWQDX_9fpln561P5M2uGrpiXmAhuOPHnDGhrcE"},
{"content":{"body":"I have a 12900k for reference. :|","msgtype":"m.text","org.matrix.msc1767.text":"I have a 12900k for reference. :|"},"ts":1646104708620,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$e6Pk5GDv7tj1_3_1EnG-MIzupH1CHwMBrzWpcpikYCI"},
{"content":{"body":"we shouldn't be optimizing for people with 12900ks","msgtype":"m.text","org.matrix.msc1767.text":"we shouldn't be optimizing for people with 12900ks"},"ts":1646104747801,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RwVdD_1RpdYYp3T-NcZZg0M6v5SjndqUA_edSOL5Y2I"},
{"content":{"body":"> <@ljharb:matrix.org> \"being single-threaded\" is a feature, not a bug\n\nthis goes too far. i support multi-thread by message passing, not memory sharing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>&quot;being single-threaded&quot; is a feature, not a bug</blockquote></mx-reply>this goes too far. i support multi-thread by message passing, not memory sharing","m.relates_to":{"m.in_reply_to":{"event_id":"$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> \"being single-threaded\" is a feature, not a bug\n\nthis goes too far. i support multi-thread by message passing, not memory sharing","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6xkacq0ZrJe80LX8njuAfZbfLIOD5Asm0x7g5IsVBfg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>&quot;being single-threaded&quot; is a feature, not a bug</blockquote></mx-reply>this goes too far. i support multi-thread by message passing, not memory sharing","mimetype":"text/html"}]},"ts":1646104764616,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dYgwPDlWGwSkxdK5ZmDtMxd7TvHLrI4h6dWJ22-AilU"},
{"content":{"body":"but even the cheapest android phones available have 4 cores these days","msgtype":"m.text","org.matrix.msc1767.text":"but even the cheapest android phones available have 4 cores these days"},"ts":1646104766333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x9pMCVj5ZTyrRrnM3EGM94bXuMax8rQRuluSH4X_cPQ"},
{"content":{"body":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","msgtype":"m.text","org.matrix.msc1767.text":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"ts":1646104883012,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc"},
{"content":{"body":" * We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","m.new_content":{"body":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé","msgtype":"m.text","org.matrix.msc1767.text":"We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"m.relates_to":{"event_id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé"},"ts":1646104895740,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$3sUYJdWCECutBYrPF6aMW2KAcmE2sdfcM5Ab_azfj_g"},
{"content":{"body":"actually I'm curious about, if Record&Tuple are shipped and highly optimized by the engine, does that make life easier?","msgtype":"m.text","org.matrix.msc1767.text":"actually I'm curious about, if Record&Tuple are shipped and highly optimized by the engine, does that make life easier?"},"ts":1646104922476,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$plWiZTRUmotAqPjqLh1MdVDzO55etDqqC3fNznzIx4I"},
{"content":{"body":"records and tuples are immutable so it doesn't much matter","msgtype":"m.text","org.matrix.msc1767.text":"records and tuples are immutable so it doesn't much matter"},"ts":1646104950437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jCbOUDTw8y564CwiiuvgWcVdDjWbt9lV_v5mpHU0Jmw"},
{"content":{"body":"we can pass immutable object/arrays with 0 serialization cost (engine can share the memory)","msgtype":"m.text","org.matrix.msc1767.text":"we can pass immutable object/arrays with 0 serialization cost (engine can share the memory)"},"ts":1646104957048,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$sqDlmJxHlDSicA0RyExLxxnERRBvt3HGkIuEHsWS2dU"},
{"content":{"body":"you'd still have to `postMessage` them, and you can do that with a plain object","format":"org.matrix.custom.html","formatted_body":"you'd still have to <code>postMessage</code> them, and you can do that with a plain object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you'd still have to `postMessage` them, and you can do that with a plain object","mimetype":"text/plain"},{"body":"you'd still have to <code>postMessage</code> them, and you can do that with a plain object","mimetype":"text/html"}]},"ts":1646104958197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y"},
{"content":{"body":"> <@bakkot:matrix.org> you'd still have to `postMessage` them, and you can do that with a plain object\n\nyeah, but that need a clone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you'd still have to <code>postMessage</code> them, and you can do that with a plain object</blockquote></mx-reply>yeah, but that need a clone","m.relates_to":{"m.in_reply_to":{"event_id":"$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> you'd still have to `postMessage` them, and you can do that with a plain object\n\nyeah, but that need a clone","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z83nCbRC6qkO5pBRP5SPIjx43RSvMI5tG4sfYLT5z1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you'd still have to <code>postMessage</code> them, and you can do that with a plain object</blockquote></mx-reply>yeah, but that need a clone","mimetype":"text/html"}]},"ts":1646104970823,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$70p4xrppx6GkrNzJygarnZckNR80rBR4jXM7tfry-Ws"},
{"content":{"body":"yeah that's fair","msgtype":"m.text","org.matrix.msc1767.text":"yeah that's fair"},"ts":1646104974308,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mXyATjriMvs3OTvX4j-lmuc8_Q2sNEp5Iuv3g5u6WV8"},
{"content":{"body":"my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects","msgtype":"m.text","org.matrix.msc1767.text":"my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects"},"ts":1646105018057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78"},
{"content":{"body":"> <@pokute:matrix.org> We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé\n\nWeakMap[@@iterator]!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé</blockquote></mx-reply>WeakMap[@@iterator]!","m.relates_to":{"m.in_reply_to":{"event_id":"$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pokute:matrix.org> We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé\n\nWeakMap[@@iterator]!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$f_0OMFq4mM1okgCnBiqz-0QSbikblpPYBUlySkaZbQc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We could simultaneously introduce manual memory management as a viable alternative to GC in ECMAScript since users will appreciate the freedom. üöé</blockquote></mx-reply>WeakMap[@@iterator]!","mimetype":"text/html"}]},"ts":1646105031863,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZtZKJn6mzKXbNvaiNONgVB6iywwt210Nu_03C16WiII"},
{"content":{"body":"that's been proposed...","msgtype":"m.text","org.matrix.msc1767.text":"that's been proposed..."},"ts":1646105047494,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_zW142t9IfCA2petU3NUbJ8g0bXp7fqdodsea2eSEw"},
{"content":{"body":"you can do it yourself with weakrefs if you really want to","msgtype":"m.text","org.matrix.msc1767.text":"you can do it yourself with weakrefs if you really want to"},"ts":1646105054977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wluX9zzrWAa16-FoeRy4U2gd-6gBlS5zecBcub3fmIc"},
{"content":{"body":"but, like","msgtype":"m.text","org.matrix.msc1767.text":"but, like"},"ts":1646105056614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T5bw1FI4JcGxkreZmdyjTfnFQns4BozaJSVWsIaaop8"},
{"content":{"body":"don't","msgtype":"m.text","org.matrix.msc1767.text":"don't"},"ts":1646105057232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PeJgzHUBmaCsmIaUqkMu6Gf5sGNe28Gy8cTW1kNaL-4"},
{"content":{"body":"> <@bakkot:matrix.org> my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects\n\nüëÄ what's the common limit?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects</blockquote></mx-reply>üëÄ what's the common limit?","m.relates_to":{"m.in_reply_to":{"event_id":"$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects\n\nüëÄ what's the common limit?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RN1CghxdveeeBpzOFBb-eUBuIA2s9xpU-QclKfZ2p78?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>my impression is that the expensiveness of the clone is rarely a limiting factor, but it might be for some projects</blockquote></mx-reply>üëÄ what's the common limit?","mimetype":"text/html"}]},"ts":1646105111342,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ezpvEDhrFX2S9Q0D59pQjzJrXExG5gfVuyQahQoHCPM"},
{"content":{"body":"workers are annoying to create, mostly","msgtype":"m.text","org.matrix.msc1767.text":"workers are annoying to create, mostly"},"ts":1646105155423,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o69q5o5ZIwAtLL-Ol9ernlGsogdQUqAUBRLkf8H2lP8"},
{"content":{"body":"and postmessage is annoying to use","msgtype":"m.text","org.matrix.msc1767.text":"and postmessage is annoying to use"},"ts":1646105161347,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RRMlh9g71fedFWYGpOVw9L6FZCy2iLTCLJLCtKaBVKU"},
{"content":{"body":"you can't just `await` stuff without building some wrappers","format":"org.matrix.custom.html","formatted_body":"you can't just <code>await</code> stuff without building some wrappers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can't just `await` stuff without building some wrappers","mimetype":"text/plain"},{"body":"you can't just <code>await</code> stuff without building some wrappers","mimetype":"text/html"}]},"ts":1646105171469,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uCGXUvgzxi1hBJA_BDuN564ppxGrp1LQuxaKgHHT0WA"},
{"content":{"body":"> <@ljharb:matrix.org> if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language\n\nMy thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another \"thread\" with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language</blockquote></mx-reply>My thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another &quot;thread&quot; with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","m.relates_to":{"m.in_reply_to":{"event_id":"$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language\n\nMy thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another \"thread\" with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UlacKm-9igu_1mcdnY6yaLjjSfjmaOwZ2nFUy00dpfg?via=mozilla.org&via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if something is going to encourage wider usage of multi-threaded programming in JS, that sounds like a huge detriment to the language</blockquote></mx-reply>My thinking is people should be able to use it without thinking much or from other libraries. Like years ago I wrote a small game server in C++ for web sockets then converted it to node.js with WS. In order to speed up things to support thousands of players again I moved the packet deserialization stuff to another &quot;thread&quot; with cluster. Creating simple producer/consumer systems in worker threads for processing packets should be like super simple. (In C++ I was using I think boost fibers for something similar and it was very elegant).","mimetype":"text/html"}]},"ts":1646105243324,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$P1fnZ7qC2B1q9S5mXICBNEXOozdtxD0dr-KrND5HrR0"},
{"content":{"body":"I think requiring memory-sharing in JS is like requiring imperative style programming in haskell ü§î","msgtype":"m.text","org.matrix.msc1767.text":"I think requiring memory-sharing in JS is like requiring imperative style programming in haskell ü§î"},"ts":1646105279220,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$o12L2GefFIdiw_eHhX9OEVkMzdBirWBe195VzG01W68"},
{"content":{"body":"you've got a lot of \"shoulds\" in there that seem pretty informed by C++ experience, which isn't something most JS programmers have or will ever have","msgtype":"m.text","org.matrix.msc1767.text":"you've got a lot of \"shoulds\" in there that seem pretty informed by C++ experience, which isn't something most JS programmers have or will ever have"},"ts":1646105281716,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HX3JtakPmRTXBIYQM2jhgRhpDljU8XULg2fxNcdh4xo"},
{"content":{"body":"i'm pretty confident that in the fullness of time, the majority of JS devs won't have ever used something besides JS :-) no way to prove it either way, ofc.","msgtype":"m.text","org.matrix.msc1767.text":"i'm pretty confident that in the fullness of time, the majority of JS devs won't have ever used something besides JS :-) no way to prove it either way, ofc."},"ts":1646105418863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T_BZxoWFeLsmeMWu63NMauOil2wisoU-mGIIM9ob0zA"},
{"content":{"body":"ljharb I feel like \"it is good to do expensive compute off the main thread\" is like... not a principle I would expect to find disagreement with?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I feel like &quot;it is good to do expensive compute off the main thread&quot; is like... not a principle I would expect to find disagreement with?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb I feel like \"it is good to do expensive compute off the main thread\" is like... not a principle I would expect to find disagreement with?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I feel like &quot;it is good to do expensive compute off the main thread&quot; is like... not a principle I would expect to find disagreement with?","mimetype":"text/html"}]},"ts":1646105429151,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I-oOmpH5tmX3U8pCVeJSbdwkIUrBP6b_DMzGUS2hoqI"},
{"content":{"body":"I haven‚Äôt used Go in over 5 years but I miss goroutines and channels","msgtype":"m.text"},"ts":1646105430857,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$5gvg040TLkmsITZN79YdrpvKHOIJyzLl4PJcu_9pKs0"},
{"content":{"body":"Well I'm just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be.","msgtype":"m.text","org.matrix.msc1767.text":"Well I'm just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be."},"ts":1646105460977,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$FAThu7XoS8eDobk-CdTpLftbtldQ1CxGnN2lmMgjiMc"},
{"content":{"body":"Well, I would be interested in what kind of API would be super simple for a JS developer for writing \"multi-threaded\" code.","msgtype":"m.text","org.matrix.msc1767.text":"Well, I would be interested in what kind of API would be super simple for a JS developer for writing \"multi-threaded\" code."},"ts":1646105464714,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$_N-gtEgXEmR3dTuE7GPKzWsq876Lb5pv0uEDfuHb9Ts"},
{"content":{"body":"bakkot: yeah i'm not disputing that. something that worked identically single-threaded as multi-threaded, so engines could unobservably execute them across multiple cores, would be amazing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yeah i'm not disputing that. something that worked identically single-threaded as multi-threaded, so engines could unobservably execute them across multiple cores, would be amazing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: yeah i'm not disputing that. something that worked identically single-threaded as multi-threaded, so engines could unobservably execute them across multiple cores, would be amazing","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yeah i'm not disputing that. something that worked identically single-threaded as multi-threaded, so engines could unobservably execute them across multiple cores, would be amazing","mimetype":"text/html"}]},"ts":1646105466529,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rK61CePdA2BODP8Nx1x6I7pa8q0XEurx3QheTUxSQBg"},
{"content":{"body":"yeah but that's not... possible","msgtype":"m.text","org.matrix.msc1767.text":"yeah but that's not... possible"},"ts":1646105495556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TOKHQFTe-luLwyGqIVftBLeeJyoodzBfwG3TMKRpEWo"},
{"content":{"body":"the whole point is that the compute is happening _while other compute is happening_","format":"org.matrix.custom.html","formatted_body":"the whole point is that the compute is happening <em>while other compute is happening</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the whole point is that the compute is happening _while other compute is happening_","mimetype":"text/plain"},{"body":"the whole point is that the compute is happening <em>while other compute is happening</em>","mimetype":"text/html"}]},"ts":1646105504246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cC_3Fg6zaEbW26QpPd52Jlxx54KevIPvpRcK79iFWDY"},
{"content":{"body":"which is inherently observable","msgtype":"m.text","org.matrix.msc1767.text":"which is inherently observable"},"ts":1646105508288,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WeFkQs5HuKazBUFtIlF0FIoKAPT8pV0AYKUFWXXnzX8"},
{"content":{"body":"ay, there's the rub","msgtype":"m.text","org.matrix.msc1767.text":"ay, there's the rub"},"ts":1646105517644,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$S3IwGCkgTJ-p-OlIHedKuIghR4jp8YK5p6PU5KBIgZc"},
{"content":{"body":"personally i would prefer a world where everything is eternally single-threaded, and parallelism is done via processes, to a world where JS is ruined by bringing in all the problems of threading. i'm quite sure there are those who violently disagree with me, ofc.","msgtype":"m.text","org.matrix.msc1767.text":"personally i would prefer a world where everything is eternally single-threaded, and parallelism is done via processes, to a world where JS is ruined by bringing in all the problems of threading. i'm quite sure there are those who violently disagree with me, ofc."},"ts":1646105557600,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lIkcupoLXKND-ZQ497zrbUIQ2BCSVHyHN61K6PM18FE"},
{"content":{"body":"threading is already a thing in JS","msgtype":"m.text","org.matrix.msc1767.text":"threading is already a thing in JS"},"ts":1646105572500,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TmykY6NQ1LgrgThHdMjOFFGPaKNozDBf0DAJIf5ZSco"},
{"content":{"body":"sadly, that is true","msgtype":"m.text","org.matrix.msc1767.text":"sadly, that is true"},"ts":1646105583280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oHNPC6irnBHNb34FR4FsExp9y6sS30wNujMShkSQPPE"},
{"content":{"body":"doesn't seem to have been ruined","msgtype":"m.text","org.matrix.msc1767.text":"doesn't seem to have been ruined"},"ts":1646105590489,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SmyziZVOylVmZGmDLzAPXC0U2W8VmCSx2EGl9CK_Rcc"},
{"content":{"body":"... at least, not by that","msgtype":"m.text","org.matrix.msc1767.text":"... at least, not by that"},"ts":1646105595554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y_gHMKmOIMSPWK7Xi9TBvx5__J4Ovx-mfJ9rDnenSYQ"},
{"content":{"body":"that's because it's unapproachable and not super usable :-)","msgtype":"m.text","org.matrix.msc1767.text":"that's because it's unapproachable and not super usable :-)"},"ts":1646105600526,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9aVK_Mj23rc0KnjaJYK7xz-KyOBnPdpnhG8rnB-L9Ic"},
{"content":{"body":"> <@bakkot:matrix.org> doesn't seem to have been ruined\n\nbecause that api is tooooo hard to use","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$SmyziZVOylVmZGmDLzAPXC0U2W8VmCSx2EGl9CK_Rcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>doesn&#39;t seem to have been ruined</blockquote></mx-reply>because that api is tooooo hard to use","m.relates_to":{"m.in_reply_to":{"event_id":"$SmyziZVOylVmZGmDLzAPXC0U2W8VmCSx2EGl9CK_Rcc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> doesn't seem to have been ruined\n\nbecause that api is tooooo hard to use","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$SmyziZVOylVmZGmDLzAPXC0U2W8VmCSx2EGl9CK_Rcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>doesn&#39;t seem to have been ruined</blockquote></mx-reply>because that api is tooooo hard to use","mimetype":"text/html"}]},"ts":1646105615116,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$zT6_CNpGzUVqSeB_n2kdkKAQQ3zQe9UIFv2YWkKdpTo"},
{"content":{"body":"i'm content to keep it that way, so that advanced niche use cases can leverage it, but regular JS devs aren't tempted to","msgtype":"m.text","org.matrix.msc1767.text":"i'm content to keep it that way, so that advanced niche use cases can leverage it, but regular JS devs aren't tempted to"},"ts":1646105617219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G4JhPsnC5b3VZzLa2D7rvy-_VJ0v7hfAWh0fnEG4y_k"},
{"content":{"body":"you could only manipulate a number array","msgtype":"m.text","org.matrix.msc1767.text":"you could only manipulate a number array"},"ts":1646105645738,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$P0pCFTj0MGh4ZaQzKLFc6v_pgVfQx2YCY-hQE2rDFEw"},
{"content":{"body":"you can postmessage","msgtype":"m.text","org.matrix.msc1767.text":"you can postmessage"},"ts":1646105653163,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7GnEi_H3S1t5Yy5JjXCtbjZDTfcuDke75HIB7Fc55RY"},
{"content":{"body":"which is the _only_ multithreading in some languages","format":"org.matrix.custom.html","formatted_body":"which is the <em>only</em> multithreading in some languages","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"which is the _only_ multithreading in some languages","mimetype":"text/plain"},{"body":"which is the <em>only</em> multithreading in some languages","mimetype":"text/html"}]},"ts":1646105667051,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AotOS4-4lvT0f2D1vPhJIWAKrKprCsQlx1laxFdclYA"},
{"content":{"body":"message passing is a totally normal way of doing multithreading","msgtype":"m.text","org.matrix.msc1767.text":"message passing is a totally normal way of doing multithreading"},"ts":1646105683810,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I76KQgnYrMo0O8nz0p1Q_4S1szx_pyJXa9jsLudpXtw"},
{"content":{"body":"> <@bakkot:matrix.org> which is the _only_ multithreading in some languages\n\n(including JS before we have SAB)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$AotOS4-4lvT0f2D1vPhJIWAKrKprCsQlx1laxFdclYA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>which is the <em>only</em> multithreading in some languages</blockquote></mx-reply>(including JS before we have SAB)","m.relates_to":{"m.in_reply_to":{"event_id":"$AotOS4-4lvT0f2D1vPhJIWAKrKprCsQlx1laxFdclYA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> which is the _only_ multithreading in some languages\n\n(including JS before we have SAB)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$AotOS4-4lvT0f2D1vPhJIWAKrKprCsQlx1laxFdclYA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>which is the <em>only</em> multithreading in some languages</blockquote></mx-reply>(including JS before we have SAB)","mimetype":"text/html"}]},"ts":1646105713926,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$i9W5WEE3cWWYIRC40X7q3z1uhkil742ZAwvJf3JK7wo"},
{"content":{"body":"ljharb I stand by \"it is good to do expensive compute off the main thread\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I stand by &quot;it is good to do expensive compute off the main thread&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb I stand by \"it is good to do expensive compute off the main thread\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I stand by &quot;it is good to do expensive compute off the main thread&quot;","mimetype":"text/html"}]},"ts":1646105713938,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FZOmj56yXS_4sFddnQy7XIV1msNIjUeAceiVaqMHOPg"},
{"content":{"body":"if that is good in general, then it is good for \"regular JS devs\"","msgtype":"m.text","org.matrix.msc1767.text":"if that is good in general, then it is good for \"regular JS devs\""},"ts":1646105728013,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n6uYOpqTaLB3TCyf9I4i-8txAUr3NkfEPn1G6lJwJBE"},
{"content":{"body":"i think the goodness of that is far outweighed by the badness of threaded programming gotchas.","msgtype":"m.text","org.matrix.msc1767.text":"i think the goodness of that is far outweighed by the badness of threaded programming gotchas."},"ts":1646105741384,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P6DXNps7wN_dDlJ0bsKfaNb3iWUI2n9VeddKLPRpaKM"},
{"content":{"body":"slowness >>>>>> race conditions, always","msgtype":"m.text","org.matrix.msc1767.text":"slowness >>>>>> race conditions, always"},"ts":1646105754096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8xGRKnyZS_IL2AHNOpm9HksIm4dcii_4dIr8I7HuHCU"},
{"content":{"body":" * slowness >>>>>> race conditions, always","m.new_content":{"body":"slowness >>>>>> race conditions, always","msgtype":"m.text","org.matrix.msc1767.text":"slowness >>>>>> race conditions, always"},"m.relates_to":{"event_id":"$8xGRKnyZS_IL2AHNOpm9HksIm4dcii_4dIr8I7HuHCU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * slowness >>>>>> race conditions, always"},"ts":1646105760013,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$idqY16lL7sas-eW-ghj5I2cueMZfyP5pgShLGDxBGDw"},
{"content":{"body":"basically all threaded programming gotchas are about shared memory","msgtype":"m.text","org.matrix.msc1767.text":"basically all threaded programming gotchas are about shared memory"},"ts":1646105762445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FVtlsHtmzm-emPrHb5vfzkSbHyd8QRwHIWein9PP1gs"},
{"content":{"body":"> <@sirisian:matrix.org> Well I'm just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be.\n\nWe can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$FAThu7XoS8eDobk-CdTpLftbtldQ1CxGnN2lmMgjiMc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Well I&#39;m just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be.</blockquote></mx-reply>We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.","m.relates_to":{"m.in_reply_to":{"event_id":"$FAThu7XoS8eDobk-CdTpLftbtldQ1CxGnN2lmMgjiMc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> Well I'm just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be.\n\nWe can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$FAThu7XoS8eDobk-CdTpLftbtldQ1CxGnN2lmMgjiMc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>Well I&#39;m just saying there are situations where a JS programmer runs into an issue and the real solution of just calling a thread and passing work over is much more complicated than it should be.</blockquote></mx-reply>We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.","mimetype":"text/html"}]},"ts":1646105779459,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$sBl-bLeP2B6W3Vv3OFNVk_4Zon5fxPzSukHYTz1EeGI"},
{"content":{"body":"race conditions are almost always a thing in shared memory, but are no more a thing with message passing than they are with async functions","msgtype":"m.text","org.matrix.msc1767.text":"race conditions are almost always a thing in shared memory, but are no more a thing with message passing than they are with async functions"},"ts":1646105789439,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5GQfIjoqUa-grkFmGv1-muUvA-kpwzA57OMYjpLfJJc"},
{"content":{"body":"i would be happy to be convinced that there's a threading model that has no shared memory yet has a deterministic way to communicate","msgtype":"m.text","org.matrix.msc1767.text":"i would be happy to be convinced that there's a threading model that has no shared memory yet has a deterministic way to communicate"},"ts":1646105790022,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YiD0Pg5H7lttLhUDJRUh3XGZ_Dv1JQ0tCr6M7Jt6GTI"},
{"content":{"body":"postmessage","msgtype":"m.text","org.matrix.msc1767.text":"postmessage"},"ts":1646105798108,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yrB5RMRMpcA7NNTeI8Qe944iD545SnXsj3uKwamKq-I"},
{"content":{"body":"postmessage is the thing you are talking about","msgtype":"m.text","org.matrix.msc1767.text":"postmessage is the thing you are talking about"},"ts":1646105801763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7Q_ydZEGQ5sYFL2iMs-ob-wJJueKpkfpfuM_tqyXPOE"},
{"content":{"body":"also channels in go","msgtype":"m.text","org.matrix.msc1767.text":"also channels in go"},"ts":1646105805808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fRoV9-0vr8hm38Vw_Qi2dZzq7WxCVEN12zt9Ejz5R7A"},
{"content":{"body":"postMessage takes objects too","msgtype":"m.text","org.matrix.msc1767.text":"postMessage takes objects too"},"ts":1646105811771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7NUeeDmnujNm0jCE8kC6BkE-vuGfp6_0kHkfDx33fyw"},
{"content":{"body":"it's like a very normal way of doing multithreading","msgtype":"m.text","org.matrix.msc1767.text":"it's like a very normal way of doing multithreading"},"ts":1646105814839,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UhrynV1SuDylisKe8930BIy1b5j9cJ9QWbbb-n67tb8"},
{"content":{"body":"and to be fair, i'm not familiar with go","msgtype":"m.text","org.matrix.msc1767.text":"and to be fair, i'm not familiar with go"},"ts":1646105819517,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lRFgqXMEVtAfEGQz40koltMVvINsIK8xfJvMOonRQXQ"},
{"content":{"body":"the objects are cloned, not shared, in postMessage","msgtype":"m.text","org.matrix.msc1767.text":"the objects are cloned, not shared, in postMessage"},"ts":1646105819522,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WCdfrkQVUu4Od3uM2A4eMw0QwD_-3O3vmXbNWAOyJ5s"},
{"content":{"body":" * the objects are cloned, not shared, in postMessage","m.new_content":{"body":"the objects are cloned, not shared, in postMessage","msgtype":"m.text","org.matrix.msc1767.text":"the objects are cloned, not shared, in postMessage"},"m.relates_to":{"event_id":"$WCdfrkQVUu4Od3uM2A4eMw0QwD_-3O3vmXbNWAOyJ5s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the objects are cloned, not shared, in postMessage"},"ts":1646105829905,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_JDC7lW1onuoaTB2unRe0DvglYmScAyd5Kr2O_n_Hac"},
{"content":{"body":"sure, but structured cloning is its own pile of problems :-)","msgtype":"m.text","org.matrix.msc1767.text":"sure, but structured cloning is its own pile of problems :-)"},"ts":1646105853016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Efyw5Y7eeJPd7Fc3MCZJ-Q7uOoJ49ITYpm7cV-BCCoY"},
{"content":{"body":"right but whatever problems structured clone has, those problems aren't inherent to multithreading","msgtype":"m.text","org.matrix.msc1767.text":"right but whatever problems structured clone has, those problems aren't inherent to multithreading"},"ts":1646105886780,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CezdD8lZAHHl5kvXnHW-cdfXUlG4n8vTPIuPuDt5qyw"},
{"content":{"body":"> <@pokute:matrix.org> We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.\n\ndon't know c++, but is io_uring some kind of async without block threading?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$sBl-bLeP2B6W3Vv3OFNVk_4Zon5fxPzSukHYTz1EeGI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.</blockquote></mx-reply>don't know c++, but is io_uring some kind of async without block threading?","m.relates_to":{"m.in_reply_to":{"event_id":"$sBl-bLeP2B6W3Vv3OFNVk_4Zon5fxPzSukHYTz1EeGI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pokute:matrix.org> We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.\n\ndon't know c++, but is io_uring some kind of async without block threading?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$sBl-bLeP2B6W3Vv3OFNVk_4Zon5fxPzSukHYTz1EeGI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>We can compare this to a early 2000s C++ programmer runs into an issue where they are waiting for a long operation (like disk read) and want to do something in the meantime. The default solution of threads and passing work over is a lot more complicated to wrap around than most other C++ code, especially with the special and hard-to-intuit considerations of thread-safeness.</blockquote></mx-reply>don't know c++, but is io_uring some kind of async without block threading?","mimetype":"text/html"}]},"ts":1646105894824,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$lUrpWsMy0eKwmr4kyR3xTKRJj74NTF1wtSeqH6kq0pY"},
{"content":{"body":"being against shared memory parallelism is very reasonable, but it seems wrong to generalize this to being against multithreading in general","msgtype":"m.text","org.matrix.msc1767.text":"being against shared memory parallelism is very reasonable, but it seems wrong to generalize this to being against multithreading in general"},"ts":1646105910260,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i7vBpuDZzuCnhNI7rgtZrN17HA1e8hK1tcV0efYWA5g"},
{"content":{"body":"That reminds me of someone's finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don't think it's as huge of an issue.","msgtype":"m.text","org.matrix.msc1767.text":"That reminds me of someone's finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don't think it's as huge of an issue."},"ts":1646105984959,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$lRJSxCPXVxgDCImn4Q1kFzFX7EOCHaTvWWMzVcL6ts8"},
{"content":{"body":"> <@ljharb:matrix.org> sure, but structured cloning is its own pile of problems :-)\n\nthen message passing by R&T ‚Ñ¢!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Efyw5Y7eeJPd7Fc3MCZJ-Q7uOoJ49ITYpm7cV-BCCoY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, but structured cloning is its own pile of problems :-)</blockquote></mx-reply>then message passing by R&amp;T ‚Ñ¢!","m.relates_to":{"m.in_reply_to":{"event_id":"$Efyw5Y7eeJPd7Fc3MCZJ-Q7uOoJ49ITYpm7cV-BCCoY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> sure, but structured cloning is its own pile of problems :-)\n\nthen message passing by R&T ‚Ñ¢!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Efyw5Y7eeJPd7Fc3MCZJ-Q7uOoJ49ITYpm7cV-BCCoY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, but structured cloning is its own pile of problems :-)</blockquote></mx-reply>then message passing by R&amp;T ‚Ñ¢!","mimetype":"text/html"}]},"ts":1646105989767,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Ym1RA7KlDV__f4wpL45JtgJeSEYUzEQDQlNPvpRw3lo"},
{"content":{"body":"> <@sirisian:matrix.org> That reminds me of someone's finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don't think it's as huge of an issue.\n\nI bet in a hundred years people will still be able to write lagging apps, even with thousands of items and even with multithreading. Can't underestimate people.  (Though if AI will write the software......)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$lRJSxCPXVxgDCImn4Q1kFzFX7EOCHaTvWWMzVcL6ts8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>That reminds me of someone&#39;s finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don&#39;t think it&#39;s as huge of an issue.</blockquote></mx-reply>I bet in a hundred years people will still be able to write lagging apps, even with thousands of items and even with multithreading. Can't underestimate people.  (Though if AI will write the software......)","m.relates_to":{"m.in_reply_to":{"event_id":"$lRJSxCPXVxgDCImn4Q1kFzFX7EOCHaTvWWMzVcL6ts8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@sirisian:matrix.org> That reminds me of someone's finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don't think it's as huge of an issue.\n\nI bet in a hundred years people will still be able to write lagging apps, even with thousands of items and even with multithreading. Can't underestimate people.  (Though if AI will write the software......)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$lRJSxCPXVxgDCImn4Q1kFzFX7EOCHaTvWWMzVcL6ts8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>That reminds me of someone&#39;s finance app I saw they made for a company. Kind of lagged. Was doing stuff with hundreds of thousands of records client-side. This was before web workers (and Power BI I think). Fascinating what people try to do in JS single page applications. Granted computers are faster now, so I don&#39;t think it&#39;s as huge of an issue.</blockquote></mx-reply>I bet in a hundred years people will still be able to write lagging apps, even with thousands of items and even with multithreading. Can't underestimate people.  (Though if AI will write the software......)","mimetype":"text/html"}]},"ts":1646106168431,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$M7khMf3n3Kjtdvkqyn4M40N_ROpKyC-_aEHacItOlpA"},
{"content":{"body":"another question. now we reified Realms and some host hooks (compartment proposal) as something we can control. is it impossible to have Agent/Agent Clusters reified to run suspious code? ","msgtype":"m.text","org.matrix.msc1767.text":"another question. now we reified Realms and some host hooks (compartment proposal) as something we can control. is it impossible to have Agent/Agent Clusters reified to run suspious code? "},"ts":1646106264947,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9eZD8QHj8ASXnlbmALwa2BFoPQC1MtzbY5OZ44_d7Ng"},
{"content":{"body":"depends on what you mean by \"suspicious code\"?","msgtype":"m.text","org.matrix.msc1767.text":"depends on what you mean by \"suspicious code\"?"},"ts":1646106299591,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oOoEPtiojLyyQZXkzy1eL36KnygJg3G2S6ZkGBP44_I"},
{"content":{"body":"untrusted code","msgtype":"m.text","org.matrix.msc1767.text":"untrusted code"},"ts":1646106311661,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$fL6NIxy_xyNtiD1ge8JfMzGSxQc6yebNxP5uv1Oyu0U"},
{"content":{"body":"completely untrusted? no","msgtype":"m.text","org.matrix.msc1767.text":"completely untrusted? no"},"ts":1646106322801,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jr-7QGPTECEt9a47u7gpsdRFRAuC0R8XRplktijsm0c"},
{"content":{"body":"spectre is going to sit there haunting you","msgtype":"m.text","org.matrix.msc1767.text":"spectre is going to sit there haunting you"},"ts":1646106362457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LHjW0Z3_0-jffHojErcdF-dPZrkKeVr55QdV7BECzzA"},
{"content":{"body":"if timing attacks are outside your thread model, though, what do you want that realms don't already give you?","msgtype":"m.text","org.matrix.msc1767.text":"if timing attacks are outside your thread model, though, what do you want that realms don't already give you?"},"ts":1646106392100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8f4OVBZ1xHJ3zLixxJfpY3QLY6mzncOyrs3uqy2ezGU"},
{"content":{"body":"oh... but you can turn off high resolution timer right?","msgtype":"m.text","org.matrix.msc1767.text":"oh... but you can turn off high resolution timer right?"},"ts":1646106394886,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F7kCAW5sxql9D4FFf4CTyhscJc1ab8a55YnD8Igc9Ko"},
{"content":{"body":"no","msgtype":"m.text","org.matrix.msc1767.text":"no"},"ts":1646106399983,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pA42lryYuVyIfcvNH_CLoDxoaTh9n9KNMW4r-64GKNo"},
{"content":{"body":"https://gruss.cc/files/fantastictimers.pdf","msgtype":"m.text","org.matrix.msc1767.text":"https://gruss.cc/files/fantastictimers.pdf"},"ts":1646106408216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EB-YiUjKkFx1xtzo6KLOFdH2PyXH3pujQCCQtNsp8bo"},
{"content":{"body":"> <@bakkot:matrix.org> if timing attacks are outside your thread model, though, what do you want that realms don't already give you?\n\n```js\nwhile (true);\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8f4OVBZ1xHJ3zLixxJfpY3QLY6mzncOyrs3uqy2ezGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if timing attacks are outside your thread model, though, what do you want that realms don&#39;t already give you?</blockquote></mx-reply><pre><code class=\"language-js\">while (true);\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$8f4OVBZ1xHJ3zLixxJfpY3QLY6mzncOyrs3uqy2ezGU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> if timing attacks are outside your thread model, though, what do you want that realms don't already give you?\n\n```js\nwhile (true);\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8f4OVBZ1xHJ3zLixxJfpY3QLY6mzncOyrs3uqy2ezGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if timing attacks are outside your thread model, though, what do you want that realms don&#39;t already give you?</blockquote></mx-reply><pre><code class=\"language-js\">while (true);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1646106421251,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F8lkEzlWW3frzyjzGMl0mUC2dPNYt0WzTUUj0YzAW7U"},
{"content":{"body":"do it in a worker?","msgtype":"m.text","org.matrix.msc1767.text":"do it in a worker?"},"ts":1646106435702,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rPFtX1kX5qAFc9IIq0GgxTYTij8sVghwYGnW8qxp57o"},
{"content":{"body":"well maybe i dont need to worry about while true so much","msgtype":"m.text","org.matrix.msc1767.text":"well maybe i dont need to worry about while true so much"},"ts":1646106506980,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$HXqMD_hXoNszlJrd7eQy4Ci_NVPiu91hXyAIkQH8Qhk"},
{"content":{"body":"I would be really interested in any threading model that would allow something like `myThread.shareReference(globalThis);` that wouldn't completely break every JS coder's expectations.","format":"org.matrix.custom.html","formatted_body":"I would be really interested in any threading model that would allow something like <code>myThread.shareReference(globalThis);</code> that wouldn't completely break every JS coder's expectations.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would be really interested in any threading model that would allow something like `myThread.shareReference(globalThis);` that wouldn't completely break every JS coder's expectations.","mimetype":"text/plain"},{"body":"I would be really interested in any threading model that would allow something like <code>myThread.shareReference(globalThis);</code> that wouldn't completely break every JS coder's expectations.","mimetype":"text/html"}]},"ts":1646106742759,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$wScOP78qRfCrO0soxDoh5jN8MRTuRwGZma774tFw_rk"},
{"content":{"body":"I don't think you can simultaneously have \"shared memory\" and \"doesn't completely break every JS coder's expectations\"","msgtype":"m.text","org.matrix.msc1767.text":"I don't think you can simultaneously have \"shared memory\" and \"doesn't completely break every JS coder's expectations\""},"ts":1646106915922,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bI357l5NKmyW71uYJ1E2Da7abEVh3N76lwmVFdD54Yo"},
{"content":{"body":"at least not without adding in the whole of Rust's ownership model","msgtype":"m.text","org.matrix.msc1767.text":"at least not without adding in the whole of Rust's ownership model"},"ts":1646106936436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mEqgkt6S0v8OV31pvcghPguDb-q7XAJs4VJadYLQUfI"},
{"content":{"body":"... which is going to break every JS coder's expectations anyway, for that matter","msgtype":"m.text","org.matrix.msc1767.text":"... which is going to break every JS coder's expectations anyway, for that matter"},"ts":1646106942946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QsOY1Tu44Ko83wkhlajb0CBGQclpUVaWmL7-wTOXF_w"},
{"content":{"body":"I think \"multi-threading\" in JS is a bad term, since \"threads\" imply certain stuff like shared memory that is practically impossible with JS.","msgtype":"m.text","org.matrix.msc1767.text":"I think \"multi-threading\" in JS is a bad term, since \"threads\" imply certain stuff like shared memory that is practically impossible with JS."},"ts":1646107204097,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$tQ-BrPl1gkKBCCIDIuYtwWy_-yCv6hgcPhEVAXXjWR0"},
{"content":{"body":"threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server.","msgtype":"m.text","org.matrix.msc1767.text":"threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server."},"ts":1646107316621,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$FjSe_Hyxc1EqHiPMkvGvaPqrzcLXWZCAbvUtGybdrt8"},
{"content":{"body":" * threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server.","m.new_content":{"body":"threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server.","msgtype":"m.text","org.matrix.msc1767.text":"threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server."},"m.relates_to":{"event_id":"$FjSe_Hyxc1EqHiPMkvGvaPqrzcLXWZCAbvUtGybdrt8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * threads are (I think) OS feature leveraging CPU capabilities that nothing of JS actually relies on. Workers could run on a separate process or even a remote server."},"ts":1646107382495,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$dx9cJrpjj0wiNx5HKc9z2Rco4a2e4CMXmIgNU5Rv0dU"},
{"content":{"body":"Again shared memory already exists. SharedArrayBuffer has allowed this for a long time now.","msgtype":"m.text","org.matrix.msc1767.text":"Again shared memory already exists. SharedArrayBuffer has allowed this for a long time now."},"ts":1646107497734,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$tGb0edlMcEDJG2Kn17VqcAY2xzgbPuiaelwntzx5bU8"},
{"content":{"body":"It's explicitly shared memory. That's very different from implicitly shared memory where all of a process' memory is shared between threads.","msgtype":"m.text","org.matrix.msc1767.text":"It's explicitly shared memory. That's very different from implicitly shared memory where all of a process' memory is shared between threads."},"ts":1646107564661,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$2rGK50EovDnP3mZtDagNjgXVBMPiBdSN6H6X_QlN7CI"},
{"content":{"body":"@sirisian I was thinking about your initial question, about the async/await. Async/await is just a different way to write some function calls (callbacks). For it to use multiple threads, every function call would have to be possibly using threads. For most callbacks, they just only call other functions. The functions that actually do heavy computation is a vanishingly small percentage. Creating a new costly thread for each function call would immediately erode any performance benefit gained from parallelism.\n\nThis might be fixed by JS engines inspecting code and spinning only such heavy computation functions into separate threads if it recognizes it to be safe. But that completely up to engine whether to do it and isn't a language issue at all.","msgtype":"m.text","org.matrix.msc1767.text":"@sirisian I was thinking about your initial question, about the async/await. Async/await is just a different way to write some function calls (callbacks). For it to use multiple threads, every function call would have to be possibly using threads. For most callbacks, they just only call other functions. The functions that actually do heavy computation is a vanishingly small percentage. Creating a new costly thread for each function call would immediately erode any performance benefit gained from parallelism.\n\nThis might be fixed by JS engines inspecting code and spinning only such heavy computation functions into separate threads if it recognizes it to be safe. But that completely up to engine whether to do it and isn't a language issue at all."},"ts":1646108647322,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$eTtI_0Q89rmzA9EN1_dY_yVHRJLe48aaMmpBG-4ZTPM"},
{"content":{"body":"The threading would be explicit when making a call.","msgtype":"m.text","org.matrix.msc1767.text":"The threading would be explicit when making a call."},"ts":1646108729164,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Y7U9Cj4VV7-o_ccKokkD_G-OPvaGPn42R1RmW_Nbt9A"},
{"content":{"body":"There's nothing that prevents existing engines to add a feature that they run heavy computation parallelly in separate threads if they can handle the possible side effects.","msgtype":"m.text","org.matrix.msc1767.text":"There's nothing that prevents existing engines to add a feature that they run heavy computation parallelly in separate threads if they can handle the possible side effects."},"ts":1646108730846,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$zJyvr2FRYRbrfuZo4mFbLEHgU-CP08bjkGS7dR3D-ao"},
{"content":{"body":"So it would be a normal function that is called?","msgtype":"m.text","org.matrix.msc1767.text":"So it would be a normal function that is called?"},"ts":1646108821143,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Fb1UO1-rxlm_QXRNS_bEzEK2bJD1HhrQThfWpZZsMQs"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1646108857722,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$XcCQtO3u3ii8A24qVmszrUkhfwE5IPCi9qav-N1asv0"},
{"content":{"body":"A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?","msgtype":"m.text","org.matrix.msc1767.text":"A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?"},"ts":1646108954921,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Rf8wlWYmqJRkLqtwVefE7HibwcXjT7pUYWN78xXivcg"},
{"content":{"body":" * A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?","m.new_content":{"body":"A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?","msgtype":"m.text","org.matrix.msc1767.text":"A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?"},"m.relates_to":{"event_id":"$Rf8wlWYmqJRkLqtwVefE7HibwcXjT7pUYWN78xXivcg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * A normal function has access to all globals and closures and is free to modify them as it sees fit. If it was run as a thread, this would mean implicit shared memory. How would other code that runs parallel to that be safe from variables changing their values suddenly?"},"ts":1646108987993,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$2M_mOIomf8uguNF9IWRCUMSOmYmpbvKD9u9KKzKKBV0"},
{"content":{"body":"You could for example call multiple functions then await Promise.allSettled on them if you wanted to join back in an async task. I haven't thought about this hard at all, but like foo.callThread(..., args); which returns a promise. Ideally we'd have cancellable promises by then. >_>","msgtype":"m.text","org.matrix.msc1767.text":"You could for example call multiple functions then await Promise.allSettled on them if you wanted to join back in an async task. I haven't thought about this hard at all, but like foo.callThread(..., args); which returns a promise. Ideally we'd have cancellable promises by then. >_>"},"ts":1646108997932,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$WcD-eNiH5N-1VK9DXKJFfep8f76VVNCj5oWLPKL9Jbo"},
{"content":{"body":"It wouldn't be safe at all. Using threads would have an assumed level of complexity just like using SharedArrayBuffer stuff.","msgtype":"m.text","org.matrix.msc1767.text":"It wouldn't be safe at all. Using threads would have an assumed level of complexity just like using SharedArrayBuffer stuff."},"ts":1646109047310,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$SGfrx58uS7uotK-2U_l3PpoiSiEKedjo4fosyRThh8Q"},
{"content":{"body":"From what I've understood of SharedArrayBuffer is that it's always completely safe to use due to how extremely narrow and restricted it's features are. It's not even complex. It's cumbersome.","msgtype":"m.text","org.matrix.msc1767.text":"From what I've understood of SharedArrayBuffer is that it's always completely safe to use due to how extremely narrow and restricted it's features are. It's not even complex. It's cumbersome."},"ts":1646109138095,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$jaMq7mHHUQP2b48eJW7DRtlBBGS9PXTlrqhchghok2I"},
{"content":{"body":"I should mentioned it would be my hope that with this we'd all get concurrent data structures and standard library stuff in the far future. I noticed that state of JS mentioned some data structure stuff. Not sure the context of that. Concurrent queue at the least. heh.","msgtype":"m.text","org.matrix.msc1767.text":"I should mentioned it would be my hope that with this we'd all get concurrent data structures and standard library stuff in the far future. I noticed that state of JS mentioned some data structure stuff. Not sure the context of that. Concurrent queue at the least. heh."},"ts":1646109149063,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$Il0JKRYP2Abeay263KUd9gmggKFeTZGUxRhGn3oYqYk"},
{"content":{"body":"Also, people should take their promises more seriously. :-) Don't ask for promises that you can't receive later.","msgtype":"m.text","org.matrix.msc1767.text":"Also, people should take their promises more seriously. :-) Don't ask for promises that you can't receive later."},"ts":1646109318413,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$JYOVZpRUGQqV_O_1yn64d7UjBwmT-ox3u1wz9k6hH4U"},
{"content":{"body":"Cancelable promises are a terrible term since it never cancels any work a promise does. It only cancels the receiving of results. That's not what people expect.","msgtype":"m.text","org.matrix.msc1767.text":"Cancelable promises are a terrible term since it never cancels any work a promise does. It only cancels the receiving of results. That's not what people expect."},"ts":1646109591033,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$5JgTnx5oqkNrxUGLZx_QbfcARFfNCQdzZlOL4uEGuKM"},
{"content":{"body":" * Cancelable promises are a terrible term since it never reliably cancels any work a promise does. It only cancels the receiving of results. That's not what people expect.","m.new_content":{"body":"Cancelable promises are a terrible term since it never reliably cancels any work a promise does. It only cancels the receiving of results. That's not what people expect.","msgtype":"m.text","org.matrix.msc1767.text":"Cancelable promises are a terrible term since it never reliably cancels any work a promise does. It only cancels the receiving of results. That's not what people expect."},"m.relates_to":{"event_id":"$5JgTnx5oqkNrxUGLZx_QbfcARFfNCQdzZlOL4uEGuKM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Cancelable promises are a terrible term since it never reliably cancels any work a promise does. It only cancels the receiving of results. That's not what people expect."},"ts":1646109616194,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$PARuw2QWlGZr47Krojd2BzzPAOPZ_j0nLo_DpU9zgG0"},
{"content":{"body":"Good point.","msgtype":"m.text","org.matrix.msc1767.text":"Good point."},"ts":1646109672611,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$12DsJ-kklNHxxQl_i9YApEPkpIElem1Iedebn9-RVDc"},
{"content":{"body":"Which is why code should rather gracefully receive and discard out-of-order and obsolete data received from promises. Instead of canceling promises (which is quite simple to do), you could expect a version number from a REST call. You could add metadata to a REST call that you receive with the result in a way to see that the result is for the current context you're viewing. Etc...","msgtype":"m.text","org.matrix.msc1767.text":"Which is why code should rather gracefully receive and discard out-of-order and obsolete data received from promises. Instead of canceling promises (which is quite simple to do), you could expect a version number from a REST call. You could add metadata to a REST call that you receive with the result in a way to see that the result is for the current context you're viewing. Etc..."},"ts":1646110177390,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$WUS0rOH1N6qMjVoZ630MyDPawIxv8VteykOBnvOvr-E"},
{"content":{"body":"Kind of surprised there isn't a simple way to throw at the next await kind of language design that could be made for that. I have a few cancellable systems where there's stuff like await Promise.race([cancelPromise, workPromise]); multiple lines.","msgtype":"m.text","org.matrix.msc1767.text":"Kind of surprised there isn't a simple way to throw at the next await kind of language design that could be made for that. I have a few cancellable systems where there's stuff like await Promise.race([cancelPromise, workPromise]); multiple lines."},"ts":1646110218594,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$2zx9EmVYyF6TpCMRnPIka17nT3tvqNGJXmLF7vpokZQ"},
{"content":{"body":"You could do it with generators.","msgtype":"m.text","org.matrix.msc1767.text":"You could do it with generators."},"ts":1646110441994,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$9UwlePCilD9kHO6VvI0LwFwbnFnPcrwVMoxCCa5Pr-E"},
{"content":{"body":"But it's very cumbersome.","msgtype":"m.text","org.matrix.msc1767.text":"But it's very cumbersome."},"ts":1646110549280,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$RHz9mYqWGOQVzycwUL2lK2EUvgTTO85eL0zSyi3LtAc"},
{"content":{"body":"Consume the generator unless the cancel flag is set kind of thing and in the worker just yield all the work?","msgtype":"m.text","org.matrix.msc1767.text":"Consume the generator unless the cancel flag is set kind of thing and in the worker just yield all the work?"},"ts":1646110576126,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$-2dlFj31TwSYx2mxSqPS9zoHVJpVQmFbRtwtBfu0mTI"},
{"content":{"body":"Not a bad idea. I could see that being kind of elegant in some of my code. I think it was written before async generators.","msgtype":"m.text","org.matrix.msc1767.text":"Not a bad idea. I could see that being kind of elegant in some of my code. I think it was written before async generators."},"ts":1646110622346,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$iG1nwwfUU1yImuBP5HzB2Ntn945vTOCT8iaQxZKQqQ0"},
{"content":{"body":"Yeah. redux-saga is one pretty well known example of that.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah. redux-saga is one pretty well known example of that."},"ts":1646110656933,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$HlVoVyda4GwNzbBgXDzUS2AkH1lEvY1oF43JoqNqPUo"},
{"content":{"body":"I really liked redux-saga at one point. I tried to use it in everything non-simple. Now I removed it from my own hobby project.","msgtype":"m.text","org.matrix.msc1767.text":"I really liked redux-saga at one point. I tried to use it in everything non-simple. Now I removed it from my own hobby project."},"ts":1646110849648,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$6v59b5YSRkkItDwBX_0sHvanlv3km3GaFd0ZboqE1O4"},
{"content":{"body":"Now I write mega-reducers. :-)","msgtype":"m.text","org.matrix.msc1767.text":"Now I write mega-reducers. :-)"},"ts":1646110888655,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$gm3WJicl2HPovuwmXaHj0Q6Vcly3-gf6TtzTJofxzeU"},
{"content":{"body":"Well, I'm in the process of removing most of the complex sagas.","msgtype":"m.text","org.matrix.msc1767.text":"Well, I'm in the process of removing most of the complex sagas."},"ts":1646110970815,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$5yeqAXSdO_mXSKq0mG4IkALHCafhVDsA0aFifrSszNQ"},
{"content":{"body":"> Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations\n\n@bakkot it looks to me like _nobody_ is following the spec here but V8 comes closest. Absent overlap between VarDeclaredNames and parameter names, FunctionDeclarationInstantiation steps 27 and 28 (the former when any parameter has an initializer, the latter otherwise) should both create a binding for each variable and initialize it to `undefined`‚Äîeven if that variable is named \"arguments\".","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations</p>\n</blockquote>\n<p>@bakkot it looks to me like <em>nobody</em> is following the spec here but V8 comes closest. Absent overlap between VarDeclaredNames and parameter names, FunctionDeclarationInstantiation steps 27 and 28 (the former when any parameter has an initializer, the latter otherwise) should both create a binding for each variable and initialize it to <code>undefined</code>‚Äîeven if that variable is named &quot;arguments&quot;.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong _somewhere_, and it seems quite likely to be wrong in the cases where it differs from other implementations\n\n@bakkot it looks to me like _nobody_ is following the spec here but V8 comes closest. Absent overlap between VarDeclaredNames and parameter names, FunctionDeclarationInstantiation steps 27 and 28 (the former when any parameter has an initializer, the latter otherwise) should both create a binding for each variable and initialize it to `undefined`‚Äîeven if that variable is named \"arguments\".","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Tracing through the full machinery would take me a while, but I can at least confirm that there should not be a difference between simple and non-simple arguments lists in this case, so V8 is definitely wrong <em>somewhere</em>, and it seems quite likely to be wrong in the cases where it differs from other implementations</p>\n</blockquote>\n<p>@bakkot it looks to me like <em>nobody</em> is following the spec here but V8 comes closest. Absent overlap between VarDeclaredNames and parameter names, FunctionDeclarationInstantiation steps 27 and 28 (the former when any parameter has an initializer, the latter otherwise) should both create a binding for each variable and initialize it to <code>undefined</code>‚Äîeven if that variable is named &quot;arguments&quot;.</p>\n","mimetype":"text/html"}]},"ts":1646155662035,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$74MrQBcRo8ten1aTfowKylA42y741TYZH7HAtqzDWSo"}
]