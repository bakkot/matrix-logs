[
{"content":{"body":"sure, but in the same sense as flatMap itself is `.reduce((out, ...args) => out.concat(mapper(...args)), [])`","format":"org.matrix.custom.html","formatted_body":"sure, but in the same sense as flatMap itself is <code>.reduce((out, ...args) =&gt; out.concat(mapper(...args)), [])</code>","msgtype":"m.text"},"ts":1626402694259,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$EyHCzuskFgX22mjJvuof5lnxAsvH6GzdRNK2hWFwdXU"},
{"content":{"body":"Hi! I just noticed that `Atomics.multiply()` isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?","format":"org.matrix.custom.html","formatted_body":"Hi! I just noticed that <code>Atomics.multiply()</code> isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?","msgtype":"m.text"},"ts":1626428910542,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$bsYKud3IZ0Zc2gR8_sCyKUABhoLRK1Artg43m5RB28U"},
{"content":{"body":"What objects in 262 use option bags?","msgtype":"m.text"},"ts":1626459559566,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$uNqi2WQQoiWje85bMt-ZEYi3fkiNV7eWFS293HeJ954"},
{"content":{"body":"I am investigating whether error.cause's HasProperty + Get pattern is standard or unusual","msgtype":"m.text"},"ts":1626459571739,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$i8q9TYRgWkHcunxYGjOif10jkIyS5N7nGxCp-jlCfF8"},
{"content":{"body":"262 itself does not tend to use object bags much, though that's changing. 402 uses them more and just does Get, IIRC","msgtype":"m.text"},"ts":1626459722785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Re2MNNn7aK2v0oyH1re8sbOthm52e-x2jzANMgf35Ns"},
{"content":{"body":"I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, `undefined` is a value one might reasonably want to use","format":"org.matrix.custom.html","formatted_body":"I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, <code>undefined</code> is a value one might reasonably want to use","msgtype":"m.text"},"ts":1626459768119,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jnP6hJQg6KYZWVRxfm1cmZM8zwZb_H1mLf-_5MvIsrE"},
{"content":{"body":"In cases where `undefined` is not an expected value there's no particularly reason to do a Has check first","format":"org.matrix.custom.html","formatted_body":"In cases where <code>undefined</code> is not an expected value there's no particularly reason to do a Has check first","msgtype":"m.text"},"ts":1626459788402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o3hTyEtTiflisITG7bsJvL83e313M7lIILMtPmE_q_U"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1626459803387,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$EqeLlVDav4uFcIkP7kSFxB84BdipQqdD0G9ZpStdMxc"},
{"content":{"body":"I do not like distinguishing between undefined and not-present in the options bag","msgtype":"m.text"},"ts":1626459818003,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IS_O9AqRyzXHjmhDzt4_KWPS_3lvoVWXAT0UajEnWfo"},
{"content":{"body":"As well as on the object itself","msgtype":"m.text"},"ts":1626459822788,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XbxvX5P0Ov9CO4KR8MMDQND-aW9hY_sKQmBOU9Sx3kY"},
{"content":{"body":"I feel like if you really want to split hairs there you should use error.cause === undefined vs. error.cause === null, instead of testing 'cause' in error","msgtype":"m.text"},"ts":1626459847483,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$i55oeUtVZwgxlMg-cBrOgB7omwkBh06T-nheO_CzSds"},
{"content":{"body":"The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`","format":"org.matrix.custom.html","formatted_body":"The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing <code>catch (e) { throw new Error('message, { cause: e })</code> without testing the value of <code>e</code>","msgtype":"m.text"},"ts":1626459890820,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7mNOVXHDqDfoZYaoYCkBJyYmmyQTOtRFJhFqWPP2nAk"},
{"content":{"body":" * The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`","format":"org.matrix.custom.html","formatted_body":" * The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing <code>catch (e) { throw new Error('message, { cause: e })</code> without testing the value of <code>e</code>","m.new_content":{"body":"The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`","format":"org.matrix.custom.html","formatted_body":"The problem is that the error values are generally being handed to you, not a thing you are creating yourself: that is, you are writing <code>catch (e) { throw new Error('message, { cause: e })</code> without testing the value of <code>e</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$7mNOVXHDqDfoZYaoYCkBJyYmmyQTOtRFJhFqWPP2nAk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1626459905056,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ar8OusUWzs7wme5VONye9p9uPvt3ylOHRUKFLGnEqn8"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1626459994734,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$tWE0rkslo6UQblnCLLB8Mi27pqczxfiqyTg_6ALhGDA"},
{"content":{"body":"But I don't understand why that means it's important that `'cause' in new Error('message')` is false whereas `'cause' in new Error('message', { cause: undefined })` is true.","format":"org.matrix.custom.html","formatted_body":"But I don't understand why that means it's important that <code>'cause' in new Error('message')</code> is false whereas <code>'cause' in new Error('message', { cause: undefined })</code> is true.","msgtype":"m.text"},"ts":1626460036364,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$JixH00LaWrijPgOWdebbvPo1Tf4hKR9Gb0YXXnNVL5k"},
{"content":{"body":"Ah, this was on the assumption that there would not be a `cause` property if you didn't pass the options bag at all","format":"org.matrix.custom.html","formatted_body":"Ah, this was on the assumption that there would not be a <code>cause</code> property if you didn't pass the options bag at all","msgtype":"m.text"},"ts":1626460119587,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P418w-ZwiDbTZ03cif3w1MJ8GZclsKXn6Ivr1JrB0QI"},
{"content":{"body":"that is, I think it's important that `'cause' in new Error('message', { cause: undefined })`, since you are explicitly asking to create an error with a `cause`","format":"org.matrix.custom.html","formatted_body":"that is, I think it's important that <code>'cause' in new Error('message', { cause: undefined })</code>, since you are explicitly asking to create an error with a <code>cause</code>","msgtype":"m.text"},"ts":1626460139481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yWCrtqrC5gtitC0qmdj0jx6JLct5j-SS5g7EChvMCro"},
{"content":{"body":"I don't know if I have an opinion about whether `'cause' in new Error('message')` should also be true","format":"org.matrix.custom.html","formatted_body":"I don't know if I have an opinion about whether <code>'cause' in new Error('message')</code> should also be true","msgtype":"m.text"},"ts":1626460170487,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtzABgwR5s4hMm0bIeFUkWaTOa_kji16ohhVBkw8eV0"},
{"content":{"body":"but I do think `'cause' in new Error('message')` should match `'cause' in new Error('message', {})`","format":"org.matrix.custom.html","formatted_body":"but I do think <code>'cause' in new Error('message')</code> should match <code>'cause' in new Error('message', {})</code>","msgtype":"m.text"},"ts":1626460205555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j5MdrLv_TY1S9R62HhiaDTAdST0uaFpAZHSXsEBqMU8"},
{"content":{"body":"My opinion is it should also be true","msgtype":"m.text"},"ts":1626460214951,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$HNnF-Lz5dWMVMFtVpozaW8NUoyQxdwH_vWXKJBlHhv8"},
{"content":{"body":"I.e. we should not branch behavior on {} vs. { cause: undefined }","msgtype":"m.text"},"ts":1626460228999,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$Peec4xTOnkczapxTBbY7vVFXGOTiejyNqnuDdTfePG8"},
{"content":{"body":"Filed https://github.com/tc39/proposal-error-cause/issues/35","msgtype":"m.text"},"ts":1626460271037,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$nTsmdzKzyVfjuSafNXfvgvu8LNSZYYbL2OJTn4IO4iE"},
{"content":{"body":"Mind, it's already stage 3, so I don't know how much appetite there will be for this sort of change","msgtype":"m.text"},"ts":1626460591599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pq3XS3TEsGv6gztj8pt6x60nuLTBR8RDxQU86pvCcRw"},
{"content":{"body":"it's also already shipping","msgtype":"m.text"},"ts":1626461792933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wGc5knCNGF40KjKT0i0RQKJrCGklwaYKdDD-hth6aUE"},
{"content":{"body":"well, almost, coming up in chrome 93","msgtype":"m.text"},"ts":1626461798481,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KNGEoNJZbJeJWYlRZwUXj57HF6Wkv5TcZq1KSbphSlc"},
{"content":{"body":"> What objects in 262 use option bags?\n\nTemporal uses options bags in almost every method that takes parameters. If we're using them incorrectly or inconsistently, let us know!\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>What objects in 262 use option bags?</p>\n</blockquote>\n<p>Temporal uses options bags in almost every method that takes parameters. If we're using them incorrectly or inconsistently, let us know!</p>\n","msgtype":"m.text"},"ts":1626462102585,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$LUzgtpCvxtZPYFIpjqg2wOEX5-5jnII-YGmi2YQHlqA"},
{"content":{"body":"My intent was for this to be \"implementer feedback\" as we work to spec/implement structured clone for it","msgtype":"m.text"},"ts":1626463104788,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$TQ38FfnsHQ-AZdvuG1B1gTVMgNQyBBiW0lXvANPyrT0"},
{"content":{"body":"i was chatting with marja on the V8 team about just this the other day, on whether we should unify option bag handling to be Get for Error cause","msgtype":"m.text"},"ts":1626463525477,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TvBw3qQ3faV2molsVRRST-JkgRGc1hsDUnx45M26Ceo"},
{"content":{"body":"my conclusion was that \"just a Get\" should be the default behavior for option bags, but once in a while a specific use case arises that requires special casing with a Has, like Error cause has with wanting to capture undefined/falsy values, which can be thrown","msgtype":"m.text"},"ts":1626463581620,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q8gdg7PorA_kIVyhGetd1vY2qHgVacpkYKI2M3Mzx0g"},
{"content":{"body":"wait, is that what's being discussed here, i might've skimmed it too fast","msgtype":"m.text"},"ts":1626463614854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6jTuDhWyIph_ryg_7BM-kFEqt2xyYXmuhLDgZaS8ygY"},
{"content":{"body":"Pretty much yeah. I just think we shouldn't distinguish because { cause: undefined } and {}","msgtype":"m.text"},"ts":1626464547299,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$3Fy_DLzWFfUM4Sat8GZNXRqtxHys-YKOK37L-p4c62A"},
{"content":{"body":"From a documentation standpoint, does `{ cause: null }` mean \"I am filling `cause` but I don't know what the cause was\" as opposed to `{ cause: undefined }` which means \"I didn't fill in a `cause`\"?","format":"org.matrix.custom.html","formatted_body":"From a documentation standpoint, does <code>{ cause: null }</code> mean &quot;I am filling <code>cause</code> but I don't know what the cause was&quot; as opposed to <code>{ cause: undefined }</code> which means &quot;I didn't fill in a <code>cause</code>&quot;?","msgtype":"m.text"},"ts":1626464998552,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$BT29t4WCMfnIjvbPSvIj4-_Ao9hPgOLrrTB5n_zFbwQ"},
{"content":{"body":"are you asking about the status quo or domenic's suggestion?","msgtype":"m.text"},"ts":1626465428701,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$W795HoLj6EPiCuRaXcNqqKkXAjFh7_6PzrtSSWhmNtw"},
{"content":{"body":"the status quo is `cause`, if present at all, is honored, since you can `throw undefined;` and maybe you want to capture that in the `cause`","format":"org.matrix.custom.html","formatted_body":"the status quo is <code>cause</code>, if present at all, is honored, since you can <code>throw undefined;</code> and maybe you want to capture that in the <code>cause</code>","msgtype":"m.text"},"ts":1626465453130,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hw1MFjqZGbly8a17e8IPNTeWwA9Saqo1pB3JOwN3Q1k"},
{"content":{"body":"it seems hostile to future options for `new Error(message, {})` to create a `cause` property that would not be present on the result of `new Error(message)`","format":"org.matrix.custom.html","formatted_body":"it seems hostile to future options for <code>new Error(message, {})</code> to create a <code>cause</code> property that would not be present on the result of <code>new Error(message)</code>","msgtype":"m.text"},"ts":1626467227150,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$KbW18wVSrvOgZ8b2LPzpl5AubHZZF4rlOenn7jKF2K4"},
{"content":{"body":"Got it. TIL that `throw undefined` was a thing. 🤷‍♂️ Just when I thought I knew all the weird parts of ECMAScript, it turns out there's always something weirder!","format":"org.matrix.custom.html","formatted_body":"Got it. TIL that <code>throw undefined</code> was a thing. 🤷‍♂️ Just when I thought I knew all the weird parts of ECMAScript, it turns out there's always something weirder!","msgtype":"m.text"},"ts":1626467392290,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$z7pAO-9-6j6j5sjoGdnHI-KqqqBYwCFk6dChZBqzyC8"}
]