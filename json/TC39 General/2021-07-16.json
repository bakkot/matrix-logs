[
{"content":{"body":"sure, but in the same sense as flatMap itself is `.reduce((out, ...args) => out.concat(mapper(...args)), [])`","format":"org.matrix.custom.html","formatted_body":"sure, but in the same sense as flatMap itself is <code>.reduce((out, ...args) =&gt; out.concat(mapper(...args)), [])</code>","msgtype":"m.text"},"ts":1626402694259,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$EyHCzuskFgX22mjJvuof5lnxAsvH6GzdRNK2hWFwdXU"},
{"content":{"body":"Hi! I just noticed that `Atomics.multiply()` isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?","format":"org.matrix.custom.html","formatted_body":"Hi! I just noticed that <code>Atomics.multiply()</code> isn't a thing. Is that because for all other operations you don't need to know whether the type is signed or unsigned but for multiplication you do?","msgtype":"m.text"},"ts":1626428910542,"senderName":"Andreu Botella (he/they)","senderId":"@andreubotella:mozilla.org","id":"$bsYKud3IZ0Zc2gR8_sCyKUABhoLRK1Artg43m5RB28U"},
{"content":{"body":"What objects in 262 use option bags?","msgtype":"m.text"},"ts":1626459559566,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$uNqi2WQQoiWje85bMt-ZEYi3fkiNV7eWFS293HeJ954"},
{"content":{"body":"I am investigating whether error.cause's HasProperty + Get pattern is standard or unusual","msgtype":"m.text"},"ts":1626459571739,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$i8q9TYRgWkHcunxYGjOif10jkIyS5N7nGxCp-jlCfF8"},
{"content":{"body":"262 itself does not tend to use object bags much, though that's changing. 402 uses them more and just does Get, IIRC","msgtype":"m.text"},"ts":1626459722785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Re2MNNn7aK2v0oyH1re8sbOthm52e-x2jzANMgf35Ns"},
{"content":{"body":"I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, `undefined` is a value one might reasonably want to use","format":"org.matrix.custom.html","formatted_body":"I think we are in generally in favor of just doing Get; I argued for error.cause to be a special case because, unusually, <code>undefined</code> is a value one might reasonably want to use","msgtype":"m.text"},"ts":1626459768119,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jnP6hJQg6KYZWVRxfm1cmZM8zwZb_H1mLf-_5MvIsrE"},
{"content":{"body":"In cases where `undefined` is not an expected value there's no particularly reason to do a Has check first","format":"org.matrix.custom.html","formatted_body":"In cases where <code>undefined</code> is not an expected value there's no particularly reason to do a Has check first","msgtype":"m.text"},"ts":1626459788402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o3hTyEtTiflisITG7bsJvL83e313M7lIILMtPmE_q_U"},
{"content":{"body":"Hmm","msgtype":"m.text"},"ts":1626459803387,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$EqeLlVDav4uFcIkP7kSFxB84BdipQqdD0G9ZpStdMxc"},
{"content":{"body":"I do not like distinguishing between undefined and not-present in the options bag","msgtype":"m.text"},"ts":1626459818003,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$IS_O9AqRyzXHjmhDzt4_KWPS_3lvoVWXAT0UajEnWfo"},
{"content":{"body":"As well as on the object itself","msgtype":"m.text"},"ts":1626459822788,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$XbxvX5P0Ov9CO4KR8MMDQND-aW9hY_sKQmBOU9Sx3kY"},
{"content":{"body":"I feel like if you really want to split hairs there you should use error.cause === undefined vs. error.cause === null, instead of testing 'cause' in error","msgtype":"m.text"},"ts":1626459847483,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$i55oeUtVZwgxlMg-cBrOgB7omwkBh06T-nheO_CzSds"},
{"content":{"body":"The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing `catch (e) { throw new Error('message, { cause: e })` without testing the value of `e`","format":"org.matrix.custom.html","formatted_body":"The problem is that the error values are generally being handed to you, not a thing you are given yourself: that is, you are writing <code>catch (e) { throw new Error('message, { cause: e })</code> without testing the value of <code>e</code>","msgtype":"m.text"},"ts":1626459890820,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7mNOVXHDqDfoZYaoYCkBJyYmmyQTOtRFJhFqWPP2nAk"}
]