[
{"content":{"body":"why aren't generator functions iterable?","m.mentions":{},"msgtype":"m.text"},"ts":1729642626364,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ot_-pP_lQs-2mNFAjA2ZMkNUwVJzcIUh4b9kEHwiLmg"},
{"content":{"body":"you have to manually call it","m.mentions":{},"msgtype":"m.text"},"ts":1729642636668,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w2doo62-U1jHN8a9wDYYMkerTSgP8uui2Ccf_VuMqyA"},
{"content":{"body":" * you have to manually call a generator","m.mentions":{},"m.new_content":{"body":"you have to manually call a generator","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$w2doo62-U1jHN8a9wDYYMkerTSgP8uui2Ccf_VuMqyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729642645573,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AqK9k2nwPoZ3OIvnYjX6tP5ig1PCaucnhMLIjvDnRdY"},
{"content":{"body":"the result is iterable, but... `[Symbol.iterator]` is already a call","format":"org.matrix.custom.html","formatted_body":"the result is iterable, but... <code>[Symbol.iterator]</code> is already a call","m.mentions":{},"msgtype":"m.text"},"ts":1729642662768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eoLlp23tiZErJO8L6ZlpNPP1ltJXlMTDiFmOSAGpruo"},
{"content":{"body":"I don't see any reason why `function* f(){}; for (a of f) { /* ... */ }` couldn't work","format":"org.matrix.custom.html","formatted_body":"I don't see any reason why <code>function* f(){}; for (a of f) { /* ... */ }</code> couldn't work","m.mentions":{},"msgtype":"m.text"},"ts":1729642681028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9h34BJWa5H0xVnu0og2IIKYSuGppmTmSmx7yn6xkb0Q"},
{"content":{"body":"```\n(function* (){}).__proto__[Symbol.iterator] = function(){ return this(); };\nfunction* f(){ yield 0; yield 1; }\nfor (let x of f) console.log(x);\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>(function* (){}).__proto__[Symbol.iterator] = function(){ return this(); };\nfunction* f(){ yield 0; yield 1; }\nfor (let x of f) console.log(x);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729642784037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$etqhx5c-rwpIdbdNWMNtP93FOhPSSpCHljj7MC_GbRo"},
{"content":{"body":"My generators often take arguments. Curious what your use case is where it doesn't","m.mentions":{},"msgtype":"m.text"},"ts":1729648584785,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$YAdu1Gsm4jRnrYSbhwEQig5JC48J59M0ZoAX2YTANUI"},
{"content":{"body":"the call makes it usable more than once","m.mentions":{},"msgtype":"m.text"},"ts":1729649128034,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$EgFLOWaiOPjK38SbKEscBTOW1WYC7llC4R8psy4l4zc"},
{"content":{"body":"`x[Symbol.iterator]()` or `for (const a of f())` makes a usable Iterator","format":"org.matrix.custom.html","formatted_body":"<code>x[Symbol.iterator]()</code> or <code>for (const a of f())</code> makes a usable Iterator","m.mentions":{},"msgtype":"m.text"},"ts":1729649172435,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$NdbnrGwiU4ebLtF5FunfQh-_t2IsJexA1dJVSx7tZhw"},
{"content":{"body":"Mathieu Hofman: `document.querySelectorAll()[Symbol.iterator]().toArray()` vs `[...document.querySelectorAll()]` is the main one i can think of, i wonder how comparable the perf is of these variations","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: <code>document.querySelectorAll()[Symbol.iterator]().toArray()</code> vs <code>[...document.querySelectorAll()]</code> is the main one i can think of, i wonder how comparable the perf is of these variations","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1729649314427,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$4wEhstJ_pdlJ3bz0CCXXyNDh1hfB7J66Q802tx0Xim4"},
{"content":{"body":"> <@meghanbun:matrix.org> the call makes it usable more than once\n\nI'm confused. A generator call result is an iterable iterator. It's not usable more than once.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$EgFLOWaiOPjK38SbKEscBTOW1WYC7llC4R8psy4l4zc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@meghanbun:matrix.org\">@meghanbun:matrix.org</a><br>the call makes it usable more than once</blockquote></mx-reply>I'm confused. A generator call result is an iterable iterator. It's not usable more than once.","m.mentions":{"user_ids":["@meghanbun:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EgFLOWaiOPjK38SbKEscBTOW1WYC7llC4R8psy4l4zc"}},"msgtype":"m.text"},"ts":1729650287234,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cQ-k4js-0WJ57xg72WEcKiUPs7E_w3fgZq5r5-etj48"},
{"content":{"body":"I think it would be equivalent of saying `[...document.querySelectorAll]` should work, which I'd find confusing.","format":"org.matrix.custom.html","formatted_body":"I think it would be equivalent of saying <code>[...document.querySelectorAll]</code> should work, which I'd find confusing.","m.mentions":{},"msgtype":"m.text"},"ts":1729650355167,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kaKOlLSXOz2NmUR_We4pSkTQFD70hk-4HDdz7eVuQGM"},
{"content":{"body":"Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do `document.querySelectorAll().toArray()`. You likely should be able to.","format":"org.matrix.custom.html","formatted_body":"Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do <code>document.querySelectorAll().toArray()</code>. You likely should be able to.","m.mentions":{},"msgtype":"m.text"},"ts":1729650437853,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$C6tYDXpFQT59HzCR0j4c6cEj92FxXK-1AKDdq9xvQEE"},
{"content":{"body":" * I think it would be equivalent of saying `[...someGenerator]` should work, which I'd find confusing.","format":"org.matrix.custom.html","formatted_body":" * I think it would be equivalent of saying <code>[...someGenerator]</code> should work, which I'd find confusing.","m.mentions":{},"m.new_content":{"body":"I think it would be equivalent of saying `[...someGenerator]` should work, which I'd find confusing.","format":"org.matrix.custom.html","formatted_body":"I think it would be equivalent of saying <code>[...someGenerator]</code> should work, which I'd find confusing.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kaKOlLSXOz2NmUR_We4pSkTQFD70hk-4HDdz7eVuQGM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729650518517,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RdGaXYp8mtqEI0NocpLUeX1wF6oEb23hLGhatc-n6Ik"},
{"content":{"body":" * Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do `someGenerator().toArray()`. You likely should be able to.","format":"org.matrix.custom.html","formatted_body":" * Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do <code>someGenerator().toArray()</code>. You likely should be able to.","m.mentions":{},"m.new_content":{"body":"Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do `someGenerator().toArray()`. You likely should be able to.","format":"org.matrix.custom.html","formatted_body":"Now what I don't know is if the Iterable iterator result returned by generator calls contain all the iterator helpers. Aka if you can do <code>someGenerator().toArray()</code>. You likely should be able to.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$C6tYDXpFQT59HzCR0j4c6cEj92FxXK-1AKDdq9xvQEE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729650527296,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gW36x7tlGt5loql-mVsan0LFqnMJ0GHlwDds8r0-PVE"},
{"content":{"body":"I just checked, iterator helpers are available on generator results","m.mentions":{},"msgtype":"m.text"},"ts":1729650622306,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pfAhCGx1799LftKDorflHo1DHQwFzq-mVe51IxN9aPk"},
{"content":{"body":"It's just that `document.querySelectorAll()` returns a NodeList, which is an iterable, not an iterator","format":"org.matrix.custom.html","formatted_body":"It's just that <code>document.querySelectorAll()</code> returns a NodeList, which is an iterable, not an iterator","m.mentions":{},"msgtype":"m.text"},"ts":1729650673260,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GT8tXXATOlG9G7flSNyIiMnSH2MnyDYV8WeGdBOPjf4"},
{"content":{"body":"Ok I think I see what the ask is. Is it to be able to have a value that is iterable multiple times and backed by a generator? In which case I suppose you can do `{[Symbol.iterator]: function *() { yield 1; yield 2; }` ? I just don't really want to encourage a value that's both a callable and an iterable, that feels confusing.","format":"org.matrix.custom.html","formatted_body":"Ok I think I see what the ask is. Is it to be able to have a value that is iterable multiple times and backed by a generator? In which case I suppose you can do <code>{[Symbol.iterator]: function *() { yield 1; yield 2; }</code> ? I just don't really want to encourage a value that's both a callable and an iterable, that feels confusing.","m.mentions":{},"msgtype":"m.text"},"ts":1729651085998,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CC16vs-j2H_6EbB6pSftp1-wC9LaDinIYLitfyIV6yc"},
{"content":{"body":"I just sometimes have 0-arity generators, and am annoyed that I need two calls to use them when one call would do just fine","m.mentions":{},"msgtype":"m.text"},"ts":1729651181496,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tCW8MSfF68pY1KifPwAQzZXLXVn6ntyHtYXKw-sp5Z8"},
{"content":{"body":"the main reason that this actually matters is that if some API takes an iterable, I have to pass it the opened generator, and the API might not close it","m.mentions":{},"msgtype":"m.text"},"ts":1729651241640,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hcGbsEJjrnUdudbwoILz7uPv4bAkoun20IEaBXrdKqs"},
{"content":{"body":"it would be better if the API opened it itself, so that it would be responsible for closing it","m.mentions":{},"msgtype":"m.text"},"ts":1729651263546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qK0Shyk-vCbVtrPFZeGd7_Qwlrh2thlq66hxElz5GPA"},
{"content":{"body":"but we only have a built-in notion of opening iterables, not generators, and generators are not iterables so it doesn't apply","m.mentions":{},"msgtype":"m.text"},"ts":1729651330823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wkNADb_NwQHn2Ri_qFxi9SRANuoVNDcjmV-PQgMkNxw"},
{"content":{"body":"I would also accept a `Generator.prototype.bindGenerator` which gave you a bound generator object which had `[Symbol.iterator]`, I guess","format":"org.matrix.custom.html","formatted_body":"I would also accept a <code>Generator.prototype.bindGenerator</code> which gave you a bound generator object which had <code>[Symbol.iterator]</code>, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1729651435934,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BKWTBj842MsOZC-j4bRYApTBo7d8OMqa_4_lb2QWGHI"},
{"content":{"body":"concretely: how do you correctly pass a generator to (e.g.)\n\n```js\nfunction take(n, iterable) {\n  if (typeof n !== 'number' || n < 0) throw new TypeError;\n  let result = [];\n  for (let item of iterable) {\n    if (result.length >= n) break;\n    result.push(item);\n  }\n  return result;  \n}\n```\n?\n\nJust doing `take(n, gen())` is wrong: if you do that the generator will never get closed if `n` is invalid. So... `take(n, { [Symbol.iterator]: () => gen() })`, I guess? that's dumb. ","format":"org.matrix.custom.html","formatted_body":"<p>concretely: how do you correctly pass a generator to (e.g.)</p>\n<pre><code class=\"language-js\">function take(n, iterable) {\n  if (typeof n !== 'number' || n &lt; 0) throw new TypeError;\n  let result = [];\n  for (let item of iterable) {\n    if (result.length &gt;= n) break;\n    result.push(item);\n  }\n  return result;  \n}\n</code></pre>\n<p>?</p>\n<p>Just doing <code>take(n, gen())</code> is wrong: if you do that the generator will never get closed if <code>n</code> is invalid. So... <code>take(n, { [Symbol.iterator]: () =&gt; gen() })</code>, I guess? that's dumb.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729651675135,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Df7lD1VTEzjxD9YcC3Af3t9YKn5pZTtiXStmm--JUFc"},
{"content":{"body":"Afaik a generator starts suspended so really there isn't any harm in dropping it before the first `.next()` call, right (well except for the weird sync arguments processing)","msgtype":"m.text"},"ts":1729653604856,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0SScYD2sYPx8aGEXvQamu2ya6gP6u6gpViPkRIo6_r0"},
{"content":{"body":"That said I do see the use case now. A \"bind to use once iterable\" might be a solution.","msgtype":"m.text"},"ts":1729653685391,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FrtE1Z9fM9rvvzx64VbvVHOp0hAL4UKEPsWlrhvSo4I"},
{"content":{"body":"It's not obvious that such an iterable should support multiple iterations unless explicitly allowed.","msgtype":"m.text"},"ts":1729653894566,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8VRn-GaN9pr5W42nCYPxpG89hmGrBosGtfTru7lX3FA"},
{"content":{"body":"how many things do we think could break if the spec changed it so generator argument processing was also deferred?","format":"org.matrix.custom.html","formatted_body":"how many things do we think could break if the spec changed it so generator argument processing was also deferred?","msgtype":"m.text"},"ts":1729664890139,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pR1Q8JCMt2LQG-fUwEiKRG7t-D1C40OPW0pye32oRXM"},
{"content":{"body":"I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.\n\nWhen running `let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)`,\n- V8 and SM throw a RangeError (maximum call stack exceeded)\n- XS correctly prints 2\n- JSC incorrectly prints `null`\n\nIt is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?","format":"org.matrix.custom.html","formatted_body":"<p>I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.</p>\n<p>When running <code>let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)</code>,</p>\n<ul>\n<li>V8 and SM throw a RangeError (maximum call stack exceeded)</li>\n<li>XS correctly prints 2</li>\n<li>JSC incorrectly prints <code>null</code></li>\n</ul>\n<p>It is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729676777043,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FzEYFZ1Tzs7rK8VsrRYLBry-hlAurtbq3s2zZBgW4jk"},
{"content":{"body":" * I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.\n\nWhen running `let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)`,\n\n- V8 and SM throw a RangeError (maximum call stack exceeded)\n- XS correctly prints 2\n- JSC incorrectly prints undefined\n\nIt is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?","format":"org.matrix.custom.html","formatted_body":" * <p>I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.</p>\n<p>When running <code>let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)</code>,</p>\n<ul>\n<li>V8 and SM throw a RangeError (maximum call stack exceeded)</li>\n<li>XS correctly prints 2</li>\n<li>JSC incorrectly prints undefined</li>\n</ul>\n<p>It is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?</p>\n","m.mentions":{},"m.new_content":{"body":"I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.\n\nWhen running `let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)`,\n\n- V8 and SM throw a RangeError (maximum call stack exceeded)\n- XS correctly prints 2\n- JSC incorrectly prints undefined\n\nIt is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?","format":"org.matrix.custom.html","formatted_body":"<p>I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.</p>\n<p>When running <code>let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)</code>,</p>\n<ul>\n<li>V8 and SM throw a RangeError (maximum call stack exceeded)</li>\n<li>XS correctly prints 2</li>\n<li>JSC incorrectly prints undefined</li>\n</ul>\n<p>It is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FzEYFZ1Tzs7rK8VsrRYLBry-hlAurtbq3s2zZBgW4jk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729676781927,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W0Ei_7h7X-13GjlD225y5DqYswt7WyuMydpzM-eGmxE"},
{"content":{"body":" * I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.\n\nWhen running `let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)`,\n\n- V8 and SM throw an error (maximum call stack exceeded)\n- XS correctly prints 2\n- JSC incorrectly prints undefined\n\nIt is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?","format":"org.matrix.custom.html","formatted_body":" * <p>I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.</p>\n<p>When running <code>let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)</code>,</p>\n<ul>\n<li>V8 and SM throw an error (maximum call stack exceeded)</li>\n<li>XS correctly prints 2</li>\n<li>JSC incorrectly prints undefined</li>\n</ul>\n<p>It is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?</p>\n","m.mentions":{},"m.new_content":{"body":"I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.\n\nWhen running `let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)`,\n\n- V8 and SM throw an error (maximum call stack exceeded)\n- XS correctly prints 2\n- JSC incorrectly prints undefined\n\nIt is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?","format":"org.matrix.custom.html","formatted_body":"<p>I notice a mention of a JavaScriptCore bug at https://github.com/lydell/js-tokens?tab=readme-ov-file#safari-warning, and I wonder if it's even possible to test it in test262.</p>\n<p>When running <code>let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e7)); print(res?.length)</code>,</p>\n<ul>\n<li>V8 and SM throw an error (maximum call stack exceeded)</li>\n<li>XS correctly prints 2</li>\n<li>JSC incorrectly prints undefined</li>\n</ul>\n<p>It is possible to test something in test262 that in practice in half of the engines throws due to the call stack size?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FzEYFZ1Tzs7rK8VsrRYLBry-hlAurtbq3s2zZBgW4jk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1729677371845,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LaB6i5VWj5Uj2CgR4f_SJ5elOv5Yqk4GNIJqZ6AbsI0"},
{"content":{"body":"I would say that it's practical with try..catch that admits only success or RangeError, but also unnecessary here if the scale is reduced a bit:\n```\n$ eshost -sx '\n  let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e6)); \n  if (Array.isArray(res)) {\n    print(JSON.stringify(res.map(s => s.length > 9 ? s.slice(0, 3) + \"…\" + s.slice(-3) : s)));\n  } else {\n    print(res);\n  }\n'\n#### engine262\n\nRangeError: Maximum call stack size exceeded\n\n#### GraalJS, Hermes, Moddable XS, QuickJS, SpiderMonkey, V8\n[\"#aa…aaa\",\"#\"]\n\n#### JavaScriptCore\nnull\n```","format":"org.matrix.custom.html","formatted_body":"<p>I would say that it's practical with try..catch that admits only success or RangeError, but also unnecessary here if the scale is reduced a bit:</p>\n<pre><code>$ eshost -sx '\n  let res = /(#)(?:a|b)+/.exec(\"#\" + \"a\".repeat(1e6)); \n  if (Array.isArray(res)) {\n    print(JSON.stringify(res.map(s =&gt; s.length &gt; 9 ? s.slice(0, 3) + \"…\" + s.slice(-3) : s)));\n  } else {\n    print(res);\n  }\n'\n#### engine262\n\nRangeError: Maximum call stack size exceeded\n\n#### GraalJS, Hermes, Moddable XS, QuickJS, SpiderMonkey, V8\n[\"#aa…aaa\",\"#\"]\n\n#### JavaScriptCore\nnull\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1729693077141,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$h4uITddqmrB3cBbbxpKLxa2s7GLSBvLoIQC2RVKm5JI"},
{"content":{"body":"Oh thanks, I'll open a PR with that ","msgtype":"m.text"},"ts":1729693582590,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$X0zQp6i-sM_gL7PON66tbjbdc0X-x0Fh0ZoEDMYEWdM"}
]