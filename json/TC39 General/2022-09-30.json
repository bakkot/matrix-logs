[
{"content":{"body":"Statics relying on receiver has always felt nice to me, as a personal fan of [type II subclassing](https://github.com/tc39/proposal-rm-builtin-subclassing#type-ii-subclass-instance-creation-in-built-in-methods) (but no further!). However web platform classes don't support it in general and I was never able to muster much interest in improving that.","format":"org.matrix.custom.html","formatted_body":"Statics relying on receiver has always felt nice to me, as a personal fan of <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing#type-ii-subclass-instance-creation-in-built-in-methods\">type II subclassing</a> (but no further!). However web platform classes don't support it in general and I was never able to muster much interest in improving that.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Statics relying on receiver has always felt nice to me, as a personal fan of [type II subclassing](https://github.com/tc39/proposal-rm-builtin-subclassing#type-ii-subclass-instance-creation-in-built-in-methods) (but no further!). However web platform classes don't support it in general and I was never able to muster much interest in improving that.","mimetype":"text/plain"},{"body":"Statics relying on receiver has always felt nice to me, as a personal fan of <a href=\"https://github.com/tc39/proposal-rm-builtin-subclassing#type-ii-subclass-instance-creation-in-built-in-methods\">type II subclassing</a> (but no further!). However web platform classes don't support it in general and I was never able to muster much interest in improving that.","mimetype":"text/html"}]},"ts":1664500923151,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$J47lg7gwI9tUZCOSkA30XC76Ix8Y2Lm-tWF0dakmifA"},
{"content":{"body":"I think the Array.of behavior is bad though, either bite the bullet and be `this`-dependent, or hard-code something. Don't waffle between them.","format":"org.matrix.custom.html","formatted_body":"I think the Array.of behavior is bad though, either bite the bullet and be <code>this</code>-dependent, or hard-code something. Don't waffle between them.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the Array.of behavior is bad though, either bite the bullet and be `this`-dependent, or hard-code something. Don't waffle between them.","mimetype":"text/plain"},{"body":"I think the Array.of behavior is bad though, either bite the bullet and be <code>this</code>-dependent, or hard-code something. Don't waffle between them.","mimetype":"text/html"}]},"ts":1664500943654,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$h2Q6viPR28j_VnE6cOr7OH2rDwDo7z-7ljFiuC15Cro"},
{"content":{"body":"Being able to use the method without a receiver is nice though, because I can do `const { of } = Array` and then directly use it (for the people that don't trust \"other code\" to not mess with built-ins)","format":"org.matrix.custom.html","formatted_body":"Being able to use the method without a receiver is nice though, because I can do <code>const { of } = Array</code> and then directly use it (for the people that don't trust &quot;other code&quot; to not mess with built-ins)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Being able to use the method without a receiver is nice though, because I can do `const { of } = Array` and then directly use it (for the people that don't trust \"other code\" to not mess with built-ins)","mimetype":"text/plain"},{"body":"Being able to use the method without a receiver is nice though, because I can do <code>const { of } = Array</code> and then directly use it (for the people that don't trust &quot;other code&quot; to not mess with built-ins)","mimetype":"text/html"}]},"ts":1664537213930,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KvBhStwJFYAUHk8iinZrrQe2RBDl-4UU1k07p0s4fX8"},
{"content":{"body":"yes, this was a popular thing to do with earlier Promise libraries which ES6 took away...","msgtype":"m.text","org.matrix.msc1767.text":"yes, this was a popular thing to do with earlier Promise libraries which ES6 took away..."},"ts":1664537249461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EscRoG_fu-HusglyHrRLaWNbuiaWNlakDQGFvpkmixA"},
{"content":{"body":"not sure we can remove type two anyway.. ","m.relates_to":{"event_id":"$J47lg7gwI9tUZCOSkA30XC76Ix8Y2Lm-tWF0dakmifA","is_falling_back":true,"m.in_reply_to":{"event_id":"$J47lg7gwI9tUZCOSkA30XC76Ix8Y2Lm-tWF0dakmifA"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"not sure we can remove type two anyway.. "},"ts":1664537385006,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hezfaqlE7BlLuOhmUqeiX01149GIoSIzPH58MoEQeZA"}
]