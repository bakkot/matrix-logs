[
{"content":{"body":"I think I'm leaning strong into the \"not worth trying, just stick to an ident\" camp, because :: is meant to be \"like ., but the obj and function don't have to be previously related\", and the more we move away from that the more confusing it'll get.","msgtype":"m.text"},"ts":1634573694153,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$C7V8jOuP2uKKuCn3DEX9dp0_WmWu3NlZR1A_5V9n43E"},
{"content":{"body":"Plus `a1.a2::a3.a4::a5.a6()` is ?????","format":"org.matrix.custom.html","formatted_body":"Plus <code>a1.a2::a3.a4::a5.a6()</code> is ?????","msgtype":"m.text"},"ts":1634573733632,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$o0-MNctBiDiaa4DfphKKVHF_kwr8V5Khhf19p9ZexVw"},
{"content":{"body":"well formed ðŸ˜„","msgtype":"m.text"},"ts":1634573749041,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$x5F19vVq2iV3fN_AtGZ1Crwv1TrW0YnHPeCA6t5dnt8"},
{"content":{"body":"i recognize that it's purely a dot-call operator, and so one *can* argue that any expression that's *not* of the form `::foo()` is clearly doing something different, but I'm not sure about that.","format":"org.matrix.custom.html","formatted_body":"i recognize that it's purely a dot-call operator, and so one <em>can</em> argue that any expression that's <em>not</em> of the form <code>::foo()</code> is clearly doing something different, but I'm not sure about that.","msgtype":"m.text"},"ts":1634573807667,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$g3S2yqJkzmGU5ATIbeIhr1wdoEuFBM-twy9q47GlZxo"},
{"content":{"body":"like what if `foo::bar`, without parens, invoked it like a getter setter","format":"org.matrix.custom.html","formatted_body":"like what if <code>foo::bar</code>, without parens, invoked it like a getter setter","msgtype":"m.text"},"ts":1634573961199,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I8CHBFhFXfZpsOozs6RiolkBZOp8UWPgnq7CwaZDJO4"},
{"content":{"body":"...wait, what happens when you say `foo.bar.baz = 3` and both .bar and .baz are getter/setter pairs","format":"org.matrix.custom.html","formatted_body":"...wait, what happens when you say <code>foo.bar.baz = 3</code> and both .bar and .baz are getter/setter pairs","msgtype":"m.text"},"ts":1634573999099,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OmEtwFl4b1Qg45JgUL5oZVivfiTwIyjxYZO5-JPmK6A"},
{"content":{"body":"yeah it calls the .bar getter and the .baz setter, that's what i would expect","msgtype":"m.text"},"ts":1634574492027,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BMTE5Ipptb2IVRfjjZmn3PUwADSgH0ZjE55GxWUH1D8"},
{"content":{"body":"okay raised https://github.com/js-choi/proposal-bind-this/issues/17 about it; realized while writing it that WeakMaps-as-ephemerons are the most obvious use-case.","msgtype":"m.text"},"ts":1634575218111,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4ewYWAptIkqeTWSjVQmqViK9iuu4VlW8_5sj7wSnCvI"},
{"content":{"body":"So there could be a way to do this:\n\n`map::key ??= defaultValue`\nthatâ€™s kinda interesting ","format":"org.matrix.custom.html","formatted_body":"<p>So there could be a way to do this:</p>\n<p><code>map::key ??= defaultValue</code><br />\nthatâ€™s kinda interesting</p>","msgtype":"m.text"},"ts":1634576548585,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y"},
{"content":{"body":"ðŸ˜±","msgtype":"m.text"},"ts":1634576935599,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$da2zYYKHmjbc8ZblgNxfL4uUsa0zccLhNsj6pmLSQaY"},
{"content":{"body":"I think atm if someone wanted this they would do something that ends up looking like\n`ref(map, key).v ??= defaultValue`\n","format":"org.matrix.custom.html","formatted_body":"I think atm if someone wanted this they would do something that ends up looking like<br />\n<code>ref(map, key).v ??= defaultValue</code>","msgtype":"m.text"},"ts":1634576936805,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9vqV8j8pAwD_agdjEdYt7WxWqzQ3-ZlQQ2lsrPJKLgo"},
{"content":{"body":"> <@aclaymore:matrix.org> So there could be a way to do this:\n> \n> `map::key ??= defaultValue`\n> thatâ€™s kinda interesting\n\nMore like `key::map ??= defaultValue`, otherwise you have to write the implementation in `key` instead of in `map`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><p>So there could be a way to do this:</p>\n<p><code>map::key ??= defaultValue</code><br />\nthatâ€™s kinda interesting</p></blockquote></mx-reply>More like <code>key::map ??= defaultValue</code>, otherwise you have to write the implementation in <code>key</code> instead of in <code>map</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y"}},"msgtype":"m.text"},"ts":1634577059914,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TRPyvaTRf1zbYlXQ8vB4Q2gDQMGlsmZPfjyN3KzaFds"},
{"content":{"body":"The issue suggests that a :: get/set is treated differently from a call. So the get/set logic comes from the lhs using the rhs as a param ","format":"org.matrix.custom.html","formatted_body":"The issue suggests that a :: get/set is treated differently from a call. So the get/set logic comes from the lhs using the rhs as a param","msgtype":"m.text"},"ts":1634577647712,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HlC8-IPYg1dNp4_xtsNwp2kx6ADJZPad2tDJ7TicleM"},
{"content":{"body":"Hang on, I did get it wrong way round ","format":"org.matrix.custom.html","formatted_body":"Hang on, I did get it wrong way round","msgtype":"m.text"},"ts":1634577862441,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$eQ7fEyeoMgb6_CHTTjoqxle5nf1G_503mWmoubqyyE0"},
{"content":{"body":"Yes, wrong way round.","msgtype":"m.text"},"ts":1634577992862,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$eTDjwlfXaowDRaqJU7madBF0q5gkzuTrYY0g8nPSMt8"},
{"content":{"body":"We just don't have a way to *declare* that something is a \"getter fn\", so the RHS would have to, like, use a Symbol to declare it's usable as a bind-getter or bind-setter","format":"org.matrix.custom.html","formatted_body":"We just don't have a way to <em>declare</em> that something is a &quot;getter fn&quot;, so the RHS would have to, like, use a Symbol to declare it's usable as a bind-getter or bind-setter","msgtype":"m.text"},"ts":1634578027030,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8wi-hox5Ai_DDOKFZAaDZnjDXwxX0d25GFzEdaVurqc"},
{"content":{"body":"`class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":"<code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","msgtype":"m.text"},"ts":1634578061253,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yrw3IRQ5cHPooX3GWMXVBUx1FfMmpjPQpz9CHEsnzL8"},
{"content":{"body":"the point of weakmaps as ephemerons is letting you attach \"properties\" to objects in ways that the objects (or anyone else) can't observe on their own","msgtype":"m.text"},"ts":1634578100767,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$C3AA-pXadjfsTPbpjh9oDMT4iyxVrUbdFj4Xd9sd2lA"},
{"content":{"body":" * `class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":" * <code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","m.new_content":{"body":"`class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":"<code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrw3IRQ5cHPooX3GWMXVBUx1FfMmpjPQpz9CHEsnzL8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634578149228,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Ae5R-3_edVb_E5Bmzs-cAxL53XML1a4UDMtra-U-k-Y"},
{"content":{"body":"oh lol markdown links really intersect with symbol-keyed methods in a bad way if you don't wrap them in a code span ^_^","msgtype":"m.text"},"ts":1634578164359,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$a5auVvcd6WDwmxJAb5eororhOWQRmpDofrN1Z0tvWl8"},
{"content":{"body":"So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b).","format":"org.matrix.custom.html","formatted_body":"So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b).","msgtype":"m.text"},"ts":1634578632661,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Gvn-VqmeITUxDJukbTYoF2ADQhbWM_K4ZhIPceKtPS8"},
{"content":{"body":"* So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b).","format":"org.matrix.custom.html","formatted_body":"* So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b).","m.new_content":{"body":"So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b).","format":"org.matrix.custom.html","formatted_body":"So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b).","msgtype":"m.text"},"m.relates_to":{"event_id":"$Gvn-VqmeITUxDJukbTYoF2ADQhbWM_K4ZhIPceKtPS8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634578669878,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IQnn6ZBzG81B7SOuuRVuVE-t2giUlOoNgNrma0GUj04"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1634578737313,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tAuW3qPXMjGYcGxLSqjnU-zktr_j0W37jxKF0lNZMNc"},
{"content":{"body":"and `a::b()` is call deref(b) with a as this","format":"org.matrix.custom.html","formatted_body":"and <code>a::b()</code> is call deref(b) with a as this","msgtype":"m.text"},"ts":1634578737807,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iPVo7E0cj3iba8Kmig-Kc_xG0x_0yhuY-NYkW90K97k"},
{"content":{"body":"or, well, i'm unclear on exactly the mechanics you're implying by that second one. i wrote up a possible code example in https://github.com/js-choi/proposal-bind-this/issues/17#issuecomment-946005508","msgtype":"m.text"},"ts":1634578792390,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_xh6K-Ev2-uAiK2uNqdKsYzmrhGC51kE4N_oCbynH0w"},
{"content":{"body":"okay, reading more closely, yeah, you've still got it backwards","msgtype":"m.text"},"ts":1634578828778,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$poiwTXntN7FPmsnP6Mfc0_pJ7LfcsGT_nl1s2xhoGZw"},
{"content":{"body":"the bindGet has to live on b, and be called with a","msgtype":"m.text"},"ts":1634578844597,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SulCXL0uVpZeaLT0SLUIyfgwlESbS7YVF7Z6PuQ89wc"},
{"content":{"body":"same as the \"bindCall\" lives on b and is called with a in `a::b()`","format":"org.matrix.custom.html","formatted_body":"same as the &quot;bindCall&quot; lives on b and is called with a in <code>a::b()</code>","msgtype":"m.text"},"ts":1634578867555,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fefNhheINDxVTr6y2HOAeVcrFSlVbCgaHsGKM4ARcy0"},
{"content":{"body":"(\"bindCall\" just being the unforgable version of `b.call()`)","format":"org.matrix.custom.html","formatted_body":"(&quot;bindCall&quot; just being the unforgable version of <code>b.call()</code>)","msgtype":"m.text"},"ts":1634578897969,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gKVb0c-vj9vSFsG2IQJandyEWaDKBSaCrDkYKQRtFwY"},
{"content":{"body":"basically if, instead of thinking of `a::b()` as \"call `b()` with `a` bound to its `this`)\" you think of it as \"call `b.call()` with `a` as its first argument\", then `a::b` is exactly the same with `b[Symbol.bindGet]` and `b[Symbol.bindSet]`","format":"org.matrix.custom.html","formatted_body":"basically if, instead of thinking of <code>a::b()</code> as &quot;call <code>b()</code> with <code>a</code> bound to its <code>this</code>)&quot; you think of it as &quot;call <code>b.call()</code> with <code>a</code> as its first argument&quot;, then <code>a::b</code> is exactly the same with <code>b[Symbol.bindGet]</code> and <code>b[Symbol.bindSet]</code>","msgtype":"m.text"},"ts":1634579037582,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cKGdq2qDiVgDpbUhpyYrZrFX2fywRSrEa4JaLdSuxTg"},
{"content":{"body":"My mind has clicked into place now thanks!","msgtype":"m.text"},"ts":1634579096109,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$j2k6mpS5KAH-kpsEkcpFBJAPLqS8M7cIkT5KhuivsdY"},
{"content":{"body":" * basically if, instead of thinking of `a::b()` as \"call `b()` with `a` bound to its `this`)\" you think of it as \"call `b.call()` with `a` as its first argument\", then `a::b` is exactly the same with `b[Symbol.bindGet]()` and `b[Symbol.bindSet]()`","format":"org.matrix.custom.html","formatted_body":" * basically if, instead of thinking of <code>a::b()</code> as &quot;call <code>b()</code> with <code>a</code> bound to its <code>this</code>)&quot; you think of it as &quot;call <code>b.call()</code> with <code>a</code> as its first argument&quot;, then <code>a::b</code> is exactly the same with <code>b[Symbol.bindGet]()</code> and <code>b[Symbol.bindSet]()</code>","m.new_content":{"body":"basically if, instead of thinking of `a::b()` as \"call `b()` with `a` bound to its `this`)\" you think of it as \"call `b.call()` with `a` as its first argument\", then `a::b` is exactly the same with `b[Symbol.bindGet]()` and `b[Symbol.bindSet]()`","format":"org.matrix.custom.html","formatted_body":"basically if, instead of thinking of <code>a::b()</code> as &quot;call <code>b()</code> with <code>a</code> bound to its <code>this</code>)&quot; you think of it as &quot;call <code>b.call()</code> with <code>a</code> as its first argument&quot;, then <code>a::b</code> is exactly the same with <code>b[Symbol.bindGet]()</code> and <code>b[Symbol.bindSet]()</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$cKGdq2qDiVgDpbUhpyYrZrFX2fywRSrEa4JaLdSuxTg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634579147824,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EKBXGFJKcXiQlX8v3B6ch5qRBprgpgUHLHkJkUaQfZI"},
{"content":{"body":"a::b() looks up [[call]] on b so canâ€™t be intercepted. But get/set would be symbol based so more opportunity for meta-programming ","format":"org.matrix.custom.html","formatted_body":"a::b() looks up [[call]] on b so canâ€™t be intercepted. But get/set would be symbol based so more opportunity for meta-programming","msgtype":"m.text"},"ts":1634579238384,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_spQsWGyQ9VYSk4bjifO_7YvOiIRZ1fhdWTKay9ulGg"},
{"content":{"body":"* So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b)~.","format":"org.matrix.custom.html","formatted_body":"* So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b)~.","m.new_content":{"body":"So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b)~.","format":"org.matrix.custom.html","formatted_body":"So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b)~.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Gvn-VqmeITUxDJukbTYoF2ADQhbWM_K4ZhIPceKtPS8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634579305206,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$QRcnlKLJtLNgXyWUPADEwMVxy2FFMb2EUqUofga1mrA"},
{"content":{"body":"* So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~~`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","format":"org.matrix.custom.html","formatted_body":"* So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~~<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","m.new_content":{"body":"So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~~`a::b` is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","format":"org.matrix.custom.html","formatted_body":"So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~~<code>a::b</code> is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Gvn-VqmeITUxDJukbTYoF2ADQhbWM_K4ZhIPceKtPS8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634579319768,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$E3hANc5Nm7pcsRJxPH3ixphvkI2Nk9KZnRQ7BXQ73yI"},
{"content":{"body":"* So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~~a::b is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","format":"org.matrix.custom.html","formatted_body":"* So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~~a::b is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","m.new_content":{"body":"So `a.b` is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).\nand\n~~a::b is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","format":"org.matrix.custom.html","formatted_body":"So <code>a.b</code> is call [[get]] on deref(a) with toStringOrSymbol(deref(b)).<br />\nand<br />\n~~a::b is call Symbol.bindGet on deref(a) with the value of deref(b)~~.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Gvn-VqmeITUxDJukbTYoF2ADQhbWM_K4ZhIPceKtPS8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634579344856,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZLHDokJj-aKBw_YJJgC8os6kr9_TSG46-lVw8KtjhAE"},
{"content":{"body":"Yeah, the metaprogramming aspect is incidental here, it's just required to get it to work since we have an *intrinsic* notion of an object being callable, but \"invokable as a getter\" is extrinsic in today's JS (based on how a function is attached to an object).","format":"org.matrix.custom.html","formatted_body":"Yeah, the metaprogramming aspect is incidental here, it's just required to get it to work since we have an <em>intrinsic</em> notion of an object being callable, but &quot;invokable as a getter&quot; is extrinsic in today's JS (based on how a function is attached to an object).","msgtype":"m.text"},"ts":1634579408979,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rBbwvhkPDbIip3dGesBORPkHrK6IBjwEs3K9YbCPPUs"},
{"content":{"body":"I think I kept getting it the wrong way around as I was thinking of `a::b()` as a temporary method on a. So kept jumping to `a::b` being a temporary property of a. \nItâ€™s been one of those Mondays ","format":"org.matrix.custom.html","formatted_body":"I think I kept getting it the wrong way around as I was thinking of <code>a::b()</code> as a temporary method on a. So kept jumping to <code>a::b</code> being a temporary property of a.<br />\nItâ€™s been one of those Mondays","msgtype":"m.text"},"ts":1634579878189,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BifhwWQj8oFgZFTKGLcsGHNXjZHb4hwmKY3r9QIcVQQ"},
{"content":{"body":"* I think I kept getting it the wrong way around as I was thinking of `a::b()` as a temporary method on a. So kept jumping to `a::b` being a temporary property of a. \nItâ€™s been one of those Mondays ","format":"org.matrix.custom.html","formatted_body":"* I think I kept getting it the wrong way around as I was thinking of <code>a::b()</code> as a temporary method on a. So kept jumping to <code>a::b</code> being a temporary property of a.<br />\nItâ€™s been one of those Mondays","m.new_content":{"body":"I think I kept getting it the wrong way around as I was thinking of `a::b()` as a temporary method on a. So kept jumping to `a::b` being a temporary property of a. \nItâ€™s been one of those Mondays ","format":"org.matrix.custom.html","formatted_body":"I think I kept getting it the wrong way around as I was thinking of <code>a::b()</code> as a temporary method on a. So kept jumping to <code>a::b</code> being a temporary property of a.<br />\nItâ€™s been one of those Mondays","msgtype":"m.text"},"m.relates_to":{"event_id":"$BifhwWQj8oFgZFTKGLcsGHNXjZHb4hwmKY3r9QIcVQQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634579892676,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Gwex3AoGlWZtEcLNT5S8i4p36pOUqqablDIcpSv8NZA"},
{"content":{"body":"Wait, isn't `a::b()` a temporary method on `a`?","format":"org.matrix.custom.html","formatted_body":"Wait, isn't <code>a::b()</code> a temporary method on <code>a</code>?","msgtype":"m.text"},"ts":1634579915700,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8-n0yYnyyEonv_3vORsamtkeuFdXqCUte-qCpuOHTH8"},
{"content":{"body":"it's not an unreasonable way to think about it, so that's understandable","msgtype":"m.text"},"ts":1634579920424,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oqLOY1Ud8PxFTId82BxNBerBDmC-G0ViS47zbDFznuc"},
{"content":{"body":"\"temporary\" = \"not actually there\"","msgtype":"m.text"},"ts":1634579934834,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CLaRiSXDeRiywbFRg4FAxWOHOQ4dEYaLiAn5vFx7jb0"},
{"content":{"body":"it's \"a temporary method\" *semantically*. Technically it's \"unforgably call `b.call(a, ...)`\", which has nothing to do with methods.","format":"org.matrix.custom.html","formatted_body":"it's &quot;a temporary method&quot; <em>semantically</em>. Technically it's &quot;unforgably call <code>b.call(a, ...)</code>&quot;, which has nothing to do with methods.","msgtype":"m.text"},"ts":1634579964073,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RcmtOdOY4_qAKqBsca3rQHmfqwxZwnpOIqh5W1wQscE"},
{"content":{"body":"Aha, I see, so it came from here. ðŸ˜„","msgtype":"m.text"},"ts":1634585669786,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$McbHsbBlBeOQTg4QXv2oeXYqHqZoV4IboRJY7sV2r4w"},
{"content":{"body":"I do like Ronâ€™s idea in https://github.com/js-choi/proposal-bind-this/issues/17#issuecomment-946055779.","msgtype":"m.text"},"ts":1634585742371,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rAco-r7yatZlNnSxZI8u4GuvBd6qtn93EY1lBvS418U"},
{"content":{"body":"You can already do that with a Proxy, right?","msgtype":"m.text"},"ts":1634586918051,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X0Q7ndVW260orQIMc1jaa9XYOCujgdZECWoBHaCbNtg"},
{"content":{"body":"No one uses Proxies for this because they are almost a slow path, but that would be just as a much a problem for this, I would think","msgtype":"m.text"},"ts":1634586967793,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eD9HEkXma73sGWjVoAcvs3lrRK9TzI1dR4_YzPrC7sM"},
{"content":{"body":"I guess you can't actually do this with a proxy because the key is ToPropertyKey'd before it hits the proxy, never mind","msgtype":"m.text"},"ts":1634587013024,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pFGCUkg0xNc1g5BcmAQ3LmcDA8LQ5kQNJMFanLUjZrw"},
{"content":{"body":"without extracting it, you can't explicitly call a getter in JS right now at all, and that's not the problem `::` is trying to solve","format":"org.matrix.custom.html","formatted_body":"without extracting it, you can't explicitly call a getter in JS right now at all, and that's not the problem <code>::</code> is trying to solve","msgtype":"m.text"},"ts":1634589014149,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TbiKiiTSgpygCm1Y1YEi4A3j2njVBfdla5InoKpso_0"},
{"content":{"body":"the engine will call the getter for you, but you're not using invocation parens or `new` to do it","format":"org.matrix.custom.html","formatted_body":"the engine will call the getter for you, but you're not using invocation parens or <code>new</code> to do it","msgtype":"m.text"},"ts":1634589040948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OLLLSI9Hr8S_I-8KO4SKvpfXhjHhtKrG3oj-PA0M-Iw"},
{"content":{"body":"Proxies do the *other* direction, where `a<op>b` is controlled by `a` and lets them do something arbitrary based on `b`. The thing I and Ron are talking about is the reverse, where the `<op>` is controlled by `b` and can do something arbitrary based on `a`.","format":"org.matrix.custom.html","formatted_body":"Proxies do the <em>other</em> direction, where <code>a&lt;op&gt;b</code> is controlled by <code>a</code> and lets them do something arbitrary based on <code>b</code>. The thing I and Ron are talking about is the reverse, where the <code>&lt;op&gt;</code> is controlled by <code>b</code> and can do something arbitrary based on <code>a</code>.","msgtype":"m.text"},"ts":1634591122281,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$51d5KT7nlsdeE97dcVkvG1rDqAMvK9ID6xjFYcOzu8s"},
{"content":{"body":"(I already answered this in the issue, but I'm not talking about extracting or calling getters *at all*, so I'm not sure why ljharb is bringing it up again here.)","format":"org.matrix.custom.html","formatted_body":"(I already answered this in the issue, but I'm not talking about extracting or calling getters <em>at all</em>, so I'm not sure why <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> is bringing it up again here.)","msgtype":"m.text"},"ts":1634591175627,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$-6uMuHlf4RhoTVfpzqBLUdNDkISHwJWN9dyvsiXUWuE"},
{"content":{"body":"because i'm still not sure why getters are being brought up at all in relation to this proposal","msgtype":"m.text"},"ts":1634591236713,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VVwVgPh1xFYgcAGOaE-Z_G8UU2xaTfYzrkCBoMz4bxo"},
{"content":{"body":"aka, Proxies let you do a *Map* where `map[key]` works and turns into `map.get(key)`. What I and Ron are talking about is having a *WeakMap* where `obj::wm` or `obj[wm]` turns into `wm.get(obj)`","format":"org.matrix.custom.html","formatted_body":"aka, Proxies let you do a <em>Map</em> where <code>map[key]</code> works and turns into <code>map.get(key)</code>. What I and Ron are talking about is having a <em>WeakMap</em> where <code>obj::wm</code> or <code>obj[wm]</code> turns into <code>wm.get(obj)</code>","msgtype":"m.text"},"ts":1634591243373,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pObf7ccWgsK1MXqSZR5TrWNdxdaTNB0Wooi6biUKTO8"},
{"content":{"body":"the proposal is about syntactic call or bind, which requires there be an actual receiver-sensitive function present in scope first. whether that function came from a data property or a getter is irrelevant.","msgtype":"m.text"},"ts":1634591257174,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1m_tFJR1f8l6nqUvtFzYa2T1ClhSWM4mUiaYAEKQDIQ"},
{"content":{"body":" * the proposal is about syntactic call or bind, which requires there be an actual receiver-sensitive function present in scope first. whether that function came from a data property or a getter is irrelevant.","m.new_content":{"body":"the proposal is about syntactic call or bind, which requires there be an actual receiver-sensitive function present in scope first. whether that function came from a data property or a getter is irrelevant.","msgtype":"m.text"},"m.relates_to":{"event_id":"$1m_tFJR1f8l6nqUvtFzYa2T1ClhSWM4mUiaYAEKQDIQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634591323001,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AxqCQLoGTyigm8bkzRa_fI2HHHmFakWlwC4Ugwn0rFw"},
{"content":{"body":"I can try to explain it again? `a.b()` is a method call; `a::b()` is a faked method call, where `b` is an arbitrary function; it desugars to `b.call(a)`. Similarly, `a.b` is property access, but can also be getter/setter invocation if `a.b` is set up appropriately; my proposal is making `a::b` possibly to be a faked getter/setter, where `b` is an arbitrary object advertising some get/set behavior (likely thru a Symbol property); it desugars to `b[Symbol.bindGet](a)`","format":"org.matrix.custom.html","formatted_body":"I can try to explain it again? <code>a.b()</code> is a method call; <code>a::b()</code> is a faked method call, where <code>b</code> is an arbitrary function; it desugars to <code>b.call(a)</code>. Similarly, <code>a.b</code> is property access, but can also be getter/setter invocation if <code>a.b</code> is set up appropriately; my proposal is making <code>a::b</code> possibly to be a faked getter/setter, where <code>b</code> is an arbitrary object advertising some get/set behavior (likely thru a Symbol property); it desugars to <code>b[Symbol.bindGet](a)</code>","msgtype":"m.text"},"ts":1634591476261,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6skf4oHr5TytA4koA392W7VFTeZNKS0i-pXu1Xy4IjQ"},
{"content":{"body":"right but that's still what i don't understand","msgtype":"m.text"},"ts":1634591493034,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gZj5SVSOHqLrOPRe9fN1iE9WSDKX3R-eWtQUiCDTDMY"},
{"content":{"body":"it's not actually a faked method call","msgtype":"m.text"},"ts":1634591500966,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4HeCouTq4oN7UQ0xLPIoI39d3JYutr2vtlAyYjLNFaY"},
{"content":{"body":"it's sugar for `.call`","format":"org.matrix.custom.html","formatted_body":"it's sugar for <code>.call</code>","msgtype":"m.text"},"ts":1634591503759,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3BKJcj4wp8TZ8A0dNmYpjG-lwBn9hPoebUB5ttE_cZo"},
{"content":{"body":"which requires a reified function","msgtype":"m.text"},"ts":1634591508861,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QWfp_U-O9Z_3KOh_0GNoV5NzNwwdka1-yH7C67ER70c"},
{"content":{"body":"and i also don't understand how the symbol protocol would play in, nor what actual use case motivates it","msgtype":"m.text"},"ts":1634591556629,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bDwjST6esbYVrk8H7DNQpdOQtzGVjFn4zYm0BNPObK8"},
{"content":{"body":"Yes, under the covers it's `.call` sugar. But in *practice* it's a fake method call. That's the whole purpose of doing things like `const map = Array.prototype.map; foo::map(...)`; it lets you *pretend* that an arbitrary `foo` object has a `map()` method, without actually having to install a property on the `foo` object at all.","format":"org.matrix.custom.html","formatted_body":"Yes, under the covers it's <code>.call</code> sugar. But in <em>practice</em> it's a fake method call. That's the whole purpose of doing things like <code>const map = Array.prototype.map; foo::map(...)</code>; it lets you <em>pretend</em> that an arbitrary <code>foo</code> object has a <code>map()</code> method, without actually having to install a property on the <code>foo</code> object at all.","msgtype":"m.text"},"ts":1634591568547,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1uucNFUh0ro9TXSHVx8976tqkBahX-p6hwqzokA1qzg"},
{"content":{"body":"sure, ok - and getters are methods too. you can do the same thing by extracting the getter and using .call or `::`","format":"org.matrix.custom.html","formatted_body":"sure, ok - and getters are methods too. you can do the same thing by extracting the getter and using .call or <code>::</code>","msgtype":"m.text"},"ts":1634591591849,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ARtmCePS3aHW03BdOD8OGBCwA4QA7nTiXA8KQVWseik"},
{"content":{"body":"adding a new symbol protocol is a lot of overhead, and encouraging/endorsing use of getters and setters is an ideological position i'm not understanding why we'd want to take","msgtype":"m.text"},"ts":1634591621065,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r9x73wXhu3AhgNuclPs_VTM_g6ApNHWvP75nl-P85m8"},
{"content":{"body":"\"getters are methods too\" yeah and they're invoked by `a.b`. So just like `a::b()` is a way to fake `a.b()`, `a::b` as a way to fake `a.b` (the getter/setter) is what I\"m talking about.","format":"org.matrix.custom.html","formatted_body":"&quot;getters are methods too&quot; yeah and they're invoked by <code>a.b</code>. So just like <code>a::b()</code> is a way to fake <code>a.b()</code>, <code>a::b</code> as a way to fake <code>a.b</code> (the getter/setter) is what I&quot;m talking about.","msgtype":"m.text"},"ts":1634591669409,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$R6mwSYkuhPuSbIXBq-pzOvEuRVRhw_G59D4fw-V39Hw"},
{"content":{"body":"it would also mean that `::` couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","format":"org.matrix.custom.html","formatted_body":"it would also mean that <code>::</code> couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","msgtype":"m.text"},"ts":1634591670277,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AvUmOWcuMg_mrKP65BcHJsKEUf0MpzUDRiMmGot5sDM"},
{"content":{"body":" * it would also mean that `::` couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","format":"org.matrix.custom.html","formatted_body":" * it would also mean that <code>::</code> couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","m.new_content":{"body":"it would also mean that `::` couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","format":"org.matrix.custom.html","formatted_body":"it would also mean that <code>::</code> couldn't be transpiled into an actually robust check, because it'd have to do a runtime lookup for the presence of the protocol (altho to be fair transpiling it would still require a robust callBind abstraction)","msgtype":"m.text"},"m.relates_to":{"event_id":"$AvUmOWcuMg_mrKP65BcHJsKEUf0MpzUDRiMmGot5sDM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634591697017,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Px-7X18P8mRW5KWxEGYsjrP4-2mea8Byqga4UIdxRdM"}
]