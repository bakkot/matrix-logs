[
{"content":{"body":"I think I'm leaning strong into the \"not worth trying, just stick to an ident\" camp, because :: is meant to be \"like ., but the obj and function don't have to be previously related\", and the more we move away from that the more confusing it'll get.","msgtype":"m.text"},"ts":1634573694153,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$C7V8jOuP2uKKuCn3DEX9dp0_WmWu3NlZR1A_5V9n43E"},
{"content":{"body":"Plus `a1.a2::a3.a4::a5.a6()` is ?????","format":"org.matrix.custom.html","formatted_body":"Plus <code>a1.a2::a3.a4::a5.a6()</code> is ?????","msgtype":"m.text"},"ts":1634573733632,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$o0-MNctBiDiaa4DfphKKVHF_kwr8V5Khhf19p9ZexVw"},
{"content":{"body":"well formed ðŸ˜„","msgtype":"m.text"},"ts":1634573749041,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$x5F19vVq2iV3fN_AtGZ1Crwv1TrW0YnHPeCA6t5dnt8"},
{"content":{"body":"i recognize that it's purely a dot-call operator, and so one *can* argue that any expression that's *not* of the form `::foo()` is clearly doing something different, but I'm not sure about that.","format":"org.matrix.custom.html","formatted_body":"i recognize that it's purely a dot-call operator, and so one <em>can</em> argue that any expression that's <em>not</em> of the form <code>::foo()</code> is clearly doing something different, but I'm not sure about that.","msgtype":"m.text"},"ts":1634573807667,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$g3S2yqJkzmGU5ATIbeIhr1wdoEuFBM-twy9q47GlZxo"},
{"content":{"body":"like what if `foo::bar`, without parens, invoked it like a getter setter","format":"org.matrix.custom.html","formatted_body":"like what if <code>foo::bar</code>, without parens, invoked it like a getter setter","msgtype":"m.text"},"ts":1634573961199,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I8CHBFhFXfZpsOozs6RiolkBZOp8UWPgnq7CwaZDJO4"},
{"content":{"body":"...wait, what happens when you say `foo.bar.baz = 3` and both .bar and .baz are getter/setter pairs","format":"org.matrix.custom.html","formatted_body":"...wait, what happens when you say <code>foo.bar.baz = 3</code> and both .bar and .baz are getter/setter pairs","msgtype":"m.text"},"ts":1634573999099,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OmEtwFl4b1Qg45JgUL5oZVivfiTwIyjxYZO5-JPmK6A"},
{"content":{"body":"yeah it calls the .bar getter and the .baz setter, that's what i would expect","msgtype":"m.text"},"ts":1634574492027,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BMTE5Ipptb2IVRfjjZmn3PUwADSgH0ZjE55GxWUH1D8"},
{"content":{"body":"okay raised https://github.com/js-choi/proposal-bind-this/issues/17 about it; realized while writing it that WeakMaps-as-ephemerons are the most obvious use-case.","msgtype":"m.text"},"ts":1634575218111,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4ewYWAptIkqeTWSjVQmqViK9iuu4VlW8_5sj7wSnCvI"},
{"content":{"body":"So there could be a way to do this:\n\n`map::key ??= defaultValue`\nthatâ€™s kinda interesting ","format":"org.matrix.custom.html","formatted_body":"<p>So there could be a way to do this:</p>\n<p><code>map::key ??= defaultValue</code><br />\nthatâ€™s kinda interesting</p>","msgtype":"m.text"},"ts":1634576548585,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y"},
{"content":{"body":"ðŸ˜±","msgtype":"m.text"},"ts":1634576935599,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$da2zYYKHmjbc8ZblgNxfL4uUsa0zccLhNsj6pmLSQaY"},
{"content":{"body":"I think atm if someone wanted this they would do something that ends up looking like\n`ref(map, key).v ??= defaultValue`\n","format":"org.matrix.custom.html","formatted_body":"I think atm if someone wanted this they would do something that ends up looking like<br />\n<code>ref(map, key).v ??= defaultValue</code>","msgtype":"m.text"},"ts":1634576936805,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9vqV8j8pAwD_agdjEdYt7WxWqzQ3-ZlQQ2lsrPJKLgo"},
{"content":{"body":"> <@aclaymore:matrix.org> So there could be a way to do this:\n> \n> `map::key ??= defaultValue`\n> thatâ€™s kinda interesting\n\nMore like `key::map ??= defaultValue`, otherwise you have to write the implementation in `key` instead of in `map`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><p>So there could be a way to do this:</p>\n<p><code>map::key ??= defaultValue</code><br />\nthatâ€™s kinda interesting</p></blockquote></mx-reply>More like <code>key::map ??= defaultValue</code>, otherwise you have to write the implementation in <code>key</code> instead of in <code>map</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$v_oJ4naCSt37lPVOO95aZo-MlHXnWmrU1UC0fbft57Y"}},"msgtype":"m.text"},"ts":1634577059914,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TRPyvaTRf1zbYlXQ8vB4Q2gDQMGlsmZPfjyN3KzaFds"},
{"content":{"body":"The issue suggests that a :: get/set is treated differently from a call. So the get/set logic comes from the lhs using the rhs as a param ","format":"org.matrix.custom.html","formatted_body":"The issue suggests that a :: get/set is treated differently from a call. So the get/set logic comes from the lhs using the rhs as a param","msgtype":"m.text"},"ts":1634577647712,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HlC8-IPYg1dNp4_xtsNwp2kx6ADJZPad2tDJ7TicleM"},
{"content":{"body":"Hang on, I did get it wrong way round ","format":"org.matrix.custom.html","formatted_body":"Hang on, I did get it wrong way round","msgtype":"m.text"},"ts":1634577862441,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$eQ7fEyeoMgb6_CHTTjoqxle5nf1G_503mWmoubqyyE0"},
{"content":{"body":"Yes, wrong way round.","msgtype":"m.text"},"ts":1634577992862,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$eTDjwlfXaowDRaqJU7madBF0q5gkzuTrYY0g8nPSMt8"},
{"content":{"body":"We just don't have a way to *declare* that something is a \"getter fn\", so the RHS would have to, like, use a Symbol to declare it's usable as a bind-getter or bind-setter","format":"org.matrix.custom.html","formatted_body":"We just don't have a way to <em>declare</em> that something is a &quot;getter fn&quot;, so the RHS would have to, like, use a Symbol to declare it's usable as a bind-getter or bind-setter","msgtype":"m.text"},"ts":1634578027030,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8wi-hox5Ai_DDOKFZAaDZnjDXwxX0d25GFzEdaVurqc"},
{"content":{"body":"`class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":"<code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","msgtype":"m.text"},"ts":1634578061253,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yrw3IRQ5cHPooX3GWMXVBUx1FfMmpjPQpz9CHEsnzL8"},
{"content":{"body":"the point of weakmaps as ephemerons is letting you attach \"properties\" to objects in ways that the objects (or anyone else) can't observe on their own","msgtype":"m.text"},"ts":1634578100767,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$C3AA-pXadjfsTPbpjh9oDMT4iyxVrUbdFj4Xd9sd2lA"},
{"content":{"body":" * `class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":" * <code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","m.new_content":{"body":"`class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }`","format":"org.matrix.custom.html","formatted_body":"<code>class Ephemeron extends WeakMap { [Symbol.bindGet]() { ...} }</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrw3IRQ5cHPooX3GWMXVBUx1FfMmpjPQpz9CHEsnzL8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634578149228,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Ae5R-3_edVb_E5Bmzs-cAxL53XML1a4UDMtra-U-k-Y"},
{"content":{"body":"oh lol markdown links really intersect with symbol-keyed methods in a bad way if you don't wrap them in a code span ^_^","msgtype":"m.text"},"ts":1634578164359,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$a5auVvcd6WDwmxJAb5eororhOWQRmpDofrN1Z0tvWl8"}
]