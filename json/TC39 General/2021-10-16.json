[
{"content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"ts":1634393643571,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634393676545,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NUklFQtBQ-Z7jGSAD8uP_sfXh6vuvjhTzbRkNtMWSw4"},
{"content":{"body":"I can see why the third parse isn't useful (tho I think it's what I would naively expect, treating :: as an alternative dot), but I'm not sure why you'd want the first parse over the second.","msgtype":"m.text"},"ts":1634395750579,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5G6tcoYSOLnryt3yguaAgjgTo9ShqdX9IlADxpwCWqc"},
{"content":{"body":"It doesn't seem like it's what rbuckton is asking for in that issue, either","format":"org.matrix.custom.html","formatted_body":"It doesn't seem like it's what <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> is asking for in that issue, either","msgtype":"m.text"},"ts":1634395785413,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LFbK9Mpanc_xj0HBpuaOP2ctNl8drwAUpLEZ2VGFqHI"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` and not\n`(a.b)::((c.d)())` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> and not<br><code>(a.b)::((c.d)())</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` and not\n`(a.b)::((c.d)())` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> and not<br><code>(a.b)::((c.d)())</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634398309511,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xku6sbp5QZHKmjsGAa7ReOo09pVxciUimuInhQ3Gb7Q"},
{"content":{"body":"TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","msgtype":"m.text"},"ts":1634398411218,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$73TGiWmqDhAeNNH4E_IDLgYB3zJXGHQoK_oJpDtgjpQ"},
{"content":{"body":" * TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","m.new_content":{"body":"TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$73TGiWmqDhAeNNH4E_IDLgYB3zJXGHQoK_oJpDtgjpQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634398430651,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2rl-Ef8cqsPRpd1xfhYqfCkOxxJxn8na2pa97aYNgNM"},
{"content":{"body":"fwiw while i think `a::Array.prototype.map` is nice, 100% of the actual use cases i have all involve caching the method beforehand, so `a::(Array.prototype.map)` doesn’t seem that bad, if you can’t figure out a solution.","format":"org.matrix.custom.html","formatted_body":"fwiw while i think <code>a::Array.prototype.map</code> is nice, 100% of the actual use cases i have all involve caching the method beforehand, so <code>a::(Array.prototype.map)</code> doesn’t seem that bad, if you can’t figure out a solution.","msgtype":"m.text"},"ts":1634398528821,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NqPdcLSeBJO2Vhr98yrEOSSEmA0W5UugQjGDMhxrlq8"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue. \nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior). \nFor any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue. \nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior). \nFor any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634398972325,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$riKAWjeIkL5_8rqs0cR_bHoVPUlSzRetq0EseuuJA14"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.\nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior).\nFor any recursive RHS production I can think of that would cover `c.d`, that production would also cover `c` and/or `c.d()`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive RHS production I can think of that would cover <code>c.d</code>, that production would also cover <code>c</code> and/or <code>c.d()</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.\nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior).\nFor any recursive RHS production I can think of that would cover `c.d`, that production would also cover `c` and/or `c.d()`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive RHS production I can think of that would cover <code>c.d</code>, that production would also cover <code>c</code> and/or <code>c.d()</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634399046765,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rr-iXTFaUqDvz1t20J84Zen_ZUmJPOu3YuIqMEjU5eU"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.\nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior).\nFor any recursive production I can think of that would cover `c.d`, that production would also cover `c` and/or `c.d()`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive production I can think of that would cover <code>c.d</code>, that production would also cover <code>c</code> and/or <code>c.d()</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.\nThat is, I’m stumped on how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` (that issue’s goal) and not\n`(a.b)::((c.d)())` (useless) or\n`((a.b)::c).d)()` (the current behavior).\nFor any recursive production I can think of that would cover `c.d`, that production would also cover `c` and/or `c.d()`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033, please let me know on the issue.<br>That is, I’m stumped on how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> (that issue’s goal) and not<br><code>(a.b)::((c.d)())</code> (useless) or<br><code>((a.b)::c).d)()</code> (the current behavior).<br>For any recursive production I can think of that would cover <code>c.d</code>, that production would also cover <code>c</code> and/or <code>c.d()</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634399079484,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hu18F7EfzWnYLUOkXI8pN7HaH77ni2p2puZZlQL8h7Y"},
{"content":{"body":"If we do end up figuring out how to make `a.b::c.d()` unambiguously group as `((a.b)::(c.d))()`, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","format":"org.matrix.custom.html","formatted_body":"If we do end up figuring out how to make <code>a.b::c.d()</code> unambiguously group as <code>((a.b)::(c.d))()</code>, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","msgtype":"m.text"},"ts":1634399535731,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ecmLi81nDgYEBTlpDWxcYsHIO2oRPGeCIAiViElyFrg"},
{"content":{"body":" * If we do end up figuring out how to make `a.b::c.d()` unambiguously group as `((a.b)::(c.d))()`, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","format":"org.matrix.custom.html","formatted_body":" * If we do end up figuring out how to make <code>a.b::c.d()</code> unambiguously group as <code>((a.b)::(c.d))()</code>, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","m.new_content":{"body":"If we do end up figuring out how to make `a.b::c.d()` unambiguously group as `((a.b)::(c.d))()`, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","format":"org.matrix.custom.html","formatted_body":"If we do end up figuring out how to make <code>a.b::c.d()</code> unambiguously group as <code>((a.b)::(c.d))()</code>, then I think that RHS chain-of-property-identifiers expression is similar enough to decorators’ syntax that they should share a production, named something like SimpleMemberExpression.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ecmLi81nDgYEBTlpDWxcYsHIO2oRPGeCIAiViElyFrg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634399569896,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IruDrsUO-0kYaej0YSiFGsDiStjxhiOsj_v6HECH5Gc"},
{"content":{"body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be `MemberExpression` or `MemberExpression :: MemberExpression`","format":"org.matrix.custom.html","formatted_body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be <code>MemberExpression</code> or <code>MemberExpression :: MemberExpression</code>","msgtype":"m.text"},"ts":1634402522713,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$TYSKlQiOzTv_EmCPTOyzqQNbtRpADgKh15e8hDw5CA8"},
{"content":{"body":" * Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be `MemberExpression` or `MemberExpression :: MemberExpression`","format":"org.matrix.custom.html","formatted_body":" * Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be <code>MemberExpression</code> or <code>MemberExpression :: MemberExpression</code>","m.new_content":{"body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be `MemberExpression` or `MemberExpression :: MemberExpression`","format":"org.matrix.custom.html","formatted_body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be SomethingExpression Arguments, then define SomethingExpression to be <code>MemberExpression</code> or <code>MemberExpression :: MemberExpression</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$TYSKlQiOzTv_EmCPTOyzqQNbtRpADgKh15e8hDw5CA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634402634740,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$GPzquA9wQrts0tIrzYlvChAW-7a1U1QROsgMf3Sy68M"},
{"content":{"body":" * Maybe change CoverCallExpressionAndAsyncArrowHead to be `SomethingExpression Arguments`, then define SomethingExpression to be `MemberExpression` or `MemberExpression :: MemberExpression`","format":"org.matrix.custom.html","formatted_body":" * Maybe change CoverCallExpressionAndAsyncArrowHead to be <code>SomethingExpression Arguments</code>, then define SomethingExpression to be <code>MemberExpression</code> or <code>MemberExpression :: MemberExpression</code>","m.new_content":{"body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be `SomethingExpression Arguments`, then define SomethingExpression to be `MemberExpression` or `MemberExpression :: MemberExpression`","format":"org.matrix.custom.html","formatted_body":"Maybe change CoverCallExpressionAndAsyncArrowHead to be <code>SomethingExpression Arguments</code>, then define SomethingExpression to be <code>MemberExpression</code> or <code>MemberExpression :: MemberExpression</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$TYSKlQiOzTv_EmCPTOyzqQNbtRpADgKh15e8hDw5CA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634402768881,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$t95ugU1odzOD0fEtMdfANx75NpC5clvyXpCT-NexYAs"},
{"content":{"body":"I think I'm with ljharb on this: if you're not caching the functions into an ident, you're really losing the semantic connection with foo.bar() syntax, and might as well just be writing the function to take the value as a first arg instead","format":"org.matrix.custom.html","formatted_body":"I think I'm with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> on this: if you're not caching the functions into an ident, you're really losing the semantic connection with foo.bar() syntax, and might as well just be writing the function to take the value as a first arg instead","msgtype":"m.text"},"ts":1634402827563,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hXCTccCNtRggXNTaLURcQK4xKW-gC8LPPFw-PYa0vAI"},
{"content":{"body":"(I'm still not quite convinced :: pulls its weight, with `foo.bar~()` solving the auto-bind case and pipeline making it easy to linearize. All that's left is this \"rip off methods and call them on something else\" case, and honestly `const map = Array.prototype.map.call~(...)` solves that well enough imo.)","msgtype":"m.text"},"ts":1634403075847,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ClaYoeaYjQ3hAPyOfR7pLz95h15QP_OCbcbJI42TBvg"},
{"content":{"body":"That presumes PFA pulls its weight tho for non-bind use cases, which I’m not convinced on.","msgtype":"m.text"},"ts":1634403335594,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9hPToWq40PrtSrGetNe4wPJgCWxdGxzvRk8L7-tmYvY"},
{"content":{"body":"Sure. But between the two, they cover a total of four major use-case categories (implicit binding, fluent importable methods, partial application, tear-off methods). PFA covers 1, 3, and does 4 reasonably well (with pipeline covering 2 and the rest of 4), while bind-op covers 1, 2 (if you import them as plain names, or we solve the parsing issues), and 4, with nothing else covering 3.","msgtype":"m.text"},"ts":1634406364890,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LsDtys1IgLJjfCJzvEyIcygADZ7SlcrwL4IeY1zsse0"},
{"content":{"body":"Plus bind-op, by covering 2, overlaps with pipeline (and somewhat also in 4).","msgtype":"m.text"},"ts":1634406473445,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$sUxlqmsyTt4DH3Jbskq9bmLYNif50GtkSh5OO-SxMrg"},
{"content":{"body":"So, looking at these just as lego blocks we want to jam together, I'm finding PFA+pipeline a wider, more efficient cover for the use-cases than bind-op.","msgtype":"m.text"},"ts":1634406500819,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uWycQd7WjUuyxeub5eIegCuc3ptS9doRp_DbExdXRWA"},
{"content":{"body":"I also think PFA has a nicer \"single story to tell\" - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are _thematically_ linked but _practically_ distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","format":"org.matrix.custom.html","formatted_body":"I also think PFA has a nicer &quot;single story to tell&quot; - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are <em>thematically</em> linked but <em>practically</em> distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","msgtype":"m.text"},"ts":1634406709436,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VQFbzrpKDqvIvCTN9f353fvlf2ikqwR7IZoqqnlIuqI"},
{"content":{"body":" * (I also think PFA has a nicer \"single story to tell\" - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are _thematically_ linked but _practically_ distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.)","format":"org.matrix.custom.html","formatted_body":" * (I also think PFA has a nicer &quot;single story to tell&quot; - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are <em>thematically</em> linked but <em>practically</em> distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.)","m.new_content":{"body":"(I also think PFA has a nicer \"single story to tell\" - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are _thematically_ linked but _practically_ distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.)","format":"org.matrix.custom.html","formatted_body":"(I also think PFA has a nicer &quot;single story to tell&quot; - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are <em>thematically</em> linked but <em>practically</em> distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$VQFbzrpKDqvIvCTN9f353fvlf2ikqwR7IZoqqnlIuqI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634406712509,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I59xEq0t7bWua5ghzpuvR3AEDmltWMvggmAOg7oF-C8"},
{"content":{"body":" * I also think PFA has a nicer \"single story to tell\" - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are _thematically_ linked but _practically_ distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","format":"org.matrix.custom.html","formatted_body":" * I also think PFA has a nicer &quot;single story to tell&quot; - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are <em>thematically</em> linked but <em>practically</em> distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","m.new_content":{"body":"I also think PFA has a nicer \"single story to tell\" - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are _thematically_ linked but _practically_ distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","format":"org.matrix.custom.html","formatted_body":"I also think PFA has a nicer &quot;single story to tell&quot; - it does one thing and does it well; all the use-cases it covers are obvious realizations of that one thing (binding arguments to a call ahead of time). Bind-op can be seen as doing one thing (binding the receiver for a function, which may or may not be immediately called), but in practice its uses are <em>thematically</em> linked but <em>practically</em> distinct - implicit binding and fluent/tear-off invocations are completely different usage patterns.","msgtype":"m.text"},"m.relates_to":{"event_id":"$VQFbzrpKDqvIvCTN9f353fvlf2ikqwR7IZoqqnlIuqI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634406716735,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fObHO3ggOEna6Hyc6iHsQUnRM5gnVWtmYvOHqPTXvNo"},
{"content":{"body":" * Sure. But between the two, they cover a total of four major use-case categories (implicit binding, fluent importable methods, partial application, tear-off methods). PFA covers 1, 3, and can pretty easily convert 4 into 2 (with pipeline covering 2 and the rest of 4), while bind-op covers 1, 2 (if you import them as plain names, or we solve the parsing issues), and 4, with nothing else covering 3.","m.new_content":{"body":"Sure. But between the two, they cover a total of four major use-case categories (implicit binding, fluent importable methods, partial application, tear-off methods). PFA covers 1, 3, and can pretty easily convert 4 into 2 (with pipeline covering 2 and the rest of 4), while bind-op covers 1, 2 (if you import them as plain names, or we solve the parsing issues), and 4, with nothing else covering 3.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LsDtys1IgLJjfCJzvEyIcygADZ7SlcrwL4IeY1zsse0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634406980419,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$c-KoJ2RbY_qpFbGWOQRFQxwlzkR98sXq5CcPBBgUp2E"},
{"content":{"body":"Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of `.call` (which is extremely common) would be improved with PFA syntax. ","format":"org.matrix.custom.html","formatted_body":"Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of <code>.call</code> (which is extremely common) would be improved with PFA syntax.","msgtype":"m.text"},"ts":1634415107022,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$STkR15XBKVUQ7wKi7OsVVRftsh11ajqBCSOWrAVFtuo"},
{"content":{"body":"* Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of `.call` (which is extremely common) would be improved with PFA syntax. ","format":"org.matrix.custom.html","formatted_body":"* Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of <code>.call</code> (which is extremely common) would be improved with PFA syntax.","m.new_content":{"body":"Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of `.call` (which is extremely common) would be improved with PFA syntax. ","format":"org.matrix.custom.html","formatted_body":"Looking at the results of https://github.com/js-choi/proposal-bind-this/issues/12, I don’t think most current uses of <code>.call</code> (which is extremely common) would be improved with PFA syntax.","msgtype":"m.text"},"m.relates_to":{"event_id":"$STkR15XBKVUQ7wKi7OsVVRftsh11ajqBCSOWrAVFtuo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634415132123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nfR8LaSnEGO1mkMclt3t_QiAzTuNmc7VQU7sVukAz9c"},
{"content":{"body":"I will try to make this clear in the slides, although I don’t think that this concern should block Stage 1 anyway. ","format":"org.matrix.custom.html","formatted_body":"I will try to make this clear in the slides, although I don’t think that this concern should block Stage 1 anyway.","msgtype":"m.text"},"ts":1634415161240,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$susVs-ZI-7-iSgnZsx6ryZIAD0f80SvPxFTNvKnVh08"}
]