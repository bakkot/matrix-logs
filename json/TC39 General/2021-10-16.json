[
{"content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"ts":1634393643571,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`(a.b)::((c.d)())` and not\n`((a.b)::(c.d))()` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>(a.b)::((c.d)())</code> and not<br><code>((a.b)::(c.d))()</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634393676545,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NUklFQtBQ-Z7jGSAD8uP_sfXh6vuvjhTzbRkNtMWSw4"},
{"content":{"body":"I can see why the third parse isn't useful (tho I think it's what I would naively expect, treating :: as an alternative dot), but I'm not sure why you'd want the first parse over the second.","msgtype":"m.text"},"ts":1634395750579,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5G6tcoYSOLnryt3yguaAgjgTo9ShqdX9IlADxpwCWqc"},
{"content":{"body":"It doesn't seem like it's what rbuckton is asking for in that issue, either","format":"org.matrix.custom.html","formatted_body":"It doesn't seem like it's what <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> is asking for in that issue, either","msgtype":"m.text"},"ts":1634395785413,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LFbK9Mpanc_xj0HBpuaOP2ctNl8drwAUpLEZ2VGFqHI"},
{"content":{"body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` and not\n`(a.b)::((c.d)())` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":" * If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> and not<br><code>(a.b)::((c.d)())</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","m.new_content":{"body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-`this` operator such that\n`a.b::c.d()` would unambiguously parse as\n`((a.b)::(c.d))()` and not\n`(a.b)::((c.d)())` or\n`((a.b)::c).d)()`),\nplease let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover `a.b::c.d`, that production would also cover `a.b::c`…","format":"org.matrix.custom.html","formatted_body":"If anyone has any grammar suggestions with regards to https://github.com/js-choi/proposal-bind-this/issues/14#issuecomment-944697033 (how we could loosen the bind-<code>this</code> operator such that<br><code>a.b::c.d()</code> would unambiguously parse as<br><code>((a.b)::(c.d))()</code> and not<br><code>(a.b)::((c.d)())</code> or<br><code>((a.b)::c).d)()</code>),<br>please let me know on the issue. I’m kind of stumped: for any recursive production I can think of that would cover <code>a.b::c.d</code>, that production would also cover <code>a.b::c</code>…","msgtype":"m.text"},"m.relates_to":{"event_id":"$FKtf44jxqzm_F5nwkxGxjR6KemEToK4TWKjl3HKuNLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634398309511,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xku6sbp5QZHKmjsGAa7ReOo09pVxciUimuInhQ3Gb7Q"},
{"content":{"body":"TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","msgtype":"m.text"},"ts":1634398411218,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$73TGiWmqDhAeNNH4E_IDLgYB3zJXGHQoK_oJpDtgjpQ"},
{"content":{"body":" * TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","m.new_content":{"body":"TabAtkins: Yeah, sorry, I meant to make the goal grouping `((a.b)::(c.d))()` and not `(a.b)::((c.d)())`; I’ve edited my message.\nThe problem is that I can’t figure out how I’d make a grammar that makes `…::…` looser than `….…` while making `…::…` still as tight as `…(…)`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: Yeah, sorry, I meant to make the goal grouping <code>((a.b)::(c.d))()</code> and not <code>(a.b)::((c.d)())</code>; I’ve edited my message.<br>The problem is that I can’t figure out how I’d make a grammar that makes <code>…::…</code> looser than <code>….…</code> while making <code>…::…</code> still as tight as <code>…(…)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$73TGiWmqDhAeNNH4E_IDLgYB3zJXGHQoK_oJpDtgjpQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1634398430651,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2rl-Ef8cqsPRpd1xfhYqfCkOxxJxn8na2pa97aYNgNM"},
{"content":{"body":"fwiw while i think `a::Array.prototype.map` is nice, 100% of the actual use cases i have all involve caching the method beforehand, so `a::(Array.prototype.map)` doesn’t seem that bad, if you can’t figure out a solution.","format":"org.matrix.custom.html","formatted_body":"fwiw while i think <code>a::Array.prototype.map</code> is nice, 100% of the actual use cases i have all involve caching the method beforehand, so <code>a::(Array.prototype.map)</code> doesn’t seem that bad, if you can’t figure out a solution.","msgtype":"m.text"},"ts":1634398528821,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NqPdcLSeBJO2Vhr98yrEOSSEmA0W5UugQjGDMhxrlq8"}
]