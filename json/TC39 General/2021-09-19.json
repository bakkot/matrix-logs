[
{"content":{"body":"o7…It’s a person saluting. ","msgtype":"m.text"},"ts":1632009709146,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hEdGfwvImmuvfnZ1YNSQBy3BscmrWxh3wzNWUTwkyMA"},
{"content":{"body":"Also, I’m trying to figure out where it is specified that `for await`, when given a non-async iterable, performs `await` on each of the iterable’s items. \n","format":"org.matrix.custom.html","formatted_body":"Also, I’m trying to figure out where it is specified that <code>for await</code>, when given a non-async iterable, performs <code>await</code> on each of the iterable’s items.","msgtype":"m.text"},"ts":1632009711357,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-fKjZ261zZvPyQIsNB6FoN3I7LpP9C6u1AflhJxUMwY"},
{"content":{"body":"\n\nIn https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset, step 6.b, when _iteratorKind_ is async, then Await is called on _nextResult_ itself. But I don’t see any place where Await is called on _nextValue_…","format":"org.matrix.custom.html","formatted_body":"In https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset, step 6.b, when <em>iteratorKind</em> is async, then Await is called on <em>nextResult</em> itself. But I don’t see any place where Await is called on <em>nextValue</em>…","msgtype":"m.text"},"ts":1632009711715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$a9SEHKBRWzQACEOUqOBZhd7n5_MiMQ5m2vdzQVapT_I"},
{"content":{"body":"jschoi: I believe it's in `AsyncFromSyncIteratorPrototype`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I believe it's in <code>AsyncFromSyncIteratorPrototype</code>","msgtype":"m.text"},"ts":1632010342512,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IQ6HCWuNfLxOeBNICmfhUDrxZ_s9GnrjMBKJLN37wCc"},
{"content":{"body":"i will see if I can find it","msgtype":"m.text"},"ts":1632010348370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NbWx3Tzb2PindZWmYFWSBEmypNn8EOGm8hn393Rc3s0"},
{"content":{"body":"https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-asyncfromsynciteratorcontinuation","msgtype":"m.text"},"ts":1632010419373,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ErMcCdemJlZboG_72x1NO2J60HsiDQ_Bq1SJVNVpvd8"},
{"content":{"body":"that is, the `AsyncFromSyncIteratorPrototype` wrapper doesn't return `Promise.resolve({ value: innerValue, done: false })` directly, as you might expect; rather, it yields `Promise.resolve(innerValue).then(unwrapped => ({ value: unwrapped, done: false })`","format":"org.matrix.custom.html","formatted_body":"that is, the <code>AsyncFromSyncIteratorPrototype</code> wrapper doesn't return <code>Promise.resolve({ value: innerValue, done: false })</code> directly, as you might expect; rather, it yields <code>Promise.resolve(innerValue).then(unwrapped =&gt; ({ value: unwrapped, done: false })</code>","msgtype":"m.text"},"ts":1632010520769,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4pK1zhG0fW8go7REMvnf7a6tllO75vae4XVGfuNOX1U"},
{"content":{"body":" * that is, the `AsyncFromSyncIteratorPrototype` wrapper doesn't return `Promise.resolve({ value: innerValue, done: false })` directly, as you might expect; rather, it yields `Promise.resolve(innerValue).then(unwrapped => ({ value: unwrapped, done: false }))`","format":"org.matrix.custom.html","formatted_body":" * that is, the <code>AsyncFromSyncIteratorPrototype</code> wrapper doesn't return <code>Promise.resolve({ value: innerValue, done: false })</code> directly, as you might expect; rather, it yields <code>Promise.resolve(innerValue).then(unwrapped =&gt; ({ value: unwrapped, done: false }))</code>","m.new_content":{"body":"that is, the `AsyncFromSyncIteratorPrototype` wrapper doesn't return `Promise.resolve({ value: innerValue, done: false })` directly, as you might expect; rather, it yields `Promise.resolve(innerValue).then(unwrapped => ({ value: unwrapped, done: false }))`","format":"org.matrix.custom.html","formatted_body":"that is, the <code>AsyncFromSyncIteratorPrototype</code> wrapper doesn't return <code>Promise.resolve({ value: innerValue, done: false })</code> directly, as you might expect; rather, it yields <code>Promise.resolve(innerValue).then(unwrapped =&gt; ({ value: unwrapped, done: false }))</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$4pK1zhG0fW8go7REMvnf7a6tllO75vae4XVGfuNOX1U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1632010527149,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b9xQABE087MWu22wJarnDoWWDx2fM1Ib3A35zHiyNug"},
{"content":{"body":"incidentally, the fact that Await is not called on `nextValue` means that it's actually possible to cause the loop variable in a `for await` to hold a Promise if you construct the async iterator manually, though you should not do this: \n\n```\nlet x = { [Symbol.asyncIterator](){ let first = true; return { next(){ if (first) { first = false; return { value: Promise.resolve(0), done: false }; } else return { done: true }; } } } };\nfor await (let a of x) console.log(a); // prints a Promise holding 0\n```","format":"org.matrix.custom.html","formatted_body":"<p>incidentally, the fact that Await is not called on <code>nextValue</code> means that it's actually possible to cause the loop variable in a <code>for await</code> to hold a Promise if you construct the async iterator manually, though you should not do this:</p>\n<pre><code>let x = { [Symbol.asyncIterator](){ let first = true; return { next(){ if (first) { first = false; return { value: Promise.resolve(0), done: false }; } else return { done: true }; } } } };\nfor await (let a of x) console.log(a); // prints a Promise holding 0\n</code></pre>\n","msgtype":"m.text"},"ts":1632010825596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1szBT7dcpRjdSRuOMnwyJV-vQEtj3gvvdWrilqFFaOc"},
{"content":{"body":"bakkot: Aha, thank you very much. This will help me very much.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Aha, thank you very much. This will help me very much.","msgtype":"m.text"},"ts":1632015168255,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3_x5rsp-_33JG1UBG0oEc73tkawQqhk2r3_r-6EU-oY"}
]