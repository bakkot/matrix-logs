[
{"content":{"body":"I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","format":"org.matrix.custom.html","formatted_body":"I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/plain"},{"body":"I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/html"}]},"ts":1672148947297,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uzd4SwiL6qGnZPGbgaeeUU4AEpOJCf9fSlmsELRg3A4"},
{"content":{"body":" * I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","format":"org.matrix.custom.html","formatted_body":" * I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","m.new_content":{"body":"I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","format":"org.matrix.custom.html","formatted_body":"I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/plain"},{"body":"I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uzd4SwiL6qGnZPGbgaeeUU4AEpOJCf9fSlmsELRg3A4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I see the current R&T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  `===`, `==`, `Object.is`, `switch(){}`, `indexOf`, `Array contains`, `Map has`, `Set has`, and validation checks within `Object.defineProperty`.\nThe benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/plain"},{"body":" * I see the current R&amp;T specification as the result of exploring what it looks like to include composite types within the set of types that work with the existing equality procedures in the language:  <code>===</code>, <code>==</code>, <code>Object.is</code>, <code>switch(){}</code>, <code>indexOf</code>, <code>Array contains</code>, <code>Map has</code>, <code>Set has</code>, and validation checks within <code>Object.defineProperty</code>.<br>The benefit of that is compatibility with existing libraries, and so people can keep using the APIs they are either already familiar with, or already likely to learn at some point.","mimetype":"text/html"}]},"ts":1672148974496,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$EHWo2Tb7f_xp_w9CH4LVBCJlvt28XdgaYhQhZwfWDEo"}
]