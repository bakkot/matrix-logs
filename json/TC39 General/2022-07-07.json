[
{"content":{"body":"Excited to see progress on iterator helpers","msgtype":"m.text","org.matrix.msc1767.text":"Excited to see progress on iterator helpers"},"ts":1657163103016,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$7UocaCQL1rKOLrjVFXveoKieNiOZgScgYA18X17T1dc"},
{"content":{"body":"https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n\nOne thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.","format":"org.matrix.custom.html","formatted_body":"<p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n\nOne thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.","mimetype":"text/plain"},{"body":"<p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n","mimetype":"text/html"}]},"ts":1657233297922,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14"},
{"content":{"body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14"}}},"ts":1657233851066,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HXE7Pr3UNrIegi9gtEVFv0UvVMKDJwU7X3my42WA0Ew"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n> \n> One thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.\n\n * I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br><p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n</blockquote></mx-reply> * I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","m.new_content":{"body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HXE7Pr3UNrIegi9gtEVFv0UvVMKDJwU7X3my42WA0Ew","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657233884938,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UlfV_rklyTF6jiL4axcPLqN0h82xukXqdiuyQTA5u9k"},
{"content":{"body":"jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","mimetype":"text/html"}]},"ts":1657234983759,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$VZIXgFongWUOOoh46DrpOXJXtTCQX16Q8XnDFRSEBT4"},
{"content":{"body":" * jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","m.new_content":{"body":"jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$VZIXgFongWUOOoh46DrpOXJXtTCQX16Q8XnDFRSEBT4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * jschoi: Thanks yeah — IMHO we’d be better off if we removed `=` from that table. But most everybody else seems to feel otherwise.\n\nAnyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.\n\nI don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thanks yeah — IMHO we’d be better off if we removed <code>=</code> from that table. But most everybody else seems to feel otherwise.</p>\n<p>Anyway, my perspective on this is that every good intro-to-this-programming-language book I’ve ever read has a section for operator precedence that only includes actual operators — and then some separate discussion about order of evaluation.</p>\n<p>I don’t think the MDN JavaScript docs should be less precise or less rigorous about details like this than a well-written book would be. So that’s why I think, if we’re going to include things on that page that are not strictly operators according to the rules of the language, then we minimally should at least re-title the page — and beyond that, make it very clear which things are strictly operators and which are not.</p>\n","mimetype":"text/html"}]},"ts":1657235006819,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$RDngXdEgmykOajhaxbu4VN-eES9sVV8Yj5Luw-nSPCg"},
{"content":{"body":"@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","format":"org.matrix.custom.html","formatted_body":"@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and =&gt; from being operators.<br />\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =&gt;, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","msgtype":"m.text"},"ts":1657235303208,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dDW4gwLegOmx0qosGFVxcYQshYb-q-Dll1rYtW_l82Q"},
{"content":{"body":"* @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","format":"org.matrix.custom.html","formatted_body":"* @sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and =&gt; from being operators.<br />\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =&gt;, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","m.new_content":{"body":"@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and => from being operators.\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =>, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","format":"org.matrix.custom.html","formatted_body":"@sideshowbarker: Yeah, I can certainly sympathize with the desire for rigor on MDN. And it certainly would be consistent to exclude both = and =&gt; from being operators.<br />\nI don’t know if there’s any rigorous-but-still-useful definition of “operator” that would exclude =, though. I think that you could rigorously define a JavaScript operator as a “syntactic token(s) that create an expression but which is not a literal”, where an “expression” is a “syntax phrase that evaluates into a value at runtime”. So yield is a nullary-or-prefix operator (with side effects). + is a prefix-or-binary operator. import() probably should be called a circumflex operator (I forgot if it’s in the MDN table). And = and =&gt;, I think, can reasonably be rigorously called operators, too. They’re certainly not literals or statements, heh.","msgtype":"m.text"},"m.relates_to":{"event_id":"$dDW4gwLegOmx0qosGFVxcYQshYb-q-Dll1rYtW_l82Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657235328790,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OR_OxlEwSJLan0Kco1oFp9BXU0ksCoVSuRGP-zGClx4"},
{"content":{"body":"I think I’m just gonna leave it up to Josh Chen to try to solve 😋 He’s been doing some great work on the JavaScript docs recently, with in general a much more informed perspective than mine anyway","msgtype":"m.text","org.matrix.msc1767.text":"I think I’m just gonna leave it up to Josh Chen to try to solve 😋 He’s been doing some great work on the JavaScript docs recently, with in general a much more informed perspective than mine anyway"},"ts":1657235460087,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$tyktHwt4BfX5yE6gdZU3dkx2oO7Q6rWXOQNy3KBPadU"}
]