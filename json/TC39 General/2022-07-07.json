[
{"content":{"body":"Excited to see progress on iterator helpers","msgtype":"m.text","org.matrix.msc1767.text":"Excited to see progress on iterator helpers"},"ts":1657163103016,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$7UocaCQL1rKOLrjVFXveoKieNiOZgScgYA18X17T1dc"},
{"content":{"body":"https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n\nOne thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.","format":"org.matrix.custom.html","formatted_body":"<p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n\nOne thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.","mimetype":"text/plain"},{"body":"<p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n","mimetype":"text/html"}]},"ts":1657233297922,"senderName":"sideshowbarker","senderId":"@sideshowbarker:mozilla.org","id":"$Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14"},
{"content":{"body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14"}}},"ts":1657233851066,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HXE7Pr3UNrIegi9gtEVFv0UvVMKDJwU7X3my42WA0Ew"},
{"content":{"body":"> <@sideshowbarker:mozilla.org> https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.\n> \n> One thought I had was that maybe we could retitle the page _“Operator precedence and order of evaluation”_ , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.\n\n * I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Wn9ICMaXBAaQSanb6l-1vLxOfNqd7iw8cbNlzFGgv14\">In reply to</a> <a href=\"https://matrix.to/#/@sideshowbarker:mozilla.org\">@sideshowbarker:mozilla.org</a><br><p>https://github.com/mdn/content/issues/12914 is an open issue about some of the MDN JavaScript docs that we could use some insight from others on — specifically it’s about the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence page, for which we sometimes get requests to include precedence information about things that aren’t actually operators.</p>\n<p>One thought I had was that maybe we could retitle the page <em>“Operator precedence and order of evaluation”</em> , though I’m not sure even that would be enough to cover the non-operator cases that people have opened issues about.</p>\n</blockquote></mx-reply> * I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","m.new_content":{"body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.\nFor what it’s worth, it is my opinion that => is an operator in every way that = is an operator, and it is completely appropriate to include `=>` in a “table of operators” if `=` is in there too. There’s hardly any difference of worth between them.","format":"org.matrix.custom.html","formatted_body":"I’ve actually touched on this in that repository’s issues before, too, in https://github.com/mdn/content/issues/5365. I think we’ve discussed it a couple times here too; I remember raising it.<br />\nFor what it’s worth, it is my opinion that =&gt; is an operator in every way that = is an operator, and it is completely appropriate to include <code>=&gt;</code> in a “table of operators” if <code>=</code> is in there too. There’s hardly any difference of worth between them.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HXE7Pr3UNrIegi9gtEVFv0UvVMKDJwU7X3my42WA0Ew","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657233884938,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UlfV_rklyTF6jiL4axcPLqN0h82xukXqdiuyQTA5u9k"}
]