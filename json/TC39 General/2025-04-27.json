[
{"content":{"body":"I still don't understand why engines do not implement registered symbols as a wrapper around strings. No need for special GC except what already exists for strings. Isn't it simpler than implementing a weak registry and collect entries?","msgtype":"m.text"},"ts":1745712491839,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$n4ELoXqAWsvfxv2kb7LshjQiralJ0qWCTQykZ-1zhYY"},
{"content":{"body":"It’s a neat idea. We’ve got three flavors of symbol and if a VM can stomach implementing each of those cases very differently, I imagine it could be that easy.\n1. well-known symbols distinguished by an enum such that they are identical even across realms\n2. registered symbols distinguished by string value + realm such that they are not identical across realms but strcmp locally\n3. other symbols distinguished by heap pointer","format":"org.matrix.custom.html","formatted_body":"<p>It’s a neat idea. We’ve got three flavors of symbol and if a VM can stomach implementing each of those cases very differently, I imagine it could be that easy.</p>\n<ol>\n<li>well-known symbols distinguished by an enum such that they are identical even across realms</li>\n<li>registered symbols distinguished by string value + realm such that they are not identical across realms but strcmp locally</li>\n<li>other symbols distinguished by heap pointer</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1745721432582,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Lwysw1sP1vLxuomG0Y1gYJ4JNxAHqQg3XkZCEODhHOs"},
{"content":{"body":"Aren't well known symbols just unique symbols that are anchored in the implementation, and this just never collected?","msgtype":"m.text"},"ts":1745773733349,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$s5wWf_POpuP-fi3biTM_pD4-uBpw5ypgK4__0rnMBj4"},
{"content":{"body":"* Aren't well known symbols just unique symbols that are anchored in the implementation, and thus just never collected?","m.new_content":{"body":"Aren't well known symbols just unique symbols that are anchored in the implementation, and thus just never collected?","msgtype":"m.text"},"m.relates_to":{"event_id":"$s5wWf_POpuP-fi3biTM_pD4-uBpw5ypgK4__0rnMBj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1745773770672,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$YERgP8Mb_15UXJV2M1YCrpZyLSdl65kJhzPJLan2nDI"},
{"content":{"body":"Also according to the spec:\n> The GlobalSymbolRegistry List is an append-only List that is globally available. It is shared by all realms.\n\nSo there is no need to key by realm, registered symbols are equal across realms","msgtype":"m.text"},"ts":1745774012206,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$urgK9H_ivkRbyzwMNBjd9QjGRjWdzg6XXnYZBptCU9I"},
{"content":{"body":"I think it's just generally more convenient to implement both kinds of symbols in the same object hierarchy, even if it makes the GC stuff a bit weirder ","msgtype":"m.text"},"ts":1745784551659,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ymEBS5vvh0eLQ_QxxCiSDIAAyS1twoCvDwojMWJ7SYo"},
{"content":{"body":"also increasing the number of things that can be gc'd is probably not a bad thing in engines that execute arbitrarily bad code","msgtype":"m.text"},"ts":1745784602202,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FTWBJS1hUvhRid5ySdiqS8_1K4CAVWzPd6Y_S2bWgHU"},
{"content":{"body":"in this case, because it’s a primitive, the GC at least would not be observable","m.mentions":{},"msgtype":"m.text"},"ts":1745784635048,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$9bzXJSBStkUF29EzmDpg7y7L6a5sonP5fmTfdJek_NY"},
{"content":{"body":"in any case, for the moment, i’m more curious about the status quo than changing the status.","m.mentions":{},"msgtype":"m.text"},"ts":1745784666608,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$w2jGE-JBUB9i-x9HjSmT7atnAKlRmdBbcFTGTKSvc1E"},
{"content":{"body":"* for the moment, i’m more curious about the status quo than changing the status.","m.mentions":{},"m.new_content":{"body":"for the moment, i’m more curious about the status quo than changing the status.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$w2jGE-JBUB9i-x9HjSmT7atnAKlRmdBbcFTGTKSvc1E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1745784767116,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$nSKE05D-iriI0RyfpegXzZ9ORUVJcDm2hc9oSrj2090"},
{"content":{"body":"* because it’s a primitive, the GC at least would not be observable","m.mentions":{},"m.new_content":{"body":"because it’s a primitive, the GC at least would not be observable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9bzXJSBStkUF29EzmDpg7y7L6a5sonP5fmTfdJek_NY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1745784778890,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Bn75lEzDKVFsFssHotc3vAk2I6B2i0Kxr8oh0pv-bXI"},
{"content":{"body":"* because it’s a primitive, the GC at least would not be observable and mathieu’s proposal would obviate needing a GC, but would make `===` O(length) for registered symbols","format":"org.matrix.custom.html","formatted_body":"* because it’s a primitive, the GC at least would not be observable and mathieu’s proposal would obviate needing a GC, but would make <code>===</code> O(length) for registered symbols","m.mentions":{},"m.new_content":{"body":"because it’s a primitive, the GC at least would not be observable and mathieu’s proposal would obviate needing a GC, but would make `===` O(length) for registered symbols","format":"org.matrix.custom.html","formatted_body":"because it’s a primitive, the GC at least would not be observable and mathieu’s proposal would obviate needing a GC, but would make <code>===</code> O(length) for registered symbols","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9bzXJSBStkUF29EzmDpg7y7L6a5sonP5fmTfdJek_NY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1745784839964,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Q7Dt4PHtBJNR1amPVOwxbPJXNmKQTqQdLOXtz6QqzdQ"}
]