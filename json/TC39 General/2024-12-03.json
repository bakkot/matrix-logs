[
{"content":{"body":"Hi all, new guy here! \n\nI'm entertaining the idea of opening a proposal but wanted to get a feeling on how the community feels about the concept before I commit a weekend to writing it out - haha. \n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular \n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a feeling on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1733202117924,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc"},
{"content":{"body":" * Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":" * <p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"m.new_content":{"body":"Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733202156297,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$hB7QHZTHYrjJzhueaNe9NTtJ5CwgZTkWl0qOCxmzWkk"},
{"content":{"body":" * Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `@jsx()` or anything, I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":" * <p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>@jsx()</code> or anything, I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"m.new_content":{"body":"Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `@jsx()` or anything, I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>@jsx()</code> or anything, I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733202235863,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$wLm2Vf5MUd0mM8wPt-Arh2NPK7cosoxUlqv0AcU7rrE"},
{"content":{"body":" * Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":" * <p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"m.new_content":{"body":"Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe(push)]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733202302762,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$ZRedKXhkwGPc9Z7Kiq_1UX-hrerGYcKwWRt3Aa1awww"},
{"content":{"body":" * Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":" * <p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"m.new_content":{"body":"Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733202425075,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$hbWTUAF_k5oRIdC_WWLir1aB9gx4uhGB7VoZsnunAyM"},
{"content":{"body":" * Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros. No macros would be shipped in ECMAScript, all macros would be defined by users as functions that take tokens and return valid ECMAScript.\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":" * <p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros. No macros would be shipped in ECMAScript, all macros would be defined by users as functions that take tokens and return valid ECMAScript.</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"m.new_content":{"body":"Hi all, new guy here!\n\nI'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.\n\nGenerally, it's the concept of the incorporation of Rust-inspired callable macros. No macros would be shipped in ECMAScript, all macros would be defined by users as functions that take tokens and return valid ECMAScript.\n\n```javascript\n// Parse tokens and generate React.createElement() calls\nconst Foo = () => jsx!(<div>Hello World</div>)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n```\n\nThe syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like `jsx!()` could be `~jsx()` or anything (to avoid conflicts), I'm not opinionated here\n\nWhile I know ECMAScript is not a compiled language, there are interesting use cases like;\n\n- Enabling support for jsx/other templating languages without an external preprocessor/eval\n- Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular\n- A reduced need for custom compilers (ngc, .vue, .svelte)\n- More ergonomic usage for tools like protobuf\n- etc\n\nThis would also lead to support in preprocessors like TypeScript which _could_ statically compile macros - offering an interesting/novel hybrid macro system.\n\nAny thoughts on the concept?","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, new guy here!</p>\n<p>I'm entertaining the idea of opening a proposal but wanted to get a sense on how the community feels about the concept before I commit a weekend to writing it out - haha.</p>\n<p>Generally, it's the concept of the incorporation of Rust-inspired callable macros. No macros would be shipped in ECMAScript, all macros would be defined by users as functions that take tokens and return valid ECMAScript.</p>\n<pre><code class=\"language-javascript\">// Parse tokens and generate React.createElement() calls\nconst Foo = () =&gt; jsx!(&lt;div&gt;Hello World&lt;/div&gt;)\n\n// Create a getter/setter for a property\nclass Bar {\n  #[observe]\n  baz = undefined\n}\n</code></pre>\n<p>The syntax itself can be changed, I am just defaulting to Rust syntax for familiarity, but something like <code>jsx!()</code> could be <code>~jsx()</code> or anything (to avoid conflicts), I'm not opinionated here</p>\n<p>While I know ECMAScript is not a compiled language, there are interesting use cases like;</p>\n<ul>\n<li>Enabling support for jsx/other templating languages without an external preprocessor/eval</li>\n<li>Macro annotations that facilitate more ergonomic mutation observability leading to more ergonomic syntax for frameworks like Vue/Angular</li>\n<li>A reduced need for custom compilers (ngc, .vue, .svelte)</li>\n<li>More ergonomic usage for tools like protobuf</li>\n<li>etc</li>\n</ul>\n<p>This would also lead to support in preprocessors like TypeScript which <em>could</em> statically compile macros - offering an interesting/novel hybrid macro system.</p>\n<p>Any thoughts on the concept?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J730gVuE_BRPnj85EphepZihi3-Gc4O-nxERc-LkiZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733202507765,"senderName":"David Alsh","senderId":"@alshdavid:matrix.org","id":"$R2egOMDaudRX7MQEZm5HI6b7gbkTIIpQMOVHjnCJEaA"}
]