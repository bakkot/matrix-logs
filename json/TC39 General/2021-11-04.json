[
{"content":{"body":"okay so if we're champs no need to answer the doodle, or shoudl we do so to kick off time planning?","msgtype":"m.text"},"ts":1635986719674,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hhZ-lmMppgdpr1eMMT6guX9ZY2LWyfuvnQLvYGATv9I"},
{"content":{"body":"devsnek: I'm working on it, but progress is slow.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: I'm working on it, but progress is slow.","msgtype":"m.text"},"ts":1635991904747,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$O9kj-doR_Vq1KcmN6v-wvVt-BsgucBdac_sobMuDses"},
{"content":{"body":"Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:\n```\nlet obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n```\n\nwhich I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.\n\nHowever, an _hypothetical WeakRef-oblivious execution_ (as defined in \"9.10.2 - Liveness\") might be `obj === obj`, which observes the identity of `obj` and thus makes it \"live\" and non-collectable, so `ref.deref()` must return `obj`.","format":"org.matrix.custom.html","formatted_body":"<p>Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:</p>\n<pre><code>let obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n</code></pre>\n<p>which I though might log <code>undefined, 1</code> because it doesn't observe the <em>identity</em> of <code>obj</code>.</p>\n<p>However, an <em>hypothetical WeakRef-oblivious execution</em> (as defined in &quot;9.10.2 - Liveness&quot;) might be <code>obj === obj</code>, which observes the identity of <code>obj</code> and thus makes it &quot;live&quot; and non-collectable, so <code>ref.deref()</code> must return <code>obj</code>.</p>\n","msgtype":"m.text"},"ts":1636023611920,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo"},
{"content":{"body":" * Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:\n```\nlet obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n```\n\nwhich I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.\n\nHowever, an _hypothetical WeakRef-oblivious execution_ (as defined in \"9.10.2 - Liveness\") might be `obj === obj`, which observes the identity of `obj` and thus makes it \"live\" and non-collectable, so `ref.deref()` must return `obj`.","format":"org.matrix.custom.html","formatted_body":" * <p>Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:</p>\n<pre><code>let obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n</code></pre>\n<p>which I though might log <code>undefined, 1</code> because it doesn't observe the <em>identity</em> of <code>obj</code>.</p>\n<p>However, an <em>hypothetical WeakRef-oblivious execution</em> (as defined in &quot;9.10.2 - Liveness&quot;) might be <code>obj === obj</code>, which observes the identity of <code>obj</code> and thus makes it &quot;live&quot; and non-collectable, so <code>ref.deref()</code> must return <code>obj</code>.</p>\n","m.new_content":{"body":"Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:\n```\nlet obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n```\n\nwhich I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.\n\nHowever, an _hypothetical WeakRef-oblivious execution_ (as defined in \"9.10.2 - Liveness\") might be `obj === obj`, which observes the identity of `obj` and thus makes it \"live\" and non-collectable, so `ref.deref()` must return `obj`.","format":"org.matrix.custom.html","formatted_body":"<p>Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:</p>\n<pre><code>let obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n</code></pre>\n<p>which I though might log <code>undefined, 1</code> because it doesn't observe the <em>identity</em> of <code>obj</code>.</p>\n<p>However, an <em>hypothetical WeakRef-oblivious execution</em> (as defined in &quot;9.10.2 - Liveness&quot;) might be <code>obj === obj</code>, which observes the identity of <code>obj</code> and thus makes it &quot;live&quot; and non-collectable, so <code>ref.deref()</code> must return <code>obj</code>.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636023627444,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZssS50QOJn_hYDNvjYeaBFau8xW8uT9hl7MgNH8B2ls"},
{"content":{"body":"Maybe my question is \"is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my code?\"","format":"org.matrix.custom.html","formatted_body":"Maybe my question is &quot;is an <em>hypothetical WeakRef-oblivious execution</em> any possible execution of any possible code, or just any possible execution flow in my code?&quot;","msgtype":"m.text"},"ts":1636023745609,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$NyLht77ft_hlWy8URREPtX4ymKWQinPo2w6gRAElI-w"},
{"content":{"body":" * Maybe my question is \"is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my source code?\"","format":"org.matrix.custom.html","formatted_body":" * Maybe my question is &quot;is an <em>hypothetical WeakRef-oblivious execution</em> any possible execution of any possible code, or just any possible execution flow in my source code?&quot;","m.new_content":{"body":"Maybe my question is \"is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my source code?\"","format":"org.matrix.custom.html","formatted_body":"Maybe my question is &quot;is an <em>hypothetical WeakRef-oblivious execution</em> any possible execution of any possible code, or just any possible execution flow in my source code?&quot;","msgtype":"m.text"},"m.relates_to":{"event_id":"$NyLht77ft_hlWy8URREPtX4ymKWQinPo2w6gRAElI-w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636023753343,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$PmCIPoyMsh1Uy5EkOR2u-u6F6n3pMC14G-sjxZRCqI8"},
{"content":{"body":" * Maybe my question is \"is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my code?\"","format":"org.matrix.custom.html","formatted_body":" * Maybe my question is &quot;is an <em>hypothetical WeakRef-oblivious execution</em> any possible execution of any possible code, or just any possible execution flow in my code?&quot;","m.new_content":{"body":"Maybe my question is \"is an _hypothetical WeakRef-oblivious execution_ any possible execution of any possible code, or just any possible execution flow in my code?\"","format":"org.matrix.custom.html","formatted_body":"Maybe my question is &quot;is an <em>hypothetical WeakRef-oblivious execution</em> any possible execution of any possible code, or just any possible execution flow in my code?&quot;","msgtype":"m.text"},"m.relates_to":{"event_id":"$NyLht77ft_hlWy8URREPtX4ymKWQinPo2w6gRAElI-w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636023759246,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fy0IcYVZ85XKZTKdOBi9ghA7JKiB2_G79gFFtO8hrBQ"},
{"content":{"body":"It's still weird that I don't have much idea what happened after the latest meeting. I understand that it takes a while to get the complete notes, but I really wish someone made an summary that has a sentence or two for each agenda item soon after a meeting.","msgtype":"m.text"},"ts":1636027043502,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$DcGcINjPQq4GBfFpLvw55R8kcllfRBBn5IJ37M8e4uE"},
{"content":{"body":"*it still feels weird*","format":"org.matrix.custom.html","formatted_body":"<em>it still feels weird</em>","msgtype":"m.text"},"ts":1636027063990,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$mgbTEOSJ1PPlD0VJsZ5_19DexgmXWbGiuQRaJPH0gkE"},
{"content":{"body":"pokute Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pokute:matrix.org\">pokute</a> Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77","msgtype":"m.text"},"ts":1636027354726,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$IstmL8_FApglpFRlqq7g2y4wGDMs2mFzRDqttLOLA6Y"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> pokute Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77\n\nOh, I didn't know about that. Thank you!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$IstmL8_FApglpFRlqq7g2y4wGDMs2mFzRDqttLOLA6Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@pokute:matrix.org\">pokute</a> Justin Ridgewell has been doing an awesome job reporting the conclusion of each important topic at https://github.com/babel/proposals/issues/77</blockquote></mx-reply>Oh, I didn't know about that. Thank you!","m.relates_to":{"m.in_reply_to":{"event_id":"$IstmL8_FApglpFRlqq7g2y4wGDMs2mFzRDqttLOLA6Y"}},"msgtype":"m.text"},"ts":1636027457867,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$gt2LoQUO5twRWPkfGHBYZhus_Cvb16mFZoW0Gjo9xYQ"},
{"content":{"body":"Note that it should not be considered an \"official source\" (only the notes are official), but it's a good approximation","msgtype":"m.text"},"ts":1636027502813,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JvmyXSWosB3QJu3J1APbgm4_SVhqhg1zflaiSB8Xozk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:\n> ```\n> let obj = { x: 1 };\n> let ref = new WeakRef(obj);\n> await null; // I think we need to wait to allow WeakRefs to be emptied\n> console.log(ref.deref(), obj.x);\n> ```\n> \n> which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.\n> \n> However, an _hypothetical WeakRef-oblivious execution_ (as defined in \"9.10.2 - Liveness\") might be `obj === obj`, which observes the identity of `obj` and thus makes it \"live\" and non-collectable, so `ref.deref()` must return `obj`.\n\nit's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br /><p>Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:</p>\n<pre><code>let obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n</code></pre>\n<p>which I though might log <code>undefined, 1</code> because it doesn't observe the <em>identity</em> of <code>obj</code>.</p>\n<p>However, an <em>hypothetical WeakRef-oblivious execution</em> (as defined in &quot;9.10.2 - Liveness&quot;) might be <code>obj === obj</code>, which observes the identity of <code>obj</code> and thus makes it &quot;live&quot; and non-collectable, so <code>ref.deref()</code> must return <code>obj</code>.</p>\n</blockquote></mx-reply>it's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"","m.relates_to":{"m.in_reply_to":{"event_id":"$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo"}},"msgtype":"m.text"},"ts":1636033388544,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4SdKJAPH_y0k8WkU9uykqeUC0SSv4QOe3woZSO2Blxk"},
{"content":{"body":"your example is correct afaict, assuming the engine optimized that","msgtype":"m.text"},"ts":1636033435791,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$yhQxLSNOCPXAltbxRLyEi3bzWTqLNa9SRrcPJ-YSE_Y"},
{"content":{"body":"Ok thanks 👍","msgtype":"m.text"},"ts":1636033496346,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$utVyF3DgZBvGjpxZch0QAgTjnIJmxXMPjXThuBJCuos"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:\n> ```\n> let obj = { x: 1 };\n> let ref = new WeakRef(obj);\n> await null; // I think we need to wait to allow WeakRefs to be emptied\n> console.log(ref.deref(), obj.x);\n> ```\n> \n> which I though might log `undefined, 1` because it doesn't observe the _identity_ of `obj`.\n> \n> However, an _hypothetical WeakRef-oblivious execution_ (as defined in \"9.10.2 - Liveness\") might be `obj === obj`, which observes the identity of `obj` and thus makes it \"live\" and non-collectable, so `ref.deref()` must return `obj`.\n\nFYI, the releasing of kept objects is a host defined operation, so it may not happen at a promise job boundary. In particular, AFAIK most engines only clear kept objects when the promise queue is drained.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>Can anyone give me an example of an observable effect of what is explained in the second pagraph of the first note of https://tc39.es/ecma262/#sec-weakref-execution? I initially came up with this:</p>\n<pre><code>let obj = { x: 1 };\nlet ref = new WeakRef(obj);\nawait null; // I think we need to wait to allow WeakRefs to be emptied\nconsole.log(ref.deref(), obj.x);\n</code></pre>\n<p>which I though might log <code>undefined, 1</code> because it doesn't observe the <em>identity</em> of <code>obj</code>.</p>\n<p>However, an <em>hypothetical WeakRef-oblivious execution</em> (as defined in \"9.10.2 - Liveness\") might be <code>obj === obj</code>, which observes the identity of <code>obj</code> and thus makes it \"live\" and non-collectable, so <code>ref.deref()</code> must return <code>obj</code>.</p>\n</blockquote></mx-reply>FYI, the releasing of kept objects is a host defined operation, so it may not happen at a promise job boundary. In particular, AFAIK most engines only clear kept objects when the promise queue is drained.","m.relates_to":{"m.in_reply_to":{"event_id":"$h4laW1Y4_RQ1NWSZ5bVIXfB10gEpXn-t-6doWWAOHYo"}},"msgtype":"m.text"},"ts":1636047411941,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7pN2kCCRBqoN6NsGAVqXqXMvHW3ZvfKMyFKfwmTTums"},
{"content":{"body":"> <@devsnek:matrix.org> it's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"\n\nCorrect. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142\nI don't know how @syg came up with it, but it was very clever!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4SdKJAPH_y0k8WkU9uykqeUC0SSv4QOe3woZSO2Blxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>it's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"</blockquote></mx-reply>Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142<br>I don't know how @syg came up with it, but it was very clever!","m.relates_to":{"m.in_reply_to":{"event_id":"$4SdKJAPH_y0k8WkU9uykqeUC0SSv4QOe3woZSO2Blxk"}},"msgtype":"m.text"},"ts":1636047701154,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dLVLUMZbONkuaY9bJ6M-1D_h2szp9TaVWx9iMX2yX0g"},
{"content":{"body":"> <@devsnek:matrix.org> it's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"\n\n * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142\nI don't know how @shu came up with it, but it was very clever!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4SdKJAPH_y0k8WkU9uykqeUC0SSv4QOe3woZSO2Blxk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>it's saying \"if your code could be evaluated with defef() always returning null and still observe the identity of the object, the object is live\"</blockquote></mx-reply> * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142<br>I don't know how @shu came up with it, but it was very clever!","m.new_content":{"body":"Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142\nI don't know how @shu came up with it, but it was very clever!","format":"org.matrix.custom.html","formatted_body":"Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142<br>I don't know how @shu came up with it, but it was very clever!","msgtype":"m.text"},"m.relates_to":{"event_id":"$dLVLUMZbONkuaY9bJ6M-1D_h2szp9TaVWx9iMX2yX0g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636047914450,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h62TEiaOokkhkXVrOOxyx3UahklgMADXtt8YdJ96ZBg"},
{"content":{"body":" * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142\nI don't know how shu  came up with it, but it was very clever!","format":"org.matrix.custom.html","formatted_body":" * Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142<br>I don't know how <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>  came up with it, but it was very clever!","m.new_content":{"body":"Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142\nI don't know how shu  came up with it, but it was very clever!","format":"org.matrix.custom.html","formatted_body":"Correct. Here is the PR that introduced the weak-ref oblivious execution: https://github.com/tc39/proposal-weakrefs/pull/142<br>I don't know how <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>  came up with it, but it was very clever!","msgtype":"m.text"},"m.relates_to":{"event_id":"$dLVLUMZbONkuaY9bJ6M-1D_h2szp9TaVWx9iMX2yX0g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1636047926602,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zRwJhI9xu9RROYgugjbOzwYOU3i9yDDZ6PbfKHIz780"},
{"content":{"body":"yeah everything in the spec here is sort of \"outer limits\" on what engines must do. in practice they are not perfect at removing dead objects and cannot run gc immediately every time the job queue is empty, etc.","msgtype":"m.text"},"ts":1636047981717,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$7HUoPRV1aPigForO1Gim5XoSOFJ8bkFiCIeqSMRKAiY"},
{"content":{"body":"Thanks everyone!","msgtype":"m.text"},"ts":1636048147063,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DQ3Fc2Up1BWRFQWGhgbkWty5M1xbfEL-uvjh8GmAw_0"},
{"content":{"body":"yeah, the spec only says when it is allowed to empty a WeakRef, so that you can reason about WeakRefs which _must not_ be emptied according to the spec","format":"org.matrix.custom.html","formatted_body":"yeah, the spec only says when it is allowed to empty a WeakRef, so that you can reason about WeakRefs which <em>must not</em> be emptied according to the spec","msgtype":"m.text"},"ts":1636048826965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LOUZzRCqkGa_KrwTIPchSntqlxsF7RFwPvpEkVILrx4"},
{"content":{"body":"conversely, an implementation that never empties WeakRefs, or never GCs at all, is always compliant","msgtype":"m.text"},"ts":1636048841696,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a5IUAWhjcPRtoEZJ1K_LkVlRBiU1-SUY59yAFertQDk"},
{"content":{"body":"not that anyone really does that","msgtype":"m.text"},"ts":1636048844270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZaKaB1jVz9LbsGjdBDRplEgt55zoTWxDW7sRp0m8lI8"},
{"content":{"body":"IOW you cannot write interoperable tests that test for \"this WeakRef must be empty now\", only \"this WeakRef must not be empty now\"","msgtype":"m.text"},"ts":1636048895709,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-mXXEXNDd7Pm_1gjnoIoqjcc-JLZ-Rn0p4LEwD6Q0s8"},
{"content":{"body":"you _can_ write tests that test implications, though, like \"if this WeakRef is now empty, then these other properties must hold\"","format":"org.matrix.custom.html","formatted_body":"you <em>can</em> write tests that test implications, though, like &quot;if this WeakRef is now empty, then these other properties must hold&quot;","msgtype":"m.text"},"ts":1636049041652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VtXy7MBVKWA0yEgdYfvpRqAbt_Em5pPGBUrMqmHzY-I"},
{"content":{"body":"test262 have tests of that shape","msgtype":"m.text"},"ts":1636049045689,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tvZgfEKyQSEshTpTVzDbeQEPMQYI3BPYG5BXqDXQKv8"},
{"content":{"body":"shu now you need to write a turbofan pass that inlines `obj.x`","format":"org.matrix.custom.html","formatted_body":"shu now you need to write a turbofan pass that inlines <code>obj.x</code>","msgtype":"m.text"},"ts":1636049053447,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$MffQWLZn_v9d5gu96wzUJuYrG2jLLliUsbD1bZi2OTs"},
{"content":{"body":"> <@shuyuguo:matrix.org> test262 have tests of that shape\n\nThey're actually broken, I have on my todo to fix them","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$tvZgfEKyQSEshTpTVzDbeQEPMQYI3BPYG5BXqDXQKv8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>test262 have tests of that shape</blockquote></mx-reply>They're actually broken, I have on my todo to fix them","m.relates_to":{"m.in_reply_to":{"event_id":"$tvZgfEKyQSEshTpTVzDbeQEPMQYI3BPYG5BXqDXQKv8"}},"msgtype":"m.text"},"ts":1636049072678,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$L6Q8kbVpISm6zLZA6ClMG_aV_RzRO8XXk51PJ_3FCYo"},
{"content":{"body":"oh yeah?","msgtype":"m.text"},"ts":1636049080370,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gSH5JzVplHBMJz9Tjsl0ILQy1YS6HppCvNyBpYHwaqg"},
{"content":{"body":"The hooks and most tests still use `cleanupSome`.","format":"org.matrix.custom.html","formatted_body":"The hooks and most tests still use <code>cleanupSome</code>.","msgtype":"m.text"},"ts":1636049170402,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$u6EAHMzkLolAuZJmLDYwH4LvIrcrfBEcWfb0jzCEWbM"},
{"content":{"body":"oh lol","msgtype":"m.text"},"ts":1636049177825,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QiBtlU43yxJkGzneElBquoYni6tkwEE93FoYNQ_k_ro"},
{"content":{"body":"i miss cleanupSome ","msgtype":"m.text"},"ts":1636049185909,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$_am-P8oVbDLlSCAR_RhOAUVMA_JmOSeo2J5cMFbasds"},
{"content":{"body":"I rewrote the hooks locally already, I need to fix all the tests","msgtype":"m.text"},"ts":1636049191161,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3uRrOI9Y4K45LOY2ODPH7mSdYsWSuuveTEAJi_qpclE"},
{"content":{"body":"excellent, than kyou","msgtype":"m.text"},"ts":1636049203336,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F_SKk69vHfVGZetvsfHGkQy3m-2wbI0g7A1SFl1bqoQ"},
{"content":{"body":"is cleanupSome just waiting on the champions at this point","msgtype":"m.text"},"ts":1636049253201,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$eIjCdNgpBDBo6ZL3f2HYWU-iWtztBVgfTNtXGFOgqAY"},
{"content":{"body":"Would be neat to have a flag to the test262 execution that says \"this implementation supports GC and has all host hooks implemented, so these tests must collect as expected\"","msgtype":"m.text"},"ts":1636049320421,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aoYq-vg3uQ7aleYXWvnXAkHCz2VOqoygPCfZGLefEdk"},
{"content":{"body":"devsnek: more than that was my understanding; Apple already rejected the wasm use case as compelling enough to add cleanupSome, and i don't know that a more compelling argument has been presented","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: more than that was my understanding; Apple already rejected the wasm use case as compelling enough to add cleanupSome, and i don't know that a more compelling argument has been presented","msgtype":"m.text"},"ts":1636049378068,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hAu1IXAXsO6_Qd4wSUUbtuJ8qLaBL6bHAw2MwxwBeac"},
{"content":{"body":"are you saying people provide no-op hooks? :O","msgtype":"m.text"},"ts":1636049379952,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$-4tOklgfuLOJYxq1Mwc5GQjaujw4A6NMPc16y54LmDc"}
]