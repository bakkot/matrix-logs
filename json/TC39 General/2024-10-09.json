[
{"content":{"body":"> <@sirisian:matrix.org> This is probably obvious, but in the decorator proposal if I have ```class A { @f a = 1; }``` it's not possible to access the initial value 1 without creating an instance? Is that more a reflection feature for later? Was mulling over how to turn a class with annotations into a JSON object (including their initial/default values) without creating an instance. I'm reminded of a Java project I saw before that extracted defaults to then create JSON structures that were fed to a UI. I could do class ```A { @f(1) a = 1; }```. addInitializer runs for the instance. Something like an addDefinitionInitializer would maybe be what I'd expect or is that too complex if it's like a function call?\n\nThe thing is, the initializer can refer to this, which (for a subclass) can be based on things like constructor params. So I think passing an argument to the constructor is the way to go.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ABsjPu72ykaarUSxSEi0CQYQfbY4yoE_E04lwnmjnE4\">In reply to</a> <a href=\"https://matrix.to/#/@sirisian:matrix.org\">@sirisian:matrix.org</a><br>This is probably obvious, but in the decorator proposal if I have <code>class A { @f a = 1; }</code> it's not possible to access the initial value 1 without creating an instance? Is that more a reflection feature for later? Was mulling over how to turn a class with annotations into a JSON object (including their initial/default values) without creating an instance. I'm reminded of a Java project I saw before that extracted defaults to then create JSON structures that were fed to a UI. I could do class <code>A { @f(1) a = 1; }</code>. addInitializer runs for the instance. Something like an addDefinitionInitializer would maybe be what I'd expect or is that too complex if it's like a function call?</blockquote></mx-reply>The thing is, the initializer can refer to this, which (for a subclass) can be based on things like constructor params. So I think passing an argument to the constructor is the way to go.","m.relates_to":{"m.in_reply_to":{"event_id":"$ABsjPu72ykaarUSxSEi0CQYQfbY4yoE_E04lwnmjnE4"}},"msgtype":"m.text"},"ts":1728435960798,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bnlkMNDH1G1I1N8DphMwLyu7D_FwuO-OfD46W3UURcY"},
{"content":{"body":"That is a really solid point. I was too focused on constants. Forgot you can use just do b = this.a * 2; and other things.","m.mentions":{},"msgtype":"m.text"},"ts":1728437043785,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$XSK64hu9-NnnHEzQLq3bEg9r2FEqpaGargl3BFTPhT0"}
]