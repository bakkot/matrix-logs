[
{"content":{"body":"Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":"<p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1696369850455,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU"},
{"content":{"body":" * Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\nconst u8 = new Uint8Array(combined);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":" * <p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);<br>const u8 = new Uint8Array(combined);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{},"m.new_content":{"body":"Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\nconst u8 = new Uint8Array(combined);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":"<p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);<br>const u8 = new Uint8Array(combined);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696369889799,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$yiTxL6pTIQOVbAhPh8ccWUiQGPZmBczS7S4X-dF3xlQ"},
{"content":{"body":"cc shu ^ as the arraybuffer guy","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> ^ as the arraybuffer guy","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1696370090704,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dgagYI0f2G8eiCD4YprOjS3WXX3fuss_jmUXDiNyiEc"}
]