[
{"content":{"body":"Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":"<p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1696369850455,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU"},
{"content":{"body":" * Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\nconst u8 = new Uint8Array(combined);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":" * <p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);<br>const u8 = new Uint8Array(combined);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{},"m.new_content":{"body":"Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n\nFor a quick example:\n\nconst ab1 = new ArrayBuffer(10);\nconst ab2 = new ArrayBuffer(20);\nconst combined = ArrayBuffer.of(ab1, ab2);\nconst u8 = new Uint8Array(combined);\n\nHere, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n\nThe idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n\nThere is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.","format":"org.matrix.custom.html","formatted_body":"<p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br>const ab2 = new ArrayBuffer(20);<br>const combined = ArrayBuffer.of(ab1, ab2);<br>const u8 = new Uint8Array(combined);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696369889799,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$yiTxL6pTIQOVbAhPh8ccWUiQGPZmBczS7S4X-dF3xlQ"},
{"content":{"body":"cc shu ^ as the arraybuffer guy","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> ^ as the arraybuffer guy","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1696370090704,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dgagYI0f2G8eiCD4YprOjS3WXX3fuss_jmUXDiNyiEc"},
{"content":{"body":"I know very little about engine internals, but from my own limited perspective, I can say that this seems useful but the cost of making ArrayBuffer fundamentals more complex is usually quite high, so it may not be worth it. It would mean a branch in every access of every TA, or a fair bit of optimization work to avoid that branch.","m.mentions":{},"msgtype":"m.text"},"ts":1696370235874,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jUfOSA8CUzgVXlVPI6pmXYsf0tUwA3pSzbUK97sreB0"},
{"content":{"body":"Indeed, I do not imagine and won't pretend that the implementation would be trivial. Just the fact, for instance, that v8's internal implementation of `v8::ArrayBuffer` is backed by a single `v8::BackingStore` that is expected to be a single contiguous block of memory presents a challenge. However, I think there's enough potential benefit here that it should warrant at least some consideration and if the ultimate answer is it's not worth it, then so be it :-)","format":"org.matrix.custom.html","formatted_body":"Indeed, I do not imagine and won't pretend that the implementation would be trivial. Just the fact, for instance, that v8's internal implementation of <code>v8::ArrayBuffer</code> is backed by a single <code>v8::BackingStore</code> that is expected to be a single contiguous block of memory presents a challenge. However, I think there's enough potential benefit here that it should warrant at least some consideration and if the ultimate answer is it's not worth it, then so be it :-)","m.mentions":{},"msgtype":"m.text"},"ts":1696370426204,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$sToPdBOcUJ6OAI8mjpqxNXE3bpBtirT3DDX65yA1zT4"},
{"content":{"body":"Also, nit, I am not totally clear on what the utility of `subarray` is supposed to be","format":"org.matrix.custom.html","formatted_body":"Also, nit, I am not totally clear on what the utility of <code>subarray</code> is supposed to be","m.mentions":{},"msgtype":"m.text"},"ts":1696370448427,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H3-f5L8nTY0l5RoS7tLDOZ-XPz2yDau_hWqGXOQBvQ4"},
{"content":{"body":"you can't work with ArrayBuffers directly anyway; you have to use a TA. and TAs are already potentially partial views of an underlying buffer","m.mentions":{},"msgtype":"m.text"},"ts":1696370470713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tha0wDirM8bK1nCOoycUcB12oXPbT1eiTwmgnESYyjo"},
{"content":{"body":"Suppose I have two `Uint8Arrays` and I want to concat those with zero-copy, taking the byteOffset and byteLength properly into account. subarray would allow for... `new Uint8Array(ArrayBuffer.of(u8a.buffer.subarray(u8a.byteOffset, u8a.byteLength), u8b.buffer.subarray(u8b.byteOffset, u8a.byteLength)))`","format":"org.matrix.custom.html","formatted_body":"Suppose I have two <code>Uint8Arrays</code> and I want to concat those with zero-copy, taking the byteOffset and byteLength properly into account. subarray would allow for... <code>new Uint8Array(ArrayBuffer.of(u8a.buffer.subarray(u8a.byteOffset, u8a.byteLength), u8b.buffer.subarray(u8b.byteOffset, u8a.byteLength)))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1696370822517,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$oC0tF1qRwlRavW7QvKHHpjwRlnQ8WDs3139FvkwfQbo"},
{"content":{"body":"Using the existing `ArrayBuffer.prototype.slice(...)` here instead would copy","format":"org.matrix.custom.html","formatted_body":"Using the existing <code>ArrayBuffer.prototype.slice(...)</code> here instead would copy","m.mentions":{},"msgtype":"m.text"},"ts":1696370869186,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Uj91N63cXyJ8ZiinqE1o4UWiXUUUUqwTST3Yi6uE7YM"},
{"content":{"body":"Ah, makes sense","m.mentions":{},"msgtype":"m.text"},"ts":1696370888156,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PAKVdHFzZ1OSNMxy-nZa1uu6qBIlz_aBu945vNQb_Ds"},
{"content":{"body":"Does mean the underlying implementation would need to get even more complicated, but I guess the additional delta isn't that large","m.mentions":{},"msgtype":"m.text"},"ts":1696370964176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UbiTDTYtO-Qtd_SoW2UtqmjN7uYqMSQwWuo1rj-MSAg"}
]