[
{"content":{"body":"Does anyone have any background on why `Math` got so many functions like `abs` that might have gotten put in `Number`? Having trouble finding in the meeting notes; I think this might predate them. ","format":"org.matrix.custom.html","formatted_body":"Does anyone have any background on why <code>Math</code> got so many functions like <code>abs</code> that might have gotten put in <code>Number</code>? Having trouble finding in the meeting notes; I think this might predate them.","msgtype":"m.text"},"ts":1630492775977,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XHNsxj3Zytt9KGjw_fyccS_gjzq0_4_Ht0KxbC-4hes"},
{"content":{"body":"The Math object goes back to ES1","msgtype":"m.text"},"ts":1630495995594,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$eY5oNf99Li0SCjDy_znX5Y9bBLvGaRkdmLiGubdF0j8"},
{"content":{"body":"> <@jmdyck:matrix.org> The Math object goes back to ES1\n\nRight, and as far as I can tell, post-ES1 mathematical functions were subsequently added to Math rather than Number simply to be consistent with that status quo. Is that correct?\n\nFor example, in the notes, I see some old talk of making clz32 an instance method on Number.prototype, and later it got switched to a “static” method, presumably to avoid boxing primitive numbers. But I can’t really find any explicit reasoning why Math was chosen as its home instead of Number.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$eY5oNf99Li0SCjDy_znX5Y9bBLvGaRkdmLiGubdF0j8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jmdyck:matrix.org\">@jmdyck:matrix.org</a><br>The Math object goes back to ES1</blockquote></mx-reply><p>Right, and as far as I can tell, post-ES1 mathematical functions were subsequently added to Math rather than Number simply to be consistent with that status quo. Is that correct?</p>\n<p>For example, in the notes, I see some old talk of making clz32 an instance method on Number.prototype, and later it got switched to a “static” method, presumably to avoid boxing primitive numbers. But I can’t really find any explicit reasoning why Math was chosen as its home instead of Number.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$eY5oNf99Li0SCjDy_znX5Y9bBLvGaRkdmLiGubdF0j8"}},"msgtype":"m.text"},"ts":1630498617309,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EogF4zC0j8LTC0-Wmxb9GY0CbxdlMIVegHZof7X8yK8"},
{"content":{"body":"Looks like Number.{isInteger,isSafeInterger} and Math.{sign,trunc,log10,hypot} were added in ES6","msgtype":"m.text"},"ts":1630498802133,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wRHFM0vzFuZmDR_9t0X6dZV908q9zK_L6VkabwdG3gw"},
{"content":{"body":"* Looks like Number.{isInteger,isSafeInteger} and Math.{sign,trunc,log10,hypot} were added in ES6","m.new_content":{"body":"Looks like Number.{isInteger,isSafeInteger} and Math.{sign,trunc,log10,hypot} were added in ES6","msgtype":"m.text"},"m.relates_to":{"event_id":"$wRHFM0vzFuZmDR_9t0X6dZV908q9zK_L6VkabwdG3gw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630498822420,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gY7k3uaaFGKdR4zIiVpChIXLt9OjqymYYa15eeb2JG0"},
{"content":{"body":"Those homes seem logical, at least to me.","msgtype":"m.text"},"ts":1630498867387,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZvpR4d5ZerXoPoHq6IRKbeFAD3hX-boVpAsUkJ0kKkk"},
{"content":{"body":"> <@aclaymore:matrix.org> Those homes seem logical, at least to me.\n\nYeah. An issue I’m going to raise during my BigInt Math presentation is that of `max` (and `min` and `hypot`). The issue is that if we simply extend `Math.max` to accept BigInts, then `Math.max(…arrOfBigInts)` would unexpectedly return `+Infinity` whenever `arrOfBigInts` happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value. \n\nThe choices I see are to either add a separate `Math.bigMax` function (and `bigMin` and `bigHypot`)…or add a `BigInt.max` method (in which case…why don’t we have `Number.max`—and then what about the other `Math` functions, do they get copied to `Number` and `BigInt` too?). So that’s why I’m wondering about the original “philosophy” behind `Number` versus `Math`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ZvpR4d5ZerXoPoHq6IRKbeFAD3hX-boVpAsUkJ0kKkk\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Those homes seem logical, at least to me.</blockquote></mx-reply><p>Yeah. An issue I’m going to raise during my BigInt Math presentation is that of <code>max</code> (and <code>min</code> and <code>hypot</code>). The issue is that if we simply extend <code>Math.max</code> to accept BigInts, then <code>Math.max(…arrOfBigInts)</code> would unexpectedly return <code>+Infinity</code> whenever <code>arrOfBigInts</code> happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value.</p>\n<p>The choices I see are to either add a separate <code>Math.bigMax</code> function (and <code>bigMin</code> and <code>bigHypot</code>)…or add a <code>BigInt.max</code> method (in which case…why don’t we have <code>Number.max</code>—and then what about the other <code>Math</code> functions, do they get copied to <code>Number</code> and <code>BigInt</code> too?). So that’s why I’m wondering about the original “philosophy” behind <code>Number</code> versus <code>Math</code>.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$ZvpR4d5ZerXoPoHq6IRKbeFAD3hX-boVpAsUkJ0kKkk"}},"msgtype":"m.text"},"ts":1630500851731,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$E_KwsIhWfVrW5i35qMb5APixlk3m40A2OIZrAKbC2v8"},
{"content":{"body":"All the other `Math` methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","format":"org.matrix.custom.html","formatted_body":"All the other <code>Math</code> methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","msgtype":"m.text"},"ts":1630500910974,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$O-Vkv0kCO03YFkZbEq-lIm2RygBv2-zzk5pPxiaWYds"},
{"content":{"body":"* > <@aclaymore:matrix.org> Those homes seem logical, at least to me.\n\nYeah. An issue I’m going to raise during my BigInt Math presentation is that of `max` (and `min` and `hypot`). The issue is that if we simply extend `Math.max` to accept BigInts, then `Math.max(…arrOfBigInts)` would unexpectedly return `+Infinity` whenever `arrOfBigInts` happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value. \n\nThe choices I see are to either add a separate `Math.bigMax` function (and `bigMin` and `bigHypot`)…or add a `BigInt.max` method (in which case…why don’t we have `Number.max`—and then what about the other `Math` functions, do they get copied to `Number` and `BigInt` too?).","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ZvpR4d5ZerXoPoHq6IRKbeFAD3hX-boVpAsUkJ0kKkk\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Those homes seem logical, at least to me.</blockquote></mx-reply><p>Yeah. An issue I’m going to raise during my BigInt Math presentation is that of <code>max</code> (and <code>min</code> and <code>hypot</code>). The issue is that if we simply extend <code>Math.max</code> to accept BigInts, then <code>Math.max(…arrOfBigInts)</code> would unexpectedly return <code>+Infinity</code> whenever <code>arrOfBigInts</code> happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value.</p>\n<p>The choices I see are to either add a separate <code>Math.bigMax</code> function (and <code>bigMin</code> and <code>bigHypot</code>)…or add a <code>BigInt.max</code> method (in which case…why don’t we have <code>Number.max</code>—and then what about the other <code>Math</code> functions, do they get copied to <code>Number</code> and <code>BigInt</code> too?).</p>","m.new_content":{"body":"> <@aclaymore:matrix.org> Those homes seem logical, at least to me.\n\nYeah. An issue I’m going to raise during my BigInt Math presentation is that of `max` (and `min` and `hypot`). The issue is that if we simply extend `Math.max` to accept BigInts, then `Math.max(…arrOfBigInts)` would unexpectedly return `+Infinity` whenever `arrOfBigInts` happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value. \n\nThe choices I see are to either add a separate `Math.bigMax` function (and `bigMin` and `bigHypot`)…or add a `BigInt.max` method (in which case…why don’t we have `Number.max`—and then what about the other `Math` functions, do they get copied to `Number` and `BigInt` too?).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ZvpR4d5ZerXoPoHq6IRKbeFAD3hX-boVpAsUkJ0kKkk\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Those homes seem logical, at least to me.</blockquote></mx-reply><p>Yeah. An issue I’m going to raise during my BigInt Math presentation is that of <code>max</code> (and <code>min</code> and <code>hypot</code>). The issue is that if we simply extend <code>Math.max</code> to accept BigInts, then <code>Math.max(…arrOfBigInts)</code> would unexpectedly return <code>+Infinity</code> whenever <code>arrOfBigInts</code> happens to be empty—this would basically be an unexpected implicit type conversion from an array of BigInts to a Number value.</p>\n<p>The choices I see are to either add a separate <code>Math.bigMax</code> function (and <code>bigMin</code> and <code>bigHypot</code>)…or add a <code>BigInt.max</code> method (in which case…why don’t we have <code>Number.max</code>—and then what about the other <code>Math</code> functions, do they get copied to <code>Number</code> and <code>BigInt</code> too?).</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$E_KwsIhWfVrW5i35qMb5APixlk3m40A2OIZrAKbC2v8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630501964277,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$E6OSneFzGM7_CwSjbTK1PsRlYQ0Iez8k79otF6fq7kY"},
{"content":{"body":"* So that’s why I’m wondering about the original “philosophy” behind `Number` versus `Math`. All the other `Math` methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","format":"org.matrix.custom.html","formatted_body":"* So that’s why I’m wondering about the original “philosophy” behind <code>Number</code> versus <code>Math</code>. All the other <code>Math</code> methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","m.new_content":{"body":"So that’s why I’m wondering about the original “philosophy” behind `Number` versus `Math`. All the other `Math` methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","format":"org.matrix.custom.html","formatted_body":"So that’s why I’m wondering about the original “philosophy” behind <code>Number</code> versus <code>Math</code>. All the other <code>Math</code> methods can be extended for BigInts with no conversion problems. It’s just those three variadic functions…","msgtype":"m.text"},"m.relates_to":{"event_id":"$O-Vkv0kCO03YFkZbEq-lIm2RygBv2-zzk5pPxiaWYds","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630501973061,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$k8JPnQSEigapYWyuRi13BuyQf0izx7erW5VMArIn2tY"},
{"content":{"body":"Note that max and min weren't variadic originally, so even if they'd anticipated other numeric types, there wouldn't have been that reason to put them in Number. ","msgtype":"m.text"},"ts":1630502082623,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$GRucNOVCb6g3VcKMX7hq2Q4foIDG2fzq7Pr4he3Ji7o"},
{"content":{"body":"Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate `Math` and `Number` functions in the first place. The original philosophy. Perhaps that would help inform this decision. ","format":"org.matrix.custom.html","formatted_body":"Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate <code>Math</code> and <code>Number</code> functions in the first place. The original philosophy. Perhaps that would help inform this decision.","msgtype":"m.text"},"ts":1630502276630,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DCjbNznKKTT9dW28XFyiOawcfvJgLS4jZgOuR2QzkNM"},
{"content":{"body":"* Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate `Math` and `Number` functions in the first place. The original philosophy behind ES1 `Math.abs` rather than `Number.abs`. Perhaps that would help inform this decision. ","format":"org.matrix.custom.html","formatted_body":"* Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate <code>Math</code> and <code>Number</code> functions in the first place. The original philosophy behind ES1 <code>Math.abs</code> rather than <code>Number.abs</code>. Perhaps that would help inform this decision.","m.new_content":{"body":"Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate `Math` and `Number` functions in the first place. The original philosophy behind ES1 `Math.abs` rather than `Number.abs`. Perhaps that would help inform this decision. ","format":"org.matrix.custom.html","formatted_body":"Yeah—I suppose I’m wondering if anyone knows the reasoning behind the original decision to separate <code>Math</code> and <code>Number</code> functions in the first place. The original philosophy behind ES1 <code>Math.abs</code> rather than <code>Number.abs</code>. Perhaps that would help inform this decision.","msgtype":"m.text"},"m.relates_to":{"event_id":"$DCjbNznKKTT9dW28XFyiOawcfvJgLS4jZgOuR2QzkNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630502312196,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Q9qRq-GiDb4EnttG0OubArz4OC9orbP1Uyab0m6Yeqg"},
{"content":{"body":"Totally uninformed guess: Brendan was used to C's `#include <math.h>` as the way to get access to functions like max()/abs()/etc. So he carried that over to JS as using the Math namespace object to get access to functions like max()/abs()/etc.","format":"org.matrix.custom.html","formatted_body":"Totally uninformed guess: Brendan was used to C's <code>#include &lt;math.h&gt;</code> as the way to get access to functions like max()/abs()/etc. So he carried that over to JS as using the Math namespace object to get access to functions like max()/abs()/etc.","msgtype":"m.text"},"ts":1630503776466,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$ig5_4sU_eF1JPf6LekEWvq4jcZWrNyKEh790iXTe4nM"},
{"content":{"body":"> <@domenicdenicola:matrix.org> Totally uninformed guess: Brendan was used to C's `#include <math.h>` as the way to get access to functions like max()/abs()/etc. So he carried that over to JS as using the Math namespace object to get access to functions like max()/abs()/etc.\n\n\nalternative guess: it's on the Math class because they were trying to script java\n\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Math.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ig5_4sU_eF1JPf6LekEWvq4jcZWrNyKEh790iXTe4nM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br>Totally uninformed guess: Brendan was used to C's <code>#include &lt;math.h&gt;</code> as the way to get access to functions like max()/abs()/etc. So he carried that over to JS as using the Math namespace object to get access to functions like max()/abs()/etc.</blockquote></mx-reply><p>alternative guess: it's on the Math class because they were trying to script java</p>\n<p>https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$ig5_4sU_eF1JPf6LekEWvq4jcZWrNyKEh790iXTe4nM"}},"msgtype":"m.text"},"ts":1630508705975,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$NCzMhOl-8hSgOYSpKEF2hkLxc28ChRCO2LjmHrQDtfM"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> alternative guess: it's on the Math class because they were trying to script java\n> \n> https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html\n\nhttps://twitter.com/BrendanEich/status/1263386663679438850","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$NCzMhOl-8hSgOYSpKEF2hkLxc28ChRCO2LjmHrQDtfM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br><p>alternative guess: it's on the Math class because they were trying to script java</p>\n<p>https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html</p>\n</blockquote></mx-reply>https://twitter.com/BrendanEich/status/1263386663679438850","m.relates_to":{"m.in_reply_to":{"event_id":"$NCzMhOl-8hSgOYSpKEF2hkLxc28ChRCO2LjmHrQDtfM"}},"msgtype":"m.text"},"ts":1630508796431,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$8Qf4uvS28p9XGLaRNnpgcfJaDdNiAvp-Fy7_CZ7tI9E"},
{"content":{"body":"That makes more sense","msgtype":"m.text"},"ts":1630509181356,"senderName":"Domenic","senderId":"@domenicdenicola:matrix.org","id":"$cZmPEQDBPJXf1sLPXWVKbgrbMf8KXJWQ1cpehQSo5ow"},
{"content":{"body":"\n\nhttps://twitter.com/benawad/status/1263183829235269634?s=20\n\nI wonder if a precision argument for `Math.round` might be worth pursuing………","format":"org.matrix.custom.html","formatted_body":"<p>https://twitter.com/benawad/status/1263183829235269634?s=20</p>\n<p>I wonder if a precision argument for <code>Math.round</code> might be worth pursuing………</p>\n","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$8Qf4uvS28p9XGLaRNnpgcfJaDdNiAvp-Fy7_CZ7tI9E"}}},"ts":1630511442506,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6VxlFVVhxOhpl4ThK6xXZt_hI5GiK1Fom6B_ruPQfog"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> https://twitter.com/BrendanEich/status/1263386663679438850\n\n * > \nhttps://twitter.com/benawad/status/1263183829235269634?s=20\n\nI wonder if pursuing a precision argument for `Math.round` might be worth pursuing………\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$8Qf4uvS28p9XGLaRNnpgcfJaDdNiAvp-Fy7_CZ7tI9E?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>https://twitter.com/BrendanEich/status/1263386663679438850</blockquote></mx-reply> * <blockquote>\n</blockquote>\n<p>https://twitter.com/benawad/status/1263183829235269634?s=20</p>\n<p>I wonder if pursuing a precision argument for <code>Math.round</code> might be worth pursuing………</p>\n","m.new_content":{"body":"> \nhttps://twitter.com/benawad/status/1263183829235269634?s=20\n\nI wonder if pursuing a precision argument for `Math.round` might be worth pursuing………\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n</blockquote>\n<p>https://twitter.com/benawad/status/1263183829235269634?s=20</p>\n<p>I wonder if pursuing a precision argument for <code>Math.round</code> might be worth pursuing………</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$6VxlFVVhxOhpl4ThK6xXZt_hI5GiK1Fom6B_ruPQfog","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630511446612,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_X986yF0QONNKGndGWnH3lSw-OamadHhckJAqYUxhzw"},
{"content":{"body":"i like proto methods","msgtype":"m.text"},"ts":1630511458817,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$U0fImoeSzRrKu5D-lEhGcOh4y89_UF5UKGapuW01KFo"},
{"content":{"body":" * \n\nhttps://twitter.com/benawad/status/1263183829235269634?s=20\n\nI wonder if a precision argument for `Math.round` might be worth pursuing………","format":"org.matrix.custom.html","formatted_body":" * <p>https://twitter.com/benawad/status/1263183829235269634?s=20</p>\n<p>I wonder if a precision argument for <code>Math.round</code> might be worth pursuing………</p>\n","m.new_content":{"body":"\n\nhttps://twitter.com/benawad/status/1263183829235269634?s=20\n\nI wonder if a precision argument for `Math.round` might be worth pursuing………","format":"org.matrix.custom.html","formatted_body":"<p>https://twitter.com/benawad/status/1263183829235269634?s=20</p>\n<p>I wonder if a precision argument for <code>Math.round</code> might be worth pursuing………</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$6VxlFVVhxOhpl4ThK6xXZt_hI5GiK1Fom6B_ruPQfog","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630511464199,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ptsBmATEcoAFyEUqIIC0IE2H31JUoN4Mm8s3AiyCFKs"},
{"content":{"body":"they also make stuff like \"empty arguments\" not an issue anymore","msgtype":"m.text"},"ts":1630511499613,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$MB4i_MyHYsQYe1e8JRD6mn9AX-bvwst_Byms_ht2JRc"},
{"content":{"body":"how does a proto method make sense for max?","msgtype":"m.text"},"ts":1630511555143,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GcWCOJTLjzjte2yniLvTKgWiv5JXAA-arYJ_xblyEs0"},
{"content":{"body":"`a.max(...others)`","format":"org.matrix.custom.html","formatted_body":"<code>a.max(...others)</code>","msgtype":"m.text"},"ts":1630511567524,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$YJN5BvQsQM3gFcuaNLoxPi6Uz6ap3RmZaPnTEmfZilk"},
{"content":{"body":"if others is empty you return a instead of Infinity","msgtype":"m.text"},"ts":1630511574169,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$rOx0Abmb0DXq_ZfD5bwH-l08WOiUZ3bCJEivXGyz2ks"},
{"content":{"body":"... no","msgtype":"m.text"},"ts":1630511574949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1n_oyiENlQhxlNjnblF-mVa_DzFpVo8ZhHy1CPL3goc"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1630511589100,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$NPucAErdC1p8BC2uw7jHe5XKI7x9MhuphAUESTkhqZ0"},
{"content":{"body":"uhh I guess I will just say that I find that extremely aesthetically distasteful","msgtype":"m.text"},"ts":1630511656457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aZQmxxigPxSaj4GyFjKeUFOjnO2JFMYKS4eEiYNcbt4"},
{"content":{"body":"static methods are nice though","msgtype":"m.text"},"ts":1630511678021,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NK1UxXvr2X5KOsfBs98kbPrzhizaCidenS_0jzWJ1Jc"},
{"content":{"body":"`Number.max(...args)`","format":"org.matrix.custom.html","formatted_body":"<code>Number.max(...args)</code>","msgtype":"m.text"},"ts":1630511686548,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$FCx457NPT8uLKf1Uw0MQT5o9dJ2xB8So9px4h7T31So"},
{"content":{"body":"static methods make you have to care about which item you're dealing with","msgtype":"m.text"},"ts":1630511690675,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$7w28QDrVvgnO64QCC1wQjNu6xhQj9tbgW80quTgxFGg"},
{"content":{"body":" * static methods make you have to care about which type you're dealing with","m.new_content":{"body":"static methods make you have to care about which type you're dealing with","msgtype":"m.text"},"m.relates_to":{"event_id":"$7w28QDrVvgnO64QCC1wQjNu6xhQj9tbgW80quTgxFGg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630511703591,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$bdWMSeY8xc2hwot7XagAOoXl6_DsktgtiTm683KiiaA"},
{"content":{"body":"like how we do Type(x)::foo in the spec","msgtype":"m.text"},"ts":1630511707978,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$hHj3Xw4N-QmI-OiNVhpnGEoLXUnXQdWsCm7W5OtzUro"},
{"content":{"body":"i guess you could do `a.constructor.max(a, b)`","format":"org.matrix.custom.html","formatted_body":"i guess you could do <code>a.constructor.max(a, b)</code>","msgtype":"m.text"},"ts":1630511740094,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$yyzE_YBRT-PgMPINm55n5hSqLOpx7RBoxg1bVLOiAZc"},
{"content":{"body":"oh right","msgtype":"m.text"},"ts":1630511764491,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$CooLocLknW_c19CGdIQHeZzdeG7XM9gN--NKDHKE4rY"},
{"content":{"body":"but I do still like the idea of polymorphic functions that work on mixed lists","msgtype":"m.text"},"ts":1630511784110,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$skJZnBubXeeoR8t4Rzf9orDuzoy93x7qCv3vZEBVM5k"},
{"content":{"body":"so namespaced makes sense for those","msgtype":"m.text"},"ts":1630511792201,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$O4ToPgXT6b5hc6DIW2tzz8CqxiiuucZFvZofbuehY6Q"},
{"content":{"body":"i mean they could still be polymorphic in cases where that makes sense","msgtype":"m.text"},"ts":1630511814664,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$0djH3EdvhgaUzIjSbAdH7ZIQ5h-AnJwQLSOQoGYw8ns"},
{"content":{"body":"proto functions, sure, but for static methods it might not be great to make them polymorphic?","msgtype":"m.text"},"ts":1630511857148,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Zj2LdIBzgIVInSLCEfayz3e8rtsKYZdvPXvrXE64aZI"},
{"content":{"body":"so class fields use define instead of set right","msgtype":"m.text"},"ts":1630534340413,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$J4jM6nnmK-Yb66YUWwiQbAqHO0FEA1z6P37K_5xOdlc"},
{"content":{"body":"so there's no way for the superclass to see that happen","msgtype":"m.text"},"ts":1630534347513,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$89zb7WILeA5v6VoEJXJbmZyrwyvAHygBIVz33cbaaCQ"},
{"content":{"body":"in general superclasses do not see things subclasses do, correct","msgtype":"m.text"},"ts":1630534379150,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Owxi7eeIw_2AsuQ8XKZM0Eozi2otE9_6rXC6Eb7Ixc"},
{"content":{"body":"same goes for methods defined by the subclass","msgtype":"m.text"},"ts":1630534385697,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WvkdFTa16ZPjsSO6p115rBe-4DAh_mr46nd7kFL2bdQ"},
{"content":{"body":"there's a cool python library i want to mimic","msgtype":"m.text"},"ts":1630534392276,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BwtYwXqGdRXMqBGXFvm783wFqe4_xGNHwUMbRaJgCwc"},
{"content":{"body":"where you can do like","msgtype":"m.text"},"ts":1630534395698,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$hgKuwQDfOLgUIPjJQltWjvk0RtmfqO5zJ8TJvELPdgM"},
{"content":{"body":"```py\nclass Foo(lib.Model):\n  field = lib.Int()\n  field = lib.String()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">class Foo(lib.Model):\n  field = lib.Int()\n  field = lib.String()\n</code></pre>\n","msgtype":"m.text"},"ts":1630534413855,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$MvJnw8P_zWb0iH8tK08FakQHFjBaUiOvTwKrIzozh3A"},
{"content":{"body":"and that builds a validator on foo that you can use on incoming requests","msgtype":"m.text"},"ts":1630534424289,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$JC5awxYAsTgyLM0i85uVtK5oqQ0u2UDi4RO0bur_zHo"},
{"content":{"body":"and you can also add methods and stuff to the instance cuz its a normal class","msgtype":"m.text"},"ts":1630534432846,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CHfh5I1SC5AiYJoxE5eqVHWjTkWgpax_WY_Ew7p_Sms"},
{"content":{"body":"but it requires the superclass knowing the fields to build the validator","msgtype":"m.text"},"ts":1630534449411,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$wEFR6kjRNfFEFzrphhGC-Wc5OFdfM0pjbqTP-mORMuA"},
{"content":{"body":"i think in python that's done using metaclasses","msgtype":"m.text"},"ts":1630534466339,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$RcD-53bCB6bEU2zyL1HgbW2dF9PYJ26nMPqtAnbUJTw"},
{"content":{"body":"that seems like a use case for decorators, at a glance","msgtype":"m.text"},"ts":1630534497586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xd06AErp0dmedRzHxY5GKhKQOD7C02oVfYIcVxoSqc8"},
{"content":{"body":"hmmm interesting","msgtype":"m.text"},"ts":1630534508055,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$QXSG_CvXcx9iTMYQKeLPubaZSodb7LlbjHxUiIpwtSs"},
{"content":{"body":"where would the data from the decorators be stored","msgtype":"m.text"},"ts":1630534531984,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$8O3lEYDqUYqOYXkF9KXyxxeu8PqRa8V1Kb7Uu68BYeM"},
{"content":{"body":"wait, maybe I'm not understanding","msgtype":"m.text"},"ts":1630534631715,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iMA4nGRTJZyOrE_-8Uim0f0-xCqcLLGXOlLoR5bwLEo"},
{"content":{"body":"how do you use `Foo` after setting it up like that?","format":"org.matrix.custom.html","formatted_body":"how do you use <code>Foo</code> after setting it up like that?","msgtype":"m.text"},"ts":1630534638631,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EwjjC_e5epRfaLBalfSfBoTdYHrRV2uTvyNlZaTePZs"},
{"content":{"body":"or do you have a link to the library?","msgtype":"m.text"},"ts":1630534642699,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sVNLCE0Gm-LBHBacGS4Uzu1egkWvON8p_L-mDQvFXfg"},
{"content":{"body":"not a public library unfortunately","msgtype":"m.text"},"ts":1630534658871,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$sdYgT4elBEi0wSsGkyl3TwV4xulE3rTfagvSLZnD2vw"},
{"content":{"body":"but you can do `Foo(some raw data)`","format":"org.matrix.custom.html","formatted_body":"but you can do <code>Foo(some raw data)</code>","msgtype":"m.text"},"ts":1630534665557,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$5pZJ4uYNxgB4anWBdDWjTQ-lhnS8jld_4B93jFAZtP0"},
{"content":{"body":"and it will attempt to pull the fields from the raw data and either coerce them into something matching what you specified (Int/String/etc) or throw","msgtype":"m.text"},"ts":1630534689788,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Yds7hQI8krdDEK6rMDmDV746Rj4pBnxb-eS0u21Kilg"},
{"content":{"body":" * ```py\nclass Foo(lib.Model):\n  field1 = lib.Int()\n  field2 = lib.String()\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-py\">class Foo(lib.Model):\n  field1 = lib.Int()\n  field2 = lib.String()\n</code></pre>\n","m.new_content":{"body":"```py\nclass Foo(lib.Model):\n  field1 = lib.Int()\n  field2 = lib.String()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">class Foo(lib.Model):\n  field1 = lib.Int()\n  field2 = lib.String()\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$MvJnw8P_zWb0iH8tK08FakQHFjBaUiOvTwKrIzozh3A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630534721784,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$3oda_v9FRzRB4Xt4Q3RyCZv7mgSrFYNQGqr3obfUhKE"},
{"content":{"body":"its nothing too magical, i'm just trying to imagine how i'd duplicate the sort of declarative schema info pattern in js","msgtype":"m.text"},"ts":1630534769879,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$k-xdfRwaQrGuCKwi_CqcpKkjuRjJXH6W5gAHNotflrk"},
{"content":{"body":"i guess there could be like `Foo._fields` that the decorators populate, and then lib.Model can check for `this._fields` when its being used?","format":"org.matrix.custom.html","formatted_body":"i guess there could be like <code>Foo._fields</code> that the decorators populate, and then lib.Model can check for <code>this._fields</code> when its being used?","msgtype":"m.text"},"ts":1630534886038,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$bj4cOe2jSRkhb_m4r1-a0hDiI5Wea7IQa2aOsWD2YN8"},
{"content":{"body":"or Symbol('lib.Fields') would be more proper i guess :P","msgtype":"m.text"},"ts":1630534899815,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$iQ5HLaUVwoysV8RxCYS7aFNFNhiF6PAtdUZ0HJWG90g"},
{"content":{"body":"the current decorator proposal has a concept of metadata, which I think is intended to be used for that sort of thing?","msgtype":"m.text"},"ts":1630534956847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WUgJtHtmzn-jxd8rAEeFlCMO4Srq0W6rbV2i__dy8M0"},
{"content":{"body":"I haven't been following too closely though","msgtype":"m.text"},"ts":1630534966173,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$11vrppRUfkplE084G-Yei7HIagY2u0f6evaBavhMPik"}
]