[
{"content":{"body":"https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback\n\nShould we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Demo already violate that restriction anyway, by implementing AsyncLocalStorage","format":"org.matrix.custom.html","formatted_body":"<p>https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback</p>\n<p>Should we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Demo already violate that restriction anyway, by implementing AsyncLocalStorage</p>","msgtype":"m.text"},"ts":1721159374340,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Pn2984GE43U9qMfDIgc-R8q8q-eOfC9S0f1WM-sxsBQ"},
{"content":{"body":"* https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback\nShould we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Deno already violate that restriction anyway, by implementing AsyncLocalStorage\n","m.new_content":{"body":"https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback\nShould we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Deno already violate that restriction anyway, by implementing AsyncLocalStorage\n","format":"org.matrix.custom.html","formatted_body":"https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback<br />Should we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Deno already violate that restriction anyway, by implementing AsyncLocalStorage","msgtype":"m.text"},"m.relates_to":{"event_id":"$Pn2984GE43U9qMfDIgc-R8q8q-eOfC9S0f1WM-sxsBQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721160061245,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$PeGIWNxd0T8rcapyzhQElMSRfbDgq6JEmzrRrOsysHI"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback\n> Should we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Deno already violate that restriction anyway, by implementing AsyncLocalStorage\n> \n\ndo you have any information on why it was originally scoped to only web browsers?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Pn2984GE43U9qMfDIgc-R8q8q-eOfC9S0f1WM-sxsBQ\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-web-compat-host-make-job-callback<br />Should we remove the restriction that only web browsers can pass custom data in HostMakeJobCallback? Both Node.js and Deno already violate that restriction anyway, by implementing AsyncLocalStorage</blockquote></mx-reply>do you have any information on why it was originally scoped to only web browsers?","m.relates_to":{"m.in_reply_to":{"event_id":"$Pn2984GE43U9qMfDIgc-R8q8q-eOfC9S0f1WM-sxsBQ"}},"msgtype":"m.text"},"ts":1721160745939,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jvkoM3EkLoSHVx_m0xxQI4cNF1xrceQ0i6kZfxqPGdM"},
{"content":{"body":"i dont think it means only web browsers can implement it, moreso that you can not implement it and still be conforming and that web browsers are the most common use case that would need/implement those features","m.mentions":{},"msgtype":"m.text"},"ts":1721161207989,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$-AQdTB1Ri_kJE60mZ0hyXwbjfuCYIlr3_Reo71Z2hsE"},
{"content":{"body":"i see 9.5.2 says 'must'","m.mentions":{},"msgtype":"m.text"},"ts":1721161405239,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$Fbfa2U7pA2FEAmaWdHrEBxFiElr6_rWX7iMXADonDpw"},
{"content":{"body":" * oh, i see 9.5.2 says 'must'","m.mentions":{},"m.new_content":{"body":"oh, i see 9.5.2 says 'must'","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Fbfa2U7pA2FEAmaWdHrEBxFiElr6_rWX7iMXADonDpw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721161415823,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$0TBQGN7QkNTAu8T2t9HrvNI_eo3-whdTMr9gH62Gt1o"},
{"content":{"body":"we often have allowed browsers to do something \"icky\" out of necessity but intended to require non-browsers to do the better thing","m.mentions":{},"msgtype":"m.text"},"ts":1721164954928,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vErAIK2hoQ7Ea4IJ2sl0OUa8C5ZC4yCRvz7DAB3GWOI"},
{"content":{"body":"it seems like one half of what those host hooks do is keeping track of which is the \"incumbent realm\", which according to littledan could be refactored to be built on top of AsyncContext","format":"org.matrix.custom.html","formatted_body":"it seems like one half of what those host hooks do is keeping track of which is the \"incumbent realm\", which according to <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> could be refactored to be built on top of AsyncContext","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1721165935638,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tpGnUWOb6rJDpEeAgFZyw_ytbCcCL9v6rzgW6CVcsiU"},
{"content":{"body":"the other half of what they do seems to be making it so the dynamic import in `Promise.resolve('import(`./example.mjs`)').then(eval);` resolves relative to the script active when the promise job is enqueued","format":"org.matrix.custom.html","formatted_body":"the other half of what they do seems to be making it so the dynamic import in <code>Promise.resolve('import(</code>./example.mjs<code>)').then(eval);</code> resolves relative to the script active when the promise job is enqueued","m.mentions":{},"msgtype":"m.text"},"ts":1721165972306,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$mPnz6DNjyowmCUEw5qHP1e8kOQBS6jVaHsUaOrBwAag"},
{"content":{"body":"and I wonder what Node.js does there, and whether we want to keep this behavior or not","m.mentions":{},"msgtype":"m.text"},"ts":1721165985448,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$u60gyEMiSZ_qO-tbEpq1mRlrGLdWrYyBh2kvcWJHOWI"},
{"content":{"body":" * the other half of what they do seems to be making it so the dynamic import in ``Promise.resolve('import(`./example.mjs`)').then(eval);`` resolves relative to the script active when the promise job is enqueued","format":"org.matrix.custom.html","formatted_body":" * the other half of what they do seems to be making it so the dynamic import in <code>Promise.resolve('import(`./example.mjs`)').then(eval);</code> resolves relative to the script active when the promise job is enqueued","m.mentions":{},"m.new_content":{"body":"the other half of what they do seems to be making it so the dynamic import in ``Promise.resolve('import(`./example.mjs`)').then(eval);`` resolves relative to the script active when the promise job is enqueued","format":"org.matrix.custom.html","formatted_body":"the other half of what they do seems to be making it so the dynamic import in <code>Promise.resolve('import(`./example.mjs`)').then(eval);</code> resolves relative to the script active when the promise job is enqueued","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mPnz6DNjyowmCUEw5qHP1e8kOQBS6jVaHsUaOrBwAag","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721166033475,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$TCJPv_toKt4ARaOhpgLgBWZqSxFITW8TzXk0z-JbY3U"},
{"content":{"body":" * and I wonder what Node.js does there, and whether we would want to keep this behavior or not if there were no web compat concerns","m.mentions":{},"m.new_content":{"body":"and I wonder what Node.js does there, and whether we would want to keep this behavior or not if there were no web compat concerns","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$u60gyEMiSZ_qO-tbEpq1mRlrGLdWrYyBh2kvcWJHOWI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721166075492,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$yP2PMpQ3qU18vxNzJ3u4tYhpQVMUAgh-4aOVdkYt1qI"},
{"content":{"body":"> <@michaelficarra:matrix.org> do you have any information on why it was originally scoped to only web browsers?\n\nbecause at the time, it was understood that the expressivity this hook enabled was 1) tantamount to dynamic scope, which Mark & co objected to philosophically, and 2) it described the reality of the incumbent settings object on the web\n\nso the reconcile the two, the decision was to reflect reality by speccing it, but limit it to the only implementation that needed it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$jvkoM3EkLoSHVx_m0xxQI4cNF1xrceQ0i6kZfxqPGdM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>do you have any information on why it was originally scoped to only web browsers?</blockquote></mx-reply><p>because at the time, it was understood that the expressivity this hook enabled was 1) tantamount to dynamic scope, which Mark &amp; co objected to philosophically, and 2) it described the reality of the incumbent settings object on the web</p>\n<p>so the reconcile the two, the decision was to reflect reality by speccing it, but limit it to the only implementation that needed it</p>\n","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jvkoM3EkLoSHVx_m0xxQI4cNF1xrceQ0i6kZfxqPGdM"}},"msgtype":"m.text"},"ts":1721166322061,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PvtWvM9AjsX5z0iz3jc3OQSu833SAYN0brU3K6jBCe8"},
{"content":{"body":"since then, i suppose those objectors have gotten over the philosophical objection that it was tantamount to unacceptabel dynamic scope, given the enthusiasm about AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1721166346468,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fdgb3nMBuOmD9ATx99rPvM3S8nWUJDhp31uK07EgymA"}
]