[
{"content":{"body":"```\n(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n```\nwhich of these is better, do you think","format":"org.matrix.custom.html","formatted_body":"<pre><code>(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n</code></pre>\n<p>which of these is better, do you think</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\n(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n```\nwhich of these is better, do you think","mimetype":"text/plain"},{"body":"<pre><code>(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n</code></pre>\n<p>which of these is better, do you think</p>\n","mimetype":"text/html"}]},"ts":1664345834023,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4MScsStUAAL2PThq0keHitMF7oaJjzWvtQeyvg3FCBk"},
{"content":{"body":"keeping in mind how subclassing works - `class X extends Array {}; (0, X.of)(1)` also gives an array, not an X, unlike a direct `X.of(1)` invocation","format":"org.matrix.custom.html","formatted_body":"keeping in mind how subclassing works - <code>class X extends Array {}; (0, X.of)(1)</code> also gives an array, not an X, unlike a direct <code>X.of(1)</code> invocation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"keeping in mind how subclassing works - `class X extends Array {}; (0, X.of)(1)` also gives an array, not an X, unlike a direct `X.of(1)` invocation","mimetype":"text/plain"},{"body":"keeping in mind how subclassing works - <code>class X extends Array {}; (0, X.of)(1)</code> also gives an array, not an X, unlike a direct <code>X.of(1)</code> invocation","mimetype":"text/html"}]},"ts":1664345903015,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lqfn-oTRXl-tXHLCe2bBFCWajosPiSK1hk5dG0tG9fM"},
{"content":{"body":"I guess it's possible to have a third kind of thing, like an autobinding getter... not sure that's better though","msgtype":"m.text","org.matrix.msc1767.text":"I guess it's possible to have a third kind of thing, like an autobinding getter... not sure that's better though"},"ts":1664345951504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PuXm9ZSK5kQPWRbG1nreZnVtc7Jz9tOL8s_R-rB_XuI"},
{"content":{"body":"the thing where subclasses also inherit _static_ methods is bonkers to me","format":"org.matrix.custom.html","formatted_body":"the thing where subclasses also inherit <em>static</em> methods is bonkers to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the thing where subclasses also inherit _static_ methods is bonkers to me","mimetype":"text/plain"},{"body":"the thing where subclasses also inherit <em>static</em> methods is bonkers to me","mimetype":"text/html"}]},"ts":1664345973642,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jXpCLf1-frqnYyFUPu5Sv25q6chl7etM4s_INSnim_g"},
{"content":{"body":"(context: I would like to revive the `Set.of`/`Set.from` proposal, maybe)","format":"org.matrix.custom.html","formatted_body":"(context: I would like to revive the <code>Set.of</code>/<code>Set.from</code> proposal, maybe)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(context: I would like to revive the `Set.of`/`Set.from` proposal, maybe)","mimetype":"text/plain"},{"body":"(context: I would like to revive the <code>Set.of</code>/<code>Set.from</code> proposal, maybe)","mimetype":"text/html"}]},"ts":1664346007021,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PF42Imvj3EmhpZVfBdDtSgpC5_NlxbGlgIaQbFc2Oek"},
{"content":{"body":"Sounds like maybe you have some other rationale in mind in addition to the above?","msgtype":"m.text"},"ts":1664347232745,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$77SDvnWF8Lb9atJlZwoGp6a72qjRr69N8yos_OnoIgM"},
{"content":{"body":"Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them","msgtype":"m.text"},"ts":1664347293172,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY"}
]