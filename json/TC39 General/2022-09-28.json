[
{"content":{"body":"```\n(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n```\nwhich of these is better, do you think","format":"org.matrix.custom.html","formatted_body":"<pre><code>(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n</code></pre>\n<p>which of these is better, do you think</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\n(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n```\nwhich of these is better, do you think","mimetype":"text/plain"},{"body":"<pre><code>(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n</code></pre>\n<p>which of these is better, do you think</p>\n","mimetype":"text/html"}]},"ts":1664345834023,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4MScsStUAAL2PThq0keHitMF7oaJjzWvtQeyvg3FCBk"},
{"content":{"body":"keeping in mind how subclassing works - `class X extends Array {}; (0, X.of)(1)` also gives an array, not an X, unlike a direct `X.of(1)` invocation","format":"org.matrix.custom.html","formatted_body":"keeping in mind how subclassing works - <code>class X extends Array {}; (0, X.of)(1)</code> also gives an array, not an X, unlike a direct <code>X.of(1)</code> invocation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"keeping in mind how subclassing works - `class X extends Array {}; (0, X.of)(1)` also gives an array, not an X, unlike a direct `X.of(1)` invocation","mimetype":"text/plain"},{"body":"keeping in mind how subclassing works - <code>class X extends Array {}; (0, X.of)(1)</code> also gives an array, not an X, unlike a direct <code>X.of(1)</code> invocation","mimetype":"text/html"}]},"ts":1664345903015,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lqfn-oTRXl-tXHLCe2bBFCWajosPiSK1hk5dG0tG9fM"},
{"content":{"body":"I guess it's possible to have a third kind of thing, like an autobinding getter... not sure that's better though","msgtype":"m.text","org.matrix.msc1767.text":"I guess it's possible to have a third kind of thing, like an autobinding getter... not sure that's better though"},"ts":1664345951504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PuXm9ZSK5kQPWRbG1nreZnVtc7Jz9tOL8s_R-rB_XuI"},
{"content":{"body":"the thing where subclasses also inherit _static_ methods is bonkers to me","format":"org.matrix.custom.html","formatted_body":"the thing where subclasses also inherit <em>static</em> methods is bonkers to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the thing where subclasses also inherit _static_ methods is bonkers to me","mimetype":"text/plain"},{"body":"the thing where subclasses also inherit <em>static</em> methods is bonkers to me","mimetype":"text/html"}]},"ts":1664345973642,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jXpCLf1-frqnYyFUPu5Sv25q6chl7etM4s_INSnim_g"},
{"content":{"body":"(context: I would like to revive the `Set.of`/`Set.from` proposal, maybe)","format":"org.matrix.custom.html","formatted_body":"(context: I would like to revive the <code>Set.of</code>/<code>Set.from</code> proposal, maybe)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(context: I would like to revive the `Set.of`/`Set.from` proposal, maybe)","mimetype":"text/plain"},{"body":"(context: I would like to revive the <code>Set.of</code>/<code>Set.from</code> proposal, maybe)","mimetype":"text/html"}]},"ts":1664346007021,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PF42Imvj3EmhpZVfBdDtSgpC5_NlxbGlgIaQbFc2Oek"},
{"content":{"body":"Sounds like maybe you have some other rationale in mind in addition to the above?","msgtype":"m.text"},"ts":1664347232745,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$77SDvnWF8Lb9atJlZwoGp6a72qjRr69N8yos_OnoIgM"},
{"content":{"body":"Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them","msgtype":"m.text"},"ts":1664347293172,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY"},
{"content":{"body":"It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election","m.relates_to":{"event_id":"$SdIa2a00sayiDAD5_dT3U4PDaBsGMo_ExP8ZEPvzTVo","is_falling_back":true,"m.in_reply_to":{"event_id":"$SdIa2a00sayiDAD5_dT3U4PDaBsGMo_ExP8ZEPvzTVo"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election"},"ts":1664348852000,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fYx_MD_GmxVWZDsmG9xGQ1agOT42knbc8qhDwGHCMwU"},
{"content":{"body":"It is likely worthwhile to update the tc on any upcoming work, just to keep everyone informed.","m.relates_to":{"event_id":"$SdIa2a00sayiDAD5_dT3U4PDaBsGMo_ExP8ZEPvzTVo","is_falling_back":true,"m.in_reply_to":{"event_id":"$fYx_MD_GmxVWZDsmG9xGQ1agOT42knbc8qhDwGHCMwU"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"It is likely worthwhile to update the tc on any upcoming work, just to keep everyone informed."},"ts":1664348889477,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xGlLV9piuVgX3wMnF-lrc-wrKt5WAeJl9EwuiNDSXCs"},
{"content":{"body":"> <@bakkot:matrix.org> ```\n> (0, Array.of)(1); // [1]\n> (0, Promise.resolve)(0) // throws\n> ```\n> which of these is better, do you think\n\nWith new methods moving away from checking Symbol.species, static methods not using `this` as the constructor seems inline with that? So if subclasses want their instances to be returned then they need to explicitly override both instance and static methods. A hassle but easier to remember perhaps ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%244MScsStUAAL2PThq0keHitMF7oaJjzWvtQeyvg3FCBk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><pre><code>(0, Array.of)(1); // [1]\n(0, Promise.resolve)(0) // throws\n</code></pre>\n<p>which of these is better, do you think</p>\n</blockquote></mx-reply>With new methods moving away from checking Symbol.species, static methods not using <code>this</code> as the constructor seems inline with that? So if subclasses want their instances to be returned then they need to explicitly override both instance and static methods. A hassle but easier to remember perhaps","m.relates_to":{"m.in_reply_to":{"event_id":"$4MScsStUAAL2PThq0keHitMF7oaJjzWvtQeyvg3FCBk"}},"msgtype":"m.text"},"ts":1664368190609,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$AmRIPCdIoqZK01SuDIGwzoOyRQwtNlYCBFW-2THWKvY"},
{"content":{"body":"> <@littledan:matrix.org> Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them\n\nwhich hazard are you referring to there? there's two different behaviors currently in the language and I am trying to figure out whether to go with the `Array` one or the `Promise` one","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them</blockquote></mx-reply>which hazard are you referring to there? there's two different behaviors currently in the language and I am trying to figure out whether to go with the <code>Array</code> one or the <code>Promise</code> one","m.relates_to":{"m.in_reply_to":{"event_id":"$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them\n\nwhich hazard are you referring to there? there's two different behaviors currently in the language and I am trying to figure out whether to go with the `Array` one or the `Promise` one","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them</blockquote></mx-reply>which hazard are you referring to there? there's two different behaviors currently in the language and I am trying to figure out whether to go with the <code>Array</code> one or the <code>Promise</code> one","mimetype":"text/html"}]},"ts":1664377192102,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xfMZDplKHZ_uLbDFkTLsfV1DwHEHV4KqZJmHzpBK5TA"},
{"content":{"body":"Array is weird in that it's basically `let ctor = this ?? Array`, so if you do `SubclassOfArray.of(x)` you get a `SubclassOfArray` but if you do `(0, SubclassOfArray.of)(x)` you get an `Array` proper, so I guess another option is to do the simpler thing of always using the original constructor and not using `this` at all","format":"org.matrix.custom.html","formatted_body":"Array is weird in that it's basically <code>let ctor = this ?? Array</code>, so if you do <code>SubclassOfArray.of(x)</code> you get a <code>SubclassOfArray</code> but if you do <code>(0, SubclassOfArray.of)(x)</code> you get an <code>Array</code> proper, so I guess another option is to do the simpler thing of always using the original constructor and not using <code>this</code> at all","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Array is weird in that it's basically `let ctor = this ?? Array`, so if you do `SubclassOfArray.of(x)` you get a `SubclassOfArray` but if you do `(0, SubclassOfArray.of)(x)` you get an `Array` proper, so I guess another option is to do the simpler thing of always using the original constructor and not using `this` at all","mimetype":"text/plain"},{"body":"Array is weird in that it's basically <code>let ctor = this ?? Array</code>, so if you do <code>SubclassOfArray.of(x)</code> you get a <code>SubclassOfArray</code> but if you do <code>(0, SubclassOfArray.of)(x)</code> you get an <code>Array</code> proper, so I guess another option is to do the simpler thing of always using the original constructor and not using <code>this</code> at all","mimetype":"text/html"}]},"ts":1664377484075,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OzA865S6tjhcncwYX4v5Pi8xrKmGa3abJnTw252ZBFA"},
{"content":{"body":"anyway I agree none of the downsides is particularly bad, I mostly just want to pick one","msgtype":"m.text","org.matrix.msc1767.text":"anyway I agree none of the downsides is particularly bad, I mostly just want to pick one"},"ts":1664377824862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PLtFENKxNkU8_hqoCyfSZRDCGdI6QAfmUhiRfPapbcE"},
{"content":{"body":"leaning towards the Array one I guess","msgtype":"m.text","org.matrix.msc1767.text":"leaning towards the Array one I guess"},"ts":1664377847142,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RPDfGWcrm9A1PJYUQpw7SEIgZEYUz5yYs1vk8vp0Zts"},
{"content":{"body":"> <@littledan:matrix.org> Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them\n\nbut which one is hazard","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them</blockquote></mx-reply>but which one is hazard","m.relates_to":{"m.in_reply_to":{"event_id":"$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them\n\nbut which one is hazard","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$kBBarrN47CgGSsWkLMaiIJj_82R9CJ1hzwLs68ULNqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Oh sorry revive, not remove? Well, my position is: those hazards just aren’t so bad and we shouldn’t worry about them</blockquote></mx-reply>but which one is hazard","mimetype":"text/html"}]},"ts":1664378117811,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$8JUiuGuupN1dlqy0a2iK72TN9MFRTkVG7yZhRbTlGhM"},
{"content":{"body":"> <@yulia:mozilla.org> It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election\n\nit'd still be nice to reserve time for discussion to make sure everyone is happy with how things are going with the current members","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$fYx_MD_GmxVWZDsmG9xGQ1agOT42knbc8qhDwGHCMwU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election</blockquote></mx-reply>it'd still be nice to reserve time for discussion to make sure everyone is happy with how things are going with the current members","m.relates_to":{"event_id":"$SdIa2a00sayiDAD5_dT3U4PDaBsGMo_ExP8ZEPvzTVo","m.in_reply_to":{"event_id":"$fYx_MD_GmxVWZDsmG9xGQ1agOT42knbc8qhDwGHCMwU"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election\n\nit'd still be nice to reserve time for discussion to make sure everyone is happy with how things are going with the current members","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$fYx_MD_GmxVWZDsmG9xGQ1agOT42knbc8qhDwGHCMwU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>It is up to the TC, but we were doing it yearly (so it would be in december). If there are no changes to either group we do not necessarily need to hold an election</blockquote></mx-reply>it'd still be nice to reserve time for discussion to make sure everyone is happy with how things are going with the current members","mimetype":"text/html"}]},"ts":1664381558642,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WE-6F52o2YI6I1PtwCgHluWncuq6PSaUm6BM0xCVAp8"},
{"content":{"body":"Oh yeah sorry I lean towards picking Array semantics or just ignoring this","msgtype":"m.text"},"ts":1664402633900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tGa48YKzKqzGZNj6OZy4bGOWavY4j1Hm6toyNvQsrqc"}
]