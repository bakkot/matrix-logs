[
{"content":{"body":"It is intentional that doing promise.then() removes it from the unhandled promise rejection handlers list, yeah?","msgtype":"m.text","org.matrix.msc1767.text":"It is intentional that doing promise.then() removes it from the unhandled promise rejection handlers list, yeah?"},"ts":1672326770997,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$vgnkhqAiGElFKmEO_iyEwaVtgvjtV5oNkixQOfJ-8cI"},
{"content":{"body":"(as in, literally, passing nothing in for either fulfilled or rejected)","msgtype":"m.text","org.matrix.msc1767.text":"(as in, literally, passing nothing in for either fulfilled or rejected)"},"ts":1672326783741,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$e0QPeQdRoyG5xNszIHCiZmZ2v3VgZ69uhq2pCjxfSLM"},
{"content":{"body":"I presume the promise returned from that .then is added to the unhandled promise rejection list though?","msgtype":"m.text"},"ts":1672328547617,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Jhgl1cTWYCvMD6kLfp8uXSZX4wdBTzZoW6RdpbS6OzY"},
{"content":{"body":"Correct","msgtype":"m.text","org.matrix.msc1767.text":"Correct"},"ts":1672328874168,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$d4M_kQea0A1jD5rv6vkzQ9ldOgE_Q4PXYOcuGaIfQ0Q"},
{"content":{"body":"https://runkit.com/tolmasky/promise-rejection-with-empty-then","msgtype":"m.text","org.matrix.msc1767.text":"https://runkit.com/tolmasky/promise-rejection-with-empty-then"},"ts":1672328933312,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$XBjBMkm-4DbiRu1pjd2iFH5SB4sEmx4Oegmi2ouuYtM"},
{"content":{"body":"Probably worth mentioning here: a better way to observe unhandled rejections would be to show promises with unhandled rejections and then hide them when they’re handled, rather than showing them only when we can prove they won’t ever be handled (finalization) or jumping to the conclusion that they won’t be handled if the handler isn’t registered in the turn of creation. It’s similarly useful to show and hide _pending_ promises, since they can also participate in data-lock cycles. Q provides hooks for these events, for which I’d prototyped a browser debugger extension many years ago. I very much wish I’d had the capacity to carry that over the line!","format":"org.matrix.custom.html","formatted_body":"Probably worth mentioning here: a better way to observe unhandled rejections would be to show promises with unhandled rejections and then hide them when they’re handled, rather than showing them only when we can prove they won’t ever be handled (finalization) or jumping to the conclusion that they won’t be handled if the handler isn’t registered in the turn of creation. It’s similarly useful to show and hide <em>pending</em> promises, since they can also participate in data-lock cycles. Q provides hooks for these events, for which I’d prototyped a browser debugger extension many years ago. I very much wish I’d had the capacity to carry that over the line!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Probably worth mentioning here: a better way to observe unhandled rejections would be to show promises with unhandled rejections and then hide them when they’re handled, rather than showing them only when we can prove they won’t ever be handled (finalization) or jumping to the conclusion that they won’t be handled if the handler isn’t registered in the turn of creation. It’s similarly useful to show and hide _pending_ promises, since they can also participate in data-lock cycles. Q provides hooks for these events, for which I’d prototyped a browser debugger extension many years ago. I very much wish I’d had the capacity to carry that over the line!","mimetype":"text/plain"},{"body":"Probably worth mentioning here: a better way to observe unhandled rejections would be to show promises with unhandled rejections and then hide them when they’re handled, rather than showing them only when we can prove they won’t ever be handled (finalization) or jumping to the conclusion that they won’t be handled if the handler isn’t registered in the turn of creation. It’s similarly useful to show and hide <em>pending</em> promises, since they can also participate in data-lock cycles. Q provides hooks for these events, for which I’d prototyped a browser debugger extension many years ago. I very much wish I’d had the capacity to carry that over the line!","mimetype":"text/html"}]},"ts":1672329427575,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yDF_aQVuq7zcxI61wjQ64SqcrWmMQFKFbys6dYVYZCY"},
{"content":{"body":"unhandled promise rejections in browsers are surfaced to code, not just to the debugger","msgtype":"m.text","org.matrix.msc1767.text":"unhandled promise rejections in browsers are surfaced to code, not just to the debugger"},"ts":1672329502164,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2_RlEO4o8Jv5a0Bt04XAW0d-ufpx235pKzSo4x87CpA"},
{"content":{"body":"It’s analogously interesting to visualize async iterators as pending promises that produce intermediate events. Those events have frequencies.","msgtype":"m.text","org.matrix.msc1767.text":"It’s analogously interesting to visualize async iterators as pending promises that produce intermediate events. Those events have frequencies."},"ts":1672329509033,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Qfpb8odI9TdYeaR9G8MgDZg3HIYprpEiQ4mEOlGFJMg"},
{"content":{"body":"and you certainly don't want to surface to code \"here are all of the currently-unhandled promises\"","msgtype":"m.text","org.matrix.msc1767.text":"and you certainly don't want to surface to code \"here are all of the currently-unhandled promises\""},"ts":1672329516992,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4wiJAm3PivK_GvlamnOfHYz67uhWOWEZgnm1Xsebd9A"},
{"content":{"body":"Agreed.","msgtype":"m.text","org.matrix.msc1767.text":"Agreed."},"ts":1672329534798,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uFEOY6cEfxYaXKdLRkk_deOf2gjU0k8KrJENSzrzBA4"},
{"content":{"body":"And it’s not problematic to surface unhandled rejections after finalization. Browsers are fine there.","msgtype":"m.text","org.matrix.msc1767.text":"And it’s not problematic to surface unhandled rejections after finalization. Browsers are fine there."},"ts":1672329637262,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$q9ejDtVdWXTPotHjtgl6hefBDqv2VNDoVRYTwgQNob0"},
{"content":{"body":"So, my actual use case was trying to find a non-mutative way of identifying \"true\" Promise objects (a Promise.isPromise analog to Array.isArray). %Promise.prototype.then%.apply(object) is *almost* satisfactory since it throws if the object isn't a Promise... but has side-effects if it *is* a Promise unfortunately. (For example, I think you can safely use %Map.prototype.get%.apply(object) to identify \"true\" Map objects).","format":"org.matrix.custom.html","formatted_body":"So, my actual use case was trying to find a non-mutative way of identifying &quot;true&quot; Promise objects (a Promise.isPromise analog to Array.isArray). %Promise.prototype.then%.apply(object) is <em>almost</em> satisfactory since it throws if the object isn't a Promise... but has side-effects if it <em>is</em> a Promise unfortunately. (For example, I think you can safely use %Map.prototype.get%.apply(object) to identify &quot;true&quot; Map objects).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, my actual use case was trying to find a non-mutative way of identifying \"true\" Promise objects (a Promise.isPromise analog to Array.isArray). %Promise.prototype.then%.apply(object) is *almost* satisfactory since it throws if the object isn't a Promise... but has side-effects if it *is* a Promise unfortunately. (For example, I think you can safely use %Map.prototype.get%.apply(object) to identify \"true\" Map objects).","mimetype":"text/plain"},{"body":"So, my actual use case was trying to find a non-mutative way of identifying &quot;true&quot; Promise objects (a Promise.isPromise analog to Array.isArray). %Promise.prototype.then%.apply(object) is <em>almost</em> satisfactory since it throws if the object isn't a Promise... but has side-effects if it <em>is</em> a Promise unfortunately. (For example, I think you can safely use %Map.prototype.get%.apply(object) to identify &quot;true&quot; Map objects).","mimetype":"text/html"}]},"ts":1672329713282,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$PSF6vmuDpb7geX6JUY56s9MSo7q9mdhS7lP9sAw_cAw"},
{"content":{"body":"Paging @ljharb, knower of all brand checks.","msgtype":"m.text","org.matrix.msc1767.text":"Paging @ljharb, knower of all brand checks."},"ts":1672329754149,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$W-ePJFohqRk3Z4WirupK38IkgN3BydPcXylVwrJHVrk"},
{"content":{"body":"tolmasky: there’s no way to do that without potentially invoking user code, so Promise.resolve(x) === x is usually the way","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: there’s no way to do that without potentially invoking user code, so Promise.resolve(x) === x is usually the way","msgtype":"m.text"},"ts":1672329856519,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d8j2qZcraPgu7JNgSfvyoTecKaMndzF-ky2KrqgQg98"},
{"content":{"body":"I’d have to check, but i think that only invokes a getter for .then - so since that’s very rare to exist, it works in practice","msgtype":"m.text"},"ts":1672329905328,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2uTtWGfC6aXhDiVa4Iva3MGO7-djYOTXc2aBvEqwu_4"},
{"content":{"body":"Gotcha, We currently we just drop down to C++ in v8 to check, but wanted to confirm there's not \"safe\" way in JS","msgtype":"m.text","org.matrix.msc1767.text":"Gotcha, We currently we just drop down to C++ in v8 to check, but wanted to confirm there's not \"safe\" way in JS"},"ts":1672329945522,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$oJ6hrVzxCL-RaPuwhifkFKmpGf8PKVD1fjEIJuycLck"},
{"content":{"body":"only a “safe enough” way","msgtype":"m.text"},"ts":1672329954545,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fd9jhjjSW6HGJvgDhUs2GQr8H_KLcggqTjc1qEeL4r8"},
{"content":{"body":"To confirm in that case, as far as I can tell its possible with everything except Promise and Error (Number/Boolean/Symbol/String/Date can use C.prototype.toString and check for throw, RegExp.prototype.exec and check for throw, Map and Set can use C.prototype.has and check for throw).","msgtype":"m.text","org.matrix.msc1767.text":"To confirm in that case, as far as I can tell its possible with everything except Promise and Error (Number/Boolean/Symbol/String/Date can use C.prototype.toString and check for throw, RegExp.prototype.exec and check for throw, Map and Set can use C.prototype.has and check for throw)."},"ts":1672329988029,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$1Zvg539_B0ipDoVgLaLdetgW7qgTbAoVdN_3i5d7UHk"},
{"content":{"body":"i suppose you could explore descriptors and see if it has no own then, and a [[Prototype]] that’s Promise.prototype, but that invokes a proxy trap","msgtype":"m.text"},"ts":1672329999649,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ksxgQ02p_Y-BrrNviE_8BHF5vockTDt9Ezv-X5aGMIc"},
{"content":{"body":"Promise has the brand checks but no non-side-effect way to check it; and error sadly has no way to do the brand check, yes. Yet.","msgtype":"m.text"},"ts":1672330033852,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WOZVLGo9zM5uh9eCPutzFCgbpXG8eru_IiFZFtuu2E4"},
{"content":{"body":"Ask about TypedArrays. 🍿","msgtype":"m.text","org.matrix.msc1767.text":"Ask about TypedArrays. 🍿"},"ts":1672330049057,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SOrH6x0tKjfop-YJkrI6-AzlcZvD1oin3-6Z-tgtaFs"},
{"content":{"body":"afaik i have those covered","msgtype":"m.text"},"ts":1672330060661,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cqxDynnxGgh6cpbczej07_UrExShoEbce85EMBR-Dik"},
{"content":{"body":"You do!","msgtype":"m.text","org.matrix.msc1767.text":"You do!"},"ts":1672330066117,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7j-vXv_pxGnhVMsyq4nvk93Jnn3tYD8u-6WyfypAimM"},
{"content":{"body":"Oh, yeah? They're doable?","msgtype":"m.text","org.matrix.msc1767.text":"Oh, yeah? They're doable?"},"ts":1672330070624,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$-xKsRDCbHSoXqhX9GNDQ2YIWaIwNnMgselHC7j4gAUo"},
{"content":{"body":"https://npmjs.com/which-typed-array, https://npmjs.com/typed-array-length, https://npmjs.com/is-typed-array. I’d love to learn about caveats I’m unaware of.","msgtype":"m.text"},"ts":1672330108831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_YLTU_FY3zkRw_wOFRSODBGp8EjqDDe76aP8q88zVmc"},
{"content":{"body":"excellent","msgtype":"m.text","org.matrix.msc1767.text":"excellent"},"ts":1672330133071,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$ittinFakxG93dMegTcy8CdtgW3_jbq57f06aivwAYp0"},
{"content":{"body":"But why can't depends on @@toStringTag? It's 2022","msgtype":"m.text"},"ts":1672330891491,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$zWHwQP7lBxANhe2PBfPBa8oFoSMxWuK2Y65HJrdjy68"},
{"content":{"body":"because anyone can change that?","msgtype":"m.text","org.matrix.msc1767.text":"because anyone can change that?"},"ts":1672331958411,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$g6zx0GKuHYydIw_GD2dpScMCbmu77K1vm6sgbAR1abc"},
{"content":{"body":"Oh","msgtype":"m.text"},"ts":1672332090365,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$_JM2D7lY1CfSeUHNnBHTBxyRgCV0nW1wff9bpTvfrww"},
{"content":{"body":"also anyone can fake it","msgtype":"m.text","org.matrix.msc1767.text":"also anyone can fake it"},"ts":1672336682439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$A08U1asrc3OSIR234XS7J5byyFHKJx5kEufCw8AnkH8"},
{"content":{"body":"toStringTag is useless as anything but a debugging hint","msgtype":"m.text","org.matrix.msc1767.text":"toStringTag is useless as anything but a debugging hint"},"ts":1672336694027,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dotoVCeQ1ju_HF5nboW2UK3lilZEvCvyAxN_ehFHX4o"},
{"content":{"body":"now, if it'd been a brand-checking getter…","msgtype":"m.text","org.matrix.msc1767.text":"now, if it'd been a brand-checking getter…"},"ts":1672336701964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lTj5B5BOXobDsM1QYcSXRVSVRxb3pXR65fV605fNrYg"},
{"content":{"body":"but unfortunately that idea didn't occur to me in the pre-ES6 meeting (one of my first) when I tried to get toStringTag withdrawn from ES6","msgtype":"m.text","org.matrix.msc1767.text":"but unfortunately that idea didn't occur to me in the pre-ES6 meeting (one of my first) when I tried to get toStringTag withdrawn from ES6"},"ts":1672336727964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9WkpjdYwWpdUyJ7-FBH2EQMsymIvtlsb0OS_f5ZGCuo"},
{"content":{"body":"Is there any reason not to add brand-checking across the board, either through X.isX on everything, or [@@brand] or something?","msgtype":"m.text","org.matrix.msc1767.text":"Is there any reason not to add brand-checking across the board, either through X.isX on everything, or [@@brand] or something?"},"ts":1672337025509,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$9BrYkHfXYlZ3-Ms2MBkh_QPnkJ5Cvr0COEOTbRKAj8Q"},
{"content":{"body":"personally I am not a fan of adding more reflection unless there is some particular reason to want it","msgtype":"m.text","org.matrix.msc1767.text":"personally I am not a fan of adding more reflection unless there is some particular reason to want it"},"ts":1672337756575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jX9HDhaaUewfmOpJ7nmAkLuIXmZRN8YnsuP1zbHqy0o"}
]