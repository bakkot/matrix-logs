[
{"content":{"body":"I have been writing lots of promises lately and keep getting annoyed by awkwardness of extracting the handlers from the promise constructor. kind of want to add a helper for this. thoughts?\n\n```\nPromise.create = () => {\n  let resolve, reject;\n  let promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n};\n\nlet { resolve, reject, promise } = Promise.create();\nresolve(42);\npromise; // Promise {<fulfilled>: 42}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I have been writing lots of promises lately and keep getting annoyed by awkwardness of extracting the handlers from the promise constructor. kind of want to add a helper for this. thoughts?</p>\n<pre><code>Promise.create = () =&gt; {\n  let resolve, reject;\n  let promise = new Promise((res, rej) =&gt; {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n};\n\nlet { resolve, reject, promise } = Promise.create();\nresolve(42);\npromise; // Promise {&lt;fulfilled&gt;: 42}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have been writing lots of promises lately and keep getting annoyed by awkwardness of extracting the handlers from the promise constructor. kind of want to add a helper for this. thoughts?\n\n```\nPromise.create = () => {\n  let resolve, reject;\n  let promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n};\n\nlet { resolve, reject, promise } = Promise.create();\nresolve(42);\npromise; // Promise {<fulfilled>: 42}\n```","mimetype":"text/plain"},{"body":"<p>I have been writing lots of promises lately and keep getting annoyed by awkwardness of extracting the handlers from the promise constructor. kind of want to add a helper for this. thoughts?</p>\n<pre><code>Promise.create = () =&gt; {\n  let resolve, reject;\n  let promise = new Promise((res, rej) =&gt; {\n    resolve = res;\n    reject = rej;\n  });\n  return { resolve, reject, promise };\n};\n\nlet { resolve, reject, promise } = Promise.create();\nresolve(42);\npromise; // Promise {&lt;fulfilled&gt;: 42}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1654980036027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mG1UjpC0E7Qwibw4PMA7K_ceJDI-gpwUlQ6_JiUauIE"},
{"content":{"body":"I _could_ just copy that helper to every project but it comes up often enough for me that it seems maybe worth adding. don't know if this is something other people run into though.","format":"org.matrix.custom.html","formatted_body":"I <em>could</em> just copy that helper to every project but it comes up often enough for me that it seems maybe worth adding. don't know if this is something other people run into though.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I _could_ just copy that helper to every project but it comes up often enough for me that it seems maybe worth adding. don't know if this is something other people run into though.","mimetype":"text/plain"},{"body":"I <em>could</em> just copy that helper to every project but it comes up often enough for me that it seems maybe worth adding. don't know if this is something other people run into though.","mimetype":"text/html"}]},"ts":1654980070676,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Wmg7sRdLCcZLufbSIZjyZbcMwNZfEFHGYjcz0XCDOvo"},
{"content":{"body":"There is some popular prior art: jQuery's `$.deferred()` exposes the reject/resolve methods, and a `.promise()` method to get the internal promise.","msgtype":"m.text"},"ts":1654980183636,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UzN5_bjVMH2vd5zdwA9sL3mG36u_VqIo_NQwocLggK4"},
{"content":{"body":"bakkot: the problem with deferreds like that is that, while there is a nonzero amount of cases where it's the correct solution (particularly queues), when people use it it is *almost* always because they are using promises wrong","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the problem with deferreds like that is that, while there is a nonzero amount of cases where it's the correct solution (particularly queues), when people use it it is <em>almost</em> always because they are using promises wrong","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: the problem with deferreds like that is that, while there is a nonzero amount of cases where it's the correct solution (particularly queues), when people use it it is *almost* always because they are using promises wrong","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the problem with deferreds like that is that, while there is a nonzero amount of cases where it's the correct solution (particularly queues), when people use it it is <em>almost</em> always because they are using promises wrong","mimetype":"text/html"}]},"ts":1654983138206,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$Y9tTk7gGZu_6cCUHJnBLtxsmmA6ZAQWlGxqNGJ1g12I"},
{"content":{"body":"and aren't following the principle of \"your `new Promise` should only contain the conversion logic necessary for a specific obsolete asynchronous API, nothing more, nothing less\"","format":"org.matrix.custom.html","formatted_body":"and aren't following the principle of &quot;your <code>new Promise</code> should only contain the conversion logic necessary for a specific obsolete asynchronous API, nothing more, nothing less&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and aren't following the principle of \"your `new Promise` should only contain the conversion logic necessary for a specific obsolete asynchronous API, nothing more, nothing less\"","mimetype":"text/plain"},{"body":"and aren't following the principle of &quot;your <code>new Promise</code> should only contain the conversion logic necessary for a specific obsolete asynchronous API, nothing more, nothing less&quot;","mimetype":"text/html"}]},"ts":1654983182923,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$8qGGY457tky0VLeYnrXzW52phT-HBX6z8nniPhRIAuI"},
{"content":{"body":"and it often leads to race conditions and other reliability issues","msgtype":"m.text","org.matrix.msc1767.text":"and it often leads to race conditions and other reliability issues"},"ts":1654983190614,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$UjhUWZt5HAolm6UKptfzo0ykSXmVkWSM5tLXL7c6YwQ"},
{"content":{"body":"so I'd say that if you find yourself needing them in 'every project', that's probably a red flag, and it's also not something that should be too easy to do precisely because of its misuse potential :)","msgtype":"m.text","org.matrix.msc1767.text":"so I'd say that if you find yourself needing them in 'every project', that's probably a red flag, and it's also not something that should be too easy to do precisely because of its misuse potential :)"},"ts":1654983227009,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$6v85os8XCygSxsaF5DaHi1YLZlzRrjrEKtsbe_zC1MA"},
{"content":{"body":"(afaik this is basically *why* most modern Promise implementations ended up not implementing a deferred API)","format":"org.matrix.custom.html","formatted_body":"(afaik this is basically <em>why</em> most modern Promise implementations ended up not implementing a deferred API)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(afaik this is basically *why* most modern Promise implementations ended up not implementing a deferred API)","mimetype":"text/plain"},{"body":"(afaik this is basically <em>why</em> most modern Promise implementations ended up not implementing a deferred API)","mimetype":"text/html"}]},"ts":1654983255872,"senderName":"joepie91 üè≥Ô∏è‚Äçüåà","senderId":"@joepie91:pixie.town","id":"$HJvklmlWd_hbwOX4LWBFilj2W_RM2I9jtPABpx0kxNU"}
]