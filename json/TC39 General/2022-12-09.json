[
{"content":{"body":"`[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","format":"org.matrix.custom.html","formatted_body":"<code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","mimetype":"text/plain"},{"body":"<code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","mimetype":"text/html"}]},"ts":1670572221476,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$A5B_Y7-ZcZh1xr63dbL81Cb-9Vvw81f5ilHg2PgydFk"},
{"content":{"body":" * `[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","format":"org.matrix.custom.html","formatted_body":" * <code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","m.new_content":{"body":"`[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","format":"org.matrix.custom.html","formatted_body":"<code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","mimetype":"text/plain"},{"body":"<code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$A5B_Y7-ZcZh1xr63dbL81Cb-9Vvw81f5ilHg2PgydFk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `[Exposed]` works on methods, but only to constrain. So the solution would be to move `setTimeout` to an `AllTheGlobals` mixin that has `[Exposed=*]` and is included by `Window`, `WorkerGlobalScope`, etc.","mimetype":"text/plain"},{"body":" * <code>[Exposed]</code> works on methods, but only to constrain. So the solution would be to move <code>setTimeout</code> to an <code>AllTheGlobals</code> mixin that has <code>[Exposed=*]</code> and is included by <code>Window</code>, <code>WorkerGlobalScope</code>, etc.","mimetype":"text/html"}]},"ts":1670572236647,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$d0lM83f1LupM37-XeXt9NTbmvNwqdcUXM0FRclXXsog"},
{"content":{"body":"Is there a term that means symbols + objects (+ functions, although thats implied by objects). Like there's primitives vs. objects, I'm wondering if theres a concise way to say \"symbols and objects\"","msgtype":"m.text","org.matrix.msc1767.text":"Is there a term that means symbols + objects (+ functions, although thats implied by objects). Like there's primitives vs. objects, I'm wondering if theres a concise way to say \"symbols and objects\""},"ts":1670600493819,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$yDgImINSBeum9m2xR42EDwxllpxi1yMKdFNlblDoiUU"},
{"content":{"body":"In the R&T proposal we say \"unforgeable values\": you cannot recreate them","msgtype":"m.text"},"ts":1670600708610,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Hovx1FAi8J6-bKgbm48oV9aNqDBp__vpFqgAmFjIQ4A"},
{"content":{"body":"However, it does not include Symbol.for symbols ","format":"org.matrix.custom.html","formatted_body":"However, it does not include Symbol.for symbols","msgtype":"m.text"},"ts":1670600725303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kag_PTsgZCeDOsPVakEbipPhuqhElo5zVcjuLTy5Gxg"},
{"content":{"body":"* In the R&T proposal we say \"unforgeable values\": you cannot recreate them unless you already hold a reference to them ","m.new_content":{"body":"In the R&T proposal we say \"unforgeable values\": you cannot recreate them unless you already hold a reference to them ","msgtype":"m.text"},"m.relates_to":{"event_id":"$Hovx1FAi8J6-bKgbm48oV9aNqDBp__vpFqgAmFjIQ4A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1670600756680,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$iuh2UJhtrnKYd4jtJdzhdx7iE7hODyuqYi-s73G5FyA"},
{"content":{"body":"interesting","msgtype":"m.text","org.matrix.msc1767.text":"interesting"},"ts":1670600782915,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$LC6OiCluftKzBryf6stjNKYR5M7rYLB3ab3SdXMA1P0"},
{"content":{"body":"tolmasky: \"value with identity\" https://tc39.es/ecma262/multipage/notational-conventions.html#sec-identity","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: &quot;value with identity&quot; https://tc39.es/ecma262/multipage/notational-conventions.html#sec-identity","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tolmasky: \"value with identity\" https://tc39.es/ecma262/multipage/notational-conventions.html#sec-identity","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tolmasky:matrix.org\">tolmasky</a>: &quot;value with identity&quot; https://tc39.es/ecma262/multipage/notational-conventions.html#sec-identity","mimetype":"text/html"}]},"ts":1670602571800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CECx0KvtWB8Bf4yoy2E8LfeErDiFallh-BRVImnAr2s"},
{"content":{"body":"though that also covers spec-internal values, but outside the context of the spec that's probably fine","msgtype":"m.text","org.matrix.msc1767.text":"though that also covers spec-internal values, but outside the context of the spec that's probably fine"},"ts":1670602631780,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v3rhw6UThkqVBBs1o0o9CtyVDalx7HzsRvaplI4gfco"},
{"content":{"body":"ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)","msgtype":"m.text","org.matrix.msc1767.text":"ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)"},"ts":1670605767336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-wbiib9fu0PkVxHhbooa1Mp5gPO9ApqMU3hXDfsKXEo"},
{"content":{"body":" * ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)","m.new_content":{"body":"ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)","msgtype":"m.text","org.matrix.msc1767.text":"ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)"},"m.relates_to":{"event_id":"$-wbiib9fu0PkVxHhbooa1Mp5gPO9ApqMU3hXDfsKXEo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * ftr i'm not a fan of using \"identity\" in that way, but that's what the editors chose. i'd just say \"symbols and objects\" personally (outside the spec)"},"ts":1670605776552,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d95wrnPpfR29PAIlq_cHXgweloan0zXKFVGyEZnQCNs"},
{"content":{"body":"\"reference types\" is how I refer to them to myself","msgtype":"m.text","org.matrix.msc1767.text":"\"reference types\" is how I refer to them to myself"},"ts":1670608903322,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5QMtTiNzxDcrgeutdYHflrM5i-V2u5Hg1n1LJDQHhx4"},
{"content":{"body":"vs value types","msgtype":"m.text","org.matrix.msc1767.text":"vs value types"},"ts":1670608914731,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DGH4lzk41T_RtSEKl1JBQkwJ8aFQExEE3amLLZ_MJMk"},
{"content":{"body":"and i'm *certain* i'm making, like, some c++ people cringe for that","format":"org.matrix.custom.html","formatted_body":"and i'm <em>certain</em> i'm making, like, some c++ people cringe for that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and i'm *certain* i'm making, like, some c++ people cringe for that","mimetype":"text/plain"},{"body":"and i'm <em>certain</em> i'm making, like, some c++ people cringe for that","mimetype":"text/html"}]},"ts":1670608926227,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1aCYdYjVtMc_t0TZhX9IljfJzxYLHjAzxNv-fNW5GhY"},
{"content":{"body":"haha","msgtype":"m.text","org.matrix.msc1767.text":"haha"},"ts":1670610686382,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$0a91s3KDbkjHqaSgH_CK_BvBokltgmqAiXuyzHbdI88"},
{"content":{"body":"chatgpt suggested reference types","msgtype":"m.text","org.matrix.msc1767.text":"chatgpt suggested reference types"},"ts":1670610693151,"senderName":"tolmasky","senderId":"@tolmasky:matrix.org","id":"$L8YCwV4N_GW83zXHOkRc73imebKJ7G5F9SAZ7JZw3dc"},
{"content":{"body":"lol yeah, they are kind of \"reference values\" but so many people mistakenly think JS is pass by reference that i think the word \"reference\" would cause way more confusion than it'd clear up","msgtype":"m.text","org.matrix.msc1767.text":"lol yeah, they are kind of \"reference values\" but so many people mistakenly think JS is pass by reference that i think the word \"reference\" would cause way more confusion than it'd clear up"},"ts":1670611913768,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mfrt3zdgOzDubikC9XYQ9ARXIT9S8x9SiN7UVJIv91E"},
{"content":{"body":"Yeah reference types is too confusing given that unique symbols are a primitive with unforgeable identity, but registered symbols (the same type) do have a forgeable identity.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah reference types is too confusing given that unique symbols are a primitive with unforgeable identity, but registered symbols (the same type) do have a forgeable identity."},"ts":1670615957761,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jHVIYk3Tl1gkyclgE5baK2DNCRbMLpmJeJD9klok6rE"},
{"content":{"body":"We should find a good name as I expect unique symbols to not stay the only special case of unforgeable values.","msgtype":"m.text","org.matrix.msc1767.text":"We should find a good name as I expect unique symbols to not stay the only special case of unforgeable values."},"ts":1670616007679,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yJXJX7Ppu7t-RMUVxBsaNb2vScf-mFIITEx08hFRGPc"},
{"content":{"body":"(aka we'll ultimately get some kind of composite identity, whether that's records/tuples as currently proposed or a separate proposal)","msgtype":"m.text","org.matrix.msc1767.text":"(aka we'll ultimately get some kind of composite identity, whether that's records/tuples as currently proposed or a separate proposal)"},"ts":1670616056998,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sPCHZlQ2k6nIFLiJ1DNLCBwUxfJuqr8J7ME5YKWyX6U"}
]