[
{"content":{"body":"does anyone know why this is nested like this? https://github.com/tc39/test262/blob/main/harness/regExpUtils.js#L52","msgtype":"m.text","org.matrix.msc1767.text":"does anyone know why this is nested like this? https://github.com/tc39/test262/blob/main/harness/regExpUtils.js#L52"},"ts":1658457967584,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uAKfPmWByummCnrmGWh0GL6K9cAtTdhY86MCeO85Vgw"},
{"content":{"body":"my guess is that the outer `regexp.test` is the actual test, and the inner one is just to find which character failed if one did?","format":"org.matrix.custom.html","formatted_body":"my guess is that the outer <code>regexp.test</code> is the actual test, and the inner one is just to find which character failed if one did?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"my guess is that the outer `regexp.test` is the actual test, and the inner one is just to find which character failed if one did?","mimetype":"text/plain"},{"body":"my guess is that the outer <code>regexp.test</code> is the actual test, and the inner one is just to find which character failed if one did?","mimetype":"text/html"}]},"ts":1658457993274,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$iCLpx3zzw_t3TuPs1vPUX8sxnaJs47CwuD2_YvCycIo"},
{"content":{"body":"can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","format":"org.matrix.custom.html","formatted_body":"can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","mimetype":"text/plain"},{"body":"can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","mimetype":"text/html"}]},"ts":1658466450293,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hAembQQxwGbkVQ0KDGzV_Hz1PUPUJ6AwbEPiPDZHyCM"},
{"content":{"body":"ruh roh","msgtype":"m.text","org.matrix.msc1767.text":"ruh roh"},"ts":1658466476849,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$52-IPxiWGxQ_CokCh3oV-CBtHz_ZKCevgxVtuyG4-1I"},
{"content":{"body":"relevant test262 test `built-ins/TypedArray/prototype/set/array-arg-targetbuffer-detached-on-get-src-value-no-throw.js` ","format":"org.matrix.custom.html","formatted_body":"relevant test262 test <code>built-ins/TypedArray/prototype/set/array-arg-targetbuffer-detached-on-get-src-value-no-throw.js</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"relevant test262 test `built-ins/TypedArray/prototype/set/array-arg-targetbuffer-detached-on-get-src-value-no-throw.js` ","mimetype":"text/plain"},{"body":"relevant test262 test <code>built-ins/TypedArray/prototype/set/array-arg-targetbuffer-detached-on-get-src-value-no-throw.js</code>","mimetype":"text/html"}]},"ts":1658466554730,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3tMJW0Atxr0PfNT0qhuVuYDQU_7hBjR_CY3Mjokmgv0"},
{"content":{"body":" * can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","format":"org.matrix.custom.html","formatted_body":" * can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","m.new_content":{"body":"can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","format":"org.matrix.custom.html","formatted_body":"can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","mimetype":"text/plain"},{"body":"can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$hAembQQxwGbkVQ0KDGzV_Hz1PUPUJ6AwbEPiPDZHyCM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * can anyone confirm... when `%TypedArray%.prototype.set` was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does `Assert: IsDetached(ta) is false`, so we're hitting a spec assertion there now?","mimetype":"text/plain"},{"body":" * can anyone confirm... when <code>%TypedArray%.prototype.set</code> was changed to not check detached every loop iteration, it seems to have let that fall through to Get/SetValueInBuffer, which immediately does <code>Assert: IsDetached(ta) is false</code>, so we're hitting a spec assertion there now?","mimetype":"text/html"}]},"ts":1658466572030,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hDhccuSJh0zhtrvCo9Bg1OcKHz0HK1oITzGDHTTruq8"},
{"content":{"body":"wait no","msgtype":"m.text","org.matrix.msc1767.text":"wait no"},"ts":1658466681374,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$hYbwdt7qkTZno-3knXsokykkC1gZvFP8iNg2yjWq5Wk"},
{"content":{"body":"SetValueInBuffer is only reached if IsValidIntegerIndex is true","msgtype":"m.text","org.matrix.msc1767.text":"SetValueInBuffer is only reached if IsValidIntegerIndex is true"},"ts":1658466710699,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$OH_N1Ad6lSNdiMKxJYQThjHkJBX8s3mC9nQcCl1yGlU"},
{"content":{"body":"but it's false if detached","msgtype":"m.text","org.matrix.msc1767.text":"but it's false if detached"},"ts":1658466716135,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZSEv8D7KVSU2V1P76-71dLtJ1BKNQ58-XjrXeuUXJEg"},
{"content":{"body":"oh i see","msgtype":"m.text","org.matrix.msc1767.text":"oh i see"},"ts":1658466809996,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Lc574e_idKl7F47gc-uvPFVd3ci-Nqut7v2cITL9Hxc"},
{"content":{"body":"> <@devsnek:matrix.org> my guess is that the outer `regexp.test` is the actual test, and the inner one is just to find which character failed if one did?\n\nPrecisely correct. It was introduced to unicode-property-escapes-tests in https://github.com/mathiasbynens/unicode-property-escapes-tests/commit/cdd000582bf44c43d41c921efdaebdacb48dd10d","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$iCLpx3zzw_t3TuPs1vPUX8sxnaJs47CwuD2_YvCycIo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>my guess is that the outer <code>regexp.test</code> is the actual test, and the inner one is just to find which character failed if one did?</blockquote></mx-reply>Precisely correct. It was introduced to unicode-property-escapes-tests in https://github.com/mathiasbynens/unicode-property-escapes-tests/commit/cdd000582bf44c43d41c921efdaebdacb48dd10d","m.relates_to":{"m.in_reply_to":{"event_id":"$iCLpx3zzw_t3TuPs1vPUX8sxnaJs47CwuD2_YvCycIo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> my guess is that the outer `regexp.test` is the actual test, and the inner one is just to find which character failed if one did?\n\nPrecisely correct. It was introduced to unicode-property-escapes-tests in https://github.com/mathiasbynens/unicode-property-escapes-tests/commit/cdd000582bf44c43d41c921efdaebdacb48dd10d","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$iCLpx3zzw_t3TuPs1vPUX8sxnaJs47CwuD2_YvCycIo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>my guess is that the outer <code>regexp.test</code> is the actual test, and the inner one is just to find which character failed if one did?</blockquote></mx-reply>Precisely correct. It was introduced to unicode-property-escapes-tests in https://github.com/mathiasbynens/unicode-property-escapes-tests/commit/cdd000582bf44c43d41c921efdaebdacb48dd10d","mimetype":"text/html"}]},"ts":1658496577343,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Yf7PT5-4PKpcoeDn6-hD4-icepd2h8usyY4t_dFy2AA"},
{"content":{"body":"interesting indeed. i found that if i only run the inner loop, engine262 actually does pass these tests, though it takes a REALLY long time :P","msgtype":"m.text","org.matrix.msc1767.text":"interesting indeed. i found that if i only run the inner loop, engine262 actually does pass these tests, though it takes a REALLY long time :P"},"ts":1658516851223,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SyLM2G7ly4qloAkb74LeRGu2JUOPWxLK6FcoKdlWQYg"},
{"content":{"body":"i also tried running it in bun for tail calls but i realized that regex continuations are not always tail recursive so it still overflows","msgtype":"m.text","org.matrix.msc1767.text":"i also tried running it in bun for tail calls but i realized that regex continuations are not always tail recursive so it still overflows"},"ts":1658516957337,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$AGTNbO2-ZOYnP0T2rcbxrUj3QhTzbEeNJ1Wk6TfXKm8"}
]