[
{"content":{"body":"> <@jasnell:matrix.org> Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of `ArrayBuffer` in a way that allows the result to still be an `ArrayBuffer` that can be wrapped with a `TypedArray`. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md\n> \n> For a quick example:\n> \n> const ab1 = new ArrayBuffer(10);\n> const ab2 = new ArrayBuffer(20);\n> const combined = ArrayBuffer.of(ab1, ab2);\n> const u8 = new Uint8Array(combined);\n> \n> Here, `combined` is effectively a list of the component `ArrayBuffer` instances that is itself an `ArrayBuffer`.\n> \n> The idea here is adapted from the very popular npm module `bl` which implements a similar idea around Node.js `Buffer` interface but in a way that still has a number of warts.\n> \n> There is a more detailed example in the explainer. @littledan and ljharb have already graciously provided some extremely helpful feedback.\n\nOh I've been wanting this for years. I think I wrote an issue somewhere!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br><p>Hello all. I've got a proposal that I'd like to surface for consideration. I put this together after speaking a bit with Matteo Collina and @ljharb... The fundamental idea is to introduce a mechanism for zero-copy concatenation of <code>ArrayBuffer</code> in a way that allows the result to still be an <code>ArrayBuffer</code> that can be wrapped with a <code>TypedArray</code>. The explainer is here: https://github.com/jasnell/proposal-zero-copy-arraybuffer-list/blob/main/README.md</p>\n<p>For a quick example:</p>\n<p>const ab1 = new ArrayBuffer(10);<br />const ab2 = new ArrayBuffer(20);<br />const combined = ArrayBuffer.of(ab1, ab2);<br />const u8 = new Uint8Array(combined);</p>\n<p>Here, <code>combined</code> is effectively a list of the component <code>ArrayBuffer</code> instances that is itself an <code>ArrayBuffer</code>.</p>\n<p>The idea here is adapted from the very popular npm module <code>bl</code> which implements a similar idea around Node.js <code>Buffer</code> interface but in a way that still has a number of warts.</p>\n<p>There is a more detailed example in the explainer. @littledan and <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> have already graciously provided some extremely helpful feedback.</p>\n</blockquote></mx-reply>Oh I've been wanting this for years. I think I wrote an issue somewhere!","m.mentions":{"user_ids":["@jasnell:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1Dx-2MQ7WnU6VEVQsFP2BnftgnyTx2Sl9HVj4rwPBpU"}},"msgtype":"m.text"},"ts":1696466620009,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$suY338Be9z3OdXKJMOjfaXwM8OB7XoCsFp4Q6020PK8"},
{"content":{"body":"I also still really want CoW ArrayBuffer slices. I still do not understand how it would introduce much more complexity than the existing detached checks already required.","m.mentions":{},"msgtype":"m.text"},"ts":1696467046701,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4mdUiUROXlSvnmuI9NCaLX2WBuwZGfz-8IO0gARGFt0"}
]