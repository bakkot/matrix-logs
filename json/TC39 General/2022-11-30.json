[
{"content":{"body":"littledan: you may interested in this prototyping","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: you may interested in this prototyping","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: you may interested in this prototyping","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: you may interested in this prototyping","mimetype":"text/html"}]},"ts":1669818166576,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6AGplLupaG7l4ZWhPRScF9uVfrxco48P09lEot3zBVc"},
{"content":{"body":"implemented `import(spec, { reflect: true })` in webpack","format":"org.matrix.custom.html","formatted_body":"implemented <code>import(spec, { reflect: true })</code> in webpack","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"implemented `import(spec, { reflect: true })` in webpack","mimetype":"text/plain"},{"body":"implemented <code>import(spec, { reflect: true })</code> in webpack","mimetype":"text/html"}]},"ts":1669818181639,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$INKKhXMSCTMMFWRiNwcOl-tvf37IQI-a6xmClYPFp4s"},
{"content":{"body":" * implemented `import(spec, { reflect: true })` in webpack","format":"org.matrix.custom.html","formatted_body":" * implemented <code>import(spec, { reflect: true })</code> in webpack","m.new_content":{"body":"implemented `import(spec, { reflect: true })` in webpack","format":"org.matrix.custom.html","formatted_body":"implemented <code>import(spec, { reflect: true })</code> in webpack","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"implemented `import(spec, { reflect: true })` in webpack","mimetype":"text/plain"},{"body":"implemented <code>import(spec, { reflect: true })</code> in webpack","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$INKKhXMSCTMMFWRiNwcOl-tvf37IQI-a6xmClYPFp4s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * implemented `import(spec, { reflect: true })` in webpack","mimetype":"text/plain"},{"body":" * implemented <code>import(spec, { reflect: true })</code> in webpack","mimetype":"text/html"}]},"ts":1669818207695,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$fZaFxyxdWaTElczXMaJjkLMNpAdahZM7GcHOHRcBHtE"},
{"content":{"body":"> <@jackworks:matrix.org> littledan: you may interested in this prototyping\n\nCool!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%246AGplLupaG7l4ZWhPRScF9uVfrxco48P09lEot3zBVc\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: you may interested in this prototyping</blockquote></mx-reply>Cool!","m.relates_to":{"m.in_reply_to":{"event_id":"$6AGplLupaG7l4ZWhPRScF9uVfrxco48P09lEot3zBVc"}},"msgtype":"m.text"},"ts":1669818258020,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P9eve7A6K9XOnE_a1Y0ZqVf21F_VoCFaq4S1PlBlruY"},
{"content":{"body":"Ljharb, is there an issue tracking your concern?","msgtype":"m.text"},"ts":1669818271722,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CFUPnLEjRqhkelPDC5HHfOrMWCNiTzsO3Uae_EqQ3Oc"},
{"content":{"body":"Or Justin?","msgtype":"m.text"},"ts":1669818288341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$evweScIywKw7tnv_8wUnDmUH44IrZV6yZ7UzSHaCkao"},
{"content":{"body":"for the module stuff?","msgtype":"m.text","org.matrix.msc1767.text":"for the module stuff?"},"ts":1669818295537,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LX2yg1mmqymN4rZn2wW8lgbT4f6vG4B5g3_ajBhBT6Y"},
{"content":{"body":"Yes, the extensibility question","msgtype":"m.text"},"ts":1669818313321,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EGNzpjuZRlrrK_U5m2PTfAV1D1B2JFogviS5Sat-X1s"},
{"content":{"body":"We need to have this discussion bringing everyone together. That was an important thing I learned today.","msgtype":"m.text"},"ts":1669818337775,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DBmqwMYHjiojaicaSyw8TxXj5jEwfg2DKZVsXDoJyvo"},
{"content":{"body":"my concerns came up during import assertions, and are very documented; i don't think i've documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions","msgtype":"m.text","org.matrix.msc1767.text":"my concerns came up during import assertions, and are very documented; i don't think i've documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions"},"ts":1669818342527,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5_8GBfQHO-BNcDh21Sht4jh7QGY3pV5_6s1YviusV8M"},
{"content":{"body":"if someone has a use case they should bring it to tc39, we don't provide programmable syntax","msgtype":"m.text","org.matrix.msc1767.text":"if someone has a use case they should bring it to tc39, we don't provide programmable syntax"},"ts":1669818359722,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KBFNGJD-QKmyvrNBUjM-PlTBxJVVMPD5w_ffo5vxHMk"},
{"content":{"body":"Right, can we move this discussion to an issue thread so you and Justin can lay out the arguments?","msgtype":"m.text"},"ts":1669818395591,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C43JyOO0CVp7h6IPHHAWHJF6ZDkHggKqBE1F0en74VY"},
{"content":{"body":"> <@ljharb:matrix.org> my concerns came up during import assertions, and are very documented; i don't think i've documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions\n\nand they use `import x from \"!raw-loader!./file.txt\"` in days before.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$5_8GBfQHO-BNcDh21Sht4jh7QGY3pV5_6s1YviusV8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>my concerns came up during import assertions, and are very documented; i don&#39;t think i&#39;ve documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions</blockquote></mx-reply>and they use <code>import x from &quot;!raw-loader!./file.txt&quot;</code> in days before.","m.relates_to":{"m.in_reply_to":{"event_id":"$5_8GBfQHO-BNcDh21Sht4jh7QGY3pV5_6s1YviusV8M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> my concerns came up during import assertions, and are very documented; i don't think i've documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions\n\nand they use `import x from \"!raw-loader!./file.txt\"` in days before.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$5_8GBfQHO-BNcDh21Sht4jh7QGY3pV5_6s1YviusV8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>my concerns came up during import assertions, and are very documented; i don&#39;t think i&#39;ve documented yet how my fears exactly came true as predicted as tools tried to inject all sorts of wacky syntax forms into assertions</blockquote></mx-reply>and they use <code>import x from &quot;!raw-loader!./file.txt&quot;</code> in days before.","mimetype":"text/html"}]},"ts":1669818403911,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XiRFch0GlhV1YWRPI7Hlf5LhuOPNTw5k3VSXcheMIDU"},
{"content":{"body":"(I think it will get lost in this chat and this is a major thing for us all to follow up on)","msgtype":"m.text"},"ts":1669818413297,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ABUfzeUMLnnz0V88YVKvenleWsnTfQdrGI1-YENJVv0"},
{"content":{"body":"(And, to be clear, I am Ok with either outcome)","msgtype":"m.text"},"ts":1669818439136,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WnCw1saXF1YgFTPBlwrs139Y7MirhoFxmcRdJtNE_kQ"},
{"content":{"body":"There was an issue, and several other bundlers voiced the same concern as me.","msgtype":"m.text","org.matrix.msc1767.text":"There was an issue, and several other bundlers voiced the same concern as me."},"ts":1669818444789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WYnbxb_TSxnuobSJ6JVrliUK_lz0ErYsZvaM4UM66po"},
{"content":{"body":"> <@jackworks:matrix.org> and they use `import x from \"!raw-loader!./file.txt\"` in days before.\n\nyes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$XiRFch0GlhV1YWRPI7Hlf5LhuOPNTw5k3VSXcheMIDU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>and they use <code>import x from \"!raw-loader!./file.txt\"</code> in days before.</blockquote></mx-reply>yes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time","m.relates_to":{"m.in_reply_to":{"event_id":"$XiRFch0GlhV1YWRPI7Hlf5LhuOPNTw5k3VSXcheMIDU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> and they use `import x from \"!raw-loader!./file.txt\"` in days before.\n\nyes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$XiRFch0GlhV1YWRPI7Hlf5LhuOPNTw5k3VSXcheMIDU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>and they use <code>import x from \"!raw-loader!./file.txt\"</code> in days before.</blockquote></mx-reply>yes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time","mimetype":"text/html"}]},"ts":1669818446719,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HiP0ZBQq-oNnWHM0TyH5NqK8XJIES2Q-VHIEsIZrZdY"},
{"content":{"body":"The loader syntax didn't go away, it's just done in separate ways now.","msgtype":"m.text","org.matrix.msc1767.text":"The loader syntax didn't go away, it's just done in separate ways now."},"ts":1669818477196,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0OCoCRSIJ2u-OskiewACp9BBNY4gP-BsKRoEiZasi8I"},
{"content":{"body":"Every bunder reinvents it for themselves","msgtype":"m.text","org.matrix.msc1767.text":"Every bunder reinvents it for themselves"},"ts":1669818495789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bXjaBETnsFLUnMxH475mYHzKv6-9sMK0GemISPaMXBo"},
{"content":{"body":"extensible syntax is exactly every bundler reinventing it for themselves","msgtype":"m.text","org.matrix.msc1767.text":"extensible syntax is exactly every bundler reinventing it for themselves"},"ts":1669818519833,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RFPHhmqTmM1N5AuYEpzD7hepbChJdKzI3If_lGAcajE"},
{"content":{"body":"> <@ljharb:matrix.org> yes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time\n\nIt sounds like this remains a point of disagreement within the community maybe","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24HiP0ZBQq-oNnWHM0TyH5NqK8XJIES2Q-VHIEsIZrZdY\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes, and the ecosystem recognized how terrible that is which is why it's been a bad practice to use webpack-specific loader syntax for a long time</blockquote></mx-reply>It sounds like this remains a point of disagreement within the community maybe","m.relates_to":{"m.in_reply_to":{"event_id":"$HiP0ZBQq-oNnWHM0TyH5NqK8XJIES2Q-VHIEsIZrZdY"}},"msgtype":"m.text"},"ts":1669818523826,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$flzQzWmiRkjD5pi531VEqV35b4cnR5-XIqlzI2GjKOg"},
{"content":{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","format":"org.matrix.custom.html","formatted_body":"if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","mimetype":"text/plain"},{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","mimetype":"text/html"}]},"ts":1669818536134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p0VWUIowfvaCXAAUdMv9f0vflpS3e20faM-myNP4Vds"},
{"content":{"body":" * if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","format":"org.matrix.custom.html","formatted_body":" * if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","m.new_content":{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","format":"org.matrix.custom.html","formatted_body":"if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","mimetype":"text/plain"},{"body":"if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$p0VWUIowfvaCXAAUdMv9f0vflpS3e20faM-myNP4Vds","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * if we want to avoid that (which i think we do) then the actual use cases need litigating _here_","mimetype":"text/plain"},{"body":" * if we want to avoid that (which i think we do) then the actual use cases need litigating <em>here</em>","mimetype":"text/html"}]},"ts":1669818537147,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tbF7RgaNpfskaAozBnXMvDd_mTa1-ccZrEs0Hz8AhDo"},
{"content":{"body":"I don’t think any one of us could speak for the ecosystem any more than we can speak for TC39","msgtype":"m.text"},"ts":1669818545569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$APTkjcN-4dAzkAPJOjIOu_7H71AuPSQ9hk3A_ouuiQQ"},
{"content":{"body":"of course","msgtype":"m.text","org.matrix.msc1767.text":"of course"},"ts":1669818556564,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AC0lzZQb0SJTbvbkEdc4scgkx9yZSZEndXCJpGmxee4"},
{"content":{"body":"i'll qualify if it's really needed, \"it seems like much of the ecosystem has\"","msgtype":"m.text","org.matrix.msc1767.text":"i'll qualify if it's really needed, \"it seems like much of the ecosystem has\""},"ts":1669818580118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T7dvPiqXkOeQXNM_fL7vC2BdzFVsouwgLG_O6-RwSL4"},
{"content":{"body":"and to be fair i'm more talking about packages; it doesn't matter much what people do in their own apps","msgtype":"m.text","org.matrix.msc1767.text":"and to be fair i'm more talking about packages; it doesn't matter much what people do in their own apps"},"ts":1669818619274,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Sh_8wLKLJmZSV8Kx2i1kH3C8geEeoHIrsznjGlneEDs"},
{"content":{"body":"things become better after we have `import.meta`. Now many bundlers support `new URL(\"./spec\", import.meta.url)` as a way to reflection and it also works in real browser","format":"org.matrix.custom.html","formatted_body":"things become better after we have <code>import.meta</code>. Now many bundlers support <code>new URL(&quot;./spec&quot;, import.meta.url)</code> as a way to reflection and it also works in real browser","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"things become better after we have `import.meta`. Now many bundlers support `new URL(\"./spec\", import.meta.url)` as a way to reflection and it also works in real browser","mimetype":"text/plain"},{"body":"things become better after we have <code>import.meta</code>. Now many bundlers support <code>new URL(&quot;./spec&quot;, import.meta.url)</code> as a way to reflection and it also works in real browser","mimetype":"text/html"}]},"ts":1669818653770,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NKXdOoJG8i6SOrtztPt0OOVfIJylrLfhL3E_vRXArQk"},
{"content":{"body":"I ideally would like bare JS to have the same capabilities as bundlers, except that bundlers also put everything in a single file","msgtype":"m.text","org.matrix.msc1767.text":"I ideally would like bare JS to have the same capabilities as bundlers, except that bundlers also put everything in a single file"},"ts":1669818662890,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6RQ_RaRqFRcuOIFvDQ4YnEQYQ9CPWJu72RecGDVIjyM"},
{"content":{"body":"It's nice to have image-loader in webpack, but I would also like it to work without webpack","msgtype":"m.text","org.matrix.msc1767.text":"It's nice to have image-loader in webpack, but I would also like it to work without webpack"},"ts":1669818675569,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$btn5kdm-rwV1oBpeYg37fg1Kx2drUpN6u5FRlK296zA"},
{"content":{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","format":"org.matrix.custom.html","formatted_body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/plain"},{"body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/html"}]},"ts":1669818758394,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tSPS04QyewkZoONX9KP3tO429ReQZUQz71ZmXVJQsU4"},
{"content":{"body":"TC39 is not an appropriate place for all of the concerns bundler have to deal with, so I don't think that's possible","msgtype":"m.text","org.matrix.msc1767.text":"TC39 is not an appropriate place for all of the concerns bundler have to deal with, so I don't think that's possible"},"ts":1669818768848,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YtkBmao1wOloCDApMLMKI1bzs5Y_mI7MC70ZvTsTCu4"},
{"content":{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax","format":"org.matrix.custom.html","formatted_body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax","m.new_content":{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax","format":"org.matrix.custom.html","formatted_body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax","mimetype":"text/plain"},{"body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tSPS04QyewkZoONX9KP3tO429ReQZUQz71ZmXVJQsU4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax","mimetype":"text/plain"},{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax","mimetype":"text/html"}]},"ts":1669818803087,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$YDp8KGhpDU1ttMLNcn8RFiX1ffuN3Oec70WVz1cGFoc"},
{"content":{"body":"Which concerns, for example? I guess code splitting, but that still falls under the \"putting multiple things in the same file\" category","msgtype":"m.text","org.matrix.msc1767.text":"Which concerns, for example? I guess code splitting, but that still falls under the \"putting multiple things in the same file\" category"},"ts":1669818810190,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$B_izXHtVObuFEu4MbZTR_cKzPE1AIfisa4VhtxoggEo"},
{"content":{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too","format":"org.matrix.custom.html","formatted_body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too","m.new_content":{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too","format":"org.matrix.custom.html","formatted_body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too","mimetype":"text/plain"},{"body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tSPS04QyewkZoONX9KP3tO429ReQZUQz71ZmXVJQsU4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too","mimetype":"text/plain"},{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too","mimetype":"text/html"}]},"ts":1669818818127,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Q39nDMRgd9MacpMFdqnsuwpNgSPdFL-R5w4ku7B9-pA"},
{"content":{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","format":"org.matrix.custom.html","formatted_body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","m.new_content":{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","format":"org.matrix.custom.html","formatted_body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/plain"},{"body":"I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tSPS04QyewkZoONX9KP3tO429ReQZUQz71ZmXVJQsU4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by `import` syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/plain"},{"body":" * I don't allow any loader in our project that convert any non JS files into a JS by <code>import</code> syntax unless the host can do that too (e.g. we allow JSON imports)","mimetype":"text/html"}]},"ts":1669818860163,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$mZmJHk8hCBEZ-EdJ_IBM9fBM7WlwIgiPGjRNomdA7x4"},
{"content":{"body":"i don't mean that tc39 has to provide every semantic, since that isn't always possible, but it should still be discussed","msgtype":"m.text","org.matrix.msc1767.text":"i don't mean that tc39 has to provide every semantic, since that isn't always possible, but it should still be discussed"},"ts":1669818864959,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m2HS4TJB4IK-YKH0GUjY02pcAOU375jERbNk4QpBkOQ"},
{"content":{"body":"- Importing an image with blurry placeholder, intrinsic size, etc.\n- Import bytes buffers\n- Transforming files for the importer's usecase\n- Annotating metadata\n(these are just the things I did last week)","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Importing an image with blurry placeholder, intrinsic size, etc.</li>\n<li>Import bytes buffers</li>\n<li>Transforming files for the importer's usecase</li>\n<li>Annotating metadata<br>(these are just the things I did last week)</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"- Importing an image with blurry placeholder, intrinsic size, etc.\n- Import bytes buffers\n- Transforming files for the importer's usecase\n- Annotating metadata\n(these are just the things I did last week)","mimetype":"text/plain"},{"body":"<ul>\n<li>Importing an image with blurry placeholder, intrinsic size, etc.</li>\n<li>Import bytes buffers</li>\n<li>Transforming files for the importer's usecase</li>\n<li>Annotating metadata<br>(these are just the things I did last week)</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1669818905333,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4W15943K1Vb8Qmw5k-dTksp2GvxQbzW2CYRX-632J6o"},
{"content":{"body":"> <@jridgewell:matrix.org> - Importing an image with blurry placeholder, intrinsic size, etc.\n> - Import bytes buffers\n> - Transforming files for the importer's usecase\n> - Annotating metadata\n> (these are just the things I did last week)\n\nWell, for example Module/ModuleSource can solve the first three by providing custom module loaders","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4W15943K1Vb8Qmw5k-dTksp2GvxQbzW2CYRX-632J6o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br /><ul>\n<li>Importing an image with blurry placeholder, intrinsic size, etc.</li>\n<li>Import bytes buffers</li>\n<li>Transforming files for the importer's usecase</li>\n<li>Annotating metadata<br>(these are just the things I did last week)</li>\n</ul>\n</blockquote></mx-reply>Well, for example Module/ModuleSource can solve the first three by providing custom module loaders","m.relates_to":{"m.in_reply_to":{"event_id":"$4W15943K1Vb8Qmw5k-dTksp2GvxQbzW2CYRX-632J6o"}},"msgtype":"m.text"},"ts":1669818949430,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GtnARfe6PfxstJSLTrU89IHXVTqtkgKs_5S9RHahUTE"},
{"content":{"body":"It's all module reflection. TC39 has a need for WASM (that I agree with!), and bundler have a much lager need. I'd like a single solution to the full problem space.","msgtype":"m.text","org.matrix.msc1767.text":"It's all module reflection. TC39 has a need for WASM (that I agree with!), and bundler have a much lager need. I'd like a single solution to the full problem space."},"ts":1669818954552,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sC52ECFGz0KTg82q1XuLU9kqg24yHpRrifF0WEUiDFU"},
{"content":{"body":"and why do these need parseable syntax instead of a comment?","msgtype":"m.text","org.matrix.msc1767.text":"and why do these need parseable syntax instead of a comment?"},"ts":1669818955161,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T3ME9xo-JxnFvfxr_7lb_iCBo9wBUD8sUP30J5AKNg0"},
{"content":{"body":"These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource.","msgtype":"m.text","org.matrix.msc1767.text":"These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource."},"ts":1669818983875,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$76QDxjA06XNRgyCLiqhATWbH1sNZEoHXJA_dl2pnXV8"},
{"content":{"body":" * These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource.","m.new_content":{"body":"These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource.","msgtype":"m.text","org.matrix.msc1767.text":"These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource."},"m.relates_to":{"event_id":"$76QDxjA06XNRgyCLiqhATWbH1sNZEoHXJA_dl2pnXV8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * These are good reasons to allow userspace to do more without our permission, as would be possible with Module and ModuleSource."},"ts":1669818997775,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wmaJMzTBjTOgyhV7WITHQrjchlkdEscm-T_nHGx8ibc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Well, for example Module/ModuleSource can solve the first three by providing custom module loaders\n\nOk I see: you would want to pass data from the import statement to the import hook","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$GtnARfe6PfxstJSLTrU89IHXVTqtkgKs_5S9RHahUTE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Well, for example Module/ModuleSource can solve the first three by providing custom module loaders</blockquote></mx-reply>Ok I see: you would want to pass data from the import statement to the import hook","m.relates_to":{"m.in_reply_to":{"event_id":"$GtnARfe6PfxstJSLTrU89IHXVTqtkgKs_5S9RHahUTE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> Well, for example Module/ModuleSource can solve the first three by providing custom module loaders\n\nOk I see: you would want to pass data from the import statement to the import hook","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$GtnARfe6PfxstJSLTrU89IHXVTqtkgKs_5S9RHahUTE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Well, for example Module/ModuleSource can solve the first three by providing custom module loaders</blockquote></mx-reply>Ok I see: you would want to pass data from the import statement to the import hook","mimetype":"text/html"}]},"ts":1669818999651,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UYPZiRbhVPzwvKlpL6QHGz0EfqL3kWsDU3LrZgm1yYU"},
{"content":{"body":"And \"the bundler\" is equivalent to `Module` with a custom import hook","format":"org.matrix.custom.html","formatted_body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And \"the bundler\" is equivalent to `Module` with a custom import hook","mimetype":"text/plain"},{"body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","mimetype":"text/html"}]},"ts":1669819039342,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$l_8AT6XcnL4Hm1l_hacB5e-e7VTZI-HrST6_xS30dWo"},
{"content":{"body":" * And \"the bundler\" is equivalent to `Module` with custom import hook","format":"org.matrix.custom.html","formatted_body":" * And &quot;the bundler&quot; is equivalent to <code>Module</code> with custom import hook","m.new_content":{"body":"And \"the bundler\" is equivalent to `Module` with custom import hook","format":"org.matrix.custom.html","formatted_body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with custom import hook","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And \"the bundler\" is equivalent to `Module` with custom import hook","mimetype":"text/plain"},{"body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with custom import hook","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$l_8AT6XcnL4Hm1l_hacB5e-e7VTZI-HrST6_xS30dWo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And \"the bundler\" is equivalent to `Module` with custom import hook","mimetype":"text/plain"},{"body":" * And &quot;the bundler&quot; is equivalent to <code>Module</code> with custom import hook","mimetype":"text/html"}]},"ts":1669819045220,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QzZjR6JLo-WhkWfUBW5nq3tF4fkfwN4rN3RrK_L7pdc"},
{"content":{"body":" * And \"the bundler\" is equivalent to `Module` with a custom import hook","format":"org.matrix.custom.html","formatted_body":" * And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","m.new_content":{"body":"And \"the bundler\" is equivalent to `Module` with a custom import hook","format":"org.matrix.custom.html","formatted_body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And \"the bundler\" is equivalent to `Module` with a custom import hook","mimetype":"text/plain"},{"body":"And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$l_8AT6XcnL4Hm1l_hacB5e-e7VTZI-HrST6_xS30dWo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And \"the bundler\" is equivalent to `Module` with a custom import hook","mimetype":"text/plain"},{"body":" * And &quot;the bundler&quot; is equivalent to <code>Module</code> with a custom import hook","mimetype":"text/html"}]},"ts":1669819059419,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hsudhjIdvSn4NpxNmTncFR9mKrx1yR3KAKyNd8n-JyY"},
{"content":{"body":"FWIW I lean towards what Justin is saying and sort of regret naming the keyword “assert” for that reason. I don’t feel like the assertion mental model resonates with anyone.","msgtype":"m.text"},"ts":1669819083921,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ljp1NyDUSbO-kNo2LaFVsB2xUmhRUVXqgETmqxihQSY"},
{"content":{"body":"I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?"},"ts":1669819089671,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Sv8IPH75VK4T6RG9bWaATAa9w6v0mtTmK74SFRzqJR8"},
{"content":{"body":" * I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?","m.new_content":{"body":"I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?"},"m.relates_to":{"event_id":"$Sv8IPH75VK4T6RG9bWaATAa9w6v0mtTmK74SFRzqJR8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?"},"ts":1669819104006,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yQaIkNKTANC86ZUJ7EjfS9RHvzygD_Scadsgo3iPJHY"},
{"content":{"body":"I can't have a bunder output that uses `eval()` in any form","format":"org.matrix.custom.html","formatted_body":"I can't have a bunder output that uses <code>eval()</code> in any form","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't have a bunder output that uses `eval()` in any form","mimetype":"text/plain"},{"body":"I can't have a bunder output that uses <code>eval()</code> in any form","mimetype":"text/html"}]},"ts":1669819129066,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$o8m0hjFR7gN98qhvzD9FtxoV4bIPS3SkSCJPCD8Ec30"},
{"content":{"body":"It's going to immediately fail in CSP","msgtype":"m.text","org.matrix.msc1767.text":"It's going to immediately fail in CSP"},"ts":1669819137029,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4DhAmdNYY5AgW6XhaYU_O18lYdoDb5PtqZsLXMnwRq4"},
{"content":{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","format":"org.matrix.custom.html","formatted_body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/plain"},{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$Sv8IPH75VK4T6RG9bWaATAa9w6v0mtTmK74SFRzqJR8"}}},"ts":1669819148423,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fwgEor5ityqnnHgzpkfOUJL6_GPPYcPAhXiBvaFG7-M"},
{"content":{"body":"> <@jridgewell:matrix.org> I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?\n\n * Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Sv8IPH75VK4T6RG9bWaATAa9w6v0mtTmK74SFRzqJR8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?</blockquote></mx-reply> * Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","m.new_content":{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","format":"org.matrix.custom.html","formatted_body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/plain"},{"body":"Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fwgEor5ityqnnHgzpkfOUJL6_GPPYcPAhXiBvaFG7-M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?\n\n * Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Sv8IPH75VK4T6RG9bWaATAa9w6v0mtTmK74SFRzqJR8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don't understand the ModuleSource suggestion, relying on runtime evaluation means it's unacceptable for most of the web?</blockquote></mx-reply> * Pardon module source with a lower case. Module blocks provide module sources with CSP annotation.","mimetype":"text/html"}]},"ts":1669819171493,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0Hj8I-lAIcRljNYF8h4BVSGdF5WpHAexVCol1UOOme8"},
{"content":{"body":"> <@jridgewell:matrix.org> I can't have a bunder output that uses `eval()` in any form\n\nI am very sorry to reply with a link to a proposal that has not been presented in detail (other in in Kris' module harmony presentations), but with https://github.com/tc39/proposal-compartments/blob/master/2-virtual-module-source.md we could have custom sources - even not created from module blocks - without eval.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$o8m0hjFR7gN98qhvzD9FtxoV4bIPS3SkSCJPCD8Ec30?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I can't have a bunder output that uses <code>eval()</code> in any form</blockquote></mx-reply>I am very sorry to reply with a link to a proposal that has not been presented in detail (other in in Kris' module harmony presentations), but with https://github.com/tc39/proposal-compartments/blob/master/2-virtual-module-source.md we could have custom sources - even not created from module blocks - without eval.","m.relates_to":{"m.in_reply_to":{"event_id":"$o8m0hjFR7gN98qhvzD9FtxoV4bIPS3SkSCJPCD8Ec30"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> I can't have a bunder output that uses `eval()` in any form\n\nI am very sorry to reply with a link to a proposal that has not been presented in detail (other in in Kris' module harmony presentations), but with https://github.com/tc39/proposal-compartments/blob/master/2-virtual-module-source.md we could have custom sources - even not created from module blocks - without eval.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$o8m0hjFR7gN98qhvzD9FtxoV4bIPS3SkSCJPCD8Ec30?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I can't have a bunder output that uses <code>eval()</code> in any form</blockquote></mx-reply>I am very sorry to reply with a link to a proposal that has not been presented in detail (other in in Kris' module harmony presentations), but with https://github.com/tc39/proposal-compartments/blob/master/2-virtual-module-source.md we could have custom sources - even not created from module blocks - without eval.","mimetype":"text/html"}]},"ts":1669819240088,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nl6ORdvLw_OlUpWSAO1-GAxjzfKbXQ2sb14Pv4i9JSo"},
{"content":{"body":"I would say, I don’t see why JSON modules shouldn’t have a source","msgtype":"m.text"},"ts":1669819270073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JNDF-9xLtpsSS-yWj-iXEB57eXQ2uc79ZP2hSBz9DK4"},
{"content":{"body":"> I would say, I don’t see why JSON modules shouldn’t have a source\n\nYeah, they probably should - that is up to the HTML integration though","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>I would say, I don’t see why JSON modules shouldn’t have a source</p>\n</blockquote>\n<p>Yeah, they probably should - that is up to the HTML integration though</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> I would say, I don’t see why JSON modules shouldn’t have a source\n\nYeah, they probably should - that is up to the HTML integration though","mimetype":"text/plain"},{"body":"<blockquote>\n<p>I would say, I don’t see why JSON modules shouldn’t have a source</p>\n</blockquote>\n<p>Yeah, they probably should - that is up to the HTML integration though</p>\n","mimetype":"text/html"}]},"ts":1669819294796,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AOa_zIp_t0bE5FWmlSVE3hwCbY7KuHA3J_KVaQilSak"},
{"content":{"body":"I mean, why can't WASM just do `fetch().then(eval)`?","format":"org.matrix.custom.html","formatted_body":"I mean, why can't WASM just do <code>fetch().then(eval)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean, why can't WASM just do `fetch().then(eval)`?","mimetype":"text/plain"},{"body":"I mean, why can't WASM just do <code>fetch().then(eval)</code>?","mimetype":"text/html"}]},"ts":1669819301422,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LLPLX3VIi3UiKjVS25H-W9YZ2d5DOB72MtW5p-TWVHM"},
{"content":{"body":"Like, isn't that the same suggestion as using Comparentments/ModuleSource/etc?","msgtype":"m.text","org.matrix.msc1767.text":"Like, isn't that the same suggestion as using Comparentments/ModuleSource/etc?"},"ts":1669819325692,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cKst_EDh2JoYxzVfY8JhqwZkvdKOsDlFYNRYJz_X2l8"},
{"content":{"body":"The use case seems the same to me, and I'm saying its much larger than just WASM.","msgtype":"m.text","org.matrix.msc1767.text":"The use case seems the same to me, and I'm saying its much larger than just WASM."},"ts":1669819357363,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$36-NqIu2-qO4u-nNPUYKYxpclb1TeOOrbLT4ZCIpzNg"},
{"content":{"body":"> <@littledan:matrix.org> FWIW I lean towards what Justin is saying and sort of regret naming the keyword “assert” for that reason. I don’t feel like the assertion mental model resonates with anyone.\n\nif you're going to call out \"ecosystem\" as being too broad then i'll call out that \"anyone\" is excluding me, for whom it resonates very strongly :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ljp1NyDUSbO-kNo2LaFVsB2xUmhRUVXqgETmqxihQSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>FWIW I lean towards what Justin is saying and sort of regret naming the keyword “assert” for that reason. I don’t feel like the assertion mental model resonates with anyone.</blockquote></mx-reply>if you're going to call out &quot;ecosystem&quot; as being too broad then i'll call out that &quot;anyone&quot; is excluding me, for whom it resonates very strongly :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$ljp1NyDUSbO-kNo2LaFVsB2xUmhRUVXqgETmqxihQSY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> FWIW I lean towards what Justin is saying and sort of regret naming the keyword “assert” for that reason. I don’t feel like the assertion mental model resonates with anyone.\n\nif you're going to call out \"ecosystem\" as being too broad then i'll call out that \"anyone\" is excluding me, for whom it resonates very strongly :-)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$ljp1NyDUSbO-kNo2LaFVsB2xUmhRUVXqgETmqxihQSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>FWIW I lean towards what Justin is saying and sort of regret naming the keyword “assert” for that reason. I don’t feel like the assertion mental model resonates with anyone.</blockquote></mx-reply>if you're going to call out &quot;ecosystem&quot; as being too broad then i'll call out that &quot;anyone&quot; is excluding me, for whom it resonates very strongly :-)","mimetype":"text/html"}]},"ts":1669819426171,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-GGJw5OV6kEX3zHAAth3ULd52AMoInIK8tUFfE469ho"},
{"content":{"body":"I cannot speak for the champions of compartments, but from what I see one major goal of that proposal is to allow writing safe runtime code:\n- either without eval (for example, with the virtual module sources I linked) - and this is what I'm most interested in\n- or with eval in a controlled way, because compartment could provide custom versions of the dangerous objects and properly confine the executed string","format":"org.matrix.custom.html","formatted_body":"<p>I cannot speak for the champions of compartments, but from what I see one major goal of that proposal is to allow writing safe runtime code:</p>\n<ul>\n<li>either without eval (for example, with the virtual module sources I linked) - and this is what I'm most interested in</li>\n<li>or with eval in a controlled way, because compartment could provide custom versions of the dangerous objects and properly confine the executed string</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I cannot speak for the champions of compartments, but from what I see one major goal of that proposal is to allow writing safe runtime code:\n- either without eval (for example, with the virtual module sources I linked) - and this is what I'm most interested in\n- or with eval in a controlled way, because compartment could provide custom versions of the dangerous objects and properly confine the executed string","mimetype":"text/plain"},{"body":"<p>I cannot speak for the champions of compartments, but from what I see one major goal of that proposal is to allow writing safe runtime code:</p>\n<ul>\n<li>either without eval (for example, with the virtual module sources I linked) - and this is what I'm most interested in</li>\n<li>or with eval in a controlled way, because compartment could provide custom versions of the dangerous objects and properly confine the executed string</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1669819485394,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QlVNer9dtv7hlk1WSiR2dDbF4F0KR6qbHeEJvdFHTYg"},
{"content":{"body":"> <@jridgewell:matrix.org> Like, isn't that the same suggestion as using Comparentments/ModuleSource/etc?\n\nTo be clear, `new Module((module {}).source)` is safe under CSP.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$cKst_EDh2JoYxzVfY8JhqwZkvdKOsDlFYNRYJz_X2l8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Like, isn&#39;t that the same suggestion as using Comparentments/ModuleSource/etc?</blockquote></mx-reply>To be clear, <code>new Module((module {}).source)</code> is safe under CSP.","m.relates_to":{"m.in_reply_to":{"event_id":"$cKst_EDh2JoYxzVfY8JhqwZkvdKOsDlFYNRYJz_X2l8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Like, isn't that the same suggestion as using Comparentments/ModuleSource/etc?\n\nTo be clear, `new Module((module {}).source)` is safe under CSP.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$cKst_EDh2JoYxzVfY8JhqwZkvdKOsDlFYNRYJz_X2l8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Like, isn&#39;t that the same suggestion as using Comparentments/ModuleSource/etc?</blockquote></mx-reply>To be clear, <code>new Module((module {}).source)</code> is safe under CSP.","mimetype":"text/html"}]},"ts":1669819496670,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_GTUSv_-bx7csCKD6pVCxfcWJtoxfO31sKEd0A3Vkvc"},
{"content":{"body":"And the `source` in question is a module source and an instance of `ModuleSource` but not constructed by `new ModuleSource(text)`","format":"org.matrix.custom.html","formatted_body":"And the <code>source</code> in question is a module source and an instance of <code>ModuleSource</code> but not constructed by <code>new ModuleSource(text)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And the `source` in question is a module source and an instance of `ModuleSource` but not constructed by `new ModuleSource(text)`","mimetype":"text/plain"},{"body":"And the <code>source</code> in question is a module source and an instance of <code>ModuleSource</code> but not constructed by <code>new ModuleSource(text)</code>","mimetype":"text/html"}]},"ts":1669819519772,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$m4EVH7BVDwdkc-KE1xhLlgz5oBl0DE83N_xB9BWdpU0"},
{"content":{"body":"Yes, but that doesn't solve the transform, reflection, custom behavior, because none of that is representable in a `module {}` block?","format":"org.matrix.custom.html","formatted_body":"Yes, but that doesn't solve the transform, reflection, custom behavior, because none of that is representable in a <code>module {}</code> block?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, but that doesn't solve the transform, reflection, custom behavior, because none of that is representable in a `module {}` block?","mimetype":"text/plain"},{"body":"Yes, but that doesn't solve the transform, reflection, custom behavior, because none of that is representable in a <code>module {}</code> block?","mimetype":"text/html"}]},"ts":1669819548272,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4Zu0_hp41iKD5eTfs11wZ1eMKcY2WyiNlOYZLiJAohc"},
{"content":{"body":"Correct. For that, Nicolò cites a proposal for virtual module sources, which would be able to do these things in JavaScript, without eval.","msgtype":"m.text","org.matrix.msc1767.text":"Correct. For that, Nicolò cites a proposal for virtual module sources, which would be able to do these things in JavaScript, without eval."},"ts":1669819587731,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KebCCPAmbhsa0VtAU487RRgnZdKEz-u5mh3yWJ8XU8g"},
{"content":{"body":"But to be clear, that proposal is a place-holder. We have a lot of work to do to make it viable.","msgtype":"m.text","org.matrix.msc1767.text":"But to be clear, that proposal is a place-holder. We have a lot of work to do to make it viable."},"ts":1669819620366,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$axMfOkR-A6cfWR1XSx8_OCUemCB6ArEfmf710zBVOE4"},
{"content":{"body":"Justin Ridgewell: today, bundlers _CANT_ bundle Wasm","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: today, bundlers <em>CANT</em> bundle Wasm","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: today, bundlers _CANT_ bundle Wasm","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: today, bundlers <em>CANT</em> bundle Wasm","mimetype":"text/html"}]},"ts":1669819635434,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HDN_YcsMPBNa2jUJb7Ozl1q5Kz3e1WFdKvNL3dhfAP4"},
{"content":{"body":"because there is no way to treat them as another node in the graph","msgtype":"m.text","org.matrix.msc1767.text":"because there is no way to treat them as another node in the graph"},"ts":1669819644717,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$lpvvBVI_IRpHgXNuUGBxGmiAIjL1DmeFHGTYLxeNznI"},
{"content":{"body":"the ESM integration is not sufficient for most Wasm modules","msgtype":"m.text","org.matrix.msc1767.text":"the ESM integration is not sufficient for most Wasm modules"},"ts":1669819655689,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$X4lxj1xvWUqgfzSwKpDmZPA0rQEmr5TIrLTMxAAvRJU"},
{"content":{"body":"since it implies import maps support for things like wasi, which is simply not tractable in most scenarios","msgtype":"m.text","org.matrix.msc1767.text":"since it implies import maps support for things like wasi, which is simply not tractable in most scenarios"},"ts":1669819668677,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$zZYRlKuHJul7mFTVA1Zy441o3JkRXc_-vxD1L0tHL1c"},
{"content":{"body":"They can manually instantiate an array buffer, though.","msgtype":"m.text","org.matrix.msc1767.text":"They can manually instantiate an array buffer, though."},"ts":1669819682582,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EDRWV-80j2tuzFP7XOMAMeaDURqiVnakdRAx5gI8UoI"},
{"content":{"body":"Wasm also does not support cycles, while Wasm import functions and memory bindings often rely on cyclical linkage","msgtype":"m.text","org.matrix.msc1767.text":"Wasm also does not support cycles, while Wasm import functions and memory bindings often rely on cyclical linkage"},"ts":1669819684197,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$j3YnAceULsAplFxfEgHwsfGPhGDaGxayN3j4Gx8Iwjk"},
{"content":{"body":"What's being suggested is a way to do it statically.","msgtype":"m.text","org.matrix.msc1767.text":"What's being suggested is a way to do it statically."},"ts":1669819699026,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Tty4wPlRVfAcly76PCHfCDwHeqW3CCKWa-BlZE-pjQQ"},
{"content":{"body":"manual instantiation is the reason bundling of Wasm is such bad UX right now","msgtype":"m.text","org.matrix.msc1767.text":"manual instantiation is the reason bundling of Wasm is such bad UX right now"},"ts":1669819701232,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$vR2nTdASvhsd4XMKaKItQONj3sdkN8RO-eTEVW4zwcY"},
{"content":{"body":"look at any Wasm project","msgtype":"m.text","org.matrix.msc1767.text":"look at any Wasm project"},"ts":1669819711169,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$kPgdOzQozo1rg36VLaLspkGD__dSidbQxtLwWZ-dM3o"},
{"content":{"body":"and there's an option to set `CUSTOM_WASM_URL`","format":"org.matrix.custom.html","formatted_body":"and there's an option to set <code>CUSTOM_WASM_URL</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and there's an option to set `CUSTOM_WASM_URL`","mimetype":"text/plain"},{"body":"and there's an option to set <code>CUSTOM_WASM_URL</code>","mimetype":"text/html"}]},"ts":1669819716643,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$FsgnokQ9tJw4lCEBFASvOsjVsEFWywMZyDy_TrPKW4c"},
{"content":{"body":"Right, which is **my exact argument for everything else**","format":"org.matrix.custom.html","formatted_body":"Right, which is <strong>my exact argument for everything else</strong>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Right, which is **my exact argument for everything else**","mimetype":"text/plain"},{"body":"Right, which is <strong>my exact argument for everything else</strong>","mimetype":"text/html"}]},"ts":1669819719291,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2iOGl4S1gEmKS7EB4JKQLG6oBeL83cBwdLakRnWfKZI"},
{"content":{"body":"because the patterns are simply not supported","msgtype":"m.text","org.matrix.msc1767.text":"because the patterns are simply not supported"},"ts":1669819726066,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$pG8IU4HeOHprUHb97JSz5kG0YBjIRgW4r-ioqsmbVDQ"},
{"content":{"body":"The problem space **is more than WASM**","format":"org.matrix.custom.html","formatted_body":"The problem space <strong>is more than WASM</strong>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The problem space **is more than WASM**","mimetype":"text/plain"},{"body":"The problem space <strong>is more than WASM</strong>","mimetype":"text/html"}]},"ts":1669819730228,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qgmJph8aSGV5YuXgxb-4Nel41jxE37NEe1aq_6myNzI"},
{"content":{"body":"I would prefer not to be told what the problem space of my proposal is :)","msgtype":"m.text","org.matrix.msc1767.text":"I would prefer not to be told what the problem space of my proposal is :)"},"ts":1669819748631,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$xipPUDnKGTU2fNrWqje0oDcUhjC-O94rGjbBh2snkUI"},
{"content":{"body":"> <@jridgewell:matrix.org> The problem space **is more than WASM**\n\nAgree very much.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qgmJph8aSGV5YuXgxb-4Nel41jxE37NEe1aq_6myNzI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>The problem space <strong>is more than WASM</strong></blockquote></mx-reply>Agree very much.","m.relates_to":{"m.in_reply_to":{"event_id":"$qgmJph8aSGV5YuXgxb-4Nel41jxE37NEe1aq_6myNzI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> The problem space **is more than WASM**\n\nAgree very much.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qgmJph8aSGV5YuXgxb-4Nel41jxE37NEe1aq_6myNzI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>The problem space <strong>is more than WASM</strong></blockquote></mx-reply>Agree very much.","mimetype":"text/html"}]},"ts":1669819750131,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8AxtD5WBl2RGFfHbxgc-lvdISJrtxVt3wI3tiu47zs4"},
{"content":{"body":"The ergonomics that I need to support for my bundler has all of this other uses","msgtype":"m.text","org.matrix.msc1767.text":"The ergonomics that I need to support for my bundler has all of this other uses"},"ts":1669819765089,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5LA_RPMGlMOhBPMVQIYqrCGqv9s-V6wdIx__LATPIfg"},
{"content":{"body":"I want (and other bundlers) want a solution that solves the full problem","msgtype":"m.text","org.matrix.msc1767.text":"I want (and other bundlers) want a solution that solves the full problem"},"ts":1669819791027,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xTz7zcEUEpao7P3RZ5PKsM7IjB0kimFMw3znrTJCfYQ"},
{"content":{"body":"right, and that needs to be weighed against these use cases, but please don't make us overreach our use cases","msgtype":"m.text","org.matrix.msc1767.text":"right, and that needs to be weighed against these use cases, but please don't make us overreach our use cases"},"ts":1669819802522,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$PLRv2aZxk0IlGj-Uw9aFEpEG_jBWS2R5BKWdBOmQwjg"},
{"content":{"body":"Yes, I too have written bundlers. Agree very much that we need extension points and support from 262 for parity between dev and prod.","msgtype":"m.text","org.matrix.msc1767.text":"Yes, I too have written bundlers. Agree very much that we need extension points and support from 262 for parity between dev and prod."},"ts":1669819803266,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$X_E3BXBli6qqHS_sotv2111_72I3vQnjNRmcDqCY0fA"},
{"content":{"body":"we are solving specific problems we have clearly described","msgtype":"m.text","org.matrix.msc1767.text":"we are solving specific problems we have clearly described"},"ts":1669819810229,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$UnWNXSLTAJFzXROvIN0ZqCe7duLkm4ucKbtzc_uDZVw"},
{"content":{"body":"a good way to start might be to hear what you are after more clearly","msgtype":"m.text","org.matrix.msc1767.text":"a good way to start might be to hear what you are after more clearly"},"ts":1669819857655,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$H7tsJXSue0lvHR8HWZfYmpxwg8ljiNXE6g6XOmqpIkw"},
{"content":{"body":"perhaps you could present in the modules group what use cases _you_ would like to solve","format":"org.matrix.custom.html","formatted_body":"perhaps you could present in the modules group what use cases <em>you</em> would like to solve","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"perhaps you could present in the modules group what use cases _you_ would like to solve","mimetype":"text/plain"},{"body":"perhaps you could present in the modules group what use cases <em>you</em> would like to solve","mimetype":"text/html"}]},"ts":1669819868502,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$7nE3BuI_xfNBpafyX3WP5oZByZG8dF5OyjAsuMFows0"},
{"content":{"body":"and we can start to build discussion around how the use cases fit together","msgtype":"m.text","org.matrix.msc1767.text":"and we can start to build discussion around how the use cases fit together"},"ts":1669819890013,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2efqUd-V2CX22JdMI0I9T7NDLViM5fNT0AKLE40BwtQ"},
{"content":{"body":"`import module foo from 'wasm'` => `import foo from 'wasm' assert { type: 'module' }`","format":"org.matrix.custom.html","formatted_body":"<code>import module foo from 'wasm'</code> =&gt; <code>import foo from 'wasm' assert { type: 'module' }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import module foo from 'wasm'` => `import foo from 'wasm' assert { type: 'module' }`","mimetype":"text/plain"},{"body":"<code>import module foo from 'wasm'</code> =&gt; <code>import foo from 'wasm' assert { type: 'module' }</code>","mimetype":"text/html"}]},"ts":1669819896988,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$S7R76LEKPe_bG-LvpGNYfjPi8A6yZBVFX4RDVG8Nr8A"},
{"content":{"body":"That's all I want","msgtype":"m.text","org.matrix.msc1767.text":"That's all I want"},"ts":1669819900599,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_KGUsmqYZkZgKdxI1aLw9XLGUUOodVWdXUMTpkImmIc"},
{"content":{"body":"Put reflection into an extensible syntax","msgtype":"m.text","org.matrix.msc1767.text":"Put reflection into an extensible syntax"},"ts":1669819911789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$43QAInEGvwD9qkpIIcU3dG3lAAXixsC-gOV-xwf6vRk"},
{"content":{"body":"It's really much better if you describe your use cases first","msgtype":"m.text","org.matrix.msc1767.text":"It's really much better if you describe your use cases first"},"ts":1669819917153,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$qYzehP7OtR-H6Jtji3uAj2QEvCaIpTPv6-sWeqPYdzk"},
{"content":{"body":"instead of jumping to a specific syntactical change request","msgtype":"m.text","org.matrix.msc1767.text":"instead of jumping to a specific syntactical change request"},"ts":1669819923556,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$u5f2x99kN0t90IEMbV1HW3K_C-SicIQr_LZXx7D2gn4"},
{"content":{"body":"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4W15943K1Vb8Qmw5k-dTksp2GvxQbzW2CYRX-632J6o?via=matrix.org&via=mozilla.org&via=igalia.com","msgtype":"m.text","org.matrix.msc1767.text":"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4W15943K1Vb8Qmw5k-dTksp2GvxQbzW2CYRX-632J6o?via=matrix.org&via=mozilla.org&via=igalia.com"},"ts":1669819934429,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DGlg4TXMYFuOOax2Mj4wnelPFL2UV5-qeaKj5Y0Hif0"},
{"content":{"body":"I've descrcibed the use cases every time you've brought up the proposal","msgtype":"m.text","org.matrix.msc1767.text":"I've descrcibed the use cases every time you've brought up the proposal"},"ts":1669819964597,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vY48A0_4ft0pJ4f5EaW2WGexu3-rDZ3CcRf7i0Ueme0"},
{"content":{"body":"ah sorry I missed that","msgtype":"m.text","org.matrix.msc1767.text":"ah sorry I missed that"},"ts":1669819964672,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$LC1MUsWZ0Rsh_pEZtB-tRP4PINZ1jv3Tja7W8WxZlPo"},
{"content":{"body":"All of your cases are addressable in the fullness of harmony. Would be delighted to spend some time with you on that.","msgtype":"m.text","org.matrix.msc1767.text":"All of your cases are addressable in the fullness of harmony. Would be delighted to spend some time with you on that."},"ts":1669819990954,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IRLH4_oenZ7Q6M9D8w0GA1Y_PFst2dGViqmZivYvspE"},
{"content":{"body":"what is the reason, you need overlap on this with assertions though?","msgtype":"m.text","org.matrix.msc1767.text":"what is the reason, you need overlap on this with assertions though?"},"ts":1669820002928,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$DdCsiP2SddlSLPRwS2shQDptO6O8auXbLrdba2z1E9w"},
{"content":{"body":"I can appreciate your wanting to use it, but not why our proposal should have to be shoehorned into it?","msgtype":"m.text","org.matrix.msc1767.text":"I can appreciate your wanting to use it, but not why our proposal should have to be shoehorned into it?"},"ts":1669820030898,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$b49xmupafs3NZ9sxoGX1MbVEIlqu_3YV2Fv_7guzUQ8"},
{"content":{"body":"Well, good point, except for overlapping with assertions.","msgtype":"m.text","org.matrix.msc1767.text":"Well, good point, except for overlapping with assertions."},"ts":1669820033126,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tnDKCebxt04wPVWFGbj9kmmp6-przVKJbBM3QO82v6Y"},
{"content":{"body":"`assert` is badly named, it's extensibility that I want.","format":"org.matrix.custom.html","formatted_body":"<code>assert</code> is badly named, it's extensibility that I want.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`assert` is badly named, it's extensibility that I want.","mimetype":"text/plain"},{"body":"<code>assert</code> is badly named, it's extensibility that I want.","mimetype":"text/html"}]},"ts":1669820039834,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zgX26Tk-_P_4-UAWk6MWakWAynqXjk1O0J_lqKBve6A"},
{"content":{"body":"That extensibility can be satisfied fully by other means.","msgtype":"m.text","org.matrix.msc1767.text":"That extensibility can be satisfied fully by other means."},"ts":1669820060198,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Gnq51pyxotTqS7Rhs-4bvJVBJgfdf8L_TrNPRXSjL1w"},
{"content":{"body":"i also feel like it could have been named differently, but that has past -- does everyone have objections to `with`?","format":"org.matrix.custom.html","formatted_body":"i also feel like it could have been named differently, but that has past -- does everyone have objections to <code>with</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i also feel like it could have been named differently, but that has past -- does everyone have objections to `with`?","mimetype":"text/plain"},{"body":"i also feel like it could have been named differently, but that has past -- does everyone have objections to <code>with</code>?","mimetype":"text/html"}]},"ts":1669820073828,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qNNmT7Q5eHHvc-zGQoEEhMgHYe8M9DnfEalhq53NuXU"},
{"content":{"body":"because i don't fully understand those objectsions","msgtype":"m.text","org.matrix.msc1767.text":"because i don't fully understand those objectsions"},"ts":1669820084142,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$A_7C-RYr6qnAo_QDDC82eFGv_DBGCxgn8vn3D0lPdng"},
{"content":{"body":"Well, renaming to `with` doesn’t answer Justin’s question. We’re not also proposing that arbitrary flags would be threaded thru `with` syntax into hooks.","format":"org.matrix.custom.html","formatted_body":"Well, renaming to <code>with</code> doesn’t answer Justin’s question. We’re not also proposing that arbitrary flags would be threaded thru <code>with</code> syntax into hooks.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Well, renaming to `with` doesn’t answer Justin’s question. We’re not also proposing that arbitrary flags would be threaded thru `with` syntax into hooks.","mimetype":"text/plain"},{"body":"Well, renaming to <code>with</code> doesn’t answer Justin’s question. We’re not also proposing that arbitrary flags would be threaded thru <code>with</code> syntax into hooks.","mimetype":"text/html"}]},"ts":1669820125512,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SQJap5kw_ZednU7LbevrYMLpEynGD8GxddMObEKVFfo"},
{"content":{"body":"Because it's all reflection. I think having a specific syntax and an extensible syntax that could accomplish the specific need is the incorrect way to solve the problem","msgtype":"m.text","org.matrix.msc1767.text":"Because it's all reflection. I think having a specific syntax and an extensible syntax that could accomplish the specific need is the incorrect way to solve the problem"},"ts":1669820149608,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6QN6nyhrYKs5bG6eNynov-tzwpUbkhRipg7ZaahXjGw"},
{"content":{"body":"im not suggesting a rename, but we have a number of specializations of loading that we want to do, and i don't think that the import + keyword really works, especially for dynamic import","msgtype":"m.text","org.matrix.msc1767.text":"im not suggesting a rename, but we have a number of specializations of loading that we want to do, and i don't think that the import + keyword really works, especially for dynamic import"},"ts":1669820172633,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fbX4CKC76BIIqN9HVsqq97coOPOHadJM4hz1C11RKZY"},
{"content":{"body":"(I need to go walk my dog, will check back afterwards)","msgtype":"m.text","org.matrix.msc1767.text":"(I need to go walk my dog, will check back afterwards)"},"ts":1669820173166,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ziNN2M4OfQCnFIwMcum87L-658ZESKhKXsCh6sULb8I"},
{"content":{"body":"plus this is extra stuff to learn for developers","msgtype":"m.text","org.matrix.msc1767.text":"plus this is extra stuff to learn for developers"},"ts":1669820178528,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$tNCdq2weQRG5lCiogH181sfHxdqESgB-74ei8Iv2k5Y"},
{"content":{"body":"whereas we've already introduced this new pattern with asserts","msgtype":"m.text","org.matrix.msc1767.text":"whereas we've already introduced this new pattern with asserts"},"ts":1669820188468,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7kzV0fP_O2HgNMzf9ciik3ovCAFG4sJ1gsXTTjWkuVE"},
{"content":{"body":"And I am adamant that extensible flags should not be threaded into import hooks because it reduces clarity of caching semantics across modules.","msgtype":"m.text","org.matrix.msc1767.text":"And I am adamant that extensible flags should not be threaded into import hooks because it reduces clarity of caching semantics across modules."},"ts":1669820200000,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$M9Op70mswMDAa_KLA8soY39lRYPmdqFjx5q8434uOwU"},
{"content":{"body":"But I’m very supportive of having out-of-band metadata that clarifies the behavior of importing specifier patterns in a scope.","msgtype":"m.text","org.matrix.msc1767.text":"But I’m very supportive of having out-of-band metadata that clarifies the behavior of importing specifier patterns in a scope."},"ts":1669820227277,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kXNPmacKvLvYpfBE6pgRq9fB1CWtGS5opYhygMKTPiE"},
{"content":{"body":"im not sure i am arguing for extensible flags, rather i support reconsidering how we expose this","msgtype":"m.text","org.matrix.msc1767.text":"im not sure i am arguing for extensible flags, rather i support reconsidering how we expose this"},"ts":1669820253845,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$GR6q34YjR8HD3BkkZtNHq6MvaPl8pbyAtYUzDjiTp7Q"},
{"content":{"body":"> <@yulia:mozilla.org> i also feel like it could have been named differently, but that has past -- does everyone have objections to `with`?\n\nyes, i'm very opposed to extensible syntax in unknowable ways that will fork the language","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qNNmT7Q5eHHvc-zGQoEEhMgHYe8M9DnfEalhq53NuXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i also feel like it could have been named differently, but that has past -- does everyone have objections to <code>with</code>?</blockquote></mx-reply>yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language","m.relates_to":{"m.in_reply_to":{"event_id":"$qNNmT7Q5eHHvc-zGQoEEhMgHYe8M9DnfEalhq53NuXU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> i also feel like it could have been named differently, but that has past -- does everyone have objections to `with`?\n\nyes, i'm very opposed to extensible syntax in unknowable ways that will fork the language","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$qNNmT7Q5eHHvc-zGQoEEhMgHYe8M9DnfEalhq53NuXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i also feel like it could have been named differently, but that has past -- does everyone have objections to <code>with</code>?</blockquote></mx-reply>yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language","mimetype":"text/html"}]},"ts":1669820259823,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YU-b8nVtgTdF-6CaXjECyWsHOEaHiBeWw4Z_ipCI4U0"},
{"content":{"body":"(my own hot take, import assertions are already reflection mixed with assertion, `import foo assert {type: 'json'}` does reflection because it's generating a module from non-JS)","format":"org.matrix.custom.html","formatted_body":"(my own hot take, import assertions are already reflection mixed with assertion, <code>import foo assert {type: 'json'}</code> does reflection because it's generating a module from non-JS)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(my own hot take, import assertions are already reflection mixed with assertion, `import foo assert {type: 'json'}` does reflection because it's generating a module from non-JS)","mimetype":"text/plain"},{"body":"(my own hot take, import assertions are already reflection mixed with assertion, <code>import foo assert {type: 'json'}</code> does reflection because it's generating a module from non-JS)","mimetype":"text/html"}]},"ts":1669820272966,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zcWcR-IpVzx4uZtNzuvNGJp7929gbRjx0XaEbgBUcpA"},
{"content":{"body":"assertions can already be arbitrary","msgtype":"m.text","org.matrix.msc1767.text":"assertions can already be arbitrary"},"ts":1669820292374,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_SwYaPRlbMBVMn6Cwcp3QqslfnC418PuK8e14SiXZcc"},
{"content":{"body":"they are determined by the host","msgtype":"m.text","org.matrix.msc1767.text":"they are determined by the host"},"ts":1669820299606,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JsX4GmFKU_m5HeXMpm-fbBrfhecU3hpiZzHp6lEZgdI"},
{"content":{"body":"> <@ljharb:matrix.org> yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language\n\nThis already exists in the ecosystem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$YU-b8nVtgTdF-6CaXjECyWsHOEaHiBeWw4Z_ipCI4U0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language</blockquote></mx-reply>This already exists in the ecosystem","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$YU-b8nVtgTdF-6CaXjECyWsHOEaHiBeWw4Z_ipCI4U0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language\n\nThis already exists in the ecosystem","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$YU-b8nVtgTdF-6CaXjECyWsHOEaHiBeWw4Z_ipCI4U0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes, i'm very opposed to extensible syntax in unknowable ways that will fork the language</blockquote></mx-reply>This already exists in the ecosystem","mimetype":"text/html"}]},"ts":1669820301079,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$g3TY8hADAf5iCCG6gy0_OLF6OioSqdMaXhnKmyN7gWk"},
{"content":{"body":"As with Jordan, I’m in support of using `with` as a namespace 262 can extend, but not user code.","format":"org.matrix.custom.html","formatted_body":"As with Jordan, I’m in support of using <code>with</code> as a namespace 262 can extend, but not user code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As with Jordan, I’m in support of using `with` as a namespace 262 can extend, but not user code.","mimetype":"text/plain"},{"body":"As with Jordan, I’m in support of using <code>with</code> as a namespace 262 can extend, but not user code.","mimetype":"text/html"}]},"ts":1669820301620,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O73QVbdvkm7AamO7b_-UKNYCYDZ4YWPU0lGrOEp6Cbk"},
{"content":{"body":"> <@yulia:mozilla.org> assertions can already be arbitrary\n\nthey're not allowed to change the representation of the module, per spec","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_SwYaPRlbMBVMn6Cwcp3QqslfnC418PuK8e14SiXZcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>assertions can already be arbitrary</blockquote></mx-reply>they're not allowed to change the representation of the module, per spec","m.relates_to":{"m.in_reply_to":{"event_id":"$_SwYaPRlbMBVMn6Cwcp3QqslfnC418PuK8e14SiXZcc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> assertions can already be arbitrary\n\nthey're not allowed to change the representation of the module, per spec","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$_SwYaPRlbMBVMn6Cwcp3QqslfnC418PuK8e14SiXZcc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>assertions can already be arbitrary</blockquote></mx-reply>they're not allowed to change the representation of the module, per spec","mimetype":"text/html"}]},"ts":1669820313765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HSBg3CbowJ-OipzfgRCty7rJSeXpje8334BQbDLSZ1Q"},
{"content":{"body":"that is what json does","msgtype":"m.text","org.matrix.msc1767.text":"that is what json does"},"ts":1669820324953,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$eLBUwKr5wlYQfEzFDAWReYjFENYa_kwXfU_ewlrvyqY"},
{"content":{"body":"> <@jridgewell:matrix.org> This already exists in the ecosystem\n\nin the specifier, or via comments, sure. are there other ways?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$g3TY8hADAf5iCCG6gy0_OLF6OioSqdMaXhnKmyN7gWk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>This already exists in the ecosystem</blockquote></mx-reply>in the specifier, or via comments, sure. are there other ways?","m.relates_to":{"m.in_reply_to":{"event_id":"$g3TY8hADAf5iCCG6gy0_OLF6OioSqdMaXhnKmyN7gWk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> This already exists in the ecosystem\n\nin the specifier, or via comments, sure. are there other ways?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$g3TY8hADAf5iCCG6gy0_OLF6OioSqdMaXhnKmyN7gWk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>This already exists in the ecosystem</blockquote></mx-reply>in the specifier, or via comments, sure. are there other ways?","mimetype":"text/html"}]},"ts":1669820325140,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gj-1HmclfapiA_vYJMjn4PxxyutrkPzpdGYPPbgKTmg"},
{"content":{"body":"a json file, imported as a module, will not make sense","msgtype":"m.text","org.matrix.msc1767.text":"a json file, imported as a module, will not make sense"},"ts":1669820338968,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Jyga7QyhAPl4rlxptkgfiDPM6LX4U9RnaLFkaC5sYKs"},
{"content":{"body":"of course it does","msgtype":"m.text","org.matrix.msc1767.text":"of course it does"},"ts":1669820344011,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$06wt3ACLUAKgqNISpTDEL38J8j4U5Px_dK1ei9orwU4"},
{"content":{"body":"it's how node has worked for well over a decade","msgtype":"m.text","org.matrix.msc1767.text":"it's how node has worked for well over a decade"},"ts":1669820350641,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0bczQTEOCMVg1xPx61KluK7HsKCh0Mq1uxA_NLgwuiQ"},
{"content":{"body":"it's just that browsers have a security constraint that requires the explicit assertion","msgtype":"m.text","org.matrix.msc1767.text":"it's just that browsers have a security constraint that requires the explicit assertion"},"ts":1669820360668,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1HKqRVTcTxPjfVu09MtcYokRjX1IrUn6rMujtNQIXP0"},
{"content":{"body":"when you import the default namespace you get an error","msgtype":"m.text","org.matrix.msc1767.text":"when you import the default namespace you get an error"},"ts":1669820363088,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$f37tGexdMxY3HusPs_BKJIy2riTI-4h79KgW3uKQD-U"},
{"content":{"body":"it's not changing the module's representation","msgtype":"m.text","org.matrix.msc1767.text":"it's not changing the module's representation"},"ts":1669820367045,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EeNrz849lVuNVPHLWqeXlIaHEN4JpSMd5bCVyNEEXKs"},
{"content":{"body":"you get an error, but the spec doesn't require it","msgtype":"m.text","org.matrix.msc1767.text":"you get an error, but the spec doesn't require it"},"ts":1669820372381,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$S8W_G-rUCqmQDAbcg56gKqP9n_02_pT7m--norKLUL4"},
{"content":{"body":"and node originally was supposed to have the assertion be optional","msgtype":"m.text","org.matrix.msc1767.text":"and node originally was supposed to have the assertion be optional"},"ts":1669820379111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eTb9EC36sHWKviJV0Ma0J6aSULV6jibn-IOBITwXq04"},
{"content":{"body":"import isn't a keyword in json, neither is export -- we are doing an extra step","msgtype":"m.text","org.matrix.msc1767.text":"import isn't a keyword in json, neither is export -- we are doing an extra step"},"ts":1669820384044,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$un2It117LDlGpBB0v55fttyY2yLaVpc_CDHbkHXBbFI"},
{"content":{"body":"(a single collaborator obstructed that)","msgtype":"m.text","org.matrix.msc1767.text":"(a single collaborator obstructed that)"},"ts":1669820386273,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nGL5wD-GKMR8mzOZ1rUySNh-FjjncNeC0tBCWdBDe-o"},
{"content":{"body":"its not just a host level assertions","msgtype":"m.text","org.matrix.msc1767.text":"its not just a host level assertions"},"ts":1669820389675,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1-C0IB59EuQi-69TAoDx7ZnC0IYSBZs2scsyJRMCKNI"},
{"content":{"body":"it's not a keyword in css or html either but those were candidates for Modules too","msgtype":"m.text","org.matrix.msc1767.text":"it's not a keyword in css or html either but those were candidates for Modules too"},"ts":1669820403698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$crX-7hH31XzXaXs24IH4vyNE6VTvxhUSntPUKEyfhuc"},
{"content":{"body":"i don't think that's a realistic rubric to apply","msgtype":"m.text","org.matrix.msc1767.text":"i don't think that's a realistic rubric to apply"},"ts":1669820411242,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$76IZglEDgABIG0CzbbMLV9z-XrscWqsn2OPHyfbZJCU"},
{"content":{"body":"the JS ecosystem has imported JSON for over a decade via `require('./path/to/file.json')`. it's well-understood and quite intuitive","format":"org.matrix.custom.html","formatted_body":"the JS ecosystem has imported JSON for over a decade via <code>require('./path/to/file.json')</code>. it's well-understood and quite intuitive","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the JS ecosystem has imported JSON for over a decade via `require('./path/to/file.json')`. it's well-understood and quite intuitive","mimetype":"text/plain"},{"body":"the JS ecosystem has imported JSON for over a decade via <code>require('./path/to/file.json')</code>. it's well-understood and quite intuitive","mimetype":"text/html"}]},"ts":1669820441421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jXL-yQXmlKLUvj8adk0elDvO13iSL3-ZflJA4GtNhrM"},
{"content":{"body":"im not sure what the rubric is here. i believe css was already spec'd html (or i was asked to review it recently anyway)","msgtype":"m.text","org.matrix.msc1767.text":"im not sure what the rubric is here. i believe css was already spec'd html (or i was asked to review it recently anyway)"},"ts":1669820446949,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4o-Ow2y4H8jydNIGzMnR0H5OyReQjEKsGv0BXqIqyRk"},
{"content":{"body":"i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports","msgtype":"m.text","org.matrix.msc1767.text":"i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports"},"ts":1669820466257,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pFagB91DZdksBp723FP2cV0F0xHQXd1Ct4IGkTZMixs"},
{"content":{"body":"> <@ljharb:matrix.org> the JS ecosystem has imported JSON for over a decade via `require('./path/to/file.json')`. it's well-understood and quite intuitive\n\nyes, but it is unrelated to what modules do. that require works very differently from the beginning","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$jXL-yQXmlKLUvj8adk0elDvO13iSL3-ZflJA4GtNhrM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the JS ecosystem has imported JSON for over a decade via <code>require('./path/to/file.json')</code>. it's well-understood and quite intuitive</blockquote></mx-reply>yes, but it is unrelated to what modules do. that require works very differently from the beginning","m.relates_to":{"m.in_reply_to":{"event_id":"$jXL-yQXmlKLUvj8adk0elDvO13iSL3-ZflJA4GtNhrM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the JS ecosystem has imported JSON for over a decade via `require('./path/to/file.json')`. it's well-understood and quite intuitive\n\nyes, but it is unrelated to what modules do. that require works very differently from the beginning","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$jXL-yQXmlKLUvj8adk0elDvO13iSL3-ZflJA4GtNhrM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the JS ecosystem has imported JSON for over a decade via <code>require('./path/to/file.json')</code>. it's well-understood and quite intuitive</blockquote></mx-reply>yes, but it is unrelated to what modules do. that require works very differently from the beginning","mimetype":"text/html"}]},"ts":1669820476416,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wOCurvwZY-G9CM89jI4V_X1a2qUISmkcEiTrWqrQRyc"},
{"content":{"body":" * i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports","m.new_content":{"body":"i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports","msgtype":"m.text","org.matrix.msc1767.text":"i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports"},"m.relates_to":{"event_id":"$pFagB91DZdksBp723FP2cV0F0xHQXd1Ct4IGkTZMixs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i'm saying that \"you can import something\" doesn't have a requirement that it be exported from the source, unless the source is a module format that requires explicit exports"},"ts":1669820477715,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$btbCYAI-O0NAajGL8TXW_kDBO_jWul5rk65de0ngG6Q"},
{"content":{"body":"i don't agree that's true in user's mental models","msgtype":"m.text","org.matrix.msc1767.text":"i don't agree that's true in user's mental models"},"ts":1669820497123,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e9C7I-lV3RVQ40rCZSTLiYvFICk8WJNgaGZKjHw-xQE"},
{"content":{"body":"user mental models are not what we are discussing?","msgtype":"m.text","org.matrix.msc1767.text":"user mental models are not what we are discussing?"},"ts":1669820506182,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VhUg0utj4vKb7czEO0BktiTzVJU4s-jCrA2xcdF1090"},
{"content":{"body":"obv they're different under the hood, but that's irrelevant","msgtype":"m.text","org.matrix.msc1767.text":"obv they're different under the hood, but that's irrelevant"},"ts":1669820506454,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-OcKwE6LgL7fDndS0twCkCyRWd0RNFNzDhkt6dog_bg"},
{"content":{"body":"oh, that's what i'm discussing","msgtype":"m.text","org.matrix.msc1767.text":"oh, that's what i'm discussing"},"ts":1669820521137,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VQfrNYx92eAq7u86IaLHE1yOgb8OHu4-a3Mdp0f6UcI"},
{"content":{"body":"Christian Ulbrich: ping regarding importing JSON (we discussed it extensively the other day)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: ping regarding importing JSON (we discussed it extensively the other day)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Christian Ulbrich: ping regarding importing JSON (we discussed it extensively the other day)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: ping regarding importing JSON (we discussed it extensively the other day)","mimetype":"text/html"}]},"ts":1669820526887,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$RDVyyn2NGNAYxU7R8mnq45I181LxlWn7ePYtjJ6WC5k"},
{"content":{"body":"sorry if i miscommunicated","msgtype":"m.text","org.matrix.msc1767.text":"sorry if i miscommunicated"},"ts":1669820532388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mNemRxa-XsE6R2u_eYY9roWuVhyZNqqxXQ8cGKocQQI"},
{"content":{"body":"you said no splitting of the language -- but you don't consider this to be a split? json != js","msgtype":"m.text","org.matrix.msc1767.text":"you said no splitting of the language -- but you don't consider this to be a split? json != js"},"ts":1669820542505,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_QdoUZST5F18CMxmSMkJGoWpWTE9QrHAaGEw3NNXNsA"},
{"content":{"body":"no, i don't. wasm != js too","msgtype":"m.text","org.matrix.msc1767.text":"no, i don't. wasm != js too"},"ts":1669820554256,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7em8ROedtXHnhw4ffm2rnxdlLIWMagDSBg0vZcc2HoE"},
{"content":{"body":"i mean that *when it's javascript* i want things to be maximally universal, and tool-specific programmable syntax isn't","format":"org.matrix.custom.html","formatted_body":"i mean that <em>when it's javascript</em> i want things to be maximally universal, and tool-specific programmable syntax isn't","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i mean that *when it's javascript* i want things to be maximally universal, and tool-specific programmable syntax isn't","mimetype":"text/plain"},{"body":"i mean that <em>when it's javascript</em> i want things to be maximally universal, and tool-specific programmable syntax isn't","mimetype":"text/html"}]},"ts":1669820583509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4JI1EW8KPOSa9HTQp-7rsN_x7cUQRueNjWKOT98DvsQ"},
{"content":{"body":"i think jordan’s concern is about emergent behavior of the ecosystem, producing further partitioning in what in npm is usable in various environments.","msgtype":"m.text","org.matrix.msc1767.text":"i think jordan’s concern is about emergent behavior of the ecosystem, producing further partitioning in what in npm is usable in various environments."},"ts":1669820585669,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0jN_kINUyzu8U8lpq3w7gWfBYSv2WlIYkHk5-IZzuRI"},
{"content":{"body":"ok, i understand. I don't know if blocking syntax like `with` in favor of `import module` is the right choice though","format":"org.matrix.custom.html","formatted_body":"ok, i understand. I don't know if blocking syntax like <code>with</code> in favor of <code>import module</code> is the right choice though","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok, i understand. I don't know if blocking syntax like `with` in favor of `import module` is the right choice though","mimetype":"text/plain"},{"body":"ok, i understand. I don't know if blocking syntax like <code>with</code> in favor of <code>import module</code> is the right choice though","mimetype":"text/html"}]},"ts":1669820624273,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$eKplIeZ-0fg2sN6Dk8nNvJx4gGBFAE2Tsa0cXkZGlFI"},
{"content":{"body":"there are other ways to do restriction and maximal compatibility","msgtype":"m.text","org.matrix.msc1767.text":"there are other ways to do restriction and maximal compatibility"},"ts":1669820634861,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5ySus36XpgQ2NNcdWzare80xsDaMIZRMu7lmx8PpooA"},
{"content":{"body":"maybe not. but even with the semantic restrictions on `assert`, there were tools who planned to abuse it for extensible syntax, until they got pushback","format":"org.matrix.custom.html","formatted_body":"maybe not. but even with the semantic restrictions on <code>assert</code>, there were tools who planned to abuse it for extensible syntax, until they got pushback","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"maybe not. but even with the semantic restrictions on `assert`, there were tools who planned to abuse it for extensible syntax, until they got pushback","mimetype":"text/plain"},{"body":"maybe not. but even with the semantic restrictions on <code>assert</code>, there were tools who planned to abuse it for extensible syntax, until they got pushback","mimetype":"text/html"}]},"ts":1669820652450,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ntE9Si_5KmNW6a-ql5uGlDJ-TLyRzQKE62iHIoflCss"},
{"content":{"body":"I had explicit feedback from developers to not continue to complicate import syntax","msgtype":"m.text","org.matrix.msc1767.text":"I had explicit feedback from developers to not continue to complicate import syntax"},"ts":1669820677413,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rcGwujoDIeUS4-hiWSTRVTsET8su_6Er4Z1Aq1OTyrI"},
{"content":{"body":"\"people want to do X\" is not an automatic justification for providing a way for them to do X, and imo if the X is a good idea, it can be discussed in TC39","msgtype":"m.text","org.matrix.msc1767.text":"\"people want to do X\" is not an automatic justification for providing a way for them to do X, and imo if the X is a good idea, it can be discussed in TC39"},"ts":1669820683245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CW022j4Yi8m0wNqWtF9eYXjqP9CkvXfOno_PD6bGsC8"},
{"content":{"body":"im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing","format":"org.matrix.custom.html","formatted_body":"im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing","mimetype":"text/plain"},{"body":"im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing","mimetype":"text/html"}]},"ts":1669820693070,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo"},
{"content":{"body":"for developers (not tool devs), extensible syntax is still more complex because it means there's more semantics to learn from more places","msgtype":"m.text","org.matrix.msc1767.text":"for developers (not tool devs), extensible syntax is still more complex because it means there's more semantics to learn from more places"},"ts":1669820727273,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ty26auDsdgnGlg7bdLOiOIAq_119kCsK6WTVI4XZAfU"},
{"content":{"body":"ok, yes -- but we already have `assert { ... } ` and users are already learning it","format":"org.matrix.custom.html","formatted_body":"ok, yes -- but we already have <code>assert { ... } </code> and users are already learning it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok, yes -- but we already have `assert { ... } ` and users are already learning it","mimetype":"text/plain"},{"body":"ok, yes -- but we already have <code>assert { ... } </code> and users are already learning it","mimetype":"text/html"}]},"ts":1669820751762,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$sKtLu6A1TYnjcQow3kaRdLjsM2IaMLgI3wesCb4-MdM"},
{"content":{"body":"iow i maintain that the confusion isn't about parsing, because humans don't parse that way, but it's about \"understanding what the code does\" - and extensible syntax makes that harder","msgtype":"m.text","org.matrix.msc1767.text":"iow i maintain that the confusion isn't about parsing, because humans don't parse that way, but it's about \"understanding what the code does\" - and extensible syntax makes that harder"},"ts":1669820758632,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7XfmkpzHAJcb06cQa0SkhmDlTpAjKsLRRhzZxiNgvwU"},
{"content":{"body":"if we then add `import lazy` and `import module` i am not so sure","format":"org.matrix.custom.html","formatted_body":"if we then add <code>import lazy</code> and <code>import module</code> i am not so sure","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if we then add `import lazy` and `import module` i am not so sure","mimetype":"text/plain"},{"body":"if we then add <code>import lazy</code> and <code>import module</code> i am not so sure","mimetype":"text/html"}]},"ts":1669820773649,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e9ONuj3duTjWXn5W9T9cox-m8LRUdH6hOidOjBM-_KU"},
{"content":{"body":"> <@yulia:mozilla.org> im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing\n\nI’m open to managed extensions to the assert namespace, even for things that aren’t assertions, if that’s less burden on developers. I could even see a migration from `assert` to `with` if we require them to be equivalent. But only as long as those properties continue to be unavailable to import hooks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing</blockquote></mx-reply>I’m open to managed extensions to the assert namespace, even for things that aren’t assertions, if that’s less burden on developers. I could even see a migration from <code>assert</code> to <code>with</code> if we require them to be equivalent. But only as long as those properties continue to be unavailable to import hooks.","m.relates_to":{"m.in_reply_to":{"event_id":"$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing\n\nI’m open to managed extensions to the assert namespace, even for things that aren’t assertions, if that’s less burden on developers. I could even see a migration from `assert` to `with` if we require them to be equivalent. But only as long as those properties continue to be unavailable to import hooks.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing</blockquote></mx-reply>I’m open to managed extensions to the assert namespace, even for things that aren’t assertions, if that’s less burden on developers. I could even see a migration from <code>assert</code> to <code>with</code> if we require them to be equivalent. But only as long as those properties continue to be unavailable to import hooks.","mimetype":"text/html"}]},"ts":1669820787160,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mhmAcxlGERJ98DefzHOfE10wnRMgKrjK6QkCT359qtI"},
{"content":{"body":"the semantics of `assert` are *always* \"either it works or it throws\"","format":"org.matrix.custom.html","formatted_body":"the semantics of <code>assert</code> are <em>always</em> &quot;either it works or it throws&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the semantics of `assert` are *always* \"either it works or it throws\"","mimetype":"text/plain"},{"body":"the semantics of <code>assert</code> are <em>always</em> &quot;either it works or it throws&quot;","mimetype":"text/html"}]},"ts":1669820791644,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cdJb9Y06BOArFblIybJxEpc14fK0H_2GuN1zXnoDvqo"},
{"content":{"body":"that is very easy to learn","msgtype":"m.text","org.matrix.msc1767.text":"that is very easy to learn"},"ts":1669820795757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qlBHK_7txz74PnpHYllGc2DEyG_FKEgwN0dVqdbAuUU"},
{"content":{"body":"yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.","mimetype":"text/html"}]},"ts":1669820807847,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI"},
{"content":{"body":"you might have to figure out what the various assertions *are*, but you don't have to figure out what they *do*","format":"org.matrix.custom.html","formatted_body":"you might have to figure out what the various assertions <em>are</em>, but you don't have to figure out what they <em>do</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you might have to figure out what the various assertions *are*, but you don't have to figure out what they *do*","mimetype":"text/plain"},{"body":"you might have to figure out what the various assertions <em>are</em>, but you don't have to figure out what they <em>do</em>","mimetype":"text/html"}]},"ts":1669820817780,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$esY1St5w_sEZbAuA_RSz5aT3UzdAPK0xFNFVjz9Qhy8"},
{"content":{"body":"> <@ljharb:matrix.org> the semantics of `assert` are *always* \"either it works or it throws\"\n\nAnd I am in favor of maintaining this invariant because the alternative is to complicate cache keys and how singletons are shared between modules in the same scope.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$cdJb9Y06BOArFblIybJxEpc14fK0H_2GuN1zXnoDvqo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the semantics of <code>assert</code> are <em>always</em> \"either it works or it throws\"</blockquote></mx-reply>And I am in favor of maintaining this invariant because the alternative is to complicate cache keys and how singletons are shared between modules in the same scope.","m.relates_to":{"m.in_reply_to":{"event_id":"$cdJb9Y06BOArFblIybJxEpc14fK0H_2GuN1zXnoDvqo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the semantics of `assert` are *always* \"either it works or it throws\"\n\nAnd I am in favor of maintaining this invariant because the alternative is to complicate cache keys and how singletons are shared between modules in the same scope.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$cdJb9Y06BOArFblIybJxEpc14fK0H_2GuN1zXnoDvqo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the semantics of <code>assert</code> are <em>always</em> \"either it works or it throws\"</blockquote></mx-reply>And I am in favor of maintaining this invariant because the alternative is to complicate cache keys and how singletons are shared between modules in the same scope.","mimetype":"text/html"}]},"ts":1669820834860,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Mfd_5LXI8IINgId7ialm70BKblUjZ4cNpq40qTX2fZs"},
{"content":{"body":"> <@christianulbrich:matrix.org> yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.\n\nif we had types, then i would expect them to be imported like anything else. It doesn't seem to have the same level of modification as what import module/lazy might do","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.</blockquote></mx-reply>if we had types, then i would expect them to be imported like anything else. It doesn't seem to have the same level of modification as what import module/lazy might do","m.relates_to":{"m.in_reply_to":{"event_id":"$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@christianulbrich:matrix.org> yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.\n\nif we had types, then i would expect them to be imported like anything else. It doesn't seem to have the same level of modification as what import module/lazy might do","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.</blockquote></mx-reply>if we had types, then i would expect them to be imported like anything else. It doesn't seem to have the same level of modification as what import module/lazy might do","mimetype":"text/html"}]},"ts":1669820855691,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lK63FgcOWk7oFsWAfoGPXHSNMJPB4Fpu5IouD8QJXsw"},
{"content":{"body":"so this would be doubly confusing","msgtype":"m.text","org.matrix.msc1767.text":"so this would be doubly confusing"},"ts":1669820862681,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-u-zxVjIKQuaCvFLu1vDKQZCQ2brIUQIHlycmHA47-c"},
{"content":{"body":"because in one case you are declaring what you are importing, in another you are declaring how","msgtype":"m.text","org.matrix.msc1767.text":"because in one case you are declaring what you are importing, in another you are declaring how"},"ts":1669820875278,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$9xKmZ9_JBt8XZ0_r_OVm1idTznQ829nVBfGu1g2QPCM"},
{"content":{"body":"if we had types with no runtime semantics, you'd want them syntactically marked, so you could strip them easily","msgtype":"m.text","org.matrix.msc1767.text":"if we had types with no runtime semantics, you'd want them syntactically marked, so you could strip them easily"},"ts":1669820893000,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k_gDT78m_VriNLJUurs4fY0f7ACPOEcN_DbQpgu_o7o"},
{"content":{"body":"we should be very intentional about the right side and the left side of the expression is me point","msgtype":"m.text","org.matrix.msc1767.text":"we should be very intentional about the right side and the left side of the expression is me point"},"ts":1669820894195,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8kShwSYDGJUz2EjDEPFMq8X1HcKUpo_PLGWOvNEsqVY"},
{"content":{"body":"> <@christianulbrich:matrix.org> yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.\n\nI’m okay with changing the syntax of import reflection for various reasons, but I can attest that living inside of the resulting universe with `module` blocks, `import module` begins to look familiar. The keyword `module` implies the production of `Module` instances in a very general way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.</blockquote></mx-reply>I’m okay with changing the syntax of import reflection for various reasons, but I can attest that living inside of the resulting universe with <code>module</code> blocks, <code>import module</code> begins to look familiar. The keyword <code>module</code> implies the production of <code>Module</code> instances in a very general way.","m.relates_to":{"m.in_reply_to":{"event_id":"$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@christianulbrich:matrix.org> yulia: But as I've said, in TS, there already is a special syntax for special imports, called _type imports_, and it is written like that: `import type { MyType } `... so for at least TS developers this would not be different, but I also object to the wording/naming of `module`.\n\nI’m okay with changing the syntax of import reflection for various reasons, but I can attest that living inside of the resulting universe with `module` blocks, `import module` begins to look familiar. The keyword `module` implies the production of `Module` instances in a very general way.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$24xO5OxA59kPUyKkzn6dQHtKB4n5Hsj5biJQScfMSMI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: But as I've said, in TS, there already is a special syntax for special imports, called <em>type imports</em>, and it is written like that: <code>import type { MyType } </code>... so for at least TS developers this would not be different, but I also object to the wording/naming of <code>module</code>.</blockquote></mx-reply>I’m okay with changing the syntax of import reflection for various reasons, but I can attest that living inside of the resulting universe with <code>module</code> blocks, <code>import module</code> begins to look familiar. The keyword <code>module</code> implies the production of <code>Module</code> instances in a very general way.","mimetype":"text/html"}]},"ts":1669820927261,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bhjD0eo9R9AsRHIRROYGopOGW_GiJx4_rwBaaxvuX9M"},
{"content":{"body":"if we have import module/source/lazy whatever -- we should not have import type","msgtype":"m.text","org.matrix.msc1767.text":"if we have import module/source/lazy whatever -- we should not have import type"},"ts":1669820930763,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4VvRn4YognWfwUkmmKVPCcmvYF7GwECPRnqDbIVvZug"},
{"content":{"body":"To wit, if we renamed `module` to something like `moduleInstance`, it would also make sense to use `moduleInstace {}` as the introducer for module expressions.","format":"org.matrix.custom.html","formatted_body":"To wit, if we renamed <code>module</code> to something like <code>moduleInstance</code>, it would also make sense to use <code>moduleInstace {}</code> as the introducer for module expressions.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"To wit, if we renamed `module` to something like `moduleInstance`, it would also make sense to use `moduleInstace {}` as the introducer for module expressions.","mimetype":"text/plain"},{"body":"To wit, if we renamed <code>module</code> to something like <code>moduleInstance</code>, it would also make sense to use <code>moduleInstace {}</code> as the introducer for module expressions.","mimetype":"text/html"}]},"ts":1669820969529,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8ZrS91gE16F5PqE26huyCI3uIM-gJCb8JLb7w8QUdtU"},
{"content":{"body":"> <@yulia:mozilla.org> if we have import module/source/lazy whatever -- we should not have import type\n\nI would make the looser statement that some combinations will necessarily fail at various times for various reasons.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4VvRn4YognWfwUkmmKVPCcmvYF7GwECPRnqDbIVvZug?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>if we have import module/source/lazy whatever -- we should not have import type</blockquote></mx-reply>I would make the looser statement that some combinations will necessarily fail at various times for various reasons.","m.relates_to":{"m.in_reply_to":{"event_id":"$4VvRn4YognWfwUkmmKVPCcmvYF7GwECPRnqDbIVvZug"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> if we have import module/source/lazy whatever -- we should not have import type\n\nI would make the looser statement that some combinations will necessarily fail at various times for various reasons.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$4VvRn4YognWfwUkmmKVPCcmvYF7GwECPRnqDbIVvZug?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>if we have import module/source/lazy whatever -- we should not have import type</blockquote></mx-reply>I would make the looser statement that some combinations will necessarily fail at various times for various reasons.","mimetype":"text/html"}]},"ts":1669821023821,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$v0un3LcPEgfbxxVmxUH6xOkMyo_YgmmOwu_TTeV8yjQ"},
{"content":{"body":"my thoughts on this are strong -- we should not be changing the role ad hoc. it makes it harder to learn","msgtype":"m.text","org.matrix.msc1767.text":"my thoughts on this are strong -- we should not be changing the role ad hoc. it makes it harder to learn"},"ts":1669821059982,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Uom3zyKnckM5cEpGMk-IHMo5Xq3ORNHzDSnfSmqAQRY"},
{"content":{"body":"And of those parts, I’m regretfully least attached to lazy.","msgtype":"m.text","org.matrix.msc1767.text":"And of those parts, I’m regretfully least attached to lazy."},"ts":1669821064247,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$57me42pXUqmi55NoGDAapToSLYUNWdTrAq_COIQlMuw"},
{"content":{"body":"Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?","msgtype":"m.text","org.matrix.msc1767.text":"Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?"},"ts":1669821095920,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JSUN37ymQg9bgWmg1dMFvht7z8vHGIOAGzK8894eYwI"},
{"content":{"body":"Thats a shame, as it exists and provides backing for your other proposals and could help resolve this","msgtype":"m.text","org.matrix.msc1767.text":"Thats a shame, as it exists and provides backing for your other proposals and could help resolve this"},"ts":1669821101630,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$11gyI9KHx24r-PCIPkDccEva2evXRFg75DMeLIBwoXw"},
{"content":{"body":"finite syntax seems much easier to learn than any extensible syntax imo","msgtype":"m.text","org.matrix.msc1767.text":"finite syntax seems much easier to learn than any extensible syntax imo"},"ts":1669821102588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hqiSA_APHrOIiW0QvcLKIwEd5tDYcDOZqC5lVR_DSrY"},
{"content":{"body":"> <@kriskowal:matrix.org> Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?\n\nwhy would i preclude that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$JSUN37ymQg9bgWmg1dMFvht7z8vHGIOAGzK8894eYwI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?</blockquote></mx-reply>why would i preclude that?","m.relates_to":{"m.in_reply_to":{"event_id":"$JSUN37ymQg9bgWmg1dMFvht7z8vHGIOAGzK8894eYwI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?\n\nwhy would i preclude that?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$JSUN37ymQg9bgWmg1dMFvht7z8vHGIOAGzK8894eYwI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Does the strength of your conviction extend to precluding WASM from participating in the ESM graph?</blockquote></mx-reply>why would i preclude that?","mimetype":"text/html"}]},"ts":1669821129954,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zeyYckP9xUqYRB9Lx6B6ganSYCHDaIaUImPxWhQWbxk"},
{"content":{"body":"we aren't proposing `import wasm`","format":"org.matrix.custom.html","formatted_body":"we aren't proposing <code>import wasm</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we aren't proposing `import wasm`","mimetype":"text/plain"},{"body":"we aren't proposing <code>import wasm</code>","mimetype":"text/html"}]},"ts":1669821147892,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Bd8IoU3tmYd-fV_o_hy5VNryww2VMQmHjEYC8TseAOM"},
{"content":{"body":"in which case i would ask why we didnt do `import css`, `import json` etc.","format":"org.matrix.custom.html","formatted_body":"in which case i would ask why we didnt do <code>import css</code>, <code>import json</code> etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in which case i would ask why we didnt do `import css`, `import json` etc.","mimetype":"text/plain"},{"body":"in which case i would ask why we didnt do <code>import css</code>, <code>import json</code> etc.","mimetype":"text/html"}]},"ts":1669821166901,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VvEVqen6k3UWEDNYnT6O2ThIAUWaCqsPKvLohtVWdxo"},
{"content":{"body":"> <@yulia:mozilla.org> why would i preclude that?\n\nI must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zeyYckP9xUqYRB9Lx6B6ganSYCHDaIaUImPxWhQWbxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>why would i preclude that?</blockquote></mx-reply>I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?","m.relates_to":{"m.in_reply_to":{"event_id":"$zeyYckP9xUqYRB9Lx6B6ganSYCHDaIaUImPxWhQWbxk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> why would i preclude that?\n\nI must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zeyYckP9xUqYRB9Lx6B6ganSYCHDaIaUImPxWhQWbxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>why would i preclude that?</blockquote></mx-reply>I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?","mimetype":"text/html"}]},"ts":1669821175691,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$t1nEOjOtm8xt6Nx3-21vtUiyhzEYnFaa5kFOooCVHNo"},
{"content":{"body":"and then, `import type` would make sense in the current scheme we created","format":"org.matrix.custom.html","formatted_body":"and then, <code>import type</code> would make sense in the current scheme we created","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and then, `import type` would make sense in the current scheme we created","mimetype":"text/plain"},{"body":"and then, <code>import type</code> would make sense in the current scheme we created","mimetype":"text/html"}]},"ts":1669821179081,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7rm8yBPvgs4nqdraHIrl-8qbc9eG0N804-VYKkwM91Y"},
{"content":{"body":"> <@kriskowal:matrix.org> I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?\n\nnope, i am just pointing out that this exists","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$t1nEOjOtm8xt6Nx3-21vtUiyhzEYnFaa5kFOooCVHNo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?</blockquote></mx-reply>nope, i am just pointing out that this exists","m.relates_to":{"m.in_reply_to":{"event_id":"$t1nEOjOtm8xt6Nx3-21vtUiyhzEYnFaa5kFOooCVHNo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?\n\nnope, i am just pointing out that this exists","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$t1nEOjOtm8xt6Nx3-21vtUiyhzEYnFaa5kFOooCVHNo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I must be misunderstanding your objection. Are you objecting to JSON participating in the ESM graph?</blockquote></mx-reply>nope, i am just pointing out that this exists","mimetype":"text/html"}]},"ts":1669821187366,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$YNsDP9E6AkvJM29Q_xNkN_6f5DNongbCT24Dc3Qu5b8"},
{"content":{"body":"i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean","msgtype":"m.text","org.matrix.msc1767.text":"i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean"},"ts":1669821222424,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$uQuJ7AxhfH1EFitK8z73A23Wo7N7GZv8I8ElEYcJGnk"},
{"content":{"body":"yes, `with` is potentially extensible, but we are potentially, as a committee, going to add more of these","format":"org.matrix.custom.html","formatted_body":"yes, <code>with</code> is potentially extensible, but we are potentially, as a committee, going to add more of these","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes, `with` is potentially extensible, but we are potentially, as a committee, going to add more of these","mimetype":"text/plain"},{"body":"yes, <code>with</code> is potentially extensible, but we are potentially, as a committee, going to add more of these","mimetype":"text/html"}]},"ts":1669821250951,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$obZ7XGzvyauhYRXkktfiuhBlPTujCQ8iLWToM8y2ozM"},
{"content":{"body":"I’m in favor of opening the field for more types of modules.","msgtype":"m.text","org.matrix.msc1767.text":"I’m in favor of opening the field for more types of modules."},"ts":1669821254636,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DtUQh1sBeHSuZXXLKA9ap1UPZNoM9VZfHCZP56nIddY"},
{"content":{"body":"> <@yulia:mozilla.org> i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean\n\nOkay, we don’t disagree.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uQuJ7AxhfH1EFitK8z73A23Wo7N7GZv8I8ElEYcJGnk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean</blockquote></mx-reply>Okay, we don’t disagree.","m.relates_to":{"m.in_reply_to":{"event_id":"$uQuJ7AxhfH1EFitK8z73A23Wo7N7GZv8I8ElEYcJGnk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean\n\nOkay, we don’t disagree.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uQuJ7AxhfH1EFitK8z73A23Wo7N7GZv8I8ElEYcJGnk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i am objecting to mixing roles and making additional syntax for developers to read, without being strict about what different parts of the import statement mean</blockquote></mx-reply>Okay, we don’t disagree.","mimetype":"text/html"}]},"ts":1669821267406,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ug0C069LXOKiUemAVrT483kcQOXqHjQhQ7PzxRLyA6A"},
{"content":{"body":"> <@yulia:mozilla.org> yes, `with` is potentially extensible, but we are potentially, as a committee, going to add more of these\n\nI’m in favor of 262 managing `with` and `assert`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$obZ7XGzvyauhYRXkktfiuhBlPTujCQ8iLWToM8y2ozM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>yes, <code>with</code> is potentially extensible, but we are potentially, as a committee, going to add more of these</blockquote></mx-reply>I’m in favor of 262 managing <code>with</code> and <code>assert</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$obZ7XGzvyauhYRXkktfiuhBlPTujCQ8iLWToM8y2ozM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> yes, `with` is potentially extensible, but we are potentially, as a committee, going to add more of these\n\nI’m in favor of 262 managing `with` and `assert`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$obZ7XGzvyauhYRXkktfiuhBlPTujCQ8iLWToM8y2ozM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>yes, <code>with</code> is potentially extensible, but we are potentially, as a committee, going to add more of these</blockquote></mx-reply>I’m in favor of 262 managing <code>with</code> and <code>assert</code>.","mimetype":"text/html"}]},"ts":1669821295438,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$B1RXvKvQVFk8iAJugJO_i0nH7DxGXuMUP-gFUayZTIw"},
{"content":{"body":"great, i was hoping this wasn't going to be controversial -- people should be able to rely on past knowledge","msgtype":"m.text","org.matrix.msc1767.text":"great, i was hoping this wasn't going to be controversial -- people should be able to rely on past knowledge"},"ts":1669821296981,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$H6OUrduMBbr6dlcQOH_Nn7aKNJPnCNaNSA1brPTdPAc"},
{"content":{"body":"i agree - but \"extensible syntax\" is the opposite of being strict about what different parts of the import statement mean","msgtype":"m.text","org.matrix.msc1767.text":"i agree - but \"extensible syntax\" is the opposite of being strict about what different parts of the import statement mean"},"ts":1669821298013,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xvIqZCeXzU9H65tm3Fxezfrp52ug802dG_fOOO1VxPw"},
{"content":{"body":"we can potentially be strict about `with`","format":"org.matrix.custom.html","formatted_body":"we can potentially be strict about <code>with</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we can potentially be strict about `with`","mimetype":"text/plain"},{"body":"we can potentially be strict about <code>with</code>","mimetype":"text/html"}]},"ts":1669821311483,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$a4JkR1Ba0FMHRKxh17dN11Tts5-HF19MxSH58LXaUpc"},
{"content":{"body":"or rather, userland-extensible","msgtype":"m.text","org.matrix.msc1767.text":"or rather, userland-extensible"},"ts":1669821314559,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5Bc_xq6-Y16PZ3HUGqjm6KdzQPDq1K0pHfL0cXO3NCw"},
{"content":{"body":"syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","format":"org.matrix.custom.html","formatted_body":"syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","mimetype":"text/plain"},{"body":"syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","mimetype":"text/html"}]},"ts":1669821320760,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U8-lB2g88_FQFbxsTAkg3fKX03aGMCw3iZXBo4dkI7k"},
{"content":{"body":"we delegated behavior of `assert` to the host","format":"org.matrix.custom.html","formatted_body":"we delegated behavior of <code>assert</code> to the host","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we delegated behavior of `assert` to the host","mimetype":"text/plain"},{"body":"we delegated behavior of <code>assert</code> to the host","mimetype":"text/html"}]},"ts":1669821323521,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$pJnovdxNklCLYjm0SH63ql4Xf2YJQardyVzFGzmAifM"},
{"content":{"body":" * syntax that only _we_ extend is ofc fine","format":"org.matrix.custom.html","formatted_body":" * syntax that only <em>we</em> extend is ofc fine","m.new_content":{"body":"syntax that only _we_ extend is ofc fine","format":"org.matrix.custom.html","formatted_body":"syntax that only <em>we</em> extend is ofc fine","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"syntax that only _we_ extend is ofc fine","mimetype":"text/plain"},{"body":"syntax that only <em>we</em> extend is ofc fine","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$U8-lB2g88_FQFbxsTAkg3fKX03aGMCw3iZXBo4dkI7k","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * syntax that only _we_ extend is ofc fine","mimetype":"text/plain"},{"body":" * syntax that only <em>we</em> extend is ofc fine","mimetype":"text/html"}]},"ts":1669821325218,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RSJ_4-G2NGJ2uXpa3aIeOE1_PQmiFhHN7kK8Dd0BKsE"},
{"content":{"body":" * syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","format":"org.matrix.custom.html","formatted_body":" * syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","m.new_content":{"body":"syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","format":"org.matrix.custom.html","formatted_body":"syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","mimetype":"text/plain"},{"body":"syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$U8-lB2g88_FQFbxsTAkg3fKX03aGMCw3iZXBo4dkI7k","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * syntax that only _we_ extend is ofc fine (since technically that's \"everything\")","mimetype":"text/plain"},{"body":" * syntax that only <em>we</em> extend is ofc fine (since technically that's &quot;everything&quot;)","mimetype":"text/html"}]},"ts":1669821344047,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7LuphETIWiO_teNKNu1_mATs_O0HxfyqCX2rwdxqI7E"},
{"content":{"body":"not all behavior","msgtype":"m.text","org.matrix.msc1767.text":"not all behavior"},"ts":1669821351410,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rV6OQ0GphrBdMsTqoR3D0ZMcSkQS4zfuZ1s1TG-Ovmw"},
{"content":{"body":"and, i am not so pedantic about this, we can have stuff on the left hand side, we just have to be really intentional here","msgtype":"m.text","org.matrix.msc1767.text":"and, i am not so pedantic about this, we can have stuff on the left hand side, we just have to be really intentional here"},"ts":1669821353927,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$YW0RrmR4u00SnxWz6g6nbsYxL7Zg-sLRqbXjrASTQHE"},
{"content":{"body":"it's tightly constrained, by design","msgtype":"m.text","org.matrix.msc1767.text":"it's tightly constrained, by design"},"ts":1669821355930,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iri7VGbxXTQLdzp1THMM_W87L1vucjGSzcMjXA3HrYw"},
{"content":{"body":"hosts are only allowed to reject or not based on `assert`; they can't provide different representations based on it","format":"org.matrix.custom.html","formatted_body":"hosts are only allowed to reject or not based on <code>assert</code>; they can't provide different representations based on it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hosts are only allowed to reject or not based on `assert`; they can't provide different representations based on it","mimetype":"text/plain"},{"body":"hosts are only allowed to reject or not based on <code>assert</code>; they can't provide different representations based on it","mimetype":"text/html"}]},"ts":1669821381175,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Kebcg1bWws8cuaEo9itvGHBt5Vmb77-MJ7rLlUwfFwc"},
{"content":{"body":"ok, lets pick this up tomorrow maybe, it doesnt sound like we have a huge gulf of disagreement","msgtype":"m.text","org.matrix.msc1767.text":"ok, lets pick this up tomorrow maybe, it doesnt sound like we have a huge gulf of disagreement"},"ts":1669821387039,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qzcMVoUk2DbmJJsb0buCl9_JGrsigVUED8Hrqk4_3tw"},
{"content":{"body":"> <@ljharb:matrix.org> hosts are only allowed to reject or not based on `assert`; they can't provide different representations based on it\n\nthey can and do given that css exists?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Kebcg1bWws8cuaEo9itvGHBt5Vmb77-MJ7rLlUwfFwc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>hosts are only allowed to reject or not based on <code>assert</code>; they can't provide different representations based on it</blockquote></mx-reply>they can and do given that css exists?","m.relates_to":{"m.in_reply_to":{"event_id":"$Kebcg1bWws8cuaEo9itvGHBt5Vmb77-MJ7rLlUwfFwc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> hosts are only allowed to reject or not based on `assert`; they can't provide different representations based on it\n\nthey can and do given that css exists?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Kebcg1bWws8cuaEo9itvGHBt5Vmb77-MJ7rLlUwfFwc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>hosts are only allowed to reject or not based on <code>assert</code>; they can't provide different representations based on it</blockquote></mx-reply>they can and do given that css exists?","mimetype":"text/html"}]},"ts":1669821400062,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ey9RdnLSIms4DrOfMWGoaoIDlLuTi5fjMQUcJp5DhMM"},
{"content":{"body":"yes, we reject based on the mime type, but these don't get parsed as javascript","msgtype":"m.text","org.matrix.msc1767.text":"yes, we reject based on the mime type, but these don't get parsed as javascript"},"ts":1669821423681,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jjozANS2D6hZLzWYuopls0bjynM9bZ1iBgTM_e2-kJ4"},
{"content":{"body":"Okay, I think ljharb, yulia, and I are in agreement about the role of with/assert syntax in import statements and the open question is how to satisfy Justin’s request for extensibility. He’s clear about the requirements and we should be clear about alternative paths to simply forwarding a KV bag from syntax to import hooks.","msgtype":"m.text","org.matrix.msc1767.text":"Okay, I think ljharb, yulia, and I are in agreement about the role of with/assert syntax in import statements and the open question is how to satisfy Justin’s request for extensibility. He’s clear about the requirements and we should be clear about alternative paths to simply forwarding a KV bag from syntax to import hooks."},"ts":1669821425988,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NmxT3EruwQAhHOTrrwwzdBCruxbMKzKkHYu7Lp6DGbw"},
{"content":{"body":"\"parsed as javascript\" isn't the constraint. it's \"you can only ever get one representation of a specifier\"","msgtype":"m.text","org.matrix.msc1767.text":"\"parsed as javascript\" isn't the constraint. it's \"you can only ever get one representation of a specifier\""},"ts":1669821446940,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oD_J1xfWMBLdrCvaXWGhAfhMVGC11E4aQjKzvPRhArk"},
{"content":{"body":"My concrete suggestion is that the mapping should occur out of band, in an import map or similar.","msgtype":"m.text","org.matrix.msc1767.text":"My concrete suggestion is that the mapping should occur out of band, in an import map or similar."},"ts":1669821453360,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MxsMvxNuZ5eBoyW66ERKWB3US-mLix05fqtIeASVxEg"},
{"content":{"body":"that sounds like a good path forward","msgtype":"m.text","org.matrix.msc1767.text":"that sounds like a good path forward"},"ts":1669821465214,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4ZOOR0b_8AWVctcgaK-zEu53LjOiTjjp-d7B6lxFi9Q"},
{"content":{"body":"tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code.","msgtype":"m.text","org.matrix.msc1767.text":"tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code."},"ts":1669821486658,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_QnNNCfYkDZKqLmWOg6xlcUpobOOdIQL0f6-4RqtQBo"},
{"content":{"body":"Yes. There must only be one representation per specifier (or the reflection thereof which I believe should be universal)","msgtype":"m.text","org.matrix.msc1767.text":"Yes. There must only be one representation per specifier (or the reflection thereof which I believe should be universal)"},"ts":1669821487970,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$E40d_PkqFJqTESnA0HkjZ9pLqmjWOkAWYJP0OSP5dJU"},
{"content":{"body":" * tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code.","m.new_content":{"body":"tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code.","msgtype":"m.text","org.matrix.msc1767.text":"tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code."},"m.relates_to":{"event_id":"$_QnNNCfYkDZKqLmWOg6xlcUpobOOdIQL0f6-4RqtQBo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * tbh i wish import assertions hadn't landed, out of band would have been much better. i think env-specific or tool-specific needs should be met outside the source code."},"ts":1669821507513,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4Rqg2xtqlkP2AcAQmSpzT05EmZcQgvC_P0W0sU0UynI"},
{"content":{"body":"yes that aligns with the current reality and i think im fine with that. and i think my concern (though not justins) is resolved with what we just discussed","msgtype":"m.text","org.matrix.msc1767.text":"yes that aligns with the current reality and i think im fine with that. and i think my concern (though not justins) is resolved with what we just discussed"},"ts":1669821532478,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$CVyltC8yUVEb35Q8s8myvMmwnYXVTyE0Vrof57EGYQ8"},
{"content":{"body":"Hey, you know what’s cool about circadian rhythms? Whenever the sun rises, your ability to go to sleep stops, but your need for sleep continues!","msgtype":"m.text","org.matrix.msc1767.text":"Hey, you know what’s cool about circadian rhythms? Whenever the sun rises, your ability to go to sleep stops, but your need for sleep continues!"},"ts":1669821681725,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$i_yREqxhVk4TGbhnWY5g2f7ouRB9F_h8ja1lLpWbEuQ"},
{"content":{"body":"If this persists for, say, a few cycles, the whole world starts to feel like an IKEA with no exit.","msgtype":"m.text","org.matrix.msc1767.text":"If this persists for, say, a few cycles, the whole world starts to feel like an IKEA with no exit."},"ts":1669821754942,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0-gZDnXTbSLAzfzWTCBtmxUYVjx-qqSKGm7yQq9bI3Y"},
{"content":{"body":"> <@yulia:mozilla.org> im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing\n\nHaving both `with` and `assert` is going to lead to confusion about which key-value goes where.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing</blockquote></mx-reply>Having both <code>with</code> and <code>assert</code> is going to lead to confusion about which key-value goes where.","m.relates_to":{"m.in_reply_to":{"event_id":"$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> im even not sure if we should add something like `with` or if we should really just expand on `assert` because its already getting confusing\n\nHaving both `with` and `assert` is going to lead to confusion about which key-value goes where.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$utqd_tVv8x35snSD93dNAlFDbE2fySWxa5tvSSnTewo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>im even not sure if we should add something like <code>with</code> or if we should really just expand on <code>assert</code> because its already getting confusing</blockquote></mx-reply>Having both <code>with</code> and <code>assert</code> is going to lead to confusion about which key-value goes where.","mimetype":"text/html"}]},"ts":1669822003852,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pePLC7tcxrrcEL0kfkiy7bBq-y61vLA-58UJiycDATo"},
{"content":{"body":"> <@ljharb:matrix.org> you might have to figure out what the various assertions *are*, but you don't have to figure out what they *do*\n\nBut you do. You have to know that `assert { type: 'json' }` turns into a default import of an object (and no named imports). `type: 'css'` gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$esY1St5w_sEZbAuA_RSz5aT3UzdAPK0xFNFVjz9Qhy8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>you might have to figure out what the various assertions <em>are</em>, but you don't have to figure out what they <em>do</em></blockquote></mx-reply>But you do. You have to know that <code>assert { type: 'json' }</code> turns into a default import of an object (and no named imports). <code>type: 'css'</code> gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.","m.relates_to":{"m.in_reply_to":{"event_id":"$esY1St5w_sEZbAuA_RSz5aT3UzdAPK0xFNFVjz9Qhy8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> you might have to figure out what the various assertions *are*, but you don't have to figure out what they *do*\n\nBut you do. You have to know that `assert { type: 'json' }` turns into a default import of an object (and no named imports). `type: 'css'` gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$esY1St5w_sEZbAuA_RSz5aT3UzdAPK0xFNFVjz9Qhy8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>you might have to figure out what the various assertions <em>are</em>, but you don't have to figure out what they <em>do</em></blockquote></mx-reply>But you do. You have to know that <code>assert { type: 'json' }</code> turns into a default import of an object (and no named imports). <code>type: 'css'</code> gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.","mimetype":"text/html"}]},"ts":1669822082026,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TR-EKP1scKUBuFdDK_wGA-QBuXp78FTl7vMQn0tycNo"},
{"content":{"body":"In both cases, the hint does not need to be expressed in syntax and can _also_ be expressed elsewhere.","format":"org.matrix.custom.html","formatted_body":"In both cases, the hint does not need to be expressed in syntax and can <em>also</em> be expressed elsewhere.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In both cases, the hint does not need to be expressed in syntax and can _also_ be expressed elsewhere.","mimetype":"text/plain"},{"body":"In both cases, the hint does not need to be expressed in syntax and can <em>also</em> be expressed elsewhere.","mimetype":"text/html"}]},"ts":1669822200804,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ky7-m_85TBI7XKRoMhMIi8S5l65NMmLOfN3VehXfsI8"},
{"content":{"body":"In the case of JSON, the behavior is indicated either by extension or MIME type depending on the medium. It could also be hinted in an import map.","msgtype":"m.text","org.matrix.msc1767.text":"In the case of JSON, the behavior is indicated either by extension or MIME type depending on the medium. It could also be hinted in an import map."},"ts":1669822230788,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KxtRIvA3t49DrhZ_ydsx7IZ2MhlRfNFEsxb6AU-0nTk"},
{"content":{"body":"> <@jridgewell:matrix.org> But you do. You have to know that `assert { type: 'json' }` turns into a default import of an object (and no named imports). `type: 'css'` gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.\n\nThat’s not what they do, that’s what the modules are.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24TR-EKP1scKUBuFdDK_wGA-QBuXp78FTl7vMQn0tycNo\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>But you do. You have to know that <code>assert { type: 'json' }</code> turns into a default import of an object (and no named imports). <code>type: 'css'</code> gives you a StyleSheet and no class names, etc. These are already reflections mixed with asserts.</blockquote></mx-reply>That’s not what they do, that’s what the modules are.","m.relates_to":{"m.in_reply_to":{"event_id":"$TR-EKP1scKUBuFdDK_wGA-QBuXp78FTl7vMQn0tycNo"}},"msgtype":"m.text"},"ts":1669822251668,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BgXd7IXnlyKrzejxulzclQDiQ1apszyTbnGgE_TLkLk"},
{"content":{"body":"json doesn’t “turn into” that, that’s what it always is","msgtype":"m.text"},"ts":1669822269345,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5E0iw6nkxT66zi8tnTAnPKYiPdf7-cdUz8hbqUlcWmE"},
{"content":{"body":"I don't understand, neither is JS so some reflection must have happened.","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand, neither is JS so some reflection must have happened."},"ts":1669822305888,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$E1SlwQJ4kQSSe0XrE7VfkJpnKGlfeRQh-0yEdYqSXUA"},
{"content":{"body":"The reason you think JSON => default export is because node did it already, right?","msgtype":"m.text","org.matrix.msc1767.text":"The reason you think JSON => default export is because node did it already, right?"},"ts":1669822319093,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rExH9h1kYjmQMjiVBK-EmSDj5xTd8zQYlsANcM9tmRM"},
{"content":{"body":"I want to do that for my bundler.","msgtype":"m.text","org.matrix.msc1767.text":"I want to do that for my bundler."},"ts":1669822324272,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eGRz78oTHqFejb3Yu-8Pm-DN4OZayPMvOpaPiGp-Fj8"},
{"content":{"body":"no, because conceptually that’s what it is","msgtype":"m.text"},"ts":1669822328995,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6GYjPfXClcv7RvIIP_csu6ntvtlOftjVWZKrGFmtAko"},
{"content":{"body":"json is a single thing","msgtype":"m.text"},"ts":1669822333153,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sGcjCVWMoMm1igQbVhY27v1dvOcIQU3VXx-dzZRqmhc"},
{"content":{"body":"that’s what a default export is - the single thing that represents what a Module is","msgtype":"m.text"},"ts":1669822347848,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wp3bijWdTULWfV_zfIp5jV7oHHpWXkyvgftF7MpyUi4"},
{"content":{"body":"named exports are just extra stuff a Module has","msgtype":"m.text"},"ts":1669822367400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i3II6-1P28BVkhvYbdu6GE8e3J16QGJM0sdiSVyjgYA"},
{"content":{"body":"We still have to teach people that you don't get named imports with JSON","msgtype":"m.text","org.matrix.msc1767.text":"We still have to teach people that you don't get named imports with JSON"},"ts":1669822369701,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LBSZFEMz2mAgfXjrHt2NOYB5zDLebqb7n0EF9r0i6yk"},
{"content":{"body":"remember that json is not always an object at the top level","msgtype":"m.text"},"ts":1669822377886,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$m7Es0-n5U3CObFlP5cKarF5xmI6vKqWL5keYqf_xTgI"},
{"content":{"body":"I don't share your intution on this at all, these are both reflection of some source text","msgtype":"m.text","org.matrix.msc1767.text":"I don't share your intution on this at all, these are both reflection of some source text"},"ts":1669822395710,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$M1V_ZFYDZUJS3TcBqwgDFAb-o37ScKHIG8k6xp4Pr7A"},
{"content":{"body":"i can’t believe most devs think of importing something as reflecting on source text","msgtype":"m.text"},"ts":1669822417862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BD_SQ2dVk6SmzIrUL10Ybnc9NAQo8ahD42o34i46WAM"},
{"content":{"body":"It's literally not JS, so it must have done some reflection?","msgtype":"m.text","org.matrix.msc1767.text":"It's literally not JS, so it must have done some reflection?"},"ts":1669822436876,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xu2VkpyVHqxWrpULvgxDQIagH923RgYTfTEmqTRrNoo"},
{"content":{"body":"I don't understand this viewpoint at all","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand this viewpoint at all"},"ts":1669822445559,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zOZcwwImCiw4d2kZQGxTpvmMt2N9b8azl0blU_38fOg"},
{"content":{"body":"i don’t think most devs even think of the term “reflection” much, tbh","msgtype":"m.text"},"ts":1669822456482,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vR02mS3iW-8N9DwPJIHZ1gvrMr3A3mmPlGVvE6Ruyo4"},
{"content":{"body":"I turned non JS into a JS module","msgtype":"m.text","org.matrix.msc1767.text":"I turned non JS into a JS module"},"ts":1669822460784,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3FpxAgulBK5sOB_j1nXzXZlperBQXeKCCg2c8c6JOL4"},
{"content":{"body":"but sure, the *engine* might be doing reflection. You didn’t.","format":"org.matrix.custom.html","formatted_body":"but sure, the <em>engine</em> might be doing reflection. You didn’t.","msgtype":"m.text"},"ts":1669822470296,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3h4ODS4wEHHfLfpaiuZFxsJA-K28gcYbGKcmIbi-Ncg"},
{"content":{"body":"and it’s still not a js module","msgtype":"m.text"},"ts":1669822479628,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jLZa4UqG9b_DjLtk0Vyl7nNtR2K-fbFzztx176NdwYw"},
{"content":{"body":"it’s a js value that represents the module","msgtype":"m.text"},"ts":1669822487198,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WoFgD7y9L-w-A4CoXzi3iiTrgketjTgK9NtmeP9JUB4"},
{"content":{"body":"Bundlers assueme a limited role of the host.","msgtype":"m.text","org.matrix.msc1767.text":"Bundlers assueme a limited role of the host."},"ts":1669822495926,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G9SgqCsmjwWGHRE1FCF1yFBcaou1FhyRbYm86llltPA"},
{"content":{"body":"any more than Object is a js function - it’s not, it’s c++ in most cases","msgtype":"m.text"},"ts":1669822506136,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j9YzUO_4gB_HgDsMfSY6V7zrDWWfXDUAbEh7P_gbNEY"},
{"content":{"body":"So I am the host reflecting on these import for my users.","msgtype":"m.text","org.matrix.msc1767.text":"So I am the host reflecting on these import for my users."},"ts":1669822509579,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LCqUXYkgXsG555rysuDJsjhVQqG6QrZ9cRkTqo7LvDw"},
{"content":{"body":"ok but devs aren’t the bundler, they just use them","msgtype":"m.text"},"ts":1669822513698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7hUKqQkFiZk6np0Ph70SGXIZyI4SjA2dmjjQ1ZHq7m8"},
{"content":{"body":"> <@jridgewell:matrix.org> I turned non JS into a JS module\n\nHold my beer. I turned HTML into a reactive Lisp compiles down to JS.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$3FpxAgulBK5sOB_j1nXzXZlperBQXeKCCg2c8c6JOL4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I turned non JS into a JS module</blockquote></mx-reply>Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.","m.relates_to":{"m.in_reply_to":{"event_id":"$3FpxAgulBK5sOB_j1nXzXZlperBQXeKCCg2c8c6JOL4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> I turned non JS into a JS module\n\nHold my beer. I turned HTML into a reactive Lisp compiles down to JS.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$3FpxAgulBK5sOB_j1nXzXZlperBQXeKCCg2c8c6JOL4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I turned non JS into a JS module</blockquote></mx-reply>Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.","mimetype":"text/html"}]},"ts":1669822516274,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GZ2xKRjnIwDelKScsTKxqgxo3Kg8uZv64FqWORje2TQ"},
{"content":{"body":"the bundler is reflecting, sure.","msgtype":"m.text"},"ts":1669822523242,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ki1tac_QEGAqXZnSi7j6hw5n03RefuKnXPcFn6wnQVM"},
{"content":{"body":"but most devs aren’t the bundler and don’t and won’t think that way ","format":"org.matrix.custom.html","formatted_body":"but most devs aren’t the bundler and don’t and won’t think that way","msgtype":"m.text"},"ts":1669822534389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NhMbUMavep4lXAubK5dsGK7l06rPs1x3GGjQN7ajdbs"},
{"content":{"body":"Yet we're having to invent the syntaxes for them to do it, because the bundler can't know the correct use in every situation","msgtype":"m.text","org.matrix.msc1767.text":"Yet we're having to invent the syntaxes for them to do it, because the bundler can't know the correct use in every situation"},"ts":1669822572963,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y04P3ZTpf26rVy0TI9OFMrj6Yf9GvyF9nUzkONEeSzs"},
{"content":{"body":"the prevailing mental model should be what most users reason about, which won’t likely match how implementers think","msgtype":"m.text"},"ts":1669822575259,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$afSXFxP1WmVNV4-D64pnylXJzrJnA-cSbyNKRqYDFMs"},
{"content":{"body":"> <@kriskowal:matrix.org> Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.\n\nAnd then I imported it in JavaScript, to be clear, so I could instantiate it. And I did it in the browser during development and in the bundler for production.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$GZ2xKRjnIwDelKScsTKxqgxo3Kg8uZv64FqWORje2TQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.</blockquote></mx-reply>And then I imported it in JavaScript, to be clear, so I could instantiate it. And I did it in the browser during development and in the bundler for production.","m.relates_to":{"m.in_reply_to":{"event_id":"$GZ2xKRjnIwDelKScsTKxqgxo3Kg8uZv64FqWORje2TQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.\n\nAnd then I imported it in JavaScript, to be clear, so I could instantiate it. And I did it in the browser during development and in the bundler for production.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$GZ2xKRjnIwDelKScsTKxqgxo3Kg8uZv64FqWORje2TQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Hold my beer. I turned HTML into a reactive Lisp compiles down to JS.</blockquote></mx-reply>And then I imported it in JavaScript, to be clear, so I could instantiate it. And I did it in the browser during development and in the bundler for production.","mimetype":"text/html"}]},"ts":1669822575779,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$S7T_Y2aTgMWWS-LrDmuhHYNABE9bC8k2jFmOc-PEWfQ"},
{"content":{"body":"Which is to say, our wills are twins.","msgtype":"m.text","org.matrix.msc1767.text":"Which is to say, our wills are twins."},"ts":1669822586233,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$3gLMLJYS4dM-TZqmEJOD8TcQLUlIkWtZlpjlR-zz85M"},
{"content":{"body":"So they are having to think about it, in a really awful string specifier","msgtype":"m.text","org.matrix.msc1767.text":"So they are having to think about it, in a really awful string specifier"},"ts":1669822589161,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$F_FT4JrpfqrClulr4qMDhj6L1q7vcEbq3dyzpctz4vM"},
{"content":{"body":"sure, or, they’re having to *not do the thing they can’t express*. Which is also a fine outcome.","format":"org.matrix.custom.html","formatted_body":"sure, or, they’re having to <em>not do the thing they can’t express</em>. Which is also a fine outcome.","msgtype":"m.text"},"ts":1669822608389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SuQ4PILM0oboJzrXD81udzpx8w0P4juM-CNZ9IeiD0c"},
{"content":{"body":"everything needn’t always be possible sans language changes ","format":"org.matrix.custom.html","formatted_body":"everything needn’t always be possible sans language changes","msgtype":"m.text"},"ts":1669822636318,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2pP5V4tkD274HzLS5pofVSMlN8WB7zUFJlRzs7hQaQo"},
{"content":{"body":"Oh, and the string specifier was simply `./something.html`, where `.html` mapped to a transform that was indicated in the local `package.json`.","format":"org.matrix.custom.html","formatted_body":"Oh, and the string specifier was simply <code>./something.html</code>, where <code>.html</code> mapped to a transform that was indicated in the local <code>package.json</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Oh, and the string specifier was simply `./something.html`, where `.html` mapped to a transform that was indicated in the local `package.json`.","mimetype":"text/plain"},{"body":"Oh, and the string specifier was simply <code>./something.html</code>, where <code>.html</code> mapped to a transform that was indicated in the local <code>package.json</code>.","mimetype":"text/html"}]},"ts":1669822637229,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ugc7npBP86faeVpaORKEwNd_CqYJL6jdj3drkr0wqH0"},
{"content":{"body":"How?!","msgtype":"m.text","org.matrix.msc1767.text":"How?!"},"ts":1669822637232,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EubMIRp5x7OUOZEAukn9dXcp0T8u9TdDBOVvJpjhOhk"},
{"content":{"body":"And the transform was brought in via the devDependencies.","msgtype":"m.text","org.matrix.msc1767.text":"And the transform was brought in via the devDependencies."},"ts":1669822643656,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JMfLNK6wRGkocJkmOHUHcGxbgfIS77wXfj1gShehg64"},
{"content":{"body":"Let's remove `require('json')` because that's not ES","format":"org.matrix.custom.html","formatted_body":"Let's remove <code>require('json')</code> because that's not ES","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Let's remove `require('json')` because that's not ES","mimetype":"text/plain"},{"body":"Let's remove <code>require('json')</code> because that's not ES","mimetype":"text/html"}]},"ts":1669822648896,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VCU5wsWuVS0KVbmHwh_Cmcqctfzas8ZUmFrMruMjWCs"},
{"content":{"body":"Ergonmics are a core need for bundlers","msgtype":"m.text","org.matrix.msc1767.text":"Ergonmics are a core need for bundlers"},"ts":1669822666156,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$p4zfvL9zfZL3h8hhyklupz4syrrE2IuRLqHT7ljsTic"},
{"content":{"body":"I have to provide this ability to users, because they'll go somewhere else if I don't","msgtype":"m.text","org.matrix.msc1767.text":"I have to provide this ability to users, because they'll go somewhere else if I don't"},"ts":1669822679308,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$75FJinyvU2NTcTOkaI0d_MtC-ZCezl2gbqEky0AkHZc"},
{"content":{"body":"Node had to allow importing JSON","msgtype":"m.text","org.matrix.msc1767.text":"Node had to allow importing JSON"},"ts":1669822700135,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$M5jLQAIb-l5oYz9xjs-ZFrKDqjqZ4Yu7rbQIQDDKCyg"},
{"content":{"body":"ES had to allow importing JSON","msgtype":"m.text","org.matrix.msc1767.text":"ES had to allow importing JSON"},"ts":1669822706221,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3VIrwWcOfS1dx3fQ1ob65qrKcKEhVdL9AptoZsYdulE"},
{"content":{"body":"We're here to solve the ecosystem's needs","msgtype":"m.text","org.matrix.msc1767.text":"We're here to solve the ecosystem's needs"},"ts":1669822712257,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CvOaXqzTPwNhnwm1YkN7e7rkNV6SKwQivTZfnQOCqjY"},
{"content":{"body":" * We're here to solve the ecosystem's needs","m.new_content":{"body":"We're here to solve the ecosystem's needs","msgtype":"m.text","org.matrix.msc1767.text":"We're here to solve the ecosystem's needs"},"m.relates_to":{"event_id":"$CvOaXqzTPwNhnwm1YkN7e7rkNV6SKwQivTZfnQOCqjY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We're here to solve the ecosystem's needs"},"ts":1669822732568,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4RKO0r0hBMDcS9JHtj3GNwTnLC_mlnd_lsN-_REMAZ4"},
{"content":{"body":"where else can they go if no bundlers can do it?","msgtype":"m.text"},"ts":1669822741453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$laPXWQc-Nm3PCsBZbgeclLETSjvH_SdEOOci6QJMBzQ"},
{"content":{"body":"> <@jridgewell:matrix.org> We're here to solve the ecosystem's needs\n\nyes, but not “all possible needs”, individual needs, one at a time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24CvOaXqzTPwNhnwm1YkN7e7rkNV6SKwQivTZfnQOCqjY\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>We're here to solve the ecosystem's needs</blockquote></mx-reply>yes, but not “all possible needs”, individual needs, one at a time","m.relates_to":{"m.in_reply_to":{"event_id":"$CvOaXqzTPwNhnwm1YkN7e7rkNV6SKwQivTZfnQOCqjY"}},"msgtype":"m.text"},"ts":1669822758659,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aQo7baG-NSFE965CTkrjUJyPi0Vl6S0xO19Xm5N1Bog"},
{"content":{"body":"I think I’ve lost the crux of the argument.","msgtype":"m.text","org.matrix.msc1767.text":"I think I’ve lost the crux of the argument."},"ts":1669822775943,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HJQB-Zpzk27bcbjpbCHhE-EfauUIp9QScCyhWoVIJlw"},
{"content":{"body":"Are we ignoring that the ecosystem invents their own languages and tools constanatly?","msgtype":"m.text","org.matrix.msc1767.text":"Are we ignoring that the ecosystem invents their own languages and tools constanatly?"},"ts":1669822790379,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZQ4rJImKG8KFs_yMwyWsaasYjqRcdW7hpArSO6y3MUE"},
{"content":{"body":"Near as I can tell, I want everything Justin wants and have a story about how to make it happen, but not necessarily identical proposed solutions.","msgtype":"m.text","org.matrix.msc1767.text":"Near as I can tell, I want everything Justin wants and have a story about how to make it happen, but not necessarily identical proposed solutions."},"ts":1669822807801,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VXqYgPnL4lMCGHWFM9LqFcdj6aWdBjSPUaIGSHFsBHE"},
{"content":{"body":"There'll just be another tool that does the thing they need","msgtype":"m.text","org.matrix.msc1767.text":"There'll just be another tool that does the thing they need"},"ts":1669822812941,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$J1c34tVhoHMae-wAAnGjkclSroSi4Ot1zIgqrU44fcM"},
{"content":{"body":"no, I’m saying that JS doesn’t have to become all things. If you want to invent a language, go for it","msgtype":"m.text"},"ts":1669822816221,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$upqZXS2N1aphbahtlgpy4_HYnWqO5AGlGZJTTcfu4X0"},
{"content":{"body":"Kris Kowal: I would also appreciate a README.md or some such :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I would also appreciate a README.md or some such :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: I would also appreciate a README.md or some such :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I would also appreciate a README.md or some such :-)","mimetype":"text/html"}]},"ts":1669822833567,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$CgWunP4rhCyU0469FeRfXw5_-GtgUhTXFGmeDAQ5X3Y"},
{"content":{"body":"imo some node collabs suffer from a similar problem; in a panic over “but what if people use something else” they end up trying to make node into something it shouldn’t be. if a better platform exists, *good*, people should go use it","format":"org.matrix.custom.html","formatted_body":"imo some node collabs suffer from a similar problem; in a panic over “but what if people use something else” they end up trying to make node into something it shouldn’t be. if a better platform exists, <em>good</em>, people should go use it","msgtype":"m.text"},"ts":1669822905305,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jcmEFO7XYulOG_CO41WKoWTLD4SDRJfE6FEIf8PmLnU"},
{"content":{"body":"I mean, pre-ESM, I did a thing called Guten Tags https://github.com/gutentags/gutentag which did transforms on the fly in dev (in the browser) and folded them into a bundle for prod. That’s where I’m starting. The loader was https://github.com/gutentags/system","msgtype":"m.text","org.matrix.msc1767.text":"I mean, pre-ESM, I did a thing called Guten Tags https://github.com/gutentags/gutentag which did transforms on the fly in dev (in the browser) and folded them into a bundle for prod. That’s where I’m starting. The loader was https://github.com/gutentags/system"},"ts":1669822914085,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$70zPC3gM1D1I7Wr-KrWNvxuV8dV5h10BTD8xsGCp5Zo"},
{"content":{"body":"The reason it’s relevant is that it was all async, so basically playing the CommonJS game with hands bound.","msgtype":"m.text","org.matrix.msc1767.text":"The reason it’s relevant is that it was all async, so basically playing the CommonJS game with hands bound."},"ts":1669822940562,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$J9rSi8HOLEayC1m7sxKMlHDirw-u99GgRX208_8960U"},
{"content":{"body":"> <@ljharb:matrix.org> imo some node collabs suffer from a similar problem; in a panic over “but what if people use something else” they end up trying to make node into something it shouldn’t be. if a better platform exists, *good*, people should go use it\n\nI think this is slightly inaccurate, people can't just up and switch to deno or bun overnight","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$jcmEFO7XYulOG_CO41WKoWTLD4SDRJfE6FEIf8PmLnU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />imo some node collabs suffer from a similar problem; in a panic over “but what if people use something else” they end up trying to make node into something it shouldn’t be. if a better platform exists, <em>good</em>, people should go use it</blockquote></mx-reply>I think this is slightly inaccurate, people can't just up and switch to deno or bun overnight","m.relates_to":{"m.in_reply_to":{"event_id":"$jcmEFO7XYulOG_CO41WKoWTLD4SDRJfE6FEIf8PmLnU"}},"msgtype":"m.text"},"ts":1669822963538,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6905iJvQy9A6EYe_XvDiNApUkQkELAp-nooi-K3cyi4"},
{"content":{"body":"👏 for the pun","m.relates_to":{"event_id":"$70zPC3gM1D1I7Wr-KrWNvxuV8dV5h10BTD8xsGCp5Zo","is_falling_back":true,"m.in_reply_to":{"event_id":"$70zPC3gM1D1I7Wr-KrWNvxuV8dV5h10BTD8xsGCp5Zo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1669822965638,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FocUWcrmUuoqdkyPiCcWAfXKKwtphVoKBPh8nTQ2b10"},
{"content":{"body":"i agree, which is why the fear is unfounded","msgtype":"m.text"},"ts":1669822981595,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qAL-LqXCP-Jydy2gmvasT4QrSxxoxEgBGmK33QYeE7I"},
{"content":{"body":"aws can't just say tomorrow that lambda will be their own new runtime that isn't node","msgtype":"m.text"},"ts":1669822985445,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nJojSPGPghrEkxuwyUFeduJ5mwDDZFhnIL6NEdYDkTM"},
{"content":{"body":"which means “a competitor has X and we don’t” is almost never an urgent scenario","msgtype":"m.text"},"ts":1669823006410,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ERBABb5qskG3NqkKN8zLdBUc2OPZrQobwN_2Aw1TynE"},
{"content":{"body":"but this doesn't mean node users shouldn't have new interesting stuff","msgtype":"m.text"},"ts":1669823015270,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$W4k47ILCB_V-Juu5ZJt1Q2FvxiIe2V9thwvISpLvJFo"},
{"content":{"body":"also true. But nothing is interesting, or a good design, merely because someone else has it :-)","msgtype":"m.text"},"ts":1669823034573,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R9v2Obes38z-KBB1fZp9J2askXabYN6EAKaYfR3d-UU"},
{"content":{"body":"* also true. But nothing is interesting, or a good design, merely because someone else has it :-)","m.new_content":{"body":"also true. But nothing is interesting, or a good design, merely because someone else has it :-)","msgtype":"m.text"},"m.relates_to":{"event_id":"$R9v2Obes38z-KBB1fZp9J2askXabYN6EAKaYfR3d-UU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1669823057506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mf1Bh42NqjLYROjAgRFXAwkehsK7BqOMC83wRcu-qvo"},
{"content":{"body":"https://github.com/tc39/proposal-import-reflection/issues/18 is where this was discussed before","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/proposal-import-reflection/issues/18 is where this was discussed before"},"ts":1669824118258,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3szSmNr2cXTLT8hH6jOgb6xLH2nVJx8CZFJcuOV-MyA"},
{"content":{"body":"Justin Ridgewell: it seems like you just want to use import assertions for bundler metadata","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: it seems like you just want to use import assertions for bundler metadata","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: it seems like you just want to use import assertions for bundler metadata","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: it seems like you just want to use import assertions for bundler metadata","mimetype":"text/html"}]},"ts":1669824320906,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$1IaU1_z6V4a9UX-86yR1ksVLtgBFZ7-qMcKxEhk70II"},
{"content":{"body":"which understandably is a difficult thing to discuss in this committee, but of course you can do as you wish","msgtype":"m.text","org.matrix.msc1767.text":"which understandably is a difficult thing to discuss in this committee, but of course you can do as you wish"},"ts":1669824334780,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$l41dIrS8eBJ7fqzO1Y4fG5ctVOxobrUHtwJWzvf7BUY"},
{"content":{"body":"what I still don't understand is how this relates to import reflection","msgtype":"m.text","org.matrix.msc1767.text":"what I still don't understand is how this relates to import reflection"},"ts":1669824345010,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$E_diFPPiQjtxtrju3gdyHV7FkwWF3MDdwsuKLoCqvY0"},
{"content":{"body":"I simply see no relation at all","msgtype":"m.text","org.matrix.msc1767.text":"I simply see no relation at all"},"ts":1669824351714,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$v3VTEFQxPDZU_6cIA4lsB0fV1cSzoMJzhKIXP2Eum1g"},
{"content":{"body":"What does \"reflection\" mean to you?","msgtype":"m.text","org.matrix.msc1767.text":"What does \"reflection\" mean to you?"},"ts":1669824463710,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$36qar__NkZWsQYEYNM1jUe9h_1rN0NMoxLduHTvAF98"},
{"content":{"body":"It's controlling runtime behavior of the module, that's a reflection to me.","msgtype":"m.text","org.matrix.msc1767.text":"It's controlling runtime behavior of the module, that's a reflection to me."},"ts":1669824476246,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zwEK90nRwVcSkHtIOq89rFR5n5NeGsRb3ZAlg8T9tSE"},
{"content":{"body":"Whether you lazy load, import unlinked, receive an array buffer, aren't those are all reflections?","msgtype":"m.text","org.matrix.msc1767.text":"Whether you lazy load, import unlinked, receive an array buffer, aren't those are all reflections?"},"ts":1669824518599,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kpNeXvzx6mb-MsO-q6xuBEOoYYrqh-XVdyGQFNCKeAk"},
{"content":{"body":"All of it's metadata, but it's used to do something in the runtime","msgtype":"m.text","org.matrix.msc1767.text":"All of it's metadata, but it's used to do something in the runtime"},"ts":1669824553092,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ifhWRz0XJS2_DeyHkGG0VObgvIOLtqh-YiUpNwG5g24"},
{"content":{"body":"we originally tried to define generic reflection when coming at this proposal, but at this point that is more of a design history than what the proposal represents now","msgtype":"m.text","org.matrix.msc1767.text":"we originally tried to define generic reflection when coming at this proposal, but at this point that is more of a design history than what the proposal represents now"},"ts":1669824605761,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$qoIPQSxgoX0aEsPnEgXrVFHQtPy8LKkm2In8Y193ICU"},
{"content":{"body":"where we got to, with unification with module blocks and compartments, is the ability to get the uninstantiated module record","msgtype":"m.text","org.matrix.msc1767.text":"where we got to, with unification with module blocks and compartments, is the ability to get the uninstantiated module record"},"ts":1669824636057,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$WyDFBWCk70tHhjYKc1jS7StizJpLHxFtO6gb_wf1NrU"},
{"content":{"body":"that's the use case for JS and Wasm","msgtype":"m.text","org.matrix.msc1767.text":"that's the use case for JS and Wasm"},"ts":1669824652690,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$xMoRRJOGYFtCf3AgOb9SpGx9KlmKmvFxX5ChV5tCGBM"},
{"content":{"body":"What I'm objecting to is creating a specific syntax to solve this, when the extensible syntax already exists and can solve it just same.","msgtype":"m.text","org.matrix.msc1767.text":"What I'm objecting to is creating a specific syntax to solve this, when the extensible syntax already exists and can solve it just same."},"ts":1669824690328,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4N8DC0QFZgn2v7lmHsq6lfxeJHoTKn1QrMxeOnsQuHg"},
{"content":{"body":"I don't want to end up in the inevitable confusion about what keyword goes where","msgtype":"m.text","org.matrix.msc1767.text":"I don't want to end up in the inevitable confusion about what keyword goes where"},"ts":1669824731806,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LOIbgMUs-5w9K_FripalJYz5vtrkE_jNMGvPmbM88jU"},
{"content":{"body":"is this the proposal for importing a module object instead of a module namespace","msgtype":"m.text","org.matrix.msc1767.text":"is this the proposal for importing a module object instead of a module namespace"},"ts":1669824746674,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oykIvDClek2z32Fcg5wOF5FEwpzeTsYK32xJu4cve38"},
{"content":{"body":"They're all reflections as I see it, and I want them to go into the same place","msgtype":"m.text","org.matrix.msc1767.text":"They're all reflections as I see it, and I want them to go into the same place"},"ts":1669824747669,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4ddlMLl9ldBg14XOWBFmM7Kdm18f1ua0u9POguiPVKA"},
{"content":{"body":"at some point, Justin and Jordan should sort of talk about it between them and work out a recommendation to make to Guy; it's not really fair for Guy to bear the burden of this disagreement","msgtype":"m.text","org.matrix.msc1767.text":"at some point, Justin and Jordan should sort of talk about it between them and work out a recommendation to make to Guy; it's not really fair for Guy to bear the burden of this disagreement"},"ts":1669824747716,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N1BmcBC6468Of_cmpatqEiJLi6hrtHc59CUdSjtMqto"},
{"content":{"body":"(sorry that's not to exclude other opinionated parties and co-champions of module reflection; they can join the battle and receive the results as well, but at least those people are affected)","msgtype":"m.text","org.matrix.msc1767.text":"(sorry that's not to exclude other opinionated parties and co-champions of module reflection; they can join the battle and receive the results as well, but at least those people are affected)"},"ts":1669824814849,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Exx1DfMkNsAR0BEvylVNJZY9EfPbnsG6T76XvJaXwNY"},
{"content":{"body":"i think it makes sense to have a new syntax for uninstantiated module that doesn't need to be burdened with also being a whole generic system. (and as an aside, i still think people who want wasm modules instead of wasm module namespaces should not be using `import` anyway but 🤷)","format":"org.matrix.custom.html","formatted_body":"i think it makes sense to have a new syntax for uninstantiated module that doesn't need to be burdened with also being a whole generic system. (and as an aside, i still think people who want wasm modules instead of wasm module namespaces should not be using <code>import</code> anyway but 🤷)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i think it makes sense to have a new syntax for uninstantiated module that doesn't need to be burdened with also being a whole generic system. (and as an aside, i still think people who want wasm modules instead of wasm module namespaces should not be using `import` anyway but 🤷)","mimetype":"text/plain"},{"body":"i think it makes sense to have a new syntax for uninstantiated module that doesn't need to be burdened with also being a whole generic system. (and as an aside, i still think people who want wasm modules instead of wasm module namespaces should not be using <code>import</code> anyway but 🤷)","mimetype":"text/html"}]},"ts":1669824897881,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gFBrkyDgFdEioIcZC3xe-nwSedq7xg0FUGW8QX3e5xg"},
{"content":{"body":"I do think there's some value in being able to import something in various types. E.g., Blob vs ArrayBuffer comes to mind. But I don't have strong opinions on syntax (unless it's terrible :p)","msgtype":"m.text","org.matrix.msc1767.text":"I do think there's some value in being able to import something in various types. E.g., Blob vs ArrayBuffer comes to mind. But I don't have strong opinions on syntax (unless it's terrible :p)"},"ts":1669824904703,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$vsI8bOYckay6tajxZ-ynMqeb1UNIMk1Pf806XkENNZ4"},
{"content":{"body":"we did go through a lot of these cases when approaching reflection to try and see how it fits in with these use cases","msgtype":"m.text","org.matrix.msc1767.text":"we did go through a lot of these cases when approaching reflection to try and see how it fits in with these use cases"},"ts":1669824947365,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HOVsF0aVSTMabEMcL7f4bfMSN59e7oevy8DEmy_qExM"},
{"content":{"body":"our eventual conclusion was that specifying these other types of reflections is very difficult because of host-specific semantics and the dififculty of getting agreement between hosts","msgtype":"m.text","org.matrix.msc1767.text":"our eventual conclusion was that specifying these other types of reflections is very difficult because of host-specific semantics and the dififculty of getting agreement between hosts"},"ts":1669824973246,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$yhiAAVqOfNPAb5e2ZNBNnpIvqtQKpGoCnMAEOOEb1qs"},
{"content":{"body":"and that instead asset references would be the preferable approach","msgtype":"m.text","org.matrix.msc1767.text":"and that instead asset references would be the preferable approach"},"ts":1669824992583,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$qJIVNcgvBtVT_PUc3AO565IRbTCtGHDLYh19hA0wzDg"},
{"content":{"body":"with an opaque asset representation","msgtype":"m.text","org.matrix.msc1767.text":"with an opaque asset representation"},"ts":1669825002791,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$kbGIOMSAyyDqCPjgaCgfes_cX-yDClf1VHkIqZMnwcY"},
{"content":{"body":"but this does not fulfill the requirements of import reflection for JS and Wasm modules, since it is not enough to know the asset, you need to know its modular interpretation","msgtype":"m.text","org.matrix.msc1767.text":"but this does not fulfill the requirements of import reflection for JS and Wasm modules, since it is not enough to know the asset, you need to know its modular interpretation"},"ts":1669825022745,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$nc4fYqwyoCCUorl3TU2XNt9_iEMnW5Ua5YrDmfaN_rw"},
{"content":{"body":"the module blocks/compartments proposal has a `load` func or similar right?","format":"org.matrix.custom.html","formatted_body":"the module blocks/compartments proposal has a <code>load</code> func or similar right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the module blocks/compartments proposal has a `load` func or similar right?","mimetype":"text/plain"},{"body":"the module blocks/compartments proposal has a <code>load</code> func or similar right?","mimetype":"text/html"}]},"ts":1669825030191,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6CKf9lb_fR7QcKo3TJhfboHcch31Oc4xrPWBLOWGmxQ"},
{"content":{"body":"I don't think we need to standardize the userland reflections","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we need to standardize the userland reflections"},"ts":1669825038203,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$i2WWwmocT1m9knYbjdkeN46ritgBMhFuvUIOGcaYU6U"},
{"content":{"body":"so, we very much support work on asset references","msgtype":"m.text","org.matrix.msc1767.text":"so, we very much support work on asset references"},"ts":1669825060815,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$qBSMEMBggpV8Y2oLa6f4UVKlwa1a3jOyUfO8qPUi7ms"},
{"content":{"body":"Just the syntax, where implementers and bundlers can coexist","msgtype":"m.text","org.matrix.msc1767.text":"Just the syntax, where implementers and bundlers can coexist"},"ts":1669825072208,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$b1zGWgB0ankesjpKBkg8vbZQ3wFk60vjrD6dCS_Pvok"},
{"content":{"body":"as distinct from import reflection / module reflection","msgtype":"m.text","org.matrix.msc1767.text":"as distinct from import reflection / module reflection"},"ts":1669825073135,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$YCW-9OE8-sUkCUxlAsFOSLl-9yHFJWITEmBnPADcumE"},
{"content":{"body":"it seems like it would be better to say that people should use like `Module.load('foo')` instead of `import module 'foo'`","format":"org.matrix.custom.html","formatted_body":"it seems like it would be better to say that people should use like <code>Module.load('foo')</code> instead of <code>import module 'foo'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it seems like it would be better to say that people should use like `Module.load('foo')` instead of `import module 'foo'`","mimetype":"text/plain"},{"body":"it seems like it would be better to say that people should use like <code>Module.load('foo')</code> instead of <code>import module 'foo'</code>","mimetype":"text/html"}]},"ts":1669825092781,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2dPVTSPa-5K1aYtdj15AWtL6XUVB5nCgb1L8WeUQu4g"},
{"content":{"body":"why have static `import { name } from 'mod'` at all?","format":"org.matrix.custom.html","formatted_body":"why have static <code>import { name } from 'mod'</code> at all?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why have static `import { name } from 'mod'` at all?","mimetype":"text/plain"},{"body":"why have static <code>import { name } from 'mod'</code> at all?","mimetype":"text/html"}]},"ts":1669825128794,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ymZiOxbvXF142_oA_u-AF8IOhNgI_qVZUnSgleE2qGU"},
{"content":{"body":"why not just have all dynamic `import()`","format":"org.matrix.custom.html","formatted_body":"why not just have all dynamic <code>import()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why not just have all dynamic `import()`","mimetype":"text/plain"},{"body":"why not just have all dynamic <code>import()</code>","mimetype":"text/html"}]},"ts":1669825133022,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$nnX_TLFHc3HMrN6HIDlwUqH9lIIakBDCZh1ROQFU3dQ"},
{"content":{"body":"and call it CJS?","msgtype":"m.text","org.matrix.msc1767.text":"and call it CJS?"},"ts":1669825135622,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$w85omRi16FDEV1Lu8SxfEDTb_Ch1cJaktSXcLrRz9Cs"},
{"content":{"body":"because there are benefits of static syntax","msgtype":"m.text","org.matrix.msc1767.text":"because there are benefits of static syntax"},"ts":1669825141999,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$SQP4j2b5AmyPzXRcItTVLl-BVKld_TLxl6boBe5GTCc"},
{"content":{"body":"we need those","msgtype":"m.text","org.matrix.msc1767.text":"we need those"},"ts":1669825144777,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$u121ewxO-ZniKPQsRIVvAffOQJHIDzTpuYp_4H811qE"},
{"content":{"body":"er","msgtype":"m.text","org.matrix.msc1767.text":"er"},"ts":1669825145910,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$keg7zsiGo805OV9AmWB-kcc0OVd7vbiww7ukobsJsg0"},
{"content":{"body":"its not about the static/dynamic ness","msgtype":"m.text","org.matrix.msc1767.text":"its not about the static/dynamic ness"},"ts":1669825150243,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yuX42SoYtp1CpXbSDrcK_KBaBogylwNiI3hBYSIZfIk"},
{"content":{"body":"its about confusion between the two use cases","msgtype":"m.text","org.matrix.msc1767.text":"its about confusion between the two use cases"},"ts":1669825165475,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qbtVQSnVDOWPg2Zv677tGXd-Zph5m27w-9lwPnz04Jg"},
{"content":{"body":"at least in my mind","msgtype":"m.text","org.matrix.msc1767.text":"at least in my mind"},"ts":1669825173926,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VZ-EfCqysRUuj9hJ2PBm2TCB7_rpfUFXknxpjCOuywk"},
{"content":{"body":"I'm not sure who's arguing what at this point tbh","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure who's arguing what at this point tbh"},"ts":1669825204038,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$MTW5QJLunENStefBUEqh354MnBTq4Qec2S6jO5PpowQ"},
{"content":{"body":"I don't think having dynamic behavior solves the ergonomic need, because we could already do it","msgtype":"m.text","org.matrix.msc1767.text":"I don't think having dynamic behavior solves the ergonomic need, because we could already do it"},"ts":1669825208684,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$K_oUIgQb9bgSzYYeUmR4O-xLWaCogy90KqO-oRc0C3k"},
{"content":{"body":"I agree with Guy's latest series of messages, and disagree with devsnek's.","msgtype":"m.text","org.matrix.msc1767.text":"I agree with Guy's latest series of messages, and disagree with devsnek's."},"ts":1669825229466,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$b6YOCIsD4sKKgOz8a2lMRFw2FC26ls55IqiQ0S3nuJo"},
{"content":{"body":"i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal","msgtype":"m.text","org.matrix.msc1767.text":"i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal"},"ts":1669825241460,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$o_mWePtEB_yQRl-pjuv8ACQ1obpmqGpL2U7HmP58ma8"},
{"content":{"body":" * i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal","m.new_content":{"body":"i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal","msgtype":"m.text","org.matrix.msc1767.text":"i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal"},"m.relates_to":{"event_id":"$o_mWePtEB_yQRl-pjuv8ACQ1obpmqGpL2U7HmP58ma8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i don't have full context on what justin is asking for, i was just saying some general opinions i have about this proposal"},"ts":1669825246838,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HXDFIoVAyjwNe0oSXgQ8AQ5Ytw4fNqDdDYq6m-klGjk"},
{"content":{"body":"Static analyzability is the reason this is nice to use","msgtype":"m.text","org.matrix.msc1767.text":"Static analyzability is the reason this is nice to use"},"ts":1669825248397,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$w-x5iytm2_viEPCzz_c9qCjyRrKqoE7iBJvE2xWn9J0"},
{"content":{"body":"> <@devsnek:matrix.org> the module blocks/compartments proposal has a `load` func or similar right?\n\n`importHook` could be called `load` with a clean conscience. The name reflects that it’s the one driven by `import`, but its responsibilities are limited to loading and either parsing or fabricating a fake module source out of code.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6CKf9lb_fR7QcKo3TJhfboHcch31Oc4xrPWBLOWGmxQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>the module blocks/compartments proposal has a <code>load</code> func or similar right?</blockquote></mx-reply><code>importHook</code> could be called <code>load</code> with a clean conscience. The name reflects that it’s the one driven by <code>import</code>, but its responsibilities are limited to loading and either parsing or fabricating a fake module source out of code.","m.relates_to":{"m.in_reply_to":{"event_id":"$6CKf9lb_fR7QcKo3TJhfboHcch31Oc4xrPWBLOWGmxQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> the module blocks/compartments proposal has a `load` func or similar right?\n\n`importHook` could be called `load` with a clean conscience. The name reflects that it’s the one driven by `import`, but its responsibilities are limited to loading and either parsing or fabricating a fake module source out of code.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6CKf9lb_fR7QcKo3TJhfboHcch31Oc4xrPWBLOWGmxQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>the module blocks/compartments proposal has a <code>load</code> func or similar right?</blockquote></mx-reply><code>importHook</code> could be called <code>load</code> with a clean conscience. The name reflects that it’s the one driven by <code>import</code>, but its responsibilities are limited to loading and either parsing or fabricating a fake module source out of code.","mimetype":"text/html"}]},"ts":1669825304661,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pXgXgOVvKC6UwHTqRdd4-vWzcAOGT2aUPyJt6suM3zg"},
{"content":{"body":"yeah i just don't feel like, if we have that functionality, the additional import syntax is worth it","msgtype":"m.text","org.matrix.msc1767.text":"yeah i just don't feel like, if we have that functionality, the additional import syntax is worth it"},"ts":1669825346546,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-1t3iKPz5nmd7gXJm5TV3vs8Ix10kmCj-JC2ogXqboo"},
{"content":{"body":"And assets can be solved either with a reflection or a virtual module source. There’s more than one way to bake that cake.","msgtype":"m.text","org.matrix.msc1767.text":"And assets can be solved either with a reflection or a virtual module source. There’s more than one way to bake that cake."},"ts":1669825349792,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$63OvCVv7_tJcTR7Z_0QNKqBx4vEZ3CKyzgiZgDHdVTQ"},
{"content":{"body":"imo import is for doing the module namespace dance, and reflection and other stuff should be separate","msgtype":"m.text","org.matrix.msc1767.text":"imo import is for doing the module namespace dance, and reflection and other stuff should be separate"},"ts":1669825374600,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Vp3iqK1KPO_ZDJNlRQ6eCLtkfCgqgw6EQxmCGLwCp14"},
{"content":{"body":"I personally favor having a single reflection of module instances, a variety of reflections of module sources per type, and leave assets to virtual module sources.","msgtype":"m.text","org.matrix.msc1767.text":"I personally favor having a single reflection of module instances, a variety of reflections of module sources per type, and leave assets to virtual module sources."},"ts":1669825396207,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$cYQJH6n7Lqh3oaAREBVkbEHbAOdGdDY2sawDzW8VtMs"}
]