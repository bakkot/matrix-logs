[
{"content":{"body":"I've been interested in doing more struct-of-arrays type of JS coding recently, and there a TypedArray.equals check might be useful at times... Though I don't have a direct use case at hand.","msgtype":"m.text"},"ts":1735571967539,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$OMEEjJE2jlM2x0bIFb6WPGmshJ4TY41qzPxpSmwzYac"},
{"content":{"body":"The question of standardizing deep equality begins with the question, “which deep equality?”, since it is not a problem that generalizes well. I think there’s an opportunity to introduce a protocol that looks like: `[Symbol.equals](other, childEquals=Object.is, seen=new Map)` but if I were holding my breath, I would have died ten years ago.","format":"org.matrix.custom.html","formatted_body":"The question of standardizing deep equality begins with the question, “which deep equality?”, since it is not a problem that generalizes well. I think there’s an opportunity to introduce a protocol that looks like: <code>[Symbol.equals](other, childEquals=Object.is, seen=new Map)</code> but if I were holding my breath, I would have died ten years ago.","m.mentions":{"user_ids":["@aapo.alasuutari:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OMEEjJE2jlM2x0bIFb6WPGmshJ4TY41qzPxpSmwzYac"}},"msgtype":"m.text"},"ts":1735579035787,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$_Fset0h71PwLIPQ6vZuTIPbl7mLACSsshBBptgEYG_A"},
{"content":{"body":"This is the direction I would go because it doesn’t require the standardization of one deep equality with a name like `Object.equals` or `Reflect.equals`, but does allow for any kind of transitive equality, including shape validation, including graphs with cycles.","format":"org.matrix.custom.html","formatted_body":"This is the direction I would go because it doesn’t require the standardization of one deep equality with a name like <code>Object.equals</code> or <code>Reflect.equals</code>, but does allow for any kind of transitive equality, including shape validation, including graphs with cycles.","m.mentions":{},"msgtype":"m.text"},"ts":1735579234786,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Mz-jXcE9HUW2QxVuppBDIntJuzKlRiOOCtI8EGZHPa4"},
{"content":{"body":"And progress on such an effort could begin with a ponyfill. I am fond of how Python’s operators like `len` close over all the behavior of intrinsics and defer to to a “protocol” only when the type passes no known “brand check”. That would allow the language to evolve under the ponyfill. And it’s not a big ponyfill.","format":"org.matrix.custom.html","formatted_body":"And progress on such an effort could begin with a ponyfill. I am fond of how Python’s operators like <code>len</code> close over all the behavior of intrinsics and defer to to a “protocol” only when the type passes no known “brand check”. That would allow the language to evolve under the ponyfill. And it’s not a big ponyfill.","m.mentions":{},"msgtype":"m.text"},"ts":1735579363657,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$aVWpB1dJNHcFjYp563Ye9wt0B6QBGwd9dEP1iCl57cg"},
{"content":{"body":"even equality of TAs is tricky to define (at least for the float ones) because of NaN","m.mentions":{},"msgtype":"m.text"},"ts":1735584903010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ksa9Wrty-9Ex6z6lqng8RA55MD6IWpmZPMuHNeu2euc"},
{"content":{"body":"equality of ABs is at least straightforward, and there's a reasonable performance case for doing it natively (i.e. it can be implemented as memcmp)","m.mentions":{},"msgtype":"m.text"},"ts":1735584987970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iRVXn7EboF-h3Abl1S7QFtWtE_NRz-5CJ2jF-N1FnQU"},
{"content":{"body":"I have been kind of kicking around the idea of adding more built-in comparators, so could do `arrayOfNumerics.sort(Number.compare)` or `.sort(Compare.numeric)` or whatever, and an AB comparator could live there I guess","format":"org.matrix.custom.html","formatted_body":"I have been kind of kicking around the idea of adding more built-in comparators, so could do <code>arrayOfNumerics.sort(Number.compare)</code> or <code>.sort(Compare.numeric)</code> or whatever, and an AB comparator could live there I guess","m.mentions":{},"msgtype":"m.text"},"ts":1735585124451,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1c72-zwdMAVfjvo9VymEEVNuW3raQEU4bVRAaV8TNHE"},
{"content":{"body":"(https://es.discourse.group/t/proposal-idea-descending-sort/889/7)","m.mentions":{},"msgtype":"m.text"},"ts":1735585169586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MblTyzb0lwrxBBfCjAPPYwWgGtgCOca2vEKGJ5uDxps"},
{"content":{"body":"Clearly, `.sort(Number.negate.compose(Number.compare))` #tdz","format":"org.matrix.custom.html","formatted_body":"Clearly, <code>.sort(Number.negate.compose(Number.compare))</code> #tdz","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MblTyzb0lwrxBBfCjAPPYwWgGtgCOca2vEKGJ5uDxps"}},"msgtype":"m.text"},"ts":1735585364267,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$eQJ-al5v-EGQTYUwOX-_e8zSY80iTKkVTWzdJkvkQvs"}
]