[
{"content":{"body":"is there a google calendar with all the meeting times?","m.mentions":{},"msgtype":"m.text"},"ts":1719293616893,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$p9ZzmIN8_maW7lEMBRMoQfCNTgjrIuVaXfDJu2PylvU"},
{"content":{"body":"there is a calendar entry, yes - it's in the TC39 Events calendar","m.mentions":{},"msgtype":"m.text"},"ts":1719330707001,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nXYFMmrE7CGWN6IqhPelU_qbIdNTCr_YCAkjZDOcvz4"},
{"content":{"body":"(also i'm happy to add individual delegates' emails to the event, if you want it to automatically populate in your calendar - i always put mine on there)","m.mentions":{},"msgtype":"m.text"},"ts":1719333081782,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vYxH4OJW4_MyOjKjJHuvcvSQssD1xRphqPctPm521nM"},
{"content":{"body":"hello...this might be a weird question but here we go:\nwas there ever a proposal for a \"conditional equality operator\"? what i mean is an operator for this pattern:\n\n```js\nconst fn = (value) => {\n  return value === \"foo\" ? \"foo\" : \"bar\";\n}\n```\n\nwhich could also be written like this:\n\n```js\nconst fn = (value) => {\n  return value === \"foo\" ? value : \"bar\";\n}\n```\n\nbut my theoretical operator should achieve the same logic while avoiding repetition of either `value` or `\"foo\"`, so something like this: `value ==? \"foo\" : \"bar\"`\n\ni also couldn't find any example of such an operator in any other programming language, which really surprised me, but maybe  i'm stupid and an operator like this doesn't work or doesn't make any sense\n\nreally curious if anybody here might have a take on this","format":"org.matrix.custom.html","formatted_body":"<p>hello...this might be a weird question but here we go:<br>was there ever a proposal for a \"conditional equality operator\"? what i mean is an operator for this pattern:</p>\n<pre><code class=\"language-js\">const fn = (value) =&gt; {\n  return value === \"foo\" ? \"foo\" : \"bar\";\n}\n</code></pre>\n<p>which could also be written like this:</p>\n<pre><code class=\"language-js\">const fn = (value) =&gt; {\n  return value === \"foo\" ? value : \"bar\";\n}\n</code></pre>\n<p>but my theoretical operator should achieve the same logic while avoiding repetition of either <code>value</code> or <code>\"foo\"</code>, so something like this: <code>value ==? \"foo\" : \"bar\"</code></p>\n<p>i also couldn't find any example of such an operator in any other programming language, which really surprised me, but maybe  i'm stupid and an operator like this doesn't work or doesn't make any sense</p>\n<p>really curious if anybody here might have a take on this</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1719345385338,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$KHpBj9qXZP6etxOPyDGQojZLvShMcxeFRmMI84DvPE4"},
{"content":{"body":"I don't think I've seen a proposal for this. I think it's simply too specialized to be worth having special syntax for.","m.mentions":{},"msgtype":"m.text"},"ts":1719345743573,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hs5B84lfUOteBWHkwwVH5lRDE54rTNZmraxon5-N7y8"},
{"content":{"body":"this theoretical operator can be compared to nullish coalescing, it's very similar but just with a custom value instead of null\n\nnullish coalescing is defined as:\n\na ?? b\nif  a !== null then return a, else return b\n\nmy operator\n\na ==? c : b\nif  a !== c then return a, else return b","m.mentions":{},"msgtype":"m.text"},"ts":1719345828854,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$DCdxQaxV3xZt3Giu0gSIFfFro63afc9P51cc175E3Tk"},
{"content":{"body":"> <@bakkot:matrix.org> I don't think I've seen a proposal for this. I think it's simply too specialized to be worth having special syntax for.\n\nhm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code \"foo\" from above isn't just \"foo\" but some long/dynamic thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Hs5B84lfUOteBWHkwwVH5lRDE54rTNZmraxon5-N7y8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I don&#39;t think I&#39;ve seen a proposal for this. I think it&#39;s simply too specialized to be worth having special syntax for.</blockquote></mx-reply>hm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code \"foo\" from above isn't just \"foo\" but some long/dynamic thing","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Hs5B84lfUOteBWHkwwVH5lRDE54rTNZmraxon5-N7y8"}},"msgtype":"m.text"},"ts":1719345941802,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$RqCB0mUbSjft8ks71WcHlvhnFM2a6IWXFgHqKRoTtbo"},
{"content":{"body":"> <@bakkot:matrix.org> I don't think I've seen a proposal for this. I think it's simply too specialized to be worth having special syntax for.\n\n * hm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code where the \"foo\" from above isn't just \"foo\" but some long/dynamic thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Hs5B84lfUOteBWHkwwVH5lRDE54rTNZmraxon5-N7y8?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I don't think I've seen a proposal for this. I think it's simply too specialized to be worth having special syntax for.</blockquote></mx-reply> * hm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code where the \"foo\" from above isn't just \"foo\" but some long/dynamic thing","m.mentions":{},"m.new_content":{"body":"hm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code where the \"foo\" from above isn't just \"foo\" but some long/dynamic thing","format":"org.matrix.custom.html","formatted_body":"hm, okay...i'm still surprised that i couldn't find something like this in any other language though...i get that it might be too specific and that it might seem not worth it, but something like this could simplify code where the \"foo\" from above isn't just \"foo\" but some long/dynamic thing","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RqCB0mUbSjft8ks71WcHlvhnFM2a6IWXFgHqKRoTtbo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719345962158,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$0h9TphZq3YpnMfBwhy0oV1-SxwiyvioV9lkhWsoUvuU"},
{"content":{"body":"There are many many patterns that are somewhat similar to this; once you start adding syntax for things at this level of \"already easy to write\" + \"not all that common\" there's no obvious limit to how many such bits of syntax you'd add","m.mentions":{},"msgtype":"m.text"},"ts":1719345990435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VEl5ascDUG86bQmSRBrbhkXjwlva8MoDo7JV6c3fM1Q"},
{"content":{"body":"`null` is special because it is so often used to represent a missing value, and nullish coalescing therefore represents the act of providing a default for a missing value, which is (I would guess) at least an order of magnitude more common than this pattern","format":"org.matrix.custom.html","formatted_body":"<code>null</code> is special because it is so often used to represent a missing value, and nullish coalescing therefore represents the act of providing a default for a missing value, which is (I would guess) at least an order of magnitude more common than this pattern","m.mentions":{},"msgtype":"m.text"},"ts":1719346041049,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8kJOqiQlgCrQsIXTTCSZ0u79kOWWTKxRXS-hSC897p4"},
{"content":{"body":"all language design involves considering these tradeoffs, of examining how common is / how hard it is to currently write, and picking a threshold; some languages set the threshold lower, but they all have to set it somewhere","m.mentions":{},"msgtype":"m.text"},"ts":1719346087453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kv942aEa7hkQdIVVDLKjP9PlYv_Ek9kPolz8w6AnveU"},
{"content":{"body":"though some languages do allow you to define your own syntax; it would not surprise me to find that someone has made such an operator in userland in, say, Scala","m.mentions":{},"msgtype":"m.text"},"ts":1719346112184,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6xCNlMd_1xwTOlwPEMWGjyUjYV7sYHghKeryIvcBbgg"}
]