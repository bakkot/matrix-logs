[
{"content":{"body":"is there a google calendar with all the meeting times?","m.mentions":{},"msgtype":"m.text"},"ts":1719293616893,"senderName":"Meghan Denny","senderId":"@meghanbun:matrix.org","id":"$p9ZzmIN8_maW7lEMBRMoQfCNTgjrIuVaXfDJu2PylvU"},
{"content":{"body":"there is a calendar entry, yes - it's in the TC39 Events calendar","m.mentions":{},"msgtype":"m.text"},"ts":1719330707001,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nXYFMmrE7CGWN6IqhPelU_qbIdNTCr_YCAkjZDOcvz4"},
{"content":{"body":"(also i'm happy to add individual delegates' emails to the event, if you want it to automatically populate in your calendar - i always put mine on there)","m.mentions":{},"msgtype":"m.text"},"ts":1719333081782,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vYxH4OJW4_MyOjKjJHuvcvSQssD1xRphqPctPm521nM"},
{"content":{"body":"hello...this might be a weird question but here we go:\nwas there ever a proposal for a \"conditional equality operator\"? what i mean is an operator for this pattern:\n\n```js\nconst fn = (value) => {\n  return value === \"foo\" ? \"foo\" : \"bar\";\n}\n```\n\nwhich could also be written like this:\n\n```js\nconst fn = (value) => {\n  return value === \"foo\" ? value : \"bar\";\n}\n```\n\nbut my theoretical operator should achieve the same logic while avoiding repetition of either `value` or `\"foo\"`, so something like this: `value ==? \"foo\" : \"bar\"`\n\ni also couldn't find any example of such an operator in any other programming language, which really surprised me, but maybe  i'm stupid and an operator like this doesn't work or doesn't make any sense\n\nreally curious if anybody here might have a take on this","format":"org.matrix.custom.html","formatted_body":"<p>hello...this might be a weird question but here we go:<br>was there ever a proposal for a \"conditional equality operator\"? what i mean is an operator for this pattern:</p>\n<pre><code class=\"language-js\">const fn = (value) =&gt; {\n  return value === \"foo\" ? \"foo\" : \"bar\";\n}\n</code></pre>\n<p>which could also be written like this:</p>\n<pre><code class=\"language-js\">const fn = (value) =&gt; {\n  return value === \"foo\" ? value : \"bar\";\n}\n</code></pre>\n<p>but my theoretical operator should achieve the same logic while avoiding repetition of either <code>value</code> or <code>\"foo\"</code>, so something like this: <code>value ==? \"foo\" : \"bar\"</code></p>\n<p>i also couldn't find any example of such an operator in any other programming language, which really surprised me, but maybe  i'm stupid and an operator like this doesn't work or doesn't make any sense</p>\n<p>really curious if anybody here might have a take on this</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1719345385338,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$KHpBj9qXZP6etxOPyDGQojZLvShMcxeFRmMI84DvPE4"},
{"content":{"body":"I don't think I've seen a proposal for this. I think it's simply too specialized to be worth having special syntax for.","m.mentions":{},"msgtype":"m.text"},"ts":1719345743573,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hs5B84lfUOteBWHkwwVH5lRDE54rTNZmraxon5-N7y8"},
{"content":{"body":"this theoretical operator can be compared to nullish coalescing, it's very similar but just with a custom value instead of null\n\nnullish coalescing is defined as:\n\na ?? b\nif  a !== null then return a, else return b\n\nmy operator\n\na ==? c : b\nif  a !== c then return a, else return b","m.mentions":{},"msgtype":"m.text"},"ts":1719345828854,"senderName":"Nano Miratus","senderId":"@nnmrts:matrix.org","id":"$DCdxQaxV3xZt3Giu0gSIFfFro63afc9P51cc175E3Tk"}
]