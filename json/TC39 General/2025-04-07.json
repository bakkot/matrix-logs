[
{"content":{"body":"yes, this would definitely be good to do, IMO","m.mentions":{"user_ids":["@akaster:serenityos.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FUe1HS7ivsa_XUXcC4p35yIJ3pfL2N7DVJI9n4AOUPg"}},"msgtype":"m.text"},"ts":1743992939065,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UkXaG-2uFLNLJIN8w8hxpHTBqObvpRsVXIOxB6HJAsE"},
{"content":{"body":"I noticed a probably-known implementation inconsistency with Float64Array sorting regarding NaNs: According to spec, any call to Float64Array should canonicalise all NaNs in the TA's viewed buffer since it copies data from the buffer into a list of Values (canonicalising all NaNs here), performs sorting on that list and then writes the sorted items back into the buffer.\n\nOn FF, a sort without a comparator seems to sort NaNs according to \"absolute value\" (uint64) while on Chrome they are left where they were. With a comparator (returning -1 or 1 randomly), on FF they NaNs become canonicalised while on Chrome they get sorted according to the comparator's wishes without canonicalisation.\n\nThe spec seems fairly clear to me on this whole issue; canonicalisation happens on every sort call, but the lived reality is different. Should this be accepted, or is this something to file a bug to implementors about (if not already existent)? Or should this be a case where the spec is loosened to allow for implementation defined behaviour?","m.mentions":{},"msgtype":"m.text"},"ts":1744006100533,"senderName":"Aapo Alasuutari","senderId":"@aapo.alasuutari:matrix.org","id":"$KMCjRFbbaaKv4k2WARMkhWFvJg9d2gDJ-2Si5PG9bTE"}
]