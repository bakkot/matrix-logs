[
{"content":{"body":"and indeed `typeof Object(Symbol()) === 'object'`","format":"org.matrix.custom.html","formatted_body":"and indeed <code>typeof Object(Symbol()) === 'object'</code>","msgtype":"m.text"},"ts":1633564801800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hQQ1WtT8Q6XJl10gH8FqJ7Zs3qEe_S4U2GsW_4G7iMI"},
{"content":{"body":"ah, there it is, thanks.","msgtype":"m.text"},"ts":1633564822563,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$BNtGRHQNPVwFC9Msqw1M06lloV4OyEe1ZRgykzWpYvE"},
{"content":{"body":"I'm going to have to look at this more.","msgtype":"m.text"},"ts":1633564859367,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PZilhaMPOnk9wKxqVDuJI80HJXCSKodF8RISAW6yEWs"},
{"content":{"body":"however, boxed symbols do not have a [[Description]] internal slot","msgtype":"m.text"},"ts":1633564896709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q_4dJYGVJ6hrfF9IGMu1GtV69XGJvHa1DeoSf1AcDMQ"},
{"content":{"body":"they instead have a [[SymbolData]] internal slot, which holds the underlying symbol, which is what e.g. `Symbol.prototype.description` uses","format":"org.matrix.custom.html","formatted_body":"they instead have a [[SymbolData]] internal slot, which holds the underlying symbol, which is what e.g. <code>Symbol.prototype.description</code> uses","msgtype":"m.text"},"ts":1633564933800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3duaWadtleXzxHvdzR-Q8VJdQT5kVluwA1dPsVNrryU"},
{"content":{"body":"So it looks like the only way to create a Symbol object is by invoking ToObject on a Symbol value. Is that right?","msgtype":"m.text"},"ts":1633565161057,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$i10piodBpYl9WWmJmPxTN9WtLVwxzc8t9V_nVFpgyIs"},
{"content":{"body":"(e.g., there isn't an analogue to `new Number(3)`)","format":"org.matrix.custom.html","formatted_body":"(e.g., there isn't an analogue to <code>new Number(3)</code>)","msgtype":"m.text"},"ts":1633565508486,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$PUSqzCYe3Wh1OhjtgUqqJzADIrGYqP6P7t7yj-x5CLg"},
{"content":{"body":"afaik yes","msgtype":"m.text"},"ts":1633565880187,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QKv5M12WaCoJO0zV7xRMj2SoGMhzQnJ2rhX8TOZI19k"},
{"content":{"body":"same deal for BigInts, I think","msgtype":"m.text"},"ts":1633565885581,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P0InkjgY13_cYzw5KVW0RyLKSQvWhFhZ1Io6pgAVexk"},
{"content":{"body":"And referring to `Symbol()` as \"the Symbol constructor\" is technically correct, but maybe misleading (same with BigInt).","format":"org.matrix.custom.html","formatted_body":"And referring to <code>Symbol()</code> as &quot;the Symbol constructor&quot; is technically correct, but maybe misleading (same with BigInt).","msgtype":"m.text"},"ts":1633565994936,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$IqQ_s5aqGw3mwsGZ4SJ4xcF7Q76YPYEYOpOYtHlFlcM"},
{"content":{"body":"i.e., it has a [[Construct]] internal method so satisfies the definition of \"constructor\", but if you invoke it, you just get a TypeError, same as if it didn't have a [[Construct]] method, so it's kinda tenuous to call it a constructor?","msgtype":"m.text"},"ts":1633566505080,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$Obn7eKD8RmN1J7FN3mMaHVdTDOl_Sg8H5emidvyDBIk"},
{"content":{"body":"It looks like `Symbol()` and `BigInt()` are the only things described as constructors that nevertheless are \"not intended to be used with the `new` operator\".","format":"org.matrix.custom.html","formatted_body":"It looks like <code>Symbol()</code> and <code>BigInt()</code> are the only things described as constructors that nevertheless are &quot;not intended to be used with the <code>new</code> operator&quot;.","msgtype":"m.text"},"ts":1633566812155,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$eWIfTjbiHVzZNEmw7bUmOelwg0rivH66-ogkYmaX0y4"},
{"content":{"body":" * It looks like `Symbol()` and `BigInt()` are the only things described as constructors that nevertheless are \"not intended to be used with the `new` operator\".","format":"org.matrix.custom.html","formatted_body":" * It looks like <code>Symbol()</code> and <code>BigInt()</code> are the only things described as constructors that nevertheless are &quot;not intended to be used with the <code>new</code> operator&quot;.","m.new_content":{"body":"It looks like `Symbol()` and `BigInt()` are the only things described as constructors that nevertheless are \"not intended to be used with the `new` operator\".","format":"org.matrix.custom.html","formatted_body":"It looks like <code>Symbol()</code> and <code>BigInt()</code> are the only things described as constructors that nevertheless are &quot;not intended to be used with the <code>new</code> operator&quot;.","msgtype":"m.text"},"m.relates_to":{"event_id":"$eWIfTjbiHVzZNEmw7bUmOelwg0rivH66-ogkYmaX0y4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633566827212,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$GturTITZcvm3AXvds4feIp8G-ieGpmA7KGMFdKIWuAk"},
{"content":{"body":"true, but otoh it's the only way I've ever heard anyone refer to it, so I'd be reluctant to change it","msgtype":"m.text"},"ts":1633567238782,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cP_bs29EJzXxIidj92r6NejNE8ArL6OmMRhHDjXAozg"},
{"content":{"body":"huh, interesting.","msgtype":"m.text"},"ts":1633567305145,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$AGoNhs-ZM0vA6wJ1GuXYPNZ4dAQOXY72h9Xu8p3_1KY"},
{"content":{"body":"it starts with a capital letter and its .prototype is the [[Prototype]] of the instances, that colloquially makes it the constructor even if you can’t new it","msgtype":"m.text"},"ts":1633623090196,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$veVNZDTm1wzy7f80RJEDRDZXeJDYLWhfmARhrMkCTGE"},
{"content":{"body":"All the DOM element constructors can’t be newed either, and they’re all still called constructors","msgtype":"m.text"},"ts":1633623129412,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NA19pfaMemcEAGd7qi9My64jja7EldbUGIjRLb4Prjg"},
{"content":{"body":"I think of it as a 'newless constructor'","msgtype":"m.text"},"ts":1633623142812,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$GCIk_qP65yr19l8h9k6ZCkPUAJQV1-S_MJv3HAtjB5g"},
{"content":{"body":"or a standard constructor like `Number`, except that if I try and create a Number object instance it very loudly says \"I'm not sure you want to do that\"","format":"org.matrix.custom.html","formatted_body":"or a standard constructor like <code>Number</code>, except that if I try and create a Number object instance it very loudly says &quot;I'm not sure you want to do that&quot;","msgtype":"m.text"},"ts":1633623259121,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YE2_LCrC6fd4WuP70aDkRAVtVOxM3TtBBgsLCV4_mRw"},
{"content":{"body":"s/Number/Symbol/","msgtype":"m.text"},"ts":1633623275562,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yYo2Jl826UgUvuhUFI_hPqNQ60pmgMzWz060iJbXXgY"},
{"content":{"body":"maybe in the future if there was ever direct support for `#constructor` then could say that's what is happening in the case of `Symbol` and `BigInt`","format":"org.matrix.custom.html","formatted_body":"maybe in the future if there was ever direct support for <code>#constructor</code> then could say that's what is happening in the case of <code>Symbol</code> and <code>BigInt</code>","msgtype":"m.text"},"ts":1633623398251,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g_25cbdoMIY_m6jaOLZGGPPzqXNdBxKysduz_ur83rc"},
{"content":{"body":"Does anyone know why the following syntax was not included when getters/setters were added? And has it ever been proposed?\n```\nconst getFoo = () => foo;\nobj = {get foo: getFoo};\n```","format":"org.matrix.custom.html","formatted_body":"<p>Does anyone know why the following syntax was not included when getters/setters were added? And has it ever been proposed?</p>\n<pre><code>const getFoo = () =&gt; foo;\nobj = {get foo: getFoo};\n</code></pre>\n","msgtype":"m.text"},"ts":1633648498123,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Up356hqqMyavYnEPcszsc5r9Q-h6cc__DWCRyh5cxD0"}
]