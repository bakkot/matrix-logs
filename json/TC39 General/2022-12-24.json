[
{"content":{"body":"> <@mhofman:matrix.org> I am still suspicious of any R&T use cases that are drop-in replacement of objects but with deep immutability and/or equality semantics. In both cases the fact that the structure has to be deeply immutable, aka no objects directly contained, makes me believe that the code will have to be aware the value is a R/T and handle it explicitly.\n\ni'm not sure why - the vast majority of code doesn't mutate objects in my experience, so for that code it would Just Work to pass an R&T into them","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z3_qpvR1NPxsyJJsNJzp_m75d_t0D9wwpnaK7c7j8QM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I am still suspicious of any R&amp;T use cases that are drop-in replacement of objects but with deep immutability and/or equality semantics. In both cases the fact that the structure has to be deeply immutable, aka no objects directly contained, makes me believe that the code will have to be aware the value is a R/T and handle it explicitly.</blockquote></mx-reply>i'm not sure why - the vast majority of code doesn't mutate objects in my experience, so for that code it would Just Work to pass an R&amp;T into them","m.relates_to":{"m.in_reply_to":{"event_id":"$z3_qpvR1NPxsyJJsNJzp_m75d_t0D9wwpnaK7c7j8QM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> I am still suspicious of any R&T use cases that are drop-in replacement of objects but with deep immutability and/or equality semantics. In both cases the fact that the structure has to be deeply immutable, aka no objects directly contained, makes me believe that the code will have to be aware the value is a R/T and handle it explicitly.\n\ni'm not sure why - the vast majority of code doesn't mutate objects in my experience, so for that code it would Just Work to pass an R&T into them","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$z3_qpvR1NPxsyJJsNJzp_m75d_t0D9wwpnaK7c7j8QM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I am still suspicious of any R&amp;T use cases that are drop-in replacement of objects but with deep immutability and/or equality semantics. In both cases the fact that the structure has to be deeply immutable, aka no objects directly contained, makes me believe that the code will have to be aware the value is a R/T and handle it explicitly.</blockquote></mx-reply>i'm not sure why - the vast majority of code doesn't mutate objects in my experience, so for that code it would Just Work to pass an R&amp;T into them","mimetype":"text/html"}]},"ts":1671857014580,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ASa99qSfTHwvl5Ed8CN-8TvaxozS8d1GYwTQ0hUhDUM"},
{"content":{"body":"Because some things by definition cannot be inside R&T, like functions or class instances. If you take the often cited examples of options bag or react props, R&T would could only be used in a subset of cases. That is why I said R&T are not a drop-in replacement for an immutable object. Not having Box makes them particularly unfit for the above examples as now a coordination Map needs to be used as well alongside.","msgtype":"m.text"},"ts":1671859699911,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gE8Sn_TAAqg9iwRn821ZDskXhIxqMlR3-JbOGWyS65g"}
]