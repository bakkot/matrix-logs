[
{"content":{"body":"I've been dogfooding my TypeScript support for pipeline operator at https://github.com/Pokute/AoC2021/blob/main/4.ts . It's starting to feel crucial for me. Lacking tacit function application (`|>>`) would be an inconvenience, but the other way around, I would have so many IIAFEs.","format":"org.matrix.custom.html","formatted_body":"I've been dogfooding my TypeScript support for pipeline operator at https://github.com/Pokute/AoC2021/blob/main/4.ts . It's starting to feel crucial for me. Lacking tacit function application (<code>|&gt;&gt;</code>) would be an inconvenience, but the other way around, I would have so many IIAFEs.","msgtype":"m.text"},"ts":1638696179290,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$uZzKlbHqceKFs3TFYclp_15ZRysmM0btXhxLCktVqrc"},
{"content":{"body":"A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823\n\ntl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:\n\n```\nasync? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823</p>\n<p>tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:</p>\n<pre><code>async? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n</code></pre>\n","msgtype":"m.text"},"ts":1638736094006,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow"},
{"content":{"body":"looking for any feedback on whether this seems at all reasonable before I put together something to present to committee","msgtype":"m.text"},"ts":1638736119205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TqoeIuFVYZeGdRGEPvu5VfH7JYU-Vw3MZkhMFt3ByfU"},
{"content":{"body":"> <@bakkot:matrix.org> A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823\n> \n> tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:\n> \n> ```\n> async? function f(possiblyAsyncCallback) {\n>   let x = await? possiblyAsyncCallback();\n>   return something(x);\n> }\n> \n> console.log(f.sync(syncCallback)) // a regular value\n> \n> console.log(f.async(asyncCallback)) // a Promise\n> ```\n> \n\nHave you seen [gensync](https://github.com/loganfsmyth/gensync) before?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823</p>\n<p>tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:</p>\n<pre><code>async? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n</code></pre>\n</blockquote></mx-reply>Have you seen <a href=\"https://github.com/loganfsmyth/gensync\">gensync</a> before?","m.relates_to":{"m.in_reply_to":{"event_id":"$zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow"}},"msgtype":"m.text"},"ts":1638737200787,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-BuL97_jQUOQXIhsDOCAkp1NI9Di9l5FdqikpqMFjz0"},
{"content":{"body":"I had not!","msgtype":"m.text"},"ts":1638737328223,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XPD8Toti_HXFcdjoEt2upwkzXHdYy0rIFj7O2H8d8sY"},
{"content":{"body":"but that is basically exactly the same thing, neat","msgtype":"m.text"},"ts":1638737363938,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s9b3oC_EWz7WwKZvHtti7EeRQeIejjCUmaEIa-iEmpQ"},
{"content":{"body":"Let me know if you have suggestions for improvements, I think babel is the only thing really using it right now.","msgtype":"m.text"},"ts":1638737725120,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$qlQ9RDlyL2lmr_0I-wTYTjPR0_nchZ-mzM_DA8u8_IQ"},
{"content":{"body":"main thing which looks to be missing to me is a way for the function to switch on whether it was called as sync or async","msgtype":"m.text"},"ts":1638738502683,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z0uZQ1QbPcOTFj-cG8mZ5t0pgc-ulVmFnh_rVBGj81U"},
{"content":{"body":"so that it can e.g. call the appropriate sync or async version of some other API","msgtype":"m.text"},"ts":1638738516799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$A2JieAhPMbl1kfV-TeVgfdMFpHaWtb83Bu4cpbnrUBw"},
{"content":{"body":"(my gist has a `function.async` meta-property for this; it would be a bit harder to do in a library)","format":"org.matrix.custom.html","formatted_body":"(my gist has a <code>function.async</code> meta-property for this; it would be a bit harder to do in a library)","msgtype":"m.text"},"ts":1638738551512,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MP3NS8k9rcyXy_-ML83Rh6w1nRclFX9Pc3mDERKHrxU"},
{"content":{"body":"Got it, should be pretty easy for you to make a helper to do that since you can make a function where the async version returns true and the sync version returns false and then do `if (yield* isAsync()) {`","format":"org.matrix.custom.html","formatted_body":"Got it, should be pretty easy for you to make a helper to do that since you can make a function where the async version returns true and the sync version returns false and then do <code>if (yield* isAsync()) {</code>","msgtype":"m.text"},"ts":1638738883048,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$6wMt0ZYFpoQgpUeKlWuZm15ug6UZqO7qOTtk3UZ9dWU"},
{"content":{"body":"> <@loganfsmyth:mozilla.org> Got it, should be pretty easy for you to make a helper to do that since you can make a function where the async version returns true and the sync version returns false and then do `if (yield* isAsync()) {`\n\nYup, Babel already has it: https://github.com/babel/babel/blob/2a3b0b96012b86c558aec344dad34a60c51a71c9/packages/babel-core/src/gensync-utils/async.ts#L23","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$6wMt0ZYFpoQgpUeKlWuZm15ug6UZqO7qOTtk3UZ9dWU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@loganfsmyth:mozilla.org\">@loganfsmyth:mozilla.org</a><br>Got it, should be pretty easy for you to make a helper to do that since you can make a function where the async version returns true and the sync version returns false and then do <code>if (yield* isAsync()) {</code></blockquote></mx-reply>Yup, Babel already has it: https://github.com/babel/babel/blob/2a3b0b96012b86c558aec344dad34a60c51a71c9/packages/babel-core/src/gensync-utils/async.ts#L23","m.relates_to":{"m.in_reply_to":{"event_id":"$6wMt0ZYFpoQgpUeKlWuZm15ug6UZqO7qOTtk3UZ9dWU"}},"msgtype":"m.text"},"ts":1638743323592,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q8jPBsXSboCMTilKa7AP0bezG_9_gxDN6fWYas2eEt8"},
{"content":{"body":"Hah I though it did but I was on mobile and couldn't be bothered to look","msgtype":"m.text"},"ts":1638743484391,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$8Z82IrLm55dgZodyU6i_8oTqFDaWlP4iVDd2n833bAY"},
{"content":{"body":"Certainly something we could move into gensync too","msgtype":"m.text"},"ts":1638743537760,"senderName":"loganfsmyth","senderId":"@loganfsmyth:mozilla.org","id":"$OnXl6zFx4qhVAXaVRDj95JnbjH_F0lwjO7p1d7-hutg"},
{"content":{"body":"Btw, something that would greatly benefit from moving this to the language (rather than as a library) are stack traces and step-by-step debugging; gensync makes it really hard (this is not a critique, just a limitation I don't think can be solved in a library).","msgtype":"m.text"},"ts":1638743664124,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qZlOu0Lngedzsu2hNUkXpDwJiuZEesQBOl1tUMSARHI"},
{"content":{"body":"I think the main annoying thing with the library version is that you can't call regular async functions without wrapping them first (unless I'm missing something)","msgtype":"m.text"},"ts":1638744796547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$enLBbOAQCmyvuLeCiNREx0DtJnqsf_f_fccNdZN0Wi8"},
{"content":{"body":"not a huge hinderance but would be nicer not to need to worry about it","msgtype":"m.text"},"ts":1638744820391,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S0ibMWP2fFRY-8x31cMBprdsw1XkSWOKvRKqDRUk8jc"},
{"content":{"body":"anyway, this is really cool; I will play with it some","msgtype":"m.text"},"ts":1638744850610,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rTbCXvI-xKR_YEed4CfCUhiTGyKY3EVrOdl4stViMQI"},
{"content":{"body":"Well, it's `await? (function.async ? asyncFn() : syncFn())` vs `yield* gensync({ sync: syncFn, async: asyngFn })()` (you need the check in both versions)","format":"org.matrix.custom.html","formatted_body":"Well, it's <code>await? (function.async ? asyncFn() : syncFn())</code> vs <code>yield* gensync({ sync: syncFn, async: asyngFn })()</code> (you need the check in both versions)","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$enLBbOAQCmyvuLeCiNREx0DtJnqsf_f_fccNdZN0Wi8"}}},"ts":1638744935817,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$A7I4PkHh_Y-Wbr3nsQ4G7XBqG03ZmrlpEG8nibkEbz4"},
{"content":{"body":"> <@bakkot:matrix.org> I think the main annoying thing with the library version is that you can't call regular async functions without wrapping them first (unless I'm missing something)\n\n * Well, it's `await? (function.async ? asyncFn() : syncFn())` vs `yield* gensync({ sync: syncFn, async: asyngFn })()` (you need the check in both versions)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$enLBbOAQCmyvuLeCiNREx0DtJnqsf_f_fccNdZN0Wi8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the main annoying thing with the library version is that you can't call regular async functions without wrapping them first (unless I'm missing something)</blockquote></mx-reply> * Well, it's <code>await? (function.async ? asyncFn() : syncFn())</code> vs <code>yield* gensync({ sync: syncFn, async: asyngFn })()</code> (you need the check in both versions)","m.new_content":{"body":"Well, it's `await? (function.async ? asyncFn() : syncFn())` vs `yield* gensync({ sync: syncFn, async: asyngFn })()` (you need the check in both versions)","format":"org.matrix.custom.html","formatted_body":"Well, it's <code>await? (function.async ? asyncFn() : syncFn())</code> vs <code>yield* gensync({ sync: syncFn, async: asyngFn })()</code> (you need the check in both versions)","msgtype":"m.text"},"m.relates_to":{"event_id":"$A7I4PkHh_Y-Wbr3nsQ4G7XBqG03ZmrlpEG8nibkEbz4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638744949361,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hydL8gsN2tiMfILEXazt_SO0nRVgS0SounMlcS9KrkE"},
{"content":{"body":"But yes, you always need to wrap","msgtype":"m.text"},"ts":1638744954503,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$f9wA5Pg4vpOea2aI0FQVYQ2AaeIvlu1PHutr6RPC9dU"},
{"content":{"body":"with the syntax you need to wrap if you're calling a function you figured out yourself, but not if you're calling a function the user provided","msgtype":"m.text"},"ts":1638745012183,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RzQgwTyjslZx6OG1BMXl3rUEqUqqkirDLqxQzl2BdLk"},
{"content":{"body":"i.e. you can just do `await? callback()` and if the user called you as `f.async` and passed an async callback, or if the user called you as `f.sync` and passed a sync callback, it will work the same","format":"org.matrix.custom.html","formatted_body":"i.e. you can just do <code>await? callback()</code> and if the user called you as <code>f.async</code> and passed an async callback, or if the user called you as <code>f.sync</code> and passed a sync callback, it will work the same","msgtype":"m.text"},"ts":1638745047592,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BGINUKQ63lvZJGx2k0qHhZwKIn9aNliN-PeMjmIOxlk"},
{"content":{"body":"and `callback` doesn't need to be wrapped","format":"org.matrix.custom.html","formatted_body":"and <code>callback</code> doesn't need to be wrapped","msgtype":"m.text"},"ts":1638745057815,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zGm49AiqxJH_2SZLdXMV5OS27X0NheYAUHvJ9B_oSPA"},
{"content":{"body":"Oh ok yes, we had to introduce a `maybeAsync` gensync helper in Babel for that","format":"org.matrix.custom.html","formatted_body":"Oh ok yes, we had to introduce a <code>maybeAsync</code> gensync helper in Babel for that","msgtype":"m.text"},"ts":1638745111397,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$lhiqGkshJltXyQ58QyhWhis66P9ye4sl8JBxad1gLUM"},
{"content":{"body":"(which also throws if `callback()` returns a promise when called in a sync context)","format":"org.matrix.custom.html","formatted_body":"(which also throws if <code>callback()</code> returns a promise when called in a sync context)","msgtype":"m.text"},"ts":1638745125884,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TdN5jp3KO35TDjMNryuU6jG04CnQosBizFeYXUfSiTw"},
{"content":{"body":" * (which also throws if `callback()` returns a promise when called in a sync context)","format":"org.matrix.custom.html","formatted_body":" * (which also throws if <code>callback()</code> returns a promise when called in a sync context)","m.new_content":{"body":"(which also throws if `callback()` returns a promise when called in a sync context)","format":"org.matrix.custom.html","formatted_body":"(which also throws if <code>callback()</code> returns a promise when called in a sync context)","msgtype":"m.text"},"m.relates_to":{"event_id":"$TdN5jp3KO35TDjMNryuU6jG04CnQosBizFeYXUfSiTw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1638745131361,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GIuQBhWSoUV06mBXyqNq3DdQHmkOoj0yUK1EAwUTaZg"},
{"content":{"body":"yeah there's definitely some possibility of shooting yourself in the foot here, if you mess up what's async and what's sync","msgtype":"m.text"},"ts":1638745171422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kEOPNVIZh5OB0JdrzUp8nV9Xi2LMgpyD3WG7Kn_SIrA"},
{"content":{"body":"this would be fun for typescript to figure out :P","msgtype":"m.text"},"ts":1638745208568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GWyzWbH65_CGC6QotV70LgY9HDLyMu_PtAv4-4OGYWU"}
]