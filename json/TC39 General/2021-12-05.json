[
{"content":{"body":"I've been dogfooding my TypeScript support for pipeline operator at https://github.com/Pokute/AoC2021/blob/main/4.ts . It's starting to feel crucial for me. Lacking tacit function application (`|>>`) would be an inconvenience, but the other way around, I would have so many IIAFEs.","format":"org.matrix.custom.html","formatted_body":"I've been dogfooding my TypeScript support for pipeline operator at https://github.com/Pokute/AoC2021/blob/main/4.ts . It's starting to feel crucial for me. Lacking tacit function application (<code>|&gt;&gt;</code>) would be an inconvenience, but the other way around, I would have so many IIAFEs.","msgtype":"m.text"},"ts":1638696179290,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$uZzKlbHqceKFs3TFYclp_15ZRysmM0btXhxLCktVqrc"},
{"content":{"body":"A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823\n\ntl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:\n\n```\nasync? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823</p>\n<p>tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:</p>\n<pre><code>async? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n</code></pre>\n","msgtype":"m.text"},"ts":1638736094006,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow"},
{"content":{"body":"looking for any feedback on whether this seems at all reasonable before I put together something to present to committee","msgtype":"m.text"},"ts":1638736119205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TqoeIuFVYZeGdRGEPvu5VfH7JYU-Vw3MZkhMFt3ByfU"},
{"content":{"body":"> <@bakkot:matrix.org> A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823\n> \n> tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:\n> \n> ```\n> async? function f(possiblyAsyncCallback) {\n>   let x = await? possiblyAsyncCallback();\n>   return something(x);\n> }\n> \n> console.log(f.sync(syncCallback)) // a regular value\n> \n> console.log(f.async(asyncCallback)) // a Promise\n> ```\n> \n\nHave you seen [gensync](https://github.com/loganfsmyth/gensync) before?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>A proposal: https://gist.github.com/bakkot/3d0f81233fc00b508ae5f247b1458823</p>\n<p>tl;dr: adding syntax for defining a function which can be either sync or async, depending on how it's called:</p>\n<pre><code>async? function f(possiblyAsyncCallback) {\n  let x = await? possiblyAsyncCallback();\n  return something(x);\n}\n\nconsole.log(f.sync(syncCallback)) // a regular value\n\nconsole.log(f.async(asyncCallback)) // a Promise\n</code></pre>\n</blockquote></mx-reply>Have you seen <a href=\"https://github.com/loganfsmyth/gensync\">gensync</a> before?","m.relates_to":{"m.in_reply_to":{"event_id":"$zz6JJOVAfqGNZKCG-pZgbtsbhX4g4UYlS--IKUiv9Ow"}},"msgtype":"m.text"},"ts":1638737200787,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-BuL97_jQUOQXIhsDOCAkp1NI9Di9l5FdqikpqMFjz0"},
{"content":{"body":"I had not!","msgtype":"m.text"},"ts":1638737328223,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XPD8Toti_HXFcdjoEt2upwkzXHdYy0rIFj7O2H8d8sY"},
{"content":{"body":"but that is basically exactly the same thing, neat","msgtype":"m.text"},"ts":1638737363938,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s9b3oC_EWz7WwKZvHtti7EeRQeIejjCUmaEIa-iEmpQ"}
]