[
{"content":{"body":"> <@jackworks:matrix.org> returns an <del>implementation defined value</del> implementation defined **Completion Record**\n> which means `for (const a of b) { eval(\"debugger\") }` might be able to break the for loop?\n\nfunction calls are not allowed to return break or continue completions ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$xUVpPRQmtuvxLRFfOm-2z3r_nH7hRGYe4cKq35QHxII?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br /><p>returns an <del>implementation defined value</del> implementation defined <strong>Completion Record</strong></p>\n<p>which means <code>for (const a of b) { eval(&quot;debugger&quot;) }</code> might be able to break the for loop?</p></blockquote></mx-reply>function calls are not allowed to return break or continue completions","m.relates_to":{"m.in_reply_to":{"event_id":"$xUVpPRQmtuvxLRFfOm-2z3r_nH7hRGYe4cKq35QHxII"}},"msgtype":"m.text"},"ts":1660188834805,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VO-445pzZ-T9-xT9tk7bxznX40jCdsEMfXIR7SFHiwU"},
{"content":{"body":"if someone cares we should add the same restriction to debugger ","msgtype":"m.text"},"ts":1660188858341,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1m49Clk8cHLGrbvBLZfi6c2BHanNLUe9kq-OHH6J1i8"},
{"content":{"body":"or just remove the return entirely ","msgtype":"m.text"},"ts":1660188869938,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$l3vOsE4vGwjZ4eQYBajMCZVs1kZhZy04Ir7qErToFLY"},
{"content":{"body":"actually I wonder.... direct eval may not have that assert cuz it forks evaluatecall","msgtype":"m.text"},"ts":1660188962387,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FLUNTSQW2u6QJ4vSfgDu5iwYk7KeC3flkpjU_6gqAkI"},
{"content":{"body":"this is so niche lol","msgtype":"m.text"},"ts":1660188968444,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3r2IpfsZw2_hD8KPspeWEcLhGr8DFQZOfKFtmeRHZPg"},
{"content":{"body":"> <@devsnek:matrix.org> function calls are not allowed to return break or continue completions \n\nOh then `for (x in b) debugger` ðŸ˜‚","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VO-445pzZ-T9-xT9tk7bxznX40jCdsEMfXIR7SFHiwU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br />function calls are not allowed to return break or continue completions</blockquote></mx-reply>Oh then <code>for (x in b) debugger</code> ðŸ˜‚","m.relates_to":{"m.in_reply_to":{"event_id":"$VO-445pzZ-T9-xT9tk7bxznX40jCdsEMfXIR7SFHiwU"}},"msgtype":"m.text"},"ts":1660212350985,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3ysvCaGa0H1XmvBkUmYCfPqh5QS6-jSvIjUWowVLr9U"},
{"content":{"body":"Iâ€™m looking forward to the proposal that adds `forAwaitEach` to the iterator and async iterator prototypes.","format":"org.matrix.custom.html","formatted_body":"Iâ€™m looking forward to the proposal that adds <code>forAwaitEach</code> to the iterator and async iterator prototypes.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™m looking forward to the proposal that adds `forAwaitEach` to the iterator and async iterator prototypes.","mimetype":"text/plain"},{"body":"Iâ€™m looking forward to the proposal that adds <code>forAwaitEach</code> to the iterator and async iterator prototypes.","mimetype":"text/html"}]},"ts":1660246712093,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RTLPQ9DdW_TVPQRG7U9wVnmJM0vEujjzDxxR0Jnn5Ik"},
{"content":{"body":"> <@kriskowal:matrix.org> Iâ€™m looking forward to the proposal that adds `forAwaitEach` to the iterator and async iterator prototypes.\n\nSuch that it returns a promise for the final value https://github.com/tc39/proposal-iterator-helpers/issues/217","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RTLPQ9DdW_TVPQRG7U9wVnmJM0vEujjzDxxR0Jnn5Ik?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Iâ€™m looking forward to the proposal that adds <code>forAwaitEach</code> to the iterator and async iterator prototypes.</blockquote></mx-reply>Such that it returns a promise for the final value https://github.com/tc39/proposal-iterator-helpers/issues/217","m.relates_to":{"m.in_reply_to":{"event_id":"$RTLPQ9DdW_TVPQRG7U9wVnmJM0vEujjzDxxR0Jnn5Ik"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Iâ€™m looking forward to the proposal that adds `forAwaitEach` to the iterator and async iterator prototypes.\n\nSuch that it returns a promise for the final value https://github.com/tc39/proposal-iterator-helpers/issues/217","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RTLPQ9DdW_TVPQRG7U9wVnmJM0vEujjzDxxR0Jnn5Ik?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Iâ€™m looking forward to the proposal that adds <code>forAwaitEach</code> to the iterator and async iterator prototypes.</blockquote></mx-reply>Such that it returns a promise for the final value https://github.com/tc39/proposal-iterator-helpers/issues/217","mimetype":"text/html"}]},"ts":1660247124555,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qP4ujUfN6Nw9gA2xaeRX3A7oxVCd1woGXQDmvhYMhog"},
{"content":{"body":"hmm, really the async `forEach` should be returning a promise already","format":"org.matrix.custom.html","formatted_body":"hmm, really the async <code>forEach</code> should be returning a promise already","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hmm, really the async `forEach` should be returning a promise already","mimetype":"text/plain"},{"body":"hmm, really the async <code>forEach</code> should be returning a promise already","mimetype":"text/html"}]},"ts":1660247423821,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4K9YqxNbs7NwFtOf21Y-AtYSh1CJrmS1S1JuIy1LTTw"},
{"content":{"body":"so you can tell if it's done / catch errors","msgtype":"m.text","org.matrix.msc1767.text":"so you can tell if it's done / catch errors"},"ts":1660247430596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R_L_n1XdyQk_Z5ISjOthnIljk9jE0ns5rcNJVCdCqP8"},
{"content":{"body":"Yes","msgtype":"m.text","org.matrix.msc1767.text":"Yes"},"ts":1660247443925,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$teW4qc25Z0yFD5JhifvBx0BZK336hxvBZ6YpsGQRDDE"},
{"content":{"body":"I am less sold on the `return` value, mostly because I've never encountered a compelling use case","format":"org.matrix.custom.html","formatted_body":"I am less sold on the <code>return</code> value, mostly because I've never encountered a compelling use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am less sold on the `return` value, mostly because I've never encountered a compelling use case","mimetype":"text/plain"},{"body":"I am less sold on the <code>return</code> value, mostly because I've never encountered a compelling use case","mimetype":"text/html"}]},"ts":1660247461814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qJxCmD_X_sPYP1JIdqsplE4dXQ79DLYjFUUlI27n-Ws"},
{"content":{"body":"Came up because a member of Agoricâ€™s dev community needed the final value from one of our async iterators https://github.com/Agoric/agoric-sdk/discussions/5924#discussioncomment-3378600","msgtype":"m.text","org.matrix.msc1767.text":"Came up because a member of Agoricâ€™s dev community needed the final value from one of our async iterators https://github.com/Agoric/agoric-sdk/discussions/5924#discussioncomment-3378600"},"ts":1660247546153,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IDliqaoNE-I0j7ym6-Ta0CFOqwAdoNj1RF0iZOekHy4"},
{"content":{"body":"In this case, the final iteration value is a timestamp that marks the time the sequence stopped.","msgtype":"m.text","org.matrix.msc1767.text":"In this case, the final iteration value is a timestamp that marks the time the sequence stopped."},"ts":1660247612171,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mma1KqDf1nGA1gvcWACae0Q12tpV4kO2yefeAIT9_-M"}
]