[
{"content":{"body":"Is anyone still researching base64 utilities?","msgtype":"m.text"},"ts":1681460903974,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2FKndE4MoXJO14_rxruo38eW80jp2sWNsyvsnlegl6Q"},
{"content":{"body":"bakkot updated the base64 proposal just last week. https://tc39.es/proposal-arraybuffer-base64/","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> updated the base64 proposal just last week. https://tc39.es/proposal-arraybuffer-base64/","msgtype":"m.text"},"ts":1681463184391,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3Q46vKiT3x-iNdb-NH7IHM3oUADoCy_DNs5gaDUY1ro"},
{"content":{"body":"Thanks, it seems that has the relevant issues that need to be solved as well","msgtype":"m.text"},"ts":1681467924780,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$9SNAWPDFjZDuw7DA5sjoAjieVdzepGRAAyOCh5crAkg"},
{"content":{"body":"I'm getting closer to understanding (and improving) how WebKit handles all of this which should help eventually driving those to some resolution","msgtype":"m.text"},"ts":1681467962942,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$518z8a-Ym14y9Dw0ftm8RP84QGPkghkftv9_6PfQ_7M"},
{"content":{"body":"I am hoping to bring it for stage 2 next meting","msgtype":"m.text"},"ts":1681487109274,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MMAzG-Wr1_TgYkBCsWjzGmOrHTzWDfQ4YzQTItgNjqY"},
{"content":{"body":" * I am hoping to bring it for stage 2 next meeting","m.new_content":{"body":"I am hoping to bring it for stage 2 next meeting","msgtype":"m.text"},"m.relates_to":{"event_id":"$MMAzG-Wr1_TgYkBCsWjzGmOrHTzWDfQ4YzQTItgNjqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681487118881,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtYPGLDul07693yeBmf9Bd4-19ujHL6QaNYRQNd_0g0"},
{"content":{"body":"currently leaning towards, the decoder will be lenient in accepting whitespace / not enforcing `=` padding, and the encoder will be strict in not producing whitespace and always producing `=` padding","format":"org.matrix.custom.html","formatted_body":"currently leaning towards, the decoder will be lenient in accepting whitespace / not enforcing <code>=</code> padding, and the encoder will be strict in not producing whitespace and always producing <code>=</code> padding","msgtype":"m.text"},"ts":1681487170524,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-DY866RpFh1ZzLqbSimCxJADc8bppMXNYYAMB04qiGA"},
{"content":{"body":"and then maybe not having options for those, unless there's a compelling case made","msgtype":"m.text"},"ts":1681487183019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nR6GB6eCrypa0O3hCxU2Q6RuTIExIlIzAC1FZ5sbwK0"},
{"content":{"body":"I was originally planning on having options for how to handle whitespace and `=` but they're probably not actually necessary","format":"org.matrix.custom.html","formatted_body":"I was originally planning on having options for how to handle whitespace and <code>=</code> but they're probably not actually necessary","msgtype":"m.text"},"ts":1681487205504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iSqmH6wMuvzLtDvtb6JYPQXVnk4w4xFRK_W1ymJWV6E"},
{"content":{"body":"bakkot: what I'm learning in WebKit thus far is that the options differ between base64/base64url","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what I'm learning in WebKit thus far is that the options differ between base64/base64url","msgtype":"m.text"},"ts":1681491074622,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$PKgUhGqk2LCnF4ColmpMBWze76fvW7F0PVWXocPU2Zs"},
{"content":{"body":"fascinating","msgtype":"m.text"},"ts":1681491094125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hkyYp6GQ43kTq6w9oaE47auJWyD_6D0MvHjv7-bazkE"},
{"content":{"body":"bakkot: only base64 has a lenient decode mode of sorts compatible with atob/data: URLs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: only base64 has a lenient decode mode of sorts compatible with atob/data: URLs","msgtype":"m.text"},"ts":1681491116610,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HIt4hvYJ1l3Mpk2FLsB3y1bjFvUX9R8qaZ38Or-UPoM"},
{"content":{"body":"also, some places (possibly including the CSP spec?) allow \"mixed\" decoding, where you can just mix characters from either alphabet, which I am not current planning to support because, gross","msgtype":"m.text"},"ts":1681491149727,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upCyZc8t1b_NXiuvUovqLDDr-ov_8_QFvBTCgHV3VHw"},
{"content":{"body":"Which also kinda matches what I've seen in standards, though I haven't tested base64url endpoints myself","msgtype":"m.text"},"ts":1681491159804,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$rIv9ed5QMq41k-_rZf7X26Yc7hRQefLGH_vzoxtAsy4"},
{"content":{"body":"I thought CSP relied on comparing the result of encode from our past discussion, but also have never attempted to test myself","msgtype":"m.text"},"ts":1681491184811,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Z2OkXusqUci_z1scxXJTq0Wb0OoDZB0pFQYDR77suFU"},
{"content":{"body":"that is correct but it does a find-replace first","msgtype":"m.text"},"ts":1681491220555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_ZzrdCQFeGrysx9JhvLVNx6aDJSr04T65EdFfHdpc1I"},
{"content":{"body":"https://www.w3.org/TR/CSP3/#match-element-to-source-list step 5.2.5.2","msgtype":"m.text"},"ts":1681491239916,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mHIV8B72fZAwhwChokoTJTGfdpPOvc8827Xj_KRvcAk"},
{"content":{"body":"so in practice it is equivalent to doing a strict decoding but with mixed alphabet","msgtype":"m.text"},"ts":1681491266498,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jKFCHxu4BVVZdzh9h4PJqvDTJXGSLs2ROGlp0XHxJxw"},
{"content":{"body":" * so in practice it is equivalent to doing a strict decoding (i.e. enforcing padding) but with mixed alphabet","m.new_content":{"body":"so in practice it is equivalent to doing a strict decoding (i.e. enforcing padding) but with mixed alphabet","msgtype":"m.text"},"m.relates_to":{"event_id":"$jKFCHxu4BVVZdzh9h4PJqvDTJXGSLs2ROGlp0XHxJxw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681491273756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vtNePlPeRM2ISMn1C-To3OR6Ja_pjQjIJtJbg0gwR5U"},
{"content":{"body":"I would also be 0% surprised to find that implementations differ from the spec on that point","msgtype":"m.text"},"ts":1681491295411,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CvOdKt2fGSs2B5uWSOxlCf2PBpARVQbPd6hx6LEVTd4"},
{"content":{"body":"ok actually I have reminded myself that it's more complicated because the SRI check, unlike the hash-source check, does not include the find/replace step https://github.com/w3c/webappsec-csp/issues/423","msgtype":"m.text"},"ts":1681491422657,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z2Gl2mjahAJg-E7uhrA8EtlloF3Y-M0tbmOxv23KAP4"},
{"content":{"body":"again this is just the spec, no idea what implementations do","msgtype":"m.text"},"ts":1681491432917,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0wxaTV5Tk3QBUDiPu62mPLPUcPKOzfuxACdGLffTHNI"},
{"content":{"body":"Yeah, CSP is pretty bad on a number of fronts so maybe not the best place to draw from. Though if you're inclined to sort it out a bit I'd be happy to help","msgtype":"m.text"},"ts":1681491732185,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$RwWQFt6aFiXtFpRDdCN3jeUp0CyTTJHz10igbJBaXcE"},
{"content":{"body":"I did open a few PRs a couple years back and they got no attention, so I stopped doing that","msgtype":"m.text"},"ts":1681491791189,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X20JWl18XanTavWKHRNhmYmBSE3Ouwplbj5MQmbktIo"},
{"content":{"body":"I guess they're conflicting now so clearly someone has done at least some work","msgtype":"m.text"},"ts":1681491814204,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D4Iqb6u-o2TWvgyMx425f2kCed3hh9UH2wWhLZ8lV10"},
{"content":{"body":"That's unfortunate","msgtype":"m.text"},"ts":1681492852396,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2wRJDFUf7DNkrepN3bkK8VgplUyk2jBQ2rj4_Y45ovU"},
{"content":{"body":"There has been some more maintenance as of late, but nothing spectacular","msgtype":"m.text"},"ts":1681492872113,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$pnns4A5Ku8gwt_WQ0nxXT2lOCoBPVL_xHh8T3rKyvF4"},
{"content":{"body":"Yeah probably worth trying again","msgtype":"m.text"},"ts":1681493153461,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$StAaU7fYcPPl0KWbBmL3UPrulp8vRGrZIJNZ2OUwSrI"},
{"content":{"body":"There's a lot of specs which could use some love","msgtype":"m.text"},"ts":1681493167987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hR4-MDmi7BSGf50EBKfTPQnh8NPmtHYF4BYTmAH6XNg"},
{"content":{"body":"Has there been a proposal to support HTTP headers with the (dynamic) module import syntax?","msgtype":"m.text"},"ts":1681497651206,"senderName":"Partime","senderId":"@partime:matrix.org","id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I"},
{"content":{"body":"It would be useful to pass an `Authorization` header than being forced to pass a token as query param (easily vulnerable).","format":"org.matrix.custom.html","formatted_body":"It would be useful to pass an <code>Authorization</code> header than being forced to pass a token as query param (easily vulnerable).","msgtype":"m.text"},"ts":1681498476653,"senderName":"Partime","senderId":"@partime:matrix.org","id":"$YzAFl6WcODcxwXr1zX8AUS7XMErmqhJ2M2N_xZKdLyo"},
{"content":{"body":"* It would be useful to pass an `Authorization` header than being forced to pass a token in the URL (easily vulnerable).","m.new_content":{"body":"It would be useful to pass an `Authorization` header than being forced to pass a token in the URL (easily vulnerable).","format":"org.matrix.custom.html","formatted_body":"It would be useful to pass an <code>Authorization</code> header than being forced to pass a token in the URL (easily vulnerable).","msgtype":"m.text"},"m.relates_to":{"event_id":"$YzAFl6WcODcxwXr1zX8AUS7XMErmqhJ2M2N_xZKdLyo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681503217984,"senderName":"Partime","senderId":"@partime:matrix.org","id":"$bzAlbgoAVKkkIASu6QU2QE_jyDqAUQ02wqw6nN1Bo-U"},
{"content":{"body":"* It would be useful to pass an `Authorization` header than a token in the URL (easily vulnerable).","m.new_content":{"body":"It would be useful to pass an `Authorization` header than a token in the URL (easily vulnerable).","format":"org.matrix.custom.html","formatted_body":"It would be useful to pass an <code>Authorization</code> header than a token in the URL (easily vulnerable).","msgtype":"m.text"},"m.relates_to":{"event_id":"$YzAFl6WcODcxwXr1zX8AUS7XMErmqhJ2M2N_xZKdLyo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681503235227,"senderName":"Partime","senderId":"@partime:matrix.org","id":"$A3CNd_WNYVI5UBFZ7JzFgsnkE-K9ZKH4AOQwl7fwvwE"},
{"content":{"body":"https://tc39.es/ecma262/#sec-LoadRequestedModules","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681504071534,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$X5waRiWZ76kMh0CXi8Kud_WKQaPw_ry99Mym44E5dSw"},
{"content":{"body":"> `import()` expressions never set the `hostDefined` parameter","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p><code>import()</code> expressions never set the <code>hostDefined</code> parameter</p>\n</blockquote>\n","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$X5waRiWZ76kMh0CXi8Kud_WKQaPw_ry99Mym44E5dSw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681504102899,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$DuFguh5lxLi8CSXb6zD7NEefJSRj9qR0kQAFRaPjahk"},
{"content":{"body":"https://github.com/tc39/proposal-dynamic-import/issues/76","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$DuFguh5lxLi8CSXb6zD7NEefJSRj9qR0kQAFRaPjahk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681504228614,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zCGPK31T9i8bAMeSKR2nQwJsQ-kOQ_3gfoka0fO8D0A"},
{"content":{"body":"https://github.com/tc39/proposal-dynamic-import/issues/84#issuecomment-855285508\n\nthere's what appears to be a workaround here, but I didn't scrutinize it","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$zCGPK31T9i8bAMeSKR2nQwJsQ-kOQ_3gfoka0fO8D0A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681504370323,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Dj50qWVOXYYWtF_llXcS4c3tfcKOGVdtoIzW9SC7ssU"},
{"content":{"body":"https://github.com/tc39/proposal-import-attributes","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$Dj50qWVOXYYWtF_llXcS4c3tfcKOGVdtoIzW9SC7ssU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681505384030,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$J_gCtaQJazYyt8bUJozG6e4qXQ50fxOnBKFCBf8tzqI"},
{"content":{"body":"this proposal could conceivably support it, but handling the options is the domain of the browser/runtime","m.relates_to":{"event_id":"$tQWZO-dnejP4pbUrBWr-ujd8k1dK-0jUtk6YER_50_I","is_falling_back":true,"m.in_reply_to":{"event_id":"$J_gCtaQJazYyt8bUJozG6e4qXQ50fxOnBKFCBf8tzqI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681505425086,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_RclMj8GGuGlrfHdL3or_lf3fD1o7gHrInEZt8ralzg"}
]