[
{"content":{"body":"Is anyone still researching base64 utilities?","msgtype":"m.text"},"ts":1681460903974,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2FKndE4MoXJO14_rxruo38eW80jp2sWNsyvsnlegl6Q"},
{"content":{"body":"bakkot updated the base64 proposal just last week. https://tc39.es/proposal-arraybuffer-base64/","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> updated the base64 proposal just last week. https://tc39.es/proposal-arraybuffer-base64/","msgtype":"m.text"},"ts":1681463184391,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3Q46vKiT3x-iNdb-NH7IHM3oUADoCy_DNs5gaDUY1ro"},
{"content":{"body":"Thanks, it seems that has the relevant issues that need to be solved as well","msgtype":"m.text"},"ts":1681467924780,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$9SNAWPDFjZDuw7DA5sjoAjieVdzepGRAAyOCh5crAkg"},
{"content":{"body":"I'm getting closer to understanding (and improving) how WebKit handles all of this which should help eventually driving those to some resolution","msgtype":"m.text"},"ts":1681467962942,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$518z8a-Ym14y9Dw0ftm8RP84QGPkghkftv9_6PfQ_7M"},
{"content":{"body":"I am hoping to bring it for stage 2 next meting","msgtype":"m.text"},"ts":1681487109274,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MMAzG-Wr1_TgYkBCsWjzGmOrHTzWDfQ4YzQTItgNjqY"},
{"content":{"body":" * I am hoping to bring it for stage 2 next meeting","m.new_content":{"body":"I am hoping to bring it for stage 2 next meeting","msgtype":"m.text"},"m.relates_to":{"event_id":"$MMAzG-Wr1_TgYkBCsWjzGmOrHTzWDfQ4YzQTItgNjqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681487118881,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtYPGLDul07693yeBmf9Bd4-19ujHL6QaNYRQNd_0g0"},
{"content":{"body":"currently leaning towards, the decoder will be lenient in accepting whitespace / not enforcing `=` padding, and the encoder will be strict in not producing whitespace and always producing `=` padding","format":"org.matrix.custom.html","formatted_body":"currently leaning towards, the decoder will be lenient in accepting whitespace / not enforcing <code>=</code> padding, and the encoder will be strict in not producing whitespace and always producing <code>=</code> padding","msgtype":"m.text"},"ts":1681487170524,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-DY866RpFh1ZzLqbSimCxJADc8bppMXNYYAMB04qiGA"},
{"content":{"body":"and then maybe not having options for those, unless there's a compelling case made","msgtype":"m.text"},"ts":1681487183019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nR6GB6eCrypa0O3hCxU2Q6RuTIExIlIzAC1FZ5sbwK0"},
{"content":{"body":"I was originally planning on having options for how to handle whitespace and `=` but they're probably not actually necessary","format":"org.matrix.custom.html","formatted_body":"I was originally planning on having options for how to handle whitespace and <code>=</code> but they're probably not actually necessary","msgtype":"m.text"},"ts":1681487205504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iSqmH6wMuvzLtDvtb6JYPQXVnk4w4xFRK_W1ymJWV6E"},
{"content":{"body":"bakkot: what I'm learning in WebKit thus far is that the options differ between base64/base64url","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what I'm learning in WebKit thus far is that the options differ between base64/base64url","msgtype":"m.text"},"ts":1681491074622,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$PKgUhGqk2LCnF4ColmpMBWze76fvW7F0PVWXocPU2Zs"},
{"content":{"body":"fascinating","msgtype":"m.text"},"ts":1681491094125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hkyYp6GQ43kTq6w9oaE47auJWyD_6D0MvHjv7-bazkE"},
{"content":{"body":"bakkot: only base64 has a lenient decode mode of sorts compatible with atob/data: URLs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: only base64 has a lenient decode mode of sorts compatible with atob/data: URLs","msgtype":"m.text"},"ts":1681491116610,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$HIt4hvYJ1l3Mpk2FLsB3y1bjFvUX9R8qaZ38Or-UPoM"},
{"content":{"body":"also, some places (possibly including the CSP spec?) allow \"mixed\" decoding, where you can just mix characters from either alphabet, which I am not current planning to support because, gross","msgtype":"m.text"},"ts":1681491149727,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upCyZc8t1b_NXiuvUovqLDDr-ov_8_QFvBTCgHV3VHw"},
{"content":{"body":"Which also kinda matches what I've seen in standards, though I haven't tested base64url endpoints myself","msgtype":"m.text"},"ts":1681491159804,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$rIv9ed5QMq41k-_rZf7X26Yc7hRQefLGH_vzoxtAsy4"},
{"content":{"body":"I thought CSP relied on comparing the result of encode from our past discussion, but also have never attempted to test myself","msgtype":"m.text"},"ts":1681491184811,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$Z2OkXusqUci_z1scxXJTq0Wb0OoDZB0pFQYDR77suFU"},
{"content":{"body":"that is correct but it does a find-replace first","msgtype":"m.text"},"ts":1681491220555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_ZzrdCQFeGrysx9JhvLVNx6aDJSr04T65EdFfHdpc1I"},
{"content":{"body":"https://www.w3.org/TR/CSP3/#match-element-to-source-list step 5.2.5.2","msgtype":"m.text"},"ts":1681491239916,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mHIV8B72fZAwhwChokoTJTGfdpPOvc8827Xj_KRvcAk"},
{"content":{"body":"so in practice it is equivalent to doing a strict decoding but with mixed alphabet","msgtype":"m.text"},"ts":1681491266498,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jKFCHxu4BVVZdzh9h4PJqvDTJXGSLs2ROGlp0XHxJxw"},
{"content":{"body":" * so in practice it is equivalent to doing a strict decoding (i.e. enforcing padding) but with mixed alphabet","m.new_content":{"body":"so in practice it is equivalent to doing a strict decoding (i.e. enforcing padding) but with mixed alphabet","msgtype":"m.text"},"m.relates_to":{"event_id":"$jKFCHxu4BVVZdzh9h4PJqvDTJXGSLs2ROGlp0XHxJxw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681491273756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vtNePlPeRM2ISMn1C-To3OR6Ja_pjQjIJtJbg0gwR5U"},
{"content":{"body":"I would also be 0% surprised to find that implementations differ from the spec on that point","msgtype":"m.text"},"ts":1681491295411,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CvOdKt2fGSs2B5uWSOxlCf2PBpARVQbPd6hx6LEVTd4"},
{"content":{"body":"ok actually I have reminded myself that it's more complicated because the SRI check, unlike the hash-source check, does not include the find/replace step https://github.com/w3c/webappsec-csp/issues/423","msgtype":"m.text"},"ts":1681491422657,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z2Gl2mjahAJg-E7uhrA8EtlloF3Y-M0tbmOxv23KAP4"},
{"content":{"body":"again this is just the spec, no idea what implementations do","msgtype":"m.text"},"ts":1681491432917,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0wxaTV5Tk3QBUDiPu62mPLPUcPKOzfuxACdGLffTHNI"}
]