[
{"content":{"body":"https://github.com/tc39/ecma262/issues/3563","msgtype":"m.text"},"ts":1744286386151,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Wmuhu_pwL-1dNo3kfli2vWx_diia41QQcp2V_L4S_yA"},
{"content":{"body":"found this when re-implementing RegExp in engine262","msgtype":"m.text"},"ts":1744286398332,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$29ug2JgJYLYa5sX4Sk-rmMGogMHjVJgYXjufvA44LFQ"},
{"content":{"body":"I think between below the  following tests in test262 are contradictory. \n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744288609876,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE"},
{"content":{"body":"* I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"* <p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"m.new_content":{"body":"I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744288949159,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$_7au9y3UEv818YmS40_LfNc0pag0IwnFaICskU6iafg"},
{"content":{"body":"maybe it's related to https://github.com/tc39/ecma262/pull/2267","msgtype":"m.text"},"ts":1744289254145,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JwYRCBGDj9Ya3UOZFYN1zQihEWMCBeiajgqiiLuQOts"},
{"content":{"body":"Hey everyone! I had an idea to propose adding a native `deepEqual` to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?\n\nThe main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.","format":"org.matrix.custom.html","formatted_body":"<p>Hey everyone! I had an idea to propose adding a native <code>deepEqual</code> to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?</p>\n<p>The main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744316331801,"senderName":"Mikhail Efanov","senderId":"@misha98857:matrix.org","id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"},
{"content":{"body":"the idea is tossed around occasionally. it is a very large problem space; there are many different notions of what it would mean to be \"equal\". if you want to make the case for it you should give motivating examples for why someone would want to do this (in the browser - things which are mainly useful in tests are not good candidates to add to the language).","m.mentions":{},"msgtype":"m.text"},"ts":1744316986292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_pZKMK_DfyATkdDlrMi0pcQ9ebiqKh4Rmn3eAq-CxdQ"},
{"content":{"body":"we really need a deep equality section in https://github.com/tc39/faq","m.mentions":{},"msgtype":"m.text"},"ts":1744317015057,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3dcvKzB1z4vRaZE3R1AbApnUx4IzEKsU_78zHFkawFk"},
{"content":{"body":"hi, welcome! and thanks for taking the time.\n\nabout the idea, I've heard people say that there are many possible semantics for deepEqual which are all valid depending on what your use case is. some are mutually exclusive. not sure how widespread this view is in committee. anyway, as a starting point I'd suggest making sure you've catalogued all the different semantics that people might possibly expect from a deepEqual function and come prepared with arguments why a standardized one should choose one semantic over another.\n\nalso see the Composites idea which is on the agenda for the upcoming TC39. there is a `Composite.equal` function which would not exactly be deepEqual, but might cover some of the use cases","format":"org.matrix.custom.html","formatted_body":"<p>hi, welcome! and thanks for taking the time.</p>\n<p>about the idea, I've heard people say that there are many possible semantics for deepEqual which are all valid depending on what your use case is. some are mutually exclusive. not sure how widespread this view is in committee. anyway, as a starting point I'd suggest making sure you've catalogued all the different semantics that people might possibly expect from a deepEqual function and come prepared with arguments why a standardized one should choose one semantic over another.</p>\n<p>also see the Composites idea which is on the agenda for the upcoming TC39. there is a <code>Composite.equal</code> function which would not exactly be deepEqual, but might cover some of the use cases</p>\n","m.mentions":{"user_ids":["@misha98857:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"}},"msgtype":"m.text"},"ts":1744317049998,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$q9JEKB9WKCVIpsmjm2XS9J-8k5gbkunVhAUrkUQLsZw"},
{"content":{"body":"as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.\n\nthere's also\n- https://es.discourse.group/t/json-equals-x-y/2019\n- https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753\n\nand others I'm sure","format":"org.matrix.custom.html","formatted_body":"<p>as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.</p>\n<p>there's also</p>\n<ul>\n<li>https://es.discourse.group/t/json-equals-x-y/2019</li>\n<li>https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753</li>\n</ul>\n<p>and others I'm sure</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744317475172,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SVCk_BTqufZFZ1brUSQj8_4M3e_Epf_px3SOegwbkp0"},
{"content":{"body":"Thanks. I hadn't seen this proposal before. It seems similar — two composite objects are almost equal, like in \"common\" deepEqual logic","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q9JEKB9WKCVIpsmjm2XS9J-8k5gbkunVhAUrkUQLsZw"}},"msgtype":"m.text"},"ts":1744317590445,"senderName":"Mikhail Efanov","senderId":"@misha98857:matrix.org","id":"$a_v2tcRZCYYKE9Fogg84I2pC0TyMOSddgH9Kzv2xSUE"},
{"content":{"body":"also related is [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) which has made a decision on some of the \"deep\" questions","format":"org.matrix.custom.html","formatted_body":"also related is [<code data-md=\"`\">structuredClone</code>](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) which has made a decision on some of the &quot;deep&quot; questions","m.mentions":{},"msgtype":"m.text"},"ts":1744317701851,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xIpASYH0JIRf4WrzYKKAloTNSxGfQ88eQ7E6V081J20"},
{"content":{"body":"also: https://github.com/tc39/proposal-record-tuple#equality","m.mentions":{},"msgtype":"m.text"},"ts":1744317929011,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$inTrV6p21nYMQUHd06xoND6hQvppnLEp5ysNOMiGRQM"},
{"content":{"body":"yes but still, this is different from what you typically want in a test framework, to check whether two *mutable* arrays are (currently) equal. Such a function does not have that same stability property. So probably multiple things need to exist.","format":"org.matrix.custom.html","formatted_body":"yes but still, this is different from what you typically want in a test framework, to check whether two <em>mutable</em> arrays are (currently) equal. Such a function does not have that same stability property. So probably multiple things need to exist.","m.mentions":{"user_ids":["@misha98857:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a_v2tcRZCYYKE9Fogg84I2pC0TyMOSddgH9Kzv2xSUE"}},"msgtype":"m.text"},"ts":1744320601131,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dg9bU6FNObF8qS1x0cbJIMTykbe_7xXIkfvgBI6QrL0"},
{"content":{"body":"> <@bakkot:matrix.org> as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.\n> \n> there's also\n> - https://es.discourse.group/t/json-equals-x-y/2019\n> - https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753\n> \n> and others I'm sure\n\nHemanth H.M, ljharb, and I talked about reviving proposal-array-equality a few years ago but none of us have had time. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24SVCk_BTqufZFZ1brUSQj8_4M3e_Epf_px3SOegwbkp0\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.</p>\n<p>there's also</p>\n<ul>\n<li>https://es.discourse.group/t/json-equals-x-y/2019</li>\n<li>https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753</li>\n</ul>\n<p>and others I'm sure</p>\n</blockquote></mx-reply><a href=\"https://matrix.to/#/@hemanth.hm:matrix.org\">Hemanth H.M</a>, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, and I talked about reviving proposal-array-equality a few years ago but none of us have had time.","m.relates_to":{"m.in_reply_to":{"event_id":"$SVCk_BTqufZFZ1brUSQj8_4M3e_Epf_px3SOegwbkp0"}},"msgtype":"m.text"},"ts":1744322781170,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SoDwkvScbKeflk7IlUHGvzTN3odMCNX7WQfUOZAH1vE"},
{"content":{"body":"(Also, there was https://github.com/sebmarkbage/ecmascript-shallow-equal.)","m.mentions":{},"msgtype":"m.text"},"ts":1744323257918,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QzE8Acczc5YW3T5FGwWdDs1BQOFiDl3ay5eGdEaALSc"},
{"content":{"body":"* (Also, there was https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)","m.mentions":{},"m.new_content":{"body":"(Also, there was https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QzE8Acczc5YW3T5FGwWdDs1BQOFiDl3ay5eGdEaALSc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744323437470,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$U5v9P1tdTS4GdPjS09Ko8P9TWYTt7PxX8OGi-htOnU0"},
{"content":{"body":"* (Also, there were https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)","m.mentions":{},"m.new_content":{"body":"(Also, there were https://github.com/sebmarkbage/ecmascript-shallow-equal, https://es.discourse.group/t/native-deep-clone-algorithm/, and the dormant https://github.com/tc39/ecma262/issues/2555.)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QzE8Acczc5YW3T5FGwWdDs1BQOFiDl3ay5eGdEaALSc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744323447239,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PlIYYgV6jv4syRJnTJQwEUaF-_18goV-s90At0A4VbY"},
{"content":{"body":"Also, I recall someone saying that we probably will never ever be able to add anything to Object.prototype ever again without breaking websites; would that apply to static methods in Object?","m.mentions":{},"msgtype":"m.text"},"ts":1744323856059,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7tm1Gt7BJGAF7PFApkrx6USxffFzVWf7YfXJh-lbeFU"},
{"content":{"body":"* Also, I recall someone in the Committee saying once that we probably will never ever be able to add anything to Object.prototype ever again without breaking websites. Does that apply to static methods in Object?","m.mentions":{},"m.new_content":{"body":"Also, I recall someone in the Committee saying once that we probably will never ever be able to add anything to Object.prototype ever again without breaking websites. Does that apply to static methods in Object?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7tm1Gt7BJGAF7PFApkrx6USxffFzVWf7YfXJh-lbeFU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744323884851,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8l7GECApNcQh8_G8d_um9yzwXdju4x21rsnZyc_zKwM"},
{"content":{"body":"it was more about Array.prototype than Object.prototype","m.mentions":{},"msgtype":"m.text"},"ts":1744324047440,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BUQfHxntItFaG-gjKzJojGvRjNodOJkAzORhkTVOkEY"},
{"content":{"body":"static methods are fine","m.mentions":{},"msgtype":"m.text"},"ts":1744324050022,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ed0xoinf6bRQrP34gpYsKYfLUZ2Udxyqqyp1_av6bSg"},
{"content":{"body":"this is also true of Object.prototype to be clear","m.mentions":{},"msgtype":"m.text"},"ts":1744324079033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1wRUpAzxUq6x37xmVSagRDxt3vYea7NP48GfkLBPtpE"},
{"content":{"body":"fair, i would also object to adding stuff to Object.prototype","m.mentions":{},"msgtype":"m.text"},"ts":1744324109851,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wjEIfMiBVLIRhEOlKAcZj7vUELPgW6VPsxG_ToPR3uQ"},
{"content":{"body":"even if it's web compatible it's guaranteed to be a bugfarm or security thing","m.mentions":{},"msgtype":"m.text"},"ts":1744324126080,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GX_jZ9cVVJ-Tu6HqTezUagP58JqBVxGQhAIPmZFZO34"},
{"content":{"body":"My feedback is that your proposal looks like a good start. Were I writing this proposal, I would make sure I do three more things: \n\n0. Search thoroughly for similar official TC39 proposals, like proposal-array-equality, find the meeting notes when they were presented to the Committee in the [meeting notes repository](https://github.com/tc39/notes/), and determine the biggest barriers to them advancing. Other than the lack of time of the champions. If you want to try to revive any proposal you find, feel free to open an issue and start working on the next steps.\n1. Search for more prior art of deep equality in JavaScript as practical—particularly popular deep-equality NPM packages. (Examples of deep equality in other languages also is good, but JavaScript has big differences from all other languages.)\n2. Compare the behavior of the prior art (maybe in a table). Do they compare objects’ enumerated properties, use symbol-based protocols, or do something else?\n3. Investigate how real-world codebases use the prior art—particularly popular NPM packages depending on the popular deep-equality NPM packages. I would be especially interested to find out whether those popular dependents on deep-equality packages use deep equality only in testing or for production code. \n\nFor example, if you find that virtual-DOM libraries often use certain types of deep equality in hot loops, that could be a compelling-enough argument to add to the JS engines.\n\nThis would all be volunteer work, of course, and we know how thankless volunteer work can be. It must have been a lot of hard work for you already. Thank you for taking the time.","format":"org.matrix.custom.html","formatted_body":"<p>My feedback is that your proposal looks like a good start. Were I writing this proposal, I would make sure I do three more things:</p>\n<ol start=\"0\">\n<li>Search thoroughly for similar official TC39 proposals, like proposal-array-equality, find the meeting notes when they were presented to the Committee in the <a href=\"https://github.com/tc39/notes/\">meeting notes repository</a>, and determine the biggest barriers to them advancing. Other than the lack of time of the champions. If you want to try to revive any proposal you find, feel free to open an issue and start working on the next steps.</li>\n<li>Search for more prior art of deep equality in JavaScript as practical—particularly popular deep-equality NPM packages. (Examples of deep equality in other languages also is good, but JavaScript has big differences from all other languages.)</li>\n<li>Compare the behavior of the prior art (maybe in a table). Do they compare objects’ enumerated properties, use symbol-based protocols, or do something else?</li>\n<li>Investigate how real-world codebases use the prior art—particularly popular NPM packages depending on the popular deep-equality NPM packages. I would be especially interested to find out whether those popular dependents on deep-equality packages use deep equality only in testing or for production code.</li>\n</ol>\n<p>For example, if you find that virtual-DOM libraries often use certain types of deep equality in hot loops, that could be a compelling-enough argument to add to the JS engines.</p>\n<p>This would all be volunteer work, of course, and we know how thankless volunteer work can be. It must have been a lot of hard work for you already. Thank you for taking the time.</p>\n","m.mentions":{"user_ids":["@misha98857:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"}},"msgtype":"m.text"},"ts":1744325207801,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9tSTzs_goee2sWTENZJcOBWuIj8WmldXyHDxrYeDa1I"}
]