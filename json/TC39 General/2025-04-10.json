[
{"content":{"body":"https://github.com/tc39/ecma262/issues/3563","msgtype":"m.text"},"ts":1744286386151,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Wmuhu_pwL-1dNo3kfli2vWx_diia41QQcp2V_L4S_yA"},
{"content":{"body":"found this when re-implementing RegExp in engine262","msgtype":"m.text"},"ts":1744286398332,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$29ug2JgJYLYa5sX4Sk-rmMGogMHjVJgYXjufvA44LFQ"},
{"content":{"body":"I think between below the  following tests in test262 are contradictory. \n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744288609876,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE"},
{"content":{"body":"* I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"* <p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"m.new_content":{"body":"I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744288949159,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$_7au9y3UEv818YmS40_LfNc0pag0IwnFaICskU6iafg"},
{"content":{"body":"maybe it's related to https://github.com/tc39/ecma262/pull/2267","msgtype":"m.text"},"ts":1744289254145,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JwYRCBGDj9Ya3UOZFYN1zQihEWMCBeiajgqiiLuQOts"},
{"content":{"body":"Hey everyone! I had an idea to propose adding a native `deepEqual` to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?\n\nThe main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.","format":"org.matrix.custom.html","formatted_body":"<p>Hey everyone! I had an idea to propose adding a native <code>deepEqual</code> to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?</p>\n<p>The main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744316331801,"senderName":"Mikhail Efanov","senderId":"@misha98857:matrix.org","id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"},
{"content":{"body":"the idea is tossed around occasionally. it is a very large problem space; there are many different notions of what it would mean to be \"equal\". if you want to make the case for it you should give motivating examples for why someone would want to do this (in the browser - things which are mainly useful in tests are not good candidates to add to the language).","m.mentions":{},"msgtype":"m.text"},"ts":1744316986292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_pZKMK_DfyATkdDlrMi0pcQ9ebiqKh4Rmn3eAq-CxdQ"},
{"content":{"body":"we really need a deep equality section in https://github.com/tc39/faq","m.mentions":{},"msgtype":"m.text"},"ts":1744317015057,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3dcvKzB1z4vRaZE3R1AbApnUx4IzEKsU_78zHFkawFk"},
{"content":{"body":"hi, welcome! and thanks for taking the time.\n\nabout the idea, I've heard people say that there are many possible semantics for deepEqual which are all valid depending on what your use case is. some are mutually exclusive. not sure how widespread this view is in committee. anyway, as a starting point I'd suggest making sure you've catalogued all the different semantics that people might possibly expect from a deepEqual function and come prepared with arguments why a standardized one should choose one semantic over another.\n\nalso see the Composites idea which is on the agenda for the upcoming TC39. there is a `Composite.equal` function which would not exactly be deepEqual, but might cover some of the use cases","format":"org.matrix.custom.html","formatted_body":"<p>hi, welcome! and thanks for taking the time.</p>\n<p>about the idea, I've heard people say that there are many possible semantics for deepEqual which are all valid depending on what your use case is. some are mutually exclusive. not sure how widespread this view is in committee. anyway, as a starting point I'd suggest making sure you've catalogued all the different semantics that people might possibly expect from a deepEqual function and come prepared with arguments why a standardized one should choose one semantic over another.</p>\n<p>also see the Composites idea which is on the agenda for the upcoming TC39. there is a <code>Composite.equal</code> function which would not exactly be deepEqual, but might cover some of the use cases</p>\n","m.mentions":{"user_ids":["@misha98857:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"}},"msgtype":"m.text"},"ts":1744317049998,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$q9JEKB9WKCVIpsmjm2XS9J-8k5gbkunVhAUrkUQLsZw"},
{"content":{"body":"as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.\n\nthere's also\n- https://es.discourse.group/t/json-equals-x-y/2019\n- https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753\n\nand others I'm sure","format":"org.matrix.custom.html","formatted_body":"<p>as to prior art, there's been one actual proposal (https://github.com/tc39/proposal-array-equality) although it didn't go anywhere; you can probably find it in the notes for more.</p>\n<p>there's also</p>\n<ul>\n<li>https://es.discourse.group/t/json-equals-x-y/2019</li>\n<li>https://es.discourse.group/t/proposal-object-equals-and-hashcode/1753</li>\n</ul>\n<p>and others I'm sure</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744317475172,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SVCk_BTqufZFZ1brUSQj8_4M3e_Epf_px3SOegwbkp0"},
{"content":{"body":"Thanks. I hadn't seen this proposal before. It seems similar — two composite objects are almost equal, like in \"common\" deepEqual logic","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q9JEKB9WKCVIpsmjm2XS9J-8k5gbkunVhAUrkUQLsZw"}},"msgtype":"m.text"},"ts":1744317590445,"senderName":"Mikhail Efanov","senderId":"@misha98857:matrix.org","id":"$a_v2tcRZCYYKE9Fogg84I2pC0TyMOSddgH9Kzv2xSUE"},
{"content":{"body":"also related is [`structuredClone`](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) which has made a decision on some of the \"deep\" questions","format":"org.matrix.custom.html","formatted_body":"also related is [<code data-md=\"`\">structuredClone</code>](https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone) which has made a decision on some of the &quot;deep&quot; questions","m.mentions":{},"msgtype":"m.text"},"ts":1744317701851,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xIpASYH0JIRf4WrzYKKAloTNSxGfQ88eQ7E6V081J20"}
]