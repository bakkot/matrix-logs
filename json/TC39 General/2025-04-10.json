[
{"content":{"body":"https://github.com/tc39/ecma262/issues/3563","msgtype":"m.text"},"ts":1744286386151,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Wmuhu_pwL-1dNo3kfli2vWx_diia41QQcp2V_L4S_yA"},
{"content":{"body":"found this when re-implementing RegExp in engine262","msgtype":"m.text"},"ts":1744286398332,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$29ug2JgJYLYa5sX4Sk-rmMGogMHjVJgYXjufvA44LFQ"},
{"content":{"body":"I think between below the  following tests in test262 are contradictory. \n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess spec spec-compliant way is 2 because before accessing the property ReferenceError exception will be occur first by envRec.[[ThisBindingStatus]] is uninitialized.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744288609876,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE"},
{"content":{"body":"* I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"* <p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"m.new_content":{"body":"I think between below the  following tests in test262 are contradictory.\n\n1. https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js\n2. https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js\n\nAnd I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.\\[\\[ThisBindingStatus\\]\\] is uninitialized\"  before accessing the property.\n\nIf it is, I'll open PR soon to test262. correct me if I'm wrong :)","format":"org.matrix.custom.html","formatted_body":"<p>I think between below the  following tests in test262 are contradictory.</p>\n<ol>\n<li>https://github.com/tc39/test262/blob/main/test/staging/sm/class/superPropDelete.js</li>\n<li>https://github.com/tc39/test262/blob/main/test/language/expressions/delete/super-property-uninitialized-this.js</li>\n</ol>\n<p>And I guess the spec-compliant way is 2, because the ReferenceError exception will be occur by the spec - \"envRec.[[ThisBindingStatus]] is uninitialized\"  before accessing the property.</p>\n<p>If it is, I'll open PR soon to test262. correct me if I'm wrong :)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RuKklV9GIDuaXiuMT2cAJM-dPZ8OKWfWaFo_v6CKUaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744288949159,"senderName":"Seokho Song","senderId":"@seokho:matrix.org","id":"$_7au9y3UEv818YmS40_LfNc0pag0IwnFaICskU6iafg"},
{"content":{"body":"maybe it's related to https://github.com/tc39/ecma262/pull/2267","msgtype":"m.text"},"ts":1744289254145,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JwYRCBGDj9Ya3UOZFYN1zQihEWMCBeiajgqiiLuQOts"},
{"content":{"body":"Hey everyone! I had an idea to propose adding a native `deepEqual` to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?\n\nThe main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.","format":"org.matrix.custom.html","formatted_body":"<p>Hey everyone! I had an idea to propose adding a native <code>deepEqual</code> to ECMAScript. I’ve written a small draft here: https://github.com/misha98857/proposal-object-deep-equal/blob/main/README.md, but I wanted to ask how relevant this idea might be — and whether similar proposals have been made and rejected before?</p>\n<p>The main goal is to move away from third-party libraries and custom solutions in favor of built-in functionality.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744316331801,"senderName":"Mikhail Efanov","senderId":"@misha98857:matrix.org","id":"$6O0j_kGF0J2MVmM9dRUhBn-ewAoe9gzLTBle27M5cRo"}
]