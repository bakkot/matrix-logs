[
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721266939115,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CWJAjk4YunvKufxJTlKkHS0rNazJcq886Up4jAL3c8Q"},
{"content":{"body":"Hey, turns out scheduler.yield does not actually behave in the way we explained yesterday – I had a bad misunderstanding based on looking at that API only in a narrow context related to the AsyncContext web integration, and not looking at how it's actually used","m.mentions":{},"msgtype":"m.text"},"ts":1721299126920,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4GoZy-u2wawITKWm8gIPpjHm026nlGHwZmOKaviqzNw"},
{"content":{"body":"there is no `enterWith`, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","format":"org.matrix.custom.html","formatted_body":"there is no <code>enterWith</code>, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","m.mentions":{},"msgtype":"m.text"},"ts":1721299215644,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-X7go8C6nh9R6WQ2vixuVlcN4lae474p9z8jKOZkoqo"},
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299334747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zdtgv_P-mNyz7_L-u5W6-xlG8o_cmAUbzfjMN66ny1I"},
{"content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721299604915,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299780133,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$r3iW01RWlXDGFunQycs1A_jRxWz9Wg486RWfE4I_PiI"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299790449,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$IlZBHeGdJP3D8_OqGHBWe5OwDta44_PEwKVTdT7xVwk"},
{"content":{"body":"So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (waitedForEnough()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (waitedForEnough()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721300751589,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Aa3lpIs7hHY2IS_R_IBb1AJwElcASB-u6kYcqwVUMW8"},
{"content":{"body":"i.e. the problem is not related to `AsyncContext` itself, but to the `globalThis.scheduler =` assignment","format":"org.matrix.custom.html","formatted_body":"i.e. the problem is not related to <code>AsyncContext</code> itself, but to the <code>globalThis.scheduler =</code> assignment","m.mentions":{},"msgtype":"m.text"},"ts":1721300773558,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XcVcKvNigIsHbxooRjiJ4geTVdITIwySXY7Nym9XEu4"},
{"content":{"body":" * So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":" * <p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Aa3lpIs7hHY2IS_R_IBb1AJwElcASB-u6kYcqwVUMW8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721300803437,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KTyO-ZpwHhoXXpPQ-6mlvL7aXktqsKG3-d0Q-1NAIww"},
{"content":{"body":"that's right","m.mentions":{},"msgtype":"m.text"},"ts":1721301110907,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RxL9WSNH4ekIqv4lH46u-nNInDxVleAsqUeQVeGHIAM"},
{"content":{"body":"this seems like a pretty reasonable usage of async context, why is the word \"problem\" used/","m.mentions":{},"msgtype":"m.text"},"ts":1721325291485,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI"},
{"content":{"body":" * this seems like a pretty reasonable usage of async context, why is the word \"problem\" used?","m.mentions":{},"m.new_content":{"body":"this seems like a pretty reasonable usage of async context, why is the word \"problem\" used?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721325292735,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8xlOEIQojJXu-D6ENB9ilN4flnNjuKc5mYaxX1RkBZA"},
{"content":{"body":"Two different bits of code that only share a reference to ‘globalThis.scheduler` can communicate information to each other. (Even after scheduler itself is frozen)","format":"org.matrix.custom.html","formatted_body":"Two different bits of code that only share a reference to ‘globalThis.scheduler` can communicate information to each other. (Even after scheduler itself is frozen)","msgtype":"m.text"},"ts":1721325791348,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Yt3XbdPjvsevekhYUMu8U5mHjTSojoGdTdLLjtdZL5o"},
{"content":{"body":"> <@devsnek:matrix.org> this seems like a pretty reasonable usage of async context, why is the word \"problem\" used?\n\nBecause Mathieu Hofman previously said that this kind of thing might form a communication channel, so we were trying to figure out whether this was a problem (he seemed to be saying it was, but I'm having trouble understanding how/why)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>this seems like a pretty reasonable usage of async context, why is the word &quot;problem&quot; used?</blockquote></mx-reply>Because <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> previously said that this kind of thing might form a communication channel, so we were trying to figure out whether this was a problem (he seemed to be saying it was, but I'm having trouble understanding how/why)","m.mentions":{"user_ids":["@devsnek:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI"}},"msgtype":"m.text"},"ts":1721325934268,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UuLa0jb3fEF1V6br3cyvpahI87qfZntxU_OxULtJ1K4"},
{"content":{"body":"oh its an ses problem ok","m.mentions":{},"msgtype":"m.text"},"ts":1721325972025,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gwpDYsc1EnF68Avs_yn9ratvvCqr-NSff_kNyZEEnQ4"},
{"content":{"body":"The ses recordings of the analysis of async context are really interesting ","format":"org.matrix.custom.html","formatted_body":"The ses recordings of the analysis of async context are really interesting ","msgtype":"m.text"},"ts":1721326047646,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pvDLXuEQHcFcSnmzcdrmkfVQo_ixPHk45RpKqN-0ewE"},
{"content":{"body":"i wish all the human effort that went into ses went into a good realms api instead","m.mentions":{},"msgtype":"m.text"},"ts":1721326242648,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vplsnpow-udVj_-3rzKKhsO_tSFf5317btSJ3vQLyKg"},
{"content":{"body":"> <@littledan:matrix.org> Because Mathieu Hofman previously said that this kind of thing might form a communication channel, so we were trying to figure out whether this was a problem (he seemed to be saying it was, but I'm having trouble understanding how/why)\n\nForming a communication channel is kind of _the point_ of async context management. It's a transport of values between two otherwise disconnected points. However, it's mediated through a storage variable and so should not be considered \"insecure\" as access to the store itself functions as the \"key\" to access that data.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UuLa0jb3fEF1V6br3cyvpahI87qfZntxU_OxULtJ1K4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Because <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> previously said that this kind of thing might form a communication channel, so we were trying to figure out whether this was a problem (he seemed to be saying it was, but I'm having trouble understanding how/why)</blockquote></mx-reply>Forming a communication channel is kind of <em>the point</em> of async context management. It's a transport of values between two otherwise disconnected points. However, it's mediated through a storage variable and so should not be considered \"insecure\" as access to the store itself functions as the \"key\" to access that data.","m.mentions":{"user_ids":["@littledan:matrix.org","@devsnek:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UuLa0jb3fEF1V6br3cyvpahI87qfZntxU_OxULtJ1K4"}},"msgtype":"m.text"},"ts":1721335422681,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$b36lUY6e1_qwqezPymWkFzUsjB4B4ckv5KX8TEMF_2s"},
{"content":{"body":"Context management is a mechanism of flowing data alongside execution without explicit passing but rather through a store mediator to essentially handle that flowing _itself_. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","format":"org.matrix.custom.html","formatted_body":"Context management is a mechanism of flowing data alongside execution without explicit passing but rather through a store mediator to essentially handle that flowing <em>itself</em>. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","m.mentions":{},"msgtype":"m.text"},"ts":1721335561473,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ObvcQ4Dv5g5a7yrXYmgko-V9bAiYDNUVxPAx-y-JIrM"},
{"content":{"body":" * Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing _itself_. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","format":"org.matrix.custom.html","formatted_body":" * Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing <em>itself</em>. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","m.mentions":{},"m.new_content":{"body":"Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing _itself_. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","format":"org.matrix.custom.html","formatted_body":"Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing <em>itself</em>. Access is still explicit, just rather than passing something in as a function parameter you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ObvcQ4Dv5g5a7yrXYmgko-V9bAiYDNUVxPAx-y-JIrM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721335578179,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$LizoRNdBgrMyc3uJn113I-BGoSnePJNdH85rSG9CYa0"},
{"content":{"body":" * Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing _itself_. Access is still explicit, just rather than passing something in as a function argument you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","format":"org.matrix.custom.html","formatted_body":" * Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing <em>itself</em>. Access is still explicit, just rather than passing something in as a function argument you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","m.mentions":{},"m.new_content":{"body":"Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing _itself_. Access is still explicit, just rather than passing something in as a function argument you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","format":"org.matrix.custom.html","formatted_body":"Context management is a mechanism of flowing data alongside execution without explicit argument passing but rather through a store mediator to essentially handle that flowing <em>itself</em>. Access is still explicit, just rather than passing something in as a function argument you're passing it into a store to serve as a channel to the later point at which the value would be acquired.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ObvcQ4Dv5g5a7yrXYmgko-V9bAiYDNUVxPAx-y-JIrM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721335589765,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$1H2zTM7vSa7kUgMVeu2Qkv4VajYWE9XJHTkenACca2k"},
{"content":{"body":"> <@devsnek:matrix.org> oh its an ses problem ok\n\nIt's an everybody problem. Shared global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$gwpDYsc1EnF68Avs_yn9ratvvCqr-NSff_kNyZEEnQ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>oh its an ses problem ok</blockquote></mx-reply>It's an everybody problem. Shared global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gwpDYsc1EnF68Avs_yn9ratvvCqr-NSff_kNyZEEnQ4"}},"msgtype":"m.text"},"ts":1721336576414,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$tTKjlp9Z_wnKheZx05G3hDj3dTCgxzA3USd7fCAFbsk"},
{"content":{"body":"> <@devsnek:matrix.org> oh its an ses problem ok\n\n * It's an everybody problem. Observable global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$gwpDYsc1EnF68Avs_yn9ratvvCqr-NSff_kNyZEEnQ4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>oh its an ses problem ok</blockquote></mx-reply> * It's an everybody problem. Observable global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","m.mentions":{},"m.new_content":{"body":"It's an everybody problem. Observable global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","format":"org.matrix.custom.html","formatted_body":"It's an everybody problem. Observable global mutable state is hard to reason about. It's spooky action at a distance. An app can do it, but libraries and runtimes shouldn't","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tTKjlp9Z_wnKheZx05G3hDj3dTCgxzA3USd7fCAFbsk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721336640987,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OC3EH9jiQp2iOn9dmbB19rtz0Oi6FtOQ2kbciWkO_Aw"},
{"content":{"body":"Are we really debating whether observable global mutable state is a good idea or not in a language?","m.mentions":{},"msgtype":"m.text"},"ts":1721336675395,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5YQWQ--zonQ4T3uxipjRjfj7jsmuESuh-saEurDDeYM"},
{"content":{"body":"it's observable only within a limited scope, and (presumably, although this will have to be discussed) overridable so nothing can be observed","m.mentions":{},"msgtype":"m.text"},"ts":1721336915635,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tqklVF_RjkemRxdle6FqDpJcOO9U5FJACTreF_bmDjo"},
{"content":{"body":" * it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable so nothing can be observed within an inner scope","m.mentions":{},"m.new_content":{"body":"it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable so nothing can be observed within an inner scope","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tqklVF_RjkemRxdle6FqDpJcOO9U5FJACTreF_bmDjo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721336957398,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UFkNPt6qzH3pIhBwtFRR4js_KS9etvwpAdhWdMREQ7E"},
{"content":{"body":" * it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable with `AsyncContext.Snapshot` so nothing can be observed within an inner scope","format":"org.matrix.custom.html","formatted_body":" * it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable with <code>AsyncContext.Snapshot</code> so nothing can be observed within an inner scope","m.mentions":{},"m.new_content":{"body":"it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable with `AsyncContext.Snapshot` so nothing can be observed within an inner scope","format":"org.matrix.custom.html","formatted_body":"it's observable only within a limited scope, and (presumably, although this will have to be discussed for every such API) overridable with <code>AsyncContext.Snapshot</code> so nothing can be observed within an inner scope","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tqklVF_RjkemRxdle6FqDpJcOO9U5FJACTreF_bmDjo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721336978423,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$gx194AhD5Fp7F-WfGHhL7rVNJJJnGp2ih57LFGE6Lgg"},
{"content":{"body":"Async context isn't global though, it's store-bound. It just happens to need global facilities to manage the propagation, but the same could be said of connecting lexical scopes. 🤷","m.mentions":{},"msgtype":"m.text"},"ts":1721337172810,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$5XN5t284jVyjA9Q1EPxG_g0ZeuetsPVe8yPfEDVi9XE"},
{"content":{"body":" * Async context _isn't_ global though, it's store-bound. It just happens to need global facilities to manage the propagation, but the same could be said of connecting lexical scopes. 🤷","format":"org.matrix.custom.html","formatted_body":" * Async context <em>isn't</em> global though, it's store-bound. It just happens to need global facilities to manage the propagation, but the same could be said of connecting lexical scopes. 🤷","m.mentions":{},"m.new_content":{"body":"Async context _isn't_ global though, it's store-bound. It just happens to need global facilities to manage the propagation, but the same could be said of connecting lexical scopes. 🤷","format":"org.matrix.custom.html","formatted_body":"Async context <em>isn't</em> global though, it's store-bound. It just happens to need global facilities to manage the propagation, but the same could be said of connecting lexical scopes. 🤷","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5XN5t284jVyjA9Q1EPxG_g0ZeuetsPVe8yPfEDVi9XE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721337181223,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$RI694m6tKMbwrnMutZRIp0yuujYYR4KuB5NxJVELmHE"},
{"content":{"body":"`scheduler` is global","format":"org.matrix.custom.html","formatted_body":"<code>scheduler</code> is global","m.mentions":{},"msgtype":"m.text"},"ts":1721337200575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GuNm3zFkDUy2OhapyHSuu5MFf1523jF8FWhXtnjRuTI"},
{"content":{"body":"Ah, I don't have the full context on the scheduler part of the conversation, but async context on its own is certainly _not_ global. Definitely agreed global state is not great.","format":"org.matrix.custom.html","formatted_body":"Ah, I don't have the full context on the scheduler part of the conversation, but async context on its own is certainly <em>not</em> global. Definitely agreed global state is not great.","m.mentions":{},"msgtype":"m.text"},"ts":1721337278096,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ZyuklyYl4oPhG2hKpvcmLVttQ05sQiphZxM6hpgCfg4"},
{"content":{"body":"I just joined this channel after some folks mentioned AsyncContext discussions were happening here too, so I'm a bit behind on the conversation. 😅","m.mentions":{},"msgtype":"m.text"},"ts":1721337341026,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$0QXOxi10447Y-_MhRWw2meAQAvyscg1-g-Nh2nO1W4Q"},
{"content":{"body":"I'm the maintainer of AsyncLocalStorage in Node.js, btw. 👋","m.mentions":{},"msgtype":"m.text"},"ts":1721337487378,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$sDSZLDfALrRyXVZyoFwbzkGgAAqwNpgxk4Da_iaGDi0"},
{"content":{"body":"> <@mhofman:matrix.org> Are we really debating whether observable global mutable state is a good idea or not in a language?\n\nWhether or not it's a good idea, there are use cases (in the web platform) that apparently can't be solved without some kind of observable global mutation. If you're arguing that HTML shouldn't use global mutable state, you're arguing that the web platform should stop existing because the DOM is globally mutable, and that can't change because it's part of web reality","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$5YQWQ--zonQ4T3uxipjRjfj7jsmuESuh-saEurDDeYM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Are we really debating whether observable global mutable state is a good idea or not in a language?</blockquote></mx-reply>Whether or not it's a good idea, there are use cases (in the web platform) that apparently can't be solved without some kind of observable global mutation. If you're arguing that HTML shouldn't use global mutable state, you're arguing that the web platform should stop existing because the DOM is globally mutable, and that can't change because it's part of web reality","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5YQWQ--zonQ4T3uxipjRjfj7jsmuESuh-saEurDDeYM"}},"msgtype":"m.text"},"ts":1721337577788,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$k2Kg24lZunEDGj-Sq3Q9WBJRXkYaIIGU7DURTQIZ5e8"},
{"content":{"body":"that's not the same thing. arguing that HTML \"should have\" been designed differently is not an argument that it should stop existing.","m.mentions":{},"msgtype":"m.text"},"ts":1721338001267,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AEeT1cuTrdHWZIupzJ0ltuKp7SvDBJX_rQUM2VRJSfI"},
{"content":{"body":"in practice it's a huge mess that the DOM is globally mutable.","m.mentions":{},"msgtype":"m.text"},"ts":1721338020220,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LX_SEBD5z2SLNKF9_kcAvSe173-ILPVynZ3ByyGjaVA"},
{"content":{"body":"that doesn't mean a better alternative currently exists, nor that the DOM should be summarily scrapped","m.mentions":{},"msgtype":"m.text"},"ts":1721338035789,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f87YAv5tKBIkirod8RFxAZdYyeCvLCmDcvGbigBERhU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Ah, I don't have the full context on the scheduler part of the conversation, but async context on its own is certainly _not_ global. Definitely agreed global state is not great.\n\nThere is a 4 part series of ses analyzing AsyncContext on YouTube. The final conclusion is that it's OK 😀","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24ZyuklyYl4oPhG2hKpvcmLVttQ05sQiphZxM6hpgCfg4\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Ah, I don't have the full context on the scheduler part of the conversation, but async context on its own is certainly <em>not</em> global. Definitely agreed global state is not great.</blockquote></mx-reply>There is a 4 part series of ses analyzing AsyncContext on YouTube. The final conclusion is that it's OK 😀","m.relates_to":{"m.in_reply_to":{"event_id":"$ZyuklyYl4oPhG2hKpvcmLVttQ05sQiphZxM6hpgCfg4"}},"msgtype":"m.text"},"ts":1721338145176,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$R4NQjbzskI580Wn4wBQ5JFyvULbGjQ5Lmroi3Kn1tbc"},
{"content":{"body":"Also 👋🏻 welcome!","format":"org.matrix.custom.html","formatted_body":"Also 👋🏻 welcome!","msgtype":"m.text"},"ts":1721338169733,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KyQrBfKkjkatBG6COxezlpYSj3r-epmMIdRajZTtFxQ"},
{"content":{"body":"Okay in the state it is _today_...which has some problems for tracing purposes. 😅","format":"org.matrix.custom.html","formatted_body":"Okay in the state it is <em>today</em>...which has some problems for tracing purposes. 😅","m.mentions":{},"msgtype":"m.text"},"ts":1721338194783,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$huJNqZJChFzBqDMZjA4xABMMhxr7_jIXduGfOXOalU4"}
]