[
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721266939115,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CWJAjk4YunvKufxJTlKkHS0rNazJcq886Up4jAL3c8Q"},
{"content":{"body":"Hey, turns out scheduler.yield does not actually behave in the way we explained yesterday – I had a bad misunderstanding based on looking at that API only in a narrow context related to the AsyncContext web integration, and not looking at how it's actually used","m.mentions":{},"msgtype":"m.text"},"ts":1721299126920,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4GoZy-u2wawITKWm8gIPpjHm026nlGHwZmOKaviqzNw"},
{"content":{"body":"there is no `enterWith`, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","format":"org.matrix.custom.html","formatted_body":"there is no <code>enterWith</code>, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","m.mentions":{},"msgtype":"m.text"},"ts":1721299215644,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-X7go8C6nh9R6WQ2vixuVlcN4lae474p9z8jKOZkoqo"},
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299334747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zdtgv_P-mNyz7_L-u5W6-xlG8o_cmAUbzfjMN66ny1I"},
{"content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721299604915,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299780133,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$r3iW01RWlXDGFunQycs1A_jRxWz9Wg486RWfE4I_PiI"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299790449,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$IlZBHeGdJP3D8_OqGHBWe5OwDta44_PEwKVTdT7xVwk"},
{"content":{"body":"So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (waitedForEnough()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (waitedForEnough()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721300751589,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Aa3lpIs7hHY2IS_R_IBb1AJwElcASB-u6kYcqwVUMW8"},
{"content":{"body":"i.e. the problem is not related to `AsyncContext` itself, but to the `globalThis.scheduler =` assignment","format":"org.matrix.custom.html","formatted_body":"i.e. the problem is not related to <code>AsyncContext</code> itself, but to the <code>globalThis.scheduler =</code> assignment","m.mentions":{},"msgtype":"m.text"},"ts":1721300773558,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XcVcKvNigIsHbxooRjiJ4geTVdITIwySXY7Nym9XEu4"},
{"content":{"body":" * So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":" * <p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"So this is equivalent to doing the following with `AsyncContext`?\n\n```js\nglobalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>So this is equivalent to doing the following with <code>AsyncContext</code>?</p>\n<pre><code class=\"language-js\">globalThis.scheduler = new class Scheduler {\n  #signals = new AsyncContext.Variable();\n\n  postTask(fn, { signal }) {\n    this.#signals.run(signal, fn);\n  }\n\n  async yield() {\n    const signal = this.#signals.get();\n    while (shouldWaitABitMore()) {\n      await yieldToTheEventLopo();\n      if (signal.aborted) throw new Error(\"Abort\");\n    }\n  }\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Aa3lpIs7hHY2IS_R_IBb1AJwElcASB-u6kYcqwVUMW8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721300803437,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KTyO-ZpwHhoXXpPQ-6mlvL7aXktqsKG3-d0Q-1NAIww"},
{"content":{"body":"that's right","m.mentions":{},"msgtype":"m.text"},"ts":1721301110907,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RxL9WSNH4ekIqv4lH46u-nNInDxVleAsqUeQVeGHIAM"},
{"content":{"body":"this seems like a pretty reasonable usage of async context, why is the word \"problem\" used/","m.mentions":{},"msgtype":"m.text"},"ts":1721325291485,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI"},
{"content":{"body":" * this seems like a pretty reasonable usage of async context, why is the word \"problem\" used?","m.mentions":{},"m.new_content":{"body":"this seems like a pretty reasonable usage of async context, why is the word \"problem\" used?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Gg96KLeOwoGTww9R--aPEtFd5PvJnm5W6LEI5RtHDsI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721325292735,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8xlOEIQojJXu-D6ENB9ilN4flnNjuKc5mYaxX1RkBZA"},
{"content":{"body":"Two different bits of code that only share a reference to ‘globalThis.scheduler` can communicate information to each other. (Even after scheduler itself is frozen)","format":"org.matrix.custom.html","formatted_body":"Two different bits of code that only share a reference to ‘globalThis.scheduler` can communicate information to each other. (Even after scheduler itself is frozen)","msgtype":"m.text"},"ts":1721325791348,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Yt3XbdPjvsevekhYUMu8U5mHjTSojoGdTdLLjtdZL5o"}
]