[
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern. I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721266939115,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CWJAjk4YunvKufxJTlKkHS0rNazJcq886Up4jAL3c8Q"},
{"content":{"body":"Hey, turns out scheduler.yield does not actually behave in the way we explained yesterday – I had a bad misunderstanding based on looking at that API only in a narrow context related to the AsyncContext web integration, and not looking at how it's actually used","m.mentions":{},"msgtype":"m.text"},"ts":1721299126920,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4GoZy-u2wawITKWm8gIPpjHm026nlGHwZmOKaviqzNw"},
{"content":{"body":"there is no `enterWith`, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","format":"org.matrix.custom.html","formatted_body":"there is no <code>enterWith</code>, and the API semantics are expressible with AsyncContext – but there's still a \"shared global state\" that can be observed","m.mentions":{},"msgtype":"m.text"},"ts":1721299215644,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-X7go8C6nh9R6WQ2vixuVlcN4lae474p9z8jKOZkoqo"},
{"content":{"body":"* some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","m.new_content":{"body":"some people are coming into the AsyncContext group and proposing other semantics which would permit more like this scheduler.yield pattern (EDIT: I had misunderstood scheduler.yield semantics, Andreu clarifies below). I've generally been pushing back on it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uQSw-V8SMOpU0BVIoGyhCiI9eMt-op9xpJczrnwFJjc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299334747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zdtgv_P-mNyz7_L-u5W6-xlG8o_cmAUbzfjMN66ny1I"},
{"content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n\t// this \"inherits\" the signal set by postTask, and if it\n\t// gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield(); \n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721299604915,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n\tawait scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299780133,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$r3iW01RWlXDGFunQycs1A_jRxWz9Wg486RWfE4I_PiI"},
{"content":{"body":" * ```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst controller = new AbortController();\nscheduler.postTask(async () => {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const controller = new AbortController();\nscheduler.postTask(async () =&gt; {\n  try {\n    // this \"inherits\" the signal set by postTask, and if it\n    // gets aborted before the task is scheduled, the promise rejects\n    await scheduler.yield();\n  } catch(err) {\n    console.log(\"Signal was aborted!\");\n  }\n}, {signal: controller.signal})\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nuSPngDeRewJux8iKson8_jMsa4V_50yosFmbrc152A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721299790449,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$IlZBHeGdJP3D8_OqGHBWe5OwDta44_PEwKVTdT7xVwk"}
]