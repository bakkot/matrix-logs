[
{"content":{"body":"we're moving progressively further in that direction with our internal tooling and it's been basically fine","msgtype":"m.text"},"ts":1633046401754,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8zKglF6aViMPumN32ViMF2EV_ZquoGAKcIMfEX1GHr8"},
{"content":{"body":"you need to do some basic conservative type analysis but at least in the code I've been working with that type analysis is feasible","msgtype":"m.text"},"ts":1633046434404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BcZF0d11cqZvTihtpNA3RpyQeyneo1Btb7rgXFRJ3Jg"},
{"content":{"body":"I absolutely don’t agree. Even with a full type system, the difficulty of banning `Nodelist.p.forEach` had lead to bugs for us.","format":"org.matrix.custom.html","formatted_body":"I absolutely don’t agree. Even with a full type system, the difficulty of banning <code>Nodelist.p.forEach</code> had lead to bugs for us.","msgtype":"m.text"},"ts":1633046490942,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8qNFby-0nVdErVG6yvObv2NZG0h0M4nNEL5sLmzQ6_U"},
{"content":{"body":"As soon as you cast to avoid a typecheck, we get ambiguities that let it slip back in","msgtype":"m.text"},"ts":1633046525437,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tzcq8WyAHJif6uf-vTyvZYBxiFnuFFXrJ13WBtIIfl8"},
{"content":{"body":"Even with a type system and full typing, it’s a difficult problem","msgtype":"m.text"},"ts":1633046566763,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1Fe73mWpVQxDxXdA-3ZZVfIvteYIL3BZ6bBf-7Wa7AY"},
{"content":{"body":"Requiring us to rewrite tooling infra on top of another’s type system seems bad.","msgtype":"m.text"},"ts":1633046614053,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nZXjPVnyRuMLw_KLm7t9huAAyi-nbCrRlsbB5OYyQ9E"},
{"content":{"body":"Devirtualized methods are simple, tiny, fast, and extremely easy to tree shake statically","msgtype":"m.text"},"ts":1633046666200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CI2jQMwfg6OFYwYPJ4KGHDAyz6arG5HJZH6ov7W5yww"},
{"content":{"body":" * Requiring us to rewrite tooling infra on top of another’s type system (even if it's as beloved as TS) seems bad.","m.new_content":{"body":"Requiring us to rewrite tooling infra on top of another’s type system (even if it's as beloved as TS) seems bad.","msgtype":"m.text"},"m.relates_to":{"event_id":"$nZXjPVnyRuMLw_KLm7t9huAAyi-nbCrRlsbB5OYyQ9E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633049018070,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$naaZzCNxlI9aAEDF2Vcf2GSGx79ZEEADxsye1Q8Qvwg"},
{"content":{"body":" * Devirtualized methods are simple, fast, and extremely easy to tree shake statically","m.new_content":{"body":"Devirtualized methods are simple, fast, and extremely easy to tree shake statically","msgtype":"m.text"},"m.relates_to":{"event_id":"$CI2jQMwfg6OFYwYPJ4KGHDAyz6arG5HJZH6ov7W5yww","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633049037702,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WGuIYcLNbGGyeC1zRTDUmp4ScNzTRnoL4jf8tzhWQ8g"},
{"content":{"body":"rkirsling: actually pun was not intended!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: actually pun was not intended!","msgtype":"m.text"},"ts":1633050551337,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s_MjXtqQs_yGNIAaSoVAEFJBvLxzLGPXkl5ktHuwjw0"},
{"content":{"body":"Concerning proposed Partial Function Application, should partially applying `import()`work?","format":"org.matrix.custom.html","formatted_body":"Concerning proposed Partial Function Application, should partially applying <code>import()</code>work?","msgtype":"m.text"},"ts":1633051595026,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Grno-ajgpLMDbBM3zE_yynSuWFdBW2K-obvR7EfwsQ4"},
{"content":{"body":"The import() function is just an ordinary function, yeah? Nothing special syntactically?","msgtype":"m.text"},"ts":1633063326211,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$x3GtInwLMqaQSd2tsFVVgBOpbmnkxW0gwPfK74KbybE"},
{"content":{"body":"Assuming that's true, then yeah","msgtype":"m.text"},"ts":1633063338554,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$b-CU_Mc4d7GXU6yFpHHgtGGFoZUUe07v4tnlekaWXeQ"},
{"content":{"body":"no, it is a special syntactic form, not a function","msgtype":"m.text"},"ts":1633064171629,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5ZzwaPqwmfC4vEjDhRa-cei2mqa0ZVSCJ2ss75vbWrM"},
{"content":{"body":"(it has to be, since it's module-relative - it's not something you could coherently pass around)","msgtype":"m.text"},"ts":1633064189805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iHUvRCcRZSMQDWrrqDd4bsjVj9ItDyCMUCYNe7-ZvEY"},
{"content":{"body":"jschoi: maybe the readme could say how it differs from the `::` bind proposal? Unless maybe it is already obvious and I am just being slow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: maybe the readme could say how it differs from the <code>::</code> bind proposal? Unless maybe it is already obvious and I am just being slow","msgtype":"m.text"},"ts":1633072340999,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$xcQtCaaHcns23NBsHQvrkRnLSmso8vGwWGyckJle7QM"},
{"content":{"body":" * jschoi: maybe the readme could say how it differs from the `::` bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: maybe the readme could say how it differs from the <code>::</code> bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?","m.new_content":{"body":"jschoi: maybe the readme could say how it differs from the `::` bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: maybe the readme could say how it differs from the <code>::</code> bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?","msgtype":"m.text"},"m.relates_to":{"event_id":"$xcQtCaaHcns23NBsHQvrkRnLSmso8vGwWGyckJle7QM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1633072636743,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PuDhqM20eNP1jpD3uL9mVFi8EQfS3efnzIg-c0OiWUo"},
{"content":{"body":"> <@aclaymore:matrix.org> jschoi: maybe the readme could say how it differs from the `::` bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?\n\nYeah, good idea. The new proposal is pretty much the same as the old bind proposal except it has no unary form. Michael has recommended to open a new repository because of the baggage with the old proposal in https://github.com/tc39/proposal-bind-operator/issues/56#issuecomment-698444297.\n\nThere’s also a Gist comparing the new proposal with the Stage-1 Extensions proposal, but it focuses on security rather than “call/bind are common”, so it’s out of date. I plan to edit it and add it to the repository later. https://gist.github.com/js-choi/eca7c67f88a2e82c3353fb11e8da46f7","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24xcQtCaaHcns23NBsHQvrkRnLSmso8vGwWGyckJle7QM\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: maybe the readme could say how it differs from the <code>::</code> bind proposal? Unless maybe it is already obvious and I am just being slow. Or is it just that there is nothing stopping there being similar proposals, lead by different groups of people? Healthy competition type of thing?</blockquote></mx-reply><p>Yeah, good idea. The new proposal is pretty much the same as the old bind proposal except it has no unary form. Michael has recommended to open a new repository because of the baggage with the old proposal in https://github.com/tc39/proposal-bind-operator/issues/56#issuecomment-698444297.</p>\n<p>There’s also a Gist comparing the new proposal with the Stage-1 Extensions proposal, but it focuses on security rather than “call/bind are common”, so it’s out of date. I plan to edit it and add it to the repository later. https://gist.github.com/js-choi/eca7c67f88a2e82c3353fb11e8da46f7</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$xcQtCaaHcns23NBsHQvrkRnLSmso8vGwWGyckJle7QM"}},"msgtype":"m.text"},"ts":1633087486158,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pVP9W0847xALohiBc_KMmT4p3-RCrYlNs3y-3KDXciQ"}
]