[
{"content":{"body":"tbh i'd say that if the catch is in a separate file from the finally, then the finally file probably shouldn't be assuming the promise is handled","msgtype":"m.text"},"ts":1686619003827,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nJ0A8LV1rCRiNVRRGHqGAldj4ofRhtiUcP7a-Abpgjg"},
{"content":{"body":" * tbh i'd say that if the catch is in a separate file from the finally, then the finally file probably shouldn't be assuming the promise is handled - iow, the author of one file shouldn't assume knowledge of the code in another one","m.new_content":{"body":"tbh i'd say that if the catch is in a separate file from the finally, then the finally file probably shouldn't be assuming the promise is handled - iow, the author of one file shouldn't assume knowledge of the code in another one","msgtype":"m.text"},"m.relates_to":{"event_id":"$nJ0A8LV1rCRiNVRRGHqGAldj4ofRhtiUcP7a-Abpgjg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686619021358,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5RQHIuBQvlOmChbKNzhFBnNatHK--UvrNSd23ZCUo54"},
{"content":{"body":"Hey! I have a random question: was the idea of `Array.prototype.clear()` ever struck down in TC39? I've had repeated experiences of `array.length = 0` not being trusted by developers, despite being the best way to do clear an array, so I was thinking if a `.clear()` proposal would have a future","format":"org.matrix.custom.html","formatted_body":"Hey! I have a random question: was the idea of <code>Array.prototype.clear()</code> ever struck down in TC39? I've had repeated experiences of <code>array.length = 0</code> not being trusted by developers, despite being the best way to do clear an array, so I was thinking if a <code>.clear()</code> proposal would have a future","msgtype":"m.text"},"ts":1686654333149,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$OTo-CCEAAl_Z8y-pNowKhS6ykFna5pMFI6G5TzFT0WY"},
{"content":{"body":"Just coming from Python, Java, C#, Rust, or almost any language, you expect `.clear()`","format":"org.matrix.custom.html","formatted_body":"Just coming from Python, Java, C#, Rust, or almost any language, you expect <code>.clear()</code>","msgtype":"m.text"},"ts":1686654393169,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$-TNS8MVDu34GxmAG8hA_VEAQOfnfa060xTBeyOGZNis"},
{"content":{"body":"Why would `.clear` be trusted more? Btw, you can also use `arr.splice(0, arr.length)`","format":"org.matrix.custom.html","formatted_body":"Why would <code>.clear</code> be trusted more? Btw, you can also use <code>arr.splice(0, arr.length)</code>","msgtype":"m.text"},"ts":1686654432328,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8yp_uY92dVZlmyehOyM_qrScBFlNY-jFcC-8dxglmW8"},
{"content":{"body":"It _seems_ sketchy, despite being valid, which is just an odd developer experience","format":"org.matrix.custom.html","formatted_body":"It <em>seems</em> sketchy, despite being valid, which is just an odd developer experience","msgtype":"m.text"},"ts":1686654513163,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$4LfCorJmMOGflxoLFMx-0QwUabB8t6n6JYT4-p0RFIo"},
{"content":{"body":"It felt much more like regular JS in 2014, but JS has improved so much in terms of the developer experience since ES6, that now it just feels out of place :D","msgtype":"m.text"},"ts":1686654666160,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$t2orXebaiX7kRnPukxty_eoVGXWDvF5AfFQZEWbPUOE"},
{"content":{"body":"For instance, of course `.indexOf() > -1` was and still is completely valid – nonetheless `.includes()` is _the_ clear way of doing the same since it was added ES2016","format":"org.matrix.custom.html","formatted_body":"For instance, of course <code>.indexOf() &gt; -1</code> was and still is completely valid – nonetheless <code>.includes()</code> is <em>the</em> clear way of doing the same since it was added ES2016","msgtype":"m.text"},"ts":1686654868522,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$L_twy2AXDUY_0Ca2mFKTQQN75PkAysY5-qQ0fyE3cV8"},
{"content":{"body":"Not to mention the edge-case where you have non-array-index extra properties in an array instance, which will not be cleared by `array.length = 0;`","format":"org.matrix.custom.html","formatted_body":"Not to mention the edge-case where you have non-array-index extra properties in an array instance, which will not be cleared by <code>array.length = 0;</code>","msgtype":"m.text"},"ts":1686654992960,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$uzghr7nTXsNnP6Eb0Msl7N5HKtFwskgF9C3KDmFHI0M"},
{"content":{"body":"would those be cleared by a `.clear()` method though?","format":"org.matrix.custom.html","formatted_body":"would those be cleared by a <code>.clear()</code> method though?","msgtype":"m.text"},"ts":1686655018001,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$fWkBY5-AYrNwTFb1_einATbubPoWzMfxK9UkSjYx69U"},
{"content":{"body":"Imo they should","msgtype":"m.text"},"ts":1686655031113,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$ZT0xq7m21amJ9xgli19uI8WcAPR2OHWm7QpOwJUlmP4"},
{"content":{"body":"I can think of arguments in either direction\\","format":"org.matrix.custom.html","formatted_body":"I can think of arguments in either direction\\","msgtype":"m.text"},"ts":1686655042114,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$Nt-V4DMSwkTu06Uuz65vtAJbb6VFo8siqGcOGXmNFJ4"},
{"content":{"body":" * I can think of arguments in either direction","m.new_content":{"body":"I can think of arguments in either direction","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nt-V4DMSwkTu06Uuz65vtAJbb6VFo8siqGcOGXmNFJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686655045595,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$YLI4k9oj7H3fVlZ1uXXd_nf1qhoWm4AhicC83HnYq54"},
{"content":{"body":"Well argument in favor of it is, if you *don't* want the behavior of clearing non-indexes, you can just resort back to the original length method","format":"org.matrix.custom.html","formatted_body":"Well argument in favor of it is, if you <em>don't</em> want the behavior of clearing non-indexes, you can just resort back to the original length method","msgtype":"m.text"},"ts":1686655082058,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$DJMYECvDrcYshJ0ju-xvs596Poqt1p6MpOm3C1U9Gn8"},
{"content":{"body":"Thinking about it further, we could also take this further and invert it","msgtype":"m.text"},"ts":1686655153440,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$AYzFY9U_nl1Ye99uqE6IpLX_oyO9_xQieavncywoDac"},
{"content":{"body":"`Map.prototype.clear` doesn't clear properties on the map object -- is array different because the indices are actual properties in the object?","format":"org.matrix.custom.html","formatted_body":"<code>Map.prototype.clear</code> doesn't clear properties on the map object -- is array different because the indices are actual properties in the object?","msgtype":"m.text"},"ts":1686655213528,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$x3y2KIgMqSbwWxBsrp228TZPKdTvL0vrIlzFhn-Zcuk"},
{"content":{"body":" * `Map.prototype.clear` doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?","format":"org.matrix.custom.html","formatted_body":" * <code>Map.prototype.clear</code> doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?","m.new_content":{"body":"`Map.prototype.clear` doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?","format":"org.matrix.custom.html","formatted_body":"<code>Map.prototype.clear</code> doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?","msgtype":"m.text"},"m.relates_to":{"event_id":"$x3y2KIgMqSbwWxBsrp228TZPKdTvL0vrIlzFhn-Zcuk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686655219918,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bclu4elDhDXh0m_GjqdzmwSOWVOXhaznNioA1v5uD8s"},
{"content":{"body":"While to Array there is the distinction between indexes and properties, from an Object perspective, both are just properties, so what if instead clear() was added as an Object method?","msgtype":"m.text"},"ts":1686655221208,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$xKTjJJfrPn5h0Q1vX7OIYq1vqaA47cMAEjXc8q7uhbM"},
{"content":{"body":"and it would just generically work on arrays","msgtype":"m.text"},"ts":1686655238826,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$f6q0UdavFxoykNlfGn-AW6hy3MxIFHMFx8qwx4TUpqQ"},
{"content":{"body":"> <@abotella:igalia.com> `Map.prototype.clear` doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?\n\nThat was my thinking at first there yes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$x3y2KIgMqSbwWxBsrp228TZPKdTvL0vrIlzFhn-Zcuk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br><code>Map.prototype.clear</code> doesn't remove properties on the map object -- is array different because the indices are actual properties in the object?</blockquote></mx-reply>That was my thinking at first there yes","m.relates_to":{"m.in_reply_to":{"event_id":"$x3y2KIgMqSbwWxBsrp228TZPKdTvL0vrIlzFhn-Zcuk"}},"msgtype":"m.text"},"ts":1686655275440,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$YmLaxheNdS5znY-qYrErkvv404m_MzqUhxFz5ZhvAzQ"},
{"content":{"body":"Hmm, non-index properties on arrays seems like a niche use case outside of well-defined bounds of behavior","msgtype":"m.text"},"ts":1686655578596,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$oeVHvNAE2rJoN3akPSYFGKRRg6hvlhAtMn_PeRR2A18"},
{"content":{"body":"I would stick to Map-like semantics of just emptying the collection","msgtype":"m.text"},"ts":1686655617359,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$LOIMme2rIpzKp6snojH32DZ_qQUhqND2QPsdYcQjxfo"},
{"content":{"body":"That's up for further discussion though I suppose","msgtype":"m.text"},"ts":1686655682733,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$v0O7BZvLWzanh2iz0EfZnB4TTCxkGSGN2BXTM-3eEi8"},
{"content":{"body":"Well, do y'all know if the method sense as a proposal, or is there a reason why the idea is dead in the water?","msgtype":"m.text"},"ts":1686655693664,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$3visFXftsOwjBP-Ssuz1PAsTkSeIJyR0i9a-0ZmmgHg"},
{"content":{"body":" * Well, do y'all know if the method makes sense as a proposal, or is there a reason why the idea is dead in the water?","m.new_content":{"body":"Well, do y'all know if the method makes sense as a proposal, or is there a reason why the idea is dead in the water?","msgtype":"m.text"},"m.relates_to":{"event_id":"$3visFXftsOwjBP-Ssuz1PAsTkSeIJyR0i9a-0ZmmgHg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686655698434,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$8WY-UNP5VOSKbduyqB1jmLcJWmdUKdhy2easMJUX70w"},
{"content":{"body":"My idea now is that, since arrays don't need a special method to access their internal values due to being just regular object properties, we should just make a generic *object* clear() method, which just works generically on arrays by extension","format":"org.matrix.custom.html","formatted_body":"My idea now is that, since arrays don't need a special method to access their internal values due to being just regular object properties, we should just make a generic <em>object</em> clear() method, which just works generically on arrays by extension","msgtype":"m.text"},"ts":1686655739960,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$bYIWjjEcWu5rbqYI53lmdlWtDOCgAT6ip6mhV_wL6Y4"},
{"content":{"body":"So it is less niche and actually implements a new ability (clearing objects without manual looping of deletions) that was not previously possible unlike just clearing arrays with `.length = 0`","format":"org.matrix.custom.html","formatted_body":"So it is less niche and actually implements a new ability (clearing objects without manual looping of deletions) that was not previously possible unlike just clearing arrays with <code>.length = 0</code>","msgtype":"m.text"},"ts":1686655809395,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$7zTUYqUsJ7AEu0p5G5A8AEpXBwVG7Fy86I9F4Tn4X6A"},
{"content":{"body":"Well, if it clears non-indexes, then why wouldn't it also delete `.length`? 😅 That's a tricky bit","format":"org.matrix.custom.html","formatted_body":"Well, if it clears non-indexes, then why wouldn't it also delete <code>.length</code>? 😅 That's a tricky bit","msgtype":"m.text"},"ts":1686655897017,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$RI_asP0eHr79RUhweETQvOv6nqNBJBSHPD-HNNNvu04"},
{"content":{"body":"It can be defined like so:\n`Object.prototype.clear()` = Delete all **own**, **enumerable** properties of `this`\n\n`.length` is non-enumerable, so it would be preserved.","format":"org.matrix.custom.html","formatted_body":"<p>It can be defined like so:<br><code>Object.prototype.clear()</code> = Delete all <strong>own</strong>, <strong>enumerable</strong> properties of <code>this</code></p>\n<p><code>.length</code> is non-enumerable, so it would be preserved.</p>\n","msgtype":"m.text"},"ts":1686655960621,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$QbzAphffoXjpY_xQ4vW514Esi05ePrblbxyOqNJCkkc"},
{"content":{"body":"I think the semantics would be clearer language-wide if `.clear()` always meant – clear collection. And `Object` is not necessarily the way of implementing a _collection_, given it's the building block for everything (e.g. if you want a mapping, well, `Map` is often the best option)","format":"org.matrix.custom.html","formatted_body":"I think the semantics would be clearer language-wide if <code>.clear()</code> always meant – clear collection. And <code>Object</code> is not necessarily the way of implementing a <em>collection</em>, given it's the building block for everything (e.g. if you want a mapping, well, <code>Map</code> is often the best option)","msgtype":"m.text"},"ts":1686655970136,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$pleKWo-ToMWqo5rWwa5w0x0UPbHMIsSHZBzEMs38Zwk"},
{"content":{"body":"`Map` is often too verbose and unnecessary for quick mapping needs","format":"org.matrix.custom.html","formatted_body":"<code>Map</code> is often too verbose and unnecessary for quick mapping needs","msgtype":"m.text"},"ts":1686656056995,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$hxg48ri4WxTNjaP7Uyzp0waPnuvK3HQBzp9aRKKRdKA"},
{"content":{"body":"In terms of data structures Map and Object are essentially the same, so saying Objects aren't collections is a bit illogical imo","msgtype":"m.text"},"ts":1686656142004,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$0xKVMksTEj4rOaXp9hJlIq8LFDFYtkzL9GgX9kQzGvM"},
{"content":{"body":"Map is just Object with fancier methods to manage it, no reason Object couldn't get some for itself ","msgtype":"m.text"},"ts":1686656181744,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$aONW1GZsUPufbOef3p3UpI7-_5BaATlAGww0dErqEJs"},
{"content":{"body":"Although I did just realize .clear() in Object prototype would indeed be prone to a lot of conflicts and confusion so it'd be probably best as a static method","msgtype":"m.text"},"ts":1686656220763,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$n8djXgfpRQKJNZ9HgIuty46PUAZTSqh24SdhbZw86bU"},
{"content":{"body":"`Object.clear(arr)`","format":"org.matrix.custom.html","formatted_body":"<code>Object.clear(arr)</code>","msgtype":"m.text"},"ts":1686656235436,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$Rioz5_UbeA3k2rEwrqT6SExLlug8lzJAGNYdRhe8PmQ"},
{"content":{"body":"you'd also have to figure out what to do for own vs inherited properties","msgtype":"m.text"},"ts":1686656251800,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kLbahe7sr_3HtRAJGAvo2mMuv0Hh0WicJ6Xo1Ng4hYU"},
{"content":{"body":"are you deleting non-enumerable properties as well?","msgtype":"m.text"},"ts":1686656265939,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XskP57Fu1QUrt6uPwRGLqqeffr7ZWpIrI_svIWOLK78"},
{"content":{"body":"> <@voidhedron:matrix.org> It can be defined like so:\n> `Object.prototype.clear()` = Delete all **own**, **enumerable** properties of `this`\n> \n> `.length` is non-enumerable, so it would be preserved.\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$QbzAphffoXjpY_xQ4vW514Esi05ePrblbxyOqNJCkkc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@voidhedron:matrix.org\">@voidhedron:matrix.org</a><br><p>It can be defined like so:<br /><code>Object.prototype.clear()</code> = Delete all <strong>own</strong>, <strong>enumerable</strong> properties of <code>this</code></p>\n<p><code>.length</code> is non-enumerable, so it would be preserved.</p>\n</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$QbzAphffoXjpY_xQ4vW514Esi05ePrblbxyOqNJCkkc"}},"msgtype":"m.text"},"ts":1686656273626,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$egc2wMb_B1oSfo7V3G9r5BvhsYJrRNokIHBa3tovkYM"},
{"content":{"body":"Just own enumerable props, anything else would break prototypes and other things","msgtype":"m.text"},"ts":1686656299419,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$NarrldC0UvJt_oMEkRma0310vrFQ-CbxSFzJSYGk1lM"},
{"content":{"body":"it'd be a shallow clear, which follows suit with pretty much every other iterative operation in JS with the notable recent exception of the long awaited `structuredClone`","format":"org.matrix.custom.html","formatted_body":"it'd be a shallow clear, which follows suit with pretty much every other iterative operation in JS with the notable recent exception of the long awaited <code>structuredClone</code>","msgtype":"m.text"},"ts":1686656363530,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$dC0kYL2RnBdisvp34-Pai9KLtAcn1amG_bgml463wwI"},
{"content":{"body":"so JS devs are already used to these kinds of operations being shallow I'd say","msgtype":"m.text"},"ts":1686656381482,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$dSCf0FDVFoS3G6hf5zjMczyRn2YypMR8gKpLWizIafM"},
{"content":{"body":" * It can be defined like so:\n`Object.clear(obj)` = Delete all **own**, **enumerable** properties of `obj`\n\n`.length` is non-enumerable, so it would be preserved.","format":"org.matrix.custom.html","formatted_body":" * <p>It can be defined like so:<br><code>Object.clear(obj)</code> = Delete all <strong>own</strong>, <strong>enumerable</strong> properties of <code>obj</code></p>\n<p><code>.length</code> is non-enumerable, so it would be preserved.</p>\n","m.new_content":{"body":"It can be defined like so:\n`Object.clear(obj)` = Delete all **own**, **enumerable** properties of `obj`\n\n`.length` is non-enumerable, so it would be preserved.","format":"org.matrix.custom.html","formatted_body":"<p>It can be defined like so:<br><code>Object.clear(obj)</code> = Delete all <strong>own</strong>, <strong>enumerable</strong> properties of <code>obj</code></p>\n<p><code>.length</code> is non-enumerable, so it would be preserved.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$QbzAphffoXjpY_xQ4vW514Esi05ePrblbxyOqNJCkkc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686656441198,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$qPUPtrP5-0E6mv_tUyn959Vry4MV8sRl1QdkMnFrZU4"},
{"content":{"body":"`arr.splice(0)`","format":"org.matrix.custom.html","formatted_body":"<code>arr.splice(0)</code>","msgtype":"m.text"},"ts":1686668060056,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$ttccpwn3rjZ-BEcNvOSQvgeZ8zBRWCU-fxnTIspKMQY"},
{"content":{"body":"so you're adding `arr.clear()` to accomplish `arr.splice(0)`.  does that seem worthwhile?","format":"org.matrix.custom.html","formatted_body":"so you're adding <code>arr.clear()</code> to accomplish <code>arr.splice(0)</code>.  does that seem worthwhile?","msgtype":"m.text"},"ts":1686668144617,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$46KnZ9cs-_dlDFHMk9P7l0UpdnfCu6QYGQVQFsCyROk"},
{"content":{"body":"I would say the answer is exactly the same as with adding `.includes()`","format":"org.matrix.custom.html","formatted_body":"I would say the answer is exactly the same as with adding <code>.includes()</code>","msgtype":"m.text"},"ts":1686670816157,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$Ew6QuI84tI2MD20zaGxrJsqLNpslqsyLlOrH_SxJvGE"},
{"content":{"body":"point taken.  there were some additional considerations for includes that don't apply here.  in any case, I'm not against convenience methods, though I'm not convinced in this particular case that splice or length leave much to be desired","msgtype":"m.text"},"ts":1686673634561,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$5T-nwjtWem4pd4Ib53yZh8qAYjgPTVr7MQ42Oq_CL4U"},
{"content":{"body":"it's worth noting that additional methods on `Array.prototype` will face resistance in committee","format":"org.matrix.custom.html","formatted_body":"it's worth noting that additional methods on <code>Array.prototype</code> will face resistance in committee","msgtype":"m.text"},"ts":1686673669801,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$RrtC3CP5AonLKazISsk-H0rLAPkUAVCJfhDhozPSq9s"},
{"content":{"body":"(I haven't read the full thread, lots of messages since I last checked)\nA few delegates said in the last meeting they're reluctant to add new methods to `Array.prototype` due to web compatibility issues we always have","format":"org.matrix.custom.html","formatted_body":"(I haven't read the full thread, lots of messages since I last checked)<br>A few delegates said in the last meeting they're reluctant to add new methods to <code>Array.prototype</code> due to web compatibility issues we always have","msgtype":"m.text"},"ts":1686673679161,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WLbYMoxJxRUBtjBy70W2qte1pOPOrC0Vul6FVmdOyt4"},
{"content":{"body":"`Array.prototype.group` was changed in the last meeting to use static methods on Map and Object instead","format":"org.matrix.custom.html","formatted_body":"<code>Array.prototype.group</code> was changed in the last meeting to use static methods on Map and Object instead","msgtype":"m.text"},"ts":1686673740131,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$5QUz74uetcb8eTa6VyA6TizvS3gOOGswiAcx3bFlKK4"},
{"content":{"body":"https://github.com/tc39/notes/blob/main/meetings/2023-05/may-16.md#arrayprototypegroup-rename-for-web-compatibility","msgtype":"m.text"},"ts":1686673788959,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QLzpdHTQk7ziXftfMJSbwarSmwPpH50QWMMLvTLFnRk"},
{"content":{"body":"ref 1: \nhttps://github.com/tc39/notes/blob/d2a0097ec28f18d221118577086e20f78c33b504/meetings/2023-05/may-16.md#speakers-summary-of-key-points-4\n\nref 2: \nhttps://github.com/tc39/notes/blob/d2a0097ec28f18d221118577086e20f78c33b504/meetings/2023-05/may-18.md#speakers-summary-of-key-points-3","msgtype":"m.text"},"ts":1686673793105,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_l3GGE-gdE-ZYS3TQS-1P0VIrag7uGDm_SaZPTJ2WNo"},
{"content":{"body":"generally speaking, I think \"some developers feel that the syntax for doing a thing is sketchy\" is not a good enough reason to add a new stdlib method","msgtype":"m.text"},"ts":1686674240793,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z3oowgOsRB28xd282SKWpnPjf3wJHUFtvfIZJoPSFvs"},
{"content":{"body":"`.length = 0` is not obscure or difficult to understand for readers, so I don't see much reason to add a `.clear` to arrays","format":"org.matrix.custom.html","formatted_body":"<code>.length = 0</code> is not obscure or difficult to understand for readers, so I don't see much reason to add a <code>.clear</code> to arrays","msgtype":"m.text"},"ts":1686674307252,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FRDU3JvOo4ibJyPjOQ-Fd8KxCQHEavIVJR6hzv8b68Q"},
{"content":{"body":"matlokam: i wouldn't want to add any new mutating methods to Array, personally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@twixes3d:matrix.org\">matlokam</a>: i wouldn't want to add any new mutating methods to Array, personally.","msgtype":"m.text"},"ts":1686675181065,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ijqbpiuVkMx928IsFV-zPqpZuAQsvsfDjOyF_tZFEic"},
{"content":{"body":" * matlokam: i wouldn't want to add any new mutating methods to Array, personally. if you want an empty array, `[]` is right there :-)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@twixes3d:matrix.org\">matlokam</a>: i wouldn't want to add any new mutating methods to Array, personally. if you want an empty array, <code>[]</code> is right there :-)","m.new_content":{"body":"matlokam: i wouldn't want to add any new mutating methods to Array, personally. if you want an empty array, `[]` is right there :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@twixes3d:matrix.org\">matlokam</a>: i wouldn't want to add any new mutating methods to Array, personally. if you want an empty array, <code>[]</code> is right there :-)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ijqbpiuVkMx928IsFV-zPqpZuAQsvsfDjOyF_tZFEic","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686675211915,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RDdp0vwko7Si0sUlei4QJ3VoIx4ULIAGiIqvZlMzkKA"},
{"content":{"body":"I think assigning to `length` is at least somewhat obscure. For most collections `length` doesn't have a setter. Having parity with other collections makes sense to me.","format":"org.matrix.custom.html","formatted_body":"I think assigning to <code>length</code> is at least somewhat obscure. For most collections <code>length</code> doesn't have a setter. Having parity with other collections makes sense to me.","msgtype":"m.text"},"ts":1686675930084,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$jS4vmepPHx9TNMLHmKZVTDxF25ZozpVPpjltQZcNW7Y"},
{"content":{"body":"for most collections you can't use syntax to read from it either","msgtype":"m.text"},"ts":1686676067620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ozm5h-iEr4Zr6SC2apEwU9gbOXXc79d2dBga_lpvk6Y"},
{"content":{"body":"generally not prohibitive, but this won't work with `const`, so not always an option","format":"org.matrix.custom.html","formatted_body":"generally not prohibitive, but this won't work with <code>const</code>, so not always an option","m.relates_to":{"event_id":"$ijqbpiuVkMx928IsFV-zPqpZuAQsvsfDjOyF_tZFEic","is_falling_back":true,"m.in_reply_to":{"event_id":"$ijqbpiuVkMx928IsFV-zPqpZuAQsvsfDjOyF_tZFEic"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1686676839479,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$XvV3sKvwZcVZTPbzH8_HXvVtVXD-xHGyNpwJElZi-xM"},
{"content":{"body":"Right, there was a conscious decision to not carry that forward. I don't think that disqualifies adopting more modern APIs for the older collection type though.","msgtype":"m.text"},"ts":1686678819013,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$udgTjrgKAm2JFi8UAI4YlcO16qcJXKrwqMob3O-JH3M"},
{"content":{"body":"I generally see APIs as being _worse_ than syntax, though","format":"org.matrix.custom.html","formatted_body":"I generally see APIs as being <em>worse</em> than syntax, though","msgtype":"m.text"},"ts":1686679684782,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HunQMGQZ7rHiHt41QkU2bmLxAxOuKZmWnhNovfysUVc"},
{"content":{"body":"Like I'd prefer people not write `array.at(5)` even though that's more consistent with what you'd do with a Map","format":"org.matrix.custom.html","formatted_body":"Like I'd prefer people not write <code>array.at(5)</code> even though that's more consistent with what you'd do with a Map","msgtype":"m.text"},"ts":1686679713309,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OBw6bEhD8f3ULt_c1ILp_RcvVCPt4lLk6zZfugJs06g"},
{"content":{"body":"similarly I'd prefer people not write `array.clear()` even though that's more consistent with what you'd do with a Map","format":"org.matrix.custom.html","formatted_body":"similarly I'd prefer people not write <code>array.clear()</code> even though that's more consistent with what you'd do with a Map","msgtype":"m.text"},"ts":1686679725696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pj-4BX6UB4hTgHUzNZd3F7TsGeoOlrs6s0YyT6cb3ng"},
{"content":{"body":"I don't think it's really a matter of what's \"more modern\". Arrays are just a more foundational type and so have somewhat different affordances","msgtype":"m.text"},"ts":1686679763554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VJ9e5J7cQrPUXD8gDUW9VceW6DUEY657sI5dZhD3W8c"},
{"content":{"body":"I agree that writing to `length` is somewhat obscure and so it wouldn't be bad to have a duplicate API around it. But also I don't understand why this method would be important/useful enough to be worth the high cost of adding Array methods.","format":"org.matrix.custom.html","formatted_body":"I agree that writing to <code>length</code> is somewhat obscure and so it wouldn't be bad to have a duplicate API around it. But also I don't understand why this method would be important/useful enough to be worth the high cost of adding Array methods.","msgtype":"m.text"},"ts":1686692356735,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ByaBr7V6vsLHT0IMhKW9CFRII_3jhNcjjZDN-fbIOZQ"},
{"content":{"body":"Another reason I think making it a generic Object static method would be more worthwhile and easier to get going","msgtype":"m.text"},"ts":1686692908733,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$1OfK1VNeShQzI7mKuyi5gv1CmTAKKl4YYUGO4LZ_9W4"},
{"content":{"body":"It wouldn't go anywhere near Array but still be able to serve the task desired at hand, while also having other possible use-cases with non-arrays","msgtype":"m.text"},"ts":1686692958041,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$F4rcu8nQMKVjWgAXZUHhP11Fztrbeudlk78B4VcCe08"},
{"content":{"body":"idk, I think it's generally not a good idea to encourage folks to treat Arrays like general objects API-wise (I think this doesn't match most JS developers' intuition)","msgtype":"m.text"},"ts":1686693013267,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$82Rx3PcMM6NpuyFfEyT5m6jYLhcjjhgiFscDeQ4ycg4"},
{"content":{"body":"I also don't want to encourage people to clear properties from objects","msgtype":"m.text"},"ts":1686693199664,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z5nZt5SiW_TbNm2UzXJyafvCRplcehNDfVGceFtaeyQ"},
{"content":{"body":"there are cases where that is the right thing but they are few and far between","msgtype":"m.text"},"ts":1686693208560,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vc1R12UrW_Actpnl5Y0vZzY2wp4vNpwBaaPhSVedL0k"},
{"content":{"body":"> <@littledan:matrix.org> idk, I think it's generally not a good idea to encourage folks to treat Arrays like general objects API-wise (I think this doesn't match most JS developers' intuition)\n\nThat's a fair point, and I kind of agree I suppose, but on the other hand there is plenty of existing stuff in the language that does that already, so i dunno it would just be 1 more to the pile","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$82Rx3PcMM6NpuyFfEyT5m6jYLhcjjhgiFscDeQ4ycg4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>idk, I think it&#39;s generally not a good idea to encourage folks to treat Arrays like general objects API-wise (I think this doesn&#39;t match most JS developers&#39; intuition)</blockquote></mx-reply>That's a fair point, and I kind of agree I suppose, but on the other hand there is plenty of existing stuff in the language that does that already, so i dunno it would just be 1 more to the pile","m.relates_to":{"m.in_reply_to":{"event_id":"$82Rx3PcMM6NpuyFfEyT5m6jYLhcjjhgiFscDeQ4ycg4"}},"msgtype":"m.text"},"ts":1686693213040,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$ycmgIsr-4l4e-0JvXRG7-YAlx7AHV1ztz42x3Tq3cjY"},
{"content":{"body":"> <@bakkot:matrix.org> I also don't want to encourage people to clear properties from objects\n\nWell I suppose it could be `Array.clear` (static method) instead then, with a strict isArray check on the argument, I do would like that more as well personally, it just seems that it'd be harder to get it accepted due to being connected to `Array`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Z5nZt5SiW_TbNm2UzXJyafvCRplcehNDfVGceFtaeyQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I also don&#39;t want to encourage people to clear properties from objects</blockquote></mx-reply>Well I suppose it could be <code>Array.clear</code> (static method) instead then, with a strict isArray check on the argument, I do would like that more as well personally, it just seems that it'd be harder to get it accepted due to being connected to <code>Array</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Z5nZt5SiW_TbNm2UzXJyafvCRplcehNDfVGceFtaeyQ"}},"msgtype":"m.text"},"ts":1686693459239,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$u_OnSws_eohAJnTIXKnf56VGBBUNFg2AG8NOVcM10lY"},
{"content":{"body":"Yeah and then my answer is, that is not worth having, vs just writing `arr.length = 0`","format":"org.matrix.custom.html","formatted_body":"Yeah and then my answer is, that is not worth having, vs just writing <code>arr.length = 0</code>","msgtype":"m.text"},"ts":1686693588104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UNeSfnlhGV5kJsc9N9QAObQNrAvLGhsKtCL0W3PIHaw"},
{"content":{"body":"Yeah I think, if we decide this kind of manipulation is important to support more intuitively, `Array.clear` is a good place to put it.","format":"org.matrix.custom.html","formatted_body":"Yeah I think, if we decide this kind of manipulation is important to support more intuitively, <code>Array.clear</code> is a good place to put it.","msgtype":"m.text"},"ts":1686693652999,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$78PNc1-QBWElF0l0rJLbQe2MrNfJQtbgcHIs0DI1Kr0"},
{"content":{"body":"is the proposed semantics of clearing actually `delete`","format":"org.matrix.custom.html","formatted_body":"is the proposed semantics of clearing actually <code>delete</code>","msgtype":"m.text"},"ts":1686695747868,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1MlsHBgI5AkOGXokfPuzbuctLh5bw9Ygz2SZK3nVg7E"},
{"content":{"body":"if so please no","msgtype":"m.text"},"ts":1686695749245,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4ule30-Is2RiwPG0sRNdl6aRtNm9lKIq_9Hxr6WqR9M"},
{"content":{"body":"Really interesting points around here","msgtype":"m.text"},"ts":1686697782290,"senderName":"matlokam","senderId":"@twixes3d:matrix.org","id":"$UvC4yCGrh8mu4wRXItw8tESmwjyngilNVFxAHjQYLqY"}
]