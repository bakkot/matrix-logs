[
{"content":{"body":"Sorry, I don't want to test this if someone already has the knowledge off-hand: if you array-destructure an actual array, does it invoke the iterator protocol or just yoink from the numbered properties directly. and does this apply to array-likes as well?","m.mentions":{},"msgtype":"m.text"},"ts":1696284979340,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RPGVcrxc81pYtHavbaQtntLnXjQ1Di6jVFv4_DlGHAo"},
{"content":{"body":"> <@tabatkins:matrix.org> Sorry, I don't want to test this if someone already has the knowledge off-hand: if you array-destructure an actual array, does it invoke the iterator protocol or just yoink from the numbered properties directly. and does this apply to array-likes as well?\n\nyes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including `Array.prototype`, is mutable by ECMAScript code)\nDestructuringAssignmentEvaluation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RPGVcrxc81pYtHavbaQtntLnXjQ1Di6jVFv4_DlGHAo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Sorry, I don&#39;t want to test this if someone already has the knowledge off-hand: if you array-destructure an actual array, does it invoke the iterator protocol or just yoink from the numbered properties directly. and does this apply to array-likes as well?</blockquote></mx-reply>yes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including <code>Array.prototype</code>, is mutable by ECMAScript code)<br>DestructuringAssignmentEvaluation","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RPGVcrxc81pYtHavbaQtntLnXjQ1Di6jVFv4_DlGHAo"}},"msgtype":"m.text"},"ts":1696285549473,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$CGHkRTJnTQ7LN9DienTN0xTrHvqkJz4gCcBbYgdbBXw"},
{"content":{"body":"> <@tabatkins:matrix.org> Sorry, I don't want to test this if someone already has the knowledge off-hand: if you array-destructure an actual array, does it invoke the iterator protocol or just yoink from the numbered properties directly. and does this apply to array-likes as well?\n\n * yes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including `Array.prototype`, is mutable by ECMAScript code)\n[DestructuringAssignmentEvaluation](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-destructuringassignmentevaluation)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$RPGVcrxc81pYtHavbaQtntLnXjQ1Di6jVFv4_DlGHAo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Sorry, I don't want to test this if someone already has the knowledge off-hand: if you array-destructure an actual array, does it invoke the iterator protocol or just yoink from the numbered properties directly. and does this apply to array-likes as well?</blockquote></mx-reply> * yes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including <code>Array.prototype</code>, is mutable by ECMAScript code)<br><a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a>","m.mentions":{},"m.new_content":{"body":"yes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including `Array.prototype`, is mutable by ECMAScript code)\n[DestructuringAssignmentEvaluation](https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-destructuringassignmentevaluation)","format":"org.matrix.custom.html","formatted_body":"yes to both; array-destructuring is defined to depend upon the iterator protocol (which for most built-ins, particularly including <code>Array.prototype</code>, is mutable by ECMAScript code)<br><a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-expressions.html#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a>","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CGHkRTJnTQ7LN9DienTN0xTrHvqkJz4gCcBbYgdbBXw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696285561728,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$v19jANo7jzyBpwrA9JKpK6bYW6AAyWzkiEb_H-qPda4"},
{"content":{"body":"k, cool","m.mentions":{},"msgtype":"m.text"},"ts":1696285625443,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jFWz_sXajZFTOmsMewntU0ccLrs7pDNiaOi2XKJYI_4"},
{"content":{"body":"that means i don't need to worry about making this more efficient in another proposal ^_^","m.mentions":{},"msgtype":"m.text"},"ts":1696285650553,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7TTfn28N-BotuMiM8gtesOafitRj3L_H_siZOCmJACg"},
{"content":{"body":"for this reason you will sometimes see people doing `let {0: x, 1: y} = array`, because it skips the iterator protocol","format":"org.matrix.custom.html","formatted_body":"for this reason you will sometimes see people doing <code>let {0: x, 1: y} = array</code>, because it skips the iterator protocol","m.mentions":{},"msgtype":"m.text"},"ts":1696287647833,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mHfimar9-OPv8rj-INoNtlwcMNdiPOXPWBh_YFX2Dts"},
{"content":{"body":"aw crud, it looks like every implementation diverges from the spec for `const [] = …`\n```\n$ eshost -sx '\n  \"use strict\"; \n  const arr = [\"a\", \"b\", \"c\"];\n  Object.defineProperty(Array.prototype, Symbol.iterator, {\n    get() {\n      print(\"get Symbol.iterator\", this);\n      return function*() { \n        print(\"@@iterator\", this, ...arguments);\n        for (let i = 0; i < this.length; i++) { \n          const v = this[i];\n          print(\"yield\", v); \n          yield v; \n        } return; \n      }; \n    }, \n  }); \n  print(\"\\n# read all\"); const [...all] = arr; \n  print(\"\\n# read one\"); const [first] = arr; \n  print(\"\\n# read none\"); const [] = arr; \n  print(\"\\n\" + JSON.stringify({ first, all }));\n'\n#### ChakraCore, engine262, GraalJS, Hermes, JavaScriptCore, Moddable XS, QuickJS, SpiderMonkey, V8\n# read all\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nyield a\nyield b\nyield c\n\n# read one\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nyield a\n\n# read none\nget Symbol.iterator a,b,c\n\n{\"first\":\"a\",\"all\":[\"a\",\"b\",\"c\"]}\n```\n\n(_all three should invoke `@@iterator` and get `next` in [GetIteratorFromMethod](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiteratorfrommethod) via [GetIterator](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiterator)_)","format":"org.matrix.custom.html","formatted_body":"<p>aw crud, it looks like every implementation diverges from the spec for <code>const [] = …</code></p>\n<pre><code>$ eshost -sx '\n  \"use strict\"; \n  const arr = [\"a\", \"b\", \"c\"];\n  Object.defineProperty(Array.prototype, Symbol.iterator, {\n    get() {\n      print(\"get Symbol.iterator\", this);\n      return function*() { \n        print(\"@@iterator\", this, ...arguments);\n        for (let i = 0; i &lt; this.length; i++) { \n          const v = this[i];\n          print(\"yield\", v); \n          yield v; \n        } return; \n      }; \n    }, \n  }); \n  print(\"\\n# read all\"); const [...all] = arr; \n  print(\"\\n# read one\"); const [first] = arr; \n  print(\"\\n# read none\"); const [] = arr; \n  print(\"\\n\" + JSON.stringify({ first, all }));\n'\n#### ChakraCore, engine262, GraalJS, Hermes, JavaScriptCore, Moddable XS, QuickJS, SpiderMonkey, V8\n# read all\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nyield a\nyield b\nyield c\n\n# read one\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nyield a\n\n# read none\nget Symbol.iterator a,b,c\n\n{\"first\":\"a\",\"all\":[\"a\",\"b\",\"c\"]}\n</code></pre>\n<p>(<em>all three should invoke <code>@@iterator</code> and get <code>next</code> in <a href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiteratorfrommethod\">GetIteratorFromMethod</a> via <a href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiterator\">GetIterator</a></em>)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696288433558,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$9Czogn7gjzPmvGjmezi9bGe_j1BR_HV3symtEIkAGVQ"},
{"content":{"body":"I suspect that's due to implementing the spec as it was prior to https://github.com/tc39/ecma262/pull/1021, and then only doing the update necessary to make https://github.com/tc39/test262/pull/1248 pass","m.mentions":{},"msgtype":"m.text"},"ts":1696289651847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6bhYNjZwFQZ_y714S4gieuO5ky5ic4Ufl7Gnnv8gsXc"},
{"content":{"body":"wait, no","m.mentions":{},"msgtype":"m.text"},"ts":1696290047959,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C3XiF2nSUzs3vz9S3n4RZIG2Lg-QnFu9CPv__ZxX0s8"},
{"content":{"body":"Richard Gibson your test is just wrong","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> your test is just wrong","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1696290053463,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9IbdD205vNMW0TpoceGjKUNbTEqCCyWpAyg4qk0mGqs"},
{"content":{"body":"generators don't do anything when invoked","m.mentions":{},"msgtype":"m.text"},"ts":1696290056733,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pxWIYCnsDQCTDGPtUwqbqwAr16ZQ26xJbeodE0kmfQI"},
{"content":{"body":"(except evaluate parameter defaults IIRC)","m.mentions":{},"msgtype":"m.text"},"ts":1696290075727,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lWK0-7wYMH4CqA4G6q3IoxVAnRFMJGGMM3O433o5ayk"},
{"content":{"body":"they only do something when you first call `next`","format":"org.matrix.custom.html","formatted_body":"they only do something when you first call <code>next</code>","m.mentions":{},"msgtype":"m.text"},"ts":1696290078019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpdWP8jUD-RxUUW3PvstGJXw6UiQ5nFSsIeq-G_IqxA"},
{"content":{"body":"```\n\"use strict\";\nconst arr = [\"a\", \"b\", \"c\"];\nObject.defineProperty(Array.prototype, Symbol.iterator, {\n  get() {\n    print(\"get Symbol.iterator\", this);\n    let thiz = this;\n    return function() {\n      print(\"@@iterator\", this, ...arguments);\n      let i = 0;\n      return {\n        get next() {\n          print(\"get next\");\n          return () => {\n            return i >= thiz.length ? { done: true } : { done: false, value: thiz[i++] };\n          };\n        },\n      };\n    };\n  },\n});\nprint(\"\\n# read all\"); const [...all] = arr;\nprint(\"\\n# read one\"); const [first] = arr;\nprint(\"\\n# read none\"); const [] = arr;\nprint(\"\\n\" + JSON.stringify({ first, all }));\n```\ngives\n```\n# read none\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nget next\n```\nin all engines, just as it should","format":"org.matrix.custom.html","formatted_body":"<pre><code>\"use strict\";\nconst arr = [\"a\", \"b\", \"c\"];\nObject.defineProperty(Array.prototype, Symbol.iterator, {\n  get() {\n    print(\"get Symbol.iterator\", this);\n    let thiz = this;\n    return function() {\n      print(\"@@iterator\", this, ...arguments);\n      let i = 0;\n      return {\n        get next() {\n          print(\"get next\");\n          return () =&gt; {\n            return i &gt;= thiz.length ? { done: true } : { done: false, value: thiz[i++] };\n          };\n        },\n      };\n    };\n  },\n});\nprint(\"\\n# read all\"); const [...all] = arr;\nprint(\"\\n# read one\"); const [first] = arr;\nprint(\"\\n# read none\"); const [] = arr;\nprint(\"\\n\" + JSON.stringify({ first, all }));\n</code></pre>\n<p>gives</p>\n<pre><code># read none\nget Symbol.iterator a,b,c\n@@iterator a,b,c\nget next\n</code></pre>\n<p>in all engines, just as it should</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696290116160,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CRE-Ae_lS4CJ9jM-XtPX5KUENPJfm-0I5B22PWF6qMU"},
{"content":{"body":"phew","m.mentions":{},"msgtype":"m.text"},"ts":1696290286653,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$lAlJdQZmnql1LxIRiHo6OkQPEoDOM0X6mZekUBWrj-A"},
{"content":{"body":"well, not _all_ engines: https://github.com/Moddable-OpenSource/moddable/issues/1223","format":"org.matrix.custom.html","formatted_body":"well, not <em>all</em> engines: https://github.com/Moddable-OpenSource/moddable/issues/1223","m.mentions":{},"msgtype":"m.text"},"ts":1696290769360,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$oJv4SyURhY3TDBWPi_r87QIclHgDZnhzPiqlycJ04AQ"},
{"content":{"body":"ah yeah I don't have xs installed I guess","m.mentions":{},"msgtype":"m.text"},"ts":1696291080610,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$A_uFeLtOurUtotb9L8ZaQ56K_MMRiuj-F5-9rgMZbDY"}
]