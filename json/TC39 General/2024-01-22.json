[
{"content":{"body":"yeah I guess I'm probably over-indexing on the operator syntax of void in my skepticism of void. \"lost\" is a good characterization. But still, _ has recognition from other languages.","m.mentions":{},"msgtype":"m.text"},"ts":1705931783833,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9cZTP9uUpZKZvZN991n31dLvqKfNi3ZFXgANIjo7658"},
{"content":{"body":"> <@littledan:matrix.org> yeah I guess I'm probably over-indexing on the operator syntax of void in my skepticism of void. \"lost\" is a good characterization. But still, _ has recognition from other languages.\n\nI'm not sure if the recognition from other languages outweighs the established use(s) of `_` in the JS ecosystem. I assume most JS devs would associate it with \"bag of utility functions\", not necessarily with \"unused\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$9cZTP9uUpZKZvZN991n31dLvqKfNi3ZFXgANIjo7658?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yeah I guess I&#39;m probably over-indexing on the operator syntax of void in my skepticism of void. &quot;lost&quot; is a good characterization. But still, _ has recognition from other languages.</blockquote></mx-reply>I'm not sure if the recognition from other languages outweighs the established use(s) of <code>_</code> in the JS ecosystem. I assume most JS devs would associate it with \"bag of utility functions\", not necessarily with \"unused\".","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9cZTP9uUpZKZvZN991n31dLvqKfNi3ZFXgANIjo7658"}},"msgtype":"m.text"},"ts":1705933768507,"senderName":"Jan Olaf Martin","senderId":"@jkrems:matrix.org","id":"$rTFmts-5ku8B6xyKnOEQ7keSvEVi0WLkwtJOuzPgptQ"},
{"content":{"body":"Yeah, that's fair. At least the _ is *locally* unambiguous/compatible","format":"org.matrix.custom.html","formatted_body":"Yeah, that's fair. At least the _ is <em>locally</em> unambiguous/compatible","m.mentions":{},"msgtype":"m.text"},"ts":1705935989898,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JlC03YvPiGy-fhACLFPr2z845St9Rb4qzZJtx6pvLWY"},
{"content":{"body":"really, `void` for this purpose is even somehow more apt than `void` for C, isn't it","format":"org.matrix.custom.html","formatted_body":"really, <code>void</code> for this purpose is even somehow more apt than <code>void</code> for C, isn't it","m.mentions":{},"msgtype":"m.text"},"ts":1705936010440,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jELA38AfAdElBNyAo_0oivYpUELO3YxIwlnpzFeR1lA"},
{"content":{"body":"Use of _ I’ve encountered is not as a black hole (void) but as a readable reference to the last thing bound. ","format":"org.matrix.custom.html","formatted_body":"Use of _ I’ve encountered is not as a black hole (void) but as a readable reference to the last thing bound.","msgtype":"m.text"},"ts":1705936253307,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Uv8V_pmitggUNMMd5GJJrdMZRDOpbTckblLSi4qvAFE"},
{"content":{"body":"oh yeah I guess overloading both of those in the same thing is weird","m.mentions":{},"msgtype":"m.text"},"ts":1705936299356,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ag9zaQykTVJOUDbd8AAAVUEPMF9iZIDNIW_QdyFp1lk"},
{"content":{"body":"I feel like _ is off the table since it's already a valid identifier ","msgtype":"m.text"},"ts":1705939797843,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IFDknQCc7gZ1HEAXNgWujjAehOf-T3r0CYGQMve7nUo"},
{"content":{"body":"> <@devsnek:matrix.org> I feel like _ is off the table since it's already a valid identifier\n\nthe idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error when bound in an invalid duplicate way (eg strict mode parameters)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$IFDknQCc7gZ1HEAXNgWujjAehOf-T3r0CYGQMve7nUo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>I feel like _ is off the table since it&#39;s already a valid identifier </blockquote></mx-reply>the idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error when bound in an invalid duplicate way (eg strict mode parameters)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IFDknQCc7gZ1HEAXNgWujjAehOf-T3r0CYGQMve7nUo"}},"msgtype":"m.text"},"ts":1705939944394,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v3sgq6k_hSPLKQMz0XJwfHsftFf35Yg-eNSfYNxS_7M"},
{"content":{"body":"> <@devsnek:matrix.org> I feel like _ is off the table since it's already a valid identifier\n\n * the idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error (*for usage, not definition*) when bound in an invalid duplicate way (eg strict mode parameters)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$IFDknQCc7gZ1HEAXNgWujjAehOf-T3r0CYGQMve7nUo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>I feel like _ is off the table since it's already a valid identifier </blockquote></mx-reply> * the idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error (<em>for usage, not definition</em>) when bound in an invalid duplicate way (eg strict mode parameters)","m.mentions":{},"m.new_content":{"body":"the idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error (*for usage, not definition*) when bound in an invalid duplicate way (eg strict mode parameters)","format":"org.matrix.custom.html","formatted_body":"the idea is to stay with its current semantics wherever valid, and just introduce a TDZ or syntax error (<em>for usage, not definition</em>) when bound in an invalid duplicate way (eg strict mode parameters)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$v3sgq6k_hSPLKQMz0XJwfHsftFf35Yg-eNSfYNxS_7M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705939954829,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$67C_drxa9jkcBEY4xOsVtVRvN5wnbfEzPNmR_jF_GCM"},
{"content":{"body":"i don’t think moving towards scala’s “21 different meanings for _” would be an improvement","msgtype":"m.text"},"ts":1705944764671,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BnodP4kZHvjywwI-CoR-tdVigfR3ZH1QCG7yh6A1bOI"},
{"content":{"body":"OK I'm convinced. So who's bringing the void proposal to committee?","m.mentions":{},"msgtype":"m.text"},"ts":1705945644660,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qTuyciV0XvtFub0bEOvkL3wlFAHKm0zRTIc5i6AkxPQ"},
{"content":{"body":"We can do it separately from pattern matching, right? it'd just compose well","m.mentions":{},"msgtype":"m.text"},"ts":1705945659880,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$16P_16h_RWk1d52eHyMIHeI1kJI_rKEFxG32xrjfpW4"},
{"content":{"body":"> So who's bringing the void proposal to committee\n\nper https://github.com/tc39/agendas/blob/main/2024/02.md, rbuckton ","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>So who's bringing the void proposal to committee</p>\n</blockquote>\n<p>per https://github.com/tc39/agendas/blob/main/2024/02.md, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a></p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1705945702973,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y1ZaVIUYmx1S8vW3NUynVpBM8cV-fJAxUjclXS4rtwI"},
{"content":{"body":"I also like the \"ignore a parameter to a callback\" use case","m.mentions":{},"msgtype":"m.text"},"ts":1705945838038,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2SPg46yoewgFkaWRN2D07FFik7Un3oSMqRPZX7zrjUs"},
{"content":{"body":"I would prefer `_`, but picked `void` due to concern's like ljharb's. At the very least, `void` in this sense has a similar semantic meaning. A `void` expression _discards_ a result, while a `void` binding _discards_ the binding.","format":"org.matrix.custom.html","formatted_body":"I would prefer <code>_</code>, but picked <code>void</code> due to concern's like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s. At the very least, <code>void</code> in this sense has a similar semantic meaning. A <code>void</code> expression <em>discards</em> a result, while a <code>void</code> binding <em>discards</em> the binding.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1705945842744,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uSA-giJwKdk7UaRP69pecsNY-8QCXxwDrTo2fRzQUcg"},
{"content":{"body":"> <@rbuckton:matrix.org> I would prefer `_`, but picked `void` due to concern's like ljharb's. At the very least, `void` in this sense has a similar semantic meaning. A `void` expression _discards_ a result, while a `void` binding _discards_ the binding.\n\nyeah, the complexity is that extractors/pattern matching may introduce expressions in the LHS","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uSA-giJwKdk7UaRP69pecsNY-8QCXxwDrTo2fRzQUcg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I would prefer <code>_</code>, but picked <code>void</code> due to concern's like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s. At the very least, <code>void</code> in this sense has a similar semantic meaning. A <code>void</code> expression <em>discards</em> a result, while a <code>void</code> binding <em>discards</em> the binding.</blockquote></mx-reply>yeah, the complexity is that extractors/pattern matching may introduce expressions in the LHS","m.mentions":{"user_ids":["@rbuckton:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uSA-giJwKdk7UaRP69pecsNY-8QCXxwDrTo2fRzQUcg"}},"msgtype":"m.text"},"ts":1705945898532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gJhrcE-zmFGdgK-zaVmRKduBzpPfM0M1SU0rPwXXAQ4"},
{"content":{"body":"Callback parameters, excluding things from `...`, explicit Elision (i.e., `const [a, void] = iter` vs `const [a, , ] = iter` due to trailing `,`), all seem good to me :)","format":"org.matrix.custom.html","formatted_body":"Callback parameters, excluding things from <code>...</code>, explicit Elision (i.e., <code>const [a, void] = iter</code> vs <code>const [a, , ] = iter</code> due to trailing <code>,</code>), all seem good to me :)","m.mentions":{},"msgtype":"m.text"},"ts":1705945908675,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UQ5OMLo3WVWnpjPPxgtjkRzolja7Tsia1ZsxFnh41iI"},
{"content":{"body":"I plan to handle `void` vs `void expression` in things like destructuring via a cover grammar.","format":"org.matrix.custom.html","formatted_body":"I plan to handle <code>void</code> vs <code>void expression</code> in things like destructuring via a cover grammar.","m.mentions":{},"msgtype":"m.text"},"ts":1705945945660,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uaQOpcZ6Chw0zBGcGrJa6pYLIvvfDxvBupowu2t3MzA"},
{"content":{"body":"yeah `void` instead of holes in array destructuring is a definite improvement also","format":"org.matrix.custom.html","formatted_body":"yeah <code>void</code> instead of holes in array destructuring is a definite improvement also","m.mentions":{},"msgtype":"m.text"},"ts":1705945959499,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aRNELgasG-n1qk65UyJjep1eGrhfj13fxQtr1u2abxY"},
{"content":{"body":"So this is designed to dovetail with pattern matching and extractors, which are specifically called out in the explainer.","m.mentions":{},"msgtype":"m.text"},"ts":1705945969862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QT1Kxu07yUQb-7DHecR_OMccZYajyHiXueHfUlUIC7E"},
{"content":{"body":"I'm debating on `void` for explicit elision in array literals as well, since `[0, ,]` and `[a, void 0]` are subtly different.","format":"org.matrix.custom.html","formatted_body":"I'm debating on <code>void</code> for explicit elision in array literals as well, since <code>[0, ,]</code> and <code>[a, void 0]</code> are subtly different.","m.mentions":{},"msgtype":"m.text"},"ts":1705946081119,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jc3rFgDFRR2LOdSw5efN3fwBV80q_fzipAxdN03bjUg"},
{"content":{"body":"```js\nvar ar1 = [0, , ];\nvar ar2 = [0, void 0];\nar1.length; // 2;\nar2.length; // 2;\nar1[1]; // undefined\nar2[1]; // undefined\n1 in ar1; // false <---\n1 in ar2; // true\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">var ar1 = [0, , ];\nvar ar2 = [0, void 0];\nar1.length; // 2;\nar2.length; // 2;\nar1[1]; // undefined\nar2[1]; // undefined\n1 in ar1; // false &lt;---\n1 in ar2; // true\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705946166141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4w3LIF1JqMTFCu01mKpxg2mZ6VnbLzcXMbSAzuEi_EM"},
{"content":{"body":"> <@rbuckton:matrix.org> I plan to handle `void` vs `void expression` in things like destructuring via a cover grammar.\n\nI suspect you can just update the existing cover grammar; it already has to deal with stuff like `[ { m } ]` being legal only in expression position and `[{ a = 0 }]` only being legal in binding/assignment target position","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uaQOpcZ6Chw0zBGcGrJa6pYLIvvfDxvBupowu2t3MzA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I plan to handle <code>void</code> vs <code>void expression</code> in things like destructuring via a cover grammar.</blockquote></mx-reply>I suspect you can just update the existing cover grammar; it already has to deal with stuff like <code>[ { m } ]</code> being legal only in expression position and <code>[{ a = 0 }]</code> only being legal in binding/assignment target position","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uaQOpcZ6Chw0zBGcGrJa6pYLIvvfDxvBupowu2t3MzA"}},"msgtype":"m.text"},"ts":1705946230462,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3WYn-4d5PyLZzsSFtxoCYbjQwFezWemBtwCjgrCDv54"},
{"content":{"body":"> <@rbuckton:matrix.org> I plan to handle `void` vs `void expression` in things like destructuring via a cover grammar.\n\n * I suspect you can just update the existing cover grammar; it already has to deal with stuff like `[ { m(){} } ]` being legal only in expression position and `[{ a = 0 }]` only being legal in binding/assignment target position","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uaQOpcZ6Chw0zBGcGrJa6pYLIvvfDxvBupowu2t3MzA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I plan to handle <code>void</code> vs <code>void expression</code> in things like destructuring via a cover grammar.</blockquote></mx-reply> * I suspect you can just update the existing cover grammar; it already has to deal with stuff like <code>[ { m(){} } ]</code> being legal only in expression position and <code>[{ a = 0 }]</code> only being legal in binding/assignment target position","m.mentions":{},"m.new_content":{"body":"I suspect you can just update the existing cover grammar; it already has to deal with stuff like `[ { m(){} } ]` being legal only in expression position and `[{ a = 0 }]` only being legal in binding/assignment target position","format":"org.matrix.custom.html","formatted_body":"I suspect you can just update the existing cover grammar; it already has to deal with stuff like <code>[ { m(){} } ]</code> being legal only in expression position and <code>[{ a = 0 }]</code> only being legal in binding/assignment target position","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3WYn-4d5PyLZzsSFtxoCYbjQwFezWemBtwCjgrCDv54","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705946239686,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RyNKiQ_i28TaMN_0XQS-il90usZVWaFb-58yU2rTLvo"},
{"content":{"body":"> <@bakkot:matrix.org> I suspect you can just update the existing cover grammar; it already has to deal with stuff like `[ { m(){} } ]` being legal only in expression position and `[{ a = 0 }]` only being legal in binding/assignment target position\n\nI have a rough outline of that in the explainer under the Grammar heading.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$3WYn-4d5PyLZzsSFtxoCYbjQwFezWemBtwCjgrCDv54?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I suspect you can just update the existing cover grammar; it already has to deal with stuff like <code>[ { m(){} } ]</code> being legal only in expression position and <code>[{ a = 0 }]</code> only being legal in binding/assignment target position</blockquote></mx-reply>I have a rough outline of that in the explainer under the Grammar heading.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3WYn-4d5PyLZzsSFtxoCYbjQwFezWemBtwCjgrCDv54"}},"msgtype":"m.text"},"ts":1705946261262,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$teIvM0LYRP0ETvqIoDRgm0-HbTNiEwDCkTcWvABSHio"},
{"content":{"body":"ah, nice","m.mentions":{},"msgtype":"m.text"},"ts":1705946374208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Dy6pWp1oTakiV1lSX6iZO6XJPcIlpiksgdyyxUZvaw"}
]