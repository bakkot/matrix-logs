[
{"content":{"body":"We've been considering `void` as a no-binding matcher in Pattern Matching; that might work here? `using void = ...;`","format":"org.matrix.custom.html","formatted_body":"We've been considering <code>void</code> as a no-binding matcher in Pattern Matching; that might work here? <code>using void = ...;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1705436862516,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$evjSA7Y8ZV2d_5JXAOxXssif-37i7IJ5bA7Ler825fg"},
{"content":{"body":"Oh lol littledan just said that","m.mentions":{},"msgtype":"m.text"},"ts":1705436875667,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$A2vEYipH-wzMvZfLKjBgZXP1y361I0v7_hpq4sy6Tww"},
{"content":{"body":"I am anti-void for this purpose for the record","msgtype":"m.text"},"ts":1705437761691,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$G25KP74JMW7HT4-hjK5GnaotZW7XeNCbWa9kUikfEb8"},
{"content":{"body":"And anti making it pattern matching only","msgtype":"m.text"},"ts":1705437774124,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y16AfS0CvrXWRhJkeRDCE44uaXAKMK5pZrMG5GzzOJc"},
{"content":{"body":"* I think void would be a little funny for this purpose given that it’s an operator","m.new_content":{"body":"I think void would be a little funny for this purpose given that it’s an operator","msgtype":"m.text"},"m.relates_to":{"event_id":"$G25KP74JMW7HT4-hjK5GnaotZW7XeNCbWa9kUikfEb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705437811978,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$q-CY05vJRh-lSxqsMItxPBVGS_2WRJczGLMxWJNZ02E"},
{"content":{"body":"* And this case shows it would be nice to be accessible outside of pattern matching ","format":"org.matrix.custom.html","formatted_body":"* And this case shows it would be nice to be accessible outside of pattern matching","m.new_content":{"body":"And this case shows it would be nice to be accessible outside of pattern matching ","format":"org.matrix.custom.html","formatted_body":"And this case shows it would be nice to be accessible outside of pattern matching","msgtype":"m.text"},"m.relates_to":{"event_id":"$y16AfS0CvrXWRhJkeRDCE44uaXAKMK5pZrMG5GzzOJc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705437832806,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$otJVfnnPdva3ivugOsG3OJ9Rn6Fq7gW3FL2DYP7x_mI"},
{"content":{"body":"crazy thought: `_` as an identifier can be redeclared as long as it's never referred to (and there's no direct `eval`s in scope, I guess?)","format":"org.matrix.custom.html","formatted_body":"crazy thought: <code>_</code> as an identifier can be redeclared as long as it's never referred to (and there's no direct <code>eval</code>s in scope, I guess?)","m.mentions":{},"msgtype":"m.text"},"ts":1705439221605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0I7Yt7zH_kjMc-KWITnhbJWT4Ooi91t-PP65q6fx1FY"},
{"content":{"body":"> <@bakkot:matrix.org> crazy thought: `_` as an identifier can be redeclared as long as it's never referred to (and there's no direct `eval`s in scope, I guess?)\n\nThat was Nicolo’s idea, except that if you do refer to it, you get a runtime error ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%240I7Yt7zH_kjMc-KWITnhbJWT4Ooi91t-PP65q6fx1FY\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>crazy thought: <code>_</code> as an identifier can be redeclared as long as it's never referred to (and there's no direct <code>eval</code>s in scope, I guess?)</blockquote></mx-reply>That was Nicolo’s idea, except that if you do refer to it, you get a runtime error","m.relates_to":{"m.in_reply_to":{"event_id":"$0I7Yt7zH_kjMc-KWITnhbJWT4Ooi91t-PP65q6fx1FY"}},"msgtype":"m.text"},"ts":1705446590182,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1Gh9Ab-nVq3YLge2S7UHisyOnb8b5fCMEAGod7o1e5Y"},
{"content":{"body":"And I guess we don’t enforce in the old sloppy constructs ","format":"org.matrix.custom.html","formatted_body":"And I guess we don’t enforce in the old sloppy constructs","msgtype":"m.text"},"ts":1705446620545,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x7wdjo5lK64I_pxEb_npX2SZdF5vZa5JY4GLVNWtyXg"},
{"content":{"body":"don't love the idea of a local binding which throws when referenced","m.mentions":{},"msgtype":"m.text"},"ts":1705446622795,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FxnDh6Sh1gCLV5vxagelBJqQIbXqas-VWWRt5rj5-1Y"},
{"content":{"body":"reading local bindings should not be side-effecting","m.mentions":{},"msgtype":"m.text"},"ts":1705446633404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cYE-u3Oesci4DTdffBeDP5-pgG6HwEkCDZk6fRJjXBk"},
{"content":{"body":"Why? We already have TDZ","msgtype":"m.text"},"ts":1705446637774,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OAt3Jk0lZKAzIFFihJniqHIlosJdaMo1Ue7nJ9ETaGU"},
{"content":{"body":"hm, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1705446643378,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4_7ufYveHGHPfm3eNTwZOa4UH_0qSdqXUztq3gc6fCQ"},
{"content":{"body":"It would literally be in TDZ ","format":"org.matrix.custom.html","formatted_body":"It would literally be in TDZ","msgtype":"m.text"},"ts":1705446647570,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KGos48cnqNYPKDIlIY8D9Obf-Ggc0IIaOH1XL47A6Zg"},
{"content":{"body":"for now, anyway","m.mentions":{},"msgtype":"m.text"},"ts":1705446649137,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JHOX1CMk9Nmay6ypB7irKYV5xOUseGRdnlNUSzx9BMY"},
{"content":{"body":"Ah!","msgtype":"m.text"},"ts":1705446661429,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bObvXEX3VVWwyPFnWLnavO-1CX_KSNGeUfSaZyq9Uo4"},
{"content":{"body":"I would prefer a static error but runtime is also ok I guess","m.mentions":{},"msgtype":"m.text"},"ts":1705446674826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pycp65_PxgVRYfX7Xr1uTuvHbRdKLDoXCw8OOCBVI9U"}
]