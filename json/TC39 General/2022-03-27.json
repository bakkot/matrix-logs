[
{"content":{"body":"I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","format":"org.matrix.custom.html","formatted_body":"I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","mimetype":"text/plain"},{"body":"I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$VH8Izq_KYnvgpP-b81HXlXOKoW4VnbNrh7nfxWbfRZs"}}},"ts":1648370627776,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$oqf-a3XlWJRXr_B7KbavztluIxPtfFRgMYHIrFxMCN4"},
{"content":{"body":" * I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VH8Izq_KYnvgpP-b81HXlXOKoW4VnbNrh7nfxWbfRZs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>FYI: The W3C TAG is seeking feedback from TC39 about the general design question of type overloading in web JS APIs.<br><br>They’re distinguishing between at least two types (heh) of type overloading: parameters with simple type unions, like with arithmetic operators—versus more-complex alternative parameter forms in which the valid types of subsequent parameters depend on those of earlier parameters, such as with FormData’s methods).<br><br>…This was way back in January and I promised to link to it here but forgot, oops.<br><br>https://github.com/w3ctag/design-principles/issues/131</blockquote></mx-reply> * I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","m.new_content":{"body":"I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","format":"org.matrix.custom.html","formatted_body":"I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","mimetype":"text/plain"},{"body":"I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$oqf-a3XlWJRXr_B7KbavztluIxPtfFRgMYHIrFxMCN4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I remember seeing horrible implementations of overloading in JS: `function foo(index, name) { if (name === undefined) name = index; ... }` that devastates readability.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VH8Izq_KYnvgpP-b81HXlXOKoW4VnbNrh7nfxWbfRZs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>FYI: The W3C TAG is seeking feedback from TC39 about the general design question of type overloading in web JS APIs.<br><br>They’re distinguishing between at least two types (heh) of type overloading: parameters with simple type unions, like with arithmetic operators—versus more-complex alternative parameter forms in which the valid types of subsequent parameters depend on those of earlier parameters, such as with FormData’s methods).<br><br>…This was way back in January and I promised to link to it here but forgot, oops.<br><br>https://github.com/w3ctag/design-principles/issues/131</blockquote></mx-reply> * I remember seeing horrible implementations of overloading in JS: <code>function foo(index, name) { if (name === undefined) name = index; ... }</code> that devastates readability.","mimetype":"text/html"}]},"ts":1648370687365,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$kh6MEkt40HpbFYmrCjqHPTdXmw38JpIjxttsE7VycJo"}
]