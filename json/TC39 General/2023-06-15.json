[
{"content":{"body":"Remind me. The built-in-modules proposal was never a fix for the name conflicts right? Forcing someone to ```import \"@std/Object\"; which would patch the Object using side-effects. Was it decided years ago to continue using global changes forever?","msgtype":"m.text"},"ts":1686792265668,"senderName":"sirisian","senderId":"@sirisian:matrix.org","id":"$ViWWeYg4cUEuu_Acg3Ks-GeTJ69sUaU2XQC_ZB0-2xA"},
{"content":{"body":"I think it would be nicer if instead we started having the prototypes of new builtins that get added to the language be frozen by default","msgtype":"m.text"},"ts":1686792379529,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$Bqjy-OFXfnFEAY1Xe9sVll7TrNKov7gXvhecfFuxdZ0"},
{"content":{"body":"then we can guarantee no issues of that sort in those new builtins","msgtype":"m.text"},"ts":1686792419265,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$_whcrTFe68A10X8j0rAbyqAVzfcgP9tQSKO1VHLu1X8"},
{"content":{"body":"sirisian: I don't believe anyone ever proposed having built-in module imports be side-effecting, no","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sirisian:matrix.org\">sirisian</a>: I don't believe anyone ever proposed having built-in module imports be side-effecting, no","msgtype":"m.text"},"ts":1686792566254,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cllGFp3gFAcB4TmKdg8uLEAwx4iFU-2U-V1Qisk2gRY"},
{"content":{"body":"and the built-in modules proposal was never formally rejected IIRC but has certainly stalled, and we're not blocking stuff on it","msgtype":"m.text"},"ts":1686792605876,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cUuM-fWQMfe1f4GPW370rlTU2iFIke7kNSshqbsqUOw"},
{"content":{"body":"voidhedron: that would prevent polyfills of later features, so we're not going to do that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@voidhedron:matrix.org\">voidhedron</a>: that would prevent polyfills of later features, so we're not going to do that","msgtype":"m.text"},"ts":1686792623339,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TjBaHbySO3d5s30zLY6E5ecx1YxBQUxWvE4JGUWWKJ8"},
{"content":{"body":"right... I didn't consider that","msgtype":"m.text"},"ts":1686792697174,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$WXEZdfBUuM3vtDgS0eYFaoPa6iX1UPA49-WiSeU-4oM"},
{"content":{"body":"maybe if there was a more official streamlined way of creating and applying polyfills","msgtype":"m.text"},"ts":1686792769072,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$U6h5Zz8M0RKOpVP-AOXdVIKHESexjHp68spgX6oiPow"},
{"content":{"body":"and *just* polyfills, no other random stuff","format":"org.matrix.custom.html","formatted_body":"and <em>just</em> polyfills, no other random stuff","msgtype":"m.text"},"ts":1686792793970,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$18GV2XbimkahhcbH4RCejjxMVwyLk_IedtN_pgjTO50"},
{"content":{"body":"most people have gotten the memo about not adding random stuff now","msgtype":"m.text"},"ts":1686792889663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ii4dAuh0TLvAWP1ebL2ofBlwRee5j2JTIhgB3zToXwo"},
{"content":{"body":"so anyone doing it anyway would presumably be willing to use whatever \"official\" mechanism there was","msgtype":"m.text"},"ts":1686792908202,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HQFF7DVaotdN7QUG3xYnOw8b48D5Sg3-NRyIUedfzSg"},
{"content":{"body":"yeah it is way past too late for it to be helpful at this point, but *if* we had made something like: (and frozen prototypes)\n```js\n// in the surface its called basically like a Reflect.set call\nPolyfill.apply(Array.prototype, \"at\", function() { /* impl */ });\n```\nwhich validated the inputs given by running it through the relevant test262 tests and if it didnt pass it refused to apply the polyfill","format":"org.matrix.custom.html","formatted_body":"<p>yeah it is way past too late for it to be helpful at this point, but <em>if</em> we had made something like: (and frozen prototypes)</p>\n<pre><code class=\"language-js\">// in the surface its called basically like a Reflect.set call\nPolyfill.apply(Array.prototype, \"at\", function() { /* impl */ });\n</code></pre>\n<p>which validated the inputs given by running it through the relevant test262 tests and if it didnt pass it refused to apply the polyfill</p>\n","msgtype":"m.text"},"ts":1686793337224,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$GWko7mjZ5E88JXsf0syKMN2-Dk_Yb2FCMBcqxksX_3I"},
{"content":{"body":"we wouldn't have been in this situation now with web incompat issues","msgtype":"m.text"},"ts":1686793357623,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$OeUpjg2g4M9VypaOxje9NEZjNqu51D8KQpDAeDAztR8"},
{"content":{"body":"it would also have automatically managed the right property descriptor for each polyfill","msgtype":"m.text"},"ts":1686793432263,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$WEz1AOWtLWbbNXwtsVElFh30qr_ccruVJPOAWN_AiBI"},
{"content":{"body":"Some of the web compat bugs are because the polyfill isn't being applied.\nThey were doing:\n`if (![].groupBy) addGroupBy()`","format":"org.matrix.custom.html","formatted_body":"Some of the web compat bugs are because the polyfill isn't being applied.<br />\nThey were doing:<br />\n<code>if (![].groupBy) addGroupBy()</code>","msgtype":"m.text"},"ts":1686799339135,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$77lGZhP3KugPBLPFw1WOPy3Y0B0MMd2J_liYDDJccJ4"},
{"content":{"body":"it's better if they always unconditionally apply it, that way the sudden appearance of the official implementation doesn't change the behaviour of the site","msgtype":"m.text"},"ts":1686799416895,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$okyI4hBbPnsdMIHjFlW33PGF-5OFTqZZbKiHrKiGJrM"},
{"content":{"body":"It was only old versions of sugarJs that were applying it conditionally. Sites using newer versions of sugarJS were unaffected ","format":"org.matrix.custom.html","formatted_body":"It was only old versions of sugarJs that were applying it conditionally. Sites using newer versions of sugarJS were unaffected","msgtype":"m.text"},"ts":1686799518250,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ELUXE_6OIlQVXQTfrRoHjJXRRLXgElnfB9McPx0fAAw"},
{"content":{"body":"Yeah, that conditional application of the polyfill would also have been handled by the dedicated Polyfill api, so it would also have prevented that had it existed.","msgtype":"m.text"},"ts":1686800055013,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$XOlhq9kVDsSPhK_RPVwgG0o8YGKD4kiC1qWlfBpenCQ"},
{"content":{"body":"Does anyone know why importing bindings that are not declared by a module throws a SyntaxError and not a ReferenceError?","msgtype":"m.text"},"ts":1686815165823,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$svXbNbudWOz2begnAsq8t4ylfr5LH8c85PZM8WFX-CU"},
{"content":{"body":"my guess is that it’s an error that happens before any code is executed","msgtype":"m.text"},"ts":1686815307275,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$7iQ1zjIsctSXxi3Y0h3fq_SzWntdNFDYUtOCa2atUdI"},
{"content":{"body":"That's what I suspected too — I am asking because some of the modules proposals allow distinguishing parsing errors from linking errors, so it's possible to detect \"this is not actually a _syntax_ error\"","format":"org.matrix.custom.html","formatted_body":"That's what I suspected too — I am asking because some of the modules proposals allow distinguishing parsing errors from linking errors, so it's possible to detect &quot;this is not actually a <em>syntax</em> error&quot;","msgtype":"m.text"},"ts":1686815528058,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CFy4bhkD3FEiR03GdEzsZ8jz4cO80NxSUxCnAF6NkwU"},
{"content":{"body":"https://twitter.com/sebmarkbage/status/1669410404001251333","msgtype":"m.text"},"ts":1686858494701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TpeaVb1QHziI7FO51RAvhhGVIODLZCPUUH7bJ4vBAK8"},
{"content":{"body":"> `import \"https://googletagmanager.com/gtm.js?id=123\" with { type: \"script\" }`\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p><code>import \"https://googletagmanager.com/gtm.js?id=123\" with { type: \"script\" }</code></p>\n</blockquote>\n","msgtype":"m.text"},"ts":1686858505633,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jHPoEJjV3Se6D6HjmL69R_bh6HCkIRoIFuLf7vyJJPg"},
{"content":{"body":"I don't hate this idea","msgtype":"m.text"},"ts":1686858507921,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6plaxVHc2YJ8CPDBcmJnu67hXeSRlTV7LiDl9pRo2uE"},
{"content":{"body":"you can import a module for side effects; why not a script?","msgtype":"m.text"},"ts":1686858516233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NXysPw-neKkRadts_Dyb9MHs12G1YHO4Oo40FdIC4M4"},
{"content":{"body":"I don't hate it either :)","msgtype":"m.text"},"ts":1686859793424,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TsNX_QOOYxCnYO7NdMw3Fp_uY85JNdB2FxnTHYFmISc"},
{"content":{"body":"why should the type even be needed?","msgtype":"m.text"},"ts":1686860338899,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8qKccCnl107VoWZGWR7if_r9gVJnlpiP_PmhzNvJYus"},
{"content":{"body":"like what's stopping it from Just Working","msgtype":"m.text"},"ts":1686860346002,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V-VAQ4hqvjzNeBtIj3wcUcFB1kgVu_Ynkj3AKHcXZCw"},
{"content":{"body":"You need _somehow_ to decide if the loaded file should be evaluated as a script or a module ","format":"org.matrix.custom.html","formatted_body":"You need <em>somehow</em> to decide if the loaded file should be evaluated as a script or a module","msgtype":"m.text"},"ts":1686862737575,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CYa4fTYbIbMbLubX8sumI4uFML7KwHMhQnFQmdbTyGI"},
{"content":{"body":"Someone uses .mjs, others use how the file is imported","msgtype":"m.text"},"ts":1686862752644,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-Gx1sK23iG2KIuxq5PXt3aqxaMasEZApU9DpT1xU9ec"},
{"content":{"body":"sloppy mode :(","msgtype":"m.text"},"ts":1686863377171,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EaXGYVBgwGLyZMoPq0GypX8WQyzfnPuo2kGUtx4LVNg"},
{"content":{"body":"also the different parsing for `await` in modules, which is just wack","format":"org.matrix.custom.html","formatted_body":"also the different parsing for <code>await</code> in modules, which is just wack","msgtype":"m.text"},"ts":1686863387333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mJL8W8XuCYkKmSS_CeizLH7r-axkoVu05GoFjCcOg0w"},
{"content":{"body":"oh right, duh, ambiguous syntax","msgtype":"m.text"},"ts":1686863489804,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qXVp5p8TZxvdjxNfZG7qAo07lblseJEwHfgkXKc9AmE"},
{"content":{"body":"it'd work fine in anything with a filesystem since it could use extensions, but not with something URL-based","msgtype":"m.text"},"ts":1686863510766,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FtI-Xm-ObqSrE1LqluynibO-pJRD9s7sKMZyaapIroQ"},
{"content":{"body":"this is why we invented MIME types","msgtype":"m.text"},"ts":1686869017146,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oVRVMxPG_kbqBizB3y3ctxcZqJsn-dp9jHvCcx5488I"}
]