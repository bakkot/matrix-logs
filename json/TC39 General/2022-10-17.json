[
{"content":{"body":"I had a similar thought reading it. It seems like it make it possible to use any hooks in conditions codepaths. But, it’d only work if the component directly calls the hook, any indirection (like a custom hook) and we’d need to know the call locations if everything in the stack to differentiate.","msgtype":"m.text"},"ts":1665976383157,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ol2cdRud5bjhjMiicLrs9jTOArbNzLrw66qTUs_QPkw"},
{"content":{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","format":"org.matrix.custom.html","formatted_body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","mimetype":"text/plain"},{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","mimetype":"text/html"}]},"ts":1665981924270,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IUtx_VXDvcl3vcfcX6tms99RR7lNAkiFsxzGHZbBHxM"},
{"content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665981990357,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w"},
{"content":{"body":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","m.new_content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"m.relates_to":{"event_id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665982014466,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$bKf5iMfmm3h85qXTkl6y6b5_P_DzxZHCL7saMs65Qn8"},
{"content":{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1666014632298,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3XZutKHqmaOAU0ifFkJzpvUdhRpF_qou6n14GAYK8eE"},
{"content":{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/html"}]},"ts":1666014646563,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Woqk3ZQxjWHqmHPxhM9d7Qsmf9aRyauX_lDKhwA0t2k"},
{"content":{"body":"(also a question for annevk :)","format":"org.matrix.custom.html","formatted_body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also a question for annevk :)","mimetype":"text/plain"},{"body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","mimetype":"text/html"}]},"ts":1666014664095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7g8XqUiv4dgotO8jP7bckF1iL_yjcIZiTCKH0H4XcfI"},
{"content":{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/html"}]},"ts":1666015808922,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2QDbQ9C-aLuCgcmBIfoPnTNMHgH4udETVVXk0r0EzYY"}
]