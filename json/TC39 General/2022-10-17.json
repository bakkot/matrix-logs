[
{"content":{"body":"I had a similar thought reading it. It seems like it make it possible to use any hooks in conditions codepaths. But, it’d only work if the component directly calls the hook, any indirection (like a custom hook) and we’d need to know the call locations if everything in the stack to differentiate.","msgtype":"m.text"},"ts":1665976383157,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ol2cdRud5bjhjMiicLrs9jTOArbNzLrw66qTUs_QPkw"},
{"content":{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","format":"org.matrix.custom.html","formatted_body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","mimetype":"text/plain"},{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","mimetype":"text/html"}]},"ts":1665981924270,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IUtx_VXDvcl3vcfcX6tms99RR7lNAkiFsxzGHZbBHxM"},
{"content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665981990357,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w"},
{"content":{"body":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","m.new_content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"m.relates_to":{"event_id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665982014466,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$bKf5iMfmm3h85qXTkl6y6b5_P_DzxZHCL7saMs65Qn8"}
]