[
{"content":{"body":"I had a similar thought reading it. It seems like it make it possible to use any hooks in conditions codepaths. But, it’d only work if the component directly calls the hook, any indirection (like a custom hook) and we’d need to know the call locations if everything in the stack to differentiate.","msgtype":"m.text"},"ts":1665976383157,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ol2cdRud5bjhjMiicLrs9jTOArbNzLrw66qTUs_QPkw"},
{"content":{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","format":"org.matrix.custom.html","formatted_body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","mimetype":"text/plain"},{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","mimetype":"text/html"}]},"ts":1665981924270,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IUtx_VXDvcl3vcfcX6tms99RR7lNAkiFsxzGHZbBHxM"},
{"content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665981990357,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w"},
{"content":{"body":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","m.new_content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"m.relates_to":{"event_id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665982014466,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$bKf5iMfmm3h85qXTkl6y6b5_P_DzxZHCL7saMs65Qn8"},
{"content":{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1666014632298,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3XZutKHqmaOAU0ifFkJzpvUdhRpF_qou6n14GAYK8eE"},
{"content":{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/html"}]},"ts":1666014646563,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Woqk3ZQxjWHqmHPxhM9d7Qsmf9aRyauX_lDKhwA0t2k"},
{"content":{"body":"(also a question for annevk :)","format":"org.matrix.custom.html","formatted_body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also a question for annevk :)","mimetype":"text/plain"},{"body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","mimetype":"text/html"}]},"ts":1666014664095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7g8XqUiv4dgotO8jP7bckF1iL_yjcIZiTCKH0H4XcfI"},
{"content":{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/html"}]},"ts":1666015808922,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2QDbQ9C-aLuCgcmBIfoPnTNMHgH4udETVVXk0r0EzYY"},
{"content":{"body":"You might start at https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis (and earlier in that doc) and https://github.com/tc39/proposal-explicit-resource-management/issues/91","msgtype":"m.text","org.matrix.msc1767.text":"You might start at https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis (and earlier in that doc) and https://github.com/tc39/proposal-explicit-resource-management/issues/91"},"ts":1666017255149,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bDSJNjNyu7opOY2WpvX36B4aNPlYOQrfaQHhjcYmCqQ"},
{"content":{"body":"IMO the protocol itself and web platform implementation of it is a huge thing about this proposal's value, and would be worth it to add even if we didn't have the syntax","msgtype":"m.text","org.matrix.msc1767.text":"IMO the protocol itself and web platform implementation of it is a huge thing about this proposal's value, and would be worth it to add even if we didn't have the syntax"},"ts":1666017291516,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CoXKNLUMY4NRx8KJyoNMkJ6_HqwPYBMQA7l6qIpIOmQ"},
{"content":{"body":"in particular, I think composing disposables is a big thing, and it will be useful for frameworks to be able to tie into a common construct for this (probably this assertion should be validated with actual framework authors...)","msgtype":"m.text","org.matrix.msc1767.text":"in particular, I think composing disposables is a big thing, and it will be useful for frameworks to be able to tie into a common construct for this (probably this assertion should be validated with actual framework authors...)"},"ts":1666017526367,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A9w_C6j3g1AzdmU80yX3H-e-_nL_rT6qFv3FEKYjMrQ"},
{"content":{"body":"I do think we need a strong web platform review and integration plan before this goes to Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"I do think we need a strong web platform review and integration plan before this goes to Stage 3"},"ts":1666017584406,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a8_EpDjLWx_GbLeZlbcCxB_LeAGjalt892vW_gchtDs"},
{"content":{"body":" * I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3","m.new_content":{"body":"I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3"},"m.relates_to":{"event_id":"$a8_EpDjLWx_GbLeZlbcCxB_LeAGjalt892vW_gchtDs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3"},"ts":1666017616681,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MgXxYdbJidPnqFauELxJ9Gb-ASEh1-Zhunz7k8b4Ezk"},
{"content":{"body":"Interesting, we did talk about this at some point. For addEventListener(), is there some way dispose could integrate with AbortSignal instead?","msgtype":"m.text","org.matrix.msc1767.text":"Interesting, we did talk about this at some point. For addEventListener(), is there some way dispose could integrate with AbortSignal instead?"},"ts":1666017730400,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$-wCfHXWvf2krJHmsTrxEkZkMhEgQQhTRmWHet_IE5sw"},
{"content":{"body":"Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.","msgtype":"m.text","org.matrix.msc1767.text":"Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup."},"ts":1666017759054,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns"},
{"content":{"body":"yeah, I guess this is an addition I'd make to the integration plan above, that disposing an AbortController would abort it.","msgtype":"m.text","org.matrix.msc1767.text":"yeah, I guess this is an addition I'd make to the integration plan above, that disposing an AbortController would abort it."},"ts":1666017779681,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fVEuTvHhgCH4iRxMEf2sa4eKj8jZ0Rb8z6tJuWY4lCw"},
{"content":{"body":"(my intuitions here are largely based on a conversation I had with wycats)","msgtype":"m.text","org.matrix.msc1767.text":"(my intuitions here are largely based on a conversation I had with wycats)"},"ts":1666017810926,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R-XSYhqOMZ7VLgqI7kbyjq9oRgfQpN-NhBhQjo7cdDg"},
{"content":{"body":"I guess in general I wonder how much of this can be done through signals instead. I've been kinda seeing that as our \"cleanup API\".","msgtype":"m.text","org.matrix.msc1767.text":"I guess in general I wonder how much of this can be done through signals instead. I've been kinda seeing that as our \"cleanup API\"."},"ts":1666017981598,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$sAAwKFPz9_PMQ7BqAtjy1y-uXIvsZAQ22fTKSO8XkHc"},
{"content":{"body":"what do you mean by signals?","msgtype":"m.text","org.matrix.msc1767.text":"what do you mean by signals?"},"ts":1666018004618,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bSJXMz3H1sLY42QCa5RV6-jrmwOJOL1BUpXv4DlunXQ"},
{"content":{"body":"https://dom.spec.whatwg.org/#aborting-ongoing-activities","msgtype":"m.text","org.matrix.msc1767.text":"https://dom.spec.whatwg.org/#aborting-ongoing-activities"},"ts":1666018026206,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$MTYDelgqHkduUwoqcKmVNpXW8L4ufnJakA8uPEi_1ow"},
{"content":{"body":"oh AbortSignals","msgtype":"m.text","org.matrix.msc1767.text":"oh AbortSignals"},"ts":1666018039064,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ddj5dGbElCcqUNb-EJm8N_E84x-Bv68JiXGFMBGsOSg"},
{"content":{"body":"I call them signals as they're somewhat more general-purpose these days (and that's how the dictionary member is called, well in the singular)","msgtype":"m.text","org.matrix.msc1767.text":"I call them signals as they're somewhat more general-purpose these days (and that's how the dictionary member is called, well in the singular)"},"ts":1666018088579,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$oSBxUWZzoCuMIN_fWIdfTgdY_pZ3GwLcLSAYad6zamM"},
{"content":{"body":"Though the documentation doesn't reflect that terribly well","msgtype":"m.text","org.matrix.msc1767.text":"Though the documentation doesn't reflect that terribly well"},"ts":1666018107484,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$UaFaF3eUAdW3DwR6iKog46QCAPzOAxhpeqiWSamGSp8"},
{"content":{"body":"makes sense, the term signal is just a bit overloaded in the ecosystem...","msgtype":"m.text","org.matrix.msc1767.text":"makes sense, the term signal is just a bit overloaded in the ecosystem..."},"ts":1666018114504,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$okaiSeDgldzSjW3vtMui8Ic9u7hW-rz76GyodkGpDDM"},
{"content":{"body":"yeah I guess my intuition is that a signal is a more flexible thing in the same space and a bit less convenient, which is why I thought that Symbol.dispose would generalize the set of things that you can abort","msgtype":"m.text","org.matrix.msc1767.text":"yeah I guess my intuition is that a signal is a more flexible thing in the same space and a bit less convenient, which is why I thought that Symbol.dispose would generalize the set of things that you can abort"},"ts":1666018179611,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3HTXqLAmEGj-EFcTl2VegLVlyYme3Is1Wyyh1Whe970"},
{"content":{"body":"As in, do we want Worker's terminate() to be pluggable in some way or should Worker just take a signal","msgtype":"m.text","org.matrix.msc1767.text":"As in, do we want Worker's terminate() to be pluggable in some way or should Worker just take a signal"},"ts":1666018181556,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$yS52t705VThd3AiTNQf9aNaxJwHv-ifgU6k7MfGCAfI"},
{"content":{"body":"it's sort of convenient to just call the method directly on the thing, rather than keeping around some other object","msgtype":"m.text","org.matrix.msc1767.text":"it's sort of convenient to just call the method directly on the thing, rather than keeping around some other object"},"ts":1666018213055,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CkQ_iWSbIVQDO-7WaOWtVnaU6Zyb_VYu9mp2ZBDQUd0"},
{"content":{"body":"so... you might want both versions","msgtype":"m.text","org.matrix.msc1767.text":"so... you might want both versions"},"ts":1666018218579,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m-zAwU_4X2fcYsxC4s8mpWTWW-iMmZq_To2oAoOupZ4"},
{"content":{"body":"(not extremely satisifying, the duplication)","msgtype":"m.text","org.matrix.msc1767.text":"(not extremely satisifying, the duplication)"},"ts":1666018240803,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HmUcQNFCwa4xKIzdKn9hm3NNVRyy6-Dbr9iey16Vpz8"},
{"content":{"body":" * (not extremely satisifying, the duplication)","m.new_content":{"body":"(not extremely satisifying, the duplication)","msgtype":"m.text","org.matrix.msc1767.text":"(not extremely satisifying, the duplication)"},"m.relates_to":{"event_id":"$HmUcQNFCwa4xKIzdKn9hm3NNVRyy6-Dbr9iey16Vpz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (not extremely satisifying, the duplication)"},"ts":1666018248191,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oALIHyTkIJBqn0ZKDjZpunqm8pkDiyBJvTrFFLpLHtY"},
{"content":{"body":"Yeah maybe, exploring that seems worthwhile as part of stage 2-3","msgtype":"m.text","org.matrix.msc1767.text":"Yeah maybe, exploring that seems worthwhile as part of stage 2-3"},"ts":1666018261294,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$aC80c_WHr2gxwYIHjaCLn2eRvwRqTm4J_Q6TBhnpqO0"},
{"content":{"body":"yeah we could really use more WHATWG/DOM input here. I'm glad that Ron got this started with a proposal but we need more conversation here.","msgtype":"m.text","org.matrix.msc1767.text":"yeah we could really use more WHATWG/DOM input here. I'm glad that Ron got this started with a proposal but we need more conversation here."},"ts":1666018308795,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JCil5TmgjsRrTG0c_yKf81GqqKoqvL38fPM1m4SbpZM"},
{"content":{"body":"To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","format":"org.matrix.custom.html","formatted_body":"To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","mimetype":"text/plain"},{"body":"To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","mimetype":"text/html"}]},"ts":1666018675701,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ"},
{"content":{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit `await` pause at the end of the block","format":"org.matrix.custom.html","formatted_body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit <code>await</code> pause at the end of the block","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit `await` pause at the end of the block","mimetype":"text/plain"},{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit <code>await</code> pause at the end of the block","mimetype":"text/html"}]},"ts":1666018736046,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zjHyAzrvlC46y1nIIRSg2xOYJE4yltZAxMnCr-_ZVnA"},
{"content":{"body":"I advocated for just focusing on the sync case for now, and being OK with these async disposals being launched off into space (I think this makes sense for cases that are like resource cleanup, though not for cases that are about committing storage)","msgtype":"m.text","org.matrix.msc1767.text":"I advocated for just focusing on the sync case for now, and being OK with these async disposals being launched off into space (I think this makes sense for cases that are like resource cleanup, though not for cases that are about committing storage)"},"ts":1666018790127,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x9_YyeP367R_IGIrHDIfeiMWvJmEq7_QV9_LhJYZNvw"},
{"content":{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"ts":1666018824842,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jIWVioy9xPt1nKr9K6cp3CNxVg7X84Yt8If4LpnLN9M"},
{"content":{"body":" * an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":" * an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","m.new_content":{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jIWVioy9xPt1nKr9K6cp3CNxVg7X84Yt8If4LpnLN9M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":" * an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"ts":1666018838646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bt65p6597h1WA-LN5WqzzbQSi6dGo82gOKtqfDjC_1E"},
{"content":{"body":"I guess AbortSignal has no way to wait for something to be committed...","msgtype":"m.text","org.matrix.msc1767.text":"I guess AbortSignal has no way to wait for something to be committed..."},"ts":1666021781090,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P70ueT40vf9tj_8R1eA1X9xNcyZic1xduYnMOdc9RSI"},
{"content":{"body":"> <@annevk:matrix.org> Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.\n\nDoes `AbortController` have a concept of \"I should never be aborted\"? In C#, a `CancellationTokenSource` can be disposed without calling `cancel()`, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for `AbortController`/`AbortSignal`, since I'm not 100% sure I agree that disposing of an `AbortController` should cause an abort.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Perhaps it invokes AbortController&#39;s abort(). Which then does a bunch of cleanup.</blockquote></mx-reply>Does <code>AbortController</code> have a concept of &quot;I should never be aborted&quot;? In C#, a <code>CancellationTokenSource</code> can be disposed without calling <code>cancel()</code>, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for <code>AbortController</code>/<code>AbortSignal</code>, since I'm not 100% sure I agree that disposing of an <code>AbortController</code> should cause an abort.","m.relates_to":{"m.in_reply_to":{"event_id":"$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.\n\nDoes `AbortController` have a concept of \"I should never be aborted\"? In C#, a `CancellationTokenSource` can be disposed without calling `cancel()`, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for `AbortController`/`AbortSignal`, since I'm not 100% sure I agree that disposing of an `AbortController` should cause an abort.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Perhaps it invokes AbortController&#39;s abort(). Which then does a bunch of cleanup.</blockquote></mx-reply>Does <code>AbortController</code> have a concept of &quot;I should never be aborted&quot;? In C#, a <code>CancellationTokenSource</code> can be disposed without calling <code>cancel()</code>, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for <code>AbortController</code>/<code>AbortSignal</code>, since I'm not 100% sure I agree that disposing of an <code>AbortController</code> should cause an abort.","mimetype":"text/html"}]},"ts":1666027940118,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y_jOr479BR1gxwkVSeMxf_6sVmQBle5GUWnASLM5C-I"},
{"content":{"body":"> <@annevk:matrix.org> To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.\n\nThere are plenty of built-in symbols that are unrelated to syntax.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.</blockquote></mx-reply>There are plenty of built-in symbols that are unrelated to syntax.","m.relates_to":{"m.in_reply_to":{"event_id":"$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.\n\nThere are plenty of built-in symbols that are unrelated to syntax.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.</blockquote></mx-reply>There are plenty of built-in symbols that are unrelated to syntax.","mimetype":"text/html"}]},"ts":1666028004668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JlKSOV4SNtJ7Ip_DS_S6gPIL1dgRw-x-FM3-rAqFoyc"},
{"content":{"body":"rbuckton: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","mimetype":"text/html"}]},"ts":1666029648347,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YE1dNJknxO6rwR4eudIcWQXjZKx9Pj5912ssa9zSuc8"},
{"content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032762181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0"},
{"content":{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","m.new_content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032776802,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OqAfEbcggViWgO7GSJ3gXMOZCKu2UKnCO5tZKXWafxA"},
{"content":{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","m.new_content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032787560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$67yGkdt8zVpDov8qxgQ-ls2yhr-z5t6QjUe8x-zHbx4"},
{"content":{"body":"I don't think `AbortSignal` is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","format":"org.matrix.custom.html","formatted_body":"I don't think <code>AbortSignal</code> is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think `AbortSignal` is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","mimetype":"text/plain"},{"body":"I don't think <code>AbortSignal</code> is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","mimetype":"text/html"}]},"ts":1666032851934,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q5-HSOFlAVzGjTuHT3wO2coMTQ4TLcsXQrXwTOTCa64"},
{"content":{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"ts":1666033390244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jLbFeAn6A8Krd8JSE3hKwwaWEDvG_bUzaY7rBgEYKKw"},
{"content":{"body":" * That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":" * That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","m.new_content":{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jLbFeAn6A8Krd8JSE3hKwwaWEDvG_bUzaY7rBgEYKKw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":" * That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"ts":1666033404806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lbYk-BcnZ_NL1Q01vxK0RuXIMNodpjkBNwNlpWu73VY"},
{"content":{"body":"I guess coming up with a shared understanding of this area would be good","msgtype":"m.text","org.matrix.msc1767.text":"I guess coming up with a shared understanding of this area would be good"},"ts":1666033438770,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kw6unSbW_9lARSESEnEWAl8-OUXp8lFejqSeVJv6FTI"},
{"content":{"body":"we shouldn't really have two mechanisms that are parallel due to disagreements about how the same problem should be approached","msgtype":"m.text","org.matrix.msc1767.text":"we shouldn't really have two mechanisms that are parallel due to disagreements about how the same problem should be approached"},"ts":1666033461801,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZOQ1ebG9Bo0P81jRRLiUqajGURhTdLojmGjA4L6uKQs"}
]