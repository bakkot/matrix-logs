[
{"content":{"body":"I had a similar thought reading it. It seems like it make it possible to use any hooks in conditions codepaths. But, it’d only work if the component directly calls the hook, any indirection (like a custom hook) and we’d need to know the call locations if everything in the stack to differentiate.","msgtype":"m.text"},"ts":1665976383157,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ol2cdRud5bjhjMiicLrs9jTOArbNzLrw66qTUs_QPkw"},
{"content":{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","format":"org.matrix.custom.html","formatted_body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code `delete`s a field while its not using it instead of setting it to `undefined`","mimetype":"text/plain"},{"body":"being able to useContext conditionally is a nice follow on, and makes sense that the context can serve as the tracking marker.  Not being able to use{State,Effect} conditionally still seems fine, as conditional state is a bit like having a class where the code <code>delete</code>s a field while its not using it instead of setting it to <code>undefined</code>","mimetype":"text/html"}]},"ts":1665981924270,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IUtx_VXDvcl3vcfcX6tms99RR7lNAkiFsxzGHZbBHxM"},
{"content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665981990357,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w"},
{"content":{"body":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","m.new_content":{"body":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. ","msgtype":"m.text","org.matrix.msc1767.text":"the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"m.relates_to":{"event_id":"$iqa29-s9-R7TFi2WShD5B36hz4y_9akxCHu0CsAPm8w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the choice to mutate the promise object rather than require it to be memoized surprised me, considering react is usually all about immutability. "},"ts":1665982014466,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$bKf5iMfmm3h85qXTkl6y6b5_P_DzxZHCL7saMs65Qn8"},
{"content":{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@domenicdenicola:matrix.org> rbuckton: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.\n\nThe rationale for the async dispose stuff in the web platform would be something like:\n- This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default\n- The AsyncDisposeStack library helps compose these, making this protocol directly useful","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bp9k_vD2YkeCGXeV4rnRuphbLR9NeSf4tH48caVVFnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">@domenicdenicola:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Got it. That's unfortunate. In that case, I think it'd be better to remove all async dispose stuff, as there's no incentive for at least the web platform to add a bunch of aliases/wrappers without syntax support.</blockquote></mx-reply><p>The rationale for the async dispose stuff in the web platform would be something like:</p>\n<ul>\n<li>This solves the confusion where you don't know whether a disposal is something you need to wait for, by sorting things into two different names which aren't conflated by default</li>\n<li>The AsyncDisposeStack library helps compose these, making this protocol directly useful</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1666014632298,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3XZutKHqmaOAU0ifFkJzpvUdhRpF_qou6n14GAYK8eE"},
{"content":{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Domenic: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the \"commit\" to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a>: I don't fully understand how important it is to correct the current conflation that the web platform does (where the same method name is used for both sync and async disposal). If we don't add add the async disposal protocol, we'd have to decide whether web platform objects which have a logically asynchronous disposal should implement Symbol.dispose anyway (at the risk that some usages of these disposals should wait for the &quot;commit&quot; to complete, but the syntax does not provide this). How do you think the web platform should answer this question?","mimetype":"text/html"}]},"ts":1666014646563,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Woqk3ZQxjWHqmHPxhM9d7Qsmf9aRyauX_lDKhwA0t2k"},
{"content":{"body":"(also a question for annevk :)","format":"org.matrix.custom.html","formatted_body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also a question for annevk :)","mimetype":"text/plain"},{"body":"(also a question for <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> :)","mimetype":"text/html"}]},"ts":1666014664095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7g8XqUiv4dgotO8jP7bckF1iL_yjcIZiTCKH0H4XcfI"},
{"content":{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I'd need more context to be useful. I might have read something about this at some point, but I forgot :-)","mimetype":"text/html"}]},"ts":1666015808922,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$2QDbQ9C-aLuCgcmBIfoPnTNMHgH4udETVVXk0r0EzYY"},
{"content":{"body":"You might start at https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis (and earlier in that doc) and https://github.com/tc39/proposal-explicit-resource-management/issues/91","msgtype":"m.text","org.matrix.msc1767.text":"You might start at https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis (and earlier in that doc) and https://github.com/tc39/proposal-explicit-resource-management/issues/91"},"ts":1666017255149,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bDSJNjNyu7opOY2WpvX36B4aNPlYOQrfaQHhjcYmCqQ"},
{"content":{"body":"IMO the protocol itself and web platform implementation of it is a huge thing about this proposal's value, and would be worth it to add even if we didn't have the syntax","msgtype":"m.text","org.matrix.msc1767.text":"IMO the protocol itself and web platform implementation of it is a huge thing about this proposal's value, and would be worth it to add even if we didn't have the syntax"},"ts":1666017291516,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CoXKNLUMY4NRx8KJyoNMkJ6_HqwPYBMQA7l6qIpIOmQ"},
{"content":{"body":"in particular, I think composing disposables is a big thing, and it will be useful for frameworks to be able to tie into a common construct for this (probably this assertion should be validated with actual framework authors...)","msgtype":"m.text","org.matrix.msc1767.text":"in particular, I think composing disposables is a big thing, and it will be useful for frameworks to be able to tie into a common construct for this (probably this assertion should be validated with actual framework authors...)"},"ts":1666017526367,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A9w_C6j3g1AzdmU80yX3H-e-_nL_rT6qFv3FEKYjMrQ"},
{"content":{"body":"I do think we need a strong web platform review and integration plan before this goes to Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"I do think we need a strong web platform review and integration plan before this goes to Stage 3"},"ts":1666017584406,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a8_EpDjLWx_GbLeZlbcCxB_LeAGjalt892vW_gchtDs"},
{"content":{"body":" * I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3","m.new_content":{"body":"I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3"},"m.relates_to":{"event_id":"$a8_EpDjLWx_GbLeZlbcCxB_LeAGjalt892vW_gchtDs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I do think we need a strong web platform review and roughly agreed-on integration plan before this goes to Stage 3"},"ts":1666017616681,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MgXxYdbJidPnqFauELxJ9Gb-ASEh1-Zhunz7k8b4Ezk"},
{"content":{"body":"Interesting, we did talk about this at some point. For addEventListener(), is there some way dispose could integrate with AbortSignal instead?","msgtype":"m.text","org.matrix.msc1767.text":"Interesting, we did talk about this at some point. For addEventListener(), is there some way dispose could integrate with AbortSignal instead?"},"ts":1666017730400,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$-wCfHXWvf2krJHmsTrxEkZkMhEgQQhTRmWHet_IE5sw"},
{"content":{"body":"Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.","msgtype":"m.text","org.matrix.msc1767.text":"Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup."},"ts":1666017759054,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns"},
{"content":{"body":"yeah, I guess this is an addition I'd make to the integration plan above, that disposing an AbortController would abort it.","msgtype":"m.text","org.matrix.msc1767.text":"yeah, I guess this is an addition I'd make to the integration plan above, that disposing an AbortController would abort it."},"ts":1666017779681,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fVEuTvHhgCH4iRxMEf2sa4eKj8jZ0Rb8z6tJuWY4lCw"},
{"content":{"body":"(my intuitions here are largely based on a conversation I had with wycats)","msgtype":"m.text","org.matrix.msc1767.text":"(my intuitions here are largely based on a conversation I had with wycats)"},"ts":1666017810926,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R-XSYhqOMZ7VLgqI7kbyjq9oRgfQpN-NhBhQjo7cdDg"},
{"content":{"body":"I guess in general I wonder how much of this can be done through signals instead. I've been kinda seeing that as our \"cleanup API\".","msgtype":"m.text","org.matrix.msc1767.text":"I guess in general I wonder how much of this can be done through signals instead. I've been kinda seeing that as our \"cleanup API\"."},"ts":1666017981598,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$sAAwKFPz9_PMQ7BqAtjy1y-uXIvsZAQ22fTKSO8XkHc"},
{"content":{"body":"what do you mean by signals?","msgtype":"m.text","org.matrix.msc1767.text":"what do you mean by signals?"},"ts":1666018004618,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bSJXMz3H1sLY42QCa5RV6-jrmwOJOL1BUpXv4DlunXQ"},
{"content":{"body":"https://dom.spec.whatwg.org/#aborting-ongoing-activities","msgtype":"m.text","org.matrix.msc1767.text":"https://dom.spec.whatwg.org/#aborting-ongoing-activities"},"ts":1666018026206,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$MTYDelgqHkduUwoqcKmVNpXW8L4ufnJakA8uPEi_1ow"},
{"content":{"body":"oh AbortSignals","msgtype":"m.text","org.matrix.msc1767.text":"oh AbortSignals"},"ts":1666018039064,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ddj5dGbElCcqUNb-EJm8N_E84x-Bv68JiXGFMBGsOSg"},
{"content":{"body":"I call them signals as they're somewhat more general-purpose these days (and that's how the dictionary member is called, well in the singular)","msgtype":"m.text","org.matrix.msc1767.text":"I call them signals as they're somewhat more general-purpose these days (and that's how the dictionary member is called, well in the singular)"},"ts":1666018088579,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$oSBxUWZzoCuMIN_fWIdfTgdY_pZ3GwLcLSAYad6zamM"},
{"content":{"body":"Though the documentation doesn't reflect that terribly well","msgtype":"m.text","org.matrix.msc1767.text":"Though the documentation doesn't reflect that terribly well"},"ts":1666018107484,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$UaFaF3eUAdW3DwR6iKog46QCAPzOAxhpeqiWSamGSp8"},
{"content":{"body":"makes sense, the term signal is just a bit overloaded in the ecosystem...","msgtype":"m.text","org.matrix.msc1767.text":"makes sense, the term signal is just a bit overloaded in the ecosystem..."},"ts":1666018114504,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$okaiSeDgldzSjW3vtMui8Ic9u7hW-rz76GyodkGpDDM"},
{"content":{"body":"yeah I guess my intuition is that a signal is a more flexible thing in the same space and a bit less convenient, which is why I thought that Symbol.dispose would generalize the set of things that you can abort","msgtype":"m.text","org.matrix.msc1767.text":"yeah I guess my intuition is that a signal is a more flexible thing in the same space and a bit less convenient, which is why I thought that Symbol.dispose would generalize the set of things that you can abort"},"ts":1666018179611,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3HTXqLAmEGj-EFcTl2VegLVlyYme3Is1Wyyh1Whe970"},
{"content":{"body":"As in, do we want Worker's terminate() to be pluggable in some way or should Worker just take a signal","msgtype":"m.text","org.matrix.msc1767.text":"As in, do we want Worker's terminate() to be pluggable in some way or should Worker just take a signal"},"ts":1666018181556,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$yS52t705VThd3AiTNQf9aNaxJwHv-ifgU6k7MfGCAfI"},
{"content":{"body":"it's sort of convenient to just call the method directly on the thing, rather than keeping around some other object","msgtype":"m.text","org.matrix.msc1767.text":"it's sort of convenient to just call the method directly on the thing, rather than keeping around some other object"},"ts":1666018213055,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CkQ_iWSbIVQDO-7WaOWtVnaU6Zyb_VYu9mp2ZBDQUd0"},
{"content":{"body":"so... you might want both versions","msgtype":"m.text","org.matrix.msc1767.text":"so... you might want both versions"},"ts":1666018218579,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m-zAwU_4X2fcYsxC4s8mpWTWW-iMmZq_To2oAoOupZ4"},
{"content":{"body":"(not extremely satisifying, the duplication)","msgtype":"m.text","org.matrix.msc1767.text":"(not extremely satisifying, the duplication)"},"ts":1666018240803,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HmUcQNFCwa4xKIzdKn9hm3NNVRyy6-Dbr9iey16Vpz8"},
{"content":{"body":" * (not extremely satisifying, the duplication)","m.new_content":{"body":"(not extremely satisifying, the duplication)","msgtype":"m.text","org.matrix.msc1767.text":"(not extremely satisifying, the duplication)"},"m.relates_to":{"event_id":"$HmUcQNFCwa4xKIzdKn9hm3NNVRyy6-Dbr9iey16Vpz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (not extremely satisifying, the duplication)"},"ts":1666018248191,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oALIHyTkIJBqn0ZKDjZpunqm8pkDiyBJvTrFFLpLHtY"},
{"content":{"body":"Yeah maybe, exploring that seems worthwhile as part of stage 2-3","msgtype":"m.text","org.matrix.msc1767.text":"Yeah maybe, exploring that seems worthwhile as part of stage 2-3"},"ts":1666018261294,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$aC80c_WHr2gxwYIHjaCLn2eRvwRqTm4J_Q6TBhnpqO0"},
{"content":{"body":"yeah we could really use more WHATWG/DOM input here. I'm glad that Ron got this started with a proposal but we need more conversation here.","msgtype":"m.text","org.matrix.msc1767.text":"yeah we could really use more WHATWG/DOM input here. I'm glad that Ron got this started with a proposal but we need more conversation here."},"ts":1666018308795,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JCil5TmgjsRrTG0c_yKf81GqqKoqvL38fPM1m4SbpZM"},
{"content":{"body":"To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","format":"org.matrix.custom.html","formatted_body":"To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","mimetype":"text/plain"},{"body":"To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.","mimetype":"text/html"}]},"ts":1666018675701,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ"},
{"content":{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit `await` pause at the end of the block","format":"org.matrix.custom.html","formatted_body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit <code>await</code> pause at the end of the block","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit `await` pause at the end of the block","mimetype":"text/plain"},{"body":"One reason the syntax is delayed/omitted is because there's strong interest in an RAII-style syntax for this feature, but it'd be weird if we had a totally implicit <code>await</code> pause at the end of the block","mimetype":"text/html"}]},"ts":1666018736046,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zjHyAzrvlC46y1nIIRSg2xOYJE4yltZAxMnCr-_ZVnA"},
{"content":{"body":"I advocated for just focusing on the sync case for now, and being OK with these async disposals being launched off into space (I think this makes sense for cases that are like resource cleanup, though not for cases that are about committing storage)","msgtype":"m.text","org.matrix.msc1767.text":"I advocated for just focusing on the sync case for now, and being OK with these async disposals being launched off into space (I think this makes sense for cases that are like resource cleanup, though not for cases that are about committing storage)"},"ts":1666018790127,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x9_YyeP367R_IGIrHDIfeiMWvJmEq7_QV9_LhJYZNvw"},
{"content":{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"ts":1666018824842,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jIWVioy9xPt1nKr9K6cp3CNxVg7X84Yt8If4LpnLN9M"},
{"content":{"body":" * an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":" * an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","m.new_content":{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","format":"org.matrix.custom.html","formatted_body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":"an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jIWVioy9xPt1nKr9K6cp3CNxVg7X84Yt8If4LpnLN9M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * an async disposal construct would probably look more block-like (as in Python `with` statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/plain"},{"body":" * an async disposal construct would probably look more block-like (as in Python <code>with</code> statements), but this is less usable for common sync disposal cases, where a flat RAII-style thing is more usable.","mimetype":"text/html"}]},"ts":1666018838646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bt65p6597h1WA-LN5WqzzbQSi6dGo82gOKtqfDjC_1E"},
{"content":{"body":"I guess AbortSignal has no way to wait for something to be committed...","msgtype":"m.text","org.matrix.msc1767.text":"I guess AbortSignal has no way to wait for something to be committed..."},"ts":1666021781090,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P70ueT40vf9tj_8R1eA1X9xNcyZic1xduYnMOdc9RSI"},
{"content":{"body":"> <@annevk:matrix.org> Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.\n\nDoes `AbortController` have a concept of \"I should never be aborted\"? In C#, a `CancellationTokenSource` can be disposed without calling `cancel()`, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for `AbortController`/`AbortSignal`, since I'm not 100% sure I agree that disposing of an `AbortController` should cause an abort.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Perhaps it invokes AbortController&#39;s abort(). Which then does a bunch of cleanup.</blockquote></mx-reply>Does <code>AbortController</code> have a concept of &quot;I should never be aborted&quot;? In C#, a <code>CancellationTokenSource</code> can be disposed without calling <code>cancel()</code>, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for <code>AbortController</code>/<code>AbortSignal</code>, since I'm not 100% sure I agree that disposing of an <code>AbortController</code> should cause an abort.","m.relates_to":{"m.in_reply_to":{"event_id":"$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> Perhaps it invokes AbortController's abort(). Which then does a bunch of cleanup.\n\nDoes `AbortController` have a concept of \"I should never be aborted\"? In C#, a `CancellationTokenSource` can be disposed without calling `cancel()`, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for `AbortController`/`AbortSignal`, since I'm not 100% sure I agree that disposing of an `AbortController` should cause an abort.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$W5HovJemywhalwrC3-rr0nDLYCGUtmxkwZOZnzhNSns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>Perhaps it invokes AbortController&#39;s abort(). Which then does a bunch of cleanup.</blockquote></mx-reply>Does <code>AbortController</code> have a concept of &quot;I should never be aborted&quot;? In C#, a <code>CancellationTokenSource</code> can be disposed without calling <code>cancel()</code>, in which case it can never be canceled and any registered subscriptions or linked tokens can be GC'd. I'd love to see something like that for <code>AbortController</code>/<code>AbortSignal</code>, since I'm not 100% sure I agree that disposing of an <code>AbortController</code> should cause an abort.","mimetype":"text/html"}]},"ts":1666027940118,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y_jOr479BR1gxwkVSeMxf_6sVmQBle5GUWnASLM5C-I"},
{"content":{"body":"> <@annevk:matrix.org> To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.\n\nThere are plenty of built-in symbols that are unrelated to syntax.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.</blockquote></mx-reply>There are plenty of built-in symbols that are unrelated to syntax.","m.relates_to":{"m.in_reply_to":{"event_id":"$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@annevk:matrix.org> To get back to the earlier question, I think I agree with Domenic that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.\n\nThere are plenty of built-in symbols that are unrelated to syntax.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$v-5NuGHqZbwReTIh52es27QX9Hs0Ve7zC_Jcp4P0CsQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:matrix.org\">@annevk:matrix.org</a><br>To get back to the earlier question, I think I agree with <a href=\"https://matrix.to/#/@domenicdenicola:matrix.org\">Domenic</a> that it would be good if adding an @@ thing provided a benefit of sorts other than a consistent name. I could see that still being the case without syntax if it always returned a promise for the async case, which seems unlikely to be what the web platform currently offers. But syntax support does seem nicer.</blockquote></mx-reply>There are plenty of built-in symbols that are unrelated to syntax.","mimetype":"text/html"}]},"ts":1666028004668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JlKSOV4SNtJ7Ip_DS_S6gPIL1dgRw-x-FM3-rAqFoyc"},
{"content":{"body":"rbuckton: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: What do you think of the growing use in the web platform of AbortSignal as a way to dispose of things?","mimetype":"text/html"}]},"ts":1666029648347,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YE1dNJknxO6rwR4eudIcWQXjZKx9Pj5912ssa9zSuc8"},
{"content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032762181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0"},
{"content":{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","m.new_content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the callbacks when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032776802,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OqAfEbcggViWgO7GSJ3gXMOZCKu2UKnCO5tZKXWafxA"},
{"content":{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","m.new_content":{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","format":"org.matrix.custom.html","formatted_body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":"Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PIqgxNAKpsveqmVOa7A9RGjabiGGGOLAi2_YPRy94-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Unfortunately, userland use of `AbortSignal` via the `abort` event isn't a 100% reliable mechanism for disposal. The `abort` event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of `using` with respect to error aggregation (nor any potential `Symbol.exitContext` extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/plain"},{"body":" * Unfortunately, userland use of <code>AbortSignal</code> via the <code>abort</code> event isn't a 100% reliable mechanism for disposal. The <code>abort</code> event uses DOM event dispatch, which is asynchronous, and thus won't work well with the semantics of <code>using</code> with respect to error aggregation (nor any potential <code>Symbol.exitContext</code> extension in the future that might allow for control over error suppression). It also doesn't release the event listeners when the controller is aborted, which can hold onto references that should be GC'd.","mimetype":"text/html"}]},"ts":1666032787560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$67yGkdt8zVpDov8qxgQ-ls2yhr-z5t6QjUe8x-zHbx4"},
{"content":{"body":"I don't think `AbortSignal` is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","format":"org.matrix.custom.html","formatted_body":"I don't think <code>AbortSignal</code> is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think `AbortSignal` is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","mimetype":"text/plain"},{"body":"I don't think <code>AbortSignal</code> is the right primitive from a resource management perspective, though its fine as a async coordination primitive.","mimetype":"text/html"}]},"ts":1666032851934,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q5-HSOFlAVzGjTuHT3wO2coMTQ4TLcsXQrXwTOTCa64"},
{"content":{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"ts":1666033390244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jLbFeAn6A8Krd8JSE3hKwwaWEDvG_bUzaY7rBgEYKKw"},
{"content":{"body":" * That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":" * That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","m.new_content":{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","format":"org.matrix.custom.html","formatted_body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":"That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jLbFeAn6A8Krd8JSE3hKwwaWEDvG_bUzaY7rBgEYKKw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That said, DOM built-ins aren't handled in the same way that userland `abort` event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/plain"},{"body":" * That said, DOM built-ins aren't handled in the same way that userland <code>abort</code> event handlers are. They are privileged and abort synchronously, but the dual nature of sync abort for built-ins and async abort for userland has the potential to cause confusion.","mimetype":"text/html"}]},"ts":1666033404806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lbYk-BcnZ_NL1Q01vxK0RuXIMNodpjkBNwNlpWu73VY"},
{"content":{"body":"I guess coming up with a shared understanding of this area would be good","msgtype":"m.text","org.matrix.msc1767.text":"I guess coming up with a shared understanding of this area would be good"},"ts":1666033438770,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kw6unSbW_9lARSESEnEWAl8-OUXp8lFejqSeVJv6FTI"},
{"content":{"body":"we shouldn't really have two mechanisms that are parallel due to disagreements about how the same problem should be approached","msgtype":"m.text","org.matrix.msc1767.text":"we shouldn't really have two mechanisms that are parallel due to disagreements about how the same problem should be approached"},"ts":1666033461801,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZOQ1ebG9Bo0P81jRRLiUqajGURhTdLojmGjA4L6uKQs"},
{"content":{"body":"> The `abort` event uses DOM event dispatch, which is asynchronous\n\n... is it?\n\n```\nlet controller = new AbortController();\nlet signal = controller.signal;\n\nsignal.addEventListener('abort', () => { console.log('aborted'); });\ncontroller.abort();\nconsole.log('after calling abort');\n```\nprints \"aborted\" before it prints \"after calling abort\"","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The <code>abort</code> event uses DOM event dispatch, which is asynchronous</p>\n</blockquote>\n<p>... is it?</p>\n<pre><code>let controller = new AbortController();\nlet signal = controller.signal;\n\nsignal.addEventListener('abort', () =&gt; { console.log('aborted'); });\ncontroller.abort();\nconsole.log('after calling abort');\n</code></pre>\n<p>prints &quot;aborted&quot; before it prints &quot;after calling abort&quot;</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> The `abort` event uses DOM event dispatch, which is asynchronous\n\n... is it?\n\n```\nlet controller = new AbortController();\nlet signal = controller.signal;\n\nsignal.addEventListener('abort', () => { console.log('aborted'); });\ncontroller.abort();\nconsole.log('after calling abort');\n```\nprints \"aborted\" before it prints \"after calling abort\"","mimetype":"text/plain"},{"body":"<blockquote>\n<p>The <code>abort</code> event uses DOM event dispatch, which is asynchronous</p>\n</blockquote>\n<p>... is it?</p>\n<pre><code>let controller = new AbortController();\nlet signal = controller.signal;\n\nsignal.addEventListener('abort', () =&gt; { console.log('aborted'); });\ncontroller.abort();\nconsole.log('after calling abort');\n</code></pre>\n<p>prints &quot;aborted&quot; before it prints &quot;after calling abort&quot;</p>\n","mimetype":"text/html"}]},"ts":1666034084381,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g7gzBkCD2PGsxp5wE1FFHuTJ-qb5sWpJqydLS3ypRdI"},
{"content":{"body":"by \"asynchronous\" do you mean \"errors thrown by event listeners aren't propagated to the person who called `.abort()`\"? because I'd imagine that's a solvable problem (`controller.abort(null, { handleErrors: true })` or something)","format":"org.matrix.custom.html","formatted_body":"by &quot;asynchronous&quot; do you mean &quot;errors thrown by event listeners aren't propagated to the person who called <code>.abort()</code>&quot;? because I'd imagine that's a solvable problem (<code>controller.abort(null, { handleErrors: true })</code> or something)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"by \"asynchronous\" do you mean \"errors thrown by event listeners aren't propagated to the person who called `.abort()`\"? because I'd imagine that's a solvable problem (`controller.abort(null, { handleErrors: true })` or something)","mimetype":"text/plain"},{"body":"by &quot;asynchronous&quot; do you mean &quot;errors thrown by event listeners aren't propagated to the person who called <code>.abort()</code>&quot;? because I'd imagine that's a solvable problem (<code>controller.abort(null, { handleErrors: true })</code> or something)","mimetype":"text/html"}]},"ts":1666034264126,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9ErYQ4cZJ18U0-LffJIdVpK7o9qyPRaJjhDuKcQdh-I"},
{"content":{"body":"Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","format":"org.matrix.custom.html","formatted_body":"Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","mimetype":"text/plain"},{"body":"Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","mimetype":"text/html"}]},"ts":1666036907465,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3ToZDBkLIP0AiMg_Gbd1KdUTS9wUCVVh3jRUgl7Rrc8"},
{"content":{"body":" * Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","format":"org.matrix.custom.html","formatted_body":" * Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","m.new_content":{"body":"Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","format":"org.matrix.custom.html","formatted_body":"Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","mimetype":"text/plain"},{"body":"Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3ToZDBkLIP0AiMg_Gbd1KdUTS9wUCVVh3jRUgl7Rrc8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Partially, while I admit my original impression was that `abort` event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before `\"abort\"` callbacks regardless of the order things are attached to the signal.","mimetype":"text/plain"},{"body":" * Partially, while I admit my original impression was that <code>abort</code> event handlers were invoked in a later turn, there is still the issue that errors are reported out of band from the invocation, and that built-ins are handled before <code>&quot;abort&quot;</code> callbacks regardless of the order things are attached to the signal.","mimetype":"text/html"}]},"ts":1666036921585,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kADIbEjjwPmp_X-Sjya2OSOsuhaeaJp-I6iJ1P5osh4"},
{"content":{"body":"Either way, my concern stands. If `using controller = new AbortController()` were to abort on dispose, I'd like a way to prevent that from happening so that `abort` event listeners aren't triggered in the event my code runs to completion successfully.","format":"org.matrix.custom.html","formatted_body":"Either way, my concern stands. If <code>using controller = new AbortController()</code> were to abort on dispose, I'd like a way to prevent that from happening so that <code>abort</code> event listeners aren't triggered in the event my code runs to completion successfully.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Either way, my concern stands. If `using controller = new AbortController()` were to abort on dispose, I'd like a way to prevent that from happening so that `abort` event listeners aren't triggered in the event my code runs to completion successfully.","mimetype":"text/plain"},{"body":"Either way, my concern stands. If <code>using controller = new AbortController()</code> were to abort on dispose, I'd like a way to prevent that from happening so that <code>abort</code> event listeners aren't triggered in the event my code runs to completion successfully.","mimetype":"text/html"}]},"ts":1666037019049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kJLisn1QXX0_lfUeUIf81mNKlfK02SpMIQ2I9_l9E3c"},
{"content":{"body":"I tend to lean more towards the behavior here, based on my prior experience: https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.dispose?view=net-7.0. `CancellationTokenSource.Dispose()` does not cancel","format":"org.matrix.custom.html","formatted_body":"I tend to lean more towards the behavior here, based on my prior experience: https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.dispose?view=net-7.0. <code>CancellationTokenSource.Dispose()</code> does not cancel","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I tend to lean more towards the behavior here, based on my prior experience: https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.dispose?view=net-7.0. `CancellationTokenSource.Dispose()` does not cancel","mimetype":"text/plain"},{"body":"I tend to lean more towards the behavior here, based on my prior experience: https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.dispose?view=net-7.0. <code>CancellationTokenSource.Dispose()</code> does not cancel","mimetype":"text/html"}]},"ts":1666037212552,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zhifn3fZrYGncSOl1EYWkcGQbv6TvVn3BTXUNVEdaL8"},
{"content":{"body":"with the way that cancellations are used in GNOME, which is the other platform I'm familiar with that has such a facility, it wouldn't work well if [`Gio.Cancellable`](https://gjs-docs.gnome.org/gio20~2.66p/gio.cancellable) aborted on dispose","format":"org.matrix.custom.html","formatted_body":"with the way that cancellations are used in GNOME, which is the other platform I'm familiar with that has such a facility, it wouldn't work well if <a href=\"https://gjs-docs.gnome.org/gio20~2.66p/gio.cancellable\"><code>Gio.Cancellable</code></a> aborted on dispose","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"with the way that cancellations are used in GNOME, which is the other platform I'm familiar with that has such a facility, it wouldn't work well if [`Gio.Cancellable`](https://gjs-docs.gnome.org/gio20~2.66p/gio.cancellable) aborted on dispose","mimetype":"text/plain"},{"body":"with the way that cancellations are used in GNOME, which is the other platform I'm familiar with that has such a facility, it wouldn't work well if <a href=\"https://gjs-docs.gnome.org/gio20~2.66p/gio.cancellable\"><code>Gio.Cancellable</code></a> aborted on dispose","mimetype":"text/html"}]},"ts":1666037304357,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$qzOF0QJIol0vn7JmnDJn6gn_oFqmSoxFdrqSdfPLBtI"},
{"content":{"body":"Mostly because the link between `using` and `\"abort\"` event listeners firing isn't immediately obvious, so its fairly easy to write code that only expects to be triggered while the operation is still active.","format":"org.matrix.custom.html","formatted_body":"Mostly because the link between <code>using</code> and <code>&quot;abort&quot;</code> event listeners firing isn't immediately obvious, so its fairly easy to write code that only expects to be triggered while the operation is still active.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mostly because the link between `using` and `\"abort\"` event listeners firing isn't immediately obvious, so its fairly easy to write code that only expects to be triggered while the operation is still active.","mimetype":"text/plain"},{"body":"Mostly because the link between <code>using</code> and <code>&quot;abort&quot;</code> event listeners firing isn't immediately obvious, so its fairly easy to write code that only expects to be triggered while the operation is still active.","mimetype":"text/html"}]},"ts":1666037328377,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6X6Hw6dJ6jdrOEBbwKWaTzZNeBhvQJEOKyktioys3bI"},
{"content":{"body":"on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","format":"org.matrix.custom.html","formatted_body":"<p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","mimetype":"text/plain"},{"body":"<p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","mimetype":"text/html"}]},"ts":1666037490273,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3B8qxSd5KakqIoLuGu80KYlIPVc-kjKakn-UF4ZPHn8"},
{"content":{"body":" * on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","format":"org.matrix.custom.html","formatted_body":" * <p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","m.new_content":{"body":"on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","format":"org.matrix.custom.html","formatted_body":"<p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","mimetype":"text/plain"},{"body":"<p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3B8qxSd5KakqIoLuGu80KYlIPVc-kjKakn-UF4ZPHn8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * on the other hand,\n\n```\nusing controller = new AbortController();\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n```\n\nwould be really nice","mimetype":"text/plain"},{"body":" * <p>on the other hand,</p>\n<pre><code>using controller = new AbortController();\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n</code></pre>\n<p>would be really nice</p>\n","mimetype":"text/html"}]},"ts":1666037494332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zmr8YYOahMjY2KA9sKo3hH54NQPoxgR6sTvgzpv0W8o"},
{"content":{"body":"(I don't yet have an opinion on this either way, just thinking through use cases)","msgtype":"m.text","org.matrix.msc1767.text":"(I don't yet have an opinion on this either way, just thinking through use cases)"},"ts":1666037504752,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xk5qxwOIcZymgcTT06iSw1d_-FUyuclg7iNJcammoxo"},
{"content":{"body":"either way, you need to be able to model both behaviors. \n```js\n// option 1: cleanup but don't abort on dispose:\nusing controller = new AbortController();\n\n// this could also be: `using _ = controller.enter();` or some better name\nusing stack = new DisposableStack();\nstack.defer(() => controller.abort());\n\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller is disposed. since it is no longer usable, callbacks etc. can be GC'd\n```\n\n```js\n// option 2: abort on dispose\nusing stack = new DisposableStack();\nconst controller = stack.use(new AbortController());\n\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller isn't disposed, any closure that captures and holds a reference to `controller` will prevent GC of `abort` callbacks\n```","format":"org.matrix.custom.html","formatted_body":"<p>either way, you need to be able to model both behaviors.</p>\n<pre><code class=\"language-js\">// option 1: cleanup but don't abort on dispose:\nusing controller = new AbortController();\n\n// this could also be: `using _ = controller.enter();` or some better name\nusing stack = new DisposableStack();\nstack.defer(() =&gt; controller.abort());\n\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller is disposed. since it is no longer usable, callbacks etc. can be GC'd\n</code></pre>\n<pre><code class=\"language-js\">// option 2: abort on dispose\nusing stack = new DisposableStack();\nconst controller = stack.use(new AbortController());\n\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller isn't disposed, any closure that captures and holds a reference to `controller` will prevent GC of `abort` callbacks\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"either way, you need to be able to model both behaviors. \n```js\n// option 1: cleanup but don't abort on dispose:\nusing controller = new AbortController();\n\n// this could also be: `using _ = controller.enter();` or some better name\nusing stack = new DisposableStack();\nstack.defer(() => controller.abort());\n\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller is disposed. since it is no longer usable, callbacks etc. can be GC'd\n```\n\n```js\n// option 2: abort on dispose\nusing stack = new DisposableStack();\nconst controller = stack.use(new AbortController());\n\nlet pages = await Promise.all(urls.map(url => fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller isn't disposed, any closure that captures and holds a reference to `controller` will prevent GC of `abort` callbacks\n```","mimetype":"text/plain"},{"body":"<p>either way, you need to be able to model both behaviors.</p>\n<pre><code class=\"language-js\">// option 1: cleanup but don't abort on dispose:\nusing controller = new AbortController();\n\n// this could also be: `using _ = controller.enter();` or some better name\nusing stack = new DisposableStack();\nstack.defer(() =&gt; controller.abort());\n\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller is disposed. since it is no longer usable, callbacks etc. can be GC'd\n</code></pre>\n<pre><code class=\"language-js\">// option 2: abort on dispose\nusing stack = new DisposableStack();\nconst controller = stack.use(new AbortController());\n\nlet pages = await Promise.all(urls.map(url =&gt; fetch(url, { signal: controller.signal }));\n// automatically cancels outstanding requests if any request fails\n\nstack.move(); // empties out stack\n\n// no longer tries to abort for any errors that follow.\n\n// controller isn't disposed, any closure that captures and holds a reference to `controller` will prevent GC of `abort` callbacks\n</code></pre>\n","mimetype":"text/html"}]},"ts":1666038109134,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$15Ur-qmPzFxtqs5_q9BheYVVMgVoOg91fBpCWK_8leU"},
{"content":{"body":"I prefer option 1 because its more GC friendly wrt/closures. If disposing the controller doesn't abort it, but instead makes it unusable and frees references to held \"abort algorithms\" or userland `abort` event handlers, then it doesn't matter if a closure holds a reference to the controller since everything it was holding can be GC'd. Option 2 doesn't have that benefit.","format":"org.matrix.custom.html","formatted_body":"I prefer option 1 because its more GC friendly wrt/closures. If disposing the controller doesn't abort it, but instead makes it unusable and frees references to held &quot;abort algorithms&quot; or userland <code>abort</code> event handlers, then it doesn't matter if a closure holds a reference to the controller since everything it was holding can be GC'd. Option 2 doesn't have that benefit.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I prefer option 1 because its more GC friendly wrt/closures. If disposing the controller doesn't abort it, but instead makes it unusable and frees references to held \"abort algorithms\" or userland `abort` event handlers, then it doesn't matter if a closure holds a reference to the controller since everything it was holding can be GC'd. Option 2 doesn't have that benefit.","mimetype":"text/plain"},{"body":"I prefer option 1 because its more GC friendly wrt/closures. If disposing the controller doesn't abort it, but instead makes it unusable and frees references to held &quot;abort algorithms&quot; or userland <code>abort</code> event handlers, then it doesn't matter if a closure holds a reference to the controller since everything it was holding can be GC'd. Option 2 doesn't have that benefit.","mimetype":"text/html"}]},"ts":1666038259900,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QSPk6o0v4BW9nHSgKLBGkVtX1BQ0gGGyhTyPtGliZCM"},
{"content":{"body":"hmmm, yeah; on the other hand it makes the simple case a lot uglier","msgtype":"m.text","org.matrix.msc1767.text":"hmmm, yeah; on the other hand it makes the simple case a lot uglier"},"ts":1666038307987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B8sOQaa08qfFsZYgxXGbDDzRlCO_2yJ0isKLl8F5ItE"},
{"content":{"body":"Also, option 1 can be simplified by introducing a method on `AbortController.prototype` that lets you opt-in to \"abort-on-dispose\" semantics.","format":"org.matrix.custom.html","formatted_body":"Also, option 1 can be simplified by introducing a method on <code>AbortController.prototype</code> that lets you opt-in to &quot;abort-on-dispose&quot; semantics.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, option 1 can be simplified by introducing a method on `AbortController.prototype` that lets you opt-in to \"abort-on-dispose\" semantics.","mimetype":"text/plain"},{"body":"Also, option 1 can be simplified by introducing a method on <code>AbortController.prototype</code> that lets you opt-in to &quot;abort-on-dispose&quot; semantics.","mimetype":"text/html"}]},"ts":1666038309701,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$P1Dlce9yoDELos_ntcMIGhCVUdI1q0ED4aK1OTvIAAE"},
{"content":{"body":"yeah","msgtype":"m.text","org.matrix.msc1767.text":"yeah"},"ts":1666038380805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M7Yv7gKQb2MnnA6tB5NSGFQ-Yt5bzm8vzyAsHQ1nG-8"},
{"content":{"body":"> <@bakkot:matrix.org> hmmm, yeah; on the other hand it makes the simple case a lot uglier\n\nNot if you have some kind of \"enter abort context\" method like I mentioned above, i.e.:\n```js\nusing controller = new AbortController();\nusing ctx = controller.enterAbortOnDisposeContext(); // needs a better name.\nlet pages = await ...;\nctx.exit(); // exit the context without triggering dispose\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$B8sOQaa08qfFsZYgxXGbDDzRlCO_2yJ0isKLl8F5ItE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>hmmm, yeah; on the other hand it makes the simple case a lot uglier</blockquote></mx-reply><p>Not if you have some kind of &quot;enter abort context&quot; method like I mentioned above, i.e.:</p>\n<pre><code class=\"language-js\">using controller = new AbortController();\nusing ctx = controller.enterAbortOnDisposeContext(); // needs a better name.\nlet pages = await ...;\nctx.exit(); // exit the context without triggering dispose\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$B8sOQaa08qfFsZYgxXGbDDzRlCO_2yJ0isKLl8F5ItE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> hmmm, yeah; on the other hand it makes the simple case a lot uglier\n\nNot if you have some kind of \"enter abort context\" method like I mentioned above, i.e.:\n```js\nusing controller = new AbortController();\nusing ctx = controller.enterAbortOnDisposeContext(); // needs a better name.\nlet pages = await ...;\nctx.exit(); // exit the context without triggering dispose\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$B8sOQaa08qfFsZYgxXGbDDzRlCO_2yJ0isKLl8F5ItE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>hmmm, yeah; on the other hand it makes the simple case a lot uglier</blockquote></mx-reply><p>Not if you have some kind of &quot;enter abort context&quot; method like I mentioned above, i.e.:</p>\n<pre><code class=\"language-js\">using controller = new AbortController();\nusing ctx = controller.enterAbortOnDisposeContext(); // needs a better name.\nlet pages = await ...;\nctx.exit(); // exit the context without triggering dispose\n</code></pre>\n","mimetype":"text/html"}]},"ts":1666038429831,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_KQtZYJGGp50QQBiqcWXXoJrZh-f7nQG2PDnnYLLUuw"},
{"content":{"body":"right, I just mean it makes the simple case uglier unless you also add other stuff","msgtype":"m.text","org.matrix.msc1767.text":"right, I just mean it makes the simple case uglier unless you also add other stuff"},"ts":1666038466220,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dbxxZF-6eo4JyVQ01R1C4drG-vMkKvs2TRxR5efZNEM"},
{"content":{"body":"Defining such lifetime contexts is well within the domain of resource management (see Python's `contextlib`)","format":"org.matrix.custom.html","formatted_body":"Defining such lifetime contexts is well within the domain of resource management (see Python's <code>contextlib</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Defining such lifetime contexts is well within the domain of resource management (see Python's `contextlib`)","mimetype":"text/plain"},{"body":"Defining such lifetime contexts is well within the domain of resource management (see Python's <code>contextlib</code>)","mimetype":"text/html"}]},"ts":1666038491694,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$elTq2szmxQAM2CqnPphglX5mMJL39QjVDfIP3dZMoHw"},
{"content":{"body":"I could also imagine instead having a `AbortController.AutoCancel` constructor, so `using controller = new AbortController.AutoCancel()` would give you a controller with the auto-cancel behavior","format":"org.matrix.custom.html","formatted_body":"I could also imagine instead having a <code>AbortController.AutoCancel</code> constructor, so <code>using controller = new AbortController.AutoCancel()</code> would give you a controller with the auto-cancel behavior","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I could also imagine instead having a `AbortController.AutoCancel` constructor, so `using controller = new AbortController.AutoCancel()` would give you a controller with the auto-cancel behavior","mimetype":"text/plain"},{"body":"I could also imagine instead having a <code>AbortController.AutoCancel</code> constructor, so <code>using controller = new AbortController.AutoCancel()</code> would give you a controller with the auto-cancel behavior","mimetype":"text/html"}]},"ts":1666038514427,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$STWYZdSzjEhdGcE6-JE_zSrQdAPB03_SEN7r79lN_fs"},
{"content":{"body":"You say simple case, but both the \"i want to abort on dispose\" and the \"i don't want to abort on dispose\" scenarios are equally as valid.","msgtype":"m.text","org.matrix.msc1767.text":"You say simple case, but both the \"i want to abort on dispose\" and the \"i don't want to abort on dispose\" scenarios are equally as valid."},"ts":1666038528378,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EXRpMCHbV7SbsJY_GznZpPG-7r2oapQqMF_vEY4ukzc"},
{"content":{"body":"mm... I agree they are both _valid_, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code","format":"org.matrix.custom.html","formatted_body":"mm... I agree they are both <em>valid</em>, but personally I anticipate wanting the &quot;abort on dispose&quot; semantics several orders of magnitude more often than I want the &quot;don't want abort on dispose&quot; semantics, and I expect this is true of almost all JS code","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"mm... I agree they are both _valid_, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code","mimetype":"text/plain"},{"body":"mm... I agree they are both <em>valid</em>, but personally I anticipate wanting the &quot;abort on dispose&quot; semantics several orders of magnitude more often than I want the &quot;don't want abort on dispose&quot; semantics, and I expect this is true of almost all JS code","mimetype":"text/html"}]},"ts":1666038576565,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UZ3-adLPzGuFUIbzq1p3uO20rYm8hlo8efMu8TU2Lf0"},
{"content":{"body":"My examples illustrate how to do the same thing regardless of each behavior.","msgtype":"m.text","org.matrix.msc1767.text":"My examples illustrate how to do the same thing regardless of each behavior."},"ts":1666038586900,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IHLyiuJjsU_XghgS2qI8x_JvTDpQzmJtLbU_IY_L3Fs"},
{"content":{"body":"(at least if I have understood correctly that the only use case for disposal-without-abort is for GC)","msgtype":"m.text","org.matrix.msc1767.text":"(at least if I have understood correctly that the only use case for disposal-without-abort is for GC)"},"ts":1666038609649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WPQQLnM0E4jjRA1iipz_SkZH8Jr1l3G58-WTynKGX8A"},
{"content":{"body":"and yes I agree it will be possible to accomplish either semantics regardless of which the language makes simple, but I would like to make the common case the simple one, as a general rule","msgtype":"m.text","org.matrix.msc1767.text":"and yes I agree it will be possible to accomplish either semantics regardless of which the language makes simple, but I would like to make the common case the simple one, as a general rule"},"ts":1666038654933,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W42cxQVSdagK-_8wST4wg9sX1oFCzTJNp34uLG8uwfU"},
{"content":{"body":"> <@bakkot:matrix.org> mm... I agree they are both _valid_, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code\n\nI'm not sure I agree.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UZ3-adLPzGuFUIbzq1p3uO20rYm8hlo8efMu8TU2Lf0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>mm... I agree they are both <em>valid</em>, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code</blockquote></mx-reply>I'm not sure I agree.","m.relates_to":{"m.in_reply_to":{"event_id":"$UZ3-adLPzGuFUIbzq1p3uO20rYm8hlo8efMu8TU2Lf0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> mm... I agree they are both _valid_, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code\n\nI'm not sure I agree.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$UZ3-adLPzGuFUIbzq1p3uO20rYm8hlo8efMu8TU2Lf0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>mm... I agree they are both <em>valid</em>, but personally I anticipate wanting the \"abort on dispose\" semantics several orders of magnitude more often than I want the \"don't want abort on dispose\" semantics, and I expect this is true of almost all JS code</blockquote></mx-reply>I'm not sure I agree.","mimetype":"text/html"}]},"ts":1666038665058,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ksh84maVyfBm1v9yIZCz0zwuVjtM2GteOxnIYUD7l74"},
{"content":{"body":"(which case is more common is of course an empirical question I could be entirely wrong about; this is all off-the-cuff intuition)","msgtype":"m.text","org.matrix.msc1767.text":"(which case is more common is of course an empirical question I could be entirely wrong about; this is all off-the-cuff intuition)"},"ts":1666038699249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xrB6Avn9wPLMk64xi5pufUN5GXk4H9lyPXhsqfyz4oI"},
{"content":{"body":"I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish.","msgtype":"m.text","org.matrix.msc1767.text":"I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish."},"ts":1666038702981,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i9xaTMykWhFnaOtuq1YpSCjs3nvWW_6tcVJO46zvGBk"},
{"content":{"body":" * I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish.","m.new_content":{"body":"I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish.","msgtype":"m.text","org.matrix.msc1767.text":"I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish."},"m.relates_to":{"event_id":"$i9xaTMykWhFnaOtuq1YpSCjs3nvWW_6tcVJO46zvGBk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I'd rather make the case that is less likely to unexpectedly trigger unwanted behavior the easiest to accomplish."},"ts":1666038716410,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jd8VIUmGCoPlmafcb39zY9MxR0G6hKct4eyd1QgOOr8"},
{"content":{"body":"hm, well, I think I would be more surprised by not-abort-on-dispose than abort-on-dispose, right?","msgtype":"m.text","org.matrix.msc1767.text":"hm, well, I think I would be more surprised by not-abort-on-dispose than abort-on-dispose, right?"},"ts":1666038730987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LYbS8oIUzPWOMGoHTSlq2Itc8c2MBfGDIMRo2_-Q4yk"},
{"content":{"body":"Similar to how `DisposableStack.from()` seems like it would be common, but it's also wrong.","format":"org.matrix.custom.html","formatted_body":"Similar to how <code>DisposableStack.from()</code> seems like it would be common, but it's also wrong.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Similar to how `DisposableStack.from()` seems like it would be common, but it's also wrong.","mimetype":"text/plain"},{"body":"Similar to how <code>DisposableStack.from()</code> seems like it would be common, but it's also wrong.","mimetype":"text/html"}]},"ts":1666038756862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z5rg9Kh3ZiHuUVgeo3wFIpJtq8GItxTlPJoUeW53rvk"},
{"content":{"body":"Does an `AbortController` abort if it is GC'd?","format":"org.matrix.custom.html","formatted_body":"Does an <code>AbortController</code> abort if it is GC'd?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Does an `AbortController` abort if it is GC'd?","mimetype":"text/plain"},{"body":"Does an <code>AbortController</code> abort if it is GC'd?","mimetype":"text/html"}]},"ts":1666038783371,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fie6UBIs_XLwEmPp7eps66rhwBdLggHyMrPyKiZ4dEc"},
{"content":{"body":"No","msgtype":"m.text","org.matrix.msc1767.text":"No"},"ts":1666038796301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n94KvSXxV3o5o7255oXaKjLSEwwTzFVh6dIdvUzet-w"},
{"content":{"body":"I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","format":"org.matrix.custom.html","formatted_body":"<p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","mimetype":"text/plain"},{"body":"<p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","mimetype":"text/html"}]},"ts":1666038864186,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JK98R4HvHeS8awtxRAwiVNaUFJBdkR4rkDKXxH02DuQ"},
{"content":{"body":"While its expected that there will be cases that don't follow that behavior, in general disposables should try to be \"better than just GC\"","msgtype":"m.text","org.matrix.msc1767.text":"While its expected that there will be cases that don't follow that behavior, in general disposables should try to be \"better than just GC\""},"ts":1666038865564,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xsAacY2D2zUJrThio8MPe8zwnWzKgLYJmrDdI4BRKTI"},
{"content":{"body":" * I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","format":"org.matrix.custom.html","formatted_body":" * <p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","m.new_content":{"body":"I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","format":"org.matrix.custom.html","formatted_body":"<p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","mimetype":"text/plain"},{"body":"<p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$JK98R4HvHeS8awtxRAwiVNaUFJBdkR4rkDKXxH02DuQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.\n\nthe only thing AbortController right now does is cancellation, so it is natural to assume that `using x = new AbortController` is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).","mimetype":"text/plain"},{"body":" * <p>I think I also disagree about which semantics are more likely to be surprising here, and how bad the surprising behavior is in each case.</p>\n<p>the only thing AbortController right now does is cancellation, so it is natural to assume that <code>using x = new AbortController</code> is going to have the disposal semantics related to cancellation (i.e. abort-on-dispose). If you see that code but it doesn't do the thing it looks like (i.e. it just does GC), you're probably going to have a resource leak (e.g. requests will not be cancelled) which is very surprising to you, and you might well not even notice it (a fetch request not being cancelled is not an error you will likely notice).</p>\n","mimetype":"text/html"}]},"ts":1666038896570,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Ik4UZwOzofKAW5aHlXRt-SulufVVRThNIKLqhYxY-Q"},
{"content":{"body":"on the other hand, if `using x = new AbortController` _does_ do cancellation, and you're expecting it not to (... in which case, why did you write that code in the first place? were you looking for the GC semantics? JS developers probably are not looking for the GC semantics), what's the bug you get? probably an error in the happy path case? so you will almost certainly notice the error","format":"org.matrix.custom.html","formatted_body":"on the other hand, if <code>using x = new AbortController</code> <em>does</em> do cancellation, and you're expecting it not to (... in which case, why did you write that code in the first place? were you looking for the GC semantics? JS developers probably are not looking for the GC semantics), what's the bug you get? probably an error in the happy path case? so you will almost certainly notice the error","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"on the other hand, if `using x = new AbortController` _does_ do cancellation, and you're expecting it not to (... in which case, why did you write that code in the first place? were you looking for the GC semantics? JS developers probably are not looking for the GC semantics), what's the bug you get? probably an error in the happy path case? so you will almost certainly notice the error","mimetype":"text/plain"},{"body":"on the other hand, if <code>using x = new AbortController</code> <em>does</em> do cancellation, and you're expecting it not to (... in which case, why did you write that code in the first place? were you looking for the GC semantics? JS developers probably are not looking for the GC semantics), what's the bug you get? probably an error in the happy path case? so you will almost certainly notice the error","mimetype":"text/html"}]},"ts":1666038961137,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kdJYGRsjY1dpgWvJEtu2pNyIL_YscnmlYac1agRmQVI"},
{"content":{"body":"One of the big things I wanted for the cancellation proposal was the ability to clean up complex cancellation graphs when _not_ canceled. That is something that has never made it to `AbortController`/`AbortSignal`.","format":"org.matrix.custom.html","formatted_body":"One of the big things I wanted for the cancellation proposal was the ability to clean up complex cancellation graphs when <em>not</em> canceled. That is something that has never made it to <code>AbortController</code>/<code>AbortSignal</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One of the big things I wanted for the cancellation proposal was the ability to clean up complex cancellation graphs when _not_ canceled. That is something that has never made it to `AbortController`/`AbortSignal`.","mimetype":"text/plain"},{"body":"One of the big things I wanted for the cancellation proposal was the ability to clean up complex cancellation graphs when <em>not</em> canceled. That is something that has never made it to <code>AbortController</code>/<code>AbortSignal</code>.","mimetype":"text/html"}]},"ts":1666038982741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$f6kAymJYwI32u7_B3joD_f90kSm8wCFsw8ubG1-gihU"},
{"content":{"body":"I agree that's a reasonable thing to want, I just expect JS devs will not want that nearly as often as they want \"cancel outstanding fetch requests as soon as other simultaneous requests failed\"","msgtype":"m.text","org.matrix.msc1767.text":"I agree that's a reasonable thing to want, I just expect JS devs will not want that nearly as often as they want \"cancel outstanding fetch requests as soon as other simultaneous requests failed\""},"ts":1666039117722,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pbCjScOZAi5Lk6mE2kkDw_052LwX9ojqXxpcTuG2pc0"},
{"content":{"body":"I suppose in principle we could solve the \"people having the wrong expectations\" problem by not making `AbortController` disposable at all, and instead adding _two_ new properties (`.cleanupOnDispose` and `.abortOnDipsose`, say) each of which is disposable in different ways","format":"org.matrix.custom.html","formatted_body":"I suppose in principle we could solve the &quot;people having the wrong expectations&quot; problem by not making <code>AbortController</code> disposable at all, and instead adding <em>two</em> new properties (<code>.cleanupOnDispose</code> and <code>.abortOnDipsose</code>, say) each of which is disposable in different ways","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I suppose in principle we could solve the \"people having the wrong expectations\" problem by not making `AbortController` disposable at all, and instead adding _two_ new properties (`.cleanupOnDispose` and `.abortOnDipsose`, say) each of which is disposable in different ways","mimetype":"text/plain"},{"body":"I suppose in principle we could solve the &quot;people having the wrong expectations&quot; problem by not making <code>AbortController</code> disposable at all, and instead adding <em>two</em> new properties (<code>.cleanupOnDispose</code> and <code>.abortOnDipsose</code>, say) each of which is disposable in different ways","mimetype":"text/html"}]},"ts":1666039180217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GY4F4zzfzz_XBOC_dFO3i7ICK8NXMbOXecTsVJUuxLk"},
{"content":{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all.","format":"org.matrix.custom.html","formatted_body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all.","mimetype":"text/plain"},{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all.","mimetype":"text/html"}]},"ts":1666039201083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yqbx19VtkNEldxWSpJ3B1YmOJIqFp_L7rsL8jlQmtWM"},
{"content":{"body":" * Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all than to abort on dispose.","format":"org.matrix.custom.html","formatted_body":" * Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all than to abort on dispose.","m.new_content":{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all than to abort on dispose.","format":"org.matrix.custom.html","formatted_body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all than to abort on dispose.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all than to abort on dispose.","mimetype":"text/plain"},{"body":"Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all than to abort on dispose.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$yqbx19VtkNEldxWSpJ3B1YmOJIqFp_L7rsL8jlQmtWM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather `AbortController` not be disposable at all than to abort on dispose.","mimetype":"text/plain"},{"body":" * Its perfectly reasonable to want an easy way to make that work, but I still believe it's the wrong default behavior. I'd honestly rather <code>AbortController</code> not be disposable at all than to abort on dispose.","mimetype":"text/html"}]},"ts":1666039226646,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uxWgPjO73r_ZoZSfwfIgBIBpORy4gye-Ikh7JaLOtS8"},
{"content":{"body":"Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","format":"org.matrix.custom.html","formatted_body":"<p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","mimetype":"text/plain"},{"body":"<p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","mimetype":"text/html"}]},"ts":1666039445244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j88w6q4HV3vF9EqMar8NAfmqMcIGyshmf1PkdV_NTvc"},
{"content":{"body":" * Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","m.new_content":{"body":"Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","format":"org.matrix.custom.html","formatted_body":"<p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","mimetype":"text/plain"},{"body":"<p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$j88w6q4HV3vF9EqMar8NAfmqMcIGyshmf1PkdV_NTvc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Something like this is fairly easy to write in user code, or to build into the DOM API:\n\n```js\nclass AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n```","mimetype":"text/plain"},{"body":" * <p>Something like this is fairly easy to write in user code, or to build into the DOM API:</p>\n<pre><code class=\"language-js\">class AbortRegion {\n  #controller;\n  constructor(controller) {\n    this.#controller = controller;\n  }\n  preventAbort() {\n    this.#controller = null;\n  }\n  [Symbol.dispose]() {\n    const controller = this.#controller;\n    this.#controller = null;\n    controller?.abort();\n  }\n}\n\n...\nconst controller = new AbortController();\nusing region = new AbortRegion(controller);\n... // abort on error\nregion.preventAbort();\n... // no longer abort on error\n</code></pre>\n","mimetype":"text/html"}]},"ts":1666039461181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$an4CvRXIKReUF7x9eMfypbaJo2wX2CeEqrA0UKKk7Tc"},
{"content":{"body":"It would be helpful I think to have more examples of places where you specifically want cleanup-but-not-cancel","msgtype":"m.text","org.matrix.msc1767.text":"It would be helpful I think to have more examples of places where you specifically want cleanup-but-not-cancel"},"ts":1666040267844,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BH6BEhVU6hzJ8UtSgXd6hZ3rrh_LVfci-JR55nasSlE"},
{"content":{"body":"I am mostly thinking about `fetch`, and cancelling a completed request doesn't do anything, so doing the cancellation isn't problematic","format":"org.matrix.custom.html","formatted_body":"I am mostly thinking about <code>fetch</code>, and cancelling a completed request doesn't do anything, so doing the cancellation isn't problematic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am mostly thinking about `fetch`, and cancelling a completed request doesn't do anything, so doing the cancellation isn't problematic","mimetype":"text/plain"},{"body":"I am mostly thinking about <code>fetch</code>, and cancelling a completed request doesn't do anything, so doing the cancellation isn't problematic","mimetype":"text/html"}]},"ts":1666040302889,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pv61q_r-XvTKmwsW6DEyf0Vd7KgtHBTRAiSTZ_DJGjs"},
{"content":{"body":"is the concern things which can't handle being cancelled after they complete, or cases where you no longer want the ability to cancel things which are still in progress?","msgtype":"m.text","org.matrix.msc1767.text":"is the concern things which can't handle being cancelled after they complete, or cases where you no longer want the ability to cancel things which are still in progress?"},"ts":1666040386432,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wbKFs3Fd3OAtoVL2siuWhETTf89MCJEBTzNiF3IsnXw"},
{"content":{"body":"I guess cases like `addEventListener(x, y, { signal })` probably fall into the second bucket","format":"org.matrix.custom.html","formatted_body":"I guess cases like <code>addEventListener(x, y, { signal })</code> probably fall into the second bucket","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess cases like `addEventListener(x, y, { signal })` probably fall into the second bucket","mimetype":"text/plain"},{"body":"I guess cases like <code>addEventListener(x, y, { signal })</code> probably fall into the second bucket","mimetype":"text/html"}]},"ts":1666040487450,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5LY0ZguQEUZWSPxCvIScb0ly7D8ZzNAryppNelU-NIc"},
{"content":{"body":"you mentioned the use case of sending concurrent fetch requests and cancelling them all when one fails; there's also the case of starting concurrent async operations that aren't redundant with each other and Promise.all'ing them, like reading multiple different config files","msgtype":"m.text","org.matrix.msc1767.text":"you mentioned the use case of sending concurrent fetch requests and cancelling them all when one fails; there's also the case of starting concurrent async operations that aren't redundant with each other and Promise.all'ing them, like reading multiple different config files"},"ts":1666040599304,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$joY_yrJJa2XNmpjnD_G4pM4qmVos28iwHnxxYRheXf0"},
{"content":{"body":"(neither redundant with nor dependent on, I mean)","msgtype":"m.text","org.matrix.msc1767.text":"(neither redundant with nor dependent on, I mean)"},"ts":1666040637765,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$dWLYyTNgbi69vRt7azIDvuPGFHsSgIZVNFQAXc-oyOg"},
{"content":{"body":"I'm more concerned about userland, since `signal.addEventListener(\"abort\", () => { someDestructiveCleanupAction(); })` is likely and every userland \"abort\" handler would need some way to be informed it _shouldn't_ execute when the operation completed successfully.","format":"org.matrix.custom.html","formatted_body":"I'm more concerned about userland, since <code>signal.addEventListener(&quot;abort&quot;, () =&gt; { someDestructiveCleanupAction(); })</code> is likely and every userland &quot;abort&quot; handler would need some way to be informed it <em>shouldn't</em> execute when the operation completed successfully.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm more concerned about userland, since `signal.addEventListener(\"abort\", () => { someDestructiveCleanupAction(); })` is likely and every userland \"abort\" handler would need some way to be informed it _shouldn't_ execute when the operation completed successfully.","mimetype":"text/plain"},{"body":"I'm more concerned about userland, since <code>signal.addEventListener(&quot;abort&quot;, () =&gt; { someDestructiveCleanupAction(); })</code> is likely and every userland &quot;abort&quot; handler would need some way to be informed it <em>shouldn't</em> execute when the operation completed successfully.","mimetype":"text/html"}]},"ts":1666040747502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1Hb92AMf4TYMenRZyNgUNmR3jbl1ZSY2kR33jNQKeh4"},
{"content":{"body":"Ideally, that would be having a mechanism that makes the controller unusable (i.e., cannot abort it), and removes all `abort` handlers such as a `.preventAbort()` method. However, if that exists _that_ is what cleanup would entail so I'd argue _that_ is what should happen when disposed.","format":"org.matrix.custom.html","formatted_body":"Ideally, that would be having a mechanism that makes the controller unusable (i.e., cannot abort it), and removes all <code>abort</code> handlers such as a <code>.preventAbort()</code> method. However, if that exists <em>that</em> is what cleanup would entail so I'd argue <em>that</em> is what should happen when disposed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ideally, that would be having a mechanism that makes the controller unusable (i.e., cannot abort it), and removes all `abort` handlers such as a `.preventAbort()` method. However, if that exists _that_ is what cleanup would entail so I'd argue _that_ is what should happen when disposed.","mimetype":"text/plain"},{"body":"Ideally, that would be having a mechanism that makes the controller unusable (i.e., cannot abort it), and removes all <code>abort</code> handlers such as a <code>.preventAbort()</code> method. However, if that exists <em>that</em> is what cleanup would entail so I'd argue <em>that</em> is what should happen when disposed.","mimetype":"text/html"}]},"ts":1666040815632,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bZvdLVZXUziOTFsp45G8L8j50se1HBQVW6WDz_aLeKk"},
{"content":{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the requests completes successfully where it _shouldn't_ be aborted.","format":"org.matrix.custom.html","formatted_body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the requests completes successfully where it <em>shouldn't</em> be aborted.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the requests completes successfully where it _shouldn't_ be aborted.","mimetype":"text/plain"},{"body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the requests completes successfully where it <em>shouldn't</em> be aborted.","mimetype":"text/html"}]},"ts":1666040994400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4SryGIG9BiZtdUOjglGmCPe6HbJLY3cOrk6kXgYT4s0"},
{"content":{"body":"built-ins generally don't care since they're spec'd not to, but its much more complex and cumbersome to do so in user code.","msgtype":"m.text","org.matrix.msc1767.text":"built-ins generally don't care since they're spec'd not to, but its much more complex and cumbersome to do so in user code."},"ts":1666041074197,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vis6n40KSRitl7AFOunMDuzqqPA-UP_HQ2LDKVyBU-k"},
{"content":{"body":" * That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the request completes successfully where it _shouldn't_ be aborted.","format":"org.matrix.custom.html","formatted_body":" * That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the request completes successfully where it <em>shouldn't</em> be aborted.","m.new_content":{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the request completes successfully where it _shouldn't_ be aborted.","format":"org.matrix.custom.html","formatted_body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the request completes successfully where it <em>shouldn't</em> be aborted.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the request completes successfully where it _shouldn't_ be aborted.","mimetype":"text/plain"},{"body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the request completes successfully where it <em>shouldn't</em> be aborted.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4SryGIG9BiZtdUOjglGmCPe6HbJLY3cOrk6kXgYT4s0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after the request completes successfully where it _shouldn't_ be aborted.","mimetype":"text/plain"},{"body":" * That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after the request completes successfully where it <em>shouldn't</em> be aborted.","mimetype":"text/html"}]},"ts":1666041120848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$poqCXMforC1M8EOBDKkONYAzQh6Q9re0E2_6aQBKwOE"},
{"content":{"body":" * That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after requests complete successfully where the controller _shouldn't_ be aborted.","format":"org.matrix.custom.html","formatted_body":" * That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after requests complete successfully where the controller <em>shouldn't</em> be aborted.","m.new_content":{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after requests complete successfully where the controller _shouldn't_ be aborted.","format":"org.matrix.custom.html","formatted_body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after requests complete successfully where the controller <em>shouldn't</em> be aborted.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after requests complete successfully where the controller _shouldn't_ be aborted.","mimetype":"text/plain"},{"body":"That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after requests complete successfully where the controller <em>shouldn't</em> be aborted.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4SryGIG9BiZtdUOjglGmCPe6HbJLY3cOrk6kXgYT4s0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That's the case I _want_ to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an `AbortController` will usually outlive the request that uses its `signal`. That means there's almost always a period of time after requests complete successfully where the controller _shouldn't_ be aborted.","mimetype":"text/plain"},{"body":" * That's the case I <em>want</em> to be the common case, but its not feasible currently without additions to the DOM API. Its important to keep in mind that an <code>AbortController</code> will usually outlive the request that uses its <code>signal</code>. That means there's almost always a period of time after requests complete successfully where the controller <em>shouldn't</em> be aborted.","mimetype":"text/html"}]},"ts":1666041137850,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OQvGQ7_1t4-y5UUDhjWkDBEcAnQKWi5v7_24SIjoC_M"},
{"content":{"body":"well, usually just a `if (this.#done) return` will suffice, but yes it is something you have to handle","format":"org.matrix.custom.html","formatted_body":"well, usually just a <code>if (this.#done) return</code> will suffice, but yes it is something you have to handle","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"well, usually just a `if (this.#done) return` will suffice, but yes it is something you have to handle","mimetype":"text/plain"},{"body":"well, usually just a <code>if (this.#done) return</code> will suffice, but yes it is something you have to handle","mimetype":"text/html"}]},"ts":1666041164543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2TKRxk4f6yOFUp81nVavrOC_skebUDSl4hum1yGr8nU"},
{"content":{"body":"something you probably should be handling either way","msgtype":"m.text","org.matrix.msc1767.text":"something you probably should be handling either way"},"ts":1666041179649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DGWFICDg3b8BAzViV2LaE6Ea4lHlSSWLFWDu0Sv9-8w"},
{"content":{"body":"> <@bakkot:matrix.org> well, usually just a `if (this.#done) return` will suffice, but yes it is something you have to handle\n\nThat's glossing over the fact you a) have to communicate that its done, b) may need to coordinate between multiple subscribers that only have the `AbortController`/`AbortSignal` in common, c) may be using third-party code that doesn't have a mechanism to signal disinterest.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$2TKRxk4f6yOFUp81nVavrOC_skebUDSl4hum1yGr8nU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>well, usually just a <code>if (this.#done) return</code> will suffice, but yes it is something you have to handle</blockquote></mx-reply>That's glossing over the fact you a) have to communicate that its done, b) may need to coordinate between multiple subscribers that only have the <code>AbortController</code>/<code>AbortSignal</code> in common, c) may be using third-party code that doesn't have a mechanism to signal disinterest.","m.relates_to":{"m.in_reply_to":{"event_id":"$2TKRxk4f6yOFUp81nVavrOC_skebUDSl4hum1yGr8nU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> well, usually just a `if (this.#done) return` will suffice, but yes it is something you have to handle\n\nThat's glossing over the fact you a) have to communicate that its done, b) may need to coordinate between multiple subscribers that only have the `AbortController`/`AbortSignal` in common, c) may be using third-party code that doesn't have a mechanism to signal disinterest.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$2TKRxk4f6yOFUp81nVavrOC_skebUDSl4hum1yGr8nU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>well, usually just a <code>if (this.#done) return</code> will suffice, but yes it is something you have to handle</blockquote></mx-reply>That's glossing over the fact you a) have to communicate that its done, b) may need to coordinate between multiple subscribers that only have the <code>AbortController</code>/<code>AbortSignal</code> in common, c) may be using third-party code that doesn't have a mechanism to signal disinterest.","mimetype":"text/html"}]},"ts":1666041427647,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$f_O2I5eFu8xLy6tV7AjlJnz740OMXmc5fzDZQZtziQs"},
{"content":{"body":"`AbortController` has no mechanism to signal disinterest other than \"never call `abort` and let the controller be GC'd\", so if we intend to have `using` on an AbortController mean you can't do that (because `abort` will always be called), we need _some_ mechanism to opt out. And that opt-out mechanism is _exactly_ what I would expect dispose to do if it exists.","format":"org.matrix.custom.html","formatted_body":"<code>AbortController</code> has no mechanism to signal disinterest other than &quot;never call <code>abort</code> and let the controller be GC'd&quot;, so if we intend to have <code>using</code> on an AbortController mean you can't do that (because <code>abort</code> will always be called), we need <em>some</em> mechanism to opt out. And that opt-out mechanism is <em>exactly</em> what I would expect dispose to do if it exists.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`AbortController` has no mechanism to signal disinterest other than \"never call `abort` and let the controller be GC'd\", so if we intend to have `using` on an AbortController mean you can't do that (because `abort` will always be called), we need _some_ mechanism to opt out. And that opt-out mechanism is _exactly_ what I would expect dispose to do if it exists.","mimetype":"text/plain"},{"body":"<code>AbortController</code> has no mechanism to signal disinterest other than &quot;never call <code>abort</code> and let the controller be GC'd&quot;, so if we intend to have <code>using</code> on an AbortController mean you can't do that (because <code>abort</code> will always be called), we need <em>some</em> mechanism to opt out. And that opt-out mechanism is <em>exactly</em> what I would expect dispose to do if it exists.","mimetype":"text/html"}]},"ts":1666041584736,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZTwJgdv-thxvXc7TjElW2i_yOnSUf38QX040JE6pMxY"},
{"content":{"body":"Sorry, I mean, making your cancelable thing robust against calling \"abort()\" after the thing has finished is just a matter of doing `if (this.#done) return` (in the signal listener)","format":"org.matrix.custom.html","formatted_body":"Sorry, I mean, making your cancelable thing robust against calling &quot;abort()&quot; after the thing has finished is just a matter of doing <code>if (this.#done) return</code> (in the signal listener)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Sorry, I mean, making your cancelable thing robust against calling \"abort()\" after the thing has finished is just a matter of doing `if (this.#done) return` (in the signal listener)","mimetype":"text/plain"},{"body":"Sorry, I mean, making your cancelable thing robust against calling &quot;abort()&quot; after the thing has finished is just a matter of doing <code>if (this.#done) return</code> (in the signal listener)","mimetype":"text/html"}]},"ts":1666042020436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_9aVUiE--DMrXbg2Rlx2Gutj5xEDSxvDNHbB916kLhc"},
{"content":{"body":"If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","format":"org.matrix.custom.html","formatted_body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","mimetype":"text/plain"},{"body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","mimetype":"text/html"}]},"ts":1666042098494,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lyO8PjZmsNbQJjtJduvkufZS3x4FN9E9ssAF8sg7XYo"},
{"content":{"body":"(except in the rare case that you are done with the controller _before_ you are done with all of the things it controls)","format":"org.matrix.custom.html","formatted_body":"(except in the rare case that you are done with the controller <em>before</em> you are done with all of the things it controls)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(except in the rare case that you are done with the controller _before_ you are done with all of the things it controls)","mimetype":"text/plain"},{"body":"(except in the rare case that you are done with the controller <em>before</em> you are done with all of the things it controls)","mimetype":"text/html"}]},"ts":1666042154478,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lRQPGEMcB3Vmv6tHpdjjhBlZfUTAFXuFAuj5QW257YM"},
{"content":{"body":" * If everything is robust against `abort` being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","format":"org.matrix.custom.html","formatted_body":" * If everything is robust against <code>abort</code> being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","m.new_content":{"body":"If everything is robust against `abort` being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","format":"org.matrix.custom.html","formatted_body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If everything is robust against `abort` being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","mimetype":"text/plain"},{"body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lyO8PjZmsNbQJjtJduvkufZS3x4FN9E9ssAF8sg7XYo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If everything is robust against `abort` being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","mimetype":"text/plain"},{"body":" * If everything is robust against <code>abort</code> being called after the thing has finished, then calling it when disposing of the controller should be harmless, generally","mimetype":"text/html"}]},"ts":1666042174175,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sDNTtSYkof9JikaXZ6PkLJNWuKANTPLDJlNbCHQnGvQ"},
{"content":{"body":" * If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","format":"org.matrix.custom.html","formatted_body":" * If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","m.new_content":{"body":"If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","format":"org.matrix.custom.html","formatted_body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","mimetype":"text/plain"},{"body":"If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lyO8PjZmsNbQJjtJduvkufZS3x4FN9E9ssAF8sg7XYo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If everything is robust against `abort` being called after the thing has finished, then calling `abort` when disposing of the controller should be harmless, generally","mimetype":"text/plain"},{"body":" * If everything is robust against <code>abort</code> being called after the thing has finished, then calling <code>abort</code> when disposing of the controller should be harmless, generally","mimetype":"text/html"}]},"ts":1666042179952,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5rr5vgW1OLF-4HCSL_TtcPjH4BoYg0kH7SDHG7jHRc4"},
{"content":{"body":"\"after the thing has finished\" is still glossing over the issue. Knowing \"the thing has finished\" is actually the crux of my concern. Having a means for an `AbortController` signal disinterest is far cheaper than defending against an incorrect `abort` for all the reasons I mentioned above.","format":"org.matrix.custom.html","formatted_body":"&quot;after the thing has finished&quot; is still glossing over the issue. Knowing &quot;the thing has finished&quot; is actually the crux of my concern. Having a means for an <code>AbortController</code> signal disinterest is far cheaper than defending against an incorrect <code>abort</code> for all the reasons I mentioned above.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"after the thing has finished\" is still glossing over the issue. Knowing \"the thing has finished\" is actually the crux of my concern. Having a means for an `AbortController` signal disinterest is far cheaper than defending against an incorrect `abort` for all the reasons I mentioned above.","mimetype":"text/plain"},{"body":"&quot;after the thing has finished&quot; is still glossing over the issue. Knowing &quot;the thing has finished&quot; is actually the crux of my concern. Having a means for an <code>AbortController</code> signal disinterest is far cheaper than defending against an incorrect <code>abort</code> for all the reasons I mentioned above.","mimetype":"text/html"}]},"ts":1666043481483,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8YL0xuf4OL8xbRh8iJgh8fCw_jU5x5Trb3Ovj1rflVw"},
{"content":{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","format":"org.matrix.custom.html","formatted_body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/plain"},{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$lRQPGEMcB3Vmv6tHpdjjhBlZfUTAFXuFAuj5QW257YM"}}},"ts":1666043535818,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JUmSuOjbmDaaNxsJxr0a7_YjhLI8A0J_BrC2slL9vVQ"},
{"content":{"body":"I am not understanding the reasons you think it's difficult for a cancelable thing to defend against an incorrect abort.","msgtype":"m.text","org.matrix.msc1767.text":"I am not understanding the reasons you think it's difficult for a cancelable thing to defend against an incorrect abort."},"ts":1666043544701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O6fYGIRayWYbSKxv3i9jCEcOmn0OAbSVbTlsQezGPCU"},
{"content":{"body":"> <@bakkot:matrix.org> (except in the rare case that you are done with the controller _before_ you are done with all of the things it controls)\n\n * Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$lRQPGEMcB3Vmv6tHpdjjhBlZfUTAFXuFAuj5QW257YM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(except in the rare case that you are done with the controller <em>before</em> you are done with all of the things it controls)</blockquote></mx-reply> * Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","m.new_content":{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","format":"org.matrix.custom.html","formatted_body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/plain"},{"body":"Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$JUmSuOjbmDaaNxsJxr0a7_YjhLI8A0J_BrC2slL9vVQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> (except in the rare case that you are done with the controller _before_ you are done with all of the things it controls)\n\n * Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$lRQPGEMcB3Vmv6tHpdjjhBlZfUTAFXuFAuj5QW257YM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(except in the rare case that you are done with the controller <em>before</em> you are done with all of the things it controls)</blockquote></mx-reply> * Even if you're done with it, the controller still lives until its signal has GC'd, which in turn keeps everything else alive it's holding.","mimetype":"text/html"}]},"ts":1666043547971,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4uc81lnypAKDxMmCs5pQxWKlC_k5fBbVaS_Xruj9tP8"},
{"content":{"body":"or rather \"an abort which happens after the thing is finished\", which I would not think is incorrect personally.","msgtype":"m.text","org.matrix.msc1767.text":"or rather \"an abort which happens after the thing is finished\", which I would not think is incorrect personally."},"ts":1666043566955,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$__HWGYE1FsbXS-He9U70exATrJjtUuooG-CI99p4DiQ"},
{"content":{"body":"Its not difficult, its time consuming. You have to write scaffolding to handle that case for every single userland \"abort\" handler. Other implementations don't have this issue, because the ability to signal disinterest is baked in.","msgtype":"m.text","org.matrix.msc1767.text":"Its not difficult, its time consuming. You have to write scaffolding to handle that case for every single userland \"abort\" handler. Other implementations don't have this issue, because the ability to signal disinterest is baked in."},"ts":1666043625883,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Vnf2IgmUd6YOyO8AsqcBiSpgtEWdytaLMrnbICOgIyo"},
{"content":{"body":"You're almost certainly going to want do that anyway because someone calling `.abort` after your thing is finished is a totally normal thing to happen","format":"org.matrix.custom.html","formatted_body":"You're almost certainly going to want do that anyway because someone calling <code>.abort</code> after your thing is finished is a totally normal thing to happen","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You're almost certainly going to want do that anyway because someone calling `.abort` after your thing is finished is a totally normal thing to happen","mimetype":"text/plain"},{"body":"You're almost certainly going to want do that anyway because someone calling <code>.abort</code> after your thing is finished is a totally normal thing to happen","mimetype":"text/html"}]},"ts":1666043704090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vHxAFOS72JEPYKEcvnohI7-vKbqOBnA9DUAY1SzDcYc"},
{"content":{"body":"Its far too easy to write code that doesn't handle \"abort\" well. That's not so much a concern if you can just drop the controller on the floor, but if `AbortController` aborts on dispose and every new StackOverflow example has `using controller = ...`, we've just made folks lives a lot harder.","format":"org.matrix.custom.html","formatted_body":"Its far too easy to write code that doesn't handle &quot;abort&quot; well. That's not so much a concern if you can just drop the controller on the floor, but if <code>AbortController</code> aborts on dispose and every new StackOverflow example has <code>using controller = ...</code>, we've just made folks lives a lot harder.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Its far too easy to write code that doesn't handle \"abort\" well. That's not so much a concern if you can just drop the controller on the floor, but if `AbortController` aborts on dispose and every new StackOverflow example has `using controller = ...`, we've just made folks lives a lot harder.","mimetype":"text/plain"},{"body":"Its far too easy to write code that doesn't handle &quot;abort&quot; well. That's not so much a concern if you can just drop the controller on the floor, but if <code>AbortController</code> aborts on dispose and every new StackOverflow example has <code>using controller = ...</code>, we've just made folks lives a lot harder.","mimetype":"text/html"}]},"ts":1666043718917,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xEwtxDfJhplr9RRFWtcKVOncTGNJhCOj9JX6qFmGpJ8"},
{"content":{"body":"Assuming cancel-on-dispose semantics, the only reason you'd see `using controller = ...` is if it's _useful_ to call `.abort`, so we haven't made anyone's lives harder","format":"org.matrix.custom.html","formatted_body":"Assuming cancel-on-dispose semantics, the only reason you'd see <code>using controller = ...</code> is if it's <em>useful</em> to call <code>.abort</code>, so we haven't made anyone's lives harder","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Assuming cancel-on-dispose semantics, the only reason you'd see `using controller = ...` is if it's _useful_ to call `.abort`, so we haven't made anyone's lives harder","mimetype":"text/plain"},{"body":"Assuming cancel-on-dispose semantics, the only reason you'd see <code>using controller = ...</code> is if it's <em>useful</em> to call <code>.abort</code>, so we haven't made anyone's lives harder","mimetype":"text/html"}]},"ts":1666043860355,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6surQpR_w2DwCD6PWBOPo5KT1Pb8BhilfQRUzjQnCAI"},
{"content":{"body":"presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","format":"org.matrix.custom.html","formatted_body":"presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/plain"},{"body":"presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/html"}]},"ts":1666043882287,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UHbUmF9zNZr6BppgV7lNRPIp5fe_OHpi0P8kDGtEiDQ"},
{"content":{"body":"Here's an example: Someone writes a website that asynchronously requests a page of data from the server. They use `signal.addEventListener(\"abort\", () => { someElement.innerHTML = \"Request aborted\" })`, and all is well and good because they only call `.abort()` when they need to.","format":"org.matrix.custom.html","formatted_body":"Here's an example: Someone writes a website that asynchronously requests a page of data from the server. They use <code>signal.addEventListener(&quot;abort&quot;, () =&gt; { someElement.innerHTML = &quot;Request aborted&quot; })</code>, and all is well and good because they only call <code>.abort()</code> when they need to.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Here's an example: Someone writes a website that asynchronously requests a page of data from the server. They use `signal.addEventListener(\"abort\", () => { someElement.innerHTML = \"Request aborted\" })`, and all is well and good because they only call `.abort()` when they need to.","mimetype":"text/plain"},{"body":"Here's an example: Someone writes a website that asynchronously requests a page of data from the server. They use <code>signal.addEventListener(&quot;abort&quot;, () =&gt; { someElement.innerHTML = &quot;Request aborted&quot; })</code>, and all is well and good because they only call <code>.abort()</code> when they need to.","mimetype":"text/html"}]},"ts":1666043907633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZJbCEk3_yXKO5jK6EeACvEcv3follKBPS0EKwM2H1oM"},
{"content":{"body":" * presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","format":"org.matrix.custom.html","formatted_body":" * presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","m.new_content":{"body":"presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","format":"org.matrix.custom.html","formatted_body":"presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/plain"},{"body":"presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$UHbUmF9zNZr6BppgV7lNRPIp5fe_OHpi0P8kDGtEiDQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * presumably if we had a `using _ = controller.cancelOnDipose` helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/plain"},{"body":" * presumably if we had a <code>using _ = controller.cancelOnDipose</code> helper, instead of cancel-on-dispose semantics, then the stackoverflow example in question would have that line instead","mimetype":"text/html"}]},"ts":1666043913137,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KPE-qWyuX7Z9xoHWqAPMDt-E10XwEfkfYwv_vrDPv6c"},
{"content":{"body":"Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","format":"org.matrix.custom.html","formatted_body":"Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","mimetype":"text/plain"},{"body":"Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","mimetype":"text/html"}]},"ts":1666043969059,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NfdDMyXhiFkfRoxAV-qobEbwvi6A17p2XVMA0_ncwT4"},
{"content":{"body":" * Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","format":"org.matrix.custom.html","formatted_body":" * Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","m.new_content":{"body":"Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","format":"org.matrix.custom.html","formatted_body":"Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","mimetype":"text/plain"},{"body":"Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$NfdDMyXhiFkfRoxAV-qobEbwvi6A17p2XVMA0_ncwT4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Now someone makes a change to this working code and switches `const` to `using`. Now, after the page of data is presented successfully, it is then replaced with a \"Request aborted\" message.","mimetype":"text/plain"},{"body":" * Now someone makes a change to this working code and switches <code>const</code> to <code>using</code>. Now, after the page of data is presented successfully, it is then replaced with a &quot;Request aborted&quot; message.","mimetype":"text/html"}]},"ts":1666043972060,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w10sQePAr0UUHKKkEW1-Hx5FikyKXUSMdSEBxSFzHiQ"}
]