[
{"content":{"body":"Why is it that async constructors are not valid syntax sugar, even though you can manually implement them without any issues? ","msgtype":"m.text"},"ts":1687771541199,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$utcLVYhEf9n0v3Yw_UTfFAOLJndjIA-h8wqRyVdcrXE"},
{"content":{"body":"Why was it decided that we should have to write:\n```js\nclass Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) => {\n            this.sync = 123;\n            this.async = await someAsyncCall();\n            resolve(this);\n        });\n    }\n}\n```\ninstead of just\n```js\nclass Foo {\n    async constructor() {\n        this.sync = 123;\n        this.async = await someAsyncCall();\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Why was it decided that we should have to write:</p>\n<pre><code class=\"language-js\">class Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) =&gt; {\n            this.sync = 123;\n            this.async = await someAsyncCall();\n            resolve(this);\n        });\n    }\n}\n</code></pre>\n<p>instead of just</p>\n<pre><code class=\"language-js\">class Foo {\n    async constructor() {\n        this.sync = 123;\n        this.async = await someAsyncCall();\n    }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1687771608384,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$mRrEG8H-yqTiyoxH7Ngi6-EyIo5NUUnCXLek_kGRK30"},
{"content":{"body":"`await new Foo()` with the 1st codeblock works perfectly fine","format":"org.matrix.custom.html","formatted_body":"<code>await new Foo()</code> with the 1st codeblock works perfectly fine","msgtype":"m.text"},"ts":1687771644448,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$rMbUObAirG1t6isXr4or-eDjd38xkzj--5uG9ia7DZE"},
{"content":{"body":"even the syntax itself is already in place for other methods of classes, `async methodName() { ... }`","format":"org.matrix.custom.html","formatted_body":"even the syntax itself is already in place for other methods of classes, <code>async methodName() { ... }</code>","msgtype":"m.text"},"ts":1687771690254,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$tpvCIMk7ywEr8FyJJ55sTg3F8dkI2pd-kEQzcq2Atj8"},
{"content":{"body":"why was it decided to go out of our way to specifically block the syntax when methodName === constructor","msgtype":"m.text"},"ts":1687771722163,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$sqdb1oYcJ2P9S1r84w56HreX37vr9MUaajPTwjlFiJc"},
{"content":{"body":"It's not without issues -- it does not work with subclasses","msgtype":"m.text"},"ts":1687771855623,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uzwi5by88f4noIgiO6zUqFzo2HYCLbA27wclqYmpBio"}
]