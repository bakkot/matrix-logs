[
{"content":{"body":"Why is it that async constructors are not valid syntax sugar, even though you can manually implement them without any issues? ","msgtype":"m.text"},"ts":1687771541199,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$utcLVYhEf9n0v3Yw_UTfFAOLJndjIA-h8wqRyVdcrXE"},
{"content":{"body":"Why was it decided that we should have to write:\n```js\nclass Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) => {\n            this.sync = 123;\n            this.async = await someAsyncCall();\n            resolve(this);\n        });\n    }\n}\n```\ninstead of just\n```js\nclass Foo {\n    async constructor() {\n        this.sync = 123;\n        this.async = await someAsyncCall();\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Why was it decided that we should have to write:</p>\n<pre><code class=\"language-js\">class Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) =&gt; {\n            this.sync = 123;\n            this.async = await someAsyncCall();\n            resolve(this);\n        });\n    }\n}\n</code></pre>\n<p>instead of just</p>\n<pre><code class=\"language-js\">class Foo {\n    async constructor() {\n        this.sync = 123;\n        this.async = await someAsyncCall();\n    }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1687771608384,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$mRrEG8H-yqTiyoxH7Ngi6-EyIo5NUUnCXLek_kGRK30"},
{"content":{"body":"`await new Foo()` with the 1st codeblock works perfectly fine","format":"org.matrix.custom.html","formatted_body":"<code>await new Foo()</code> with the 1st codeblock works perfectly fine","msgtype":"m.text"},"ts":1687771644448,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$rMbUObAirG1t6isXr4or-eDjd38xkzj--5uG9ia7DZE"},
{"content":{"body":"even the syntax itself is already in place for other methods of classes, `async methodName() { ... }`","format":"org.matrix.custom.html","formatted_body":"even the syntax itself is already in place for other methods of classes, <code>async methodName() { ... }</code>","msgtype":"m.text"},"ts":1687771690254,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$tpvCIMk7ywEr8FyJJ55sTg3F8dkI2pd-kEQzcq2Atj8"},
{"content":{"body":"why was it decided to go out of our way to specifically block the syntax when methodName === constructor","msgtype":"m.text"},"ts":1687771722163,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$sqdb1oYcJ2P9S1r84w56HreX37vr9MUaajPTwjlFiJc"},
{"content":{"body":"It's not without issues -- it does not work with subclasses","msgtype":"m.text"},"ts":1687771855623,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uzwi5by88f4noIgiO6zUqFzo2HYCLbA27wclqYmpBio"},
{"content":{"body":"works for me, just needs to be a little different from sync subclassing, which a dedicated syntax sugar could do\n```js\nclass Bar extends Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) => {\n            const base = await super();\n            base.barSync = 123;\n            base.barAsync = await someAsyncCall();\n            resolve(base);\n        });\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>works for me, just needs to be a little different from sync subclassing, which a dedicated syntax sugar could do</p>\n<pre><code class=\"language-js\">class Bar extends Foo {\n    constructor() {\n        return new Promise(async (resolve, reject) =&gt; {\n            const base = await super();\n            base.barSync = 123;\n            base.barAsync = await someAsyncCall();\n            resolve(base);\n        });\n    }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1687772161903,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$nrhCoRlZM2Qjn8d2Dox_w3JQ_nIGh3WJyyna-rSH5gs"},
{"content":{"body":"But now you cannot define private fields/methods in Bar","msgtype":"m.text"},"ts":1687772187485,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UvU9oLDxkRWBSAzJIRJoLNRkJ780XNK1ejggkP6LsV4"},
{"content":{"body":"A new \"async constructor\" syntax would solve this, but it's not just syntax sugar on top of what we can already do","msgtype":"m.text"},"ts":1687772229127,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Jaz_V66EVK9orwL-W_4q0Pzw0nNtFMOn0bf2qKYI4hI"},
{"content":{"body":"hmm I see, you're right on those","msgtype":"m.text"},"ts":1687772395002,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$Z9wyBoa-7UiFrZQlr02jXkfDQ8zBi6mvRBcCKGsIJQU"},
{"content":{"body":"so the problem seems to be super() attaches the caller's private properties on its own return value before I get the chance to `await` the Promise, so I get a promise with private methods... rather cursed to see","format":"org.matrix.custom.html","formatted_body":"so the problem seems to be super() attaches the caller's private properties on its own return value before I get the chance to <code>await</code> the Promise, so I get a promise with private methods... rather cursed to see","msgtype":"m.text"},"ts":1687773279024,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$Up8pinzd6jFGVXlo1_MKiR7a62aqg4wBIdTb-tBzlbA"},
{"content":{"body":"is there a reason for this behavior of applying privates at a different step than normal properties?","msgtype":"m.text"},"ts":1687773318091,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$kVtLeDUS-iuIIDOdcUlrzFAaw_FuGgu12ddxeukNrMk"},
{"content":{"body":"huh... this leads to some interesting things being possible...","msgtype":"m.text"},"ts":1687773808596,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$MtINgkTjQ2ClLcNngYE8vsmcEsEYp96cX8HB3r9gEYw"},
{"content":{"body":"It's the same for normal properties:\n```\nclass Bar extends Foo {\n    prop = 2;\n    constructor() {\n        return new Promise(async (resolve, reject) => {\n            const p = super();\n            console.log(p.prop); // 2\n            const base = await p;\n            resolve(base);\n        });\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>It's the same for normal properties:</p>\n<pre><code>class Bar extends Foo {\n    prop = 2;\n    constructor() {\n        return new Promise(async (resolve, reject) =&gt; {\n            const p = super();\n            console.log(p.prop); // 2\n            const base = await p;\n            resolve(base);\n        });\n    }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1687774148146,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7WdQbXuYk-mAG6i23Sc2vVrq05YqKOiDZE4olTrQveY"},
{"content":{"body":"well this is weird, since when does Chrome console allow you to directly access private members of classes externally","msgtype":"m.text"},"ts":1687774358511,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$7H3cWCIG8JtsK5PiazCHDJzD4ThY5wyJEnaOuZu5FyY"},
{"content":{"body":"Oh nice, I didn't know about that","msgtype":"m.text"},"ts":1687774561737,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$btqx9W9uofZ_VKciqQD9cbQqWXE2bXvCVTzzVGyBM3Y"},
{"content":{"body":"That's useful","msgtype":"m.text"},"ts":1687774567116,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zubp5G42g5pB_YVClFKfi3R37a_hgYCpnSIwhaTtK8s"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> It's the same for normal properties:\n> ```\n> class Bar extends Foo {\n>     prop = 2;\n>     constructor() {\n>         return new Promise(async (resolve, reject) => {\n>             const p = super();\n>             console.log(p.prop); // 2\n>             const base = await p;\n>             resolve(base);\n>         });\n>     }\n> }\n> ```\n\nOh I see, my \"normal\" property was actually a getter, and those end up in the promise result for some reason","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$7WdQbXuYk-mAG6i23Sc2vVrq05YqKOiDZE4olTrQveY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>It's the same for normal properties:</p>\n<pre><code>class Bar extends Foo {\n    prop = 2;\n    constructor() {\n        return new Promise(async (resolve, reject) =&gt; {\n            const p = super();\n            console.log(p.prop); // 2\n            const base = await p;\n            resolve(base);\n        });\n    }\n}\n</code></pre>\n</blockquote></mx-reply>Oh I see, my \"normal\" property was actually a getter, and those end up in the promise result for some reason","m.relates_to":{"m.in_reply_to":{"event_id":"$7WdQbXuYk-mAG6i23Sc2vVrq05YqKOiDZE4olTrQveY"}},"msgtype":"m.text"},"ts":1687774589887,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$a_FcmWNwBVSi8-Mn2VWO3-72G9gGQVqkIboHYarhDbg"},
{"content":{"body":"like `get prop() { return 2 };`","format":"org.matrix.custom.html","formatted_body":"like <code>get prop() { return 2 };</code>","msgtype":"m.text"},"ts":1687774598219,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$1SVbmt5DwiaxqmWTTfO0Cg0nLV1grwBCHzB5SRKbJ4M"},
{"content":{"body":"Because it's on the prototype, so it's installed long before creating `this`","format":"org.matrix.custom.html","formatted_body":"Because it's on the prototype, so it's installed long before creating <code>this</code>","msgtype":"m.text"},"ts":1687774624933,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YgE-0g_c2KfpUJzdsKgY41ECWNv1OnPZMjA1pbXPbU0"},
{"content":{"body":"oh right that's why it shows shadowed... I don't use Chrome console much I usually test this stuff on Node REPL so I got confused there (like with the .#prop thing above) ðŸ˜…","msgtype":"m.text"},"ts":1687774715138,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$137eYCsrk7NfqB8SGJsrXw0fSA45x32PeY4b165Xh2c"},
{"content":{"body":"on Node it just wouldn't show on the same level if its on prototype","msgtype":"m.text"},"ts":1687774753534,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$VaTEYQZhX1EPnWCYYW5M9t_gJRziFnERqZACC8hswq8"},
{"content":{"body":"but in any case, back to the interesting implication I realized...","msgtype":"m.text"},"ts":1687774866007,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$ZQSkk0bqKgeNkjBAOmiS_fbl3GNGFwbvF-eZuft7VkA"},
{"content":{"body":"We aren't normally allowed to have private properties on plain objects, and syntax like `let obj = { #foo: 123 }` is not allowed, but...","format":"org.matrix.custom.html","formatted_body":"We aren't normally allowed to have private properties on plain objects, and syntax like <code>let obj = { #foo: 123 }</code> is not allowed, but...","msgtype":"m.text"},"ts":1687774909677,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$TvpP1HxZ9t1BHQdFwp2Ot4_cOlY3vn9-0ad1Kb6ifeQ"},
{"content":{"body":"...this works","msgtype":"m.text"},"ts":1687774927286,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$mMTDg8x29_WiQl6vgwukEmd8rOhvSnz5w0AtFtDg6R0"},
{"content":{"body":"> <@voidhedron:matrix.org> We aren't normally allowed to have private properties on plain objects, and syntax like `let obj = { #foo: 123 }` is not allowed, but...\n\nso at this point my next obvious question has to be, why isn't plain object privates syntax like here allowed? It's clearly not for technical restrictions of JS engines at least...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$TvpP1HxZ9t1BHQdFwp2Ot4_cOlY3vn9-0ad1Kb6ifeQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@voidhedron:matrix.org\">@voidhedron:matrix.org</a><br>We aren't normally allowed to have private properties on plain objects, and syntax like <code>let obj = { #foo: 123 }</code> is not allowed, but...</blockquote></mx-reply>so at this point my next obvious question has to be, why isn't plain object privates syntax like here allowed? It's clearly not for technical restrictions of JS engines at least...","m.relates_to":{"m.in_reply_to":{"event_id":"$TvpP1HxZ9t1BHQdFwp2Ot4_cOlY3vn9-0ad1Kb6ifeQ"}},"msgtype":"m.text"},"ts":1687775019322,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$lJQ3ujzp3msz4N4T5wzqWKCRTuvMh7QO4ZpZ7uEVxqs"},
{"content":{"body":"but wait... it gets deeper, you can *inject* private properties into existing objects with this...","format":"org.matrix.custom.html","formatted_body":"but wait... it gets deeper, you can <em>inject</em> private properties into existing objects with this...","msgtype":"m.text"},"ts":1687775383048,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$tXwYGRWz2Lu8WUIQOJFox0h09NY7JyaVhTFOZ3eyZQM"},
{"content":{"body":"not at all production safe, hell this whole concept is cursed off the tracks, but with some eval tricks you can even make it fully dynamic...","msgtype":"m.text"},"ts":1687775456133,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$dZFZvA6HJm4fQ81k5KkVYipiY-gLmreehs4SHZ6XMdo"},
{"content":{"body":"voidhedron: if you return a promise from the constructor, then `new AsyncThing() instanceof AsyncThing` will be false","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@voidhedron:matrix.org\">voidhedron</a>: if you return a promise from the constructor, then <code>new AsyncThing() instanceof AsyncThing</code> will be false","msgtype":"m.text"},"ts":1687793230128,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C0GTgBbNQyEpNzAb53NjIxEmDR15ZNuCWaf87SZSoe4"},
{"content":{"body":"seems logical enough to me? It will work if you `await` the left side","format":"org.matrix.custom.html","formatted_body":"seems logical enough to me? It will work if you <code>await</code> the left side","msgtype":"m.text"},"ts":1687794267072,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$I8zz45KElwHnik5TgRc-POMWbNENu9pPd47R34aoIPQ"},
{"content":{"body":"thats like saying `typeof asyncFunction()` will always be `object` even if the function returns something else... of course, you didn't await it...","format":"org.matrix.custom.html","formatted_body":"thats like saying <code>typeof asyncFunction()</code> will always be <code>object</code> even if the function returns something else... of course, you didn't await it...","msgtype":"m.text"},"ts":1687794345487,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$_uczO54rig0n3hBMUki5gwBvFMt2HfQttuyj_ZguE5Q"},
{"content":{"body":"I do agree that having a non-awaited lingering promise result from a constructor is weird though, but I just see that as another reason to have the async constructor syntax sugar, it could be made so that when the syntax sugar is used, the constructor *must* be await'ed and not awaiting it would be an error","format":"org.matrix.custom.html","formatted_body":"I do agree that having a non-awaited lingering promise result from a constructor is weird though, but I just see that as another reason to have the async constructor syntax sugar, it could be made so that when the syntax sugar is used, the constructor <em>must</em> be await'ed and not awaiting it would be an error","msgtype":"m.text"},"ts":1687794475215,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$xUC7Q20cGIedFh39Ao9qyfAQWMKRoNQhkHt_xKamHFY"},
{"content":{"body":"`async constructor` would be statically analyzable to engines should be able to tell at compile time if `new X` is an async constructor or not, an error or not due to lack of preceding `await`","format":"org.matrix.custom.html","formatted_body":"<code>async constructor</code> would be statically analyzable to engines should be able to tell at compile time if <code>new X</code> is an async constructor or not, an error or not due to lack of preceding <code>await</code>","msgtype":"m.text"},"ts":1687794557344,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$zZ9AT_h2tGh_2tBeOCQeLf9Bh-HxAiHKpFyz8YzFbPU"},
{"content":{"body":"> <@voidhedron:matrix.org> so at this point my next obvious question has to be, why isn't plain object privates syntax like here allowed? It's clearly not for technical restrictions of JS engines at least...\n\nbecause no one has done the work to write out all the details of how it should work and convince the committee that it should happen","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$lJQ3ujzp3msz4N4T5wzqWKCRTuvMh7QO4ZpZ7uEVxqs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@voidhedron:matrix.org\">@voidhedron:matrix.org</a><br>so at this point my next obvious question has to be, why isn't plain object privates syntax like here allowed? It's clearly not for technical restrictions of JS engines at least...</blockquote></mx-reply>because no one has done the work to write out all the details of how it should work and convince the committee that it should happen","m.relates_to":{"m.in_reply_to":{"event_id":"$lJQ3ujzp3msz4N4T5wzqWKCRTuvMh7QO4ZpZ7uEVxqs"}},"msgtype":"m.text"},"ts":1687797138994,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BF4_Nk4yjc6pDXruibShSiyuMBdSvmCLpw8GBiAEIew"},
{"content":{"body":"this is also the answer to the `async constructor` question","format":"org.matrix.custom.html","formatted_body":"this is also the answer to the <code>async constructor</code> question","msgtype":"m.text"},"ts":1687797149954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RA5AopkAKZbg10J0vfQ5R0RjBtl5MWiIZrLc4W5B9xU"},
{"content":{"body":"the work has started but not finished in both cases","msgtype":"m.text"},"ts":1687797178416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SH1r33wuCFeupVwlFaZOWtRoCM_QfZ7k4jlVYovYj3g"},
{"content":{"body":"see respectively https://github.com/tc39/proposal-private-declarations and https://docs.google.com/presentation/d/1DsjZAzBjn2gCrr4l0uZzCymPIWZTKM8KzcnMBF31HAg/edit","msgtype":"m.text"},"ts":1687797205474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zOJUI1aiAzH_Tt6vuGYzEoGRL1xyVsazNhhB57JSx0k"},
{"content":{"body":"> <@voidhedron:matrix.org> `async constructor` would be statically analyzable to engines should be able to tell at compile time if `new X` is an async constructor or not, an error or not due to lack of preceding `await`\n\nbut, this is false: `X` can be dynamically rebound and is therefore not at all statically analyzable, in general","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zZ9AT_h2tGh_2tBeOCQeLf9Bh-HxAiHKpFyz8YzFbPU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@voidhedron:matrix.org\">@voidhedron:matrix.org</a><br><code>async constructor</code> would be statically analyzable to engines should be able to tell at compile time if <code>new X</code> is an async constructor or not, an error or not due to lack of preceding <code>await</code></blockquote></mx-reply>but, this is false: <code>X</code> can be dynamically rebound and is therefore not at all statically analyzable, in general","m.relates_to":{"m.in_reply_to":{"event_id":"$zZ9AT_h2tGh_2tBeOCQeLf9Bh-HxAiHKpFyz8YzFbPU"}},"msgtype":"m.text"},"ts":1687797246974,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JgEWp2ejV94EuIUVB92z3ZljLC398Xz01Pm2UvSrGyY"},
{"content":{"body":"something like TS can do that analysis but actual engines generally would not","msgtype":"m.text"},"ts":1687797261737,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TC1xgB-3JfIsoMXohNRumCkUoDlpB0a_AfXS0bt7CNs"},
{"content":{"body":" * something like TypeScript can do that analysis but actual engines generally would not","m.new_content":{"body":"something like TypeScript can do that analysis but actual engines generally would not","msgtype":"m.text"},"m.relates_to":{"event_id":"$TC1xgB-3JfIsoMXohNRumCkUoDlpB0a_AfXS0bt7CNs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1687797265972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B5SHbDYSInJcaQKh_oIORaqMiuC8Umr1yU65M0LAbE0"},
{"content":{"body":"TIL:\n\n```\nnew class {\n  \"constructor\"() { console.log(\"hi\") } // not logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n```\n\nSimilar to`[\"__proto__\"]` vs `\"__proto__\"`","format":"org.matrix.custom.html","formatted_body":"<p>TIL:</p>\n<pre><code>new class {\n  \"constructor\"() { console.log(\"hi\") } // not logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n</code></pre>\n<p>Similar to<code>[\"__proto__\"]</code> vs <code>\"__proto__\"</code></p>\n","msgtype":"m.text"},"ts":1687797542715,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hc86XEYvNcSMW--zFoQT3nxpeJYaOYwKJCA9lktaHAw"},
{"content":{"body":" * TIL:\n\n```\nnew class {\n  \"constructor\"() { console.log(\"hi\") } // logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n```\n\nSimilar to`[\"__proto__\"]` vs `\"__proto__\"`","format":"org.matrix.custom.html","formatted_body":" * <p>TIL:</p>\n<pre><code>new class {\n  \"constructor\"() { console.log(\"hi\") } // logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n</code></pre>\n<p>Similar to<code>[\"__proto__\"]</code> vs <code>\"__proto__\"</code></p>\n","m.new_content":{"body":"TIL:\n\n```\nnew class {\n  \"constructor\"() { console.log(\"hi\") } // logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n```\n\nSimilar to`[\"__proto__\"]` vs `\"__proto__\"`","format":"org.matrix.custom.html","formatted_body":"<p>TIL:</p>\n<pre><code>new class {\n  \"constructor\"() { console.log(\"hi\") } // logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n</code></pre>\n<p>Similar to<code>[\"__proto__\"]</code> vs <code>\"__proto__\"</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$hc86XEYvNcSMW--zFoQT3nxpeJYaOYwKJCA9lktaHAw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1687797551221,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RfzJhUff3bLerPM2gljaNhSL00AfFMCVQ8FpNHvK3Js"},
{"content":{"body":"> <@bakkot:matrix.org> see respectively https://github.com/tc39/proposal-private-declarations and https://docs.google.com/presentation/d/1DsjZAzBjn2gCrr4l0uZzCymPIWZTKM8KzcnMBF31HAg/edit\n\noh I see, issue #12 of the private decl's one even specifically talks about all the plain object private tricks I brought up, wonderful information thank you","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$zOJUI1aiAzH_Tt6vuGYzEoGRL1xyVsazNhhB57JSx0k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>see respectively https://github.com/tc39/proposal-private-declarations and https://docs.google.com/presentation/d/1DsjZAzBjn2gCrr4l0uZzCymPIWZTKM8KzcnMBF31HAg/edit</blockquote></mx-reply>oh I see, issue #12 of the private decl's one even specifically talks about all the plain object private tricks I brought up, wonderful information thank you","m.relates_to":{"m.in_reply_to":{"event_id":"$zOJUI1aiAzH_Tt6vuGYzEoGRL1xyVsazNhhB57JSx0k"}},"msgtype":"m.text"},"ts":1687809592089,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$05hqtcTeFCpc82JwFqkKMcDxsOt6Jr6YCEVc1AGSEaY"},
{"content":{"body":"I will keep an eye on those two proposals from now on I suppose","msgtype":"m.text"},"ts":1687809611776,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$iRRy8EF85Qvl12-K9Hll8wXlOafOp5Zdk-7GomPDeT0"},
{"content":{"body":"> <@aclaymore:matrix.org> TIL:\n> \n> ```\n> new class {\n>   \"constructor\"() { console.log(\"hi\") } // logged\n> }\n> new class {\n>   [\"constructor\"]() { console.log(\"hi\") } // not logged\n> }\n> ```\n> \n> Similar to`[\"__proto__\"]` vs `\"__proto__\"`\n\nwhat is the technical explanation behind this stuff?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$hc86XEYvNcSMW--zFoQT3nxpeJYaOYwKJCA9lktaHAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><p>TIL:</p>\n<pre><code>new class {\n  \"constructor\"() { console.log(\"hi\") } // logged\n}\nnew class {\n  [\"constructor\"]() { console.log(\"hi\") } // not logged\n}\n</code></pre>\n<p>Similar to<code>[\"__proto__\"]</code> vs <code>\"__proto__\"</code></p>\n</blockquote></mx-reply>what is the technical explanation behind this stuff?","m.relates_to":{"m.in_reply_to":{"event_id":"$hc86XEYvNcSMW--zFoQT3nxpeJYaOYwKJCA9lktaHAw"}},"msgtype":"m.text"},"ts":1687809667112,"senderName":"voidhedron","senderId":"@voidhedron:matrix.org","id":"$yUtQ4W8uqOc8MpWg7wmnk8DFPSfbhsuPIx-AwpUgPmY"},
{"content":{"body":"it should be possible to identify when you are defining a prototype/constructor purely syntatically","msgtype":"m.text"},"ts":1687809803499,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F_vVyqtHMSb3BBc0vjDp5PZSL2NgAeq00jnQWFwL5yU"},
{"content":{"body":"if you could use computed keys to do those, that would not be possible","msgtype":"m.text"},"ts":1687809815982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u0yXUNUHNRXpkwexxL7mNP7UCtth-Sm9E8OYezq-Mi0"},
{"content":{"body":"e.g. `let key = foo(); return { [key]: null }` - does that specify a prototype or not? the answer is that it does not, no matter what `key` is, because only static `__proto__` keys are special, not dynamic ones","format":"org.matrix.custom.html","formatted_body":"e.g. <code>let key = foo(); return { [key]: null }</code> - does that specify a prototype or not? the answer is that it does not, no matter what <code>key</code> is, because only static <code>__proto__</code> keys are special, not dynamic ones","msgtype":"m.text"},"ts":1687809876732,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GQmrLqIGx6z_xN9UIpePBT2T05ZjVoRny_GQlHgcUN4"},
{"content":{"body":"and in terms of spec the syntax-directed-operation for handing the constructor of a class body (https://tc39.es/ecma262/#sec-static-semantics-classelementkind) uses https://tc39.es/ecma262/#sec-static-semantics-propname which returns 'empty' for all computedPropertyNames","msgtype":"m.text"},"ts":1687812216057,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$phs2EN_O-Bilsp6tjM0NEKOvtzWT8mtysQPTGBSAoSA"},
{"content":{"body":"I am updating the base64 proposal to support decoding into an existing buffer; would appreciate any feedback https://github.com/tc39/proposal-arraybuffer-base64/pull/26","msgtype":"m.text"},"ts":1687817566080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bBeLa7JcstyndwGf8iAJLphLWhb6yDAL82KbvrTegw0"}
]