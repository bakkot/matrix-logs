[
{"content":{"body":"bakkot i think u got a good solution to my question","msgtype":"m.text"},"ts":1631326727044,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Z8EJXxeb3yjqZuk8K8OUFigDL-Vqm7NpBnO3Xzt3nmI"},
{"content":{"body":"zip shortest + make everything except the first one infinite","msgtype":"m.text"},"ts":1631326735925,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$YQY_YjXlxrXcVx0T7wsrr7pEQRL4u85T6hNublCmN3o"},
{"content":{"body":"`zip-longest` is actually the interesting one; my thing does not give you that unless you know up front which the longest one is","format":"org.matrix.custom.html","formatted_body":"<code>zip-longest</code> is actually the interesting one; my thing does not give you that unless you know up front which the longest one is","msgtype":"m.text"},"ts":1631328255729,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WfsGYbq2vTT5wIpDM14ZDs40u5rWiT8N_TrZhmyrSfY"},
{"content":{"body":"shortest I can come up with in ten minutes is\n\n```\ndef zip_longest(*parts, fillvalue=None):\n  sigil = {}\n  return map(\n    lambda p: tuple(map(lambda x: x if x is not sigil else fillvalue, p)),\n    takewhile(\n      lambda p: not (all(map(lambda x: x is sigil, p))),\n      zip(*(chain(x, repeat(sigil)) for x in parts))\n    )\n  )\n```\nwhich... I guess it's straightforward enough, but I get why python decided that was worth putting in the standard library","format":"org.matrix.custom.html","formatted_body":"<p>shortest I can come up with in ten minutes is</p>\n<pre><code>def zip_longest(*parts, fillvalue=None):\n  sigil = {}\n  return map(\n    lambda p: tuple(map(lambda x: x if x is not sigil else fillvalue, p)),\n    takewhile(\n      lambda p: not (all(map(lambda x: x is sigil, p))),\n      zip(*(chain(x, repeat(sigil)) for x in parts))\n    )\n  )\n</code></pre>\n<p>which... I guess it's straightforward enough, but I get why python decided that was worth putting in the standard library</p>\n","msgtype":"m.text"},"ts":1631329024574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D_JG00SvRP1QaoGEFbSOFfapSLfoKNQ28WAk_7plYHw"},
{"content":{"body":"itertools docs has examples for how to implement the functions https://docs.python.org/3/library/itertools.html#itertools.zip_longest","msgtype":"m.text"},"ts":1631372437791,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$vqgABWqEoh0TsIywbhNA7dzP9vk78nPyR3_ZYKMg-e8"},
{"content":{"body":"yeah but their implementation is an explicit loop, which is gross","msgtype":"m.text"},"ts":1631375138614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jD6sMXqx3r_wAO5eUsT6XsFHMtIy8yaQUTe8-_kXAB0"},
{"content":{"body":"Has anyone thought about proposing a logical-xor operator `^^`?","format":"org.matrix.custom.html","formatted_body":"Has anyone thought about proposing a logical-xor operator <code>^^</code>?","msgtype":"m.text"},"ts":1631381008624,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8q-rM_zj_MCWJWlOmkeFDT4eInjKEFp2Tw9N2ueHQLc"},
{"content":{"body":"It was asked for and talked about on the TypeScript side, where it was closed with “making new binary operators is TC39's job, not ours”. https://github.com/microsoft/TypeScript/issues/587","msgtype":"m.text"},"ts":1631381138497,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i7OLun4WbyVl5_gJQ7sE9XT7-IbohDK7DJNea7uN4xs"},
{"content":{"body":" * Has anyone thought about proposing a logical-xor operator `^^` to parallel bitwise xor `^`?","format":"org.matrix.custom.html","formatted_body":" * Has anyone thought about proposing a logical-xor operator <code>^^</code> to parallel bitwise xor <code>^</code>?","m.new_content":{"body":"Has anyone thought about proposing a logical-xor operator `^^` to parallel bitwise xor `^`?","format":"org.matrix.custom.html","formatted_body":"Has anyone thought about proposing a logical-xor operator <code>^^</code> to parallel bitwise xor <code>^</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$8q-rM_zj_MCWJWlOmkeFDT4eInjKEFp2Tw9N2ueHQLc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381153629,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uFsdTCx6lp7tjlTRZiIlVljeqhBJcL4Kvrf0Ltey2wg"},
{"content":{"body":"jschoi: what's wrong with `!==`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: what's wrong with <code>!==</code>?","msgtype":"m.text"},"ts":1631381216457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vDLV_FNkVJGktd6OAmkpNUFyAF2iuzVO-IMIErNWvok"},
{"content":{"body":"obviously it doesn't do the type coercion for you but I would be very reluctant to introduce a new operator which is only necessary when you don't know the types of your variables","msgtype":"m.text"},"ts":1631381245904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4mejU3Th9EZc5_p_1C3I0K3Ip6UH-Jj5XKv39ZQ1rj8"},
{"content":{"body":"Yep, that was brought up too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","msgtype":"m.text"},"ts":1631381253986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381259668,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AJDsuWxMXfmwKwBeOFmm5DyH-giGauM3aQewSGmo7iI"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that `^` might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that <code>^</code> might be used for other purposes in the future.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that `^` might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that <code>^</code> might be used for other purposes in the future.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381279551,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sXaKwwtr1mPywq4G0GuSOVBBUCuBPUKtv3KmaryPkjw"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the `^` punctuator might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the <code>^</code> punctuator might be used for other purposes in the future.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the `^` punctuator might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the <code>^</code> punctuator might be used for other purposes in the future.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381284033,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8abK26eywNxEVU7LfX7WqWnEfM7OX0VBnte5mMzhp20"},
{"content":{"body":"I don't recall seeing a discussion; you could check the mailing list archives at esdiscuss.org/, but I'd be surprised if there was any serious proposal put forward","msgtype":"m.text"},"ts":1631381326294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gn7EL5Z1frk3tBZQziw8uYNU6EGafcYt57Fm8o5YXzc"},
{"content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold.","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold.","msgtype":"m.text"},"ts":1631381380020,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw"},
{"content":{"body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`.","format":"org.matrix.custom.html","formatted_body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>.","m.new_content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`.","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381406273,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s7gDZ7s6JtyjW-leQK1NVB8LlZm_uqmCjv55EJglfbo"},
{"content":{"body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`. Thank you!","format":"org.matrix.custom.html","formatted_body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>. Thank you!","m.new_content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`. Thank you!","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>. Thank you!","msgtype":"m.text"},"m.relates_to":{"event_id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381429172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hk0kKOIZSVFLg9YDdkAYLtRqv4yk662AB8CIo32hvK4"},
{"content":{"body":"bakkot: it doesn't seem to be like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to be like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","msgtype":"m.text"},"ts":1631383024355,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XkCUZc0caDoxQGip4q6JanIpM6mpogah4_Srp9mFuDk"},
{"content":{"body":" * bakkot: it doesn't seem to me like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to me like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","m.new_content":{"body":"bakkot: it doesn't seem to me like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to me like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","msgtype":"m.text"},"m.relates_to":{"event_id":"$XkCUZc0caDoxQGip4q6JanIpM6mpogah4_Srp9mFuDk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631383029789,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4UHY8QANtJMRKFCJGRfllUhBfinSRcA0uqLq9wr-IbE"},
{"content":{"body":"with the old wording the stack was popped, now it is not. which realm should it point to?","msgtype":"m.text"},"ts":1631383074920,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$KUB1Y-OpSM0wvdqJd3aiDeoVhMbXPbgfxWCpDrzdK3o"}
]