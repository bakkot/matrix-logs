[
{"content":{"body":"bakkot i think u got a good solution to my question","msgtype":"m.text"},"ts":1631326727044,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Z8EJXxeb3yjqZuk8K8OUFigDL-Vqm7NpBnO3Xzt3nmI"},
{"content":{"body":"zip shortest + make everything except the first one infinite","msgtype":"m.text"},"ts":1631326735925,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$YQY_YjXlxrXcVx0T7wsrr7pEQRL4u85T6hNublCmN3o"},
{"content":{"body":"`zip-longest` is actually the interesting one; my thing does not give you that unless you know up front which the longest one is","format":"org.matrix.custom.html","formatted_body":"<code>zip-longest</code> is actually the interesting one; my thing does not give you that unless you know up front which the longest one is","msgtype":"m.text"},"ts":1631328255729,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WfsGYbq2vTT5wIpDM14ZDs40u5rWiT8N_TrZhmyrSfY"},
{"content":{"body":"shortest I can come up with in ten minutes is\n\n```\ndef zip_longest(*parts, fillvalue=None):\n  sigil = {}\n  return map(\n    lambda p: tuple(map(lambda x: x if x is not sigil else fillvalue, p)),\n    takewhile(\n      lambda p: not (all(map(lambda x: x is sigil, p))),\n      zip(*(chain(x, repeat(sigil)) for x in parts))\n    )\n  )\n```\nwhich... I guess it's straightforward enough, but I get why python decided that was worth putting in the standard library","format":"org.matrix.custom.html","formatted_body":"<p>shortest I can come up with in ten minutes is</p>\n<pre><code>def zip_longest(*parts, fillvalue=None):\n  sigil = {}\n  return map(\n    lambda p: tuple(map(lambda x: x if x is not sigil else fillvalue, p)),\n    takewhile(\n      lambda p: not (all(map(lambda x: x is sigil, p))),\n      zip(*(chain(x, repeat(sigil)) for x in parts))\n    )\n  )\n</code></pre>\n<p>which... I guess it's straightforward enough, but I get why python decided that was worth putting in the standard library</p>\n","msgtype":"m.text"},"ts":1631329024574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D_JG00SvRP1QaoGEFbSOFfapSLfoKNQ28WAk_7plYHw"},
{"content":{"body":"itertools docs has examples for how to implement the functions https://docs.python.org/3/library/itertools.html#itertools.zip_longest","msgtype":"m.text"},"ts":1631372437791,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$vqgABWqEoh0TsIywbhNA7dzP9vk78nPyR3_ZYKMg-e8"},
{"content":{"body":"yeah but their implementation is an explicit loop, which is gross","msgtype":"m.text"},"ts":1631375138614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jD6sMXqx3r_wAO5eUsT6XsFHMtIy8yaQUTe8-_kXAB0"},
{"content":{"body":"Has anyone thought about proposing a logical-xor operator `^^`?","format":"org.matrix.custom.html","formatted_body":"Has anyone thought about proposing a logical-xor operator <code>^^</code>?","msgtype":"m.text"},"ts":1631381008624,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8q-rM_zj_MCWJWlOmkeFDT4eInjKEFp2Tw9N2ueHQLc"},
{"content":{"body":"It was asked for and talked about on the TypeScript side, where it was closed with “making new binary operators is TC39's job, not ours”. https://github.com/microsoft/TypeScript/issues/587","msgtype":"m.text"},"ts":1631381138497,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i7OLun4WbyVl5_gJQ7sE9XT7-IbohDK7DJNea7uN4xs"},
{"content":{"body":" * Has anyone thought about proposing a logical-xor operator `^^` to parallel bitwise xor `^`?","format":"org.matrix.custom.html","formatted_body":" * Has anyone thought about proposing a logical-xor operator <code>^^</code> to parallel bitwise xor <code>^</code>?","m.new_content":{"body":"Has anyone thought about proposing a logical-xor operator `^^` to parallel bitwise xor `^`?","format":"org.matrix.custom.html","formatted_body":"Has anyone thought about proposing a logical-xor operator <code>^^</code> to parallel bitwise xor <code>^</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$8q-rM_zj_MCWJWlOmkeFDT4eInjKEFp2Tw9N2ueHQLc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381153629,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uFsdTCx6lp7tjlTRZiIlVljeqhBJcL4Kvrf0Ltey2wg"},
{"content":{"body":"jschoi: what's wrong with `!==`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: what's wrong with <code>!==</code>?","msgtype":"m.text"},"ts":1631381216457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vDLV_FNkVJGktd6OAmkpNUFyAF2iuzVO-IMIErNWvok"},
{"content":{"body":"obviously it doesn't do the type coercion for you but I would be very reluctant to introduce a new operator which is only necessary when you don't know the types of your variables","msgtype":"m.text"},"ts":1631381245904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4mejU3Th9EZc5_p_1C3I0K3Ip6UH-Jj5XKv39ZQ1rj8"},
{"content":{"body":"Yep, that was brought up too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","msgtype":"m.text"},"ts":1631381253986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381259668,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AJDsuWxMXfmwKwBeOFmm5DyH-giGauM3aQewSGmo7iI"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that `^` might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that <code>^</code> might be used for other purposes in the future.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that `^` might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that <code>^</code> might be used for other purposes in the future.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381279551,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sXaKwwtr1mPywq4G0GuSOVBBUCuBPUKtv3KmaryPkjw"},
{"content":{"body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the `^` punctuator might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":" * Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the <code>^</code> punctuator might be used for other purposes in the future.","m.new_content":{"body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the `^` punctuator might be used for other purposes in the future.","format":"org.matrix.custom.html","formatted_body":"Yep, that was brought up in the TypeScript issue too. My answer is: nothing! I’m not seriously considering it, but I am wondering if it was considered, especially given that the <code>^</code> punctuator might be used for other purposes in the future.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XVAjmM_SLiwsgjnzpViOlewHEblQQyTmlYMnsO0JCB4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381284033,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8abK26eywNxEVU7LfX7WqWnEfM7OX0VBnte5mMzhp20"},
{"content":{"body":"I don't recall seeing a discussion; you could check the mailing list archives at esdiscuss.org/, but I'd be surprised if there was any serious proposal put forward","msgtype":"m.text"},"ts":1631381326294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gn7EL5Z1frk3tBZQziw8uYNU6EGafcYt57Fm8o5YXzc"},
{"content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold.","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold.","msgtype":"m.text"},"ts":1631381380020,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw"},
{"content":{"body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`.","format":"org.matrix.custom.html","formatted_body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>.","m.new_content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`.","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381406273,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s7gDZ7s6JtyjW-leQK1NVB8LlZm_uqmCjv55EJglfbo"},
{"content":{"body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`. Thank you!","format":"org.matrix.custom.html","formatted_body":" * Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>. Thank you!","m.new_content":{"body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary `^^` in TC39 is cold. The pipe operator might use `^`, after all, which would forever preclude a binary `^^`. Thank you!","format":"org.matrix.custom.html","formatted_body":"Yeah, I couldn’t find anything on ESDiscuss. But it’s good to know that the temperature for a binary <code>^^</code> in TC39 is cold. The pipe operator might use <code>^</code>, after all, which would forever preclude a binary <code>^^</code>. Thank you!","msgtype":"m.text"},"m.relates_to":{"event_id":"$cUK1e68Je75Zj7dP32NzbFTICijTt4LyV1IvwxzFuvw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631381429172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hk0kKOIZSVFLg9YDdkAYLtRqv4yk662AB8CIo32hvK4"},
{"content":{"body":"bakkot: it doesn't seem to be like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to be like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","msgtype":"m.text"},"ts":1631383024355,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XkCUZc0caDoxQGip4q6JanIpM6mpogah4_Srp9mFuDk"},
{"content":{"body":" * bakkot: it doesn't seem to me like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to me like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","m.new_content":{"body":"bakkot: it doesn't seem to me like the new tail call wording behaves well with the \"caller realm\" for eval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it doesn't seem to me like the new tail call wording behaves well with the &quot;caller realm&quot; for eval","msgtype":"m.text"},"m.relates_to":{"event_id":"$XkCUZc0caDoxQGip4q6JanIpM6mpogah4_Srp9mFuDk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631383029789,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4UHY8QANtJMRKFCJGRfllUhBfinSRcA0uqLq9wr-IbE"},
{"content":{"body":"with the old wording the stack was popped, now it is not. which realm should it point to?","msgtype":"m.text"},"ts":1631383074920,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$KUB1Y-OpSM0wvdqJd3aiDeoVhMbXPbgfxWCpDrzdK3o"},
{"content":{"body":"devsnek: eval isn't a tail call anyway; I don't understand the question","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: eval isn't a tail call anyway; I don't understand the question","msgtype":"m.text"},"ts":1631383287386,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ogwuLe7CT6waG-3t9SC8cuf4pyW0BTf6dMLpK-gcyDA"},
{"content":{"body":"wdym it isn't a tail call","msgtype":"m.text"},"ts":1631383302197,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ZLGAX5JbQmJoS4IIfQGz9PwS8UY5OoXh84OI94NZ0pk"},
{"content":{"body":"https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation","msgtype":"m.text"},"ts":1631383310449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r_iFk774GQpR0z2ucb_aT9sAfnABrdZsBYJ9EUISNHc"},
{"content":{"body":"a direct eval doesn't go through the normal call semantics","msgtype":"m.text"},"ts":1631383324293,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$URRo9JOk0yRX9pC_fvU3-y2ibPFkbvTz90pc_CvnpZQ"},
{"content":{"body":"it has its own branch, which doesn't include the tail call stuff","msgtype":"m.text"},"ts":1631383331360,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$utH6qmXEliHzDN-qb26tWOvTs_oev3kcsj5wnv6MY8Q"},
{"content":{"body":"you can do `return (0, eval)()` though","format":"org.matrix.custom.html","formatted_body":"you can do <code>return (0, eval)()</code> though","msgtype":"m.text"},"ts":1631383351001,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$eJwDGqJ-fUrgbpj4FdiQnvGjYYC9MxcZOCrAXWF89uU"},
{"content":{"body":"oh, for indirect eval, sure","msgtype":"m.text"},"ts":1631383404868,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SfdBD484IAtLXH6wdkgqA8WGzjeihy02hEh3tY26eVQ"},
{"content":{"body":"so its like 2nd to top or 3rd to top depending on if there's a tail call now","msgtype":"m.text"},"ts":1631383446125,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$sfQWSmvJO8kwPRdm1qzm55hftnK76j9TuQBZX7SsM1s"},
{"content":{"body":"no, it's still the second to top","msgtype":"m.text"},"ts":1631383462255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6vbvfKNKn5BjIWRWVU_D8g67nIb7CYUvQ5Qd3Bb_tDI"},
{"content":{"body":"the realm is no longer the realm of the caller of the function containing the tail call","msgtype":"m.text"},"ts":1631383471675,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ra0vLgDiP0PkM75wj_jaJpePyqNp8ZWOMA6P5JysOcM"},
{"content":{"body":"that was the point of the PR","msgtype":"m.text"},"ts":1631383475765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MSFVWtfA5wGebwHF0G8fCsxIpTR1QNA0O1DZLFpMjLI"},
{"content":{"body":"?","msgtype":"m.text"},"ts":1631383482857,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$-b-KiTfNbjl7toXDu84wv2nt-bHnNw_A4dxXN6-h-Bo"},
{"content":{"body":"the realm used for `g` in `function f(){ g() }` is the same as the realm for `g` in `function f(){ return g() }`","format":"org.matrix.custom.html","formatted_body":"the realm used for <code>g</code> in <code>function f(){ g() }</code> is the same as the realm for <code>g</code> in <code>function f(){ return g() }</code>","msgtype":"m.text"},"ts":1631383499957,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5ZEaFRUBYYyxqBsEYOjahf7oILDxJsPTy5iu9Oic7r8"},
{"content":{"body":"that was the point of the PR","msgtype":"m.text"},"ts":1631383509359,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SerY3ioTEmAByTp76yjyw_xKGkrOJTjXPy-8jyHPo1g"},
{"content":{"body":"i'm not following","msgtype":"m.text"},"ts":1631383540417,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$xig_lS0au9u30lAGzj2DZzmadl2Bh9usmP0ZZAN1kH0"},
{"content":{"body":"prior to #2495, when you had a `g` which could observe its callers realm, e.g. if `g` is a revoked proxy for a callable,\nit would observe the realm of the caller of `f` in `function f(){ return g() }`, and now it observes the realm of `f` itself, just as for `function f(){ g() }`","format":"org.matrix.custom.html","formatted_body":"prior to #2495, when you had a <code>g</code> which could observe its callers realm, e.g. if <code>g</code> is a revoked proxy for a callable,<br>it would observe the realm of the caller of <code>f</code> in <code>function f(){ return g() }</code>, and now it observes the realm of <code>f</code> itself, just as for <code>function f(){ g() }</code>","msgtype":"m.text"},"ts":1631383626033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NRqSdR1gcc9gXnQIOiBvjjRuUnjWejKvoE6amlg51Gk"},
{"content":{"body":"no i mean, if that's the case, isn't the assertion incorrect","msgtype":"m.text"},"ts":1631383642678,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$lXharDB1H7MhB2se1643xTi3U75i97OTErj1x6g-x8M"},
{"content":{"body":"since you are continuing to use information from it","msgtype":"m.text"},"ts":1631383649194,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$o-Y_8qiTSGp3AVA7a2FHIDEshK19lqffDJfok1ftAO0"},
{"content":{"body":"eh, depends on what you consider \"resources\"","msgtype":"m.text"},"ts":1631383709958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y1etd_jG0Hqk2kaXW2xa5WmquHv1F5EX6FgNLkNWSrs"},
{"content":{"body":"we have consensus for allowing cross-realm tail calls to consume resources anyway, we just never merged that change in to the spec (and I don't plan to)","msgtype":"m.text"},"ts":1631383729047,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hUC0RRLNotnBg-7J8tkaVBfTuamEtHaFh9O6OP50e7w"},
{"content":{"body":"t just weirds me out","msgtype":"m.text"},"ts":1631383828756,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$oAEIq018sRZZIfkLTs8V1edFHvRx7GwZufArbl5Is9Q"},
{"content":{"body":" * it just weirds me out","m.new_content":{"body":"it just weirds me out","msgtype":"m.text"},"m.relates_to":{"event_id":"$oAEIq018sRZZIfkLTs8V1edFHvRx7GwZufArbl5Is9Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631383830780,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VAplMlQhwrh9iFB49YF7tly5Ztvmv5sWJDnsQhMgDLE"},
{"content":{"body":"and if we explicitly differentiate between implementation activations of functions and the execution context stack, why do we also have to duplicate the context in asyncfunctionstart","msgtype":"m.text"},"ts":1631383905135,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$HqJ62Z53824ND-PnX2wihu_RdSXwie-QR5npYGPLQgc"},
{"content":{"body":"i feel like i'm missing a connection here or there is a mistake","msgtype":"m.text"},"ts":1631383924768,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$NV6HewmG7J1XaCHp7xSywsKuOIFaQw984Mr5B51AjI4"},
{"content":{"body":"> if we explicitly differentiate between implementation activations of functions\n\nI don't know what this means. the spec does not use the phrase \"implementation activations of functions\"","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>if we explicitly differentiate between implementation activations of functions</p>\n</blockquote>\n<p>I don't know what this means. the spec does not use the phrase &quot;implementation activations of functions&quot;</p>\n","msgtype":"m.text"},"ts":1631383986846,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6nl_r7unGmdH3WNqBild4_FlscMvn2TkkU_3D6J7fzA"},
{"content":{"body":"> For example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\nFor example, a tail position call should only grow an implementation's activation record stack by the amount that the size of the target function's activation record exceeds the size of the calling function's activation record. If the target function's activation record is smaller, then the total size of the stack should decrease.\n</blockquote>\n","msgtype":"m.text"},"ts":1631384009526,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$t25GKs2QJ76DZdksk0bEKYosKRR5rqIYf7kKJcZbIMY"},
{"content":{"body":"that's in a non-normative note, which is talking about implementation strategies","msgtype":"m.text"},"ts":1631384041077,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b-L6FPcsnqE1g4TgCGNTXjBIoqGgrsHU23fFpyrBPlk"},
{"content":{"body":"there's no corresponding notion in the normative prose","msgtype":"m.text"},"ts":1631384069969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GjAsvGWcNKaEUpq8uBuME2P2pWSxN1cjVvi6PPsoU18"},
{"content":{"body":"i think the normative text was written with that model in mind","msgtype":"m.text"},"ts":1631384146059,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$RHXv9lx4Dp7DPo1cCpM6JMHUdyAuUkXOB0FtNxjV0b0"},
{"content":{"body":"and it makes it weird","msgtype":"m.text"},"ts":1631384169610,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BrHdoplogFmJbxeq7NKxuwdWto8uXOGjge0J8vtnLlc"},
{"content":{"body":"it was written with that model in mind, but it was extremely confused, because it was conflating that with transfers of control","msgtype":"m.text"},"ts":1631384213079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sbIfeXqrL_pySP3CMhI-_6_NLxYtbu-Q4ROCfj4_N3c"},
{"content":{"body":"now there is no such conflation; it is much better","msgtype":"m.text"},"ts":1631384218502,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E79tDh7Uo5OD4OFA8UJl2s3d_9cINCpMbWYuux8Bung"},
{"content":{"body":"re:\n> why do we also have to duplicate the context in asyncfunctionstart\n\nit's so that when the topmost context suspends (that is, the body of the function does `await`), control will return (after a couple of intervening steps) to EvaluateAsyncFunctionBody step 5, which is the correct next step to evaluate","format":"org.matrix.custom.html","formatted_body":"<p>re:</p>\n<blockquote>\n<p>why do we also have to duplicate the context in asyncfunctionstart</p>\n</blockquote>\n<p>it's so that when the topmost context suspends (that is, the body of the function does <code>await</code>), control will return (after a couple of intervening steps) to EvaluateAsyncFunctionBody step 5, which is the correct next step to evaluate</p>\n","msgtype":"m.text"},"ts":1631384375635,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$39LcuzCuXNfkVDkjxdlWy25MRV5Vf2Hb5AgfrbJJgrc"},
{"content":{"body":"if we didn't push a new context the `await` would suspend the execution context which has EvaluateAsyncFunctionBody itself, which is no good","format":"org.matrix.custom.html","formatted_body":"if we didn't push a new context the <code>await</code> would suspend the execution context which has EvaluateAsyncFunctionBody itself, which is no good","msgtype":"m.text"},"ts":1631384432406,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nOfsO95aKJxoXYi74ck-42Z4yjbyRxWJHef_ZYkEdPA"},
{"content":{"body":"yeah i know the reasoning there (we had to revert my pr remember?), my point was there seems to be disagreement about what thing is doing the evaluation of code. is the execution context metadata for the evaluation or does it represent the evaluation itself","msgtype":"m.text"},"ts":1631384554120,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$SpwDrBF5kYCkdT2DwbWktoZGrgzLXdsKtRhCjvapVaI"}
]