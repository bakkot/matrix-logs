[
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1652227332150,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2zjUIHfLwo5KwxaZ0UjltTkE8NzisbN8Z5lgU0Ybq1M"},
{"content":{"body":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose","msgtype":"m.text","org.matrix.msc1767.text":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose"},"ts":1652227353721,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZRSsbkxXI78zhYP9wmQl9kstn0Dala09KWLX565W19c"},
{"content":{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","format":"org.matrix.custom.html","formatted_body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","mimetype":"text/plain"},{"body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","mimetype":"text/html"}]},"ts":1652227429244,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U1whPL6GiGFXtJ3me23vzpenTTBHuKIXwpG7KQ9aOIc"},
{"content":{"body":"and Promise.resolve, yes","msgtype":"m.text","org.matrix.msc1767.text":"and Promise.resolve, yes"},"ts":1652227432530,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EVGdisP6y0GVIuYJ_dY71AVzog8q324UPM6FjYyoulc"},
{"content":{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","format":"org.matrix.custom.html","formatted_body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","mimetype":"text/plain"},{"body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","mimetype":"text/html"}]},"ts":1652227514686,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8uvQnbwY0PpSXDUs7p42BT5bBlT_WAe1oCLOAB6Jt5M"},
{"content":{"body":"perhaps we will manage to remove Symbol.species instead","msgtype":"m.text","org.matrix.msc1767.text":"perhaps we will manage to remove Symbol.species instead"},"ts":1652227565971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k4_yUblUqGfKZH-L-pM8eKagHt_fIbZrnFZZhALTYTQ"},
{"content":{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","format":"org.matrix.custom.html","formatted_body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","mimetype":"text/plain"},{"body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","mimetype":"text/html"}]},"ts":1652227616900,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$S-3_npOgf0i2nzuXb9chFSYYV45pTLtElDs9vRiuhDE"},
{"content":{"body":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics","msgtype":"m.text","org.matrix.msc1767.text":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics"},"ts":1652227753314,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7JcmOy23i1wWk-PkazZx7eB3JEzSkUctLW23qWPgNPg"},
{"content":{"body":"I don't think we'll actually manage it but I live in hope","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we'll actually manage it but I live in hope"},"ts":1652227762128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qUAexuHSh_fBDSp771ZxytaK-a9HAIdWXlLK9-KVC74"},
{"content":{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","format":"org.matrix.custom.html","formatted_body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","mimetype":"text/plain"},{"body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","mimetype":"text/html"}]},"ts":1652227825969,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kDfktMt3KQTUJeX5WijxR1UYNQP3mo4-58WCH4RgvrU"},
{"content":{"body":"I think there would need to be more motivation than your very narrow use case","msgtype":"m.text","org.matrix.msc1767.text":"I think there would need to be more motivation than your very narrow use case"},"ts":1652227911197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IPctG4pYavBLNCDFugEiHVIbGxrgP_c-QKyEB7GsEDM"},
{"content":{"body":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\"","msgtype":"m.text","org.matrix.msc1767.text":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\""},"ts":1652227941079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RUgKuYgmmrbTbf0dypqrJSnTaHpyI8Uej6BBddjahfk"},
{"content":{"body":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity.","msgtype":"m.text","org.matrix.msc1767.text":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity."},"ts":1652228032050,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zz6Lh1Qwgky4lhLRGSkNSk9wSOkUohp4jv_h-woWyAk"}
]