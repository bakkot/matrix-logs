[
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1652227332150,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2zjUIHfLwo5KwxaZ0UjltTkE8NzisbN8Z5lgU0Ybq1M"},
{"content":{"body":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose","msgtype":"m.text","org.matrix.msc1767.text":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose"},"ts":1652227353721,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZRSsbkxXI78zhYP9wmQl9kstn0Dala09KWLX565W19c"},
{"content":{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","format":"org.matrix.custom.html","formatted_body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","mimetype":"text/plain"},{"body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","mimetype":"text/html"}]},"ts":1652227429244,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U1whPL6GiGFXtJ3me23vzpenTTBHuKIXwpG7KQ9aOIc"},
{"content":{"body":"and Promise.resolve, yes","msgtype":"m.text","org.matrix.msc1767.text":"and Promise.resolve, yes"},"ts":1652227432530,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EVGdisP6y0GVIuYJ_dY71AVzog8q324UPM6FjYyoulc"},
{"content":{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","format":"org.matrix.custom.html","formatted_body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","mimetype":"text/plain"},{"body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","mimetype":"text/html"}]},"ts":1652227514686,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8uvQnbwY0PpSXDUs7p42BT5bBlT_WAe1oCLOAB6Jt5M"},
{"content":{"body":"perhaps we will manage to remove Symbol.species instead","msgtype":"m.text","org.matrix.msc1767.text":"perhaps we will manage to remove Symbol.species instead"},"ts":1652227565971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k4_yUblUqGfKZH-L-pM8eKagHt_fIbZrnFZZhALTYTQ"},
{"content":{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","format":"org.matrix.custom.html","formatted_body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","mimetype":"text/plain"},{"body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","mimetype":"text/html"}]},"ts":1652227616900,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$S-3_npOgf0i2nzuXb9chFSYYV45pTLtElDs9vRiuhDE"},
{"content":{"body":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics","msgtype":"m.text","org.matrix.msc1767.text":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics"},"ts":1652227753314,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7JcmOy23i1wWk-PkazZx7eB3JEzSkUctLW23qWPgNPg"},
{"content":{"body":"I don't think we'll actually manage it but I live in hope","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we'll actually manage it but I live in hope"},"ts":1652227762128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qUAexuHSh_fBDSp771ZxytaK-a9HAIdWXlLK9-KVC74"},
{"content":{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","format":"org.matrix.custom.html","formatted_body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","mimetype":"text/plain"},{"body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","mimetype":"text/html"}]},"ts":1652227825969,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kDfktMt3KQTUJeX5WijxR1UYNQP3mo4-58WCH4RgvrU"},
{"content":{"body":"I think there would need to be more motivation than your very narrow use case","msgtype":"m.text","org.matrix.msc1767.text":"I think there would need to be more motivation than your very narrow use case"},"ts":1652227911197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IPctG4pYavBLNCDFugEiHVIbGxrgP_c-QKyEB7GsEDM"},
{"content":{"body":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\"","msgtype":"m.text","org.matrix.msc1767.text":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\""},"ts":1652227941079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RUgKuYgmmrbTbf0dypqrJSnTaHpyI8Uej6BBddjahfk"},
{"content":{"body":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity.","msgtype":"m.text","org.matrix.msc1767.text":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity."},"ts":1652228032050,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zz6Lh1Qwgky4lhLRGSkNSk9wSOkUohp4jv_h-woWyAk"},
{"content":{"body":"I am sure ljharb would love a clean way to brand check a promise for his libraries ;)","format":"org.matrix.custom.html","formatted_body":"I am sure <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would love a clean way to brand check a promise for his libraries ;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am sure ljharb would love a clean way to brand check a promise for his libraries ;)","mimetype":"text/plain"},{"body":"I am sure <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would love a clean way to brand check a promise for his libraries ;)","mimetype":"text/html"}]},"ts":1652228117758,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_UtQ0Sg23VYsn8pWg1amTSCFpiKNmuaJrq5vTXW2n7o"},
{"content":{"body":"People would use it instead of \"is thenable\" and be confused","msgtype":"m.text","org.matrix.msc1767.text":"People would use it instead of \"is thenable\" and be confused"},"ts":1652228132434,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MiYY4IqADrNUply4KrSHgEs2qfegezK42tVHYKRkdaw"},
{"content":{"body":"\"is promise\" is almost never the test anyone actually wants; you and ljharb have extremely unusual use cases","msgtype":"m.text","org.matrix.msc1767.text":"\"is promise\" is almost never the test anyone actually wants; you and ljharb have extremely unusual use cases"},"ts":1652228192554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nCLMP9t_gafjfiOhSs2cyTHPE4JD2rZ6Au8lhuj-QJQ"},
{"content":{"body":"but it _looks_ like a thing you might want, so people will use it in other cases, and that's bad","format":"org.matrix.custom.html","formatted_body":"but it <em>looks</em> like a thing you might want, so people will use it in other cases, and that's bad","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but it _looks_ like a thing you might want, so people will use it in other cases, and that's bad","mimetype":"text/plain"},{"body":"but it <em>looks</em> like a thing you might want, so people will use it in other cases, and that's bad","mimetype":"text/html"}]},"ts":1652228218968,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VHyuJ-3OJeVS9jaYU6WmGXUssd3HWORNU8gx1IfeXaQ"},
{"content":{"body":"Do you have any suggestion to make it more obvious what this does, or less likely to be misused?","msgtype":"m.text","org.matrix.msc1767.text":"Do you have any suggestion to make it more obvious what this does, or less likely to be misused?"},"ts":1652228353557,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CRwGZwSTm_WexhaAoLYprmfIny8WZhQVr-yOSUhibeA"},
{"content":{"body":"I’m sure there’s a way to express the brand-check that would be clear and sufficiently out of reach.","msgtype":"m.text","org.matrix.msc1767.text":"I’m sure there’s a way to express the brand-check that would be clear and sufficiently out of reach."},"ts":1652228354494,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GXseNIWeljLjghMPc5MxtkbvGP4jrwB40C0Gs9hiIZk"},
{"content":{"body":"I agree that there’s potential for confusion for any particular behavior for `Promise.isPromise(thenable)`.","format":"org.matrix.custom.html","formatted_body":"I agree that there’s potential for confusion for any particular behavior for <code>Promise.isPromise(thenable)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that there’s potential for confusion for any particular behavior for `Promise.isPromise(thenable)`.","mimetype":"text/plain"},{"body":"I agree that there’s potential for confusion for any particular behavior for <code>Promise.isPromise(thenable)</code>.","mimetype":"text/html"}]},"ts":1652228484660,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JcTi4J3nlQBgy1ZbEEMVWIQQkkysGnyOMZCIG2j-Rqg"},
{"content":{"body":"And I also agree we need to be able to check whether a value is a native promise without reentering any of its API.","msgtype":"m.text","org.matrix.msc1767.text":"And I also agree we need to be able to check whether a value is a native promise without reentering any of its API."},"ts":1652228555315,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kRFUpOQwGnCg0R2XZHuFmrQSyfRa16FxVjPp188CzuA"},
{"content":{"body":"Though, `Promise.isPromise(thenable) === false` isn’t _that_ weird of an answer. It’s not a `Promise` _yet_, even if it’s a promise with a little P.","format":"org.matrix.custom.html","formatted_body":"Though, <code>Promise.isPromise(thenable) === false</code> isn’t <em>that</em> weird of an answer. It’s not a <code>Promise</code> <em>yet</em>, even if it’s a promise with a little P.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though, `Promise.isPromise(thenable) === false` isn’t _that_ weird of an answer. It’s not a `Promise` _yet_, even if it’s a promise with a little P.","mimetype":"text/plain"},{"body":"Though, <code>Promise.isPromise(thenable) === false</code> isn’t <em>that</em> weird of an answer. It’s not a <code>Promise</code> <em>yet</em>, even if it’s a promise with a little P.","mimetype":"text/html"}]},"ts":1652228667916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zSqFdtZmaOe-GKlAz92HN8MoJ6vDc5fGKf4IF7kR7QU"},
{"content":{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"ts":1652228763404,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$E7_scTfTIhcP5YJebrB7UGjQ3QC4BouTQ5HAcmLcIMw"},
{"content":{"body":" * The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":" * The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","m.new_content":{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$E7_scTfTIhcP5YJebrB7UGjQ3QC4BouTQ5HAcmLcIMw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":" * The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"ts":1652228779959,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y4jj5-TdlytJdiRdhjGha0pS2rBQlWqE6aUbajAPrdg"},
{"content":{"body":"IME the main reason people use `isArray` is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: `if (Promise.isPromise(x)) x = await x`, say. but that doesn't do the right thing if `x` is thenable but not a Promise.","format":"org.matrix.custom.html","formatted_body":"IME the main reason people use <code>isArray</code> is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: <code>if (Promise.isPromise(x)) x = await x</code>, say. but that doesn't do the right thing if <code>x</code> is thenable but not a Promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"IME the main reason people use `isArray` is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: `if (Promise.isPromise(x)) x = await x`, say. but that doesn't do the right thing if `x` is thenable but not a Promise.","mimetype":"text/plain"},{"body":"IME the main reason people use <code>isArray</code> is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: <code>if (Promise.isPromise(x)) x = await x</code>, say. but that doesn't do the right thing if <code>x</code> is thenable but not a Promise.","mimetype":"text/html"}]},"ts":1652229314796,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKWgCpP8XMKUmztq-nYa4OrPN7V0TvAafatxKVee0e8"},
{"content":{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we _definitely will not do_","format":"org.matrix.custom.html","formatted_body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we <em>definitely will not do</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we _definitely will not do_","mimetype":"text/plain"},{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we <em>definitely will not do</em>","mimetype":"text/html"}]},"ts":1652229364928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EGahpcQ5UqXqKL3LhZE_CA3dpQCd7xvTVttBXy-xIi4"},
{"content":{"body":"in practice tho it’s rarely a thenable","msgtype":"m.text"},"ts":1652229385187,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$twFa1hdIiqagv1fh64VFT7b8M-lkGJJ2bDyr8EmmGI8"},
{"content":{"body":"I would not expect proxies to pierce this","msgtype":"m.text","org.matrix.msc1767.text":"I would not expect proxies to pierce this"},"ts":1652229390075,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WWclo6ldMbaxGODj8iGU1zwXHEGustWXoRbnt1uS2D4"},
{"content":{"body":"The example is not coherent because `await 1` works fine, but 1 is not a promise.","format":"org.matrix.custom.html","formatted_body":"The example is not coherent because <code>await 1</code> works fine, but 1 is not a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The example is not coherent because `await 1` works fine, but 1 is not a promise.","mimetype":"text/plain"},{"body":"The example is not coherent because <code>await 1</code> works fine, but 1 is not a promise.","mimetype":"text/html"}]},"ts":1652229390605,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nIF_E6j6Ujjk54oJPCx8BeF7FxNrl82ZzTnaQIasqzY"},
{"content":{"body":"the example is perfectly coherent","msgtype":"m.text","org.matrix.msc1767.text":"the example is perfectly coherent"},"ts":1652229400707,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V6jHT1KTGZK7taYDUj-3TRL2IrhtA_PSO4KoteA4yuw"},
{"content":{"body":"non-Promise thenables largely died once Promise and async/await became commonplace","msgtype":"m.text"},"ts":1652229404567,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ggyFf3lz_Pa2FUsqF0jE-hKpAOOrUBRgFOdZs-P3DZ4"},
{"content":{"body":"ljharb: depends on how many proxies you have around","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: depends on how many proxies you have around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: depends on how many proxies you have around","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: depends on how many proxies you have around","mimetype":"text/html"}]},"ts":1652229412062,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LEpdJCkGIvHQKnEC2pd2-2WsZJH-8oxU9JT9Bfsk2vc"},
{"content":{"body":"proxy for a promise is thenable but not a promise","msgtype":"m.text","org.matrix.msc1767.text":"proxy for a promise is thenable but not a promise"},"ts":1652229416984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TR9n6JL1dHLhggx14vMNA95PyWMJktPwliFOc7vclfk"},
{"content":{"body":"“Any use of proxy” is incredibly niche automatically :-)","msgtype":"m.text"},"ts":1652229437151,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$15185LRfqKEarMYr9onAnUG8QWmorcqhLKaFhHtziZE"},
{"content":{"body":"fair enough","msgtype":"m.text","org.matrix.msc1767.text":"fair enough"},"ts":1652229442231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VLCD5TGjIPL9K0Uang-V0-IGPdz8BB117H-MocgnuZA"},
{"content":{"body":"Kris Kowal: how is the example not coherent?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: how is the example not coherent?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: how is the example not coherent?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: how is the example not coherent?","mimetype":"text/html"}]},"ts":1652229445736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i4Mw12qYufg5KK22xy29AMpeR8dJJch5jsJg4mQJQ6U"},
{"content":{"body":"I mean, it's _wrong_, because it's treating \"thenable\" as the same as \"is promise\", but I guarantee people are going to do that; that's my point","format":"org.matrix.custom.html","formatted_body":"I mean, it's <em>wrong</em>, because it's treating &quot;thenable&quot; as the same as &quot;is promise&quot;, but I guarantee people are going to do that; that's my point","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean, it's _wrong_, because it's treating \"thenable\" as the same as \"is promise\", but I guarantee people are going to do that; that's my point","mimetype":"text/plain"},{"body":"I mean, it's <em>wrong</em>, because it's treating &quot;thenable&quot; as the same as &quot;is promise&quot;, but I guarantee people are going to do that; that's my point","mimetype":"text/html"}]},"ts":1652229470560,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B_al-G72QCoAkDQmoABDLaC2rl43JoYHnn2vXNebWxE"},
{"content":{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the `await` when passed a value which is not boxed in a promise","format":"org.matrix.custom.html","formatted_body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the <code>await</code> when passed a value which is not boxed in a promise","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the `await` when passed a value which is not boxed in a promise","mimetype":"text/plain"},{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the <code>await</code> when passed a value which is not boxed in a promise","mimetype":"text/html"}]},"ts":1652229504464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tB2ZYxLXlFkz-JLEqIEMGCYAEUXuUzaEaSSPzayAc3o"},
{"content":{"body":"I agree that using `isPromise` with the intent to skip an await would be misguided.","format":"org.matrix.custom.html","formatted_body":"I agree that using <code>isPromise</code> with the intent to skip an await would be misguided.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that using `isPromise` with the intent to skip an await would be misguided.","mimetype":"text/plain"},{"body":"I agree that using <code>isPromise</code> with the intent to skip an await would be misguided.","mimetype":"text/html"}]},"ts":1652229505494,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7JbBKkQtojifbx6LFCMsfjVdHqVEYFg5R9I70_hEY7M"},
{"content":{"body":"which is a thing people do in fact want to do","msgtype":"m.text","org.matrix.msc1767.text":"which is a thing people do in fact want to do"},"ts":1652229508479,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kbPBGuv4nl6BD-6FhpP6h-mJfFhWy7rqWLTFPNiddoU"},
{"content":{"body":"constantly","msgtype":"m.text","org.matrix.msc1767.text":"constantly"},"ts":1652229510907,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mVO6zOyzJaGIUOtUkTnPjxZRNEn4d2nk2eejtPH2TEo"},
{"content":{"body":"not just polymorphic; these kinds of checks are always useful for helpful runtime validation of input types","msgtype":"m.text"},"ts":1652229532507,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jky3jp0zC71G26tbbMUh7CdjyLxKWozdFNkjS0p-yRY"},
{"content":{"body":"which includes an IsPromise check, which thus isn’t quite as niche as claimed","msgtype":"m.text"},"ts":1652229550874,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_ZTCJifWN6Oe3ESDf7zkvLm4ZU0Zp4n09889ryA97dU"},
{"content":{"body":"currently people do `Promise.resolve(val) === val`, but that can synchronously trigger user code attached to `val`","format":"org.matrix.custom.html","formatted_body":"currently people do <code>Promise.resolve(val) === val</code>, but that can synchronously trigger user code attached to <code>val</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"currently people do `Promise.resolve(val) === val`, but that can synchronously trigger user code attached to `val`","mimetype":"text/plain"},{"body":"currently people do <code>Promise.resolve(val) === val</code>, but that can synchronously trigger user code attached to <code>val</code>","mimetype":"text/html"}]},"ts":1652229598137,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vAt5TY4kmU2RyuVcKC_PQxGlezYWwGoQqkMCYAUC08s"}
]