[
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1652227332150,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2zjUIHfLwo5KwxaZ0UjltTkE8NzisbN8Z5lgU0Ybq1M"},
{"content":{"body":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose","msgtype":"m.text","org.matrix.msc1767.text":"the problem specifically being that Promise.prototype.then does the SpeciesConstructor stuff, I suppose"},"ts":1652227353721,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZRSsbkxXI78zhYP9wmQl9kstn0Dala09KWLX565W19c"},
{"content":{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","format":"org.matrix.custom.html","formatted_body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"otherwise you could just use `Promise.prototype.then.call(val)` as your test","mimetype":"text/plain"},{"body":"otherwise you could just use <code>Promise.prototype.then.call(val)</code> as your test","mimetype":"text/html"}]},"ts":1652227429244,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U1whPL6GiGFXtJ3me23vzpenTTBHuKIXwpG7KQ9aOIc"},
{"content":{"body":"and Promise.resolve, yes","msgtype":"m.text","org.matrix.msc1767.text":"and Promise.resolve, yes"},"ts":1652227432530,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EVGdisP6y0GVIuYJ_dY71AVzog8q324UPM6FjYyoulc"},
{"content":{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","format":"org.matrix.custom.html","formatted_body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There is no place in the spec that does `IsPromise` without also poking at `.constructor` or `.then` on the object.","mimetype":"text/plain"},{"body":"There is no place in the spec that does <code>IsPromise</code> without also poking at <code>.constructor</code> or <code>.then</code> on the object.","mimetype":"text/html"}]},"ts":1652227514686,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8uvQnbwY0PpSXDUs7p42BT5bBlT_WAe1oCLOAB6Jt5M"},
{"content":{"body":"perhaps we will manage to remove Symbol.species instead","msgtype":"m.text","org.matrix.msc1767.text":"perhaps we will manage to remove Symbol.species instead"},"ts":1652227565971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k4_yUblUqGfKZH-L-pM8eKagHt_fIbZrnFZZhALTYTQ"},
{"content":{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","format":"org.matrix.custom.html","formatted_body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think it'll help. `.constructor` based species is not slated for removal from what I recall","mimetype":"text/plain"},{"body":"I don't think it'll help. <code>.constructor</code> based species is not slated for removal from what I recall","mimetype":"text/html"}]},"ts":1652227616900,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$S-3_npOgf0i2nzuXb9chFSYYV45pTLtElDs9vRiuhDE"},
{"content":{"body":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics","msgtype":"m.text","org.matrix.msc1767.text":"that's Type II in the taxonomy in the proposal, and it is proposed to be removed per https://github.com/tc39/proposal-rm-builtin-subclassing#proposed-new-old-semantics"},"ts":1652227753314,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7JcmOy23i1wWk-PkazZx7eB3JEzSkUctLW23qWPgNPg"},
{"content":{"body":"I don't think we'll actually manage it but I live in hope","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we'll actually manage it but I live in hope"},"ts":1652227762128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qUAexuHSh_fBDSp771ZxytaK-a9HAIdWXlLK9-KVC74"},
{"content":{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","format":"org.matrix.custom.html","formatted_body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm curious if there would be any opposition to basically have a `Promise.isPromise(x)` which basically does `IsPromise(x)`. I know it'd solve my problem","mimetype":"text/plain"},{"body":"I'm curious if there would be any opposition to basically have a <code>Promise.isPromise(x)</code> which basically does <code>IsPromise(x)</code>. I know it'd solve my problem","mimetype":"text/html"}]},"ts":1652227825969,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kDfktMt3KQTUJeX5WijxR1UYNQP3mo4-58WCH4RgvrU"},
{"content":{"body":"I think there would need to be more motivation than your very narrow use case","msgtype":"m.text","org.matrix.msc1767.text":"I think there would need to be more motivation than your very narrow use case"},"ts":1652227911197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IPctG4pYavBLNCDFugEiHVIbGxrgP_c-QKyEB7GsEDM"},
{"content":{"body":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\"","msgtype":"m.text","org.matrix.msc1767.text":"and I'd be hard pressed to come up with such motivation given that the actual thing one usually cares about is \"is thenable\""},"ts":1652227941079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RUgKuYgmmrbTbf0dypqrJSnTaHpyI8Uej6BBddjahfk"},
{"content":{"body":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity.","msgtype":"m.text","org.matrix.msc1767.text":"The thing is that it's impossible to workaround currently, and I fail to see how exposing something that already exists as a new namespaced API has much complexity."},"ts":1652228032050,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zz6Lh1Qwgky4lhLRGSkNSk9wSOkUohp4jv_h-woWyAk"},
{"content":{"body":"I am sure ljharb would love a clean way to brand check a promise for his libraries ;)","format":"org.matrix.custom.html","formatted_body":"I am sure <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would love a clean way to brand check a promise for his libraries ;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am sure ljharb would love a clean way to brand check a promise for his libraries ;)","mimetype":"text/plain"},{"body":"I am sure <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would love a clean way to brand check a promise for his libraries ;)","mimetype":"text/html"}]},"ts":1652228117758,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_UtQ0Sg23VYsn8pWg1amTSCFpiKNmuaJrq5vTXW2n7o"},
{"content":{"body":"People would use it instead of \"is thenable\" and be confused","msgtype":"m.text","org.matrix.msc1767.text":"People would use it instead of \"is thenable\" and be confused"},"ts":1652228132434,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MiYY4IqADrNUply4KrSHgEs2qfegezK42tVHYKRkdaw"},
{"content":{"body":"\"is promise\" is almost never the test anyone actually wants; you and ljharb have extremely unusual use cases","msgtype":"m.text","org.matrix.msc1767.text":"\"is promise\" is almost never the test anyone actually wants; you and ljharb have extremely unusual use cases"},"ts":1652228192554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nCLMP9t_gafjfiOhSs2cyTHPE4JD2rZ6Au8lhuj-QJQ"},
{"content":{"body":"but it _looks_ like a thing you might want, so people will use it in other cases, and that's bad","format":"org.matrix.custom.html","formatted_body":"but it <em>looks</em> like a thing you might want, so people will use it in other cases, and that's bad","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but it _looks_ like a thing you might want, so people will use it in other cases, and that's bad","mimetype":"text/plain"},{"body":"but it <em>looks</em> like a thing you might want, so people will use it in other cases, and that's bad","mimetype":"text/html"}]},"ts":1652228218968,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VHyuJ-3OJeVS9jaYU6WmGXUssd3HWORNU8gx1IfeXaQ"},
{"content":{"body":"Do you have any suggestion to make it more obvious what this does, or less likely to be misused?","msgtype":"m.text","org.matrix.msc1767.text":"Do you have any suggestion to make it more obvious what this does, or less likely to be misused?"},"ts":1652228353557,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CRwGZwSTm_WexhaAoLYprmfIny8WZhQVr-yOSUhibeA"},
{"content":{"body":"I’m sure there’s a way to express the brand-check that would be clear and sufficiently out of reach.","msgtype":"m.text","org.matrix.msc1767.text":"I’m sure there’s a way to express the brand-check that would be clear and sufficiently out of reach."},"ts":1652228354494,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GXseNIWeljLjghMPc5MxtkbvGP4jrwB40C0Gs9hiIZk"},
{"content":{"body":"I agree that there’s potential for confusion for any particular behavior for `Promise.isPromise(thenable)`.","format":"org.matrix.custom.html","formatted_body":"I agree that there’s potential for confusion for any particular behavior for <code>Promise.isPromise(thenable)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that there’s potential for confusion for any particular behavior for `Promise.isPromise(thenable)`.","mimetype":"text/plain"},{"body":"I agree that there’s potential for confusion for any particular behavior for <code>Promise.isPromise(thenable)</code>.","mimetype":"text/html"}]},"ts":1652228484660,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JcTi4J3nlQBgy1ZbEEMVWIQQkkysGnyOMZCIG2j-Rqg"},
{"content":{"body":"And I also agree we need to be able to check whether a value is a native promise without reentering any of its API.","msgtype":"m.text","org.matrix.msc1767.text":"And I also agree we need to be able to check whether a value is a native promise without reentering any of its API."},"ts":1652228555315,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kRFUpOQwGnCg0R2XZHuFmrQSyfRa16FxVjPp188CzuA"},
{"content":{"body":"Though, `Promise.isPromise(thenable) === false` isn’t _that_ weird of an answer. It’s not a `Promise` _yet_, even if it’s a promise with a little P.","format":"org.matrix.custom.html","formatted_body":"Though, <code>Promise.isPromise(thenable) === false</code> isn’t <em>that</em> weird of an answer. It’s not a <code>Promise</code> <em>yet</em>, even if it’s a promise with a little P.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though, `Promise.isPromise(thenable) === false` isn’t _that_ weird of an answer. It’s not a `Promise` _yet_, even if it’s a promise with a little P.","mimetype":"text/plain"},{"body":"Though, <code>Promise.isPromise(thenable) === false</code> isn’t <em>that</em> weird of an answer. It’s not a <code>Promise</code> <em>yet</em>, even if it’s a promise with a little P.","mimetype":"text/html"}]},"ts":1652228667916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zSqFdtZmaOe-GKlAz92HN8MoJ6vDc5fGKf4IF7kR7QU"},
{"content":{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"ts":1652228763404,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$E7_scTfTIhcP5YJebrB7UGjQ3QC4BouTQ5HAcmLcIMw"},
{"content":{"body":" * The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":" * The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","m.new_content":{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","format":"org.matrix.custom.html","formatted_body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":"The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$E7_scTfTIhcP5YJebrB7UGjQ3QC4BouTQ5HAcmLcIMw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The notion that `Promise.isPromise(X) === true` only for X that can _become_ a promise invites the possibility that `\"hello\"` is a promise.","mimetype":"text/plain"},{"body":" * The notion that <code>Promise.isPromise(X) === true</code> only for X that can <em>become</em> a promise invites the possibility that <code>&quot;hello&quot;</code> is a promise.","mimetype":"text/html"}]},"ts":1652228779959,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y4jj5-TdlytJdiRdhjGha0pS2rBQlWqE6aUbajAPrdg"},
{"content":{"body":"IME the main reason people use `isArray` is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: `if (Promise.isPromise(x)) x = await x`, say. but that doesn't do the right thing if `x` is thenable but not a Promise.","format":"org.matrix.custom.html","formatted_body":"IME the main reason people use <code>isArray</code> is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: <code>if (Promise.isPromise(x)) x = await x</code>, say. but that doesn't do the right thing if <code>x</code> is thenable but not a Promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"IME the main reason people use `isArray` is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: `if (Promise.isPromise(x)) x = await x`, say. but that doesn't do the right thing if `x` is thenable but not a Promise.","mimetype":"text/plain"},{"body":"IME the main reason people use <code>isArray</code> is to make polymorphic APIs, where e.g. you take either a list of names or a single name. and I expect that's the main way people would use this as well: <code>if (Promise.isPromise(x)) x = await x</code>, say. but that doesn't do the right thing if <code>x</code> is thenable but not a Promise.","mimetype":"text/html"}]},"ts":1652229314796,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKWgCpP8XMKUmztq-nYa4OrPN7V0TvAafatxKVee0e8"},
{"content":{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we _definitely will not do_","format":"org.matrix.custom.html","formatted_body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we <em>definitely will not do</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we _definitely will not do_","mimetype":"text/plain"},{"body":"this seems bad. especially for people who want to make proxies for stuff unless we make isPromise pierce proxies like isArray does, which we <em>definitely will not do</em>","mimetype":"text/html"}]},"ts":1652229364928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EGahpcQ5UqXqKL3LhZE_CA3dpQCd7xvTVttBXy-xIi4"},
{"content":{"body":"in practice tho it’s rarely a thenable","msgtype":"m.text"},"ts":1652229385187,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$twFa1hdIiqagv1fh64VFT7b8M-lkGJJ2bDyr8EmmGI8"},
{"content":{"body":"I would not expect proxies to pierce this","msgtype":"m.text","org.matrix.msc1767.text":"I would not expect proxies to pierce this"},"ts":1652229390075,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WWclo6ldMbaxGODj8iGU1zwXHEGustWXoRbnt1uS2D4"},
{"content":{"body":"The example is not coherent because `await 1` works fine, but 1 is not a promise.","format":"org.matrix.custom.html","formatted_body":"The example is not coherent because <code>await 1</code> works fine, but 1 is not a promise.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The example is not coherent because `await 1` works fine, but 1 is not a promise.","mimetype":"text/plain"},{"body":"The example is not coherent because <code>await 1</code> works fine, but 1 is not a promise.","mimetype":"text/html"}]},"ts":1652229390605,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nIF_E6j6Ujjk54oJPCx8BeF7FxNrl82ZzTnaQIasqzY"},
{"content":{"body":"the example is perfectly coherent","msgtype":"m.text","org.matrix.msc1767.text":"the example is perfectly coherent"},"ts":1652229400707,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V6jHT1KTGZK7taYDUj-3TRL2IrhtA_PSO4KoteA4yuw"},
{"content":{"body":"non-Promise thenables largely died once Promise and async/await became commonplace","msgtype":"m.text"},"ts":1652229404567,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ggyFf3lz_Pa2FUsqF0jE-hKpAOOrUBRgFOdZs-P3DZ4"},
{"content":{"body":"ljharb: depends on how many proxies you have around","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: depends on how many proxies you have around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: depends on how many proxies you have around","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: depends on how many proxies you have around","mimetype":"text/html"}]},"ts":1652229412062,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LEpdJCkGIvHQKnEC2pd2-2WsZJH-8oxU9JT9Bfsk2vc"},
{"content":{"body":"proxy for a promise is thenable but not a promise","msgtype":"m.text","org.matrix.msc1767.text":"proxy for a promise is thenable but not a promise"},"ts":1652229416984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TR9n6JL1dHLhggx14vMNA95PyWMJktPwliFOc7vclfk"},
{"content":{"body":"“Any use of proxy” is incredibly niche automatically :-)","msgtype":"m.text"},"ts":1652229437151,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$15185LRfqKEarMYr9onAnUG8QWmorcqhLKaFhHtziZE"},
{"content":{"body":"fair enough","msgtype":"m.text","org.matrix.msc1767.text":"fair enough"},"ts":1652229442231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VLCD5TGjIPL9K0Uang-V0-IGPdz8BB117H-MocgnuZA"},
{"content":{"body":"Kris Kowal: how is the example not coherent?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: how is the example not coherent?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: how is the example not coherent?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: how is the example not coherent?","mimetype":"text/html"}]},"ts":1652229445736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i4Mw12qYufg5KK22xy29AMpeR8dJJch5jsJg4mQJQ6U"},
{"content":{"body":"I mean, it's _wrong_, because it's treating \"thenable\" as the same as \"is promise\", but I guarantee people are going to do that; that's my point","format":"org.matrix.custom.html","formatted_body":"I mean, it's <em>wrong</em>, because it's treating &quot;thenable&quot; as the same as &quot;is promise&quot;, but I guarantee people are going to do that; that's my point","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean, it's _wrong_, because it's treating \"thenable\" as the same as \"is promise\", but I guarantee people are going to do that; that's my point","mimetype":"text/plain"},{"body":"I mean, it's <em>wrong</em>, because it's treating &quot;thenable&quot; as the same as &quot;is promise&quot;, but I guarantee people are going to do that; that's my point","mimetype":"text/html"}]},"ts":1652229470560,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B_al-G72QCoAkDQmoABDLaC2rl43JoYHnn2vXNebWxE"},
{"content":{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the `await` when passed a value which is not boxed in a promise","format":"org.matrix.custom.html","formatted_body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the <code>await</code> when passed a value which is not boxed in a promise","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the `await` when passed a value which is not boxed in a promise","mimetype":"text/plain"},{"body":"if we didn't have thenables and only had promises, the example would be correct for a polymorphic API which wants to skip the <code>await</code> when passed a value which is not boxed in a promise","mimetype":"text/html"}]},"ts":1652229504464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tB2ZYxLXlFkz-JLEqIEMGCYAEUXuUzaEaSSPzayAc3o"},
{"content":{"body":"I agree that using `isPromise` with the intent to skip an await would be misguided.","format":"org.matrix.custom.html","formatted_body":"I agree that using <code>isPromise</code> with the intent to skip an await would be misguided.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that using `isPromise` with the intent to skip an await would be misguided.","mimetype":"text/plain"},{"body":"I agree that using <code>isPromise</code> with the intent to skip an await would be misguided.","mimetype":"text/html"}]},"ts":1652229505494,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7JbBKkQtojifbx6LFCMsfjVdHqVEYFg5R9I70_hEY7M"},
{"content":{"body":"which is a thing people do in fact want to do","msgtype":"m.text","org.matrix.msc1767.text":"which is a thing people do in fact want to do"},"ts":1652229508479,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kbPBGuv4nl6BD-6FhpP6h-mJfFhWy7rqWLTFPNiddoU"},
{"content":{"body":"constantly","msgtype":"m.text","org.matrix.msc1767.text":"constantly"},"ts":1652229510907,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mVO6zOyzJaGIUOtUkTnPjxZRNEn4d2nk2eejtPH2TEo"},
{"content":{"body":"not just polymorphic; these kinds of checks are always useful for helpful runtime validation of input types","msgtype":"m.text"},"ts":1652229532507,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jky3jp0zC71G26tbbMUh7CdjyLxKWozdFNkjS0p-yRY"},
{"content":{"body":"which includes an IsPromise check, which thus isn’t quite as niche as claimed","msgtype":"m.text"},"ts":1652229550874,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_ZTCJifWN6Oe3ESDf7zkvLm4ZU0Zp4n09889ryA97dU"},
{"content":{"body":"currently people do `Promise.resolve(val) === val`, but that can synchronously trigger user code attached to `val`","format":"org.matrix.custom.html","formatted_body":"currently people do <code>Promise.resolve(val) === val</code>, but that can synchronously trigger user code attached to <code>val</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"currently people do `Promise.resolve(val) === val`, but that can synchronously trigger user code attached to `val`","mimetype":"text/plain"},{"body":"currently people do <code>Promise.resolve(val) === val</code>, but that can synchronously trigger user code attached to <code>val</code>","mimetype":"text/html"}]},"ts":1652229598137,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vAt5TY4kmU2RyuVcKC_PQxGlezYWwGoQqkMCYAUC08s"},
{"content":{"body":"Which is absurdly rare, so it’s ‘good enough’ but still not perfect","msgtype":"m.text"},"ts":1652229619287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lzT9F-gtUKNPwRjihJEdw85I1m3SUREvTwK7Qq8Ih0s"},
{"content":{"body":"I am fine with this","msgtype":"m.text","org.matrix.msc1767.text":"I am fine with this"},"ts":1652229624177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zRH74izRUXyi4dr6-H0qPpIYo1PAL9Ljwd4b3-Afvbk"},
{"content":{"body":"I’m drawing a blank on what sensible thing one would be achieving with`if (Promise.isPromixe(x)) await x` that would not be achieved by `await x`.","format":"org.matrix.custom.html","formatted_body":"I’m drawing a blank on what sensible thing one would be achieving with<code>if (Promise.isPromixe(x)) await x</code> that would not be achieved by <code>await x</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’m drawing a blank on what sensible thing one would be achieving with`if (Promise.isPromixe(x)) await x` that would not be achieved by `await x`.","mimetype":"text/plain"},{"body":"I’m drawing a blank on what sensible thing one would be achieving with<code>if (Promise.isPromixe(x)) await x</code> that would not be achieved by <code>await x</code>.","mimetype":"text/html"}]},"ts":1652229624189,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LczToYrP62GavOscu9U5huKkzO6_w_Uxb2Lnmz7Jvs4"},
{"content":{"body":"skipping the `await` when passed a value which is not boxed in a promise, like i said","format":"org.matrix.custom.html","formatted_body":"skipping the <code>await</code> when passed a value which is not boxed in a promise, like i said","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"skipping the `await` when passed a value which is not boxed in a promise, like i said","mimetype":"text/plain"},{"body":"skipping the <code>await</code> when passed a value which is not boxed in a promise, like i said","mimetype":"text/html"}]},"ts":1652229641030,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qi1lg_I96OE4WM-rhZ6NQ_kspVHQC8YdpHO1UTEW1To"},
{"content":{"body":"Kris Kowal: also telling someone “i wanted a promise here, and you gave me something else, so you probably have a bug”","msgtype":"m.text"},"ts":1652229649098,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QtebwryNKpvmpQngojiF6U46vvwX_IgkW3PyjSaiB0E"},
{"content":{"body":"if i expect “an awaitable” then it doesn’t matter, and if i accept a thenable then I’d check for .then being a function ¯\\_(ツ)_/¯ ","format":"org.matrix.custom.html","formatted_body":"if i expect “an awaitable” then it doesn’t matter, and if i accept a thenable then I’d check for .then being a function ¯_(ツ)_/¯","msgtype":"m.text"},"ts":1652229684858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s3slsQuRV6Rr1Ct1U4GL9KAbCGXAfpz1BJSzGfAfWjc"},
{"content":{"body":"Indeed.","msgtype":"m.text","org.matrix.msc1767.text":"Indeed."},"ts":1652229703839,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$M2yBC3m5QU3--d1WW5Rqqn0mJWyckjs5SMnzOni0b4M"},
{"content":{"body":"but virtually nobody expects a thenable - they expect a Promise.","msgtype":"m.text"},"ts":1652229716863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IUlt-VGVj1Lhe8shDy_93CNu7-6aWr4_VhcQSbir2eo"},
{"content":{"body":"false","msgtype":"m.text","org.matrix.msc1767.text":"false"},"ts":1652229722851,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gK-9qOx3bSljHfaGgVodnhTv9YPhbD5D-bx4ESIOIfM"},
{"content":{"body":"I have absolutely no problem with someone handing me a proxy for a promise","msgtype":"m.text","org.matrix.msc1767.text":"I have absolutely no problem with someone handing me a proxy for a promise"},"ts":1652229734016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IZt0PKENAVhvbWutqVKR1fqyCqeB138QFXi3K9o87ZQ"},
{"content":{"body":"What if we introduce both a `isPromise` and `isThenable`, then people wouldn't be as confused ?","format":"org.matrix.custom.html","formatted_body":"What if we introduce both a <code>isPromise</code> and <code>isThenable</code>, then people wouldn't be as confused ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What if we introduce both a `isPromise` and `isThenable`, then people wouldn't be as confused ?","mimetype":"text/plain"},{"body":"What if we introduce both a <code>isPromise</code> and <code>isThenable</code>, then people wouldn't be as confused ?","mimetype":"text/html"}]},"ts":1652229736115,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$HKLLzDTeifsxwDIu8Iovg5uuv3tw-qfeH0sNxA6YVWQ"},
{"content":{"body":"or a different-realm promise","msgtype":"m.text","org.matrix.msc1767.text":"or a different-realm promise"},"ts":1652229737481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0KmuMHgjsuGFVOZCRE4t_1k1mlDWJ6d_kXV4leKeupU"},
{"content":{"body":"those things are fine","msgtype":"m.text","org.matrix.msc1767.text":"those things are fine"},"ts":1652229739024,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-tpNQ_xykUYMSkYNPVVIb1BxIY9Uyrt8Cn5fv94D_uA"},
{"content":{"body":"intentionally i mean. A thenable works perfectly fine ofc","msgtype":"m.text"},"ts":1652229742352,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SooCY_65Zd40n9W_dpt_Ev6a1VIXZVUKe_b6SlQMx_o"},
{"content":{"body":"Mathieu Hofman: that would be... more confusing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: that would be... more confusing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Mathieu Hofman: that would be... more confusing","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: that would be... more confusing","mimetype":"text/html"}]},"ts":1652229747967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uIjMCzjO6eweemRJARSNRxY8NIs9DjvVER5DwAAO1dk"},
{"content":{"body":"and “a different realm” is almost as rare as proxy","msgtype":"m.text"},"ts":1652229756111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jKiPlKts1s1dIN-jIhMnbKa-oh1yX_D_KNo2LI_JC_w"},
{"content":{"body":"is it still common for people to use \\<favorite A1 implementation\\> instead of native Promise or a polyfill","format":"org.matrix.custom.html","formatted_body":"is it still common for people to use &lt;favorite A1 implementation&gt; instead of native Promise or a polyfill","msgtype":"m.text"},"ts":1652229800172,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$Bljw3nq4LEkraTZzSkusRxNG5G7oQ12hR4JAexDWwBI"},
{"content":{"body":"people do still use bluebird pretty often, yes","msgtype":"m.text","org.matrix.msc1767.text":"people do still use bluebird pretty often, yes"},"ts":1652229812785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IiwOhHkKuTzlu763FInrURpG4cJhpgpK9TIyRnkHQ7w"},
{"content":{"body":"not as much as they used to","msgtype":"m.text","org.matrix.msc1767.text":"not as much as they used to"},"ts":1652229815501,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HDngDo9iVlD0cu8PmF1NKO1UAhr50bRADpwESKT7HTY"},
{"content":{"body":"* is it still common for people to use \\<favorite A1 implementation\\> instead of native Promise or a polyfill","format":"org.matrix.custom.html","formatted_body":"* is it still common for people to use &lt;favorite A1 implementation&gt; instead of native Promise or a polyfill","m.new_content":{"body":"is it still common for people to use \\<favorite A1 implementation\\> instead of native Promise or a polyfill","format":"org.matrix.custom.html","formatted_body":"is it still common for people to use &lt;favorite A1 implementation&gt; instead of native Promise or a polyfill","msgtype":"m.text"},"m.relates_to":{"event_id":"$Bljw3nq4LEkraTZzSkusRxNG5G7oQ12hR4JAexDWwBI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1652229818615,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$jfYnVEOjXz4mjlhXIljukMJe0_QCFIcUFnz-pIklJN8"},
{"content":{"body":"mostly by inertia, not for a good reason","msgtype":"m.text"},"ts":1652229822931,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OpQE4F_AswOCdb8SfQquuQeopQxtXynwZoUXUszSGwo"},
{"content":{"body":"> <@bakkot:matrix.org> Mathieu Hofman: that would be... more confusing\n\nHow so?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uIjMCzjO6eweemRJARSNRxY8NIs9DjvVER5DwAAO1dk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: that would be... more confusing</blockquote></mx-reply>How so?","m.relates_to":{"m.in_reply_to":{"event_id":"$uIjMCzjO6eweemRJARSNRxY8NIs9DjvVER5DwAAO1dk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> Mathieu Hofman: that would be... more confusing\n\nHow so?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$uIjMCzjO6eweemRJARSNRxY8NIs9DjvVER5DwAAO1dk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: that would be... more confusing</blockquote></mx-reply>How so?","mimetype":"text/html"}]},"ts":1652229832201,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WIQlyo7ZUaoPyV8aFPnB4ntWPqjDyyPXRcba3zYEJh8"},
{"content":{"body":"\"thenable\" means \"has a callable .then property\", which is a thing you can check directly; the existence of a method which does this implies it is something else","msgtype":"m.text","org.matrix.msc1767.text":"\"thenable\" means \"has a callable .then property\", which is a thing you can check directly; the existence of a method which does this implies it is something else"},"ts":1652229888474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_XnMFwIjak3dq4vsZC_XYWGwq9SGSvFph47JfP6FrnU"},
{"content":{"body":"> <@jessidhia:matrix.org> is it still common for people to use \\<favorite A1 implementation\\> instead of native Promise or a polyfill\n\nReact Native for example forces on a promise polyfill (bluebird from what I recall). I'm incredulous why, but that's one example of weird always on non-native promises","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Bljw3nq4LEkraTZzSkusRxNG5G7oQ12hR4JAexDWwBI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jessidhia:matrix.org\">@jessidhia:matrix.org</a><br>is it still common for people to use &lt;favorite A1 implementation&gt; instead of native Promise or a polyfill</blockquote></mx-reply>React Native for example forces on a promise polyfill (bluebird from what I recall). I'm incredulous why, but that's one example of weird always on non-native promises","m.relates_to":{"m.in_reply_to":{"event_id":"$Bljw3nq4LEkraTZzSkusRxNG5G7oQ12hR4JAexDWwBI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jessidhia:matrix.org> is it still common for people to use \\<favorite A1 implementation\\> instead of native Promise or a polyfill\n\nReact Native for example forces on a promise polyfill (bluebird from what I recall). I'm incredulous why, but that's one example of weird always on non-native promises","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$Bljw3nq4LEkraTZzSkusRxNG5G7oQ12hR4JAexDWwBI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jessidhia:matrix.org\">@jessidhia:matrix.org</a><br>is it still common for people to use &lt;favorite A1 implementation&gt; instead of native Promise or a polyfill</blockquote></mx-reply>React Native for example forces on a promise polyfill (bluebird from what I recall). I'm incredulous why, but that's one example of weird always on non-native promises","mimetype":"text/html"}]},"ts":1652229899441,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5wDGRajAgaZvnyRs2gLSagJmE6W5RbOc2aXyUxMFaxk"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1652229911133,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hCSx28oxwRlJSAwUqRBD8llbZ2oxYP2Qqk2jW0MaN6A"},
{"content":{"body":"Q’s still getting an absurd weekly download figure, for what it’s worth.","msgtype":"m.text","org.matrix.msc1767.text":"Q’s still getting an absurd weekly download figure, for what it’s worth."},"ts":1652229911432,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KW1lwKewRm_wPLO_ioaW-CzEmW2aZ2zvfS91ihxd3sc"},
{"content":{"body":"so, right. bluebird and Q are good examples of why normal users don't _actually_ want IsPromise in the example I gave, and giving them IsPromise would lead them to have the wrong behavior.","format":"org.matrix.custom.html","formatted_body":"so, right. bluebird and Q are good examples of why normal users don't <em>actually</em> want IsPromise in the example I gave, and giving them IsPromise would lead them to have the wrong behavior.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, right. bluebird and Q are good examples of why normal users don't _actually_ want IsPromise in the example I gave, and giving them IsPromise would lead them to have the wrong behavior.","mimetype":"text/plain"},{"body":"so, right. bluebird and Q are good examples of why normal users don't <em>actually</em> want IsPromise in the example I gave, and giving them IsPromise would lead them to have the wrong behavior.","mimetype":"text/html"}]},"ts":1652229943530,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P4OoBCdXvxI9WKPQOzkBLvioLFLcuX1XzJehZCawqPI"},
{"content":{"body":"so, we should not have IsPromise.","msgtype":"m.text","org.matrix.msc1767.text":"so, we should not have IsPromise."},"ts":1652229947873,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NEfH6AE5Ww83yqnXeNZn4qr_9wxZMtrsKGKheZaqYuY"},
{"content":{"body":"you could probably hunt through dependents and figure out how much of those numbers are due to new usage ","format":"org.matrix.custom.html","formatted_body":"you could probably hunt through dependents and figure out how much of those numbers are due to new usage","msgtype":"m.text"},"ts":1652229955614,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F25r8EXcBZjCtfKyk170Xhib505tjbVZyMZ46l-NAL8"},
{"content":{"body":"normal users don’t use bluebird or q directly, i claim, and thus have no desires for them","msgtype":"m.text"},"ts":1652229977676,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wg6ZSV4FYsc40d8pOKYLBE_eDTN2AhkDR1Meh2Ebci4"},
{"content":{"body":"avoiding `await`s seems very misguided IMO, that’s just borderline attempting to revive the Zalgo problem","format":"org.matrix.custom.html","formatted_body":"avoiding <code>await</code>s seems very misguided IMO, that’s just borderline attempting to revive the Zalgo problem","msgtype":"m.text"},"ts":1652229999656,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$QenQnclvAPDxswUDj307z19htSyO0AGn8UjTVgBHzM4"},
{"content":{"body":"I don't know what \"thus have no desires for them\" is doing in that sentence","msgtype":"m.text","org.matrix.msc1767.text":"I don't know what \"thus have no desires for them\" is doing in that sentence"},"ts":1652230001532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vTFOD2ycCVKfGAvNKPbG8Ese8Y57gKHCVBmU9vdddnU"},
{"content":{"body":"Also, Q.isPromise is real and does a brand check of Q promises.","msgtype":"m.text","org.matrix.msc1767.text":"Also, Q.isPromise is real and does a brand check of Q promises."},"ts":1652230002601,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7yOOphf3FaZWDNu9IZQpaJNwGWm0gWNMG1OUWbO79u8"},
{"content":{"body":"(I’m not expecting IsPromise to ever be exposed, ofc)","msgtype":"m.text"},"ts":1652230007833,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tK3311OQQ3-KW20h81EcMhLMZUNbwUEDTKwh6OHaqow"},
{"content":{"body":"you might end up with a bluebird promise because someone else gave you one","msgtype":"m.text","org.matrix.msc1767.text":"you might end up with a bluebird promise because someone else gave you one"},"ts":1652230009045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h3guTsRlihqtISS6j_vRDWZcr8FomIY9uUEqE1UJYtc"},
{"content":{"body":"and you shouldn't trip over and die as soon as that happens","msgtype":"m.text","org.matrix.msc1767.text":"and you shouldn't trip over and die as soon as that happens"},"ts":1652230016710,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p34dME7u9fTs0SvALjm7i8HKjG0CpAvO59DCyvB5JSo"},
{"content":{"body":"you should just use it like any other promise","msgtype":"m.text","org.matrix.msc1767.text":"you should just use it like any other promise"},"ts":1652230023885,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qSaxFmaPdHP98MujLMzoRyDengb6JVmNJahEiUrOyrk"},
{"content":{"body":"and life will be good","msgtype":"m.text","org.matrix.msc1767.text":"and life will be good"},"ts":1652230027997,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IyemskyL2QdHc1F7hHy4qQqrUNIiMQnGc1deUMfxugA"},
{"content":{"body":"> <@bakkot:matrix.org> I don't know what \"thus have no desires for them\" is doing in that sentence\n\ni mean that the existence of those libs in transitive deps doesn’t prove people want them. They probably just don’t realize they’re there","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24vTFOD2ycCVKfGAvNKPbG8Ese8Y57gKHCVBmU9vdddnU\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I don't know what \"thus have no desires for them\" is doing in that sentence</blockquote></mx-reply>i mean that the existence of those libs in transitive deps doesn’t prove people want them. They probably just don’t realize they’re there","m.relates_to":{"m.in_reply_to":{"event_id":"$vTFOD2ycCVKfGAvNKPbG8Ese8Y57gKHCVBmU9vdddnU"}},"msgtype":"m.text"},"ts":1652230042176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pS8iN8fRkZFg3sTVjQj_6gkAkeqQVKtUEMvvVxwVrQw"},
{"content":{"body":"yeah but","msgtype":"m.text","org.matrix.msc1767.text":"yeah but"},"ts":1652230047530,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZbYfuqEoNAexpicAxq6Dcm2_CrAzwkY2A2K-DSwAKPY"},
{"content":{"body":"they are there","msgtype":"m.text","org.matrix.msc1767.text":"they are there"},"ts":1652230048629,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tKEN_ULbvoeycLdczQAQLTYap_xR-X5kuIEx0xjY-yg"},
{"content":{"body":"and they don't have to realize it","msgtype":"m.text","org.matrix.msc1767.text":"and they don't have to realize it"},"ts":1652230054899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FVs-hfolZB8AgA-o8lj1Q38unt4XAVRhHhVaVH95aA0"},
{"content":{"body":"specifically because we don't have IsPromise","msgtype":"m.text","org.matrix.msc1767.text":"specifically because we don't have IsPromise"},"ts":1652230061469,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o2muCWG86364DfbSqOb9X9PUaTgCNQ7_vsuj7f4--EY"},
{"content":{"body":"which is... good","msgtype":"m.text","org.matrix.msc1767.text":"which is... good"},"ts":1652230065111,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$awrD34E6NDYw5dSksk23NXFt61aSQRerljgNQGDmreQ"},
{"content":{"body":"sure. But as an API producer i have the right to force them to realize it if i want.","msgtype":"m.text"},"ts":1652230072530,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d9ybtO0cGRkbMxHZ373mK2BHddsCqvejmbxHbD7-SXM"},
{"content":{"body":"and i can do that now already. Just imperfectly.","msgtype":"m.text"},"ts":1652230080944,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DKJiI4t3ovKdHHjsB1QXG81QCWS587b-n8q_YvR04ow"},
{"content":{"body":"I don't know what \"have the right\" means","msgtype":"m.text","org.matrix.msc1767.text":"I don't know what \"have the right\" means"},"ts":1652230093979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vD9IIe9Gz0_myll6ZIt6dtfdbVKdHoq3absZcoKxOo4"},
{"content":{"body":"I remember that for a good while bluebird had better DX than native; I haven’t revisited this in years though","msgtype":"m.text"},"ts":1652230099174,"senderName":"Jessidhia","senderId":"@jessidhia:matrix.org","id":"$jSrr7t-jmAobzeptt9lR_L53il5Nefnt-r0IkDDqAIA"},
{"content":{"body":"you can write whatever code the language allows you to write, yes","msgtype":"m.text","org.matrix.msc1767.text":"you can write whatever code the language allows you to write, yes"},"ts":1652230099880,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aZzTNc2qeqDfwo2boEfMeK2g1P1BHsd7hkE23ficWeI"},
{"content":{"body":"lol i mean, i can do it, and it’s not a bad thing if i do it","msgtype":"m.text"},"ts":1652230116269,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4XGKNi-UuMd0x7s5FT9GVpjfs5Oox4IApBQwnA51FGY"},
{"content":{"body":"I'm not going to pass judgement on \"a bad thing\"","msgtype":"m.text","org.matrix.msc1767.text":"I'm not going to pass judgement on \"a bad thing\""},"ts":1652230133571,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vbkr9cO5J687ozqRG50rNB9ninzkM_VkMZejAhTq2xE"},
{"content":{"body":"right - so i think while the argument in favor of the predicate is weak, the argument against it is also weak","msgtype":"m.text"},"ts":1652230158002,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XKDnmRqQ7CU80hqcM1AP9_fB6Cjc3BUgu6cCGs380Qg"},
{"content":{"body":"my argument has nothing to do with whether API consumers have the right to deliberately reject bluebird promises if they are so inclined","msgtype":"m.text","org.matrix.msc1767.text":"my argument has nothing to do with whether API consumers have the right to deliberately reject bluebird promises if they are so inclined"},"ts":1652230180153,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SysqQU7qrON9siQJu8N85uunqgzedkTPkoRqtPkrXuY"},
{"content":{"body":"iow “non-Promise thenables exist” isn’t a good argument imo against IsPromise","msgtype":"m.text"},"ts":1652230188484,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ycuSj0pBRCGIO-XItI6kta5S9l74UK1RqW5Jo8HlWuo"},
{"content":{"body":"my claim is that, for a normal user, who is doing the totally normal thing of trying to skip an `await` when given something which is not boxed, `IsPromise` would lead them to doing the wrong check, because that would lead them to skipping bluebird promises, which is not something they are specifically trying to do","format":"org.matrix.custom.html","formatted_body":"my claim is that, for a normal user, who is doing the totally normal thing of trying to skip an <code>await</code> when given something which is not boxed, <code>IsPromise</code> would lead them to doing the wrong check, because that would lead them to skipping bluebird promises, which is not something they are specifically trying to do","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"my claim is that, for a normal user, who is doing the totally normal thing of trying to skip an `await` when given something which is not boxed, `IsPromise` would lead them to doing the wrong check, because that would lead them to skipping bluebird promises, which is not something they are specifically trying to do","mimetype":"text/plain"},{"body":"my claim is that, for a normal user, who is doing the totally normal thing of trying to skip an <code>await</code> when given something which is not boxed, <code>IsPromise</code> would lead them to doing the wrong check, because that would lead them to skipping bluebird promises, which is not something they are specifically trying to do","mimetype":"text/html"}]},"ts":1652230195809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Z69pFuZLMKDR-U-s5jRX3jTSO5XwBrKRWGT3mnbf4c"}
]