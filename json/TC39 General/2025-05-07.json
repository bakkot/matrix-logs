[
{"content":{"body":"CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"<p>CharacterClassEscape[UnicodeMode] ::\n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression }</p>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","msgtype":"m.text"},"ts":1746608550685,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kVHFnu3I6r2_GJlKJw9TNij2-yWTd4-9VJp25Co_RKY"},
{"content":{"body":"* ```\nCharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n```\n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"* <pre><code>CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n</code></pre>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","m.new_content":{"body":"```\nCharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n```\n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"<pre><code>CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n</code></pre>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$kVHFnu3I6r2_GJlKJw9TNij2-yWTd4-9VJp25Co_RKY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746608559627,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9_uvzVeA9hTDWJ5BIjJ49JJhoPEYAPtLwaaXlB0cyh0"},
{"content":{"body":"In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1746613580323,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$TTh5vpw6tFm4owX6Db-LYZ7u6eO_7vTUhAxBOVCsFjY"},
{"content":{"body":"I think.","m.mentions":{},"msgtype":"m.text"},"ts":1746613611212,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$G1thyuGSKaEGlAWhEuovhraABVLQeUj2xM3ZX4OY7ZI"},
{"content":{"body":"* In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `+USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"* In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>+USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"m.new_content":{"body":"In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `+USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>+USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TTh5vpw6tFm4owX6Db-LYZ7u6eO_7vTUhAxBOVCsFjY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746613699938,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$yClSAMUVQRAM_lGvqNu2R6PUzyBDdaeYQGvFiClBAxw"},
{"content":{"body":"oh, I checked all Pattern, all Pattern[+USM] is also marked as [+UM]","msgtype":"m.text"},"ts":1746616098340,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$8JzxUkH6MHboViSP0kYeoNm-lqv3RA57LoAUo0CN0ss"},
{"content":{"body":"yup","m.mentions":{},"msgtype":"m.text"},"ts":1746617353221,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$cjn0vNGFq7Frmcts6OBonFWtayTcfH9vrr0ZcEgLfYA"},
{"content":{"body":"I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option).","format":"org.matrix.custom.html","formatted_body":"<p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1746638747522,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0"},
{"content":{"body":"* I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"* <p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"m.new_content":{"body":"I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"<p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746638750905,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RolGW-wipABHB7xAfFB76Jyx9KtL5V_nd417O5uDQMY"},
{"content":{"body":"I suppose one way to solve the dilemma is to have a function which lifts a `T -> number` mapper to a `(T, T) -> { -1, 0, 1 }` comparator, and expect people to use that, as in `people.maxByComparator(Compare.by(person -> person.age))`.","format":"org.matrix.custom.html","formatted_body":"I suppose one way to solve the dilemma is to have a function which lifts a <code>T -&gt; number</code> mapper to a <code>(T, T) -&gt; { -1, 0, 1 }</code> comparator, and expect people to use that, as in <code>people.maxByComparator(Compare.by(person -&gt; person.age))</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1746638893403,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1NUqdX4BaU81sGMDfve2hfe0wSwDeFYWFNTfh3pfHAc"},
{"content":{"body":"(java calls the latter operation `Comparator.comparing`)","format":"org.matrix.custom.html","formatted_body":"(java calls the latter operation <code>Comparator.comparing</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1746638903027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UR5QYy647bw-lW4_0dKv7U-GJZcNTCzySvPs2hYEeJw"},
{"content":{"body":"* I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"* <p>I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"m.new_content":{"body":"I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"<p>I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746639078117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MmSO73hbknYGBbvVmmIxbcD0q4qW95qY5mxr1fbs2-g"},
{"content":{"body":"Isn't this the same API design question we had with `uniqueBy`? You can either give a mapper or a comparator, and we probably just want both.","format":"org.matrix.custom.html","formatted_body":"Isn&#39;t this the same API design question we had with <code data-md=\"`\">uniqueBy</code>? You can either give a mapper or a comparator, and we probably just want both.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0"}},"msgtype":"m.text"},"ts":1746639355695,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IZdLA2Op2GbKIkk0CI0hlqN7ntIe_e0bekl5Q_K1ZRY"},
{"content":{"body":"wouldn't this be less efficient?","format":"org.matrix.custom.html","formatted_body":"wouldn&#39;t this be less efficient?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1NUqdX4BaU81sGMDfve2hfe0wSwDeFYWFNTfh3pfHAc"}},"msgtype":"m.text"},"ts":1746639383108,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$avlxIit3U4eHBr_YsNxp52FbmycuUTDm4lHaLPfaIEM"},
{"content":{"body":"Pretty similar, yeah, although the \"comparator\" for uniqueBy is not a comparator in the sense of \"a function which can be passed to `.sort`\", whereas it is here","format":"org.matrix.custom.html","formatted_body":"Pretty similar, yeah, although the \"comparator\" for uniqueBy is not a comparator in the sense of \"a function which can be passed to <code>.sort</code>\", whereas it is here","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IZdLA2Op2GbKIkk0CI0hlqN7ntIe_e0bekl5Q_K1ZRY"}},"msgtype":"m.text"},"ts":1746639415073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DCH102f656_8LoVqk1Mq3cuoZKsqJEldaH9UUcLM-Vc"},
{"content":{"body":"same big-O, but requires computing 2x as many calls of the `T -> number` function, yes","format":"org.matrix.custom.html","formatted_body":"same big-O, but requires computing 2x as many calls of the <code>T -&gt; number</code> function, yes","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$avlxIit3U4eHBr_YsNxp52FbmycuUTDm4lHaLPfaIEM"}},"msgtype":"m.text"},"ts":1746639463416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$txXBD0lxyGVSDcmHowP4WsdTgNXhO36C1bdwi42K2ns"},
{"content":{"body":"I actually am kind of coming around to the idea of switching on the `.length` of the callback","format":"org.matrix.custom.html","formatted_body":"I actually am kind of coming around to the idea of switching on the <code>.length</code> of the callback","m.mentions":{},"msgtype":"m.text"},"ts":1746639598017,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DyNPwyuxapbBqZKeEMlAIbFERwbras_CWNQkmviQge0"},
{"content":{"body":"A comparator for unique has to compare against all previous unique values. O(N^2)\nA comparator for largest only has to compare against the current winner. O(N)","format":"org.matrix.custom.html","formatted_body":"A comparator for unique has to compare against all previous unique values. O(N^2)<br />A comparator for largest only has to compare against the current winner. O(N)","msgtype":"m.text"},"ts":1746641279209,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PwpkeqbtefNXYCPFBOA-DVFxDXkEsqQqbsrtSfxPpvE"},
{"content":{"body":"This does sound useful. I currently reach for `.sort(c).at(-1)` when in a pinch ","format":"org.matrix.custom.html","formatted_body":"This does sound useful. I currently reach for `.sort(c).at(-1)` when in a pinch ","msgtype":"m.text"},"ts":1746641327338,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_hn5f4gDGC1SGlu2ZhWCZcArp2E_tiVwVmTMiTjt3cI"},
{"content":{"body":"Effectively, this would be sugar for something like this, yes?\n```\npeople.reduce((acc, p) => p.age > acc.age ? p : acc)\n```","format":"org.matrix.custom.html","formatted_body":"<p>Effectively, this would be sugar for something like this, yes?</p>\n<pre><code>people.reduce((acc, p) =&gt; p.age &gt; acc.age ? p : acc)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1746641415541,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Mx6N1XeSr58OdqsJJDJHVgJt0UVH_PeqZM8UhjaVXaA"},
{"content":{"body":"* Effectively, this would be sugar for something like this, yes?\n\n```\npeople.reduce((acc, person) => person.age > acc.age ? person : acc)\n```","format":"org.matrix.custom.html","formatted_body":"* <p>Effectively, this would be sugar for something like this, yes?</p>\n<pre><code>people.reduce((acc, person) =&gt; person.age &gt; acc.age ? person : acc)\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Effectively, this would be sugar for something like this, yes?\n\n```\npeople.reduce((acc, person) => person.age > acc.age ? person : acc)\n```","format":"org.matrix.custom.html","formatted_body":"<p>Effectively, this would be sugar for something like this, yes?</p>\n<pre><code>people.reduce((acc, person) =&gt; person.age &gt; acc.age ? person : acc)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Mx6N1XeSr58OdqsJJDJHVgJt0UVH_PeqZM8UhjaVXaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746641505081,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$dpqJJirGutyxvcviaPphmNUM6dcC0-K9vkfPp9yGhPA"},
{"content":{"body":"Isn't that good enough for this use case?","m.mentions":{},"msgtype":"m.text"},"ts":1746641867739,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$H5RnuysJLzfcvlFk1DGUmYJpdbUgcToCyBIbGpMkvF4"},
{"content":{"body":"I mean, isn't a for loop good enough for this use case?","m.mentions":{},"msgtype":"m.text"},"ts":1746642180146,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tH7E1InWr4JkrEyJe-QnoOZX1kWfGUR13XcOoVell4o"},
{"content":{"body":"Reduce has the \"empty list\" exception which is annoying IMO","format":"org.matrix.custom.html","formatted_body":"Reduce has the \"empty list\" exception which is annoying IMO","msgtype":"m.text"},"ts":1746642197823,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$m6xtOi6xRXe3ccaWfkqIUsg8nOhOFeR9y8uFe2M9nNU"},
{"content":{"body":"for a winner like method I'd rather an empty set returns undefined as the winner ","format":"org.matrix.custom.html","formatted_body":"for a winner like method I'd rather an empty set returns undefined as the winner ","msgtype":"m.text"},"ts":1746642219017,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mJyiEHQKwV6x1z4nn96U-cm7AcDsQiw5dfdiTIf6uaA"},
{"content":{"body":"`reduce` is basically the same kind of hammer as a for loop. Personally I like it when the language provides common, simple operations even when they're already achievable with the language's existing general purpose tools.","format":"org.matrix.custom.html","formatted_body":"<code>reduce</code> is basically the same kind of hammer as a for loop. Personally I like it when the language provides common, simple operations even when they're already achievable with the language's existing general purpose tools.","m.mentions":{},"msgtype":"m.text"},"ts":1746642326155,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qKdCgHxy1YAfx6Q3wTiNaCbOFyq9za6vISkSsrm35lQ"},
{"content":{"body":"ehhhhh no I was definitely planning on proposing this where it's an exception if you call it on an empty list","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mJyiEHQKwV6x1z4nn96U-cm7AcDsQiw5dfdiTIf6uaA"}},"msgtype":"m.text"},"ts":1746642341578,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y_ca3JkrL-kx3fwTCIHj6N9b03Wk-P8MiI38CiNn9eQ"},
{"content":{"body":"https://es.discourse.group/t/array-prototype-winner/1015/","format":"org.matrix.custom.html","formatted_body":"https://es.discourse.group/t/array-prototype-winner/1015/","msgtype":"m.text"},"ts":1746642351317,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$8L3zA6mPTTahfDOYET9W8oBeNRTc4TLeNMJaEfOBYGI"},
{"content":{"body":"(\"winner\" is a terrible name)","m.mentions":{},"msgtype":"m.text"},"ts":1746642370531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NEyiixfoBPLRxLdupe3ezu4nwIfq3yFI8YrV9SfxB-w"},
{"content":{"body":"> <@bakkot:matrix.org> ehhhhh no I was definitely planning on proposing this where it's an exception if you call it on an empty list\n\nOnly a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Y_ca3JkrL-kx3fwTCIHj6N9b03Wk-P8MiI38CiNn9eQ\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>ehhhhh no I was definitely planning on proposing this where it's an exception if you call it on an empty list</blockquote></mx-reply>Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","m.relates_to":{"m.in_reply_to":{"event_id":"$Y_ca3JkrL-kx3fwTCIHj6N9b03Wk-P8MiI38CiNn9eQ"}},"msgtype":"m.text"},"ts":1746642425384,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg"},
{"content":{"body":"> <@bakkot:matrix.org> ehhhhh no I was definitely planning on proposing this where it's an exception if you call it on an empty list\n\n * Only a weakly held opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24Y_ca3JkrL-kx3fwTCIHj6N9b03Wk-P8MiI38CiNn9eQ\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>ehhhhh no I was definitely planning on proposing this where it's an exception if you call it on an empty list</blockquote></mx-reply> * Only a weakly held opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","m.new_content":{"body":"Only a weakly held opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","format":"org.matrix.custom.html","formatted_body":"Only a weakly held opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)","msgtype":"m.text"},"m.relates_to":{"event_id":"$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746642445224,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yL9Zo7-wewgppOcIRmSuXzmv18Q9F7Htok_a2X5p0-E"},
{"content":{"body":"Passing an initial value to reduce to avoid the throw is annoying because you can't easily pass `undefined` as that will get passed as an argument, so now need to handle that extra case on the comparator ","format":"org.matrix.custom.html","formatted_body":"Passing an initial value to reduce to avoid the throw is annoying because you can't easily pass `undefined` as that will get passed as an argument, so now need to handle that extra case on the comparator ","msgtype":"m.text"},"ts":1746642534922,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lfwOaPSxC9aUfjsGNudnNbiOVwY8KUj8JT1n1ZIQyNI"},
{"content":{"body":"You can avoid this by passing a sentinel value as the second argument, e.g. `{ age: -Infinity }` in the example case.","format":"org.matrix.custom.html","formatted_body":"You can avoid this by passing a sentinel value as the second argument, e.g. <code>{ age: -Infinity }</code> in the example case.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m6xtOi6xRXe3ccaWfkqIUsg8nOhOFeR9y8uFe2M9nNU"}},"msgtype":"m.text"},"ts":1746642546643,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$N_Pgf7ADanhhXZlsOVJVdoBl6zoFO0F9svYat39vbRQ"},
{"content":{"body":"Sure, now do that with a complex type with more than one prop :)","format":"org.matrix.custom.html","formatted_body":"Sure, now do that with a complex type with more than one prop :)","msgtype":"m.text"},"ts":1746642572529,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pOP_YL8eZ79REMxVPmI0a4A8C2NpAoGzhSAUcqz3HFo"},
{"content":{"body":"Returning undefined I can always `?? error()` to get back to the exception behavior. Going from exception to undefined is more work ","format":"org.matrix.custom.html","formatted_body":"Returning undefined I can always `?? error()` to get back to the exception behavior. Going from exception to undefined is more work ","msgtype":"m.text"},"ts":1746642666673,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$D6bJALBAtkyqU2nhO6hxuVhWnTDlIzhWHM_pQZ3VgY0"},
{"content":{"body":"```\npeople.reduce((acc, person) => person.age > acc?.age ?? -Infinity ? person : acc, null)\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>people.reduce((acc, person) =&gt; person.age &gt; acc?.age ?? -Infinity ? person : acc, null)\n</code></pre>\n","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pOP_YL8eZ79REMxVPmI0a4A8C2NpAoGzhSAUcqz3HFo"}},"msgtype":"m.text"},"ts":1746642731687,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$vlWl5zeXgLkjngA4i66qYYKO4oFolVzt-VC0mBMSQoY"},
{"content":{"body":"python's `max` has an optional `default` argument to use in case of empty list, and throws if the list is empty and no default is provided","format":"org.matrix.custom.html","formatted_body":"python's <code>max</code> has an optional <code>default</code> argument to use in case of empty list, and throws if the list is empty and no default is provided","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg"}},"msgtype":"m.text"},"ts":1746642767121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d6zykYYeEKw9QxfIcRooSyFcwy6YUpRQvnyNjs4HeCk"},
{"content":{"body":"which seems pretty reasonable","m.mentions":{},"msgtype":"m.text"},"ts":1746642771212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gYtzQkPqGfJEQXqnM954Wam7PZiuYV7mQzRxWJ7ULOM"},
{"content":{"body":"other languages return fancy maybe types","m.mentions":{},"msgtype":"m.text"},"ts":1746642807120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WO1tyIBeoUVuCBh3NngOPlvudafF3dsUr9HvH2qfjCM"},
{"content":{"body":"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-","m.mentions":{},"msgtype":"m.text"},"ts":1746642819244,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E5Yh--_7QEY1Hsyrws13e3LFRKjwtEPzTdwZ2-kw6f0"},
{"content":{"body":"https://docs.rs/itertools/latest/itertools/fn.max.html","m.mentions":{},"msgtype":"m.text"},"ts":1746642857291,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hYZo3Cg8VwnbAO34gqTNwQPrcoXH10GKFX_ijpIV5TY"},
{"content":{"body":"a default that is only used for empty sounds good, that isn't passed to the comparator ","format":"org.matrix.custom.html","formatted_body":"a default that is only used for empty sounds good, that isn't passed to the comparator ","msgtype":"m.text"},"ts":1746642870248,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$sBb7BeFGlQ-kvHHLuqPCzxlgibx-fl9cqaOZsPSndwc"},
{"content":{"body":"god this language could've been so much better if we had a built-in Maybe in the early days","m.mentions":{},"msgtype":"m.text"},"ts":1746642931253,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JUXFWgH2krhgLoLzzxPJ9ErlBDQGpK67I70g0KFcK98"},
{"content":{"body":"Or allowed any breaking changes ever.","m.mentions":{},"msgtype":"m.text"},"ts":1746642955174,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$31OhgiEfGyXCj8BxuZOodi3jOGvKIDKtG7_5d22qzNs"},
{"content":{"body":"And monoid protocols","format":"org.matrix.custom.html","formatted_body":"And monoid protocols","msgtype":"m.text"},"ts":1746642956104,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$fToiQGXnMNLjqxYMUvfh7hs8uxky49Gyoz2CRn3lj-I"},
{"content":{"body":"> <@aclaymore:matrix.org> Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)\n\nSo Rust has both `max` and `max_by` methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc \n\nIn Rust’s case they return an Option type then None if the list is empty, so `undefined` in the js equivalent.\n\nhttps://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)</blockquote></mx-reply><p>So Rust has both <code>max</code> and <code>max_by</code> methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc</p>\n<p>In Rust’s case they return an Option type then None if the list is empty, so <code>undefined</code> in the js equivalent.</p>\n<p>https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by</p>\n","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg"}},"msgtype":"m.text"},"ts":1746648343103,"senderName":"JaseW","senderId":"@jasew:matrix.org","id":"$bhaJWrtbxKYuZlxGE5nDONiewG5qJOPldea3cjzaRBU"},
{"content":{"body":"> <@aclaymore:matrix.org> Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)\n\n* So Rust has both `max` and `max_by` methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc \n\nIn Rust’s case they return an Option type then None if the list is empty, so `undefined` in the js equivalent.\n\nhttps://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n\nThat being said, option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)</blockquote></mx-reply>* <p>So Rust has both <code>max</code> and <code>max_by</code> methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc</p>\n<p>In Rust’s case they return an Option type then None if the list is empty, so <code>undefined</code> in the js equivalent.</p>\n<p>https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by</p>\n<p>That being said, option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.</p>\n","m.mentions":{},"m.new_content":{"body":"So Rust has both `max` and `max_by` methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc \n\nIn Rust’s case they return an Option type then None if the list is empty, so `undefined` in the js equivalent.\n\nhttps://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n\nThat being said, option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.","format":"org.matrix.custom.html","formatted_body":"<p>So Rust has both <code>max</code> and <code>max_by</code> methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc</p>\n<p>In Rust’s case they return an Option type then None if the list is empty, so <code>undefined</code> in the js equivalent.</p>\n<p>https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by</p>\n<p>That being said, option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bhaJWrtbxKYuZlxGE5nDONiewG5qJOPldea3cjzaRBU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746648383545,"senderName":"JaseW","senderId":"@jasew:matrix.org","id":"$1oS2dC996pZNf_seODd4dGrklE38XlX4odkUb1QfibQ"},
{"content":{"body":"> <@aclaymore:matrix.org> Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)\n\n* So Rust has both `max` and `max_by` methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc \n\nIn Rust’s case they return an Option type then None if the list is empty, so `undefined` in the js equivalent.\n\nhttps://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n\nThat being said, Option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$VzX9eWBVRhCCZIjVmy8eDc5wMyUTW6G3N4Q1H9LR2Gg\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Only a weakly help opinion. I'd be curious what other languages do (the ones that can't return a fancy maybe type)</blockquote></mx-reply>* <p>So Rust has both <code>max</code> and <code>max_by</code> methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc</p>\n<p>In Rust’s case they return an Option type then None if the list is empty, so <code>undefined</code> in the js equivalent.</p>\n<p>https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by</p>\n<p>That being said, Option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.</p>\n","m.mentions":{},"m.new_content":{"body":"So Rust has both `max` and `max_by` methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc \n\nIn Rust’s case they return an Option type then None if the list is empty, so `undefined` in the js equivalent.\n\nhttps://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by\n\nThat being said, Option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.","format":"org.matrix.custom.html","formatted_body":"<p>So Rust has both <code>max</code> and <code>max_by</code> methods on iterators where the later takes a comparator function and the former only works with values that implement “Order”, so mainly numbers etc</p>\n<p>In Rust’s case they return an Option type then None if the list is empty, so <code>undefined</code> in the js equivalent.</p>\n<p>https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by</p>\n<p>That being said, Option is a fancy return type, so doesn’t help here. But I do like the max and max_by names better.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bhaJWrtbxKYuZlxGE5nDONiewG5qJOPldea3cjzaRBU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746648411543,"senderName":"JaseW","senderId":"@jasew:matrix.org","id":"$LGRYkrfpHXY8zz-CnuVHmqa6-swABAp3czTmUxtEZS0"},
{"content":{"body":"Maybe empty vs unaryarrays are the true JS option type, as you can't `null.map`.\nI tried that in a codebase once when I was in my wild youth phase ","format":"org.matrix.custom.html","formatted_body":"Maybe empty vs unaryarrays are the true JS option type, as you can't `null.map`.<br />I tried that in a codebase once when I was in my wild youth phase ","msgtype":"m.text"},"ts":1746648580892,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NIDyZzQiN9ZpJtPKA8qhP2irJomAtsziUPflPXmSEAg"},
{"content":{"body":"* Maybe empty vs unary arrays are the true JS option type, as you can't `null.map`.\nI tried that in a codebase once when I was in my wild youth phase ","format":"org.matrix.custom.html","formatted_body":"* Maybe empty vs unary arrays are the true JS option type, as you can't `null.map`.<br />I tried that in a codebase once when I was in my wild youth phase ","m.new_content":{"body":"Maybe empty vs unary arrays are the true JS option type, as you can't `null.map`.\nI tried that in a codebase once when I was in my wild youth phase ","format":"org.matrix.custom.html","formatted_body":"Maybe empty vs unary arrays are the true JS option type, as you can't `null.map`.<br />I tried that in a codebase once when I was in my wild youth phase ","msgtype":"m.text"},"m.relates_to":{"event_id":"$NIDyZzQiN9ZpJtPKA8qhP2irJomAtsziUPflPXmSEAg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746648592007,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$DjFyBAR_-fUVw3nVOv1XMnwBGQFAzrX-EtwbTZKGivs"},
{"content":{"body":"`max` and `max_by` are the right names but rust has them exactly backwards :(","format":"org.matrix.custom.html","formatted_body":"<code>max</code> and <code>max_by</code> are the right names but rust has them exactly backwards :(","m.mentions":{},"msgtype":"m.text"},"ts":1746649439270,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ygO5Z8wAGocj49zw3tPO0JCi-AcsRaBWVDbLy2-mFiE"},
{"content":{"body":"`sort` takes a comparator, `sortBy` would take a `T -> number`","format":"org.matrix.custom.html","formatted_body":"<code>sort</code> takes a comparator, <code>sortBy</code> would take a <code>T -&gt; number</code>","m.mentions":{},"msgtype":"m.text"},"ts":1746649475119,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_-JGhnpme857kERxmzUiKrTeyWaVA76_7l55rJQ-fA"},
{"content":{"body":"ditto max and maxBy","m.mentions":{},"msgtype":"m.text"},"ts":1746649479775,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XPtuvUe876tBeAnaeMDPKGvoE-qisCoTl9uSip2dbO8"},
{"content":{"body":"* ditto `max` and `maxBy`","format":"org.matrix.custom.html","formatted_body":"* ditto <code>max</code> and <code>maxBy</code>","m.mentions":{},"m.new_content":{"body":"ditto `max` and `maxBy`","format":"org.matrix.custom.html","formatted_body":"ditto <code>max</code> and <code>maxBy</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XPtuvUe876tBeAnaeMDPKGvoE-qisCoTl9uSip2dbO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746649495682,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$50H2J-BtI7G50v8i1dGAZdYnJvjIhxFkowvTslVlDUc"},
{"content":{"body":"I guess the `T -> number` one is called `max_by_key`","format":"org.matrix.custom.html","formatted_body":"I guess the <code>T -&gt; number</code> one is called <code>max_by_key</code>","m.mentions":{},"msgtype":"m.text"},"ts":1746649510054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$glkl9a4otwj7x4JIzVA0xHK8pqVhIpInflm6DzSSpqM"},
{"content":{"body":"* I guess the `T -> number` one is called `max_by_key` in rust","format":"org.matrix.custom.html","formatted_body":"* I guess the <code>T -&gt; number</code> one is called <code>max_by_key</code> in rust","m.mentions":{},"m.new_content":{"body":"I guess the `T -> number` one is called `max_by_key` in rust","format":"org.matrix.custom.html","formatted_body":"I guess the <code>T -&gt; number</code> one is called <code>max_by_key</code> in rust","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$glkl9a4otwj7x4JIzVA0xHK8pqVhIpInflm6DzSSpqM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746649539362,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cS3V0JTxGdTeRHUQqV4iiFrIu9Zg2o8_nxsXp7BHAZA"},
{"content":{"body":"but yeah I think the natural naming is `max` taking an optional comparator and `maxBy` taking a mandatory `T -> number`","format":"org.matrix.custom.html","formatted_body":"but yeah I think the natural naming is <code>max</code> taking an optional comparator and <code>maxBy</code> taking a mandatory <code>T -&gt; number</code>","m.mentions":{},"msgtype":"m.text"},"ts":1746649569163,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6wbdDKQs9tJku8pttQwTgUgE5-3U08g2ak3EtIKl4QY"},
{"content":{"body":"This is it, yes. Both variants are needed, and this is the right naming/assignment.","m.mentions":{},"msgtype":"m.text"},"ts":1746657698096,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$axSdFI5vd_EFe1ad6H9d1TNqLg8iOMy8Ne4JsvI3skQ"},
{"content":{"body":"@bakkot:matrix.org throwing or returning a special value for empty iterators?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> throwing or returning a special value for empty iterators?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1746657996516,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6ZQ3bmsrM81EaYQqAlN3UszNSMpAjrf7WW9_0ZAge8U"},
{"content":{"body":"Michael Ficarra throwing but with an optional second `default` argument to return in that case, like python does","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> throwing but with an optional second <code>default</code> argument to return in that case, like python does","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1746658921696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s4pnjcqFm7S-XcCvX-RO0LJ0ecLL_IYEw2zYYYs74lU"},
{"content":{"body":"though I guess that's annoying in the specific case that you want to use the default comparator but provide a default","m.mentions":{},"msgtype":"m.text"},"ts":1746658986568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m84Iwf8YWni2PtCSR1mpH_w9mXL9lpWUpcXUBZUSmoY"},
{"content":{"body":"oh well I guess","m.mentions":{},"msgtype":"m.text"},"ts":1746658990822,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LaC_Gp_3gLDmOc7PFupUskIXf5865ycITG0Q5kUS5lo"},
{"content":{"body":"yeah I think that's what I would do as well","m.mentions":{},"msgtype":"m.text"},"ts":1746658998628,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LVTqkgUlHBL9zKAqhRCxrkbIw6_OteoHamn7GNOHIVo"},
{"content":{"body":"still not 100% convinced it's needed, but if we do have it, that's how I would do it","m.mentions":{},"msgtype":"m.text"},"ts":1746659013694,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UWivcFXnlI_mF0xIV0zqFRwzWqUN-QjQlF9Dydh0u-c"},
{"content":{"body":"I definitely want `unique`/`uniqueBy` more","format":"org.matrix.custom.html","formatted_body":"I definitely want <code data-md=\"`\">unique</code>/<code data-md=\"`\">uniqueBy</code> more","m.mentions":{},"msgtype":"m.text"},"ts":1746659209157,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6QzsoN3eO9lPAQJg6lwtHwFKDxHsbwxK1NJ1JENE6WE"},
{"content":{"body":"I forget: given that we have no array prototype methods, how would those work? on iterator.prototype but returning array?","m.mentions":{},"msgtype":"m.text"},"ts":1746659278061,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DQOjpevvPDjC3Q4RYzcO_tz-YhIfaKe9YvdIVErb7KI"},
{"content":{"body":"I guess they could return an iterator, ok","m.mentions":{},"msgtype":"m.text"},"ts":1746659321037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eusePrENQj96bXEt6eJzuqYr6dzC2Ic0iPwicMJZmY0"},
{"content":{"body":"just kind of weird to have an iterator that uses O(all previous items) memory","m.mentions":{},"msgtype":"m.text"},"ts":1746659348618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vvkEdqLQMUz5gaMa4-ifDn6nOghlkCF7hKsvKjlZUSs"},
{"content":{"body":"yeah that was the feedback I got at the last presentation","m.mentions":{},"msgtype":"m.text"},"ts":1746660684875,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FhQCQlWogpR2upQjliXBVeHwGgYjob19_pm5izEZ5sc"},
{"content":{"body":"it's weird but I don't think it's *surprising* if you consider for even a second what it's doing","format":"org.matrix.custom.html","formatted_body":"it&#39;s weird but I don&#39;t think it&#39;s <i data-md=\"*\">surprising</i> if you consider for even a second what it&#39;s doing","m.mentions":{},"msgtype":"m.text"},"ts":1746660698806,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$f1rm0UvMXwN-jdQ1PB0Ks2SQ1s6Z2fQ-kPj1ramuh7I"},
{"content":{"body":"and I don't think that's fatal to the proposal","m.mentions":{},"msgtype":"m.text"},"ts":1746660770440,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CQfUyh78yuEH1t9eUtgdLTiKX9uA2Xp6Z77s6mHwp7I"}
]