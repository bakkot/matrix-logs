[
{"content":{"body":"CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"<p>CharacterClassEscape[UnicodeMode] ::\n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression }</p>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","msgtype":"m.text"},"ts":1746608550685,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kVHFnu3I6r2_GJlKJw9TNij2-yWTd4-9VJp25Co_RKY"},
{"content":{"body":"* ```\nCharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n```\n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"* <pre><code>CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n</code></pre>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","m.new_content":{"body":"```\nCharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n```\n\nIs it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse `/^\\p{Basic_Emoji}+$/v`","format":"org.matrix.custom.html","formatted_body":"<pre><code>CharacterClassEscape[UnicodeMode] :: \n[+UnicodeMode] p{ UnicodePropertyValueExpression }\n[+UnicodeMode] P{ UnicodePropertyValueExpression } \n</code></pre>\n<p>Is it missing a [+UnicodeSetsMode] version of those 2 production? otherwise I cannot find a way to parse <code>/^\\p{Basic_Emoji}+$/v</code></p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$kVHFnu3I6r2_GJlKJw9TNij2-yWTd4-9VJp25Co_RKY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746608559627,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9_uvzVeA9hTDWJ5BIjJ49JJhoPEYAPtLwaaXlB0cyh0"},
{"content":{"body":"In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1746613580323,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$TTh5vpw6tFm4owX6Db-LYZ7u6eO_7vTUhAxBOVCsFjY"},
{"content":{"body":"I think.","m.mentions":{},"msgtype":"m.text"},"ts":1746613611212,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$G1thyuGSKaEGlAWhEuovhraABVLQeUj2xM3ZX4OY7ZI"},
{"content":{"body":"* In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `+USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"* In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>+USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"m.new_content":{"body":"In the spec, `+UnicodeSetsMode` only occurs in conjunction with `+UnicodeMode`. (i.e., roughly, `+USM` implies `+UM`, or `+USM` is a subset of `+UM`), so any RHS guarded by `[+UM]` 'succeeds' for all cases of `+USM`.","format":"org.matrix.custom.html","formatted_body":"In the spec, <code>+UnicodeSetsMode</code> only occurs in conjunction with <code>+UnicodeMode</code>. (i.e., roughly, <code>+USM</code> implies <code>+UM</code>, or <code>+USM</code> is a subset of <code>+UM</code>), so any RHS guarded by <code>[+UM]</code> 'succeeds' for all cases of <code>+USM</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TTh5vpw6tFm4owX6Db-LYZ7u6eO_7vTUhAxBOVCsFjY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746613699938,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$yClSAMUVQRAM_lGvqNu2R6PUzyBDdaeYQGvFiClBAxw"},
{"content":{"body":"oh, I checked all Pattern, all Pattern[+USM] is also marked as [+UM]","msgtype":"m.text"},"ts":1746616098340,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$8JzxUkH6MHboViSP0kYeoNm-lqv3RA57LoAUo0CN0ss"},
{"content":{"body":"yup","m.mentions":{},"msgtype":"m.text"},"ts":1746617353221,"senderName":"jmdyck","senderId":"@jmdyck:matrix.org","id":"$cjn0vNGFq7Frmcts6OBonFWtayTcfH9vrr0ZcEgLfYA"},
{"content":{"body":"I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option).","format":"org.matrix.custom.html","formatted_body":"<p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1746638747522,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0"},
{"content":{"body":"* I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"* <p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"m.new_content":{"body":"I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"<p>I want to proposal a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746638750905,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RolGW-wipABHB7xAfFB76Jyx9KtL5V_nd417O5uDQMY"},
{"content":{"body":"I suppose one way to solve the dilemma is to have a function which lifts a `T -> number` mapper to a `(T, T) -> { -1, 0, 1 }` comparator, and expect people to use that, as in `people.maxByComparator(Compare.by(person -> person.age))`.","format":"org.matrix.custom.html","formatted_body":"I suppose one way to solve the dilemma is to have a function which lifts a <code>T -&gt; number</code> mapper to a <code>(T, T) -&gt; { -1, 0, 1 }</code> comparator, and expect people to use that, as in <code>people.maxByComparator(Compare.by(person -&gt; person.age))</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1746638893403,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1NUqdX4BaU81sGMDfve2hfe0wSwDeFYWFNTfh3pfHAc"},
{"content":{"body":"(java calls the latter operation `Comparator.comparing`)","format":"org.matrix.custom.html","formatted_body":"(java calls the latter operation <code>Comparator.comparing</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1746638903027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UR5QYy647bw-lW4_0dKv7U-GJZcNTCzySvPs2hYEeJw"},
{"content":{"body":"* I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"* <p>I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"m.new_content":{"body":"I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or `.reduce`.\n\nThere's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.\n\nThoughts? We could in principle support both. (Even in the same function, just by switching on `callback.length === 1`, but... not that option.)","format":"org.matrix.custom.html","formatted_body":"<p>I want to make a proposal for a method for finding the item in an iterable which has the largest value according to some function, for example \"find the person with the largest age\" or whatever. This comes up a lot IME, enough to be worth having in the standard library even though it's like a four or five lines to do with a loop or <code>.reduce</code>.</p>\n<p>There's two natural ways to do this: either take a function from input items to a number, or take a comparator. both work, first is often more convenient, second is strictly more general.</p>\n<p>Thoughts? We could in principle support both. (Even in the same function, just by switching on <code>callback.length === 1</code>, but... not that option.)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fVg9vd-l8z4fWh33caWMoYgDIrwb1r2hFrZpCLV9Qw0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746639078117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MmSO73hbknYGBbvVmmIxbcD0q4qW95qY5mxr1fbs2-g"}
]