[
{"content":{"body":"In the spec, is there a way to split an abstract List into a first element and another List of the other elements?","msgtype":"m.text"},"ts":1630628156797,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dVJHxd_JE59xIVv2CZfgpOac9Gpple8hgdaDLJ7OCtQ"},
{"content":{"body":"‚ÄúLet ¬´_first_, ..._rest_¬ª be _list_‚Äù‚Ä¶","format":"org.matrix.custom.html","formatted_body":"‚ÄúLet ¬´<em>first</em>, ...<em>rest</em>¬ª be <em>list</em>‚Äù‚Ä¶","msgtype":"m.text"},"ts":1630628180077,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wzneGQG7qrCrd6l3LmYYZq4u1CDhzQ4L5whlyID7dS8"},
{"content":{"body":"Nope","msgtype":"m.text"},"ts":1630628190159,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FZPPgA3DCklFJWL_uhtAxdNFVTsCspCsn1qqrwkBisg"},
{"content":{"body":"I‚Äôll just say, ‚ÄúLet _rest_ be the List of all elements of _list_ except its first.‚Äù","format":"org.matrix.custom.html","formatted_body":"I‚Äôll just say, ‚ÄúLet <em>rest</em> be the List of all elements of <em>list</em> except its first.‚Äù","msgtype":"m.text"},"ts":1630628335768,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HUrkWLFHeBlD4pVZFrk3rkojB5gTaIq1YP3_SZWW6JU"},
{"content":{"body":"If you own the list, you could just mutate it","msgtype":"m.text"},"ts":1630628454006,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FxY_42bQUiqOwp8oVM72BniUHPk76m8lueNtfN-Ll_M"},
{"content":{"body":"Well, how would I express that in spec language?","msgtype":"m.text"},"ts":1630628474483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NRfdDGPUQjqPSBcj4qMVzB-uHDCh3KDohDL3UrDoWZA"},
{"content":{"body":"It‚Äôd still be prose, right?","msgtype":"m.text"},"ts":1630628480395,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9vWN0yA8JfwqmJFQjXQGVc-_WYlLYxUXje_LMGsyuEc"},
{"content":{"body":"i. Let r be the first element of remaining.\nii. Remove the first element from remaining.","msgtype":"m.text"},"ts":1630628482636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5llkasAs-OSFPGK55EqVrW8MOfCnya0mxYJh7yVvQH4"},
{"content":{"body":"Ah‚Ä¶","msgtype":"m.text"},"ts":1630628490601,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W85kET6AhEy7ZXdHfP0UoU9ZqiKgX4AUNNB_iSAnK48"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1630628503851,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zlUhvHHx8t2qLtpyAzmVqTnb02iaImxgRedgEN7mCV4"},
{"content":{"body":"ii. Let kValue be the first element of values and remove that element from values.","msgtype":"m.text"},"ts":1630628504770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8NyDETj6o0MueYKXR8a4OCuZEw6p6PGDXad0Rvdx87U"},
{"content":{"body":"Nice. Thank you!","msgtype":"m.text"},"ts":1630628517463,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TOWIHltwkAVN8r17M8kWoe8qMYzbrXz3rsT0WEiJNCc"},
{"content":{"body":"Which thing are you writing that needs this? For bigint math I'd think you could just copy the Number ones","msgtype":"m.text"},"ts":1630628565194,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fLwcKmhIsVe6bxdjIWrYK5rYjf2aSAworyCX-wvHLBs"},
{"content":{"body":"`Math.hypot`. Killing `Math.bigHypot` and merging its behavior into `hypot`.","format":"org.matrix.custom.html","formatted_body":"<code>Math.hypot</code>. Killing <code>Math.bigHypot</code> and merging its behavior into <code>hypot</code>.","msgtype":"m.text"},"ts":1630628597818,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2YTrgj-1oG7hY_5y_K59JMhH_bdvC-JKzwxcc7zcUQg"},
{"content":{"body":"Dispatching on the type of the first argument.","msgtype":"m.text"},"ts":1630628612520,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Z2t_1nNWPRtYiwMLXSYuOrnZksmf-PY7uwTlVdweZBc"},
{"content":{"body":"Math.hypot just iterates over the list; that seems better than splitting it","msgtype":"m.text"},"ts":1630628658147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0S4uwmYkUsmvvygK0STgIRpBMJQn83ZclwFgPgV7jX8"},
{"content":{"body":"Coercing the rest of the arguments.","msgtype":"m.text"},"ts":1630628659116,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$51XKKSfZ5lEG39dmuQWxYlOuBBc-uQftCSF75mYPvl4"},
{"content":{"body":" * Well, it needs to coerce the rest of the arguments based on the first argument‚Äôs type, though.","m.new_content":{"body":"Well, it needs to coerce the rest of the arguments based on the first argument‚Äôs type, though.","msgtype":"m.text"},"m.relates_to":{"event_id":"$51XKKSfZ5lEG39dmuQWxYlOuBBc-uQftCSF75mYPvl4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630628681325,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i0PJrbkJXOdAJa1OdSx8xREFadEMxeNi_InyvlRq8gA"},
{"content":{"body":"https://github.com/js-choi/proposal-bigint-math/commit/2b865923a97879b3807b27fbf7f3d275f9928e40","msgtype":"m.text"},"ts":1630628917662,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yiw9MahgYpvJROnG5cLQWqDXFI2K7i05IhdmVnAZUSU"},
{"content":{"body":"Yeah but you don't need to take the tail of the list for that.\n\nI'd do something like\n```\n1. If _args_ is empty, return +0ùîΩ.\n1. If Type(_args_[0]) is BigInt, let _isBigInt_ be *true*.\n1. Else, let _isBigInt_ be *false*.\n1. For each element _arg_ of _args_, do\n  1. If _isBigInt_ is *true*, then let _n_ be ? ToBigInt(_arg_)\n  1. Else, let _n_ be ? ToNumber(_arg_).\n```\netc","format":"org.matrix.custom.html","formatted_body":"<p>Yeah but you don't need to take the tail of the list for that.</p>\n<p>I'd do something like</p>\n<pre><code>1. If _args_ is empty, return +0ùîΩ.\n1. If Type(_args_[0]) is BigInt, let _isBigInt_ be *true*.\n1. Else, let _isBigInt_ be *false*.\n1. For each element _arg_ of _args_, do\n  1. If _isBigInt_ is *true*, then let _n_ be ? ToBigInt(_arg_)\n  1. Else, let _n_ be ? ToNumber(_arg_).\n</code></pre>\n<p>etc</p>\n","msgtype":"m.text"},"ts":1630628968025,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0XytyyYx5f6BNPhQ1KiXBXwWEeikdHxtIOQk9l2Zidw"},
{"content":{"body":"there's other ways you can write it but none of them obviously require you to construct the list-except-head","msgtype":"m.text"},"ts":1630628988869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$amEilQboEmzq-AdY2kDMmhYkwoPn7cXI9Ge3TT1reJU"},
{"content":{"body":"just to peek at the head to determine which coercer to use","msgtype":"m.text"},"ts":1630628999977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ejog84v6VDN-DjZlCavjuTFtIYJ9Ix2FB_o164IDLvE"}
]