[
{"content":{"body":"In the spec, is there a way to split an abstract List into a first element and another List of the other elements?","msgtype":"m.text"},"ts":1630628156797,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dVJHxd_JE59xIVv2CZfgpOac9Gpple8hgdaDLJ7OCtQ"},
{"content":{"body":"‚ÄúLet ¬´_first_, ..._rest_¬ª be _list_‚Äù‚Ä¶","format":"org.matrix.custom.html","formatted_body":"‚ÄúLet ¬´<em>first</em>, ...<em>rest</em>¬ª be <em>list</em>‚Äù‚Ä¶","msgtype":"m.text"},"ts":1630628180077,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wzneGQG7qrCrd6l3LmYYZq4u1CDhzQ4L5whlyID7dS8"},
{"content":{"body":"Nope","msgtype":"m.text"},"ts":1630628190159,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FZPPgA3DCklFJWL_uhtAxdNFVTsCspCsn1qqrwkBisg"},
{"content":{"body":"I‚Äôll just say, ‚ÄúLet _rest_ be the List of all elements of _list_ except its first.‚Äù","format":"org.matrix.custom.html","formatted_body":"I‚Äôll just say, ‚ÄúLet <em>rest</em> be the List of all elements of <em>list</em> except its first.‚Äù","msgtype":"m.text"},"ts":1630628335768,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HUrkWLFHeBlD4pVZFrk3rkojB5gTaIq1YP3_SZWW6JU"},
{"content":{"body":"If you own the list, you could just mutate it","msgtype":"m.text"},"ts":1630628454006,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FxY_42bQUiqOwp8oVM72BniUHPk76m8lueNtfN-Ll_M"},
{"content":{"body":"Well, how would I express that in spec language?","msgtype":"m.text"},"ts":1630628474483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NRfdDGPUQjqPSBcj4qMVzB-uHDCh3KDohDL3UrDoWZA"},
{"content":{"body":"It‚Äôd still be prose, right?","msgtype":"m.text"},"ts":1630628480395,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9vWN0yA8JfwqmJFQjXQGVc-_WYlLYxUXje_LMGsyuEc"},
{"content":{"body":"i. Let r be the first element of remaining.\nii. Remove the first element from remaining.","msgtype":"m.text"},"ts":1630628482636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5llkasAs-OSFPGK55EqVrW8MOfCnya0mxYJh7yVvQH4"},
{"content":{"body":"Ah‚Ä¶","msgtype":"m.text"},"ts":1630628490601,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W85kET6AhEy7ZXdHfP0UoU9ZqiKgX4AUNNB_iSAnK48"},
{"content":{"body":"or","msgtype":"m.text"},"ts":1630628503851,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zlUhvHHx8t2qLtpyAzmVqTnb02iaImxgRedgEN7mCV4"},
{"content":{"body":"ii. Let kValue be the first element of values and remove that element from values.","msgtype":"m.text"},"ts":1630628504770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8NyDETj6o0MueYKXR8a4OCuZEw6p6PGDXad0Rvdx87U"},
{"content":{"body":"Nice. Thank you!","msgtype":"m.text"},"ts":1630628517463,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TOWIHltwkAVN8r17M8kWoe8qMYzbrXz3rsT0WEiJNCc"},
{"content":{"body":"Which thing are you writing that needs this? For bigint math I'd think you could just copy the Number ones","msgtype":"m.text"},"ts":1630628565194,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fLwcKmhIsVe6bxdjIWrYK5rYjf2aSAworyCX-wvHLBs"},
{"content":{"body":"`Math.hypot`. Killing `Math.bigHypot` and merging its behavior into `hypot`.","format":"org.matrix.custom.html","formatted_body":"<code>Math.hypot</code>. Killing <code>Math.bigHypot</code> and merging its behavior into <code>hypot</code>.","msgtype":"m.text"},"ts":1630628597818,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2YTrgj-1oG7hY_5y_K59JMhH_bdvC-JKzwxcc7zcUQg"},
{"content":{"body":"Dispatching on the type of the first argument.","msgtype":"m.text"},"ts":1630628612520,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Z2t_1nNWPRtYiwMLXSYuOrnZksmf-PY7uwTlVdweZBc"},
{"content":{"body":"Math.hypot just iterates over the list; that seems better than splitting it","msgtype":"m.text"},"ts":1630628658147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0S4uwmYkUsmvvygK0STgIRpBMJQn83ZclwFgPgV7jX8"},
{"content":{"body":"Coercing the rest of the arguments.","msgtype":"m.text"},"ts":1630628659116,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$51XKKSfZ5lEG39dmuQWxYlOuBBc-uQftCSF75mYPvl4"},
{"content":{"body":" * Well, it needs to coerce the rest of the arguments based on the first argument‚Äôs type, though.","m.new_content":{"body":"Well, it needs to coerce the rest of the arguments based on the first argument‚Äôs type, though.","msgtype":"m.text"},"m.relates_to":{"event_id":"$51XKKSfZ5lEG39dmuQWxYlOuBBc-uQftCSF75mYPvl4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630628681325,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i0PJrbkJXOdAJa1OdSx8xREFadEMxeNi_InyvlRq8gA"},
{"content":{"body":"https://github.com/js-choi/proposal-bigint-math/commit/2b865923a97879b3807b27fbf7f3d275f9928e40","msgtype":"m.text"},"ts":1630628917662,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yiw9MahgYpvJROnG5cLQWqDXFI2K7i05IhdmVnAZUSU"},
{"content":{"body":"Yeah but you don't need to take the tail of the list for that.\n\nI'd do something like\n```\n1. If _args_ is empty, return +0ùîΩ.\n1. If Type(_args_[0]) is BigInt, let _isBigInt_ be *true*.\n1. Else, let _isBigInt_ be *false*.\n1. For each element _arg_ of _args_, do\n  1. If _isBigInt_ is *true*, then let _n_ be ? ToBigInt(_arg_)\n  1. Else, let _n_ be ? ToNumber(_arg_).\n```\netc","format":"org.matrix.custom.html","formatted_body":"<p>Yeah but you don't need to take the tail of the list for that.</p>\n<p>I'd do something like</p>\n<pre><code>1. If _args_ is empty, return +0ùîΩ.\n1. If Type(_args_[0]) is BigInt, let _isBigInt_ be *true*.\n1. Else, let _isBigInt_ be *false*.\n1. For each element _arg_ of _args_, do\n  1. If _isBigInt_ is *true*, then let _n_ be ? ToBigInt(_arg_)\n  1. Else, let _n_ be ? ToNumber(_arg_).\n</code></pre>\n<p>etc</p>\n","msgtype":"m.text"},"ts":1630628968025,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0XytyyYx5f6BNPhQ1KiXBXwWEeikdHxtIOQk9l2Zidw"},
{"content":{"body":"there's other ways you can write it but none of them obviously require you to construct the list-except-head","msgtype":"m.text"},"ts":1630628988869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$amEilQboEmzq-AdY2kDMmhYkwoPn7cXI9Ge3TT1reJU"},
{"content":{"body":"just to peek at the head to determine which coercer to use","msgtype":"m.text"},"ts":1630628999977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ejog84v6VDN-DjZlCavjuTFtIYJ9Ix2FB_o164IDLvE"},
{"content":{"body":" * https://github.com/js-choi/proposal-bigint-math/commit/b5ece4e1543c35375f13f02653c0a7119ed0c495","m.new_content":{"body":"https://github.com/js-choi/proposal-bigint-math/commit/b5ece4e1543c35375f13f02653c0a7119ed0c495","msgtype":"m.text"},"m.relates_to":{"event_id":"$yiw9MahgYpvJROnG5cLQWqDXFI2K7i05IhdmVnAZUSU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630629061713,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XUi98z4Zd9NEqoWAA2WLs58bE_uvIyHYJJ2tDT7mz-A"},
{"content":{"body":"Wouldn‚Äôt that cause an unnecessary call to ToBigInt or ToNumber for the first element?","msgtype":"m.text"},"ts":1630629086691,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7rvDTb8rBLljwLdUlIlv6HZyHFyXOUZxr4-iQLE90UI"},
{"content":{"body":"Type() does not perform coercion, no","msgtype":"m.text"},"ts":1630629101571,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2YybKho_86soyRaNuJF-jy6c1AYWAPQ4W6B4sIW3BJY"},
{"content":{"body":" * Wouldn‚Äôt that cause an unnecessary call to ToBigInt or ToNumber for the first element?","m.new_content":{"body":"Wouldn‚Äôt that cause an unnecessary call to ToBigInt or ToNumber for the first element?","msgtype":"m.text"},"m.relates_to":{"event_id":"$7rvDTb8rBLljwLdUlIlv6HZyHFyXOUZxr4-iQLE90UI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630629106871,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MGMkfCIlj6fkyrhDY_jAjyd4kIsiy6yLGaXkZJ5ZXZs"},
{"content":{"body":"Though, I guess you probably want ToNumeric?","msgtype":"m.text"},"ts":1630629137939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0HskT00YHFhqut7XumFIdKaFmKqgQL_pbvsqf6tvPCI"},
{"content":{"body":"I mean ToBigInt, though. It‚Äôs calling ToBigInt on _args_[0] unnecessarily. ","format":"org.matrix.custom.html","formatted_body":"I mean ToBigInt, though. It‚Äôs calling ToBigInt on <em>args</em>[0] unnecessarily.","msgtype":"m.text"},"ts":1630629140322,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sNG1xsrocDQYnYuHdtDh48z-Zw888pkAOYgOj3lChwc"},
{"content":{"body":"Yeah but that's unobservable","msgtype":"m.text"},"ts":1630629155224,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bSID5ZD995XFcWOBmaJwjNSFPNsttk5LUGAL7Ktwn-0"},
{"content":{"body":"Oh, yeah, right, ugh, I forgot.","msgtype":"m.text"},"ts":1630629155747,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5S4nG3hHEZWJVtM3vqkQpt1BfszuneLRPN7VZGXcRGI"},
{"content":{"body":"> <@bakkot:matrix.org> Yeah but that's unobservable\n\nIf we‚Äôre fine with that in the spec, I can change it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bSID5ZD995XFcWOBmaJwjNSFPNsttk5LUGAL7Ktwn-0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Yeah but that&#39;s unobservable</blockquote></mx-reply>If we‚Äôre fine with that in the spec, I can change it.","m.relates_to":{"m.in_reply_to":{"event_id":"$bSID5ZD995XFcWOBmaJwjNSFPNsttk5LUGAL7Ktwn-0"}},"msgtype":"m.text"},"ts":1630629167818,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QLOJq9oWJXvuEPumIUGfspm4l4bFtuv_R7U_P-p7Tp0"},
{"content":{"body":"> <@bakkot:matrix.org> Yeah but that's unobservable\n\n * If we‚Äôre fine with unobservable redundant calls the spec, I can change it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$bSID5ZD995XFcWOBmaJwjNSFPNsttk5LUGAL7Ktwn-0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Yeah but that's unobservable</blockquote></mx-reply> * If we‚Äôre fine with unobservable redundant calls the spec, I can change it.","m.new_content":{"body":"If we‚Äôre fine with unobservable redundant calls the spec, I can change it.","format":"org.matrix.custom.html","formatted_body":"If we‚Äôre fine with unobservable redundant calls the spec, I can change it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$QLOJq9oWJXvuEPumIUGfspm4l4bFtuv_R7U_P-p7Tp0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630629178636,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$K8uNPUDZWpW5qeshvXPbXD3bkfz1g2NU81z2MtaTxyE"},
{"content":{"body":"If that makes the algorithm easier to read, absolutely.","msgtype":"m.text"},"ts":1630629189222,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$02FbVe5WEgxSrnuG6KZSFJeSsbZ2j9gUV_9cG5KzCn4"},
{"content":{"body":" * Oh, yeah, right, ugh, I forgot that I need to call ToNumeric on the first.","m.new_content":{"body":"Oh, yeah, right, ugh, I forgot that I need to call ToNumeric on the first.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5S4nG3hHEZWJVtM3vqkQpt1BfszuneLRPN7VZGXcRGI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630629190999,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_fwxAOu-Y1ej6zzYs5wSeuie6cJwBBMSzkQsRudzM8c"},
{"content":{"body":"https://github.com/js-choi/proposal-bigint-math/commit/32152ba671e6b94e9912139db5b3a31e35ad9021","msgtype":"m.text"},"ts":1630629622671,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZLNxVKzsM4083w-MtAhUd254cYnwUyXlbL2UWQqNl5s"},
{"content":{"body":"Thanks for the help, bakkot!","format":"org.matrix.custom.html","formatted_body":"Thanks for the help, <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>!","msgtype":"m.text"},"ts":1630629628053,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W9X3OH-cdVUplmC5wi19ynfW6MlWSzAMeCu5hqLrMXo"},
{"content":{"body":"‚Ä¶Though would it work with `Math.hypot(Object(4n))`?","format":"org.matrix.custom.html","formatted_body":"‚Ä¶Though would it work with <code>Math.hypot(Object(4n))</code>?","msgtype":"m.text"},"ts":1630629740774,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0ZyNGuXnMWait6TUegEEYwhOLl6S7DmQB2gb0m1wb1Q"},
{"content":{"body":"Wouldn‚Äôt the Type(_args_[0]) return Object?","format":"org.matrix.custom.html","formatted_body":"Wouldn‚Äôt the Type(<em>args</em>[0]) return Object?","msgtype":"m.text"},"ts":1630629760479,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$voEqHyifVxhkxlh5cfY4pF-B9fuOeZq2O4MRbdpI1bU"},
{"content":{"body":"Right, that's why I suggested ToNumeric","msgtype":"m.text"},"ts":1630629828857,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8y6sjDmxyGoN4QH3HJi0LqBkxvgTZebx9UHvQn7tSug"},
{"content":{"body":"Ah, ah.","msgtype":"m.text"},"ts":1630629833424,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Bq2HIe_2sC8QQ2dmF9drzitfqsbcUORpSBgjKtojDHQ"},
{"content":{"body":"So we‚Äôre fine with just replacing it with Type(ToNumeric(_args_[0])), because the extra coercion is invisible to the user.","format":"org.matrix.custom.html","formatted_body":"So we‚Äôre fine with just replacing it with Type(ToNumeric(<em>args</em>[0])), because the extra coercion is invisible to the user.","msgtype":"m.text"},"ts":1630629910352,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7afMWFJTUY0OVdogb5J4dSNJu8Cu10ZgJIZrlIt_J1Y"},
{"content":{"body":"Well, no, that ends up being visible, unfortunately","msgtype":"m.text"},"ts":1630629925969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$czRgFTGhRoFiCqRv5JXOyrqRE5Cc6lVZDhez553QWT0"},
{"content":{"body":"Ah‚Ä¶","msgtype":"m.text"},"ts":1630629939045,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zZ4XlBOWT1Sep5SFt1nE4OnvU0lGwDaBrUyDdNBUMm0"},
{"content":{"body":"So you do probably want to pop the list after all, I'm afraid","msgtype":"m.text"},"ts":1630629966151,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vOu_7eHzN0R_FnLMK_Ep1tDQhXwkLoI5rKfkGJ5vBQc"},
{"content":{"body":"I hadn't thought through the fact that you'd want to ToNumeric before doing the Type","msgtype":"m.text"},"ts":1630629984058,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HRiZe8ODDqiExVf1xnJEvwzzFF_dyVo6YBqaC_650P0"},
{"content":{"body":"Thanks for the big help anyway, though. üëçÔ∏è","msgtype":"m.text"},"ts":1630630014665,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6J6h8AtfS0QITKsC-BJt5tzYmVw5SjDVmjfW2kgp178"},
{"content":{"body":"I wonder if ToPrimitive would work‚Ä¶","msgtype":"m.text"},"ts":1630630491069,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HwWP6S68qypEPye-OK5gxt031HX-MdpEED9nDXFL1y4"},
{"content":{"body":"Could someone familiar with TypeScript type inference explain the problem being described in https://github.com/js-choi/proposal-hack-pipes/issues/18¬†? I‚Äôm not sure why the type of `userOption |> map(user => user.name)(^)` cannot be inferred from `userOption` and `map`.","format":"org.matrix.custom.html","formatted_body":"Could someone familiar with TypeScript type inference explain the problem being described in https://github.com/js-choi/proposal-hack-pipes/issues/18¬†? I‚Äôm not sure why the type of <code>userOption |&gt; map(user =&gt; user.name)(^)</code> cannot be inferred from <code>userOption</code> and <code>map</code>.","msgtype":"m.text"},"ts":1630679792456,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$w0EVuYN51VrMVoaoP86sW-iCAKYaLmm-X3m8A3hklzc"},
{"content":{"body":"It‚Äôs just the same as `map(user => user.name)(userOption)`, after all‚Ä¶","format":"org.matrix.custom.html","formatted_body":"It‚Äôs just the same as <code>map(user =&gt; user.name)(userOption)</code>, after all‚Ä¶","msgtype":"m.text"},"ts":1630679866974,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FBePdg4ZEu1AmxRVqZxyibfVrRFjV8_NzFzff5jGpDA"},
{"content":{"body":"does anyone else keep getting surprised that optional chaining doesn't work with assignment","msgtype":"m.text"},"ts":1630680824708,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$g5k0T5iTr2MKP0yTYG0nMiiiUEpsMnU2w0TI1Q57p_g"},
{"content":{"body":"jschoi: i think they mean this https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAWwIYAcA8AVANIgVQD4AKYALkRIDdLsBKRAXiMPspNToG0BdRloT6IA3gChEkxACcAplBDSkNVABsQsgM49+zVtTUbNAOjToy9ANxiAvmLEQEmqIlTTpqAJ7NE3EQCNKAEYbXmszEk4BVlRjf3pOdy8rIA","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i think they mean this https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAWwIYAcA8AVANIgVQD4AKYALkRIDdLsBKRAXiMPspNToG0BdRloT6IA3gChEkxACcAplBDSkNVABsQsgM49+zVtTUbNAOjToy9ANxiAvmLEQEmqIlTTpqAJ7NE3EQCNKAEYbXmszEk4BVlRjf3pOdy8rIA","msgtype":"m.text"},"ts":1630681095257,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jG5YAQKetr5IyCxN-JuFrgT4vfa3JP70qmYzTx3v1KA"},
{"content":{"body":"i'd say that's just a dumb limitation of TS though, and you can manually annotate it, so i don't think it matters","msgtype":"m.text"},"ts":1630681116444,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$NpYhD170_6GceEYekipICg6EErKpuAydMgZs3vAsjMI"},
{"content":{"body":"Huh, I see. So the problem is that TypeScript cannot infer the type of even `map(user => user.name)(userOption)`‚Ä¶but, apparently, somehow it can infer the types in `pipe(userOption, map(user => user.name))`? ü§î ","format":"org.matrix.custom.html","formatted_body":"Huh, I see. So the problem is that TypeScript cannot infer the type of even <code>map(user =&gt; user.name)(userOption)</code>‚Ä¶but, apparently, somehow it can infer the types in <code>pipe(userOption, map(user =&gt; user.name))</code>? ü§î","msgtype":"m.text"},"ts":1630681499351,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$93w86C1jxI_9VxTg99_6mLAMf_36sQD5Enx9sQpq8pY"},
{"content":{"body":"yeah for some reason it doesn't unify the types in the former case","msgtype":"m.text"},"ts":1630681516152,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$KRMNV5pS9jKSx1LR061R3pyxWrZA-smNFsQqqUxWwLM"},
{"content":{"body":"personally i'd say its probably just better for microsoft to fix that","msgtype":"m.text"},"ts":1630681530501,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$dpR8GAItz9CqbbCK3VXWxbY587iQ7-uOG8pIcuFDr2c"},
{"content":{"body":"I wonder if they‚Äôve tried but there‚Äôs a fundamental reason why they can‚Äôt, hmm. Anyways, thanks for help!","msgtype":"m.text"},"ts":1630681719435,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ExFJAX8Cok2NSxn_Noj2OzCbW7QX26y6vj4TR11v_ao"},
{"content":{"body":"* I wonder if the TypeScript team has tried adding that inference but there‚Äôs a fundamental reason why they can‚Äôt, hmm. Anyways, thanks for help!","m.new_content":{"body":"I wonder if the TypeScript team has tried adding that inference but there‚Äôs a fundamental reason why they can‚Äôt, hmm. Anyways, thanks for help!","msgtype":"m.text"},"m.relates_to":{"event_id":"$ExFJAX8Cok2NSxn_Noj2OzCbW7QX26y6vj4TR11v_ao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630681742046,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FcSlC07it5uq3GRMgBu4ReJtEZb2zBuaFcwAu3KBDOs"},
{"content":{"body":"its weird cuz its not really even an inference, it's just unifying `unknown` and `{b: number}` :/","format":"org.matrix.custom.html","formatted_body":"its weird cuz its not really even an inference, it's just unifying <code>unknown</code> and <code>{b: number}</code> :/","msgtype":"m.text"},"ts":1630681786883,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$pZPevEyRmTcbgO2DnUceFr11EOFl_AzD1xp7wJ4yjSQ"},
{"content":{"body":"> <@devsnek:matrix.org> jschoi: i think they mean this https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAWwIYAcA8AVANIgVQD4AKYALkRIDdLsBKRAXiMPspNToG0BdRloT6IA3gChEkxACcAplBDSkNVABsQsgM49+zVtTUbNAOjToy9ANxiAvmLEQEmqIlTTpqAJ7NE3EQCNKAEYbXmszEk4BVlRjf3pOdy8rIA\n\nI‚Äôll use your example in my reply on that issue, if that‚Äôs okay.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!wbACpffbfxANskIFZq%3Amatrix.org/%24jG5YAQKetr5IyCxN-JuFrgT4vfa3JP70qmYzTx3v1KA\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i think they mean this https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAWwIYAcA8AVANIgVQD4AKYALkRIDdLsBKRAXiMPspNToG0BdRloT6IA3gChEkxACcAplBDSkNVABsQsgM49+zVtTUbNAOjToy9ANxiAvmLEQEmqIlTTpqAJ7NE3EQCNKAEYbXmszEk4BVlRjf3pOdy8rIA</blockquote></mx-reply>I‚Äôll use your example in my reply on that issue, if that‚Äôs okay.","m.relates_to":{"m.in_reply_to":{"event_id":"$jG5YAQKetr5IyCxN-JuFrgT4vfa3JP70qmYzTx3v1KA"}},"msgtype":"m.text"},"ts":1630682213495,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VcHVdh7PGjuIIOqqGKJiMgUN7-XabJic6IM5-1TCxe8"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1630682219014,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4OOQHoQ5VKpmEUpkYR5sl0z_POD5pnoJFTzmPMciP4M"},
{"content":{"body":"Hm, maybe it‚Äôs a fundamental limitation of how TypeScript‚Äôs ‚Äútype inference works left to right‚Äù.","msgtype":"m.text"},"ts":1630682396013,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QTcqvv0SDmMW4hpQVhWFK4gF_1xKlztboQ_-hYkJV3c"},
{"content":{"body":"Perhaps in `map(user => user.name)(userOption)` it can‚Äôt unify the types of `user` and `userOption` because‚Ä¶I don‚Äôt know, maybe it‚Äôs somehow unidirectional, it expects a type right away in that arrow function, and it eagerly throws an error right there before moving onto `(userOption)`? I wonder how solvable this would be for the TypeScript team, but having to use `pipe` functions seems like a pretty brittle way to work around it.","format":"org.matrix.custom.html","formatted_body":"Perhaps in <code>map(user =&gt; user.name)(userOption)</code> it can‚Äôt unify the types of <code>user</code> and <code>userOption</code> because‚Ä¶I don‚Äôt know, maybe it‚Äôs somehow unidirectional, it expects a type right away in that arrow function, and it eagerly throws an error right there before moving onto <code>(userOption)</code>? I wonder how solvable this would be for the TypeScript team, but having to use <code>pipe</code> functions seems like a pretty brittle way to work around it.","msgtype":"m.text"},"ts":1630682519855,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eCV2VNSbmTAkG1w6kDDMRPrkEDEMZDqWhPGS4n9kg50"},
{"content":{"body":"Hmmm. https://github.com/microsoft/TypeScript/issues/15680","msgtype":"m.text"},"ts":1630683669506,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$svaE6tECj3YRdgwPFaCcipxxDA9qdL5aL7cakZuTr-k"}
]