[
{"content":{"body":"I wonder if \"just\" adding JSX to the syntax would cause any actual conflicts with the existing use of `<` for less-than comparisons? According to its [spec](https://facebook.github.io/jsx/), the JSXElement and JSXFragment are added as new PrimaryExpressions.","format":"org.matrix.custom.html","formatted_body":"I wonder if \"just\" adding JSX to the syntax would cause any actual conflicts with the existing use of <code>&lt;</code> for less-than comparisons? According to its <a href=\"https://facebook.github.io/jsx/\">spec</a>, the JSXElement and JSXFragment are added as new PrimaryExpressions.","m.mentions":{},"msgtype":"m.text"},"ts":1697883247035,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KfSRfAiqOoLtgBsbdA1Fy1Sw7C99jw3RVQbO-0INfT4"},
{"content":{"body":"I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn't seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don't understand the requirement for new syntax besides familiarity with JSX.","msgtype":"m.text"},"ts":1697902709663,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pi06W-irVRWEy7zcbLxKXWwDYOUNIowMaRTHfzeAyrI"}
]