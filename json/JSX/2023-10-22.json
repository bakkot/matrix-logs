[
{"content":{"body":"> <@mhofman:matrix.org> I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn't seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don't understand the requirement for new syntax besides familiarity with JSX.\n\nbasically, same reason as type annotation. they want to unfork the language, so let's do the same with JSX. why template literal does not work is documented in JSX spec https://facebook.github.io/jsx/#sec-why-not-template-literals","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!gYQqrHiXdnZUcuEkqn:matrix.org/$pi06W-irVRWEy7zcbLxKXWwDYOUNIowMaRTHfzeAyrI?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I would love to understand why JSX would need to be added as syntax, and why a built-in template tag litteral is not sufficient to support these use cases. I do realize some cases would require a little more verbose escaping, and that IDEs would need to get better at understanding DSLs in template tags, but that doesn&#39;t seem like a fundamental blocker to me. There have been a lot of discussions on this topic in ES Discourse, and I still don&#39;t understand the requirement for new syntax besides familiarity with JSX.</blockquote></mx-reply>basically, same reason as type annotation. they want to unfork the language, so let's do the same with JSX. why template literal does not work is documented in JSX spec https://facebook.github.io/jsx/#sec-why-not-template-literals","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pi06W-irVRWEy7zcbLxKXWwDYOUNIowMaRTHfzeAyrI"}},"msgtype":"m.text"},"ts":1697944472384,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$v2vhXW2KlDamNmE6dfEkfrx4rlfi1n9cExHGoZsVyUI"},
{"content":{"body":"Right that argument is the one about verbosity of escaping that I mention. I would say the example given in that spec is biased because JSX has somewhat magical treatment of tags. I am not convinced that tag names should be dynamically bound to the surrounding context, which means they may not need to be escaped in the first place. And the note about syntax highlighting does not refer to an intrinsic limitation of tagged templates, tools could parse tagged templates litterals.","msgtype":"m.text"},"ts":1697945696956,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$9qNXf3tNh5z4maCsc401_XvL58b6foZytpeJMX0UYCQ"},
{"content":{"body":"i think the only thing i would want to fix about jsx is `className`","format":"org.matrix.custom.html","formatted_body":"i think the only thing i would want to fix about jsx is <code>className</code>","m.mentions":{},"msgtype":"m.text"},"ts":1697954911891,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SgLX_I6vo3zNRSCvtncU3Ytq2Bk01R5S2ULrVGsZInI"},
{"content":{"body":"everything else is perfect","m.mentions":{},"msgtype":"m.text"},"ts":1697954923615,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4ftaDDtB1EGnRAuPTrvxlKAdemJgTvHqcd_ivyacQyQ"},
{"content":{"body":"That's React not JSX ðŸ˜‰","format":"org.matrix.custom.html","formatted_body":"That's React not JSX ðŸ˜‰","msgtype":"m.text"},"ts":1697959433943,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZGnKjXQeHOiWU5kVYSNo41di-oYPVERx1nGPG92wQfw"},
{"content":{"body":"https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names","format":"org.matrix.custom.html","formatted_body":"https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names","msgtype":"m.text"},"ts":1697959509061,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4TOi9F1Bge94ZfX888-IaBP3NzSHesUwFd2saoBjXVY"},
{"content":{"body":"> <@robpalme:matrix.org> Whilst I agree that the popularity is a very strong signal of the need for some solution, there's been significant interest in evolving JSX with a new version for a long time, so I suspect what we have today is not the final form.\n\nadding to this ^^\nhttps://github.com/facebook/jsx/issues/65","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!gYQqrHiXdnZUcuEkqn%3Amatrix.org/%24rHBaEA-3txeatVnSLQrKmKHotLVTnNUdcWFnYJAiw3A\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Whilst I agree that the popularity is a very strong signal of the need for some solution, there's been significant interest in evolving JSX with a new version for a long time, so I suspect what we have today is not the final form.</blockquote></mx-reply><p>adding to this ^^</p><p>https://github.com/facebook/jsx/issues/65</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$rHBaEA-3txeatVnSLQrKmKHotLVTnNUdcWFnYJAiw3A"}},"msgtype":"m.text"},"ts":1697960030767,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$h0zfrTWIvJ92Rxm4uigIHXncYxQsP94-jBuPlMXHGpQ"},
{"content":{"body":"> <@aclaymore:matrix.org> That's React not JSX ðŸ˜‰\n\nah perfect then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!gYQqrHiXdnZUcuEkqn:matrix.org/$ZGnKjXQeHOiWU5kVYSNo41di-oYPVERx1nGPG92wQfw?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>That's React not JSX ðŸ˜‰</blockquote></mx-reply>ah perfect then","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZGnKjXQeHOiWU5kVYSNo41di-oYPVERx1nGPG92wQfw"}},"msgtype":"m.text"},"ts":1697961357971,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$C3WN0oZrRdSRrjDiE-o94V_L21fH8FmIYSmvrXLOClU"},
{"content":{"body":"From a process point of view, I'd say that the persistence of JSX is a pretty good indicator of a \"problem or need\" existing in the desirability of an ergonomic syntax for representing XML-ish structures, as well as providing a \"general shape of a solution\". So for stage-1 I'd be surprised by strong opposition.\n\nFor stage-2, though, Mathieu Hofman's concerns are very real, and do need to be addressed. For myself, I'm most persuaded by considering the replacement cost of JSX's reliance on variables in the current scope, which allows for `<Box>` to contain a reference to a variable `Box`, rather than needing to be `<${Box}>` or to be processed together with some explicitly created context like `{ Box }`.\n\nI think that's a key feature which has allowed JSX to succeed, and which ought to be retained in any spec solution.","format":"org.matrix.custom.html","formatted_body":"From a process point of view, I'd say that the persistence of JSX is a pretty good indicator of a \"problem or need\" existing in the desirability of an ergonomic syntax for representing XML-ish structures, as well as providing a \"general shape of a solution\". So for stage-1 I'd be surprised by strong opposition.\n\nFor stage-2, though, <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>'s concerns are very real, and do need to be addressed. For myself, I'm most persuaded by considering the replacement cost of JSX's reliance on variables in the current scope, which allows for `<Box>` to contain a reference to a variable `Box`, rather than needing to be `<${Box}>` or to be processed together with some explicitly created context like `{ Box }`.\n\nI think that's a key feature which has allowed JSX to succeed, and which ought to be retained in any spec solution.","msgtype":"m.text"},"ts":1697964134777,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$v6u4uz7xcgF2054Wmu1UPUmN0MJdJFaI9zzlXmIv4ZY"},
{"content":{"body":"* From a process point of view, I'd say that the persistence of JSX is a pretty good indicator of a \"problem or need\" existing in the desirability of an ergonomic syntax for representing XML-ish structures, as well as providing a \"general shape of a solution\". So for stage-1 I'd be surprised by strong opposition.\n\nFor stage-2, though, \nMathieu Hofman's concerns are very real, and do need to be addressed. For myself, I'm most persuaded by considering the replacement cost of JSX's reliance on variables in the current scope, which allows for Â < Box >Â  to contain a reference to a variable Â BoxÂ , rather than needing to be Â <${Box}>Â  or to be processed together with some explicitly created context like Â { Box }Â .\n\nI think that's a key feature which has allowed JSX to succeed, and which ought to be retained in any spec solution.","m.new_content":{"body":"From a process point of view, I'd say that the persistence of JSX is a pretty good indicator of a \"problem or need\" existing in the desirability of an ergonomic syntax for representing XML-ish structures, as well as providing a \"general shape of a solution\". So for stage-1 I'd be surprised by strong opposition.\n\nFor stage-2, though, \nMathieu Hofman's concerns are very real, and do need to be addressed. For myself, I'm most persuaded by considering the replacement cost of JSX's reliance on variables in the current scope, which allows for Â < Box >Â  to contain a reference to a variable Â BoxÂ , rather than needing to be Â <${Box}>Â  or to be processed together with some explicitly created context like Â { Box }Â .\n\nI think that's a key feature which has allowed JSX to succeed, and which ought to be retained in any spec solution.","format":"org.matrix.custom.html","formatted_body":"From a process point of view, I'd say that the persistence of JSX is a pretty good indicator of a \"problem or need\" existing in the desirability of an ergonomic syntax for representing XML-ish structures, as well as providing a \"general shape of a solution\". So for stage-1 I'd be surprised by strong opposition.\n\nFor stage-2, though, <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>'s concerns are very real, and do need to be addressed. For myself, I'm most persuaded by considering the replacement cost of JSX's reliance on variables in the current scope, which allows for Â < Box >Â  to contain a reference to a variable Â BoxÂ , rather than needing to be Â <${Box}>Â  or to be processed together with some explicitly created context like Â { Box }Â .\n\nI think that's a key feature which has allowed JSX to succeed, and which ought to be retained in any spec solution.","msgtype":"m.text"},"m.relates_to":{"event_id":"$v6u4uz7xcgF2054Wmu1UPUmN0MJdJFaI9zzlXmIv4ZY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1697964398181,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$jzS7IgE1NBU7zohNMpVA7dJgUhsiTq29DY7QfWlmkBs"}
]