[
{"content":{"body":"problem I found with `is` expr. might be visually confusing","format":"org.matrix.custom.html","formatted_body":"problem I found with <code>is</code> expr. might be visually confusing","m.mentions":{},"msgtype":"m.text"},"ts":1700543915393,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$AH2Rqn820OtyuwxsjLYprAMBVZZAztCc4xflVFDUHgU"},
{"content":{"body":"```js\nif (expr is x[Symbol.toPrimitive]) {}\n```\n\nx[Symbol.toPrimitive] or (expr is x)[Symbol.toPrimitive]?","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">if (expr is x[Symbol.toPrimitive]) {}\n</code></pre>\n<p>x[Symbol.toPrimitive] or (expr is x)[Symbol.toPrimitive]?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700543969802,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JMkUTt9F4wUdS6k3XYBRo79ZWuzr_qdI9_cxNCWpvAo"},
{"content":{"body":"this is basically a problem for all patterns we have, even adding `( )` does not solve this problem","format":"org.matrix.custom.html","formatted_body":"this is basically a problem for all patterns we have, even adding <code>( )</code> does not solve this problem","m.mentions":{},"msgtype":"m.text"},"ts":1700544003593,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PMhLF6vR9XJW6Z6VI81qF3VomATF9RZm51KMXAI47To"},
{"content":{"body":" * this is basically a problem for all patterns we have, even adding `( )` around pattern does not solve this problem","format":"org.matrix.custom.html","formatted_body":" * this is basically a problem for all patterns we have, even adding <code>( )</code> around pattern does not solve this problem","m.mentions":{},"m.new_content":{"body":"this is basically a problem for all patterns we have, even adding `( )` around pattern does not solve this problem","format":"org.matrix.custom.html","formatted_body":"this is basically a problem for all patterns we have, even adding <code>( )</code> around pattern does not solve this problem","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PMhLF6vR9XJW6Z6VI81qF3VomATF9RZm51KMXAI47To","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700544025228,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$pvMUm-VGikNgWwbSzn_wvWSX221tW4BcFGqqeWweKh8"},
{"content":{"body":"the only way I see now is to add `( )` around the whole `expr is ...`","format":"org.matrix.custom.html","formatted_body":"the only way I see now is to add <code>( )</code> around the whole <code>expr is ...</code>","m.mentions":{},"msgtype":"m.text"},"ts":1700544054472,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tS5Lvi_OJfVu8RqgpTCOyrPsJZ5D-YedeZJt0LXfktk"},
{"content":{"body":"`x[foo]` is a pattern, the grammar should bind that way. If you want to force the other parsing, `(expr is x)[Symbol.toPrimitive]`.","format":"org.matrix.custom.html","formatted_body":"<code>x[foo]</code> is a pattern, the grammar should bind that way. If you want to force the other parsing, <code>(expr is x)[Symbol.toPrimitive]</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1700593154732,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WSAfE4FfyCY80692jOu_LJgkwk36IlaipI3vXrHV--g"},
{"content":{"body":"> <@tabatkins:matrix.org> `x[foo]` is a pattern, the grammar should bind that way. If you want to force the other parsing, `(expr is x)[Symbol.toPrimitive]`.\n\nnot yet IMO, then let me change another example ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$WSAfE4FfyCY80692jOu_LJgkwk36IlaipI3vXrHV--g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br /><code>x[foo]</code> is a pattern, the grammar should bind that way. If you want to force the other parsing, <code>(expr is x)[Symbol.toPrimitive]</code>.</blockquote></mx-reply>not yet IMO, then let me change another example","m.relates_to":{"m.in_reply_to":{"event_id":"$WSAfE4FfyCY80692jOu_LJgkwk36IlaipI3vXrHV--g"}},"msgtype":"m.text"},"ts":1700595756220,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$0IQKR3rmkO_wJI2YdZChNDhIVM4cmZ-DuR2hf5_mVVk"},
{"content":{"body":"x is a and {}.toString","msgtype":"m.text"},"ts":1700595771356,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dRVfYG8uiAnqpWMhxPc5PbrbomNcFgprK7mUZYqZX3Y"},
{"content":{"body":"{}.toString is not a valid pattern, so it means (x is a and {}).toString","msgtype":"m.text"},"ts":1700595801048,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9buR7Ef6HcmqYxvKUUt27dx2GRffyw3ImMORSIju5M0"},
{"content":{"body":"Ah right, yes that's reasonable.","m.mentions":{},"msgtype":"m.text"},"ts":1700598345827,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NZyfh_wR36CkQfJkMYbafUjTSZF3A4Y_IWKe7fDWK3I"},
{"content":{"body":"I mean, it's def confusing, but it's the behavior I'd expect to fall out.","m.mentions":{},"msgtype":"m.text"},"ts":1700598358610,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$U2ZpnBa8QPX5MFuXpY8PAjylGd-jWFssMl3DA0GboFg"},
{"content":{"body":"I wouldn't expect that to be valid at all","m.mentions":{},"msgtype":"m.text"},"ts":1700598402897,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5KmNaG6bJByAfvqz7USFNC5Sk7nTB2CwmS2XV-GIe94"},
{"content":{"body":"`is` is not a MemberExpression, so `x is a and {}.toString` would just be a syntax error","format":"org.matrix.custom.html","formatted_body":"<code>is</code> is not a MemberExpression, so <code>x is a and {}.toString</code> would just be a syntax error","m.mentions":{},"msgtype":"m.text"},"ts":1700598426410,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O9Q23kbpDXZ1vPZFPnrdE044R-m5mhe-YyTmB1FtgHA"},
{"content":{"body":"Just like `i++.toString()` is also a syntax error","format":"org.matrix.custom.html","formatted_body":"Just like <code>i++.toString()</code> is also a syntax error","m.mentions":{},"msgtype":"m.text"},"ts":1700598473402,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O6TphA1-exWz8mmlTUKhcwnNZjY4l7SOXbPy5qiRdiM"},
{"content":{"body":"> <@tabatkins:matrix.org> `x[foo]` is a pattern, the grammar should bind that way. If you want to force the other parsing, `(expr is x)[Symbol.toPrimitive]`.\n\nI'm not certain how useful `x[foo]` would be as a pattern, as its arguably *vanishingly* rare that anyone would publish an API that puts an extractor/matcher in a symbol-named property of an object, as that results in a very poor developer experience.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$WSAfE4FfyCY80692jOu_LJgkwk36IlaipI3vXrHV--g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>x[foo]</code> is a pattern, the grammar should bind that way. If you want to force the other parsing, <code>(expr is x)[Symbol.toPrimitive]</code>.</blockquote></mx-reply>I'm not certain how useful <code>x[foo]</code> would be as a pattern, as its arguably <em>vanishingly</em> rare that anyone would publish an API that puts an extractor/matcher in a symbol-named property of an object, as that results in a very poor developer experience.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WSAfE4FfyCY80692jOu_LJgkwk36IlaipI3vXrHV--g"}},"msgtype":"m.text"},"ts":1700598695539,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KQZ0hQAWFgNcJ3FILl1dfxJfbKvUmjYEVs6YbS7wSZ4"},
{"content":{"body":"`x is arr[1]`","format":"org.matrix.custom.html","formatted_body":"<code>x is arr[1]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1700598729802,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$t_AfdZJcgyYKEjLCpP1TahDIOa_FXN0dB5EGl_0R9ss"},
{"content":{"body":"`x is { [foo]: let y }` is definitely a valid pattern","format":"org.matrix.custom.html","formatted_body":"<code>x is { [foo]: let y }</code> is definitely a valid pattern","m.mentions":{},"msgtype":"m.text"},"ts":1700598738074,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7RLK3ZDhtEC9D8ehOg2Yr85fv-0-sD11Nm-XnM_T-KE"},
{"content":{"body":"> <@tabatkins:matrix.org> `x is arr[1]`\n\nThat looks more like someone might have been confused as to how array destructuring works.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$t_AfdZJcgyYKEjLCpP1TahDIOa_FXN0dB5EGl_0R9ss?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>x is arr[1]</code></blockquote></mx-reply>That looks more like someone might have been confused as to how array destructuring works.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$t_AfdZJcgyYKEjLCpP1TahDIOa_FXN0dB5EGl_0R9ss"}},"msgtype":"m.text"},"ts":1700598776341,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QsOVx5JndCL5haXXl-OswqXjI97qptcYmcMsexhHdL4"},
{"content":{"body":"There is no meaningful difference between that and `x is obj.foo`","format":"org.matrix.custom.html","formatted_body":"There is no meaningful difference between that and <code>x is obj.foo</code>","m.mentions":{},"msgtype":"m.text"},"ts":1700598797773,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zzqYVti7COWB6cToJgwzktkECMQCpdNt_DST7x2icUI"},
{"content":{"body":"`obj.foo` does not allow for arbitrary expression evaluation inside of a pattern, while `obj[foo]` does, so there is a meaningful difference.","format":"org.matrix.custom.html","formatted_body":"<code>obj.foo</code> does not allow for arbitrary expression evaluation inside of a pattern, while <code>obj[foo]</code> does, so there is a meaningful difference.","m.mentions":{},"msgtype":"m.text"},"ts":1700598968124,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KdMAaFRfQkkO-OCj19EyDcAVHW_YOnxnTvB-mEPc4Lk"},
{"content":{"body":"My point is that the 99%+ use case is going to be `x is obj.foo`, so I'm not sold on how valuable `x is obj[foo]` will be, especially if it adds unnecessary complication to the grammar or semantics.","format":"org.matrix.custom.html","formatted_body":"My point is that the 99%+ use case is going to be <code>x is obj.foo</code>, so I'm not sold on how valuable <code>x is obj[foo]</code> will be, especially if it adds unnecessary complication to the grammar or semantics.","m.mentions":{},"msgtype":"m.text"},"ts":1700599121678,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QSN-lb_4tCl4xma8jLhsbbEnh9kyQQwsEky0Nh3XFp0"},
{"content":{"body":" * My point is that the 99%+ use case is going to be either `x is foo` or `x is obj.foo`, so I'm not sold on how valuable `x is obj[foo]` will be, especially if it adds unnecessary complication to the grammar or semantics.","format":"org.matrix.custom.html","formatted_body":" * My point is that the 99%+ use case is going to be either <code>x is foo</code> or <code>x is obj.foo</code>, so I'm not sold on how valuable <code>x is obj[foo]</code> will be, especially if it adds unnecessary complication to the grammar or semantics.","m.mentions":{},"m.new_content":{"body":"My point is that the 99%+ use case is going to be either `x is foo` or `x is obj.foo`, so I'm not sold on how valuable `x is obj[foo]` will be, especially if it adds unnecessary complication to the grammar or semantics.","format":"org.matrix.custom.html","formatted_body":"My point is that the 99%+ use case is going to be either <code>x is foo</code> or <code>x is obj.foo</code>, so I'm not sold on how valuable <code>x is obj[foo]</code> will be, especially if it adds unnecessary complication to the grammar or semantics.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QSN-lb_4tCl4xma8jLhsbbEnh9kyQQwsEky0Nh3XFp0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700599448629,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IUf9Ck3kPcbBhUacU8TFHK949Y-wSD-JIN_K_Vqh-xw"},
{"content":{"body":"`x is obj[foo]` is critically necessary because of symbols","format":"org.matrix.custom.html","formatted_body":"<code>x is obj[foo]</code> is critically necessary because of symbols","m.mentions":{},"msgtype":"m.text"},"ts":1700603352503,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EeZ0R7yJrxALJJvXYqQBqYi4ep58Q399oEnFIljneyM"},
{"content":{"body":"it was barely tolerable for decorators to not have them, and i don't think the spec or grammar complexity is relevant","m.mentions":{},"msgtype":"m.text"},"ts":1700603376740,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PQcIHwb24j7BI-8GFtZC4PjBMPdrJWJBIXaIMWGRqi4"},
{"content":{"body":" * it was barely tolerable for decorators to not have them, and i don't think the spec or grammar complexity is relevant (in terms of priority of consitutencies)","m.mentions":{},"m.new_content":{"body":"it was barely tolerable for decorators to not have them, and i don't think the spec or grammar complexity is relevant (in terms of priority of consitutencies)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PQcIHwb24j7BI-8GFtZC4PjBMPdrJWJBIXaIMWGRqi4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700603385960,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$u4hsUNNofPAb8g7PJ7WjfOJhhWa6drL1fIeysTwQ4OU"},
{"content":{"body":" * it was barely tolerable for decorators to not have them, and i don't think the spec or grammar complexity is relevant (in terms of priority of constiuencies)","m.mentions":{},"m.new_content":{"body":"it was barely tolerable for decorators to not have them, and i don't think the spec or grammar complexity is relevant (in terms of priority of constiuencies)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PQcIHwb24j7BI-8GFtZC4PjBMPdrJWJBIXaIMWGRqi4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700603391733,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ffQwU7g5ExnPh4lhJBdHdYcKQPBuEckG5DGolxhxgh4"},
{"content":{"body":"> <@ljharb:matrix.org> `x is obj[foo]` is critically necessary because of symbols\n\nI would argue that putting a custom extractor you want to match *against* behind a symbol is a terrible API design.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$EeZ0R7yJrxALJJvXYqQBqYi4ep58Q399oEnFIljneyM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>x is obj[foo]</code> is critically necessary because of symbols</blockquote></mx-reply>I would argue that putting a custom extractor you want to match <em>against</em> behind a symbol is a terrible API design.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EeZ0R7yJrxALJJvXYqQBqYi4ep58Q399oEnFIljneyM"}},"msgtype":"m.text"},"ts":1700603429693,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J3x_oZReTVBnpED87x2H0xVyHzXDOVVu1x-LMdqYK3U"},
{"content":{"body":"there's a huge \"expected usage\" difference where it's unlikely people will decorate with a symbol or computed property of an object, but it's very likely they'll want to match against one","m.mentions":{},"msgtype":"m.text"},"ts":1700603431657,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Xjna1HOgLXMKIpq5MWCTKUUZk-DNhILbPf_YiBhyyIg"},
{"content":{"body":"it doesn't have to be a custom extractor, `is` isn't just for those.","format":"org.matrix.custom.html","formatted_body":"it doesn't have to be a custom extractor, <code>is</code> isn't just for those.","m.mentions":{},"msgtype":"m.text"},"ts":1700603442438,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$534YvbzYTYVhI7cazRov9WEIw201tGS9tLxi3MTYSsU"},
{"content":{"body":"It would still be a poor design choice, to store the think you want to match against behind a symbol, whatever it is. I'm also not saying we *shouldn't* have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","format":"org.matrix.custom.html","formatted_body":"It would still be a poor design choice, to store the think you want to match against behind a symbol, whatever it is. I'm also not saying we <em>shouldn't</em> have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","m.mentions":{},"msgtype":"m.text"},"ts":1700603627619,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lROzRpuD5z5PSnL892vDsWchZyy2-aUqjba5K4qR5gg"},
{"content":{"body":" * It would still be a poor design choice, to store the thing you want to match against behind a symbol, whatever it is. I'm also not saying we _shouldn't_ have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","format":"org.matrix.custom.html","formatted_body":" * It would still be a poor design choice, to store the thing you want to match against behind a symbol, whatever it is. I'm also not saying we <em>shouldn't</em> have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","m.mentions":{},"m.new_content":{"body":"It would still be a poor design choice, to store the thing you want to match against behind a symbol, whatever it is. I'm also not saying we _shouldn't_ have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","format":"org.matrix.custom.html","formatted_body":"It would still be a poor design choice, to store the thing you want to match against behind a symbol, whatever it is. I'm also not saying we <em>shouldn't</em> have it, but that if it came down to a choice over whether to have that capability vs almost any other piece of the proposed pattern matching syntax, I would cut indexed access in a pattern first.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lROzRpuD5z5PSnL892vDsWchZyy2-aUqjba5K4qR5gg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700603634626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LNUbNSdEwgdzRR9K9VHgoXGsdN8FRmO7ik6HaKUZ7Ag"}
]