[
{"content":{"body":"During the last plenary session, Shu expressed some concern about the perf cost of iterator destructuring for extractors. I know this is a known concern we've discussed before, which is why we've potentially considered using index/length instead.\ndanielrosenwasser pointed out to me that in https://peps.python.org/pep-0622/#custom-matching-protocol, Python decided against full-blown custom matchers in favor of a far more limited approach using `__match_args__`, where something like `case Point(1, 2)` only tests whether the subject is an instance of `Point`, and then reads `Point.__match_args__` which returns an array containing ordered keys like `[\"x\", \"y\"]`, which in turn is used to extract the named properties of the subject to match for those positions.\nI admit, I'm not a fan of adopting that approach as it severely limits the value proposition for extractors, but there is something to be said for the possible performance implications. I'm curious what everyone else's thoughts are on this, though.","format":"org.matrix.custom.html","formatted_body":"During the last plenary session, Shu expressed some concern about the perf cost of iterator destructuring for extractors. I know this is a known concern we've discussed before, which is why we've potentially considered using index/length instead.<br><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> pointed out to me that in https://peps.python.org/pep-0622/#custom-matching-protocol, Python decided against full-blown custom matchers in favor of a far more limited approach using <code>__match_args__</code>, where something like <code>case Point(1, 2)</code> only tests whether the subject is an instance of <code>Point</code>, and then reads <code>Point.__match_args__</code> which returns an array containing ordered keys like <code>[\"x\", \"y\"]</code>, which in turn is used to extract the named properties of the subject to match for those positions.<br>I admit, I'm not a fan of adopting that approach as it severely limits the value proposition for extractors, but there is something to be said for the possible performance implications. I'm curious what everyone else's thoughts are on this, though.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1708018664890,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JK8-DsVz6oj0ezDMj2yw09ohGqeTu2ertuuSoEeqBSs"},
{"content":{"body":"The other approach discussed was C#'s `Deconstruct`, which allows for some custom evaluation logic but leverages C#'s `out` parameters for ordered destructuring:\n```cs\nvoid Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n```\nI have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).","format":"org.matrix.custom.html","formatted_body":"<p>The other approach discussed was C#'s <code>Deconstruct</code>, which allows for some custom evaluation logic but leverages C#'s <code>out</code> parameters for ordered destructuring:</p>\n<pre><code class=\"language-cs\">void Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n</code></pre>\n<p>I have been toying with a <a href=\"https://github.com/rbuckton/proposal-ref\"><code>ref</code> proposal</a> for a few years that is similar to <code>out</code> (C# also has <code>ref</code>, and the only real difference between <code>ref</code> and <code>out</code> in C# is that an <code>out</code> must be assigned to before a normal return from the function body).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1708019462157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$md5gu8vULAZBCtZJS8ZaL2hfv6hGJLR0kIl5LRYTG68"},
{"content":{"body":" * The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom evaluation logic but leverages C#'s `out` parameters for ordered destructuring:\n\n```cs\nvoid Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n```\n\nI have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).","format":"org.matrix.custom.html","formatted_body":" * <p>The other approach discussed briefly in plenary was C#'s <code>Deconstruct</code>, which allows for some custom evaluation logic but leverages C#'s <code>out</code> parameters for ordered destructuring:</p>\n<pre><code class=\"language-cs\">void Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n</code></pre>\n<p>I have been toying with a <a href=\"https://github.com/rbuckton/proposal-ref\"><code>ref</code> proposal</a> for a few years that is similar to <code>out</code> (C# also has <code>ref</code>, and the only real difference between <code>ref</code> and <code>out</code> in C# is that an <code>out</code> must be assigned to before a normal return from the function body).</p>\n","m.mentions":{},"m.new_content":{"body":"The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom evaluation logic but leverages C#'s `out` parameters for ordered destructuring:\n\n```cs\nvoid Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n```\n\nI have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).","format":"org.matrix.custom.html","formatted_body":"<p>The other approach discussed briefly in plenary was C#'s <code>Deconstruct</code>, which allows for some custom evaluation logic but leverages C#'s <code>out</code> parameters for ordered destructuring:</p>\n<pre><code class=\"language-cs\">void Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n</code></pre>\n<p>I have been toying with a <a href=\"https://github.com/rbuckton/proposal-ref\"><code>ref</code> proposal</a> for a few years that is similar to <code>out</code> (C# also has <code>ref</code>, and the only real difference between <code>ref</code> and <code>out</code> in C# is that an <code>out</code> must be assigned to before a normal return from the function body).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$md5gu8vULAZBCtZJS8ZaL2hfv6hGJLR0kIl5LRYTG68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1708019479039,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CyhzW_b1TaepDDZJwoE_ehJjux45zew4s2kWpeV8d0w"},
{"content":{"body":" * The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom logic but leverages C#'s `out` parameters for ordered destructuring:\n\n```cs\nvoid Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n```\n\nI have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).","format":"org.matrix.custom.html","formatted_body":" * <p>The other approach discussed briefly in plenary was C#'s <code>Deconstruct</code>, which allows for some custom logic but leverages C#'s <code>out</code> parameters for ordered destructuring:</p>\n<pre><code class=\"language-cs\">void Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n</code></pre>\n<p>I have been toying with a <a href=\"https://github.com/rbuckton/proposal-ref\"><code>ref</code> proposal</a> for a few years that is similar to <code>out</code> (C# also has <code>ref</code>, and the only real difference between <code>ref</code> and <code>out</code> in C# is that an <code>out</code> must be assigned to before a normal return from the function body).</p>\n","m.mentions":{},"m.new_content":{"body":"The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom logic but leverages C#'s `out` parameters for ordered destructuring:\n\n```cs\nvoid Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n```\n\nI have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).","format":"org.matrix.custom.html","formatted_body":"<p>The other approach discussed briefly in plenary was C#'s <code>Deconstruct</code>, which allows for some custom logic but leverages C#'s <code>out</code> parameters for ordered destructuring:</p>\n<pre><code class=\"language-cs\">void Deconstruct(out int x, out int y) {\n  x = this.x;\n  y = this.y;\n}\n</code></pre>\n<p>I have been toying with a <a href=\"https://github.com/rbuckton/proposal-ref\"><code>ref</code> proposal</a> for a few years that is similar to <code>out</code> (C# also has <code>ref</code>, and the only real difference between <code>ref</code> and <code>out</code> in C# is that an <code>out</code> must be assigned to before a normal return from the function body).</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$md5gu8vULAZBCtZJS8ZaL2hfv6hGJLR0kIl5LRYTG68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1708019507208,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DaBUdQCRA45dtguCtsKtpxPQJVnc0vUpCfmLBC5QIQA"},
{"content":{"body":"I don't like the python approach ","msgtype":"m.text"},"ts":1708019660521,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qHUyCo53tgpcLPPUhyMec3UqGSYJg1r9qYPZHOmaLwg"},
{"content":{"body":"C# approach requires a static type system so don't work for JavaScript","msgtype":"m.text"},"ts":1708019705803,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dX54j1e2MnSoc1KYBhwoWpU6rxTynp7q04fLQ6rjdhE"},
{"content":{"body":"I don't think using iterator is a problem, because react is using it a lot, the engine has to optimize it anyway.","msgtype":"m.text"},"ts":1708019762485,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tfImZivBupwzWDW1VYz4myDmGpy8JgFILTzSkEpRYVY"},
{"content":{"body":"> <@jackworks:matrix.org> I don't think using iterator is a problem, because react is using it a lot, the engine has to optimize it anyway.\n\nReact is not fast, and the engine does not currently optimize it away. In a very limited benchmark, we found `const { 0: foo, 1: setFoo } = useState();` is about 20% faster than `const [foo, setFoo] = useState()` in V8.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$tfImZivBupwzWDW1VYz4myDmGpy8JgFILTzSkEpRYVY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I don&#39;t think using iterator is a problem, because react is using it a lot, the engine has to optimize it anyway.</blockquote></mx-reply>React is not fast, and the engine does not currently optimize it away. In a very limited benchmark, we found <code>const { 0: foo, 1: setFoo } = useState();</code> is about 20% faster than <code>const [foo, setFoo] = useState()</code> in V8.","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tfImZivBupwzWDW1VYz4myDmGpy8JgFILTzSkEpRYVY"}},"msgtype":"m.text"},"ts":1708019926001,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ksduojQinvTrZOvSvm7IjWrpUJwrzOkyVNxgXQzSR6s"},
{"content":{"body":"yes, I understand. they should do that optimization. not because pattern matching, but react.","msgtype":"m.text"},"ts":1708020016008,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kAqNqSODMGr6_EIYlcLtCjweDTN8YAm2NAANKq4n6Ng"},
{"content":{"body":"but btw if we use index + length, I'm ok for that","msgtype":"m.text"},"ts":1708020280291,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$yIQWLWBo-oO7fXdkZ_mF0HxyY2VCndc3IvAOnUdof8w"},
{"content":{"body":"It's just a little bit classic, not fit es6 style, but the functionality is good.","msgtype":"m.text"},"ts":1708020316375,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FH4SSEdTgxinx7EG7XIUiJJwDhQaq7a8O_AElCwhpx0"},
{"content":{"body":"ideally, V8 could find ways to improve array->array destructuring, but I don't know how likely that is.","m.mentions":{},"msgtype":"m.text"},"ts":1708020368875,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sZ598Z9lDJU1TzBIsYiPghj7WnhMXKeM3M-pn5mNn0Q"},
{"content":{"body":"> <@rbuckton:matrix.org> ideally, V8 could find ways to improve array->array destructuring, but I don't know how likely that is.\n\nif Array@iterator, ArrayIterator.next and some other stuff is unmodified and the subject is a real array imo ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$sZ598Z9lDJU1TzBIsYiPghj7WnhMXKeM3M-pn5mNn0Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />ideally, V8 could find ways to improve array-&gt;array destructuring, but I don't know how likely that is.</blockquote></mx-reply>if Array@iterator, ArrayIterator.next and some other stuff is unmodified and the subject is a real array imo","m.relates_to":{"m.in_reply_to":{"event_id":"$sZ598Z9lDJU1TzBIsYiPghj7WnhMXKeM3M-pn5mNn0Q"}},"msgtype":"m.text"},"ts":1708020499676,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ws9c-5EmtqQlbi2-Hv0vy9ga_PYhHPurSBIwJWBWqXQ"},
{"content":{"body":"How often is pattern matching going to be in a hot path anyways, and when will it make use of the iterator protocol *more* likely?","format":"org.matrix.custom.html","formatted_body":"How often is pattern matching going to be in a hot path anyways, and when will it make use of the iterator protocol <em>more</em> likely?","msgtype":"m.text"},"ts":1708023027660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p7Kpy7V6vZva79hKmh6iGJQ0JuT_WXBBD3EWs-mv4h4"},
{"content":{"body":"> <@jackworks:matrix.org> I don't think using iterator is a problem, because react is using it a lot, the engine has to optimize it anyway.\n\nJust going to chime in here and say: No. We will work on react like patterns, but I would very much not like to see this form of argumentation used. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$tfImZivBupwzWDW1VYz4myDmGpy8JgFILTzSkEpRYVY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I don&#39;t think using iterator is a problem, because react is using it a lot, the engine has to optimize it anyway.</blockquote></mx-reply>Just going to chime in here and say: No. We will work on react like patterns, but I would very much not like to see this form of argumentation used.","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tfImZivBupwzWDW1VYz4myDmGpy8JgFILTzSkEpRYVY"}},"msgtype":"m.text"},"ts":1708023268913,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$hL0FVCMwda5CpeZLHvSF1_FUO3cIa_z-GuRzwet-v88"}
]