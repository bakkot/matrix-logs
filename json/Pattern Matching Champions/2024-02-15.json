[
{"content":{"body":"During the last plenary session, Shu expressed some concern about the perf cost of iterator destructuring for extractors. I know this is a known concern we've discussed before, which is why we've potentially considered using index/length instead.\ndanielrosenwasser pointed out to me that in https://peps.python.org/pep-0622/#custom-matching-protocol, Python decided against full-blown custom matchers in favor of a far more limited approach using `__match_args__`, where something like `case Point(1, 2)` only tests whether the subject is an instance of `Point`, and then reads `Point.__match_args__` which returns an array containing ordered keys like `[\"x\", \"y\"]`, which in turn is used to extract the named properties of the subject to match for those positions.\nI admit, I'm not a fan of adopting that approach as it severely limits the value proposition for extractors, but there is something to be said for the possible performance implications. I'm curious what everyone else's thoughts are on this, though.","format":"org.matrix.custom.html","formatted_body":"During the last plenary session, Shu expressed some concern about the perf cost of iterator destructuring for extractors. I know this is a known concern we've discussed before, which is why we've potentially considered using index/length instead.<br><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> pointed out to me that in https://peps.python.org/pep-0622/#custom-matching-protocol, Python decided against full-blown custom matchers in favor of a far more limited approach using <code>__match_args__</code>, where something like <code>case Point(1, 2)</code> only tests whether the subject is an instance of <code>Point</code>, and then reads <code>Point.__match_args__</code> which returns an array containing ordered keys like <code>[\"x\", \"y\"]</code>, which in turn is used to extract the named properties of the subject to match for those positions.<br>I admit, I'm not a fan of adopting that approach as it severely limits the value proposition for extractors, but there is something to be said for the possible performance implications. I'm curious what everyone else's thoughts are on this, though.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1708018664890,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JK8-DsVz6oj0ezDMj2yw09ohGqeTu2ertuuSoEeqBSs"}
]