[
{"content":{"body":"the bit you just quoted _isn't_ hyperbole","format":"org.matrix.custom.html","formatted_body":"the bit you just quoted <em>isn't</em> hyperbole","msgtype":"m.text"},"ts":1695518637036,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$jJ_TC23t4S-pG0fEE46dfOnT8LdFGUTGrRZE05scGsk"},
{"content":{"body":"it's literally a problem statement","msgtype":"m.text"},"ts":1695518645294,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UR4iPkGiZrcIq8QonKaqh7veoU4VMpaprNd4nxRpSVs"},
{"content":{"body":"my tone may have been an upset/shocked one, but I was genuinely waiting to hear a single concrete benefit","msgtype":"m.text"},"ts":1695518713553,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o5lsbpFju2aqenxY_1O7tZ7kN83M0GvZOe5FIaTqEQw"},
{"content":{"body":"I brought this discussion outside of the PR because I expected a conversation","msgtype":"m.text"},"ts":1695519114612,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xAT9KUhEr1CEsfbmRJqSlYj8V_SAbq26sxnyP712hHk"},
{"content":{"body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it","msgtype":"m.text"},"ts":1695519201533,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xcLJFxMnD8zmqRuopyRaGIvEsf3bX6t9MbTBRcDJhrQ"},
{"content":{"body":"it would need to be extremely clear why JS requires `if` patterns if that is an unusual concept for pattern matching constructs crosslinguistically","format":"org.matrix.custom.html","formatted_body":"it would need to be extremely clear why JS requires <code>if</code> patterns if that is an unusual concept for pattern matching constructs crosslinguistically","msgtype":"m.text"},"ts":1695519354641,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$EBvXUk13gO84S-eO15f1LENlAd1rvU6sCkHm8ymCl08"},
{"content":{"body":"and in attempting to figure out the rationale myself, I identified an even larger concern than the one I initially had, but I did _not_ manage to identify why greater ability to short-circuit should constitute an undeniable benefit","format":"org.matrix.custom.html","formatted_body":"and in attempting to figure out the rationale myself, I identified an even larger concern than the one I initially had, but I did <em>not</em> manage to identify why greater ability to short-circuit should constitute an undeniable benefit","msgtype":"m.text"},"ts":1695519811767,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BXnOYeazDWErmM0t2pizt33UljxzvjUS21yQ_7SYDZg"},
{"content":{"body":"I think you're reacting to \"objectively nasty\", and that's super unfortunate because I said that as a \"laugh together\" phrase","msgtype":"m.text"},"ts":1695519862489,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$rLWa59bzJ1WThQxr75O6ByBCg5m_EpW_xBGYWksPPG8"},
{"content":{"body":" * if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it\n(_I mean, I think it's the most important question about any proposal, but yeah._)","format":"org.matrix.custom.html","formatted_body":" * if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it<br>(<em>I mean, I think it's the most important question about any proposal, but yeah.</em>)","m.new_content":{"body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it\n(_I mean, I think it's the most important question about any proposal, but yeah._)","format":"org.matrix.custom.html","formatted_body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it<br>(<em>I mean, I think it's the most important question about any proposal, but yeah.</em>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$xcLJFxMnD8zmqRuopyRaGIvEsf3bX6t9MbTBRcDJhrQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695520149838,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$kcOGy5SmkNPSebyVvgSXe4xa430SuhffuD2aX71q-go"},
{"content":{"body":"IIRC, one of the reasons we considered `if` patterns was to provide a way to continue to have some ability to evaluate expressions in-situ within the pattern without needing the full `${}` syntax, which was also unique to this proposal in comparison to other pattern matching systems. `if` patterns were at least *close* to existing syntax, by expanding `when ... if ...` to be more flexible. I'm not sure if there were other reasons.","format":"org.matrix.custom.html","formatted_body":"IIRC, one of the reasons we considered <code>if</code> patterns was to provide a way to continue to have some ability to evaluate expressions in-situ within the pattern without needing the full <code>${}</code> syntax, which was also unique to this proposal in comparison to other pattern matching systems. <code>if</code> patterns were at least <em>close</em> to existing syntax, by expanding <code>when ... if ...</code> to be more flexible. I'm not sure if there were other reasons.","msgtype":"m.text"},"ts":1695521365467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jrKySzg8WVF-z6OzSCirrvnSt9sCLUU2dsCBgeUxsIU"},
{"content":{"body":"I personally found `${}` to be more problematic because it allowed completely arbitrary expressions, which could make patterns completely unreadable, and because it would prevent future use of `identifier{` due to `$` being a legal identifier.","format":"org.matrix.custom.html","formatted_body":"I personally found <code>${}</code> to be more problematic because it allowed completely arbitrary expressions, which could make patterns completely unreadable, and because it would prevent future use of <code>identifier{</code> due to <code>$</code> being a legal identifier.","msgtype":"m.text"},"ts":1695521579450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zo5SE-mvdG0C8VEDIEpmaBFQSG9cZ0gJdH8kj4xS5kk"},
{"content":{"body":"`if` patterns, at least, provide some additional benefit. For example:\n\n```\nmatch ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n```\nWith `if` as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the `if` clause fails, even though the second branch of the disjunction would have succeeded. \nWith `if` as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.\n","format":"org.matrix.custom.html","formatted_body":"<p><code>if</code> patterns, at least, provide some additional benefit. For example:</p>\n<pre><code>match ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>With <code>if</code> as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the <code>if</code> clause fails, even though the second branch of the disjunction would have succeeded.<br>With <code>if</code> as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.</p>\n","msgtype":"m.text"},"ts":1695522314530,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA"},
{"content":{"body":"Now consider this modified example:\n\n```\nmatch ([\"1\", \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n```\n\nHere `x` is not defined in the 2nd branch of (a), so the `if` clause would result in a TDZ error. There would be no way around this aside from introducing a dummy `let x` somewhere just to ensure its valid on both sides.","format":"org.matrix.custom.html","formatted_body":"<p>Now consider this modified example:</p>\n<pre><code>match ([\"1\", \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>Here <code>x</code> is not defined in the 2nd branch of (a), so the <code>if</code> clause would result in a TDZ error. There would be no way around this aside from introducing a dummy <code>let x</code> somewhere just to ensure its valid on both sides.</p>\n","msgtype":"m.text"},"ts":1695522399366,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T33oQzwEBC4UhR44-hyyUx0DWEvVS-yjctMIo-RZERs"},
{"content":{"body":"Having two separate `when` clauses isn't necessarily an option if you don't want to repeat the expression in `...`. I can't recall whether `when` branches have fall-through for empty bodies like `case` does, but I don't imagine they do.","format":"org.matrix.custom.html","formatted_body":"Having two separate <code>when</code> clauses isn't necessarily an option if you don't want to repeat the expression in <code>...</code>. I can't recall whether <code>when</code> branches have fall-through for empty bodies like <code>case</code> does, but I don't imagine they do.","msgtype":"m.text"},"ts":1695522504870,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t8uy-vz9hqj6PET3Myx0eyoS12TwZ5cZcvZsC_HbK5A"},
{"content":{"body":"Also, `if` patterns don't preclude us from having a standalone `if` clause so that you don't need to do `when if (x): ` on its own and could just use `if(x):`","format":"org.matrix.custom.html","formatted_body":"Also, <code>if</code> patterns don't preclude us from having a standalone <code>if</code> clause so that you don't need to do <code>when if (x): </code> on its own and could just use <code>if(x):</code>","msgtype":"m.text"},"ts":1695522572156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9mYwh-8WAeGMg-V9Grm2nPlt_TJfUmyPtLGpXBaVyc4"},
{"content":{"body":"One could also argue that we don't need `when` at all. It isn't strictly necessary as a syntactic disambiguation. We could have made `match` syntax look like this instead:\n\n```\nmatch (x) {\n  String: ...;\n  [Number]: ...;\n  { y: let y } and if (y.foo()): ...;\n  if (x > 0): ...;\n  default: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>One could also argue that we don't need <code>when</code> at all. It isn't strictly necessary as a syntactic disambiguation. We could have made <code>match</code> syntax look like this instead:</p>\n<pre><code>match (x) {\n  String: ...;\n  [Number]: ...;\n  { y: let y } and if (y.foo()): ...;\n  if (x &gt; 0): ...;\n  default: ...;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695523458033,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$92qzDlTNMwu82ygkF1-yONvFhT8CDD-OBO4eUjqF9E0"},
{"content":{"body":"As a contrast, C# doesn't use a clause keyword like `when`:\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\nRust doesn't either:\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>As a contrast, C# doesn't use a clause keyword like <code>when</code>:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695523831816,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k"},
{"content":{"body":" * As a contrast, C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nRust doesn't either:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>As a contrast, C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","m.new_content":{"body":"As a contrast, C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nRust doesn't either:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>As a contrast, C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695523916655,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UiVbj22S9wU2tGlKyPpqqSuqKLqMkhEm9s2-CORrisM"},
{"content":{"body":" * C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nNeither does Rust:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Neither does Rust:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","m.new_content":{"body":"C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nNeither does Rust:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Neither does Rust:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695523939163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AWI1KVOGpFG8NwBd1XLysf-Bn7yxReor8A2LGJ9wIYU"},
{"content":{"body":"In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the `let`/`const`/`var` declaration patterns which introduce bindings. If we had one, we wouldn't need `default` at all. I'd suggested `void` as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to `void` to be meaningful. Without the `when` clause head, and using `void` for an irrefutable match, it could be patterns all the way down:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: let y and if (y > x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y < x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the <code>let</code>/<code>const</code>/<code>var</code> declaration patterns which introduce bindings. If we had one, we wouldn't need <code>default</code> at all. I'd suggested <code>void</code> as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to <code>void</code> to be meaningful. Without the <code>when</code> clause head, and using <code>void</code> for an irrefutable match, it could be patterns all the way down:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y and if (y &gt; x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y &lt; x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695524450603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM"},
{"content":{"body":"if pattern to me is an escape hatch w","msgtype":"m.text"},"ts":1695524506947,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$im5cnbLQhecPexI2-LWeIceJvJNEtBrTSfudMi0QPpA"},
{"content":{"body":"* if pattern to me is an escape hatch when the pattern is not expressive enough ","m.new_content":{"body":"if pattern to me is an escape hatch when the pattern is not expressive enough ","msgtype":"m.text"},"m.relates_to":{"event_id":"$im5cnbLQhecPexI2-LWeIceJvJNEtBrTSfudMi0QPpA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524524639,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$hZyfjeC29Yc0LbP0P-knLxPhAwmuwrPlXoE0bnweczQ"},
{"content":{"body":"for example today you cannot match `> 0`, but you can make it via if pattern","msgtype":"m.text"},"ts":1695524568414,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tXxJa70QCMfhE1IMJ8JmnfONCrniThS71iBafaL0E_c"},
{"content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz }: ...,\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695524714728,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U"},
{"content":{"body":" * I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n</code></pre>\n","m.new_content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524754142,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XyQQtK7xId0xeucj6vfzRkHyafQ9VEcfERMGNaQ4BJI"},
{"content":{"body":" * I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n</code></pre>\n","m.new_content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524786137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nssuNm4YIa6OxRwGK_lyq34e51J7SKWK3VizaRNDnbs"},
{"content":{"body":"Hmm. I wonder if `*` would make for a good \"irrefutable pattern\" token? \n\n```\nmatch (obj) {\n  { x: Number, y: * }: ...;\n  *: ...;\n}\n```\n\nMy only concern would be using up a token that could have other more useful potential meanings in the future.","format":"org.matrix.custom.html","formatted_body":"<p>Hmm. I wonder if <code>*</code> would make for a good \"irrefutable pattern\" token?</p>\n<pre><code>match (obj) {\n  { x: Number, y: * }: ...;\n  *: ...;\n}\n</code></pre>\n<p>My only concern would be using up a token that could have other more useful potential meanings in the future.</p>\n","msgtype":"m.text"},"ts":1695524927675,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ul7Q3NHSUXGcCXvj3O3sLNb2FlyrWHqevt9pkg4Uu5g"},
{"content":{"body":"(It's a shame we can't use `_` as a discard)","format":"org.matrix.custom.html","formatted_body":"(It's a shame we can't use <code>_</code> as a discard)","msgtype":"m.text"},"ts":1695524955276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Cq74Wq3n9sEx1xXNHhz7MnuWF_iHzznWGWTGlXBZow"},
{"content":{"body":"> <@rbuckton:matrix.org> In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the `let`/`const`/`var` declaration patterns which introduce bindings. If we had one, we wouldn't need `default` at all. I'd suggested `void` as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to `void` to be meaningful. Without the `when` clause head, and using `void` for an irrefutable match, it could be patterns all the way down:\n> \n> ```\n> const transform = point => match (point) {\n>   { x: let x, y: let y and if (y > x) } : new Point(x + y, y);\n>   { x: let x, y: let y and if (y < x) } : new Point(x - y, y);\n>   { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n>   void                                  : new Point(0, 0)\n> }\n> ```\n\nNote that the example here is adapted from this example in the C# documentation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression#case-guards","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the <code>let</code>/<code>const</code>/<code>var</code> declaration patterns which introduce bindings. If we had one, we wouldn't need <code>default</code> at all. I'd suggested <code>void</code> as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to <code>void</code> to be meaningful. Without the <code>when</code> clause head, and using <code>void</code> for an irrefutable match, it could be patterns all the way down:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y and if (y &gt; x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y &lt; x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n</code></pre>\n</blockquote></mx-reply>Note that the example here is adapted from this example in the C# documentation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression#case-guards","m.relates_to":{"m.in_reply_to":{"event_id":"$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM"}},"msgtype":"m.text"},"ts":1695525047825,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LMuEj-mb8hfRkl60wvUEP_UYB8Bh5ucO9D7psy28fgc"},
{"content":{"body":"> <@rbuckton:matrix.org> `if` patterns, at least, provide some additional benefit. For example:\n> \n> ```\n> match ([1, \"a\"]) {\n>   when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n>   when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n> }\n> ```\n> With `if` as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the `if` clause fails, even though the second branch of the disjunction would have succeeded. \n> With `if` as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.\n\nthanks, (b) is definitely a nice example","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p><code>if</code> patterns, at least, provide some additional benefit. For example:</p>\n<pre><code>match ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>With <code>if</code> as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the <code>if</code> clause fails, even though the second branch of the disjunction would have succeeded.<br />With <code>if</code> as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.</p>\n</blockquote></mx-reply>thanks, (b) is definitely a nice example","m.relates_to":{"m.in_reply_to":{"event_id":"$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA"}},"msgtype":"m.text"},"ts":1695529905462,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$nil0UVjY6gkOElabMt4bDYIVgCHZL9axbOT3IMdDxfs"},
{"content":{"body":"(I too am forever sad that `_` isn't usable)","format":"org.matrix.custom.html","formatted_body":"(I too am forever sad that <code>_</code> isn't usable)","msgtype":"m.text"},"ts":1695530039675,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mNQ7sejWjgheDRfM36uiZBq3WveqUh0deH3aED46nUY"},
{"content":{"body":"have we spent time discussing the omission of `when` (or another keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":"have we spent time discussing the omission of <code>when</code> (or another keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"ts":1695530096161,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI"},
{"content":{"body":" * have we spent time discussing the omission of `when` (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":" * have we spent time discussing the omission of <code>when</code> (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","m.new_content":{"body":"have we spent time discussing the omission of `when` (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":"have we spent time discussing the omission of <code>when</code> (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695530105213,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$rmiWXVJaP512xk0FqN-N1EbsBkxecfhhObmHGXOgt80"}
]