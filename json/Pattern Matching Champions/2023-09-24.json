[
{"content":{"body":"the bit you just quoted _isn't_ hyperbole","format":"org.matrix.custom.html","formatted_body":"the bit you just quoted <em>isn't</em> hyperbole","msgtype":"m.text"},"ts":1695518637036,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$jJ_TC23t4S-pG0fEE46dfOnT8LdFGUTGrRZE05scGsk"},
{"content":{"body":"it's literally a problem statement","msgtype":"m.text"},"ts":1695518645294,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UR4iPkGiZrcIq8QonKaqh7veoU4VMpaprNd4nxRpSVs"},
{"content":{"body":"my tone may have been an upset/shocked one, but I was genuinely waiting to hear a single concrete benefit","msgtype":"m.text"},"ts":1695518713553,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o5lsbpFju2aqenxY_1O7tZ7kN83M0GvZOe5FIaTqEQw"},
{"content":{"body":"I brought this discussion outside of the PR because I expected a conversation","msgtype":"m.text"},"ts":1695519114612,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xAT9KUhEr1CEsfbmRJqSlYj8V_SAbq26sxnyP712hHk"},
{"content":{"body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it","msgtype":"m.text"},"ts":1695519201533,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xcLJFxMnD8zmqRuopyRaGIvEsf3bX6t9MbTBRcDJhrQ"},
{"content":{"body":"it would need to be extremely clear why JS requires `if` patterns if that is an unusual concept for pattern matching constructs crosslinguistically","format":"org.matrix.custom.html","formatted_body":"it would need to be extremely clear why JS requires <code>if</code> patterns if that is an unusual concept for pattern matching constructs crosslinguistically","msgtype":"m.text"},"ts":1695519354641,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$EBvXUk13gO84S-eO15f1LENlAd1rvU6sCkHm8ymCl08"},
{"content":{"body":"and in attempting to figure out the rationale myself, I identified an even larger concern than the one I initially had, but I did _not_ manage to identify why greater ability to short-circuit should constitute an undeniable benefit","format":"org.matrix.custom.html","formatted_body":"and in attempting to figure out the rationale myself, I identified an even larger concern than the one I initially had, but I did <em>not</em> manage to identify why greater ability to short-circuit should constitute an undeniable benefit","msgtype":"m.text"},"ts":1695519811767,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BXnOYeazDWErmM0t2pizt33UljxzvjUS21yQ_7SYDZg"},
{"content":{"body":"I think you're reacting to \"objectively nasty\", and that's super unfortunate because I said that as a \"laugh together\" phrase","msgtype":"m.text"},"ts":1695519862489,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$rLWa59bzJ1WThQxr75O6ByBCg5m_EpW_xBGYWksPPG8"},
{"content":{"body":" * if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it\n(_I mean, I think it's the most important question about any proposal, but yeah._)","format":"org.matrix.custom.html","formatted_body":" * if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it<br>(<em>I mean, I think it's the most important question about any proposal, but yeah.</em>)","m.new_content":{"body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it\n(_I mean, I think it's the most important question about any proposal, but yeah._)","format":"org.matrix.custom.html","formatted_body":"if this proposal is a story of repeatedly trying to go too far and needing to rewrite, then \"why do we need this?\" is THE most important question to ask about any facet of it<br>(<em>I mean, I think it's the most important question about any proposal, but yeah.</em>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$xcLJFxMnD8zmqRuopyRaGIvEsf3bX6t9MbTBRcDJhrQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695520149838,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$kcOGy5SmkNPSebyVvgSXe4xa430SuhffuD2aX71q-go"},
{"content":{"body":"IIRC, one of the reasons we considered `if` patterns was to provide a way to continue to have some ability to evaluate expressions in-situ within the pattern without needing the full `${}` syntax, which was also unique to this proposal in comparison to other pattern matching systems. `if` patterns were at least *close* to existing syntax, by expanding `when ... if ...` to be more flexible. I'm not sure if there were other reasons.","format":"org.matrix.custom.html","formatted_body":"IIRC, one of the reasons we considered <code>if</code> patterns was to provide a way to continue to have some ability to evaluate expressions in-situ within the pattern without needing the full <code>${}</code> syntax, which was also unique to this proposal in comparison to other pattern matching systems. <code>if</code> patterns were at least <em>close</em> to existing syntax, by expanding <code>when ... if ...</code> to be more flexible. I'm not sure if there were other reasons.","msgtype":"m.text"},"ts":1695521365467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jrKySzg8WVF-z6OzSCirrvnSt9sCLUU2dsCBgeUxsIU"},
{"content":{"body":"I personally found `${}` to be more problematic because it allowed completely arbitrary expressions, which could make patterns completely unreadable, and because it would prevent future use of `identifier{` due to `$` being a legal identifier.","format":"org.matrix.custom.html","formatted_body":"I personally found <code>${}</code> to be more problematic because it allowed completely arbitrary expressions, which could make patterns completely unreadable, and because it would prevent future use of <code>identifier{</code> due to <code>$</code> being a legal identifier.","msgtype":"m.text"},"ts":1695521579450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zo5SE-mvdG0C8VEDIEpmaBFQSG9cZ0gJdH8kj4xS5kk"},
{"content":{"body":"`if` patterns, at least, provide some additional benefit. For example:\n\n```\nmatch ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n```\nWith `if` as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the `if` clause fails, even though the second branch of the disjunction would have succeeded. \nWith `if` as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.\n","format":"org.matrix.custom.html","formatted_body":"<p><code>if</code> patterns, at least, provide some additional benefit. For example:</p>\n<pre><code>match ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>With <code>if</code> as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the <code>if</code> clause fails, even though the second branch of the disjunction would have succeeded.<br>With <code>if</code> as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.</p>\n","msgtype":"m.text"},"ts":1695522314530,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA"},
{"content":{"body":"Now consider this modified example:\n\n```\nmatch ([\"1\", \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n```\n\nHere `x` is not defined in the 2nd branch of (a), so the `if` clause would result in a TDZ error. There would be no way around this aside from introducing a dummy `let x` somewhere just to ensure its valid on both sides.","format":"org.matrix.custom.html","formatted_body":"<p>Now consider this modified example:</p>\n<pre><code>match ([\"1\", \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>Here <code>x</code> is not defined in the 2nd branch of (a), so the <code>if</code> clause would result in a TDZ error. There would be no way around this aside from introducing a dummy <code>let x</code> somewhere just to ensure its valid on both sides.</p>\n","msgtype":"m.text"},"ts":1695522399366,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T33oQzwEBC4UhR44-hyyUx0DWEvVS-yjctMIo-RZERs"},
{"content":{"body":"Having two separate `when` clauses isn't necessarily an option if you don't want to repeat the expression in `...`. I can't recall whether `when` branches have fall-through for empty bodies like `case` does, but I don't imagine they do.","format":"org.matrix.custom.html","formatted_body":"Having two separate <code>when</code> clauses isn't necessarily an option if you don't want to repeat the expression in <code>...</code>. I can't recall whether <code>when</code> branches have fall-through for empty bodies like <code>case</code> does, but I don't imagine they do.","msgtype":"m.text"},"ts":1695522504870,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t8uy-vz9hqj6PET3Myx0eyoS12TwZ5cZcvZsC_HbK5A"},
{"content":{"body":"Also, `if` patterns don't preclude us from having a standalone `if` clause so that you don't need to do `when if (x): ` on its own and could just use `if(x):`","format":"org.matrix.custom.html","formatted_body":"Also, <code>if</code> patterns don't preclude us from having a standalone <code>if</code> clause so that you don't need to do <code>when if (x): </code> on its own and could just use <code>if(x):</code>","msgtype":"m.text"},"ts":1695522572156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9mYwh-8WAeGMg-V9Grm2nPlt_TJfUmyPtLGpXBaVyc4"},
{"content":{"body":"One could also argue that we don't need `when` at all. It isn't strictly necessary as a syntactic disambiguation. We could have made `match` syntax look like this instead:\n\n```\nmatch (x) {\n  String: ...;\n  [Number]: ...;\n  { y: let y } and if (y.foo()): ...;\n  if (x > 0): ...;\n  default: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>One could also argue that we don't need <code>when</code> at all. It isn't strictly necessary as a syntactic disambiguation. We could have made <code>match</code> syntax look like this instead:</p>\n<pre><code>match (x) {\n  String: ...;\n  [Number]: ...;\n  { y: let y } and if (y.foo()): ...;\n  if (x &gt; 0): ...;\n  default: ...;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695523458033,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$92qzDlTNMwu82ygkF1-yONvFhT8CDD-OBO4eUjqF9E0"},
{"content":{"body":"As a contrast, C# doesn't use a clause keyword like `when`:\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\nRust doesn't either:\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>As a contrast, C# doesn't use a clause keyword like <code>when</code>:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695523831816,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k"},
{"content":{"body":" * As a contrast, C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nRust doesn't either:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>As a contrast, C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","m.new_content":{"body":"As a contrast, C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nRust doesn't either:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>As a contrast, C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Rust doesn't either:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695523916655,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UiVbj22S9wU2tGlKyPpqqSuqKLqMkhEm9s2-CORrisM"},
{"content":{"body":" * C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nNeither does Rust:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Neither does Rust:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","m.new_content":{"body":"C# doesn't use a clause keyword like `when` to introduce a new match leg:\n\n```cs\nvehicle switch {\n  Car _ => ...,\n  Truck _ => ...,\n  _ => throw new ArgumentNullException(),\n};\n```\n\nNeither does Rust:\n\n```rs\nmatch x {\n  Some(x) => Some(x + 1),\n  None => None\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>C# doesn't use a clause keyword like <code>when</code> to introduce a new match leg:</p>\n<pre><code class=\"language-cs\">vehicle switch {\n  Car _ =&gt; ...,\n  Truck _ =&gt; ...,\n  _ =&gt; throw new ArgumentNullException(),\n};\n</code></pre>\n<p>Neither does Rust:</p>\n<pre><code class=\"language-rs\">match x {\n  Some(x) =&gt; Some(x + 1),\n  None =&gt; None\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfTF71kIDG5Zmoz-561tDTHqgrrQhpEdH_b8lwvya-k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695523939163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AWI1KVOGpFG8NwBd1XLysf-Bn7yxReor8A2LGJ9wIYU"},
{"content":{"body":"In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the `let`/`const`/`var` declaration patterns which introduce bindings. If we had one, we wouldn't need `default` at all. I'd suggested `void` as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to `void` to be meaningful. Without the `when` clause head, and using `void` for an irrefutable match, it could be patterns all the way down:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: let y and if (y > x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y < x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the <code>let</code>/<code>const</code>/<code>var</code> declaration patterns which introduce bindings. If we had one, we wouldn't need <code>default</code> at all. I'd suggested <code>void</code> as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to <code>void</code> to be meaningful. Without the <code>when</code> clause head, and using <code>void</code> for an irrefutable match, it could be patterns all the way down:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y and if (y &gt; x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y &lt; x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695524450603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM"},
{"content":{"body":"if pattern to me is an escape hatch w","msgtype":"m.text"},"ts":1695524506947,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$im5cnbLQhecPexI2-LWeIceJvJNEtBrTSfudMi0QPpA"},
{"content":{"body":"* if pattern to me is an escape hatch when the pattern is not expressive enough ","m.new_content":{"body":"if pattern to me is an escape hatch when the pattern is not expressive enough ","msgtype":"m.text"},"m.relates_to":{"event_id":"$im5cnbLQhecPexI2-LWeIceJvJNEtBrTSfudMi0QPpA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524524639,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$hZyfjeC29Yc0LbP0P-knLxPhAwmuwrPlXoE0bnweczQ"},
{"content":{"body":"for example today you cannot match `> 0`, but you can make it via if pattern","msgtype":"m.text"},"ts":1695524568414,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tXxJa70QCMfhE1IMJ8JmnfONCrniThS71iBafaL0E_c"},
{"content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz }: ...,\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695524714728,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U"},
{"content":{"body":" * I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n</code></pre>\n","m.new_content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...,\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524754142,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XyQQtK7xId0xeucj6vfzRkHyafQ9VEcfERMGNaQ4BJI"},
{"content":{"body":" * I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n</code></pre>\n","m.new_content":{"body":"I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like `>`:\n\n```\nconst transform = point => match (point) {\n  { x: let x, y: > x and let y } : new Point(x + y, y);\n  { x: let x, y: < x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n```\n\nHowever, a better example might be method calls (again using a `when`-less variant of the syntax):\n\n```\nmatch (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'll admit the above example doesn't showcase the need for the escape hatch in the presence of relational patterns like <code>&gt;</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: &gt; x and let y } : new Point(x + y, y);\n  { x: let x, y: &lt; x and let y } : new Point(x - y, y);\n  { x: let x, y: let y }         : new Point(2 * x, 2 * y);\n  void                           : new Point(0, 0)\n}\n</code></pre>\n<p>However, a better example might be method calls (again using a <code>when</code>-less variant of the syntax):</p>\n<pre><code>match (x) {\n  { foo: let y and if (y.bar()), baz: String }: ...;\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$V1SI-VhyCNnYA5itLkt2XXT819UZta1RQu73kv9ao_U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695524786137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nssuNm4YIa6OxRwGK_lyq34e51J7SKWK3VizaRNDnbs"},
{"content":{"body":"Hmm. I wonder if `*` would make for a good \"irrefutable pattern\" token? \n\n```\nmatch (obj) {\n  { x: Number, y: * }: ...;\n  *: ...;\n}\n```\n\nMy only concern would be using up a token that could have other more useful potential meanings in the future.","format":"org.matrix.custom.html","formatted_body":"<p>Hmm. I wonder if <code>*</code> would make for a good \"irrefutable pattern\" token?</p>\n<pre><code>match (obj) {\n  { x: Number, y: * }: ...;\n  *: ...;\n}\n</code></pre>\n<p>My only concern would be using up a token that could have other more useful potential meanings in the future.</p>\n","msgtype":"m.text"},"ts":1695524927675,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ul7Q3NHSUXGcCXvj3O3sLNb2FlyrWHqevt9pkg4Uu5g"},
{"content":{"body":"(It's a shame we can't use `_` as a discard)","format":"org.matrix.custom.html","formatted_body":"(It's a shame we can't use <code>_</code> as a discard)","msgtype":"m.text"},"ts":1695524955276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Cq74Wq3n9sEx1xXNHhz7MnuWF_iHzznWGWTGlXBZow"},
{"content":{"body":"> <@rbuckton:matrix.org> In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the `let`/`const`/`var` declaration patterns which introduce bindings. If we had one, we wouldn't need `default` at all. I'd suggested `void` as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to `void` to be meaningful. Without the `when` clause head, and using `void` for an irrefutable match, it could be patterns all the way down:\n> \n> ```\n> const transform = point => match (point) {\n>   { x: let x, y: let y and if (y > x) } : new Point(x + y, y);\n>   { x: let x, y: let y and if (y < x) } : new Point(x - y, y);\n>   { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n>   void                                  : new Point(0, 0)\n> }\n> ```\n\nNote that the example here is adapted from this example in the C# documentation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression#case-guards","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>In fact, I've mentioned before how it's unfortunate that we don't have an \"irrefutable match\" pattern, aside from the <code>let</code>/<code>const</code>/<code>var</code> declaration patterns which introduce bindings. If we had one, we wouldn't need <code>default</code> at all. I'd suggested <code>void</code> as a potential \"irrefutable match\" pattern with the semantic meaning of \"match whatever, it doesn't matter\" being close enough to <code>void</code> to be meaningful. Without the <code>when</code> clause head, and using <code>void</code> for an irrefutable match, it could be patterns all the way down:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y and if (y &gt; x) } : new Point(x + y, y);\n  { x: let x, y: let y and if (y &lt; x) } : new Point(x - y, y);\n  { x: let x, y: let y }                : new Point(2 * x, 2 * y);\n  void                                  : new Point(0, 0)\n}\n</code></pre>\n</blockquote></mx-reply>Note that the example here is adapted from this example in the C# documentation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression#case-guards","m.relates_to":{"m.in_reply_to":{"event_id":"$L0oT4eAzZVfhwGcQvHyvLF9j-gFo8cksJ78JZebrzuM"}},"msgtype":"m.text"},"ts":1695525047825,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LMuEj-mb8hfRkl60wvUEP_UYB8Bh5ucO9D7psy28fgc"},
{"content":{"body":"> <@rbuckton:matrix.org> `if` patterns, at least, provide some additional benefit. For example:\n> \n> ```\n> match ([1, \"a\"]) {\n>   when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n>   when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n> }\n> ```\n> With `if` as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the `if` clause fails, even though the second branch of the disjunction would have succeeded. \n> With `if` as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.\n\nthanks, (b) is definitely a nice example","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p><code>if</code> patterns, at least, provide some additional benefit. For example:</p>\n<pre><code>match ([1, \"a\"]) {\n  when [Number and let x, String] or [1 or \"1\", \"a\"] if (x % 2 === 0): ...; // (a)\n  when [Number and let x and if (x % 2 === 0), String] or [1 or \"1\", \"a\"]: ...;  // (b)\n}\n</code></pre>\n<p>With <code>if</code> as a clause and not a pattern (a), the first branch of the disjunction succeeds, but the <code>if</code> clause fails, even though the second branch of the disjunction would have succeeded.<br />With <code>if</code> as a pattern (b), we can perform the check locally within the subpattern. As a result, the first branch fails, but the 2nd branch succeeds.</p>\n</blockquote></mx-reply>thanks, (b) is definitely a nice example","m.relates_to":{"m.in_reply_to":{"event_id":"$mM_FqyYW9UtfsfruAGwwBEsqF3KtD8ywF4rcRgTSbIA"}},"msgtype":"m.text"},"ts":1695529905462,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$nil0UVjY6gkOElabMt4bDYIVgCHZL9axbOT3IMdDxfs"},
{"content":{"body":"(I too am forever sad that `_` isn't usable)","format":"org.matrix.custom.html","formatted_body":"(I too am forever sad that <code>_</code> isn't usable)","msgtype":"m.text"},"ts":1695530039675,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mNQ7sejWjgheDRfM36uiZBq3WveqUh0deH3aED46nUY"},
{"content":{"body":"have we spent time discussing the omission of `when` (or another keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":"have we spent time discussing the omission of <code>when</code> (or another keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"ts":1695530096161,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI"},
{"content":{"body":" * have we spent time discussing the omission of `when` (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":" * have we spent time discussing the omission of <code>when</code> (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","m.new_content":{"body":"have we spent time discussing the omission of `when` (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","format":"org.matrix.custom.html","formatted_body":"have we spent time discussing the omission of <code>when</code> (or any other keyword)? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695530105213,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$rmiWXVJaP512xk0FqN-N1EbsBkxecfhhObmHGXOgt80"},
{"content":{"body":" * have we spent time discussing keywordless branches? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","m.new_content":{"body":"have we spent time discussing keywordless branches? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695530124328,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$SRR0vf9bCrwpmmnxdK_Ujc2O470vZ2GA22i4MazAFm0"},
{"content":{"body":" * have we spent time discussing keywordless clauses? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","m.new_content":{"body":"have we spent time discussing keywordless clauses? I feel I wouldn't be surprised if that had come up previously and been objected to on some basis that's not occurring to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$lCX2fj7Y45_M3brTCiMz4xs3rjTkTeAKbE_iV5aSAWI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695530172645,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$jrWac7THw-zoujMmHgaJcOmUgJFKph3tUlVrHXRj_bo"},
{"content":{"body":"But yeah, my concerns boil down to:\n\n1. We obviously can't just look at `when if (x % 2 === 0):` and be like \"yup, that's fine\". 😅 I can understand if making the keyword droppable in just this case would feel special-casey, but if we really want `if` patterns, then that instead means we need to re-evaluate the keyword `when` itself. After all, if it were `case if (...):` then there'd be no particular nastiness to speak of.\n\n2. `if (... is if (...))` feels like a downright scary thing to have proposed to be valid JS. I would not feel this way if there were braces involved, say.","format":"org.matrix.custom.html","formatted_body":"<p>But yeah, my concerns boil down to:</p>\n<ol>\n<li>\n<p>We obviously can't just look at <code>when if (x % 2 === 0):</code> and be like \"yup, that's fine\". 😅 I can understand if making the keyword droppable in just this case would feel special-casey, but if we really want <code>if</code> patterns, then that instead means we need to re-evaluate the keyword <code>when</code> itself. After all, if it were <code>case if (...):</code> then there'd be no particular nastiness to speak of.</p>\n</li>\n<li>\n<p><code>if (... is if (...))</code> feels like a downright scary thing to have proposed to be valid JS. I would not feel this way if there were braces involved, say.</p>\n</li>\n</ol>\n","msgtype":"m.text"},"ts":1695531085497,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_VmXNuAhwC_8nYLbljN08dYnjwFfBJ3nnhQnx0gEses"},
{"content":{"body":"Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. `when if` doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and `is if` doesn't make an appearance at al","format":"org.matrix.custom.html","formatted_body":"Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. <code>when if</code> doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and <code>is if</code> doesn't make an appearance at al","msgtype":"m.text"},"ts":1695531228635,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$8BTIjf3bN5vRmYYi7ASBnfB9xcKTnP2WNbsNyv7UjQ4"},
{"content":{"body":" * Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. `when if` doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and `is if` doesn't make an appearance at all","format":"org.matrix.custom.html","formatted_body":" * Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. <code>when if</code> doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and <code>is if</code> doesn't make an appearance at all","m.new_content":{"body":"Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. `when if` doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and `is if` doesn't make an appearance at all","format":"org.matrix.custom.html","formatted_body":"Also I hope it's clear that my shocked tone is coming from being totally blindsided by these. <code>when if</code> doesn't even make an appearance until the appendix of the document (https://github.com/tc39/proposal-pattern-matching/pull/293/files#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1407-R1408) and <code>is if</code> doesn't make an appearance at all","msgtype":"m.text"},"m.relates_to":{"event_id":"$8BTIjf3bN5vRmYYi7ASBnfB9xcKTnP2WNbsNyv7UjQ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695531230504,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$myIqFU9W6Cpd4rviGRO0nJHKgu048z7C7i3dUxTJTaU"},
{"content":{"body":"> <@rkirsling:matrix.org> But yeah, my concerns boil down to:\n> \n> 1. We obviously can't just look at `when if (x % 2 === 0):` and be like \"yup, that's fine\". 😅 I can understand if making the keyword droppable in just this case would feel special-casey, but if we really want `if` patterns, then that instead means we need to re-evaluate the keyword `when` itself. After all, if it were `case if (...):` then there'd be no particular nastiness to speak of.\n> \n> 2. `if (... is if (...))` feels like a downright scary thing to have proposed to be valid JS. I would not feel this way if there were braces involved, say.\n\nI mean, we have `if (... ? ... : ...)` already today, so the _capability_ exists if not the syntax.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$_VmXNuAhwC_8nYLbljN08dYnjwFfBJ3nnhQnx0gEses?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br><p>But yeah, my concerns boil down to:</p>\n<ol>\n<li>\n<p>We obviously can't just look at <code>when if (x % 2 === 0):</code> and be like \"yup, that's fine\". 😅 I can understand if making the keyword droppable in just this case would feel special-casey, but if we really want <code>if</code> patterns, then that instead means we need to re-evaluate the keyword <code>when</code> itself. After all, if it were <code>case if (...):</code> then there'd be no particular nastiness to speak of.</p>\n</li>\n<li>\n<p><code>if (... is if (...))</code> feels like a downright scary thing to have proposed to be valid JS. I would not feel this way if there were braces involved, say.</p>\n</li>\n</ol>\n</blockquote></mx-reply>I mean, we have <code>if (... ? ... : ...)</code> already today, so the <em>capability</em> exists if not the syntax.","m.relates_to":{"m.in_reply_to":{"event_id":"$_VmXNuAhwC_8nYLbljN08dYnjwFfBJ3nnhQnx0gEses"}},"msgtype":"m.text"},"ts":1695532993049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lklHJ3Bu01gP0_FdCFPXVQKTluM5_h07U3h4JHVm19g"},
{"content":{"body":"Also, I consider `is if ()` to be a degenerate case. Yes, its possible because it falls out of the syntax, but you probably won't see it in practice.","format":"org.matrix.custom.html","formatted_body":"Also, I consider <code>is if ()</code> to be a degenerate case. Yes, its possible because it falls out of the syntax, but you probably won't see it in practice.","msgtype":"m.text"},"ts":1695533068573,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZkVC0fbGIApB7vg8Kd7SNFMa36_aSmYUEOuomb_jWx4"},
{"content":{"body":"right and it could even be linted against but","msgtype":"m.text"},"ts":1695533249295,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$q4vBjsTQKjWLM05gIkHA5lWOi2g_PaVmpottDxWvRYI"},
{"content":{"body":"All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I *can* see uses for it, contrived though they may be:\n\n```\nfor (let i = 0; i < 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n}\n```\nThis is a fairly contrived example","format":"org.matrix.custom.html","formatted_body":"<p>All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I <em>can</em> see uses for it, contrived though they may be:</p>\n<pre><code>for (let i = 0; i &lt; 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n}\n</code></pre>\n<p>This is a fairly contrived example</p>\n","msgtype":"m.text"},"ts":1695533374870,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OSkqFqsRyWhjDyGJ_z3jFAh6eg4B3QKHktY2cchSjEQ"},
{"content":{"body":" * All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I _can_ see uses for it, contrived though they may be:\n\n```\nfor (let i = 0; i < 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n  // - `ar[i].foo()` is called\n  // - the result is tested\n}\n```\nno temp variable is necessary to capture the result of `ar[i].foo()`","format":"org.matrix.custom.html","formatted_body":" * <p>All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I <em>can</em> see uses for it, contrived though they may be:</p>\n<pre><code>for (let i = 0; i &lt; 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n  // - `ar[i].foo()` is called\n  // - the result is tested\n}\n</code></pre>\n<p>no temp variable is necessary to capture the result of <code>ar[i].foo()</code></p>\n","m.new_content":{"body":"All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I _can_ see uses for it, contrived though they may be:\n\n```\nfor (let i = 0; i < 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n  // - `ar[i].foo()` is called\n  // - the result is tested\n}\n```\nno temp variable is necessary to capture the result of `ar[i].foo()`","format":"org.matrix.custom.html","formatted_body":"<p>All syntax has cases like that, and I'm not sure its worth being overly pedantic in that case. Especially because I <em>can</em> see uses for it, contrived though they may be:</p>\n<pre><code>for (let i = 0; i &lt; 10; i++) {\n  x = ar[i].foo() is if (i % 2 === 0) and String;\n\n  // observable semantics:\n  // - element `i` is read from `ar`\n  // - `ar[i].foo()` is called\n  // - the result is tested\n}\n</code></pre>\n<p>no temp variable is necessary to capture the result of <code>ar[i].foo()</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$OSkqFqsRyWhjDyGJ_z3jFAh6eg4B3QKHktY2cchSjEQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695533417672,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N5YBMkIN4ZVoat983P6S4EB6iytzKMIDd2UnILPHyg0"},
{"content":{"body":"But as I said, that's not likely to come up in practice.","msgtype":"m.text"},"ts":1695533451864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VWGEdv-14Ej897bHXfnBK8uzKclv0bTnbCUITckreKA"},
{"content":{"body":"even if the \"the keywords read weirdly together\" were avoided, my primary worry is about `if (o is { x: let x, y: let y } and if (x > y))`","format":"org.matrix.custom.html","formatted_body":"even if the \"the keywords read weirdly together\" were avoided, my primary worry is about <code>if (o is { x: let x, y: let y } and if (x &gt; y))</code>","msgtype":"m.text"},"ts":1695533684003,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$39BrxRDS7UReu_e1qDFvBbRH7O7MIiqIKW8k9vMKy_c"},
{"content":{"body":"the point about the functionality being there with a ternary is valid, but","msgtype":"m.text"},"ts":1695533706657,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$zIYw5kBx2J-PUxikjRE-e76MO24WxhBMqySVXwTkdXE"},
{"content":{"body":"in theory you could keep nesting `is if`s","format":"org.matrix.custom.html","formatted_body":"in theory you could keep nesting <code>is if</code>s","msgtype":"m.text"},"ts":1695533732729,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY"},
{"content":{"body":" * in theory you could keep nesting `is ... if`s","format":"org.matrix.custom.html","formatted_body":" * in theory you could keep nesting <code>is ... if</code>s","m.new_content":{"body":"in theory you could keep nesting `is ... if`s","format":"org.matrix.custom.html","formatted_body":"in theory you could keep nesting <code>is ... if</code>s","msgtype":"m.text"},"m.relates_to":{"event_id":"$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695533735494,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1cqRpJAb1b5Vib_yn8ew4841u_Q7xpmeG4QFh3LqMxI"},
{"content":{"body":" * in theory you could keep nesting `is ... if (...)`s","format":"org.matrix.custom.html","formatted_body":" * in theory you could keep nesting <code>is ... if (...)</code>s","m.new_content":{"body":"in theory you could keep nesting `is ... if (...)`s","format":"org.matrix.custom.html","formatted_body":"in theory you could keep nesting <code>is ... if (...)</code>s","msgtype":"m.text"},"m.relates_to":{"event_id":"$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695533747701,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$FGRjhnEIAiqc5Vd0DFlN0Qhhh_dVy09elmU3k9l7-Wk"},
{"content":{"body":"I'll be honest, that example looks fine to me, and actually warranted if there are more pattern terms following the `if`","format":"org.matrix.custom.html","formatted_body":"I'll be honest, that example looks fine to me, and actually warranted if there are more pattern terms following the <code>if</code>","msgtype":"m.text"},"ts":1695533753519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fpku0A-wlsDJ7_UXdc3KX2TVD_Jm3pkVbUhmPjorm5A"},
{"content":{"body":"I don't think it's a ridiculous thing to want, to be clear","msgtype":"m.text"},"ts":1695533786440,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Rg3dyXBQQsGTzBYBITgvB-OziNM59yj1g-kibcl_0Uw"},
{"content":{"body":"Though you're still more likely to see it as `&& x > y` in practice ","format":"org.matrix.custom.html","formatted_body":"Though you're still more likely to see it as <code>&amp;&amp; x &gt; y</code> in practice","msgtype":"m.text"},"ts":1695533798733,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OoXoFadT90VBxryXO4W8Kim6_dbPI9-GQ3xcVenwXSQ"},
{"content":{"body":"It's kind of like writing `[...[]] = []`. There's not much benefit to doing it that way.","format":"org.matrix.custom.html","formatted_body":"It's kind of like writing <code>[...[]] = []</code>. There's not much benefit to doing it that way.","msgtype":"m.text"},"ts":1695533828309,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OB17IHiuosQTAEghTDTQv6KU-hqxeDFNMzmVtxi5TdE"},
{"content":{"body":"Or people writing things like `[+[]][+[]]`. Perfectly legal JS, evaluates to `0`.","format":"org.matrix.custom.html","formatted_body":"Or people writing things like <code>[+[]][+[]]</code>. Perfectly legal JS, evaluates to <code>0</code>.","msgtype":"m.text"},"ts":1695533919772,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LQvR0F7Y_-sSFdm9OPxAcFobPfZDk53RdmhAvwjlfUo"},
{"content":{"body":"like maybe I'm actually worried about `is` in general","format":"org.matrix.custom.html","formatted_body":"like maybe I'm actually worried about <code>is</code> in general","msgtype":"m.text"},"ts":1695533941977,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_RldcJBaioy5Bv41UvRUTsbLv9K9D6veyMNGp45FS2o"},
{"content":{"body":"that was supposed to make `match` integrate better into the language IIUC but","format":"org.matrix.custom.html","formatted_body":"that was supposed to make <code>match</code> integrate better into the language IIUC but","msgtype":"m.text"},"ts":1695533968010,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$njuZVxB5ECI7jyKFlYLNe2u5O9YyRP0isQekQZ-1MO8"},
{"content":{"body":"I think `is` is wonderful, but I'm biased. ","format":"org.matrix.custom.html","formatted_body":"I think <code>is</code> is wonderful, but I'm biased.","msgtype":"m.text"},"ts":1695533970331,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rtkIYgBHjtY84AV_dC0hA-tXOsfS2XQUBeLb2TfTYnk"},
{"content":{"body":" * that was supposed to make `match` integrate better into the language IIUC and I didn't initially think that to be bad, but","format":"org.matrix.custom.html","formatted_body":" * that was supposed to make <code>match</code> integrate better into the language IIUC and I didn't initially think that to be bad, but","m.new_content":{"body":"that was supposed to make `match` integrate better into the language IIUC and I didn't initially think that to be bad, but","format":"org.matrix.custom.html","formatted_body":"that was supposed to make <code>match</code> integrate better into the language IIUC and I didn't initially think that to be bad, but","msgtype":"m.text"},"m.relates_to":{"event_id":"$njuZVxB5ECI7jyKFlYLNe2u5O9YyRP0isQekQZ-1MO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695533995346,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TnO_LltBMcIFzDTTWxNAMwqbpdTUA6UQA-LS8yUMZpg"},
{"content":{"body":"combined with combinators and if patterns it's as if we're now not just redoing `switch` but also redoing destructuring, boolean operators, and ternaries","format":"org.matrix.custom.html","formatted_body":"combined with combinators and if patterns it's as if we're now not just redoing <code>switch</code> but also redoing destructuring, boolean operators, and ternaries","msgtype":"m.text"},"ts":1695534062013,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0"},
{"content":{"body":"It also provides us with `if-let` and `while-let`-like semantics, which `match` does not:\n\n```\nwhile (ar.pop() is not undefined and let x) {\n  ...\n}\n\nif (value is Option.Some(let x)) {\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>It also provides us with <code>if-let</code> and <code>while-let</code>-like semantics, which <code>match</code> does not:</p>\n<pre><code>while (ar.pop() is not undefined and let x) {\n  ...\n}\n\nif (value is Option.Some(let x)) {\n  ...\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695534065654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CnQ9fyRJfDQJ3iaTzzVP5QiPgFbE06gyEjRTtHyiTP0"},
{"content":{"body":" * combined with combinators and if patterns it's as if we're now not just redoing `switch` but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language","format":"org.matrix.custom.html","formatted_body":" * combined with combinators and if patterns it's as if we're now not just redoing <code>switch</code> but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language","m.new_content":{"body":"combined with combinators and if patterns it's as if we're now not just redoing `switch` but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language","format":"org.matrix.custom.html","formatted_body":"combined with combinators and if patterns it's as if we're now not just redoing <code>switch</code> but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language","msgtype":"m.text"},"m.relates_to":{"event_id":"$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695534088287,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$OFjwa49x98_6lHJ_AUWuixYRmsfvzcezdUA2rI4VOXc"},
{"content":{"body":"> <@rkirsling:matrix.org> combined with combinators and if patterns it's as if we're now not just redoing `switch` but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language\n\nThat's kind of what pattern matching _is_. It's a very powerful tool in the FP programmers toolbox.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>combined with combinators and if patterns it's as if we're now not just redoing <code>switch</code> but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language</blockquote></mx-reply>That's kind of what pattern matching <em>is</em>. It's a very powerful tool in the FP programmers toolbox.","m.relates_to":{"m.in_reply_to":{"event_id":"$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0"}},"msgtype":"m.text"},"ts":1695534148158,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vtmk_fW1BZtS3ZkvtBPQT_3NTbWkqgwMqrBxcnPaJG0"},
{"content":{"body":"I don't think the original premise of the pattern matching proposal was \"let's make a better `switch`\", it was \"let's do pattern matching, and while we're at it let's not repeat the same mistakes as `switch`\"","format":"org.matrix.custom.html","formatted_body":"I don't think the original premise of the pattern matching proposal was \"let's make a better <code>switch</code>\", it was \"let's do pattern matching, and while we're at it let's not repeat the same mistakes as <code>switch</code>\"","msgtype":"m.text"},"ts":1695534229792,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i92b2CJ78jf2GC7n7PtoG9SEGYKCZ1M7Zl4QJYdU7Fk"},
{"content":{"body":"one can reasonable expect that a pattern matching feature would be confined to a `match` statement though","format":"org.matrix.custom.html","formatted_body":"one can reasonable expect that a pattern matching feature would be confined to a <code>match</code> statement though","msgtype":"m.text"},"ts":1695534420434,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$W2WVemyeQ4-U-4VAg1k97pXsXdzInBCxl4wStcRS8wM"},
{"content":{"body":" * one can reasonably expect that a pattern matching feature would be confined to a `match` statement though","format":"org.matrix.custom.html","formatted_body":" * one can reasonably expect that a pattern matching feature would be confined to a <code>match</code> statement though","m.new_content":{"body":"one can reasonably expect that a pattern matching feature would be confined to a `match` statement though","format":"org.matrix.custom.html","formatted_body":"one can reasonably expect that a pattern matching feature would be confined to a <code>match</code> statement though","msgtype":"m.text"},"m.relates_to":{"event_id":"$W2WVemyeQ4-U-4VAg1k97pXsXdzInBCxl4wStcRS8wM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695534428013,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-fcowtt3BiXB7ya3617NkUy4rqtKLhy0_peylZq2v9k"},
{"content":{"body":"Maybe? That's not the case in a large number of languages with pattern matching though.","msgtype":"m.text"},"ts":1695534449889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SdnptC7pjzhzpKLvbDRbFHMhaCPn6UCuRoSbzxqsZzI"},
{"content":{"body":"Rust has patterns everywhere, as well as `if-let` and `while-let`. C# has `switch` expressions, improved `switch` statements, and `is`.","format":"org.matrix.custom.html","formatted_body":"Rust has patterns everywhere, as well as <code>if-let</code> and <code>while-let</code>. C# has <code>switch</code> expressions, improved <code>switch</code> statements, and <code>is</code>.","msgtype":"m.text"},"ts":1695534492457,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QOqhpenYVP7tgbzvXhbtbux98ipzLJSGYD7-atOyqnw"},
{"content":{"body":"`match` is a better `switch`, `is` is a better `instanceof` :)","format":"org.matrix.custom.html","formatted_body":"<code>match</code> is a better <code>switch</code>, <code>is</code> is a better <code>instanceof</code> :)","msgtype":"m.text"},"ts":1695534519670,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$64NOmwtNaWWapSBYsEdwdZMisdDxV_MtC7g3_gHfLkw"},
{"content":{"body":"I mean, `is` is basically a rewrite of boolean expressions","format":"org.matrix.custom.html","formatted_body":"I mean, <code>is</code> is basically a rewrite of boolean expressions","msgtype":"m.text"},"ts":1695534551369,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$E05UvHVg95b2hTjuOhLtvS4QZVYq9y3MSNQYSWITT0M"},
{"content":{"body":"boolean expressions that only target a single value, maybe.","msgtype":"m.text"},"ts":1695534579761,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s9MeER9tt0cdrarCSX-6HPHjKSedYfqr422T2-9eWlc"},
{"content":{"body":"aside from `if` patterns, `is` can only operate on the left-hand side expression and its properties","format":"org.matrix.custom.html","formatted_body":"aside from <code>if</code> patterns, <code>is</code> can only operate on the left-hand side expression and its properties","msgtype":"m.text"},"ts":1695534604516,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LilGlpplOkk1K5ARzCMewRzhOxnEXfEmYCiy3gSSUcQ"},
{"content":{"body":"so `is` is never going to replace regular boolean expressions. That wasn't the case in C# either.","format":"org.matrix.custom.html","formatted_body":"so <code>is</code> is never going to replace regular boolean expressions. That wasn't the case in C# either.","msgtype":"m.text"},"ts":1695534625971,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K643Dl4huIwEcv3Zlp8E-LMp4FM25X8wPb4B7zz39KU"},
{"content":{"body":"It will certainly grow to fill its niche, but it won't take over.","msgtype":"m.text"},"ts":1695534650699,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hcKL2kIcv6Unby14O_K_K5Nhj0awHkH88PeOPmUhx_A"},
{"content":{"body":"it's really hard to keep up with you but","msgtype":"m.text"},"ts":1695534705450,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TKyFxdQ19CuuHLm8vN4TcXDUrMo53ROVItVs4Rw6vNg"},
{"content":{"body":"Besides with the potential for relational patterns in the future, I find `x is > 0 and <= 10` to be a vast improvement over `x >= 0 && x <= 10` in terms of readability.","format":"org.matrix.custom.html","formatted_body":"Besides with the potential for relational patterns in the future, I find <code>x is &gt; 0 and &lt;= 10</code> to be a vast improvement over <code>x &gt;= 0 &amp;&amp; x &lt;= 10</code> in terms of readability.","msgtype":"m.text"},"ts":1695534717228,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6erIdyHBO9q-mkbXz97-i1UiBDzLGnPnT4_B7eY8s8I"},
{"content":{"body":" * Besides with the potential for relational patterns in the future, I find `x is > 0 and <= 10` to be a vast improvement over `x > 0 && x <= 10` in terms of readability.","format":"org.matrix.custom.html","formatted_body":" * Besides with the potential for relational patterns in the future, I find <code>x is &gt; 0 and &lt;= 10</code> to be a vast improvement over <code>x &gt; 0 &amp;&amp; x &lt;= 10</code> in terms of readability.","m.new_content":{"body":"Besides with the potential for relational patterns in the future, I find `x is > 0 and <= 10` to be a vast improvement over `x > 0 && x <= 10` in terms of readability.","format":"org.matrix.custom.html","formatted_body":"Besides with the potential for relational patterns in the future, I find <code>x is &gt; 0 and &lt;= 10</code> to be a vast improvement over <code>x &gt; 0 &amp;&amp; x &lt;= 10</code> in terms of readability.","msgtype":"m.text"},"m.relates_to":{"event_id":"$6erIdyHBO9q-mkbXz97-i1UiBDzLGnPnT4_B7eY8s8I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695534757632,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fqT4AE5ZJ34rPokYHk6VqFHX7EIMXZyywOxxjVOewNQ"},
{"content":{"body":"what other languages do only informs so much; one is obliged to begin any conversation about pattern matching in JS with concern for whether that can be suitably realized in a dynamic language that's obliged to never break the web","msgtype":"m.text"},"ts":1695534770057,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YF9_tWwtKsbj77ou7FbJ9LGs02hJvCJwEozczDL23is"},
{"content":{"body":"obviously I would like there to be a way to realize it in a way that suits JS and not some other language","msgtype":"m.text"},"ts":1695534798970,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$e6Ntoy_IoV3CYx38ifDyJkXhuJ99rSUNGP0pyKujU_Q"},
{"content":{"body":"but \"here's a billion new things we can do\" is not a thing I ever want to hear about JS","msgtype":"m.text"},"ts":1695534819374,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-vsjgHNPxx_Z45i0akFQ5hQRKzpPAOgPsj1FFcrLyvw"},
{"content":{"body":"Yes, but I also want to avoid the \"death by 1,000 papercuts\" that JS often is. pattern matching makes it easy to express complex things simply, which is a huge improvement to readability as it gains adoption. ","msgtype":"m.text"},"ts":1695534898954,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$klnMZX_Pm-DNgT_ZzSt_5DSzy44t_QYqf1Tld1OiaVI"},
{"content":{"body":"a `match` statement is quite a comfortable space to work in, and if you ask a random JS dev about pattern matching, you'd expect that they'd view those as synonymous","format":"org.matrix.custom.html","formatted_body":"a <code>match</code> statement is quite a comfortable space to work in, and if you ask a random JS dev about pattern matching, you'd expect that they'd view those as synonymous","msgtype":"m.text"},"ts":1695534905319,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YW0pin_h8whZ9t_J3lSXcV5mS8aZxXL-0aG5l5wjrPI"}
]