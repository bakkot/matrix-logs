[
{"content":{"body":"> <@ljharb:matrix.org> having it look almost exactly like an object literal seems very hard to teach\n\nIt doesn't seem so bad to me, and there's nothing keeping us from using a different token than `:`. That said, I'm still fine with `when` as a clause indicator inside of `match`. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7jBriv0s_uuCyqfCEyAzFPZUTshAjmQkejSxnPLIW8Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />having it look almost exactly like an object literal seems very hard to teach</blockquote></mx-reply>It doesn't seem so bad to me, and there's nothing keeping us from using a different token than <code>:</code>. That said, I'm still fine with <code>when</code> as a clause indicator inside of <code>match</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$7jBriv0s_uuCyqfCEyAzFPZUTshAjmQkejSxnPLIW8Q"}},"msgtype":"m.text"},"ts":1680225980443,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$cESUibJT3qNXvj-4dFdvrXcPeqUkQFtTkjpEdNPgD-4"},
{"content":{"body":"rbuckton-pto: Was your suggestion for `let` with a destructure, a matcher in a trinary, and an object literal a serious suggestion? Or were you shitposting? I'm finding it hard to respond to that in text without seeming incredulous and/or rude, apologies.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton-pto</a>: Was your suggestion for <code>let</code> with a destructure, a matcher in a trinary, and an object literal a serious suggestion? Or were you shitposting? I'm finding it hard to respond to that in text without seeming incredulous and/or rude, apologies.","msgtype":"m.text"},"ts":1680284437836,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gKXlt-HwYlUw1q5nz8JzfxdnoKP-18rK3foyg4AhQHM"},
{"content":{"body":"> having it look almost exactly like an object literal seems very hard to teach\n\nIt doesn't, tho? If anything, it looks like a switch(). ^_^","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>having it look almost exactly like an object literal seems very hard to teach</p>\n</blockquote>\n<p>It doesn't, tho? If anything, it looks like a switch(). ^_^</p>\n","msgtype":"m.text"},"ts":1680284496142,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9W07YSrKGXsdIj36kMm_Xcqp2zsoGuCwvUmr-t-5Ud8"},
{"content":{"body":"But my interest really is just in making sure that matchers are used in as similar a fashion as possible across their usage sites. If match() wraps them in a when(), then everywhere else probably should as well. If everywhere else doesn't, then match() probably shouldn't either. I think this is necessary to make the proposal as a whole feel smooth and easy to digest.","msgtype":"m.text"},"ts":1680284591309,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_Tft6PmtonpZJaxxYUANYMeNkSjRW2z8A8r1_Qmc5_0"},
{"content":{"body":"And inside of `match()` is perhaps the location *least* requiring of a special wrapper to indicate context, since it's a brand new construct which can *only* contain that one thing! So \"a `when()` inside of `match()`, but naked everywhere else\" is exactly backwards, I think. ^_^","format":"org.matrix.custom.html","formatted_body":"And inside of <code>match()</code> is perhaps the location <em>least</em> requiring of a special wrapper to indicate context, since it's a brand new construct which can <em>only</em> contain that one thing! So &quot;a <code>when()</code> inside of <code>match()</code>, but naked everywhere else&quot; is exactly backwards, I think. ^_^","msgtype":"m.text"},"ts":1680284658787,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$aqOpFkPohnpKAQccuHgvjBrLBdzSnLItjAWfocx_k1I"},
{"content":{"body":"> <@tabatkins:matrix.org> rbuckton-pto: Was your suggestion for `let` with a destructure, a matcher in a trinary, and an object literal a serious suggestion? Or were you shitposting? I'm finding it hard to respond to that in text without seeming incredulous and/or rude, apologies.\n\nNot shitposting, and not sure what seems out of place. I'm not advocating for `assert(val is Point(let x, let y))`, but that would be feasible with `is`.\n\nI don`t find `let when(pattern) = y` useful because we already have destructuring, which has parallels between `let [x] = y` and `[x] = y`. The `let when` syntax has no parallel in expression space. Extractors would also have parallel syntax in binding and assignment patterns.\n\nMatching is somewhat different, however. Matching is a conditional operation, destructuring is not. `let` is not conditional either, so `let when` feels out of place. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$gKXlt-HwYlUw1q5nz8JzfxdnoKP-18rK3foyg4AhQHM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br /><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton-pto</a>: Was your suggestion for <code>let</code> with a destructure, a matcher in a trinary, and an object literal a serious suggestion? Or were you shitposting? I'm finding it hard to respond to that in text without seeming incredulous and/or rude, apologies.</blockquote></mx-reply><p>Not shitposting, and not sure what seems out of place. I'm not advocating for <code>assert(val is Point(let x, let y))</code>, but that would be feasible with <code>is</code>.</p>\n<p>I don<code>t find </code>let when(pattern) = y<code>useful because we already have destructuring, which has parallels between</code>let [x] = y<code>and</code>[x] = y<code>. The </code>let when` syntax has no parallel in expression space. Extractors would also have parallel syntax in binding and assignment patterns.</p>\n<p>Matching is somewhat different, however. Matching is a conditional operation, destructuring is not. <code>let</code> is not conditional either, so <code>let when</code> feels out of place.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$gKXlt-HwYlUw1q5nz8JzfxdnoKP-18rK3foyg4AhQHM"}},"msgtype":"m.text"},"ts":1680286715620,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$3m41pBEu4uwcoEMvu4m50_9ovcnxZk8YGeLhBHegj9g"}
]