[
{"content":{"body":"> <@yulia:mozilla.org> i have a crazy idea (please no one shoot me for this, this is a thought experiment)\n> \n> ```js\n> function handle(res when { status: 200 }) {...} // matched when no \"body\" present\n> \n> function handle(res when { status: 200, body: $validBody }) {...} // the match when \"body\" is present and valid\n> \n> function handle(res when { status: 200, body }) {...} // the match when \"body\" is present\n> \n> function handle(res when { status: 200 }) {...} // this overwrites the first function\n> \n> function handle(res) { ...} // fall through case\n> ```\n\nnot so bad","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$NGKz5TzormTacNMyzsg5My2-1w7pwRbECZiBoJN-RkU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><p>i have a crazy idea (please no one shoot me for this, this is a thought experiment)</p>\n<pre><code class=\"language-js\">function handle(res when { status: 200 }) {...} // matched when no \"body\" present\n\nfunction handle(res when { status: 200, body: $validBody }) {...} // the match when \"body\" is present and valid\n\nfunction handle(res when { status: 200, body }) {...} // the match when \"body\" is present\n\nfunction handle(res when { status: 200 }) {...} // this overwrites the first function\n\nfunction handle(res) { ...} // fall through case\n</code></pre>\n</blockquote></mx-reply>not so bad","m.relates_to":{"m.in_reply_to":{"event_id":"$NGKz5TzormTacNMyzsg5My2-1w7pwRbECZiBoJN-RkU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> i have a crazy idea (please no one shoot me for this, this is a thought experiment)\n> \n> ```js\n> function handle(res when { status: 200 }) {...} // matched when no \"body\" present\n> \n> function handle(res when { status: 200, body: $validBody }) {...} // the match when \"body\" is present and valid\n> \n> function handle(res when { status: 200, body }) {...} // the match when \"body\" is present\n> \n> function handle(res when { status: 200 }) {...} // this overwrites the first function\n> \n> function handle(res) { ...} // fall through case\n> ```\n\nnot so bad","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$NGKz5TzormTacNMyzsg5My2-1w7pwRbECZiBoJN-RkU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><p>i have a crazy idea (please no one shoot me for this, this is a thought experiment)</p>\n<pre><code class=\"language-js\">function handle(res when { status: 200 }) {...} // matched when no \"body\" present\n\nfunction handle(res when { status: 200, body: $validBody }) {...} // the match when \"body\" is present and valid\n\nfunction handle(res when { status: 200, body }) {...} // the match when \"body\" is present\n\nfunction handle(res when { status: 200 }) {...} // this overwrites the first function\n\nfunction handle(res) { ...} // fall through case\n</code></pre>\n</blockquote></mx-reply>not so bad","mimetype":"text/html"}]},"ts":1659071528670,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4M40_yjg-mi2kjETgLiWFO-BLdzYT6d2libJBiF6-Ig"},
{"content":{"body":"I'm not sure functions should be privileged here, otherwise overload shenanigans might occur that might lead the ecosystem down a potentially bad path:\n```js\nfunction f(...[x when Number, y when String]) { ... }\nfunction f(...[x when Number, y when Number]) { ... }\nfunction f(...[x when String, y when String]) { ... }\n// etc.\n```\nNot to mention what we would show for `f.toString()`, or how this would interact with parameter decorators, ...\n\nI'd much rather avoid introducing overload-like behavior for functions until long after both pattern matching, type annotations, and parameter decorators have shipped.","format":"org.matrix.custom.html","formatted_body":"<p>I'm not sure functions should be privileged here, otherwise overload shenanigans might occur that might lead the ecosystem down a potentially bad path:</p>\n<pre><code class=\"language-js\">function f(...[x when Number, y when String]) { ... }\nfunction f(...[x when Number, y when Number]) { ... }\nfunction f(...[x when String, y when String]) { ... }\n// etc.\n</code></pre>\n<p>Not to mention what we would show for <code>f.toString()</code>, or how this would interact with parameter decorators, ...</p>\n<p>I'd much rather avoid introducing overload-like behavior for functions until long after both pattern matching, type annotations, and parameter decorators have shipped.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm not sure functions should be privileged here, otherwise overload shenanigans might occur that might lead the ecosystem down a potentially bad path:\n```js\nfunction f(...[x when Number, y when String]) { ... }\nfunction f(...[x when Number, y when Number]) { ... }\nfunction f(...[x when String, y when String]) { ... }\n// etc.\n```\nNot to mention what we would show for `f.toString()`, or how this would interact with parameter decorators, ...\n\nI'd much rather avoid introducing overload-like behavior for functions until long after both pattern matching, type annotations, and parameter decorators have shipped.","mimetype":"text/plain"},{"body":"<p>I'm not sure functions should be privileged here, otherwise overload shenanigans might occur that might lead the ecosystem down a potentially bad path:</p>\n<pre><code class=\"language-js\">function f(...[x when Number, y when String]) { ... }\nfunction f(...[x when Number, y when Number]) { ... }\nfunction f(...[x when String, y when String]) { ... }\n// etc.\n</code></pre>\n<p>Not to mention what we would show for <code>f.toString()</code>, or how this would interact with parameter decorators, ...</p>\n<p>I'd much rather avoid introducing overload-like behavior for functions until long after both pattern matching, type annotations, and parameter decorators have shipped.</p>\n","mimetype":"text/html"}]},"ts":1659120790812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k1MoOV9Yme-UyM0D4e048urRrJmMf5ELHYGliExp7jk"}
]