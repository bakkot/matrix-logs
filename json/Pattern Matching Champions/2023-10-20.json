[
{"content":{"body":"Yup, that too","m.mentions":{},"msgtype":"m.text"},"ts":1697822060839,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xFWQGkHw8re466fEcMYp0KjAnEgjuvVEVjG2DGsjC80"},
{"content":{"body":"I'd considered it a \"slightly annoying but not too important\" loss that you couldn't check, say, that the subject was a particular function (because you'd instead be invoking the function), but `=== fn` does indeed bring that back.","format":"org.matrix.custom.html","formatted_body":"I'd considered it a \"slightly annoying but not too important\" loss that you couldn't check, say, that the subject was a particular function (because you'd instead be invoking the function), but <code>=== fn</code> does indeed bring that back.","m.mentions":{},"msgtype":"m.text"},"ts":1697822111455,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QPC0rrvNtLB7FOJWCa6kv7ZDG0dFFxINaYmlbTAhuOw"},
{"content":{"body":"I'm not certain how often that will come up in practice, and we could also have `x is y` do a Same Value check first before trying the custom matcher","format":"org.matrix.custom.html","formatted_body":"I'm not certain how often that will come up in practice, and we could also have <code>x is y</code> do a Same Value check first before trying the custom matcher","msgtype":"m.text"},"ts":1697822854526,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JGihRA11TXHqSQdJZ5G9_cJKYdrvasdyVVLobL2jWsM"},
{"content":{"body":"Except when doing `x is y()`, since that can only be a custom matcher","format":"org.matrix.custom.html","formatted_body":"Except when doing <code>x is y()</code>, since that can only be a custom matcher","msgtype":"m.text"},"ts":1697822911465,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FsEe4FoyOlYZlsbwgMiOakoVce1_TH9DsCKVBLS1fl0"},
{"content":{"body":"The more exceptions we add the more fragile things become.","m.mentions":{},"msgtype":"m.text"},"ts":1697827264694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FVgB53TZ14gwRPYnTyPV3IHnQJIt1lRweivCYi3SkMA"},
{"content":{"body":"That would mean you can't match a subject that's a function against a predicate that might be the same function, for instance.","m.mentions":{},"msgtype":"m.text"},"ts":1697827309285,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LHZ_Ei78XF7LNNL4PheFQCDandC6IzHMKmvFcgPZw3M"},
{"content":{"body":"Rare? Sure. A weird wrinkle that'll confuse the pants off of someone running into it? Absolutely.","m.mentions":{},"msgtype":"m.text"},"ts":1697827327163,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_rliZSQe1JmTzNoDrgk38Z4-hlsfKeeCc9-laGrUSik"},
{"content":{"body":"I'd rather have `===` patterns and keep plain variable matchers with their existing set of wrinkles.","format":"org.matrix.custom.html","formatted_body":"I'd rather have <code>===</code> patterns and keep plain variable matchers with their existing set of wrinkles.","m.mentions":{},"msgtype":"m.text"},"ts":1697827367097,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$G5hysI-UQNXRENkpoZjKxO1w3IowXFrNhRScx1oc_w4"},
{"content":{"body":"Wait nm, got it backwards - you wouldn't be able to execute a predicate against itself as a subject.","m.mentions":{},"msgtype":"m.text"},"ts":1697827742029,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$S0HApwlvPv4YrwefSPqBUqx_FhWc_khi8PQVMksV0Io"},
{"content":{"body":"And fixing *that* would require a lot more contortions in some new feature, versus the current behavior which you can switch out of with `===`.","format":"org.matrix.custom.html","formatted_body":"And fixing <em>that</em> would require a lot more contortions in some new feature, versus the current behavior which you can switch out of with <code>===</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1697827778615,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I52lVTeS_zuZjWIaI4dKRsk2TOtxFg9Dr5LKk7fi1Jc"},
{"content":{"body":"Couldn't you disambiguate the rarer case of matching a function against itself by doing something like `x is y(...)`?","format":"org.matrix.custom.html","formatted_body":"Couldn't you disambiguate the rarer case of matching a function against itself by doing something like <code>x is y(...)</code>?","msgtype":"m.text"},"ts":1697836397536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lWSHXvFnO0-2v-Xho1WcJRAHiW9FKeNcWlvSV-uAhRI"},
{"content":{"body":"I'll be clear. I'm not opposed to having `===` or any other equality check, they just seem rare enough in practice that we could get by with not having them and using `if`, if there is pushback. ","format":"org.matrix.custom.html","formatted_body":"I'll be clear. I'm not opposed to having <code>===</code> or any other equality check, they just seem rare enough in practice that we could get by with not having them and using <code>if</code>, if there is pushback.","msgtype":"m.text"},"ts":1697836520780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$blNOneyWGjch-UMW8yuCwtFrE4omtlK57AFTXP4Y8s4"},
{"content":{"body":"I just don't want `<`, `>`, `>=`, `<=`, and `in` to be lumped together with `===` if someone blocks `===`, as there is a huge difference in how often `<` et al will be used in comparison. ","format":"org.matrix.custom.html","formatted_body":"I just don't want <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, and <code>in</code> to be lumped together with <code>===</code> if someone blocks <code>===</code>, as there is a huge difference in how often <code>&lt;</code> et al will be used in comparison.","msgtype":"m.text"},"ts":1697836667377,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RGb1hXTAk-GRGJ-RlmIwHvpp5jvy6exyjT7xq4S_nTw"},
{"content":{"body":"I mean, it's not necessarily that rare, and definitely not something you'd know you need to invoke.","m.mentions":{},"msgtype":"m.text"},"ts":1697838027627,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8FdWPmmIcP3JD1ZHU5tI0oKGNFQ3uf35SBOMtKCk27U"},
{"content":{"body":"Like if you have `match(x) { String: ...; }` are you going to anticipate the possibility of `x` being the String object itself?","format":"org.matrix.custom.html","formatted_body":"Like if you have <code>match(x) { String: ...; }</code> are you going to anticipate the possibility of <code>x</code> being the String object itself?","m.mentions":{},"msgtype":"m.text"},"ts":1697838069342,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$76zrEuWR4yUIlFGAaDNvuv_lymT9R9NWojomCBPp5MA"},
{"content":{"body":"Nah, you're using `String` to mean \"is a string\".","format":"org.matrix.custom.html","formatted_body":"Nah, you're using <code>String</code> to mean \"is a string\".","m.mentions":{},"msgtype":"m.text"},"ts":1697838081145,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$R_cVMPBeyyx7ZTlzGciT5i5V1P7QlkSDpOx2lc0etjY"},
{"content":{"body":"I'd much rather just *not solve the problem* of matching against a function, than add this additional wrinkle/footgun.","format":"org.matrix.custom.html","formatted_body":"I'd much rather just <em>not solve the problem</em> of matching against a function, than add this additional wrinkle/footgun.","m.mentions":{},"msgtype":"m.text"},"ts":1697838111235,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$66CGDDCrTLOBvpzLva2oa8uWJHtAYUYy3yDwDS_FyYs"},
{"content":{"body":" * Like if you have `match(x) { String: ...; }` are you going to anticipate the possibility of `x` being the String object itself, and thus passing that test?","format":"org.matrix.custom.html","formatted_body":" * Like if you have <code>match(x) { String: ...; }</code> are you going to anticipate the possibility of <code>x</code> being the String object itself, and thus passing that test?","m.mentions":{},"m.new_content":{"body":"Like if you have `match(x) { String: ...; }` are you going to anticipate the possibility of `x` being the String object itself, and thus passing that test?","format":"org.matrix.custom.html","formatted_body":"Like if you have <code>match(x) { String: ...; }</code> are you going to anticipate the possibility of <code>x</code> being the String object itself, and thus passing that test?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$76zrEuWR4yUIlFGAaDNvuv_lymT9R9NWojomCBPp5MA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1697838145378,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BBT9mvF_13FXSccHpE9__xhvt2QMVT1cJ3EWDRzz49k"}
]