[
{"content":{"body":"What are the goals for pattern matching now? It sounds like we're dialing up the complexity of the proposal quite a bit.","msgtype":"m.text"},"ts":1681158228083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA"},
{"content":{"body":"Well, I think if we added a mechanism for naming, and removed `and`, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but \"using in all LHS contexts\" and \"having some kind of mechanism to handle both naming and matching things\" are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","format":"org.matrix.custom.html","formatted_body":"Well, I think if we added a mechanism for naming, and removed <code>and</code>, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but &quot;using in all LHS contexts&quot; and &quot;having some kind of mechanism to handle both naming and matching things&quot; are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","msgtype":"m.text"},"ts":1681158353034,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0OGatIYd9JKNoL45A6JwYnXIksWj2ilFOJXjeTnu3Ok"},
{"content":{"body":"I'm not certain what the proposal even looks like currently, I'm getting caught up now.","msgtype":"m.text"},"ts":1681158462801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$84pusHsXc-CuIdhHJvV5hmILsDA0Pf8ft89ReXedGVc"},
{"content":{"body":"https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf is what I'm going off of","msgtype":"m.text"},"ts":1681158515831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1tQ7TS1q5-WpIiyWpJsyKofGh_5o9f3oBozxgOf_580"},
{"content":{"body":"I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.","msgtype":"m.text"},"ts":1681158547176,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"},
{"content":{"body":"that gist seems to be taking a \"yes and\" approach to the feedback received--some of the feedback was about missing expressiveness/features, and this adds those. However, much/most of the feedback was about reducing features","msgtype":"m.text"},"ts":1681158563229,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IVkFAjBm8BqeTJZBLdVmwHkZ_e2H19IS8wOrF2ARpbU"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.\n\nDo you have a writeup of this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;d honestly hoped the syntax I&#39;ve been suggesting was both simple as well as more than sufficient to cover the proposal goals.</blockquote></mx-reply>Do you have a writeup of this?","m.relates_to":{"m.in_reply_to":{"event_id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"}},"msgtype":"m.text"},"ts":1681158569106,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hAY3C8mlLwzqgWdJUSPBGaikYJ6_uzm1UtfAC6t9iJQ"},
{"content":{"body":"I don't think special syntax is necessary for `if` or `while`. I don't think interpolation is warranted.","format":"org.matrix.custom.html","formatted_body":"I don't think special syntax is necessary for <code>if</code> or <code>while</code>. I don't think interpolation is warranted.","msgtype":"m.text"},"ts":1681158599909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E4Ws5K352TeefkFuNICAY-seR6FLevhwmnOk486IYGE"},
{"content":{"body":"Is this the extractors proposal, or something else?","msgtype":"m.text"},"ts":1681158600995,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JZlvU3FB_mi5V-vRNmUeFv5TWi7moMYMtFX7eiJlF6k"},
{"content":{"body":"One moment, I have a meeting.","msgtype":"m.text"},"ts":1681158626097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lLYa-ZP2DBpeks0El_Wc78IWCCoIDPujDeY418OanBk"},
{"content":{"body":"hmm, I don't really understand the argument against `if` and `while`--these seem pretty useful to me, and have precedent way back to SNOBOL","format":"org.matrix.custom.html","formatted_body":"hmm, I don't really understand the argument against <code>if</code> and <code>while</code>--these seem pretty useful to me, and have precedent way back to SNOBOL","msgtype":"m.text"},"ts":1681158631727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eBYA-kbPy6SexWOAQndv63XrvKUsL7--ub0K1nQQhWU"},
{"content":{"body":"(sorry no rush)","msgtype":"m.text"},"ts":1681158633601,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y2TiYsspKwPETJ6uAeg_zG9rVnmPaUavLgtqgpUZwE4"},
{"content":{"body":"I'm saying that `is` already covers `if` and `while`.","format":"org.matrix.custom.html","formatted_body":"I'm saying that <code>is</code> already covers <code>if</code> and <code>while</code>.","msgtype":"m.text"},"ts":1681158787889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6dg0UzUfzTYqX1NCw56r4reBuhL0rVOGWs-wx80CvlM"},
{"content":{"body":"special syntax isn't necessary.","msgtype":"m.text"},"ts":1681158794892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y6Firm5DQshIq_EaZVINZ1nWGJb3tpka2CILpQda5rE"},
{"content":{"body":"does `is` allow bindings to be created? I think it's pretty useful to conditionally destructure something.","format":"org.matrix.custom.html","formatted_body":"does <code>is</code> allow bindings to be created? I think it's pretty useful to conditionally destructure something.","msgtype":"m.text"},"ts":1681158828856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EcqMWngVP5Aix4oStpIgjCM5212eDktA2gL6xWSQo08"},
{"content":{"body":"It does in my version of the syntax.","msgtype":"m.text"},"ts":1681158850806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jHNUwMUTK5axdIXAFFEvQ1JcEMW56TLyXYTuae-pLag"},
{"content":{"body":"interesting, is it written down somewhere?","msgtype":"m.text"},"ts":1681158867542,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EPVbRO78amSZLKr-BkPaIGWfkqFPCkIExChoijbfxFU"},
{"content":{"body":"Bits and pieces, in this channel and on GitHub. I'm working on a more comprehensive writeup.","msgtype":"m.text"},"ts":1681159069872,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Sd0lOxieCo_gpc0VhwV1civgoqlUihDj_LSy-116Sfk"},
{"content":{"body":"great, looking forward","msgtype":"m.text"},"ts":1681159197900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EEIJQe5ofAXuhXkBxTA26pis1EVJKtmWvfCSnQisDfg"},
{"content":{"body":"Here's a summary of my preferred syntax:\n- `is` expressions (`expr is pattern`)\n- `match` expressions\n- literal constant patterns (i.e., `1`, `true`, `null`)\n- qualified name patterns (i.e., `undefined`, `NaN`, `Infinity`, `Option.Some`, etc.)\n- object patterns (i.e., `{ x: 1, y: 2 }`)\n- array patterns (i.e., `[1, 2]`)\n- `and` patterns (conjunctions)\n- `or` patterns (disjunctions)\n- `not` patterns (negation)\n- `let` (`const`/`var`?) patterns (i.e., `let x`)\n- grouping patterns (i.e., `(1 or true)`)\n- extractor patterns (i.e., `Foo({ x: 1, y: 2 })`)\n- relational patterns (i.e., `>= 0`)","format":"org.matrix.custom.html","formatted_body":"<p>Here's a summary of my preferred syntax:</p>\n<ul>\n<li><code>is</code> expressions (<code>expr is pattern</code>)</li>\n<li><code>match</code> expressions</li>\n<li>literal constant patterns (i.e., <code>1</code>, <code>true</code>, <code>null</code>)</li>\n<li>qualified name patterns (i.e., <code>undefined</code>, <code>NaN</code>, <code>Infinity</code>, <code>Option.Some</code>, etc.)</li>\n<li>object patterns (i.e., <code>{ x: 1, y: 2 }</code>)</li>\n<li>array patterns (i.e., <code>[1, 2]</code>)</li>\n<li><code>and</code> patterns (conjunctions)</li>\n<li><code>or</code> patterns (disjunctions)</li>\n<li><code>not</code> patterns (negation)</li>\n<li><code>let</code> (<code>const</code>/<code>var</code>?) patterns (i.e., <code>let x</code>)</li>\n<li>grouping patterns (i.e., <code>(1 or true)</code>)</li>\n<li>extractor patterns (i.e., <code>Foo({ x: 1, y: 2 })</code>)</li>\n<li>relational patterns (i.e., <code>&gt;= 0</code>)</li>\n</ul>\n","msgtype":"m.text"},"ts":1681159427654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lmvTpbsci2a3G89KMS6QZqHDuALo9NPPwLUHai8TbOg"},
{"content":{"body":"The design is based on C#, Scala, and Rust.","msgtype":"m.text"},"ts":1681159466316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZhn3gI_3To0HKby5yjZtlQwhZLavO0RGmaBDo6dn0Y"},
{"content":{"body":"https://gist.github.com/rbuckton/76a0836b799cedcb882fbccdaac57552#ron-bucktons-pattern-matching-with-extractor-objects-epics-proposal has more details, plus a few extras I don't consider to be MVP.","msgtype":"m.text"},"ts":1681159498260,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$APMlcTMCYSigK4w-HhWOSNU7Th1YHHJZ8bDVM_AHaiA"},
{"content":{"body":"In my proposed syntax, you don't need special syntax for `if` or `while`, because it would be handled by `is` expressions and `let` patterns. A `let` pattern introduces a `let` variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","format":"org.matrix.custom.html","formatted_body":"In my proposed syntax, you don't need special syntax for <code>if</code> or <code>while</code>, because it would be handled by <code>is</code> expressions and <code>let</code> patterns. A <code>let</code> pattern introduces a <code>let</code> variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","msgtype":"m.text"},"ts":1681159622502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QYOfaAZnrjye7sxmsf1Vg1DxeYZt_f6v3r0NhOo_sv4"},
{"content":{"body":"So you can easily write:\n```js\nif (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n```\nwithout special syntax for `if`.","format":"org.matrix.custom.html","formatted_body":"<p>So you can easily write:</p>\n<pre><code class=\"language-js\">if (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n</code></pre>\n<p>without special syntax for <code>if</code>.</p>\n","msgtype":"m.text"},"ts":1681159677829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g66oXdgOMZNsn1kpJLMksvwCi9E6tZm1-YMJ2iHJp5Y"},
{"content":{"body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an _IdentifierReference_.","format":"org.matrix.custom.html","formatted_body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an <em>IdentifierReference</em>.","msgtype":"m.text"},"ts":1681159726944,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kx1Ie7WdGDoZgBu2LrnibOXMTTXk082VZL0PCNob4Uk"},
{"content":{"body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., `a.b.c`) in addition to regular identifiers, much like _DecoratorMemberExpression_.","format":"org.matrix.custom.html","formatted_body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., <code>a.b.c</code>) in addition to regular identifiers, much like <em>DecoratorMemberExpression</em>.","msgtype":"m.text"},"ts":1681159760469,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RkIGq3WdLsO-UYkVRe4xdVKrL1cp2NpRHu-oWSYj8Io"},
{"content":{"body":"would you allow matching implicitly in assignment expressions, like `[let x, let y] = expr();`","format":"org.matrix.custom.html","formatted_body":"would you allow matching implicitly in assignment expressions, like <code>[let x, let y] = expr();</code>","msgtype":"m.text"},"ts":1681159821772,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1CADAEv_s9sdBdReO8fK0BlCNZyV_3JxW-jZpkf0qhU"},
{"content":{"body":"or that would be done just by `assert(expr() is [let x, let y])`","format":"org.matrix.custom.html","formatted_body":"or that would be done just by <code>assert(expr() is [let x, let y])</code>","msgtype":"m.text"},"ts":1681159847481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RMP-dLjt6zyHN4BFhPHnB31oqk5-wTsxq5SyYPAITDs"},
{"content":{"body":"No. That mixes destructuring with pattern matching.","msgtype":"m.text"},"ts":1681159849036,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yZvElciwZWBJms2u4dwPm-2G1KZLfAqHgJBU4QiOOmE"},
{"content":{"body":"Would it work in parameter positions?","msgtype":"m.text"},"ts":1681159866725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"},
{"content":{"body":"Its possible my proposal could be extended to support that in some way, I haven't really looked into it though.","msgtype":"m.text"},"ts":1681159870303,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Kql9kqmoOgHAm2IIkzfZSzQv6x6gEiPHDYtbVRWKQI"},
{"content":{"body":"> <@littledan:matrix.org> Would it work in parameter positions?\n\nNo, not without special syntax. Parameters already support binding patterns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Would it work in parameter positions?</blockquote></mx-reply>No, not without special syntax. Parameters already support binding patterns.","m.relates_to":{"m.in_reply_to":{"event_id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"}},"msgtype":"m.text"},"ts":1681159906026,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g2wgbwTGPm04gZN0qx8Ux_y8O9ThcuVMHNWE9usaD3M"},
{"content":{"body":"I'm also not convinced that makes sense to do.","msgtype":"m.text"},"ts":1681159924209,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_3gdkSeC5JKMYDV2tHgCNR6uwYboEqAEDJGZfpxPlNA"},
{"content":{"body":"I'm not entirely a fan of the idea to use patterns to support some kind of function overloading.","msgtype":"m.text"},"ts":1681159977353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n-pcO6ADzXb-CKmIVGe3IYX7jY1TpV_-7vv6BZBAGZA"},
{"content":{"body":"the phrase \"when you have a hammer, every problem looks like a nail\" comes to mind. ","msgtype":"m.text"},"ts":1681160062038,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-foYeqRL28F61e8gQQy7NmfJVMB-9dA4PMpaNnHxJ-E"},
{"content":{"body":"I'm not talking about function overloading...","msgtype":"m.text"},"ts":1681160092437,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CD3sOo3VH1ARgKTDcTq4_DpnXyatIllrCEnRGI2UITM"},
{"content":{"body":"You mentioned parameters though","msgtype":"m.text"},"ts":1681160117475,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wLmqZoOfoGWu_vFFBn_AGyLNxO8K2LL724gTsroM1ls"},
{"content":{"body":"I guess I'm surprised that my intuition that pattern matching should be supported everywhere where we bind things isn't held so widely by others. I can accept it but I don't understand it yet.","msgtype":"m.text"},"ts":1681160141878,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B7a4BJHrl6XtdyX6IvsMyUEI968JJXjN7SYD6oN6qrE"},
{"content":{"body":"yeah, this would be purely to fail by throwing","msgtype":"m.text"},"ts":1681160154447,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oNAnyG-570FEw7kJbWTpYoLJ7nU8HdSlTNc1bO6E2i0"},
{"content":{"body":"Binding and assignment are definite. They either happen or an error is thrown. Match patterns are conditional.","msgtype":"m.text"},"ts":1681160165124,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RRs7c4_J9dAcls-vhkeX1NuD2Bemt6jXqsujYk7R7VU"},
{"content":{"body":"it's pretty common across languages to reuse match patterns in this definite mode","msgtype":"m.text"},"ts":1681160201785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dWrT-gslaPN9NgJK82WBItzWhkNcOxficfBo-W_UmAs"},
{"content":{"body":"The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for assignments and bindings.","msgtype":"m.text"},"ts":1681160284208,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G9I_6IcKLJ_CatcBPkU2jyWW497TTuzaBfQ_M0m01Wc"},
{"content":{"body":" * The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for definite assignments and bindings.","m.new_content":{"body":"The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for definite assignments and bindings.","msgtype":"m.text"},"m.relates_to":{"event_id":"$G9I_6IcKLJ_CatcBPkU2jyWW497TTuzaBfQ_M0m01Wc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160292296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zhd_TNsps3XrceEtFH3JHBtzWjWEhS5HyKXAD33p9PE"},
{"content":{"body":"By `as-is`, I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":"By <code>as-is</code>, I mean: <code>const { x: 10, y } = point;</code>","msgtype":"m.text"},"ts":1681160318806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g7c2ECe4KTL1b5SxTDLG-S03r0N9vsEkyg1kJ7IHhHM"},
{"content":{"body":"well, I guess Tab's proposal is, you use `when` to switch to the other mode","format":"org.matrix.custom.html","formatted_body":"well, I guess Tab's proposal is, you use <code>when</code> to switch to the other mode","msgtype":"m.text"},"ts":1681160327661,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fwNiDqyD2xm4cLrBElXF5ECixxHqNglCIJcKqrzYGFU"},
{"content":{"body":" * By \"as-is\", I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":" * By &quot;as-is&quot;, I mean: <code>const { x: 10, y } = point;</code>","m.new_content":{"body":"By \"as-is\", I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":"By &quot;as-is&quot;, I mean: <code>const { x: 10, y } = point;</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$g7c2ECe4KTL1b5SxTDLG-S03r0N9vsEkyg1kJ7IHhHM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160330434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vBSHRuUQmgq5T4uxp0q9iRb0_3IMcCy4xD0NPmeKGdM"},
{"content":{"body":"definitely unfortunate to have a separate mode","msgtype":"m.text"},"ts":1681160345382,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$44tPAHeEuvnCNCDCI3UvlSUVijR6Bsb2T8vgsckRCOI"},
{"content":{"body":"I am not certain we should be flipping back and forth between modes. It will just be confusing.","msgtype":"m.text"},"ts":1681160354254,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fI7kau3GxPAw1nIb7BBO5ArFCouzeHF-GxPxwZgPaR0"},
{"content":{"body":"I don't really understand what would be more intuitive--to draw an analogy (usable in similar places) or contrast (use in complementary places)","msgtype":"m.text"},"ts":1681160371419,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ir991hFzR351Ou5dTmS-JvtymKOCrxMXKLOfdcghD-c"},
{"content":{"body":"We _could_ extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.","format":"org.matrix.custom.html","formatted_body":"We <em>could</em> extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.","msgtype":"m.text"},"ts":1681160396767,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4"},
{"content":{"body":"What I like about the explicit `when` is it makes a contrast clear locally each place pattern matching is used (even if in analogous places).","format":"org.matrix.custom.html","formatted_body":"What I like about the explicit <code>when</code> is it makes a contrast clear locally each place pattern matching is used (even if in analogous places).","msgtype":"m.text"},"ts":1681160421561,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gXDhouuQJ8BuN6tF28hmdsflIH6A9lVL9kpJqUk-USc"},
{"content":{"body":"> <@rbuckton:matrix.org> We _could_ extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.\n\nWhat do you mean by this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We <em>could</em> extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.</blockquote></mx-reply>What do you mean by this?","m.relates_to":{"m.in_reply_to":{"event_id":"$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4"}},"msgtype":"m.text"},"ts":1681160440835,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p3U07VDE2PspJ9dcLZxJfs3-gtZTSK8DzVoF2TFoJHQ"},
{"content":{"body":"I'm not entirely partial to just tacking on a `when` keyword everywhere, either. It doesn't read well.","format":"org.matrix.custom.html","formatted_body":"I'm not entirely partial to just tacking on a <code>when</code> keyword everywhere, either. It doesn't read well.","msgtype":"m.text"},"ts":1681160441914,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Lf2rWtezigmn9Ywqwk6dTMKiPuSZJq5j5q8dC3NiEt0"},
{"content":{"body":"https://gist.github.com/rbuckton/fca8b4ecc4eb16422b01f2557203082b","msgtype":"m.text"},"ts":1681160462813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9U0-RLl1fky17zuzpMjkyLqhQCY2Af-KQtR02v0TkJU"},
{"content":{"body":"If we extend assignment and binding patterns to be the pattern matching mechanism, we lose out on exhaustiveness.","msgtype":"m.text"},"ts":1681160489386,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8QFTHgfNu1cBNZILsN1OjGv89Gfj81OmF7eb-43LQg4"},
{"content":{"body":"It also doesn't work well with free variables.","msgtype":"m.text"},"ts":1681160511545,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MTsE3AzWsQmVAq8AC4Gz-82QvtoYKgIAq5KYX4bXLek"},
{"content":{"body":"i.e., `{ x: Infinity, y } = point` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>{ x: Infinity, y } = point</code> will attempt to overwrite <code>Infinity</code> today.","msgtype":"m.text"},"ts":1681160535458,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JJTzeffX7K2QK34CRxf3SWZFYK_PhR7RxdceVbNNOeM"},
{"content":{"body":" * i.e., `({ x: Infinity, y } = point)` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":" * i.e., <code>({ x: Infinity, y } = point)</code> will attempt to overwrite <code>Infinity</code> today.","m.new_content":{"body":"i.e., `({ x: Infinity, y } = point)` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: Infinity, y } = point)</code> will attempt to overwrite <code>Infinity</code> today.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JJTzeffX7K2QK34CRxf3SWZFYK_PhR7RxdceVbNNOeM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160544969,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-X493je5G1dmfT4SEt-fxAHsjPffW8sQRGROIWcyZyo"},
{"content":{"body":"I use C# as prior art for much of my syntax. C# has destructuring, but pattern matching is separate. ","msgtype":"m.text"},"ts":1681160605648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mKd2r76FuIyBP-JfzmE6Ym0r0TYQBhrLJCGny6wv4zA"},
{"content":{"body":"Yeah I agree that we can't just extend destructuring to become pattern matching. And we can emphasize the contrast by only allowing them in complementary syntax positions, if we want (possibly with allowances by making a form of extractor available outside patterns too)","msgtype":"m.text"},"ts":1681160614040,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wbkBOeJ5b9WKGqFHANHucc5_5o45opimqF-n4Z7PXa4"},
{"content":{"body":"yeah I should study C# more, and your doc looks interesting, will have to read it","msgtype":"m.text"},"ts":1681160627922,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VoOVmFrgJZy2os99uU53LuEVOlVC1KF05E_ba9pkOt4"},
{"content":{"body":"In C#, you can do `let (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>let (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","msgtype":"m.text"},"ts":1681160633803,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q"},
{"content":{"body":"In Rust, you can use some patterns in a `let` or `let mut`, but if you actually want conditional patterns, you have to use a `if-let` statement (which is covered by `if..is` in my proposal).","format":"org.matrix.custom.html","formatted_body":"In Rust, you can use some patterns in a <code>let</code> or <code>let mut</code>, but if you actually want conditional patterns, you have to use a <code>if-let</code> statement (which is covered by <code>if..is</code> in my proposal).","msgtype":"m.text"},"ts":1681160704975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MD_r2hLGJgVYR1SBp0BOp4grTzRk_F4QS3y1VofnijI"},
{"content":{"body":" * In C#, you can do `var (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":" * In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","m.new_content":{"body":"In C#, you can do `var (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160751748,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6Q8VNib5quptm0Pi3Nke8DQ09F84Wh1AN6WROMJcMEc"},
{"content":{"body":" * In C#, you can do `var (x, y) = (10, 20)`, but not `var (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":" * In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>var (10, y) = (10, 20)</code>.","m.new_content":{"body":"In C#, you can do `var (x, y) = (10, 20)`, but not `var (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>var (10, y) = (10, 20)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160763038,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GWxde88bPVFN9RXHt-7iPdIGBaCGzQD5a4HfUBmQ9-4"},
{"content":{"body":"OK, I think I'm starting to understand","msgtype":"m.text"},"ts":1681160777527,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wIfhggWRCz4bJCsmBQ34YBSggW286Wta8f8ZcJ2bY8w"},
{"content":{"body":"do you think extractors could use the same protocol whether used in pattern or destructuring context?","msgtype":"m.text"},"ts":1681160795030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM"},
{"content":{"body":"If pattern matching is its own thing, separate from destructuring, then you can define a consistent and pure pattern language that is limited to `is` and `match`.","format":"org.matrix.custom.html","formatted_body":"If pattern matching is its own thing, separate from destructuring, then you can define a consistent and pure pattern language that is limited to <code>is</code> and <code>match</code>.","msgtype":"m.text"},"ts":1681160829526,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FphHAr4bg4YfbYpornt73KtwJznz2gy_31y95IZOexw"},
{"content":{"body":"huh, pure?","msgtype":"m.text"},"ts":1681160859135,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A_iegMOQH9kV6vSQnRmnnMjFbDiZAD9sE5H8GDFFZmM"},
{"content":{"body":"> <@littledan:matrix.org> do you think extractors could use the same protocol whether used in pattern or destructuring context?\n\nYes. That's what C# and Scala do.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>do you think extractors could use the same protocol whether used in pattern or destructuring context?</blockquote></mx-reply>Yes. That's what C# and Scala do.","m.relates_to":{"m.in_reply_to":{"event_id":"$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM"}},"msgtype":"m.text"},"ts":1681160867108,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CYMWK9uUEwYQ3ZsbBAHpRunWB-WBAhgvmbYFnsWCZT0"},
{"content":{"body":"By \"pure\" I mean not polluted with existing destructuring caveats.","msgtype":"m.text"},"ts":1681160893598,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fxpd4-ljWZxAoC_gf6Dz7agW7sXYyUTY9gQrCh6SBuM"},
{"content":{"body":"such as exhaustiveness.","msgtype":"m.text"},"ts":1681160907253,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WHWXdwEMOdKq0_OYRfDUxk_qqOH1qD2Rq_MkV8DCWEw"},
{"content":{"body":"OK, thanks, I think I see what you're getting at. Will need to think on this a bit more.","msgtype":"m.text"},"ts":1681160965456,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vnFQGxZ5qhpGlvR1FTmvq9hMzdUfjWjymBD1v6yIxTw"},
{"content":{"body":" * By \"pure\" I mean \"not polluted with existing destructuring caveats\".","m.new_content":{"body":"By \"pure\" I mean \"not polluted with existing destructuring caveats\".","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fxpd4-ljWZxAoC_gf6Dz7agW7sXYyUTY9gQrCh6SBuM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161008245,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$e5mTMhSisYfDUGb2Dvp-HiUtKbiBaNSi2txQvdlh6wg"},
{"content":{"body":"yeah I guess then I agree that it'd be valid for us to start with `is` + extractors","format":"org.matrix.custom.html","formatted_body":"yeah I guess then I agree that it'd be valid for us to start with <code>is</code> + extractors","msgtype":"m.text"},"ts":1681161143020,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CG-zzWKNvIGsxuyU4aPbzQYoBE4rGXlASd5cQFCae0"},
{"content":{"body":"There may be some syntax issues with https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf too. If `when` is only allowed in a binding pattern, we lose parity with assignment patterns. If `when` is allowed in assignment patterns, then you have a syntax conflict with array patterns.","format":"org.matrix.custom.html","formatted_body":"There may be some syntax issues with https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf too. If <code>when</code> is only allowed in a binding pattern, we lose parity with assignment patterns. If <code>when</code> is allowed in assignment patterns, then you have a syntax conflict with array patterns.","msgtype":"m.text"},"ts":1681161155595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jq0oPLAZbkMFbswpoY2ARsuE-7dLMrAAV0mCxa7DTLc"},
{"content":{"body":"i.e., `({ x: when [y] } = value)` is already legal Js.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: when [y] } = value)</code> is already legal Js.","msgtype":"m.text"},"ts":1681161177004,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$51otlVaxZmZpi5dupszGLX22Wm-aF3JqoDUa1J5HfZY"},
{"content":{"body":" * i.e., `({ x: when [y] } = value)` is already legal JS.","format":"org.matrix.custom.html","formatted_body":" * i.e., <code>({ x: when [y] } = value)</code> is already legal JS.","m.new_content":{"body":"i.e., `({ x: when [y] } = value)` is already legal JS.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: when [y] } = value)</code> is already legal JS.","msgtype":"m.text"},"m.relates_to":{"event_id":"$51otlVaxZmZpi5dupszGLX22Wm-aF3JqoDUa1J5HfZY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161179618,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iB6hYXiiSsSWta_DvsJWt9wj3V0LXAlb3UKJiV6EgmE"},
{"content":{"body":"Since it doesn't provide parity with assignment patterns, I'm not sure \"anywhere you have a binding\" is viable.","msgtype":"m.text"},"ts":1681161242246,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V_ME9meLPY6qFIcm26Fyfg2w1hmFzlJubQcSA0OXrZs"},
{"content":{"body":"> <@rbuckton:matrix.org> What are the goals for pattern matching now? It sounds like we're dialing up the complexity of the proposal quite a bit.\n\nOne new goal: integrate patterns more into the language, so it feels more natural rather than a one-off.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What are the goals for pattern matching now? It sounds like we&#39;re dialing up the complexity of the proposal quite a bit.</blockquote></mx-reply>One new goal: integrate patterns more into the language, so it feels more natural rather than a one-off.","m.relates_to":{"m.in_reply_to":{"event_id":"$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA"}},"msgtype":"m.text"},"ts":1681161246734,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$e0pddou0wWJzgMDFxNJHsCNDgrv4m16q9gGnWbqVDTg"},
{"content":{"body":"`is` creating bindings sounds very unintuitive","format":"org.matrix.custom.html","formatted_body":"<code>is</code> creating bindings sounds very unintuitive","msgtype":"m.text"},"ts":1681161280105,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vrZWxLf8Ur9I4c2jdCMov_P0f_epXtEVLgv_m75MUjg"},
{"content":{"body":"it's a test, like `===`, it shouldn't have any side effects","format":"org.matrix.custom.html","formatted_body":"it's a test, like <code>===</code>, it shouldn't have any side effects","msgtype":"m.text"},"ts":1681161301380,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1OXIdvx9GzAAhnBSJLmoaHAWYlf_atCQJMFakumQkBQ"}
]