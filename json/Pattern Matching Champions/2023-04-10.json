[
{"content":{"body":"What are the goals for pattern matching now? It sounds like we're dialing up the complexity of the proposal quite a bit.","msgtype":"m.text"},"ts":1681158228083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA"},
{"content":{"body":"Well, I think if we added a mechanism for naming, and removed `and`, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but \"using in all LHS contexts\" and \"having some kind of mechanism to handle both naming and matching things\" are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","format":"org.matrix.custom.html","formatted_body":"Well, I think if we added a mechanism for naming, and removed <code>and</code>, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but &quot;using in all LHS contexts&quot; and &quot;having some kind of mechanism to handle both naming and matching things&quot; are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","msgtype":"m.text"},"ts":1681158353034,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0OGatIYd9JKNoL45A6JwYnXIksWj2ilFOJXjeTnu3Ok"},
{"content":{"body":"I'm not certain what the proposal even looks like currently, I'm getting caught up now.","msgtype":"m.text"},"ts":1681158462801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$84pusHsXc-CuIdhHJvV5hmILsDA0Pf8ft89ReXedGVc"},
{"content":{"body":"https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf is what I'm going off of","msgtype":"m.text"},"ts":1681158515831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1tQ7TS1q5-WpIiyWpJsyKofGh_5o9f3oBozxgOf_580"},
{"content":{"body":"I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.","msgtype":"m.text"},"ts":1681158547176,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"},
{"content":{"body":"that gist seems to be taking a \"yes and\" approach to the feedback received--some of the feedback was about missing expressiveness/features, and this adds those. However, much/most of the feedback was about reducing features","msgtype":"m.text"},"ts":1681158563229,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IVkFAjBm8BqeTJZBLdVmwHkZ_e2H19IS8wOrF2ARpbU"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.\n\nDo you have a writeup of this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;d honestly hoped the syntax I&#39;ve been suggesting was both simple as well as more than sufficient to cover the proposal goals.</blockquote></mx-reply>Do you have a writeup of this?","m.relates_to":{"m.in_reply_to":{"event_id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"}},"msgtype":"m.text"},"ts":1681158569106,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hAY3C8mlLwzqgWdJUSPBGaikYJ6_uzm1UtfAC6t9iJQ"},
{"content":{"body":"I don't think special syntax is necessary for `if` or `while`. I don't think interpolation is warranted.","format":"org.matrix.custom.html","formatted_body":"I don't think special syntax is necessary for <code>if</code> or <code>while</code>. I don't think interpolation is warranted.","msgtype":"m.text"},"ts":1681158599909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E4Ws5K352TeefkFuNICAY-seR6FLevhwmnOk486IYGE"},
{"content":{"body":"Is this the extractors proposal, or something else?","msgtype":"m.text"},"ts":1681158600995,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JZlvU3FB_mi5V-vRNmUeFv5TWi7moMYMtFX7eiJlF6k"},
{"content":{"body":"One moment, I have a meeting.","msgtype":"m.text"},"ts":1681158626097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lLYa-ZP2DBpeks0El_Wc78IWCCoIDPujDeY418OanBk"},
{"content":{"body":"hmm, I don't really understand the argument against `if` and `while`--these seem pretty useful to me, and have precedent way back to SNOBOL","format":"org.matrix.custom.html","formatted_body":"hmm, I don't really understand the argument against <code>if</code> and <code>while</code>--these seem pretty useful to me, and have precedent way back to SNOBOL","msgtype":"m.text"},"ts":1681158631727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eBYA-kbPy6SexWOAQndv63XrvKUsL7--ub0K1nQQhWU"},
{"content":{"body":"(sorry no rush)","msgtype":"m.text"},"ts":1681158633601,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y2TiYsspKwPETJ6uAeg_zG9rVnmPaUavLgtqgpUZwE4"},
{"content":{"body":"I'm saying that `is` already covers `if` and `while`.","format":"org.matrix.custom.html","formatted_body":"I'm saying that <code>is</code> already covers <code>if</code> and <code>while</code>.","msgtype":"m.text"},"ts":1681158787889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6dg0UzUfzTYqX1NCw56r4reBuhL0rVOGWs-wx80CvlM"},
{"content":{"body":"special syntax isn't necessary.","msgtype":"m.text"},"ts":1681158794892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y6Firm5DQshIq_EaZVINZ1nWGJb3tpka2CILpQda5rE"},
{"content":{"body":"does `is` allow bindings to be created? I think it's pretty useful to conditionally destructure something.","format":"org.matrix.custom.html","formatted_body":"does <code>is</code> allow bindings to be created? I think it's pretty useful to conditionally destructure something.","msgtype":"m.text"},"ts":1681158828856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EcqMWngVP5Aix4oStpIgjCM5212eDktA2gL6xWSQo08"},
{"content":{"body":"It does in my version of the syntax.","msgtype":"m.text"},"ts":1681158850806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jHNUwMUTK5axdIXAFFEvQ1JcEMW56TLyXYTuae-pLag"},
{"content":{"body":"interesting, is it written down somewhere?","msgtype":"m.text"},"ts":1681158867542,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EPVbRO78amSZLKr-BkPaIGWfkqFPCkIExChoijbfxFU"},
{"content":{"body":"Bits and pieces, in this channel and on GitHub. I'm working on a more comprehensive writeup.","msgtype":"m.text"},"ts":1681159069872,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Sd0lOxieCo_gpc0VhwV1civgoqlUihDj_LSy-116Sfk"},
{"content":{"body":"great, looking forward","msgtype":"m.text"},"ts":1681159197900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EEIJQe5ofAXuhXkBxTA26pis1EVJKtmWvfCSnQisDfg"},
{"content":{"body":"Here's a summary of my preferred syntax:\n- `is` expressions (`expr is pattern`)\n- `match` expressions\n- literal constant patterns (i.e., `1`, `true`, `null`)\n- qualified name patterns (i.e., `undefined`, `NaN`, `Infinity`, `Option.Some`, etc.)\n- object patterns (i.e., `{ x: 1, y: 2 }`)\n- array patterns (i.e., `[1, 2]`)\n- `and` patterns (conjunctions)\n- `or` patterns (disjunctions)\n- `not` patterns (negation)\n- `let` (`const`/`var`?) patterns (i.e., `let x`)\n- grouping patterns (i.e., `(1 or true)`)\n- extractor patterns (i.e., `Foo({ x: 1, y: 2 })`)\n- relational patterns (i.e., `>= 0`)","format":"org.matrix.custom.html","formatted_body":"<p>Here's a summary of my preferred syntax:</p>\n<ul>\n<li><code>is</code> expressions (<code>expr is pattern</code>)</li>\n<li><code>match</code> expressions</li>\n<li>literal constant patterns (i.e., <code>1</code>, <code>true</code>, <code>null</code>)</li>\n<li>qualified name patterns (i.e., <code>undefined</code>, <code>NaN</code>, <code>Infinity</code>, <code>Option.Some</code>, etc.)</li>\n<li>object patterns (i.e., <code>{ x: 1, y: 2 }</code>)</li>\n<li>array patterns (i.e., <code>[1, 2]</code>)</li>\n<li><code>and</code> patterns (conjunctions)</li>\n<li><code>or</code> patterns (disjunctions)</li>\n<li><code>not</code> patterns (negation)</li>\n<li><code>let</code> (<code>const</code>/<code>var</code>?) patterns (i.e., <code>let x</code>)</li>\n<li>grouping patterns (i.e., <code>(1 or true)</code>)</li>\n<li>extractor patterns (i.e., <code>Foo({ x: 1, y: 2 })</code>)</li>\n<li>relational patterns (i.e., <code>&gt;= 0</code>)</li>\n</ul>\n","msgtype":"m.text"},"ts":1681159427654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lmvTpbsci2a3G89KMS6QZqHDuALo9NPPwLUHai8TbOg"},
{"content":{"body":"The design is based on C#, Scala, and Rust.","msgtype":"m.text"},"ts":1681159466316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZhn3gI_3To0HKby5yjZtlQwhZLavO0RGmaBDo6dn0Y"},
{"content":{"body":"https://gist.github.com/rbuckton/76a0836b799cedcb882fbccdaac57552#ron-bucktons-pattern-matching-with-extractor-objects-epics-proposal has more details, plus a few extras I don't consider to be MVP.","msgtype":"m.text"},"ts":1681159498260,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$APMlcTMCYSigK4w-HhWOSNU7Th1YHHJZ8bDVM_AHaiA"},
{"content":{"body":"In my proposed syntax, you don't need special syntax for `if` or `while`, because it would be handled by `is` expressions and `let` patterns. A `let` pattern introduces a `let` variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","format":"org.matrix.custom.html","formatted_body":"In my proposed syntax, you don't need special syntax for <code>if</code> or <code>while</code>, because it would be handled by <code>is</code> expressions and <code>let</code> patterns. A <code>let</code> pattern introduces a <code>let</code> variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","msgtype":"m.text"},"ts":1681159622502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QYOfaAZnrjye7sxmsf1Vg1DxeYZt_f6v3r0NhOo_sv4"},
{"content":{"body":"So you can easily write:\n```js\nif (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n```\nwithout special syntax for `if`.","format":"org.matrix.custom.html","formatted_body":"<p>So you can easily write:</p>\n<pre><code class=\"language-js\">if (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n</code></pre>\n<p>without special syntax for <code>if</code>.</p>\n","msgtype":"m.text"},"ts":1681159677829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g66oXdgOMZNsn1kpJLMksvwCi9E6tZm1-YMJ2iHJp5Y"},
{"content":{"body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an _IdentifierReference_.","format":"org.matrix.custom.html","formatted_body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an <em>IdentifierReference</em>.","msgtype":"m.text"},"ts":1681159726944,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kx1Ie7WdGDoZgBu2LrnibOXMTTXk082VZL0PCNob4Uk"},
{"content":{"body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., `a.b.c`) in addition to regular identifiers, much like _DecoratorMemberExpression_.","format":"org.matrix.custom.html","formatted_body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., <code>a.b.c</code>) in addition to regular identifiers, much like <em>DecoratorMemberExpression</em>.","msgtype":"m.text"},"ts":1681159760469,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RkIGq3WdLsO-UYkVRe4xdVKrL1cp2NpRHu-oWSYj8Io"},
{"content":{"body":"would you allow matching implicitly in assignment expressions, like `[let x, let y] = expr();`","format":"org.matrix.custom.html","formatted_body":"would you allow matching implicitly in assignment expressions, like <code>[let x, let y] = expr();</code>","msgtype":"m.text"},"ts":1681159821772,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1CADAEv_s9sdBdReO8fK0BlCNZyV_3JxW-jZpkf0qhU"},
{"content":{"body":"or that would be done just by `assert(expr() is [let x, let y])`","format":"org.matrix.custom.html","formatted_body":"or that would be done just by <code>assert(expr() is [let x, let y])</code>","msgtype":"m.text"},"ts":1681159847481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RMP-dLjt6zyHN4BFhPHnB31oqk5-wTsxq5SyYPAITDs"},
{"content":{"body":"No. That mixes destructuring with pattern matching.","msgtype":"m.text"},"ts":1681159849036,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yZvElciwZWBJms2u4dwPm-2G1KZLfAqHgJBU4QiOOmE"},
{"content":{"body":"Would it work in parameter positions?","msgtype":"m.text"},"ts":1681159866725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"},
{"content":{"body":"Its possible my proposal could be extended to support that in some way, I haven't really looked into it though.","msgtype":"m.text"},"ts":1681159870303,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Kql9kqmoOgHAm2IIkzfZSzQv6x6gEiPHDYtbVRWKQI"},
{"content":{"body":"> <@littledan:matrix.org> Would it work in parameter positions?\n\nNo, not without special syntax. Parameters already support binding patterns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Would it work in parameter positions?</blockquote></mx-reply>No, not without special syntax. Parameters already support binding patterns.","m.relates_to":{"m.in_reply_to":{"event_id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"}},"msgtype":"m.text"},"ts":1681159906026,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g2wgbwTGPm04gZN0qx8Ux_y8O9ThcuVMHNWE9usaD3M"},
{"content":{"body":"I'm also not convinced that makes sense to do.","msgtype":"m.text"},"ts":1681159924209,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_3gdkSeC5JKMYDV2tHgCNR6uwYboEqAEDJGZfpxPlNA"},
{"content":{"body":"I'm not entirely a fan of the idea to use patterns to support some kind of function overloading.","msgtype":"m.text"},"ts":1681159977353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n-pcO6ADzXb-CKmIVGe3IYX7jY1TpV_-7vv6BZBAGZA"},
{"content":{"body":"the phrase \"when you have a hammer, every problem looks like a nail\" comes to mind. ","msgtype":"m.text"},"ts":1681160062038,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-foYeqRL28F61e8gQQy7NmfJVMB-9dA4PMpaNnHxJ-E"},
{"content":{"body":"I'm not talking about function overloading...","msgtype":"m.text"},"ts":1681160092437,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CD3sOo3VH1ARgKTDcTq4_DpnXyatIllrCEnRGI2UITM"},
{"content":{"body":"You mentioned parameters though","msgtype":"m.text"},"ts":1681160117475,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wLmqZoOfoGWu_vFFBn_AGyLNxO8K2LL724gTsroM1ls"},
{"content":{"body":"I guess I'm surprised that my intuition that pattern matching should be supported everywhere where we bind things isn't held so widely by others. I can accept it but I don't understand it yet.","msgtype":"m.text"},"ts":1681160141878,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B7a4BJHrl6XtdyX6IvsMyUEI968JJXjN7SYD6oN6qrE"},
{"content":{"body":"yeah, this would be purely to fail by throwing","msgtype":"m.text"},"ts":1681160154447,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oNAnyG-570FEw7kJbWTpYoLJ7nU8HdSlTNc1bO6E2i0"},
{"content":{"body":"Binding and assignment are definite. They either happen or an error is thrown. Match patterns are conditional.","msgtype":"m.text"},"ts":1681160165124,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RRs7c4_J9dAcls-vhkeX1NuD2Bemt6jXqsujYk7R7VU"},
{"content":{"body":"it's pretty common across languages to reuse match patterns in this definite mode","msgtype":"m.text"},"ts":1681160201785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dWrT-gslaPN9NgJK82WBItzWhkNcOxficfBo-W_UmAs"},
{"content":{"body":"The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for assignments and bindings.","msgtype":"m.text"},"ts":1681160284208,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G9I_6IcKLJ_CatcBPkU2jyWW497TTuzaBfQ_M0m01Wc"},
{"content":{"body":" * The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for definite assignments and bindings.","m.new_content":{"body":"The time to do that would have been pre 2015, however. Unless we want to shoehorn pattern matching into destructuring as-is, we already have a \"pattern\" syntax for definite assignments and bindings.","msgtype":"m.text"},"m.relates_to":{"event_id":"$G9I_6IcKLJ_CatcBPkU2jyWW497TTuzaBfQ_M0m01Wc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160292296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zhd_TNsps3XrceEtFH3JHBtzWjWEhS5HyKXAD33p9PE"},
{"content":{"body":"By `as-is`, I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":"By <code>as-is</code>, I mean: <code>const { x: 10, y } = point;</code>","msgtype":"m.text"},"ts":1681160318806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g7c2ECe4KTL1b5SxTDLG-S03r0N9vsEkyg1kJ7IHhHM"},
{"content":{"body":"well, I guess Tab's proposal is, you use `when` to switch to the other mode","format":"org.matrix.custom.html","formatted_body":"well, I guess Tab's proposal is, you use <code>when</code> to switch to the other mode","msgtype":"m.text"},"ts":1681160327661,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fwNiDqyD2xm4cLrBElXF5ECixxHqNglCIJcKqrzYGFU"},
{"content":{"body":" * By \"as-is\", I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":" * By &quot;as-is&quot;, I mean: <code>const { x: 10, y } = point;</code>","m.new_content":{"body":"By \"as-is\", I mean: `const { x: 10, y } = point;`","format":"org.matrix.custom.html","formatted_body":"By &quot;as-is&quot;, I mean: <code>const { x: 10, y } = point;</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$g7c2ECe4KTL1b5SxTDLG-S03r0N9vsEkyg1kJ7IHhHM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160330434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vBSHRuUQmgq5T4uxp0q9iRb0_3IMcCy4xD0NPmeKGdM"},
{"content":{"body":"definitely unfortunate to have a separate mode","msgtype":"m.text"},"ts":1681160345382,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$44tPAHeEuvnCNCDCI3UvlSUVijR6Bsb2T8vgsckRCOI"},
{"content":{"body":"I am not certain we should be flipping back and forth between modes. It will just be confusing.","msgtype":"m.text"},"ts":1681160354254,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fI7kau3GxPAw1nIb7BBO5ArFCouzeHF-GxPxwZgPaR0"},
{"content":{"body":"I don't really understand what would be more intuitive--to draw an analogy (usable in similar places) or contrast (use in complementary places)","msgtype":"m.text"},"ts":1681160371419,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ir991hFzR351Ou5dTmS-JvtymKOCrxMXKLOfdcghD-c"},
{"content":{"body":"We _could_ extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.","format":"org.matrix.custom.html","formatted_body":"We <em>could</em> extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.","msgtype":"m.text"},"ts":1681160396767,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4"},
{"content":{"body":"What I like about the explicit `when` is it makes a contrast clear locally each place pattern matching is used (even if in analogous places).","format":"org.matrix.custom.html","formatted_body":"What I like about the explicit <code>when</code> is it makes a contrast clear locally each place pattern matching is used (even if in analogous places).","msgtype":"m.text"},"ts":1681160421561,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gXDhouuQJ8BuN6tF28hmdsflIH6A9lVL9kpJqUk-USc"},
{"content":{"body":"> <@rbuckton:matrix.org> We _could_ extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.\n\nWhat do you mean by this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We <em>could</em> extend assignment and binding patterns, if we're willing to give up on some of the promises of pattern matching.</blockquote></mx-reply>What do you mean by this?","m.relates_to":{"m.in_reply_to":{"event_id":"$W3ODkd34mBcnUdbiHH2cB5Txa9QDoF-WiNfG5JbocL4"}},"msgtype":"m.text"},"ts":1681160440835,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p3U07VDE2PspJ9dcLZxJfs3-gtZTSK8DzVoF2TFoJHQ"},
{"content":{"body":"I'm not entirely partial to just tacking on a `when` keyword everywhere, either. It doesn't read well.","format":"org.matrix.custom.html","formatted_body":"I'm not entirely partial to just tacking on a <code>when</code> keyword everywhere, either. It doesn't read well.","msgtype":"m.text"},"ts":1681160441914,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Lf2rWtezigmn9Ywqwk6dTMKiPuSZJq5j5q8dC3NiEt0"},
{"content":{"body":"https://gist.github.com/rbuckton/fca8b4ecc4eb16422b01f2557203082b","msgtype":"m.text"},"ts":1681160462813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9U0-RLl1fky17zuzpMjkyLqhQCY2Af-KQtR02v0TkJU"},
{"content":{"body":"If we extend assignment and binding patterns to be the pattern matching mechanism, we lose out on exhaustiveness.","msgtype":"m.text"},"ts":1681160489386,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8QFTHgfNu1cBNZILsN1OjGv89Gfj81OmF7eb-43LQg4"},
{"content":{"body":"It also doesn't work well with free variables.","msgtype":"m.text"},"ts":1681160511545,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MTsE3AzWsQmVAq8AC4Gz-82QvtoYKgIAq5KYX4bXLek"},
{"content":{"body":"i.e., `{ x: Infinity, y } = point` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>{ x: Infinity, y } = point</code> will attempt to overwrite <code>Infinity</code> today.","msgtype":"m.text"},"ts":1681160535458,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JJTzeffX7K2QK34CRxf3SWZFYK_PhR7RxdceVbNNOeM"},
{"content":{"body":" * i.e., `({ x: Infinity, y } = point)` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":" * i.e., <code>({ x: Infinity, y } = point)</code> will attempt to overwrite <code>Infinity</code> today.","m.new_content":{"body":"i.e., `({ x: Infinity, y } = point)` will attempt to overwrite `Infinity` today.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: Infinity, y } = point)</code> will attempt to overwrite <code>Infinity</code> today.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JJTzeffX7K2QK34CRxf3SWZFYK_PhR7RxdceVbNNOeM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160544969,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-X493je5G1dmfT4SEt-fxAHsjPffW8sQRGROIWcyZyo"},
{"content":{"body":"I use C# as prior art for much of my syntax. C# has destructuring, but pattern matching is separate. ","msgtype":"m.text"},"ts":1681160605648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mKd2r76FuIyBP-JfzmE6Ym0r0TYQBhrLJCGny6wv4zA"},
{"content":{"body":"Yeah I agree that we can't just extend destructuring to become pattern matching. And we can emphasize the contrast by only allowing them in complementary syntax positions, if we want (possibly with allowances by making a form of extractor available outside patterns too)","msgtype":"m.text"},"ts":1681160614040,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wbkBOeJ5b9WKGqFHANHucc5_5o45opimqF-n4Z7PXa4"},
{"content":{"body":"yeah I should study C# more, and your doc looks interesting, will have to read it","msgtype":"m.text"},"ts":1681160627922,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VoOVmFrgJZy2os99uU53LuEVOlVC1KF05E_ba9pkOt4"},
{"content":{"body":"In C#, you can do `let (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>let (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","msgtype":"m.text"},"ts":1681160633803,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q"},
{"content":{"body":"In Rust, you can use some patterns in a `let` or `let mut`, but if you actually want conditional patterns, you have to use a `if-let` statement (which is covered by `if..is` in my proposal).","format":"org.matrix.custom.html","formatted_body":"In Rust, you can use some patterns in a <code>let</code> or <code>let mut</code>, but if you actually want conditional patterns, you have to use a <code>if-let</code> statement (which is covered by <code>if..is</code> in my proposal).","msgtype":"m.text"},"ts":1681160704975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MD_r2hLGJgVYR1SBp0BOp4grTzRk_F4QS3y1VofnijI"},
{"content":{"body":" * In C#, you can do `var (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":" * In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","m.new_content":{"body":"In C#, you can do `var (x, y) = (10, 20)`, but not `let (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>let (10, y) = (10, 20)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160751748,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6Q8VNib5quptm0Pi3Nke8DQ09F84Wh1AN6WROMJcMEc"},
{"content":{"body":" * In C#, you can do `var (x, y) = (10, 20)`, but not `var (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":" * In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>var (10, y) = (10, 20)</code>.","m.new_content":{"body":"In C#, you can do `var (x, y) = (10, 20)`, but not `var (10, y) = (10, 20)`.","format":"org.matrix.custom.html","formatted_body":"In C#, you can do <code>var (x, y) = (10, 20)</code>, but not <code>var (10, y) = (10, 20)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5UwvIKm5IaQBSagsdHp7KCJfs_48EagVlxe814FoX_Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681160763038,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GWxde88bPVFN9RXHt-7iPdIGBaCGzQD5a4HfUBmQ9-4"},
{"content":{"body":"OK, I think I'm starting to understand","msgtype":"m.text"},"ts":1681160777527,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wIfhggWRCz4bJCsmBQ34YBSggW286Wta8f8ZcJ2bY8w"},
{"content":{"body":"do you think extractors could use the same protocol whether used in pattern or destructuring context?","msgtype":"m.text"},"ts":1681160795030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM"},
{"content":{"body":"If pattern matching is its own thing, separate from destructuring, then you can define a consistent and pure pattern language that is limited to `is` and `match`.","format":"org.matrix.custom.html","formatted_body":"If pattern matching is its own thing, separate from destructuring, then you can define a consistent and pure pattern language that is limited to <code>is</code> and <code>match</code>.","msgtype":"m.text"},"ts":1681160829526,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FphHAr4bg4YfbYpornt73KtwJznz2gy_31y95IZOexw"},
{"content":{"body":"huh, pure?","msgtype":"m.text"},"ts":1681160859135,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A_iegMOQH9kV6vSQnRmnnMjFbDiZAD9sE5H8GDFFZmM"},
{"content":{"body":"> <@littledan:matrix.org> do you think extractors could use the same protocol whether used in pattern or destructuring context?\n\nYes. That's what C# and Scala do.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>do you think extractors could use the same protocol whether used in pattern or destructuring context?</blockquote></mx-reply>Yes. That's what C# and Scala do.","m.relates_to":{"m.in_reply_to":{"event_id":"$2E5_0oE-eXVCEYwzAfaqPehIXKCrZBYj641UtkqXQiM"}},"msgtype":"m.text"},"ts":1681160867108,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CYMWK9uUEwYQ3ZsbBAHpRunWB-WBAhgvmbYFnsWCZT0"},
{"content":{"body":"By \"pure\" I mean not polluted with existing destructuring caveats.","msgtype":"m.text"},"ts":1681160893598,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fxpd4-ljWZxAoC_gf6Dz7agW7sXYyUTY9gQrCh6SBuM"},
{"content":{"body":"such as exhaustiveness.","msgtype":"m.text"},"ts":1681160907253,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WHWXdwEMOdKq0_OYRfDUxk_qqOH1qD2Rq_MkV8DCWEw"},
{"content":{"body":"OK, thanks, I think I see what you're getting at. Will need to think on this a bit more.","msgtype":"m.text"},"ts":1681160965456,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vnFQGxZ5qhpGlvR1FTmvq9hMzdUfjWjymBD1v6yIxTw"},
{"content":{"body":" * By \"pure\" I mean \"not polluted with existing destructuring caveats\".","m.new_content":{"body":"By \"pure\" I mean \"not polluted with existing destructuring caveats\".","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fxpd4-ljWZxAoC_gf6Dz7agW7sXYyUTY9gQrCh6SBuM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161008245,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$e5mTMhSisYfDUGb2Dvp-HiUtKbiBaNSi2txQvdlh6wg"},
{"content":{"body":"yeah I guess then I agree that it'd be valid for us to start with `is` + extractors","format":"org.matrix.custom.html","formatted_body":"yeah I guess then I agree that it'd be valid for us to start with <code>is</code> + extractors","msgtype":"m.text"},"ts":1681161143020,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CG-zzWKNvIGsxuyU4aPbzQYoBE4rGXlASd5cQFCae0"},
{"content":{"body":"There may be some syntax issues with https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf too. If `when` is only allowed in a binding pattern, we lose parity with assignment patterns. If `when` is allowed in assignment patterns, then you have a syntax conflict with array patterns.","format":"org.matrix.custom.html","formatted_body":"There may be some syntax issues with https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf too. If <code>when</code> is only allowed in a binding pattern, we lose parity with assignment patterns. If <code>when</code> is allowed in assignment patterns, then you have a syntax conflict with array patterns.","msgtype":"m.text"},"ts":1681161155595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jq0oPLAZbkMFbswpoY2ARsuE-7dLMrAAV0mCxa7DTLc"},
{"content":{"body":"i.e., `({ x: when [y] } = value)` is already legal Js.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: when [y] } = value)</code> is already legal Js.","msgtype":"m.text"},"ts":1681161177004,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$51otlVaxZmZpi5dupszGLX22Wm-aF3JqoDUa1J5HfZY"},
{"content":{"body":" * i.e., `({ x: when [y] } = value)` is already legal JS.","format":"org.matrix.custom.html","formatted_body":" * i.e., <code>({ x: when [y] } = value)</code> is already legal JS.","m.new_content":{"body":"i.e., `({ x: when [y] } = value)` is already legal JS.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>({ x: when [y] } = value)</code> is already legal JS.","msgtype":"m.text"},"m.relates_to":{"event_id":"$51otlVaxZmZpi5dupszGLX22Wm-aF3JqoDUa1J5HfZY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161179618,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iB6hYXiiSsSWta_DvsJWt9wj3V0LXAlb3UKJiV6EgmE"},
{"content":{"body":"Since it doesn't provide parity with assignment patterns, I'm not sure \"anywhere you have a binding\" is viable.","msgtype":"m.text"},"ts":1681161242246,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V_ME9meLPY6qFIcm26Fyfg2w1hmFzlJubQcSA0OXrZs"},
{"content":{"body":"> <@rbuckton:matrix.org> What are the goals for pattern matching now? It sounds like we're dialing up the complexity of the proposal quite a bit.\n\nOne new goal: integrate patterns more into the language, so it feels more natural rather than a one-off.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What are the goals for pattern matching now? It sounds like we&#39;re dialing up the complexity of the proposal quite a bit.</blockquote></mx-reply>One new goal: integrate patterns more into the language, so it feels more natural rather than a one-off.","m.relates_to":{"m.in_reply_to":{"event_id":"$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA"}},"msgtype":"m.text"},"ts":1681161246734,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$e0pddou0wWJzgMDFxNJHsCNDgrv4m16q9gGnWbqVDTg"},
{"content":{"body":"`is` creating bindings sounds very unintuitive","format":"org.matrix.custom.html","formatted_body":"<code>is</code> creating bindings sounds very unintuitive","msgtype":"m.text"},"ts":1681161280105,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vrZWxLf8Ur9I4c2jdCMov_P0f_epXtEVLgv_m75MUjg"},
{"content":{"body":"it's a test, like `===`, it shouldn't have any side effects","format":"org.matrix.custom.html","formatted_body":"it's a test, like <code>===</code>, it shouldn't have any side effects","msgtype":"m.text"},"ts":1681161301380,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1OXIdvx9GzAAhnBSJLmoaHAWYlf_atCQJMFakumQkBQ"},
{"content":{"body":"> <@ljharb:matrix.org> `is` creating bindings sounds very unintuitive\n\nThis is my concern. It would be really nice if it worked! I think it'd be clear a binding is created if there is an explicit `let` or `const` in it, though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$vrZWxLf8Ur9I4c2jdCMov_P0f_epXtEVLgv_m75MUjg?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>is</code> creating bindings sounds very unintuitive</blockquote></mx-reply>This is my concern. It would be really nice if it worked! I think it'd be clear a binding is created if there is an explicit <code>let</code> or <code>const</code> in it, though.","m.relates_to":{"m.in_reply_to":{"event_id":"$vrZWxLf8Ur9I4c2jdCMov_P0f_epXtEVLgv_m75MUjg"}},"msgtype":"m.text"},"ts":1681161324664,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wnVtF9_yC9YpNSVQKfZnjIQj9PCbnduY9W3oFUfIYK0"},
{"content":{"body":"It has prior art with a fair amount of usage, so its not new.","msgtype":"m.text"},"ts":1681161327579,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7J6jaMUYnAvDXpIEyZbySXdxYavbCzc157fAvodH6vM"},
{"content":{"body":"> <@ljharb:matrix.org> `is` creating bindings sounds very unintuitive\n\n * This is my concern. It would be really nice if it worked! I think it'd be somewhat clear a binding is created if there is an explicit `let` or `const` in it, though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$vrZWxLf8Ur9I4c2jdCMov_P0f_epXtEVLgv_m75MUjg?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>is</code> creating bindings sounds very unintuitive</blockquote></mx-reply> * This is my concern. It would be really nice if it worked! I think it'd be somewhat clear a binding is created if there is an explicit <code>let</code> or <code>const</code> in it, though.","m.new_content":{"body":"This is my concern. It would be really nice if it worked! I think it'd be somewhat clear a binding is created if there is an explicit `let` or `const` in it, though.","format":"org.matrix.custom.html","formatted_body":"This is my concern. It would be really nice if it worked! I think it'd be somewhat clear a binding is created if there is an explicit <code>let</code> or <code>const</code> in it, though.","msgtype":"m.text"},"m.relates_to":{"event_id":"$wnVtF9_yC9YpNSVQKfZnjIQj9PCbnduY9W3oFUfIYK0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161343082,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AaNRSnIp3te4udUAEf3D3l7Tc_nXU5EMLHAvUuXA7D4"},
{"content":{"body":"prior art in other languages is useful to note but doesn't obviate JS idiom and confusion","msgtype":"m.text"},"ts":1681161351351,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Eu31wEL5DrZD9USDRp3AHKUB12Ril0tIfiCXzKE1GYs"},
{"content":{"body":"I don't think \"variables are usually declared in separate statements\" is a JS-specific thing. At least, it doesn't separate JS and C#.","msgtype":"m.text"},"ts":1681161380263,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F8S5poc2hxOFdcZOsRzIOakYfZurA-uW6AMVEFfK-eo"},
{"content":{"body":"the way C# added patterns to the language is very similar to how JS is trying to add patterns to the language.","msgtype":"m.text"},"ts":1681161383238,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oMQgencwb07EfcmgDv3Xp7m1dPASmOn5dqdhSNRWJf8"},
{"content":{"body":"still, I haven't fully shaken my surprised-ness at the `x is let y` syntax","format":"org.matrix.custom.html","formatted_body":"still, I haven't fully shaken my surprised-ness at the <code>x is let y</code> syntax","msgtype":"m.text"},"ts":1681161404412,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SLcfKhD5IAjyM-VkMKFIRpndnUjSoktzX--XFopTXII"},
{"content":{"body":"that doesn't mean we must, or should, follow all of C#'s choices","msgtype":"m.text"},"ts":1681161410170,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I_j-g4R2WCDTKUOPj7DW1NuYu7IMJwt5C-Rgsx4xAac"},
{"content":{"body":"I find all of the `when` extensions to binding patterns far more surprising.","format":"org.matrix.custom.html","formatted_body":"I find all of the <code>when</code> extensions to binding patterns far more surprising.","msgtype":"m.text"},"ts":1681161424251,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xwpFhG9ErT2AnnhuRHKjuYj2vM1kwcQhGoq7aUXY3r4"},
{"content":{"body":"why?","msgtype":"m.text"},"ts":1681161449292,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0Z0r7kTJ03ylvjXvJaLtN7cenY7yV6FuS3O7Xgnqaok"},
{"content":{"body":"\"do this thing\" vs \"do this thing when X matches\"?","msgtype":"m.text"},"ts":1681161463139,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jSCjTPoazMVHC3YzJMg0oDS2V4G5-hWrX9AjyTZ80QI"},
{"content":{"body":"Also, an expression form of `let` is something I've often seen requested, including from Anders Hejlsberg.","format":"org.matrix.custom.html","formatted_body":"Also, an expression form of <code>let</code> is something I've often seen requested, including from Anders Hejlsberg.","msgtype":"m.text"},"ts":1681161483787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rqqAK6C7XeFdz1O3nmznbBPd6XECHVW-Vq_f_Wwe25A"},
{"content":{"body":"we already have an expression form of var, and it's bad. i wouldn't ever want to see an expression form of let or const, personally.","msgtype":"m.text"},"ts":1681161518588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kyUP6nI_JTm72oY2OXKP0cAUsI0udLDoR3qFIFxzvkM"},
{"content":{"body":" * we already have an expression form of var, and it's bad. i wouldn't ever want to see an expression form of let or const, personally. (i guess it's assignment, not var, but still)","m.new_content":{"body":"we already have an expression form of var, and it's bad. i wouldn't ever want to see an expression form of let or const, personally. (i guess it's assignment, not var, but still)","msgtype":"m.text"},"m.relates_to":{"event_id":"$kyUP6nI_JTm72oY2OXKP0cAUsI0udLDoR3qFIFxzvkM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161537478,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8hbThmmj4pbokD_Kio1lYzIHXJHTbItVmMh3BGZFQec"},
{"content":{"body":"i don't like conflating \"creating bindings\" with \"expressions\", personally.","msgtype":"m.text"},"ts":1681161557918,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yMzaVaNKtdH6lfiDN8Cj2vDpcgw6hPBiESFwTmgCOQo"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, an expression form of `let` is something I've often seen requested, including from Anders Hejlsberg.\n\nI guess I'd expect an expression form of let to have a clear analogy to the statement form. And that's why `is` creating bindings feels a little surprising to me--it reads kinda backwards. OTOH it is *really* nice to have the variables marked this way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rqqAK6C7XeFdz1O3nmznbBPd6XECHVW-Vq_f_Wwe25A?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, an expression form of <code>let</code> is something I've often seen requested, including from Anders Hejlsberg.</blockquote></mx-reply>I guess I'd expect an expression form of let to have a clear analogy to the statement form. And that's why <code>is</code> creating bindings feels a little surprising to me--it reads kinda backwards. OTOH it is <em>really</em> nice to have the variables marked this way.","m.relates_to":{"m.in_reply_to":{"event_id":"$rqqAK6C7XeFdz1O3nmznbBPd6XECHVW-Vq_f_Wwe25A"}},"msgtype":"m.text"},"ts":1681161579291,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NdCK7CCtYQ_K_a-qodJBZoGUkFhsA-T_2gmcau2LS7s"},
{"content":{"body":"> <@ljharb:matrix.org> \"do this thing\" vs \"do this thing when X matches\"?\n\nThe keyword and its position are odd and don't align with the language, reducing readability. It feels more like trying to shove a keyword in to make things work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jSCjTPoazMVHC3YzJMg0oDS2V4G5-hWrX9AjyTZ80QI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>&quot;do this thing&quot; vs &quot;do this thing when X matches&quot;?</blockquote></mx-reply>The keyword and its position are odd and don't align with the language, reducing readability. It feels more like trying to shove a keyword in to make things work.","m.relates_to":{"m.in_reply_to":{"event_id":"$jSCjTPoazMVHC3YzJMg0oDS2V4G5-hWrX9AjyTZ80QI"}},"msgtype":"m.text"},"ts":1681161605811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$74Osidn3jN0jdZSEw1m-YWYkAUxkaRxK-kCdtvBfaMU"},
{"content":{"body":"what alignment with the language would you prefer to follow?","msgtype":"m.text"},"ts":1681161630865,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oAO3YCeIO0uADu6VNFHlL4Nhnmz2ovDAvhQWJC1J0mI"},
{"content":{"body":"i'm not sure we really have anything like this already - conditionally doing a thing, statically","msgtype":"m.text"},"ts":1681161648023,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sjsnqwn_e2mF6nBY87QKhlE122K23T3XLzdOowdMEas"},
{"content":{"body":"> <@littledan:matrix.org> I guess I'd expect an expression form of let to have a clear analogy to the statement form. And that's why `is` creating bindings feels a little surprising to me--it reads kinda backwards. OTOH it is *really* nice to have the variables marked this way.\n\nC#'s usage also evolved from `out` parameters, i.e.:\n\n```cs\nif (dictionary.TryGetValue(key, out string x))\n{\n  Console.WriteLine(x);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$NdCK7CCtYQ_K_a-qodJBZoGUkFhsA-T_2gmcau2LS7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess I'd expect an expression form of let to have a clear analogy to the statement form. And that's why <code>is</code> creating bindings feels a little surprising to me--it reads kinda backwards. OTOH it is <em>really</em> nice to have the variables marked this way.</blockquote></mx-reply><p>C#'s usage also evolved from <code>out</code> parameters, i.e.:</p>\n<pre><code class=\"language-cs\">if (dictionary.TryGetValue(key, out string x))\n{\n  Console.WriteLine(x);\n}\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$NdCK7CCtYQ_K_a-qodJBZoGUkFhsA-T_2gmcau2LS7s"}},"msgtype":"m.text"},"ts":1681161673426,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4sJH08bD2msiBE6xoNeohAM86rQ2XbsXWRu3t99xonI"},
{"content":{"body":"not a compelling inspiration :-/","msgtype":"m.text"},"ts":1681161704209,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kPSII4DJ-alUxNrUUxCZsX4vo7J8H9P-m1C_BICakMc"},
{"content":{"body":"> <@ljharb:matrix.org> what alignment with the language would you prefer to follow?\n\nMost of the JS language (and most C-derived languages) tend to follow english-language left-to-right reading order.  ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oAO3YCeIO0uADu6VNFHlL4Nhnmz2ovDAvhQWJC1J0mI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what alignment with the language would you prefer to follow?</blockquote></mx-reply>Most of the JS language (and most C-derived languages) tend to follow english-language left-to-right reading order.","m.relates_to":{"m.in_reply_to":{"event_id":"$oAO3YCeIO0uADu6VNFHlL4Nhnmz2ovDAvhQWJC1J0mI"}},"msgtype":"m.text"},"ts":1681161776184,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a0WsFz7JNSF64B65XY__8uV3LxVOF9HfbTgGzrDYYO4"},
{"content":{"body":"that is true","msgtype":"m.text"},"ts":1681161795810,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$87jsUNMBQH-V4S-kMMrDd-JLePlMy7ksgPQME_9SJmc"},
{"content":{"body":"altho `do x, when y` is pretty naturally english language","format":"org.matrix.custom.html","formatted_body":"altho <code>do x, when y</code> is pretty naturally english language","msgtype":"m.text"},"ts":1681161807923,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7jJAQRhhbJdloKjlitDmS-td8pgC6T2yXLUWyN5DD14"},
{"content":{"body":"much like `do/while` loops","format":"org.matrix.custom.html","formatted_body":"much like <code>do/while</code> loops","msgtype":"m.text"},"ts":1681161815847,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Elibm94UXKnCDJnTbPyLNI4WjfogdbzjLCANOcxv5qI"},
{"content":{"body":"seems aligned to me","msgtype":"m.text"},"ts":1681161822921,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CcA5UMh5tipuR1ORASaZVCgg31EPxJgTF-pmSzQ6QlU"},
{"content":{"body":"\"what is really natural language-like\" is sort of a never-ending rabithole","msgtype":"m.text"},"ts":1681161839083,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q_-r4KxelZQz1q_aGlFyqE6_i2CuQzxUWMih81DuC6E"},
{"content":{"body":"and \"left to right\" sort of doesn't add anything","msgtype":"m.text"},"ts":1681161848814,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-tFdaB5Ev9MeE_30Iv0FfeSPa-WE4X-IVog2oPIj2os"},
{"content":{"body":"> <@ljharb:matrix.org> altho `do x, when y` is pretty naturally english language\n\nExcept the syntax proposed isn't that. its `do when y x`, which makes no sense as a reader.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7jJAQRhhbJdloKjlitDmS-td8pgC6T2yXLUWyN5DD14?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>altho <code>do x, when y</code> is pretty naturally english language</blockquote></mx-reply>Except the syntax proposed isn't that. its <code>do when y x</code>, which makes no sense as a reader.","m.relates_to":{"m.in_reply_to":{"event_id":"$7jJAQRhhbJdloKjlitDmS-td8pgC6T2yXLUWyN5DD14"}},"msgtype":"m.text"},"ts":1681161849738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-79UJ-O41ZS50zMHB5INOYDBsArGW1sOsOhL-3bZpYk"},
{"content":{"body":"maybe i'm unclear on what proposed syntax you're looking at","msgtype":"m.text"},"ts":1681161864072,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RUCUyZWLXo3hvjMExOo2pJakYIJ3dJKVlyiEbfC8b9Y"},
{"content":{"body":"i agree `do when y x` wouldn't make sense","format":"org.matrix.custom.html","formatted_body":"i agree <code>do when y x</code> wouldn't make sense","msgtype":"m.text"},"ts":1681161869116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8HxnnAAILjlJ2xkokdf56Cm3hbh2WaHyo9yc4f_Usc8"},
{"content":{"body":"like, is f(x) or x.f() more left-to-right?","msgtype":"m.text"},"ts":1681161872001,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$84i02if2rZI2qXmdbTPa761xYo8y0Yz3LNctBgNL-8Q"},
{"content":{"body":"`let when 10 = y` is Tab's proposed syntax","format":"org.matrix.custom.html","formatted_body":"<code>let when 10 = y</code> is Tab's proposed syntax","msgtype":"m.text"},"ts":1681161890576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F1EZy8UwimIBfP5hbfGSO3yWIhY1bjc-j1VStWdqIAY"},
{"content":{"body":" * `let when y = x` is Tab's proposed syntax","format":"org.matrix.custom.html","formatted_body":" * <code>let when y = x</code> is Tab's proposed syntax","m.new_content":{"body":"`let when y = x` is Tab's proposed syntax","format":"org.matrix.custom.html","formatted_body":"<code>let when y = x</code> is Tab's proposed syntax","msgtype":"m.text"},"m.relates_to":{"event_id":"$F1EZy8UwimIBfP5hbfGSO3yWIhY1bjc-j1VStWdqIAY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681161899644,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WIQk5NeV82ucPLdk6IqYU8z39P2MNBT6VogHrSnY9So"},
{"content":{"body":"oh. well yeah i'm not a big fan of let when and friends anyways","msgtype":"m.text"},"ts":1681161903462,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$etLdPp6zCzyQ0632c6-DBEoDAZ03NGefu12_QL0aSh0"},
{"content":{"body":"i think pattern matching's primary value is in the construct, a predicate test, and in arg binding places (fns, catch)","msgtype":"m.text"},"ts":1681161934437,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$InHiwVegMuWdSzRUv5wI4vygWVovvOOqkqUjJW8ZwbU"},
{"content":{"body":"> <@littledan:matrix.org> like, is f(x) or x.f() more left-to-right?\n\nThat's all dependent. `toss(ball)` makes sense, as does `car.Start()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$84i02if2rZI2qXmdbTPa761xYo8y0Yz3LNctBgNL-8Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>like, is f(x) or x.f() more left-to-right?</blockquote></mx-reply>That's all dependent. <code>toss(ball)</code> makes sense, as does <code>car.Start()</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$84i02if2rZI2qXmdbTPa761xYo8y0Yz3LNctBgNL-8Q"}},"msgtype":"m.text"},"ts":1681161950638,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x5OlDlSqkQ1mkekvTjEQ9lQoGL6aVsEcVnhJYSYZThk"},
{"content":{"body":"as does `start(car)` :-p","format":"org.matrix.custom.html","formatted_body":"as does <code>start(car)</code> :-p","msgtype":"m.text"},"ts":1681161963862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZuepYhZtj-AZB4V69kivLl6PMT_TBCyyWhU3ro-Ce-M"},
{"content":{"body":"ljharb: Do you like Ron's idea of having extractors in destructuring as well?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Do you like Ron's idea of having extractors in destructuring as well?","msgtype":"m.text"},"ts":1681161969867,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7KBPwi4MZKhOwdJm3q_0wf4CG3h2R8_VvdFfVIq6ZUE"},
{"content":{"body":"> <@ljharb:matrix.org> i think pattern matching's primary value is in the construct, a predicate test, and in arg binding places (fns, catch)\n\nI agree with `catch`, not with functions though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$InHiwVegMuWdSzRUv5wI4vygWVovvOOqkqUjJW8ZwbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i think pattern matching&#39;s primary value is in the construct, a predicate test, and in arg binding places (fns, catch)</blockquote></mx-reply>I agree with <code>catch</code>, not with functions though.","m.relates_to":{"m.in_reply_to":{"event_id":"$InHiwVegMuWdSzRUv5wI4vygWVovvOOqkqUjJW8ZwbU"}},"msgtype":"m.text"},"ts":1681161970557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b5lPS2qVI0BYzTttqirJFhQ1jrDfQPXBX4TE8qEzq6Q"},
{"content":{"body":"the value in functions is that it would throw if the argument didn't match","msgtype":"m.text"},"ts":1681161988109,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zaWVvyqKJeXnUHt-hmd9i89BWvrHaBfJeXnVMAoDSqw"},
{"content":{"body":"i'm not sure which idea you're referring to. i'm still unconvinced about extractors in general.","m.relates_to":{"event_id":"$7KBPwi4MZKhOwdJm3q_0wf4CG3h2R8_VvdFfVIq6ZUE","is_falling_back":true,"m.in_reply_to":{"event_id":"$7KBPwi4MZKhOwdJm3q_0wf4CG3h2R8_VvdFfVIq6ZUE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681162010862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ExD8TrO-szTK_QdmVr6lGy70UTzrbBzCfBdr_5qygC8"},
{"content":{"body":"> <@ljharb:matrix.org> the value in functions is that it would throw if the argument didn't match\n\nmaybe extractors in destructuring would be enough for this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$zaWVvyqKJeXnUHt-hmd9i89BWvrHaBfJeXnVMAoDSqw?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the value in functions is that it would throw if the argument didn&#39;t match</blockquote></mx-reply>maybe extractors in destructuring would be enough for this?","m.relates_to":{"m.in_reply_to":{"event_id":"$zaWVvyqKJeXnUHt-hmd9i89BWvrHaBfJeXnVMAoDSqw"}},"msgtype":"m.text"},"ts":1681162019424,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Tq8NYEhhr9p00q02LKspTGJV7-GnCXiM_dYFvYXZa2w"},
{"content":{"body":"there is a *lot* of runtime argument typechecking code that matching in function args would help obviate","format":"org.matrix.custom.html","formatted_body":"there is a <em>lot</em> of runtime argument typechecking code that matching in function args would help obviate","msgtype":"m.text"},"ts":1681162034380,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jIkRVnmmLTSpbftRfVCwgFrFr6wtzu-5LvLTQ0-W7f0"},
{"content":{"body":"`car.Start()` is more like a demand, i.e. \"Ron, call your father\"","format":"org.matrix.custom.html","formatted_body":"<code>car.Start()</code> is more like a demand, i.e. &quot;Ron, call your father&quot;","msgtype":"m.text"},"ts":1681162036537,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5tlgnJGov6Z2vm7Iv06ouExXwIOMeez9QcR5Gzx_k7g"},
{"content":{"body":"> <@ljharb:matrix.org> there is a *lot* of runtime argument typechecking code that matching in function args would help obviate\n\nI don't think patterns, destructuring, or extractors are the answer to that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jIkRVnmmLTSpbftRfVCwgFrFr6wtzu-5LvLTQ0-W7f0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>there is a <em>lot</em> of runtime argument typechecking code that matching in function args would help obviate</blockquote></mx-reply>I don't think patterns, destructuring, or extractors are the answer to that.","m.relates_to":{"m.in_reply_to":{"event_id":"$jIkRVnmmLTSpbftRfVCwgFrFr6wtzu-5LvLTQ0-W7f0"}},"msgtype":"m.text"},"ts":1681162058187,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XWCjtctww5nHT32vUPb1uYw60x_vRyRk9303ahVgHxE"},
{"content":{"body":"I think decorators are better for that.","msgtype":"m.text"},"ts":1681162069919,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ulh3yq6I7madB8BH3BbVNhS6RUr1lFTqsocrnblnQ1c"},
{"content":{"body":"i agree decorators would also solve it. but i don't think they're a better solution","msgtype":"m.text"},"ts":1681162081808,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8YRO4N3BvJ7sb_gfFoC5e5sfMBM-BtiztEt-JlTHvKI"},
{"content":{"body":"Because decorators allow for reflection. Patterns/extractors/etc. will not.","msgtype":"m.text"},"ts":1681162087299,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1AMytXNE9xNq6bwEdRUrkjudixoOhsXsQaGgAg0Q1TY"},
{"content":{"body":"because i'm not decorating an argument. i'm matching against it.","msgtype":"m.text"},"ts":1681162091673,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ib8-MeAdFJk8_JvRnXdNmf33S4h8EnRTxVArQB3fecg"},
{"content":{"body":"I don't think you're matching against it either.","msgtype":"m.text"},"ts":1681162104648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KE0wBVrOrkkMCBs4iJl2_UJiE3cAsB530U2SeKUj6f4"},
{"content":{"body":"and that's part of the benefit - i want less reflection. dynamism makes code harder to read.","msgtype":"m.text"},"ts":1681162114782,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_qEACSWf7XnGoVxM0IlgWL2r0-w85C-iaSyU33rcj_w"},
{"content":{"body":"You _bind_ an argument to a parameter.","format":"org.matrix.custom.html","formatted_body":"You <em>bind</em> an argument to a parameter.","msgtype":"m.text"},"ts":1681162115784,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LYP9zOk5bydioG045fPeaxf1d2QaohcsIwH0a4Bx7H8"},
{"content":{"body":"i don't, the engine does.","msgtype":"m.text"},"ts":1681162125744,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n5qCyFJCxrunFpuP3ClClfMlXORygfBvTUc_7fHakks"},
{"content":{"body":"i validate it and decide if my function throws or not.","msgtype":"m.text"},"ts":1681162132679,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$M_JA988Gp9jtrumHS-vDSx8Gc7cPiiYOWOhO8c2vDng"},
{"content":{"body":"> <@ljharb:matrix.org> and that's part of the benefit - i want less reflection. dynamism makes code harder to read.\n\nI strongly disagree. JS suffers from a lack of reflective capabilities.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$_qEACSWf7XnGoVxM0IlgWL2r0-w85C-iaSyU33rcj_w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and that&#39;s part of the benefit - i want less reflection. dynamism makes code harder to read.</blockquote></mx-reply>I strongly disagree. JS suffers from a lack of reflective capabilities.","m.relates_to":{"m.in_reply_to":{"event_id":"$_qEACSWf7XnGoVxM0IlgWL2r0-w85C-iaSyU33rcj_w"}},"msgtype":"m.text"},"ts":1681162138451,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xT0xJ317P0MVkGFqMelwk55IpYDaec2WvIr6LC33ytc"},
{"content":{"body":"those two statements aren't in conflict","msgtype":"m.text"},"ts":1681162148793,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vJox4kyriGaD-L1dPjBd_1pqTOpqny_y8AX5V3A_ids"},
{"content":{"body":"i'm not saying i want to forbid reflection, i'm saying i actively want solutions that disallow it. it's fine if there's *also* solutions that allow it.","format":"org.matrix.custom.html","formatted_body":"i'm not saying i want to forbid reflection, i'm saying i actively want solutions that disallow it. it's fine if there's <em>also</em> solutions that allow it.","msgtype":"m.text"},"ts":1681162179566,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rWHHhU44QcAZhftwLL2-BW5cP8ieDMvL-aICrObZWkM"},
{"content":{"body":"i can (and do) use a linter to prevent patterns i don't want in my code. but i want static structural validation of arguments, often.","msgtype":"m.text"},"ts":1681162211917,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zYtfsfdHHwRu8OWgXwlzC62kHGLW131lzXCHBBi2O58"},
{"content":{"body":"well, to be fair, the right decorator library would validate arguments but also not be reflectable","msgtype":"m.text"},"ts":1681162238843,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-eVXpCDXG3v-vQPCJ3Zd-DMCqKZrPCTOsxKNfDoz1u4"},
{"content":{"body":"(or, only reflect to certain parties)","msgtype":"m.text"},"ts":1681162252999,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KEjalBaI2FyM77R_G651kjOhW5iFvYZsOM9VuG-fFJ0"},
{"content":{"body":"I'm not 100% opposed to finding a way to support patterns on parameters, but I do think having it for a v1 or MVP will significantly delay or kill the proposal as there are too many complexities it introduces.","msgtype":"m.text"},"ts":1681162462949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gcdvyQW8kBlKTDGfBIoIa_4L4x2yigliJvcb6swtGow"},
{"content":{"body":"Especially if function overloading is on the table.","msgtype":"m.text"},"ts":1681162479227,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oQLymC7v_9BehUDHRx8nGDX19Uys4YNE-xEVA13CKDU"},
{"content":{"body":"I think we're violently agreeing? since no one is opposing extractors in all destructuring contexts","msgtype":"m.text"},"ts":1681162494209,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ypBwXJRIPm9dNnq82N6Pn_-cJZzECIrTCuAGmbRFvJU"},
{"content":{"body":"However, I'm very motivated by `catch` patterns.","format":"org.matrix.custom.html","formatted_body":"However, I'm very motivated by <code>catch</code> patterns.","msgtype":"m.text"},"ts":1681162497279,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wFPOxjmysWH1YWiDZ-tBKDX8VbN6dDYBVYHQoUZs8tA"},
{"content":{"body":"I want extractors in destructuring and pattern matching.","msgtype":"m.text"},"ts":1681162508794,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oz5cRpit0WSIUCFEq3a8VIsgCLUHjXJSMXRnByxAG3c"},
{"content":{"body":"> <@rbuckton:matrix.org> I want extractors in destructuring and pattern matching.\n\nso, even if you think decorators are *better* for the use case, you think extractors should be there as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oz5cRpit0WSIUCFEq3a8VIsgCLUHjXJSMXRnByxAG3c?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I want extractors in destructuring and pattern matching.</blockquote></mx-reply>so, even if you think decorators are <em>better</em> for the use case, you think extractors should be there as well","m.relates_to":{"m.in_reply_to":{"event_id":"$oz5cRpit0WSIUCFEq3a8VIsgCLUHjXJSMXRnByxAG3c"}},"msgtype":"m.text"},"ts":1681162543069,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nutxEAJJsqi6Z_D35fVMy9DkT2JopeWyYzerSl8EVo8"},
{"content":{"body":"More like, Extractors are an evolution of destructuring, regardless of the status of pattern matching. It only makes sense to include them in pattern matching as well given the parity with `{}` and `[]`.","format":"org.matrix.custom.html","formatted_body":"More like, Extractors are an evolution of destructuring, regardless of the status of pattern matching. It only makes sense to include them in pattern matching as well given the parity with <code>{}</code> and <code>[]</code>.","msgtype":"m.text"},"ts":1681162555232,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YbyNIDL7lSmjqfY-viwC_HXzwRQ0n1eFQWziGEjhr9Y"},
{"content":{"body":"> <@rbuckton:matrix.org> Especially if function overloading is on the table.\n\nI'm not sure if this is the case? Anyway I'd hope function overloading reuses stuff from pattern matching","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oQLymC7v_9BehUDHRx8nGDX19Uys4YNE-xEVA13CKDU?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Especially if function overloading is on the table.</blockquote></mx-reply>I'm not sure if this is the case? Anyway I'd hope function overloading reuses stuff from pattern matching","m.relates_to":{"m.in_reply_to":{"event_id":"$oQLymC7v_9BehUDHRx8nGDX19Uys4YNE-xEVA13CKDU"}},"msgtype":"m.text"},"ts":1681162582476,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iYk6EUxBhnbyN-E5n64SJa9cVZ_MzsTUuqrmlfRAyx8"},
{"content":{"body":"> <@littledan:matrix.org> so, even if you think decorators are *better* for the use case, you think extractors should be there as well\n\nExtractors have a different purpose. Yes, there is overlap at the edges, but both features have different targets.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$nutxEAJJsqi6Z_D35fVMy9DkT2JopeWyYzerSl8EVo8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>so, even if you think decorators are <em>better</em> for the use case, you think extractors should be there as well</blockquote></mx-reply>Extractors have a different purpose. Yes, there is overlap at the edges, but both features have different targets.","m.relates_to":{"m.in_reply_to":{"event_id":"$nutxEAJJsqi6Z_D35fVMy9DkT2JopeWyYzerSl8EVo8"}},"msgtype":"m.text"},"ts":1681162606524,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W_bQ0_bzpAfC8BuwHmyoq5aK2qFNJHxzd7Wlz2P8I-Q"},
{"content":{"body":"> <@rbuckton:matrix.org> More like, Extractors are an evolution of destructuring, regardless of the status of pattern matching. It only makes sense to include them in pattern matching as well given the parity with `{}` and `[]`.\n\nWell, it's not that \"it only makes sense\", it's that they're essential for some core uses of pattern matching. Anyway as long as extractors are in both function parameters (maybe through destructuring) and in patterns, I think we all agree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$YbyNIDL7lSmjqfY-viwC_HXzwRQ0n1eFQWziGEjhr9Y?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>More like, Extractors are an evolution of destructuring, regardless of the status of pattern matching. It only makes sense to include them in pattern matching as well given the parity with <code>{}</code> and <code>[]</code>.</blockquote></mx-reply>Well, it's not that &quot;it only makes sense&quot;, it's that they're essential for some core uses of pattern matching. Anyway as long as extractors are in both function parameters (maybe through destructuring) and in patterns, I think we all agree","m.relates_to":{"m.in_reply_to":{"event_id":"$YbyNIDL7lSmjqfY-viwC_HXzwRQ0n1eFQWziGEjhr9Y"}},"msgtype":"m.text"},"ts":1681162642746,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RrqFVZ4OU8BkpB0nn2NUSPB6mfldt5a8o98_g4Ssypk"},
{"content":{"body":"> <@littledan:matrix.org> I'm not sure if this is the case? Anyway I'd hope function overloading reuses stuff from pattern matching\n\nFunction overloading and pattern matching will be a huge problem when coupled with generators.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$iYk6EUxBhnbyN-E5n64SJa9cVZ_MzsTUuqrmlfRAyx8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I'm not sure if this is the case? Anyway I'd hope function overloading reuses stuff from pattern matching</blockquote></mx-reply>Function overloading and pattern matching will be a huge problem when coupled with generators.","m.relates_to":{"m.in_reply_to":{"event_id":"$iYk6EUxBhnbyN-E5n64SJa9cVZ_MzsTUuqrmlfRAyx8"}},"msgtype":"m.text"},"ts":1681162643330,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E61ddniwCYUM_J8Etl9CDtBn5kW5X735DpUlDvibsiY"},
{"content":{"body":"Due to how argument evaluation occurs for generators.","msgtype":"m.text"},"ts":1681162664682,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VN-D8gDgVZ9tlPYEX-fKf5sq2J3KVZa7TEHmqqEq6ZY"},
{"content":{"body":"> <@rbuckton:matrix.org> However, I'm very motivated by `catch` patterns.\n\nthis will inevitably be tricky given that catch parameters already experience destructuring... but those are already bizarrely special-cased, so maybe that's OK.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$wFPOxjmysWH1YWiDZ-tBKDX8VbN6dDYBVYHQoUZs8tA?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>However, I'm very motivated by <code>catch</code> patterns.</blockquote></mx-reply>this will inevitably be tricky given that catch parameters already experience destructuring... but those are already bizarrely special-cased, so maybe that's OK.","m.relates_to":{"m.in_reply_to":{"event_id":"$wFPOxjmysWH1YWiDZ-tBKDX8VbN6dDYBVYHQoUZs8tA"}},"msgtype":"m.text"},"ts":1681162700341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8YqznF4s2Y3sYC3l_kKk-lOR0FeDnPw9BUyZAHkkgiE"},
{"content":{"body":"> <@rbuckton:matrix.org> Due to how argument evaluation occurs for generators.\n\nOK, so the matching happens earlier, what is the issue?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$VN-D8gDgVZ9tlPYEX-fKf5sq2J3KVZa7TEHmqqEq6ZY?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Due to how argument evaluation occurs for generators.</blockquote></mx-reply>OK, so the matching happens earlier, what is the issue?","m.relates_to":{"m.in_reply_to":{"event_id":"$VN-D8gDgVZ9tlPYEX-fKf5sq2J3KVZa7TEHmqqEq6ZY"}},"msgtype":"m.text"},"ts":1681162723192,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I2-g4xC1CpN9tNgIY5gURc47tAFxAIF9A_vhyybBBKw"},
{"content":{"body":"> <@littledan:matrix.org> OK, so the matching happens earlier, what is the issue?\n\nSorry, disregard. It seems generators perform argument evaluation early anyways. For some reason I thought argument evaluation didn't occur until after the generator starts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$I2-g4xC1CpN9tNgIY5gURc47tAFxAIF9A_vhyybBBKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>OK, so the matching happens earlier, what is the issue?</blockquote></mx-reply>Sorry, disregard. It seems generators perform argument evaluation early anyways. For some reason I thought argument evaluation didn't occur until after the generator starts.","m.relates_to":{"m.in_reply_to":{"event_id":"$I2-g4xC1CpN9tNgIY5gURc47tAFxAIF9A_vhyybBBKw"}},"msgtype":"m.text"},"ts":1681162801086,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cuE-GrOP2pyIGhcWHzNgZ_h9lr4Seun7XiDzbcPbofg"},
{"content":{"body":"> <@rbuckton:matrix.org> Especially if function overloading is on the table.\n\nwhy would that ever be on the table","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oQLymC7v_9BehUDHRx8nGDX19Uys4YNE-xEVA13CKDU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Especially if function overloading is on the table.</blockquote></mx-reply>why would that ever be on the table","m.relates_to":{"m.in_reply_to":{"event_id":"$oQLymC7v_9BehUDHRx8nGDX19Uys4YNE-xEVA13CKDU"}},"msgtype":"m.text"},"ts":1681162804071,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fk4WE9Ih40Uv4e3pJkXDRqq6pGJFLbrKcUKTqpObvg4"},
{"content":{"body":"one of the most confusing parts of C++?","msgtype":"m.text"},"ts":1681162836334,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C-vSaxxsECmEHzFlVMgQJcgAS7TOzJwVoR49EyZ1CBY"},
{"content":{"body":"> <@ljharb:matrix.org> why would that ever be on the table\n\nThat was one of the area's Yulia seemed interested in pursuing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Fk4WE9Ih40Uv4e3pJkXDRqq6pGJFLbrKcUKTqpObvg4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>why would that ever be on the table</blockquote></mx-reply>That was one of the area's Yulia seemed interested in pursuing.","m.relates_to":{"m.in_reply_to":{"event_id":"$Fk4WE9Ih40Uv4e3pJkXDRqq6pGJFLbrKcUKTqpObvg4"}},"msgtype":"m.text"},"ts":1681162838501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JS_W4QNkmgNUsvscVtAosqaL1vgFELgpBrYN65IasZo"},
{"content":{"body":" * one of the more confusing parts of C++?","m.new_content":{"body":"one of the more confusing parts of C++?","msgtype":"m.text"},"m.relates_to":{"event_id":"$C-vSaxxsECmEHzFlVMgQJcgAS7TOzJwVoR49EyZ1CBY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681162842062,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZXLzBQjzhTN2ZI1ZQ98w5ME-NeCjhEyEVA2TssTKPjo"},
{"content":{"body":"> <@ljharb:matrix.org> why would that ever be on the table\n\n * That was one of the areas Yulia seemed interested in pursuing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Fk4WE9Ih40Uv4e3pJkXDRqq6pGJFLbrKcUKTqpObvg4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>why would that ever be on the table</blockquote></mx-reply> * That was one of the areas Yulia seemed interested in pursuing.","m.new_content":{"body":"That was one of the areas Yulia seemed interested in pursuing.","format":"org.matrix.custom.html","formatted_body":"That was one of the areas Yulia seemed interested in pursuing.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JS_W4QNkmgNUsvscVtAosqaL1vgFELgpBrYN65IasZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1681162860374,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NCt7fsCw2vNwvRx_qrddqIyizyUoEPJCsmvYHonfp-U"},
{"content":{"body":"tbh that's something i'd likely object to even stage 1 for. i see no value in that","msgtype":"m.text"},"ts":1681162863751,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2xIYwYwdg9jn09ZO2EEwfZa5pRsOzS99jMvmWKrlAUM"},
{"content":{"body":"but imo we don't have to design for something that hasn't been run by the committee *at all* and doesn't also have consensus within the champion group","format":"org.matrix.custom.html","formatted_body":"but imo we don't have to design for something that hasn't been run by the committee <em>at all</em> and doesn't also have consensus within the champion group","msgtype":"m.text"},"ts":1681162888690,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$54dBEa6knxUmI3Uyzeo-tgKt-SdiThfDgwVxPh3zOK4"},
{"content":{"body":"(i suspect i wouldn't be the only one horrified by the concept)","msgtype":"m.text"},"ts":1681163051947,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fhPGByzEc7czgVuLcpQ1RfN-zv3kdf-emoaTiWhjosA"},
{"content":{"body":"sure but future-proofing for it isn't bad","msgtype":"m.text"},"ts":1681163161824,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tB77Ei-AJLyyAwWcSVF8MHD6YlX6NaBlMYvzSj8vGOA"},
{"content":{"body":"> <@ljharb:matrix.org> not a compelling inspiration :-/\n\n(this was regarding C#'s `out` parameters)\n\nI think there is value in something like C#'s `out` and `ref` parameters, or at least the `ref` parameters. Especially as the shared structs proposal evolves. A `ref` parameter might be the only way to support atomic reads and writes of a private field of a `struct`:\n\n```js\n// without `ref`:\n\n// with typed array\nAtomics.load(someUint64Array, 0);\n\n// with a shared struct public field\nAtomics.load(someStruct, \"x\");\n\n// no way to load a private field...\n \n// with `ref`:\n\n// with typed array\nAtomics.load(ref someUint64Array[0]);\n\n// with a shared struct public field\nAtomics.load(ref someStruct.x);\n\n// with a shared struct private field\nAtomics.load(ref someStruct.#y);\n```\n\nSee: https://github.com/rbuckton/proposal-refs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kPSII4DJ-alUxNrUUxCZsX4vo7J8H9P-m1C_BICakMc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>not a compelling inspiration :-/</blockquote></mx-reply><p>(this was regarding C#'s <code>out</code> parameters)</p>\n<p>I think there is value in something like C#'s <code>out</code> and <code>ref</code> parameters, or at least the <code>ref</code> parameters. Especially as the shared structs proposal evolves. A <code>ref</code> parameter might be the only way to support atomic reads and writes of a private field of a <code>struct</code>:</p>\n<pre><code class=\"language-js\">// without `ref`:\n\n// with typed array\nAtomics.load(someUint64Array, 0);\n\n// with a shared struct public field\nAtomics.load(someStruct, &quot;x&quot;);\n\n// no way to load a private field...\n \n// with `ref`:\n\n// with typed array\nAtomics.load(ref someUint64Array[0]);\n\n// with a shared struct public field\nAtomics.load(ref someStruct.x);\n\n// with a shared struct private field\nAtomics.load(ref someStruct.#y);\n</code></pre>\n<p>See: https://github.com/rbuckton/proposal-refs</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$kPSII4DJ-alUxNrUUxCZsX4vo7J8H9P-m1C_BICakMc"}},"msgtype":"m.text"},"ts":1681163349073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jCWHgdPLusTljJ9KcRMrOA4bRLAco_pt79oyhWHyyg8"},
{"content":{"body":"sure. but we can't futureproof for something that doesn't have obvious syntax.","m.relates_to":{"event_id":"$tB77Ei-AJLyyAwWcSVF8MHD6YlX6NaBlMYvzSj8vGOA","is_falling_back":true,"m.in_reply_to":{"event_id":"$tB77Ei-AJLyyAwWcSVF8MHD6YlX6NaBlMYvzSj8vGOA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1681163465416,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4l27W9t-GHD3HEZV3Oaff9QZnDmQkkN9yAZg-Oi0Wg0"},
{"content":{"body":"Besides, I much prefer C#'s `if (dictionary.TryGetValue(key, out var value))` to `if (map.has(key)) { let value = map.get(key); ... }` due to the repetition and potential performance issues of querying a key twice.","format":"org.matrix.custom.html","formatted_body":"Besides, I much prefer C#'s <code>if (dictionary.TryGetValue(key, out var value))</code> to <code>if (map.has(key)) { let value = map.get(key); ... }</code> due to the repetition and potential performance issues of querying a key twice.","msgtype":"m.text"},"ts":1681163649947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BCpna1wqOrGmOalh5hf0RVjyh7_Ye2nsZ1pAPrSTEWk"},
{"content":{"body":"Returning multiple values in JS usually means destructuring, which can be inefficient. Multiple `ref`/`out` values is far more efficient because you just assign to the referenced binding. No intermediary object or iterable needed.","format":"org.matrix.custom.html","formatted_body":"Returning multiple values in JS usually means destructuring, which can be inefficient. Multiple <code>ref</code>/<code>out</code> values is far more efficient because you just assign to the referenced binding. No intermediary object or iterable needed.","msgtype":"m.text"},"ts":1681163733224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LhCJ-Gc5hOJgFrl083ypnRSkBIuQqH-h0mfH3zX_nCI"},
{"content":{"body":"efficiency isn't more important than clarity to a reader","msgtype":"m.text"},"ts":1681163769278,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BQm2XGnQX8xAqbpPzVXPcDi7Cz0y5nu6VQF7v3TzLlQ"},
{"content":{"body":"All this is to say, an in-situ `let` binding might be warranted for both pattern matching and shared structs/`ref`.","format":"org.matrix.custom.html","formatted_body":"All this is to say, an in-situ <code>let</code> binding might be warranted for both pattern matching and shared structs/<code>ref</code>.","msgtype":"m.text"},"ts":1681163808357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E-3IadKYE7M0Iwz7bVBsKkurKvYJaXiglLDUScLByWI"},
{"content":{"body":"I think `ref` (and `out`) is far clearer than `*` and `&` in C++. And _many_ languages have similar constructs, so this is familiar territory for many developers.","format":"org.matrix.custom.html","formatted_body":"I think <code>ref</code> (and <code>out</code>) is far clearer than <code>*</code> and <code>&amp;</code> in C++. And <em>many</em> languages have similar constructs, so this is familiar territory for many developers.","msgtype":"m.text"},"ts":1681163870033,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xUHChvTw1btkfchdR80ara9q1R5PH0zAu_miYI97g1Y"},
{"content":{"body":"Plus, `ref` doesn't involve pointers, which is a plus.","format":"org.matrix.custom.html","formatted_body":"Plus, <code>ref</code> doesn't involve pointers, which is a plus.","msgtype":"m.text"},"ts":1681163905180,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lcq9aC-I62vyPL-NHOtcBdxe4vyuawV6U_mGFnoWBsw"},
{"content":{"body":"sure. within the context of a confusing thing, there's definitely clearer ways to express it. but i think the thing itself is confusing, and \"it exists in other languages\" isn't a compelling argument to me","msgtype":"m.text"},"ts":1681163927455,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KUxZo1KREIE39JmhsDfXmnYIyBJuKcxLkcfueON5Kt4"}
]