[
{"content":{"body":"What are the goals for pattern matching now? It sounds like we're dialing up the complexity of the proposal quite a bit.","msgtype":"m.text"},"ts":1681158228083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8tVfQ_NyiIBD5kITnjY-TeVvqT5E0tf1-_bNzypaWPA"},
{"content":{"body":"Well, I think if we added a mechanism for naming, and removed `and`, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but \"using in all LHS contexts\" and \"having some kind of mechanism to handle both naming and matching things\" are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","format":"org.matrix.custom.html","formatted_body":"Well, I think if we added a mechanism for naming, and removed <code>and</code>, it could reduce confusion. In my opinion, we should be looking at removing quite a number of features of pattern matching from the initial proposal, but &quot;using in all LHS contexts&quot; and &quot;having some kind of mechanism to handle both naming and matching things&quot; are somewhat core/common across languages (the first more than the second; I could do without the second, but I'd prefer that we don't permit a naming construct in only some contexts but not others)","msgtype":"m.text"},"ts":1681158353034,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0OGatIYd9JKNoL45A6JwYnXIksWj2ilFOJXjeTnu3Ok"},
{"content":{"body":"I'm not certain what the proposal even looks like currently, I'm getting caught up now.","msgtype":"m.text"},"ts":1681158462801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$84pusHsXc-CuIdhHJvV5hmILsDA0Pf8ft89ReXedGVc"},
{"content":{"body":"https://gist.github.com/tabatkins/ee6dfe274e81d76b6069c5ed37d3dcbf is what I'm going off of","msgtype":"m.text"},"ts":1681158515831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1tQ7TS1q5-WpIiyWpJsyKofGh_5o9f3oBozxgOf_580"},
{"content":{"body":"I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.","msgtype":"m.text"},"ts":1681158547176,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"},
{"content":{"body":"that gist seems to be taking a \"yes and\" approach to the feedback received--some of the feedback was about missing expressiveness/features, and this adds those. However, much/most of the feedback was about reducing features","msgtype":"m.text"},"ts":1681158563229,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IVkFAjBm8BqeTJZBLdVmwHkZ_e2H19IS8wOrF2ARpbU"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd honestly hoped the syntax I've been suggesting was both simple as well as more than sufficient to cover the proposal goals.\n\nDo you have a writeup of this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;d honestly hoped the syntax I&#39;ve been suggesting was both simple as well as more than sufficient to cover the proposal goals.</blockquote></mx-reply>Do you have a writeup of this?","m.relates_to":{"m.in_reply_to":{"event_id":"$JhT50ymaWKJyWx89kcfIs-vX5k7GgF2rDeI9b8ROzuA"}},"msgtype":"m.text"},"ts":1681158569106,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hAY3C8mlLwzqgWdJUSPBGaikYJ6_uzm1UtfAC6t9iJQ"},
{"content":{"body":"I don't think special syntax is necessary for `if` or `while`. I don't think interpolation is warranted.","format":"org.matrix.custom.html","formatted_body":"I don't think special syntax is necessary for <code>if</code> or <code>while</code>. I don't think interpolation is warranted.","msgtype":"m.text"},"ts":1681158599909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E4Ws5K352TeefkFuNICAY-seR6FLevhwmnOk486IYGE"},
{"content":{"body":"Is this the extractors proposal, or something else?","msgtype":"m.text"},"ts":1681158600995,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JZlvU3FB_mi5V-vRNmUeFv5TWi7moMYMtFX7eiJlF6k"},
{"content":{"body":"One moment, I have a meeting.","msgtype":"m.text"},"ts":1681158626097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lLYa-ZP2DBpeks0El_Wc78IWCCoIDPujDeY418OanBk"},
{"content":{"body":"hmm, I don't really understand the argument against `if` and `while`--these seem pretty useful to me, and have precedent way back to SNOBOL","format":"org.matrix.custom.html","formatted_body":"hmm, I don't really understand the argument against <code>if</code> and <code>while</code>--these seem pretty useful to me, and have precedent way back to SNOBOL","msgtype":"m.text"},"ts":1681158631727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eBYA-kbPy6SexWOAQndv63XrvKUsL7--ub0K1nQQhWU"},
{"content":{"body":"(sorry no rush)","msgtype":"m.text"},"ts":1681158633601,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y2TiYsspKwPETJ6uAeg_zG9rVnmPaUavLgtqgpUZwE4"},
{"content":{"body":"I'm saying that `is` already covers `if` and `while`.","format":"org.matrix.custom.html","formatted_body":"I'm saying that <code>is</code> already covers <code>if</code> and <code>while</code>.","msgtype":"m.text"},"ts":1681158787889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6dg0UzUfzTYqX1NCw56r4reBuhL0rVOGWs-wx80CvlM"},
{"content":{"body":"special syntax isn't necessary.","msgtype":"m.text"},"ts":1681158794892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y6Firm5DQshIq_EaZVINZ1nWGJb3tpka2CILpQda5rE"},
{"content":{"body":"does `is` allow bindings to be created? I think it's pretty useful to conditionally destructure something.","format":"org.matrix.custom.html","formatted_body":"does <code>is</code> allow bindings to be created? I think it's pretty useful to conditionally destructure something.","msgtype":"m.text"},"ts":1681158828856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EcqMWngVP5Aix4oStpIgjCM5212eDktA2gL6xWSQo08"},
{"content":{"body":"It does in my version of the syntax.","msgtype":"m.text"},"ts":1681158850806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jHNUwMUTK5axdIXAFFEvQ1JcEMW56TLyXYTuae-pLag"},
{"content":{"body":"interesting, is it written down somewhere?","msgtype":"m.text"},"ts":1681158867542,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EPVbRO78amSZLKr-BkPaIGWfkqFPCkIExChoijbfxFU"},
{"content":{"body":"Bits and pieces, in this channel and on GitHub. I'm working on a more comprehensive writeup.","msgtype":"m.text"},"ts":1681159069872,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Sd0lOxieCo_gpc0VhwV1civgoqlUihDj_LSy-116Sfk"},
{"content":{"body":"great, looking forward","msgtype":"m.text"},"ts":1681159197900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EEIJQe5ofAXuhXkBxTA26pis1EVJKtmWvfCSnQisDfg"},
{"content":{"body":"Here's a summary of my preferred syntax:\n- `is` expressions (`expr is pattern`)\n- `match` expressions\n- literal constant patterns (i.e., `1`, `true`, `null`)\n- qualified name patterns (i.e., `undefined`, `NaN`, `Infinity`, `Option.Some`, etc.)\n- object patterns (i.e., `{ x: 1, y: 2 }`)\n- array patterns (i.e., `[1, 2]`)\n- `and` patterns (conjunctions)\n- `or` patterns (disjunctions)\n- `not` patterns (negation)\n- `let` (`const`/`var`?) patterns (i.e., `let x`)\n- grouping patterns (i.e., `(1 or true)`)\n- extractor patterns (i.e., `Foo({ x: 1, y: 2 })`)\n- relational patterns (i.e., `>= 0`)","format":"org.matrix.custom.html","formatted_body":"<p>Here's a summary of my preferred syntax:</p>\n<ul>\n<li><code>is</code> expressions (<code>expr is pattern</code>)</li>\n<li><code>match</code> expressions</li>\n<li>literal constant patterns (i.e., <code>1</code>, <code>true</code>, <code>null</code>)</li>\n<li>qualified name patterns (i.e., <code>undefined</code>, <code>NaN</code>, <code>Infinity</code>, <code>Option.Some</code>, etc.)</li>\n<li>object patterns (i.e., <code>{ x: 1, y: 2 }</code>)</li>\n<li>array patterns (i.e., <code>[1, 2]</code>)</li>\n<li><code>and</code> patterns (conjunctions)</li>\n<li><code>or</code> patterns (disjunctions)</li>\n<li><code>not</code> patterns (negation)</li>\n<li><code>let</code> (<code>const</code>/<code>var</code>?) patterns (i.e., <code>let x</code>)</li>\n<li>grouping patterns (i.e., <code>(1 or true)</code>)</li>\n<li>extractor patterns (i.e., <code>Foo({ x: 1, y: 2 })</code>)</li>\n<li>relational patterns (i.e., <code>&gt;= 0</code>)</li>\n</ul>\n","msgtype":"m.text"},"ts":1681159427654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lmvTpbsci2a3G89KMS6QZqHDuALo9NPPwLUHai8TbOg"},
{"content":{"body":"The design is based on C#, Scala, and Rust.","msgtype":"m.text"},"ts":1681159466316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZhn3gI_3To0HKby5yjZtlQwhZLavO0RGmaBDo6dn0Y"},
{"content":{"body":"https://gist.github.com/rbuckton/76a0836b799cedcb882fbccdaac57552#ron-bucktons-pattern-matching-with-extractor-objects-epics-proposal has more details, plus a few extras I don't consider to be MVP.","msgtype":"m.text"},"ts":1681159498260,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$APMlcTMCYSigK4w-HhWOSNU7Th1YHHJZ8bDVM_AHaiA"},
{"content":{"body":"In my proposed syntax, you don't need special syntax for `if` or `while`, because it would be handled by `is` expressions and `let` patterns. A `let` pattern introduces a `let` variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","format":"org.matrix.custom.html","formatted_body":"In my proposed syntax, you don't need special syntax for <code>if</code> or <code>while</code>, because it would be handled by <code>is</code> expressions and <code>let</code> patterns. A <code>let</code> pattern introduces a <code>let</code> variable in the current scope. If the pattern matches successfully, the variable is initialized. If the pattern does not match, the variable remains unbound (i.e., stays in TDZ).","msgtype":"m.text"},"ts":1681159622502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QYOfaAZnrjye7sxmsf1Vg1DxeYZt_f6v3r0NhOo_sv4"},
{"content":{"body":"So you can easily write:\n```js\nif (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n```\nwithout special syntax for `if`.","format":"org.matrix.custom.html","formatted_body":"<p>So you can easily write:</p>\n<pre><code class=\"language-js\">if (value is Point({ x: let x, y: let y })) {\n  console.log(x, y);\n}\n</code></pre>\n<p>without special syntax for <code>if</code>.</p>\n","msgtype":"m.text"},"ts":1681159677829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g66oXdgOMZNsn1kpJLMksvwCi9E6tZm1-YMJ2iHJp5Y"},
{"content":{"body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an _IdentifierReference_.","format":"org.matrix.custom.html","formatted_body":"You don't need interpolation, because bindings are explicit. Therefore every free identifier in the pattern is an <em>IdentifierReference</em>.","msgtype":"m.text"},"ts":1681159726944,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kx1Ie7WdGDoZgBu2LrnibOXMTTXk082VZL0PCNob4Uk"},
{"content":{"body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., `a.b.c`) in addition to regular identifiers, much like _DecoratorMemberExpression_.","format":"org.matrix.custom.html","formatted_body":"However, the syntax is relaxed slightly to allow for qualified names (i.e., <code>a.b.c</code>) in addition to regular identifiers, much like <em>DecoratorMemberExpression</em>.","msgtype":"m.text"},"ts":1681159760469,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RkIGq3WdLsO-UYkVRe4xdVKrL1cp2NpRHu-oWSYj8Io"},
{"content":{"body":"would you allow matching implicitly in assignment expressions, like `[let x, let y] = expr();`","format":"org.matrix.custom.html","formatted_body":"would you allow matching implicitly in assignment expressions, like <code>[let x, let y] = expr();</code>","msgtype":"m.text"},"ts":1681159821772,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1CADAEv_s9sdBdReO8fK0BlCNZyV_3JxW-jZpkf0qhU"},
{"content":{"body":"or that would be done just by `assert(expr() is [let x, let y])`","format":"org.matrix.custom.html","formatted_body":"or that would be done just by <code>assert(expr() is [let x, let y])</code>","msgtype":"m.text"},"ts":1681159847481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RMP-dLjt6zyHN4BFhPHnB31oqk5-wTsxq5SyYPAITDs"},
{"content":{"body":"No. That mixes destructuring with pattern matching.","msgtype":"m.text"},"ts":1681159849036,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yZvElciwZWBJms2u4dwPm-2G1KZLfAqHgJBU4QiOOmE"},
{"content":{"body":"Would it work in parameter positions?","msgtype":"m.text"},"ts":1681159866725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"},
{"content":{"body":"Its possible my proposal could be extended to support that in some way, I haven't really looked into it though.","msgtype":"m.text"},"ts":1681159870303,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Kql9kqmoOgHAm2IIkzfZSzQv6x6gEiPHDYtbVRWKQI"},
{"content":{"body":"> <@littledan:matrix.org> Would it work in parameter positions?\n\nNo, not without special syntax. Parameters already support binding patterns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Would it work in parameter positions?</blockquote></mx-reply>No, not without special syntax. Parameters already support binding patterns.","m.relates_to":{"m.in_reply_to":{"event_id":"$rsgQYtl7rx20pmSPLhlX2Z0qRdzOq2hVMG0TyXBg-4w"}},"msgtype":"m.text"},"ts":1681159906026,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g2wgbwTGPm04gZN0qx8Ux_y8O9ThcuVMHNWE9usaD3M"},
{"content":{"body":"I'm also not convinced that makes sense to do.","msgtype":"m.text"},"ts":1681159924209,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_3gdkSeC5JKMYDV2tHgCNR6uwYboEqAEDJGZfpxPlNA"},
{"content":{"body":"I'm not entirely a fan of the idea to use patterns to support some kind of function overloading.","msgtype":"m.text"},"ts":1681159977353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n-pcO6ADzXb-CKmIVGe3IYX7jY1TpV_-7vv6BZBAGZA"},
{"content":{"body":"the phrase \"when you have a hammer, every problem looks like a nail\" comes to mind. ","msgtype":"m.text"},"ts":1681160062038,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-foYeqRL28F61e8gQQy7NmfJVMB-9dA4PMpaNnHxJ-E"},
{"content":{"body":"I'm not talking about function overloading...","msgtype":"m.text"},"ts":1681160092437,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CD3sOo3VH1ARgKTDcTq4_DpnXyatIllrCEnRGI2UITM"}
]