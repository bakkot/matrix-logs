[
{"content":{"body":"Had a silly thought, based on the extractor object idea: `if-let` and `let-in` as an alternative to `match-when`:\n```js\nlet x =\n  if let { statusCode: 200, body } in expr(body) \n```","msgtype":"m.text"},"ts":1639182949480,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lGgSg_yz8GIN2JmFUqvYkXERnLP9hpqttbWZCqJsREw"},
{"content":{"body":"rust does that","msgtype":"m.text"},"ts":1639182972781,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$mknhk-nZM5an1HET5luFAK8B-MuTuLlT2DV_Gjje048"},
{"content":{"body":"https://doc.rust-lang.org/rust-by-example/flow_control/if_let.html","msgtype":"m.text"},"ts":1639182980049,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$TPH7GPAhJ11w2GHnntjzh290kIht_AKAJWh_JlZY414"},
{"content":{"body":"I think it's useful, but not an alternative","msgtype":"m.text"},"ts":1639183000255,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$UVCmle10Pj3Fi6__c9P9L2nMZRGB17N9qRAGvDG-5lE"},
{"content":{"body":"how to do computed property key matching?","msgtype":"m.text"},"ts":1639189351406,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$iuNXsRvH1ZfgtT1FJOVscgX3pCGaHUGWcaGDvyS7vh8"},
{"content":{"body":"```js\nwhen ({ [expr]: 1 })\nwhen ({ [${expr}]: 1 })\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">when ({ [expr]: 1 })\nwhen ({ [${expr}]: 1 })\n</code></pre>\n","msgtype":"m.text"},"ts":1639189374251,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kpF64dn7lJqWqLFrtauY830x56yUgPl7njLoe_GvKbk"},
{"content":{"body":"which one?","msgtype":"m.text"},"ts":1639189377372,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9yzmVbAx2OVxfqIF50Ap0H78x4nKbxUtWpAhU9Kmwfw"},
{"content":{"body":"Jack Works: it’d have to be the second one, unless it’s a string literal","msgtype":"m.text"},"ts":1639190101748,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1H6ivCyRjBPjJ770Dw1RaILi_I5uN_cH3oPESJd3Xhk"},
{"content":{"body":"is that worth opening an issue for? my gut instinct was the second way, but that'd diverge from destructuring... I don't see why we couldn't have the first way?","msgtype":"m.text"},"ts":1639190549628,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$hIAApVXk5EownXvHhB0WiYNMiAsa1oLdHktkDY9Ttyo"},
{"content":{"body":"Won't `${` step on possible syntax space? I'd like to bring extractor objects to committee next year, and it would conflict because $ is a valid identifier","msgtype":"m.text"},"ts":1639193040887,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LHNIj69YXn6FYFdyevCyT0Wl1hDuvIaiR0OPx8C89Qk"},
{"content":{"body":"* Won't `${` step on possible syntax space? I'd like to bring extractor objects to committee next year, and it would conflict because $ is a valid identifier","m.new_content":{"body":"Won't `${` step on possible syntax space? I'd like to bring extractor objects to committee next year, and it would conflict because $ is a valid identifier","msgtype":"m.text"},"m.relates_to":{"event_id":"$LHNIj69YXn6FYFdyevCyT0Wl1hDuvIaiR0OPx8C89Qk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639193137006,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c_kDqIf9-JU9oxyWPZGkQCh0egve6MGj-0tfMKGp5Mo"},
{"content":{"body":"> <@mpcsh_:matrix.org> is that worth opening an issue for? my gut instinct was the second way, but that'd diverge from destructuring... I don't see why we couldn't have the first way?\n\ni think it’d be very confusing if anything in pattern space had expression semantics outside of the placeholder syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24hIAApVXk5EownXvHhB0WiYNMiAsa1oLdHktkDY9Ttyo\">In reply to</a> <a href=\"https://matrix.to/#/@mpcsh_:matrix.org\">@mpcsh_:matrix.org</a><br>is that worth opening an issue for? my gut instinct was the second way, but that'd diverge from destructuring... I don't see why we couldn't have the first way?</blockquote></mx-reply>i think it’d be very confusing if anything in pattern space had expression semantics outside of the placeholder syntax","m.relates_to":{"m.in_reply_to":{"event_id":"$hIAApVXk5EownXvHhB0WiYNMiAsa1oLdHktkDY9Ttyo"}},"msgtype":"m.text"},"ts":1639195125126,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VuKPTYeOicW7ydHRt10l9L4VfJ7AjGhq5Fp01Z7jQdY"},
{"content":{"body":"> <@rbuckton:matrix.org> Won't `${` step on possible syntax space? I'd like to bring extractor objects to committee next year, and it would conflict because $ is a valid identifier\n\nan identifier can’t appear directly before a curly brace, so there shouldn’t be any issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24LHNIj69YXn6FYFdyevCyT0Wl1hDuvIaiR0OPx8C89Qk\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Won't `${` step on possible syntax space? I'd like to bring extractor objects to committee next year, and it would conflict because $ is a valid identifier</blockquote></mx-reply>an identifier can’t appear directly before a curly brace, so there shouldn’t be any issue.","m.relates_to":{"m.in_reply_to":{"event_id":"$LHNIj69YXn6FYFdyevCyT0Wl1hDuvIaiR0OPx8C89Qk"}},"msgtype":"m.text"},"ts":1639195151761,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lW5OFdlh3wYW_XAHB9pu3iYQ8eMtlLSPjJpTCUuMnNY"},
{"content":{"body":"> <@ljharb:matrix.org> i think it’d be very confusing if anything in pattern space had expression semantics outside of the placeholder syntax\n\nI mostly agree, but isn't there a corresponding argument that confusion can arise wherever patterns and destructuring diverge?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$VuKPTYeOicW7ydHRt10l9L4VfJ7AjGhq5Fp01Z7jQdY?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i think it’d be very confusing if anything in pattern space had expression semantics outside of the placeholder syntax</blockquote></mx-reply>I mostly agree, but isn't there a corresponding argument that confusion can arise wherever patterns and destructuring diverge?","m.relates_to":{"m.in_reply_to":{"event_id":"$VuKPTYeOicW7ydHRt10l9L4VfJ7AjGhq5Fp01Z7jQdY"}},"msgtype":"m.text"},"ts":1639195274114,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$hntzcvrU5WCM-lfnGm9ty1w50_pADO-aYaVfsE5cThQ"},
{"content":{"body":"sure, but this particular one already exists because computed keys in destructuring require colon-renaming, which we don’t have i think?","msgtype":"m.text"},"ts":1639195525865,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KqKcrcxmefAx6j4CUSajPH59fCP6hgbAfn7g06kTdZg"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1639195562114,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$Nu-BT2eRIyUTiWI_L7_70bh9B69QeaX4adpo8RfLKTM"},
{"content":{"body":"yknow I don't think I've ever used computed properties in destructuring","msgtype":"m.text"},"ts":1639195585315,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$dRv3_yqve60C0p_QEBorR83NFiFMZ8_k6CbNyOOmd2Q"},
{"content":{"body":"so that makes sense","msgtype":"m.text"},"ts":1639195588285,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$_oaZxIOLaDAfGgJXbhJOGUI4P0RBGjlG_uuYLXJwhVU"},
{"content":{"body":"Another problem. ","msgtype":"m.text"},"ts":1639199106867,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PFqYdV3Q3rKUgomzYH6mNTCf1n6GxUvmsb1yo2_cjc8"},
{"content":{"body":"when (x) is an ir???(how to spell that word)? match","msgtype":"m.text"},"ts":1639199138187,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$afjWrSXbeje2zgWV9nftQWBMKBfbyi-YoungEYWCSv8"},
{"content":{"body":"> <@jackworks:matrix.org> when (x) is an ir???(how to spell that word)? match\n\nirrefutable. though in my current revision to the README I'm starting to call that an \"identifier pattern\" instead","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$afjWrSXbeje2zgWV9nftQWBMKBfbyi-YoungEYWCSv8?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>when (x) is an ir???(how to spell that word)? match</blockquote></mx-reply>irrefutable. though in my current revision to the README I'm starting to call that an &quot;identifier pattern&quot; instead","m.relates_to":{"m.in_reply_to":{"event_id":"$afjWrSXbeje2zgWV9nftQWBMKBfbyi-YoungEYWCSv8"}},"msgtype":"m.text"},"ts":1639199168238,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$wkCc0sEfv4uEa9Herii2ScMnRzV9NELB7ggQBz9h_D0"},
{"content":{"body":"But it only holds for the default match case (when you're in the last clause and want to catch the binding). (It also serve for the removed \"as\")","msgtype":"m.text"},"ts":1639199210926,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$y_I_moZUUc1EKRbgCJTdoqja8mV9THW7JOeDNNYqQ4s"},
{"content":{"body":"> <@ljharb:matrix.org> an identifier can’t appear directly before a curly brace, so there shouldn’t be any issue.\n\nIdentifier before curly brace is part of that proposal, however.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$lW5OFdlh3wYW_XAHB9pu3iYQ8eMtlLSPjJpTCUuMnNY?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />an identifier can’t appear directly before a curly brace, so there shouldn’t be any issue.</blockquote></mx-reply>Identifier before curly brace is part of that proposal, however.","m.relates_to":{"m.in_reply_to":{"event_id":"$lW5OFdlh3wYW_XAHB9pu3iYQ8eMtlLSPjJpTCUuMnNY"}},"msgtype":"m.text"},"ts":1639199211405,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$toKpE2EJtEic_HS2Rriw0uz7x6B479Q_eAiDm2EA-v4"},
{"content":{"body":"then that would obviously conflict, yes.","msgtype":"m.text"},"ts":1639199266086,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DPqwy7RJBfuNgXPvtvmTLY9vwHkdQ-q1DOv9wEXJPFg"},
{"content":{"body":"but I’m immediately skeptical about that being part of a proposal regardless, to be honest","msgtype":"m.text"},"ts":1639199289931,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aXlExjVyUuEznHHdJff-wc4bIYr9ghGxVivFPpg98kQ"},
{"content":{"body":"I think the current semantics of  \"when(identifier)\" doesn't worth this concise syntax.\nMaybe we should use \"when (identifier)\" for Matchables because that will be more important. ","msgtype":"m.text"},"ts":1639199307508,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1SD6UIdRyWnbKmMdGMHXsAKzwoQgC7LnPlKCe8KiVzk"},
{"content":{"body":"> <@jackworks:matrix.org> But it only holds for the default match case (when you're in the last clause and want to catch the binding). (It also serve for the removed \"as\")\n\nwhat \"only holds\"? (I'm confused what \"it\" refers to)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$y_I_moZUUc1EKRbgCJTdoqja8mV9THW7JOeDNNYqQ4s?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>But it only holds for the default match case (when you&#39;re in the last clause and want to catch the binding). (It also serve for the removed &quot;as&quot;)</blockquote></mx-reply>what &quot;only holds&quot;? (I'm confused what &quot;it&quot; refers to)","m.relates_to":{"m.in_reply_to":{"event_id":"$y_I_moZUUc1EKRbgCJTdoqja8mV9THW7JOeDNNYqQ4s"}},"msgtype":"m.text"},"ts":1639199314191,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$qFCyTrwEkWK4r7WMhihY8wM6HE12a2N8C4u1Hn8QLeg"},
{"content":{"body":"E.g. \"when(identifier)\" should means calling identifier@@matcher(val)","msgtype":"m.text"},"ts":1639199360123,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$fxWa7djrGI3zHf2PTJAZT_V8kW4p7xYssXb8qYc_RNI"},
{"content":{"body":"That will be more useful than an irrefutable match","msgtype":"m.text"},"ts":1639199402584,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Lslkg10vUTtVgNn6LRPwY6Iq8d5Bc6klMxjeGWkgy0o"},
{"content":{"body":"i definitely don’t agree custom matchers are more important ","format":"org.matrix.custom.html","formatted_body":"i definitely don’t agree custom matchers are more important","msgtype":"m.text"},"ts":1639199424168,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MjYEpPUkFViTF9QUaHitDjZvxIK2KmZ-8poAgP0SyFc"},
{"content":{"body":"and irrefutable matcher are strictly required for object values and array values","msgtype":"m.text"},"ts":1639199446683,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GP-dm_il2RjRS1OPIXXMMNfCF35I_-AnhCWZRQtP2Sg"},
{"content":{"body":"agree with Jordan. I would block the proposal myself if we did that. identifier patterns are a hard necessity inside of object / array patterns; disallowing them at the top level would be really inconsistent","msgtype":"m.text"},"ts":1639199455286,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$RDta2IrO7cgY7N1d_qDzbImdZbWZYxXFF9LNM48ZdUE"},
{"content":{"body":"and they should mean the same thing nested as at the top","msgtype":"m.text"},"ts":1639199456068,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mPe_tQD7wtPfJBVQjGK2HuSUQd6VYwTzR4_mk3Ycmoc"},
{"content":{"body":" * agree with Jordan. I would block the proposal myself if we did that. identifier patterns are a hard necessity inside of object / array patterns; disallowing them at the top level would be really inconsistent","m.new_content":{"body":"agree with Jordan. I would block the proposal myself if we did that. identifier patterns are a hard necessity inside of object / array patterns; disallowing them at the top level would be really inconsistent","msgtype":"m.text"},"m.relates_to":{"event_id":"$RDta2IrO7cgY7N1d_qDzbImdZbWZYxXFF9LNM48ZdUE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639199483657,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$ZaVNp-8fuTlsS8hqpMExpZGTRxPcY9jgIeVUcxg5p7Y"},
{"content":{"body":"(I’m pretty sure we’ve been over this in multiple champion group calls in the beginning)","msgtype":"m.text"},"ts":1639199484184,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kgskWa4b3_2bopfIfNlSM37XeEbE65iiRsSy74UV33U"},
{"content":{"body":"I only want to change the top level irrefutable match, not doing anything with Array / object pattern","msgtype":"m.text"},"ts":1639199497643,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7eAZY3o0Za6GFhweZWnXZP3Hj5DhKIv11TJGmT9CtgQ"},
{"content":{"body":"but even in general, i think custom matchers will be an element minority of use cases","msgtype":"m.text"},"ts":1639199502645,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vKrvKJpTx3t19DAn2swqTvcHeQVRaa31iaSxypSOPEM"},
{"content":{"body":"> <@jackworks:matrix.org> I only want to change the top level irrefutable match, not doing anything with Array / object pattern\n\nJack Works: right, that inconsistency would be unacceptable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%247eAZY3o0Za6GFhweZWnXZP3Hj5DhKIv11TJGmT9CtgQ\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I only want to change the top level irrefutable match, not doing anything with Array / object pattern</blockquote></mx-reply>Jack Works: right, that inconsistency would be unacceptable","m.relates_to":{"m.in_reply_to":{"event_id":"$7eAZY3o0Za6GFhweZWnXZP3Hj5DhKIv11TJGmT9CtgQ"}},"msgtype":"m.text"},"ts":1639199516877,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5kF2YCYJXz1BQK7DgySqlBm-Wa4mOVq8VAfrWABrbOE"},
{"content":{"body":"> <@ljharb:matrix.org> (I’m pretty sure we’ve been over this in multiple champion group calls in the beginning)\n\nyes, we had strong consensus that top-level identifier patterns must be allowed for consistency","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kgskWa4b3_2bopfIfNlSM37XeEbE65iiRsSy74UV33U?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(I’m pretty sure we’ve been over this in multiple champion group calls in the beginning)</blockquote></mx-reply>yes, we had strong consensus that top-level identifier patterns must be allowed for consistency","m.relates_to":{"m.in_reply_to":{"event_id":"$kgskWa4b3_2bopfIfNlSM37XeEbE65iiRsSy74UV33U"}},"msgtype":"m.text"},"ts":1639199521675,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$wFvCMsgDqnITp3Apdo6PCNxuxV-6pew8cNTz3RQSkZc"},
{"content":{"body":"they need to be the same at the top or nested.","msgtype":"m.text"},"ts":1639199525155,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cn_VXKN5FRWGdkdzgYLaLRO-oSKGPWzqh3osSv2mvOc"},
{"content":{"body":"Ok, I agree with the consistency argument","msgtype":"m.text"},"ts":1639199561992,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$CJOVvn0k8-l0O-kpkiW-TZ2dHZYtDEEtyewKfPllkcA"},
{"content":{"body":"But I still think top level irrefutable match doesn't worth the current syntax. It can be more useful if we agree some inconsistent","msgtype":"m.text"},"ts":1639199622416,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XPLMNGkpnUS2rwfwthVsLxSBUxrYGahP7o5Ukqg1Mo8"},
{"content":{"body":"i don’t think it would be more useful ","format":"org.matrix.custom.html","formatted_body":"i don’t think it would be more useful","msgtype":"m.text"},"ts":1639199635821,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YZGLjYAwCZAQ9_3CvPjArqPmDL13JPSKI3CG_PocbMQ"},
{"content":{"body":"custom matchers are very likely to be the minority imo","msgtype":"m.text"},"ts":1639199647082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4dfRvISIn5Cfxd21gA6zjIgpHoPY1Rv6I-EvXO8JYk0"},
{"content":{"body":"and it’s very important for folks ability to learn how nested patterns work by seeing how top-level ones work","msgtype":"m.text"},"ts":1639199670493,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Unrimrnc7pJXQeqSM4LnKI7VEXglIS0EAmFlN75F6G8"},
{"content":{"body":"even disregarding majority/minority, we're talking about three keystrokes - `identifier` vs `${identifier}`. I think it would be an egregious sin of language design to violate consistency here","format":"org.matrix.custom.html","formatted_body":"even disregarding majority/minority, we're talking about three keystrokes - <code>identifier</code> vs <code>${identifier}</code>. I think it would be an egregious sin of language design to violate consistency here","msgtype":"m.text"},"ts":1639199690338,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$Fztu1cYKGqIwHHAwRI_34wl0ta2DClDsmaaYX6r8Mqc"},
{"content":{"body":"> <@ljharb:matrix.org> custom matchers are very likely to be the minority imo\n\nI don't think so, I expect library developers will use this feature to create expressive matchers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$4dfRvISIn5Cfxd21gA6zjIgpHoPY1Rv6I-EvXO8JYk0?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />custom matchers are very likely to be the minority imo</blockquote></mx-reply>I don't think so, I expect library developers will use this feature to create expressive matchers","m.relates_to":{"m.in_reply_to":{"event_id":"$4dfRvISIn5Cfxd21gA6zjIgpHoPY1Rv6I-EvXO8JYk0"}},"msgtype":"m.text"},"ts":1639199692417,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$mm9ivQTZ8XNdJvuI2cyfsnI852nTEalGuKcnta0_W6c"},
{"content":{"body":"arguing which will be more common is a red herring imo","msgtype":"m.text"},"ts":1639199704987,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$wAFSRiRBYMzAyb3i5IxFyhEOdYUUicUPlHk73o7TPWU"},
{"content":{"body":"they might. But that doesn’t mean that’ll be the majority use case by language users.","msgtype":"m.text"},"ts":1639199707897,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OV2ohDJFFJLJkC4xZVnbvRvfjcykJuoS7hRUdVoRTWM"},
{"content":{"body":"i agree we can’t come to any objective agreement over what will be more common :-) I’m illustrating that there’s strong disagreement about our predictions, which means we shouldn’t be designing based on them","msgtype":"m.text"},"ts":1639199748058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QPvi8WgO_vlZI3jxDShygGbMrXcw0FlXSSgOk9AKq2k"},
{"content":{"body":"and thus consistency should win out, as opposed to subjective ideas of usefulness","msgtype":"m.text"},"ts":1639199764885,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JHFJe7dlLeBx1_0s7rZN1oWvK050y8QjXsahaoTEMBc"},
{"content":{"body":"* and thus consistency should win out, as opposed to subjective ideas of usefulness","m.new_content":{"body":"and thus consistency should win out, as opposed to subjective ideas of usefulness","msgtype":"m.text"},"m.relates_to":{"event_id":"$JHFJe7dlLeBx1_0s7rZN1oWvK050y8QjXsahaoTEMBc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639199781481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X5lDmBgBkGnhScfs-tor-JyipCz8qMA4qem2xN8QQNU"},
{"content":{"body":"I would honestly block the proposal even if we expected custom matchers to be the 99% use-case. we have an explicit delineation right now: anything outside `${}` is pattern mode, anything inside is expression mode. I think it would be a downright travesty to break that delineation. pattern matching is already conceptually hard, we shouldn't make it harder","format":"org.matrix.custom.html","formatted_body":"I would honestly block the proposal even if we expected custom matchers to be the 99% use-case. we have an explicit delineation right now: anything outside <code>${}</code> is pattern mode, anything inside is expression mode. I think it would be a downright travesty to break that delineation. pattern matching is already conceptually hard, we shouldn't make it harder","msgtype":"m.text"},"ts":1639199784064,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$InG3K95ZXdrR4rBwPeNetBLYP0I0rH4iVHuYaXmK94c"},
{"content":{"body":"remember that code is read far more often than it’s written; compared to how simple it is to read and understand, it is *unimportant* how easy it is to write","format":"org.matrix.custom.html","formatted_body":"remember that code is read far more often than it’s written; compared to how simple it is to read and understand, it is <em>unimportant</em> how easy it is to write","msgtype":"m.text"},"ts":1639199825144,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZCK5a_khakyvUSED6aho4Tg6D9-dhHhA9FDhqloxD9Q"},
{"content":{"body":"> <@mpcsh_:matrix.org> I would honestly block the proposal even if we expected custom matchers to be the 99% use-case. we have an explicit delineation right now: anything outside `${}` is pattern mode, anything inside is expression mode. I think it would be a downright travesty to break that delineation. pattern matching is already conceptually hard, we shouldn't make it harder\n\nI don't mean custom matcher will be majority and normal matching is minority. I think they're equally important (and normal matching wins a little bit on the importancy IMO).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$InG3K95ZXdrR4rBwPeNetBLYP0I0rH4iVHuYaXmK94c?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mpcsh_:matrix.org\">@mpcsh_:matrix.org</a><br />I would honestly block the proposal even if we expected custom matchers to be the 99% use-case. we have an explicit delineation right now: anything outside <code>${}</code> is pattern mode, anything inside is expression mode. I think it would be a downright travesty to break that delineation. pattern matching is already conceptually hard, we shouldn't make it harder</blockquote></mx-reply>I don't mean custom matcher will be majority and normal matching is minority. I think they're equally important (and normal matching wins a little bit on the importancy IMO).","m.relates_to":{"m.in_reply_to":{"event_id":"$InG3K95ZXdrR4rBwPeNetBLYP0I0rH4iVHuYaXmK94c"}},"msgtype":"m.text"},"ts":1639199913054,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RkxjCO4q0dNjxk5sPS0nzn0feVXUU_VfSUyuFZqPHjc"},
{"content":{"body":"So... Except this problem, what about \"when (identifier(binding, binding2))\"? The unapply syntax. It is not a valid destructing pattern, can we use it for custom matcher? ","msgtype":"m.text"},"ts":1639200119399,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$G1R8Y_wFARoDcH-9q7dB6phFhImxNl8YQS5gtRj4N6M"},
{"content":{"body":"is the idea that `when (identifier(binding, binding2))`, as you wrote, would be equivalent to `when (${identifier} with [binding, binding2])` in the current syntax?","format":"org.matrix.custom.html","formatted_body":"is the idea that <code>when (identifier(binding, binding2))</code>, as you wrote, would be equivalent to <code>when (${identifier} with [binding, binding2])</code> in the current syntax?","msgtype":"m.text"},"ts":1639200174342,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$sLAVnsOnRasaEFbCtD8NApNVkXthHR9NpEKPqvELu8I"},
{"content":{"body":"Yes I guess","msgtype":"m.text"},"ts":1639200217001,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1Av_uuO74JaI5CbCyH-btyUbbKIgaG-1mn-bRtNMtU4"},
{"content":{"body":"I’m not sure why that sugar would be worth the complexity ","format":"org.matrix.custom.html","formatted_body":"I’m not sure why that sugar would be worth the complexity","msgtype":"m.text"},"ts":1639200232898,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nA4dvErfJWEhZ5JRH6k8J6ihvgyhVGXsUKgVLefiYlg"},
{"content":{"body":"especially if identifier isn’t a function - it’d be very confusing to use syntax that suggests it’s a function being called ","format":"org.matrix.custom.html","formatted_body":"especially if identifier isn’t a function - it’d be very confusing to use syntax that suggests it’s a function being called","msgtype":"m.text"},"ts":1639200254750,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p9U5MPpXuq-Vogptlzx7-JkMdVlywyxrtY9Bn__Gd0M"},
{"content":{"body":"Or if we have the unapply proposal, it will also in the deconstruction syntax and we can have it in pattern matching? ","msgtype":"m.text"},"ts":1639200294491,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$IKjGlHfiuJ2_uNFBzY84pNqWF8jUdOVNvqtyInPEf0Y"},
{"content":{"body":"yeah Jack I agree with your motivation - I think `with` is a little painful but I don't think we have another option besides hoping for Ron's extractor objects proposal","format":"org.matrix.custom.html","formatted_body":"yeah Jack I agree with your motivation - I think <code>with</code> is a little painful but I don't think we have another option besides hoping for Ron's extractor objects proposal","msgtype":"m.text"},"ts":1639200338589,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$Zvm37EwfTJ_gnHDpFhbUVCXNuwTZZoB_0221wzVLCHo"},
{"content":{"body":"this proposal is already _so_ big","format":"org.matrix.custom.html","formatted_body":"this proposal is already <em>so</em> big","msgtype":"m.text"},"ts":1639200350012,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$i62GlhEjXsFg9l8v4u5UD_HPvT1bOuj_ZP05muxBNfo"},
{"content":{"body":"i would expect any kind of unapply proposal to advance only if it worked well with existing proposals, including this one","msgtype":"m.text"},"ts":1639200358665,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sRlwYIkV5JPpnNCUPjwT23eV9txZS6Sa2b2xIXANjww"},
{"content":{"body":"but since there’s no actual proposal yet, at any stage, it’s not super useful to speculate on how it’d work","msgtype":"m.text"},"ts":1639200389013,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5BvLAtRzc8qLVR6UTfxI7TPSUpGN7NQClSKJRweNW_Y"},
{"content":{"body":"Does the readme reflect the latest consensus? I want to review the whole proposal again, I see it last commit is 1 minute ago 👀 or is it WIP and I shall wait","msgtype":"m.text"},"ts":1639200857781,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$APkaEyGsM4N__pj9Om9ZJ4m2L3zV8yVJom4OBJd6GfQ"},
{"content":{"body":"* Does the readme reflect the latest consensus? I want to review the whole proposal again, I see it last commit is 1 minute ago 👀 or is it WIP and I shall wait","m.new_content":{"body":"Does the readme reflect the latest consensus? I want to review the whole proposal again, I see it last commit is 1 minute ago 👀 or is it WIP and I shall wait","msgtype":"m.text"},"m.relates_to":{"event_id":"$APkaEyGsM4N__pj9Om9ZJ4m2L3zV8yVJom4OBJd6GfQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639200877572,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nqOFsv_9TU9O3OCR5_fC1PJDZTk51HIxUOVgBuaPfTM"},
{"content":{"body":"I'd say call it a WIP. I'm trying to pare it down and make it easier to read so might as well wait and review it after that","msgtype":"m.text"},"ts":1639200920578,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$4fct1xPf_cc7muIVYxfZjtXWREjpdqScc95TR1oJj_Q"},
{"content":{"body":"> <@ljharb:matrix.org> but I’m immediately skeptical about that being part of a proposal regardless, to be honest\n\nMy point is that, extractors or not, using `${` would carve out an entire swath of syntax space since it would prevent identifiers from being used there, which would be unfortunate. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$aXlExjVyUuEznHHdJff-wc4bIYr9ghGxVivFPpg98kQ?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />but I’m immediately skeptical about that being part of a proposal regardless, to be honest</blockquote></mx-reply>My point is that, extractors or not, using `${` would carve out an entire swath of syntax space since it would prevent identifiers from being used there, which would be unfortunate. ","m.relates_to":{"m.in_reply_to":{"event_id":"$aXlExjVyUuEznHHdJff-wc4bIYr9ghGxVivFPpg98kQ"}},"msgtype":"m.text"},"ts":1639201105776,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TdO6U6FF8u1QZl1jbdGHKgAhKDBJ2YeJZ9EH92ArPQA"},
{"content":{"body":"I'm definitely sympathetic to that but I think the opportunity to align with existing dev knowledge around expression mode in template literals (which is the exact same thing) is too good to pass up","msgtype":"m.text"},"ts":1639201156756,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$c7chHKrQxRlKcNt8fvam1bnSOElRu6qNMitppfQu_uM"},
{"content":{"body":"Especially when `()` might be sufficient to break out of declaration/pattern territory on its own. `when((expr))` might seem redundant, but it's one char shorter than `when(${expr})` and doesn't lock up `id{`","msgtype":"m.text"},"ts":1639201326157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YNKSH-nqPaAQqHHfh4UkU3yzRrOFj0ozLUrGZ-jlBnI"},
{"content":{"body":"(really, I think it's unfortunate that `$` was ever allowed to be a literal 😂)","format":"org.matrix.custom.html","formatted_body":"(really, I think it's unfortunate that <code>$</code> was ever allowed to be a literal 😂)","msgtype":"m.text"},"ts":1639201341677,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$xoPnKXYzrV5IBOczkqaknGwtk3MrLFKFXbqkB_JaOdI"},
{"content":{"body":"> <@rbuckton:matrix.org> Especially when `()` might be sufficient to break out of declaration/pattern territory on its own. `when((expr))` might seem redundant, but it's one char shorter than `when(${expr})` and doesn't lock up `id{`\n\nthis was actually the first incarnation but it was rejected universally by everyone in the champions group for being too subtle","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$YNKSH-nqPaAQqHHfh4UkU3yzRrOFj0ozLUrGZ-jlBnI?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Especially when `()` might be sufficient to break out of declaration/pattern territory on its own. `when((expr))` might seem redundant, but it&#39;s one char shorter than `when(${expr})` and doesn&#39;t lock up `id{`</blockquote></mx-reply>this was actually the first incarnation but it was rejected universally by everyone in the champions group for being too subtle","m.relates_to":{"m.in_reply_to":{"event_id":"$YNKSH-nqPaAQqHHfh4UkU3yzRrOFj0ozLUrGZ-jlBnI"}},"msgtype":"m.text"},"ts":1639201385827,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$uahDQbZcjYOtWyRpgPWoTV3-4IO55qt0ly5LPRVE8Jw"},
{"content":{"body":"if it helps, i don’t think I’d ever be on board with an actual identifier followed by a curly brace, for any proposal (unrelated to pattern matching)","msgtype":"m.text"},"ts":1639201445603,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0s3d8xQC0M70n3Ni-7mpV28CoYPMs5Mn_xHF6pApxXs"},
{"content":{"body":"I'd much prefer a different sigil than `$`, regardless of its precedence in template literals. It's precedence as an ID is much older. ","msgtype":"m.text"},"ts":1639201457173,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WagrAwqt8kc3V0C-msnKU0eHe1yO0RZKkkS26fLe25o"},
{"content":{"body":"* if it helps, i don’t think I’d ever be on board with an actual identifier followed by a curly brace, for any proposal (unrelated to pattern matching)","m.new_content":{"body":"if it helps, i don’t think I’d ever be on board with an actual identifier followed by a curly brace, for any proposal (unrelated to pattern matching)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0s3d8xQC0M70n3Ni-7mpV28CoYPMs5Mn_xHF6pApxXs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639201466835,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XgnbmypWC5faj_IPbiSBQDoHRYEB9p3DaJikL2xV6bI"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd much prefer a different sigil than `$`, regardless of its precedence in template literals. It's precedence as an ID is much older.\n\nI don't really care about seniority though. `$` as an identifier is bad DX; `${}` in template literals is good DX","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$WagrAwqt8kc3V0C-msnKU0eHe1yO0RZKkkS26fLe25o?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;d much prefer a different sigil than `$`, regardless of its precedence in template literals. It&#39;s precedence as an ID is much older. </blockquote></mx-reply>I don't really care about seniority though. <code>$</code> as an identifier is bad DX; <code>${}</code> in template literals is good DX","m.relates_to":{"m.in_reply_to":{"event_id":"$WagrAwqt8kc3V0C-msnKU0eHe1yO0RZKkkS26fLe25o"}},"msgtype":"m.text"},"ts":1639201531323,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$WYuXN-QVTX0pcNmU3WGXPb_N5JDHc5JV5gF4hIuX8L4"},
{"content":{"body":"And I really do believe that there is a future for ADT enum and extractors in JS, and that could fall apart if `id{` is disallowed because of `${`\n","msgtype":"m.text"},"ts":1639201538638,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UsEnDymV6iym-hQl21SPBIlEhdvjdpFh9m5p8CnTQX0"},
{"content":{"body":"(I'm not making an argument one way or another, I'm just saying that your beef shouldn't be with pattern matching, it should be with the identifier grammar)","msgtype":"m.text"},"ts":1639201561140,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$USN_vzYZS7M67wNFGfeqJGik4puW6aGq4FREe5i584c"},
{"content":{"body":"> <@mpcsh_:matrix.org> I don't really care about seniority though. `$` as an identifier is bad DX; `${}` in template literals is good DX\n\nThat didn't stop ljharb from being strongly against using `$` as a topic in pipeline for the exact same reason, not trodding on identifier space","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$WYuXN-QVTX0pcNmU3WGXPb_N5JDHc5JV5gF4hIuX8L4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mpcsh_:matrix.org\">@mpcsh_:matrix.org</a><br />I don't really care about seniority though. <code>$</code> as an identifier is bad DX; <code>${}</code> in template literals is good DX</blockquote></mx-reply>That didn't stop ljharb from being strongly against using `$` as a topic in pipeline for the exact same reason, not trodding on identifier space","m.relates_to":{"m.in_reply_to":{"event_id":"$WYuXN-QVTX0pcNmU3WGXPb_N5JDHc5JV5gF4hIuX8L4"}},"msgtype":"m.text"},"ts":1639201633378,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zD3eO6-fSNwYifegp5gA2hyT3uWTExHZFujRFA5L9bI"},
{"content":{"body":"The identifier grammar isn't going to change, though. This can","msgtype":"m.text"},"ts":1639201670105,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dWJiOMWYOZHSaVHLe_QyQVmh8QZUGKvy0ejN440bEQc"},
{"content":{"body":"tbh i wouldn’t have used $ in template literals, because it’s an identifier, but that ship sailed before i was on tc39","msgtype":"m.text"},"ts":1639201813643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jmvIM1Ygri_C_ui6Ntl_gV2bB8kSfxwZPD996QV2_fw"},
{"content":{"body":"I find `match (x) when (Move{x, y})` to be much more appealing than having  `${` as opposed to another sigil","msgtype":"m.text"},"ts":1639201846470,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ky3YpVkaqBqAzOR3Z0RAoWTHYXkNbd4PV5da142X6h0"},
{"content":{"body":"> <@rbuckton:matrix.org> And I really do believe that there is a future for ADT enum and extractors in JS, and that could fall apart if `id{` is disallowed because of `${`\n\nbut this ^ is the entire argument that we shouldn't use the good DX option here, and I don't really buy it - `Move.{x, y}`, `Move<-{x, y}`, `Move@{x, y}`...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$UsEnDymV6iym-hQl21SPBIlEhdvjdpFh9m5p8CnTQX0?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>And I really do believe that there is a future for ADT enum and extractors in JS, and that could fall apart if `id{` is disallowed because of `${`<br/></blockquote></mx-reply>but this ^ is the entire argument that we shouldn't use the good DX option here, and I don't really buy it - <code>Move.{x, y}</code>, <code>Move&lt;-{x, y}</code>, <code>Move@{x, y}</code>...","m.relates_to":{"m.in_reply_to":{"event_id":"$UsEnDymV6iym-hQl21SPBIlEhdvjdpFh9m5p8CnTQX0"}},"msgtype":"m.text"},"ts":1639201882479,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$QPVz0h6N80rkp4bc2Nb7-ceyDMsIAUTOit3NO0MYkH4"},
{"content":{"body":"imo `Move{` is super ugly and i would never want a feature that made that possible","format":"org.matrix.custom.html","formatted_body":"imo <code>Move{</code> is super ugly and i would never want a feature that made that possible","msgtype":"m.text"},"ts":1639201900115,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rpk3UVvB3zL7-OxXVQvHH94btNm26Giwzw5eWM-P0Ts"},
{"content":{"body":"Worst case, I revert extractors to be iterator-only, but I was convinced by conversations in this channel to more broadly support regular destructuring as well. ","msgtype":"m.text"},"ts":1639201905281,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iSSscVD2NaLWDZi8ep2fodrr3Y2EujbdZOuNTpABJ38"},
{"content":{"body":"curly braces wrap things - a scope/block or an object literal. they don't modify what comes before them","msgtype":"m.text"},"ts":1639201925874,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l35KQEBobKdHX7kJZrR-Wz1RJ5Lumte-195A2B78lGY"},
{"content":{"body":"> <@ljharb:matrix.org> imo `Move{` is super ugly and i would never want a feature that made that possible\n\nHave you tried using that in Rust? It is super useful there. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Rpk3UVvB3zL7-OxXVQvHH94btNm26Giwzw5eWM-P0Ts?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />imo <code>Move{</code> is super ugly and i would never want a feature that made that possible</blockquote></mx-reply>Have you tried using that in Rust? It is super useful there. ","m.relates_to":{"m.in_reply_to":{"event_id":"$Rpk3UVvB3zL7-OxXVQvHH94btNm26Giwzw5eWM-P0Ts"}},"msgtype":"m.text"},"ts":1639201962407,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JW4e37_WJ4SXcfuf5h3raxVCLxa_iBRjqC8_SILSebg"},
{"content":{"body":"nope, i've never used rust. but the feature's usefulness is entirely unrelated to the aesthetics of the specific syntax","msgtype":"m.text"},"ts":1639201984415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z9LwGh0GqVnE6YlnMi_aOwyAED2L0pLQOyrRGQDHwFk"},
{"content":{"body":"I think the canonical rust format (`rustfmt`) puts a space there which I don't think(?) we could do?","format":"org.matrix.custom.html","formatted_body":"I think the canonical rust format (<code>rustfmt</code>) puts a space there which I don't think(?) we could do?","msgtype":"m.text"},"ts":1639202015119,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$OVTZT59EKr2AnrXBEEkfRBK-BHgDHuC9eSqTsxSEvO4"},
{"content":{"body":"(and I think the version without a space would be really ugly in rust)","msgtype":"m.text"},"ts":1639202025855,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$cn_9dyVrovSlC6f5Ei7ljtwTqOKgnBZl-0W7QUbryOA"},
{"content":{"body":"but also, rust has full-fat ADTs, I think we have to be careful about how much inspo we take from rust","msgtype":"m.text"},"ts":1639202070702,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$qqK3vPP48DjE0_XfBwDa0puJU-LEiDocLFO7jF0tYUo"},
{"content":{"body":"I find the asthetics fairly pleasing, along with the duality of construction and extraction for ADT enums. ","msgtype":"m.text"},"ts":1639202072641,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-4LUrkFHF0S2tFLtn2GE0-rDvSKJId8J8vOvpirVE9I"},
{"content":{"body":"(I say this as someone who uses & loves rust)","msgtype":"m.text"},"ts":1639202076958,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$gEbP5Moby2IS7abG8Gi2zpBW5arOMKKcDFuM7eDgdeQ"},
{"content":{"body":"what about `:`? you could have your enum variants be `Move: {x, y}` and your extractor patterns be `Move:{x, y}`","format":"org.matrix.custom.html","formatted_body":"what about <code>:</code>? you could have your enum variants be <code>Move: {x, y}</code> and your extractor patterns be <code>Move:{x, y}</code>","msgtype":"m.text"},"ts":1639202157267,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$t_9RWNh5rhd7IiwvTRTWfynjklsoCWPJz5sYxJlg26s"},
{"content":{"body":"that already works as a labelled statement, in statement position","msgtype":"m.text"},"ts":1639202175393,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jL5NWm5XZjP5zgT1JOq7KE7fyE69L6pfaeKKd0g7nUE"},
{"content":{"body":"ADT enums for structures could be optimized by vms in ways normal objects can't (or at least, haven't yet). Checking type kind on an ADT enum could by monomorphic, which isn't currently possible for objects. ","msgtype":"m.text"},"ts":1639202180597,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Mu6pGtEiEtdene7RYKrXmLxi1_0eYPK3AYKEw9gbOlQ"},
{"content":{"body":"The worst case I mentioned above would have been `Move({x, y}) = z`, which is an iterator destructuring","msgtype":"m.text"},"ts":1639202251847,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BfKZKAzSaq2lgQVK7PV-N09PMEwkgckWHswgbFe1ag0"},
{"content":{"body":"> <@mpcsh_:matrix.org> I think the canonical rust format (`rustfmt`) puts a space there which I don't think(?) we could do?\n\nSpace would be fine","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$OVTZT59EKr2AnrXBEEkfRBK-BHgDHuC9eSqTsxSEvO4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mpcsh_:matrix.org\">@mpcsh_:matrix.org</a><br />I think the canonical rust format (<code>rustfmt</code>) puts a space there which I don't think(?) we could do?</blockquote></mx-reply>Space would be fine","m.relates_to":{"m.in_reply_to":{"event_id":"$OVTZT59EKr2AnrXBEEkfRBK-BHgDHuC9eSqTsxSEvO4"}},"msgtype":"m.text"},"ts":1639202271522,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cJsiQFLh24_LRXWq0-rt1f5qzwu6X5IULXEvl74JjF0"},
{"content":{"body":"> <@rbuckton:matrix.org> Space would be fine\n\ndoes that just resolve the whole thing then?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$cJsiQFLh24_LRXWq0-rt1f5qzwu6X5IULXEvl74JjF0?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Space would be fine</blockquote></mx-reply>does that just resolve the whole thing then?","m.relates_to":{"m.in_reply_to":{"event_id":"$cJsiQFLh24_LRXWq0-rt1f5qzwu6X5IULXEvl74JjF0"}},"msgtype":"m.text"},"ts":1639202303186,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$2e8NveQiN0iJVs2pOtbz_AjEs_JbhChZiqvOpIYySrg"},
{"content":{"body":"it'd have to be an NLTH tho","msgtype":"m.text"},"ts":1639202305591,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7fb0gdPyePvTC4O4FfSvKlfmhiQqSoHiUKni8LSG-gg"},
{"content":{"body":"* The worst case I mentioned above would have been `Move({x, y}) = z`, which is an iterator destructuring","m.new_content":{"body":"The worst case I mentioned above would have been `Move({x, y}) = z`, which is an iterator destructuring","msgtype":"m.text"},"m.relates_to":{"event_id":"$BfKZKAzSaq2lgQVK7PV-N09PMEwkgckWHswgbFe1ag0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639202330615,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y-wN_qWM3CIMDmEMmVTgKknQn8bts_WTNLBiohodQNw"},
{"content":{"body":"No, it wouldn't. ","msgtype":"m.text"},"ts":1639202348333,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QLDpYEemiHlhSRCDPAxFroSkawlLKtXqmRcJwcQFnXw"},
{"content":{"body":"Object destructuring already requires you to be in an expression context","msgtype":"m.text"},"ts":1639202370294,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CXkRL5_tHzTqQqoqV5UKMLoNS5C8v2YGvJlcQWiXK1M"},
{"content":{"body":"I'd be fine with some carve-out like \"inside a pattern, `${` is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named `$` they must use a space\"","format":"org.matrix.custom.html","formatted_body":"I'd be fine with some carve-out like &quot;inside a pattern, <code>${</code> is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named <code>$</code> they must use a space&quot;","msgtype":"m.text"},"ts":1639202385440,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$HzIDMyLBbNmVILThJbRtiV8E8rzz1IMu-_MGrbO4DrI"},
{"content":{"body":"`{x} = y` is a syntax error","msgtype":"m.text"},"ts":1639202398137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CNo0UUcv5NaOsw8YoyEKoaYOnCD3CWufGqIXV9ZzgBs"},
{"content":{"body":" * I'd be fine with some carve-out like \"inside a pattern, `${` is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named `$` they must use a space\"","format":"org.matrix.custom.html","formatted_body":" * I'd be fine with some carve-out like &quot;inside a pattern, <code>${</code> is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named <code>$</code> they must use a space&quot;","m.new_content":{"body":"I'd be fine with some carve-out like \"inside a pattern, `${` is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named `$` they must use a space\"","format":"org.matrix.custom.html","formatted_body":"I'd be fine with some carve-out like &quot;inside a pattern, <code>${</code> is always treated as the interpolation operator; if a user wants to use an extractor pattern on an identifier named <code>$</code> they must use a space&quot;","msgtype":"m.text"},"m.relates_to":{"event_id":"$HzIDMyLBbNmVILThJbRtiV8E8rzz1IMu-_MGrbO4DrI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639202403079,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$dzTAwmHn8MfbcKZeG8GDM3bfT1bpGZMnc7Zf7a8JI6c"},
{"content":{"body":"`({x} = y)` is not","msgtype":"m.text"},"ts":1639202423173,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8vyWrgEtkHmN5KG-lJEeZ7mhM0R-1vLspVGzKkPcwGQ"},
{"content":{"body":"oh this isn't an expression, it's a destructuring LHS?","msgtype":"m.text"},"ts":1639202463388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KEyUIJByG2yFOhnU-bHFoLc0KDZK_4YcwyS2QskTQ1o"},
{"content":{"body":"So `(Move{x} = y)` would align and wouldn't require a NLT","msgtype":"m.text"},"ts":1639202470113,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wly763q0qHS8fz3uVMcaQtZHpG5dJMFwHLFzVlAuM-c"},
{"content":{"body":"Yes, it's a destructuring LHS","msgtype":"m.text"},"ts":1639202479560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$36cwMpwjLmAtaHVDTtD6aa2BC7Hz0uOS2w0l3o88KzQ"},
{"content":{"body":"Which is why it matters to `when`","msgtype":"m.text"},"ts":1639202492926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YF0by5nzUE1q19YrFOIRpxsUklA6_1E2Z_iKhL0C8yc"},
{"content":{"body":"someone could still type:\n```\n(Move\n{ x } = y)\n```\ntho","format":"org.matrix.custom.html","formatted_body":"<p>someone could still type:</p>\n<pre><code>(Move\n{ x } = y)\n</code></pre>\n<p>tho</p>\n","msgtype":"m.text"},"ts":1639202496836,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KhMN92U9aUx4KzfYS2hdGFFXU7XIM6e27OQZLLDCWmc"},
{"content":{"body":"Yeah, not an issue","msgtype":"m.text"},"ts":1639202504898,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s0gvDECF1iG-TDDhxp85_6pnXFL4Q8YKrsNdazPNHyY"},
{"content":{"body":"ASI won't trigger inside an expression","msgtype":"m.text"},"ts":1639202516769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FkozDBidf4fHnnkSuASaIyHVFp4JuThvq0qwIaPEbWM"},
{"content":{"body":"maybe not in the grammar, but why should we permit someone to write that atrocity","msgtype":"m.text"},"ts":1639202517956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5yazaF0G7yDIFlg4YLc_us5lgVupt9pbXozxj5FZsZU"},
{"content":{"body":"Because some people like to put braces on a separate line. Not me, but some people","msgtype":"m.text"},"ts":1639202548043,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZmeVCB2GaQR2EoMk5II2cxXhvWnO303uQFLTzVLuUXs"},
{"content":{"body":"sure but those people already have bugs in their code and violate every JS styleguide out there, they don't matter.","msgtype":"m.text"},"ts":1639202594130,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6YpH18vG2FMssRLk1cDZ1f_c4E4POa6rkcZqTIxGPC8"},
{"content":{"body":"Which is why pattern matching was using something other than `match(x) {` before, because it requires the NLT and some didn't like that","msgtype":"m.text"},"ts":1639202607300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tSUSIR4Srxn38BQJLAIY5j2HAhxFhxwcxfGu3Ma6Bhc"},
{"content":{"body":"JS doesn't work with K&R or allman or whichever that is; it only really works with OTBS","msgtype":"m.text"},"ts":1639202613669,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LhLAsMSQBnuqIop659gl4OR4--yM3RzLIXQEBkPK2zQ"},
{"content":{"body":"> <@ljharb:matrix.org> sure but those people already have bugs in their code and violate every JS styleguide out there, they don't matter.\n\nThats a very aggressive take","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$6YpH18vG2FMssRLk1cDZ1f_c4E4POa6rkcZqTIxGPC8?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />sure but those people already have bugs in their code and violate every JS styleguide out there, they don't matter.</blockquote></mx-reply>Thats a very aggressive take","m.relates_to":{"m.in_reply_to":{"event_id":"$6YpH18vG2FMssRLk1cDZ1f_c4E4POa6rkcZqTIxGPC8"}},"msgtype":"m.text"},"ts":1639202635662,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vWlE-wBCVKp0QzH6CGQOtSsLzIVRFiSTOykaZcxGoBU"},
{"content":{"body":"i am aware","msgtype":"m.text"},"ts":1639202640300,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xRjcmDdltUc0fBZVe3vYFQI9gVOWEB6OA0vZpFS_F5c"},
{"content":{"body":"but i'm not going to give consensus for something gross just to appease people that want an inappropriate brace style, just like the committee's already decided not to block something good just because it creates ASI hazards","msgtype":"m.text"},"ts":1639202678810,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ViaY5j3xSUdjwEN5lZ6Gj3k9rlzyHqTjFjR4inuX-w0"},
{"content":{"body":"I think we've lost sight of my original point a bit: using `${}` for interpolation doesn't _doom_ extractor patterns, at worst it introduces a token between the identifier and the pattern (which is arguably a bit worse, arguably a bit better). I see very little reason to abandon the fantastic DX and conceptual overlap that `${}` gives us","format":"org.matrix.custom.html","formatted_body":"I think we've lost sight of my original point a bit: using <code>${}</code> for interpolation doesn't <em>doom</em> extractor patterns, at worst it introduces a token between the identifier and the pattern (which is arguably a bit worse, arguably a bit better). I see very little reason to abandon the fantastic DX and conceptual overlap that <code>${}</code> gives us","msgtype":"m.text"},"ts":1639202687356,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$UpKGreY8mLL0NvYdi5-tytsqTknrrI6U7W2wgy1Uiww"},
{"content":{"body":"I'm with Ron here - those _people_ matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","format":"org.matrix.custom.html","formatted_body":"I'm with Ron here - those <em>people</em> matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$6YpH18vG2FMssRLk1cDZ1f_c4E4POa6rkcZqTIxGPC8"}}},"ts":1639202721660,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$BhPf-CNf8p5bVlsbLAFQ897Ig4A8ERTVxCBSdbJmHsE"},
{"content":{"body":"> <@ljharb:matrix.org> sure but those people already have bugs in their code and violate every JS styleguide out there, they don't matter.\n\n * I'm with Ron here - those _people_ matter. maybe we don't care about further contorting JS spec to support that use case, but that's a very different statement","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$6YpH18vG2FMssRLk1cDZ1f_c4E4POa6rkcZqTIxGPC8?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure but those people already have bugs in their code and violate every JS styleguide out there, they don't matter.</blockquote></mx-reply> * I'm with Ron here - those <em>people</em> matter. maybe we don't care about further contorting JS spec to support that use case, but that's a very different statement","m.new_content":{"body":"I'm with Ron here - those _people_ matter. maybe we don't care about further contorting JS spec to support that use case, but that's a very different statement","format":"org.matrix.custom.html","formatted_body":"I'm with Ron here - those <em>people</em> matter. maybe we don't care about further contorting JS spec to support that use case, but that's a very different statement","msgtype":"m.text"},"m.relates_to":{"event_id":"$BhPf-CNf8p5bVlsbLAFQ897Ig4A8ERTVxCBSdbJmHsE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639202728266,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$kuAVe9iuV-I7u1PxP2fkeCTxyMKV_np4wva1uHdd6zs"},
{"content":{"body":" * I'm with Ron here - those _people_ matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","format":"org.matrix.custom.html","formatted_body":" * I'm with Ron here - those <em>people</em> matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","m.new_content":{"body":"I'm with Ron here - those _people_ matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","format":"org.matrix.custom.html","formatted_body":"I'm with Ron here - those <em>people</em> matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement","msgtype":"m.text"},"m.relates_to":{"event_id":"$BhPf-CNf8p5bVlsbLAFQ897Ig4A8ERTVxCBSdbJmHsE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639202754056,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$ebC10OHzYrABwWQxG8YioJE-5vsORvrnEk_wdTLrdTs"},
{"content":{"body":"principle_skinner_its_the_children_who_are_wrong.jpeg","msgtype":"m.text"},"ts":1639202762714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7jyFyA8kixMIDd-YLIpn6oeqaHSXZnM1raVGwsOafkE"},
{"content":{"body":"https://sailbo.at/out-of-touch.jpg","msgtype":"m.text"},"ts":1639202802472,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$z9nAqSwZ0yUggo9Yp97Q4pl-VmosRq2-44tVXW2UUAA"},
{"content":{"body":"> <@mpcsh_:matrix.org> I'm with Ron here - those _people_ matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement\n\nok fair enough. the people do matter, which is why we shouldn't encourage their problematic style by bending over backwards to support it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$BhPf-CNf8p5bVlsbLAFQ897Ig4A8ERTVxCBSdbJmHsE?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mpcsh_:matrix.org\">@mpcsh_:matrix.org</a><br>I'm with Ron here - those <em>people</em> matter. maybe we don't care to further contort the JS spec to support that use case, but that's a very different statement</blockquote></mx-reply>ok fair enough. the people do matter, which is why we shouldn't encourage their problematic style by bending over backwards to support it.","m.relates_to":{"m.in_reply_to":{"event_id":"$BhPf-CNf8p5bVlsbLAFQ897Ig4A8ERTVxCBSdbJmHsE"}},"msgtype":"m.text"},"ts":1639202836757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Mrb3r0koqLiqUU_rXZnlrEPCc09LV0zyvW3fvBe51Nw"},
{"content":{"body":"(check out sailbo.at - it's my old tech lead's personal meme dumpster and it's so good)","msgtype":"m.text"},"ts":1639202841342,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$5zmVgVyv5ZdqhUsXdPxURST8tmoDtTjKkah6ny6vW3I"},
{"content":{"body":"inspired: those people matter and we should guide them towards better practices through the spec, canonical examples, teaching materials, web platform docs, etc etc","msgtype":"m.text"},"ts":1639202907664,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$S6G7R19KMOdTRikd7BV_hwqYsSzN60FTyyQDCYXpSy8"},
{"content":{"body":"sure, that's fine too","msgtype":"m.text"},"ts":1639202943918,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$02As6V_hwwziQDdGPG0PTQLh69-nLq6mlDX_4jxbSAo"},
{"content":{"body":"but guiding can be done with both a carrot and a nudge","msgtype":"m.text"},"ts":1639202965121,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5bV4enQJhe3U0OevoD5m5BmjSrk_XwHZmwHIndQR-hM"},
{"content":{"body":"ps this just happened https://twitter.com/ljharb/status/1469549744343044098","msgtype":"m.text"},"ts":1639202978247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QNnyvq1BkFgfhga3Fo8cEvqk2DU6t8oCDcTTITrAolA"},
{"content":{"body":"F","msgtype":"m.text"},"ts":1639202998882,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$UUROY2rIm6z-H1Ydk9EQ4_TgTOl4jlgN_3RM0xYD828"},
{"content":{"body":"Got to go, family time anyways","msgtype":"m.text"},"ts":1639203014440,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KaE9Pvjw-AgAJorV_NUazuiXKNCvE7x2U9kbdqaoP3A"},
{"content":{"body":"thanks for hacking through the weeds! enjoy 💜","msgtype":"m.text"},"ts":1639203035519,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$FuLXHdU9z1w8J_Bo7PTDdyg37VE8NXH_CRssmZhPv2g"},
{"content":{"body":"🤔","msgtype":"m.text"},"ts":1639206911541,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oDx3vVUoPbSzPHcNKkFXjj25QQY-__4QtZpNvwiTw8A"},
{"content":{"body":"ljharb I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a \"cannot push to protected branch\" when merging. probably not relevant until we're working on spec text but would be good to get a green build","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a &quot;cannot push to protected branch&quot; when merging. probably not relevant until we're working on spec text but would be good to get a green build","msgtype":"m.text"},"ts":1639215059553,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$ZemHviNBoQzhZqpz5ZNi3KZ6H41B0DodxleIjPPn_rg"},
{"content":{"body":" * ljharb I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a \"cannot push to protected branch\" when merging. probably not relevant until we're working on spec text but would be good to get a green build","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a &quot;cannot push to protected branch&quot; when merging. probably not relevant until we're working on spec text but would be good to get a green build","m.new_content":{"body":"ljharb I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a \"cannot push to protected branch\" when merging. probably not relevant until we're working on spec text but would be good to get a green build","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I think our branch protection settings are conflicting with GH actions. looking at the logs it looks like everyone but you is getting a &quot;cannot push to protected branch&quot; when merging. probably not relevant until we're working on spec text but would be good to get a green build","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZemHviNBoQzhZqpz5ZNi3KZ6H41B0DodxleIjPPn_rg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639215085936,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$l9w2oTL4eJ7PZocERHBuhqJLZxVrBsdIEm2oHzHQvxY"},
{"content":{"body":"sidebar, I like [temporal's approach](https://github.com/tc39/proposal-temporal/blob/main/.github/workflows/deploy.yml) of keeping rendered spec text on `gh-pages`","format":"org.matrix.custom.html","formatted_body":"sidebar, I like <a href=\"https://github.com/tc39/proposal-temporal/blob/main/.github/workflows/deploy.yml\">temporal's approach</a> of keeping rendered spec text on <code>gh-pages</code>","msgtype":"m.text"},"ts":1639215125861,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$NraHqNdKDnMR_nLk71a3ih5kjwJJ7QXp7oi5-1n6wmQ"},
{"content":{"body":"hm, I’ll take a look","msgtype":"m.text"},"ts":1639240572234,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bT7_5yU_hnRljSC98LtmNWJDxsemh_LbWw5DyrINr54"},
{"content":{"body":"i pretty intentionally chose not to use the gh-pages branch when building the repo template","msgtype":"m.text"},"ts":1639240595863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4-b6ViLFhas2YcxMIezY9EAqlfpE5EcjxXolnys1CWs"},
{"content":{"body":"k i think i fixed the branch protections; we'll know the next time someone commits something that changes the spec file","msgtype":"m.text"},"ts":1639258978004,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xifn3a5Akf73jNeacU_VGAE8cqvurHmlaMSo7SLFcZU"}
]