[
{"content":{"body":"not everyone, i still prefer `function` most of the time :-)","format":"org.matrix.custom.html","formatted_body":"not everyone, i still prefer <code>function</code> most of the time :-)","msgtype":"m.text"},"ts":1695605326299,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wCR3skgCzaOO6k0OJJ3w66pqsd99Ht_EPWznjAwYKbE"},
{"content":{"body":"i'm fine freeing up `when` but we don't have to drop it for that, we could come up with another word for it","format":"org.matrix.custom.html","formatted_body":"i'm fine freeing up <code>when</code> but we don't have to drop it for that, we could come up with another word for it","msgtype":"m.text"},"ts":1695605343135,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Eh6g5Z0TM2iM08IRTnRBFBDRRRNh272cyo4k-VLaWcA"},
{"content":{"body":"> <@tabatkins:matrix.org> No, I was reacting to \"I'd expect to see an undeniable benefit, but I'm only seeing negatives\". I provided a benefit, and it's undeniable. We can certainly argue whether the benefit is *sufficiently worthwhile*, but you can't deny that it is, indeed, a benefit of the syntax. The only response I can give to feedback like this is \"this is incorrect, I'll repeat the benefit that I previously listed\".\n\nan example of the benefit hadn't been provided...I didn't feel like you'd even listened to my concern","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$iZLNSA6QUGqoYgJ9-uFW5bVliHHN1_idAmWXtYJiOQQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>No, I was reacting to \"I'd expect to see an undeniable benefit, but I'm only seeing negatives\". I provided a benefit, and it's undeniable. We can certainly argue whether the benefit is <em>sufficiently worthwhile</em>, but you can't deny that it is, indeed, a benefit of the syntax. The only response I can give to feedback like this is \"this is incorrect, I'll repeat the benefit that I previously listed\".</blockquote></mx-reply>an example of the benefit hadn't been provided...I didn't feel like you'd even listened to my concern","m.relates_to":{"m.in_reply_to":{"event_id":"$iZLNSA6QUGqoYgJ9-uFW5bVliHHN1_idAmWXtYJiOQQ"}},"msgtype":"m.text"},"ts":1695612780398,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YCrhK7e1Hsgv1hQ0qYgmNQgP9SXw5-QRNInyENAca1Y"},
{"content":{"body":"so no, I was not exaggerating in any way. I truly only could see negatives. you \"repeating yourself\" would've constituted truly speaking to me for the first time.","msgtype":"m.text"},"ts":1695612899060,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Q_D6NIqdh30K4cJkUyFE7Dhxc22Y_05B7MNfY9R3LYg"},
{"content":{"body":"> <@rbuckton:matrix.org> I don't have a strong preference for keeping or dropping `when`, but I don't find it all that valuable. It is somewhat like having to write `function` over and over again in expression positions. Everyone was much happier when arrow functions came around and removed that burden.\n> Also, if we drop `when` as the _clause_ we might be able to use `when` instead of `if` for the pattern syntax, which frees us up to use `else` instead of `default`:\n> ```\n> const transform = point => match (point) {\n>   { x: let x, y: let y } when x < y: ...;\n>   { x: let x, y: let y } when x > y: ...;\n>   when point.isEmpty()             : ...;\n>   else                             : ...;\n> }\n> ```\n\noh wow regardless of the default/else thing, if we could write `when` instead of `if`, then my subsequent and larger concern about \"nesting if patterns within if statement conditions\" would go away","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kAE41Ar0qq7XrROb6qTDFe--MVXCQFK1pXaNul5C8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I don't have a strong preference for keeping or dropping <code>when</code>, but I don't find it all that valuable. It is somewhat like having to write <code>function</code> over and over again in expression positions. Everyone was much happier when arrow functions came around and removed that burden.<br />Also, if we drop <code>when</code> as the <em>clause</em> we might be able to use <code>when</code> instead of <code>if</code> for the pattern syntax, which frees us up to use <code>else</code> instead of <code>default</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y } when x &lt; y: ...;\n  { x: let x, y: let y } when x &gt; y: ...;\n  when point.isEmpty()             : ...;\n  else                             : ...;\n}\n</code></pre>\n</blockquote></mx-reply>oh wow regardless of the default/else thing, if we could write <code>when</code> instead of <code>if</code>, then my subsequent and larger concern about \"nesting if patterns within if statement conditions\" would go away","m.relates_to":{"m.in_reply_to":{"event_id":"$kAE41Ar0qq7XrROb6qTDFe--MVXCQFK1pXaNul5C8u4"}},"msgtype":"m.text"},"ts":1695612997540,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$tLtO4Ufljai2CK-Kq3zvsc7VsYV0-x5310Bh-bG36oE"},
{"content":{"body":" * oh wow regardless of the default/else thing, if we could write `when` instead of `if`, then my subsequent and larger concern about `is` allowing \"if patterns within if statement conditions\" would go away","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kAE41Ar0qq7XrROb6qTDFe--MVXCQFK1pXaNul5C8u4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I don't have a strong preference for keeping or dropping <code>when</code>, but I don't find it all that valuable. It is somewhat like having to write <code>function</code> over and over again in expression positions. Everyone was much happier when arrow functions came around and removed that burden.<br>Also, if we drop <code>when</code> as the <em>clause</em> we might be able to use <code>when</code> instead of <code>if</code> for the pattern syntax, which frees us up to use <code>else</code> instead of <code>default</code>:</p>\n<pre><code>const transform = point =&gt; match (point) {\n  { x: let x, y: let y } when x &lt; y: ...;\n  { x: let x, y: let y } when x &gt; y: ...;\n  when point.isEmpty()             : ...;\n  else                             : ...;\n}\n</code></pre>\n</blockquote></mx-reply> * oh wow regardless of the default/else thing, if we could write <code>when</code> instead of <code>if</code>, then my subsequent and larger concern about <code>is</code> allowing \"if patterns within if statement conditions\" would go away","m.new_content":{"body":"oh wow regardless of the default/else thing, if we could write `when` instead of `if`, then my subsequent and larger concern about `is` allowing \"if patterns within if statement conditions\" would go away","format":"org.matrix.custom.html","formatted_body":"oh wow regardless of the default/else thing, if we could write <code>when</code> instead of <code>if</code>, then my subsequent and larger concern about <code>is</code> allowing \"if patterns within if statement conditions\" would go away","msgtype":"m.text"},"m.relates_to":{"event_id":"$tLtO4Ufljai2CK-Kq3zvsc7VsYV0-x5310Bh-bG36oE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695613098810,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Bdr3ve7S9PDHgfI_jngNyOMFl9Qx1DyFgK6V3fFxJF4"},
{"content":{"body":" * so no, I was not exaggerating. I truly only could see negatives. you \"repeating yourself\" would've constituted truly speaking to me for the first time.","m.new_content":{"body":"so no, I was not exaggerating. I truly only could see negatives. you \"repeating yourself\" would've constituted truly speaking to me for the first time.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q_D6NIqdh30K4cJkUyFE7Dhxc22Y_05B7MNfY9R3LYg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695613133826,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZeXqNT_AJlWPaPq9tyCZa2BfKUJKncYsh7bZzDRV57s"},
{"content":{"body":" * oh wow regardless of the default/else thing, if we could write `when` instead of `if`, then my subsequent and larger concern about `is` allowing \"`if` patterns within `if` statement conditions\" would go away","format":"org.matrix.custom.html","formatted_body":" * oh wow regardless of the default/else thing, if we could write <code>when</code> instead of <code>if</code>, then my subsequent and larger concern about <code>is</code> allowing \"<code>if</code> patterns within <code>if</code> statement conditions\" would go away","m.new_content":{"body":"oh wow regardless of the default/else thing, if we could write `when` instead of `if`, then my subsequent and larger concern about `is` allowing \"`if` patterns within `if` statement conditions\" would go away","format":"org.matrix.custom.html","formatted_body":"oh wow regardless of the default/else thing, if we could write <code>when</code> instead of <code>if</code>, then my subsequent and larger concern about <code>is</code> allowing \"<code>if</code> patterns within <code>if</code> statement conditions\" would go away","msgtype":"m.text"},"m.relates_to":{"event_id":"$tLtO4Ufljai2CK-Kq3zvsc7VsYV0-x5310Bh-bG36oE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695613148797,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$oH1MRUsmFtHc-61wIox0eKWqlsiMYMP8KAEGxH8J96U"},
{"content":{"body":" * so no, I was not exaggerating. I truly only could see negatives. you \"repeating yourself\" would've constituted truly speaking to me for the first time from my perspective.","m.new_content":{"body":"so no, I was not exaggerating. I truly only could see negatives. you \"repeating yourself\" would've constituted truly speaking to me for the first time from my perspective.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q_D6NIqdh30K4cJkUyFE7Dhxc22Y_05B7MNfY9R3LYg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695613176933,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2iUPK6PTeFufp6d_z4HpYV17nh_PwWmOdgW70-TyLUE"}
]