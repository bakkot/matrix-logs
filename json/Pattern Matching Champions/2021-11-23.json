[
{"content":{"body":"I do find it interesting that every conversation I've had with folks in the JS community about standardizing enums ends up with requests to consider ADT enums. ","msgtype":"m.text"},"ts":1637693581769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1wD4jEFdjlWqdcO15tow1m0NHs0egrpBCMK5EkswoQQ"},
{"content":{"body":"I've been asking folks on V8 to consider heuristics to improve ICs based on ADT-like discriminants for years, because code like TS's `Node` is essentially an ADT, but so much of our codebase is megamorphic despite the majority of megamorphic access being against a discriminant field (`kind`). My hope is that if ADT enums become a thing, that they could be optimized around the discriminant in ways that regular objects can't.","format":"org.matrix.custom.html","formatted_body":"I've been asking folks on V8 to consider heuristics to improve ICs based on ADT-like discriminants for years, because code like TS's <code>Node</code> is essentially an ADT, but so much of our codebase is megamorphic despite the majority of megamorphic access being against a discriminant field (<code>kind</code>). My hope is that if ADT enums become a thing, that they could be optimized around the discriminant in ways that regular objects can't.","msgtype":"m.text"},"ts":1637693961807,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KIC6Q7bhsOk5AnD-krBrUKftcV7SscDE_NG-bN2j87s"},
{"content":{"body":"The reason I am proposing that `@@unapply` return an iterable is that it is essentially the inverse of function application. I'd use `Reflect.apply`/`Function.prototype.apply` as examples, but they take \"Array-likes\" rather than iterables, but non-iterable \"array-likes\" can't be destructured using array destructuring. Instead, its more like `f(...args)` or `new C(...args)`.","format":"org.matrix.custom.html","formatted_body":"The reason I am proposing that <code>@@unapply</code> return an iterable is that it is essentially the inverse of function application. I'd use <code>Reflect.apply</code>/<code>Function.prototype.apply</code> as examples, but they take &quot;Array-likes&quot; rather than iterables, but non-iterable &quot;array-likes&quot; can't be destructured using array destructuring. Instead, its more like <code>f(...args)</code> or <code>new C(...args)</code>.","msgtype":"m.text"},"ts":1637694360400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nQBlQ35eFhD6u1v8n4OLF9xCxSR_fe2KJ18f0y9ZiWY"},
{"content":{"body":"I'm not opposed to allowing `@@unapply` to return something else, as that was actually in an earlier draft.","format":"org.matrix.custom.html","formatted_body":"I'm not opposed to allowing <code>@@unapply</code> to return something else, as that was actually in an earlier draft.","msgtype":"m.text"},"ts":1637694402928,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EffuK-Eezn0u7PKgznLXVzK4aY9eQPscrvuZh6MKUEg"},
{"content":{"body":"I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce `Foo{x}` extractors (which allows `@@unapply` to return non-iterables) as well as to add some additional examples.","format":"org.matrix.custom.html","formatted_body":"I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce <code>Foo{x}</code> extractors (which allows <code>@@unapply</code> to return non-iterables) as well as to add some additional examples.","msgtype":"m.text"},"ts":1637696651980,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RpsDHHC3-Ez9b9BMnXOEMRBIEwb6rzP7mlfuFdlnuCQ"},
{"content":{"body":" * I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce `Foo{x}` extractors (which allows `@@unapply` to return non-iterables) as well as to add some additional examples.","format":"org.matrix.custom.html","formatted_body":" * I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce <code>Foo{x}</code> extractors (which allows <code>@@unapply</code> to return non-iterables) as well as to add some additional examples.","m.new_content":{"body":"I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce `Foo{x}` extractors (which allows `@@unapply` to return non-iterables) as well as to add some additional examples.","format":"org.matrix.custom.html","formatted_body":"I've amended https://gist.github.com/rbuckton/ae46b33f383ba69880c7138c49b5e799 to reintroduce <code>Foo{x}</code> extractors (which allows <code>@@unapply</code> to return non-iterables) as well as to add some additional examples.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RpsDHHC3-Ez9b9BMnXOEMRBIEwb6rzP7mlfuFdlnuCQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637696696606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V2NkxiRELxM4nnRV49dNa9FsVAI-LGlVYAQ18J_On-I"},
{"content":{"body":"That means that `@@unapply` covers the same capabilities as `@@matcher`, with the following differences (amended from the list above):\n- In `@@matcher` you return an object with `matched: true ` to indicate success. In `@@unapply` you return the object to be destructured.\n- In `@@matcher` you return an object with `matched: false` to indicate failure. In `@@unapply` you return null/undefined.\n- In `@@matcher` you return an object with a `value` property that is destructured. In `@@unapply` you just return the value.","format":"org.matrix.custom.html","formatted_body":"<p>That means that <code>@@unapply</code> covers the same capabilities as <code>@@matcher</code>, with the following differences (amended from the list above):</p>\n<ul>\n<li>In <code>@@matcher</code> you return an object with <code>matched: true </code> to indicate success. In <code>@@unapply</code> you return the object to be destructured.</li>\n<li>In <code>@@matcher</code> you return an object with <code>matched: false</code> to indicate failure. In <code>@@unapply</code> you return null/undefined.</li>\n<li>In <code>@@matcher</code> you return an object with a <code>value</code> property that is destructured. In <code>@@unapply</code> you just return the value.</li>\n</ul>\n","msgtype":"m.text"},"ts":1637696881766,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vtupY1NsmWi-uer4SB1qwkF3wUGMYTimwEH_mRAKHiM"}
]