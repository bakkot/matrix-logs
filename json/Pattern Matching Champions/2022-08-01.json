[
{"content":{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","format":"org.matrix.custom.html","formatted_body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/plain"},{"body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/html"}]},"ts":1659361858951,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Vqs7t7HFbsyu9HxQATUWcaZvT_pAi1pHl7aYer7yki0"},
{"content":{"body":"I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions","msgtype":"m.text","org.matrix.msc1767.text":"I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions"},"ts":1659361909431,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1k3DL-ho4zGMxKO7xgQEl7dFrh_poADrsPqZX3CXIFo"},
{"content":{"body":" * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions","format":"org.matrix.custom.html","formatted_body":" * why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions","m.new_content":{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions","format":"org.matrix.custom.html","formatted_body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions","mimetype":"text/plain"},{"body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Vqs7t7HFbsyu9HxQATUWcaZvT_pAi1pHl7aYer7yki0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions","mimetype":"text/plain"},{"body":" * why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions","mimetype":"text/html"}]},"ts":1659361951937,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e0S4rak2qzkao2q_1qWp4PxyEKCDxotjlvLwjjmncrY"},
{"content":{"body":" * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","format":"org.matrix.custom.html","formatted_body":" * why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","m.new_content":{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","format":"org.matrix.custom.html","formatted_body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/plain"},{"body":"why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Vqs7t7HFbsyu9HxQATUWcaZvT_pAi1pHl7aYer7yki0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/plain"},{"body":" * why is this potentially a bad path? I am not sure I understand your example with <code>f.toString</code> ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc","mimetype":"text/html"}]},"ts":1659361963089,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$N_CctHwvV1HbRmnZLwnH165K_ffDnIBgYciG7dZtWPA"},
{"content":{"body":"I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","format":"org.matrix.custom.html","formatted_body":"<p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","mimetype":"text/plain"},{"body":"<p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","mimetype":"text/html"}]},"ts":1659368774608,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-_u8_N8LM7ffk8v1UibcxzYWMSc0X2CQ52uJvvNQpIc"},
{"content":{"body":" * I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","format":"org.matrix.custom.html","formatted_body":" * <p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","m.new_content":{"body":"I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","format":"org.matrix.custom.html","formatted_body":"<p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","mimetype":"text/plain"},{"body":"<p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$-_u8_N8LM7ffk8v1UibcxzYWMSc0X2CQ52uJvvNQpIc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:\n\n- Would each overload be an independent function reference, or are they somehow nested inside the function?\n- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?\n- How would this apply to `Proxy`?\n- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.\n- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?\n\nGiven that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.","mimetype":"text/plain"},{"body":" * <p>I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:</p>\n<ul>\n<li>Would each overload be an independent function reference, or are they somehow nested inside the function?</li>\n<li>How would this apply to <code>F.p.bind</code>? Do we match during <code>.bind</code> or when the final function is invoked?</li>\n<li>How would this apply to <code>Proxy</code>?</li>\n<li>How would this affect <code>new F()</code> and the resulting <code>new.target</code>, prototypes, etc.</li>\n<li>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</li>\n<li>How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?</li>\n</ul>\n<p>Given that its easy enough to write <code>(x) =&gt; match(x) { ... }</code> or <code>function f(x) { return match(x) { ... } }</code>, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.</p>\n","mimetype":"text/html"}]},"ts":1659368813113,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UikZkr11U5rYrjR4tmA9VJ8Ob6wY7n6BKIBGiTA6E_8"},
{"content":{"body":"> <@yulia:mozilla.org> I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions\n\nIn my list above I reference function and parameter decorators as needing to have *some* knowledge of overloads, which is a further complication especially in regards to proposals such as Decorator Metadata.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$1k3DL-ho4zGMxKO7xgQEl7dFrh_poADrsPqZX3CXIFo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions</blockquote></mx-reply>In my list above I reference function and parameter decorators as needing to have <em>some</em> knowledge of overloads, which is a further complication especially in regards to proposals such as Decorator Metadata.","m.relates_to":{"m.in_reply_to":{"event_id":"$1k3DL-ho4zGMxKO7xgQEl7dFrh_poADrsPqZX3CXIFo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions\n\nIn my list above I reference function and parameter decorators as needing to have *some* knowledge of overloads, which is a further complication especially in regards to proposals such as Decorator Metadata.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$1k3DL-ho4zGMxKO7xgQEl7dFrh_poADrsPqZX3CXIFo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions</blockquote></mx-reply>In my list above I reference function and parameter decorators as needing to have <em>some</em> knowledge of overloads, which is a further complication especially in regards to proposals such as Decorator Metadata.","mimetype":"text/html"}]},"ts":1659368950448,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5szA4CXP5I44JAUO3l_-0gfUVKrgRSx-TNiMza4AdU0"},
{"content":{"body":"Method decorators are already stage 3 and have no concept of overloads. Introducing overloads that point to the same function reference would cause issues if decorator libraries aren't written to handle that case, and most won't be. ","msgtype":"m.text","org.matrix.msc1767.text":"Method decorators are already stage 3 and have no concept of overloads. Introducing overloads that point to the same function reference would cause issues if decorator libraries aren't written to handle that case, and most won't be. "},"ts":1659369051068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NGHc4yv1aEyr5uTApHQVotByR42sQ7Ped_wScBY4YpI"},
{"content":{"body":"Consider a class built to handle server-side HTTP routes:\n\n```js\nclass HttpRoutes {\n  @route(\"GET\", \"/products\")\n  getProducts(req) { ... }\n\n  @route(\"GET\", \"/products/{id}\")\n  getProduct(req) { ... }\n}\n```\n\nThe route might attach metadata to the method that would be used to pick the method to execute when a request is handled. Then we introduce overloads for pattern matching and someone else decides to write:\n\n```js\nclass HttpRoutes {\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n}\n```\nWithout updating the decorator library, the metadata for `get` might be overwritten, or might be potentially unreachable if each method is nested internally.","format":"org.matrix.custom.html","formatted_body":"<p>Consider a class built to handle server-side HTTP routes:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  getProducts(req) { ... }\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  getProduct(req) { ... }\n}\n</code></pre>\n<p>The route might attach metadata to the method that would be used to pick the method to execute when a request is handled. Then we introduce overloads for pattern matching and someone else decides to write:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n}\n</code></pre>\n<p>Without updating the decorator library, the metadata for <code>get</code> might be overwritten, or might be potentially unreachable if each method is nested internally.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Consider a class built to handle server-side HTTP routes:\n\n```js\nclass HttpRoutes {\n  @route(\"GET\", \"/products\")\n  getProducts(req) { ... }\n\n  @route(\"GET\", \"/products/{id}\")\n  getProduct(req) { ... }\n}\n```\n\nThe route might attach metadata to the method that would be used to pick the method to execute when a request is handled. Then we introduce overloads for pattern matching and someone else decides to write:\n\n```js\nclass HttpRoutes {\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n}\n```\nWithout updating the decorator library, the metadata for `get` might be overwritten, or might be potentially unreachable if each method is nested internally.","mimetype":"text/plain"},{"body":"<p>Consider a class built to handle server-side HTTP routes:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  getProducts(req) { ... }\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  getProduct(req) { ... }\n}\n</code></pre>\n<p>The route might attach metadata to the method that would be used to pick the method to execute when a request is handled. Then we introduce overloads for pattern matching and someone else decides to write:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n}\n</code></pre>\n<p>Without updating the decorator library, the metadata for <code>get</code> might be overwritten, or might be potentially unreachable if each method is nested internally.</p>\n","mimetype":"text/html"}]},"ts":1659369391202,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wqaWYDk_fOu1gVrRxRQgDB9YZSJC7Dy7fux2889-EHs"},
{"content":{"body":"So you then run into a versioning and/or documentation problem.","msgtype":"m.text","org.matrix.msc1767.text":"So you then run into a versioning and/or documentation problem."},"ts":1659369412498,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GO-KEdyrCT6u2xDc8XMmTNtZ5bwuPUtXU7WRsHNr63Q"},
{"content":{"body":"Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times.","msgtype":"m.text","org.matrix.msc1767.text":"Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times."},"ts":1659369725799,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2t_gxgu-_tYMmFXf2zKdUzHY2AnlK-LootYnO7KHP4Y"},
{"content":{"body":" * Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times.","m.new_content":{"body":"Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times.","msgtype":"m.text","org.matrix.msc1767.text":"Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times."},"m.relates_to":{"event_id":"$2t_gxgu-_tYMmFXf2zKdUzHY2AnlK-LootYnO7KHP4Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times."},"ts":1659369885117,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JMfGPARUn2SvDSVBU6Emmf6F8UP0XZVZ4QPM-6kScaU"},
{"content":{"body":"ahaha yeah it would be better to have a call","msgtype":"m.text","org.matrix.msc1767.text":"ahaha yeah it would be better to have a call"},"ts":1659370187980,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zO9Bl-tx3b4jyOhl9f7MXOydqXjaQfqUDgNBnJ8GYZE"},
{"content":{"body":"but, i already typed this up so","msgtype":"m.text","org.matrix.msc1767.text":"but, i already typed this up so"},"ts":1659370196152,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oeRvbFQTEjcb3rWZi04yFyPYALDwv_dpIoGtQBoyTCs"},
{"content":{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","mimetype":"text/plain"},{"body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","mimetype":"text/html"}]},"ts":1659370403909,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qyZqgiIk2KVR5Lv3kwEk3hk34okoLwOYvHVA40nZVOI"},
{"content":{"body":" * > with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","m.new_content":{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","mimetype":"text/plain"},{"body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qyZqgiIk2KVR5Lv3kwEk3hk34okoLwOYvHVA40nZVOI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","mimetype":"text/html"}]},"ts":1659370426675,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_LuPXA77uzFEn6KNC99DHxrn30Ai0ns1qvGO5gG0vVU"},
{"content":{"body":" * > with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","m.new_content":{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","mimetype":"text/plain"},{"body":"<blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qyZqgiIk2KVR5Lv3kwEk3hk34okoLwOYvHVA40nZVOI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > with Type Annotations on the table\n\n(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.\n\nbin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.\n\n> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future\n\nI rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.\n\n> Would each overload be an independent function reference, or are they somehow nested inside the function?\n\nThis is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.\n\n> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?\n\nyes, if we take the table approach, then\n\n```js\nfunction foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n```\n\n(but really, the interesting thing is when you _dont_ have the default case.)\n\nFrom the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. \n\n> How would this apply to Proxy?\n\nwhat precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\n> How would this affect new F() and the resulting new.target, prototypes, etc.\n\nOne way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.\n\n> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nAn decorator would apply to its direct shaped function. So, for example:\n\n```js\nclass HttpRoutes {\n\n  @route(\"GET\", \"/products\")\n  get(req when { url: \"/products\" }) { ...}\n\n  @route(\"GET\", \"/products/{id}\")\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(\"GET\", \"/products\")\n  _internal_shapedget_1(req when { url: \"/products\" }) { ...}\n\n    @route(\"GET\", \"/products/{id}\")\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: \"/products\" }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n```\n\nand, you can likely imagine what would happen if the default behavior had a decorator\n\n> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?\n\nHopefully the above answers this question?","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>with Type Annotations on the table</p>\n</blockquote>\n<p>(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an <em>very interesting</em> companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.</p>\n<p>bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.</p>\n<blockquote>\n<p>True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future</p>\n</blockquote>\n<p>I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.</p>\n<blockquote>\n<p>Would each overload be an independent function reference, or are they somehow nested inside the function?</p>\n</blockquote>\n<p>This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.</p>\n<blockquote>\n<p>How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?</p>\n</blockquote>\n<p>yes, if we take the table approach, then</p>\n<pre><code class=\"language-js\">function foo(x when a) { /*...*/} \n\nfunction foo( x when b) { /*...*/}\n\nfunction foo( x) { /*...*/ }\n\n\n// under the hood, so to speak\n\nfunction foo (x) {\n  match(x) {\n    when a: _internal_shapedFoo_1(x)\n    when b: _internal_shapedFoo_2(x)\n    default : _internal_Foo_default(x)\n  }\n}\n</code></pre>\n<p>(but really, the interesting thing is when you <em>dont</em> have the default case.)</p>\n<p>From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards.</p>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n<blockquote>\n<p>How would this affect new F() and the resulting new.target, prototypes, etc.</p>\n</blockquote>\n<p>One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.</p>\n<blockquote>\n<p>If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>An decorator would apply to its direct shaped function. So, for example:</p>\n<pre><code class=\"language-js\">class HttpRoutes {\n\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  get(req when { url: &quot;/products&quot; }) { ...}\n\n  @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  get(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  // internal engine functions\n  @route(&quot;GET&quot;, &quot;/products&quot;)\n  _internal_shapedget_1(req when { url: &quot;/products&quot; }) { ...}\n\n    @route(&quot;GET&quot;, &quot;/products/{id}&quot;)\n  _internal_shapedget_2(req when { url: /\\/products\\/\\d+/ }) { ... }\n\n  implementation_get(req) { \n    match(req) {\n       when { url: &quot;/products&quot; }: // ...\n       when { url: /\\/products\\/\\d+/ }: // ... \n       default : // throw no such function\n    }\n  }\n}\n\n</code></pre>\n<p>and, you can likely imagine what would happen if the default behavior had a decorator</p>\n<blockquote>\n<p>If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?</p>\n</blockquote>\n<p>Hopefully the above answers this question?</p>\n","mimetype":"text/html"}]},"ts":1659370500403,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Eg3pkT7Vcb6Nsqui7gwGJz30SXXclwfZ4KagaQfqhds"},
{"content":{"body":"i joyfully have an inflamed tendon sheath and a popped ganglion cyst so its not bone, its tissue. Will take a long time to heal but i also can't stop myself from talking because i am so darn chatty. I had no idea i was this chatty until i couldn't type for 5 days at all","msgtype":"m.text","org.matrix.msc1767.text":"i joyfully have an inflamed tendon sheath and a popped ganglion cyst so its not bone, its tissue. Will take a long time to heal but i also can't stop myself from talking because i am so darn chatty. I had no idea i was this chatty until i couldn't type for 5 days at all"},"ts":1659370676535,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EvzrfgK-YDB62T5a0yr8kQ4s4LkEV00zWrmhCd6dg7k"},
{"content":{"body":"calling is... preferred, but then we lose the history here and people can't engage async","msgtype":"m.text","org.matrix.msc1767.text":"calling is... preferred, but then we lose the history here and people can't engage async"},"ts":1659370810065,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$i4aIh1pRlCMuKbvvSmD90nsonfMy7iaT6ZXtX4v7jvg"},
{"content":{"body":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)","msgtype":"m.text","org.matrix.msc1767.text":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)"},"ts":1659371026927,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zkvOseCJ2IY3C7MZSZ701iyD8riPE31r0sD_02XA7dk"},
{"content":{"body":" * (this all said -- it doesn't have to happen before or as a part of pattern matching. I think leaving the door open is important)","m.new_content":{"body":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think leaving the door open is important)","msgtype":"m.text","org.matrix.msc1767.text":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think leaving the door open is important)"},"m.relates_to":{"event_id":"$zkvOseCJ2IY3C7MZSZ701iyD8riPE31r0sD_02XA7dk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (this all said -- it doesn't have to happen before or as a part of pattern matching. I think leaving the door open is important)"},"ts":1659371045692,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$r06fW6d6LXrOOWyayh8WkrglsKQZ2IcGC81cmYNVkbw"},
{"content":{"body":" * (this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)","m.new_content":{"body":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)","msgtype":"m.text","org.matrix.msc1767.text":"(this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)"},"m.relates_to":{"event_id":"$zkvOseCJ2IY3C7MZSZ701iyD8riPE31r0sD_02XA7dk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (this all said -- it doesn't have to happen before or as a part of pattern matching. I think it could be, and it could be really nice. I also think leaving the door open is important)"},"ts":1659371068515,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7GU9gNRfmu50LsINUJSrwtY3iWUmavKXajqnIBVdgko"},
{"content":{"body":">> How would this apply to Proxy?\n>\n> what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\nSpecifically, function identities passed via the call and construct traps. Its essentially similar to the question around F.p.bind, but reframed to an overlapping problem space.\n\nI'm also concerned about evaluation order and side effects. Consider something like this:\n\n```js\nlet counter = 0;\nfunction g() {\n  return counter++;\n}\n\nfunction f({ [g()]: a }, b when Number) { ... }\nfunction f({ [g()]: a }, b when String) { ... }\n\nf([\"foo\", \"bar\"], \"baz\");\n```\nWhat should we expect that `a` is in `f`? This is a contrived example, but showcases how side effects could introduce unintended or unexpected consequences in function evaluation. Whereas, with a non-overloaded function the caller doesn't have to be concerned about side effects in the call:\n\n```js\nfunction f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n</blockquote>\n<p>Specifically, function identities passed via the call and construct traps. Its essentially similar to the question around F.p.bind, but reframed to an overlapping problem space.</p>\n<p>I'm also concerned about evaluation order and side effects. Consider something like this:</p>\n<pre><code class=\"language-js\">let counter = 0;\nfunction g() {\n  return counter++;\n}\n\nfunction f({ [g()]: a }, b when Number) { ... }\nfunction f({ [g()]: a }, b when String) { ... }\n\nf([&quot;foo&quot;, &quot;bar&quot;], &quot;baz&quot;);\n</code></pre>\n<p>What should we expect that <code>a</code> is in <code>f</code>? This is a contrived example, but showcases how side effects could introduce unintended or unexpected consequences in function evaluation. Whereas, with a non-overloaded function the caller doesn't have to be concerned about side effects in the call:</p>\n<pre><code class=\"language-js\">function f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":">> How would this apply to Proxy?\n>\n> what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.\n\nSpecifically, function identities passed via the call and construct traps. Its essentially similar to the question around F.p.bind, but reframed to an overlapping problem space.\n\nI'm also concerned about evaluation order and side effects. Consider something like this:\n\n```js\nlet counter = 0;\nfunction g() {\n  return counter++;\n}\n\nfunction f({ [g()]: a }, b when Number) { ... }\nfunction f({ [g()]: a }, b when String) { ... }\n\nf([\"foo\", \"bar\"], \"baz\");\n```\nWhat should we expect that `a` is in `f`? This is a contrived example, but showcases how side effects could introduce unintended or unexpected consequences in function evaluation. Whereas, with a non-overloaded function the caller doesn't have to be concerned about side effects in the call:\n\n```js\nfunction f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```","mimetype":"text/plain"},{"body":"<blockquote>\n<blockquote>\n<p>How would this apply to Proxy?</p>\n</blockquote>\n<p>what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.</p>\n</blockquote>\n<p>Specifically, function identities passed via the call and construct traps. Its essentially similar to the question around F.p.bind, but reframed to an overlapping problem space.</p>\n<p>I'm also concerned about evaluation order and side effects. Consider something like this:</p>\n<pre><code class=\"language-js\">let counter = 0;\nfunction g() {\n  return counter++;\n}\n\nfunction f({ [g()]: a }, b when Number) { ... }\nfunction f({ [g()]: a }, b when String) { ... }\n\nf([&quot;foo&quot;, &quot;bar&quot;], &quot;baz&quot;);\n</code></pre>\n<p>What should we expect that <code>a</code> is in <code>f</code>? This is a contrived example, but showcases how side effects could introduce unintended or unexpected consequences in function evaluation. Whereas, with a non-overloaded function the caller doesn't have to be concerned about side effects in the call:</p>\n<pre><code class=\"language-js\">function f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659371500799,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$isuw5UQyS5axM3dxi2_dksPR5nmRBouFcgZq17N8W0E"},
{"content":{"body":"hm, interesting. Wouldn't this also be an issue in the current pattern matching proposal? Especially if you have a global counter like this","msgtype":"m.text","org.matrix.msc1767.text":"hm, interesting. Wouldn't this also be an issue in the current pattern matching proposal? Especially if you have a global counter like this"},"ts":1659371607891,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VonDs5QMCcPfNgFOiHH7Iq89blsWUxz7gMmEQqRKaiA"},
{"content":{"body":"There's also the potential for side effects in the destructuring itself.","msgtype":"m.text","org.matrix.msc1767.text":"There's also the potential for side effects in the destructuring itself."},"ts":1659371613611,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9nIUPJk-rWMKa6_iiHKoh4o0r78XkCOkUtFnswzXMkY"},
{"content":{"body":"```js\nfunction f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```\n\nthis is currently not legal js syntax yes? I guess you mean\n```js\nfunction f({ [${g()}]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">function f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n<p>this is currently not legal js syntax yes? I guess you mean</p>\n<pre><code class=\"language-js\">function f({ [${g()}]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nfunction f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```\n\nthis is currently not legal js syntax yes? I guess you mean\n```js\nfunction f({ [${g()}]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">function f({ [g()]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n<p>this is currently not legal js syntax yes? I guess you mean</p>\n<pre><code class=\"language-js\">function f({ [${g()}]: a }, b) {\n  match (b) {\n    when (Number): ...;\n    when (String): ...;\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659371685676,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JLtSx27esB2ITSzeQ4CmSGQ7vqxJcsxJRkL-cZ1MYpk"},
{"content":{"body":"Side-effecting code like this is bad anyways, but the example tries to make it more obvious. A less obvious and potentially more likely case would be passing an object as the first argument whose getter can observe the attempt to bind each overload during destructuring","msgtype":"m.text","org.matrix.msc1767.text":"Side-effecting code like this is bad anyways, but the example tries to make it more obvious. A less obvious and potentially more likely case would be passing an object as the first argument whose getter can observe the attempt to bind each overload during destructuring"},"ts":1659371708899,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d70PQ6Nq553rEwozZ3Sf2UoGdZnlqwlHh7CVmWYMttA"},
{"content":{"body":"No, this is already legal syntax. Binding patterns can have computed property names.","msgtype":"m.text","org.matrix.msc1767.text":"No, this is already legal syntax. Binding patterns can have computed property names."},"ts":1659371764156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R9Vya5PTi6ZzwOGaEuWR-qBghtoiFvWct_Vwwv7Sgw4"},
{"content":{"body":"Oh, right -- sorry i missed the `:`","format":"org.matrix.custom.html","formatted_body":"Oh, right -- sorry i missed the <code>:</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Oh, right -- sorry i missed the `:`","mimetype":"text/plain"},{"body":"Oh, right -- sorry i missed the <code>:</code>","mimetype":"text/html"}]},"ts":1659371774388,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RKcyuSQcI6t2wgnng5uQwtDiieB0FOCU8VcjdyHVtdk"},
{"content":{"body":"so that is an alias to a, am i reading that right?","msgtype":"m.text","org.matrix.msc1767.text":"so that is an alias to a, am i reading that right?"},"ts":1659371807733,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$L4TvBUF43hv5RUM0I2ZP1yNQgw78FeSIYxXISL6T43A"},
{"content":{"body":"That's binding the property to `a`, just like you might do `({ foo: bar }) => bar`","format":"org.matrix.custom.html","formatted_body":"That's binding the property to <code>a</code>, just like you might do <code>({ foo: bar }) =&gt; bar</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's binding the property to `a`, just like you might do `({ foo: bar }) => bar`","mimetype":"text/plain"},{"body":"That's binding the property to <code>a</code>, just like you might do <code>({ foo: bar }) =&gt; bar</code>","mimetype":"text/html"}]},"ts":1659371849612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-8RGbDSTdzfmsJk9Q0UeMrnr4mHokmEc8QXhFGqX17E"},
{"content":{"body":"yep","msgtype":"m.text","org.matrix.msc1767.text":"yep"},"ts":1659371855178,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$x0HooR9n98A2j8JwC0ondUALYK_RAGl2jHe0e1Xm_dk"},
{"content":{"body":"i really dislike that syntax, it is so hard to read","msgtype":"m.text","org.matrix.msc1767.text":"i really dislike that syntax, it is so hard to read"},"ts":1659371862623,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ku9lW9r7m1npJdcVdbOe6-giEfQSvxM4hERc-bkOvMU"},
{"content":{"body":"but anyway","msgtype":"m.text","org.matrix.msc1767.text":"but anyway"},"ts":1659371866848,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$slmGTnLV7RMGzwhjpm5L3UVf14HLwHS8tR8UbmJdzDE"},
{"content":{"body":"it seems like an issue we already have to be honest","msgtype":"m.text","org.matrix.msc1767.text":"it seems like an issue we already have to be honest"},"ts":1659371897129,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fDWmQbmmvlTga30L9jsweI2D3qFWCR4jhB98hCgQ0rE"},
{"content":{"body":"But we're introducing it in a new and unexpected place. Injecting something in between `f(x)` and the evaluation of the parameter list/function body.","format":"org.matrix.custom.html","formatted_body":"But we're introducing it in a new and unexpected place. Injecting something in between <code>f(x)</code> and the evaluation of the parameter list/function body.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But we're introducing it in a new and unexpected place. Injecting something in between `f(x)` and the evaluation of the parameter list/function body.","mimetype":"text/plain"},{"body":"But we're introducing it in a new and unexpected place. Injecting something in between <code>f(x)</code> and the evaluation of the parameter list/function body.","mimetype":"text/html"}]},"ts":1659371975546,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eOidvbLSMFbbceoRNWns1weqBUjba38-P7rVamyLzHw"},
{"content":{"body":"so, `g` gets evaluated on every call","format":"org.matrix.custom.html","formatted_body":"so, <code>g</code> gets evaluated on every call","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, `g` gets evaluated on every call","mimetype":"text/plain"},{"body":"so, <code>g</code> gets evaluated on every call","mimetype":"text/html"}]},"ts":1659372105859,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$R1xHPkDaUfw-VgwcwqjXHqOdZfNAllXTdnS7wBUImxY"},
{"content":{"body":"I am not sure... what the difference would really be here","msgtype":"m.text","org.matrix.msc1767.text":"I am not sure... what the difference would really be here"},"ts":1659372114019,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$L2kuUkr61ReD487QRJrJsTrMErQHlYou8inn8em04uY"},
{"content":{"body":"yes, you would have the same counter for all matches, but that could be intentional","msgtype":"m.text","org.matrix.msc1767.text":"yes, you would have the same counter for all matches, but that could be intentional"},"ts":1659372143288,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jpJK6fyAv3S79W2tmB8SJ039LeN3j3svqgycNpFl4_k"},
{"content":{"body":"Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","format":"org.matrix.custom.html","formatted_body":"<p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","mimetype":"text/plain"},{"body":"<p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","mimetype":"text/html"}]},"ts":1659372168819,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dzfmy0xuW78TrUznjZD-wOVMUgBjkZsmdZHGZFS1DFw"},
{"content":{"body":" * Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","format":"org.matrix.custom.html","formatted_body":" * <p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","m.new_content":{"body":"Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","format":"org.matrix.custom.html","formatted_body":"<p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","mimetype":"text/plain"},{"body":"<p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$dzfmy0xuW78TrUznjZD-wOVMUgBjkZsmdZHGZFS1DFw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Consider this less-contrived example instead:\n\n```js\nclass Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() => { ... });\nf(obj, 0);\n```\n\nThis would print `true` when the author might have expected it to print `false`.","mimetype":"text/plain"},{"body":" * <p>Consider this less-contrived example instead:</p>\n<pre><code class=\"language-js\">class Lazy {\n  constructor(factoryfn) { ... }\n  get hasValue() { ... }\n  get value() { ... } // getting `value` invokes `factoryfn` and changes `hasValue` from `false` to `true`\n}\n\nfunction f({ hasValue, value }, b when String) { console.log(hasValue); }\nfunction f({ hasValue, value }, b when Number) { console.log(hasValue); }\n\nconst obj = new Lazy(() =&gt; { ... });\nf(obj, 0);\n</code></pre>\n<p>This would print <code>true</code> when the author might have expected it to print <code>false</code>.</p>\n","mimetype":"text/html"}]},"ts":1659372214949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KCqMwZLNIpOBeyksd2k8zB9vqIYCayBsf2Lr2AsS1cI"},
{"content":{"body":"but, the same is true if you call f twice","msgtype":"m.text","org.matrix.msc1767.text":"but, the same is true if you call f twice"},"ts":1659372232097,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$LjqeAUa07Y_sMjtA9ME5lnm3POXloixH6ExRT-yI9NA"},
{"content":{"body":"and you are basically calling f twice","msgtype":"m.text","org.matrix.msc1767.text":"and you are basically calling f twice"},"ts":1659372236304,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Gqu9BTppLBxpvULvqsEDg-Ohl8_teTtXSRGd-3DIh84"},
{"content":{"body":"oh i see","msgtype":"m.text","org.matrix.msc1767.text":"oh i see"},"ts":1659372247375,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wlN9BMJlxwiS_9BrscgRmNTDmEq-c9YVRzx32CVsQfY"},
{"content":{"body":"With the same `obj`, sure, but that could be expected *without* the overload.","format":"org.matrix.custom.html","formatted_body":"With the same <code>obj</code>, sure, but that could be expected <em>without</em> the overload.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With the same `obj`, sure, but that could be expected *without* the overload.","mimetype":"text/plain"},{"body":"With the same <code>obj</code>, sure, but that could be expected <em>without</em> the overload.","mimetype":"text/html"}]},"ts":1659372259129,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PtNEFKcgpnrARIYD1hqNky7Rnp9ilXwvqt8g0izL-70"},
{"content":{"body":"with the overload, you never get the right answer for the 2nd+ overloads","msgtype":"m.text","org.matrix.msc1767.text":"with the overload, you never get the right answer for the 2nd+ overloads"},"ts":1659372278925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$moka3OhrfSYJbtkxnIYRplnT7A3oMf_HgV5PoCtyKJ8"}
]