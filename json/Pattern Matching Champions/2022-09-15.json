[
{"content":{"body":"The example I gave shows it off well - a trivial case like `{x: Infinity}` does *not* do what it looks like if we operate by \"destructure unless it's a syntax error\" rules. Rather than testing the x property against the value Infinity, it does a no-op assignment of the x property's value to the Infinity binding.","format":"org.matrix.custom.html","formatted_body":"The example I gave shows it off well - a trivial case like <code>{x: Infinity}</code> does <em>not</em> do what it looks like if we operate by &quot;destructure unless it's a syntax error&quot; rules. Rather than testing the x property against the value Infinity, it does a no-op assignment of the x property's value to the Infinity binding.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The example I gave shows it off well - a trivial case like `{x: Infinity}` does *not* do what it looks like if we operate by \"destructure unless it's a syntax error\" rules. Rather than testing the x property against the value Infinity, it does a no-op assignment of the x property's value to the Infinity binding.","mimetype":"text/plain"},{"body":"The example I gave shows it off well - a trivial case like <code>{x: Infinity}</code> does <em>not</em> do what it looks like if we operate by &quot;destructure unless it's a syntax error&quot; rules. Rather than testing the x property against the value Infinity, it does a no-op assignment of the x property's value to the Infinity binding.","mimetype":"text/html"}]},"ts":1663256205930,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$e_py4Se6fiwaBLhZQX0CrA1YPgZzTPFE2PRXWL1hctg"},
{"content":{"body":"While `{x: 0}` and `{x: -Infinity}` would both work perfectly fine, since they're both invalid destructuring.","format":"org.matrix.custom.html","formatted_body":"While <code>{x: 0}</code> and <code>{x: -Infinity}</code> would both work perfectly fine, since they're both invalid destructuring.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"While `{x: 0}` and `{x: -Infinity}` would both work perfectly fine, since they're both invalid destructuring.","mimetype":"text/plain"},{"body":"While <code>{x: 0}</code> and <code>{x: -Infinity}</code> would both work perfectly fine, since they're both invalid destructuring.","mimetype":"text/html"}]},"ts":1663256224692,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$b6ndktX7lB19fZVXMsqeL6UIVgFvyixr6_9rdTeWlo8"},
{"content":{"body":"Not to mention the *generic* mismatch in strictness between destructuring and identical patterns; `[a, b]` needs to fail in patterns if the matchable is anything other than length 2.","format":"org.matrix.custom.html","formatted_body":"Not to mention the <em>generic</em> mismatch in strictness between destructuring and identical patterns; <code>[a, b]</code> needs to fail in patterns if the matchable is anything other than length 2.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Not to mention the *generic* mismatch in strictness between destructuring and identical patterns; `[a, b]` needs to fail in patterns if the matchable is anything other than length 2.","mimetype":"text/plain"},{"body":"Not to mention the <em>generic</em> mismatch in strictness between destructuring and identical patterns; <code>[a, b]</code> needs to fail in patterns if the matchable is anything other than length 2.","mimetype":"text/html"}]},"ts":1663256259002,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fnd7oyMKOq_e8jlgQvTfDdzAlgS5MQEPUxx2oAkXnUM"},
{"content":{"body":"In general, destructuring and the current pattern matching syntax exist in purposely *very similar* conceptual spaces, which is intended to help with learning and general skill transfer, but they are different in many small details that are important to have pattern matching work right.","format":"org.matrix.custom.html","formatted_body":"In general, destructuring and the current pattern matching syntax exist in purposely <em>very similar</em> conceptual spaces, which is intended to help with learning and general skill transfer, but they are different in many small details that are important to have pattern matching work right.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In general, destructuring and the current pattern matching syntax exist in purposely *very similar* conceptual spaces, which is intended to help with learning and general skill transfer, but they are different in many small details that are important to have pattern matching work right.","mimetype":"text/plain"},{"body":"In general, destructuring and the current pattern matching syntax exist in purposely <em>very similar</em> conceptual spaces, which is intended to help with learning and general skill transfer, but they are different in many small details that are important to have pattern matching work right.","mimetype":"text/html"}]},"ts":1663256348501,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5z1LwQzD9LjONCaE42CF658PYnzL0Oeyta3ixouGInk"}
]