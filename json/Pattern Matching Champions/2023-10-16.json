[
{"content":{"body":"are we meeting today?","msgtype":"m.text"},"ts":1697467270126,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$DlxR1utSQXoW86WiFHrVtPQGxzikd2nb0t0FMAAJcJE"},
{"content":{"body":"Planning on it","msgtype":"m.text"},"ts":1697468047593,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OoVP3oMQ_3e1XYe4KZZqs5p1zMd7mD7HczOKS7eBbUM"},
{"content":{"body":"ljharb: ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>:","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1697468817239,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tLu0oQA80u0B9JJToTbuGZhUGT0rxwLxlIOBCfhZi6g"},
{"content":{"body":"I canâ€™t attend; Iâ€™m at a conference today and tomorrow","msgtype":"m.text"},"ts":1697468945165,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r7DSY5LrddmhvHFQA5ALE-qmhNv69W8j_URxZiw5bu0"},
{"content":{"body":"Short meeting, notes up at https://github.com/tc39/proposal-pattern-matching/issues/307","m.mentions":{},"msgtype":"m.text"},"ts":1697470300415,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$paWzFL3gAQ_oLluqHaoj4TpoXzMZoWdjIveUOf_fQbI"},
{"content":{"body":"TLDR:\n\nAfter the new README merge, I will rewrite the new spec. I opened an issue to write down *all* features we have rn https://github.com/tc39/proposal-pattern-matching/issues/306. ðŸ¤” in the issue means we don't have generally agreement but the idea has been raised with reasonable use case.\n\nI don't want to ship an MVP, I want to have as many useful features as possible, therefore I'll go through this approach: add features as removable features. It's also important to let the committee know this. If we are over our syntax budget, we can remove some of them instead of getting the whole proposal rejected.\n\nHere are removable features I'd like to have (they are all explained in https://github.com/tc39/proposal-pattern-matching/issues/306):\n\n- Default value (`{ a = 1 }`)\n- Unary algebraic pattern (`+x`, `-y`)\n- RegEx literal pattern (`/a/`)\n- RegEx named capture group bindings (`/a(?<let name>)/`)\n- Relation pattern (`>` `<` `>=` `<=` `in` `instanceof` `===`)\n- Void pattern (`[void, 2]`)\n- Optional property pattern (`{ a: 1, b?: 2 }`)\n- Binding-while-matching property pattern (`{ let a: Number }`) \n\nThis seems to be a lot of syntax sugars but they're all removable. I'll remark this clearly in both README and spec. If anyone wants to add more to the list or strongly object to some ideas to be written as removable in the spec please let me know!\n\nBTW I'll explain new things that are not formally denoted before. This is all my personal thought, e.g. Rbuckton might disagree with me despite he also supports relational patterns. \n\nWhy does relational pattern include the `===` pattern? \nBecause for pattern `{ a: x }`, it actually has 2 possible semantics: `===` or custom matcher. If we want to force it to do `===` matching, there is no way to do it therefore `{ a: === x }` might be a useful thing although looks strange.\n\nWhat's the use case for the Binding-while-matching property pattern?\nFor code doing a lot of shape checks and creating bindings (this is common for handling unknown data), this increases readability.\n```\n// without\nwhen { type: String and let type, id: (Number or String or null) and let id, let action }:\n// with\nwhen { let type: String, let id: Number or String or null, let action }\n```","format":"org.matrix.custom.html","formatted_body":"<p>TLDR:</p>\n<p>After the new README merge, I will rewrite the new spec. I opened an issue to write down <em>all</em> features we have rn https://github.com/tc39/proposal-pattern-matching/issues/306. ðŸ¤” in the issue means we don't have generally agreement but the idea has been raised with reasonable use case.</p>\n<p>I don't want to ship an MVP, I want to have as many useful features as possible, therefore I'll go through this approach: add features as removable features. It's also important to let the committee know this. If we are over our syntax budget, we can remove some of them instead of getting the whole proposal rejected.</p>\n<p>Here are removable features I'd like to have (they are all explained in https://github.com/tc39/proposal-pattern-matching/issues/306):</p>\n<ul>\n<li>Default value (<code>{ a = 1 }</code>)</li>\n<li>Unary algebraic pattern (<code>+x</code>, <code>-y</code>)</li>\n<li>RegEx literal pattern (<code>/a/</code>)</li>\n<li>RegEx named capture group bindings (<code>/a(?&lt;let name&gt;)/</code>)</li>\n<li>Relation pattern (<code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>in</code> <code>instanceof</code> <code>===</code>)</li>\n<li>Void pattern (<code>[void, 2]</code>)</li>\n<li>Optional property pattern (<code>{ a: 1, b?: 2 }</code>)</li>\n<li>Binding-while-matching property pattern (<code>{ let a: Number }</code>)</li>\n</ul>\n<p>This seems to be a lot of syntax sugars but they're all removable. I'll remark this clearly in both README and spec. If anyone wants to add more to the list or strongly object to some ideas to be written as removable in the spec please let me know!</p>\n<p>BTW I'll explain new things that are not formally denoted before. This is all my personal thought, e.g. Rbuckton might disagree with me despite he also supports relational patterns.</p>\n<p>Why does relational pattern include the <code>===</code> pattern?<br>Because for pattern <code>{ a: x }</code>, it actually has 2 possible semantics: <code>===</code> or custom matcher. If we want to force it to do <code>===</code> matching, there is no way to do it therefore <code>{ a: === x }</code> might be a useful thing although looks strange.</p>\n<p>What's the use case for the Binding-while-matching property pattern?<br>For code doing a lot of shape checks and creating bindings (this is common for handling unknown data), this increases readability.</p>\n<pre><code>// without\nwhen { type: String and let type, id: (Number or String or null) and let id, let action }:\n// with\nwhen { let type: String, let id: Number or String or null, let action }\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1697471478256,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3WQ4nOgfiXeZWnF7rd8DhAHu18uIQqP-xSQFxAWxY7g"}
]