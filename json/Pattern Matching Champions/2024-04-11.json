[
{"content":{"body":"I'll be honest, I really do not like `~=`. It's not semantically meaningful, it looks like a compound assignment, and `~` is extremely inconvenient for non-us-english keyboard layouts. It only pushes the problem down the road. `is` might require more work for a cover grammar, but the bigger problem, IMO, is regular expression literals.","format":"org.matrix.custom.html","formatted_body":"I'll be honest, I really do not like <code>~=</code>. It's not semantically meaningful, it looks like a compound assignment, and <code>~</code> is extremely inconvenient for non-us-english keyboard layouts. It only pushes the problem down the road. <code>is</code> might require more work for a cover grammar, but the bigger problem, IMO, is regular expression literals.","m.mentions":{},"msgtype":"m.text"},"ts":1712800998661,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GeoBiHZgMEbmEczXXGTWKo-cNjB2BT1bjdW9TYm4R_g"},
{"content":{"body":"i agree; i don't like `~=` and i don't think token soup is going to be an improvement","format":"org.matrix.custom.html","formatted_body":"i agree; i don't like <code>~=</code> and i don't think token soup is going to be an improvement","m.mentions":{},"msgtype":"m.text"},"ts":1712811375583,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uYcJm0FdPl-2r_zSX0zxtRqKXmT5uadO9C4WQKbWVaI"},
{"content":{"body":"i think having new binary english keywords is important enough that we should halt or alter any proposals that threaten that path","m.mentions":{},"msgtype":"m.text"},"ts":1712811559217,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3YV-H24VDqObwENF2HOQay18z3bKp30lcebQVW6VS2M"},
{"content":{"body":" * i think having new binary english keywords (in general) is important enough that we should halt or alter any proposals that threaten that path","m.mentions":{},"m.new_content":{"body":"i think having new binary english keywords (in general) is important enough that we should halt or alter any proposals that threaten that path","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3YV-H24VDqObwENF2HOQay18z3bKp30lcebQVW6VS2M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712811563137,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AA0q7tmbnxVd2XL8XV1Kg_-yNj_WCD8ovTy8FKpg8Ng"},
{"content":{"body":"To me `~=` reads first as \"not equal\" rather than \"approximately equal\", given how `~` is used as a bitwise not operator in many languages, including C, Java, and Python.","format":"org.matrix.custom.html","formatted_body":"To me <code>~=</code> reads first as \"not equal\" rather than \"approximately equal\", given how <code>~</code> is used as a bitwise not operator in many languages, including C, Java, and Python.","m.mentions":{},"msgtype":"m.text"},"ts":1712824093424,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KOFm6_wVLnZm6QuSud2ArQ8x7x6j7yP4O6rGwI8TeaU"},
{"content":{"body":"Also, hi! I recently got rather interested in extractors, and thought that therefore this might be a good place to hang out.","m.mentions":{},"msgtype":"m.text"},"ts":1712824170388,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$i-fcgSw0RMiez0hJhcXJi_h5pk15Cof2BbuEErfHItQ"},
{"content":{"body":"I think in Perl and Ruby it's `=~` ?","format":"org.matrix.custom.html","formatted_body":"I think in Perl and Ruby it's <code>=~</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1712825064440,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$9EZdVUITBX42BvIokakSYJHyL70be8-_MwXUhTda9nk"},
{"content":{"body":"In perl `=~` is doing regexp matching; in Ruby it seems to be doing both that _and_ negation, _and_ it's user-customizable.","format":"org.matrix.custom.html","formatted_body":"In perl <code>=~</code> is doing regexp matching; in Ruby it seems to be doing both that <em>and</em> negation, <em>and</em> it's user-customizable.","m.mentions":{},"msgtype":"m.text"},"ts":1712828362320,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$34j6LgX12JRmEy5RL-XV017xSl9SrMTX9ymuVuC2gUc"},
{"content":{"body":"I'll think a~=b is a=a~b (is it even a thing? but looks like bit operator to me)","msgtype":"m.text"},"ts":1712830072184,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FNV7GOzdTE0Nc9PEXKIk38rw5U4fwJVIBFf1sWDiiXY"},
{"content":{"body":"rkirsling: I read the issue you created and it aligns with my concerns about this proposal. I think that a python style `match` *statement* is a sufficiently powerful construct, and I'm not seeing an argument as to why we need something more powerful in the language. I'd like to see the champions present on why that design alternative was considered and found not suitable for JavaScript.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: I read the issue you created and it aligns with my concerns about this proposal. I think that a python style <code>match</code> <em>statement</em> is a sufficiently powerful construct, and I'm not seeing an argument as to why we need something more powerful in the language. I'd like to see the champions present on why that design alternative was considered and found not suitable for JavaScript.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"msgtype":"m.text"},"ts":1712842097098,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$8VvjJbbElPtK18Vvc0xfXGxeNXc0mUfl7lo3rZE-mOg"},
{"content":{"body":"I also think that `is` should be saved for a follow on proposal. I'm not convinced we need it, and it already seems problematic.","format":"org.matrix.custom.html","formatted_body":"I also think that <code>is</code> should be saved for a follow on proposal. I'm not convinced we need it, and it already seems problematic.","m.mentions":{},"msgtype":"m.text"},"ts":1712842119352,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$XtGk5fEW_d9W9v9w8filBo4ovjYQm8UJpcQ4WUi-2eU"},
{"content":{"body":"`is` is profoundly useful. It covers a large number of use cases, including those offered by `if..let` and `while..let` in some languages, `not in` and `not instanceof`, and even `let..in`. It's far too useful, IMO.","format":"org.matrix.custom.html","formatted_body":"<code>is</code> is profoundly useful. It covers a large number of use cases, including those offered by <code>if..let</code> and <code>while..let</code> in some languages, <code>not in</code> and <code>not instanceof</code>, and even <code>let..in</code>. It's far too useful, IMO.","m.mentions":{},"msgtype":"m.text"},"ts":1712843578822,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RmCGwBqn7bqnE_3VttH6GjMVjd5p99gJoNC5Tv6jNZ8"},
{"content":{"body":"`=~` is not viable either as `a =~ b` is already legal JS.","format":"org.matrix.custom.html","formatted_body":"<code>=~</code> is not viable either as <code>a =~ b</code> is already legal JS.","m.mentions":{},"msgtype":"m.text"},"ts":1712843609686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xskbqSyRe8ZVcftBavBEJqfNWJ9WyNZXFjwMo1sW8gQ"},
{"content":{"body":"For me, the fact that `is` is that powerful is an argument for it to be a follow-on proposal, not for it to be part of this proposal.","format":"org.matrix.custom.html","formatted_body":"For me, the fact that <code>is</code> is that powerful is an argument for it to be a follow-on proposal, not for it to be part of this proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1712843777000,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$SI3119GPyN8dF9au3f-oszNrEoU3hnRGtGXrby3IMNg"},
{"content":{"body":"dminor: we made `is` after yulia and spidermonkey's feedback of making simpler composable pieces that build up to pattern matching","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: we made <code>is</code> after yulia and spidermonkey's feedback of making simpler composable pieces that build up to pattern matching","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1712844760573,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D6izxnRExFuja7ogdZbLlnoZH0eWC5lnxJym7kAORfc"},
{"content":{"body":"That's not really an argument for including it in this proposal, rather than a follow-on.","m.mentions":{},"msgtype":"m.text"},"ts":1712845250887,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$kfHAHKbKhF3wE54SskgO5InrgNs3qq5lg3IHxcquhWc"},
{"content":{"body":"As I understand it, that was an argument for it to be in the proposal. Having it as a follow-on is counterproductive","m.mentions":{},"msgtype":"m.text"},"ts":1712845289161,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LqOS8dZBP6H5gUrAt-6xL-TsmcdrvWlmSXd5F4iU9KE"},
{"content":{"body":"it's an argument for having `is` go first, and `match` as the follow-on","format":"org.matrix.custom.html","formatted_body":"it's an argument for having <code>is</code> go first, and <code>match</code> as the follow-on","m.mentions":{},"msgtype":"m.text"},"ts":1712845295946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_MVesdOE9Lgv7WoQep8smEANQTDJrCHAbXEi9n4H2yw"},
{"content":{"body":"the champion group didn't want to ship it piecemeal but that's my understanding of what spidermonkey wanted","m.mentions":{},"msgtype":"m.text"},"ts":1712845314915,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tXTz-7a9C8UprB7mE8GsM9OWV8Ott0P0JXMmKEg7x30"},
{"content":{"body":"if you check the spec (not the readme) you'll find I wrote the spec in a way that most of the \"complexities\" can be broken down to simper (but unnecessary annoying long) building block","msgtype":"m.text"},"ts":1712845347113,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$q52CxrWaygsn_UEnZTr27bT5nYhp7axsMpbV8gNjiNc"},
{"content":{"body":"e.g. pattern \"{x?: y}\" can be \"{} or {x:y}\" if you don't want \"?:\"","msgtype":"m.text"},"ts":1712845413487,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jM8ZWqqcgITCyGeHY7pJxygph_S4Z69qhaDrph83aqg"},
{"content":{"body":"I documented all these situations ","msgtype":"m.text"},"ts":1712845428185,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NlIbu4IoXOJ-QNdxFCnS5FV1vbX25_0txcyJXkJsxkA"},
{"content":{"body":"TabAtkins: I think we may have to drop RegExp patterns. Even if we resolve the issue with `is`, I think anything involving a RegExp literal is going to be problematic.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I think we may have to drop RegExp patterns. Even if we resolve the issue with <code>is</code>, I think anything involving a RegExp literal is going to be problematic.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"ts":1712845620276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7v7Y8fgTJmqrxXhmW3NMbgMV_go0Xw3nL7Q63EFZJho"},
{"content":{"body":"Why so?","msgtype":"m.text"},"ts":1712845669122,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZTNhncrYl9PK-O8MEGM8Wc3kflfRBjjjF9lG74Iky78"},
{"content":{"body":"there's lots of ways to have them without the problems","m.mentions":{},"msgtype":"m.text"},"ts":1712845683354,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nhz7_v-j6Ch4d3hRObIDss2a8Jr4MBozEOyVxzKCepI"},
{"content":{"body":"we could require they have some kind of bounding characters or something.","m.mentions":{},"msgtype":"m.text"},"ts":1712845694737,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IT-zaMcUCqFqkVRE6F7Uc4bosrevoHsZqML_PRLGuGQ"},
{"content":{"body":"regexes are very important to have.","m.mentions":{},"msgtype":"m.text"},"ts":1712845702181,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UsR3WVnMpCNGs6cn4Fhj0p4zSNEF2Ucjf4sO8UMiNLA"},
{"content":{"body":"Everything starting with `/` is suspect","format":"org.matrix.custom.html","formatted_body":"Everything starting with <code>/</code> is suspect","m.mentions":{},"msgtype":"m.text"},"ts":1712845708214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$efNb4JkCgLWnxZdm0jnPJuTq-8SJsPgv-8NPKKeOXHY"},
{"content":{"body":"> <@ljharb:matrix.org> regexes are very important to have.\n\nI don't disagree, but they are at least achievable with extractors.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$UsR3WVnMpCNGs6cn4Fhj0p4zSNEF2Ucjf4sO8UMiNLA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>regexes are very important to have.</blockquote></mx-reply>I don't disagree, but they are at least achievable with extractors.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UsR3WVnMpCNGs6cn4Fhj0p4zSNEF2Ucjf4sO8UMiNLA"}},"msgtype":"m.text"},"ts":1712845748320,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rFOh7rebyQKnNmXjONHPfw61-_xh1Mnz6Ghx4iotGm8"},
{"content":{"body":"> <@rbuckton:matrix.org> Everything starting with `/` is suspect\n\nso let's find another character for it to start with. we could require wrapping parens, or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$efNb4JkCgLWnxZdm0jnPJuTq-8SJsPgv-8NPKKeOXHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Everything starting with <code>/</code> is suspect</blockquote></mx-reply>so let's find another character for it to start with. we could require wrapping parens, or something","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$efNb4JkCgLWnxZdm0jnPJuTq-8SJsPgv-8NPKKeOXHY"}},"msgtype":"m.text"},"ts":1712845799276,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bWXCQFMbgh3ZWeYPYNXcYtMr33VFQykftnkdFO1D8Xk"},
{"content":{"body":"They could also be handled via some other syntax, like `when like \"(?i:\\w+)\"`","format":"org.matrix.custom.html","formatted_body":"They could also be handled via some other syntax, like <code>when like \"(?i:\\w+)\"</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712845806775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E8GQjeVovZFtqRzLq3I9HUy4FwO_jdKoZAdGVCRbjhI"},
{"content":{"body":"sure. i don't think regexes are the primary issues we need to resolve rn","m.mentions":{},"msgtype":"m.text"},"ts":1712845850813,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xJdIfGiWB6znIDY7Q34N4t3OnhmPjNnQBQZ5ch8RBRg"},
{"content":{"body":"> <@ljharb:matrix.org> so let's find another character for it to start with. we could require wrapping parens, or something\n\nMaybe, but I still don't consider them to be MVP as there are workarounds without them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$bWXCQFMbgh3ZWeYPYNXcYtMr33VFQykftnkdFO1D8Xk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so let's find another character for it to start with. we could require wrapping parens, or something</blockquote></mx-reply>Maybe, but I still don't consider them to be MVP as there are workarounds without them.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bWXCQFMbgh3ZWeYPYNXcYtMr33VFQykftnkdFO1D8Xk"}},"msgtype":"m.text"},"ts":1712845860603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t2AGb7YcukT7281D9PHf9XH0rVuUkw9OuHE3aMjNUC8"},
{"content":{"body":"dminor's feedback seems opposite to yulia's feedback; and waldemar is pointing out that binary keyword operators may not be possible. these seem worth focusing on","m.mentions":{},"msgtype":"m.text"},"ts":1712845893087,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mt4rilbuViklwNfuypOgYHtvg8YZ1yvgDm2pdrOx7e8"},
{"content":{"body":"> <@ljharb:matrix.org> it's an argument for having `is` go first, and `match` as the follow-on\n\nWell, to me `match` is the core of pattern matching, not `is`, I'm not convinced we need anything more. I'm happy to be convinced otherwise, but I would like to see an argument made for why a `match` statement is not sufficiently powerful for JavaScript.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$_MVesdOE9Lgv7WoQep8smEANQTDJrCHAbXEi9n4H2yw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it's an argument for having <code>is</code> go first, and <code>match</code> as the follow-on</blockquote></mx-reply>Well, to me <code>match</code> is the core of pattern matching, not <code>is</code>, I'm not convinced we need anything more. I'm happy to be convinced otherwise, but I would like to see an argument made for why a <code>match</code> statement is not sufficiently powerful for JavaScript.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_MVesdOE9Lgv7WoQep8smEANQTDJrCHAbXEi9n4H2yw"}},"msgtype":"m.text"},"ts":1712845921889,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$26w1imxdjW2X1gRbUW3OE8RexAyHTO9f4jRFRDOxq-4"},
{"content":{"body":"> <@ljharb:matrix.org> sure. i don't think regexes are the primary issues we need to resolve rn\n\nAfter plenary I'm going to take a closer look at all of the cover grammars to ensure things like `is`, `void`, `using` and `await using` all play nice together. I think choosing something like `~=` would just be kicking the can down the road.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$xJdIfGiWB6znIDY7Q34N4t3OnhmPjNnQBQZ5ch8RBRg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure. i don&#39;t think regexes are the primary issues we need to resolve rn</blockquote></mx-reply>After plenary I'm going to take a closer look at all of the cover grammars to ensure things like <code>is</code>, <code>void</code>, <code>using</code> and <code>await using</code> all play nice together. I think choosing something like <code>~=</code> would just be kicking the can down the road.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xJdIfGiWB6znIDY7Q34N4t3OnhmPjNnQBQZ5ch8RBRg"}},"msgtype":"m.text"},"ts":1712845928612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YbkvuJd6kk3dLZ4emxf2ZmvlCMEBamn2E3bUuG8754o"},
{"content":{"body":"dminor: i like `is` on its own, but i definitely am happy with just having `match` - again, we created it in response to yulia's and the spidermonkey team's feedback.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: i like <code>is</code> on its own, but i definitely am happy with just having <code>match</code> - again, we created it in response to yulia's and the spidermonkey team's feedback.","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1712845984499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LE5NpmNsx71TO82OAkvRj6dDTZDCQvxG7kj9dJ4ewY4"},
{"content":{"body":"Though that may mean I have to drop `void` in _AssignmentPattern_, which may be for the best. The proposal _is_ called Discard _Bindings_...","format":"org.matrix.custom.html","formatted_body":"Though that may mean I have to drop <code>void</code> in <em>AssignmentPattern</em>, which may be for the best. The proposal <em>is</em> called Discard <em>Bindings</em>...","m.mentions":{},"msgtype":"m.text"},"ts":1712846021709,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c2fhxhvXhMDYy-cbu06h0OlsD3_p6l2rfFO3ZgY3WWo"},
{"content":{"body":"I realize Yulia and I are not in complete agreement about this, I'll chat with her about it.","m.mentions":{},"msgtype":"m.text"},"ts":1712846023350,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$LSgZbaAesXzXpKorOHkVZT2Z9inb0PumBj2UjjWe0IY"},
{"content":{"body":"so it'd be really helpful to have yulia in these discussions to ensure her viewpoint is addressed","m.mentions":{},"msgtype":"m.text"},"ts":1712846038063,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fe3833mhZVse3wRW9231XiCSqU7cDtbZMz2Lw1QD7WE"},
{"content":{"body":"I would very much like to have `if(x is Some(let y)) { }` and `node is Binary(let left, \"===\", let right) && doSomethingWith(left, right)`","format":"org.matrix.custom.html","formatted_body":"I would very much like to have <code>if(x is Some(let y)) { }</code> and <code>node is Binary(let left, \"===\", let right) &amp;&amp; doSomethingWith(left, right)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712846189288,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$o_qmRUllCVr5VrQvR7XbksbmW6r7ib6i75aUoVW6Lb4"},
{"content":{"body":"Please take what I've said so far as my personal opinion, not the SpiderMonkey team's. We'll be meeting next week, I'm hoping we can come to an internal consensus about pattern matching then.","m.mentions":{},"msgtype":"m.text"},"ts":1712846208626,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$mADVNpsu0qF9PC5r-X-FYY_cNK5KHTLYyRdKt62OxK0"},
{"content":{"body":"I think it would also help if we can pare down the pattern syntax to an MVP and pursue extending the syntax further in follow-ons, much like Iterator helpers has done.","m.mentions":{},"msgtype":"m.text"},"ts":1712846290441,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KDeORdonnP-MqDbaRIXFNt_JeQbNARrXYAQgTFIw-Mk"},
{"content":{"body":"Re: my thoughts on the epic. we don't have to have is -- that wasn't my intention. `is` was meant to be illustrative of what a smaller proposal might enable","format":"org.matrix.custom.html","formatted_body":"Re: my thoughts on the epic. we don't have to have is -- that wasn't my intention. <code>is</code> was meant to be illustrative of what a smaller proposal might enable","m.mentions":{},"msgtype":"m.text"},"ts":1712846342181,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qtCxlr113ZOBNSTEo8iV8FBJfCitO5XYaEsG1fnTpPY"},
{"content":{"body":" * Re: my thoughts on the epic. we don't have to have `is` -- that wasn't my intention. `is` was meant to be illustrative of what a smaller proposal might enable. The same re the discussion on `let`/`const`","format":"org.matrix.custom.html","formatted_body":" * Re: my thoughts on the epic. we don't have to have <code>is</code> -- that wasn't my intention. <code>is</code> was meant to be illustrative of what a smaller proposal might enable. The same re the discussion on <code>let</code>/<code>const</code>","m.mentions":{},"m.new_content":{"body":"Re: my thoughts on the epic. we don't have to have `is` -- that wasn't my intention. `is` was meant to be illustrative of what a smaller proposal might enable. The same re the discussion on `let`/`const`","format":"org.matrix.custom.html","formatted_body":"Re: my thoughts on the epic. we don't have to have <code>is</code> -- that wasn't my intention. <code>is</code> was meant to be illustrative of what a smaller proposal might enable. The same re the discussion on <code>let</code>/<code>const</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qtCxlr113ZOBNSTEo8iV8FBJfCitO5XYaEsG1fnTpPY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712846369100,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$B7qWtmaCSDoDNGk2yzMjs4TVcg2Li9W2_2iF-Gjb6Jc"},
{"content":{"body":"i would be very happy if we first went with extractors and landed the custom matcher there. And then moved forward with match, and then the pattern matching DSL","m.mentions":{},"msgtype":"m.text"},"ts":1712846408916,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Z1clGikHI90mu11fy8ki_Y0nIsFAUkXm16cqvXSATjc"},
{"content":{"body":"This is the main thing i was communicating with the epic: this proposal is too large and we need to think about it in smaller chunks","m.mentions":{},"msgtype":"m.text"},"ts":1712846430197,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hdVBDi8hr5nSfWWfDnCTZpt2l0fSV7ksf6Vv3zygDa4"},
{"content":{"body":"That is consistent with what Dan is saying","m.mentions":{},"msgtype":"m.text"},"ts":1712846437421,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$o7AeRbXwpeTTwuqpSM8_1MFwMGmpnB_hOerN9MLaZ6M"},
{"content":{"body":"I think I'm fine with `is` being a follow on, but the semantics of `is` have implications on the design of this proposal that we must keep in mind.","format":"org.matrix.custom.html","formatted_body":"I think I'm fine with <code>is</code> being a follow on, but the semantics of <code>is</code> have implications on the design of this proposal that we must keep in mind.","m.mentions":{},"msgtype":"m.text"},"ts":1712846441387,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s-rtER6MpC2bmpNoKq9SGuYPc4zmHXSbZJf0yp3sOIk"},
{"content":{"body":"> <@yulia:mozilla.org> This is the main thing i was communicating with the epic: this proposal is too large and we need to think about it in smaller chunks\n\ntbh tho this feels like if someone suggested Temporal ship one type at a time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$hdVBDi8hr5nSfWWfDnCTZpt2l0fSV7ksf6Vv3zygDa4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>This is the main thing i was communicating with the epic: this proposal is too large and we need to think about it in smaller chunks</blockquote></mx-reply>tbh tho this feels like if someone suggested Temporal ship one type at a time","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hdVBDi8hr5nSfWWfDnCTZpt2l0fSV7ksf6Vv3zygDa4"}},"msgtype":"m.text"},"ts":1712846495569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z7-mslYCzBUeNnYtWW7-KcgS8q5eKloLG6F3bWWPXIQ"},
{"content":{"body":"One question I would ask is, are those semantics what we want to preserve, or is there an underlying concept that we can iterate on. I know waldemar had concerns with infix keywords, and i think we should come to a general understanding of what would be preferrable","m.mentions":{},"msgtype":"m.text"},"ts":1712846508299,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$WQTGsXS2v58f8AooQSaRxA3cH-Dz750doLMdbuc4qI4"},
{"content":{"body":"\"large\" isn't inherently a problem on its own; some things are just large","m.mentions":{},"msgtype":"m.text"},"ts":1712846511999,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a06WCRGJUlprEuuGcgjBGRzcf73jbKxwSfiPhNLi8Ns"},
{"content":{"body":"rather than designing around a preconception","m.mentions":{},"msgtype":"m.text"},"ts":1712846519152,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jDL312mEp68zxhh7fxCpM8Y9ADzCyQQf36JAAG9AYo0"},
{"content":{"body":"temporal should have been split up as well","m.mentions":{},"msgtype":"m.text"},"ts":1712846528380,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$XMzyrDDQFfV7Cj-xw_Z0WySngWPA-loI3yP8fl5hV8s"},
{"content":{"body":"the situation with temporal being endlessly stuck hasn't been great","m.mentions":{},"msgtype":"m.text"},"ts":1712846548278,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZTtBE4OyVofz-WP38cLbGRii_BG4zOmi4O_MXmY43_s"},
{"content":{"body":"i agree it's incredibly large, but i don't see how it could have been viable split up.","m.mentions":{},"msgtype":"m.text"},"ts":1712846549966,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ry4bpGCofCIprtXJBXF3aY2G0HC0wuv3q0oVPLVZLrU"},
{"content":{"body":"There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that _aren't_ MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but both are not MVP.","format":"org.matrix.custom.html","formatted_body":"There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that <em>aren't</em> MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but both are not MVP.","m.mentions":{},"msgtype":"m.text"},"ts":1712846574173,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y_LBUqb3YWsvMxl537GHrxwa1eX4BUbEJjm_-VW5U5Q"},
{"content":{"body":" * There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that _aren't_ MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but neither are MVP.","format":"org.matrix.custom.html","formatted_body":" * There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that <em>aren't</em> MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but neither are MVP.","m.mentions":{},"m.new_content":{"body":"There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that _aren't_ MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but neither are MVP.","format":"org.matrix.custom.html","formatted_body":"There is a core set of pattern mechanics that is an absolute MVP, there are many mechanisms that <em>aren't</em> MVP despite the importance various champions put on them. For example, I find relational patterns much more important than regex literal patterns, but neither are MVP.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$y_LBUqb3YWsvMxl537GHrxwa1eX4BUbEJjm_-VW5U5Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712846579553,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pgEY5o6hz4IRRg1VKWl26U7gGsGYf3IqswO2PE3tHa4"},
{"content":{"body":"Postponing relational patterns would mean holes in the syntax for corner cases we find important, but they don't break the proposal by not having them immediately.","m.mentions":{},"msgtype":"m.text"},"ts":1712846635258,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2kLJTwzzrfMz--r9VnUGsryaFWApxYx8RUt3YXagi8s"},
{"content":{"body":"i think you need to start with the ideal that it can be split up, because i think the reason we haven't developed an understanding of a smaller core with principles guiding future design is because we can't align on the principles","m.mentions":{},"msgtype":"m.text"},"ts":1712846641905,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$FQ1LFPwKDrwbIg3hfOef1kC3cAz4tS2MKqWMadqp6YA"},
{"content":{"body":"That said, `is not in` and `is not instanceof` are valuable enough that they already have a competing proposal at stage 1","format":"org.matrix.custom.html","formatted_body":"That said, <code>is not in</code> and <code>is not instanceof</code> are valuable enough that they already have a competing proposal at stage 1","m.mentions":{},"msgtype":"m.text"},"ts":1712846673573,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l4P3h00oR4AwOOh1fo9rb3eSN3Pnhg6t_F67f1e1024"},
{"content":{"body":"that doesn't mean we can only do this by designing everything up front, we should get past the impass on principles. ","m.mentions":{},"msgtype":"m.text"},"ts":1712846685105,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dUzybnOrJfqLWoymELO5ZetOcg642piqQdPeOGFi1Mw"},
{"content":{"body":"certainly there's a lot of differing opinions in committee about how a proposal should be designed :-)","m.mentions":{},"msgtype":"m.text"},"ts":1712846698450,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1kRngpo1kiPFopXaHvj-MONZWq4JMrgAhFKH_b0RO_A"},
{"content":{"body":" * certainly there's a lot of differing opinions in committee about how a proposal should be designed and developed :-)","m.mentions":{},"m.new_content":{"body":"certainly there's a lot of differing opinions in committee about how a proposal should be designed and developed :-)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1kRngpo1kiPFopXaHvj-MONZWq4JMrgAhFKH_b0RO_A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712846720473,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Vp2MJp9Ylk0NEeGTQX_AAa6jWny0R-GUE4KZ-k3w0t4"},
{"content":{"body":"im sorry i don't have more time for this, but i do trust dan's leadership on this proposal. he represents the current spidermonkey consensus","m.mentions":{},"msgtype":"m.text"},"ts":1712846726289,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$h8qP18byO7T6F1HGfMpHeNHgCawW_EDJxifoj0dibwQ"},
{"content":{"body":"regarding the epic and the stuff i suggested, they were really suggestions to try and illustrate / bring discussion. It wasn't meant as \"you have to include this or we will block it\". The block was on complexity. I was trying to help but i think my message was lost","m.mentions":{},"msgtype":"m.text"},"ts":1712846854303,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$tRp1MJisHDUPlZihPmO-h_UZTu8EPDzPIBD8fXPqDhg"},
{"content":{"body":"I've been struggling with this because every time i ask for the proposal to be considered in smaller parts, i am told it is impossible, so i tried to demonstrate it but that backfired with the proposal becoming more complex and incorporating things I had meant as examples","m.mentions":{},"msgtype":"m.text"},"ts":1712846904640,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qQzKadV1umUIKfsYZLy8E9o9l7pkQv-FHydSkaR60b0"},
{"content":{"body":" * I've been struggling with this because every time i asked for the proposal to be considered in smaller parts, i am told it is impossible, so i tried to demonstrate it but that backfired with the proposal becoming more complex and incorporating things I had meant as examples","m.mentions":{},"m.new_content":{"body":"I've been struggling with this because every time i asked for the proposal to be considered in smaller parts, i am told it is impossible, so i tried to demonstrate it but that backfired with the proposal becoming more complex and incorporating things I had meant as examples","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qQzKadV1umUIKfsYZLy8E9o9l7pkQv-FHydSkaR60b0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712846924548,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$MBS4lBbK4FDvbQUzzcDQrvrAFsG4NIgjffd9mvyVZD8"},
{"content":{"body":" * I've been struggling with this because every time i asked for the proposal to be considered in smaller parts, i was told it is impossible, so i tried to demonstrate it but that backfired with the proposal becoming more complex and incorporating things I had meant as examples","m.mentions":{},"m.new_content":{"body":"I've been struggling with this because every time i asked for the proposal to be considered in smaller parts, i was told it is impossible, so i tried to demonstrate it but that backfired with the proposal becoming more complex and incorporating things I had meant as examples","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qQzKadV1umUIKfsYZLy8E9o9l7pkQv-FHydSkaR60b0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712846956853,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ENhlBeQbatcPAZ3IwwwztoEEwg6loFuzxQTjsh_AULI"},
{"content":{"body":"I would propose we consider the following as the MVP:\n- irrefutable `match (value)`\n- literal constant patterns\n- prefix numeric unary patterns\n- member reference patterns\n- extractors\n- object patterns (`{}`) w/ property patterns (`a: b`/`[x]: b`) and rest (`...`)\n- exhaustive array patterns (`[]`) w/ elision and rest (`...`)\n- `and`/`or`/`not` patterns\n- grouping patterns\n- variable patterns\n- discards (via either `void` or `let _`)\n- `if` patterns\n\nI think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add `in` relational patterns to cover `is not in`. Anything else is follow on.\n\n","format":"org.matrix.custom.html","formatted_body":"<p>I would propose we consider the following as the MVP:</p>\n<ul>\n<li>irrefutable <code>match (value)</code></li>\n<li>literal constant patterns</li>\n<li>prefix numeric unary patterns</li>\n<li>member reference patterns</li>\n<li>extractors</li>\n<li>object patterns (<code>{}</code>) w/ property patterns (<code>a: b</code>/<code>[x]: b</code>) and rest (<code>...</code>)</li>\n<li>exhaustive array patterns (<code>[]</code>) w/ elision and rest (<code>...</code>)</li>\n<li><code>and</code>/<code>or</code>/<code>not</code> patterns</li>\n<li>grouping patterns</li>\n<li>variable patterns</li>\n<li>discards (via either <code>void</code> or <code>let _</code>)</li>\n<li><code>if</code> patterns</li>\n</ul>\n<p>I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add <code>in</code> relational patterns to cover <code>is not in</code>. Anything else is follow on.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712847109738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs"},
{"content":{"body":"> <@yulia:mozilla.org> that doesn't mean we can only do this by designing everything up front, we should get past the impass on principles.\n\nafter this redesign, most of the content can be dropped, but they're included in the big picture so I can make sure they're work well together (if we have to ship them in multiple batches).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$dUzybnOrJfqLWoymELO5ZetOcg642piqQdPeOGFi1Mw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>that doesn&#39;t mean we can only do this by designing everything up front, we should get past the impass on principles. </blockquote></mx-reply>after this redesign, most of the content can be dropped, but they're included in the big picture so I can make sure they're work well together (if we have to ship them in multiple batches).","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dUzybnOrJfqLWoymELO5ZetOcg642piqQdPeOGFi1Mw"}},"msgtype":"m.text"},"ts":1712847116226,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$uJUV6ckE0fy3IndFIHShDnJpImESaLS16ZFxwXpfvAg"},
{"content":{"body":"there are a lot of notes explaining this","m.mentions":{},"msgtype":"m.text"},"ts":1712847174520,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$y8vvHqIgj70df_n908aXlcw4U9CXB76vcoVNVfQLenI"},
{"content":{"body":"> <@rbuckton:matrix.org> I would propose we consider the following as the MVP:\n> - irrefutable `match (value)`\n> - literal constant patterns\n> - prefix numeric unary patterns\n> - member reference patterns\n> - extractors\n> - object patterns (`{}`) w/ property patterns (`a: b`/`[x]: b`) and rest (`...`)\n> - exhaustive array patterns (`[]`) w/ elision and rest (`...`)\n> - `and`/`or`/`not` patterns\n> - grouping patterns\n> - variable patterns\n> - discards (via either `void` or `let _`)\n> - `if` patterns\n> \n> I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add `in` relational patterns to cover `is not in`. Anything else is follow on.\n\nwhat does this suggestion drop?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I would propose we consider the following as the MVP:</p>\n<ul>\n<li>irrefutable <code>match (value)</code></li>\n<li>literal constant patterns</li>\n<li>prefix numeric unary patterns</li>\n<li>member reference patterns</li>\n<li>extractors</li>\n<li>object patterns (<code>{}</code>) w/ property patterns (<code>a: b</code>/<code>[x]: b</code>) and rest (<code>...</code>)</li>\n<li>exhaustive array patterns (<code>[]</code>) w/ elision and rest (<code>...</code>)</li>\n<li><code>and</code>/<code>or</code>/<code>not</code> patterns</li>\n<li>grouping patterns</li>\n<li>variable patterns</li>\n<li>discards (via either <code>void</code> or <code>let _</code>)</li>\n<li><code>if</code> patterns</li>\n</ul>\n<p>I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add <code>in</code> relational patterns to cover <code>is not in</code>. Anything else is follow on.</p>\n</blockquote></mx-reply>what does this suggestion drop?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs"}},"msgtype":"m.text"},"ts":1712847192645,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jEszvlA3Eo2B5k9hGrdkvjl-TnWPW_xuRJ4v2ylHXcE"},
{"content":{"body":" * what does this suggestion drop? (regexes, obv, but im hoping for a list)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I would propose we consider the following as the MVP:</p>\n<ul>\n<li>irrefutable <code>match (value)</code></li>\n<li>literal constant patterns</li>\n<li>prefix numeric unary patterns</li>\n<li>member reference patterns</li>\n<li>extractors</li>\n<li>object patterns (<code>{}</code>) w/ property patterns (<code>a: b</code>/<code>[x]: b</code>) and rest (<code>...</code>)</li>\n<li>exhaustive array patterns (<code>[]</code>) w/ elision and rest (<code>...</code>)</li>\n<li><code>and</code>/<code>or</code>/<code>not</code> patterns</li>\n<li>grouping patterns</li>\n<li>variable patterns</li>\n<li>discards (via either <code>void</code> or <code>let _</code>)</li>\n<li><code>if</code> patterns</li>\n</ul>\n<p>I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add <code>in</code> relational patterns to cover <code>is not in</code>. Anything else is follow on.</p>\n</blockquote></mx-reply> * what does this suggestion drop? (regexes, obv, but im hoping for a list)","m.mentions":{},"m.new_content":{"body":"what does this suggestion drop? (regexes, obv, but im hoping for a list)","format":"org.matrix.custom.html","formatted_body":"what does this suggestion drop? (regexes, obv, but im hoping for a list)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jEszvlA3Eo2B5k9hGrdkvjl-TnWPW_xuRJ4v2ylHXcE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712847289291,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TcS8_kcMXULDDLXeIEEpipztdwZdvfClDb66-dYOdyc"},
{"content":{"body":"`is`, regexp literal patterns, `<`, `<=`, `>`, `>=`, `==`, `!=`, `===`, `!==`, `instanceof`, `has`, `hasOwn`, `{ a?: b }`, any kind of potential shorthand `{ a }` pattern (can't recall if that's in there)","format":"org.matrix.custom.html","formatted_body":"<code>is</code>, regexp literal patterns, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>, <code>instanceof</code>, <code>has</code>, <code>hasOwn</code>, <code>{ a?: b }</code>, any kind of potential shorthand <code>{ a }</code> pattern (can't recall if that's in there)","m.mentions":{},"msgtype":"m.text"},"ts":1712847294166,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AZM_CtvbHKwYjTBCdw_VcYFQ6RF-wau2zZUdwVecFFU"},
{"content":{"body":"it is","m.mentions":{},"msgtype":"m.text"},"ts":1712847325281,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8xIXEDpQrQXJYt6ElAOwD_ddyz2rZd-nSa962xtmXBU"},
{"content":{"body":"`hasOwn`, as much as i want it, isn't its own ergonomic check in the language, so i can accept that one being a follow-in","format":"org.matrix.custom.html","formatted_body":"<code>hasOwn</code>, as much as i want it, isn't its own ergonomic check in the language, so i can accept that one being a follow-in","m.mentions":{},"msgtype":"m.text"},"ts":1712847349856,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SYpFiSPfgCkZDbCA-1EfSjUfMicoj8uKkcnAJW664d8"},
{"content":{"body":"`in` and `instanceof` seem like good follow-ons because the semantics are 100% fixed; that's also why it seems like an obvious initial inclusion tho","format":"org.matrix.custom.html","formatted_body":"<code>in</code> and <code>instanceof</code> seem like good follow-ons because the semantics are 100% fixed; that's also why it seems like an obvious initial inclusion tho","m.mentions":{},"msgtype":"m.text"},"ts":1712847387551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3vydczxQlqzxnqYeY9YxCCi4lH1dKIeOUEpramPGhI4"},
{"content":{"body":"I think there were some other optional things as well, plus some reserved things like `` `${let a}` `` (we should still reserve it, but don't need examples of potential uses in the spec text)","format":"org.matrix.custom.html","formatted_body":"I think there were some other optional things as well, plus some reserved things like <code>`${let a}`</code> (we should still reserve it, but don't need examples of potential uses in the spec text)","m.mentions":{},"msgtype":"m.text"},"ts":1712847391553,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BVeyL90UQMmlW-mGvyU2yxNJjdQsnv5y1C88G1QUGd4"},
{"content":{"body":"`instanceof` is less motivated since `x is C` and `x is not C` are mostly sufficient.","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> is less motivated since <code>x is C</code> and <code>x is not C</code> are mostly sufficient.","m.mentions":{},"msgtype":"m.text"},"ts":1712847413821,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RN4DHDJ1msI6gi3GOl9zR9dDaRJs1erv36JPkuDFm8s"},
{"content":{"body":"relational patterns i agree can be added later, altho the equality comparisons maybe should be kept","m.mentions":{},"msgtype":"m.text"},"ts":1712847417207,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wOeWqLHcr5Gk8TlYvRSVjjA6o5StfG4dcx0XMKOB_9Q"},
{"content":{"body":"`in` is very well motivated, IMO.","format":"org.matrix.custom.html","formatted_body":"<code>in</code> is very well motivated, IMO.","m.mentions":{},"msgtype":"m.text"},"ts":1712847429993,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aB6mqDnpYpJZvS8LFiDPpSC_NSw-ePX1iHH_VEv-VXQ"},
{"content":{"body":"why drop `{ a }`?","format":"org.matrix.custom.html","formatted_body":"why drop <code>{ a }</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712847436445,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LVA22jcggalfgE0nZJZ2F-v4yIu31p0lfYtQJfxYOpE"},
{"content":{"body":"I'd rather punt on equality. It handles a narrow corner case.","m.mentions":{},"msgtype":"m.text"},"ts":1712847455790,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qt9muSZJsMJ4R6xHo1sJbq4CZKA5by9mj2NuGmbB9gQ"},
{"content":{"body":"what are the semantics of `{ a }` in a pattern? My expectation would be \"check if subject has a property `a` whose value must equal the value of the identifier reference `a`\". ","format":"org.matrix.custom.html","formatted_body":"what are the semantics of <code>{ a }</code> in a pattern? My expectation would be \"check if subject has a property <code>a</code> whose value must equal the value of the identifier reference <code>a</code>\".","m.mentions":{},"msgtype":"m.text"},"ts":1712847504816,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vHpuj8UXnErSIHiQ-PxcZT4F0bcOfBrZYWnsEvCmCk0"},
{"content":{"body":"Others might interpret `{a}` as being like `{a: let a }`, which it's not. Instead, they can use `{ a: a }` or `{ a: let a }`.","format":"org.matrix.custom.html","formatted_body":"Others might interpret <code>{a}</code> as being like <code>{a: let a }</code>, which it's not. Instead, they can use <code>{ a: a }</code> or <code>{ a: let a }</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712847540370,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sjyHC_lq32NCp4k6SihVulGpkVYFTS0haYT6DhuneBE"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1712847547644,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$S7jqJAE4UhoVK_9fSZzCgB4FZCYoutFR5UNO4gGZcM4"},
{"content":{"body":"invoking the matcher protocol as relevant","m.mentions":{},"msgtype":"m.text"},"ts":1712847557721,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Xz6HHzddrquLtajtw6XG_EWIBXH8YNzSq3ZWKMc3WY0"},
{"content":{"body":"> <@ljharb:matrix.org> invoking the matcher protocol as relevant\n\nThat doesn't seem practically useful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Xz6HHzddrquLtajtw6XG_EWIBXH8YNzSq3ZWKMc3WY0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>invoking the matcher protocol as relevant</blockquote></mx-reply>That doesn't seem practically useful.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Xz6HHzddrquLtajtw6XG_EWIBXH8YNzSq3ZWKMc3WY0"}},"msgtype":"m.text"},"ts":1712847572335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qtcB1nXNtdSMf34YdJAEPX4yq-xYi10NgBkn5HgKuHA"},
{"content":{"body":"and `{ let a }` would be the with-binding shorthand form","format":"org.matrix.custom.html","formatted_body":"and <code>{ let a }</code> would be the with-binding shorthand form","m.mentions":{},"msgtype":"m.text"},"ts":1712847575457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TYeh2t07mO-A3kAAi_Jrn0wqedmhkpkvRPeeNuDup90"},
{"content":{"body":"I also think that, despite its convenience, we might want to postpone `{ let a }` and just have `{ a: let a }`.","format":"org.matrix.custom.html","formatted_body":"I also think that, despite its convenience, we might want to postpone <code>{ let a }</code> and just have <code>{ a: let a }</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712847592973,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ERKTn_mTe4fni0WUWVDRQbKNTtu7d8cophdwjydohQc"},
{"content":{"body":"It's definitely more convenient, so hopefully it would have quick turnaround as a follow-on proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1712847627257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WWObr94HW21CX8aJOz1rT1hJfLmqde0ec5EplAHC8b0"},
{"content":{"body":"But it allows us to further pare down the proposal to the absolute MVP.","m.mentions":{},"msgtype":"m.text"},"ts":1712847647607,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FQEaZ20mg-XGa_HPZKjPRTaOztJdlhsdDFQHNSfetA4"},
{"content":{"body":"and with this simpler featureset, would the grammar concerns and complexity concerns that have been voiced be resolved?","m.mentions":{},"msgtype":"m.text"},"ts":1712847663808,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tbxhNeUONfkLv3GittajrpBViCXYXGTd2s6bo_2HxFo"},
{"content":{"body":" * and with this simpler featureset, would the grammar concerns and complexity concerns that have been voiced be resolved? (in theory, obv, until the folks that voiced them can confirm)","m.mentions":{},"m.new_content":{"body":"and with this simpler featureset, would the grammar concerns and complexity concerns that have been voiced be resolved? (in theory, obv, until the folks that voiced them can confirm)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tbxhNeUONfkLv3GittajrpBViCXYXGTd2s6bo_2HxFo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712847706781,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EdzMiADBSwKHNsR9Gzu9L6ah8HCLdbxMaBm1ztvYs7M"},
{"content":{"body":"and we have 20 follow-ons","m.mentions":{},"msgtype":"m.text"},"ts":1712847739721,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UkXf94pbAxgu3tmWxk90XJYXrmuXrWHqZZMtvs8H-Nw"},
{"content":{"body":"I think it addresses the grammar concerns because we're not including the things with ambiguous parse. `is` and regexp literals were behind waldemar's concerns.","format":"org.matrix.custom.html","formatted_body":"I think it addresses the grammar concerns because we're not including the things with ambiguous parse. <code>is</code> and regexp literals were behind waldemar's concerns.","m.mentions":{},"msgtype":"m.text"},"ts":1712847742492,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pqN1vFKSV3hZ99hLRaH2iKh6BYuC2Dcc_K3VyjLOwQM"},
{"content":{"body":"> <@jackworks:matrix.org> and we have 20 follow-ons\n\nSure, so has iterator helpers, and it's been fairly successful at getting them adopted.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$UkXf94pbAxgu3tmWxk90XJYXrmuXrWHqZZMtvs8H-Nw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>and we have 20 follow-ons</blockquote></mx-reply>Sure, so has iterator helpers, and it's been fairly successful at getting them adopted.","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UkXf94pbAxgu3tmWxk90XJYXrmuXrWHqZZMtvs8H-Nw"}},"msgtype":"m.text"},"ts":1712847760276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qIRU3g4wXo67P151pJEgku3spbs7Qu063eZX8Skrlck"},
{"content":{"body":"If we shoot for the moon now, we won't get there. Start with the bare bones version of the proposal, get that to Stage 4, and then propose enhancements and features. Some may be individual, some may be grouped together.","m.mentions":{},"msgtype":"m.text"},"ts":1712847824543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aWABy3vHGOCt--GDV7llxq2XDjuM3oRvRdxQ9xT5GpA"},
{"content":{"body":"Once the base syntax and semantics are in the language, its far easier to argue for QOL improvements.","m.mentions":{},"msgtype":"m.text"},"ts":1712847863625,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RvaTp19pnvZ4dqBqcBJ3Gdr7pTR8uRBXRCh_b3YZwTs"},
{"content":{"body":"given the many inadequacies of the max/min approach with `class`, i'd find it sad to go in that direction, but you might be right.","format":"org.matrix.custom.html","formatted_body":"given the many inadequacies of the max/min approach with <code>class</code>, i'd find it sad to go in that direction, but you might be right.","m.mentions":{},"msgtype":"m.text"},"ts":1712847870555,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f8MvTV7DkPI7F7nvFV9gzOqq56gbbUKZsPcUfuDtJ1c"},
{"content":{"body":"I do to, but pattern matching *is* a major syntax change. As it stands its far too intimidating.","format":"org.matrix.custom.html","formatted_body":"I do to, but pattern matching <em>is</em> a major syntax change. As it stands its far too intimidating.","m.mentions":{},"msgtype":"m.text"},"ts":1712847944164,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A1N33ks23VTbBDKFI1JhEsq_4VvrzX_NDBK2JfH33Xc"},
{"content":{"body":"Extractors and `if` patterns let us work around missing functionality, at least. It's easier to argue for `> 1` as a QOL improvement over `let a and if(a > 1)` than it is to propose both at the outset.","format":"org.matrix.custom.html","formatted_body":"Extractors and <code>if</code> patterns let us work around missing functionality, at least. It's easier to argue for <code>&gt; 1</code> as a QOL improvement over <code>let a and if(a &gt; 1)</code> than it is to propose both at the outset.","m.mentions":{},"msgtype":"m.text"},"ts":1712848166130,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6TW1khotYTm5aLeSEGoxfGtQsJh3XLUIv9HdotiopiY"},
{"content":{"body":"> <@ljharb:matrix.org> given the many inadequacies of the max/min approach with `class`, i'd find it sad to go in that direction, but you might be right.\n\nmax/min class is a disaster and I don't want repeat it on pattern matching. the way to solve this, is to design all possible follow-ons we can think of and make sure they work good together or not together, then we can cherry pick some. I think we're currently doing this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$f8MvTV7DkPI7F7nvFV9gzOqq56gbbUKZsPcUfuDtJ1c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>given the many inadequacies of the max/min approach with <code>class</code>, i'd find it sad to go in that direction, but you might be right.</blockquote></mx-reply>max/min class is a disaster and I don't want repeat it on pattern matching. the way to solve this, is to design all possible follow-ons we can think of and make sure they work good together or not together, then we can cherry pick some. I think we're currently doing this","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f8MvTV7DkPI7F7nvFV9gzOqq56gbbUKZsPcUfuDtJ1c"}},"msgtype":"m.text"},"ts":1712848177193,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qgNQDEqG-FWsMG3RXXX4AwSb_sSBL0pnLOO5Zi2UUiA"}
]