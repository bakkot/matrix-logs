[
{"content":{"body":"I wanted to add my 2 cents here. I've similarly been less engaged with the current proposal. Part of that is because of time constraints, but additionally, it's felt like the proposal iterated so quickly in a direction I wasn't confident about, that I didn't want to be a lone dissenter on the matter. When I came here to say that on Friday, I saw Yulia already had.\n\nSo when I came back to this chat yesterday and saw https://github.com/codehag/pattern-matching-epic, I was actually pleasantly surprised. While the proposal is currently a strawperson of how pattern matching could be built up bit-by-bit, each of those building blocks resonates a lot with me. A few examples:\n\n1. explicit binding syntax, while seemingly repetitive, makes things clearer, avoids adding an interpolation syntax, and inverts value-matching to a higher priority to binding-introduction (which I think is likely the better direction as a default).\n2. while neither proposal is _stellar_ for tagged unions, I'm more amenable to the \"epic\" proposal variant for it so far (partially thanks to prioritizing value-matching)\n3. subsuming switch, while tempting, might do more harm than good. I'm also not convinced that behaviors like fallthrough are consistently undesirable\n4. the compositional possibilities of a standalone match are exciting\n\nI think there's a lot to consider in that proposal, and I suspect my team would be more amenable to it.","format":"org.matrix.custom.html","formatted_body":"<p>I wanted to add my 2 cents here. I've similarly been less engaged with the current proposal. Part of that is because of time constraints, but additionally, it's felt like the proposal iterated so quickly in a direction I wasn't confident about, that I didn't want to be a lone dissenter on the matter. When I came here to say that on Friday, I saw Yulia already had.</p>\n<p>So when I came back to this chat yesterday and saw https://github.com/codehag/pattern-matching-epic, I was actually pleasantly surprised. While the proposal is currently a strawperson of how pattern matching could be built up bit-by-bit, each of those building blocks resonates a lot with me. A few examples:</p>\n<ol>\n<li>explicit binding syntax, while seemingly repetitive, makes things clearer, avoids adding an interpolation syntax, and inverts value-matching to a higher priority to binding-introduction (which I think is likely the better direction as a default).</li>\n<li>while neither proposal is <em>stellar</em> for tagged unions, I'm more amenable to the &quot;epic&quot; proposal variant for it so far (partially thanks to prioritizing value-matching)</li>\n<li>subsuming switch, while tempting, might do more harm than good. I'm also not convinced that behaviors like fallthrough are consistently undesirable</li>\n<li>the compositional possibilities of a standalone match are exciting</li>\n</ol>\n<p>I think there's a lot to consider in that proposal, and I suspect my team would be more amenable to it.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wanted to add my 2 cents here. I've similarly been less engaged with the current proposal. Part of that is because of time constraints, but additionally, it's felt like the proposal iterated so quickly in a direction I wasn't confident about, that I didn't want to be a lone dissenter on the matter. When I came here to say that on Friday, I saw Yulia already had.\n\nSo when I came back to this chat yesterday and saw https://github.com/codehag/pattern-matching-epic, I was actually pleasantly surprised. While the proposal is currently a strawperson of how pattern matching could be built up bit-by-bit, each of those building blocks resonates a lot with me. A few examples:\n\n1. explicit binding syntax, while seemingly repetitive, makes things clearer, avoids adding an interpolation syntax, and inverts value-matching to a higher priority to binding-introduction (which I think is likely the better direction as a default).\n2. while neither proposal is _stellar_ for tagged unions, I'm more amenable to the \"epic\" proposal variant for it so far (partially thanks to prioritizing value-matching)\n3. subsuming switch, while tempting, might do more harm than good. I'm also not convinced that behaviors like fallthrough are consistently undesirable\n4. the compositional possibilities of a standalone match are exciting\n\nI think there's a lot to consider in that proposal, and I suspect my team would be more amenable to it.","mimetype":"text/plain"},{"body":"<p>I wanted to add my 2 cents here. I've similarly been less engaged with the current proposal. Part of that is because of time constraints, but additionally, it's felt like the proposal iterated so quickly in a direction I wasn't confident about, that I didn't want to be a lone dissenter on the matter. When I came here to say that on Friday, I saw Yulia already had.</p>\n<p>So when I came back to this chat yesterday and saw https://github.com/codehag/pattern-matching-epic, I was actually pleasantly surprised. While the proposal is currently a strawperson of how pattern matching could be built up bit-by-bit, each of those building blocks resonates a lot with me. A few examples:</p>\n<ol>\n<li>explicit binding syntax, while seemingly repetitive, makes things clearer, avoids adding an interpolation syntax, and inverts value-matching to a higher priority to binding-introduction (which I think is likely the better direction as a default).</li>\n<li>while neither proposal is <em>stellar</em> for tagged unions, I'm more amenable to the &quot;epic&quot; proposal variant for it so far (partially thanks to prioritizing value-matching)</li>\n<li>subsuming switch, while tempting, might do more harm than good. I'm also not convinced that behaviors like fallthrough are consistently undesirable</li>\n<li>the compositional possibilities of a standalone match are exciting</li>\n</ol>\n<p>I think there's a lot to consider in that proposal, and I suspect my team would be more amenable to it.</p>\n","mimetype":"text/html"}]},"ts":1658344707785,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$qVbEE8U9aEeAYEYUTrmuh3EcyA_Q8szHJe8LKrlzuSs"}
]