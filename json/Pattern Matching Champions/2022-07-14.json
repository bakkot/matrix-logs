[
{"content":{"body":"FYI: Useful info from pre-meeting among Google folks:","msgtype":"m.text","org.matrix.msc1767.text":"FYI: Useful info from pre-meeting among Google folks:"},"ts":1657821838664,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cU05xuMNxAYH0p6kU8rnudtelUByDdTtgMKRKHExWsw"},
{"content":{"body":"* Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.","mimetype":"text/plain"},{"body":"<ul>\n<li>Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657821882222,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nSo2JWzFCph37dynT--zC8tpunZF3PaLjjbc7w1YD9g"},
{"content":{"body":"Specifically, the \"no separator between end of one clause and start of another\" bit (third item in his OP of issue 275) is bothering him - I don't think we have any objections to ending clauses with semicolons and allowing ASI to generally make them omittable?","msgtype":"m.text","org.matrix.msc1767.text":"Specifically, the \"no separator between end of one clause and start of another\" bit (third item in his OP of issue 275) is bothering him - I don't think we have any objections to ending clauses with semicolons and allowing ASI to generally make them omittable?"},"ts":1657821966036,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hFRbZM9WQ9izkfhFu6ZugsViEiK9tTATWmhe3e4NFWY"},
{"content":{"body":"* Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was &quot;regexes in an if-else chain&quot;, so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.","mimetype":"text/plain"},{"body":"<ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was &quot;regexes in an if-else chain&quot;, so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657822090719,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w"},
{"content":{"body":"* Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).","mimetype":"text/plain"},{"body":"<ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657822287752,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo"},
{"content":{"body":"i'm 100% on board with requiring semicolons (and letting ASI fix the error of omitting them)","msgtype":"m.text","org.matrix.msc1767.text":"i'm 100% on board with requiring semicolons (and letting ASI fix the error of omitting them)"},"ts":1657823012347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_VX7-FsH1-jB4VmHu7EAogRkNlXhKcyuLx1kUX1NP6w"},
{"content":{"body":"> <@tabatkins:matrix.org> * Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.\n\ni'd love to hear more about this pushback, was it just \"doesn't seem useful to me personally\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n</blockquote></mx-reply>i'd love to hear more about this pushback, was it just &quot;doesn't seem useful to me personally&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> * Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.\n\ni'd love to hear more about this pushback, was it just \"doesn't seem useful to me personally\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n</blockquote></mx-reply>i'd love to hear more about this pushback, was it just &quot;doesn't seem useful to me personally&quot;?","mimetype":"text/html"}]},"ts":1657823031391,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3waX4LXBPDYT1Twju4YEdHrl1JqV_OFXJ8g0_xrjF9k"},
{"content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo"}}},"ts":1657823037411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk"},
{"content":{"body":"> <@tabatkins:matrix.org> * Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).\n\n * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n</blockquote></mx-reply> * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","m.new_content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> * Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).\n\n * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n</blockquote></mx-reply> * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/html"}]},"ts":1657823055603,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W_WsRZq0RoAKEwXVfL3pSDkdPJM3_spAHx40hPY1T1Y"},
{"content":{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","m.new_content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}]},"ts":1657823077229,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E0WJEnr5xJAKspi7FlJzDfYqN_H0iajnA5GUKYX8Z8w"},
{"content":{"body":"Yes, the pushback was generally \"this looks like unnecessary complexity and I don't get why it's there\"","msgtype":"m.text","org.matrix.msc1767.text":"Yes, the pushback was generally \"this looks like unnecessary complexity and I don't get why it's there\""},"ts":1657823094923,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lagUXKjOXqFr4YF-Ae6YKOkoxHTrIXq-Gg9TW6mGDbs"}
]