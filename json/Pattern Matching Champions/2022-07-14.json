[
{"content":{"body":"FYI: Useful info from pre-meeting among Google folks:","msgtype":"m.text","org.matrix.msc1767.text":"FYI: Useful info from pre-meeting among Google folks:"},"ts":1657821838664,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cU05xuMNxAYH0p6kU8rnudtelUByDdTtgMKRKHExWsw"},
{"content":{"body":"* Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.","mimetype":"text/plain"},{"body":"<ul>\n<li>Waldemar is hesitant about complexity (no surprise) but won't block since he knows others find it useful. Will very likely bring up specific syntax concerns, which we've been pretty good at addressing.</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657821882222,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nSo2JWzFCph37dynT--zC8tpunZF3PaLjjbc7w1YD9g"},
{"content":{"body":"Specifically, the \"no separator between end of one clause and start of another\" bit (third item in his OP of issue 275) is bothering him - I don't think we have any objections to ending clauses with semicolons and allowing ASI to generally make them omittable?","msgtype":"m.text","org.matrix.msc1767.text":"Specifically, the \"no separator between end of one clause and start of another\" bit (third item in his OP of issue 275) is bothering him - I don't think we have any objections to ending clauses with semicolons and allowing ASI to generally make them omittable?"},"ts":1657821966036,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hFRbZM9WQ9izkfhFu6ZugsViEiK9tTATWmhe3e4NFWY"},
{"content":{"body":"* Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was &quot;regexes in an if-else chain&quot;, so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.","mimetype":"text/plain"},{"body":"<ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was &quot;regexes in an if-else chain&quot;, so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657822090719,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w"},
{"content":{"body":"* Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"* Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).","mimetype":"text/plain"},{"body":"<ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1657822287752,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo"},
{"content":{"body":"i'm 100% on board with requiring semicolons (and letting ASI fix the error of omitting them)","msgtype":"m.text","org.matrix.msc1767.text":"i'm 100% on board with requiring semicolons (and letting ASI fix the error of omitting them)"},"ts":1657823012347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_VX7-FsH1-jB4VmHu7EAogRkNlXhKcyuLx1kUX1NP6w"},
{"content":{"body":"> <@tabatkins:matrix.org> * Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.\n\ni'd love to hear more about this pushback, was it just \"doesn't seem useful to me personally\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n</blockquote></mx-reply>i'd love to hear more about this pushback, was it just &quot;doesn't seem useful to me personally&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> * Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the `:=` operator, it's *definitely* highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.\n\ni'd love to hear more about this pushback, was it just \"doesn't seem useful to me personally\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9farMCuQWYhk3ECYXaV04MIcrovy3IcSMZNZ7hbFa5w?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the regex literal matcher. I consider it an important matcher, but not critical - we could drop it if it's required. However, I'd prefer to push back if the complaint comes up; the person who gave the feedback had apparently never written code that was \"regexes in an if-else chain\", so didn't understand the use-case. Considering that precise use-case was one of the major reasons Python added the <code>:=</code> operator, it's <em>definitely</em> highly prevalent. Still, this is potentially a topic we can relent on if necessary, imo.</li>\n</ul>\n</blockquote></mx-reply>i'd love to hear more about this pushback, was it just &quot;doesn't seem useful to me personally&quot;?","mimetype":"text/html"}]},"ts":1657823031391,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3waX4LXBPDYT1Twju4YEdHrl1JqV_OFXJ8g0_xrjF9k"},
{"content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo"}}},"ts":1657823037411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk"},
{"content":{"body":"> <@tabatkins:matrix.org> * Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).\n\n * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n</blockquote></mx-reply> * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","m.new_content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> * Might get pushback on the lack of an automatic instanceof check. This is *extremely* easy to write a custom matcher for (especially with the bool handling now - `static [Symbol.matcher](val) { return val instanceof MyClass; }`), so we've avoided it partly to *appease* people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (`instanceof ${...}` as grammar?).\n\n * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$zWvOSQqPnvhdly2h5WeLEYNkcAYvOCG7lylJW1fpISo?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><ul>\n<li>Might get pushback on the lack of an automatic instanceof check. This is <em>extremely</em> easy to write a custom matcher for (especially with the bool handling now - <code>static [Symbol.matcher](val) { return val instanceof MyClass; }</code>), so we've avoided it partly to <em>appease</em> people concerned about feature bloat, but this is also a place I think we could relent on if necessary. Either doing it automatically (if the result of the interpolation pattern is a non-primitive without a matcher method, automatically do an instanceof check instead of a === check), or with syntax (<code>instanceof ${...}</code> as grammar?).</li>\n</ul>\n</blockquote></mx-reply> * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes","mimetype":"text/html"}]},"ts":1657823055603,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W_WsRZq0RoAKEwXVfL3pSDkdPJM3_spAHx40hPY1T1Y"},
{"content":{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","m.new_content":{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","format":"org.matrix.custom.html","formatted_body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":"PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4vi0JTd-q6KYkB2yXHeh5UOmzaktmoHfCPHKLPbEZfk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/plain"},{"body":" * PR 279 adds that, in a way that's robust for builtins but effectively uses instanceof for userland classes. the current approach there uses a new slot; i'm currently authoring an alternative approach that avoids adding a new slot to every object.","mimetype":"text/html"}]},"ts":1657823077229,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E0WJEnr5xJAKspi7FlJzDfYqN_H0iajnA5GUKYX8Z8w"},
{"content":{"body":"Yes, the pushback was generally \"this looks like unnecessary complexity and I don't get why it's there\"","msgtype":"m.text","org.matrix.msc1767.text":"Yes, the pushback was generally \"this looks like unnecessary complexity and I don't get why it's there\""},"ts":1657823094923,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lagUXKjOXqFr4YF-Ae6YKOkoxHTrIXq-Gg9TW6mGDbs"},
{"content":{"body":"and when I gave the example of a chain of if/else with regexes, the response was \"i've never seen code that like before\"","msgtype":"m.text","org.matrix.msc1767.text":"and when I gave the example of a chain of if/else with regexes, the response was \"i've never seen code that like before\""},"ts":1657823113903,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6lTrmFS7ytZjZ380MkRKxN70pZHUa0Y-AJWaUFJp1_4"},
{"content":{"body":"since multiple folks will respond with \"i write/read that kind of code all the time\", i'm not concerned with that pushback","msgtype":"m.text","org.matrix.msc1767.text":"since multiple folks will respond with \"i write/read that kind of code all the time\", i'm not concerned with that pushback"},"ts":1657823145398,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F6-Wq5zcr7e693IUzUtTWFQqiprGmlBA_69HI4vCrok"},
{"content":{"body":"yeah, and i'd like to push back with that exact argument, just giving a heads-up and my approval of \"yeah we can drop it\" if it proves necessary","msgtype":"m.text","org.matrix.msc1767.text":"yeah, and i'd like to push back with that exact argument, just giving a heads-up and my approval of \"yeah we can drop it\" if it proves necessary"},"ts":1657823176090,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CUyJPbxog-M_D633Q_OgbDvVtqCpPOY5AUtToN-d9MQ"},
{"content":{"body":"Real easy to write a custom matcher for it if it proves necessary, after all. just `function Regex(re){ return val=>({matches:re.test(val), value:re.exec(val)}); }`","format":"org.matrix.custom.html","formatted_body":"Real easy to write a custom matcher for it if it proves necessary, after all. just <code>function Regex(re){ return val=&gt;({matches:re.test(val), value:re.exec(val)}); }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Real easy to write a custom matcher for it if it proves necessary, after all. just `function Regex(re){ return val=>({matches:re.test(val), value:re.exec(val)}); }`","mimetype":"text/plain"},{"body":"Real easy to write a custom matcher for it if it proves necessary, after all. just <code>function Regex(re){ return val=&gt;({matches:re.test(val), value:re.exec(val)}); }</code>","mimetype":"text/html"}]},"ts":1657823257507,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PsYZiq2CZdqcuvvkXgOKGOqyIN2t8GtUsuMmf5ULaPw"},
{"content":{"body":"RegExp.prototype would have one anyways","msgtype":"m.text","org.matrix.msc1767.text":"RegExp.prototype would have one anyways"},"ts":1657823290802,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hZ6zvpm2ASDM5szXAtK12SBRchdYFfFgkVFGWbYPWoU"},
{"content":{"body":"so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","format":"org.matrix.custom.html","formatted_body":"so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","mimetype":"text/plain"},{"body":"so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","mimetype":"text/html"}]},"ts":1657823298184,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l6JUSiAV3K5FLbdfsw9a9nvso9afehc_BRFDjEOUho4"},
{"content":{"body":" * so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","format":"org.matrix.custom.html","formatted_body":" * so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","m.new_content":{"body":"so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","format":"org.matrix.custom.html","formatted_body":"so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","mimetype":"text/plain"},{"body":"so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$l6JUSiAV3K5FLbdfsw9a9nvso9afehc_BRFDjEOUho4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * so you'd just `${/whatever/g}`, and you'd have to explicitly name bindings with `with`","mimetype":"text/plain"},{"body":" * so you'd just <code>${/whatever/g}</code>, and you'd have to explicitly name bindings with <code>with</code>","mimetype":"text/html"}]},"ts":1657823310731,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jIuC8NcckIhe5BuoR6ksb7wbxV0N2lCeQ9sp-RmpaP4"},
{"content":{"body":"Oh right, we'd just drop that in there since adding those is \"free\" complexity. ^_^","msgtype":"m.text","org.matrix.msc1767.text":"Oh right, we'd just drop that in there since adding those is \"free\" complexity. ^_^"},"ts":1657823351207,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8fnwIhJFTUuCJyBOo18HodN-exXtF-ltej9ZDbsm26I"},
{"content":{"body":"Re: 279, ah, I didn't realize that's what you were doing there. So the idea is that'll work for all classes, not just built-ins, automatically doing effectively an instanceof check?","msgtype":"m.text","org.matrix.msc1767.text":"Re: 279, ah, I didn't realize that's what you were doing there. So the idea is that'll work for all classes, not just built-ins, automatically doing effectively an instanceof check?"},"ts":1657823386644,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jOGtCGKnIIEKbKySb5AybovcshS92qc4pJ1JyN-QSCo"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1657824208733,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b-S5-c4YfkqGkMZOBsx7VXEaw6_z9owd8T6rFQ09MO8"},
{"content":{"body":"i just pushed up the latest commit; TAL","msgtype":"m.text","org.matrix.msc1767.text":"i just pushed up the latest commit; TAL"},"ts":1657824213636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RQKZOPmbXtx7hf-8n1ejRTKJEQhX6mlRnV0nLLa0-Mg"},
{"content":{"body":"ljharb: I see how the new AO would work to check something is a subclass, but I'm not seeing how it's invoked for arbitrary things, just a number of built-ins. Is there something I'm missing that will make `${Foo}` automatically instanceof-check the matchable to be a Foo or subclass, if there's no matcher manually specified?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I see how the new AO would work to check something is a subclass, but I'm not seeing how it's invoked for arbitrary things, just a number of built-ins. Is there something I'm missing that will make <code>${Foo}</code> automatically instanceof-check the matchable to be a Foo or subclass, if there's no matcher manually specified?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: I see how the new AO would work to check something is a subclass, but I'm not seeing how it's invoked for arbitrary things, just a number of built-ins. Is there something I'm missing that will make `${Foo}` automatically instanceof-check the matchable to be a Foo or subclass, if there's no matcher manually specified?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I see how the new AO would work to check something is a subclass, but I'm not seeing how it's invoked for arbitrary things, just a number of built-ins. Is there something I'm missing that will make <code>${Foo}</code> automatically instanceof-check the matchable to be a Foo or subclass, if there's no matcher manually specified?","mimetype":"text/html"}]},"ts":1657826567582,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cn-pBgng6iGRbOEhZGg1o4XkIv0w4ExDGNrmDlJxYFQ"},
{"content":{"body":"oh right - that's why i had Object set up this way (cc Jack Works )","format":"org.matrix.custom.html","formatted_body":"oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh right - that's why i had Object set up this way (cc Jack Works )","mimetype":"text/plain"},{"body":"oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","mimetype":"text/html"}]},"ts":1657827030563,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SWM1XC5jrTgznN6YTkTXXn2EKtLZU_oQnZydlNeFrKY"},
{"content":{"body":" * oh right - that's why i had Object set up this way (cc Jack Works )","format":"org.matrix.custom.html","formatted_body":" * oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","m.new_content":{"body":"oh right - that's why i had Object set up this way (cc Jack Works )","format":"org.matrix.custom.html","formatted_body":"oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh right - that's why i had Object set up this way (cc Jack Works )","mimetype":"text/plain"},{"body":"oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$SWM1XC5jrTgznN6YTkTXXn2EKtLZU_oQnZydlNeFrKY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * oh right - that's why i had Object set up this way (cc Jack Works )","mimetype":"text/plain"},{"body":" * oh right - that's why i had Object set up this way (cc <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> )","mimetype":"text/html"}]},"ts":1657827034745,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lSIWZjd-ThcrSPhOD5eoqReUr8ItbbQ38uIapjROfSU"},
{"content":{"body":"so basically, anything that extends from Object, or any non-primitive-wrapper builtin, will inherit a matcher that will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically, anything that extends from Object, or any non-primitive-wrapper builtin, will inherit a matcher that will work"},"ts":1657827063732,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yhIjXDVtfjbGDLcSV4CUTujV_3hsUH7D0g8DVxRrNB4"},
{"content":{"body":"so if you do `class Foo {}` and then `${Foo}`, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's `.constructor === Foo`, and return true","format":"org.matrix.custom.html","formatted_body":"so if you do <code>class Foo {}</code> and then <code>${Foo}</code>, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's <code>.constructor === Foo</code>, and return true","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so if you do `class Foo {}` and then `${Foo}`, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's `.constructor === Foo`, and return true","mimetype":"text/plain"},{"body":"so if you do <code>class Foo {}</code> and then <code>${Foo}</code>, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's <code>.constructor === Foo</code>, and return true","mimetype":"text/html"}]},"ts":1657827098029,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Axvmo6xhqea8VkMp8sstOz1-n11HHx9jSyOE57DabCI"},
{"content":{"body":"I assumed I'd see something like that, yeah, just didn't see it.","msgtype":"m.text","org.matrix.msc1767.text":"I assumed I'd see something like that, yeah, just didn't see it."},"ts":1657827107969,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$sVo1ZVY7zglGCvHhpnatzkE_22LI8UHR8Vc65nJ6ATU"},
{"content":{"body":"it's there in the MatchConstructorInstance AO - note, not in main, in PR 297","msgtype":"m.text","org.matrix.msc1767.text":"it's there in the MatchConstructorInstance AO - note, not in main, in PR 297"},"ts":1657827146497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ddWtdVKMtY76yLj4_baMZWbSv5-9RPo_0O6RPtnoURc"},
{"content":{"body":"oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","format":"org.matrix.custom.html","formatted_body":"oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","mimetype":"text/plain"},{"body":"oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","mimetype":"text/html"}]},"ts":1657827160362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HCy6_Fv29adzTy-Eohm87acRCP7S8oIgZ7ikhLQvmV4"},
{"content":{"body":" * it's there in the MatchConstructorInstance AO - note, not in main, in PR 297","m.new_content":{"body":"it's there in the MatchConstructorInstance AO - note, not in main, in PR 297","msgtype":"m.text","org.matrix.msc1767.text":"it's there in the MatchConstructorInstance AO - note, not in main, in PR 297"},"m.relates_to":{"event_id":"$ddWtdVKMtY76yLj4_baMZWbSv5-9RPo_0O6RPtnoURc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's there in the MatchConstructorInstance AO - note, not in main, in PR 297"},"ts":1657827205893,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oKMF07oRYFv7Wh-SMR10wbk3d7jeDmNAKKsJOm2EwJY"},
{"content":{"body":" * oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","format":"org.matrix.custom.html","formatted_body":" * oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","m.new_content":{"body":"oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","format":"org.matrix.custom.html","formatted_body":"oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","mimetype":"text/plain"},{"body":"oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HCy6_Fv29adzTy-Eohm87acRCP7S8oIgZ7ikhLQvmV4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * oh wait, in `class Foo {}`, `Foo` inherits from `Function`, so it will just work as-is (with PR 297)","mimetype":"text/plain"},{"body":" * oh wait, in <code>class Foo {}</code>, <code>Foo</code> inherits from <code>Function</code>, so it will just work as-is (with PR 297)","mimetype":"text/html"}]},"ts":1657827213864,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ciEFx8pS-vIA4iR3_d73BPzMMI5KvtapHFlHgw7UTRQ"},
{"content":{"body":"Yeah, I'm looking at 297. It won't work, because the Function checker still opens with an check for callables, immediately failing if the matchable isn't callable.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I'm looking at 297. It won't work, because the Function checker still opens with an check for callables, immediately failing if the matchable isn't callable."},"ts":1657827309664,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$mN6SXLi-2PNcQGUPnTDscJ5TuGDsrr8DFvq_IxpeCgI"}
]