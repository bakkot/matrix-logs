[
{"content":{"body":"> <@tabatkins:matrix.org> `when undefined` should work as expected - `undefined` is a literal matcher that matches the undefined value.\n\nSo we have decided to treat `undefined`, `NaN`, `Infinity`, `-Infinity` special cases? Is it possible to add some other identifiers in the future? (seems we can't?)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$aLpWZgWb3qq_xK-TdLo0aDOfMvUZcgPjaEJoZMu09u0?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>when undefined</code> should work as expected - <code>undefined</code> is a literal matcher that matches the undefined value.</blockquote></mx-reply>So we have decided to treat <code>undefined</code>, <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code> special cases? Is it possible to add some other identifiers in the future? (seems we can't?)","m.relates_to":{"m.in_reply_to":{"event_id":"$aLpWZgWb3qq_xK-TdLo0aDOfMvUZcgPjaEJoZMu09u0"}},"msgtype":"m.text"},"ts":1627548785294,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$4PW0Vc9PqJq3Y6pX5_s9Dln9EJ2Wue0uexIkjGCW1NI"},
{"content":{"body":"And do we allow hosts to add some special cases? (I guess no?)","msgtype":"m.text"},"ts":1627548898310,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Z6MqPhHLLjFYywNGAhbHTAjnDTCURLEjtzp_vQSUCwo"},
{"content":{"body":"undefined is undefined for sure","msgtype":"m.text"},"ts":1627550031690,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$DJOmTTpOUdb5TH_HxjPzFH9FvbKdWywvy8YporOPo3s"},
{"content":{"body":"To make it useful, I think NaN must be NaN too","msgtype":"m.text"},"ts":1627550050240,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3lB3PagdDPxHF2nnxLvH6F45Q0s8Ry2_jfIkWPBGhI0"},
{"content":{"body":"What about +0 -0?","msgtype":"m.text"},"ts":1627550060297,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qSm2xDpGVsAdOQ9IxWMfdTZ1ow5ZxUwEYzFYN2KWldQ"},
{"content":{"body":"Another question is: we support `when /fo+/`, do we also support `when [1, /fo+/]` ?","format":"org.matrix.custom.html","formatted_body":"Another question is: we support <code>when /fo+/</code>, do we also support <code>when [1, /fo+/]</code> ?","msgtype":"m.text"},"ts":1627550516440,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$E5fWVzFyUEqhx2t3ErNlwXle83ZC8SJH5Bfy1LKHot4"},
{"content":{"body":"> <@jackworks:matrix.org> What about +0 -0?\n\nI hope we could support `when +0` `when -0`, and I even wish we could support `when Â±0` ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$qSm2xDpGVsAdOQ9IxWMfdTZ1ow5ZxUwEYzFYN2KWldQ?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>What about +0 -0?</blockquote></mx-reply>I hope we could support <code>when +0</code> <code>when -0</code>, and I even wish we could support <code>when Â±0</code> ðŸ˜…","m.relates_to":{"m.in_reply_to":{"event_id":"$qSm2xDpGVsAdOQ9IxWMfdTZ1ow5ZxUwEYzFYN2KWldQ"}},"msgtype":"m.text"},"ts":1627550681910,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$P3vHDucpzPMyhor4GSx2-yI7xTr_M-ZDLHsvUoY7GRo"},
{"content":{"body":"> <@haxjs:matrix.org> Another question is: we support `when /fo+/`, do we also support `when [1, /fo+/]` ?\n\nInteresting. And can we create named capture group bindings in nested pattern? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$E5fWVzFyUEqhx2t3ErNlwXle83ZC8SJH5Bfy1LKHot4?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br />Another question is: we support <code>when /fo+/</code>, do we also support <code>when [1, /fo+/]</code> ?</blockquote></mx-reply>Interesting. And can we create named capture group bindings in nested pattern? ","m.relates_to":{"m.in_reply_to":{"event_id":"$E5fWVzFyUEqhx2t3ErNlwXle83ZC8SJH5Bfy1LKHot4"}},"msgtype":"m.text"},"ts":1627550845363,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3mGy8PKxQ7Mi-WRdI8ByKaydo4W8JqVEbGbt1t3SW2Y"},
{"content":{"body":"I hope so.","msgtype":"m.text"},"ts":1627550877264,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$SnxevYRhRaJyXM_AIvFm4GcWV3scYJrmfu4r_7_-OTg"},
{"content":{"body":"A complex pattern is like a complex condition in if statement, it's bad but that's the natural result of expressiveness in our language","msgtype":"m.text"},"ts":1627551646511,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$is5aKHk0wbXrOpexBNjuQW9rv3PX8_4aX_u9fKdxBuo"},
{"content":{"body":"I think it's ok when the pattern goes complex. (Nested regex binding, ...etc)","msgtype":"m.text"},"ts":1627551682174,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$pYtdsp3CATAhWdUCsiOrCjazE22-cXD2HGWm2F4MiWs"},
{"content":{"body":"I think it's the linter's role to decide how complex (nest level) could be allowed  :) ","msgtype":"m.text"},"ts":1627551977604,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$laUqmQ-uzQaKJ_qNSq9AWU9b8-C_0zeiiq5KAI1D0rU"},
{"content":{"body":"> <@haxjs:matrix.org> So we have decided to treat `undefined`, `NaN`, `Infinity`, `-Infinity` special cases? Is it possible to add some other identifiers in the future? (seems we can't?)\n\nyes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%244PW0Vc9PqJq3Y6pX5_s9Dln9EJ2Wue0uexIkjGCW1NI\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>So we have decided to treat <code>undefined</code>, <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code> special cases? Is it possible to add some other identifiers in the future? (seems we can't?)</blockquote></mx-reply>yes","m.relates_to":{"m.in_reply_to":{"event_id":"$4PW0Vc9PqJq3Y6pX5_s9Dln9EJ2Wue0uexIkjGCW1NI"}},"msgtype":"m.text"},"ts":1627569498091,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kfvsprbdpLpf87S3EUjpG1OllL4pL4EGe5e1ILtBnnw"},
{"content":{"body":"I hope to support when +0 vs -0. `when (+0 or -0)` would give you both in that case.","format":"org.matrix.custom.html","formatted_body":"I hope to support when +0 vs -0. <code>when (+0 or -0)</code> would give you both in that case.","msgtype":"m.text"},"ts":1627569561334,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Bg8dHckvBPLMSpXRB61xnppZ_bZipmNTNcSn7xweAnQ"},
{"content":{"body":"and yes, everything you can do at the top level or in object/array patterns can be recursively nested","msgtype":"m.text"},"ts":1627569580741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s598PoiBu9pxDmb5HhYeJuZeRk-MwNVsLaWONEwYHdg"},
{"content":{"body":"ljharb: You mean we can add special cases in the future? But it seems such addition would be breaking change?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: You mean we can add special cases in the future? But it seems such addition would be breaking change?","msgtype":"m.text"},"ts":1627593599511,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$YVqLHP2e9UgQl6v6OpjH_oTsHxMgLVrQG5vTL2NxFjo"},
{"content":{"body":"why would it be?","msgtype":"m.text"},"ts":1627594064190,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fbaa1Ch0wgEIXkb8uYfjTjgEHdgnbmBQntO-d4aN_ok"},
{"content":{"body":"a \"special case\" would be a new leaf pattern","msgtype":"m.text"},"ts":1627594076173,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BPxl_uvbYz9xVD2-R_8komMB26TuZ6EQ5INYyrx9O18"},
{"content":{"body":"eg `when (hax)` wouldn't break anyone, since it'd be a syntax error until then","format":"org.matrix.custom.html","formatted_body":"eg <code>when (hax)</code> wouldn't break anyone, since it'd be a syntax error until then","msgtype":"m.text"},"ts":1627594086753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XeyV34W86l-fVLnW0h8RyD7MS_vTDobLQuefkr3rI5c"},
{"content":{"body":"I may miss something because I think `when (hax)` will always match?","format":"org.matrix.custom.html","formatted_body":"I may miss something because I think <code>when (hax)</code> will always match?","msgtype":"m.text"},"ts":1627595015678,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$6hPeJSHbYxd2xwnYkoRlXJzMN8_t6ASJQ_b6vcT4hQo"},
{"content":{"body":"oh right duh, you are correct","msgtype":"m.text"},"ts":1627600607324,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JueM_Rmr4sVC6wXsdJIN_BKOI28YaJzYbg1d1vkycMk"},
{"content":{"body":"so then yeah, it means we couldn't add any new identifier patterns","msgtype":"m.text"},"ts":1627600618043,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GFnUEYctTyC3mLAF4SN2PN0ZshPsqhUKupDJn9ujZlc"},
{"content":{"body":"is there a specific identifier that you think we'd want to add?","msgtype":"m.text"},"ts":1627600659602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PYwBJ948rBnv0HStB2DakOblw95SQfDPV8Yg89KHW9Y"}
]