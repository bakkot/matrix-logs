[
{"content":{"body":"Continue bare if issue: One reason I worry about it, is bare if clauses have different semantics with normal code, which add the risk of refactoring. For example, for some reasons all `when` clauses were removed, and only bare if clauses left, so someone may just remove the `match` (because it's now meaningless), and if they forget to \"fix\" the if clauses to if/else if , the semantics changes though they are still valid syntax...","format":"org.matrix.custom.html","formatted_body":"Continue bare if issue: One reason I worry about it, is bare if clauses have different semantics with normal code, which add the risk of refactoring. For example, for some reasons all <code>when</code> clauses were removed, and only bare if clauses left, so someone may just remove the <code>match</code> (because it's now meaningless), and if they forget to &quot;fix&quot; the if clauses to if/else if , the semantics changes though they are still valid syntax...","msgtype":"m.text"},"ts":1630547203437,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$L7CnG37SUe6jLk51rVhlKoAy4thvIIO149fwcpAdZwI"},
{"content":{"body":"i don't think that's a plausible scenario","msgtype":"m.text"},"ts":1630558519506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aTyU6pnV5rHqGglEjovTk9nwCiS7tQIevf11PH5X6qA"},
{"content":{"body":"`match (x) { if () { } }` isn't meaningless because it's an expression with `do {}` semantics, and it has a default `else`","format":"org.matrix.custom.html","formatted_body":"<code>match (x) { if () { } }</code> isn't meaningless because it's an expression with <code>do {}</code> semantics, and it has a default <code>else</code>","msgtype":"m.text"},"ts":1630558534339,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kUNxV9AHbalQy0Iqi7vXMvy3MIKejgpM9qTaeigxZo4"},
{"content":{"body":"so if they remove the `match` they'll get a syntax error in expression position - and in statement position, it would work identically (except for the \"throw\" case for the \"no match\" scenario)","format":"org.matrix.custom.html","formatted_body":"so if they remove the <code>match</code> they'll get a syntax error in expression position - and in statement position, it would work identically (except for the &quot;throw&quot; case for the &quot;no match&quot; scenario)","msgtype":"m.text"},"ts":1630558540957,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4T6coHUrPda2OfE6FlJ2TaOD_qe3EvyT1UHXmNRD4CU"},
{"content":{"body":" * so if they remove the `match` they'll get a syntax error in expression position","format":"org.matrix.custom.html","formatted_body":" * so if they remove the <code>match</code> they'll get a syntax error in expression position","m.new_content":{"body":"so if they remove the `match` they'll get a syntax error in expression position","format":"org.matrix.custom.html","formatted_body":"so if they remove the <code>match</code> they'll get a syntax error in expression position","msgtype":"m.text"},"m.relates_to":{"event_id":"$4T6coHUrPda2OfE6FlJ2TaOD_qe3EvyT1UHXmNRD4CU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630558547292,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g6iqZkReakrW1jQiN0lZ1n4e4LTrALOuz9VGbUVElDM"},
{"content":{"body":" * `match (x) { if () { } }` isn't meaningless because it's an expression with `do {}` semantics","format":"org.matrix.custom.html","formatted_body":" * <code>match (x) { if () { } }</code> isn't meaningless because it's an expression with <code>do {}</code> semantics","m.new_content":{"body":"`match (x) { if () { } }` isn't meaningless because it's an expression with `do {}` semantics","format":"org.matrix.custom.html","formatted_body":"<code>match (x) { if () { } }</code> isn't meaningless because it's an expression with <code>do {}</code> semantics","msgtype":"m.text"},"m.relates_to":{"event_id":"$kUNxV9AHbalQy0Iqi7vXMvy3MIKejgpM9qTaeigxZo4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630558561873,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dJigIML4oiOKs09FG9YtNQpZNH4GfqOXUQh8X-GC1aU"},
{"content":{"body":" * so if they remove the `match` they'll get a syntax error in expression position - and in statement position, it would work identically.","format":"org.matrix.custom.html","formatted_body":" * so if they remove the <code>match</code> they'll get a syntax error in expression position - and in statement position, it would work identically.","m.new_content":{"body":"so if they remove the `match` they'll get a syntax error in expression position - and in statement position, it would work identically.","format":"org.matrix.custom.html","formatted_body":"so if they remove the <code>match</code> they'll get a syntax error in expression position - and in statement position, it would work identically.","msgtype":"m.text"},"m.relates_to":{"event_id":"$4T6coHUrPda2OfE6FlJ2TaOD_qe3EvyT1UHXmNRD4CU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630558569025,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YiNA-AA5iAXxcR4crYkkPftPG0V5mqfDhRb_P6liLKs"},
{"content":{"body":" * so if they remove the `match` they'll get a syntax error in expression position - and in statement position, it would work identically (except for the \"throw\" case for the \"no match\" scenario)","format":"org.matrix.custom.html","formatted_body":" * so if they remove the <code>match</code> they'll get a syntax error in expression position - and in statement position, it would work identically (except for the &quot;throw&quot; case for the &quot;no match&quot; scenario)","m.new_content":{"body":"so if they remove the `match` they'll get a syntax error in expression position - and in statement position, it would work identically (except for the \"throw\" case for the \"no match\" scenario)","format":"org.matrix.custom.html","formatted_body":"so if they remove the <code>match</code> they'll get a syntax error in expression position - and in statement position, it would work identically (except for the &quot;throw&quot; case for the &quot;no match&quot; scenario)","msgtype":"m.text"},"m.relates_to":{"event_id":"$4T6coHUrPda2OfE6FlJ2TaOD_qe3EvyT1UHXmNRD4CU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630558583134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9yqSHOzLLuDoJhmlV1QIdNcRCUYH_u25vaOgpfeMWm4"},
{"content":{"body":" * `match (x) { if () { } }` isn't meaningless because it's an expression with `do {}` semantics, and it has a default `else`","format":"org.matrix.custom.html","formatted_body":" * <code>match (x) { if () { } }</code> isn't meaningless because it's an expression with <code>do {}</code> semantics, and it has a default <code>else</code>","m.new_content":{"body":"`match (x) { if () { } }` isn't meaningless because it's an expression with `do {}` semantics, and it has a default `else`","format":"org.matrix.custom.html","formatted_body":"<code>match (x) { if () { } }</code> isn't meaningless because it's an expression with <code>do {}</code> semantics, and it has a default <code>else</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$kUNxV9AHbalQy0Iqi7vXMvy3MIKejgpM9qTaeigxZo4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630558589954,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gJ8gz-mm28ok43_144GC52iag3kGwIOPi12VVGzFN04"},
{"content":{"body":"iow, just like `() => x` isn't a refactoring hazard because \"what if somebody removes the `() =>`, this isn't either","format":"org.matrix.custom.html","formatted_body":"iow, just like <code>() =&gt; x</code> isn't a refactoring hazard because &quot;what if somebody removes the <code>() =&gt;</code>, this isn't either","msgtype":"m.text"},"ts":1630558614052,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kLIjVfYp7agWa0FN6Uru8DFaFfCj9EgI3zQyYEIZRSQ"},
{"content":{"body":"ljharb: tho `match() { if(x){} if(y){} else{} }` will change behavior if the match was in statement position and then gets removed - both `if`s will execute, rather than the second being skipped if the first is true, and the `else` can execute alongside the first `if` as well","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: tho <code>match() { if(x){} if(y){} else{} }</code> will change behavior if the match was in statement position and then gets removed - both <code>if</code>s will execute, rather than the second being skipped if the first is true, and the <code>else</code> can execute alongside the first <code>if</code> as well","msgtype":"m.text"},"ts":1630596556691,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yghuOSZxbgT4pKBC2ktqeP4u0sFbbSYxyC5eyEb9H3o"},
{"content":{"body":"I agree this isn't a significant issue to worry about, but wanted to make sure HE Shi-Jun's concern was clear. ^_^","format":"org.matrix.custom.html","formatted_body":"I agree this isn't a significant issue to worry about, but wanted to make sure <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>'s concern was clear. ^_^","msgtype":"m.text"},"ts":1630596584541,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$bVSoGqY6o-Bzn3pOza0DILrttMoPKP6ZR8-71ovkwcE"},
{"content":{"body":"good clarification, but i donâ€™t think it changes anything","msgtype":"m.text"},"ts":1630596929235,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9S26MLSb8NTtUvMvDFPjVgfIXi-CXysF6ZeXpXScifs"},
{"content":{"body":"I agree - it's the same level of refactoring hazard as `()=>x` to `x`.","format":"org.matrix.custom.html","formatted_body":"I agree - it's the same level of refactoring hazard as <code>()=&gt;x</code> to <code>x</code>.","msgtype":"m.text"},"ts":1630597610542,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1chOaaHxlJQXCDShvxNs1foBIOQObItcSnz8jMe-IDY"}
]