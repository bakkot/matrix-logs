[
{"content":{"body":"Okay finally finished up the issue for moving irrefutable matchers to a different pattern, so plain idents can be custom matchers: https://github.com/tc39/proposal-pattern-matching/issues/283","msgtype":"m.text","org.matrix.msc1767.text":"Okay finally finished up the issue for moving irrefutable matchers to a different pattern, so plain idents can be custom matchers: https://github.com/tc39/proposal-pattern-matching/issues/283"},"ts":1663293176004,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GXjzpMIKAhC-zDI664w7ttzl1hdg4xO8rtbSmRX000s"},
{"content":{"body":"This also completely removes the need to have primitive matchers as a *concept*; they just fall into this case of \"interpolation patterns without the `${}` wrapper\".","format":"org.matrix.custom.html","formatted_body":"This also completely removes the need to have primitive matchers as a <em>concept</em>; they just fall into this case of &quot;interpolation patterns without the <code>${}</code> wrapper&quot;.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This also completely removes the need to have primitive matchers as a *concept*; they just fall into this case of \"interpolation patterns without the `${}` wrapper\".","mimetype":"text/plain"},{"body":"This also completely removes the need to have primitive matchers as a <em>concept</em>; they just fall into this case of &quot;interpolation patterns without the <code>${}</code> wrapper&quot;.","mimetype":"text/html"}]},"ts":1663293225280,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_w-evAsYTIBUNrLlrB0QyT-UjERicgCGrSJfjYfBbyM"},
{"content":{"body":"I can't say I like that (though I had not considered the -2 thing before)","msgtype":"m.text","org.matrix.msc1767.text":"I can't say I like that (though I had not considered the -2 thing before)"},"ts":1663298585616,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$MzUs9vz5hmXzRtbVg_LeApBxDktSVsc1D4tCgMGqYvY"},
{"content":{"body":" * I can't say I like that (though I had not considered the -2 thing before)","m.new_content":{"body":"I can't say I like that (though I had not considered the -2 thing before)","msgtype":"m.text","org.matrix.msc1767.text":"I can't say I like that (though I had not considered the -2 thing before)"},"m.relates_to":{"event_id":"$MzUs9vz5hmXzRtbVg_LeApBxDktSVsc1D4tCgMGqYvY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I can't say I like that (though I had not considered the -2 thing before)"},"ts":1663298599794,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TxhH_k9bM1TlAzfIZtkw0MZ3jdkAepy8ViU8IOfKQII"},
{"content":{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you match a singleton array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you match a singleton array ðŸ¤”","m.new_content":{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you match a singleton array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you match a singleton array ðŸ¤”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you match a singleton array ðŸ¤”","mimetype":"text/plain"},{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you match a singleton array ðŸ¤”","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$MzUs9vz5hmXzRtbVg_LeApBxDktSVsc1D4tCgMGqYvY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you match a singleton array ðŸ¤”","mimetype":"text/plain"},{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you match a singleton array ðŸ¤”","mimetype":"text/html"}]},"ts":1663298710476,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$u4yJYJI1OuJJnoM5ulJCE_OXeRdeySIZV1fIbYmRNgs"},
{"content":{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","m.new_content":{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/plain"},{"body":"I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$MzUs9vz5hmXzRtbVg_LeApBxDktSVsc1D4tCgMGqYvY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/plain"},{"body":" * I can't say I like that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/html"}]},"ts":1663298815274,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$8H9KTgR0hX2wtscDab8sFJxvu7Vgx3ss3--I3YUlTbU"},
{"content":{"body":" * I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":" * I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","m.new_content":{"body":"I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/plain"},{"body":"I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$MzUs9vz5hmXzRtbVg_LeApBxDktSVsc1D4tCgMGqYvY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if `when([x])` isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/plain"},{"body":" * I can't say I like anything about that (though I had not considered the -2 thing before) -- it seems bad if <code>when([x])</code> isn't how you bind against the first element of an array ðŸ¤”","mimetype":"text/html"}]},"ts":1663298925873,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$G-mNKIC6quJkN7ShYLpomUZRkIsAmYgKdY5hUuQwBp8"},
{"content":{"body":"and `when([as x])` or `when([let x])`just looks like \"what would that even mean\" in spite of being a very basic thing to do","format":"org.matrix.custom.html","formatted_body":"and <code>when([as x])</code> or <code>when([let x])</code>just looks like &quot;what would that even mean&quot; in spite of being a very basic thing to do","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and `when([as x])` or `when([let x])`just looks like \"what would that even mean\" in spite of being a very basic thing to do","mimetype":"text/plain"},{"body":"and <code>when([as x])</code> or <code>when([let x])</code>just looks like &quot;what would that even mean&quot; in spite of being a very basic thing to do","mimetype":"text/html"}]},"ts":1663298948098,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$HSmJA3IRD1z5dfUm5fnr79_jxnLQrOH4xABy1dtn2Ag"},
{"content":{"body":"I am sad to give that a + because it is a very sensible way to define things","msgtype":"m.text","org.matrix.msc1767.text":"I am sad to give that a + because it is a very sensible way to define things"},"ts":1663324216635,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a_bW2QieKtgcPxRciVe7DG9Ha-9CJJ-_mdBqdQrQwYw"},
{"content":{"body":"Overall, I'm not really convinced it's so important to pattern match on Infinity/-Infinity, NaN or undefined... it would be good for me to learn more background on how/why you've been weighing that as you have.","msgtype":"m.text","org.matrix.msc1767.text":"Overall, I'm not really convinced it's so important to pattern match on Infinity/-Infinity, NaN or undefined... it would be good for me to learn more background on how/why you've been weighing that as you have."},"ts":1663324346871,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RSzXtNEYjfQJLGylhAQ3CuZ3OkAISpkUZg4QCoj25fI"},
{"content":{"body":"they're values, and there's use cases to pattern match on every single kind of value","msgtype":"m.text","org.matrix.msc1767.text":"they're values, and there's use cases to pattern match on every single kind of value"},"ts":1663348294895,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Gk8oT4w-_0_VSL63LRs9_zY6cMAwpWDBADv5ezIlcIM"},
{"content":{"body":"well, it's hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants","msgtype":"m.text","org.matrix.msc1767.text":"well, it's hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants"},"ts":1663349279553,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xK-ltskdaQFXrpoww-PNId-XQLw5zTX_mJ_xy4X9Hx4"},
{"content":{"body":"(it seems like an OK compromise, not saying it's terrible, but also am not convinced it's the only way)","msgtype":"m.text","org.matrix.msc1767.text":"(it seems like an OK compromise, not saying it's terrible, but also am not convinced it's the only way)"},"ts":1663349310864,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DTBrCuqXLz45d_wpx85U7ewmLuHwuD0LGvlCkeifrVk"},
{"content":{"body":"i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset","msgtype":"m.text","org.matrix.msc1767.text":"i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset"},"ts":1663352358356,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rg3-lFXsVXEVhMkOgx5dTxvWHO5wp7uSyp97x-jrgfw"},
{"content":{"body":" * i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset","m.new_content":{"body":"i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset","msgtype":"m.text","org.matrix.msc1767.text":"i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset"},"m.relates_to":{"event_id":"$Rg3-lFXsVXEVhMkOgx5dTxvWHO5wp7uSyp97x-jrgfw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i feel like we'd want to enable pattern matching for every kind of data. it's hard for me to understand why we'd want to target a subset"},"ts":1663352373588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aR8XUOZwBgslxolVN_FycdIGu2Of2yHdSv_dGve8hH8"},
{"content":{"body":"> <@littledan:matrix.org> well, it's hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants\n\nRequiring `when([${3}])` to test if the first item of the array is 3 is more fussiness than looks reasonable; every other pattern-matching syntax *in existence*, afaict, makes this sort of thing as easy as `when([3])`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$xK-ltskdaQFXrpoww-PNId-XQLw5zTX_mJ_xy4X9Hx4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, it&#39;s hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants</blockquote></mx-reply>Requiring <code>when([${3}])</code> to test if the first item of the array is 3 is more fussiness than looks reasonable; every other pattern-matching syntax <em>in existence</em>, afaict, makes this sort of thing as easy as <code>when([3])</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$xK-ltskdaQFXrpoww-PNId-XQLw5zTX_mJ_xy4X9Hx4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> well, it's hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants\n\nRequiring `when([${3}])` to test if the first item of the array is 3 is more fussiness than looks reasonable; every other pattern-matching syntax *in existence*, afaict, makes this sort of thing as easy as `when([3])`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$xK-ltskdaQFXrpoww-PNId-XQLw5zTX_mJ_xy4X9Hx4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, it&#39;s hard for me to understand why we want to enable pattern matching for those kinds of data in a different way from user-defined constants</blockquote></mx-reply>Requiring <code>when([${3}])</code> to test if the first item of the array is 3 is more fussiness than looks reasonable; every other pattern-matching syntax <em>in existence</em>, afaict, makes this sort of thing as easy as <code>when([3])</code>.","mimetype":"text/html"}]},"ts":1663365764954,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RpKtQLr4ZYlRIbA7AVmWK60YjAkFC1QOColzTWph7Mo"},
{"content":{"body":"But also note that `when([foo])` (where `foo` is `3`) *does* work if we accept my proposal, which is somewhat the point.","format":"org.matrix.custom.html","formatted_body":"But also note that <code>when([foo])</code> (where <code>foo</code> is <code>3</code>) <em>does</em> work if we accept my proposal, which is somewhat the point.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But also note that `when([foo])` (where `foo` is `3`) *does* work if we accept my proposal, which is somewhat the point.","mimetype":"text/plain"},{"body":"But also note that <code>when([foo])</code> (where <code>foo</code> is <code>3</code>) <em>does</em> work if we accept my proposal, which is somewhat the point.","mimetype":"text/html"}]},"ts":1663365797666,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$K0DAsyC3fKPR6SuOzgkykygdY3IbigvmQRZEnMsCRSg"},
{"content":{"body":"It's *current spec* where `const foo = 3; ...when([foo])` and `when([3])` are different.","format":"org.matrix.custom.html","formatted_body":"It's <em>current spec</em> where <code>const foo = 3; ...when([foo])</code> and <code>when([3])</code> are different.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It's *current spec* where `const foo = 3; ...when([foo])` and `when([3])` are different.","mimetype":"text/plain"},{"body":"It's <em>current spec</em> where <code>const foo = 3; ...when([foo])</code> and <code>when([3])</code> are different.","mimetype":"text/html"}]},"ts":1663365827355,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5wmILN-V_IpZ72klzMFzEVJfVfqFI5phuS1wWGdnmK4"},
{"content":{"body":"(The former just binds to `foo` with no test.)","format":"org.matrix.custom.html","formatted_body":"(The former just binds to <code>foo</code> with no test.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(The former just binds to `foo` with no test.)","mimetype":"text/plain"},{"body":"(The former just binds to <code>foo</code> with no test.)","mimetype":"text/html"}]},"ts":1663365840495,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gdZC2lur4bEYFz-sOO2NaD89ur65Wtv3uaqKY6XhsBU"},
{"content":{"body":"And fwiw I think it's *incredibly* important to not only be able to match on undefined (and to a lesser extent, NaN and Infinity), but do so in a non-confusing way. If `when(3)` tests the matchable against 3, but `when(undefined)` *does a no-op binding without a test*, then that's fundamentally broken, in terms of usability.","format":"org.matrix.custom.html","formatted_body":"And fwiw I think it's <em>incredibly</em> important to not only be able to match on undefined (and to a lesser extent, NaN and Infinity), but do so in a non-confusing way. If <code>when(3)</code> tests the matchable against 3, but <code>when(undefined)</code> <em>does a no-op binding without a test</em>, then that's fundamentally broken, in terms of usability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And fwiw I think it's *incredibly* important to not only be able to match on undefined (and to a lesser extent, NaN and Infinity), but do so in a non-confusing way. If `when(3)` tests the matchable against 3, but `when(undefined)` *does a no-op binding without a test*, then that's fundamentally broken, in terms of usability.","mimetype":"text/plain"},{"body":"And fwiw I think it's <em>incredibly</em> important to not only be able to match on undefined (and to a lesser extent, NaN and Infinity), but do so in a non-confusing way. If <code>when(3)</code> tests the matchable against 3, but <code>when(undefined)</code> <em>does a no-op binding without a test</em>, then that's fundamentally broken, in terms of usability.","mimetype":"text/html"}]},"ts":1663366030671,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BG5BKD3RmwNJBD6k5A_NDCrBvuEDMZ-Lgkydvm-xaYQ"},
{"content":{"body":"Or perhaps more cogently, `when(null)` vs `when(undefined)` - the former is a keyword (and thus value-tests) the latter is not (and thus, using destructuring semantics, would do a no-op bind without testing the value). That would be, pardon my french, _hot garbage_.","format":"org.matrix.custom.html","formatted_body":"Or perhaps more cogently, <code>when(null)</code> vs <code>when(undefined)</code> - the former is a keyword (and thus value-tests) the latter is not (and thus, using destructuring semantics, would do a no-op bind without testing the value). That would be, pardon my french, <em>hot garbage</em>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or perhaps more cogently, `when(null)` vs `when(undefined)` - the former is a keyword (and thus value-tests) the latter is not (and thus, using destructuring semantics, would do a no-op bind without testing the value). That would be, pardon my french, _hot garbage_.","mimetype":"text/plain"},{"body":"Or perhaps more cogently, <code>when(null)</code> vs <code>when(undefined)</code> - the former is a keyword (and thus value-tests) the latter is not (and thus, using destructuring semantics, would do a no-op bind without testing the value). That would be, pardon my french, <em>hot garbage</em>.","mimetype":"text/html"}]},"ts":1663366122964,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2JOd-D7IorvDFkRc3mUra94jkbHszPd8c1Et85Ve0Yw"},
{"content":{"body":"> <@tabatkins:matrix.org> But also note that `when([foo])` (where `foo` is `3`) *does* work if we accept my proposal, which is somewhat the point.\n\nbut working should mean binding to the first element, whatever it is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$K0DAsyC3fKPR6SuOzgkykygdY3IbigvmQRZEnMsCRSg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>But also note that <code>when([foo])</code> (where <code>foo</code> is <code>3</code>) <em>does</em> work if we accept my proposal, which is somewhat the point.</blockquote></mx-reply>but working should mean binding to the first element, whatever it is","m.relates_to":{"m.in_reply_to":{"event_id":"$K0DAsyC3fKPR6SuOzgkykygdY3IbigvmQRZEnMsCRSg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> But also note that `when([foo])` (where `foo` is `3`) *does* work if we accept my proposal, which is somewhat the point.\n\nbut working should mean binding to the first element, whatever it is","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$K0DAsyC3fKPR6SuOzgkykygdY3IbigvmQRZEnMsCRSg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>But also note that <code>when([foo])</code> (where <code>foo</code> is <code>3</code>) <em>does</em> work if we accept my proposal, which is somewhat the point.</blockquote></mx-reply>but working should mean binding to the first element, whatever it is","mimetype":"text/html"}]},"ts":1663367530452,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$imzsBdOfR5_VcVucqqeCX0ltiCzXO5Gjm1Q9iIrhMzE"},
{"content":{"body":"there is no more characteristic example of a pattern match than `x:xs`","format":"org.matrix.custom.html","formatted_body":"there is no more characteristic example of a pattern match than <code>x:xs</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"there is no more characteristic example of a pattern match than `x:xs`","mimetype":"text/plain"},{"body":"there is no more characteristic example of a pattern match than <code>x:xs</code>","mimetype":"text/html"}]},"ts":1663367554526,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$3FZt9Hla-tNjwo0qPhTrt3zOqt8rmWU5AKgbCmuzNC0"},
{"content":{"body":" * there is no more characteristic example of a pattern match than `x:xs`","format":"org.matrix.custom.html","formatted_body":" * there is no more characteristic example of a pattern match than <code>x:xs</code>","m.new_content":{"body":"there is no more characteristic example of a pattern match than `x:xs`","format":"org.matrix.custom.html","formatted_body":"there is no more characteristic example of a pattern match than <code>x:xs</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"there is no more characteristic example of a pattern match than `x:xs`","mimetype":"text/plain"},{"body":"there is no more characteristic example of a pattern match than <code>x:xs</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3FZt9Hla-tNjwo0qPhTrt3zOqt8rmWU5AKgbCmuzNC0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * there is no more characteristic example of a pattern match than `x:xs`","mimetype":"text/plain"},{"body":" * there is no more characteristic example of a pattern match than <code>x:xs</code>","mimetype":"text/html"}]},"ts":1663367556366,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_lMimZvjWKhGsZaViXpUU0Eh-b5UIJU3Josumf1BxQE"},
{"content":{"body":"Note that that is a precisely opposite characterization of \"working\" from littledan","msgtype":"m.text","org.matrix.msc1767.text":"Note that that is a precisely opposite characterization of \"working\" from littledan"},"ts":1663367570179,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oDetHmYpe_9m_8svn0e21Hz-EU1BhuwNLnUNpWmoikQ"},
{"content":{"body":"which is the problem, of course","msgtype":"m.text","org.matrix.msc1767.text":"which is the problem, of course"},"ts":1663367573172,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uC4FOFGvBSA5CPqZSUrV9SvVTqsWpIqB62T00Z5IUbI"},
{"content":{"body":"I can see that it is really good to match against literals; the part I am having trouble with is the judgement that user-defined constants arenâ€™t similarly important. But I donâ€™t have a solution in mind, given that an explicit let looks too weird","msgtype":"m.text"},"ts":1663367864448,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YiFgd19pZlUI3wbQVnJCR1SO0NSU1uhjaOp_Fbs5iMU"},
{"content":{"body":"Anyway I totally agree that we should syntactically differentiate normal lhs from failure-prone matching ","format":"org.matrix.custom.html","formatted_body":"Anyway I totally agree that we should syntactically differentiate normal lhs from failure-prone matching","msgtype":"m.text"},"ts":1663368038406,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qIs_VAt2bS017U-IWH_X7fkVfdkR5LjXQErWzsoZsuY"},
{"content":{"body":"I think this can still generalize to lots of lhsâ€™es","msgtype":"m.text"},"ts":1663368067999,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rtueNr_RBbkqAkPLLMcrqs48Gp3fu4KDC9QcE07D9RI"},
{"content":{"body":"I would suggest that we use a keyword like `matches` or `case` for this, rather than `when`","format":"org.matrix.custom.html","formatted_body":"I would suggest that we use a keyword like <code>matches</code> or <code>case</code> for this, rather than <code>when</code>","msgtype":"m.text"},"ts":1663368119234,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$35F_PvL5yqJGewcH68htx44JSUOYdrieO-ATLkWNpmY"},
{"content":{"body":"Like `let matches Option.Some(x) = y`","format":"org.matrix.custom.html","formatted_body":"Like <code>let matches Option.Some(x) = y</code>","msgtype":"m.text"},"ts":1663368180720,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eXoS-v5dZGaNOpLoqX5edgwDQaQXL1FS8yViWBLYDKI"},
{"content":{"body":"Wdyt ","format":"org.matrix.custom.html","formatted_body":"Wdyt","msgtype":"m.text"},"ts":1663368190703,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m-ing7i0Iqfb773CsprxthyZ-TsaU9vo00ztUaQLRuo"},
{"content":{"body":"* Wdyt ","format":"org.matrix.custom.html","formatted_body":"* Wdyt","m.new_content":{"body":"Wdyt ","format":"org.matrix.custom.html","formatted_body":"Wdyt","msgtype":"m.text"},"m.relates_to":{"event_id":"$m-ing7i0Iqfb773CsprxthyZ-TsaU9vo00ztUaQLRuo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1663368198730,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y7ZsZ6-Zi_Q6AEwfe_zngL1Np72tuvUz_AEQhj_hAJ4"},
{"content":{"body":"This would let us do our special casing of Infinity, NaN and undefined, and check array lengths ","format":"org.matrix.custom.html","formatted_body":"This would let us do our special casing of Infinity, NaN and undefined, and check array lengths","msgtype":"m.text"},"ts":1663368229350,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FP1ZgAHR_41polLvkY4hIhcYCgrtM3DnWuzChyLDhj8"},
{"content":{"body":"Alsoâ€¦ if we did want to generalize switch statements as wellâ€¦ `switch (x) { matches y: z }`","format":"org.matrix.custom.html","formatted_body":"Alsoâ€¦ if we did want to generalize switch statements as wellâ€¦ <code>switch (x) { matches y: z }</code>","msgtype":"m.text"},"ts":1663368297737,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9XbpiUIaJJVvkt-o1pWEEtFMfNeTLjRhT_VBz2Y7Xj4"},
{"content":{"body":"runs ","format":"org.matrix.custom.html","formatted_body":"runs","msgtype":"m.emote"},"ts":1663368389935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N__-3yRvURx3ui2YLrMjcEL0yf8P_dlwUn-1rvRY6N0"},
{"content":{"body":"Anyway sorry I donâ€™t want to be in here sniping, I really think you all have done a good job formulating this proposal","msgtype":"m.text"},"ts":1663368725435,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mtwamPNBJfSQleUXlWnZUnpl2xG9ARUXfUd7PhyYQV0"},
{"content":{"body":"I'm unclear how what you just said connects to the previous topic.","msgtype":"m.text","org.matrix.msc1767.text":"I'm unclear how what you just said connects to the previous topic."},"ts":1663372571975,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JP_jwpXTDgAH-gtfo4CLGIgt5LavjINusaOkS3J9mPg"}
]