[
{"content":{"body":"> <@ljharb:matrix.org> but including var is problematic because of scoping, and including const/let would be \"fine\" but weird to omit var and also would create those style debates that would be best avoided\n\nI think that's acceptable. `if (cond) var x` is valid and `if (cond) let x` is syntax error. we already have `var`/`let,const` split in the language","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jLcES12p7GEaoWB5YrmQwmGw3SY6l8RM9nz-vPFEDJE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but including var is problematic because of scoping, and including const/let would be &quot;fine&quot; but weird to omit var and also would create those style debates that would be best avoided</blockquote></mx-reply>I think that's acceptable. <code>if (cond) var x</code> is valid and <code>if (cond) let x</code> is syntax error. we already have <code>var</code>/<code>let,const</code> split in the language","m.relates_to":{"m.in_reply_to":{"event_id":"$jLcES12p7GEaoWB5YrmQwmGw3SY6l8RM9nz-vPFEDJE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> but including var is problematic because of scoping, and including const/let would be \"fine\" but weird to omit var and also would create those style debates that would be best avoided\n\nI think that's acceptable. `if (cond) var x` is valid and `if (cond) let x` is syntax error. we already have `var`/`let,const` split in the language","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jLcES12p7GEaoWB5YrmQwmGw3SY6l8RM9nz-vPFEDJE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but including var is problematic because of scoping, and including const/let would be &quot;fine&quot; but weird to omit var and also would create those style debates that would be best avoided</blockquote></mx-reply>I think that's acceptable. <code>if (cond) var x</code> is valid and <code>if (cond) let x</code> is syntax error. we already have <code>var</code>/<code>let,const</code> split in the language","mimetype":"text/html"}]},"ts":1666504951256,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$fGVrHLQebxHmR4VL1SFZvw_6Wd8Gs-okKYDzZ7xWJi0"},
{"content":{"body":"`let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","format":"org.matrix.custom.html","formatted_body":"<code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","mimetype":"text/plain"},{"body":"<code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$kuxieiVlzT7ga1mL8wdjdx0wGI29_4cY9DrRH5waF34"}}},"ts":1666505159764,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Tu-iGT0c9fNood8-P-ibSjjAX2AByHZG5LL4911D33M"},
{"content":{"body":"> <@tabatkins:matrix.org> I suspect that if we ever do unify destructuring with import syntax, it'll be done precisely by adding the `as X` syntax to destructuring\n\n * `let { a: b } = expr` No, `let { a as b } = expr` Yes!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kuxieiVlzT7ga1mL8wdjdx0wGI29_4cY9DrRH5waF34?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I suspect that if we ever do unify destructuring with import syntax, it'll be done precisely by adding the <code>as X</code> syntax to destructuring</blockquote></mx-reply> * <code>let { a: b } = expr</code> No, <code>let { a as b } = expr</code> Yes!","m.new_content":{"body":"`let { a: b } = expr` No, `let { a as b } = expr` Yes!","format":"org.matrix.custom.html","formatted_body":"<code>let { a: b } = expr</code> No, <code>let { a as b } = expr</code> Yes!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`let { a: b } = expr` No, `let { a as b } = expr` Yes!","mimetype":"text/plain"},{"body":"<code>let { a: b } = expr</code> No, <code>let { a as b } = expr</code> Yes!","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Tu-iGT0c9fNood8-P-ibSjjAX2AByHZG5LL4911D33M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> I suspect that if we ever do unify destructuring with import syntax, it'll be done precisely by adding the `as X` syntax to destructuring\n\n * `let { a: b } = expr` No, `let { a as b } = expr` Yes!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$kuxieiVlzT7ga1mL8wdjdx0wGI29_4cY9DrRH5waF34?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I suspect that if we ever do unify destructuring with import syntax, it'll be done precisely by adding the <code>as X</code> syntax to destructuring</blockquote></mx-reply> * <code>let { a: b } = expr</code> No, <code>let { a as b } = expr</code> Yes!","mimetype":"text/html"}]},"ts":1666505175943,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-yvbpl3Xv5SVhflzyqxqT7zTgF2qXUw7zhwbA5aF2IU"},
{"content":{"body":" * `let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","format":"org.matrix.custom.html","formatted_body":" * <code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","m.new_content":{"body":"`let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","format":"org.matrix.custom.html","formatted_body":"<code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","mimetype":"text/plain"},{"body":"<code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Tu-iGT0c9fNood8-P-ibSjjAX2AByHZG5LL4911D33M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `let { a: b } = expr;` No, `let { a as b } = expr;` Yes!","mimetype":"text/plain"},{"body":" * <code>let { a: b } = expr;</code> No, <code>let { a as b } = expr;</code> Yes!","mimetype":"text/html"}]},"ts":1666505183606,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$It_19PD8tgG1py97jW_rCrUvSYQS7uXUMNu8L4xlwAA"}
]