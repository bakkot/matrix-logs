[
{"content":{"body":"It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n```js\nmatch (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":"<p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712712793268,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NdRZdxV3oaDKvqVmkDYWB4ujhI1e8Wfin8hl3VvSY4Q"},
{"content":{"body":"I should note that this is actually somewhat similar to C# variable patterns as well, since C# variable patterns are actually `type identifier`, where `var` is a keyword that means \"infer the type\".","format":"org.matrix.custom.html","formatted_body":"I should note that this is actually somewhat similar to C# variable patterns as well, since C# variable patterns are actually <code>type identifier</code>, where <code>var</code> is a keyword that means \"infer the type\".","m.mentions":{},"msgtype":"m.text"},"ts":1712712872950,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wxfkertytRQId7cDetNOz3vC88yOyKQ3OYYzZDFigJw"},
{"content":{"body":"i.e., `x is string y` and `x is string and var y` are equivalent in C# 8.0","format":"org.matrix.custom.html","formatted_body":"i.e., <code>x is string y</code> and <code>x is string and var y</code> are equivalent in C# 8.0","m.mentions":{},"msgtype":"m.text"},"ts":1712713065979,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kda3Shfcg_PO_ymQLBhHfViT8jpej-7Jf5txpdGotHc"},
{"content":{"body":" * It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":" * <p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"m.new_content":{"body":"It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":"<p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NdRZdxV3oaDKvqVmkDYWB4ujhI1e8Wfin8hl3VvSY4Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712713613225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA7Xll87PGG4E_6uFaA4iolfS42LpLpeQGw9IpiLr18"},
{"content":{"body":"with the recent github discussions i'm wondering if we even want to present pattern matching this meeting :-/ certainly we won't be asking for stage 2","m.mentions":{},"msgtype":"m.text"},"ts":1712727024352,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6qhmJDac6zupoR2soof9ywFz8rkrt16R8v22dVbP65w"},
{"content":{"body":"Please don't ask for Stage 2, we share the concerns about complexity and at the very least need more time to evaluate the proposal as it stands.","m.mentions":{},"msgtype":"m.text"},"ts":1712748258943,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$qHEsdXl0xENsWVfdpKGBV4co4ftZvLrPOijwN52dcWE"},
{"content":{"body":"I'll open an issue with some of my questions / concerns. We also have a team work week next week, and I'm hoping to do a deep dive on this proposal and get more feedback then.","m.mentions":{},"msgtype":"m.text"},"ts":1712748311247,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$qTGBeish9Z9OvIWo4blbOg4iBXBpaEvq_f9k-AWj8yw"},
{"content":{"body":"would be interested in knowing whether the issue I had written up resonates for your team","m.mentions":{},"msgtype":"m.text"},"ts":1712751425002,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$MOLCQKVUITMDkpdqJfFyVvqDtoTbUfXKCy6mJ8ECGr0"},
{"content":{"body":"also i don’t have any slides from TabAtkins yet. anyone object to me removing pattern matching from the agenda?","format":"org.matrix.custom.html","formatted_body":"also i don’t have any slides from <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> yet. anyone object to me removing pattern matching from the agenda?","msgtype":"m.text"},"ts":1712756419073,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$En2az04DGR5JN89WahQNh6j2p-qjM1wVqH9QVM3wM6M"},
{"content":{"body":"In general I think it would be better to remove all of the syntax that is contentious from the proposal spec text, there's just way too much in there we don't have consensus on. Put the optional or contentious things in its own document to make the spec less intimidating.","m.mentions":{},"msgtype":"m.text"},"ts":1712756950856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yvOO_L5IQ3uMTcQHv20gKvBtMOCW1iw_j9VVsMZQCfA"},
{"content":{"body":"For example, `?`/`has`/`hasOwn` look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.'","format":"org.matrix.custom.html","formatted_body":"For example, <code>?</code>/<code>has</code>/<code>hasOwn</code> look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.'","m.mentions":{},"msgtype":"m.text"},"ts":1712757390289,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nVrgxlgrMA-_wW8ZPsgJbdcnqLBErIbURdOTVLb_7Fw"},
{"content":{"body":" * For example, `?`/`has`/`hasOwn` look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.","format":"org.matrix.custom.html","formatted_body":" * For example, <code>?</code>/<code>has</code>/<code>hasOwn</code> look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.","m.mentions":{},"m.new_content":{"body":"For example, `?`/`has`/`hasOwn` look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.","format":"org.matrix.custom.html","formatted_body":"For example, <code>?</code>/<code>has</code>/<code>hasOwn</code> look interesting as a follow-on, but maybe not MVP since they each can be solved in different ways. Maybe even RegExp patterns, considering the potential parser ambiguities, and can still be handled via an extractor by pulling the RegExp out of the pattern. Even relational patterns, despite my preference for inclusion, are not necessarily an MVP -- C# did not include them in their initial support for pattern matching either. Put all of these and anything else we lack consensus on into a separate document we can refer to regarding future capabilities, so that we can be sure we're considering them in the design space.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nVrgxlgrMA-_wW8ZPsgJbdcnqLBErIbURdOTVLb_7Fw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712757391946,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Pah9MgnWOELYX5IvREfUsZt9GMEpzO1jl4u2EqmZfyA"},
{"content":{"body":"I don't think `match(v) {}` and `is` are themselves a tough sell, despite cover grammar issues to work out. The pattern syntax is what's expansive and needs to be paired down, so long as we ensure we continue to maintain the pattern matching invariants we've established.","format":"org.matrix.custom.html","formatted_body":"I don't think <code>match(v) {}</code> and <code>is</code> are themselves a tough sell, despite cover grammar issues to work out. The pattern syntax is what's expansive and needs to be paired down, so long as we ensure we continue to maintain the pattern matching invariants we've established.","m.mentions":{},"msgtype":"m.text"},"ts":1712757563286,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E49rcFiHVJQFhC0Vpy2hz_0WrcTGziTzMVEREFlgIfM"},
{"content":{"body":"> <@ljharb:matrix.org> also i don’t have any slides from TabAtkins yet. anyone object to me removing pattern matching from the agenda?\n\ndo we need to still share updates, but not asking for stage 2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$En2az04DGR5JN89WahQNh6j2p-qjM1wVqH9QVM3wM6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>also i don’t have any slides from <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> yet. anyone object to me removing pattern matching from the agenda?</blockquote></mx-reply>do we need to still share updates, but not asking for stage 2","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$En2az04DGR5JN89WahQNh6j2p-qjM1wVqH9QVM3wM6M"}},"msgtype":"m.text"},"ts":1712757741776,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-YJimm69IGrt8stQC4FefAA76HW1IEUNN6Sr25aSN4Y"},
{"content":{"body":"i don’t know if there’s even a point in sharing updates yet - it’ll just invite debate on things we’re likely to still change","msgtype":"m.text"},"ts":1712757798502,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b_qust4OPJXPp3-Df1zLNB7Bw_HvzbuQpI2kgJcSgEs"},
{"content":{"body":"i kind of think it would be best to skip the update, we're seeing good conversations on github already","m.mentions":{},"msgtype":"m.text"},"ts":1712758408086,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$k5lie2k3SsGxw71Ywm01bbATOuGsPCbWX2EXnQi2QRE"},
{"content":{"body":"ok, removing it","m.mentions":{},"msgtype":"m.text"},"ts":1712759705889,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_kSsXrBdw_bX56hywgXnix1Id57UPOKudhv1lwq5W2I"}
]