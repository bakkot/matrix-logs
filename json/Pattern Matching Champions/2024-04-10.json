[
{"content":{"body":"It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n```js\nmatch (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":"<p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" | \"down\" | \"left\" | \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712712793268,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NdRZdxV3oaDKvqVmkDYWB4ujhI1e8Wfin8hl3VvSY4Q"},
{"content":{"body":"I should note that this is actually somewhat similar to C# variable patterns as well, since C# variable patterns are actually `type identifier`, where `var` is a keyword that means \"infer the type\".","format":"org.matrix.custom.html","formatted_body":"I should note that this is actually somewhat similar to C# variable patterns as well, since C# variable patterns are actually <code>type identifier</code>, where <code>var</code> is a keyword that means \"infer the type\".","m.mentions":{},"msgtype":"m.text"},"ts":1712712872950,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wxfkertytRQId7cDetNOz3vC88yOyKQ3OYYzZDFigJw"},
{"content":{"body":"i.e., `x is string y` and `x is string and var y` are equivalent in C# 8.0","format":"org.matrix.custom.html","formatted_body":"i.e., <code>x is string y</code> and <code>x is string and var y</code> are equivalent in C# 8.0","m.mentions":{},"msgtype":"m.text"},"ts":1712713065979,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kda3Shfcg_PO_ymQLBhHfViT8jpej-7Jf5txpdGotHc"},
{"content":{"body":" * It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":" * <p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"m.new_content":{"body":"It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like `Number and let x` as `Number x`, i.e., treat `Pattern identifer` as `Pattern and let identifier`. You still need `let` for cases where you don't need some other pattern, but it would cut down on repetition in other places:\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n```\n\nCould be simplified to\n\n```js\nmatch (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n```\n\nThough if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how `let`/`const` patterns work first.","format":"org.matrix.custom.html","formatted_body":"<p>It occurred to me while responding to https://github.com/tc39/proposal-pattern-matching/issues/322 that we could potentially simplify a pattern like <code>Number and let x</code> as <code>Number x</code>, i.e., treat <code>Pattern identifer</code> as <code>Pattern and let identifier</code>. You still need <code>let</code> for cases where you don't need some other pattern, but it would cut down on repetition in other places:</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") and let direction, Number and let steps]: handleMove(direction, steps);\n  [\"jump\", Number and let howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Could be simplified to</p>\n<pre><code class=\"language-js\">match (command) {\n  [(\"up\" or \"down\" or \"left\" or \"right\") direction, Number steps]: handleMove(direction, steps);\n  [\"jump\", Number howHigh]: jump(howHigh);\n}\n</code></pre>\n<p>Though if we did want to support that, I'd almost want it to be a follow on so the community would have time to understand how <code>let</code>/<code>const</code> patterns work first.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NdRZdxV3oaDKvqVmkDYWB4ujhI1e8Wfin8hl3VvSY4Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712713613225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA7Xll87PGG4E_6uFaA4iolfS42LpLpeQGw9IpiLr18"},
{"content":{"body":"with the recent github discussions i'm wondering if we even want to present pattern matching this meeting :-/ certainly we won't be asking for stage 2","m.mentions":{},"msgtype":"m.text"},"ts":1712727024352,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6qhmJDac6zupoR2soof9ywFz8rkrt16R8v22dVbP65w"},
{"content":{"body":"Please don't ask for Stage 2, we share the concerns about complexity and at the very least need more time to evaluate the proposal as it stands.","m.mentions":{},"msgtype":"m.text"},"ts":1712748258943,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$qHEsdXl0xENsWVfdpKGBV4co4ftZvLrPOijwN52dcWE"},
{"content":{"body":"I'll open an issue with some of my questions / concerns. We also have a team work week next week, and I'm hoping to do a deep dive on this proposal and get more feedback then.","m.mentions":{},"msgtype":"m.text"},"ts":1712748311247,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$qTGBeish9Z9OvIWo4blbOg4iBXBpaEvq_f9k-AWj8yw"}
]