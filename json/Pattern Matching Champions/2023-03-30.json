[
{"content":{"body":"Differentiating between a `class` (rather, its constructor function) and a regular function is, as far as I can tell, not possible? Maybe there's a branding thing we can lean on that's not web-exposed","format":"org.matrix.custom.html","formatted_body":"Differentiating between a <code>class</code> (rather, its constructor function) and a regular function is, as far as I can tell, not possible? Maybe there's a branding thing we can lean on that's not web-exposed","msgtype":"m.text"},"ts":1680207218661,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rZ8KU7dvRF4g3-Rtoc1ibf3H-hBEcx8UcKhsS-afB3A"},
{"content":{"body":"But `x = class Foo {}` and `y = function Foo(){}` produce objects that appear to be indistinguishable on the sort of inspection you can perform in DevTools.","format":"org.matrix.custom.html","formatted_body":"But <code>x = class Foo {}</code> and <code>y = function Foo(){}</code> produce objects that appear to be indistinguishable on the sort of inspection you can perform in DevTools.","msgtype":"m.text"},"ts":1680207255247,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EOdqxcPUaS56TQP7mogfYJ5OdQ4OEgpTXGGA6kq43lU"},
{"content":{"body":"I'll say that the vast majority of what you typed, rbuckton-pto, I agree with and support (most is already the proposal, a few bits are additional changes that I also agree with making). There's no need to restate most of it. I also don't think we need to relitigate a bunch of questions - array and object exhaustiveness has been well-argued in the proposal and unless you think you have a strong argument for changing the current proposal it's gonna look like it currently does.","format":"org.matrix.custom.html","formatted_body":"I'll say that the vast majority of what you typed, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton-pto</a>, I agree with and support (most is already the proposal, a few bits are additional changes that I also agree with making). There's no need to restate most of it. I also don't think we need to relitigate a bunch of questions - array and object exhaustiveness has been well-argued in the proposal and unless you think you have a strong argument for changing the current proposal it's gonna look like it currently does.","msgtype":"m.text"},"ts":1680207468159,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iwIFG0p1FvWboijhjmLOVTnSM40HYGkF6WbQOkK3GAI"},
{"content":{"body":"As for syntax of the various matcher uses that I posted, I'm more than open to changes. I'm just trying to make sure that all the usages are reasonably consistent, and parseable without tying our hands on grammar changes in the future.","msgtype":"m.text"},"ts":1680207529838,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5DekAj5PzNQ8GN0ppuapunYsTLy8CKhHFCzP_V5zIqg"},
{"content":{"body":"i'll do some more fiddling in the thread","msgtype":"m.text"},"ts":1680207599164,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$eZ6oxk2giylxVhbv0n9L0NwwWIW7uW6mMcn2KnfnQyQ"},
{"content":{"body":"One big issue that we're gonna run into, tho, is the collision of extractor patterns in matchers with extractor patterns in destructuring. It looks like extractors-in-destructuring end up claiming a big chunk of syntax space that would make it impossible to ever do anything else in those syntax slots without some awkward manipulations. How much are you insisting on extractors-in-destructuring if we have extractors-in-matchers, and can use matchers in `let` and function args in place of the existing destructuring?","format":"org.matrix.custom.html","formatted_body":"One big issue that we're gonna run into, tho, is the collision of extractor patterns in matchers with extractor patterns in destructuring. It looks like extractors-in-destructuring end up claiming a big chunk of syntax space that would make it impossible to ever do anything else in those syntax slots without some awkward manipulations. How much are you insisting on extractors-in-destructuring if we have extractors-in-matchers, and can use matchers in <code>let</code> and function args in place of the existing destructuring?","msgtype":"m.text"},"ts":1680207764085,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zbMziEt2Kr6PZD3rHwawOGs3CrY8XQ12W9BU2OAHTPE"},
{"content":{"body":"I won't be able to respond in detail until the middle of next week as I'm packing and moving over the next few days. ","format":"org.matrix.custom.html","formatted_body":"I won't be able to respond in detail until the middle of next week as I'm packing and moving over the next few days.","msgtype":"m.text"},"ts":1680209190415,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$zsq1TgD5CWQPch03E5MJnM9KmrXf0EjAoXk2byQn768"},
{"content":{"body":"np, i dropped more comments in the thread that'll be more useful to respond to, anyway","msgtype":"m.text"},"ts":1680211185234,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ehqzzjjZhhGtSqS6wtvn_d_hzfloa_v83rb44RmVRI0"},
{"content":{"body":"I do wonder if we can handle the predicate case by just making `if(<expr>)` a matcher pattern. Matches if its expr is true, establishes no bindings. You'd commonly have to write `x and if(foo(x))` or something, so you can test the value at that point, but still.","format":"org.matrix.custom.html","formatted_body":"I do wonder if we can handle the predicate case by just making <code>if(&lt;expr&gt;)</code> a matcher pattern. Matches if its expr is true, establishes no bindings. You'd commonly have to write <code>x and if(foo(x))</code> or something, so you can test the value at that point, but still.","msgtype":"m.text"},"ts":1680211523270,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$K8uB0DV2hpCQ8d91l32KR_mUOo0rsN9bSfJQB3QMvsA"},
{"content":{"body":"Then we could remove the explicit `if()` clause from the match() arms. And without an `if()` in the grammar (and *with* the `:` separator that we have now), we can probably just remove the `when()` wrapper too.","format":"org.matrix.custom.html","formatted_body":"Then we could remove the explicit <code>if()</code> clause from the match() arms. And without an <code>if()</code> in the grammar (and <em>with</em> the <code>:</code> separator that we have now), we can probably just remove the <code>when()</code> wrapper too.","msgtype":"m.text"},"ts":1680211610863,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vL3xTaotjN3TNFq5mCz21cyb0Snc-PSE-RxNVJps1i4"},
{"content":{"body":"```js\nmatch(val) {\n  [a, b]: a+b;\n  default: 4 // chosen by fair die roll;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">match(val) {\n  [a, b]: a+b;\n  default: 4 // chosen by fair die roll;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1680211642163,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1E0RzZ5BBYh8Pz0dxNDrkGNi6S9pzJmArkq5TFX4vxM"},
{"content":{"body":"(this is parseable, since `default` is a reserved word)","format":"org.matrix.custom.html","formatted_body":"(this is parseable, since <code>default</code> is a reserved word)","msgtype":"m.text"},"ts":1680211657464,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hXGeW9dZAQy-PV30mHMmSH0ikixgKjC2LPAa8IK1Lbw"},
{"content":{"body":"And then since `if()` is a matcher, `match(val) { if(foo == bar): baz; }` Just Works, no need for us to handle it specifically.","format":"org.matrix.custom.html","formatted_body":"And then since <code>if()</code> is a matcher, <code>match(val) { if(foo == bar): baz; }</code> Just Works, no need for us to handle it specifically.","msgtype":"m.text"},"ts":1680211697939,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$egOLP3-i6Ax2ekf7VryGKj9umMMnMvjthOCpWgYhz7o"},
{"content":{"body":"`{foo: Custom([1, a])} and if(myTest(a))` would be a valid matcher if you didn't want to nest the `if` deeply, identical to today's proposal `when({foo: Custom([1, a])}) if(myTest(a))`","format":"org.matrix.custom.html","formatted_body":"<code>{foo: Custom([1, a])} and if(myTest(a))</code> would be a valid matcher if you didn't want to nest the <code>if</code> deeply, identical to today's proposal <code>when({foo: Custom([1, a])}) if(myTest(a))</code>","msgtype":"m.text"},"ts":1680211846439,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cdeKkRJWNwF3wuJ3eB7QEBoYEUV65kJRtXko8UXbmTU"},
{"content":{"body":"C# also has headless cases:\n```cs\nx switch {\n  [a, b] => a+b,\n  _ => 4\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>C# also has headless cases:</p>\n<pre><code class=\"language-cs\">x switch {\n  [a, b] =&gt; a+b,\n  _ =&gt; 4\n}\n</code></pre>","msgtype":"m.text"},"ts":1680216464144,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$WJAiZgFq0knHLZb5erXthDyIyDcmAYsZTVi6pU8JRlE"},
{"content":{"body":"oof, i think the when wrapper is valuable and necessary","msgtype":"m.text"},"ts":1680218048519,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1FQ5KbPuR0EGiTl7ufiRrn2jE2CqHwy1f-Jv8FS_-0A"},
{"content":{"body":"having it look almost exactly like an object literal seems very hard to teach","msgtype":"m.text"},"ts":1680218063926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7jBriv0s_uuCyqfCEyAzFPZUTshAjmQkejSxnPLIW8Q"}
]