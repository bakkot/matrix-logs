[
{"content":{"body":"Differentiating between a `class` (rather, its constructor function) and a regular function is, as far as I can tell, not possible? Maybe there's a branding thing we can lean on that's not web-exposed","format":"org.matrix.custom.html","formatted_body":"Differentiating between a <code>class</code> (rather, its constructor function) and a regular function is, as far as I can tell, not possible? Maybe there's a branding thing we can lean on that's not web-exposed","msgtype":"m.text"},"ts":1680207218661,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rZ8KU7dvRF4g3-Rtoc1ibf3H-hBEcx8UcKhsS-afB3A"},
{"content":{"body":"But `x = class Foo {}` and `y = function Foo(){}` produce objects that appear to be indistinguishable on the sort of inspection you can perform in DevTools.","format":"org.matrix.custom.html","formatted_body":"But <code>x = class Foo {}</code> and <code>y = function Foo(){}</code> produce objects that appear to be indistinguishable on the sort of inspection you can perform in DevTools.","msgtype":"m.text"},"ts":1680207255247,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EOdqxcPUaS56TQP7mogfYJ5OdQ4OEgpTXGGA6kq43lU"},
{"content":{"body":"I'll say that the vast majority of what you typed, rbuckton-pto, I agree with and support (most is already the proposal, a few bits are additional changes that I also agree with making). There's no need to restate most of it. I also don't think we need to relitigate a bunch of questions - array and object exhaustiveness has been well-argued in the proposal and unless you think you have a strong argument for changing the current proposal it's gonna look like it currently does.","format":"org.matrix.custom.html","formatted_body":"I'll say that the vast majority of what you typed, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton-pto</a>, I agree with and support (most is already the proposal, a few bits are additional changes that I also agree with making). There's no need to restate most of it. I also don't think we need to relitigate a bunch of questions - array and object exhaustiveness has been well-argued in the proposal and unless you think you have a strong argument for changing the current proposal it's gonna look like it currently does.","msgtype":"m.text"},"ts":1680207468159,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iwIFG0p1FvWboijhjmLOVTnSM40HYGkF6WbQOkK3GAI"},
{"content":{"body":"As for syntax of the various matcher uses that I posted, I'm more than open to changes. I'm just trying to make sure that all the usages are reasonably consistent, and parseable without tying our hands on grammar changes in the future.","msgtype":"m.text"},"ts":1680207529838,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5DekAj5PzNQ8GN0ppuapunYsTLy8CKhHFCzP_V5zIqg"},
{"content":{"body":"i'll do some more fiddling in the thread","msgtype":"m.text"},"ts":1680207599164,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$eZ6oxk2giylxVhbv0n9L0NwwWIW7uW6mMcn2KnfnQyQ"},
{"content":{"body":"One big issue that we're gonna run into, tho, is the collision of extractor patterns in matchers with extractor patterns in destructuring. It looks like extractors-in-destructuring end up claiming a big chunk of syntax space that would make it impossible to ever do anything else in those syntax slots without some awkward manipulations. How much are you insisting on extractors-in-destructuring if we have extractors-in-matchers, and can use matchers in `let` and function args in place of the existing destructuring?","format":"org.matrix.custom.html","formatted_body":"One big issue that we're gonna run into, tho, is the collision of extractor patterns in matchers with extractor patterns in destructuring. It looks like extractors-in-destructuring end up claiming a big chunk of syntax space that would make it impossible to ever do anything else in those syntax slots without some awkward manipulations. How much are you insisting on extractors-in-destructuring if we have extractors-in-matchers, and can use matchers in <code>let</code> and function args in place of the existing destructuring?","msgtype":"m.text"},"ts":1680207764085,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zbMziEt2Kr6PZD3rHwawOGs3CrY8XQ12W9BU2OAHTPE"}
]