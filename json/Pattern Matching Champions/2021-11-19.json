[
{"content":{"body":"In Scala, an object with an `apply` method is essentially a function, and can behave similar to a constructor. So you can do something like `Book.apply(isbn, name)` (or just `Book(isbn, name)` and get a `Book` object back. You give it arguments and it gives you the result.\n\nThe `unapply` method is something like the inverse of a constructor. You give it the result and it gives you back the arguments. ","format":"org.matrix.custom.html","formatted_body":"<p>In Scala, an object with an <code>apply</code> method is essentially a function, and can behave similar to a constructor. So you can do something like <code>Book.apply(isbn, name)</code> (or just <code>Book(isbn, name)</code> and get a <code>Book</code> object back. You give it arguments and it gives you the result.</p>\n<p>The <code>unapply</code> method is something like the inverse of a constructor. You give it the result and it gives you back the arguments.</p>\n","msgtype":"m.text"},"ts":1637280144219,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$f_mEoKIpo-2aB-zDp7SXRK9vl5SOhmJBdG29-3qG72I"},
{"content":{"body":"This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this\n\n```js\nconst x = new Book(isbn, name);\nconst [isbn, name] = Book.unapply(x);\n```","format":"org.matrix.custom.html","formatted_body":"<p>This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst [isbn, name] = Book.unapply(x);\n</code></pre>\n","msgtype":"m.text"},"ts":1637280268243,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mSiUJ7DM_Ylt0aVuaT4xMyH6deiTLBUAKMTwIIWnwZo"},
{"content":{"body":" * This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this\n```js\nconst x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n</code></pre>\n","m.new_content":{"body":"This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this\n```js\nconst x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n```","format":"org.matrix.custom.html","formatted_body":"<p>This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$mSiUJ7DM_Ylt0aVuaT4xMyH6deiTLBUAKMTwIIWnwZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637280352855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BrAC7kCs7AVA_3sGpsl-N5EHyw-b4qzGlspBgSal-og"},
{"content":{"body":"With syntax it would instead look like this:\n```js\nconst x = new Book(isbn, name);\nconst Book(isbn, name) = x;\n```","format":"org.matrix.custom.html","formatted_body":"<p>With syntax it would instead look like this:</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst Book(isbn, name) = x;\n</code></pre>\n","msgtype":"m.text"},"ts":1637280377297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-UTwZUK-IK8xi7TS98Z1UFYWtTP7YTsIJUlIhSojI6s"},
{"content":{"body":"This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of a binding pattern:\n```js\nconst books = [new Book(isbn, name, { publisher: \"O'Reilly\" })]\nconst [Book(isbn, name, { publisher )] = books;\n```","format":"org.matrix.custom.html","formatted_body":"<p>This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of a binding pattern:</p>\n<pre><code class=\"language-js\">const books = [new Book(isbn, name, { publisher: &quot;O'Reilly&quot; })]\nconst [Book(isbn, name, { publisher )] = books;\n</code></pre>\n","msgtype":"m.text"},"ts":1637280528079,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PqIXQZRs2T57prE9_CFlmq6N3P4Qv6rR049lMmQ-RCc"},
{"content":{"body":"The `const Book(isbn, name) = x;` syntax is also an example of pattern matching. Book's \"unapply\" might look like this:\n```js\nclass Book {\n  isbn;\n  name;\n  constructor(isbn, name) {\n    this.isbn = isbn;\n    this.name = name;\n  }\n  static [Symbol.unapply](book) {\n    // return an iterable for a valid match.\n    // return 'undefined' or 'null' to indicate unapply was unsuccessful.\n    if (book instanceof Book) return [book.isbn, book.name];\n  }\n}\n \nconst Book(isbn, name) = null; // throws an error because the match failed.\n```","format":"org.matrix.custom.html","formatted_body":"<p>The <code>const Book(isbn, name) = x;</code> syntax is also an example of pattern matching. Book's &quot;unapply&quot; might look like this:</p>\n<pre><code class=\"language-js\">class Book {\n  isbn;\n  name;\n  constructor(isbn, name) {\n    this.isbn = isbn;\n    this.name = name;\n  }\n  static [Symbol.unapply](book) {\n    // return an iterable for a valid match.\n    // return 'undefined' or 'null' to indicate unapply was unsuccessful.\n    if (book instanceof Book) return [book.isbn, book.name];\n  }\n}\n \nconst Book(isbn, name) = null; // throws an error because the match failed.\n</code></pre>\n","msgtype":"m.text"},"ts":1637280709490,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6KbsVHmcxjB2Iw8Psn8-Ly2GHBRoJmynul7Mvk1O1yI"},
{"content":{"body":"As a result, `@@unapply` is very similar to the proposed `@@matcher` with the following distinctions:\n- In `@@matcher` you return an object with `matched: true ` to indicate success. In `@@unapply` you return an iterable.\n- In `@@matcher` you return an object with `matched: false` to indicate failure. In `@@unapply` you return null/undefined.\n- In `@@matcher` you return an object with a `value` property that is destructured. In `@@unapply` you just return an iterable.\n- In `@@matcher`, the destructured value can be an object or an iterable. In `@@unapply` it can only be an iterable (but that can contain an object.","format":"org.matrix.custom.html","formatted_body":"<p>As a result, <code>@@unapply</code> is very similar to the proposed <code>@@matcher</code> with the following distinctions:</p>\n<ul>\n<li>In <code>@@matcher</code> you return an object with <code>matched: true </code> to indicate success. In <code>@@unapply</code> you return an iterable.</li>\n<li>In <code>@@matcher</code> you return an object with <code>matched: false</code> to indicate failure. In <code>@@unapply</code> you return null/undefined.</li>\n<li>In <code>@@matcher</code> you return an object with a <code>value</code> property that is destructured. In <code>@@unapply</code> you just return an iterable.</li>\n<li>In <code>@@matcher</code>, the destructured value can be an object or an iterable. In <code>@@unapply</code> it can only be an iterable (but that can contain an object.</li>\n</ul>\n","msgtype":"m.text"},"ts":1637280930957,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4_hEVKbucdrBSm7wf5RY4FVTpeoM59zNfRL0E9nJwlI"},
{"content":{"body":"(its possible `@@unapply` could return a non-iterable, though that wouldn't work with `const Foo(bar) = x` destructuring)","format":"org.matrix.custom.html","formatted_body":"(its possible <code>@@unapply</code> could return a non-iterable, though that wouldn't work with <code>const Foo(bar) = x</code> destructuring)","msgtype":"m.text"},"ts":1637281002918,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N3F4bqYXyrRjgXw7046TI_PftxLGwxAtKU6A9ks7mGA"},
{"content":{"body":"`match` syntax could be extended to support extractors in a way that is consistent with extractor binding patterns and other match clauses.","format":"org.matrix.custom.html","formatted_body":"<code>match</code> syntax could be extended to support extractors in a way that is consistent with extractor binding patterns and other match clauses.","msgtype":"m.text"},"ts":1637281226288,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y0D29DZtC33N-mxJPj9E2NWc0u0ZYCLnN5_P24bRF1s"},
{"content":{"body":"```js\nmatch (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">match (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1637281326076,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$khaB1sOtXzNWQA0pCrsjml3WwlSWLiYbzYwsR9zqFcE"},
{"content":{"body":" * ```js\nmatch (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">match (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n</code></pre>\n","m.new_content":{"body":"```js\nmatch (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">match (msg) {\n  when (Message.Move({ x, y })) { ... }\n  when (Message.KeyPress({ alt: true, key })) { ... }\n  else { ... }\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$khaB1sOtXzNWQA0pCrsjml3WwlSWLiYbzYwsR9zqFcE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637281371055,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YtLIdWtoyCujLRlnV4KDo0m0IAAC_7vggZCb8OdGFyQ"},
{"content":{"body":" * In Scala, an object with an `apply` method is essentially a function, and can behave similar to a constructor. So you can do something like `Book.apply(isbn, name)` (or just `Book(isbn, name)`) and get a `Book` object back. You give it arguments and it gives you the result.\n\nThe `unapply` method is something like the inverse of a constructor. You give it the result and it gives you back the arguments.","format":"org.matrix.custom.html","formatted_body":" * <p>In Scala, an object with an <code>apply</code> method is essentially a function, and can behave similar to a constructor. So you can do something like <code>Book.apply(isbn, name)</code> (or just <code>Book(isbn, name)</code>) and get a <code>Book</code> object back. You give it arguments and it gives you the result.</p>\n<p>The <code>unapply</code> method is something like the inverse of a constructor. You give it the result and it gives you back the arguments.</p>\n","m.new_content":{"body":"In Scala, an object with an `apply` method is essentially a function, and can behave similar to a constructor. So you can do something like `Book.apply(isbn, name)` (or just `Book(isbn, name)`) and get a `Book` object back. You give it arguments and it gives you the result.\n\nThe `unapply` method is something like the inverse of a constructor. You give it the result and it gives you back the arguments.","format":"org.matrix.custom.html","formatted_body":"<p>In Scala, an object with an <code>apply</code> method is essentially a function, and can behave similar to a constructor. So you can do something like <code>Book.apply(isbn, name)</code> (or just <code>Book(isbn, name)</code>) and get a <code>Book</code> object back. You give it arguments and it gives you the result.</p>\n<p>The <code>unapply</code> method is something like the inverse of a constructor. You give it the result and it gives you back the arguments.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$f_mEoKIpo-2aB-zDp7SXRK9vl5SOhmJBdG29-3qG72I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637281452827,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eiU1VunkcMgQUBQUJN7JoE9KIpKtW1Lwoad-JBqM-ws"},
{"content":{"body":" * This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this:\n```js\nconst x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this:</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n</code></pre>\n","m.new_content":{"body":"This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this:\n```js\nconst x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n```","format":"org.matrix.custom.html","formatted_body":"<p>This is especially useful in pattern matching. In JS, (without extra syntax) it might look something like this:</p>\n<pre><code class=\"language-js\">const x = new Book(isbn, name);\nconst [isbn, name] = Book[Symbol.unapply](x);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$mSiUJ7DM_Ylt0aVuaT4xMyH6deiTLBUAKMTwIIWnwZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637281472653,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wqzPlRmfEfxn-8zd-BdCuHhH2BoaCt7fYk4JDi7yVVY"},
{"content":{"body":" * This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of the pattern:\n```js\nconst books = [new Book(isbn, name, { publisher: \"O'Reilly\" })]\nconst [Book(isbn, name, { publisher )] = books;\n```","format":"org.matrix.custom.html","formatted_body":" * <p>This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of the pattern:</p>\n<pre><code class=\"language-js\">const books = [new Book(isbn, name, { publisher: &quot;O'Reilly&quot; })]\nconst [Book(isbn, name, { publisher )] = books;\n</code></pre>\n","m.new_content":{"body":"This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of the pattern:\n```js\nconst books = [new Book(isbn, name, { publisher: \"O'Reilly\" })]\nconst [Book(isbn, name, { publisher )] = books;\n```","format":"org.matrix.custom.html","formatted_body":"<p>This becomes even more powerful when used in a binding pattern, allowing you to evaluate extractor logic in the middle of the pattern:</p>\n<pre><code class=\"language-js\">const books = [new Book(isbn, name, { publisher: &quot;O'Reilly&quot; })]\nconst [Book(isbn, name, { publisher )] = books;\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$PqIXQZRs2T57prE9_CFlmq6N3P4Qv6rR049lMmQ-RCc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637281492967,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q_1L6cBLQIOKQSoR0afxK-vaVAu17JJSh9Kq2G-DFnQ"}
]