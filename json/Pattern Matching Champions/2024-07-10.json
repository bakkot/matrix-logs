[
{"content":{"body":"there is a discussion about pipeline in a group I'm in","msgtype":"m.text"},"ts":1720626557005,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QqlZHdx7kKQZ-SlZ2pc0rtKJ-3X6NohZaYEb3eIpyaU"},
{"content":{"body":"they want the function has the ability to know how they're called, normal function? or pipeline? and they want to have different call other in those two cases:\n\n```js\nonClick: xxx(prevent(listener)) |> stop |> yyy,\n```\n\nI don't know what exact he want, but someone mentioned `new.target`. The function can be aware of that if they're called like `new f()` or `f()`","format":"org.matrix.custom.html","formatted_body":"<p>they want the function has the ability to know how they're called, normal function? or pipeline? and they want to have different call other in those two cases:</p><pre><code class=\"language-js\">onClick: xxx(prevent(listener)) |&gt; stop |&gt; yyy,\n</code></pre><p>I don't know what exact he want, but someone mentioned <code>new.target</code>. The function can be aware of that if they're called like <code>new f()</code> or <code>f()</code></p>","msgtype":"m.text"},"ts":1720626716872,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aRXrfmKnyVkI3I6mQA-0-OYOaq1PHac8mbfOwN8BLZw"},
{"content":{"body":"This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example\n```js\nfunction f(x) {\nif (function.matches) return function.matches(x.__val__) // { matches: true, value: x.__val__ } ?\nreturn x.__val__\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example</p><pre><code class=\"language-js\">function f(x) {\nif (function.matches) return function.matches(x.__val__) // { matches: true, value: x.__val__ } ?\nreturn x.__val__\n}\n</code></pre>","msgtype":"m.text"},"ts":1720626914660,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$P2EkuUvzQr0hSKUUOaqg43SOCxvn_1naWl9HxKwX0E0"},
{"content":{"body":"* This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example\n```js\nfunction f(x) {\nif (function.matches) return function.matches(x.__val__)\n// { matches: true, value: x.__val__ } ?\n\nreturn x.__val__\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example</p><pre><code class=\"language-js\">function f(x) {\nif (function.matches) return function.matches(x.__val__)\n// { matches: true, value: x.__val__ } ?\n\nreturn x.__val__\n}\n</code></pre>","m.new_content":{"body":"This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example\n```js\nfunction f(x) {\nif (function.matches) return function.matches(x.__val__)\n// { matches: true, value: x.__val__ } ?\n\nreturn x.__val__\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>This reminds me that we can also use Meta property (although I'm not sure if it is a good idea) to behave differently as a custom matcher. for example</p><pre><code class=\"language-js\">function f(x) {\nif (function.matches) return function.matches(x.__val__)\n// { matches: true, value: x.__val__ } ?\n\nreturn x.__val__\n}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$P2EkuUvzQr0hSKUUOaqg43SOCxvn_1naWl9HxKwX0E0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720626928681,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QQ6gr4guWlQZtMkO4W98XSJnTrHA4eXNoqn_8ISWlZ8"},
{"content":{"body":"it seems like a really bad idea to make functions have different behavior based on what syntax constructs are used to invoke them. a function call is a function call","m.mentions":{},"msgtype":"m.text"},"ts":1720627135381,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7A-630hbGr05rSqcJn3lj7AaLVM74hakeOArvZr6axA"},
{"content":{"body":"Yes, that is def a bad idea imo.","m.mentions":{},"msgtype":"m.text"},"ts":1720628360668,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GAp9OK6rD5kh4DJ4nCebqFjeqn8n2uZ-DeMb7Fs2jtE"},
{"content":{"body":"> <@ljharb:matrix.org> it seems like a really bad idea to make functions have different behavior based on what syntax constructs are used to invoke them. a function call is a function call\n\nok","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7A-630hbGr05rSqcJn3lj7AaLVM74hakeOArvZr6axA\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it seems like a really bad idea to make functions have different behavior based on what syntax constructs are used to invoke them. a function call is a function call</blockquote></mx-reply>ok","m.relates_to":{"m.in_reply_to":{"event_id":"$7A-630hbGr05rSqcJn3lj7AaLVM74hakeOArvZr6axA"}},"msgtype":"m.text"},"ts":1720631336461,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$A_poOCODYSRkTba9Hse6EFbcxZ8wGAKkhhlJrf5BjxA"}
]