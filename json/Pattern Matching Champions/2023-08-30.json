[
{"content":{"body":"> <@ljharb:matrix.org> i think it would be *super* weird for a lone boolean test to produce bindings\n\n`is` introducing bindings is this proposals version of `if let` in Rust. It's extremely valuable in control flow and loops. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$1mMMSIAHkpgponMSQLWB9weWRdNFdsP2J6bsRQ8Rj-o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />i think it would be <em>super</em> weird for a lone boolean test to produce bindings</blockquote></mx-reply><code>is</code> introducing bindings is this proposals version of <code>if let</code> in Rust. It's extremely valuable in control flow and loops.","m.relates_to":{"m.in_reply_to":{"event_id":"$1mMMSIAHkpgponMSQLWB9weWRdNFdsP2J6bsRQ8Rj-o"}},"msgtype":"m.text"},"ts":1693354300647,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d4LVF1RVYOZeu3dz9fdWtB-MUzIoGTituh7-bDZYmDQ"},
{"content":{"body":"It's more obviously useful when paired with something complex like extractors, i.e.:\n\n```js\nif (x is Option.Some(let value)) {\n  // 'value' is in scope\n}\nelse {\n}\n```\nBut is also useful in conditionals:\n\n```js\nconst res = x is Option.Some(let value) ? Option.Some(compute(value)) : Option.None;\n```\n\nBecause `let` bindings are just a pattern, they're fairly flexible:\n\n```js\nwhile (queue.shift() is { name: let jobName, arguments: let jobArgs }) {\n  processJob(jobName, jobArgs);  \n}\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<p>It's more obviously useful when paired with something complex like extractors, i.e.:</p>\n<pre><code class=\"language-js\">if (x is Option.Some(let value)) {\n  // 'value' is in scope\n}\nelse {\n}\n</code></pre>\n<p>But is also useful in conditionals:</p>\n<pre><code class=\"language-js\">const res = x is Option.Some(let value) ? Option.Some(compute(value)) : Option.None;\n</code></pre>\n<p>Because <code>let</code> bindings are just a pattern, they're fairly flexible:</p>\n<pre><code class=\"language-js\">while (queue.shift() is { name: let jobName, arguments: let jobArgs }) {\n  processJob(jobName, jobArgs);  \n}\n</code></pre>\n","msgtype":"m.text"},"ts":1693354825543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G78Nv1FlvPBiw6YlBkb2KHyFEwl2Py1baDPc3tFicXc"},
{"content":{"body":"> <@ljharb:matrix.org> you'd be able to like\n> \n> ```\n> {\n>    x is y;\n>    /* bindings here */\n> }\n> ```\n\n`x is y` doesn't produce a binding. `x is let y` would, but that's not the common case.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$O6hdSkQHuPm1Gu9cmhX8onTNMj4HjgediM1jf6lw674?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>you'd be able to like</p>\n<pre><code>{\n   x is y;\n   /* bindings here */\n}\n</code></pre>\n</blockquote></mx-reply><code>x is y</code> doesn't produce a binding. <code>x is let y</code> would, but that's not the common case.","m.relates_to":{"m.in_reply_to":{"event_id":"$O6hdSkQHuPm1Gu9cmhX8onTNMj4HjgediM1jf6lw674"}},"msgtype":"m.text"},"ts":1693357549849,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gL-Um1V0bbSLYU_IeKA8bDqRtYJhP2_9KPvkTYWEG8g"}
]