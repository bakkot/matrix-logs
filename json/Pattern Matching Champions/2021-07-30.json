[
{"content":{"body":"HE Shi-Jun: Yes, undefined/NaN/Infinity are all literal matchers. So are negative numbers (which are technically, per the grammar, expressions - an unary minus followed by a numeric literal).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: Yes, undefined/NaN/Infinity are all literal matchers. So are negative numbers (which are technically, per the grammar, expressions - an unary minus followed by a numeric literal).","msgtype":"m.text"},"ts":1627688226196,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$j9fb7ox291_7-2ue2QTSOwuoZ5QILbuQZf7COB4XGrc"},
{"content":{"body":"And yes, regex literals can nest just like anything else can.","msgtype":"m.text"},"ts":1627688239017,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$f2Hv3J6eJZ5t8iUGwCetuwvbH5ADbb_eEMg35TGrbNo"},
{"content":{"body":"Adding new literal patterns is compat-risky, yeah, but it's compat-risky to add new literals to JS *at all*, for exactly the same reasons.","format":"org.matrix.custom.html","formatted_body":"Adding new literal patterns is compat-risky, yeah, but it's compat-risky to add new literals to JS <em>at all</em>, for exactly the same reasons.","msgtype":"m.text"},"ts":1627688292417,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$8-esnwpV36MS-tx_oJNmOxU_7CNhzl_SnuvUZ22iozc"},
{"content":{"body":"If JS tomorrow decided it wanted to add `SuperInfinity` as a new numeric literal, we'd have to do compat analysis to see if that's already used as a variable/function/etc name enough to be problematic.","format":"org.matrix.custom.html","formatted_body":"If JS tomorrow decided it wanted to add <code>SuperInfinity</code> as a new numeric literal, we'd have to do compat analysis to see if that's already used as a variable/function/etc name enough to be problematic.","msgtype":"m.text"},"ts":1627688349292,"senderName":"tabatkins","senderId":"@tabatkins:matrix.org","id":"$BD2LRrLjrQUnUTbvcaNKheeyzxlkbaxszyrW_RLxOxo"}
]