[
{"content":{"body":"based on my understanding:\n- yes, it's the same as what the decorator has\n- maybe it throws for things that don't have @@matcher\n- no comment\n- yes, and in TDZ if the match fails","format":"org.matrix.custom.html","formatted_body":"<p>based on my understanding:</p>\n<ul>\n<li>yes, it's the same as what the decorator has</li>\n<li>maybe it throws for things that don't have @@matcher</li>\n<li>no comment</li>\n<li>yes, and in TDZ if the match fails</li>\n</ul>\n","msgtype":"m.text"},"ts":1692251344623,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$10DeXl0nsQDQwXxkSMdl6TfHKyxJW-DE-tHi7lfwT-I"},
{"content":{"body":"if the match fails why would you want the bindings available in the else, since they can't ever work?","msgtype":"m.text"},"ts":1692289552421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xYj5oPIEhPWTx_u4PgLh3AS9rKNu5BSnDY1vnaQDJM4"},
{"content":{"body":"> <@ljharb:matrix.org> TabAtkins: gist review:\n> \n> - `plain-or-dotted-ident` presumably includes brackets and optional things and whatever, the same stuff a decorator allows after `@`?\n> - for `<plain-or-dotted-ident>(<matcher-list>)`, what happens if it's a function that does not have a Symbol.matcher property?\n> - i really like the desugaring example for `is`, but that falls apart with the bindings bit, and that makes me nervous\n> - for bindings in an `if` does it also apply to an `else if` and every other else in the chain?\n> \n> does the gist already incorporate all the discussion at the bottom of it?\n> \n> - there should not be an optin for regex named group bindings, since they're statically mentioned it's not the same as `with`. if someone doesn't want the bindings they just don't have to reference them.\n> \n> I like the name `Symbol.matcher` and since nobody knows about or uses `Symbol.match` i think it'd be a shame to pick a worse name for our symbol :-( I very much do *not* want :\"unapply\" and think that would be a very confusing choice.\n\nRegarding `plain-or-dotted-ident` including brackets and optional things: No, it does not at present. Decorators also do not support optional chaining or brackets. Optional chaining might be feasible with decorators, but brackets are ambiguous with `ComputedPropertyName`, thus you must use parens to use them, i.e., `@(foo[bar])`.\n\nI didn't include element-access-like brackets in Extractors since there were some potential *AssignmentPattern* conflicts I was considering at the time.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$w-tQW4Z85KKaVkgMqxp_iGf5RbA8ccGbTBq3kT-HRj8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p><a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: gist review:</p>\n<ul>\n<li><code>plain-or-dotted-ident</code> presumably includes brackets and optional things and whatever, the same stuff a decorator allows after <code>@</code>?</li>\n<li>for <code>&lt;plain-or-dotted-ident&gt;(&lt;matcher-list&gt;)</code>, what happens if it's a function that does not have a Symbol.matcher property?</li>\n<li>i really like the desugaring example for <code>is</code>, but that falls apart with the bindings bit, and that makes me nervous</li>\n<li>for bindings in an <code>if</code> does it also apply to an <code>else if</code> and every other else in the chain?</li>\n</ul>\n<p>does the gist already incorporate all the discussion at the bottom of it?</p>\n<ul>\n<li>there should not be an optin for regex named group bindings, since they're statically mentioned it's not the same as <code>with</code>. if someone doesn't want the bindings they just don't have to reference them.</li>\n</ul>\n<p>I like the name <code>Symbol.matcher</code> and since nobody knows about or uses <code>Symbol.match</code> i think it'd be a shame to pick a worse name for our symbol :-( I very much do <em>not</em> want :\"unapply\" and think that would be a very confusing choice.</p>\n</blockquote></mx-reply><p>Regarding <code>plain-or-dotted-ident</code> including brackets and optional things: No, it does not at present. Decorators also do not support optional chaining or brackets. Optional chaining might be feasible with decorators, but brackets are ambiguous with <code>ComputedPropertyName</code>, thus you must use parens to use them, i.e., <code>@(foo[bar])</code>.</p>\n<p>I didn't include element-access-like brackets in Extractors since there were some potential <em>AssignmentPattern</em> conflicts I was considering at the time.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$w-tQW4Z85KKaVkgMqxp_iGf5RbA8ccGbTBq3kT-HRj8"}},"msgtype":"m.text"},"ts":1692303859334,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NZNp-Sk2QXkLrwyWixUYOhYTrGmyZZ6GminPl4KXhr8"}
]