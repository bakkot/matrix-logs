[
{"content":{"body":"so what's next? change `{ a }` from direct match to `{ a: let a }`? is this valid? `{ a: let {x, y} }`?","format":"org.matrix.custom.html","formatted_body":"so what's next? change <code>{ a }</code> from direct match to <code>{ a: let a }</code>? is this valid? <code>{ a: let {x, y} }</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so what's next? change `{ a }` from direct match to `{ a: let a }`? is this valid? `{ a: let {x, y} }`?","mimetype":"text/plain"},{"body":"so what's next? change <code>{ a }</code> from direct match to <code>{ a: let a }</code>? is this valid? <code>{ a: let {x, y} }</code>?","mimetype":"text/html"}]},"ts":1666361742035,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$K4nw6yRWdT2RoGCYJIIp9_HQWoLgmWDDdMtb9_xX97A"},
{"content":{"body":"i'm still not comfortable with that direction, especially including let and/or const (and/or var)","msgtype":"m.text","org.matrix.msc1767.text":"i'm still not comfortable with that direction, especially including let and/or const (and/or var)"},"ts":1666370778898,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pSSBdcFbeicXsQDpoo4xA9yk3cagGWGxRm2dNYKk2wE"},
{"content":{"body":" * i'm still not comfortable with that direction, especially including let and/or const (and/or var)","m.new_content":{"body":"i'm still not comfortable with that direction, especially including let and/or const (and/or var)","msgtype":"m.text","org.matrix.msc1767.text":"i'm still not comfortable with that direction, especially including let and/or const (and/or var)"},"m.relates_to":{"event_id":"$pSSBdcFbeicXsQDpoo4xA9yk3cagGWGxRm2dNYKk2wE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i'm still not comfortable with that direction, especially including let and/or const (and/or var)"},"ts":1666370781972,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wwhuYzEoVu2yUiHedE8v9VOFLPku6iNyP2jraoKTQhI"},
{"content":{"body":"I'm open to other ideas, though I'm not in favor of completely divorcing declarations from pattern matching. ","format":"org.matrix.custom.html","formatted_body":"I'm open to other ideas, though I'm not in favor of completely divorcing declarations from pattern matching.","msgtype":"m.text"},"ts":1666379370337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JUfDMRpdumBesvuH2a-d4ldnKn1PtX2eM8C2SrhEgrU"},
{"content":{"body":"While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","format":"org.matrix.custom.html","formatted_body":"While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","mimetype":"text/plain"},{"body":"While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","mimetype":"text/html"}]},"ts":1666379419072,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d1ckVDtL01qGypqELHKBcwRDZ7onEK4AO6BjKyVjGxo"},
{"content":{"body":" * While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","format":"org.matrix.custom.html","formatted_body":" * While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","m.new_content":{"body":"While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","format":"org.matrix.custom.html","formatted_body":"While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","mimetype":"text/plain"},{"body":"While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$d1ckVDtL01qGypqELHKBcwRDZ7onEK4AO6BjKyVjGxo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * While I prefer the explicit `let`, I'm also partial to Rust-like `@` bindings (i.e., `when { a: Number, b: c @ String }: c`)","mimetype":"text/plain"},{"body":" * While I prefer the explicit <code>let</code>, I'm also partial to Rust-like <code>@</code> bindings (i.e., <code>when { a: Number, b: c @ String }: c</code>)","mimetype":"text/html"}]},"ts":1666379542821,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oC43JmuKQyHeHfqfoFAtJK01N-imSXCcYoiFyY4P8HA"}
]