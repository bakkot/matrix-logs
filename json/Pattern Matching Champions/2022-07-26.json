[
{"content":{"body":"I'm also *very* surprised to see a completely different approach dropped immediately prior to the meeting.","format":"org.matrix.custom.html","formatted_body":"I'm also <em>very</em> surprised to see a completely different approach dropped immediately prior to the meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm also *very* surprised to see a completely different approach dropped immediately prior to the meeting.","mimetype":"text/plain"},{"body":"I'm also <em>very</em> surprised to see a completely different approach dropped immediately prior to the meeting.","mimetype":"text/html"}]},"ts":1658871556786,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uJp2WcGgztrEQ6VeEsHdmO1tmIyXFBFfoBMgomvKXxw"},
{"content":{"body":"I'm also *consistently* bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","format":"org.matrix.custom.html","formatted_body":"I'm also <em>consistently</em> bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm also *consistently* bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","mimetype":"text/plain"},{"body":"I'm also <em>consistently</em> bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","mimetype":"text/html"}]},"ts":1658871629758,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MHp-JbekEYbQuVQt4PV56ZciKbgEwsTbov1O4vRgP4E"},
{"content":{"body":"It's fairly similar to Rust's, as well (tho Rust focuses more on Enum unapplication rather than having a default \"list\" and \"object\" to rely on, but it's otherwise very similar)","msgtype":"m.text","org.matrix.msc1767.text":"It's fairly similar to Rust's, as well (tho Rust focuses more on Enum unapplication rather than having a default \"list\" and \"object\" to rely on, but it's otherwise very similar)"},"ts":1658871730367,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$N7zGOn06MlX7b3mgxuYXouzx0xH0DHOrrmGgzQ_pXBo"},
{"content":{"body":"I've given Yulia's proposal two readthrus now, and I have some feedback.","msgtype":"m.text","org.matrix.msc1767.text":"I've given Yulia's proposal two readthrus now, and I have some feedback."},"ts":1658872093936,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5BkXh22UAZz0LZZwMMnoOknT8qc4Eup5Dwa9eocHVDA"},
{"content":{"body":"Okay, having reread Yulia's proposal a few times, some feedback:","msgtype":"m.text","org.matrix.msc1767.text":"Okay, having reread Yulia's proposal a few times, some feedback:"},"ts":1658873140035,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zS2y_R6mSiceHane_mAQpKGFKh98qmdizBfUdRlvPCA"},
{"content":{"body":"1. The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"1. The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.","mimetype":"text/plain"},{"body":"<ol>\n<li>The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658873205187,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2fK2vf6z3VJC6RZ2wsN8-yQcszEV8HAlI8coV6hd8ts"},
{"content":{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did `let when`, as in your 4th stage).","format":"org.matrix.custom.html","formatted_body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did <code>let when</code>, as in your 4th stage).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did `let when`, as in your 4th stage).","mimetype":"text/plain"},{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did <code>let when</code>, as in your 4th stage).","mimetype":"text/html"}]},"ts":1658873308253,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2gS5vk5MrmQk6ptQqbsyFuRKZFCPsHBy4QXvCyI11lk"}
]