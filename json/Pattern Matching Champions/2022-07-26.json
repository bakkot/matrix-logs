[
{"content":{"body":"I'm also *very* surprised to see a completely different approach dropped immediately prior to the meeting.","format":"org.matrix.custom.html","formatted_body":"I'm also <em>very</em> surprised to see a completely different approach dropped immediately prior to the meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm also *very* surprised to see a completely different approach dropped immediately prior to the meeting.","mimetype":"text/plain"},{"body":"I'm also <em>very</em> surprised to see a completely different approach dropped immediately prior to the meeting.","mimetype":"text/html"}]},"ts":1658871556786,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uJp2WcGgztrEQ6VeEsHdmO1tmIyXFBFfoBMgomvKXxw"},
{"content":{"body":"I'm also *consistently* bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","format":"org.matrix.custom.html","formatted_body":"I'm also <em>consistently</em> bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm also *consistently* bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","mimetype":"text/plain"},{"body":"I'm also <em>consistently</em> bewildered at all these comments about this being strange and unfamiliar, when the majority of the proposal's syntax is pretty much exactly in line with how every pattern matching syntax I'm aware of works. (Haskell and Python, at minimum.)","mimetype":"text/html"}]},"ts":1658871629758,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MHp-JbekEYbQuVQt4PV56ZciKbgEwsTbov1O4vRgP4E"},
{"content":{"body":"It's fairly similar to Rust's, as well (tho Rust focuses more on Enum unapplication rather than having a default \"list\" and \"object\" to rely on, but it's otherwise very similar)","msgtype":"m.text","org.matrix.msc1767.text":"It's fairly similar to Rust's, as well (tho Rust focuses more on Enum unapplication rather than having a default \"list\" and \"object\" to rely on, but it's otherwise very similar)"},"ts":1658871730367,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$N7zGOn06MlX7b3mgxuYXouzx0xH0DHOrrmGgzQ_pXBo"},
{"content":{"body":"I've given Yulia's proposal two readthrus now, and I have some feedback.","msgtype":"m.text","org.matrix.msc1767.text":"I've given Yulia's proposal two readthrus now, and I have some feedback."},"ts":1658872093936,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5BkXh22UAZz0LZZwMMnoOknT8qc4Eup5Dwa9eocHVDA"},
{"content":{"body":"Okay, having reread Yulia's proposal a few times, some feedback:","msgtype":"m.text","org.matrix.msc1767.text":"Okay, having reread Yulia's proposal a few times, some feedback:"},"ts":1658873140035,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zS2y_R6mSiceHane_mAQpKGFKh98qmdizBfUdRlvPCA"},
{"content":{"body":"1. The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"1. The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.","mimetype":"text/plain"},{"body":"<ol>\n<li>The let-when form is pretty cool! A bit problematic in that if the check fails it returns an empty object, which can't be destructured past the first layer unless you go to town with default in the destucturing blob, tho.</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658873205187,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2fK2vf6z3VJC6RZ2wsN8-yQcszEV8HAlI8coV6hd8ts"},
{"content":{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did `let when`, as in your 4th stage).","format":"org.matrix.custom.html","formatted_body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did <code>let when</code>, as in your 4th stage).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did `let when`, as in your 4th stage).","mimetype":"text/plain"},{"body":"If this is something we want (and it sounds nice, especially in the additional forms like integrating into for-of, etc), we could also do this backwards, starting from the current proposal and allowing a let-when to use the proposal's pattern syntax; it just wouldn't establish any bindings (unless you did <code>let when</code>, as in your 4th stage).","mimetype":"text/html"}]},"ts":1658873308253,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2gS5vk5MrmQk6ptQqbsyFuRKZFCPsHBy4QXvCyI11lk"},
{"content":{"body":"2. Because bare idents in the pattern syntax are taken as functions and/or custom matchable objects, there's some *very* unfortunate shenanigans needed to match against variables. We argued over this *exact* topic for quite a while, and the result was our custom matcher syntax `${}`. I think this is very important, honestly - requiring weird prototype hacks to just match a value against something in a variable seems very bad.","format":"org.matrix.custom.html","formatted_body":"<ol start=\"2\">\n<li>Because bare idents in the pattern syntax are taken as functions and/or custom matchable objects, there's some <em>very</em> unfortunate shenanigans needed to match against variables. We argued over this <em>exact</em> topic for quite a while, and the result was our custom matcher syntax <code>${}</code>. I think this is very important, honestly - requiring weird prototype hacks to just match a value against something in a variable seems very bad.</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"2. Because bare idents in the pattern syntax are taken as functions and/or custom matchable objects, there's some *very* unfortunate shenanigans needed to match against variables. We argued over this *exact* topic for quite a while, and the result was our custom matcher syntax `${}`. I think this is very important, honestly - requiring weird prototype hacks to just match a value against something in a variable seems very bad.","mimetype":"text/plain"},{"body":"<ol start=\"2\">\n<li>Because bare idents in the pattern syntax are taken as functions and/or custom matchable objects, there's some <em>very</em> unfortunate shenanigans needed to match against variables. We argued over this <em>exact</em> topic for quite a while, and the result was our custom matcher syntax <code>${}</code>. I think this is very important, honestly - requiring weird prototype hacks to just match a value against something in a variable seems very bad.</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658873559873,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SVs1o9qKpnjuS_-XCB7tLdgmqzk4ZmWZ4j099nuLtls"},
{"content":{"body":"Note that your proposal's treatment of bare idents means that the `let {...} when {...};` and `let when {...}` forms are actually *completely different matcher syntaxes*. The former treats bare idents as functions/custom matchers, and *never* as bindings; the latter treats bare idents as bindings, and *never* as functions/custom matchers. Unless I'm completely misunderstanding this?","format":"org.matrix.custom.html","formatted_body":"Note that your proposal's treatment of bare idents means that the <code>let {...} when {...};</code> and <code>let when {...}</code> forms are actually <em>completely different matcher syntaxes</em>. The former treats bare idents as functions/custom matchers, and <em>never</em> as bindings; the latter treats bare idents as bindings, and <em>never</em> as functions/custom matchers. Unless I'm completely misunderstanding this?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Note that your proposal's treatment of bare idents means that the `let {...} when {...};` and `let when {...}` forms are actually *completely different matcher syntaxes*. The former treats bare idents as functions/custom matchers, and *never* as bindings; the latter treats bare idents as bindings, and *never* as functions/custom matchers. Unless I'm completely misunderstanding this?","mimetype":"text/plain"},{"body":"Note that your proposal's treatment of bare idents means that the <code>let {...} when {...};</code> and <code>let when {...}</code> forms are actually <em>completely different matcher syntaxes</em>. The former treats bare idents as functions/custom matchers, and <em>never</em> as bindings; the latter treats bare idents as bindings, and <em>never</em> as functions/custom matchers. Unless I'm completely misunderstanding this?","mimetype":"text/html"}]},"ts":1658873803967,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Yj3-3TCYFZLuXJjUjwPNYIfmMLsw6mI8Yzgix6nF85E"},
{"content":{"body":"Or, wait, maybe I *am* misunderstanding things. Is it the case that a `when <ident>` calls the function/custom matcher, but a `when <object literal>`/etc does a destructure (without actually creating any bindings) and all the names are useless except to mark other bits, like array length in `when [foo, bar]`?","format":"org.matrix.custom.html","formatted_body":"Or, wait, maybe I <em>am</em> misunderstanding things. Is it the case that a <code>when &lt;ident&gt;</code> calls the function/custom matcher, but a <code>when &lt;object literal&gt;</code>/etc does a destructure (without actually creating any bindings) and all the names are useless except to mark other bits, like array length in <code>when [foo, bar]</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or, wait, maybe I *am* misunderstanding things. Is it the case that a `when <ident>` calls the function/custom matcher, but a `when <object literal>`/etc does a destructure (without actually creating any bindings) and all the names are useless except to mark other bits, like array length in `when [foo, bar]`?","mimetype":"text/plain"},{"body":"Or, wait, maybe I <em>am</em> misunderstanding things. Is it the case that a <code>when &lt;ident&gt;</code> calls the function/custom matcher, but a <code>when &lt;object literal&gt;</code>/etc does a destructure (without actually creating any bindings) and all the names are useless except to mark other bits, like array length in <code>when [foo, bar]</code>?","mimetype":"text/html"}]},"ts":1658874014060,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lQJtjLSnGRk5mpz2mb39scdXm0ksy7WGppmUzC76ZIY"},
{"content":{"body":"Looking over the examples it does look like that's the case, which means you can't ever run a matcher on a subvalue, only ever the top-most value. This is a huge problem - *every* pattern-matching syntax I've ever seen that allows custom matching logic *at all* allows the logic to be run on values at any level of the pattern.","format":"org.matrix.custom.html","formatted_body":"Looking over the examples it does look like that's the case, which means you can't ever run a matcher on a subvalue, only ever the top-most value. This is a huge problem - <em>every</em> pattern-matching syntax I've ever seen that allows custom matching logic <em>at all</em> allows the logic to be run on values at any level of the pattern.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Looking over the examples it does look like that's the case, which means you can't ever run a matcher on a subvalue, only ever the top-most value. This is a huge problem - *every* pattern-matching syntax I've ever seen that allows custom matching logic *at all* allows the logic to be run on values at any level of the pattern.","mimetype":"text/plain"},{"body":"Looking over the examples it does look like that's the case, which means you can't ever run a matcher on a subvalue, only ever the top-most value. This is a huge problem - <em>every</em> pattern-matching syntax I've ever seen that allows custom matching logic <em>at all</em> allows the logic to be run on values at any level of the pattern.","mimetype":"text/html"}]},"ts":1658874070350,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rfY0Ho18YGsiDgtrrYuVVW_frjruVjGf1_hlwHT5xmw"},
{"content":{"body":"Well, hm, still confused, because several other examples have matching beyond destructuring (comparison against literal values, or against an or-pattern of literals) nested deeper within a pattern.","msgtype":"m.text","org.matrix.msc1767.text":"Well, hm, still confused, because several other examples have matching beyond destructuring (comparison against literal values, or against an or-pattern of literals) nested deeper within a pattern."},"ts":1658874168917,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$looCDpbsSKFivDN_XIR5HBM841GCY8agjo3km-MvXdI"},
{"content":{"body":"So I simply can't tell what nested patterns are allowed to do or what syntax they're meant to use.","msgtype":"m.text","org.matrix.msc1767.text":"So I simply can't tell what nested patterns are allowed to do or what syntax they're meant to use."},"ts":1658874273844,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$a9wtz335FAOKxW6sigCVcGW2t4ZUjlC4MdyC3AP6CxM"},
{"content":{"body":"My conclusion is that your proposal runs directly into problems we ran into early in the design, and talked over with you and others in design meetings, and then fixed in our proposal in, afaict, a consistent and predictable way. It brings up a useful bit of new functionality - the let-when statement and associated constructs - which could be appended to the current proposal with minimal tweaking, but sets it up instead as a competitor. It does not meaningfully reduce the \"size\" of the proposal, as the pattern syntax is just as large as in the current proposal.","msgtype":"m.text","org.matrix.msc1767.text":"My conclusion is that your proposal runs directly into problems we ran into early in the design, and talked over with you and others in design meetings, and then fixed in our proposal in, afaict, a consistent and predictable way. It brings up a useful bit of new functionality - the let-when statement and associated constructs - which could be appended to the current proposal with minimal tweaking, but sets it up instead as a competitor. It does not meaningfully reduce the \"size\" of the proposal, as the pattern syntax is just as large as in the current proposal."},"ts":1658874491392,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$l1anHk1gDZl4PsO7wp4xFZtRwB7vledeI2fpPImLSGA"},
{"content":{"body":"I do like your emphasis on making the pattern-matching part an extractable bit of syntax that we can apply elsewhere - that's very cool. I think that can be done within the current proposal, and suggest pursuing that.","msgtype":"m.text","org.matrix.msc1767.text":"I do like your emphasis on making the pattern-matching part an extractable bit of syntax that we can apply elsewhere - that's very cool. I think that can be done within the current proposal, and suggest pursuing that."},"ts":1658874569561,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YOUB8sVqv8QKJWWYRUfn3K5aGaY4HxQA3pBLlC7zVhY"},
{"content":{"body":"However, the specifics of your proposal are flawed in ways we already encountered and fixed; once they're corrected, your proposal will end up more or less identical to the current proposal, + the new let-when/etc constructs.","msgtype":"m.text","org.matrix.msc1767.text":"However, the specifics of your proposal are flawed in ways we already encountered and fixed; once they're corrected, your proposal will end up more or less identical to the current proposal, + the new let-when/etc constructs."},"ts":1658874629180,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FrvVB5duLqy58V_EmqWZCnr4v06C5aIzIOrWoJ3W7kk"},
{"content":{"body":"yulia: ^^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ^^^","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: ^^^","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: ^^^","mimetype":"text/html"}]},"ts":1658874664245,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6FofI2hi8DWqfq7BmK-w5hc5SeVXSLfUIvmt5wGGSGo"},
{"content":{"body":"(Note that we've recently added the ability to use plain functions as custom matchers that pass-thru the value unchanged, so `when(${isSomething}): ...;` works exactly as expected if `isSomething` is a boolean function; no need for the author to do the custom-matcher hoop-jumping we'd shown off in previous meetings. I think the README still needs updating in this regard, which is on me.)","format":"org.matrix.custom.html","formatted_body":"(Note that we've recently added the ability to use plain functions as custom matchers that pass-thru the value unchanged, so <code>when(${isSomething}): ...;</code> works exactly as expected if <code>isSomething</code> is a boolean function; no need for the author to do the custom-matcher hoop-jumping we'd shown off in previous meetings. I think the README still needs updating in this regard, which is on me.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Note that we've recently added the ability to use plain functions as custom matchers that pass-thru the value unchanged, so `when(${isSomething}): ...;` works exactly as expected if `isSomething` is a boolean function; no need for the author to do the custom-matcher hoop-jumping we'd shown off in previous meetings. I think the README still needs updating in this regard, which is on me.)","mimetype":"text/plain"},{"body":"(Note that we've recently added the ability to use plain functions as custom matchers that pass-thru the value unchanged, so <code>when(${isSomething}): ...;</code> works exactly as expected if <code>isSomething</code> is a boolean function; no need for the author to do the custom-matcher hoop-jumping we'd shown off in previous meetings. I think the README still needs updating in this regard, which is on me.)","mimetype":"text/html"}]},"ts":1658874801517,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cGAVXMBtOUoHtGpavzyaJ1oJ2wjvQbXRsaJuMqy6QV8"},
{"content":{"body":"I think even if we changed nothing about the feature though, framing things in layers helps for digestibility such that champions, committee, and community alike can clearly see the value in each piece of the proposal","msgtype":"m.text","org.matrix.msc1767.text":"I think even if we changed nothing about the feature though, framing things in layers helps for digestibility such that champions, committee, and community alike can clearly see the value in each piece of the proposal"},"ts":1658876272990,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$kdFIdc3lpajIquSFm6C7NjzPr13W8yOEqLIRKxsWVAw"},
{"content":{"body":"like, the Friday before plenary, I ended up feeling like \"actually I don't really find much objectionable here at all\" but that was a surprise to me because it took careful re-examination of all the parts of the proposal while repeatedly asking myself \"can we jettison this?\"","msgtype":"m.text","org.matrix.msc1767.text":"like, the Friday before plenary, I ended up feeling like \"actually I don't really find much objectionable here at all\" but that was a surprise to me because it took careful re-examination of all the parts of the proposal while repeatedly asking myself \"can we jettison this?\""},"ts":1658876363624,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$l1NSURpUQ_ENVraLJZigZkUHx8F8g19NCncNBCws1AA"}
]