[
{"content":{"body":"I hope you don't mind me butting in - just a distant observer. I quite like the presentation of the layering from yulia . However, one concern, which I think TabAtkins picked upon, with the specific content of the proposal is that the `let when` matching doesn't allow for matching on nested properties, which I think its pretty core the value of the original pattern matching proposal and is a common feature across prior art in other languages. \n\nFor some context, I originally suggested expanding the matcher proposal to include implementation for at least all scalars in the language, and I provide some example use cases in the first few comments https://github.com/tc39/proposal-pattern-matching/issues/209","format":"org.matrix.custom.html","formatted_body":"<p>I hope you don't mind me butting in - just a distant observer. I quite like the presentation of the layering from <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> . However, one concern, which I think <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> picked upon, with the specific content of the proposal is that the <code>let when</code> matching doesn't allow for matching on nested properties, which I think its pretty core the value of the original pattern matching proposal and is a common feature across prior art in other languages.</p>\n<p>For some context, I originally suggested expanding the matcher proposal to include implementation for at least all scalars in the language, and I provide some example use cases in the first few comments https://github.com/tc39/proposal-pattern-matching/issues/209</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I hope you don't mind me butting in - just a distant observer. I quite like the presentation of the layering from yulia . However, one concern, which I think TabAtkins picked upon, with the specific content of the proposal is that the `let when` matching doesn't allow for matching on nested properties, which I think its pretty core the value of the original pattern matching proposal and is a common feature across prior art in other languages. \n\nFor some context, I originally suggested expanding the matcher proposal to include implementation for at least all scalars in the language, and I provide some example use cases in the first few comments https://github.com/tc39/proposal-pattern-matching/issues/209","mimetype":"text/plain"},{"body":"<p>I hope you don't mind me butting in - just a distant observer. I quite like the presentation of the layering from <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> . However, one concern, which I think <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> picked upon, with the specific content of the proposal is that the <code>let when</code> matching doesn't allow for matching on nested properties, which I think its pretty core the value of the original pattern matching proposal and is a common feature across prior art in other languages.</p>\n<p>For some context, I originally suggested expanding the matcher proposal to include implementation for at least all scalars in the language, and I provide some example use cases in the first few comments https://github.com/tc39/proposal-pattern-matching/issues/209</p>\n","mimetype":"text/html"}]},"ts":1659002865053,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$0OGaRHnB4QvXh4BfmoGhxqMz5Sb9W-RszyuZa_vMBFU"},
{"content":{"body":"but I can definitely see the value of building up the feature from smaller parts that can be used standalone - it could make it a better integrated feature in the language if its made up of smaller parts that have value elsewhere","msgtype":"m.text","org.matrix.msc1767.text":"but I can definitely see the value of building up the feature from smaller parts that can be used standalone - it could make it a better integrated feature in the language if its made up of smaller parts that have value elsewhere"},"ts":1659002980670,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$mGXcwU1dKKHPuI0iB9JeJ65sineTO65SQ1OLuRRbzNQ"},
{"content":{"body":"easier to understand, and educate users","msgtype":"m.text","org.matrix.msc1767.text":"easier to understand, and educate users"},"ts":1659002994895,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$qghKgKoYxpAeFhIQXLTNsrci5bsT2hX2ZRmm_WyzilY"},
{"content":{"body":"let-when (in my original thinking) is intentionally restricted to make sure that it is unambiguous for users","msgtype":"m.text","org.matrix.msc1767.text":"let-when (in my original thinking) is intentionally restricted to make sure that it is unambiguous for users"},"ts":1659003039292,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$p2x4OlK7VzN6Cia8xtu18whypQZ5_mYJfqsHx1dK8To"},
{"content":{"body":"but, if you need more complex matching, you can break it into let ... when ... where the when is more powerful","msgtype":"m.text","org.matrix.msc1767.text":"but, if you need more complex matching, you can break it into let ... when ... where the when is more powerful"},"ts":1659003055055,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fELc6nxTLeEkPXX7sRFP2YsZuuTIzgCZOkstSiYurGw"},
{"content":{"body":"its an idea -- largely coming from a difficulty that you also noted in your examples that it is a little difficult to tell how destructuring works exactly. That problem will be compounded if we are not careful. Especially if we allow patterns in other contexts (which i believe will be very powerful and we should try)","msgtype":"m.text","org.matrix.msc1767.text":"its an idea -- largely coming from a difficulty that you also noted in your examples that it is a little difficult to tell how destructuring works exactly. That problem will be compounded if we are not careful. Especially if we allow patterns in other contexts (which i believe will be very powerful and we should try)"},"ts":1659003109319,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rFzPhJygIygxTqU9MskY3_a-AgKjR9mDtyXJJ4epYM8"},
{"content":{"body":"can you point me to a more specific example? I am (as always) low on time, so i can only take a glance at the very detailed comments you have. You can take one specific one and ill take a look","msgtype":"m.text","org.matrix.msc1767.text":"can you point me to a more specific example? I am (as always) low on time, so i can only take a glance at the very detailed comments you have. You can take one specific one and ill take a look"},"ts":1659003155309,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$55zHvkV2Yf71-XaiJPLto2pptDEdD0RFbe8qC-3-71A"},
{"content":{"body":"yeah, but in prior art I wouldn't need to say use a `where` clause for matching against a nested `Some` for example","format":"org.matrix.custom.html","formatted_body":"yeah, but in prior art I wouldn't need to say use a <code>where</code> clause for matching against a nested <code>Some</code> for example","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah, but in prior art I wouldn't need to say use a `where` clause for matching against a nested `Some` for example","mimetype":"text/plain"},{"body":"yeah, but in prior art I wouldn't need to say use a <code>where</code> clause for matching against a nested <code>Some</code> for example","mimetype":"text/html"}]},"ts":1659003161808,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$WhLkXDjaTf9NFV7ksrv3bleP4g-x6kdnI14xuGN6yds"},
{"content":{"body":"A `Some` containing a `Some`","format":"org.matrix.custom.html","formatted_body":"A <code>Some</code> containing a <code>Some</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A `Some` containing a `Some`","mimetype":"text/plain"},{"body":"A <code>Some</code> containing a <code>Some</code>","mimetype":"text/html"}]},"ts":1659003178842,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$BxIf6N8FlrlDxNrrQEvqETV1xHSiMFwpVaqIL4_-DBo"},
{"content":{"body":"can you write out what you have in mind?","msgtype":"m.text","org.matrix.msc1767.text":"can you write out what you have in mind?"},"ts":1659003205257,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$UOmFTqdsoDg_hPkyTFK_j8w31LGcdCBeYT5_PnuuPbw"},
{"content":{"body":"forgive the made up syntax, just copying it from the issue I linked\n\n```ts\ntype User = \n  | { id: string, name: string} \n  | { id: string, name: { name: string } } \n  | string \n  | number \n  | null\n\ndeclare function getNameFromId(id: number): string;\n\ndeclare const user: User;\n\n// again I'm not sure about how binding works in this proposals, so taking a haphazard guess\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n\n```","format":"org.matrix.custom.html","formatted_body":"<p>forgive the made up syntax, just copying it from the issue I linked</p>\n<pre><code class=\"language-ts\">type User = \n  | { id: string, name: string} \n  | { id: string, name: { name: string } } \n  | string \n  | number \n  | null\n\ndeclare function getNameFromId(id: number): string;\n\ndeclare const user: User;\n\n// again I'm not sure about how binding works in this proposals, so taking a haphazard guess\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"forgive the made up syntax, just copying it from the issue I linked\n\n```ts\ntype User = \n  | { id: string, name: string} \n  | { id: string, name: { name: string } } \n  | string \n  | number \n  | null\n\ndeclare function getNameFromId(id: number): string;\n\ndeclare const user: User;\n\n// again I'm not sure about how binding works in this proposals, so taking a haphazard guess\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n\n```","mimetype":"text/plain"},{"body":"<p>forgive the made up syntax, just copying it from the issue I linked</p>\n<pre><code class=\"language-ts\">type User = \n  | { id: string, name: string} \n  | { id: string, name: { name: string } } \n  | string \n  | number \n  | null\n\ndeclare function getNameFromId(id: number): string;\n\ndeclare const user: User;\n\n// again I'm not sure about how binding works in this proposals, so taking a haphazard guess\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659003228322,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$0TccI9WGi58jpI2P_OI5DJEfK2I8_ryFpTjwNXWQcpo"},
{"content":{"body":"its kinda arbitrary and refers back to when `do` was part of the proposal","format":"org.matrix.custom.html","formatted_body":"its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"its kinda arbitrary and refers back to when `do` was part of the proposal","mimetype":"text/plain"},{"body":"its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","mimetype":"text/html"}]},"ts":1659003275120,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$yUdCqgaPM3S7QoMOvXZVCisu78uzi6neyD9h4XDODfg"},
{"content":{"body":" * its kinda arbitrary and refers back to when `do` was part of the proposal","format":"org.matrix.custom.html","formatted_body":" * its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","m.new_content":{"body":"its kinda arbitrary and refers back to when `do` was part of the proposal","format":"org.matrix.custom.html","formatted_body":"its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"its kinda arbitrary and refers back to when `do` was part of the proposal","mimetype":"text/plain"},{"body":"its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$yUdCqgaPM3S7QoMOvXZVCisu78uzi6neyD9h4XDODfg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * its kinda arbitrary and refers back to when `do` was part of the proposal","mimetype":"text/plain"},{"body":" * its kinda arbitrary and refers back to when <code>do</code> was part of the proposal","mimetype":"text/html"}]},"ts":1659003281947,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$g3e-0BoQECVXul-aoi4vJh0E-aERAH9F9448eFEoGSY"},
{"content":{"body":"the proposal hasnt' changed at the moment","msgtype":"m.text","org.matrix.msc1767.text":"the proposal hasnt' changed at the moment"},"ts":1659003296642,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$WuqZ1o2vJfaZGjnV6zzoi3gM9nzARBBMd8Ohyr0bnHI"},
{"content":{"body":"so you mean this kind of match","msgtype":"m.text","org.matrix.msc1767.text":"so you mean this kind of match"},"ts":1659003306904,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6VtVkWX9Hsemzr9ZASTbhvYHwcKmT1G7FMdI7NiqSmg"},
{"content":{"body":"```js\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nconst str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">const str = match( user ) {\n  when ( { name: _string } ) { name }\n  when ( { name: { name } ) { name }\n  when _string { user }\n  when _number { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659003310071,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$TWI6FgYp4VCCEohKLPCu44z4o5IT3MjxKb0qFpFH8ME"},
{"content":{"body":"haha, yes","msgtype":"m.text","org.matrix.msc1767.text":"haha, yes"},"ts":1659003330306,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$geZPdrwMp1pZMd920nd3HizrcqZO2i67qiPrzokfFPE"},
{"content":{"body":"I'm guessing you read the issue","msgtype":"m.text","org.matrix.msc1767.text":"I'm guessing you read the issue"},"ts":1659003337802,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$t0rot2KzcmNP1hTaQLNmQnIjb_GAOPRRbfxfFenwFF8"},
{"content":{"body":"and i guess with the current proposal it would look like this","msgtype":"m.text","org.matrix.msc1767.text":"and i guess with the current proposal it would look like this"},"ts":1659003341119,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iOplpecMLnQA80M8hoqicaCmHXt6ysq5GS0G0geY7Zw"},
{"content":{"body":"`_string` is kinda like `${String}` or in a previous iteration `^String`","format":"org.matrix.custom.html","formatted_body":"<code>_string</code> is kinda like <code>${String}</code> or in a previous iteration <code>^String</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`_string` is kinda like `${String}` or in a previous iteration `^String`","mimetype":"text/plain"},{"body":"<code>_string</code> is kinda like <code>${String}</code> or in a previous iteration <code>^String</code>","mimetype":"text/html"}]},"ts":1659003357669,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$u01LAq53JAM4M-W-R528wgUCAO9zRsRhpCgulAw3QXs"},
{"content":{"body":"```js\nconst str = match( user ) {\n  when ( { name: ${String} } ) { name }\n  when ( { name: { name } ) { name }\n  when (${String}) { user }\n  when ($number}) { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const str = match( user ) {\n  when ( { name: ${String} } ) { name }\n  when ( { name: { name } ) { name }\n  when (${String}) { user }\n  when ($number}) { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nconst str = match( user ) {\n  when ( { name: ${String} } ) { name }\n  when ( { name: { name } ) { name }\n  when (${String}) { user }\n  when ($number}) { getNameFromId(user) }\n  otherwise { \"unknown user\" }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">const str = match( user ) {\n  when ( { name: ${String} } ) { name }\n  when ( { name: { name } ) { name }\n  when (${String}) { user }\n  when ($number}) { getNameFromId(user) }\n  otherwise { &quot;unknown user&quot; }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659003398065,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rjElnaRgdtoT671DOwCDGMwLiV4sVpf7xo6vxv7o2vo"},
{"content":{"body":"yep, that is how it would roughly look I think in the current proposal ","msgtype":"m.text","org.matrix.msc1767.text":"yep, that is how it would roughly look I think in the current proposal "},"ts":1659003424729,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$SwxmcUjYmQsoCPMCCPiN641b73Ltop1oE-_oUl2vvX4"},
{"content":{"body":"I'm matching potentially on a union of possible values, and some of those values have nested properties that I want to match against","msgtype":"m.text","org.matrix.msc1767.text":"I'm matching potentially on a union of possible values, and some of those values have nested properties that I want to match against"},"ts":1659003590377,"senderName":"michael","senderId":"@m-rutter:matrix.org","id":"$300OEY53aIzpaotG3Zhwkrp7U6JRz2WNTJ87IbygVlY"}
]