[
{"content":{"body":"reminder i'll be a half hour late","msgtype":"m.text"},"ts":1680534103513,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0O2MaiAvk9Xa5e8i5PKJgy_r_bEshNlyLYxEuGT5cZg"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1680534187291,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0DzfX8vuvR0ag5eyseaUxmiBbdBVDas_rjCJF2x8c2s"},
{"content":{"body":"I won't be able to attend today due to moving. ","format":"org.matrix.custom.html","formatted_body":"I won't be able to attend today due to moving.","msgtype":"m.text"},"ts":1680534377599,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$M9rdNTfmxvEt6nW9eQeePSmZ93U9Mex3YuzOt7FL-Ik"},
{"content":{"body":"Short notes from today's meeting, we discussed my proposal for matchers-everywhere https://hackmd.io/ubn93HPNT2GCjFwNOPzWCA","msgtype":"m.text"},"ts":1680544585904,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JjSCcGGGX6FBUXY-fyU1n20m-f4aeI7mz6BfctROqp4"},
{"content":{"body":"> Somewhat against the extractor syntax, partially due to Scala experience.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Somewhat against the extractor syntax, partially due to Scala experience.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1680544852925,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WYTaWFZN-GoNtwCCVIEEqyYD5gkq6AsGRvuRUh6ltjU"},
{"content":{"body":"any info of why scala experience is bad?","msgtype":"m.text"},"ts":1680544881171,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$24uFaa0SzwQHpLOLedRN4OjjnsL90AZXwAB8OyOFUQ4"},
{"content":{"body":"ljharb: ^^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: ^^^","msgtype":"m.text"},"ts":1680545714709,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WmdKSwS49oRTLCG2tnDdEHXSUjcRcrwVbq0i-rnZ4go"},
{"content":{"body":"i'll flesh out the notes again. but mainly that scala is a mess of syntax that means tons of things in different contexts, and it's very unintuitive to me that you can kind of use constructors as extractors","msgtype":"m.text"},"ts":1680550952021,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fFZcZcgfiGZKsqQXZhLeh6Z31YRZH6CkfR6HqMJtMI8"},
{"content":{"body":"either way it's more that `foo()` syntax imo shouldn't mean anything except invocation, and `foo{}` is just weird","format":"org.matrix.custom.html","formatted_body":"either way it's more that <code>foo()</code> syntax imo shouldn't mean anything except invocation, and <code>foo{}</code> is just weird","msgtype":"m.text"},"ts":1680551181848,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ve0z--P-rRIyAjqG_9wyhxw-xZDTF39vrUmehqLxe5I"},
{"content":{"body":"(Could I get permissions for those notes?)","msgtype":"m.text"},"ts":1680552525954,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$23ldIdWszIwW_0MN1wdljnv0QZW4lYULcZZszEufXuk"},
{"content":{"body":"Anyone with the link has permission, you just need to be signed into hackmd","msgtype":"m.text"},"ts":1680552979082,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IcPaQxGopvSC6j-iTEmQAQ9arUbXEk_dqHt0a2PIm5g"},
{"content":{"body":"re: scala/extractors; I find this syntax fairly appealing here - the constructor/extractor syntax similarity is identical to array/object literals/destructuring.","msgtype":"m.text"},"ts":1680553059514,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PJ2xwcqvFsxj3Mq_5iEiALdDV0KVl_XJZGz66MeOos0"},
{"content":{"body":"So just like how `let x = [1, {foo: 2}]` constructs some object, and `let [a, {foo: b}] = obj;` deconstructs them, `let x = Foo(1, 2)` constructs an object and `let when Foo(bar, baz) = obj;` deconstructs it.","format":"org.matrix.custom.html","formatted_body":"So just like how <code>let x = [1, {foo: 2}]</code> constructs some object, and <code>let [a, {foo: b}] = obj;</code> deconstructs them, <code>let x = Foo(1, 2)</code> constructs an object and <code>let when Foo(bar, baz) = obj;</code> deconstructs it.","msgtype":"m.text"},"ts":1680553145758,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9M4hWIIpXSWRF1GTl6uJoIbyXbEY8dzHUexjvskOho4"},
{"content":{"body":"Also the syntax being more compact *is* pretty compelling for stacked cases: `when Foo(a, Baz(b, c))` vs `when ${Foo} with [a, ${Baz} with [b, c]]`","format":"org.matrix.custom.html","formatted_body":"Also the syntax being more compact <em>is</em> pretty compelling for stacked cases: <code>when Foo(a, Baz(b, c))</code> vs <code>when ${Foo} with [a, ${Baz} with [b, c]]</code>","msgtype":"m.text"},"ts":1680553418070,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SgCiQqv4CorDpEL1A7qHOxztDAmVJnsOeVe9FsPPACo"},
{"content":{"body":"Back when I was first reading some Scala code I did find the syntax confusing, because it wasn't clear to me that it *was* basically destructuring, or how it happened, because the unapply methods were created implicitly. (Same with Haskell's similar feature, actually.) But if you have to write them manually in JS I think it's somewhat less of an issue?","format":"org.matrix.custom.html","formatted_body":"Back when I was first reading some Scala code I did find the syntax confusing, because it wasn't clear to me that it <em>was</em> basically destructuring, or how it happened, because the unapply methods were created implicitly. (Same with Haskell's similar feature, actually.) But if you have to write them manually in JS I think it's somewhat less of an issue?","msgtype":"m.text"},"ts":1680554286689,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0mqKboLi8XbxUi-h-wn0HyYX-zThA5P_pYsV7TPjvmk"},
{"content":{"body":"`let x = Foo(1, 2)` doesn't construct an object tho, necessarily. only `new Foo(1, 2)` does.","format":"org.matrix.custom.html","formatted_body":"<code>let x = Foo(1, 2)</code> doesn't construct an object tho, necessarily. only <code>new Foo(1, 2)</code> does.","msgtype":"m.text"},"ts":1680555904104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gXtGmFXXjEsrBqJEMGTUnxPuxE9qHPt14WlHrFHgjcM"},
{"content":{"body":"You know what I mean :p","msgtype":"m.text"},"ts":1680555934726,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qRS4o1sRB-PJm0dAer8ogUWnqwyCTAkUwDzJ26xal3Y"},
{"content":{"body":"(worst part of JS syntax imo)","msgtype":"m.text"},"ts":1680555939639,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9vsxkfJrh6yFZXzxXcDq8OkMr23a1RhZ6pDzPl1oiNU"},
{"content":{"body":"i do, but i still think that's a big issue","msgtype":"m.text"},"ts":1680555956110,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XCWjn3XR34QEGfR6EUqGDMgcutPXViZG3nb4zINELfs"},
{"content":{"body":"function call syntax isn't exclusively, or even mostly, used for constructing objects","msgtype":"m.text"},"ts":1680555970251,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Sne_FFk1X56eEvsL4LlJXS9EeWQOvpyEu-OChL1D8ao"},
{"content":{"body":"Sure, but it *is* used for constructing objects.","format":"org.matrix.custom.html","formatted_body":"Sure, but it <em>is</em> used for constructing objects.","msgtype":"m.text"},"ts":1680555994620,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JMEVMNeXoJUwItHNbv6-kNfLuKlaZIPgHId83vtY_LU"},
{"content":{"body":"sometimes, sure.","msgtype":"m.text"},"ts":1680556000850,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v5xujRQzSqQjIrpKk-uv2XKIaTI7gWyv9KMP7E6CBOU"},
{"content":{"body":"but only with `new` is that always the case","format":"org.matrix.custom.html","formatted_body":"but only with <code>new</code> is that always the case","msgtype":"m.text"},"ts":1680556010062,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1l9O_e2WK9cmBOxfM9jW0gMVy5U0d9sdHReX5_pd57M"},
{"content":{"body":"Extractors also mirror Rust ADT enum destructuring. ","format":"org.matrix.custom.html","formatted_body":"Extractors also mirror Rust ADT enum destructuring.","msgtype":"m.text"},"ts":1680556050772,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$901v6SdjMSYMooSio6jv2l11UIddA3IyV1X7Ejm_388"},
{"content":{"body":"I'm not sure what your objection here is. It parallels object creation, but also just function-calling in general. If you have *any* function that takes two arguments and returns something, you can give it a custom matcher that takes the something and pulls it apart into two arguments.","format":"org.matrix.custom.html","formatted_body":"I'm not sure what your objection here is. It parallels object creation, but also just function-calling in general. If you have <em>any</em> function that takes two arguments and returns something, you can give it a custom matcher that takes the something and pulls it apart into two arguments.","msgtype":"m.text"},"ts":1680556074884,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3k4DMeJBnIo9qYA61qWWdXOB2gMyJKHnHSe12Xze5G8"},
{"content":{"body":"This is a conversation I'd love to spend more time discussing, but thst will have to wait until I'm done with my move ðŸ˜•","msgtype":"m.text"},"ts":1680556102881,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$SQGW7bx5UopytkMgPr3GUzqaEoEW0r74ejFVJ4wiuww"},
{"content":{"body":"* This is a conversation I'd love to spend more time discussing, but that will have to wait until I'm done with my move ðŸ˜•","m.new_content":{"body":"This is a conversation I'd love to spend more time discussing, but that will have to wait until I'm done with my move ðŸ˜•","msgtype":"m.text"},"m.relates_to":{"event_id":"$SQGW7bx5UopytkMgPr3GUzqaEoEW0r74ejFVJ4wiuww","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1680556114449,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$JgJCwAwfdsh7LqHYCxCuSGXMrkxCwdOGtZGmRBM9w8g"},
{"content":{"body":"i don't yet have any objection to the need for extractors, but i do object to the two forms of syntax tab showed","msgtype":"m.text"},"ts":1680556116081,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6RAzc0W3z0LRMF5UiS1ReoMlgZktoRf7a4FK0wnpVk4"},
{"content":{"body":"object creation is done with `{ }`. *instance* creation is done with `new`","format":"org.matrix.custom.html","formatted_body":"object creation is done with <code>{ }</code>. <em>instance</em> creation is done with <code>new</code>","msgtype":"m.text"},"ts":1680556129943,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dtbgg6O-_C_btUK1rdyjeFCqISUIi6l8_s3EWCEGb_M"},
{"content":{"body":"Without this syntax, we already *have* extractors (via interpolation patterns). The syntax is the point.","format":"org.matrix.custom.html","formatted_body":"Without this syntax, we already <em>have</em> extractors (via interpolation patterns). The syntax is the point.","msgtype":"m.text"},"ts":1680556144513,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk"},
{"content":{"body":"and destructuring of objects is also done with `{ }`. i can't think of anything that would be the inverse of `new` tho","format":"org.matrix.custom.html","formatted_body":"and destructuring of objects is also done with <code>{ }</code>. i can't think of anything that would be the inverse of <code>new</code> tho","msgtype":"m.text"},"ts":1680556156008,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Oy5ihST_L-0jlzwgMWrQCk_HkLRbmeBdGzzw5Mh7nJE"},
{"content":{"body":"> <@tabatkins:matrix.org> Without this syntax, we already *have* extractors (via interpolation patterns). The syntax is the point.\n\ni'm not sure what you mean?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Without this syntax, we already <em>have</em> extractors (via interpolation patterns). The syntax is the point.</blockquote></mx-reply>i'm not sure what you mean?","m.relates_to":{"m.in_reply_to":{"event_id":"$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk"}},"msgtype":"m.text"},"ts":1680556160878,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tCnutGjYs-utzdA8bMO31PKX7BwB9Ck170ZZfydb15s"},
{"content":{"body":"`when Foo(a, b)` is literally identical to `when ${Foo} with [a, b]`. It's *purely* a syntax sugar.","format":"org.matrix.custom.html","formatted_body":"<code>when Foo(a, b)</code> is literally identical to <code>when ${Foo} with [a, b]</code>. It's <em>purely</em> a syntax sugar.","msgtype":"m.text"},"ts":1680556183365,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_B5duMTm8Ybq5ArA0QBZHfpyz9mkFgYVEJDwV93Vbys"},
{"content":{"body":"sure, i get that. and i see value in providing sugar for that. but that specific sugar is confusing to me.","msgtype":"m.text"},"ts":1680556215328,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WFiXWc_w5mWtBRAn6eWdv4iUfGRJJov2Lnu-cXiLcVY"},
{"content":{"body":"(and, shitpostily: the opposite of \"new\" is obviously \"wen\", which we spell \"when\".)","msgtype":"m.text"},"ts":1680556221818,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MRPdpOhPH5ULJf7kiqTJ8XSCCE1lVzFCOFYvaeCaBac"},
{"content":{"body":"I'm strongly against interpolation patterns, I don't think they're necessary with the right binding syntax, and they will make patterns a mess. ","format":"org.matrix.custom.html","formatted_body":"I'm strongly against interpolation patterns, I don't think they're necessary with the right binding syntax, and they will make patterns a mess.","msgtype":"m.text"},"ts":1680556223222,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$opDXe-ssAD0AloNefyIJ40xJs5ClQB_gBUpSBMuDnRA"},
{"content":{"body":"No, interpolations are necessary. `when String()` is *not* identical to `when ${String}`, for instance - the former imposes an addition `with []` constraint.","format":"org.matrix.custom.html","formatted_body":"No, interpolations are necessary. <code>when String()</code> is <em>not</em> identical to <code>when ${String}</code>, for instance - the former imposes an addition <code>with []</code> constraint.","msgtype":"m.text"},"ts":1680556303016,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8UT7N8PbXo1fRq0plNNFCbft1FiqjV6wZmnY1SYH2Gk"},
{"content":{"body":"Not to mention being able to reference values for value-comparison (without having to rephrase ident patterns, which would break from destructuring).","msgtype":"m.text"},"ts":1680556331902,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$n8t379OzFZmuV9Pf7rL6swa5LXMN9AoEOXoiKdznTxU"},
{"content":{"body":"I disagree that they are necessary. ","format":"org.matrix.custom.html","formatted_body":"I disagree that they are necessary.","msgtype":"m.text"},"ts":1680556381703,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$YnznJXBmjwWxJm4Ep0bALJdE2dgkwzgdZedzi6oVNCk"},
{"content":{"body":"I mean, I just explained why they are. Unless you think it should be *required* that authors handle the return value of a custom matcher, even when they don't need it?","format":"org.matrix.custom.html","formatted_body":"I mean, I just explained why they are. Unless you think it should be <em>required</em> that authors handle the return value of a custom matcher, even when they don't need it?","msgtype":"m.text"},"ts":1680556442949,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WmV72UsmYPdIMLDagjW8VjjT-9puKYThpU5hw1lFUn0"},
{"content":{"body":"Pattern matching doesn't need to solve every problem, it needs to solve a specific problem well. Interpolation means we failed to solve the specific problem. ","format":"org.matrix.custom.html","formatted_body":"Pattern matching doesn't need to solve every problem, it needs to solve a specific problem well. Interpolation means we failed to solve the specific problem.","msgtype":"m.text"},"ts":1680556458114,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$tPofRDdy2Hs6Mx3XyStAYmRyBFc6pxlBrxQvdjhZGog"},
{"content":{"body":"I don't understand that objection.","msgtype":"m.text"},"ts":1680556474234,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$j2jGNv4m3P7oR2bPXbXDPfbvG42AbHj9ARVdsK-2qR8"},
{"content":{"body":"me neither","msgtype":"m.text"},"ts":1680556478268,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1-k0yLJ5XQMeLNlQ0TOHbmJZ0yjGdcEgX25ZHzZ4rZA"},
{"content":{"body":"certainly anything in particular doesn't need to solve every problem, but solving more problems than intended isn't a failure, it's a bonus","msgtype":"m.text"},"ts":1680556492999,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lTQXRs9orREKz7_rDnvBorXz9lGws01ytfEuEHqmHVw"},
{"content":{"body":"I've had a long day. like I said, I will need to circle back to this next week when I'm settled in. ","format":"org.matrix.custom.html","formatted_body":"I've had a long day. like I said, I will need to circle back to this next week when I'm settled in.","msgtype":"m.text"},"ts":1680556518903,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$CvGZTC0fpMoByhvGtf7xLVQTs4hzCdi34wZd979p1JU"},
{"content":{"body":"The gist of what I'm saying is that interpolation makes a very complex syntax infinitely harder to read because you can stuff _anything_ in a pattern. If interpolation is intended to solve a problem, a solution that does not require interpolation will be vastly superior. The only way I would agree to interpolation were for it to be proven it is the only solution to a problem that is worth solving in that design space. I don't think it is. ","format":"org.matrix.custom.html","formatted_body":"The gist of what I'm saying is that interpolation makes a very complex syntax infinitely harder to read because you can stuff <em>anything</em> in a pattern. If interpolation is intended to solve a problem, a solution that does not require interpolation will be vastly superior. The only way I would agree to interpolation were for it to be proven it is the only solution to a problem that is worth solving in that design space. I don't think it is.","msgtype":"m.text"},"ts":1680556746939,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$5RVl2Kj5wk7xxG3hVOygTXvMgCOwbBmCd0GLogk5LO0"},
{"content":{"body":"Even if we move binding patterns to a different syntax, so plain idents can invoke custom matchers, we still need the escape hatch of arbitrary-expressions for *getting* the custom matcher. I'm always super wary of any proposal that suggests we can get by solely with dotted/bracketed ident syntax for referring to things; in practice it always means people having to awkwardly write temp variables somewhere else in their code to store the expression, just so they can provide it via a name later.","format":"org.matrix.custom.html","formatted_body":"Even if we move binding patterns to a different syntax, so plain idents can invoke custom matchers, we still need the escape hatch of arbitrary-expressions for <em>getting</em> the custom matcher. I'm always super wary of any proposal that suggests we can get by solely with dotted/bracketed ident syntax for referring to things; in practice it always means people having to awkwardly write temp variables somewhere else in their code to store the expression, just so they can provide it via a name later.","msgtype":"m.text"},"ts":1680556782560,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cs_6ohLQWN0Md1UF2F50DeTBzv7cS5pekZDyIO5hz8Q"},
{"content":{"body":"No other pattern matching syntax in prior art requires interpolation, to my knowledge. ","format":"org.matrix.custom.html","formatted_body":"No other pattern matching syntax in prior art requires interpolation, to my knowledge.","msgtype":"m.text"},"ts":1680556785279,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$wUVkmrjwKUzXovITxQvwYBbl5uzK6XZyI4R2KgMGXKg"},
{"content":{"body":"Like, `when [a, ${\"foo-\" + a}]` is a perfectly cromulent thing to want.","format":"org.matrix.custom.html","formatted_body":"Like, <code>when [a, ${&quot;foo-&quot; + a}]</code> is a perfectly cromulent thing to want.","msgtype":"m.text"},"ts":1680556810382,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$akmfSwRkbTj-vtbqRGaN_pI-Q5e8sliyq6UstPFKm4U"},
{"content":{"body":"and the `if() pattern similarly allows escaping to arbitrary-expression syntax.","msgtype":"m.text"},"ts":1680556823864,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$icFk5g2Xd2b4FTX-CbZ44s7fSFueyZcyKOFsHtVnYGM"},
{"content":{"body":"> <@tabatkins:matrix.org> Even if we move binding patterns to a different syntax, so plain idents can invoke custom matchers, we still need the escape hatch of arbitrary-expressions for *getting* the custom matcher. I'm always super wary of any proposal that suggests we can get by solely with dotted/bracketed ident syntax for referring to things; in practice it always means people having to awkwardly write temp variables somewhere else in their code to store the expression, just so they can provide it via a name later.\n\nFor something as complex as pattern matching, saving things off to another variable far improves readability. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$cs_6ohLQWN0Md1UF2F50DeTBzv7cS5pekZDyIO5hz8Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />Even if we move binding patterns to a different syntax, so plain idents can invoke custom matchers, we still need the escape hatch of arbitrary-expressions for <em>getting</em> the custom matcher. I'm always super wary of any proposal that suggests we can get by solely with dotted/bracketed ident syntax for referring to things; in practice it always means people having to awkwardly write temp variables somewhere else in their code to store the expression, just so they can provide it via a name later.</blockquote></mx-reply>For something as complex as pattern matching, saving things off to another variable far improves readability.","m.relates_to":{"m.in_reply_to":{"event_id":"$cs_6ohLQWN0Md1UF2F50DeTBzv7cS5pekZDyIO5hz8Q"}},"msgtype":"m.text"},"ts":1680556843237,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$gO8XSYN7sisPKc5b6EyD3Hs7W1CopxD3Vr1UixileSc"},
{"content":{"body":"> <@tabatkins:matrix.org> Like, `when [a, ${\"foo-\" + a}]` is a perfectly cromulent thing to want.\n\nYou can do that with `if`, which is an acceptable escape hatch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$akmfSwRkbTj-vtbqRGaN_pI-Q5e8sliyq6UstPFKm4U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />Like, <code>when [a, ${&quot;foo-&quot; + a}]</code> is a perfectly cromulent thing to want.</blockquote></mx-reply>You can do that with <code>if</code>, which is an acceptable escape hatch","m.relates_to":{"m.in_reply_to":{"event_id":"$akmfSwRkbTj-vtbqRGaN_pI-Q5e8sliyq6UstPFKm4U"}},"msgtype":"m.text"},"ts":1680556894349,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$BWSKy8lWGPGw3_cUGo3_gpfJHtjwVp6b_NqQ3pdSy28"},
{"content":{"body":"In both cases, the arbitrary expression is securely wrapped in some sort of brace construct, so it's clear from a parsing perspective, at least, what the boundaries are between \"pattern syntax\" and \"expression syntax\". And should be reasonably clear to readers as well, modulo people's ability to write arbitrarily bad code.","msgtype":"m.text"},"ts":1680556900334,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HYaiSAciOrIPyW2mykQ7iGnJIiF4d48uc3RA7pVK3ZE"},
{"content":{"body":"nb, it is very much a goal that you be able to use a match construct in expression position, which means other variables simply aren't an option we should be requiring for anything","msgtype":"m.text"},"ts":1680556936680,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Uv5s5QjVvdExszwdNyIcGRGqySo6gKEEdcPKBjCbbCU"},
{"content":{"body":"\"`if()` arbitrary expressions are fine, `${}` arbitrary expressions are overly complex\" isn't a distinction I can understand right now. ","format":"org.matrix.custom.html","formatted_body":"&quot;<code>if()</code> arbitrary expressions are fine, <code>${}</code> arbitrary expressions are overly complex&quot; isn't a distinction I can understand right now.","msgtype":"m.text"},"ts":1680557031431,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7eBm6j-ayzl5RHOQZOVQR4r3D_Gc0JBX81hRS1SPzYc"},
{"content":{"body":"> <@ljharb:matrix.org> nb, it is very much a goal that you be able to use a match construct in expression position, which means other variables simply aren't an option we should be requiring for anything\n\nThis is a complexity bar that is far too high. I'm sure there is no chance I can convince the committee to allow arbitrary expressions in a RegExp, which is the only existing pattern matching syntax in JS. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Uv5s5QjVvdExszwdNyIcGRGqySo6gKEEdcPKBjCbbCU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />nb, it is very much a goal that you be able to use a match construct in expression position, which means other variables simply aren't an option we should be requiring for anything</blockquote></mx-reply>This is a complexity bar that is far too high. I'm sure there is no chance I can convince the committee to allow arbitrary expressions in a RegExp, which is the only existing pattern matching syntax in JS.","m.relates_to":{"m.in_reply_to":{"event_id":"$Uv5s5QjVvdExszwdNyIcGRGqySo6gKEEdcPKBjCbbCU"}},"msgtype":"m.text"},"ts":1680557074672,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$oLtBZpAPf4xwBfscJWLu1WQoW0X6KWp6-mlghDditW8"},
{"content":{"body":"i'm not sure why it would be too high?","msgtype":"m.text"},"ts":1680557098789,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TtuqfS0mua9sNWu9JXuw_JsJPX1GQ2cCVB0SwfcpNg0"},
{"content":{"body":"regexps are drastically different because they're limited to strings","msgtype":"m.text"},"ts":1680557106752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B8vL4ByF1DEVx7UZ89Am4qvyen0PoYNU0h2UBnV8kUM"}
]