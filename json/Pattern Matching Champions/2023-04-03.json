[
{"content":{"body":"reminder i'll be a half hour late","msgtype":"m.text"},"ts":1680534103513,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0O2MaiAvk9Xa5e8i5PKJgy_r_bEshNlyLYxEuGT5cZg"},
{"content":{"body":"kk","msgtype":"m.text"},"ts":1680534187291,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0DzfX8vuvR0ag5eyseaUxmiBbdBVDas_rjCJF2x8c2s"},
{"content":{"body":"I won't be able to attend today due to moving. ","format":"org.matrix.custom.html","formatted_body":"I won't be able to attend today due to moving.","msgtype":"m.text"},"ts":1680534377599,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$M9rdNTfmxvEt6nW9eQeePSmZ93U9Mex3YuzOt7FL-Ik"},
{"content":{"body":"Short notes from today's meeting, we discussed my proposal for matchers-everywhere https://hackmd.io/ubn93HPNT2GCjFwNOPzWCA","msgtype":"m.text"},"ts":1680544585904,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JjSCcGGGX6FBUXY-fyU1n20m-f4aeI7mz6BfctROqp4"},
{"content":{"body":"> Somewhat against the extractor syntax, partially due to Scala experience.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Somewhat against the extractor syntax, partially due to Scala experience.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1680544852925,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WYTaWFZN-GoNtwCCVIEEqyYD5gkq6AsGRvuRUh6ltjU"},
{"content":{"body":"any info of why scala experience is bad?","msgtype":"m.text"},"ts":1680544881171,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$24uFaa0SzwQHpLOLedRN4OjjnsL90AZXwAB8OyOFUQ4"},
{"content":{"body":"ljharb: ^^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: ^^^","msgtype":"m.text"},"ts":1680545714709,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WmdKSwS49oRTLCG2tnDdEHXSUjcRcrwVbq0i-rnZ4go"},
{"content":{"body":"i'll flesh out the notes again. but mainly that scala is a mess of syntax that means tons of things in different contexts, and it's very unintuitive to me that you can kind of use constructors as extractors","msgtype":"m.text"},"ts":1680550952021,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fFZcZcgfiGZKsqQXZhLeh6Z31YRZH6CkfR6HqMJtMI8"},
{"content":{"body":"either way it's more that `foo()` syntax imo shouldn't mean anything except invocation, and `foo{}` is just weird","format":"org.matrix.custom.html","formatted_body":"either way it's more that <code>foo()</code> syntax imo shouldn't mean anything except invocation, and <code>foo{}</code> is just weird","msgtype":"m.text"},"ts":1680551181848,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ve0z--P-rRIyAjqG_9wyhxw-xZDTF39vrUmehqLxe5I"},
{"content":{"body":"(Could I get permissions for those notes?)","msgtype":"m.text"},"ts":1680552525954,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$23ldIdWszIwW_0MN1wdljnv0QZW4lYULcZZszEufXuk"},
{"content":{"body":"Anyone with the link has permission, you just need to be signed into hackmd","msgtype":"m.text"},"ts":1680552979082,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IcPaQxGopvSC6j-iTEmQAQ9arUbXEk_dqHt0a2PIm5g"},
{"content":{"body":"re: scala/extractors; I find this syntax fairly appealing here - the constructor/extractor syntax similarity is identical to array/object literals/destructuring.","msgtype":"m.text"},"ts":1680553059514,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PJ2xwcqvFsxj3Mq_5iEiALdDV0KVl_XJZGz66MeOos0"},
{"content":{"body":"So just like how `let x = [1, {foo: 2}]` constructs some object, and `let [a, {foo: b}] = obj;` deconstructs them, `let x = Foo(1, 2)` constructs an object and `let when Foo(bar, baz) = obj;` deconstructs it.","format":"org.matrix.custom.html","formatted_body":"So just like how <code>let x = [1, {foo: 2}]</code> constructs some object, and <code>let [a, {foo: b}] = obj;</code> deconstructs them, <code>let x = Foo(1, 2)</code> constructs an object and <code>let when Foo(bar, baz) = obj;</code> deconstructs it.","msgtype":"m.text"},"ts":1680553145758,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9M4hWIIpXSWRF1GTl6uJoIbyXbEY8dzHUexjvskOho4"},
{"content":{"body":"Also the syntax being more compact *is* pretty compelling for stacked cases: `when Foo(a, Baz(b, c))` vs `when ${Foo} with [a, ${Baz} with [b, c]]`","format":"org.matrix.custom.html","formatted_body":"Also the syntax being more compact <em>is</em> pretty compelling for stacked cases: <code>when Foo(a, Baz(b, c))</code> vs <code>when ${Foo} with [a, ${Baz} with [b, c]]</code>","msgtype":"m.text"},"ts":1680553418070,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SgCiQqv4CorDpEL1A7qHOxztDAmVJnsOeVe9FsPPACo"},
{"content":{"body":"Back when I was first reading some Scala code I did find the syntax confusing, because it wasn't clear to me that it *was* basically destructuring, or how it happened, because the unapply methods were created implicitly. (Same with Haskell's similar feature, actually.) But if you have to write them manually in JS I think it's somewhat less of an issue?","format":"org.matrix.custom.html","formatted_body":"Back when I was first reading some Scala code I did find the syntax confusing, because it wasn't clear to me that it <em>was</em> basically destructuring, or how it happened, because the unapply methods were created implicitly. (Same with Haskell's similar feature, actually.) But if you have to write them manually in JS I think it's somewhat less of an issue?","msgtype":"m.text"},"ts":1680554286689,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0mqKboLi8XbxUi-h-wn0HyYX-zThA5P_pYsV7TPjvmk"},
{"content":{"body":"`let x = Foo(1, 2)` doesn't construct an object tho, necessarily. only `new Foo(1, 2)` does.","format":"org.matrix.custom.html","formatted_body":"<code>let x = Foo(1, 2)</code> doesn't construct an object tho, necessarily. only <code>new Foo(1, 2)</code> does.","msgtype":"m.text"},"ts":1680555904104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gXtGmFXXjEsrBqJEMGTUnxPuxE9qHPt14WlHrFHgjcM"},
{"content":{"body":"You know what I mean :p","msgtype":"m.text"},"ts":1680555934726,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qRS4o1sRB-PJm0dAer8ogUWnqwyCTAkUwDzJ26xal3Y"},
{"content":{"body":"(worst part of JS syntax imo)","msgtype":"m.text"},"ts":1680555939639,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9vsxkfJrh6yFZXzxXcDq8OkMr23a1RhZ6pDzPl1oiNU"},
{"content":{"body":"i do, but i still think that's a big issue","msgtype":"m.text"},"ts":1680555956110,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XCWjn3XR34QEGfR6EUqGDMgcutPXViZG3nb4zINELfs"},
{"content":{"body":"function call syntax isn't exclusively, or even mostly, used for constructing objects","msgtype":"m.text"},"ts":1680555970251,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Sne_FFk1X56eEvsL4LlJXS9EeWQOvpyEu-OChL1D8ao"},
{"content":{"body":"Sure, but it *is* used for constructing objects.","format":"org.matrix.custom.html","formatted_body":"Sure, but it <em>is</em> used for constructing objects.","msgtype":"m.text"},"ts":1680555994620,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JMEVMNeXoJUwItHNbv6-kNfLuKlaZIPgHId83vtY_LU"},
{"content":{"body":"sometimes, sure.","msgtype":"m.text"},"ts":1680556000850,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v5xujRQzSqQjIrpKk-uv2XKIaTI7gWyv9KMP7E6CBOU"},
{"content":{"body":"but only with `new` is that always the case","format":"org.matrix.custom.html","formatted_body":"but only with <code>new</code> is that always the case","msgtype":"m.text"},"ts":1680556010062,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1l9O_e2WK9cmBOxfM9jW0gMVy5U0d9sdHReX5_pd57M"},
{"content":{"body":"Extractors also mirror Rust ADT enum destructuring. ","format":"org.matrix.custom.html","formatted_body":"Extractors also mirror Rust ADT enum destructuring.","msgtype":"m.text"},"ts":1680556050772,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$901v6SdjMSYMooSio6jv2l11UIddA3IyV1X7Ejm_388"},
{"content":{"body":"I'm not sure what your objection here is. It parallels object creation, but also just function-calling in general. If you have *any* function that takes two arguments and returns something, you can give it a custom matcher that takes the something and pulls it apart into two arguments.","format":"org.matrix.custom.html","formatted_body":"I'm not sure what your objection here is. It parallels object creation, but also just function-calling in general. If you have <em>any</em> function that takes two arguments and returns something, you can give it a custom matcher that takes the something and pulls it apart into two arguments.","msgtype":"m.text"},"ts":1680556074884,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3k4DMeJBnIo9qYA61qWWdXOB2gMyJKHnHSe12Xze5G8"},
{"content":{"body":"This is a conversation I'd love to spend more time discussing, but thst will have to wait until I'm done with my move ðŸ˜•","msgtype":"m.text"},"ts":1680556102881,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$SQGW7bx5UopytkMgPr3GUzqaEoEW0r74ejFVJ4wiuww"},
{"content":{"body":"* This is a conversation I'd love to spend more time discussing, but that will have to wait until I'm done with my move ðŸ˜•","m.new_content":{"body":"This is a conversation I'd love to spend more time discussing, but that will have to wait until I'm done with my move ðŸ˜•","msgtype":"m.text"},"m.relates_to":{"event_id":"$SQGW7bx5UopytkMgPr3GUzqaEoEW0r74ejFVJ4wiuww","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1680556114449,"senderName":"rbuckton-pto","senderId":"@rbuckton:matrix.org","id":"$JgJCwAwfdsh7LqHYCxCuSGXMrkxCwdOGtZGmRBM9w8g"},
{"content":{"body":"i don't yet have any objection to the need for extractors, but i do object to the two forms of syntax tab showed","msgtype":"m.text"},"ts":1680556116081,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6RAzc0W3z0LRMF5UiS1ReoMlgZktoRf7a4FK0wnpVk4"},
{"content":{"body":"object creation is done with `{ }`. *instance* creation is done with `new`","format":"org.matrix.custom.html","formatted_body":"object creation is done with <code>{ }</code>. <em>instance</em> creation is done with <code>new</code>","msgtype":"m.text"},"ts":1680556129943,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dtbgg6O-_C_btUK1rdyjeFCqISUIi6l8_s3EWCEGb_M"},
{"content":{"body":"Without this syntax, we already *have* extractors (via interpolation patterns). The syntax is the point.","format":"org.matrix.custom.html","formatted_body":"Without this syntax, we already <em>have</em> extractors (via interpolation patterns). The syntax is the point.","msgtype":"m.text"},"ts":1680556144513,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk"},
{"content":{"body":"and destructuring of objects is also done with `{ }`. i can't think of anything that would be the inverse of `new` tho","format":"org.matrix.custom.html","formatted_body":"and destructuring of objects is also done with <code>{ }</code>. i can't think of anything that would be the inverse of <code>new</code> tho","msgtype":"m.text"},"ts":1680556156008,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Oy5ihST_L-0jlzwgMWrQCk_HkLRbmeBdGzzw5Mh7nJE"},
{"content":{"body":"> <@tabatkins:matrix.org> Without this syntax, we already *have* extractors (via interpolation patterns). The syntax is the point.\n\ni'm not sure what you mean?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Without this syntax, we already <em>have</em> extractors (via interpolation patterns). The syntax is the point.</blockquote></mx-reply>i'm not sure what you mean?","m.relates_to":{"m.in_reply_to":{"event_id":"$XYEtY2vo_vxA5_jxA_wDjIerCP9ehSIsgdo-gsUTspk"}},"msgtype":"m.text"},"ts":1680556160878,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tCnutGjYs-utzdA8bMO31PKX7BwB9Ck170ZZfydb15s"},
{"content":{"body":"`when Foo(a, b)` is literally identical to `when ${Foo} with [a, b]`. It's *purely* a syntax sugar.","format":"org.matrix.custom.html","formatted_body":"<code>when Foo(a, b)</code> is literally identical to <code>when ${Foo} with [a, b]</code>. It's <em>purely</em> a syntax sugar.","msgtype":"m.text"},"ts":1680556183365,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_B5duMTm8Ybq5ArA0QBZHfpyz9mkFgYVEJDwV93Vbys"}
]