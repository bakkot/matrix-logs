[
{"content":{"body":"Jack Works: I also don't think we actually need the note about `document.all` there in InvokeCustomMatcher; it's a bizarre legacy piece of the web platform that produces weird behavior *everywhere*. We're not particularly special here. ^_^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I also don't think we actually need the note about <code>document.all</code> there in InvokeCustomMatcher; it's a bizarre legacy piece of the web platform that produces weird behavior <em>everywhere</em>. We're not particularly special here. ^_^","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"msgtype":"m.text"},"ts":1706227544370,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RV1sRxQLNk1BAB2vpLFkSh8Kigxsj8PgMOB0RRFj9hs"},
{"content":{"body":"(Tho also, in that example the second `if()` will only match if you write `null is f(let html, ...)`, since there will be more elements in the iterator than just the html element.)","format":"org.matrix.custom.html","formatted_body":"(Tho also, in that example the second <code>if()</code> will only match if you write <code>null is f(let html, ...)</code>, since there will be more elements in the iterator than just the html element.)","m.mentions":{},"msgtype":"m.text"},"ts":1706227609125,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lZQrEhct3VpvPDMSZu1p5-3V6feRHNT3xGLk22ipGcg"},
{"content":{"body":"> <@rbuckton:matrix.org> What is the purpose of `receiver` in a custom matcher? \n\nthis is required to make dotted custom matchers working correctly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$TL581_dIUR49BuPkZmm5u1vyKPI0OO7JBRYNBOArD5Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />What is the purpose of <code>receiver</code> in a custom matcher?</blockquote></mx-reply>this is required to make dotted custom matchers working correctly.","m.relates_to":{"m.in_reply_to":{"event_id":"$TL581_dIUR49BuPkZmm5u1vyKPI0OO7JBRYNBOArD5Q"}},"msgtype":"m.text"},"ts":1706234837039,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo"},
{"content":{"body":"for code `when A.B(let c):`, we do `let receiver = A.B; let matcher = Get(receiver, Symbol.customMatcher)`, then `Call(matcher, receiver, args)`. If we don't have receiver, all custom matchers will be called without `this`.","format":"org.matrix.custom.html","formatted_body":"for code <code>when A.B(let c):</code>, we do <code>let receiver = A.B; let matcher = Get(receiver, Symbol.customMatcher)</code>, then <code>Call(matcher, receiver, args)</code>. If we don't have receiver, all custom matchers will be called without <code>this</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1706234982572,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oUvBktev4zQ-8BPgzC6hOuxVVur5xLVC9Vw5dAbNGwI"},
{"content":{"body":"> <@jackworks:matrix.org> this is required to make dotted custom matchers working correctly.\n\nI'm not sure I agree that's correct. If you equate this to `Symbol.iterator`, we don't forward a receiver if you do\n```js\nfor (const x of foo.bar) {\n}\n```\nso why would we do that here? Carrying over the receiver isn't something you'll normally need, and if you need to preserve the receiver, you would make `[Symbol.customMatcher]` into a getter that returns a bound function.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>this is required to make dotted custom matchers working correctly.</blockquote></mx-reply><p>I'm not sure I agree that's correct. If you equate this to <code>Symbol.iterator</code>, we don't forward a receiver if you do</p>\n<pre><code class=\"language-js\">for (const x of foo.bar) {\n}\n</code></pre>\n<p>so why would we do that here? Carrying over the receiver isn't something you'll normally need, and if you need to preserve the receiver, you would make <code>[Symbol.customMatcher]</code> into a getter that returns a bound function.</p>\n","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo"}},"msgtype":"m.text"},"ts":1706235008136,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vUUSA0wxK4AaOu1C0wn91Gjs28hR5S0WGDPbe4y9QW4"},
{"content":{"body":"I wouldn't expect `when A.B(let c)` to preserve the receiver unless maybe `A.B` is just a plain function.","format":"org.matrix.custom.html","formatted_body":"I wouldn't expect <code>when A.B(let c)</code> to preserve the receiver unless maybe <code>A.B</code> is just a plain function.","m.mentions":{},"msgtype":"m.text"},"ts":1706235059372,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TYshAuWYwBpzOJItlXlHJSFOlrKgBYoyW1f51_MIQgE"},
{"content":{"body":"this is not in the initial spec, it was found as a bug to fix","m.mentions":{},"msgtype":"m.text"},"ts":1706235066476,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oQYgQXY5RqJneI67c0a45guKivenpPadC1WL2V_MNIE"},
{"content":{"body":"if you don't like it, we can discuss to remove receiver","m.mentions":{},"msgtype":"m.text"},"ts":1706235076327,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$473ykbbunJRHyXfsw1bVhwktPtSttalD8yR3lvkwPAw"},
{"content":{"body":"I'm not certain I agree its a bug?","m.mentions":{},"msgtype":"m.text"},"ts":1706235082168,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YI7eVUCQxWiUtP2Ei9e6sJ5QK0IFCavohxrJxKMBNMQ"},
{"content":{"body":"You normally only pass around a receiver if you're working with proxies/reflect. I don't think I've seen that anywhere else in the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1706235137103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PT3MFgRQmXsUhQxNNG2M7FssZENdCRmsIk-BLuVBeIU"},
{"content":{"body":"That's just the nature of JS. I wouldn't want to do something specific here that would be incompatible with some other proposal like bind-this","m.mentions":{},"msgtype":"m.text"},"ts":1706235187706,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vtQ-rUhlgef625OGNDs8QgoSH-iAcjaxdjwvrQw8F90"},
{"content":{"body":"A one-off fix here could hurt us more down the line","m.mentions":{},"msgtype":"m.text"},"ts":1706235208500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v4kzSVcyoWSQYeESfBdif4G0OFXvpX0By5oY8gh0i08"},
{"content":{"body":"it may be annoying, but changing it is inconsistent with the rest of the language.","m.mentions":{},"msgtype":"m.text"},"ts":1706235266549,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lDz6PUgLjBjhp-4id9e6Q8lCKsVHFflBwIv8p0eK2hM"},
{"content":{"body":"Oh, seeing the notes reminds me the use case. If you want to use a boolean tester like `something.equal` (which means `something.equal(matchTopic)`), it will be impossible if receiver is not passed, but we can discuss it on the design meeting anyway.","format":"org.matrix.custom.html","formatted_body":"Oh, seeing the notes reminds me the use case. If you want to use a boolean tester like <code>something.equal</code> (which means <code>something.equal(matchTopic)</code>), it will be impossible if receiver is not passed, but we can discuss it on the design meeting anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1706235279393,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RyiQF-RrvbdwfSYLp9j0SOxBwZV8esjJUh7NOwqv-Sg"}
]