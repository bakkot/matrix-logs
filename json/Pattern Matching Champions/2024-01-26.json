[
{"content":{"body":"Jack Works: I also don't think we actually need the note about `document.all` there in InvokeCustomMatcher; it's a bizarre legacy piece of the web platform that produces weird behavior *everywhere*. We're not particularly special here. ^_^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I also don't think we actually need the note about <code>document.all</code> there in InvokeCustomMatcher; it's a bizarre legacy piece of the web platform that produces weird behavior <em>everywhere</em>. We're not particularly special here. ^_^","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"msgtype":"m.text"},"ts":1706227544370,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RV1sRxQLNk1BAB2vpLFkSh8Kigxsj8PgMOB0RRFj9hs"},
{"content":{"body":"(Tho also, in that example the second `if()` will only match if you write `null is f(let html, ...)`, since there will be more elements in the iterator than just the html element.)","format":"org.matrix.custom.html","formatted_body":"(Tho also, in that example the second <code>if()</code> will only match if you write <code>null is f(let html, ...)</code>, since there will be more elements in the iterator than just the html element.)","m.mentions":{},"msgtype":"m.text"},"ts":1706227609125,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lZQrEhct3VpvPDMSZu1p5-3V6feRHNT3xGLk22ipGcg"},
{"content":{"body":"> <@rbuckton:matrix.org> What is the purpose of `receiver` in a custom matcher? \n\nthis is required to make dotted custom matchers working correctly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$TL581_dIUR49BuPkZmm5u1vyKPI0OO7JBRYNBOArD5Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />What is the purpose of <code>receiver</code> in a custom matcher?</blockquote></mx-reply>this is required to make dotted custom matchers working correctly.","m.relates_to":{"m.in_reply_to":{"event_id":"$TL581_dIUR49BuPkZmm5u1vyKPI0OO7JBRYNBOArD5Q"}},"msgtype":"m.text"},"ts":1706234837039,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo"},
{"content":{"body":"for code `when A.B(let c):`, we do `let receiver = A.B; let matcher = Get(receiver, Symbol.customMatcher)`, then `Call(matcher, receiver, args)`. If we don't have receiver, all custom matchers will be called without `this`.","format":"org.matrix.custom.html","formatted_body":"for code <code>when A.B(let c):</code>, we do <code>let receiver = A.B; let matcher = Get(receiver, Symbol.customMatcher)</code>, then <code>Call(matcher, receiver, args)</code>. If we don't have receiver, all custom matchers will be called without <code>this</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1706234982572,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oUvBktev4zQ-8BPgzC6hOuxVVur5xLVC9Vw5dAbNGwI"},
{"content":{"body":"> <@jackworks:matrix.org> this is required to make dotted custom matchers working correctly.\n\nI'm not sure I agree that's correct. If you equate this to `Symbol.iterator`, we don't forward a receiver if you do\n```js\nfor (const x of foo.bar) {\n}\n```\nso why would we do that here? Carrying over the receiver isn't something you'll normally need, and if you need to preserve the receiver, you would make `[Symbol.customMatcher]` into a getter that returns a bound function.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>this is required to make dotted custom matchers working correctly.</blockquote></mx-reply><p>I'm not sure I agree that's correct. If you equate this to <code>Symbol.iterator</code>, we don't forward a receiver if you do</p>\n<pre><code class=\"language-js\">for (const x of foo.bar) {\n}\n</code></pre>\n<p>so why would we do that here? Carrying over the receiver isn't something you'll normally need, and if you need to preserve the receiver, you would make <code>[Symbol.customMatcher]</code> into a getter that returns a bound function.</p>\n","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w9yieBPPJ0Kjg65xe9MKMYpnPOnUqDWbNsTGgXcQvXo"}},"msgtype":"m.text"},"ts":1706235008136,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vUUSA0wxK4AaOu1C0wn91Gjs28hR5S0WGDPbe4y9QW4"},
{"content":{"body":"I wouldn't expect `when A.B(let c)` to preserve the receiver unless maybe `A.B` is just a plain function.","format":"org.matrix.custom.html","formatted_body":"I wouldn't expect <code>when A.B(let c)</code> to preserve the receiver unless maybe <code>A.B</code> is just a plain function.","m.mentions":{},"msgtype":"m.text"},"ts":1706235059372,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TYshAuWYwBpzOJItlXlHJSFOlrKgBYoyW1f51_MIQgE"},
{"content":{"body":"this is not in the initial spec, it was found as a bug to fix","m.mentions":{},"msgtype":"m.text"},"ts":1706235066476,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oQYgQXY5RqJneI67c0a45guKivenpPadC1WL2V_MNIE"},
{"content":{"body":"if you don't like it, we can discuss to remove receiver","m.mentions":{},"msgtype":"m.text"},"ts":1706235076327,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$473ykbbunJRHyXfsw1bVhwktPtSttalD8yR3lvkwPAw"},
{"content":{"body":"I'm not certain I agree its a bug?","m.mentions":{},"msgtype":"m.text"},"ts":1706235082168,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YI7eVUCQxWiUtP2Ei9e6sJ5QK0IFCavohxrJxKMBNMQ"},
{"content":{"body":"You normally only pass around a receiver if you're working with proxies/reflect. I don't think I've seen that anywhere else in the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1706235137103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PT3MFgRQmXsUhQxNNG2M7FssZENdCRmsIk-BLuVBeIU"},
{"content":{"body":"That's just the nature of JS. I wouldn't want to do something specific here that would be incompatible with some other proposal like bind-this","m.mentions":{},"msgtype":"m.text"},"ts":1706235187706,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vtQ-rUhlgef625OGNDs8QgoSH-iAcjaxdjwvrQw8F90"},
{"content":{"body":"A one-off fix here could hurt us more down the line","m.mentions":{},"msgtype":"m.text"},"ts":1706235208500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v4kzSVcyoWSQYeESfBdif4G0OFXvpX0By5oY8gh0i08"},
{"content":{"body":"it may be annoying, but changing it is inconsistent with the rest of the language.","m.mentions":{},"msgtype":"m.text"},"ts":1706235266549,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lDz6PUgLjBjhp-4id9e6Q8lCKsVHFflBwIv8p0eK2hM"},
{"content":{"body":"Oh, seeing the notes reminds me the use case. If you want to use a boolean tester like `something.equal` (which means `something.equal(matchTopic)`), it will be impossible if receiver is not passed, but we can discuss it on the design meeting anyway.","format":"org.matrix.custom.html","formatted_body":"Oh, seeing the notes reminds me the use case. If you want to use a boolean tester like <code>something.equal</code> (which means <code>something.equal(matchTopic)</code>), it will be impossible if receiver is not passed, but we can discuss it on the design meeting anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1706235279393,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RyiQF-RrvbdwfSYLp9j0SOxBwZV8esjJUh7NOwqv-Sg"},
{"content":{"body":"> <@rbuckton:matrix.org> it may be annoying, but changing it is inconsistent with the rest of the language.\n\nAnd I guess this reflects what function calls do. `a.b(c)` brings `a` as receiver, so extractors do the same.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$lDz6PUgLjBjhp-4id9e6Q8lCKsVHFflBwIv8p0eK2hM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>it may be annoying, but changing it is inconsistent with the rest of the language.</blockquote></mx-reply>And I guess this reflects what function calls do. <code>a.b(c)</code> brings <code>a</code> as receiver, so extractors do the same.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lDz6PUgLjBjhp-4id9e6Q8lCKsVHFflBwIv8p0eK2hM"}},"msgtype":"m.text"},"ts":1706235351547,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$q5usoRyAhaxHgvpV0f-l36vBWc8WQ-ItIu07rbac3j8"},
{"content":{"body":"I can see carrying the receiver as `this` for `something.equal` when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no `this` preservation when you pass it a function and not a `{ handleEvent(evt) {} }` object.","format":"org.matrix.custom.html","formatted_body":"I can see carrying the receiver as <code>this</code> for <code>something.equal</code> when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no <code>this</code> preservation when you pass it a function and not a <code>{ handleEvent(evt) {} }</code> object.","m.mentions":{},"msgtype":"m.text"},"ts":1706235443955,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VRWGOtFAmg_wjP2KgSdfkt3RIaMvlauN90ytLVyf9IM"},
{"content":{"body":"Extractors aren't 100% like functions. They appear to be the inverse of function application, but they're actually more like the inverse of construction, and `new Foo.Bar()` doesn't preserve `Foo` as the receiver.","format":"org.matrix.custom.html","formatted_body":"Extractors aren't 100% like functions. They appear to be the inverse of function application, but they're actually more like the inverse of construction, and <code>new Foo.Bar()</code> doesn't preserve <code>Foo</code> as the receiver.","m.mentions":{},"msgtype":"m.text"},"ts":1706235500210,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Lu9NHUPqs62hCdHWm4cEdrdca9QSapM44-qbf_5MioQ"},
{"content":{"body":"If, for example, we had a bind-this proposal, i.e. `::foo.bar`, then I would say we would use the bound `this` via that syntax, i.e. `when ::obj.equals`. ","format":"org.matrix.custom.html","formatted_body":"If, for example, we had a bind-this proposal, i.e. <code>::foo.bar</code>, then I would say we would use the bound <code>this</code> via that syntax, i.e. <code>when ::obj.equals</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1706235592012,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2SC3EUd2h8Obju1u9DxCk9G-Fpau6dEZQyOwNLtduoA"},
{"content":{"body":"https://github.com/tc39/proposal-call-this hit Stage 1, but hasn't had much movement in awhile. https://github.com/tc39/proposal-bind-operator is sitting at Stage 0.","m.mentions":{},"msgtype":"m.text"},"ts":1706235806301,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JIiNvdmARDA70CQSxdPQDYjD2eLxFsZv6hZKMzsGsG0"},
{"content":{"body":" * I can _maybe_ see carrying the receiver as `this` for `something.equal` when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no `this` preservation when you pass it a function and not a `{ handleEvent(evt) {} }` object.","format":"org.matrix.custom.html","formatted_body":" * I can <em>maybe</em> see carrying the receiver as <code>this</code> for <code>something.equal</code> when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no <code>this</code> preservation when you pass it a function and not a <code>{ handleEvent(evt) {} }</code> object.","m.mentions":{},"m.new_content":{"body":"I can _maybe_ see carrying the receiver as `this` for `something.equal` when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no `this` preservation when you pass it a function and not a `{ handleEvent(evt) {} }` object.","format":"org.matrix.custom.html","formatted_body":"I can <em>maybe</em> see carrying the receiver as <code>this</code> for <code>something.equal</code> when it's just a predicate function and not a custom matcher. The inconsistency is that we chose to have this weird case where we allow either one. Then again, if you equate this to DOM event handlers, there's no <code>this</code> preservation when you pass it a function and not a <code>{ handleEvent(evt) {} }</code> object.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VRWGOtFAmg_wjP2KgSdfkt3RIaMvlauN90ytLVyf9IM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706235837810,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NztwZpFODjRiy402A6smDCiw9_Q5ddOl4L1B7HV-fI8"},
{"content":{"body":"> <@rbuckton:matrix.org> In the slide you point to, I have to add a number of extra conditions around return values to align with `InvokeCustomMatcher` just doing a ToBoolean on the result when the hint is boolean, and I'm not a huge fan of return type inconsistency.\n\nsorry can you rephrase this part? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$3V4K2HX-65smJ8mkc7bT_xwFh9_jSXB3Rx6ZBv0oCSs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />In the slide you point to, I have to add a number of extra conditions around return values to align with <code>InvokeCustomMatcher</code> just doing a ToBoolean on the result when the hint is boolean, and I'm not a huge fan of return type inconsistency.</blockquote></mx-reply>sorry can you rephrase this part?","m.relates_to":{"m.in_reply_to":{"event_id":"$3V4K2HX-65smJ8mkc7bT_xwFh9_jSXB3Rx6ZBv0oCSs"}},"msgtype":"m.text"},"ts":1706235881224,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$EjvjADrmKf7k8pmswFdNmKq0OvsmZm5lyM9pUGKJ9wk"},
{"content":{"body":"> <@jackworks:matrix.org> sorry can you rephrase this part?\n\nIgnore that. A few messages later I realized I was in error.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$EjvjADrmKf7k8pmswFdNmKq0OvsmZm5lyM9pUGKJ9wk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>sorry can you rephrase this part?</blockquote></mx-reply>Ignore that. A few messages later I realized I was in error.","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EjvjADrmKf7k8pmswFdNmKq0OvsmZm5lyM9pUGKJ9wk"}},"msgtype":"m.text"},"ts":1706235907906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ln8wg3TQXA0T2C9mrGps8PdwPO2f78bE9T_tC9vnHBQ"},
{"content":{"body":"I was trying to reconcile `hint === \"boolean\"` with returning a `{matched: false }` that would coerce to `true`, but had missed the part where MatchResult was dropped in favor of just returning an iterable object.","format":"org.matrix.custom.html","formatted_body":"I was trying to reconcile <code>hint === \"boolean\"</code> with returning a <code>{matched: false }</code> that would coerce to <code>true</code>, but had missed the part where MatchResult was dropped in favor of just returning an iterable object.","m.mentions":{},"msgtype":"m.text"},"ts":1706235976270,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2sSo56a_BEitZ7iEsXFU_1NbFbCbwoqmmEiiyRhqjaQ"},
{"content":{"body":"But the `receiver` thing makes me a little more uncomfortable with the decision to support predicates by default. ","format":"org.matrix.custom.html","formatted_body":"But the <code>receiver</code> thing makes me a little more uncomfortable with the decision to support predicates by default.","m.mentions":{},"msgtype":"m.text"},"ts":1706236328911,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PNmzlXq1atMaKShYGeqC04BNr0-5uFyuBtkizEiiuXk"},
{"content":{"body":"`instanceof` fits better with how the actual runtime semantics play out.","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> fits better with how the actual runtime semantics play out.","m.mentions":{},"msgtype":"m.text"},"ts":1706236380000,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UrokHwrKdWGn7dcvxh2zWZKxuiO17Lp-n9dikj5gqRM"},
{"content":{"body":"`obj instanceof x.y` doesn't preserve `x` as a receiver when calling `[Symbol.hasInstance]`, much like how `obj is x.y` doesn't preserve `x` as the receiver when calling `[Symbol.customMatcher]`.","format":"org.matrix.custom.html","formatted_body":"<code>obj instanceof x.y</code> doesn't preserve <code>x</code> as a receiver when calling <code>[Symbol.hasInstance]</code>, much like how <code>obj is x.y</code> doesn't preserve <code>x</code> as the receiver when calling <code>[Symbol.customMatcher]</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1706236449253,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YYBo7HeVWTdLGoNO5f7NLZb_X6XftZrj_JmBrcr72jc"},
{"content":{"body":"> <@tabatkins:matrix.org> Jack Works: I don't understand how InvokeCustomMatcher works. You check for kind==BOOLEAN in step 8, and return the bool-ized result immediately, but then you check for kind==BOOLEAN *again* in step 11.\n\nyes you're right this is a bug. I'm fixing this right now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$MYbZ0DMPYuVinm_f3Od_mt6IIxbOyXAHwZHq95V2tEE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I don't understand how InvokeCustomMatcher works. You check for kind==BOOLEAN in step 8, and return the bool-ized result immediately, but then you check for kind==BOOLEAN <em>again</em> in step 11.</blockquote></mx-reply>yes you're right this is a bug. I'm fixing this right now.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MYbZ0DMPYuVinm_f3Od_mt6IIxbOyXAHwZHq95V2tEE"}},"msgtype":"m.text"},"ts":1706236569588,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kgvyPU26VBZYfud3YEZbdv7B-b1nEc5Oo3wsCSYaVlA"},
{"content":{"body":"To me that argues for having a *different* syntax for predicates: either a `match`-specific disambiguator or just not passing the receiver and adoption some future bind-this syntax to enable that in the future.","format":"org.matrix.custom.html","formatted_body":"To me that argues for having a <em>different</em> syntax for predicates: either a <code>match</code>-specific disambiguator or just not passing the receiver and adoption some future bind-this syntax to enable that in the future.","m.mentions":{},"msgtype":"m.text"},"ts":1706236598377,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rNSTXwDTtWFbZBMKPXyvZCNnHhsE3GZgMeAyGZGjjNA"},
{"content":{"body":" * To me that argues for having a _different_ syntax for predicates: either a `match`-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that in the future.","format":"org.matrix.custom.html","formatted_body":" * To me that argues for having a <em>different</em> syntax for predicates: either a <code>match</code>-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that in the future.","m.mentions":{},"m.new_content":{"body":"To me that argues for having a _different_ syntax for predicates: either a `match`-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that in the future.","format":"org.matrix.custom.html","formatted_body":"To me that argues for having a <em>different</em> syntax for predicates: either a <code>match</code>-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that in the future.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rNSTXwDTtWFbZBMKPXyvZCNnHhsE3GZgMeAyGZGjjNA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706236615696,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$evwQCnvKzFzzf18xZ5J6UsRB5xcoyCVf3g7CVot8PS8"},
{"content":{"body":" * To me that argues for having a _different_ syntax for predicates: either a `match`-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that when it becomes available.","format":"org.matrix.custom.html","formatted_body":" * To me that argues for having a <em>different</em> syntax for predicates: either a <code>match</code>-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that when it becomes available.","m.mentions":{},"m.new_content":{"body":"To me that argues for having a _different_ syntax for predicates: either a `match`-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that when it becomes available.","format":"org.matrix.custom.html","formatted_body":"To me that argues for having a <em>different</em> syntax for predicates: either a <code>match</code>-specific disambiguator or just not passing the receiver and adopting some future bind-this syntax to enable that when it becomes available.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rNSTXwDTtWFbZBMKPXyvZCNnHhsE3GZgMeAyGZGjjNA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706236626482,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mOpTL3WFSpeAAWvIB045-uEFQR93-NPuD9fxxpFIpJI"},
{"content":{"body":"I'll also add a note that `receiver` is not a consensus yet.","format":"org.matrix.custom.html","formatted_body":"I'll also add a note that <code>receiver</code> is not a consensus yet.","m.mentions":{},"msgtype":"m.text"},"ts":1706236635138,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$zW3uooB1CMyl7I3Jv24mrelY8ZwGqtR0KOC1sXuQCRU"}
]