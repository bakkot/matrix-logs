[
{"content":{"body":"hey y'all, I'm feeling ill and also not caught up, going to be out today","msgtype":"m.text"},"ts":1695033370897,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$Wj6EM_ZfWCyDLiCoT9r9yHpRLDQLulxxFvrFDmJB4Cc"},
{"content":{"body":"oh sorry I totally forgot the meeting today","msgtype":"m.text"},"ts":1695052870420,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$KnpTYegsHIAVbquW0V5zqondWDMwF-2Etbe71WlVs0I"},
{"content":{"body":"what has been discussed?","msgtype":"m.text"},"ts":1695052882049,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7Epr9M91bnA4pYVRN22z1nenWZyLnhHpBkfHM3WUWVY"},
{"content":{"body":"Recorded the meeting notes in <https://github.com/tc39/proposal-pattern-matching/issues/298>","format":"org.matrix.custom.html","formatted_body":"Recorded the meeting notes in <a href=\"https://github.com/tc39/proposal-pattern-matching/issues/298\">https://github.com/tc39/proposal-pattern-matching/issues/298</a>","msgtype":"m.text"},"ts":1695055642861,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xPIArWihwFSBbj_bdJCPPPB83PFqt2GyiCrWTfok-PA"},
{"content":{"body":"(auto-closed the issue just to keep things less cluttered; I'll make a label for it)","msgtype":"m.text"},"ts":1695055661302,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7cYRCkN_0xHKvC1uO7leezTTfN78liXU7Bl3Tvjt8jc"},
{"content":{"body":"I'm trying to spin up on the binding stuff -- both in the PR and from the notes; it's not clear to me what's the current decision and what's open still. \n\nIn the PR, it says for combinators (or for example): \" Or patterns introduce all the bindings from the successful sub-pattern. They also introduce all non-conflicting bindings from their unsuccessful or skipped sub-patterns (that is, any that don't have the same name as a binding from the successful pattern), but bound to `undefined`.\" \n\nSo for a match example: \n\n```\nmatch (x) { \n\twhen (Number and let a) or (String and let b) or (RegExp and let c) { \n\t\t// if x is number, then only binding a exists and so \n\t\t// - access to b issues ReferenceError\n\t\t// - access to c issues ReferenceError\n\t\t// if x is a string, then a is undefined, access to c issues a ReferenceError and b is the string.\n\t\t// if x is a RegExp, then c is that regexp, a and b are undefined?  \n\t}\n}\n```\n\nAm I reading this right?\n","format":"org.matrix.custom.html","formatted_body":"<p>I'm trying to spin up on the binding stuff -- both in the PR and from the notes; it's not clear to me what's the current decision and what's open still.</p>\n<p>In the PR, it says for combinators (or for example): \" Or patterns introduce all the bindings from the successful sub-pattern. They also introduce all non-conflicting bindings from their unsuccessful or skipped sub-patterns (that is, any that don't have the same name as a binding from the successful pattern), but bound to <code>undefined</code>.\"</p>\n<p>So for a match example:</p>\n<pre><code>match (x) { \n\twhen (Number and let a) or (String and let b) or (RegExp and let c) { \n\t\t// if x is number, then only binding a exists and so \n\t\t// - access to b issues ReferenceError\n\t\t// - access to c issues ReferenceError\n\t\t// if x is a string, then a is undefined, access to c issues a ReferenceError and b is the string.\n\t\t// if x is a RegExp, then c is that regexp, a and b are undefined?  \n\t}\n}\n</code></pre>\n<p>Am I reading this right?</p>\n","msgtype":"m.text"},"ts":1695055838279,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$dma6ZJZkerhB9Addb3GNCXNPqXo_yf8Lw2lybabEn_g"},
{"content":{"body":"I think we're gonna change the \"undefined\" thing currently written in the draft to be TDZ-poisoned, for consistency.","msgtype":"m.text"},"ts":1695056015556,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iTyfZWIOHrm2Hs0F-P4HkQvyWaDS2IrK9wePVq014_8"},
{"content":{"body":"But otherwise yes, all correct.","msgtype":"m.text"},"ts":1695056020117,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Y6FlHkKEqhEEa0LVLTjXHye67f0z29edXxGCXbPrPLs"},
{"content":{"body":"(But I'm open to opinions on this.)","msgtype":"m.text"},"ts":1695056031000,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ChAZsxjShIqgHFP7PlUfEPADIzwVvwBZMDreM2NkucM"},
{"content":{"body":"I think we need to be consistent in this regard for all skipped things, tho.","msgtype":"m.text"},"ts":1695056053591,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YJP2xVzMrlusrbNBxvozu8623x5TvZBpOqCPNBST_F4"},
{"content":{"body":"Yeah -- I'm trying to evaluate how this can get implemented. Did a conclusion happen about `is` introducing bindings in that conversation","format":"org.matrix.custom.html","formatted_body":"Yeah -- I'm trying to evaluate how this can get implemented. Did a conclusion happen about <code>is</code> introducing bindings in that conversation","msgtype":"m.text"},"ts":1695056131386,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$6WKYQER-xG1hiZwzlf6u7CDFBuacFaKAjO6QxNt84FE"},
{"content":{"body":"ie, in the middle of block, if you have `y is Number and let z`, if the match doesn't happen, z is still defined but just TDZ uninit?","format":"org.matrix.custom.html","formatted_body":"ie, in the middle of block, if you have <code>y is Number and let z</code>, if the match doesn't happen, z is still defined but just TDZ uninit?","msgtype":"m.text"},"ts":1695056173203,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$nj5hm5TDoUYibM_kgfi8swrv3XJMGQy6rABk-Yl3VbU"},
{"content":{"body":"Yes, that's our current tentative conclusion; from the notes, me and Ron think that's a necessary consequence.","msgtype":"m.text"},"ts":1695056214543,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HqlSxcskEuMbibWRaplHh_WIZkGznP9wdIPmRRn2EyU"},
{"content":{"body":"Ok. I think this works so long as bindings aren't introduced out of thin air and we can always form a nesting that makes sense to do code generation within","msgtype":"m.text"},"ts":1695056376990,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$vt1PfvwjADYB_EBmOe66FnOk7FGS9RD5Te8A-tXwWc0"},
{"content":{"body":"Actually, it may be that I still have an issue for my original case (may be better if a b and c are always defined and tdz poisoned, but have meeting and need to task switch now, so will need to return to this","msgtype":"m.text"},"ts":1695056452931,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$mKlRxynOCAIvpnF6er2GUlwJ7J4I8dgIoHW3MvbzuH4"},
{"content":{"body":"(concern being it's hard for the same code to execute in an environment where something can be {Defined/Undefined/TDZ} -- because we have to handle this for `with` it can be done, but everything takes slow paths then) ","format":"org.matrix.custom.html","formatted_body":"(concern being it's hard for the same code to execute in an environment where something can be {Defined/Undefined/TDZ} -- because we have to handle this for <code>with</code> it can be done, but everything takes slow paths then)","msgtype":"m.text"},"ts":1695056559784,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$giuIqT_qY7vHZEIj0IUTnWC8JQ8MHYdpEOL98MBkdwc"},
{"content":{"body":"(feel free to respond async; i'm about to go jump on my bike to head to the office anyway)","msgtype":"m.text"},"ts":1695056713769,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hRZhLaDWwBs5yG8WrIVKnt_-60ko94SqAu9Dt3CjPI8"},
{"content":{"body":"So it sounds like you want the bindings to always be \"defined\" but are okay if they have *either* a value or an uninit - is this right? If so, then I strongly agree, and I believe the whole champion group does. Avoiding the mistakes of `with` is definitely good, and we'd likely be willing to compromise if necessary to ensure that.","format":"org.matrix.custom.html","formatted_body":"So it sounds like you want the bindings to always be \"defined\" but are okay if they have <em>either</em> a value or an uninit - is this right? If so, then I strongly agree, and I believe the whole champion group does. Avoiding the mistakes of <code>with</code> is definitely good, and we'd likely be willing to compromise if necessary to ensure that.","msgtype":"m.text"},"ts":1695056828878,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$UNGp32Q0EePx6p_KeoQM2ncmG7wRVMTxXehL7I88if4"},
{"content":{"body":"Or is it that you're fine with \"has a value\" vs \"undefined\", but not mixing \"has a value\" with \"uninit\"?","msgtype":"m.text"},"ts":1695056885479,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$n0qIJtCbiZV28lB9OkaukpBUufrDEBtrqFgqgJxiXkc"},
{"content":{"body":"> Jordan points out we could ban binding patterns in patterns used in plain expression statements.\n\nNot really if we want `const firstEqSecond = array is [let x, x]` work.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Jordan points out we could ban binding patterns in patterns used in plain expression statements.</p>\n</blockquote>\n<p>Not really if we want <code>const firstEqSecond = array is [let x, x]</code> work.</p>\n","msgtype":"m.text"},"ts":1695057613075,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-KN9j5ulWipUUkZxh3inaB7bT2nokceDGchSrmu5tP8"},
{"content":{"body":"He meant just disallowing `array is [let x, x];` all by itself.","format":"org.matrix.custom.html","formatted_body":"He meant just disallowing <code>array is [let x, x];</code> all by itself.","msgtype":"m.text"},"ts":1695057693814,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lYU5mQIgTfbGUwVKJU6H162gUV2A28Gkum7EdGxFzaQ"},
{"content":{"body":"> <@tabatkins:matrix.org> I think we're gonna change the \"undefined\" thing currently written in the draft to be TDZ-poisoned, for consistency.\n\nTDZ-poisoned makes developers hard to find out which branch is hit (they'll need to use try-catch). Also I see engines start to hate TDZ right now","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$iTyfZWIOHrm2Hs0F-P4HkQvyWaDS2IrK9wePVq014_8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I think we&#39;re gonna change the &quot;undefined&quot; thing currently written in the draft to be TDZ-poisoned, for consistency.</blockquote></mx-reply>TDZ-poisoned makes developers hard to find out which branch is hit (they'll need to use try-catch). Also I see engines start to hate TDZ right now","m.relates_to":{"m.in_reply_to":{"event_id":"$iTyfZWIOHrm2Hs0F-P4HkQvyWaDS2IrK9wePVq014_8"}},"msgtype":"m.text"},"ts":1695057868380,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$t-LuOGY5Y92ISUWN6nNDfQZsYEVV-XfK0kS4cfHiTec"}
]