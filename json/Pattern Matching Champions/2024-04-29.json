[
{"content":{"body":"Are we meeting today? I still haven't had time to read over all the discussion that happened at/around plenary ","msgtype":"m.text"},"ts":1714402302607,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8oTfKhwxVb4tF-tUVyHIL4wRCJC5Rbc4nMLP3P3Q5Ts"},
{"content":{"body":"I think the big thing to discuss is whether/how to pair down the proposal to an MVP and a series of follow-on proposals to make it more palatable to the committee.","m.mentions":{},"msgtype":"m.text"},"ts":1714402377723,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x86eCoyVocm6yplysQg7QsDxSzFu7xWVPZAaqEOeW2w"},
{"content":{"body":"Oh, I could definitely use an update on the details if what pushback we received","msgtype":"m.text"},"ts":1714402540288,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5oRrnkObzC_AjYa7pyX1S8Ls8MXJ2b__CtbzM496eys"},
{"content":{"body":"* Ok, I could definitely use an update on the details if what pushback we received","m.new_content":{"body":"Ok, I could definitely use an update on the details if what pushback we received","msgtype":"m.text"},"m.relates_to":{"event_id":"$5oRrnkObzC_AjYa7pyX1S8Ls8MXJ2b__CtbzM496eys","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714402585401,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Y1k2DwFcOnwkjkzUTqBS0vIrhZPhVJvBj6JBgO2Urgc"},
{"content":{"body":"IIRC, we didn't present last plenary, so most of the feedback came from comments in this channel following the extractors proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1714402646968,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k3Bi-xTEneucnVdiOZRgA3MgGnREHCMoHrRHmyYmf9o"},
{"content":{"body":"Yeah, which I missed and don't want to scroll back to if I don't have to ðŸ˜ƒ","msgtype":"m.text"},"ts":1714402677938,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SDnH3rR77qk_wTZ1FTYOgASBLSoJgZC5PkJ0yOeiMqw"},
{"content":{"body":"I had some high stress spec work going on for a week or so","msgtype":"m.text"},"ts":1714402695518,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oUdzed4msPxoaGa-wzB64k-pDl6bWWH7WKA-JNAuxEA"},
{"content":{"body":"I've joined the call if you want to discuss. The comments aren't too far back in the history","m.mentions":{},"msgtype":"m.text"},"ts":1714402865536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fPumPPIhk0ygPluFaUtVQfr7OSqMIHhPnvUXLi2KVns"},
{"content":{"body":"Yup joining now, had to negotiate who was doing what in the home office","msgtype":"m.text"},"ts":1714402892481,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$n8mJxTnRKUs1buBhC_hGuh4BJ5FKbFE4PFiPrNY58GQ"},
{"content":{"body":"Omfg I hate zoom so much","msgtype":"m.text"},"ts":1714402928252,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vbRQqorIsjRtwQXLM2YVqxJ2Uy4_yqMyPJ1nkmLZQQY"},
{"content":{"body":"Iâ€™m running a bit late but will be there within the next 10","msgtype":"m.text"},"ts":1714403038504,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bHh-AZ23MhQ9Bt73xoq0y4PYXL415MbKcbTEFpXdJlY"},
{"content":{"body":"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs?via=matrix.org&via=mozilla.org&via=igalia.com","m.mentions":{},"msgtype":"m.text"},"ts":1714403760149,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7B21LarcZfY1nJycKzEsbqqRPu6KZ7sBZ7U3GKZ6W2I"},
{"content":{"body":"^^^ mvp ideas","m.mentions":{},"msgtype":"m.text"},"ts":1714403780474,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$62ShVPFr1--ChgvryMJioS9gEbMMDgRlGvTAmzZGs2w"},
{"content":{"body":" * I would propose we consider the following as the MVP:\n\n- exhaustive `match (value)`\n- literal constant patterns\n- prefix numeric unary patterns\n- member reference patterns\n- extractors\n- object patterns (`{}`) w/ property patterns (`a: b`/`[x]: b`) and rest (`...`)\n- exhaustive array patterns (`[]`) w/ elision and rest (`...`)\n- `and`/`or`/`not` patterns\n- grouping patterns\n- variable patterns\n- discards (via either `void` or `let _`)\n- `if` patterns\n\nI think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add `in` relational patterns to cover `is not in`. Anything else is follow on.","format":"org.matrix.custom.html","formatted_body":" * <p>I would propose we consider the following as the MVP:</p>\n<ul>\n<li>exhaustive <code>match (value)</code></li>\n<li>literal constant patterns</li>\n<li>prefix numeric unary patterns</li>\n<li>member reference patterns</li>\n<li>extractors</li>\n<li>object patterns (<code>{}</code>) w/ property patterns (<code>a: b</code>/<code>[x]: b</code>) and rest (<code>...</code>)</li>\n<li>exhaustive array patterns (<code>[]</code>) w/ elision and rest (<code>...</code>)</li>\n<li><code>and</code>/<code>or</code>/<code>not</code> patterns</li>\n<li>grouping patterns</li>\n<li>variable patterns</li>\n<li>discards (via either <code>void</code> or <code>let _</code>)</li>\n<li><code>if</code> patterns</li>\n</ul>\n<p>I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add <code>in</code> relational patterns to cover <code>is not in</code>. Anything else is follow on.</p>\n","m.mentions":{},"m.new_content":{"body":"I would propose we consider the following as the MVP:\n\n- exhaustive `match (value)`\n- literal constant patterns\n- prefix numeric unary patterns\n- member reference patterns\n- extractors\n- object patterns (`{}`) w/ property patterns (`a: b`/`[x]: b`) and rest (`...`)\n- exhaustive array patterns (`[]`) w/ elision and rest (`...`)\n- `and`/`or`/`not` patterns\n- grouping patterns\n- variable patterns\n- discards (via either `void` or `let _`)\n- `if` patterns\n\nI think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add `in` relational patterns to cover `is not in`. Anything else is follow on.","format":"org.matrix.custom.html","formatted_body":"<p>I would propose we consider the following as the MVP:</p>\n<ul>\n<li>exhaustive <code>match (value)</code></li>\n<li>literal constant patterns</li>\n<li>prefix numeric unary patterns</li>\n<li>member reference patterns</li>\n<li>extractors</li>\n<li>object patterns (<code>{}</code>) w/ property patterns (<code>a: b</code>/<code>[x]: b</code>) and rest (<code>...</code>)</li>\n<li>exhaustive array patterns (<code>[]</code>) w/ elision and rest (<code>...</code>)</li>\n<li><code>and</code>/<code>or</code>/<code>not</code> patterns</li>\n<li>grouping patterns</li>\n<li>variable patterns</li>\n<li>discards (via either <code>void</code> or <code>let _</code>)</li>\n<li><code>if</code> patterns</li>\n</ul>\n<p>I think that's the minimal set of pattern matching that is necessary for it to be usable. Maybe we also add <code>in</code> relational patterns to cover <code>is not in</code>. Anything else is follow on.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jm0vstZtVQGMLjuluEMkTY0d_6HwfPXnyX5AyKA3nEs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714403828017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8l0a78Ei0W67mcp-40-vioN4Ftgv0fc3ahHkVabiLkY"}
]