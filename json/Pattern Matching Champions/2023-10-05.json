[
{"content":{"body":"> <@tabatkins:matrix.org> And if you think I'm not being kind with that interpretation of your statements, well, same.\n\nSorry, this has indeed been quite difficult. What I was seeking in bringing the conversation here is a \"step away from plenary and have a calm sidebar chat to resolve concerns\" situation but I don't think this chat can actually replicate that; the illusion that it could has probably made this a worse choice than just using a GH issue","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$5bclj_FUw8MSGcDtRGDh8MDu69J10gEnC_rjC12ASIo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>And if you think I&#39;m not being kind with that interpretation of your statements, well, same.</blockquote></mx-reply>Sorry, this has indeed been quite difficult. What I was seeking in bringing the conversation here is a \"step away from plenary and have a calm sidebar chat to resolve concerns\" situation but I don't think this chat can actually replicate that; the illusion that it could has probably made this a worse choice than just using a GH issue","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5bclj_FUw8MSGcDtRGDh8MDu69J10gEnC_rjC12ASIo"}},"msgtype":"m.text"},"ts":1696466583377,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$J0WQzRNzXK-AcZvY2FMyk6BCvQRpZ-MCdh1cjibgAyo"},
{"content":{"body":"> <@ljharb:matrix.org> i'm a bit confused about the implication of \"protecting\"; nothing we do here will break existing JS, it's just about existing developers' expectations and intuition, and the likelihood of bugs in both use and refactors, no?\n\n\"protecting existing JS\" was just my single-phrase summary of the worry I expressed -- of course we're not going to break the web regardless, but \"we now have to worry about interactions of patterns with literally everything else in the language\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$8cJ3hoIVNMpmyHQYGJgZGfQQ9bGtjvLLr0rBBQidguE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i&#39;m a bit confused about the implication of &quot;protecting&quot;; nothing we do here will break existing JS, it&#39;s just about existing developers&#39; expectations and intuition, and the likelihood of bugs in both use and refactors, no?</blockquote></mx-reply>\"protecting existing JS\" was just my single-phrase summary of the worry I expressed -- of course we're not going to break the web regardless, but \"we now have to worry about interactions of patterns with literally everything else in the language\"","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8cJ3hoIVNMpmyHQYGJgZGfQQ9bGtjvLLr0rBBQidguE"}},"msgtype":"m.text"},"ts":1696467712242,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$cFoXHHOTAfe2hJR9a6BxDdYn-dXpzqdqTWtBAVcbdTw"},
{"content":{"body":"> <@rkirsling:matrix.org> combined with combinators and if patterns it's as if we're now not just redoing `switch` but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language\n\nnamely, this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>combined with combinators and if patterns it's as if we're now not just redoing <code>switch</code> but also redoing destructuring, boolean operators, and ternaries; it feels like a bifurcation of the language</blockquote></mx-reply>namely, this","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$GifT3Dn7gXRex_4v0ecTVBkTD7SuXkoLxTPcVxalii0"}},"msgtype":"m.text"},"ts":1696467766775,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$NdqVxpGPfNiMDgbWpXhuOE_VStOT50R9OXbuBrJgsHM"},
{"content":{"body":"Anyway, this started as me feeling that I must be missing some important rationale lurking behind our current approach, but","m.mentions":{},"msgtype":"m.text"},"ts":1696468018063,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VPZN96BInWPyzfusjlHmoRBXNW7ZZVbcc6vwN2mvLCs"},
{"content":{"body":"if, by this point, it's just me having a different opinion, I'm happy to try to formulate a clear statement of that on GH instead","m.mentions":{},"msgtype":"m.text"},"ts":1696468053899,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$x-VXPTOuj1As39woVbq_SL75qybsOs5kDEB1-DMnoQ0"},
{"content":{"body":"> <@rkirsling:matrix.org> \"protecting existing JS\" was just my single-phrase summary of the worry I expressed -- of course we're not going to break the web regardless, but \"we now have to worry about interactions of patterns with literally everything else in the language\"\n\nthat was always going to be the case; even if this proposal didn't include it, there's tons of follow-ons waiting in the wings to add patterns in lots of other places","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$cFoXHHOTAfe2hJR9a6BxDdYn-dXpzqdqTWtBAVcbdTw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>\"protecting existing JS\" was just my single-phrase summary of the worry I expressed -- of course we're not going to break the web regardless, but \"we now have to worry about interactions of patterns with literally everything else in the language\"</blockquote></mx-reply>that was always going to be the case; even if this proposal didn't include it, there's tons of follow-ons waiting in the wings to add patterns in lots of other places","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cFoXHHOTAfe2hJR9a6BxDdYn-dXpzqdqTWtBAVcbdTw"}},"msgtype":"m.text"},"ts":1696470218559,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Lv4tNsTJ1DuodxfM8jXD_P7psBDWon86udGnBeQ00lI"},
{"content":{"body":"fair enough","m.mentions":{},"msgtype":"m.text"},"ts":1696470837993,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Yu_KUGVBBvfvBj_cZi0Q1Av4b2Xai19wqh9wcq0mKNU"},
{"content":{"body":"I mean, even with that possibility, I think \"what's our absolute minimum for day 1 must-haves\" is an important thing to have in mind","m.mentions":{},"msgtype":"m.text"},"ts":1696470936610,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Me7c30lC_A51nWs_ImzZM-R9jTeOJFI0xXXxKb4D53Q"},
{"content":{"body":" * I mean, even with that possibility, I think \"what's our absolute minimum for day 1 must-haves\" is an important thing to have continually in mind","m.mentions":{},"m.new_content":{"body":"I mean, even with that possibility, I think \"what's our absolute minimum for day 1 must-haves\" is an important thing to have continually in mind","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Me7c30lC_A51nWs_ImzZM-R9jTeOJFI0xXXxKb4D53Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696470951286,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$uGfIx2yCeCwIlB9j5q6x3suOJm4hUkNhzC80hCPSgAs"},
{"content":{"body":"but I think that's sort of my point anyway: this is really shocking scope creep for a single proposal, but it wouldn't have to feel that way if it _weren't_ a single proposal","format":"org.matrix.custom.html","formatted_body":"but I think that's sort of my point anyway: this is really shocking scope creep for a single proposal, but it wouldn't have to feel that way if it <em>weren't</em> a single proposal","m.mentions":{},"msgtype":"m.text"},"ts":1696471066430,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$360me6lZTwpNoIijbpijHULiBaxl7gSHbMpfa5t5bvY"},
{"content":{"body":"indeed, I think it's interesting that Python _rejected_ \"and\" and \"not\"\nhttps://peps.python.org/pep-0622/#and-patterns\n\nand deferred \"patterns outside of `match`\" as well as custom matchers\nhttps://peps.python.org/pep-0622/#one-off-syntax-variant","format":"org.matrix.custom.html","formatted_body":"<p>indeed, I think it's interesting that Python <em>rejected</em> \"and\" and \"not\"<br>https://peps.python.org/pep-0622/#and-patterns</p>\n<p>and deferred \"patterns outside of <code>match</code>\" as well as custom matchers<br>https://peps.python.org/pep-0622/#one-off-syntax-variant</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696482692112,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-KAXaxnnMAnNxoqhsOIVTlFcHW7USY1D-3EHWoaHVLQ"},
{"content":{"body":"I find the \"rarely used\" argument for `and` and `not` to be debatable. I've seen them both used quite often in C#","format":"org.matrix.custom.html","formatted_body":"I find the &quot;rarely used&quot; argument for <code>and</code> and <code>not</code> to be debatable. I've seen them both used quite often in C#","msgtype":"m.text"},"ts":1696502929534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c01jqfhqcnPj4ziMsySJzv743d_jciCus71Pqwxtyzw"},
{"content":{"body":"i mean, i would use them a ton in JS. i don't understand why anyone would claim they're rarely used.","m.mentions":{},"msgtype":"m.text"},"ts":1696506864249,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-TMwtCLgxyHWWyQlXguTILpZ0sPJ_WpK-P8OOpbBwPg"},
{"content":{"body":"languages are different, maybe it's true that python doesn't need it","msgtype":"m.text"},"ts":1696507235214,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$EwO1u6tkhQ_ifLHKGkjZQqscMPNC-DDDJbXOI8JAwAc"},
{"content":{"body":"for me, it just feels a foreign concept, since none of the languages I've used pattern matching in have had that","m.mentions":{},"msgtype":"m.text"},"ts":1696510151477,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$iRLEOsB6TDV6stHHb7rou3LzzY2C1eJw8tfW0USLO5w"},
{"content":{"body":"is it just C# and F#?","m.mentions":{},"msgtype":"m.text"},"ts":1696510168407,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$j3UtoGGTMJOTS_03_y3_IO-YWfe_vJ6ICFkiH4Fg4fw"},
{"content":{"body":"the reason it feels \"foreign\" and not like, filling in a gap, is because you wouldn't expect to destructure something into two different shapes at once in an FP language","m.mentions":{},"msgtype":"m.text"},"ts":1696510604003,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yZRvO24omuiPhNRXMXUd_lLcMMpqOY9WXScxUUIuTTY"},
{"content":{"body":"kinda feels like a paradigm break, like passing a function with side effects to map","m.mentions":{},"msgtype":"m.text"},"ts":1696510676114,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$vNVS8iFocFmPyNyLAoBOl1xBYR1PC1rmi6lNet-yfWM"},
{"content":{"body":" * for me, it just feels like a foreign concept, since none of the languages I've used pattern matching in have had that","m.mentions":{},"m.new_content":{"body":"for me, it just feels like a foreign concept, since none of the languages I've used pattern matching in have had that","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iRLEOsB6TDV6stHHb7rou3LzzY2C1eJw8tfW0USLO5w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696510756881,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$S2XoyRnBAo5zpdu0J8b0b4JJKGTXrHup4Rwd7sqIFcw"},
{"content":{"body":"> <@rkirsling:matrix.org> the reason it feels \"foreign\" and not like, filling in a gap, is because you wouldn't expect to destructure something into two different shapes at once in an FP language\n\nyeah they can match based on nonimal type, but we're in JavaScript where objects can have arbitrary fields and no meaningful identity ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$yZRvO24omuiPhNRXMXUd_lLcMMpqOY9WXScxUUIuTTY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br />the reason it feels &quot;foreign&quot; and not like, filling in a gap, is because you wouldn't expect to destructure something into two different shapes at once in an FP language</blockquote></mx-reply>yeah they can match based on nonimal type, but we're in JavaScript where objects can have arbitrary fields and no meaningful identity","m.relates_to":{"m.in_reply_to":{"event_id":"$yZRvO24omuiPhNRXMXUd_lLcMMpqOY9WXScxUUIuTTY"}},"msgtype":"m.text"},"ts":1696511176151,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dP1FWM4N5fQe_Zyax-D-NOkmTwLzbMhv5AK--eI9hlI"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1696511305948,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$CULNnNR_qnufc_CqEpFeTllEgwU3T82RmCSdL0hJUog"},
{"content":{"body":"so in that sense a language like JS could probably be a reasonable exception (unlike with the `map` example)","msgtype":"m.text"},"ts":1696511357716,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$KZ1f9E6cYNNeXQ7ROfW82E_OCRZfAGmkGFf2D1AJXK8"},
{"content":{"body":"Not all pattern matching is destructuring. Also, JS has a number of objects with internal brands (including user-defined objects with private fields) that make it necessary to be able to combine brand tests with other patterns. For example:\n\n```\nmatch (x) {\n  when Map and { size: 0 }: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Not all pattern matching is destructuring. Also, JS has a number of objects with internal brands (including user-defined objects with private fields) that make it necessary to be able to combine brand tests with other patterns. For example:</p>\n<pre><code>match (x) {\n  when Map and { size: 0 }: ...;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696511495383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QPb9U-RjtVZYDECxsKESj6_2mXMm3_aRVYy8f3rWC1M"},
{"content":{"body":"mhm","msgtype":"m.text"},"ts":1696511610108,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$y9NW8nqx6tKjzBDQviRBLcjd-f7RVqlR1n_uTFpzJMI"},
{"content":{"body":"> <@rkirsling:matrix.org> for me, it just feels like a foreign concept, since none of the languages I've used pattern matching in have had that\n\nI wonder if we need something like https://rbuckton.github.io/regexp-features/ for pattern matching. Unfortunately, I don't have the bandwidth to do that myself at the moment.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$iRLEOsB6TDV6stHHb7rou3LzzY2C1eJw8tfW0USLO5w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>for me, it just feels like a foreign concept, since none of the languages I&#39;ve used pattern matching in have had that</blockquote></mx-reply>I wonder if we need something like https://rbuckton.github.io/regexp-features/ for pattern matching. Unfortunately, I don't have the bandwidth to do that myself at the moment.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iRLEOsB6TDV6stHHb7rou3LzzY2C1eJw8tfW0USLO5w"}},"msgtype":"m.text"},"ts":1696511619787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jGuFxAsIoVKDqtgTZehP88d1vxnjP_1YHO8bf9SwazI"},
{"content":{"body":"`and` and `not` are also very useful with relational patterns, such as:\n```\nx is not in y\nx is not String\nx is >= 0 and < 10\n```\n","format":"org.matrix.custom.html","formatted_body":"<p><code>and</code> and <code>not</code> are also very useful with relational patterns, such as:</p>\n<pre><code>x is not in y\nx is not String\nx is &gt;= 0 and &lt; 10\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696511760695,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7VrebcfwlvvjnRZSfyzWXm2wXAp8riaTG3755uxlF-A"},
{"content":{"body":"> <@rbuckton:matrix.org> I wonder if we need something like https://rbuckton.github.io/regexp-features/ for pattern matching. Unfortunately, I don't have the bandwidth to do that myself at the moment.\n\nI wonder if devs really adopt new features in regex ... (I also have the same worry about CSS).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$jGuFxAsIoVKDqtgTZehP88d1vxnjP_1YHO8bf9SwazI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />I wonder if we need something like https://rbuckton.github.io/regexp-features/ for pattern matching. Unfortunately, I don't have the bandwidth to do that myself at the moment.</blockquote></mx-reply>I wonder if devs really adopt new features in regex ... (I also have the same worry about CSS).","m.relates_to":{"m.in_reply_to":{"event_id":"$jGuFxAsIoVKDqtgTZehP88d1vxnjP_1YHO8bf9SwazI"}},"msgtype":"m.text"},"ts":1696512007617,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wV3L69bYUPvcCQinRjPrUPdih33AcVteaa6MLnbbXxg"},
{"content":{"body":"they have the same feeling to me: (1) hard to learn (2) things cannot be done within it being done with JavaScript so developers already ok with it","msgtype":"m.text"},"ts":1696512064878,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1f1aWXkRV8atoV1zeYf4SVIx2qVjGyhkVXo1Xf7_e6E"},
{"content":{"body":"> <@rbuckton:matrix.org> `and` and `not` are also very useful with relational patterns, such as:\n> ```\n> x is not in y\n> x is not String\n> x is >= 0 and < 10\n> ```\n\nnote that a lot of languages would handle the last one with a range pattern","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7VrebcfwlvvjnRZSfyzWXm2wXAp8riaTG3755uxlF-A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p><code>and</code> and <code>not</code> are also very useful with relational patterns, such as:</p>\n<pre><code>x is not in y\nx is not String\nx is &gt;= 0 and &lt; 10\n</code></pre>\n</blockquote></mx-reply>note that a lot of languages would handle the last one with a range pattern","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7VrebcfwlvvjnRZSfyzWXm2wXAp8riaTG3755uxlF-A"}},"msgtype":"m.text"},"ts":1696512087951,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$CFtlje5bXT908I1epKHHBubs7tmnn53D4XEPeS76sx4"},
{"content":{"body":"we decompose it into more basic ideas, isn't it good? 🤔","msgtype":"m.text"},"ts":1696512139418,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PYkJKF9GDzI-I486y50eF1ytawnOP6ja3D9kEDnH3Cg"},
{"content":{"body":"> <@rkirsling:matrix.org> note that a lot of languages would handle the last one with a range pattern\n\nI'm not opposed to the idea of a range pattern, but `x is > 0 and <= 10` feels like a more natural transition for JS developers, as JS has no other concept of ranges at present (aside from the slice proposal, which has been dormant for awhile)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$CFtlje5bXT908I1epKHHBubs7tmnn53D4XEPeS76sx4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>note that a lot of languages would handle the last one with a range pattern</blockquote></mx-reply>I'm not opposed to the idea of a range pattern, but <code>x is &gt; 0 and &lt;= 10</code> feels like a more natural transition for JS developers, as JS has no other concept of ranges at present (aside from the slice proposal, which has been dormant for awhile)","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CFtlje5bXT908I1epKHHBubs7tmnn53D4XEPeS76sx4"}},"msgtype":"m.text"},"ts":1696512205411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GPaa6V95iO_bpGw94XrSmCDhokrmrwYnzamVqScrE9o"},
{"content":{"body":"right it does feel like you'd expect it to go along with some other notion of ranges in JS","m.mentions":{},"msgtype":"m.text"},"ts":1696512238466,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$G-h3eCv_96yZCINN2gO8NtmpVXOu_bBbsrO80zFtqZ4"},
{"content":{"body":"I do think range and slice notations would be useful for JS, at some point. I wouldn't want to tack that on to this.","m.mentions":{},"msgtype":"m.text"},"ts":1696512352115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1AQsMBRWFM5RmDJO9MMGolhunSeKk82wE1NCCRCpM68"},
{"content":{"body":"Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them, especially if you don't have a convenient syntax for open and closed ranges. It makes the `> 0` case harder, especially when dealing with floats.","format":"org.matrix.custom.html","formatted_body":"Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them, especially if you don't have a convenient syntax for open and closed ranges. It makes the <code>&gt; 0</code> case harder, especially when dealing with floats.","m.mentions":{},"msgtype":"m.text"},"ts":1696512459401,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PMy5QHP0yotS_lfB1yx_tplvUM7yhXUBLb_tDxIDP1w"},
{"content":{"body":" * Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them. Especially if you don't have a convenient syntax for open and closed ranges. It makes the `> 0` case harder, especially when dealing with floats.","format":"org.matrix.custom.html","formatted_body":" * Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them. Especially if you don't have a convenient syntax for open and closed ranges. It makes the <code>&gt; 0</code> case harder, especially when dealing with floats.","m.mentions":{},"m.new_content":{"body":"Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them. Especially if you don't have a convenient syntax for open and closed ranges. It makes the `> 0` case harder, especially when dealing with floats.","format":"org.matrix.custom.html","formatted_body":"Ranges are also a bit harder to conceptualize compared to relational comparisons, if you're not used to them. Especially if you don't have a convenient syntax for open and closed ranges. It makes the <code>&gt; 0</code> case harder, especially when dealing with floats.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PMy5QHP0yotS_lfB1yx_tplvUM7yhXUBLb_tDxIDP1w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696512480192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_If89zKY7YyOniNgnZXYlb2yvLvvdNs4671I-wjan9c"},
{"content":{"body":"Strange that python adds grouped patterns, but not `and` or `not`, which are the main reasons you would need grouped patterns.","format":"org.matrix.custom.html","formatted_body":"Strange that python adds grouped patterns, but not <code>and</code> or <code>not</code>, which are the main reasons you would need grouped patterns.","m.mentions":{},"msgtype":"m.text"},"ts":1696512727465,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NCmvWoVX-FJB_mUuwcZ8BlgXqUwVTKEgTI8RA57P5uc"},
{"content":{"body":"Also interesting that the rationale for Python to use `_` for discards is the exact opposite of ljharb's position as to why we can't use `_` for discards. 🤷","format":"org.matrix.custom.html","formatted_body":"Also interesting that the rationale for Python to use <code>_</code> for discards is the exact opposite of <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s position as to why we can't use <code>_</code> for discards. 🤷","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1696513373895,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XfLFGUZJFG0khZS0aFWGU-jb86r98LfKcGouXsVSBuo"},
{"content":{"body":"> In addition, this would put Python in a rather unique position: The underscore is as a wildcard pattern in _every_ programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>In addition, this would put Python in a rather unique position: The underscore is as a wildcard pattern in <em>every</em> programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696513446580,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8fg6aGNqPRk5aaKAk2GDzHwOcsw8GqMOOxl76mFeqtI"},
{"content":{"body":" * > In addition, this would put Python in a rather unique position: The underscore is [used] as a wildcard pattern in _every_ programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>In addition, this would put Python in a rather unique position: The underscore is [used] as a wildcard pattern in <em>every</em> programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.</p>\n</blockquote>\n","m.mentions":{},"m.new_content":{"body":"> In addition, this would put Python in a rather unique position: The underscore is [used] as a wildcard pattern in _every_ programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>In addition, this would put Python in a rather unique position: The underscore is [used] as a wildcard pattern in <em>every</em> programming language with pattern matching that we could find (including C#, Elixir, Erlang, F#, Grace, Haskell, Mathematica, OCaml, Ruby, Rust, Scala, Swift, and Thorn). Keeping in mind that many users of Python also work with other programming languages, have prior experience when learning Python, and may move on to other languages after having learned Python, we find that such well-established standards are important and relevant with respect to readability and learnability. In our view, concerns that this wildcard means that a regular name received special treatment are not strong enough to introduce syntax that would make Python special.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8fg6aGNqPRk5aaKAk2GDzHwOcsw8GqMOOxl76mFeqtI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696513461199,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cYqhbfaJ2T7HcRiBJ8d5yb5yotAaLqLeSVVe_tqUzhQ"}
]