[
{"content":{"body":"The negated `in`/`instanceof` proposal is interesting, but potentially covered by pattern matching with relational patterns:\n\n```\nx !in y // negated-in\nx !instanceof Y // negated-instanceof\n\nx is not in y; // negated relational pattern\nx is not Y; // negated custom match\nx is not instanceof y; // negated relational pattern (generally covered by regular `is` though)\n```","format":"org.matrix.custom.html","formatted_body":"<p>The negated <code>in</code>/<code>instanceof</code> proposal is interesting, but potentially covered by pattern matching with relational patterns:</p>\n<pre><code>x !in y // negated-in\nx !instanceof Y // negated-instanceof\n\nx is not in y; // negated relational pattern\nx is not Y; // negated custom match\nx is not instanceof y; // negated relational pattern (generally covered by regular `is` though)\n</code></pre>\n","msgtype":"m.text"},"ts":1694799412833,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mBf5FSTTBrjYYOQt1SfK3f0e-Gr6VHvt4Lguwzjz_WU"},
{"content":{"body":"indeed, but still useful separately and as a smaller piece","msgtype":"m.text"},"ts":1694800468832,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iTNm8uZt3APVmRLePVXSaNt4X553alvxQ5fYZHuhACE"},
{"content":{"body":"especially if it's spelled `x not in y` and `x not instanceof y`","format":"org.matrix.custom.html","formatted_body":"especially if it's spelled <code>x not in y</code> and <code>x not instanceof y</code>","msgtype":"m.text"},"ts":1694800477497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1Vn9Zl4JeHxmkTZ08P8Eh1YlRFB2Ja7RudAEvYOXv_0"},
{"content":{"body":"just like how throw expressions would still be useful even if we had do expressions","msgtype":"m.text"},"ts":1694800489748,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$etzU-LI0dpBoMFbXrk_jV26k9apCwPr01zC5BX5H4G4"},
{"content":{"body":"If it exists on its own, I think `!in` is better than `not in`, as `not in` could be confused with `is not ...` in pattern matching.","format":"org.matrix.custom.html","formatted_body":"If it exists on its own, I think <code>!in</code> is better than <code>not in</code>, as <code>not in</code> could be confused with <code>is not ...</code> in pattern matching.","msgtype":"m.text"},"ts":1694800542448,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SwxLWqtfG5h8cAIx3cdxIktsfHI-RYY7S6RD1WMpV-0"},
{"content":{"body":"in these two cases it'd work the same, so i don't think it'd be confusing","msgtype":"m.text"},"ts":1694800598822,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VgOzNwXNrUfMRjw7C8Ik8WsyBYfh36cTEUGsWljV0Gg"},
{"content":{"body":"it'd just mean that potentially both `x not in y` and `x is not in y` work, with identical semantics","format":"org.matrix.custom.html","formatted_body":"it'd just mean that potentially both <code>x not in y</code> and <code>x is not in y</code> work, with identical semantics","msgtype":"m.text"},"ts":1694800615187,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GgVuleVEzzFYhrDO8-YrylSgbsWGHp7G6rGdOL10V8U"},
{"content":{"body":"btw, i'm going to put a 5 minute update on the agenda for pattern matching. i'm explicitly not going to talk about any specifics, so i'm not being recklessly ambitious with the timebox - just going to state that the champion group is close to consensus on an updated form of the proposal, and that it takes into account implementor/spidermonkey/plenary feedback, and should require much less added syntax, and that we'll be back at a future meeting with an extensive update.","msgtype":"m.text"},"ts":1694800646045,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KlL4u4NBaMkOQ0RpjCYz1HiNbAuH7q314uR5pl41kc0"},
{"content":{"body":"I'm not sure what expectation \"much less added syntax\" is intended to set? IIRC, its about the same amount of syntax as what's been presented to committee before, though far less than the `let when` variant. I can't recall if `let when` was ever presented to committee.","format":"org.matrix.custom.html","formatted_body":"I'm not sure what expectation \"much less added syntax\" is intended to set? IIRC, its about the same amount of syntax as what's been presented to committee before, though far less than the <code>let when</code> variant. I can't recall if <code>let when</code> was ever presented to committee.","msgtype":"m.text"},"ts":1694800772576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DzX_qPIDwRrKah0v8KTujX46ipnw7NPv5WHmqNHoAXE"},
{"content":{"body":"maybe i won't say that part then","msgtype":"m.text"},"ts":1694802723972,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hu22iuSEu14kaj1w4b7z3qw_yG1Vu4fJEpoqdJO6s78"},
{"content":{"body":"the `${}` syntax is gone, in particular","format":"org.matrix.custom.html","formatted_body":"the <code>${}</code> syntax is gone, in particular","msgtype":"m.text"},"ts":1694802738868,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9K2m-KGv5do-JV_Gbz1MSAtCIdM1PG-PNvFjmRCdPSk"}
]