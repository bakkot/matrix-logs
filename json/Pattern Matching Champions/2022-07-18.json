[
{"content":{"body":"Would you folks be willing to hear a pretty significant modification to what you are proposing? As you might recall -- i suggested we use this as the basis for a new \"epic\" process","msgtype":"m.text","org.matrix.msc1767.text":"Would you folks be willing to hear a pretty significant modification to what you are proposing? As you might recall -- i suggested we use this as the basis for a new \"epic\" process"},"ts":1658147933239,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oB2mM_8e2eRh6TWg8Fte-RF2bTw7SDYm-1AVFshO3Fk"},
{"content":{"body":"I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement","msgtype":"m.text","org.matrix.msc1767.text":"I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement"},"ts":1658147948351,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$orwmoZwniqztyYJFCB5PkD5i9VD1Feh1nMjL905kPZY"},
{"content":{"body":" * I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement","m.new_content":{"body":"I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement","msgtype":"m.text","org.matrix.msc1767.text":"I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement"},"m.relates_to":{"event_id":"$orwmoZwniqztyYJFCB5PkD5i9VD1Feh1nMjL905kPZY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I can present it, just for the champions. I wish we had discussed earlier that this was going for advancement"},"ts":1658147966743,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3k4cOCSDOs64JcfXU5SSNIqEuL6OZ3jZtazuEwjwZP0"},
{"content":{"body":"I want to hear that, what is it? ","msgtype":"m.text"},"ts":1658149132184,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$p4rMKz80gQsmlIxR-bt5GUY0CKKLBQMwaKT4Q6H3N8A"},
{"content":{"body":"So, the situation is i can no longer type.","msgtype":"m.text","org.matrix.msc1767.text":"So, the situation is i can no longer type."},"ts":1658158965947,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Mz9NlKbS0kSzmoH0T-eK49hAFAFU7PGamCH6mOlRhCg"},
{"content":{"body":"or rather: its extremely painful","msgtype":"m.text","org.matrix.msc1767.text":"or rather: its extremely painful"},"ts":1658158973800,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$58iOl34X5onJgHAX84at4BEaWmPcqmT-HpAsqLFW_BA"},
{"content":{"body":"i did what i could","msgtype":"m.text","org.matrix.msc1767.text":"i did what i could"},"ts":1658158975705,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$HYvDC1OShh0EgQs5_14oaMJTK_q-Lqy1S-IQelrITMw"},
{"content":{"body":"but everything else needs to be communicated verbally","msgtype":"m.text","org.matrix.msc1767.text":"but everything else needs to be communicated verbally"},"ts":1658158982492,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-8OevSF0LxdWXpJH5lkrif7x6wN-zRMxA1y6pVThM6o"},
{"content":{"body":"https://github.com/codehag/pattern-matching-epic","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/codehag/pattern-matching-epic"},"ts":1658159202352,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$KmqXzzeDlppyDwrD2WBzDWWSXUDTqU0I_GOMXgCDOQc"},
{"content":{"body":"https://docs.google.com/document/d/1dVaSGokKneIT3eDM41Uk67SyWtuLlTWcaJvOxsBX2i0/edit","msgtype":"m.text","org.matrix.msc1767.text":"https://docs.google.com/document/d/1dVaSGokKneIT3eDM41Uk67SyWtuLlTWcaJvOxsBX2i0/edit"},"ts":1658159213940,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$FdBxBd0JMlpfMFf7qxH5WAdbscgPG05mSJ3I4hSJc_Y"},
{"content":{"body":"ljharb: i destroyed an already injured wrist to write that. i have one hand left. read before commenting.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: i destroyed an already injured wrist to write that. i have one hand left. read before commenting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: i destroyed an already injured wrist to write that. i have one hand left. read before commenting.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: i destroyed an already injured wrist to write that. i have one hand left. read before commenting.","mimetype":"text/html"}]},"ts":1658159642396,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rezIdSEVuPTymIWr-zS0fOA9zNAHdguCNWDtsjLrhS8"},
{"content":{"body":"I did read the entire thing.","msgtype":"m.text"},"ts":1658159725981,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nPrWrcaMD_fRVdwRsEiC9NiZh_oO9kemBzTLNpu4Kpc"},
{"content":{"body":"it was posted 4 minutes ago","msgtype":"m.text","org.matrix.msc1767.text":"it was posted 4 minutes ago"},"ts":1658159745065,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OgDRuxILeC2tng1-NYO8E6WlufnjZ81Pbx_DWZjuDj4"},
{"content":{"body":"theres over 20 pages","msgtype":"m.text","org.matrix.msc1767.text":"theres over 20 pages"},"ts":1658159745409,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$G5fAyU6Y_VFUHOzNho_Z7ac3ywYOYdUwllr-nSZZJ1I"},
{"content":{"body":"you did not","msgtype":"m.text","org.matrix.msc1767.text":"you did not"},"ts":1658159745813,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3xE30IdbiBKKykSmyub2zdHm-URB3xYoh8wR_dt_VDw"},
{"content":{"body":"i understand if you aren’t able to type, and i don’t want you to hurt your wrist, but I’m not sure how else to respond","msgtype":"m.text"},"ts":1658159750415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i5nB0_Hmc3ii0Xa6M36TLTBpjmwASVb_0W06rj-vhrY"},
{"content":{"body":"not like this?","msgtype":"m.text","org.matrix.msc1767.text":"not like this?"},"ts":1658159757918,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$I_1Vp-SZ_c52GXGYJLiy-NTrrhFG8UU8s_h3PagpCj8"},
{"content":{"body":"The Google doc is 8 pages, and i did read it - I’m a very fast reader.","msgtype":"m.text"},"ts":1658159772421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MD7eBQY9irxrHYYnjOBS-s5LYa-rMrzS3cmFbW5sDzk"},
{"content":{"body":"a poor one","msgtype":"m.text","org.matrix.msc1767.text":"a poor one"},"ts":1658159783691,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$uwPRjKwQuxrzYlI7Sel7x3MtUJhgHxw3v6sfIqSbZWk"},
{"content":{"body":"ill just block then","msgtype":"m.text","org.matrix.msc1767.text":"ill just block then"},"ts":1658159812341,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2epIipxD5qUlE10vDlZXjg5oMjOQZfpFsiGt0Gfh9yg"},
{"content":{"body":"perhaps so. This conversation seems to have rapidly gotten hostile, so I’ll withdraw for now. Suffice to say that while i empathize with your difficulty typing it doesn’t seem reasonable to block if you’re unable to explain your position.","msgtype":"m.text"},"ts":1658159823134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O_13NuDnjZZQ-vSyTvDgstgCxwTnLSmll16bTBF7sFo"},
{"content":{"body":"i did, in many many pages","msgtype":"m.text","org.matrix.msc1767.text":"i did, in many many pages"},"ts":1658159839393,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4J7YP8sU-TJqPXv34_v97eSnR5PwU82eZjx_jNvWH_w"},
{"content":{"body":"that were dismissed within 2 minutes","msgtype":"m.text","org.matrix.msc1767.text":"that were dismissed within 2 minutes"},"ts":1658159847508,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3YAq3dzs8vGXNsYDwYmeMqUWouzjqr_RIfKcTpBGI-4"},
{"content":{"body":"that itself is hostile","msgtype":"m.text","org.matrix.msc1767.text":"that itself is hostile"},"ts":1658159861972,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2TkjfsOv1R_NkKjHbEIbSDb5fIlVbD_He8KbEWPNmOM"},
{"content":{"body":"I’ll give it another read, it’s likely i missed something. I didn’t dismiss all of it - i only responded to one point.","msgtype":"m.text"},"ts":1658159861993,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EK6NeXzrzPuvWG8QNMipjdLLYYfaF4ACXEKtlO1Gq-0"},
{"content":{"body":"i tried to write the spec but i feel the tendons in my hands. this is fully layerable. all it needs is to have the custom matcher base in the foundation step. or, have it opaque so it can be added later","msgtype":"m.text","org.matrix.msc1767.text":"i tried to write the spec but i feel the tendons in my hands. this is fully layerable. all it needs is to have the custom matcher base in the foundation step. or, have it opaque so it can be added later"},"ts":1658159944518,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cl41LSzTtOVo6NGsyl9Xq1mzRwxaHVc6WZ_45oy9t8I"},
{"content":{"body":"what is the benefit to doing it in multiple steps? That’s how we did classes, and imo that was a mistake","msgtype":"m.text"},"ts":1658160008982,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pmJ9EhosLhs6WlpoifX2lbk4DzrkcI2UcjsF0FP6xZI"},
{"content":{"body":"see the top part of the doc","msgtype":"m.text","org.matrix.msc1767.text":"see the top part of the doc"},"ts":1658160023153,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AQGnRuNDOweWkIPPo3XLFV4wZ0p3rJ-vlxnvwcyCeMg"},
{"content":{"body":"i also missed that implementation and educaton will benefit","msgtype":"m.text","org.matrix.msc1767.text":"i also missed that implementation and educaton will benefit"},"ts":1658160054488,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Wy7v-yo6J5xrKWK3paSRD01D3IcyeMTFSxzUFfn04vs"},
{"content":{"body":"I see the heavy mental load part - that definitely seems to be worth discussing the syntax. that doesn’t address why implementing it over a longer time period will result in a different outcome.","msgtype":"m.text"},"ts":1658160082984,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Bbf0zgDlXxwtimKwWHNyU3Q9b6R4EULwaQ7eCbt-y9Q"},
{"content":{"body":"see above","msgtype":"m.text","org.matrix.msc1767.text":"see above"},"ts":1658160094461,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cE0226jZVOMLZ7YAxPJJBIA33_oORhGt2XLkpSqp_3Q"},
{"content":{"body":"ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.","msgtype":"m.text"},"ts":1658160126505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pjSq08TAKjShLqOfA5hZKzF5X8HwKBZtMdN6sPb0YNM"},
{"content":{"body":"* ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.","format":"org.matrix.custom.html","formatted_body":"* (null)","m.new_content":{"body":"ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.","msgtype":"m.text"},"m.relates_to":{"event_id":"$pjSq08TAKjShLqOfA5hZKzF5X8HwKBZtMdN6sPb0YNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1658160137514,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HAc8rkRHXXisxvToACvhpGj3xZduQU5Xkni2hUN_1D4"},
{"content":{"body":"anyways i don’t want to stress your wrists further so I’ll try to stop responding","msgtype":"m.text"},"ts":1658160193142,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QAbaH7aYxPUoYiX_wv4kJE6FGVtVgYJHeJmhHIndjl4"},
{"content":{"body":"i disagree about education. its covered in the syntax conflation","msgtype":"m.text","org.matrix.msc1767.text":"i disagree about education. its covered in the syntax conflation"},"ts":1658160220283,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xpBAry_8UqlHcnYbS1USoVz9V4Yot3C00P1ekrJZKm0"},
{"content":{"body":"this feature in particular benefits","msgtype":"m.text","org.matrix.msc1767.text":"this feature in particular benefits"},"ts":1658160231841,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mH2HlQrS4-qWleKse0EsT_M_PGmb24kEEx4Y0Rpi7n0"},
{"content":{"body":"please. take time to read it","msgtype":"m.text","org.matrix.msc1767.text":"please. take time to read it"},"ts":1658160252675,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$W13GD1mRMEuKa6JzveGeJPEJPAttKwjj4ccRRBWSPSY"},
{"content":{"body":"i will certainly reread it.","msgtype":"m.text"},"ts":1658160261239,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iyHy_y7-PGfIGK7jEOQNf_OXWII3s0gscITBr5YrO_k"},
{"content":{"body":"(this also sounds like a stage 2 concern, not a stage 1 concern)","msgtype":"m.text"},"ts":1658160279604,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cY8mIv77zWwQASX6rPeZAXuUvj1pM2LxZeO_2ZaDDEU"},
{"content":{"body":"this is stage 2 entry concern","msgtype":"m.text","org.matrix.msc1767.text":"this is stage 2 entry concern"},"ts":1658160290433,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$M5vEqUCLrL5gO7NRlEFX7H-Awx7F2gxp8_zqYQ8kI3k"},
{"content":{"body":"problem & shape","msgtype":"m.text","org.matrix.msc1767.text":"problem & shape"},"ts":1658160309554,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lf7chNymNnqURS65si8YEiRdqPsmv3bq7N0SUbPciqQ"},
{"content":{"body":"could you open the doc for commenting?","msgtype":"m.text"},"ts":1658160881472,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AMZsSqp63PlOlxQLF99all-cMnZhlZQsTKnFCRaZTmg"},
{"content":{"body":"> <@yulia:mozilla.org> https://github.com/codehag/pattern-matching-epic\n\nthis new Epic proposal process looks interesting.\nI believe Module Loader group will need this, and they're actually doing this in https://github.com/tc39/proposal-compartments/pull/71/files.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$KmqXzzeDlppyDwrD2WBzDWWSXUDTqU0I_GOMXgCDOQc?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>https://github.com/codehag/pattern-matching-epic</blockquote></mx-reply>this new Epic proposal process looks interesting.<br>I believe Module Loader group will need this, and they're actually doing this in https://github.com/tc39/proposal-compartments/pull/71/files.","m.relates_to":{"m.in_reply_to":{"event_id":"$KmqXzzeDlppyDwrD2WBzDWWSXUDTqU0I_GOMXgCDOQc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> https://github.com/codehag/pattern-matching-epic\n\nthis new Epic proposal process looks interesting.\nI believe Module Loader group will need this, and they're actually doing this in https://github.com/tc39/proposal-compartments/pull/71/files.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$KmqXzzeDlppyDwrD2WBzDWWSXUDTqU0I_GOMXgCDOQc?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>https://github.com/codehag/pattern-matching-epic</blockquote></mx-reply>this new Epic proposal process looks interesting.<br>I believe Module Loader group will need this, and they're actually doing this in https://github.com/tc39/proposal-compartments/pull/71/files.","mimetype":"text/html"}]},"ts":1658160910848,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$s-5rZ9ic-tMOvNuRKqufR6Y_1ddcLlPeyq4hj7rtnFI"},
{"content":{"body":"can you pass the process to him?","msgtype":"m.text","org.matrix.msc1767.text":"can you pass the process to him?"},"ts":1658160943054,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JMNe5qRkOrMBzxWSDYQOVVKqCGwhAamYC4Om9QaKCSU"},
{"content":{"body":"i will work on it more broadly, but i just cant do any more today (or likely this week)","msgtype":"m.text","org.matrix.msc1767.text":"i will work on it more broadly, but i just cant do any more today (or likely this week)"},"ts":1658160970285,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8Hi8AaURaZGOUCvCV1eyMEIC2ctqYC5Z6cnY0zDD1KE"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1658160993867,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$W51KHHQqM3z4fgQljgPEAoeLsgiR6pYiOz8IdgewnVo"},
{"content":{"body":"> <@ljharb:matrix.org> could you open the doc for commenting?\n\ni can, but i am afraid you will do the same fast response as you did","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$AMZsSqp63PlOlxQLF99all-cMnZhlZQsTKnFCRaZTmg?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>could you open the doc for commenting?</blockquote></mx-reply>i can, but i am afraid you will do the same fast response as you did","m.relates_to":{"m.in_reply_to":{"event_id":"$AMZsSqp63PlOlxQLF99all-cMnZhlZQsTKnFCRaZTmg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> could you open the doc for commenting?\n\ni can, but i am afraid you will do the same fast response as you did","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$AMZsSqp63PlOlxQLF99all-cMnZhlZQsTKnFCRaZTmg?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>could you open the doc for commenting?</blockquote></mx-reply>i can, but i am afraid you will do the same fast response as you did","mimetype":"text/html"}]},"ts":1658161104649,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rV83k_AMNMgX2OND24p5Toa7WhfsLx2wPIboQDrmEnM"},
{"content":{"body":"and, i would like you to first think about everything","msgtype":"m.text","org.matrix.msc1767.text":"and, i would like you to first think about everything"},"ts":1658161126075,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$UhXl6O638Xft6hQmSa7y6iAjmP5IK2om2-MFS5c-8r8"},
{"content":{"body":"also none of this is proposed as final","msgtype":"m.text","org.matrix.msc1767.text":"also none of this is proposed as final"},"ts":1658161143082,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mYhOar6kZ9pOG42XLwgNRwdZN4UU-YMmcRAJSstdaww"},
{"content":{"body":"my response will be the same whether i do it in minutes or days, but sure","msgtype":"m.text"},"ts":1658161173227,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k_io8qW_FoTDTTz99ObcQibSBVjRhvT4E8hDRxe4Jz0"},
{"content":{"body":"i recommend to take more time with things. you obviously did not read before commenting before","msgtype":"m.text","org.matrix.msc1767.text":"i recommend to take more time with things. you obviously did not read before commenting before"},"ts":1658161198541,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$q7so4N-uEQpUc07ObnWxoOUgw_A_ZFnm-p6PaV30Mo8"},
{"content":{"body":"and the result was, i was deeply hurt","msgtype":"m.text","org.matrix.msc1767.text":"and the result was, i was deeply hurt"},"ts":1658161207137,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_sCS629aqKCUUQuKmYXx3tpW13CIDDq0JVB_20AVwEU"},
{"content":{"body":"and you were not correct","msgtype":"m.text","org.matrix.msc1767.text":"and you were not correct"},"ts":1658161219400,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iCrAWnGasFZOSmU-yVACWSpazZodrpfYgYiYpgT63Cs"},
{"content":{"body":"please don’t presume what is “obvious” about someone else’s actions; you are not correct either.","msgtype":"m.text"},"ts":1658161228168,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pGLAM1eaWPsA-9A3uIlK2mJSQZgNXhetYiNAtCSz8ho"},
{"content":{"body":"so the interaction was not worth while, and it really made me reconsider if this is worth taking any more time on","msgtype":"m.text","org.matrix.msc1767.text":"so the interaction was not worth while, and it really made me reconsider if this is worth taking any more time on"},"ts":1658161237285,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PrNPR858_QCaUt048gkzqdz2VkGQsvB38hpTTPKq3HM"},
{"content":{"body":"it is obvious you didn't read. you asked questions that were covered","msgtype":"m.text","org.matrix.msc1767.text":"it is obvious you didn't read. you asked questions that were covered"},"ts":1658161257890,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$J2IeW5YN3VzR5MRCHFpiUSJ62Cnsm_xuPbMbMuo4Zcs"},
{"content":{"body":"i am also deeply hurt that after months and years in the champion group, you dropped a bomb the day before plenary with topics you haven’t brought up before to my recollection.","msgtype":"m.text"},"ts":1658161260957,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GIcLpks2kLKJLxlifuZmQDTHXPa1edlKG6n_IIy5qcA"},
{"content":{"body":"you also didn't tell me you were taking it to stage 2","msgtype":"m.text","org.matrix.msc1767.text":"you also didn't tell me you were taking it to stage 2"},"ts":1658161273840,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$YmpcxuWr0bOU9mratJ6Mn7GNYAwD41cabbTkFEm674c"},
{"content":{"body":"but I’m still trying to receive the feedback.","msgtype":"m.text"},"ts":1658161276665,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$28eIRqHMGi2PNAnHht7gZYv04ydEW8CEYgVInJN8Q7I"},
{"content":{"body":"i did bring this up actually","msgtype":"m.text","org.matrix.msc1767.text":"i did bring this up actually"},"ts":1658161288791,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gF0N2bdVtxPd0y8qgycpbKAYCIww_py8lv_6RiJ9uzQ"},
{"content":{"body":"and i brought up introducing an epics process in june","msgtype":"m.text","org.matrix.msc1767.text":"and i brought up introducing an epics process in june"},"ts":1658161295638,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NC-vR8L9vFO03XmlF6hUPe4D9outw8u0Ai_es7VZvUY"},
{"content":{"body":"it was ignored","msgtype":"m.text","org.matrix.msc1767.text":"it was ignored"},"ts":1658161297205,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iUctvRKrPQuFjtz9srVaTEW0pDiWU-22XWbBjQl0AvI"},
{"content":{"body":"i rushed to finish this, knowing that i haven't had time for this","msgtype":"m.text","org.matrix.msc1767.text":"i rushed to finish this, knowing that i haven't had time for this"},"ts":1658161304966,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$HEl62yn2coD-cZHoyp5Eny5O8hdLjlB9GHhqP3e37QQ"},
{"content":{"body":"so i did my best","msgtype":"m.text","org.matrix.msc1767.text":"so i did my best"},"ts":1658161321661,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6pMvcm4Wftde_0jIMGqP14TuPlHFIsPDgQeVjWsDUew"},
{"content":{"body":"it wasn’t ignored - i can’t speak for the others, but i do not think it’s an appropriate process for this feature.","msgtype":"m.text"},"ts":1658161326100,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-xOOyrZUVVv09N-oZE3LA5RaUBWV_5RpxFHpXuc9hIE"},
{"content":{"body":"and i was greeted with \"oh i read it in 2 minutes\"","msgtype":"m.text","org.matrix.msc1767.text":"and i was greeted with \"oh i read it in 2 minutes\""},"ts":1658161328986,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6pFwpw39E2I_DlvGaC7-yIQJ_hgLWN3ItACgJQ5F2SI"},
{"content":{"body":"it is unfortunate that someone else’s reading speed is interpreted as a personal attack. Not sure what else to say.","msgtype":"m.text"},"ts":1658161354661,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OUjIXGay_ygZaY9ciVFC9njNcZiYXktVMtcCJW7zeKo"},
{"content":{"body":"a speed read where you end up asking questions that are covered in what you read","msgtype":"m.text","org.matrix.msc1767.text":"a speed read where you end up asking questions that are covered in what you read"},"ts":1658161373342,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xBhbcp6P752ok52XxABQnE-tptMFIo5axzZFGpIkvTc"},
{"content":{"body":"this is not comprehension, its discarding another persons work","msgtype":"m.text","org.matrix.msc1767.text":"this is not comprehension, its discarding another persons work"},"ts":1658161389958,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AO5BZ5etmrmsOfpmYzLfqsqRbmDKmsKoI9u_zxuCbck"},
{"content":{"body":"I’d invite you to consider that “covered” is subjective, and that perhaps i asked because it was not covered in a way i understood.","msgtype":"m.text"},"ts":1658161394284,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2RWRWGNMZuX5u7T4axdeO-xKI2xeBeMNTHJ6SGK_Ga8"},
{"content":{"body":"there is no way that you read through, and thought about everything, in 2 minutes","msgtype":"m.text","org.matrix.msc1767.text":"there is no way that you read through, and thought about everything, in 2 minutes"},"ts":1658161420166,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rbh558f812haARxZM3W9N5zP0y9OXoB0w4q8xa9-gBw"},
{"content":{"body":"ljharb yulia both of you need to walk away from the computer.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> both of you need to walk away from the computer.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb yulia both of you need to walk away from the computer.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> both of you need to walk away from the computer.","mimetype":"text/html"}]},"ts":1658161436367,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$KHUtFFE5a0iPF8NSzxYQvCGEokQ3mwXdYSLQpYl2jUY"},
{"content":{"body":"I look up to both of you.","msgtype":"m.text","org.matrix.msc1767.text":"I look up to both of you."},"ts":1658161440322,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$EJ8xIWhL2DXZ7Mk-qmLIPi-w0Dr537pugSAI_x6oeBY"},
{"content":{"body":"stop","msgtype":"m.text","org.matrix.msc1767.text":"stop"},"ts":1658161441124,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$6e6D1KQZ58tiEhuuSgJKpRbPn0WrVcxjy9hTzPKiHz0"},
{"content":{"body":"fair enough.","msgtype":"m.text"},"ts":1658161444116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Kj0c1lr_X3mVHiljCAjS-C9E6GvytFXgnyR1crQyyxI"},
{"content":{"body":"I'm behind on ~everything~, I've got a few weeks worth of chat log to read through in this room, so I have more or less no idea what transpired here. not passing judgment or taking sides — as, again, no idea what happened — but going off of this current screen of messages both of you should log off and clear your heads.","msgtype":"m.text","org.matrix.msc1767.text":"I'm behind on ~everything~, I've got a few weeks worth of chat log to read through in this room, so I have more or less no idea what transpired here. not passing judgment or taking sides — as, again, no idea what happened — but going off of this current screen of messages both of you should log off and clear your heads."},"ts":1658161617403,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$xaUCRJ7xKR9vGn_6bCG7la5YYhtfh_xl66gC180g_nU"},
{"content":{"body":" * stop.","m.new_content":{"body":"stop.","msgtype":"m.text","org.matrix.msc1767.text":"stop."},"m.relates_to":{"event_id":"$6e6D1KQZ58tiEhuuSgJKpRbPn0WrVcxjy9hTzPKiHz0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * stop."},"ts":1658161635300,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$dtxqMiFPBqDVK1XdDwtH6zMHRNZ9yCPNrZk_o-4VI1U"},
{"content":{"body":" * ill just have to block then for now. my issue from the june meeting that this should not be so large has not been addressed. If you don't want my feedback, i can withdraw it. ","m.new_content":{"body":"ill just have to block then for now. my issue from the june meeting that this should not be so large has not been addressed. If you don't want my feedback, i can withdraw it. ","msgtype":"m.text","org.matrix.msc1767.text":"ill just have to block then for now. my issue from the june meeting that this should not be so large has not been addressed. If you don't want my feedback, i can withdraw it. "},"m.relates_to":{"event_id":"$2epIipxD5qUlE10vDlZXjg5oMjOQZfpFsiGt0Gfh9yg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * ill just have to block then for now. my issue from the june meeting that this should not be so large has not been addressed. If you don't want my feedback, i can withdraw it. "},"ts":1658162774159,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$APXmbc1fN8eQx97dUsWHxFQ5RVNxrFtALmlhLbXpsPY"},
{"content":{"body":"> <@ljharb:matrix.org> so if you do `class Foo {}` and then `${Foo}`, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's `.constructor === Foo`, and return true\n\nIsn't this the opposite behavior of `instanceof`, which uses hasInstance or checks whether the constructor's prototype is in the [[Prototype]] chain? Some libraries patch obj.constructor to hide constructors from consuming code. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Axvmo6xhqea8VkMp8sstOz1-n11HHx9jSyOE57DabCI?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />so if you do <code>class Foo {}</code> and then <code>${Foo}</code>, it will grab the Object matcher, which (after i update it) will walk the prototype and detect that the instance's <code>.constructor === Foo</code>, and return true</blockquote></mx-reply>Isn't this the opposite behavior of <code>instanceof</code>, which uses hasInstance or checks whether the constructor's prototype is in the [[Prototype]] chain? Some libraries patch obj.constructor to hide constructors from consuming code.","m.relates_to":{"m.in_reply_to":{"event_id":"$Axvmo6xhqea8VkMp8sstOz1-n11HHx9jSyOE57DabCI"}},"msgtype":"m.text"},"ts":1658163191265,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg"},
{"content":{"body":"I read the whole document and the alternative repo Yulia sent.\n\n> what is the benefit to doing it in multiple steps? That’s how we did classes, and imo that was a mistake\n\nYulia means: Do it in multiple steps but **ship it at once**. It does not the same as what we did in the classes. I already see this stratagem in the Module Loader proposals group, and that looks promising.\nhttps://github.com/tc39/proposal-compartments/pull/71/files\n\n> dropped a bomb the day before plenary\n\nif something is doing wrong, we should not continue if we're just \"close to the meeting\", anyway I don't mean the current proposal is \"doing wrong\", but I believe Yulia's concern is worth more re-consideration.\n\n> Assignment, test, aliasing\n\nI never think of this problem before because I'm very familiar with the status quo proposal, but once Yulia pointed this out, I agree this is a serious problem we need to reconsider.\nEven with today's JavaScript, I am sometimes confused in the deconstruction alias syntax `{ a: b }` which is the binding I can use? If we add one more overload to the `{ ... }` it indeed will make things much harder to read.\n\n> `let val when Option.isSome`\n\nAt the first glance, this makes me think of rbuckton's unapply proposal. I'm much in favor of that form in the past, `let Option(val) = expr`. But after reading the whole document, I'm worried about if unapply syntax could cover all the abilities in Yulia's document.\n\nIt's late 1 am here so my brain is not very clear and this whole document+conversation is a lot of information for me. I like Yulia's new design, it _does_ solve some concerns from the JSCIG meeting. Please consider it seriously.","format":"org.matrix.custom.html","formatted_body":"<p>I read the whole document and the alternative repo Yulia sent.</p>\n<blockquote>\n<p>what is the benefit to doing it in multiple steps? That’s how we did classes, and imo that was a mistake</p>\n</blockquote>\n<p>Yulia means: Do it in multiple steps but <strong>ship it at once</strong>. It does not the same as what we did in the classes. I already see this stratagem in the Module Loader proposals group, and that looks promising.<br>https://github.com/tc39/proposal-compartments/pull/71/files</p>\n<blockquote>\n<p>dropped a bomb the day before plenary</p>\n</blockquote>\n<p>if something is doing wrong, we should not continue if we're just &quot;close to the meeting&quot;, anyway I don't mean the current proposal is &quot;doing wrong&quot;, but I believe Yulia's concern is worth more re-consideration.</p>\n<blockquote>\n<p>Assignment, test, aliasing</p>\n</blockquote>\n<p>I never think of this problem before because I'm very familiar with the status quo proposal, but once Yulia pointed this out, I agree this is a serious problem we need to reconsider.<br>Even with today's JavaScript, I am sometimes confused in the deconstruction alias syntax <code>{ a: b }</code> which is the binding I can use? If we add one more overload to the <code>{ ... }</code> it indeed will make things much harder to read.</p>\n<blockquote>\n<p><code>let val when Option.isSome</code></p>\n</blockquote>\n<p>At the first glance, this makes me think of rbuckton's unapply proposal. I'm much in favor of that form in the past, <code>let Option(val) = expr</code>. But after reading the whole document, I'm worried about if unapply syntax could cover all the abilities in Yulia's document.</p>\n<p>It's late 1 am here so my brain is not very clear and this whole document+conversation is a lot of information for me. I like Yulia's new design, it <em>does</em> solve some concerns from the JSCIG meeting. Please consider it seriously.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I read the whole document and the alternative repo Yulia sent.\n\n> what is the benefit to doing it in multiple steps? That’s how we did classes, and imo that was a mistake\n\nYulia means: Do it in multiple steps but **ship it at once**. It does not the same as what we did in the classes. I already see this stratagem in the Module Loader proposals group, and that looks promising.\nhttps://github.com/tc39/proposal-compartments/pull/71/files\n\n> dropped a bomb the day before plenary\n\nif something is doing wrong, we should not continue if we're just \"close to the meeting\", anyway I don't mean the current proposal is \"doing wrong\", but I believe Yulia's concern is worth more re-consideration.\n\n> Assignment, test, aliasing\n\nI never think of this problem before because I'm very familiar with the status quo proposal, but once Yulia pointed this out, I agree this is a serious problem we need to reconsider.\nEven with today's JavaScript, I am sometimes confused in the deconstruction alias syntax `{ a: b }` which is the binding I can use? If we add one more overload to the `{ ... }` it indeed will make things much harder to read.\n\n> `let val when Option.isSome`\n\nAt the first glance, this makes me think of rbuckton's unapply proposal. I'm much in favor of that form in the past, `let Option(val) = expr`. But after reading the whole document, I'm worried about if unapply syntax could cover all the abilities in Yulia's document.\n\nIt's late 1 am here so my brain is not very clear and this whole document+conversation is a lot of information for me. I like Yulia's new design, it _does_ solve some concerns from the JSCIG meeting. Please consider it seriously.","mimetype":"text/plain"},{"body":"<p>I read the whole document and the alternative repo Yulia sent.</p>\n<blockquote>\n<p>what is the benefit to doing it in multiple steps? That’s how we did classes, and imo that was a mistake</p>\n</blockquote>\n<p>Yulia means: Do it in multiple steps but <strong>ship it at once</strong>. It does not the same as what we did in the classes. I already see this stratagem in the Module Loader proposals group, and that looks promising.<br>https://github.com/tc39/proposal-compartments/pull/71/files</p>\n<blockquote>\n<p>dropped a bomb the day before plenary</p>\n</blockquote>\n<p>if something is doing wrong, we should not continue if we're just &quot;close to the meeting&quot;, anyway I don't mean the current proposal is &quot;doing wrong&quot;, but I believe Yulia's concern is worth more re-consideration.</p>\n<blockquote>\n<p>Assignment, test, aliasing</p>\n</blockquote>\n<p>I never think of this problem before because I'm very familiar with the status quo proposal, but once Yulia pointed this out, I agree this is a serious problem we need to reconsider.<br>Even with today's JavaScript, I am sometimes confused in the deconstruction alias syntax <code>{ a: b }</code> which is the binding I can use? If we add one more overload to the <code>{ ... }</code> it indeed will make things much harder to read.</p>\n<blockquote>\n<p><code>let val when Option.isSome</code></p>\n</blockquote>\n<p>At the first glance, this makes me think of rbuckton's unapply proposal. I'm much in favor of that form in the past, <code>let Option(val) = expr</code>. But after reading the whole document, I'm worried about if unapply syntax could cover all the abilities in Yulia's document.</p>\n<p>It's late 1 am here so my brain is not very clear and this whole document+conversation is a lot of information for me. I like Yulia's new design, it <em>does</em> solve some concerns from the JSCIG meeting. Please consider it seriously.</p>\n","mimetype":"text/html"}]},"ts":1658164808776,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$67Vx3lJCnohE_KuLaGgaDT6ZHOOPongb4EkduQkPatE"},
{"content":{"body":"(I also send it to average-level friends who knows the current proposal, and here is the reply)","msgtype":"m.text","org.matrix.msc1767.text":"(I also send it to average-level friends who knows the current proposal, and here is the reply)"},"ts":1658164986248,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$mYpNH94AADm1nSC0-xTBDmlDswlnpq_fDEFLL3XXYAk"},
{"content":{"body":"Translation: I don't know too much about his concern (test & assignment, ...), but as a normal user, excepts  `isOk` and `maybeRetry.bind(this)`. I agree Yulia's version is much readable.","format":"org.matrix.custom.html","formatted_body":"Translation: I don't know too much about his concern (test &amp; assignment, ...), but as a normal user, excepts  <code>isOk</code> and <code>maybeRetry.bind(this)</code>. I agree Yulia's version is much readable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Translation: I don't know too much about his concern (test & assignment, ...), but as a normal user, excepts  `isOk` and `maybeRetry.bind(this)`. I agree Yulia's version is much readable.","mimetype":"text/plain"},{"body":"Translation: I don't know too much about his concern (test &amp; assignment, ...), but as a normal user, excepts  <code>isOk</code> and <code>maybeRetry.bind(this)</code>. I agree Yulia's version is much readable.","mimetype":"text/html"}]},"ts":1658165065605,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$cQlM0pqJ5UP5hcNMM15N1a5-ei88YrWuGNgKsM7Ct6c"},
{"content":{"body":"(I'm gonnna sleeep","msgtype":"m.text","org.matrix.msc1767.text":"(I'm gonnna sleeep"},"ts":1658165097671,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$yBgJytfHynvpTi3xQu4MPxH2Gu5YeGJO8Nl3wafNIv0"},
{"content":{"body":"yes - we don't want to use instanceof semantics, because we want to support builtins cross-realm","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"yes - we don't want to use instanceof semantics, because we want to support builtins cross-realm"},"ts":1658165378354,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j6J4hzYLXyVe5aqmgsGA-WixX_eRvZpDt5HNVOL3jgY"},
{"content":{"body":"> <@ljharb:matrix.org> yes - we don't want to use instanceof semantics, because we want to support builtins cross-realm\n\nI'm not sure how this behavior is any better? It still does a reference comparison for constructor. I'm not sure I'm a fan of wildly divergent behavior since it breaks expectations. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$j6J4hzYLXyVe5aqmgsGA-WixX_eRvZpDt5HNVOL3jgY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />yes - we don't want to use instanceof semantics, because we want to support builtins cross-realm</blockquote></mx-reply>I'm not sure how this behavior is any better? It still does a reference comparison for constructor. I'm not sure I'm a fan of wildly divergent behavior since it breaks expectations.","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$j6J4hzYLXyVe5aqmgsGA-WixX_eRvZpDt5HNVOL3jgY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1658165995203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SXQGuViB75HuYhGyq7pSDGV-DJ-5J3dNkBKeTKJhGcY"},
{"content":{"body":"only if the expectation is that it's instanceof semantics, which is highly undesired","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$SXQGuViB75HuYhGyq7pSDGV-DJ-5J3dNkBKeTKJhGcY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"only if the expectation is that it's instanceof semantics, which is highly undesired"},"ts":1658166457418,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b6BvIF5ZPX-TyoxeNOpJ-yaj76QEvVIesiEEGEgMWaA"},
{"content":{"body":"you should be able to do `${Map}` and match against Map (or subclass) instances from any realm","format":"org.matrix.custom.html","formatted_body":"you should be able to do <code>${Map}</code> and match against Map (or subclass) instances from any realm","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$SXQGuViB75HuYhGyq7pSDGV-DJ-5J3dNkBKeTKJhGcY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you should be able to do `${Map}` and match against Map (or subclass) instances from any realm","mimetype":"text/plain"},{"body":"you should be able to do <code>${Map}</code> and match against Map (or subclass) instances from any realm","mimetype":"text/html"}]},"ts":1658166478535,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jW6JxEkIZZxfQk2ZH5Sri13H3wS3vrmxOcoAK2Vk0F0"},
{"content":{"body":"instanceof is broken; we shouldn't propagate that breakage further","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$SXQGuViB75HuYhGyq7pSDGV-DJ-5J3dNkBKeTKJhGcY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"instanceof is broken; we shouldn't propagate that breakage further"},"ts":1658166491995,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZtREbXohtFAyZrAQoA2NLizeqzZ2l3Za1lyNSo4wmH8"},
{"content":{"body":"fwiw i'd probably be fine calling `Symbol.hasInstance` on non-builtin constructors when present; that doesn't hurt anything","format":"org.matrix.custom.html","formatted_body":"fwiw i'd probably be fine calling <code>Symbol.hasInstance</code> on non-builtin constructors when present; that doesn't hurt anything","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$SXQGuViB75HuYhGyq7pSDGV-DJ-5J3dNkBKeTKJhGcY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"fwiw i'd probably be fine calling `Symbol.hasInstance` on non-builtin constructors when present; that doesn't hurt anything","mimetype":"text/plain"},{"body":"fwiw i'd probably be fine calling <code>Symbol.hasInstance</code> on non-builtin constructors when present; that doesn't hurt anything","mimetype":"text/html"}]},"ts":1658166548807,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nlYi4esOvnaAgoytWfs2RSg-jK0C6rlBCUtuhrmNpic"},
{"content":{"body":"> <@ljharb:matrix.org> instanceof is broken; we shouldn't propagate that breakage further\n\nUnless you're proposing a solution that works across the board, I don't agree that this should differ except in specific cases. i.e., I'm fine if it differs slightly for builtins (Object, Array, Function, Map, Set, Promise, etc.) but not for user constructors. I have code that wouldn't be able to use `match` if you use `obj.constructor === Foo`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$ZtREbXohtFAyZrAQoA2NLizeqzZ2l3Za1lyNSo4wmH8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>instanceof is broken; we shouldn&#39;t propagate that breakage further</blockquote></mx-reply>Unless you're proposing a solution that works across the board, I don't agree that this should differ except in specific cases. i.e., I'm fine if it differs slightly for builtins (Object, Array, Function, Map, Set, Promise, etc.) but not for user constructors. I have code that wouldn't be able to use <code>match</code> if you use <code>obj.constructor === Foo</code>","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","m.in_reply_to":{"event_id":"$ZtREbXohtFAyZrAQoA2NLizeqzZ2l3Za1lyNSo4wmH8"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> instanceof is broken; we shouldn't propagate that breakage further\n\nUnless you're proposing a solution that works across the board, I don't agree that this should differ except in specific cases. i.e., I'm fine if it differs slightly for builtins (Object, Array, Function, Map, Set, Promise, etc.) but not for user constructors. I have code that wouldn't be able to use `match` if you use `obj.constructor === Foo`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$ZtREbXohtFAyZrAQoA2NLizeqzZ2l3Za1lyNSo4wmH8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>instanceof is broken; we shouldn&#39;t propagate that breakage further</blockquote></mx-reply>Unless you're proposing a solution that works across the board, I don't agree that this should differ except in specific cases. i.e., I'm fine if it differs slightly for builtins (Object, Array, Function, Map, Set, Promise, etc.) but not for user constructors. I have code that wouldn't be able to use <code>match</code> if you use <code>obj.constructor === Foo</code>","mimetype":"text/html"}]},"ts":1658168208087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EPD-k29l8fnRpPZW-hmVzZuH6mtasoEQ9NpSY_FIVME"},
{"content":{"body":"do you use hasInstance to make that work?","m.relates_to":{"event_id":"$y6Pe8QV8xhifyt2crqgirVyJhPRx-CJjjKUax6lUsVg","is_falling_back":true,"m.in_reply_to":{"event_id":"$EPD-k29l8fnRpPZW-hmVzZuH6mtasoEQ9NpSY_FIVME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1658168332487,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SCSyi3qOKHy5dqKN7bwA7glaSUqQ5X1Yd8EGfMUaQ0g"},
{"content":{"body":"The issue is a case like this:\n\n```js\nexport class Base {\n  ...\n  static create() {\n    const somethingInternal = ...;\n    return new Derived(somethingInternal);\n  }\n}\n// I only want the module to be able to create instances of Derived to protect/isolate `somethingInternal`\nclass Derived extends Base {\n  constructor(somethingInternal) {\n    super();\n    // use somethingInternal\n  }\n}\n\n// Don't allow consumers to create new instances of Derived by walking the prototype chain:\nDerived.prototype.constructor = Base;\n\n// works\nBase.create() instanceof Base; // true\nBase.create() instanceof Derived; // true\n\n// wouldn't work\nmatch (Base.create()) {\n  when ${Derived}: ...; // doesn't work because obj.constructor is never `Derived`\n  when ${Base}: ...; // works\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The issue is a case like this:</p>\n<pre><code class=\"language-js\">export class Base {\n  ...\n  static create() {\n    const somethingInternal = ...;\n    return new Derived(somethingInternal);\n  }\n}\n// I only want the module to be able to create instances of Derived to protect/isolate `somethingInternal`\nclass Derived extends Base {\n  constructor(somethingInternal) {\n    super();\n    // use somethingInternal\n  }\n}\n\n// Don't allow consumers to create new instances of Derived by walking the prototype chain:\nDerived.prototype.constructor = Base;\n\n// works\nBase.create() instanceof Base; // true\nBase.create() instanceof Derived; // true\n\n// wouldn't work\nmatch (Base.create()) {\n  when ${Derived}: ...; // doesn't work because obj.constructor is never `Derived`\n  when ${Base}: ...; // works\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The issue is a case like this:\n\n```js\nexport class Base {\n  ...\n  static create() {\n    const somethingInternal = ...;\n    return new Derived(somethingInternal);\n  }\n}\n// I only want the module to be able to create instances of Derived to protect/isolate `somethingInternal`\nclass Derived extends Base {\n  constructor(somethingInternal) {\n    super();\n    // use somethingInternal\n  }\n}\n\n// Don't allow consumers to create new instances of Derived by walking the prototype chain:\nDerived.prototype.constructor = Base;\n\n// works\nBase.create() instanceof Base; // true\nBase.create() instanceof Derived; // true\n\n// wouldn't work\nmatch (Base.create()) {\n  when ${Derived}: ...; // doesn't work because obj.constructor is never `Derived`\n  when ${Base}: ...; // works\n}\n```","mimetype":"text/plain"},{"body":"<p>The issue is a case like this:</p>\n<pre><code class=\"language-js\">export class Base {\n  ...\n  static create() {\n    const somethingInternal = ...;\n    return new Derived(somethingInternal);\n  }\n}\n// I only want the module to be able to create instances of Derived to protect/isolate `somethingInternal`\nclass Derived extends Base {\n  constructor(somethingInternal) {\n    super();\n    // use somethingInternal\n  }\n}\n\n// Don't allow consumers to create new instances of Derived by walking the prototype chain:\nDerived.prototype.constructor = Base;\n\n// works\nBase.create() instanceof Base; // true\nBase.create() instanceof Derived; // true\n\n// wouldn't work\nmatch (Base.create()) {\n  when ${Derived}: ...; // doesn't work because obj.constructor is never `Derived`\n  when ${Base}: ...; // works\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1658169604353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jmNtnbLN2ew1wuvAnTLAF4BZ9o62xy94B2NMz4L9mOI"},
{"content":{"body":"i suppose we could compare the [[Prototype]] of the instance to the .prototype of the constructor for non-builtin constructors, and that would match instanceof. but realistically i think in this case you'd want to add a custom matcher anyways","msgtype":"m.text","org.matrix.msc1767.text":"i suppose we could compare the [[Prototype]] of the instance to the .prototype of the constructor for non-builtin constructors, and that would match instanceof. but realistically i think in this case you'd want to add a custom matcher anyways"},"ts":1658175285529,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_YZAk2v4Ken-BwHxCDc5wDlsiroiYQEygee3FVYMabI"},
{"content":{"body":"Your suggestion is to add a custom matcher that just does this:\n\n```js\nclass Derived extends Base {\n  static [Symbol.matcher](obj) { return obj instanceof this; }\n}\n```\n\nWhich is, I imagine, what folks would have expected to happen to begin with. I agree that `instanceof` semantics are often bad, but they're what we have in JS. Having `match` do something different without introducing a simple infix operator that does the same seems like a bad idea. The JS community has long had to fight with the idiosyncrasies of `instanceof` and `typeof`, but I'm not sure `match` is the place where we \"fix\" them? It just makes it inconsistent.","format":"org.matrix.custom.html","formatted_body":"<p>Your suggestion is to add a custom matcher that just does this:</p>\n<pre><code class=\"language-js\">class Derived extends Base {\n  static [Symbol.matcher](obj) { return obj instanceof this; }\n}\n</code></pre>\n<p>Which is, I imagine, what folks would have expected to happen to begin with. I agree that <code>instanceof</code> semantics are often bad, but they're what we have in JS. Having <code>match</code> do something different without introducing a simple infix operator that does the same seems like a bad idea. The JS community has long had to fight with the idiosyncrasies of <code>instanceof</code> and <code>typeof</code>, but I'm not sure <code>match</code> is the place where we &quot;fix&quot; them? It just makes it inconsistent.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Your suggestion is to add a custom matcher that just does this:\n\n```js\nclass Derived extends Base {\n  static [Symbol.matcher](obj) { return obj instanceof this; }\n}\n```\n\nWhich is, I imagine, what folks would have expected to happen to begin with. I agree that `instanceof` semantics are often bad, but they're what we have in JS. Having `match` do something different without introducing a simple infix operator that does the same seems like a bad idea. The JS community has long had to fight with the idiosyncrasies of `instanceof` and `typeof`, but I'm not sure `match` is the place where we \"fix\" them? It just makes it inconsistent.","mimetype":"text/plain"},{"body":"<p>Your suggestion is to add a custom matcher that just does this:</p>\n<pre><code class=\"language-js\">class Derived extends Base {\n  static [Symbol.matcher](obj) { return obj instanceof this; }\n}\n</code></pre>\n<p>Which is, I imagine, what folks would have expected to happen to begin with. I agree that <code>instanceof</code> semantics are often bad, but they're what we have in JS. Having <code>match</code> do something different without introducing a simple infix operator that does the same seems like a bad idea. The JS community has long had to fight with the idiosyncrasies of <code>instanceof</code> and <code>typeof</code>, but I'm not sure <code>match</code> is the place where we &quot;fix&quot; them? It just makes it inconsistent.</p>\n","mimetype":"text/html"}]},"ts":1658182273200,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wd9xHkr6KMWtQIESWBirJW60PlGAVJ-EC569WKdDWWU"},
{"content":{"body":"We could just as easily have made `Symbol.hasInstance` on built-ins support `instanceof` cross-realm, or potentially introduced an infix `is` as an `instanceof` replacement.","format":"org.matrix.custom.html","formatted_body":"We could just as easily have made <code>Symbol.hasInstance</code> on built-ins support <code>instanceof</code> cross-realm, or potentially introduced an infix <code>is</code> as an <code>instanceof</code> replacement.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could just as easily have made `Symbol.hasInstance` on built-ins support `instanceof` cross-realm, or potentially introduced an infix `is` as an `instanceof` replacement.","mimetype":"text/plain"},{"body":"We could just as easily have made <code>Symbol.hasInstance</code> on built-ins support <code>instanceof</code> cross-realm, or potentially introduced an infix <code>is</code> as an <code>instanceof</code> replacement.","mimetype":"text/html"}]},"ts":1658182338041,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v1GU_R4hBk83i2CLDOAho390UApuQctFWowGAZICZfA"},
{"content":{"body":"C#'s `is` is also a pattern-matching expression, though with a limited subset of C#'s pattern matching dialect.","format":"org.matrix.custom.html","formatted_body":"C#'s <code>is</code> is also a pattern-matching expression, though with a limited subset of C#'s pattern matching dialect.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"C#'s `is` is also a pattern-matching expression, though with a limited subset of C#'s pattern matching dialect.","mimetype":"text/plain"},{"body":"C#'s <code>is</code> is also a pattern-matching expression, though with a limited subset of C#'s pattern matching dialect.","mimetype":"text/html"}]},"ts":1658182484467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aqww4pgz7Z1RAqaXZTW6-3ZqtPVPdZbgJgJnpqnfx2o"},
{"content":{"body":"> <@rbuckton:matrix.org> We could just as easily have made `Symbol.hasInstance` on built-ins support `instanceof` cross-realm, or potentially introduced an infix `is` as an `instanceof` replacement.\n\nThough this is obviously a breaking change, a similar behavior could be introduced via something like:\n```js\nObject.crossRealmType = {\n  [Symbol.hasInstance](value) { return typeof value === \"object\"; }\n};\n\n...\n\nobj instanceof Object.crossRealmType; // uses `Symbol.hasInstance`\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$v1GU_R4hBk83i2CLDOAho390UApuQctFWowGAZICZfA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We could just as easily have made <code>Symbol.hasInstance</code> on built-ins support <code>instanceof</code> cross-realm, or potentially introduced an infix <code>is</code> as an <code>instanceof</code> replacement.</blockquote></mx-reply><p>Though this is obviously a breaking change, a similar behavior could be introduced via something like:</p>\n<pre><code class=\"language-js\">Object.crossRealmType = {\n  [Symbol.hasInstance](value) { return typeof value === &quot;object&quot;; }\n};\n\n...\n\nobj instanceof Object.crossRealmType; // uses `Symbol.hasInstance`\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$v1GU_R4hBk83i2CLDOAho390UApuQctFWowGAZICZfA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> We could just as easily have made `Symbol.hasInstance` on built-ins support `instanceof` cross-realm, or potentially introduced an infix `is` as an `instanceof` replacement.\n\nThough this is obviously a breaking change, a similar behavior could be introduced via something like:\n```js\nObject.crossRealmType = {\n  [Symbol.hasInstance](value) { return typeof value === \"object\"; }\n};\n\n...\n\nobj instanceof Object.crossRealmType; // uses `Symbol.hasInstance`\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$v1GU_R4hBk83i2CLDOAho390UApuQctFWowGAZICZfA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We could just as easily have made <code>Symbol.hasInstance</code> on built-ins support <code>instanceof</code> cross-realm, or potentially introduced an infix <code>is</code> as an <code>instanceof</code> replacement.</blockquote></mx-reply><p>Though this is obviously a breaking change, a similar behavior could be introduced via something like:</p>\n<pre><code class=\"language-js\">Object.crossRealmType = {\n  [Symbol.hasInstance](value) { return typeof value === &quot;object&quot;; }\n};\n\n...\n\nobj instanceof Object.crossRealmType; // uses `Symbol.hasInstance`\n</code></pre>\n","mimetype":"text/html"}]},"ts":1658182707493,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YcOhPNZEOhEaH1wWGIjqu_irwrnm5crMIvfAEpoZtww"},
{"content":{"body":"While it feels like `match` \"fixes\" the problems with `instanceof`, if its just a one-off solution that is inconsistent with the rest of the language it starts to feel like more of a wart than a solution a year or two down the line.","format":"org.matrix.custom.html","formatted_body":"While it feels like <code>match</code> &quot;fixes&quot; the problems with <code>instanceof</code>, if its just a one-off solution that is inconsistent with the rest of the language it starts to feel like more of a wart than a solution a year or two down the line.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"While it feels like `match` \"fixes\" the problems with `instanceof`, if its just a one-off solution that is inconsistent with the rest of the language it starts to feel like more of a wart than a solution a year or two down the line.","mimetype":"text/plain"},{"body":"While it feels like <code>match</code> &quot;fixes&quot; the problems with <code>instanceof</code>, if its just a one-off solution that is inconsistent with the rest of the language it starts to feel like more of a wart than a solution a year or two down the line.","mimetype":"text/html"}]},"ts":1658182942910,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$o6mRKuEtHegz4R5agK1XlBRDrpGhqA24KwmZG3KKlmc"},
{"content":{"body":"yes, and not doing so was another mistake - ES6 has many of them.","msgtype":"m.text","org.matrix.msc1767.text":"yes, and not doing so was another mistake - ES6 has many of them."},"ts":1658184608881,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sNZvrNMMmgADcWchox7s4kVpzvEnj_hHcAJG0LB7WGs"},
{"content":{"body":"For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","format":"org.matrix.custom.html","formatted_body":"For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","mimetype":"text/plain"},{"body":"For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","mimetype":"text/html"}]},"ts":1658184624123,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$068uRgQ9-L0OKN35JR8nUOK2mNd7k8rV5KedajFWexM"},
{"content":{"body":" * For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","format":"org.matrix.custom.html","formatted_body":" * For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","m.new_content":{"body":"For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","format":"org.matrix.custom.html","formatted_body":"For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","mimetype":"text/plain"},{"body":"For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$068uRgQ9-L0OKN35JR8nUOK2mNd7k8rV5KedajFWexM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For Map, for example, the check shouldn't match instanceof - it should match \"can i call `.get` etc on it\"","mimetype":"text/plain"},{"body":" * For Map, for example, the check shouldn't match instanceof - it should match &quot;can i call <code>.get</code> etc on it&quot;","mimetype":"text/html"}]},"ts":1658184626536,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D11HM5WNJ7C9Y1JK2faNlQl8p1JxqSndYPzQtx0xFxU"},
{"content":{"body":"that requires a brand check, and instanceof is both insufficient and provides false positives","msgtype":"m.text","org.matrix.msc1767.text":"that requires a brand check, and instanceof is both insufficient and provides false positives"},"ts":1658184649571,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$655eBqlSOAUg1u69RvBig8SrW30JwO30UGgEHlB_lDs"},
{"content":{"body":"I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","format":"org.matrix.custom.html","formatted_body":"<p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","mimetype":"text/plain"},{"body":"<p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$pjSq08TAKjShLqOfA5hZKzF5X8HwKBZtMdN6sPb0YNM"}}},"ts":1658187305272,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lNx5tO8nuvTZKQCEt35hfFp0w2iebva-udGFwebEc8c"},
{"content":{"body":"> <@ljharb:matrix.org> ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.\n\n * I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$pjSq08TAKjShLqOfA5hZKzF5X8HwKBZtMdN6sPb0YNM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.</blockquote></mx-reply> * <p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","m.new_content":{"body":"I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","format":"org.matrix.custom.html","formatted_body":"<p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","mimetype":"text/plain"},{"body":"<p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lNx5tO8nuvTZKQCEt35hfFp0w2iebva-udGFwebEc8c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.\n\n * I would concur with this position in the long term. \n\nI'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n\nPattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$pjSq08TAKjShLqOfA5hZKzF5X8HwKBZtMdN6sPb0YNM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ime education doesn’t benefit from multiple combinations of available features - it benefits from everything landing all at once. That’s why es6 is much easier to teach ime than the myriad of feature matrices since.</blockquote></mx-reply> * <p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n","mimetype":"text/html"}]},"ts":1658187373812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yWgOAPjmbxWxFOqdqighlUxXfkb3K0Jy-PSuw33TTx0"}
]