[
{"content":{"body":"The current semantics of `InvokeCustomMatcher` don't work well for extractors due to the `SameValueZero` and `SameValueNonNumber` semantics on steps 1 and 3. I would expect that steps 1 and 3 would return `false` when _kind_ is `~list~`, since a `Foo(x)` is invalid if `Foo` isn't a valid matcher since an iterator is expected.","format":"org.matrix.custom.html","formatted_body":"The current semantics of <code>InvokeCustomMatcher</code> don't work well for extractors due to the <code>SameValueZero</code> and <code>SameValueNonNumber</code> semantics on steps 1 and 3. I would expect that steps 1 and 3 would return <code>false</code> when <em>kind</em> is <code>~list~</code>, since a <code>Foo(x)</code> is invalid if <code>Foo</code> isn't a valid matcher since an iterator is expected.","m.mentions":{},"msgtype":"m.text"},"ts":1711464355780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1qCWGWUGVHZ_Ph4bg4nbYs5wi2oZeVY8L35NshB6mNI"},
{"content":{"body":"Also, step 10 and 11 say:\n> 10. Perform ? GetIteratorCached(_result_, _cacheGroup_).\n> 11. Return _result_.\n\nWhy are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse `InvokeCustomMatcher` it seems like I would need to do so.","format":"org.matrix.custom.html","formatted_body":"<p>Also, step 10 and 11 say:</p>\n<blockquote>\n<ol start=\"10\">\n<li>Perform ? GetIteratorCached(<em>result</em>, <em>cacheGroup</em>).</li>\n<li>Return <em>result</em>.</li>\n</ol>\n</blockquote>\n<p>Why are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse <code>InvokeCustomMatcher</code> it seems like I would need to do so.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1711465313465,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LwB_b0FchEos2pZ0LSWGLQJVUPjbBnCghoTaYFrzt7k"},
{"content":{"body":"We also still need to narrow down whether _receiver_ makes sense, or whether there are other ways to accommodate those cases (i.e., a getter returning a bound function, etc.). ","format":"org.matrix.custom.html","formatted_body":"We also still need to narrow down whether <em>receiver</em> makes sense, or whether there are other ways to accommodate those cases (i.e., a getter returning a bound function, etc.).","m.mentions":{},"msgtype":"m.text"},"ts":1711466217141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SFiUfObkle7bSRBtVcnkqaBJZYV57hs5lUSskNJ2UBg"},
{"content":{"body":"> <@rbuckton:matrix.org> The current semantics of `InvokeCustomMatcher` don't work well for extractors due to the `SameValueZero` and `SameValueNonNumber` semantics on steps 1 and 3. I would expect that steps 1 and 3 would return `false` when _kind_ is `~list~`, since a `Foo(x)` is invalid if `Foo` isn't a valid matcher since an iterator is expected.\n\nYes. It's a bug, actually it fails the spec assert \"Assert: listSubject is an Object.\". In the `~list~` mode, it should throw.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$1qCWGWUGVHZ_Ph4bg4nbYs5wi2oZeVY8L35NshB6mNI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The current semantics of <code>InvokeCustomMatcher</code> don't work well for extractors due to the <code>SameValueZero</code> and <code>SameValueNonNumber</code> semantics on steps 1 and 3. I would expect that steps 1 and 3 would return <code>false</code> when <em>kind</em> is <code>~list~</code>, since a <code>Foo(x)</code> is invalid if <code>Foo</code> isn't a valid matcher since an iterator is expected.</blockquote></mx-reply>Yes. It's a bug, actually it fails the spec assert \"Assert: listSubject is an Object.\". In the <code>~list~</code> mode, it should throw.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1qCWGWUGVHZ_Ph4bg4nbYs5wi2oZeVY8L35NshB6mNI"}},"msgtype":"m.text"},"ts":1711466338845,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MY9SDCMEXBp693lPQ4zRDqgyYAEMf-o7ipwG1uxamOk"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, step 10 and 11 say:\n> > 10. Perform ? GetIteratorCached(_result_, _cacheGroup_).\n> > 11. Return _result_.\n> \n> Why are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse `InvokeCustomMatcher` it seems like I would need to do so.\n\nOh it's another bug, there are some type mismatch here","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$LwB_b0FchEos2pZ0LSWGLQJVUPjbBnCghoTaYFrzt7k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Also, step 10 and 11 say:</p>\n<blockquote>\n<ol start=\"10\">\n<li>Perform ? GetIteratorCached(<em>result</em>, <em>cacheGroup</em>).</li>\n<li>Return <em>result</em>.</li>\n</ol>\n</blockquote>\n<p>Why are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse <code>InvokeCustomMatcher</code> it seems like I would need to do so.</p>\n</blockquote></mx-reply>Oh it's another bug, there are some type mismatch here","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LwB_b0FchEos2pZ0LSWGLQJVUPjbBnCghoTaYFrzt7k"}},"msgtype":"m.text"},"ts":1711466596595,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$gLG9yEyFhCemyG65OnFMkD5jhZxCFyR1te6n4bX3upQ"}
]