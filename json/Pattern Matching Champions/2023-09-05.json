[
{"content":{"body":"I started to edit spec and found there is something we need to figure out before we continue","msgtype":"m.text"},"ts":1693913957965,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nbNJslEkdQsPygjT34k021UB7SCs2kIV24a7yxQYUbc"},
{"content":{"body":"the current spec create a new DeclarativeEnvironment for each binding (https://tc39.es/proposal-pattern-matching/#sec-add-match-binding)","msgtype":"m.text"},"ts":1693914006621,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-7ymo5OkvsVuB2xkeTh9ISKNezC3qhZ9WJGa25fhD34"},
{"content":{"body":"to support `for` head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains","format":"org.matrix.custom.html","formatted_body":"to support <code>for</code> head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains","msgtype":"m.text"},"ts":1693914079914,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6yxWICLC_PF-mdKEHL7it1wE3hove-qfpnGCh4ANAj4"},
{"content":{"body":"this brings the question: how is the `let` `const` binding work inside a pattern.","format":"org.matrix.custom.html","formatted_body":"this brings the question: how is the <code>let</code> <code>const</code> binding work inside a pattern.","msgtype":"m.text"},"ts":1693914153805,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-nUKVnQIhFc9P6K70EQFosur8pQh-1IkaEaWkW2TckM"},
{"content":{"body":"for example, is `[1, let a] or [2, let a]` valid? or is it an early error?","format":"org.matrix.custom.html","formatted_body":"for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?","msgtype":"m.text"},"ts":1693914217502,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"},
{"content":{"body":"is every level of MatchPattern creates a DeclarationEnvironment?\n\n```\n{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n```","format":"org.matrix.custom.html","formatted_body":"<p>is every level of MatchPattern creates a DeclarationEnvironment?</p>\n<pre><code>{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n</code></pre>\n","msgtype":"m.text"},"ts":1693914543500,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU"},
{"content":{"body":"or only the top level MatchPattern creates a DeclarationEnvironment (in this case the previous example gives an early error)?","msgtype":"m.text"},"ts":1693914651644,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wAS_f38bmv1n7Pd4aNBI-baLHmBdA15WmLDwJ6B5e7Q"},
{"content":{"body":"what's the syntax when it is used in `for...of`?\n\n`for (const x is pattern of expr)`? `for (match pattern of expr)`?","format":"org.matrix.custom.html","formatted_body":"<p>what's the syntax when it is used in <code>for...of</code>?</p>\n<p><code>for (const x is pattern of expr)</code>? <code>for (match pattern of expr)</code>?</p>\n","msgtype":"m.text"},"ts":1693914797404,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kg4dr9lKWEDxBfl8J1ShDwZIn_6qFxprKGmrb618cMs"},
{"content":{"body":"> <@ljharb:matrix.org> eg, does pascal have the ability to produce bindings in expressions? what else does?\n\nPascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$fu1woDOGkxFGDFIe9uof9M3Z9lzpExcZmLJrgZNK3_I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>eg, does pascal have the ability to produce bindings in expressions? what else does?</blockquote></mx-reply>Pascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.","m.relates_to":{"m.in_reply_to":{"event_id":"$fu1woDOGkxFGDFIe9uof9M3Z9lzpExcZmLJrgZNK3_I"}},"msgtype":"m.text"},"ts":1693922467907,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UnTqAKTNYHGBD_XebKiS9mXfOj3AAoMIevEGMliirDQ"},
{"content":{"body":"> <@ljharb:matrix.org> and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic\n\nI have a very difficult time believing that something like this would be catastrophic. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$YzE7TuDZQRCK7xHlO-9MGtmB9K5d4pN6CbSi_0sslrc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can&#39;t conceive of what would convince me that that capability is anything short of catastrophic</blockquote></mx-reply>I have a very difficult time believing that something like this would be catastrophic.","m.relates_to":{"m.in_reply_to":{"event_id":"$YzE7TuDZQRCK7xHlO-9MGtmB9K5d4pN6CbSi_0sslrc"}},"msgtype":"m.text"},"ts":1693922519089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ"},
{"content":{"body":"> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?\n\nIn earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For `let` we could either error or possibly just reassign. For `const` we would probably error (unless maybe we tried to initialize it to the same value).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?</blockquote></mx-reply>In earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For <code>let</code> we could either error or possibly just reassign. For <code>const</code> we would probably error (unless maybe we tried to initialize it to the same value).","m.relates_to":{"m.in_reply_to":{"event_id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"}},"msgtype":"m.text"},"ts":1693922782659,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrfJfNfXs2nUD_f6rBsxj2L8an0hdoxkeO3JUUGxVhI"},
{"content":{"body":"> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?\n\nPersonally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to `[1 or 2, let a]`, but more complex disjunctions that don't share much of the same shape couldn't be simplified.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?</blockquote></mx-reply>Personally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to <code>[1 or 2, let a]</code>, but more complex disjunctions that don't share much of the same shape couldn't be simplified.","m.relates_to":{"m.in_reply_to":{"event_id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"}},"msgtype":"m.text"},"ts":1693922967359,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IB5OCUrCrhYKfZ_rzrKXXRxI4dGdbOnkX8KYwRoMfXc"},
{"content":{"body":"> <@jackworks:matrix.org> is every level of MatchPattern creates a DeclarationEnvironment?\n> \n> ```\n> { // level 1 DeclEnv\n>     let x,\n>     y: [ // level 2 DeclEnv\n>         let x, x\n>     ]\n> } // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n> ```\n\nWhy would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>is every level of MatchPattern creates a DeclarationEnvironment?</p>\n<pre><code>{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n</code></pre>\n</blockquote></mx-reply>Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for <code>let</code> and <code>const</code> bindings in <code>BoundNames</code>, and only need to create a single declarative environment for each <code>when</code> clause of <code>match</code>, or use the current declarative environment for <code>is</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU"}},"msgtype":"m.text"},"ts":1693923166864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ"},
{"content":{"body":"> <@rbuckton:matrix.org> I have a very difficult time believing that something like this would be catastrophic. \n\nwe can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I have a very difficult time believing that something like this would be catastrophic.</blockquote></mx-reply>we can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh","m.relates_to":{"m.in_reply_to":{"event_id":"$NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ"}},"msgtype":"m.text"},"ts":1693926087941,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZcOsEy-btFlt7kO5xoSs8YtYANzbVWk7Id7PCRR-WIo"},
{"content":{"body":"> <@rbuckton:matrix.org> Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.\n\nwe need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for <code>let</code> and <code>const</code> bindings in <code>BoundNames</code>, and only need to create a single declarative environment for each <code>when</code> clause of <code>match</code>, or use the current declarative environment for <code>is</code>.</blockquote></mx-reply>we need to decide if <code>is</code> can leak variable bindings. it will be a breaking change adding it in the future","m.relates_to":{"m.in_reply_to":{"event_id":"$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ"}},"msgtype":"m.text"},"ts":1693926282951,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ"},
{"content":{"body":"> <@jackworks:matrix.org> we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future\n\nMy intent with `is` is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate `if let`/`while let` with `is`, which is one of the key capabilities:\n\n```\nif (x is Option.Some(let value)) {\n  value;\n}\n\nconst y = x is Option.Some(let value) ? value + 1 : 0;\n```\nIf the `let` is only visible within the pattern itself, it makes it useless as a destructuring mechanism.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need to decide if <code>is</code> can leak variable bindings. it will be a breaking change adding it in the future</blockquote></mx-reply><p>My intent with <code>is</code> is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate <code>if let</code>/<code>while let</code> with <code>is</code>, which is one of the key capabilities:</p>\n<pre><code>if (x is Option.Some(let value)) {\n  value;\n}\n\nconst y = x is Option.Some(let value) ? value + 1 : 0;\n</code></pre>\n<p>If the <code>let</code> is only visible within the pattern itself, it makes it useless as a destructuring mechanism.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ"}},"msgtype":"m.text"},"ts":1693928516115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3J_AhzD4HFgkWmU2-omFMKQOXuKtvAKDMK2n1umS_ZQ"},
{"content":{"body":"i think there's specific places it makes sense. an if conditional making bindings available in the block is good. a ternary conditional making bindings available in the positive branch is good too","msgtype":"m.text"},"ts":1693932033205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QBat0UJ9ZTvbbBUlSaSiRRkCar2nvDDCpMJHrAbQrcs"},
{"content":{"body":"but `;x is Option.some(let value);` making bindings available outside the pattern seems very very bad to me.","format":"org.matrix.custom.html","formatted_body":"but <code>;x is Option.some(let value);</code> making bindings available outside the pattern seems very very bad to me.","msgtype":"m.text"},"ts":1693932058143,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xMliTViMUkG6RxH7gg5NWZIECDJipgm6VxPukwEzL0E"},
{"content":{"body":"You can't have one without the other without introducing some new even more complex binding mechanism.","msgtype":"m.text"},"ts":1693932066593,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$btF_X6w9XKjMplnEkdvLTnIhXhRVdvQgrsnNeILDNvk"},
{"content":{"body":"i don't think that's true","msgtype":"m.text"},"ts":1693932074208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yeQkx4IA3Vg9E9FknQ5nK4q0XBtdT83nSWTaZgwtmQ4"},
{"content":{"body":"certainly it will make the spec trickier to write, but that's not important","msgtype":"m.text"},"ts":1693932091362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cve3ajqyJ7EDwJae0FtYR8Uxwyv-zX_bX73wZkP382g"},
{"content":{"body":"Bad maybe, but it will rarely be used in that way as its not the most convenient mechanism.","msgtype":"m.text"},"ts":1693932119714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DXDcrUI2iBr5sZKmM-VM4piTGi-PdzKyRXVxWkUJDkM"},
{"content":{"body":" * certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)","m.new_content":{"body":"certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)","msgtype":"m.text"},"m.relates_to":{"event_id":"$Cve3ajqyJ7EDwJae0FtYR8Uxwyv-zX_bX73wZkP382g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693932123341,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6mbgDjxrW9SIcdBX5CuuWM2uWBqTnsxgJdP0Tuy8ZQg"},
{"content":{"body":"i think it would also be bad if the ternary made the bindings available in the negative branch, to be clear","msgtype":"m.text"},"ts":1693932148854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$50Xa4ZTRcgM7JL756XQ6Asf-CQl-rN-jNxFgIxLAvaA"},
{"content":{"body":"I'd very much like to be able to have this capability.","msgtype":"m.text"},"ts":1693932157592,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UJvc3BmT-GuhFf5djKvDyiEOxjQS320eiKmr3MGe9-U"},
{"content":{"body":"i'd prefer bindings never be visible outside the pattern, over leaking bindings willy nilly","msgtype":"m.text"},"ts":1693932164548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J3X1MvMyqkL-ILOoHmiTdfJQIG7yA2kQsdhUsz16sSI"},
{"content":{"body":"The bindings in the negative branch would be uninitialized and thus in TDZ","msgtype":"m.text"},"ts":1693932176925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qiaura6z0TBoZVq1kYslhXcQFkX69TUy3ICK-sBs6HU"},
{"content":{"body":"not if they use `var`","format":"org.matrix.custom.html","formatted_body":"not if they use <code>var</code>","msgtype":"m.text"},"ts":1693932192899,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wKeoXh6CA5YIO8ROeEAp2c7N6JI_W7x2BtCQ5wyu4Sc"},
{"content":{"body":"Then don't support `var` for this feature. I think that's far more reasonable.","format":"org.matrix.custom.html","formatted_body":"Then don't support <code>var</code> for this feature. I think that's far more reasonable.","msgtype":"m.text"},"ts":1693932222892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NBoTS0Px5eshrytG52g2cjT4wgJKYrgNGszhtSJULJg"},
{"content":{"body":"And restricting this to only the true branch would break negation for cases like early exit:\n\n```\nif (!(x is Option.some(let value)) {\n  return; // nothing to do, exit early\n}\nvalue; // use 'value'\n```","format":"org.matrix.custom.html","formatted_body":"<p>And restricting this to only the true branch would break negation for cases like early exit:</p>\n<pre><code>if (!(x is Option.some(let value)) {\n  return; // nothing to do, exit early\n}\nvalue; // use 'value'\n</code></pre>\n","msgtype":"m.text"},"ts":1693932475337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n1QeyfGIWVkuWQQMANjDh9-rkG0MxGTdIYLayy--E6k"},
{"content":{"body":"(or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well.","format":"org.matrix.custom.html","formatted_body":"(or possibly even <code>if (x is not Option.some(let value)) { ... }</code> should we decide to make that work as well.","msgtype":"m.text"},"ts":1693932514882,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ucrsv-P8dqXZpMKjvm3GugI381h9V0Tku3e6uqmX41M"},
{"content":{"body":" * (or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well)","format":"org.matrix.custom.html","formatted_body":" * (or possibly even <code>if (x is not Option.some(let value)) { ... }</code> should we decide to make that work as well)","m.new_content":{"body":"(or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well)","format":"org.matrix.custom.html","formatted_body":"(or possibly even <code>if (x is not Option.some(let value)) { ... }</code> should we decide to make that work as well)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ucrsv-P8dqXZpMKjvm3GugI381h9V0Tku3e6uqmX41M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693932519723,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RVg7lUOavlDX4oT7y77mcUn_W38bsCRxFuV5bMMgm5A"},
{"content":{"body":"that only affects ternaries, not if's","msgtype":"m.text"},"ts":1693932933436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8eXi29PdIC7BvoHEYbN_PGf-2mQ69ltGSBYcsD0ogq8"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1693932938761,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$st1HKMnFnsy8OxBuo69OpLaRNt-c-cFVdKmxOXgbSPI"},
{"content":{"body":"well yeah, don't do that","msgtype":"m.text"},"ts":1693932942727,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fj11spWquCS5zX7TGGuKmUl8QP7DR6U1LkCfLz9gJvA"},
{"content":{"body":"you'd do `if (x not is Option.Some(let value)) { }`","format":"org.matrix.custom.html","formatted_body":"you'd do <code>if (x not is Option.Some(let value)) { }</code>","msgtype":"m.text"},"ts":1693932960491,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$looPQp4XF6ElGdjRSbTeyLLtFUOVYDUnj4b_NFnqJ2c"},
{"content":{"body":"What is `not is`? That's not proposed and doesn't read well, IMO.","format":"org.matrix.custom.html","formatted_body":"What is <code>not is</code>? That's not proposed and doesn't read well, IMO.","msgtype":"m.text"},"ts":1693932991046,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1tmBsivoZwbyha8UASoQlEwaek4aOAQcZliIUyYlZSM"},
{"content":{"body":"it's definitely supposed to be in the PR","msgtype":"m.text"},"ts":1693933007975,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7kGTNv84QmRdEigxcsSx5eXd1jS1R4cEEAvwCSBrptE"},
{"content":{"body":"Ternary and `if` shouldn't be treated differently.","format":"org.matrix.custom.html","formatted_body":"Ternary and <code>if</code> shouldn't be treated differently.","msgtype":"m.text"},"ts":1693933013467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3u2ZEwjP5YvjxB2gYxwmy3Sst15C0Y4kil4QmxVqfYw"},
{"content":{"body":"in this case they're the same.","msgtype":"m.text"},"ts":1693933023280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9yxDtbsuVSkUGLRQ3R28O9Lb74zSWqjoelQGjyKTKVI"},
{"content":{"body":"`is not` I would expect, since `not` is part of the pattern grammar. `not is` is not a part of the proposal, IIRC.","format":"org.matrix.custom.html","formatted_body":"<code>is not</code> I would expect, since <code>not</code> is part of the pattern grammar. <code>not is</code> is not a part of the proposal, IIRC.","msgtype":"m.text"},"ts":1693933034471,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-gyZ44DqKPZzAbql_0eOP571VWzrKBNATLey7kTd95Y"},
{"content":{"body":"oh ok, fair","msgtype":"m.text"},"ts":1693933040992,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W2tI3TUwssWO0EbgHqmoJAVCiZjA0gAyja_8GR-J_oA"},
{"content":{"body":"`is not`, sure","format":"org.matrix.custom.html","formatted_body":"<code>is not</code>, sure","msgtype":"m.text"},"ts":1693933043399,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PzkRwlxLq-vG2vISuwJLSMh0WCzeuO4O_hsWlBCC0V8"},
{"content":{"body":"either way you'd still only get the bindings in the positive branch","msgtype":"m.text"},"ts":1693933052117,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QRqOU3cHtlE_IG7bZFmFoldUDJAX1ik7MQzbsc14V_Y"},
{"content":{"body":"I think that's far too confusing.","msgtype":"m.text"},"ts":1693933070603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QIyqIEnJ_GxxMxWPEI_PNtECIhsxK7Ab363P7cdisKw"},
{"content":{"body":"i think anything else would be confusing.","msgtype":"m.text"},"ts":1693933090223,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FOz7bLsHU0WawTykedMHcCPAyct1Wxl9bgaxmbXfH4M"},
{"content":{"body":"fwiw the committee already discussed this with https://github.com/tc39/proposal-Declarations-in-Conditionals and i recall the majority thinking that it should only be visible in the `if`, but i might be remembering wrong","format":"org.matrix.custom.html","formatted_body":"fwiw the committee already discussed this with https://github.com/tc39/proposal-Declarations-in-Conditionals and i recall the majority thinking that it should only be visible in the <code>if</code>, but i might be remembering wrong","msgtype":"m.text"},"ts":1693933142512,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hyCd_sb2IRpQT6lf4ECWjYirvIKw3lT3FrOBv54pYrU"},
{"content":{"body":"Short-circuiting to avoid complex middle branches is a common practice, and you're proposing a mechanism that would force a specific style of coding. I'd like to be able to do this:\n\n```\nreturn x is not Option.Some(let value) ? \"no-value\" :\n  value === 1 ? \"single-value\" :\n  \"multiple-values\";\n```\n\nvs this:\n\n```\nreturn x is Option.Some(let value) ? \n    value === 1 ? \"single-value\" :\n    \"multiple-values\" :\n  \"no-value\";\n```\n\nAs the latter requires additional nesting that hampers readability, especially in more complex cases than is shown. Yes, `match` is an option, but this could be existing code that you're refactoring to use patterns.","format":"org.matrix.custom.html","formatted_body":"<p>Short-circuiting to avoid complex middle branches is a common practice, and you're proposing a mechanism that would force a specific style of coding. I'd like to be able to do this:</p>\n<pre><code>return x is not Option.Some(let value) ? \"no-value\" :\n  value === 1 ? \"single-value\" :\n  \"multiple-values\";\n</code></pre>\n<p>vs this:</p>\n<pre><code>return x is Option.Some(let value) ? \n    value === 1 ? \"single-value\" :\n    \"multiple-values\" :\n  \"no-value\";\n</code></pre>\n<p>As the latter requires additional nesting that hampers readability, especially in more complex cases than is shown. Yes, <code>match</code> is an option, but this could be existing code that you're refactoring to use patterns.</p>\n","msgtype":"m.text"},"ts":1693933280418,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6UB1DMsC0BhvmTDc_F-0YRvmxlgPStLxqkrPHvKAZYs"},
{"content":{"body":"we often have mechanisms that somewhat force specific styles of coding.","msgtype":"m.text"},"ts":1693933315497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CSjjg_pFKsOcTitqdyxIU5qVmh03F86Bf2MTEN7YPeI"},
{"content":{"body":"and nested ternaries are pretty widely considered horrifically unreadable.","msgtype":"m.text"},"ts":1693933329161,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hnO96wQrPOIlt4H9zSPouPnW7tftuEAwEm_s52WU_Ig"},
{"content":{"body":"I would very much like for this not to be one of them.","msgtype":"m.text"},"ts":1693933332982,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$akJvUdojLkVlMsqRaPjJO7VGBnsUCSa_Ok9lkoNmoKc"},
{"content":{"body":"do you have any compelling examples that don't use the comma operator or nested ternaries?","msgtype":"m.text"},"ts":1693933350084,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BXIf0St093_tp2PpqTtjuj0Z_nyO8JPVAb2tcNKHJjw"},
{"content":{"body":"Ternaries nested in the second example, yes. ternaries in the first example are far more readable.","msgtype":"m.text"},"ts":1693933354275,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wuV6qcG9TYn5PE5SVOK0TebTMg4bEozkyKOA2S3t5CA"},
{"content":{"body":"that's subjective, i don't find either of those readable.","msgtype":"m.text"},"ts":1693933365849,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E9vNhbM_dtcOAT9zbzZ8spZnwsMgcNXDOGZ_nIVRY6w"},
{"content":{"body":"not everything needs to be, or should be, a single expression","msgtype":"m.text"},"ts":1693933373922,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eSqHFo46Ppk7eael-TCxPvkbi2lyJvYaCCTHx8Z8yvk"},
{"content":{"body":" * not everything needs to be, or should be, a single expression/line","m.new_content":{"body":"not everything needs to be, or should be, a single expression/line","msgtype":"m.text"},"m.relates_to":{"event_id":"$eSqHFo46Ppk7eael-TCxPvkbi2lyJvYaCCTHx8Z8yvk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693933377280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cu_iWE6Z1nIfFmv364hYKBKo1_nZxeixspxumk5lid4"},
{"content":{"body":"Given that it is subjective, mandating a coding style that fits your perspective essentially invalidates everyone else's style. That's what linters are for.","msgtype":"m.text"},"ts":1693933429316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bTrAmKl3KVozJPm8hhn9QmAhOv5ZcB6M4D_JAQhA3j0"},
{"content":{"body":" * Given that it is subjective, mandating a coding style that fits a single perspective essentially invalidates everyone else's style. That's what linters are for.","m.new_content":{"body":"Given that it is subjective, mandating a coding style that fits a single perspective essentially invalidates everyone else's style. That's what linters are for.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bTrAmKl3KVozJPm8hhn9QmAhOv5ZcB6M4D_JAQhA3j0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693933448789,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Aqo30xziPEc8SKqFnEfmokOI8leFFm3u2LZCbYz4uQw"},
{"content":{"body":"it's not to mandate a coding style","msgtype":"m.text"},"ts":1693933520179,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yUS6d0KtACkgSliOBaRy8UvzME--sKOvijH0LFyQr80"},
{"content":{"body":"it's to ensure explicit and clear variable scopes","msgtype":"m.text"},"ts":1693933527876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nvdiFLVg5kUEipJ84EWXuM0RIX3nBaq2Y1OOQFqOgyw"},
{"content":{"body":"if some coding styles don't work with that, that's fine, they just don't work with that","msgtype":"m.text"},"ts":1693933540093,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wy6bQPNzGrt717UXF-L59NZbI4rkbKH6N8s3I8OgnKQ"},
{"content":{"body":"There are plenty of examples that wouldn't use ternaries. I showed one earlier:\n\n```\nfunction getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {\n    return getTypeOfPropertyOfType(type, name) ||\n        (getApplicableIndexInfoForName(type, name) is { type: const propType } &&\n            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));\n}\n```\n\n\n","format":"org.matrix.custom.html","formatted_body":"<p>There are plenty of examples that wouldn't use ternaries. I showed one earlier:</p>\n<pre><code>function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {\n    return getTypeOfPropertyOfType(type, name) ||\n        (getApplicableIndexInfoForName(type, name) is { type: const propType } &amp;&amp;\n            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1693933547335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WjIXE-mmvwxoPy9YHfbfn_d5_yzSjZDCl9IoiZdZKPw"},
{"content":{"body":"and personally i find that very unreadable and would not try to do that in a single return statement","msgtype":"m.text"},"ts":1693933566632,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Stkdz1AuDnD4f8xXPSGEBsE427KAU7zezeRShYaHdXQ"},
{"content":{"body":"This proposal still maintains explicit variable scopes, and it is the same scoping mechanism we already have: block scoping. Introducing a _new_ scoping mechanism would be confusing.","format":"org.matrix.custom.html","formatted_body":"This proposal still maintains explicit variable scopes, and it is the same scoping mechanism we already have: block scoping. Introducing a <em>new</em> scoping mechanism would be confusing.","msgtype":"m.text"},"ts":1693933593165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uePoR_oTVg7EZmhOjYhf2tjZIQWJxv6ftrJoRi3GDbY"},
{"content":{"body":"but please remember that both the vscode and typescript codebases are not in any way common or idiomatic for the JS ecosystem, so style arguments coming from them aren't very compelling to me.","msgtype":"m.text"},"ts":1693933596977,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZcukSZdFND5OO_sclNpCFdFSj9pl4usL_2ZzsSKFufo"},
{"content":{"body":"This is a style preference that many projects have made, especially FP-style projects.","msgtype":"m.text"},"ts":1693933633621,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9R4gVfKcida56fZYjg2FG4HJ2SbF6rveUSu3Dct9RoI"},
{"content":{"body":"an expression can't produce bindings, and adding that capability is something that would need to be its own proposal. trying to do that here would tank both efforts.","msgtype":"m.text"},"ts":1693933639087,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SLf_wnrJA16YslyVV0jJuLV-T8dKCI04_g8mpeF_Q4E"},
{"content":{"body":"i realize that we wouldn't necessarily be able to add it later to `is`, which makes it tricky, but that doesn't mean we can add it now either","format":"org.matrix.custom.html","formatted_body":"i realize that we wouldn't necessarily be able to add it later to <code>is</code>, which makes it tricky, but that doesn't mean we can add it now either","msgtype":"m.text"},"ts":1693933672615,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RuOB8tqTKbhqs4NCM95QRAlSxpQ0_5nVD3KlcoLWVSs"},
{"content":{"body":"I don't believe that it would, and I think this is the correct proposal to discuss this.","msgtype":"m.text"},"ts":1693933711430,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L3eTOb9T61GemKBKrOkZlpB2-8AWLJ-W24ghP3i_Tsk"},
{"content":{"body":"i think you are severely underestimating the reaction to this aspect of the proposal.","msgtype":"m.text"},"ts":1693933763158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d4xJxzQC9xIllTJFP5zcQdZioTotPDlNyj9ugJ891ZE"},
{"content":{"body":"I'd be happier if we _also_ had a specific expression form similar to `let..in`, which is more explicitly tailored to that case, but that wouldn't mean that `let` patterns in `is` aren't valid.","format":"org.matrix.custom.html","formatted_body":"I'd be happier if we <em>also</em> had a specific expression form similar to <code>let..in</code>, which is more explicitly tailored to that case, but that wouldn't mean that <code>let</code> patterns in <code>is</code> aren't valid.","msgtype":"m.text"},"ts":1693933784181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HhWf41eKdvKXSKeV1D-aWkgtokKZIO2CoxyU8y47eZw"},
{"content":{"body":"i can tell you if i weren't a champion of pattern matching i'd die on the hill of not allowing it. as it is, i won't block on that but i would bet money others will.","msgtype":"m.text"},"ts":1693933789189,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m3T2RBDusEEPnDRgFUm4WvF2AC_FKdMQFfNEqhZK8vo"}
]