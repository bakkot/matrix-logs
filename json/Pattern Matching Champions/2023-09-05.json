[
{"content":{"body":"I started to edit spec and found there is something we need to figure out before we continue","msgtype":"m.text"},"ts":1693913957965,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nbNJslEkdQsPygjT34k021UB7SCs2kIV24a7yxQYUbc"},
{"content":{"body":"the current spec create a new DeclarativeEnvironment for each binding (https://tc39.es/proposal-pattern-matching/#sec-add-match-binding)","msgtype":"m.text"},"ts":1693914006621,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-7ymo5OkvsVuB2xkeTh9ISKNezC3qhZ9WJGa25fhD34"},
{"content":{"body":"to support `for` head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains","format":"org.matrix.custom.html","formatted_body":"to support <code>for</code> head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains","msgtype":"m.text"},"ts":1693914079914,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6yxWICLC_PF-mdKEHL7it1wE3hove-qfpnGCh4ANAj4"},
{"content":{"body":"this brings the question: how is the `let` `const` binding work inside a pattern.","format":"org.matrix.custom.html","formatted_body":"this brings the question: how is the <code>let</code> <code>const</code> binding work inside a pattern.","msgtype":"m.text"},"ts":1693914153805,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-nUKVnQIhFc9P6K70EQFosur8pQh-1IkaEaWkW2TckM"},
{"content":{"body":"for example, is `[1, let a] or [2, let a]` valid? or is it an early error?","format":"org.matrix.custom.html","formatted_body":"for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?","msgtype":"m.text"},"ts":1693914217502,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"},
{"content":{"body":"is every level of MatchPattern creates a DeclarationEnvironment?\n\n```\n{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n```","format":"org.matrix.custom.html","formatted_body":"<p>is every level of MatchPattern creates a DeclarationEnvironment?</p>\n<pre><code>{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n</code></pre>\n","msgtype":"m.text"},"ts":1693914543500,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU"},
{"content":{"body":"or only the top level MatchPattern creates a DeclarationEnvironment (in this case the previous example gives an early error)?","msgtype":"m.text"},"ts":1693914651644,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wAS_f38bmv1n7Pd4aNBI-baLHmBdA15WmLDwJ6B5e7Q"},
{"content":{"body":"what's the syntax when it is used in `for...of`?\n\n`for (const x is pattern of expr)`? `for (match pattern of expr)`?","format":"org.matrix.custom.html","formatted_body":"<p>what's the syntax when it is used in <code>for...of</code>?</p>\n<p><code>for (const x is pattern of expr)</code>? <code>for (match pattern of expr)</code>?</p>\n","msgtype":"m.text"},"ts":1693914797404,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kg4dr9lKWEDxBfl8J1ShDwZIn_6qFxprKGmrb618cMs"},
{"content":{"body":"> <@ljharb:matrix.org> eg, does pascal have the ability to produce bindings in expressions? what else does?\n\nPascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$fu1woDOGkxFGDFIe9uof9M3Z9lzpExcZmLJrgZNK3_I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>eg, does pascal have the ability to produce bindings in expressions? what else does?</blockquote></mx-reply>Pascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.","m.relates_to":{"m.in_reply_to":{"event_id":"$fu1woDOGkxFGDFIe9uof9M3Z9lzpExcZmLJrgZNK3_I"}},"msgtype":"m.text"},"ts":1693922467907,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UnTqAKTNYHGBD_XebKiS9mXfOj3AAoMIevEGMliirDQ"},
{"content":{"body":"> <@ljharb:matrix.org> and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic\n\nI have a very difficult time believing that something like this would be catastrophic. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$YzE7TuDZQRCK7xHlO-9MGtmB9K5d4pN6CbSi_0sslrc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can&#39;t conceive of what would convince me that that capability is anything short of catastrophic</blockquote></mx-reply>I have a very difficult time believing that something like this would be catastrophic.","m.relates_to":{"m.in_reply_to":{"event_id":"$YzE7TuDZQRCK7xHlO-9MGtmB9K5d4pN6CbSi_0sslrc"}},"msgtype":"m.text"},"ts":1693922519089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ"},
{"content":{"body":"> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?\n\nIn earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For `let` we could either error or possibly just reassign. For `const` we would probably error (unless maybe we tried to initialize it to the same value).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?</blockquote></mx-reply>In earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For <code>let</code> we could either error or possibly just reassign. For <code>const</code> we would probably error (unless maybe we tried to initialize it to the same value).","m.relates_to":{"m.in_reply_to":{"event_id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"}},"msgtype":"m.text"},"ts":1693922782659,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrfJfNfXs2nUD_f6rBsxj2L8an0hdoxkeO3JUUGxVhI"},
{"content":{"body":"> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?\n\nPersonally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to `[1 or 2, let a]`, but more complex disjunctions that don't share much of the same shape couldn't be simplified.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>for example, is <code>[1, let a] or [2, let a]</code> valid? or is it an early error?</blockquote></mx-reply>Personally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to <code>[1 or 2, let a]</code>, but more complex disjunctions that don't share much of the same shape couldn't be simplified.","m.relates_to":{"m.in_reply_to":{"event_id":"$csJ5ELeTHbwTjT5PTDn4DSoRectZXWh-NKnshKOe4T0"}},"msgtype":"m.text"},"ts":1693922967359,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IB5OCUrCrhYKfZ_rzrKXXRxI4dGdbOnkX8KYwRoMfXc"},
{"content":{"body":"> <@jackworks:matrix.org> is every level of MatchPattern creates a DeclarationEnvironment?\n> \n> ```\n> { // level 1 DeclEnv\n>     let x,\n>     y: [ // level 2 DeclEnv\n>         let x, x\n>     ]\n> } // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n> ```\n\nWhy would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>is every level of MatchPattern creates a DeclarationEnvironment?</p>\n<pre><code>{ // level 1 DeclEnv\n    let x,\n    y: [ // level 2 DeclEnv\n        let x, x\n    ]\n} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?\n</code></pre>\n</blockquote></mx-reply>Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for <code>let</code> and <code>const</code> bindings in <code>BoundNames</code>, and only need to create a single declarative environment for each <code>when</code> clause of <code>match</code>, or use the current declarative environment for <code>is</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$rEsA0k7R3YUX_9N9hsQR0NZrZpXbWh1ZpDH4H2zIsoU"}},"msgtype":"m.text"},"ts":1693923166864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ"},
{"content":{"body":"> <@rbuckton:matrix.org> I have a very difficult time believing that something like this would be catastrophic. \n\nwe can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I have a very difficult time believing that something like this would be catastrophic.</blockquote></mx-reply>we can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh","m.relates_to":{"m.in_reply_to":{"event_id":"$NjO_AApQepzuPYvgQEVdLfXOd2oDc2iB4mhmsCWXRaQ"}},"msgtype":"m.text"},"ts":1693926087941,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZcOsEy-btFlt7kO5xoSs8YtYANzbVWk7Id7PCRR-WIo"},
{"content":{"body":"> <@rbuckton:matrix.org> Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.\n\nwe need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for <code>let</code> and <code>const</code> bindings in <code>BoundNames</code>, and only need to create a single declarative environment for each <code>when</code> clause of <code>match</code>, or use the current declarative environment for <code>is</code>.</blockquote></mx-reply>we need to decide if <code>is</code> can leak variable bindings. it will be a breaking change adding it in the future","m.relates_to":{"m.in_reply_to":{"event_id":"$-jQruB6_XUabEBW2eAHd645fSj3qxO2YeuHKcMlOpAQ"}},"msgtype":"m.text"},"ts":1693926282951,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ"},
{"content":{"body":"> <@jackworks:matrix.org> we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future\n\nMy intent with `is` is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate `if let`/`while let` with `is`, which is one of the key capabilities:\n\n```\nif (x is Option.Some(let value)) {\n  value;\n}\n\nconst y = x is Option.Some(let value) ? value + 1 : 0;\n```\nIf the `let` is only visible within the pattern itself, it makes it useless as a destructuring mechanism.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need to decide if <code>is</code> can leak variable bindings. it will be a breaking change adding it in the future</blockquote></mx-reply><p>My intent with <code>is</code> is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate <code>if let</code>/<code>while let</code> with <code>is</code>, which is one of the key capabilities:</p>\n<pre><code>if (x is Option.Some(let value)) {\n  value;\n}\n\nconst y = x is Option.Some(let value) ? value + 1 : 0;\n</code></pre>\n<p>If the <code>let</code> is only visible within the pattern itself, it makes it useless as a destructuring mechanism.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$cSRwTMlhHkL34qYNyKub5_-6YbZ8LKdpmCua9rxwXSQ"}},"msgtype":"m.text"},"ts":1693928516115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3J_AhzD4HFgkWmU2-omFMKQOXuKtvAKDMK2n1umS_ZQ"},
{"content":{"body":"i think there's specific places it makes sense. an if conditional making bindings available in the block is good. a ternary conditional making bindings available in the positive branch is good too","msgtype":"m.text"},"ts":1693932033205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QBat0UJ9ZTvbbBUlSaSiRRkCar2nvDDCpMJHrAbQrcs"},
{"content":{"body":"but `;x is Option.some(let value);` making bindings available outside the pattern seems very very bad to me.","format":"org.matrix.custom.html","formatted_body":"but <code>;x is Option.some(let value);</code> making bindings available outside the pattern seems very very bad to me.","msgtype":"m.text"},"ts":1693932058143,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xMliTViMUkG6RxH7gg5NWZIECDJipgm6VxPukwEzL0E"},
{"content":{"body":"You can't have one without the other without introducing some new even more complex binding mechanism.","msgtype":"m.text"},"ts":1693932066593,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$btF_X6w9XKjMplnEkdvLTnIhXhRVdvQgrsnNeILDNvk"},
{"content":{"body":"i don't think that's true","msgtype":"m.text"},"ts":1693932074208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yeQkx4IA3Vg9E9FknQ5nK4q0XBtdT83nSWTaZgwtmQ4"},
{"content":{"body":"certainly it will make the spec trickier to write, but that's not important","msgtype":"m.text"},"ts":1693932091362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cve3ajqyJ7EDwJae0FtYR8Uxwyv-zX_bX73wZkP382g"},
{"content":{"body":"Bad maybe, but it will rarely be used in that way as its not the most convenient mechanism.","msgtype":"m.text"},"ts":1693932119714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DXDcrUI2iBr5sZKmM-VM4piTGi-PdzKyRXVxWkUJDkM"},
{"content":{"body":" * certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)","m.new_content":{"body":"certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)","msgtype":"m.text"},"m.relates_to":{"event_id":"$Cve3ajqyJ7EDwJae0FtYR8Uxwyv-zX_bX73wZkP382g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693932123341,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6mbgDjxrW9SIcdBX5CuuWM2uWBqTnsxgJdP0Tuy8ZQg"},
{"content":{"body":"i think it would also be bad if the ternary made the bindings available in the negative branch, to be clear","msgtype":"m.text"},"ts":1693932148854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$50Xa4ZTRcgM7JL756XQ6Asf-CQl-rN-jNxFgIxLAvaA"},
{"content":{"body":"I'd very much like to be able to have this capability.","msgtype":"m.text"},"ts":1693932157592,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UJvc3BmT-GuhFf5djKvDyiEOxjQS320eiKmr3MGe9-U"},
{"content":{"body":"i'd prefer bindings never be visible outside the pattern, over leaking bindings willy nilly","msgtype":"m.text"},"ts":1693932164548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J3X1MvMyqkL-ILOoHmiTdfJQIG7yA2kQsdhUsz16sSI"},
{"content":{"body":"The bindings in the negative branch would be uninitialized and thus in TDZ","msgtype":"m.text"},"ts":1693932176925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qiaura6z0TBoZVq1kYslhXcQFkX69TUy3ICK-sBs6HU"},
{"content":{"body":"not if they use `var`","format":"org.matrix.custom.html","formatted_body":"not if they use <code>var</code>","msgtype":"m.text"},"ts":1693932192899,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wKeoXh6CA5YIO8ROeEAp2c7N6JI_W7x2BtCQ5wyu4Sc"},
{"content":{"body":"Then don't support `var` for this feature. I think that's far more reasonable.","format":"org.matrix.custom.html","formatted_body":"Then don't support <code>var</code> for this feature. I think that's far more reasonable.","msgtype":"m.text"},"ts":1693932222892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NBoTS0Px5eshrytG52g2cjT4wgJKYrgNGszhtSJULJg"}
]