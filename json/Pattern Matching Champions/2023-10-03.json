[
{"content":{"body":"> <@rkirsling:matrix.org> in theory you could keep nesting `is ... if (...)`s\n\nI think this point may have been overlooked in the discussion about `is` and `if` ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>in theory you could keep nesting <code>is ... if (...)</code>s</blockquote></mx-reply>I think this point may have been overlooked in the discussion about <code>is</code> and <code>if</code>","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY"}},"msgtype":"m.text"},"ts":1696298516681,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yQdKjx5iIt6vDJPxJCPV7W1TQxye3xusYYcK-ppxS-4"},
{"content":{"body":"this really is something that arises from the combination of the two","m.mentions":{},"msgtype":"m.text"},"ts":1696298619464,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$6aOyi5jlrvmpSIssXL3VODQqH9PBZqUA9BqHcGRerw0"},
{"content":{"body":"though I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing","format":"org.matrix.custom.html","formatted_body":"though I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing","m.mentions":{},"msgtype":"m.text"},"ts":1696298809600,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Ljtx8zrOTtfTeul4QbKuDUor_ioo5YGGzRC-l4H3gdY"},
{"content":{"body":"though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factors","format":"org.matrix.custom.html","formatted_body":"though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factors","m.mentions":{},"msgtype":"m.text"},"ts":1696298870334,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4"},
{"content":{"body":" * though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":" * though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"m.new_content":{"body":"though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":"though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298871600,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1G-CYE49yZZTnKAhLfsICt82_WS3NrXHZYovok5Q5yg"},
{"content":{"body":" * I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing, but","format":"org.matrix.custom.html","formatted_body":" * I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing, but","m.mentions":{},"m.new_content":{"body":"I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing, but","format":"org.matrix.custom.html","formatted_body":"I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing, but","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ljtx8zrOTtfTeul4QbKuDUor_ioo5YGGzRC-l4H3gdY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298890285,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$SZwFfCQfa0SQGYYMv1B1Dv9E3QDxFeY54uRwkPvIaLM"},
{"content":{"body":" * as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":" * as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"m.new_content":{"body":"as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":"as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298893755,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TBaZG7SmURgMgwT4JXCXlbypNdR_rVAk3Reov77XpLA"},
{"content":{"body":"basically\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\nwould be our new world of JS","format":"org.matrix.custom.html","formatted_body":"<p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be our new world of JS</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696299063512,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$gtfxRLs7y8MDxaSQ8LxQxerMqnrE3FSnn0bAX1erWC0"},
{"content":{"body":" * basically\n\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\n\nwould be valid in our proposed world","format":"org.matrix.custom.html","formatted_body":" * <p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be valid in our proposed world</p>\n","m.mentions":{},"m.new_content":{"body":"basically\n\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\n\nwould be valid in our proposed world","format":"org.matrix.custom.html","formatted_body":"<p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be valid in our proposed world</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gtfxRLs7y8MDxaSQ8LxQxerMqnrE3FSnn0bAX1erWC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696299075627,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$zyBI4ejP5GBBWj6Etdl7CJPwzkdaB5Xja0tSklIuN6U"},
{"content":{"body":"syntactically valid does not mean developers must write that. otherwise `throw throw x` should also be banned ","msgtype":"m.text"},"ts":1696299179535,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$G44X5wflTYxi8VxQczhne2DMFdnpXQp44p3yUvywwrk"},
{"content":{"body":"that's not a counterargument","m.mentions":{},"msgtype":"m.text"},"ts":1696299207416,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mCHXA9mbX5GlN7znzw_a4mGM8VEg-YGzOIOrIMxZ3_0"},
{"content":{"body":"it would be completely negligent to not have a thorough discussion about such a case","m.mentions":{},"msgtype":"m.text"},"ts":1696299516706,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$x60I1InCDgQxSOPxG77w6hSAreAM1ZtljU39NWU4zSw"},
{"content":{"body":"the crux is that it would be extremely easy to write code in one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":"the crux is that it would be extremely easy to write code in one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"msgtype":"m.text"},"ts":1696299625203,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s"},
{"content":{"body":" * the crux is that it would be extremely easy to write code in which one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":" * the crux is that it would be extremely easy to write code in which one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"m.new_content":{"body":"the crux is that it would be extremely easy to write code in which one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":"the crux is that it would be extremely easy to write code in which one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696299699422,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$nNRuLcr6VI_PKlzYHCQnUt3x3HPyxOHuikTMo3v7Yd8"},
{"content":{"body":"but both if statement and if pattern accept an expression and evaluate it and do truthy test","msgtype":"m.text"},"ts":1696299748208,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9XdFnta_XToUpR5Jn1-A-3i9oaq-sT_4LKyvrMfltbc"},
{"content":{"body":"it's not so important to distinguish them, because they have the same semantics ","msgtype":"m.text"},"ts":1696299775827,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vx-GRjq1Pl0QVK5eTvk17ZV7akLzX86xoln9Bh3OYi0"},
{"content":{"body":"they absolutely do not have the same semantics; one is a control flow construct and one is a subexpression","m.mentions":{},"msgtype":"m.text"},"ts":1696299830370,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2fFkIYy-7niUgerhgc8dobAIoaGPXePeMWIv5oAQBW4"},
{"content":{"body":" * they absolutely do not have the same semantics; one is a control flow construct and one is a boolean subexpression","m.mentions":{},"m.new_content":{"body":"they absolutely do not have the same semantics; one is a control flow construct and one is a boolean subexpression","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2fFkIYy-7niUgerhgc8dobAIoaGPXePeMWIv5oAQBW4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696300497263,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Y4x7dgrZM1fSIl2f8BelfhHWEZPhWaQjV54n6zLl4zY"},
{"content":{"body":"fwiw i'm strongly opposed to dropping `when` entirely","format":"org.matrix.custom.html","formatted_body":"fwiw i'm strongly opposed to dropping <code>when</code> entirely","m.mentions":{},"msgtype":"m.text"},"ts":1696320728203,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0"},
{"content":{"body":"also is matthew mathieu?","m.mentions":{},"msgtype":"m.text"},"ts":1696320746876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n9P_trtBXioN7Yhmd-EV346oLdmyhCo2lxT4mJQnXJg"},
{"content":{"body":" * fwiw i'm strongly opposed to dropping `when` entirely (but am flexible on spelling)","format":"org.matrix.custom.html","formatted_body":" * fwiw i'm strongly opposed to dropping <code>when</code> entirely (but am flexible on spelling)","m.mentions":{},"m.new_content":{"body":"fwiw i'm strongly opposed to dropping `when` entirely (but am flexible on spelling)","format":"org.matrix.custom.html","formatted_body":"fwiw i'm strongly opposed to dropping <code>when</code> entirely (but am flexible on spelling)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696320772119,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RWlUIbJwS-8Inq-SgJKtivMGbTaXPRqMkzG2s6m5Kjc"},
{"content":{"body":"also i commented on the perf concern on the issue; tldr, this isn't a thing that's usually a problem and not something we should be concerned about","m.mentions":{},"msgtype":"m.text"},"ts":1696320949297,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rWFWjP4-4hDy36a3HCCPG1hSBI_-IH12Q79OkpDQU2s"},
{"content":{"body":"it me.","msgtype":"m.text"},"ts":1696345684473,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$zCD1nj3_8-gk33BUV35aFzClkDzya1cE2XmdBy1i8Ww"},
{"content":{"body":"I am implementer. Raising concern. ","msgtype":"m.text"},"ts":1696345690738,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$KwYpSPnNSmadZAN5UITe8izFEkv6RZaPMljlrVzdxXU"},
{"content":{"body":"FWIW","msgtype":"m.text"},"ts":1696345697634,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$ppDvzuzkUirhR8ygsDuxfp7jqWKxt25zzdj2t6YUVMg"},
{"content":{"body":"The iterator protocol is hard to optimize, and I'm trying to provide feedback that will result in a performant proposal ","msgtype":"m.text"},"ts":1696345747289,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$OY8aytbCtfixv_AosLoFnbgSivnVSYikzlS7hgP7PFA"},
{"content":{"body":"or, at least have the -potential- to be performant","msgtype":"m.text"},"ts":1696345757930,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$NLnO4G6LXaW3zwLDIhwRz-wK3bIl7ZhbgkSFfNPQ0H4"},
{"content":{"body":"I think it's fine to pay the cost for classes, but maybe we just don't support unboxing for primitives. Either that, or we distinguish between `x is String` and `x is String()` somehow. Different symbol methods maybe? ","format":"org.matrix.custom.html","formatted_body":"I think it's fine to pay the cost for classes, but maybe we just don't support unboxing for primitives. Either that, or we distinguish between <code>x is String</code> and <code>x is String()</code> somehow. Different symbol methods maybe?","msgtype":"m.text"},"ts":1696348158682,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ak4fVLPXlpExUyFC7-uKy9yFo0CAQi3TKLkw9VXvIp8"},
{"content":{"body":"Yeah that was my suggestion in the issue. ","m.mentions":{},"msgtype":"m.text"},"ts":1696355995143,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Mzr6GH6u1y4qgIccwZco2heYIB7sFjqwwFnSzGo6XPw"},
{"content":{"body":"I assume that authors will similarly run into issues where constructing the iterator's contents might be expensive, and want to avoid doing that when the user is just calling `Foo` for a typecheck.","format":"org.matrix.custom.html","formatted_body":"I assume that authors will similarly run into issues where constructing the iterator's contents might be expensive, and want to avoid doing that when the user is just calling <code>Foo</code> for a typecheck.","m.mentions":{},"msgtype":"m.text"},"ts":1696356039011,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$X_vSmA0ob8j3kzzWrOegWUGE0OsKCDGrPEzEIvFUCSI"},
{"content":{"body":"> <@rkirsling:matrix.org> the crux is that it would be extremely easy to write code in which one can't easily tell what construct `if (...)` is\n\nI think this is relevant if it's *easy* to write code like that and there is *benefit* to doing it, such that we can expect it to be a somewhat common pattern among authors. If it's just *possible* but *fairly silly* to write such code, then so long as the behavior is well-defined and not too surprising it's not something we need to worry about, imo. People can do *lots* of very silly things in their code; this is far from the only place where authors can nest to ridiculous degrees if they feel like it, and make their code hard to understand.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>the crux is that it would be extremely easy to write code in which one can't easily tell what construct <code>if (...)</code> is</blockquote></mx-reply>I think this is relevant if it's <em>easy</em> to write code like that and there is <em>benefit</em> to doing it, such that we can expect it to be a somewhat common pattern among authors. If it's just <em>possible</em> but <em>fairly silly</em> to write such code, then so long as the behavior is well-defined and not too surprising it's not something we need to worry about, imo. People can do <em>lots</em> of very silly things in their code; this is far from the only place where authors can nest to ridiculous degrees if they feel like it, and make their code hard to understand.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s"}},"msgtype":"m.text"},"ts":1696356216703,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NOSaK0vzHa3GGuDAcynZywY1Z_2Iy3zhkb0l2bPdoag"},
{"content":{"body":"For example, one can similarly nest IIAFEs into their if(), or deeply nested ternaries, both of which can be quite difficult to puzzle out. But there's rarely, if ever, a reason to do so, so we don't worry about it; the behavior is well-defined and, if you can follow the expression tree, unsurprising.","m.mentions":{},"msgtype":"m.text"},"ts":1696356428636,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yGYDO_MKGbsayhGDazM5fHuG2Qlehd10ZhzS7GdZUZI"},
{"content":{"body":"ljharb: I'm resolving all your whitespace changes without merging them; I don't think there is remotely a common standard on this, and I have written code in this way my entire life.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I'm resolving all your whitespace changes without merging them; I don't think there is remotely a common standard on this, and I have written code in this way my entire life.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1696366537998,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9Ksr4epCIDmXwcxRMArRAUri9oH9nx6h2rPOuZAytAs"},
{"content":{"body":"> <@ljharb:matrix.org> fwiw i'm strongly opposed to dropping `when` entirely (but am flexible on spelling)\n\nCan you elaborate on this? What is your opposition?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>fwiw i'm strongly opposed to dropping <code>when</code> entirely (but am flexible on spelling)</blockquote></mx-reply>Can you elaborate on this? What is your opposition?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0"}},"msgtype":"m.text"},"ts":1696366818084,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$UehJeoPBcZ0g8xYYxTfnJecMPl3mrQ6KhB-skvZTHOQ"},
{"content":{"body":"And notably, what in your mind distinguishes JS from most other languages which lack a clause-introducing keyword in their syntax?","m.mentions":{},"msgtype":"m.text"},"ts":1696366864497,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$r6yL_-1MlYByZGLA9IXhDnUYkpWPxMctDGuTeJ_coWg"},
{"content":{"body":"> <@mgaudet:mozilla.org> I am implementer. Raising concern. \n\naha thanks, that clarifies :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24KwYpSPnNSmadZAN5UITe8izFEkv6RZaPMljlrVzdxXU\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>I am implementer. Raising concern. </blockquote></mx-reply>aha thanks, that clarifies :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$KwYpSPnNSmadZAN5UITe8izFEkv6RZaPMljlrVzdxXU"}},"msgtype":"m.text"},"ts":1696374284245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oRz2ydQ0DPh0qgnHShaOLqiNoLmPyMPCd1Zo52C0cA4"},
{"content":{"body":"> <@rbuckton:matrix.org> I think it's fine to pay the cost for classes, but maybe we just don't support unboxing for primitives. Either that, or we distinguish between `x is String` and `x is String()` somehow. Different symbol methods maybe? \n\ni think it’s extremely important to unbox primitives by default; it’s a mistake the language makes that so difficult already.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24ak4fVLPXlpExUyFC7-uKy9yFo0CAQi3TKLkw9VXvIp8\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I think it's fine to pay the cost for classes, but maybe we just don't support unboxing for primitives. Either that, or we distinguish between <code>x is String</code> and <code>x is String()</code> somehow. Different symbol methods maybe?</blockquote></mx-reply>i think it’s extremely important to unbox primitives by default; it’s a mistake the language makes that so difficult already.","m.relates_to":{"m.in_reply_to":{"event_id":"$ak4fVLPXlpExUyFC7-uKy9yFo0CAQi3TKLkw9VXvIp8"}},"msgtype":"m.text"},"ts":1696374317573,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8lSWjH7E03mVEORxRzClqNtYeXix40epXaUPkSV6NSc"},
{"content":{"body":"> <@tabatkins:matrix.org> Can you elaborate on this? What is your opposition?\n\ni think it’s very valuable to have a clear syntactic marker for the start of a clause. (a word is clear, a token likely isn’t)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24UehJeoPBcZ0g8xYYxTfnJecMPl3mrQ6KhB-skvZTHOQ\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Can you elaborate on this? What is your opposition?</blockquote></mx-reply>i think it’s very valuable to have a clear syntactic marker for the start of a clause. (a word is clear, a token likely isn’t)","m.relates_to":{"m.in_reply_to":{"event_id":"$UehJeoPBcZ0g8xYYxTfnJecMPl3mrQ6KhB-skvZTHOQ"}},"msgtype":"m.text"},"ts":1696374362026,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RqgR8nxTk2I5LhyqxPh4lqTZSXd6bhPnhpG4qeTNVgc"},
{"content":{"body":"Why do you think we need a marker beyond \"start of the line\"? the obvious formatting will make this very clear when read.","m.mentions":{},"msgtype":"m.text"},"ts":1696374413673,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XFgQXu5ziMJkGLTYJwkePR-hxQcz64DiIY6-P3440GE"},
{"content":{"body":"It's my impression that most TC39 members believe that boxing primitives is a bad idea to begin with, so I'm not sure interacting with boxing is a benefit if it might encourage it's use even more","msgtype":"m.text"},"ts":1696374438782,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kiDb6KDGighIss0B8GTEYVsK6lT55xJdgAaEVoR9GF4"},
{"content":{"body":"> <@tabatkins:matrix.org> And notably, what in your mind distinguishes JS from most other languages which lack a clause-introducing keyword in their syntax?\n\ni care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24r6yL_-1MlYByZGLA9IXhDnUYkpWPxMctDGuTeJ_coWg\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>And notably, what in your mind distinguishes JS from most other languages which lack a clause-introducing keyword in their syntax?</blockquote></mx-reply>i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.","m.relates_to":{"m.in_reply_to":{"event_id":"$r6yL_-1MlYByZGLA9IXhDnUYkpWPxMctDGuTeJ_coWg"}},"msgtype":"m.text"},"ts":1696374461185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0"},
{"content":{"body":"> <@rbuckton:matrix.org> It's my impression that most TC39 members believe that boxing primitives is a bad idea to begin with, so I'm not sure interacting with boxing is a benefit if it might encourage it's use even more\n\nabsolutely, but this helps *reduce* boxing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24kiDb6KDGighIss0B8GTEYVsK6lT55xJdgAaEVoR9GF4\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It's my impression that most TC39 members believe that boxing primitives is a bad idea to begin with, so I'm not sure interacting with boxing is a benefit if it might encourage it's use even more</blockquote></mx-reply>absolutely, but this helps <em>reduce</em> boxing","m.relates_to":{"m.in_reply_to":{"event_id":"$kiDb6KDGighIss0B8GTEYVsK6lT55xJdgAaEVoR9GF4"}},"msgtype":"m.text"},"ts":1696374479719,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$udUWC1mfyDSnjaqB1ai1XoBlRcDuDYRpcOOkjvrDLBQ"},
{"content":{"body":"> <@tabatkins:matrix.org> Why do you think we need a marker beyond \"start of the line\"? the obvious formatting will make this very clear when read.\n\none thing JS has objectively demonstrated is that there’s no obvious formatting, ever","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24XFgQXu5ziMJkGLTYJwkePR-hxQcz64DiIY6-P3440GE\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Why do you think we need a marker beyond \"start of the line\"? the obvious formatting will make this very clear when read.</blockquote></mx-reply>one thing JS has objectively demonstrated is that there’s no obvious formatting, ever","m.relates_to":{"m.in_reply_to":{"event_id":"$XFgQXu5ziMJkGLTYJwkePR-hxQcz64DiIY6-P3440GE"}},"msgtype":"m.text"},"ts":1696374501923,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Lvpprk_PyJZupZmBNNuTRafvCZvBwHiuiit26VNvrtg"},
{"content":{"body":"> <@ljharb:matrix.org> absolutely, but this helps *reduce* boxing\n\nNo it makes it easier to unbox. If that feature isn't there, then you must manually unbox, which discourages boxing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$udUWC1mfyDSnjaqB1ai1XoBlRcDuDYRpcOOkjvrDLBQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>absolutely, but this helps <em>reduce</em> boxing</blockquote></mx-reply>No it makes it easier to unbox. If that feature isn't there, then you must manually unbox, which discourages boxing.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$udUWC1mfyDSnjaqB1ai1XoBlRcDuDYRpcOOkjvrDLBQ"}},"msgtype":"m.text"},"ts":1696374517768,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vHa_WIk7Xfqihk225RIiyri3BAVTU3qIhSAbcGVNM0Y"},
{"content":{"body":"> <@rbuckton:matrix.org> No it makes it easier to unbox. If that feature isn't there, then you must manually unbox, which discourages boxing.\n\nthat’s a false conclusion. If someone boxes a primitive it’s because they don’t know any better, not because of the ease of unboxing. Also, the value you’re testing is highly likely not to be one you control or create.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24vHa_WIk7Xfqihk225RIiyri3BAVTU3qIhSAbcGVNM0Y\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No it makes it easier to unbox. If that feature isn't there, then you must manually unbox, which discourages boxing.</blockquote></mx-reply>that’s a false conclusion. If someone boxes a primitive it’s because they don’t know any better, not because of the ease of unboxing. Also, the value you’re testing is highly likely not to be one you control or create.","m.relates_to":{"m.in_reply_to":{"event_id":"$vHa_WIk7Xfqihk225RIiyri3BAVTU3qIhSAbcGVNM0Y"}},"msgtype":"m.text"},"ts":1696374564035,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mCRRjOc1-a8LVqgk8FqYhURpLh4bCYl_5fSMn3EjBSA"},
{"content":{"body":"lol I think \"start clauses on a new line, indent wrapped\" if extremely obvious and if you do anything else you're hurting yourself in a way that we don't need to help you avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1696374574903,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gXtsMBhW_egVxIwUC3FITrOEtnoBm0JpbqtwNs0bPBk"},
{"content":{"body":"> <@ljharb:matrix.org> i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.\n\nThe ability to reflect over private fields in in some languages is based on an established trust relationship. Unprivileged code in .NET cannot reflect over private fields.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.</blockquote></mx-reply>The ability to reflect over private fields in in some languages is based on an established trust relationship. Unprivileged code in .NET cannot reflect over private fields.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0"}},"msgtype":"m.text"},"ts":1696374589462,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k28r1s_US3cQoepamjofC_z96OsKwCllygNt7JHBQ6o"},
{"content":{"body":"> <@tabatkins:matrix.org> lol I think \"start clauses on a new line, indent wrapped\" if extremely obvious and if you do anything else you're hurting yourself in a way that we don't need to help you avoid.\n\ni agree with your sensibilities but not that people are rational enough in aggregate for that to hold.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24gXtsMBhW_egVxIwUC3FITrOEtnoBm0JpbqtwNs0bPBk\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>lol I think \"start clauses on a new line, indent wrapped\" if extremely obvious and if you do anything else you're hurting yourself in a way that we don't need to help you avoid.</blockquote></mx-reply>i agree with your sensibilities but not that people are rational enough in aggregate for that to hold.","m.relates_to":{"m.in_reply_to":{"event_id":"$gXtsMBhW_egVxIwUC3FITrOEtnoBm0JpbqtwNs0bPBk"}},"msgtype":"m.text"},"ts":1696374604803,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_b98XghrZHESeCovx_pyBwZpWprP0VraVLflFhWPbjU"},
{"content":{"body":"> <@ljharb:matrix.org> i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.\n\nI also don't agree what introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.</blockquote></mx-reply>I also don't agree what introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0"}},"msgtype":"m.text"},"ts":1696374637137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X50eaJcm0jW2BeGNDPqBVhM_vB3Pltjm5o8eDNSaGn8"},
{"content":{"body":"the unboxing primitives discussion is a red herring - the point is that the built-in matchers are slightly expensive (and author-provided ones can potentially be more expensive), which is an annoying cost to pay when we're going to immediately throw away the value anyway because all we care about is \"not false\"","m.mentions":{},"msgtype":"m.text"},"ts":1696374641131,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3iYvtpp9vbJQQvT-sqUVIawDwEhjSc1kviRxBE7Z_9k"},
{"content":{"body":"> <@ljharb:matrix.org> i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.\n\n * I also don't agree that introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$s1bb_WdC7FXu_P2GHWCQnH0D04n2kVe2v7hkw2LB_v0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i care zero for other languages; i think our bar should be higher than that. Private fields, for example, avoids repeating a mistake every other language makes by making them actually private and not reflectable.</blockquote></mx-reply> * I also don't agree that introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","m.mentions":{},"m.new_content":{"body":"I also don't agree that introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","format":"org.matrix.custom.html","formatted_body":"I also don't agree that introducing a keyword sets a higher bar, it introduces unnecessary and avoidable repetition.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$X50eaJcm0jW2BeGNDPqBVhM_vB3Pltjm5o8eDNSaGn8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696374646267,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7K4DPTwdFMAa1KeBcycymWoWe00f2H8mZwid1jAmAmU"},
{"content":{"body":"I’m very open to flexibility in the custom matcher protocol return value, to be clear","msgtype":"m.text"},"ts":1696374669606,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5rbAQ_5LRRPkmEHizjVRDOJK4dFtkEQaVwJqyHOM4MA"},
{"content":{"body":"i don’t think a second protocol makes any sense at all","msgtype":"m.text"},"ts":1696374676749,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9ktTLgimiQrDlUjUOrTC_BMyI0lc3xegRccy0luiMjA"},
{"content":{"body":"what I’m not open to is unnecessarily restrictive semantics for builtin primitives","msgtype":"m.text"},"ts":1696374702944,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mVrpMc3BBj9OLHQDyhWsZWxcbUjK6jBo3cEA5JThZFM"},
{"content":{"body":"i don’t see how an internal slot check is hard to optimize; many prototype methods check it, on strings also.","msgtype":"m.text"},"ts":1696374765894,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LnsvHPm8YqbQZAdMgPkPSudtriv9vhwS-rNWID2_kuE"},
{"content":{"body":"> <@ljharb:matrix.org> i don’t think a second protocol makes any sense at all\n\nExtractors are unary functions by design. If you want to control the return value somehow, you really shouldn't be doing that via an extra argument, IMO.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9ktTLgimiQrDlUjUOrTC_BMyI0lc3xegRccy0luiMjA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i don’t think a second protocol makes any sense at all</blockquote></mx-reply>Extractors are unary functions by design. If you want to control the return value somehow, you really shouldn't be doing that via an extra argument, IMO.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9ktTLgimiQrDlUjUOrTC_BMyI0lc3xegRccy0luiMjA"}},"msgtype":"m.text"},"ts":1696374774475,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A4ZU-oCFy2obHhMx8pfCUl9ee_3L4vuySlSSzFbJe0I"},
{"content":{"body":"and if it’s hard for userland code to match that, all the more reason for host code to have it available","msgtype":"m.text"},"ts":1696374784457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MyzLsP2SCLts4w949_IZWCcO6JRcq2mkm4r4lJ5-71U"},
{"content":{"body":"> <@rbuckton:matrix.org> Extractors are unary functions by design. If you want to control the return value somehow, you really shouldn't be doing that via an extra argument, IMO.\n\nI’m sure there’s more nuance here we can discuss next meeting when I’m not still traveling.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD%3Amatrix.org/%24A4ZU-oCFy2obHhMx8pfCUl9ee_3L4vuySlSSzFbJe0I\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Extractors are unary functions by design. If you want to control the return value somehow, you really shouldn't be doing that via an extra argument, IMO.</blockquote></mx-reply>I’m sure there’s more nuance here we can discuss next meeting when I’m not still traveling.","m.relates_to":{"m.in_reply_to":{"event_id":"$A4ZU-oCFy2obHhMx8pfCUl9ee_3L4vuySlSSzFbJe0I"}},"msgtype":"m.text"},"ts":1696374804415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6VMZ5cvhqkdUbvpFNxpHex1GnrPNqnoj-7zzrB3qGCE"},
{"content":{"body":"> <@ljharb:matrix.org> i don’t see how an internal slot check is hard to optimize; many prototype methods check it, on strings also.\n\nI'm confused; that's not the cost being mentioned. It's the cost of creating a temp array (and for userland code, the potentially unbounded cost of constructing what goes in the array).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$LnsvHPm8YqbQZAdMgPkPSudtriv9vhwS-rNWID2_kuE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i don’t see how an internal slot check is hard to optimize; many prototype methods check it, on strings also.</blockquote></mx-reply>I'm confused; that's not the cost being mentioned. It's the cost of creating a temp array (and for userland code, the potentially unbounded cost of constructing what goes in the array).","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LnsvHPm8YqbQZAdMgPkPSudtriv9vhwS-rNWID2_kuE"}},"msgtype":"m.text"},"ts":1696374981299,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Z33RMfbt1Kj74ov0WyZ3cF56XeGEAyzyIMxyyiQumSU"},
{"content":{"body":"ok so that’s about the return value, which has nothing necessarily to do with the semantics. i agree that it’d be nice to avoid that ","format":"org.matrix.custom.html","formatted_body":"ok so that’s about the return value, which has nothing necessarily to do with the semantics. i agree that it’d be nice to avoid that","msgtype":"m.text"},"ts":1696375012996,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$knqr5D88u4Ti6aj1huwQ8nN8dtTVhtxUYeVCyXTRCVg"},
{"content":{"body":"however that same concern just came up last week wrt iterator joining, and nobody seemed worried about it","msgtype":"m.text"},"ts":1696375037502,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TR9MtQej-h6HGobFr9b4S3xpX-iPYg8AEebQ23W1fuI"},
{"content":{"body":"Right. `Foo` will *always* ignore the return value other than checking if it's false or not, so incurring the cost of actually building the return value is unfortunate. Thus the pair of protocols.","format":"org.matrix.custom.html","formatted_body":"Right. <code>Foo</code> will <em>always</em> ignore the return value other than checking if it's false or not, so incurring the cost of actually building the return value is unfortunate. Thus the pair of protocols.","m.mentions":{},"msgtype":"m.text"},"ts":1696375053652,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$COQn2xIY4aVpV0DWIKDlqQ_C9L7Dc3UTDNtSBX9YoIg"},
{"content":{"body":"so I’m confused why mgaudet thinks a throwaway array is expensive here but fine in dozens of other places","format":"org.matrix.custom.html","formatted_body":"so I’m confused why <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a> thinks a throwaway array is expensive here but fine in dozens of other places","msgtype":"m.text"},"ts":1696375055737,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UxJ7ArNmAALxdRLEC23M9vvv_KZQuH6_1oV7SfBAsfA"},
{"content":{"body":"adding a new protocol seems way more expensive than a temp array imo","msgtype":"m.text"},"ts":1696375078444,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SjkBDzN3rrNXnAT5N8nej6VgODAnX8-hGn1ixPSdMGo"},
{"content":{"body":"Those are completely different types of cost; I don't see the connection.","m.mentions":{},"msgtype":"m.text"},"ts":1696375094112,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YmzBQmGF_ouc_wrnuYUfVoFz--pHawTrVRXQfmhSXEE"},
{"content":{"body":"but since is produces bindings I’m not sure when it’s ever just a “test”","msgtype":"m.text"},"ts":1696375108866,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XaddCPcEZIOO5ThyUmqi5uQ9_nEupXtN60Q5C1GAETU"},
{"content":{"body":"???","m.mentions":{},"msgtype":"m.text"},"ts":1696375118558,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EFN1ALy9HzssCzKfwDkwYMdCgsEIxm6LZZxgVFJ1fIo"},
{"content":{"body":"I'm talking about the pattern `Foo`, as opposed to the pattern `Foo(...)`.","format":"org.matrix.custom.html","formatted_body":"I'm talking about the pattern <code>Foo</code>, as opposed to the pattern <code>Foo(...)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1696375146319,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2vM1ef0UrxRDNm92WDNJJvWwgIHbYs1L38QExdv1tng"},
{"content":{"body":"i think this will need to wait til we can discuss sync to clarify ","format":"org.matrix.custom.html","formatted_body":"i think this will need to wait til we can discuss sync to clarify","msgtype":"m.text"},"ts":1696375172352,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7b2gfeBRG6P0DYjihkq2VDXNOwTLgYrISKEyjPGDIRA"},
{"content":{"body":"Right now they both invoke the same method, but the former throws away the return value.","m.mentions":{},"msgtype":"m.text"},"ts":1696375177218,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hEngxJBpo8B2VHDS76hsEWYpug1AlBJBpGQjjdoMrro"},
{"content":{"body":"Yeah, I'm *super* confused as to what you're actually talking about, ljharb ^_^","format":"org.matrix.custom.html","formatted_body":"Yeah, I'm <em>super</em> confused as to what you're actually talking about, ljharb ^_^","m.mentions":{},"msgtype":"m.text"},"ts":1696375189098,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$caWhkgg2l-o01Hw_1wKNrWWf8NsM9z6Gh9tYwHnQSfw"},
{"content":{"body":"the issue you filed and the notes summary cover multiple “conclusions”, some of which i strongly oppose, so we’re probably talking past each other","msgtype":"m.text"},"ts":1696375223789,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x_9Jwmoy7FYaBrnMdFTjgEtAUmRjlYTKd1LOkwKfpuc"}
]