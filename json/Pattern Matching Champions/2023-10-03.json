[
{"content":{"body":"> <@rkirsling:matrix.org> in theory you could keep nesting `is ... if (...)`s\n\nI think this point may have been overlooked in the discussion about `is` and `if` ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>in theory you could keep nesting <code>is ... if (...)</code>s</blockquote></mx-reply>I think this point may have been overlooked in the discussion about <code>is</code> and <code>if</code>","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$obXSVRy1KewQ-rMbs6PZrmoIyURsXqygOw5cL5Z0cFY"}},"msgtype":"m.text"},"ts":1696298516681,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yQdKjx5iIt6vDJPxJCPV7W1TQxye3xusYYcK-ppxS-4"},
{"content":{"body":"this really is something that arises from the combination of the two","m.mentions":{},"msgtype":"m.text"},"ts":1696298619464,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$6aOyi5jlrvmpSIssXL3VODQqH9PBZqUA9BqHcGRerw0"},
{"content":{"body":"though I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing","format":"org.matrix.custom.html","formatted_body":"though I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing","m.mentions":{},"msgtype":"m.text"},"ts":1696298809600,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Ljtx8zrOTtfTeul4QbKuDUor_ioo5YGGzRC-l4H3gdY"},
{"content":{"body":"though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factors","format":"org.matrix.custom.html","formatted_body":"though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factors","m.mentions":{},"msgtype":"m.text"},"ts":1696298870334,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4"},
{"content":{"body":" * though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":" * though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"m.new_content":{"body":"though as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":"though as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298871600,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1G-CYE49yZZTnKAhLfsICt82_WS3NrXHZYovok5Q5yg"},
{"content":{"body":" * I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing, but","format":"org.matrix.custom.html","formatted_body":" * I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing, but","m.mentions":{},"m.new_content":{"body":"I guess it's not exclusive to `if` _patterns_; it's mostly something that happens due to `is` existing, but","format":"org.matrix.custom.html","formatted_body":"I guess it's not exclusive to <code>if</code> <em>patterns</em>; it's mostly something that happens due to <code>is</code> existing, but","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ljtx8zrOTtfTeul4QbKuDUor_ioo5YGGzRC-l4H3gdY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298890285,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$SZwFfCQfa0SQGYYMv1B1Dv9E3QDxFeY54uRwkPvIaLM"},
{"content":{"body":" * as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":" * as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"m.new_content":{"body":"as Ron mentioned immediately above, the spelling of `if` pattterns/guards as `if` is the compounding factor","format":"org.matrix.custom.html","formatted_body":"as Ron mentioned immediately above, the spelling of <code>if</code> pattterns/guards as <code>if</code> is the compounding factor","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OVgk6K8Rcd2TR83bG8_AgRKISY1AanpkAS95sBJkzR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696298893755,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TBaZG7SmURgMgwT4JXCXlbypNdR_rVAk3Reov77XpLA"},
{"content":{"body":"basically\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\nwould be our new world of JS","format":"org.matrix.custom.html","formatted_body":"<p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be our new world of JS</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696299063512,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$gtfxRLs7y8MDxaSQ8LxQxerMqnrE3FSnn0bAX1erWC0"},
{"content":{"body":" * basically\n\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\n\nwould be valid in our proposed world","format":"org.matrix.custom.html","formatted_body":" * <p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be valid in our proposed world</p>\n","m.mentions":{},"m.new_content":{"body":"basically\n\n```\nif (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n```\n\nwould be valid in our proposed world","format":"org.matrix.custom.html","formatted_body":"<p>basically</p>\n<pre><code>if (... is ... if (... is ... if (...)))\n    if (...)\n        return;\n</code></pre>\n<p>would be valid in our proposed world</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gtfxRLs7y8MDxaSQ8LxQxerMqnrE3FSnn0bAX1erWC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696299075627,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$zyBI4ejP5GBBWj6Etdl7CJPwzkdaB5Xja0tSklIuN6U"},
{"content":{"body":"syntactically valid does not mean developers must write that. otherwise `throw throw x` should also be banned ","msgtype":"m.text"},"ts":1696299179535,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$G44X5wflTYxi8VxQczhne2DMFdnpXQp44p3yUvywwrk"},
{"content":{"body":"that's not a counterargument","m.mentions":{},"msgtype":"m.text"},"ts":1696299207416,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mCHXA9mbX5GlN7znzw_a4mGM8VEg-YGzOIOrIMxZ3_0"},
{"content":{"body":"it would be completely negligent to not have a thorough discussion about such a case","m.mentions":{},"msgtype":"m.text"},"ts":1696299516706,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$x60I1InCDgQxSOPxG77w6hSAreAM1ZtljU39NWU4zSw"},
{"content":{"body":"the crux is that it would be extremely easy to write code in one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":"the crux is that it would be extremely easy to write code in one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"msgtype":"m.text"},"ts":1696299625203,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s"},
{"content":{"body":" * the crux is that it would be extremely easy to write code in which one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":" * the crux is that it would be extremely easy to write code in which one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"m.new_content":{"body":"the crux is that it would be extremely easy to write code in which one can't easily tell what construct `if (...)` is","format":"org.matrix.custom.html","formatted_body":"the crux is that it would be extremely easy to write code in which one can't easily tell what construct <code>if (...)</code> is","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2OLKF3irC6fuCJfoevRRIoDOlEpXQJ4S_L1L-qvJ_3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696299699422,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$nNRuLcr6VI_PKlzYHCQnUt3x3HPyxOHuikTMo3v7Yd8"},
{"content":{"body":"but both if statement and if pattern accept an expression and evaluate it and do truthy test","msgtype":"m.text"},"ts":1696299748208,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9XdFnta_XToUpR5Jn1-A-3i9oaq-sT_4LKyvrMfltbc"},
{"content":{"body":"it's not so important to distinguish them, because they have the same semantics ","msgtype":"m.text"},"ts":1696299775827,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vx-GRjq1Pl0QVK5eTvk17ZV7akLzX86xoln9Bh3OYi0"},
{"content":{"body":"they absolutely do not have the same semantics; one is a control flow construct and one is a subexpression","m.mentions":{},"msgtype":"m.text"},"ts":1696299830370,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2fFkIYy-7niUgerhgc8dobAIoaGPXePeMWIv5oAQBW4"},
{"content":{"body":" * they absolutely do not have the same semantics; one is a control flow construct and one is a boolean subexpression","m.mentions":{},"m.new_content":{"body":"they absolutely do not have the same semantics; one is a control flow construct and one is a boolean subexpression","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2fFkIYy-7niUgerhgc8dobAIoaGPXePeMWIv5oAQBW4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696300497263,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Y4x7dgrZM1fSIl2f8BelfhHWEZPhWaQjV54n6zLl4zY"},
{"content":{"body":"fwiw i'm strongly opposed to dropping `when` entirely","format":"org.matrix.custom.html","formatted_body":"fwiw i'm strongly opposed to dropping <code>when</code> entirely","m.mentions":{},"msgtype":"m.text"},"ts":1696320728203,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0"},
{"content":{"body":"also is matthew mathieu?","m.mentions":{},"msgtype":"m.text"},"ts":1696320746876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n9P_trtBXioN7Yhmd-EV346oLdmyhCo2lxT4mJQnXJg"},
{"content":{"body":" * fwiw i'm strongly opposed to dropping `when` entirely (but am flexible on spelling)","format":"org.matrix.custom.html","formatted_body":" * fwiw i'm strongly opposed to dropping <code>when</code> entirely (but am flexible on spelling)","m.mentions":{},"m.new_content":{"body":"fwiw i'm strongly opposed to dropping `when` entirely (but am flexible on spelling)","format":"org.matrix.custom.html","formatted_body":"fwiw i'm strongly opposed to dropping <code>when</code> entirely (but am flexible on spelling)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KS4v7ZH6TW4jLg3mwEpAlsbs-2NZpxAhvYi0GdaTey0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696320772119,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RWlUIbJwS-8Inq-SgJKtivMGbTaXPRqMkzG2s6m5Kjc"},
{"content":{"body":"also i commented on the perf concern on the issue; tldr, this isn't a thing that's usually a problem and not something we should be concerned about","m.mentions":{},"msgtype":"m.text"},"ts":1696320949297,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rWFWjP4-4hDy36a3HCCPG1hSBI_-IH12Q79OkpDQU2s"},
{"content":{"body":"it me.","msgtype":"m.text"},"ts":1696345684473,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$zCD1nj3_8-gk33BUV35aFzClkDzya1cE2XmdBy1i8Ww"},
{"content":{"body":"I am implementer. Raising concern. ","msgtype":"m.text"},"ts":1696345690738,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$KwYpSPnNSmadZAN5UITe8izFEkv6RZaPMljlrVzdxXU"},
{"content":{"body":"FWIW","msgtype":"m.text"},"ts":1696345697634,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$ppDvzuzkUirhR8ygsDuxfp7jqWKxt25zzdj2t6YUVMg"},
{"content":{"body":"The iterator protocol is hard to optimize, and I'm trying to provide feedback that will result in a performant proposal ","msgtype":"m.text"},"ts":1696345747289,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$OY8aytbCtfixv_AosLoFnbgSivnVSYikzlS7hgP7PFA"},
{"content":{"body":"or, at least have the -potential- to be performant","msgtype":"m.text"},"ts":1696345757930,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$NLnO4G6LXaW3zwLDIhwRz-wK3bIl7ZhbgkSFfNPQ0H4"}
]