[
{"content":{"body":"hey friends! I'm back, and my best friend, my brother, now lives three blocks from me. big moves happening ðŸ˜Ž\n\nI'll be catching up on everything I missed today. sorry for the delay...","msgtype":"m.text","org.matrix.msc1767.text":"hey friends! I'm back, and my best friend, my brother, now lives three blocks from me. big moves happening ðŸ˜Ž\n\nI'll be catching up on everything I missed today. sorry for the delay..."},"ts":1643654975465,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$npqi1uP6ew3AT3loIUQ0px4NdrOwpQhFtne1IXpsXk4"},
{"content":{"body":"`new Option(null, Option.None)`. Heh, part of the point of Option is to avoid `null`","msgtype":"m.text"},"ts":1643659493986,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5NSfw9ymFiTmh9n-8joKAV49Gj20e5EySpNZ8edygrQ"},
{"content":{"body":"tbh i'd expect `constructor(kind, val)`, and for a `kind` of `Option.None`, i'd expect `arguments.length > 1` to throw a TypeError.","format":"org.matrix.custom.html","formatted_body":"tbh i'd expect <code>constructor(kind, val)</code>, and for a <code>kind</code> of <code>Option.None</code>, i'd expect <code>arguments.length &gt; 1</code> to throw a TypeError.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tbh i'd expect `constructor(kind, val)`, and for a `kind` of `Option.None`, i'd expect `arguments.length > 1` to throw a TypeError.","mimetype":"text/plain"},{"body":"tbh i'd expect <code>constructor(kind, val)</code>, and for a <code>kind</code> of <code>Option.None</code>, i'd expect <code>arguments.length &gt; 1</code> to throw a TypeError.","mimetype":"text/html"}]},"ts":1643664169239,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MgLPVt8HN_iVppQtF4HtCMRLawZkz_0dH53ylxw75Nw"},
{"content":{"body":"(because `null`, `undefined`, etc are all \"Some\" value)","format":"org.matrix.custom.html","formatted_body":"(because <code>null</code>, <code>undefined</code>, etc are all &quot;Some&quot; value)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(because `null`, `undefined`, etc are all \"Some\" value)","mimetype":"text/plain"},{"body":"(because <code>null</code>, <code>undefined</code>, etc are all &quot;Some&quot; value)","mimetype":"text/html"}]},"ts":1643664185023,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x4qqAk7FLbBwkYZ1QMPuZ5shnLrjNJG29JHl9qq1SWs"},
{"content":{"body":"> <@tabatkins:matrix.org> Yes, @room please review the \"Notes\" after each topic in https://hackmd.io/@aZMW07qbQcuCFmPlAAwUNA/HyVREXDTK ; I'll fold the conclusions into our issues (and close issues when relevant) on Monday.\n\nI had a chance to review the notes and I'm happy with all our conclusions. I will say rbuckton I'm strongly opposed to making length-check strictness consistent between tuples and arrays - it should be precisely the opposite, because the consistency should be with the conceptual basis of each data structure. an array is a collection of an arbitrary number of homogenous items; a tuple is a collection of a fixed number of heterogenous items. pattern semantics should fall along those lines","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$JIvehTRQQguiwN7rs_z9mJhzvhm3XdpvmntH-29FNps?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Yes, @room please review the &quot;Notes&quot; after each topic in https://hackmd.io/@aZMW07qbQcuCFmPlAAwUNA/HyVREXDTK ; I&#39;ll fold the conclusions into our issues (and close issues when relevant) on Monday.</blockquote></mx-reply>I had a chance to review the notes and I'm happy with all our conclusions. I will say <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> I'm strongly opposed to making length-check strictness consistent between tuples and arrays - it should be precisely the opposite, because the consistency should be with the conceptual basis of each data structure. an array is a collection of an arbitrary number of homogenous items; a tuple is a collection of a fixed number of heterogenous items. pattern semantics should fall along those lines","m.relates_to":{"m.in_reply_to":{"event_id":"$JIvehTRQQguiwN7rs_z9mJhzvhm3XdpvmntH-29FNps"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> Yes, @room please review the \"Notes\" after each topic in https://hackmd.io/@aZMW07qbQcuCFmPlAAwUNA/HyVREXDTK ; I'll fold the conclusions into our issues (and close issues when relevant) on Monday.\n\nI had a chance to review the notes and I'm happy with all our conclusions. I will say rbuckton I'm strongly opposed to making length-check strictness consistent between tuples and arrays - it should be precisely the opposite, because the consistency should be with the conceptual basis of each data structure. an array is a collection of an arbitrary number of homogenous items; a tuple is a collection of a fixed number of heterogenous items. pattern semantics should fall along those lines","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$JIvehTRQQguiwN7rs_z9mJhzvhm3XdpvmntH-29FNps?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Yes, @room please review the &quot;Notes&quot; after each topic in https://hackmd.io/@aZMW07qbQcuCFmPlAAwUNA/HyVREXDTK ; I&#39;ll fold the conclusions into our issues (and close issues when relevant) on Monday.</blockquote></mx-reply>I had a chance to review the notes and I'm happy with all our conclusions. I will say <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> I'm strongly opposed to making length-check strictness consistent between tuples and arrays - it should be precisely the opposite, because the consistency should be with the conceptual basis of each data structure. an array is a collection of an arbitrary number of homogenous items; a tuple is a collection of a fixed number of heterogenous items. pattern semantics should fall along those lines","mimetype":"text/html"}]},"ts":1643666325064,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$hZflhPZlZ23WFGB2bH7Ehh8RKYt-vICr_EXV-Bqj-EA"},
{"content":{"body":"> <@tabatkins:matrix.org> I was fiddling around with enum/ADT stuff and realized it wasn't hard to define custom matchers to be ADT-like, so I replaced our previous trivial custom matcher example with one based on Option: https://github.com/tc39/proposal-pattern-matching#custom-matcher-protocol-interpolations\n\nlove this! ðŸ¥³","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$QR8ieASOXSxZyZmAY7zTEwtfa7X-DNRCUbFKOWSYs0A?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I was fiddling around with enum/ADT stuff and realized it wasn&#39;t hard to define custom matchers to be ADT-like, so I replaced our previous trivial custom matcher example with one based on Option: https://github.com/tc39/proposal-pattern-matching#custom-matcher-protocol-interpolations</blockquote></mx-reply>love this! ðŸ¥³","m.relates_to":{"m.in_reply_to":{"event_id":"$QR8ieASOXSxZyZmAY7zTEwtfa7X-DNRCUbFKOWSYs0A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> I was fiddling around with enum/ADT stuff and realized it wasn't hard to define custom matchers to be ADT-like, so I replaced our previous trivial custom matcher example with one based on Option: https://github.com/tc39/proposal-pattern-matching#custom-matcher-protocol-interpolations\n\nlove this! ðŸ¥³","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$QR8ieASOXSxZyZmAY7zTEwtfa7X-DNRCUbFKOWSYs0A?via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I was fiddling around with enum/ADT stuff and realized it wasn&#39;t hard to define custom matchers to be ADT-like, so I replaced our previous trivial custom matcher example with one based on Option: https://github.com/tc39/proposal-pattern-matching#custom-matcher-protocol-interpolations</blockquote></mx-reply>love this! ðŸ¥³","mimetype":"text/html"}]},"ts":1643666524508,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$iN7dNvk3F0J8di4iIICzm8m7vJZZYTvqHDNiIzE2UR8"},
{"content":{"body":"rbuckton: Right, the constructor pattern I used just needed *some* value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Right, the constructor pattern I used just needed <em>some</em> value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: Right, the constructor pattern I used just needed *some* value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Right, the constructor pattern I used just needed <em>some</em> value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.","mimetype":"text/html"}]},"ts":1643666555589,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uCLMt4gtrGKWTi9bFAzeZvwoIrL3bTIFVaQYTb4lDKY"},
{"content":{"body":"If I was doing this more securely I'd use a private symbol to make the `new Option()` constructor uncallable by outside code.","format":"org.matrix.custom.html","formatted_body":"If I was doing this more securely I'd use a private symbol to make the <code>new Option()</code> constructor uncallable by outside code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If I was doing this more securely I'd use a private symbol to make the `new Option()` constructor uncallable by outside code.","mimetype":"text/plain"},{"body":"If I was doing this more securely I'd use a private symbol to make the <code>new Option()</code> constructor uncallable by outside code.","mimetype":"text/html"}]},"ts":1643666595527,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$UnpgCWcSkUznKUhcIG8nxqdw3q0B38dWRPOHveQ_8g4"},
{"content":{"body":"I definitely could have just reversed the arg order tho, yeah.","msgtype":"m.text","org.matrix.msc1767.text":"I definitely could have just reversed the arg order tho, yeah."},"ts":1643666652186,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$-tqT15OlHBEcBkK0b6BHJxbN663o2McPkcFPvs6u8kQ"}
]