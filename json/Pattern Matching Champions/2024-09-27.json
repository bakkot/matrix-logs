[
{"content":{"body":"> <@rbuckton:matrix.org> IMO, a good topic order for these slides might be:\n> 1. `match` syntax overview\n> 2. Literal constant patterns (i.e., \"Primitive Patterns\")\n> 3. Reference patterns (variable references and member references)\n> 4. Object patterns\n> 5. Array patterns\n> 6. Discards/`void` patterns\n> 7. Extractors\n> 9. Combinator patterns (and/or/not/parens)\n> 8. Variable declaration patterns (i.e., `let`/`const`/`var`) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern \n> 10. `if` patterns\n> 11. Semantics of custom matchers\n> 12. Future syntax\n> \n> This order progressively builds in complexity while leveraging key information from previous slides. For example `if` patterns really need `and` to be meaningful. Oftentimes, so do `let` patterns.\n\nI'll update the spec to rename the term \"BindingPattern\" to what you suggested","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$5rN1U2qJrKYUSxEdHlXo4xCEYRNAmjEvmpmzX7YZ6Qs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>IMO, a good topic order for these slides might be:</p>\n<ol>\n<li><code>match</code> syntax overview</li>\n<li>Literal constant patterns (i.e., \"Primitive Patterns\")</li>\n<li>Reference patterns (variable references and member references)</li>\n<li>Object patterns</li>\n<li>Array patterns</li>\n<li>Discards/<code>void</code> patterns</li>\n<li>Extractors</li>\n<li>Combinator patterns (and/or/not/parens)</li>\n<li>Variable declaration patterns (i.e., <code>let</code>/<code>const</code>/<code>var</code>) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern</li>\n<li><code>if</code> patterns</li>\n<li>Semantics of custom matchers</li>\n<li>Future syntax</li>\n</ol>\n<p>This order progressively builds in complexity while leveraging key information from previous slides. For example <code>if</code> patterns really need <code>and</code> to be meaningful. Oftentimes, so do <code>let</code> patterns.</p>\n</blockquote></mx-reply>I&#39;ll update the spec to rename the term &quot;BindingPattern&quot; to what you suggested","m.relates_to":{"m.in_reply_to":{"event_id":"$5rN1U2qJrKYUSxEdHlXo4xCEYRNAmjEvmpmzX7YZ6Qs"}},"msgtype":"m.text"},"ts":1727420958928,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$hhiKAETUVEU_bnKd9LPAmFW8AVJlWn5grtKw_Ak6dBY"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, as mentioned above, in slide 19 \"Extractor Patterns\", `true` is not the same as `[]`. Honestly I'd rather a custom matcher throw if you use it as an extractor and it wasn't written to be used in that fashion.\n\nYes, built-in custom matchers has an AO for this. ValidateCustomMatcherHint","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$omTY1Hq8dinJ1fkOwe4AEJu68V21QKPWaVFDSmVFPbU\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, as mentioned above, in slide 19 \"Extractor Patterns\", <code>true</code> is not the same as <code>[]</code>. Honestly I'd rather a custom matcher throw if you use it as an extractor and it wasn't written to be used in that fashion.</blockquote></mx-reply>Yes, built-in custom matchers has an AO for this. ValidateCustomMatcherHint","m.relates_to":{"m.in_reply_to":{"event_id":"$omTY1Hq8dinJ1fkOwe4AEJu68V21QKPWaVFDSmVFPbU"}},"msgtype":"m.text"},"ts":1727421152428,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kB05u0xf8ixANGGSWiqE8BlEEu_GiDsPOBCP8x4fI4c"},
{"content":{"body":"> <@rbuckton:matrix.org> We may also want to describe `or`, `and`, and `not` as \"Disjunction\", \"Conjunction\", and \"Negation\" patterns, but that's my personal preference.\n\nthis name is better imo, but it's 3 names and we only use one term in the spec \"CombinedMatchPattern\", do you have suggestion?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$hVUzOlqvNCHMIUpgx4f2acobci83YHWuB1sqigtctiE\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We may also want to describe <code>or</code>, <code>and</code>, and <code>not</code> as \"Disjunction\", \"Conjunction\", and \"Negation\" patterns, but that's my personal preference.</blockquote></mx-reply>this name is better imo, but it&#39;s 3 names and we only use one term in the spec &quot;CombinedMatchPattern&quot;, do you have suggestion?","m.relates_to":{"m.in_reply_to":{"event_id":"$hVUzOlqvNCHMIUpgx4f2acobci83YHWuB1sqigtctiE"}},"msgtype":"m.text"},"ts":1727421282729,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5RoDwCIKNNM5frUuhdRPIsoQ1wCBZngo49Yeh4jdvVc"},
{"content":{"body":"> <@rbuckton:matrix.org> In \"Compact Object Pattern Cases\", I'm not bullish on `{ a }` as meaning \"equivalent to `{ a: void }`\" as that would break from how shorthand assignments work in object literals, assignment patterns, and binding patterns. One might expect `{ a }` to mean `{ a: a }`, just as `{ let a }` means `{ a: let a }`. It may not be convenient, but it would be consistent.\n\npattern `{ a }` is already an early error in the spec due to the possible confusion.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Rbx6DLI1SbOsM_1_qxraeOskVMqeMqI1F-JvSF39Qd0\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In \"Compact Object Pattern Cases\", I'm not bullish on <code>{ a }</code> as meaning \"equivalent to <code>{ a: void }</code>\" as that would break from how shorthand assignments work in object literals, assignment patterns, and binding patterns. One might expect <code>{ a }</code> to mean <code>{ a: a }</code>, just as <code>{ let a }</code> means <code>{ a: let a }</code>. It may not be convenient, but it would be consistent.</blockquote></mx-reply>pattern <code>{ a }</code> is already an early error in the spec due to the possible confusion.","m.relates_to":{"m.in_reply_to":{"event_id":"$Rbx6DLI1SbOsM_1_qxraeOskVMqeMqI1F-JvSF39Qd0"}},"msgtype":"m.text"},"ts":1727421986869,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4HNJcqRAQWzdty3vXgW6Bioel_UHJ4e-DlpqSqYnakg"},
{"content":{"body":"* pattern `{ a }` is already an early error in the spec due to the possible confusion.\nhttps://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors","format":"org.matrix.custom.html","formatted_body":"* pattern <code>{ a }</code> is already an early error in the spec due to the possible confusion.<br/>https://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors","m.new_content":{"body":"pattern `{ a }` is already an early error in the spec due to the possible confusion.\nhttps://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors","format":"org.matrix.custom.html","formatted_body":"pattern <code>{ a }</code> is already an early error in the spec due to the possible confusion.<br/>https://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors","msgtype":"m.text"},"m.relates_to":{"event_id":"$4HNJcqRAQWzdty3vXgW6Bioel_UHJ4e-DlpqSqYnakg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727422010281,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$iC93WG6WGfCCGhuXUMwW3lA8lCk7DCCOdYbD1kcwScQ"},
{"content":{"body":"> <@jackworks:matrix.org> pattern `{ a }` is already an early error in the spec due to the possible confusion.\n> https://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors\n\nThese were all comments related to the slides","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$4HNJcqRAQWzdty3vXgW6Bioel_UHJ4e-DlpqSqYnakg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br />pattern `{ a }` is already an early error in the spec due to the possible confusion.\nhttps://tc39.es/proposal-pattern-matching/#sec-match-patterns-static-semantics-early-errors</blockquote></mx-reply>These were all comments related to the slides","m.relates_to":{"m.in_reply_to":{"event_id":"$4HNJcqRAQWzdty3vXgW6Bioel_UHJ4e-DlpqSqYnakg"}},"msgtype":"m.text"},"ts":1727451307325,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mKhzpqCzsPs_qVgcZK4X2fNISWStDXT6-aYL7Csis4s"}
]