[
{"content":{"body":"(that is to say, yes, we will need some sort of keyword to distinguish pattern-matching from destructuring in contexts like variable assignment, when we add pattern matching there. but that's not connected to the question of how irrefutable matchers are spelled, afaict?)","msgtype":"m.text","org.matrix.msc1767.text":"(that is to say, yes, we will need some sort of keyword to distinguish pattern-matching from destructuring in contexts like variable assignment, when we add pattern matching there. but that's not connected to the question of how irrefutable matchers are spelled, afaict?)"},"ts":1663376071789,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EAHKmA1IYMyI_gNSRwGqSiPRsFiTAaToTPgx8-lxXak"},
{"content":{"body":"> <@tabatkins:matrix.org> Oh gosh and \"reuse destructuring\" means that `{x:Infinity}` gets us the no-op binding (technically binds to `Infinity`, but that doesn't actually accomplish anything), but `{x:-Infinity}` gets us a value test (since it's an invalid destructuring pattern). Yeah this is just completely and totally a no-go.\n\nI completely agree, but it was worth investigating to show exactly how bad the situation is. I'm firmly in the camp of \"don't try to shoehorn pattern matching into existing destructuring syntax\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oyZqXHs2Pq082QqWXUB4o_Ah-U5gMZTJHOFmxqA0sE8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Oh gosh and \"reuse destructuring\" means that <code>{x:Infinity}</code> gets us the no-op binding (technically binds to <code>Infinity</code>, but that doesn't actually accomplish anything), but <code>{x:-Infinity}</code> gets us a value test (since it's an invalid destructuring pattern). Yeah this is just completely and totally a no-go.</blockquote></mx-reply>I completely agree, but it was worth investigating to show exactly how bad the situation is. I'm firmly in the camp of &quot;don't try to shoehorn pattern matching into existing destructuring syntax&quot;.","m.relates_to":{"m.in_reply_to":{"event_id":"$oyZqXHs2Pq082QqWXUB4o_Ah-U5gMZTJHOFmxqA0sE8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> Oh gosh and \"reuse destructuring\" means that `{x:Infinity}` gets us the no-op binding (technically binds to `Infinity`, but that doesn't actually accomplish anything), but `{x:-Infinity}` gets us a value test (since it's an invalid destructuring pattern). Yeah this is just completely and totally a no-go.\n\nI completely agree, but it was worth investigating to show exactly how bad the situation is. I'm firmly in the camp of \"don't try to shoehorn pattern matching into existing destructuring syntax\".","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$oyZqXHs2Pq082QqWXUB4o_Ah-U5gMZTJHOFmxqA0sE8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Oh gosh and \"reuse destructuring\" means that <code>{x:Infinity}</code> gets us the no-op binding (technically binds to <code>Infinity</code>, but that doesn't actually accomplish anything), but <code>{x:-Infinity}</code> gets us a value test (since it's an invalid destructuring pattern). Yeah this is just completely and totally a no-go.</blockquote></mx-reply>I completely agree, but it was worth investigating to show exactly how bad the situation is. I'm firmly in the camp of &quot;don't try to shoehorn pattern matching into existing destructuring syntax&quot;.","mimetype":"text/html"}]},"ts":1663390618359,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$loy1gekp4paQuegqGZVGui6u4g0rMx5FWZg7fifQjWA"},
{"content":{"body":"The pattern matching syntax I'd primarily favor consists of:\n- literal constant patterns (`0`, `true`, `null`, `\"foo\"`, etc.)\n- object patterns (`{ x, y }`), more specifically _exhaustive_ object patterns (i.e., `{ x, y }` won't match `{ x, y, z }`, but `{ x, y, ... }` would.)\n- array patterns (`[x, y]`), more specifically _exhaustive_ array patterns (i.e., `[x, y]` won't match `[x, y, z]`, but `[x, y, ...]` would.)\n- qualified name patterns (`a` references in-scope `a`, `a.b` references in-scope `a` with property `b`, `undefined`, `Infinity`, `NaN`, `Number.MAX_SAFE_INTEGER`, etc.)\n- unary numeric prefix patterns (`+Infinity`, `-a`, `-1`, etc.)\n- extractor patterns (`a(b)`, `a{ b }`)\n- logical and grouping patterns (`a and b`, `a or b`, `not a`, `(a)`)\n- lexical binding patterns (`let a`/`const a` - always match, bind `a` to subject)\n- regex patterns\n\nAnd as a stretch goal/follow-on/nice-to-have:\n- relational patterns (`< a`, `<= a`, `> a`, `>= a`)\n- `is` expressions for lightweight pattern matching in conditionals (as opposed to `if-let`/`while-let`)\n","format":"org.matrix.custom.html","formatted_body":"<p>The pattern matching syntax I'd primarily favor consists of:</p>\n<ul>\n<li>literal constant patterns (<code>0</code>, <code>true</code>, <code>null</code>, <code>&quot;foo&quot;</code>, etc.)</li>\n<li>object patterns (<code>{ x, y }</code>), more specifically <em>exhaustive</em> object patterns (i.e., <code>{ x, y }</code> won't match <code>{ x, y, z }</code>, but <code>{ x, y, ... }</code> would.)</li>\n<li>array patterns (<code>[x, y]</code>), more specifically <em>exhaustive</em> array patterns (i.e., <code>[x, y]</code> won't match <code>[x, y, z]</code>, but <code>[x, y, ...]</code> would.)</li>\n<li>qualified name patterns (<code>a</code> references in-scope <code>a</code>, <code>a.b</code> references in-scope <code>a</code> with property <code>b</code>, <code>undefined</code>, <code>Infinity</code>, <code>NaN</code>, <code>Number.MAX_SAFE_INTEGER</code>, etc.)</li>\n<li>unary numeric prefix patterns (<code>+Infinity</code>, <code>-a</code>, <code>-1</code>, etc.)</li>\n<li>extractor patterns (<code>a(b)</code>, <code>a{ b }</code>)</li>\n<li>logical and grouping patterns (<code>a and b</code>, <code>a or b</code>, <code>not a</code>, <code>(a)</code>)</li>\n<li>lexical binding patterns (<code>let a</code>/<code>const a</code> - always match, bind <code>a</code> to subject)</li>\n<li>regex patterns</li>\n</ul>\n<p>And as a stretch goal/follow-on/nice-to-have:</p>\n<ul>\n<li>relational patterns (<code>&lt; a</code>, <code>&lt;= a</code>, <code>&gt; a</code>, <code>&gt;= a</code>)</li>\n<li><code>is</code> expressions for lightweight pattern matching in conditionals (as opposed to <code>if-let</code>/<code>while-let</code>)</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The pattern matching syntax I'd primarily favor consists of:\n- literal constant patterns (`0`, `true`, `null`, `\"foo\"`, etc.)\n- object patterns (`{ x, y }`), more specifically _exhaustive_ object patterns (i.e., `{ x, y }` won't match `{ x, y, z }`, but `{ x, y, ... }` would.)\n- array patterns (`[x, y]`), more specifically _exhaustive_ array patterns (i.e., `[x, y]` won't match `[x, y, z]`, but `[x, y, ...]` would.)\n- qualified name patterns (`a` references in-scope `a`, `a.b` references in-scope `a` with property `b`, `undefined`, `Infinity`, `NaN`, `Number.MAX_SAFE_INTEGER`, etc.)\n- unary numeric prefix patterns (`+Infinity`, `-a`, `-1`, etc.)\n- extractor patterns (`a(b)`, `a{ b }`)\n- logical and grouping patterns (`a and b`, `a or b`, `not a`, `(a)`)\n- lexical binding patterns (`let a`/`const a` - always match, bind `a` to subject)\n- regex patterns\n\nAnd as a stretch goal/follow-on/nice-to-have:\n- relational patterns (`< a`, `<= a`, `> a`, `>= a`)\n- `is` expressions for lightweight pattern matching in conditionals (as opposed to `if-let`/`while-let`)\n","mimetype":"text/plain"},{"body":"<p>The pattern matching syntax I'd primarily favor consists of:</p>\n<ul>\n<li>literal constant patterns (<code>0</code>, <code>true</code>, <code>null</code>, <code>&quot;foo&quot;</code>, etc.)</li>\n<li>object patterns (<code>{ x, y }</code>), more specifically <em>exhaustive</em> object patterns (i.e., <code>{ x, y }</code> won't match <code>{ x, y, z }</code>, but <code>{ x, y, ... }</code> would.)</li>\n<li>array patterns (<code>[x, y]</code>), more specifically <em>exhaustive</em> array patterns (i.e., <code>[x, y]</code> won't match <code>[x, y, z]</code>, but <code>[x, y, ...]</code> would.)</li>\n<li>qualified name patterns (<code>a</code> references in-scope <code>a</code>, <code>a.b</code> references in-scope <code>a</code> with property <code>b</code>, <code>undefined</code>, <code>Infinity</code>, <code>NaN</code>, <code>Number.MAX_SAFE_INTEGER</code>, etc.)</li>\n<li>unary numeric prefix patterns (<code>+Infinity</code>, <code>-a</code>, <code>-1</code>, etc.)</li>\n<li>extractor patterns (<code>a(b)</code>, <code>a{ b }</code>)</li>\n<li>logical and grouping patterns (<code>a and b</code>, <code>a or b</code>, <code>not a</code>, <code>(a)</code>)</li>\n<li>lexical binding patterns (<code>let a</code>/<code>const a</code> - always match, bind <code>a</code> to subject)</li>\n<li>regex patterns</li>\n</ul>\n<p>And as a stretch goal/follow-on/nice-to-have:</p>\n<ul>\n<li>relational patterns (<code>&lt; a</code>, <code>&lt;= a</code>, <code>&gt; a</code>, <code>&gt;= a</code>)</li>\n<li><code>is</code> expressions for lightweight pattern matching in conditionals (as opposed to <code>if-let</code>/<code>while-let</code>)</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1663391261120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W0JRyACk9WUo8c7kq8Yr63ut1gCt6kqz_q59LDkggxg"},
{"content":{"body":"For example:\n```js\n// extractor patterns and custom matchers\nconst containsExport = { [Symbol.matcher](modifiers) { return modifiers?.some(isExportModifier); } };\nconst containsDefault = { [Symbol.matcher](modifiers) { return modifiers?.some(isDefaultModifier); } };\n\nmatch (node) {\n    when FunctionDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default function ...\n    when FunctionDeclaration{ modifiers: containsExport }: ..., // export function ...\n    when ClassDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default class ...\n    when ClassDeclaration{ modifiers: containsExport }: ..., // export class ...\n    when VariableStatement{ modifiers: containsExport }: ..., // export let/const/var ...\n}\n\n// logical patterns\nmatch (jsonRpcRequest) {\n    when { id: not (null or undefined) }: processRequest(jsonRpcRequest),\n    default: processNotification(jsonRpcRequest)\n}\n\n// relational patterns\nmatch (response) {\n    when { status: >= 500 }: \"server error\",\n    when { status: >= 400 }: \"client error\",\n    when { status: >= 300 }: \"redirect\",\n    when { status: >= 200 }: \"success\",\n    when { status: >= 100 }: \"informational\",\n}\n\n// lexical binding patterns\nmatch (opt) {\n    when Option.Some(let value): ...,\n    when Option.None: ...,\n}\n\nmatch (command) {\n    when { kind: \"move\", x: let x, y: let y }: ...,\n    when { kind: \"speak\", text: let message }: ...,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example:</p>\n<pre><code class=\"language-js\">// extractor patterns and custom matchers\nconst containsExport = { [Symbol.matcher](modifiers) { return modifiers?.some(isExportModifier); } };\nconst containsDefault = { [Symbol.matcher](modifiers) { return modifiers?.some(isDefaultModifier); } };\n\nmatch (node) {\n    when FunctionDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default function ...\n    when FunctionDeclaration{ modifiers: containsExport }: ..., // export function ...\n    when ClassDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default class ...\n    when ClassDeclaration{ modifiers: containsExport }: ..., // export class ...\n    when VariableStatement{ modifiers: containsExport }: ..., // export let/const/var ...\n}\n\n// logical patterns\nmatch (jsonRpcRequest) {\n    when { id: not (null or undefined) }: processRequest(jsonRpcRequest),\n    default: processNotification(jsonRpcRequest)\n}\n\n// relational patterns\nmatch (response) {\n    when { status: &gt;= 500 }: &quot;server error&quot;,\n    when { status: &gt;= 400 }: &quot;client error&quot;,\n    when { status: &gt;= 300 }: &quot;redirect&quot;,\n    when { status: &gt;= 200 }: &quot;success&quot;,\n    when { status: &gt;= 100 }: &quot;informational&quot;,\n}\n\n// lexical binding patterns\nmatch (opt) {\n    when Option.Some(let value): ...,\n    when Option.None: ...,\n}\n\nmatch (command) {\n    when { kind: &quot;move&quot;, x: let x, y: let y }: ...,\n    when { kind: &quot;speak&quot;, text: let message }: ...,\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For example:\n```js\n// extractor patterns and custom matchers\nconst containsExport = { [Symbol.matcher](modifiers) { return modifiers?.some(isExportModifier); } };\nconst containsDefault = { [Symbol.matcher](modifiers) { return modifiers?.some(isDefaultModifier); } };\n\nmatch (node) {\n    when FunctionDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default function ...\n    when FunctionDeclaration{ modifiers: containsExport }: ..., // export function ...\n    when ClassDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default class ...\n    when ClassDeclaration{ modifiers: containsExport }: ..., // export class ...\n    when VariableStatement{ modifiers: containsExport }: ..., // export let/const/var ...\n}\n\n// logical patterns\nmatch (jsonRpcRequest) {\n    when { id: not (null or undefined) }: processRequest(jsonRpcRequest),\n    default: processNotification(jsonRpcRequest)\n}\n\n// relational patterns\nmatch (response) {\n    when { status: >= 500 }: \"server error\",\n    when { status: >= 400 }: \"client error\",\n    when { status: >= 300 }: \"redirect\",\n    when { status: >= 200 }: \"success\",\n    when { status: >= 100 }: \"informational\",\n}\n\n// lexical binding patterns\nmatch (opt) {\n    when Option.Some(let value): ...,\n    when Option.None: ...,\n}\n\nmatch (command) {\n    when { kind: \"move\", x: let x, y: let y }: ...,\n    when { kind: \"speak\", text: let message }: ...,\n}\n```","mimetype":"text/plain"},{"body":"<p>For example:</p>\n<pre><code class=\"language-js\">// extractor patterns and custom matchers\nconst containsExport = { [Symbol.matcher](modifiers) { return modifiers?.some(isExportModifier); } };\nconst containsDefault = { [Symbol.matcher](modifiers) { return modifiers?.some(isDefaultModifier); } };\n\nmatch (node) {\n    when FunctionDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default function ...\n    when FunctionDeclaration{ modifiers: containsExport }: ..., // export function ...\n    when ClassDeclaration{ modifiers: containsExport and containsDefault }: ..., // export default class ...\n    when ClassDeclaration{ modifiers: containsExport }: ..., // export class ...\n    when VariableStatement{ modifiers: containsExport }: ..., // export let/const/var ...\n}\n\n// logical patterns\nmatch (jsonRpcRequest) {\n    when { id: not (null or undefined) }: processRequest(jsonRpcRequest),\n    default: processNotification(jsonRpcRequest)\n}\n\n// relational patterns\nmatch (response) {\n    when { status: &gt;= 500 }: &quot;server error&quot;,\n    when { status: &gt;= 400 }: &quot;client error&quot;,\n    when { status: &gt;= 300 }: &quot;redirect&quot;,\n    when { status: &gt;= 200 }: &quot;success&quot;,\n    when { status: &gt;= 100 }: &quot;informational&quot;,\n}\n\n// lexical binding patterns\nmatch (opt) {\n    when Option.Some(let value): ...,\n    when Option.None: ...,\n}\n\nmatch (command) {\n    when { kind: &quot;move&quot;, x: let x, y: let y }: ...,\n    when { kind: &quot;speak&quot;, text: let message }: ...,\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663393734316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$STWBNkYRWir1Tzik8TZ-00Lt0queIIdnC0LXKVg7lsk"}
]