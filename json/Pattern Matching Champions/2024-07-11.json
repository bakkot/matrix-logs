[
{"content":{"body":"Sounds like what they want is F# pipes or the ability to supply tacit unary functions. I still prefer F#-style, tbh, and I think it would have been easier to advance if we'd pushed back on supporting `await` and `yield` (e.g., `(await (x |> y)) |> z`) and just clarified the precedence of `|>` vs. `=>`","format":"org.matrix.custom.html","formatted_body":"Sounds like what they want is F# pipes or the ability to supply tacit unary functions. I still prefer F#-style, tbh, and I think it would have been easier to advance if we'd pushed back on supporting <code>await</code> and <code>yield</code> (e.g., <code>(await (x |&gt; y)) |&gt; z</code>) and just clarified the precedence of <code>|&gt;</code> vs. <code>=&gt;</code>","msgtype":"m.text"},"ts":1720660078736,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QxuxPopKrh9UvrT9UhrrOwr0Iz9KTO34IdUimc2WKjw"},
{"content":{"body":"By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the `await` syntax is one of the biggest arguments *for* pipeline, imo.","format":"org.matrix.custom.html","formatted_body":"By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the <code>await</code> syntax is one of the biggest arguments <em>for</em> pipeline, imo.","m.mentions":{},"msgtype":"m.text"},"ts":1720714325619,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Q_itGCJd7IPbAnsJsaaaJ31pahlEpGhcFsOdMvSa9Ds"},
{"content":{"body":"F# style still wouldn't be a world where it'd make sense for a function to be able to detect whether it was called inside a pipeline or not.","m.mentions":{},"msgtype":"m.text"},"ts":1720717434111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5M3jZbl3V8_si71jaFvJz_uSW0eN7-j29xrQ4DhPeAw"},
{"content":{"body":"> <@ljharb:matrix.org> F# style still wouldn't be a world where it'd make sense for a function to be able to detect whether it was called inside a pipeline or not.\n\nAgreed. Something loosely like that was floated about very early on as a way to deal with a leading or trailing context argument, which is why I proposed partial application as a way to make that part of the syntax instead of some other protocol or `this`-like binding mechanism.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$5M3jZbl3V8_si71jaFvJz_uSW0eN7-j29xrQ4DhPeAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>F# style still wouldn&#39;t be a world where it&#39;d make sense for a function to be able to detect whether it was called inside a pipeline or not.</blockquote></mx-reply>Agreed. Something loosely like that was floated about very early on as a way to deal with a leading or trailing context argument, which is why I proposed partial application as a way to make that part of the syntax instead of some other protocol or <code>this</code>-like binding mechanism.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5M3jZbl3V8_si71jaFvJz_uSW0eN7-j29xrQ4DhPeAw"}},"msgtype":"m.text"},"ts":1720721386723,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SU53YVe3_pQ1PfNOE5sveW1qGsjqHYsdXeOZJFU8-6A"},
{"content":{"body":"> <@tabatkins:matrix.org> By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the `await` syntax is one of the biggest arguments *for* pipeline, imo.\n\nBy \"pushed back on\" I meant that it wasn't necessarily a requirement for an MVP version of the proposal since there was a workaround for it (e.g., using parens), so we could have iterated on it in a follow on. IMO, F# pipelines had a chance for quick advancement as they were a building block with very simple semantics. The current pipeline approach requires more complexity as it also necessitates defining a topic token and managing lexical scope, and the semantics don't align with the predominant use cases of pipelines in the wild. Rather than aligning with the ecosystem, we opted for a syntax that prioritized a niche use case (arbitrary expression evaluation). F#-style had no concerns about scoping or topic style, and could have survived alongside `=>` event without partial application. And partial application solved the leading/trailing context argument concern without needing to complicate lexical scoping as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$Q_itGCJd7IPbAnsJsaaaJ31pahlEpGhcFsOdMvSa9Ds?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the <code>await</code> syntax is one of the biggest arguments <em>for</em> pipeline, imo.</blockquote></mx-reply>By \"pushed back on\" I meant that it wasn't necessarily a requirement for an MVP version of the proposal since there was a workaround for it (e.g., using parens), so we could have iterated on it in a follow on. IMO, F# pipelines had a chance for quick advancement as they were a building block with very simple semantics. The current pipeline approach requires more complexity as it also necessitates defining a topic token and managing lexical scope, and the semantics don't align with the predominant use cases of pipelines in the wild. Rather than aligning with the ecosystem, we opted for a syntax that prioritized a niche use case (arbitrary expression evaluation). F#-style had no concerns about scoping or topic style, and could have survived alongside <code>=&gt;</code> event without partial application. And partial application solved the leading/trailing context argument concern without needing to complicate lexical scoping as well.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q_itGCJd7IPbAnsJsaaaJ31pahlEpGhcFsOdMvSa9Ds"}},"msgtype":"m.text"},"ts":1720722114434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vtVvC9bwAvkpXoabDhI2l7kZLr7Hj9XGsuc241TXMGg"}
]