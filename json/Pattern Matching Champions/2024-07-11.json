[
{"content":{"body":"Sounds like what they want is F# pipes or the ability to supply tacit unary functions. I still prefer F#-style, tbh, and I think it would have been easier to advance if we'd pushed back on supporting `await` and `yield` (e.g., `(await (x |> y)) |> z`) and just clarified the precedence of `|>` vs. `=>`","format":"org.matrix.custom.html","formatted_body":"Sounds like what they want is F# pipes or the ability to supply tacit unary functions. I still prefer F#-style, tbh, and I think it would have been easier to advance if we'd pushed back on supporting <code>await</code> and <code>yield</code> (e.g., <code>(await (x |&gt; y)) |&gt; z</code>) and just clarified the precedence of <code>|&gt;</code> vs. <code>=&gt;</code>","msgtype":"m.text"},"ts":1720660078736,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QxuxPopKrh9UvrT9UhrrOwr0Iz9KTO34IdUimc2WKjw"},
{"content":{"body":"By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the `await` syntax is one of the biggest arguments *for* pipeline, imo.","format":"org.matrix.custom.html","formatted_body":"By \"pushed back on\" do you mean \"didn't support\" or \"required support for\"? Because \"fixing\" the <code>await</code> syntax is one of the biggest arguments <em>for</em> pipeline, imo.","m.mentions":{},"msgtype":"m.text"},"ts":1720714325619,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Q_itGCJd7IPbAnsJsaaaJ31pahlEpGhcFsOdMvSa9Ds"},
{"content":{"body":"F# style still wouldn't be a world where it'd make sense for a function to be able to detect whether it was called inside a pipeline or not.","m.mentions":{},"msgtype":"m.text"},"ts":1720717434111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5M3jZbl3V8_si71jaFvJz_uSW0eN7-j29xrQ4DhPeAw"}
]