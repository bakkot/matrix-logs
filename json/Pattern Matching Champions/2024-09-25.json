[
{"content":{"body":"My preference was to drop it, I'm not sure where others stand","msgtype":"m.text"},"ts":1727225193609,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dEAM4S9XsLYOUvTUKh9bRm5JA5IOUVNjcuIDGvndl28"},
{"content":{"body":"aight, first draft is https://docs.google.com/presentation/d/1ckdNcRpzMB7oV91k98gNkXxVtwkzqIv0vALPffSaU44/edit?usp=sharing","m.mentions":{},"msgtype":"m.text"},"ts":1727226403374,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HzpKw_oODx5A0UtuFFJtcXIEXvgaRJnnwf6RHR6wqG8"},
{"content":{"body":"i'm assuming \"no `when`\"","format":"org.matrix.custom.html","formatted_body":"i'm assuming \"no <code>when</code>\"","m.mentions":{},"msgtype":"m.text"},"ts":1727226410822,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$M7FhNYn4ggWPf3ZcxN-Z6OlVr5DPA9g1J-lN38P2gI0"},
{"content":{"body":"new slogan: \"no when, no how\"","m.mentions":{},"msgtype":"m.text"},"ts":1727226742989,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Pg_DZM8WODLgN8Kv3sJGOCoCNpEOw5vRPd1Gpy4VNvk"},
{"content":{"body":"my strong preference is to keep it","m.mentions":{},"msgtype":"m.text"},"ts":1727238313432,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RbDszasRFvHrH3Vwt3QspNZileFMM_DsaIP2ANZ71hE"},
{"content":{"body":"explicit > implicit","m.mentions":{},"msgtype":"m.text"},"ts":1727238324185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K3nXa2IZW4At9wIRaZJfzbR5lLr9Wy9kD_OrQgDbx7Y"},
{"content":{"body":"but for stage 2 i'm content saying \"we'll decide to keep or drop the `when` prefix before stage 2.7\"","format":"org.matrix.custom.html","formatted_body":"but for stage 2 i'm content saying \"we'll decide to keep or drop the <code>when</code> prefix before stage 2.7\"","m.mentions":{},"msgtype":"m.text"},"ts":1727238348237,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pPTCt_kCqqZFl5ihEOBVd6IRW6IpOxeNasDpVyOtMHY"},
{"content":{"body":"slide 4, `undefined` literal - `null` is always a literal, no exceptions","format":"org.matrix.custom.html","formatted_body":"slide 4, <code>undefined</code> literal - <code>null</code> is always a literal, no exceptions","m.mentions":{},"msgtype":"m.text"},"ts":1727238393374,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SchPOUSGJXyWpc35BSeVogWRoGCDn-IbCv2yQwv3wN0"},
{"content":{"body":" * slide 4, `undefined` literal - `null` is always a literal, no exceptions, no matter what we decide","format":"org.matrix.custom.html","formatted_body":" * slide 4, <code>undefined</code> literal - <code>null</code> is always a literal, no exceptions, no matter what we decide","m.mentions":{},"m.new_content":{"body":"slide 4, `undefined` literal - `null` is always a literal, no exceptions, no matter what we decide","format":"org.matrix.custom.html","formatted_body":"slide 4, <code>undefined</code> literal - <code>null</code> is always a literal, no exceptions, no matter what we decide","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SchPOUSGJXyWpc35BSeVogWRoGCDn-IbCv2yQwv3wN0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727238405048,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3pSn0mTNbV_SiQc46C64ufTEZ2roal9GSUYqEQO-9gQ"},
{"content":{"body":"oh oof, we decided not to make undefined and the infinities special?","m.mentions":{},"msgtype":"m.text"},"ts":1727238427948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JknDwOFOy2KgLTFK0Q05wodqubwVKyVkNX-Ee404sOM"},
{"content":{"body":" * oh oof, we decided not to make undefined and the non-finites special?","m.mentions":{},"m.new_content":{"body":"oh oof, we decided not to make undefined and the non-finites special?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JknDwOFOy2KgLTFK0Q05wodqubwVKyVkNX-Ee404sOM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727238435816,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W659YpdNSdBZzrjFQJb-00YOtSgDuR16zecrGiBXV54"},
{"content":{"body":"when you say `ident`, let's say `Identifier` in backticks, to be explicit about the grammar production","format":"org.matrix.custom.html","formatted_body":"when you say <code>ident</code>, let's say <code>Identifier</code> in backticks, to be explicit about the grammar production","m.mentions":{},"msgtype":"m.text"},"ts":1727238459937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vCBMbB5qV-UNPbTRAtHtbZDGKQ778ypJOxQBp3G_vMI"},
{"content":{"body":"for slide 6, falsiness implying \"no match\" is fine, and a *primitive* truthy value implying \"match\" is fine, but an object should be the `{ matched: boolean, value: unknown }` schema, yes?","format":"org.matrix.custom.html","formatted_body":"for slide 6, falsiness implying \"no match\" is fine, and a <em>primitive</em> truthy value implying \"match\" is fine, but an object should be the <code>{ matched: boolean, value: unknown }</code> schema, yes?","m.mentions":{},"msgtype":"m.text"},"ts":1727238528749,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7mL2oV0FtVu8hKf0eTRa823wLGC6ZM55aG97EUD3a0Y"},
{"content":{"body":"for slide 7, this is wrong - it needs to check for `Object(3)` - ie, boxed numbers - also, same for all primitive wrappers. `typeof` only detects primitives.","format":"org.matrix.custom.html","formatted_body":"for slide 7, this is wrong - it needs to check for <code>Object(3)</code> - ie, boxed numbers - also, same for all primitive wrappers. <code>typeof</code> only detects primitives.","m.mentions":{},"msgtype":"m.text"},"ts":1727238571239,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x9ctIm4_taHpLjBFTQnwDpwvHqmLA-fWd3fM6zbI62M"},
{"content":{"body":"slides 14 and 15 should reference caching.","m.mentions":{},"msgtype":"m.text"},"ts":1727238639999,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ajTdipL5mp4k0JsFvkWCBsbtodE0Q2nC6-Ud6bZh7fo"},
{"content":{"body":"globally, `s/falsey/falsy`","format":"org.matrix.custom.html","formatted_body":"globally, <code>s/falsey/falsy</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727238644508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$45ZQg__U2apwRil8mCP5ut4shynzPm8ya-_4PDlwv5Y"},
{"content":{"body":" * slides 14 and 15 should reference caching, even though it's explained on slide 18","m.mentions":{},"m.new_content":{"body":"slides 14 and 15 should reference caching, even though it's explained on slide 18","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ajTdipL5mp4k0JsFvkWCBsbtodE0Q2nC6-Ud6bZh7fo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727238692933,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YUJPakQ994pN29ZjNnQBMh6CIl6d07Rx_hRirCpNJxs"},
{"content":{"body":"i'd love more elaboration on slide 17 also","m.mentions":{},"msgtype":"m.text"},"ts":1727238753156,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aa-jOFeESPJqhZ27l6pJnUMg0JQZJrlKjdD3Rta-AfI"},
{"content":{"body":"overall, awesome, this is a great first draft :-)","m.mentions":{},"msgtype":"m.text"},"ts":1727238763135,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZTeHlhSgipS3jbeZ706RmhPEMuBAyhZNu7NQzXiLU6Y"},
{"content":{"body":"> <@tabatkins:matrix.org> i'm assuming \"no `when`\"\n\ncurrent spec is no when","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$M7FhNYn4ggWPf3ZcxN-Z6OlVr5DPA9g1J-lN38P2gI0\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>i'm assuming \"no <code>when</code>\"</blockquote></mx-reply>current spec is no when","m.relates_to":{"m.in_reply_to":{"event_id":"$M7FhNYn4ggWPf3ZcxN-Z6OlVr5DPA9g1J-lN38P2gI0"}},"msgtype":"m.text"},"ts":1727239452887,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aQYmkvYr0hFuTIyByNUPEnD4t3pV2wNcU010YNcctqg"},
{"content":{"body":"👍","msgtype":"m.text"},"ts":1727239474396,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fUpmylYbfzX9anida54ARcyurc61z3CkmX2RvwFzPOw"},
{"content":{"body":"Examples in the readme are still all over, wasn't 100% sure","msgtype":"m.text"},"ts":1727239489683,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$abenOuMS5H4OtGQSB_SKjrLnqj-aStiWMnVuushtQg0"},
{"content":{"body":"I'll fix","msgtype":"m.text"},"ts":1727239492128,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cl_E_uI094VSom_GYi13LDasRsqg44RrotwiB_8_F3g"},
{"content":{"body":"> <@ljharb:matrix.org> for slide 6, falsiness implying \"no match\" is fine, and a *primitive* truthy value implying \"match\" is fine, but an object should be the `{ matched: boolean, value: unknown }` schema, yes?\n\nNah, remember we changed the model to let you tell which mode you're in (bool or arglist); in the bool mode it's just being a bool that matters, and in the list mode we expect a list but allow for bools","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7mL2oV0FtVu8hKf0eTRa823wLGC6ZM55aG97EUD3a0Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />for slide 6, falsiness implying \"no match\" is fine, and a <em>primitive</em> truthy value implying \"match\" is fine, but an object should be the <code>{ matched: boolean, value: unknown }</code> schema, yes?</blockquote></mx-reply>Nah, remember we changed the model to let you tell which mode you're in (bool or arglist); in the bool mode it's just being a bool that matters, and in the list mode we expect a list but allow for bools","m.relates_to":{"m.in_reply_to":{"event_id":"$7mL2oV0FtVu8hKf0eTRa823wLGC6ZM55aG97EUD3a0Y"}},"msgtype":"m.text"},"ts":1727239623078,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$O622yR7anELupPOwoE5OORaPFANfSfxyxFJAd8qDMv8"},
{"content":{"body":"hm, ok","m.mentions":{},"msgtype":"m.text"},"ts":1727239652174,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I2EtknRVoeD-LjOe4EExTRgeiFklCjz-BJXHdwTg_lE"},
{"content":{"body":"> <@ljharb:matrix.org> slide 4, `undefined` literal - `null` is always a literal, no exceptions\n\ncurrently in the spec, `undefined` is not a literal, it will find the \"undefined\" variable which might be shadowed. if we have concensus that this should not be like this, plz open an issue and I'll fix the spec","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$SchPOUSGJXyWpc35BSeVogWRoGCDn-IbCv2yQwv3wN0\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>slide 4, <code>undefined</code> literal - <code>null</code> is always a literal, no exceptions</blockquote></mx-reply>currently in the spec, <code>undefined</code> is not a literal, it will find the &quot;undefined&quot; variable which might be shadowed. if we have concensus that this should not be like this, plz open an issue and I'll fix the spec","m.relates_to":{"m.in_reply_to":{"event_id":"$SchPOUSGJXyWpc35BSeVogWRoGCDn-IbCv2yQwv3wN0"}},"msgtype":"m.text"},"ts":1727239749796,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$On8HnJMRuVRYmpsOk5oasdzE3-Bsuh-FYhLlax0tDn0"},
{"content":{"body":"originally we had `undefined`, `Infinity`, and `NaN` as \"special\", where they'd never be identifiers and always refer to the intuitive values","format":"org.matrix.custom.html","formatted_body":"originally we had <code>undefined</code>, <code>Infinity</code>, and <code>NaN</code> as \"special\", where they'd never be identifiers and always refer to the intuitive values","m.mentions":{},"msgtype":"m.text"},"ts":1727239805979,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7ac_83o_Ygbt4wIszKkYrzL2_iik0MMieF4ZAMNTORk"},
{"content":{"body":"> Any non-reserved ident sequence, with dots and/or square brackets.\n\nWe have a little bit more than that. `this`, `MetaProperty`, `super` and `PrivateIdentifier` can also involve this. (see `PatternMatchingMemberExpression`)","format":"org.matrix.custom.html","formatted_body":"<blockquote><p>Any non-reserved ident sequence, with dots and/or square brackets.</p></blockquote><p>We have a little bit more than that. <code>this</code>, <code>MetaProperty</code>, <code>super</code> and <code>PrivateIdentifier</code> can also involve this. (see <code>PatternMatchingMemberExpression</code>)</p>","msgtype":"m.text"},"ts":1727239889329,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$clwCS22OHTCXTUoaZSY4MQAmcCgUJTZ778wp47CiNZw"},
{"content":{"body":"slide 6\n\n> Function is invoked with (subject, {matchType:“boolean”}).\n\nit's f(subject, hint, receiver) right now. e.g. `f(subject, \"boolean\", thisValue)`","format":"org.matrix.custom.html","formatted_body":"<p>slide 6</p><blockquote><p>Function is invoked with (subject, {matchType:“boolean”}).</p></blockquote><p>it's f(subject, hint, receiver) right now. e.g. <code>f(subject, &quot;boolean&quot;, thisValue)</code></p>","msgtype":"m.text"},"ts":1727240040732,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Bfwgdi0jewgRJbAgndWhjuvPSqpiVZumZmu7kG4FoaM"},
{"content":{"body":"* slide 6\n\n> Function is invoked with (subject, {matchType:“boolean”}).\n\nit's `f(subject, hint, receiver)` right now. e.g. `f(subject, \"boolean\", thisValue)`","format":"org.matrix.custom.html","formatted_body":"* <p>slide 6</p><blockquote><p>Function is invoked with (subject, {matchType:“boolean”}).</p></blockquote><p>it's <code>f(subject, hint, receiver)</code> right now. e.g. <code>f(subject, &quot;boolean&quot;, thisValue)</code></p>","m.new_content":{"body":"slide 6\n\n> Function is invoked with (subject, {matchType:“boolean”}).\n\nit's `f(subject, hint, receiver)` right now. e.g. `f(subject, \"boolean\", thisValue)`","format":"org.matrix.custom.html","formatted_body":"<p>slide 6</p><blockquote><p>Function is invoked with (subject, {matchType:“boolean”}).</p></blockquote><p>it's <code>f(subject, hint, receiver)</code> right now. e.g. <code>f(subject, &quot;boolean&quot;, thisValue)</code></p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Bfwgdi0jewgRJbAgndWhjuvPSqpiVZumZmu7kG4FoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727240056988,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nWe8GUF56z9bu4pQi9lyp64UxBjdG9Wm77ppiuFcOQc"},
{"content":{"body":"slide 7: actually we unbox boxed primitives (https://tc39.es/proposal-pattern-matching/#sec-number-%symbol.custommatcher%)","msgtype":"m.text"},"ts":1727240120199,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$OPpCWttrdFpxcPD3d_pRrnrq2ZWcv5awmSZ5MZXd0RQ"},
{"content":{"body":"* slide 7: actually we unbox boxed primitives (https://tc39.es/proposal-pattern-matching/#sec-number-%symbol.custommatcher% )","m.new_content":{"body":"slide 7: actually we unbox boxed primitives (https://tc39.es/proposal-pattern-matching/#sec-number-%symbol.custommatcher% )","msgtype":"m.text"},"m.relates_to":{"event_id":"$OPpCWttrdFpxcPD3d_pRrnrq2ZWcv5awmSZ5MZXd0RQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727240125755,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3Ymas-vim-LQXRn5MIQT_INv0nQTw7AzaJmh_FgzD24"},
{"content":{"body":"side 8: I think it's better to add `hint, receiver` to match the spec https://tc39.es/proposal-pattern-matching/#sec-function.prototype-%symbol.custommatcher%","format":"org.matrix.custom.html","formatted_body":"side 8: I think it's better to add <code>hint, receiver</code> to match the spec https://tc39.es/proposal-pattern-matching/#sec-function.prototype-%symbol.custommatcher%","msgtype":"m.text"},"ts":1727240211755,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qGKfVS9BU--H6Ll00TjkRW4DZHo8YEVJoNdEkpiWmBY"},
{"content":{"body":"> If return value is `true` (not truthy!), same as returning `[]`.\n\nslide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns `true`, you should use it like `f: ...`. Use it like `f(...): ...` is always an error","format":"org.matrix.custom.html","formatted_body":"<blockquote><p>If return value is <code>true</code> (not truthy!), same as returning <code>[]</code>.</p></blockquote><p>slide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns <code>true</code>, you should use it like <code>f: ...</code>. Use it like <code>f(...): ...</code> is always an error</p>","msgtype":"m.text"},"ts":1727240807430,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$gOvIOc7A_7Bse6HDcMM-gzaIF13ElSwa1BcnRqS7M78"},
{"content":{"body":"* > If return value is `true` (not truthy!), same as returning `[]`.\n\nslide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns `true`, you should use it like `f: ...`. Use it like `f(...): ...` is always an error\n\ncurrent in spec: https://tc39.es/proposal-pattern-matching/#sec-invoke-custom-matcher","format":"org.matrix.custom.html","formatted_body":"* <blockquote><p>If return value is <code>true</code> (not truthy!), same as returning <code>[]</code>.</p></blockquote><p>slide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns <code>true</code>, you should use it like <code>f: ...</code>. Use it like <code>f(...): ...</code> is always an error</p><p>current in spec: https://tc39.es/proposal-pattern-matching/#sec-invoke-custom-matcher</p>","m.new_content":{"body":"> If return value is `true` (not truthy!), same as returning `[]`.\n\nslide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns `true`, you should use it like `f: ...`. Use it like `f(...): ...` is always an error\n\ncurrent in spec: https://tc39.es/proposal-pattern-matching/#sec-invoke-custom-matcher","format":"org.matrix.custom.html","formatted_body":"<blockquote><p>If return value is <code>true</code> (not truthy!), same as returning <code>[]</code>.</p></blockquote><p>slide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns <code>true</code>, you should use it like <code>f: ...</code>. Use it like <code>f(...): ...</code> is always an error</p><p>current in spec: https://tc39.es/proposal-pattern-matching/#sec-invoke-custom-matcher</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$gOvIOc7A_7Bse6HDcMM-gzaIF13ElSwa1BcnRqS7M78","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727240841984,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SfN0ZT2fouRbNe_cc5g_03aATW-lj2THfmFEM4BaE_Y"},
{"content":{"body":"> <@jackworks:matrix.org> > If return value is `true` (not truthy!), same as returning `[]`.\n> \n> slide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns `true`, you should use it like `f: ...`. Use it like `f(...): ...` is always an error\n\nI see the example of this in slide 17. it might be OK if it looks better, but still it's not in the spec. please open an issue if we think this is OK.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$gOvIOc7A_7Bse6HDcMM-gzaIF13ElSwa1BcnRqS7M78\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><blockquote><p>If return value is <code>true</code> (not truthy!), same as returning <code>[]</code>.</p></blockquote><p>slide 16. we don't have this in the spec, and I think this behavior might be a footgun. if a function returns <code>true</code>, you should use it like <code>f: ...</code>. Use it like <code>f(...): ...</code> is always an error</p></blockquote></mx-reply>I see the example of this in slide 17. it might be OK if it looks better, but still it&#39;s not in the spec. please open an issue if we think this is OK.","m.relates_to":{"m.in_reply_to":{"event_id":"$gOvIOc7A_7Bse6HDcMM-gzaIF13ElSwa1BcnRqS7M78"}},"msgtype":"m.text"},"ts":1727241028709,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$2Z9CbQh1sYlgzaVac6WdBLzZaR5yL5uGR94tsoEMpYs"},
{"content":{"body":"* I see the example of this in slide 17. it might be OK if it looks better, but still, it's not in the spec. please open an issue if we think this is OK and I'll add it into the spec.","m.new_content":{"body":"I see the example of this in slide 17. it might be OK if it looks better, but still, it's not in the spec. please open an issue if we think this is OK and I'll add it into the spec.","msgtype":"m.text"},"m.relates_to":{"event_id":"$2Z9CbQh1sYlgzaVac6WdBLzZaR5yL5uGR94tsoEMpYs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727241084570,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LxohfS1n7lgp9L8xbLpf1tp9fBWNc7MpPvAldlVQA8Y"},
{"content":{"body":"Oh, that's definitely been explicitly discussed in the past.","m.mentions":{},"msgtype":"m.text"},"ts":1727281256414,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yUhTz7CSnj27djnegt2SuhNJ-pxWFK3lgkXgGy2hN2M"},
{"content":{"body":"But hm, I'm probably fine with restricting it.","m.mentions":{},"msgtype":"m.text"},"ts":1727281288264,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gbof5AQUGZPXGhbo0WvtY45AGfDM5YB52uxSFDfMIko"},
{"content":{"body":"> <@ljharb:matrix.org> i'd love more elaboration on slide 17 also\n\nWhat sort of elaboration are you thinking of? In the slide itself (there's not really much space) or just in speaker notes?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$aa-jOFeESPJqhZ27l6pJnUMg0JQZJrlKjdD3Rta-AfI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i&#39;d love more elaboration on slide 17 also</blockquote></mx-reply>What sort of elaboration are you thinking of? In the slide itself (there's not really much space) or just in speaker notes?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aa-jOFeESPJqhZ27l6pJnUMg0JQZJrlKjdD3Rta-AfI"}},"msgtype":"m.text"},"ts":1727284212169,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HGc2tCiYmAbHx3nyTKgeAPlTq7JxglSucUDSwtlBeyM"},
{"content":{"body":"like \"matches\" and \"doesn't match\", i'm pretty confused about why some of those are","m.mentions":{},"msgtype":"m.text"},"ts":1727284255287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FqopfMk6IhycoqkUtvntL0QEwhDQSWY6c6dvQqVrDF4"},
{"content":{"body":"Okay, I've addressed all of the feedback.","m.mentions":{},"msgtype":"m.text"},"ts":1727286281737,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BifKoElZ-g3IamP614ugeMHBKK9LssR5MLIH_LgxGoQ"},
{"content":{"body":"ljharb: I've rewritten slide 17 a decent bit, is it clearer or do you still want more details in the notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I've rewritten slide 17 a decent bit, is it clearer or do you still want more details in the notes?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1727286303327,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hOuP741YOZc3R9Efr8OOOaS2-y0raLiJ2hEj5HK5hPo"},
{"content":{"body":"Now let me go rewrite the README, it's so inconsistent with both itself and the spec text proposal","m.mentions":{},"msgtype":"m.text"},"ts":1727286398120,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oQ9rJ7Y7alpnBp82kdbbhE6vOru7qKuib20p-Zxnsk4"},
{"content":{"body":"so why does `Option.Some` match 5, but `Option.some()` does not?","format":"org.matrix.custom.html","formatted_body":"so why does <code>Option.Some</code> match 5, but <code>Option.some()</code> does not?","m.mentions":{},"msgtype":"m.text"},"ts":1727287066236,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mLkL49EWDCPlsJu89H8Wnm3qFGYtELBIbV0W7tfWLeY"},
{"content":{"body":"also, in the second example, what happens with `Option.None(undefined)`? is that different than `Option.None()`?","format":"org.matrix.custom.html","formatted_body":"also, in the second example, what happens with <code>Option.None(undefined)</code>? is that different than <code>Option.None()</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1727287105758,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OQ5YZs9gnzagzkSwOG0lXr8Hdtq9LKcHcN0ymRNEMzg"},
{"content":{"body":"`Option.Some` is doing a boolean check - per the impl, it just verifies the type is right. Option.Some() is doing a list check - the impl returns a `[s.v]` array, and the arglist (equivalent to a `[]` matcher) doesn't match it.","format":"org.matrix.custom.html","formatted_body":"<code>Option.Some</code> is doing a boolean check - per the impl, it just verifies the type is right. Option.Some() is doing a list check - the impl returns a <code>[s.v]</code> array, and the arglist (equivalent to a <code>[]</code> matcher) doesn't match it.","m.mentions":{},"msgtype":"m.text"},"ts":1727287378403,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_7H4pWZ5FAgTI2FkGr2pbjdoZs9k4EgwDkP9qQYadkg"},
{"content":{"body":"Similarly, `Option.None(undefined)` wouldn't match, because the impl returns a `[]` value, which doesn't match a `[undefined]` pattern.","format":"org.matrix.custom.html","formatted_body":"Similarly, <code>Option.None(undefined)</code> wouldn't match, because the impl returns a <code>[]</code> value, which doesn't match a <code>[undefined]</code> pattern.","m.mentions":{},"msgtype":"m.text"},"ts":1727287443361,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zPg6kO474oy0Aqf5qit9ybW3FMLo1GoQER3MxlwVf5g"},
{"content":{"body":" * `Option.Some` is doing a boolean check - per the impl, it just verifies the type is right (which is the expected pattern for most custom matchers in boolean context). Option.Some() is doing a list check - the impl returns a `[s.v]` array, and the arglist (equivalent to a `[]` matcher) doesn't match it.","format":"org.matrix.custom.html","formatted_body":" * <code>Option.Some</code> is doing a boolean check - per the impl, it just verifies the type is right (which is the expected pattern for most custom matchers in boolean context). Option.Some() is doing a list check - the impl returns a <code>[s.v]</code> array, and the arglist (equivalent to a <code>[]</code> matcher) doesn't match it.","m.mentions":{},"m.new_content":{"body":"`Option.Some` is doing a boolean check - per the impl, it just verifies the type is right (which is the expected pattern for most custom matchers in boolean context). Option.Some() is doing a list check - the impl returns a `[s.v]` array, and the arglist (equivalent to a `[]` matcher) doesn't match it.","format":"org.matrix.custom.html","formatted_body":"<code>Option.Some</code> is doing a boolean check - per the impl, it just verifies the type is right (which is the expected pattern for most custom matchers in boolean context). Option.Some() is doing a list check - the impl returns a <code>[s.v]</code> array, and the arglist (equivalent to a <code>[]</code> matcher) doesn't match it.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_7H4pWZ5FAgTI2FkGr2pbjdoZs9k4EgwDkP9qQYadkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727288651768,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$H4nmcWrOO58tFaweN_eT7eRfIwqnOdc3L30JRbd9_6M"},
{"content":{"body":"Slide 4: use of `-` as separator in\n> 0/+0/-0 only exception - 0 compares with SameValueZero\n\nIs mildly confusing as it could be read as `-0`. I suggest changing this to an em-dash or using `:`","format":"org.matrix.custom.html","formatted_body":"<p>Slide 4: use of <code>-</code> as separator in</p>\n<blockquote>\n<p>0/+0/-0 only exception - 0 compares with SameValueZero</p>\n</blockquote>\n<p>Is mildly confusing as it could be read as <code>-0</code>. I suggest changing this to an em-dash or using <code>:</code></p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727293274694,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p2Rlcx8qGjtbMmrAfM9jAGEA6541yfNM1xnk-dAIAz8"},
{"content":{"body":"> <@ljharb:matrix.org> originally we had `undefined`, `Infinity`, and `NaN` as \"special\", where they'd never be identifiers and always refer to the intuitive values\n\nI'm not a fan of changing scoping semantics to be out of line from the rest of the language as it breaks intuition in other ways and prevents host emulation (i.e., what if someone wants to create a `Compartment` that replaces the global `Infinity` or `NaN` in some fashion). ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$7ac_83o_Ygbt4wIszKkYrzL2_iik0MMieF4ZAMNTORk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>originally we had <code>undefined</code>, <code>Infinity</code>, and <code>NaN</code> as \"special\", where they'd never be identifiers and always refer to the intuitive values</blockquote></mx-reply>I'm not a fan of changing scoping semantics to be out of line from the rest of the language as it breaks intuition in other ways and prevents host emulation (i.e., what if someone wants to create a <code>Compartment</code> that replaces the global <code>Infinity</code> or <code>NaN</code> in some fashion).","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7ac_83o_Ygbt4wIszKkYrzL2_iik0MMieF4ZAMNTORk"}},"msgtype":"m.text"},"ts":1727293455193,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7EUXl0HTFhe9F8uGXjKujRYV6J3zhmHrlWrzHfCirII"},
{"content":{"body":"aha ok thanks","m.mentions":{},"msgtype":"m.text"},"ts":1727293572157,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GPNaRf1LBrFShu5RAk-VSPPy32ZupiOMtw0EUFyzD-A"},
{"content":{"body":"i think that's a weirdness of extractors then, that only adding `()` drastically changes the meaning of the pattern, but i suppose it's true in JS too","format":"org.matrix.custom.html","formatted_body":"i think that's a weirdness of extractors then, that only adding <code>()</code> drastically changes the meaning of the pattern, but i suppose it's true in JS too","m.mentions":{},"msgtype":"m.text"},"ts":1727293601981,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9Y_xZFQwu6ZC0tb7qKZ2udbnWlk-PRMT-bJhTwthlmY"},
{"content":{"body":"Not a weirdness, IMO. To extract you must have something to destructure and match against. `foo is Bar()` would expect the custom match result to yield zero elements, so `true` is not a reasonable result to match against.","format":"org.matrix.custom.html","formatted_body":"Not a weirdness, IMO. To extract you must have something to destructure and match against. <code>foo is Bar()</code> would expect the custom match result to yield zero elements, so <code>true</code> is not a reasonable result to match against.","m.mentions":{},"msgtype":"m.text"},"ts":1727293824266,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0tc_EIPClLs48Ska6rCtchNFG5YrrtO5jqzIh1ImIvI"},
{"content":{"body":"TabAtkins: I'd recommend you move custom matcher slides closer to the end so that we don't end up stuck on that topic before we've provided context about the rest of the pattern syntax and matching behavior. If you want to reference how `match (x) { Number: ... }` works, I'd do it in a more hand-wavy way and just say that we'll come back to that later in the slides.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I'd recommend you move custom matcher slides closer to the end so that we don't end up stuck on that topic before we've provided context about the rest of the pattern syntax and matching behavior. If you want to reference how <code>match (x) { Number: ... }</code> works, I'd do it in a more hand-wavy way and just say that we'll come back to that later in the slides.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"ts":1727294052558,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4TJwGAsLuWZiqaWB1o3QjwL453s5J1rNzdPxpVTTblk"},
{"content":{"body":"IMO, a good topic order for these slides might be:\n1. `match` syntax overview\n2. Literal constant patterns (i.e., \"Primitive Patterns\")\n3. Reference patterns (variable references and member references)\n4. Object patterns\n5. Array patterns\n6. Discards/`void` patterns\n7. Extractors\n9. Combinator patterns (and/or/not/parens)\n8. Variable declaration patterns (i.e., `let`/`const`/`var`) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern \n10. `if` patterns\n11. Semantics of custom matchers\n12. Future syntax\n\nThis order progressively builds in complexity while leveraging key information from previous slides. For example `if` patterns really need `and` to be meaningful. Oftentimes, so do `let` patterns.","format":"org.matrix.custom.html","formatted_body":"<p>IMO, a good topic order for these slides might be:</p>\n<ol>\n<li><code>match</code> syntax overview</li>\n<li>Literal constant patterns (i.e., \"Primitive Patterns\")</li>\n<li>Reference patterns (variable references and member references)</li>\n<li>Object patterns</li>\n<li>Array patterns</li>\n<li>Discards/<code>void</code> patterns</li>\n<li>Extractors</li>\n<li>Combinator patterns (and/or/not/parens)</li>\n<li>Variable declaration patterns (i.e., <code>let</code>/<code>const</code>/<code>var</code>) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern</li>\n<li><code>if</code> patterns</li>\n<li>Semantics of custom matchers</li>\n<li>Future syntax</li>\n</ol>\n<p>This order progressively builds in complexity while leveraging key information from previous slides. For example <code>if</code> patterns really need <code>and</code> to be meaningful. Oftentimes, so do <code>let</code> patterns.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727294793165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5rN1U2qJrKYUSxEdHlXo4xCEYRNAmjEvmpmzX7YZ6Qs"},
{"content":{"body":"On slide 20, you have `match (Option.Some(5))` and `match (Option.None())`. Since you have defined these as `class` definitions, these examples would throw at runtime. They should read `match (new Option.Some(5))` and `match (new Option.None())`. the latter of which is somewhat unfortunate since you only really want a singleton instance of `None`.","format":"org.matrix.custom.html","formatted_body":"On slide 20, you have <code>match (Option.Some(5))</code> and <code>match (Option.None())</code>. Since you have defined these as <code>class</code> definitions, these examples would throw at runtime. They should read <code>match (new Option.Some(5))</code> and <code>match (new Option.None())</code>. the latter of which is somewhat unfortunate since you only really want a singleton instance of <code>None</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727294965920,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kH2WGqAcvJmlVDmDO24ENlcCvFQpNYA4eHoeAnTby3Y"},
{"content":{"body":"Also, the definition itself throws at runtime because you don't call `super()`.","format":"org.matrix.custom.html","formatted_body":"Also, the definition itself throws at runtime because you don't call <code>super()</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727295231956,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9rnwk_JC3enKRVQ-4qtm4J326u2H527ffeoQ_DGe-Aw"},
{"content":{"body":"> <@rbuckton:matrix.org> IMO, a good topic order for these slides might be:\n> 1. `match` syntax overview\n> 2. Literal constant patterns (i.e., \"Primitive Patterns\")\n> 3. Reference patterns (variable references and member references)\n> 4. Object patterns\n> 5. Array patterns\n> 6. Discards/`void` patterns\n> 7. Extractors\n> 9. Combinator patterns (and/or/not/parens)\n> 8. Variable declaration patterns (i.e., `let`/`const`/`var`) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern \n> 10. `if` patterns\n> 11. Semantics of custom matchers\n> 12. Future syntax\n> \n> This order progressively builds in complexity while leveraging key information from previous slides. For example `if` patterns really need `and` to be meaningful. Oftentimes, so do `let` patterns.\n\nMakes sense, especially since the current custom matcher slides end up having to care about the extractor details too.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$5rN1U2qJrKYUSxEdHlXo4xCEYRNAmjEvmpmzX7YZ6Qs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>IMO, a good topic order for these slides might be:</p>\n<ol>\n<li><code>match</code> syntax overview</li>\n<li>Literal constant patterns (i.e., \"Primitive Patterns\")</li>\n<li>Reference patterns (variable references and member references)</li>\n<li>Object patterns</li>\n<li>Array patterns</li>\n<li>Discards/<code>void</code> patterns</li>\n<li>Extractors</li>\n<li>Combinator patterns (and/or/not/parens)</li>\n<li>Variable declaration patterns (i.e., <code>let</code>/<code>const</code>/<code>var</code>) - calling them \"Binding Patterns\" is mildly confusing as JS already has something else called a binding pattern</li>\n<li><code>if</code> patterns</li>\n<li>Semantics of custom matchers</li>\n<li>Future syntax</li>\n</ol>\n<p>This order progressively builds in complexity while leveraging key information from previous slides. For example <code>if</code> patterns really need <code>and</code> to be meaningful. Oftentimes, so do <code>let</code> patterns.</p>\n</blockquote></mx-reply>Makes sense, especially since the current custom matcher slides end up having to care about the extractor details too.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5rN1U2qJrKYUSxEdHlXo4xCEYRNAmjEvmpmzX7YZ6Qs"}},"msgtype":"m.text"},"ts":1727295247890,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3u6w_zE12wnFNPK5Q3wf2XmHh0YDP2UfbwU7lWsa24w"},
{"content":{"body":"Tho I think variable declarations needs to be earlier; I need them in several other examples. I think the use of combinators is obvious enough to use them ahead of time without comment.","m.mentions":{},"msgtype":"m.text"},"ts":1727295396732,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$L0TJu9_7a73VjvTwqR2Pv_JmbsguPJaPMuxENfjgX2o"},
{"content":{"body":"Here's another way to write `Option`:\n```js\nclass Option {\n    static #none = new this();\n\n    #value;\n\n    constructor(value) { this.#value = value; }\n\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s && #value in s && s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another way to write <code>Option</code>:</p>\n<pre><code class=\"language-js\">class Option {\n    static #none = new this();\n\n    #value;\n\n    constructor(value) { this.#value = value; }\n\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s &amp;&amp; #value in s &amp;&amp; s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727295640953,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wf6ro8KOiFqEOw_XbMpDfQ5qcHNoe_0lInL_dI6eaPo"},
{"content":{"body":" * Here's another way to write `Option`:\n\n```js\nclass Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s && #value in s && s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another way to write <code>Option</code>:</p>\n<pre><code class=\"language-js\">class Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s &amp;&amp; #value in s &amp;&amp; s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Here's another way to write `Option`:\n\n```js\nclass Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s && #value in s && s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another way to write <code>Option</code>:</p>\n<pre><code class=\"language-js\">class Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s &amp;&amp; #value in s &amp;&amp; s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Wf6ro8KOiFqEOw_XbMpDfQ5qcHNoe_0lInL_dI6eaPo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727295756089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CaSUduUKvyGtllet3woUR8Hr8AfyTyMxIRW6RTvWnY4"},
{"content":{"body":" * Here's another way to write `Option` that lets you avoid having to write `new` in the `match` examples:\n\n```js\nclass Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s && #value in s && s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another way to write <code>Option</code> that lets you avoid having to write <code>new</code> in the <code>match</code> examples:</p>\n<pre><code class=\"language-js\">class Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s &amp;&amp; #value in s &amp;&amp; s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Here's another way to write `Option` that lets you avoid having to write `new` in the `match` examples:\n\n```js\nclass Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s && #value in s && s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another way to write <code>Option</code> that lets you avoid having to write <code>new</code> in the <code>match</code> examples:</p>\n<pre><code class=\"language-js\">class Option {\n    static #none = new this();\n    #value;\n    constructor(value) { this.#value = value; }\n    static Some(value) { return new Option(value); }\n    static None() { return Option.#none; }\n    static {\n        this.Some[Symbol.customMatcher] = function (s, hint) {\n            if (s &amp;&amp; #value in s &amp;&amp; s !== Option.#none) {\n                return hint === \"boolean\" ? true : [s.#value];\n            }\n            return false;\n        };\n        this.None[Symbol.customMatcher] = function (s, hint) {\n            if (s === Option.#none) {\n                return hint === \"boolean\" ? true : [];\n            }\n            return false;\n        };\n    }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Wf6ro8KOiFqEOw_XbMpDfQ5qcHNoe_0lInL_dI6eaPo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727295844569,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oktfOECsUM-MQheFJO1wNA_3yJZTGqxyZyPyfuov1-M"},
{"content":{"body":"I think you should rename the \"Variable Patterns\" slide. You're using \"Variable\" here while talking about an `IdentifierReference`, while I'd more equate \"Variable\" to `let`/`const`/`var` patterns","format":"org.matrix.custom.html","formatted_body":"I think you should rename the \"Variable Patterns\" slide. You're using \"Variable\" here while talking about an <code>IdentifierReference</code>, while I'd more equate \"Variable\" to <code>let</code>/<code>const</code>/<code>var</code> patterns","m.mentions":{},"msgtype":"m.text"},"ts":1727296173432,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V2UPMHIyO75Ed3pTf7efLWoi3GfSPylPTIJvbtVkdOA"},
{"content":{"body":"IMO, \"Reference Patterns\" is probably a more correct description for the audience since it involves multiple things that produce the `Reference Record` specification type (identifier references and property references) ","format":"org.matrix.custom.html","formatted_body":"IMO, \"Reference Patterns\" is probably a more correct description for the audience since it involves multiple things that produce the <code>Reference Record</code> specification type (identifier references and property references)","m.mentions":{},"msgtype":"m.text"},"ts":1727296245099,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cg4tBdtxiUXO-f9fvVrPRIPmcNSbXv44lrexPzQES90"},
{"content":{"body":"In slide 17 you say \"specified length\", which might be conflated with `array.length`. I'd suggest you either use \"same number of elements\" and \"match the corresponding elements\" or something to the effect of \"Matches if the sub-patterns match corresponding elements in the subject, with no more and no fewer elements\".","format":"org.matrix.custom.html","formatted_body":"In slide 17 you say \"specified length\", which might be conflated with <code>array.length</code>. I'd suggest you either use \"same number of elements\" and \"match the corresponding elements\" or something to the effect of \"Matches if the sub-patterns match corresponding elements in the subject, with no more and no fewer elements\".","m.mentions":{},"msgtype":"m.text"},"ts":1727296957978,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KiPtnDkuydEka0cusIRd-qKtBbjvJn9iC1NBt1BU0-I"}
]