[
{"content":{"body":"I'm applying all our resolutions right now, and I'm finally to the binding visibility one, and I have a question.","msgtype":"m.text","org.matrix.msc1767.text":"I'm applying all our resolutions right now, and I'm finally to the binding visibility one, and I have a question."},"ts":1643744860118,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hjUk6MJg4PtheF9ylZKjqlnCA0bplZetVuR0vLum2Fo"},
{"content":{"body":"So `&`/`|` is simple, as is array patterns; bindings from earlier patterns are visible to later patterns. But what about object matchers?","format":"org.matrix.custom.html","formatted_body":"So <code>&amp;</code>/<code>|</code> is simple, as is array patterns; bindings from earlier patterns are visible to later patterns. But what about object matchers?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So `&`/`|` is simple, as is array patterns; bindings from earlier patterns are visible to later patterns. But what about object matchers?","mimetype":"text/plain"},{"body":"So <code>&amp;</code>/<code>|</code> is simple, as is array patterns; bindings from earlier patterns are visible to later patterns. But what about object matchers?","mimetype":"text/html"}]},"ts":1643744907374,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tp7DVumnuMF7GecRV_w3bcAXIY30L2_FwiP7_e6GW2g"},
{"content":{"body":"Should `{a, b: ${console.log(a)}}` work? If so, I presume `{b: ${console.log(a)}, a}` wouldn't work? Or should neither work?","format":"org.matrix.custom.html","formatted_body":"Should <code>{a, b: ${console.log(a)}}</code> work? If so, I presume <code>{b: ${console.log(a)}, a}</code> wouldn't work? Or should neither work?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Should `{a, b: ${console.log(a)}}` work? If so, I presume `{b: ${console.log(a)}, a}` wouldn't work? Or should neither work?","mimetype":"text/plain"},{"body":"Should <code>{a, b: ${console.log(a)}}</code> work? If so, I presume <code>{b: ${console.log(a)}, a}</code> wouldn't work? Or should neither work?","mimetype":"text/html"}]},"ts":1643744945595,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$toMCy8KQ3zNJZ9gLya8CBODiTGxbE2NyY97iHIqbHBo"},
{"content":{"body":"is both working an option?","msgtype":"m.text","org.matrix.msc1767.text":"is both working an option?"},"ts":1643745498205,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$mELYIk_n4BWX1hw1vdk_uQT-kAzgTmuRwCVwURW769A"},
{"content":{"body":"That seems impossible; `{a: ${console.log(b)||\"a\"}, b: ${console.log(a)||\"b\"}}` logs what, exactly?","format":"org.matrix.custom.html","formatted_body":"That seems impossible; <code>{a: ${console.log(b)||&quot;a&quot;}, b: ${console.log(a)||&quot;b&quot;}}</code> logs what, exactly?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That seems impossible; `{a: ${console.log(b)||\"a\"}, b: ${console.log(a)||\"b\"}}` logs what, exactly?","mimetype":"text/plain"},{"body":"That seems impossible; <code>{a: ${console.log(b)||&quot;a&quot;}, b: ${console.log(a)||&quot;b&quot;}}</code> logs what, exactly?","mimetype":"text/html"}]},"ts":1643745560174,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$bxms6pNeKl9Z8WOaJz0UCoXqcLBCREnAogXygOQKX28"},
{"content":{"body":"yeah you're right","msgtype":"m.text","org.matrix.msc1767.text":"yeah you're right"},"ts":1643745571646,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$IrGvSz7isWaqvUkKMfuNWCIM1uFi5KFBnFNltexcBzc"},
{"content":{"body":"I'm gonna say we should match destructuring here:\n```js\nconst x = {a: 1, b: 2};\nconst {a, c = a} = x; // works\nconst {d = b, b} = x; // doesn't work\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'm gonna say we should match destructuring here:</p>\n<pre><code class=\"language-js\">const x = {a: 1, b: 2};\nconst {a, c = a} = x; // works\nconst {d = b, b} = x; // doesn't work\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm gonna say we should match destructuring here:\n```js\nconst x = {a: 1, b: 2};\nconst {a, c = a} = x; // works\nconst {d = b, b} = x; // doesn't work\n```","mimetype":"text/plain"},{"body":"<p>I'm gonna say we should match destructuring here:</p>\n<pre><code class=\"language-js\">const x = {a: 1, b: 2};\nconst {a, c = a} = x; // works\nconst {d = b, b} = x; // doesn't work\n</code></pre>\n","mimetype":"text/html"}]},"ts":1643745618327,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$uI7t5O1iQrNDXh9YJfcnku7D5HhtLMl7mBJ1_7GQrAg"},
{"content":{"body":"that's my preference too, i just hadn't checked what worked yet","msgtype":"m.text","org.matrix.msc1767.text":"that's my preference too, i just hadn't checked what worked yet"},"ts":1643745646396,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$kj9ieNU1d3AwafUpmq6oLhFGBH1I-Ty8MXzRxf_M36Y"},
{"content":{"body":"(I didn't know those semantics off the top of my head, just worked it out in the console)","msgtype":"m.text","org.matrix.msc1767.text":"(I didn't know those semantics off the top of my head, just worked it out in the console)"},"ts":1643745647203,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$3_Rx27HeYZLkU7y5Gfbk25cYGlR7ZMgDhuMXLGdA0-o"},
{"content":{"body":" * (I didn't know those semantics off the top of my head, just worked it out in the console)","m.new_content":{"body":"(I didn't know those semantics off the top of my head, just worked it out in the console)","msgtype":"m.text","org.matrix.msc1767.text":"(I didn't know those semantics off the top of my head, just worked it out in the console)"},"m.relates_to":{"event_id":"$3_Rx27HeYZLkU7y5Gfbk25cYGlR7ZMgDhuMXLGdA0-o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (I didn't know those semantics off the top of my head, just worked it out in the console)"},"ts":1643745648872,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$v8cM-eMcUsZNrlz3FPMzZtJdKzeotdDzMhvDctZYKRk"},
{"content":{"body":"Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237","msgtype":"m.text","org.matrix.msc1767.text":"Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237"},"ts":1643745753015,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$k33JJyDIAujoXY1KQRg6J0qrcZUcQw4LDG3GdcOIils"},
{"content":{"body":" * Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237","m.new_content":{"body":"Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237","msgtype":"m.text","org.matrix.msc1767.text":"Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237"},"m.relates_to":{"event_id":"$k33JJyDIAujoXY1KQRg6J0qrcZUcQw4LDG3GdcOIils","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237"},"ts":1643745757062,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$v_XQzoi5YlCqqHOvbv5ZUPXhr6S6FbG1tLFCCmpyg3U"},
{"content":{"body":"Axel Rauschmayer posted an example of `Option` using classes on twitter a few months ago that looked something like this:\n```js\nclass Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n```\n\nThis effectively encodes the \"kind\" into the [[Prototype]] and allows you to test whether something is a `Some` or a `None` _and_ whether something is an `Option`","format":"org.matrix.custom.html","formatted_body":"<p>Axel Rauschmayer posted an example of <code>Option</code> using classes on twitter a few months ago that looked something like this:</p>\n<pre><code class=\"language-js\">class Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n</code></pre>\n<p>This effectively encodes the &quot;kind&quot; into the [[Prototype]] and allows you to test whether something is a <code>Some</code> or a <code>None</code> <em>and</em> whether something is an <code>Option</code></p>\n","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$uCLMt4gtrGKWTi9bFAzeZvwoIrL3bTIFVaQYTb4lDKY"}}},"ts":1643746241580,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$90XdVO2nGLQQjA_VUrB5Uvu25zlaMjqh6Mk2kZKEnZ8"},
{"content":{"body":"oh woah, interesting","msgtype":"m.text","org.matrix.msc1767.text":"oh woah, interesting"},"ts":1643746274968,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4FLbnJZlShCFl5POVp0Yp7jQEzsJXTXcnKWOeOXvyuk"},
{"content":{"body":"that is *exceedingly* clever, phew","format":"org.matrix.custom.html","formatted_body":"that is <em>exceedingly</em> clever, phew","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that is *exceedingly* clever, phew","mimetype":"text/plain"},{"body":"that is <em>exceedingly</em> clever, phew","mimetype":"text/html"}]},"ts":1643746297637,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cV8gahEIH-Qm9pdO9gd4KMVXXygOUaojHrALMF3Zgqg"},
{"content":{"body":"My hope is that an engine could optimize a native ADT to reduce polymorphic lookups against the \"kind\", which is something we don't get today.","msgtype":"m.text"},"ts":1643746300081,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NojYDhLA3QBkrHe6GL9FSuHpm8zl3Cpi-PyFiM6Zsdg"},
{"content":{"body":"> <@tabatkins:matrix.org> rbuckton: Right, the constructor pattern I used just needed *some* value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.\n\n * Axel Rauschmayer posted an example of `Option` using classes on twitter a few months ago that looked something like this:\n```js\nclass Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n```\n\nThis effectively encodes the \"kind\" into the [[Prototype]] and allows you to test whether something is a `Some` or a `None` _and_ whether something is an `Option`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$uCLMt4gtrGKWTi9bFAzeZvwoIrL3bTIFVaQYTb4lDKY?via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Right, the constructor pattern I used just needed <em>some</em> value. The null isn't exposed, it could be a 0 or false or undefined instead. It's the second arg that tells whether it's a None or Some.</blockquote></mx-reply> * <p>Axel Rauschmayer posted an example of <code>Option</code> using classes on twitter a few months ago that looked something like this:</p>\n<pre><code class=\"language-js\">class Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n</code></pre>\n<p>This effectively encodes the &quot;kind&quot; into the [[Prototype]] and allows you to test whether something is a <code>Some</code> or a <code>None</code> <em>and</em> whether something is an <code>Option</code></p>\n","m.new_content":{"body":"Axel Rauschmayer posted an example of `Option` using classes on twitter a few months ago that looked something like this:\n```js\nclass Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n```\n\nThis effectively encodes the \"kind\" into the [[Prototype]] and allows you to test whether something is a `Some` or a `None` _and_ whether something is an `Option`","format":"org.matrix.custom.html","formatted_body":"<p>Axel Rauschmayer posted an example of <code>Option</code> using classes on twitter a few months ago that looked something like this:</p>\n<pre><code class=\"language-js\">class Option {\n  static Some = class extends Option {\n    constructor(value) {\n      this.value = value;\n    }\n  };\n\n  static None = class extends Option {\n  };\n}\n</code></pre>\n<p>This effectively encodes the &quot;kind&quot; into the [[Prototype]] and allows you to test whether something is a <code>Some</code> or a <code>None</code> <em>and</em> whether something is an <code>Option</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$90XdVO2nGLQQjA_VUrB5Uvu25zlaMjqh6Mk2kZKEnZ8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643746420766,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$COFxGYG_hE0AnyYcS8yXKRK5TgS81GWMOS2fyI9cQ_M"},
{"content":{"body":"i like axel's, it's simple. altho i'd do `this.#value = value;` and provide a getter to it rather than a public property.","format":"org.matrix.custom.html","formatted_body":"i like axel's, it's simple. altho i'd do <code>this.#value = value;</code> and provide a getter to it rather than a public property.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i like axel's, it's simple. altho i'd do `this.#value = value;` and provide a getter to it rather than a public property.","mimetype":"text/plain"},{"body":"i like axel's, it's simple. altho i'd do <code>this.#value = value;</code> and provide a getter to it rather than a public property.","mimetype":"text/html"}]},"ts":1643751913322,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gUd_oKmlsW7F7CBlJQeXosJ8-dMydu8itLOltd-LSnU"},
{"content":{"body":"Okay, all open issues resolved; we're down to just the new issue opened today (which is pretty weird and I think we'll almost certainly reject, but we're giving the OP time to respond)","msgtype":"m.text","org.matrix.msc1767.text":"Okay, all open issues resolved; we're down to just the new issue opened today (which is pretty weird and I think we'll almost certainly reject, but we're giving the OP time to respond)"},"ts":1643752069189,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xcAgeSd7WGiBgEHO4h95GMwknDnJtrO0zdPZEAvg5Fc"},
{"content":{"body":"ljharb: Well, if you're not trying to protect Nones from getting assigned, being able to assign to a Some is useful. Otherwise you're forced into using `.map()` to change the value.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Well, if you're not trying to protect Nones from getting assigned, being able to assign to a Some is useful. Otherwise you're forced into using <code>.map()</code> to change the value.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: Well, if you're not trying to protect Nones from getting assigned, being able to assign to a Some is useful. Otherwise you're forced into using `.map()` to change the value.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Well, if you're not trying to protect Nones from getting assigned, being able to assign to a Some is useful. Otherwise you're forced into using <code>.map()</code> to change the value.","mimetype":"text/html"}]},"ts":1643752125354,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jy9kCeAjd83rrgMrb9MFhziGAAoIyVffgpHEPL4Jub8"},
{"content":{"body":"that seems ideal; immutable instances > > > mutable instances","msgtype":"m.text","org.matrix.msc1767.text":"that seems ideal; immutable instances > > > mutable instances"},"ts":1643752163325,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Pzay5Ygit4Gz0RIHJOdwcewF3YJUlFjsvNjpPDRUM24"},
{"content":{"body":"lol i'm not getting into that","msgtype":"m.text","org.matrix.msc1767.text":"lol i'm not getting into that"},"ts":1643752192922,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$KiUyEARjgzYYEzxQxIf5u6r8EfaDRANFgYCn6SAV7ak"},
{"content":{"body":"just like a Promise for x is always for x, an Option for x would always be for x","msgtype":"m.text","org.matrix.msc1767.text":"just like a Promise for x is always for x, an Option for x would always be for x"},"ts":1643752195246,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FRufgq5qgz2pNq-KDZk5EQjEDxxLBxbZ07o0CFKdu-Q"}
]