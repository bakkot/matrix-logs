[
{"content":{"body":"> `({ x: when [y] } = value)` is already legal JS\n\nwhat. how. what does that parse as","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p><code>({ x: when [y] } = value)</code> is already legal JS</p>\n</blockquote>\n<p>what. how. what does that parse as</p>\n","msgtype":"m.text"},"ts":1681510820948,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gM3JQQIQjmpmdS01MLM05PTTIEqI9VSzR-xsvyGthVM"},
{"content":{"body":"mfer is that pulling out the x property and assigning its value to `when[y]`","format":"org.matrix.custom.html","formatted_body":"mfer is that pulling out the x property and assigning its value to <code>when[y]</code>","msgtype":"m.text"},"ts":1681510874058,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$i-Rig6Le9kpw8J0otSaigRDfA65PeFuaRlgvJA2Kj3A"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1681511023158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dNtjPufvkeUA8FtV4rsbuyDyaD4C6WCd8eqMdH1eKgA"},
{"content":{"body":"it's super terrible and i don't understand how the 2015 era committee thought it was acceptable, but here we are","msgtype":"m.text"},"ts":1681511058954,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fy8_nC8x79ljZfQSjqprabg2dK-ivE6rL1dbRGhTEFA"},
{"content":{"body":"clearly we need to swap `when`=>`case` and just call it a day","format":"org.matrix.custom.html","formatted_body":"clearly we need to swap <code>when</code>=&gt;<code>case</code> and just call it a day","msgtype":"m.text"},"ts":1681511312911,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$39-bJRRl4yoxWJw4BObqsu8Q70yrRzEcC0Ik3te4XyY"},
{"content":{"body":"hard no :-p","msgtype":"m.text"},"ts":1681511486523,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$otiSCk7LCtPnbVyjmUe32RodV-H-4FYjMElXx8YxBcw"},
{"content":{"body":"`while` is reserved and it's basically a synonym for `when`, we can use that. :p","format":"org.matrix.custom.html","formatted_body":"<code>while</code> is reserved and it's basically a synonym for <code>when</code>, we can use that. :p","msgtype":"m.text"},"ts":1681511567686,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FUr4tAF5g_-RIhEsqI3sIPEFYB7Cy4C_-3PCyLltbVQ"},
{"content":{"body":"nah it means something different, while implies continuousness while when implies a single occurrence","msgtype":"m.text"},"ts":1681511644428,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GLFqEUJP4ZIFh8LnukXWZImS1PRrqmMHWjIiqXR-lFM"},
{"content":{"body":"> <@rbuckton:matrix.org> Besides, I much prefer C#'s `if (dictionary.TryGetValue(key, out var value))` to `if (map.has(key)) { let value = map.get(key); ... }` due to the repetition and potential performance issues of querying a key twice.\n\nThis is why we can't kill interpolation matchers, fwiw. `when ${Map.get(key)}(val)` is definitely the sort of custom matcher i'd expect to work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$BCpna1wqOrGmOalh5hf0RVjyh7_Ye2nsZ1pAPrSTEWk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Besides, I much prefer C#'s <code>if (dictionary.TryGetValue(key, out var value))</code> to <code>if (map.has(key)) { let value = map.get(key); ... }</code> due to the repetition and potential performance issues of querying a key twice.</blockquote></mx-reply>This is why we can't kill interpolation matchers, fwiw. <code>when ${Map.get(key)}(val)</code> is definitely the sort of custom matcher i'd expect to work.","m.relates_to":{"m.in_reply_to":{"event_id":"$BCpna1wqOrGmOalh5hf0RVjyh7_Ye2nsZ1pAPrSTEWk"}},"msgtype":"m.text"},"ts":1681511767528,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4zODlc4TYt8vkJwR-ZAmxVv2XtocM-CwL2lQjBoXBHU"},
{"content":{"body":"I don't think we should be mixing expression-space and pattern-space like that. It's too complicated, no other language does this, and it will make patterns so much harder to reason over. 99% of the time you won't need it, and you can just save off the value in a variable when you do. ","format":"org.matrix.custom.html","formatted_body":"I don't think we should be mixing expression-space and pattern-space like that. It's too complicated, no other language does this, and it will make patterns so much harder to reason over. 99% of the time you won't need it, and you can just save off the value in a variable when you do.","msgtype":"m.text"},"ts":1681512588296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wWu7J4SVZoh6Qu3KqZ5z5HMwEv-BbpbeZ29O9DAKBWo"},
{"content":{"body":"The message I was quoting from you essentially does that.","msgtype":"m.text"},"ts":1681512616365,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9lf6Nxjvr0mFaetsvZUFMC_rGHTTQHTMzTHqV3WjSfA"},
{"content":{"body":"And the `${}` syntax very explicitly bounds the context-switch, in *precisely* the same way that it does in strings.","format":"org.matrix.custom.html","formatted_body":"And the <code>${}</code> syntax very explicitly bounds the context-switch, in <em>precisely</em> the same way that it does in strings.","msgtype":"m.text"},"ts":1681512640763,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HFMqOLgycupLfvcabu-Fpy2T6eIINVMI5o1NM2GenEw"},
{"content":{"body":"And generally, allowing someone to refer to *predefined variables* but not things calculated on the fly is a code smell, I find. You end up needing to do this sort of thing infrequently, but when you need it it's pretty annoying to not have it.","format":"org.matrix.custom.html","formatted_body":"And generally, allowing someone to refer to <em>predefined variables</em> but not things calculated on the fly is a code smell, I find. You end up needing to do this sort of thing infrequently, but when you need it it's pretty annoying to not have it.","msgtype":"m.text"},"ts":1681512741308,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zolIZ5xl1f-3O3H1MlRjj-HCvthuMr5DqAp19nue_-o"},
{"content":{"body":"> <@tabatkins:matrix.org> The message I was quoting from you essentially does that.\n\nThe message you quoted doesn't involve pattern matching at all? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$9lf6Nxjvr0mFaetsvZUFMC_rGHTTQHTMzTHqV3WjSfA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />The message I was quoting from you essentially does that.</blockquote></mx-reply>The message you quoted doesn't involve pattern matching at all?","m.relates_to":{"m.in_reply_to":{"event_id":"$9lf6Nxjvr0mFaetsvZUFMC_rGHTTQHTMzTHqV3WjSfA"}},"msgtype":"m.text"},"ts":1681512846080,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ocy5j232RA--DvlVg0ErYpGllstm3P-_KsaiJDuUWIA"},
{"content":{"body":"...right, but the pattern I provided is doing the same thing, and can be used in the same way under my \"matchers everywhere\" proposal.","msgtype":"m.text"},"ts":1681512913635,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rlcbS4yjE_ZPnzBWttI4hJ-QVjOu6puwGLjJqWO547I"},
{"content":{"body":"`if(${Map.get(key)}(val) = mymap) { ...val is visible here...}`","format":"org.matrix.custom.html","formatted_body":"<code>if(${Map.get(key)}(val) = mymap) { ...val is visible here...}</code>","msgtype":"m.text"},"ts":1681512941328,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GPXTTWjiOGgQlVh6itM9FatlpjOixaD1ZF5cfeTY6S4"},
{"content":{"body":"But patterns are going to be complicated enough on their own. ","format":"org.matrix.custom.html","formatted_body":"But patterns are going to be complicated enough on their own.","msgtype":"m.text"},"ts":1681512968083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SIBN_U7b20PUhU95jhuSFX5JbgAxJM0BdYoP3jT-KuY"},
{"content":{"body":"The fact that you can make arbitrarily complicated patterns if you want to hurt yourself doesn't mean we should artificially restrict what patterns can do when used well.","msgtype":"m.text"},"ts":1681513016278,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OY2Fg1IDd18gh4lmAnckmGRKFVtj_AeFNJbFU7xtPuU"},
{"content":{"body":"And that precise coding pattern you gave from C# *is* useful, and better than what you have to do in JS, and also is almost *certainly* never going to be something directly in JS. But a matcher *can* do it without stretching the concepts too far.","format":"org.matrix.custom.html","formatted_body":"And that precise coding pattern you gave from C# <em>is</em> useful, and better than what you have to do in JS, and also is almost <em>certainly</em> never going to be something directly in JS. But a matcher <em>can</em> do it without stretching the concepts too far.","msgtype":"m.text"},"ts":1681513085617,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rzojaUXytCdxdYd2ip39RUiQRjmQsRi-zniyLThbdWY"},
{"content":{"body":"> <@tabatkins:matrix.org> The fact that you can make arbitrarily complicated patterns if you want to hurt yourself doesn't mean we should artificially restrict what patterns can do when used well.\n\nWhat this says to me is \"here is a feature you should never use because it makes your patterns arbitrarily complicated.\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$OY2Fg1IDd18gh4lmAnckmGRKFVtj_AeFNJbFU7xtPuU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />The fact that you can make arbitrarily complicated patterns if you want to hurt yourself doesn't mean we should artificially restrict what patterns can do when used well.</blockquote></mx-reply>What this says to me is &quot;here is a feature you should never use because it makes your patterns arbitrarily complicated.&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$OY2Fg1IDd18gh4lmAnckmGRKFVtj_AeFNJbFU7xtPuU"}},"msgtype":"m.text"},"ts":1681513087323,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fLDJRW2xWcPIljYRKrwk86_ZuGr_HSb4-O5RN0VUZxQ"},
{"content":{"body":"> <@tabatkins:matrix.org> And that precise coding pattern you gave from C# *is* useful, and better than what you have to do in JS, and also is almost *certainly* never going to be something directly in JS. But a matcher *can* do it without stretching the concepts too far.\n\nThat pattern was still purely expression-space. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$rzojaUXytCdxdYd2ip39RUiQRjmQsRi-zniyLThbdWY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />And that precise coding pattern you gave from C# <em>is</em> useful, and better than what you have to do in JS, and also is almost <em>certainly</em> never going to be something directly in JS. But a matcher <em>can</em> do it without stretching the concepts too far.</blockquote></mx-reply>That pattern was still purely expression-space.","m.relates_to":{"m.in_reply_to":{"event_id":"$rzojaUXytCdxdYd2ip39RUiQRjmQsRi-zniyLThbdWY"}},"msgtype":"m.text"},"ts":1681513113241,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dkTBWWNFuhDv8h_ihOdKcTOoSZQ6gAIH2Y3QX7zF140"},
{"content":{"body":"\"purely expression-space\" is... arguable. It's got a binding name in one of its positions, distinct from the function arguments in the other positions. It's a mixture of expression space and a limited assignment expressions.","msgtype":"m.text"},"ts":1681513170080,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MsE1oRmGbP0beYcQ-IfRxstPACL1RfXNGQd6BtzIEn4"}
]