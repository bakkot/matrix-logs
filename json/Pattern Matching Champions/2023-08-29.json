[
{"content":{"body":"I'm writing up the PR now, and I'm suddenly struck by an idea: instead of `when` as the branch introducer, should we use `is`? That makes it perfectly match up with the boolean form, just with an implicit LHS coming from the match block itself.","format":"org.matrix.custom.html","formatted_body":"I'm writing up the PR now, and I'm suddenly struck by an idea: instead of <code>when</code> as the branch introducer, should we use <code>is</code>? That makes it perfectly match up with the boolean form, just with an implicit LHS coming from the match block itself.","msgtype":"m.text"},"ts":1693332172524,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5XoduhewQlDLANpVo3ZiwXmoeg2tS6Fw7Gx4_CjN4yA"},
{"content":{"body":"that is:\n```js\nmatch(foo) {\n  is [let a]: ...;\n  is {bar}: ...;\n  default: ...;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>that is:</p>\n<pre><code class=\"language-js\">match(foo) {\n  is [let a]: ...;\n  is {bar}: ...;\n  default: ...;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1693332235685,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DCbrbRiqyBVCA6hEs8f1FPfmPYxMQtPa3Rywoko3VPo"},
{"content":{"body":"which syncs up with saying `foo is [let a]` outside of the match construct","format":"org.matrix.custom.html","formatted_body":"which syncs up with saying <code>foo is [let a]</code> outside of the match construct","msgtype":"m.text"},"ts":1693332252758,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$j3xhxO1q5xVGToHh-hvDblNqit4vI3K4-iBAZK1_b9s"},
{"content":{"body":"that's not bad, but there's a distinct difference wrt bindings","msgtype":"m.text"},"ts":1693339401106,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4wSzAID0KLBN5s3rxG_A4DL6_4ui0gG0GRYQAz3jLvk"},
{"content":{"body":"also \"is\" and \"default\" don't pair very well imo","msgtype":"m.text"},"ts":1693339428733,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6oIic0Va6Pt1J636BDvUXQjQY1KHMAlwJOqymlaCTB0"},
{"content":{"body":"I think they pair up as well as when/default or case/default?","msgtype":"m.text"},"ts":1693341782124,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5jd5jApzPmZ4jTlfpNPvadO1I2rmQZAwOhNjIdciLak"},
{"content":{"body":"What's the binding difference you're referring to? In each match-statement clause the bindings are visible to just that clause.","msgtype":"m.text"},"ts":1693341821659,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$p5BR5cZk9thV2B5rT9GkA2hZjhZpEyUooFcO81A7KCc"},
{"content":{"body":"`x is y` doesn't produce bindings by itself","format":"org.matrix.custom.html","formatted_body":"<code>x is y</code> doesn't produce bindings by itself","msgtype":"m.text"},"ts":1693341834065,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hdfMzsxuCUqN_7S-6YYB4mdGQHz1qywOs3vFoCARaig"},
{"content":{"body":"Yeah it does.","msgtype":"m.text"},"ts":1693341843904,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1W6d6tdRg7OD8qhrCMBYPSHe-BzOnyY55oOZLDp81fs"},
{"content":{"body":"At least, that was the idea. And then we just have scoping rules in if/for/etc to contain those bindings appropriately.","msgtype":"m.text"},"ts":1693341903365,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$41r5sQemfU2NDfOWI72bzegtbCeiw4DX_ivEIUbLdaA"},
{"content":{"body":"O.o i didn't realize that","msgtype":"m.text"},"ts":1693341922281,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qY9rnU30dQD8Fanxw6nyY6QKNWp1g8QoW7eOLZkq0lY"},
{"content":{"body":"i thought `is` was just like `instanceof`, a boolean operator with no side effects","format":"org.matrix.custom.html","formatted_body":"i thought <code>is</code> was just like <code>instanceof</code>, a boolean operator with no side effects","msgtype":"m.text"},"ts":1693341932768,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Nx_nRvnM_HKSaIq_2fPAF0MA10VL0nVlsEuT5GyXInI"},
{"content":{"body":"i thought it was *only* when attached to a block that it produced bindings","format":"org.matrix.custom.html","formatted_body":"i thought it was <em>only</em> when attached to a block that it produced bindings","msgtype":"m.text"},"ts":1693341944485,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DtnM03bIjcC-wdSlsTpDaZTni8gIm7ja6UpkIn4YKMg"},
{"content":{"body":"Well huh I suppose I didn't write that part into the proposal gist. I'm happier to *not* do that, fwiw.","format":"org.matrix.custom.html","formatted_body":"Well huh I suppose I didn't write that part into the proposal gist. I'm happier to <em>not</em> do that, fwiw.","msgtype":"m.text"},"ts":1693341990389,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CUhn2sf2Dw3eZzt7beX2itqJmyZn3xJFjPCMvDyndE4"},
{"content":{"body":"i think it would be *super* weird for a lone boolean test to produce bindings","format":"org.matrix.custom.html","formatted_body":"i think it would be <em>super</em> weird for a lone boolean test to produce bindings","msgtype":"m.text"},"ts":1693342006392,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1mMMSIAHkpgponMSQLWB9weWRdNFdsP2J6bsRQ8Rj-o"},
{"content":{"body":"But that still doesn't impact the usage here - each branch is a conditional *thing* and would have the same sort of binding behavior.","format":"org.matrix.custom.html","formatted_body":"But that still doesn't impact the usage here - each branch is a conditional <em>thing</em> and would have the same sort of binding behavior.","msgtype":"m.text"},"ts":1693342014306,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gkU9roI5FNeuRCQS0vkiRLLoI20RQeiATA6Eg4OHSzE"},
{"content":{"body":"you'd be able to like\n```\n{\n   x is y;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>you'd be able to like</p>\n<pre><code>{\n   x is y;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1693342022107,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O6hdSkQHuPm1Gu9cmhX8onTNMj4HjgediM1jf6lw674"},
{"content":{"body":" * you'd be able to like\n\n```\n{\n   x is y;\n   /* bindings here */\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>you'd be able to like</p>\n<pre><code>{\n   x is y;\n   /* bindings here */\n}\n</code></pre>\n","m.new_content":{"body":"you'd be able to like\n\n```\n{\n   x is y;\n   /* bindings here */\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>you'd be able to like</p>\n<pre><code>{\n   x is y;\n   /* bindings here */\n}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$O6hdSkQHuPm1Gu9cmhX8onTNMj4HjgediM1jf6lw674","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693342027109,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Tuxd059DADxKSZ1bh2FelCsVTc0NDw_f1OjoTMuAFUQ"},
{"content":{"body":"and x would be y after that, yeah ^_^","msgtype":"m.text"},"ts":1693342035185,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HW5Ylh-KlECoQNVm6vB8Sxhk97FcwxrcFAnXkzdz7ko"},
{"content":{"body":"right, that seems actively bad","msgtype":"m.text"},"ts":1693342042952,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SbV0LrB1LgajJSIS5pJ_Me4CmB_4AwphJN0h-HPbcIo"},
{"content":{"body":"bindings in match are obviously critical, and they make sense in the specific constructs we discussed","msgtype":"m.text"},"ts":1693342060374,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e4K9j0XjgRTZ9S-f4hEtQHHsO0WxJv0MyVZYJGCfBfU"},
{"content":{"body":"so having it be spelled \"is\" in match isn't inherently a problem, because \"in match\" is a separate context","msgtype":"m.text"},"ts":1693342080739,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O6DBwJTC28Ky9OPbkFlGthXZa6odXFhxe5WnH3_I1WA"},
{"content":{"body":"Anyway yeah I'll omit that, I haven't written the bindings section yet. But in a match(), each branch is essentially an if(), and you get bindings there, so it seems consistent.","msgtype":"m.text"},"ts":1693342096170,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wDVxvYZvsfn8ckDfGrZpQhiqdfVnTx5k4_zjaf8YcEg"},
{"content":{"body":"yeah i agree with that part","msgtype":"m.text"},"ts":1693342103629,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3jZT1XtEhhaKZbltASTPwKvePEqlSu1Mm-EuG5L03ww"},
{"content":{"body":"if/default is the same amount of _objectionable_ to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\"","format":"org.matrix.custom.html","formatted_body":"if/default is the same amount of <em>objectionable</em> to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\"","msgtype":"m.text"},"ts":1693342150194,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k9Sxw86bHvGcGxX0Ls8o0ZNJd6FinRaIqBfjmsmJOOI"},
{"content":{"body":" * if/default is the same amount of _objectionable_ to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\" with \"is\"","format":"org.matrix.custom.html","formatted_body":" * if/default is the same amount of <em>objectionable</em> to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\" with \"is\"","m.new_content":{"body":"if/default is the same amount of _objectionable_ to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\" with \"is\"","format":"org.matrix.custom.html","formatted_body":"if/default is the same amount of <em>objectionable</em> to me as when/default, but i think when/default pairs more smoothly than is/default, and would love to explore other names (even if only within the champion group) for \"default\" with \"is\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$k9Sxw86bHvGcGxX0Ls8o0ZNJd6FinRaIqBfjmsmJOOI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693342152742,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$70gVRu7bWkYjdmXbAo0zV5cLqFlQLmG8lFJsjoUWGeQ"},
{"content":{"body":"(separately, it'd be really cool if `x is y` and `x is not y` both worked)","format":"org.matrix.custom.html","formatted_body":"(separately, it'd be really cool if <code>x is y</code> and <code>x is not y</code> both worked)","msgtype":"m.text"},"ts":1693342180348,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lvMG563X_JXISS-0HgrhLfS3lQMsGrFL5Pg9bPBFAU8"},
{"content":{"body":"they do both work, yeah","msgtype":"m.text"},"ts":1693342201177,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XFSufOhDTdyNljH-EOsHoPazmQ24Kf8r4F_g1m9X6Do"},
{"content":{"body":"`not y` is a valid pattern","format":"org.matrix.custom.html","formatted_body":"<code>not y</code> is a valid pattern","msgtype":"m.text"},"ts":1693342206928,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Y4Z8Ks5osv5rdIHk_9JZWjWoJgIBlVwjLA6Nkk3EfK4"}
]