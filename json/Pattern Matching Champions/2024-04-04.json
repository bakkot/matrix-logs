[
{"content":{"body":"I'm confused by this example in the README.md, I don't think the 2nd parameter matches the proposed spec text:\n\n```js\nRegExp.prototype[Symbol.customMatcher] = function(subject, {matchType}) {\n    const result = this.exec(subject);\n    if(matchType == \"boolean\") return result;\n    if(matchType == \"extractor\") return [result, ...result.slice(1)];\n}\n```\nIsn't the 2nd argument just a string, and aren't the possible values `\"boolean\"` and `\"list\"`?","format":"org.matrix.custom.html","formatted_body":"<p>I'm confused by this example in the README.md, I don't think the 2nd parameter matches the proposed spec text:</p>\n<pre><code class=\"language-js\">RegExp.prototype[Symbol.customMatcher] = function(subject, {matchType}) {\n    const result = this.exec(subject);\n    if(matchType == \"boolean\") return result;\n    if(matchType == \"extractor\") return [result, ...result.slice(1)];\n}\n</code></pre>\n<p>Isn't the 2nd argument just a string, and aren't the possible values <code>\"boolean\"</code> and <code>\"list\"</code>?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712243073960,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M-YK_OckAzvQMV3fqQb6LDcnX8gvAQ_whVnTrgnDTC0"},
{"content":{"body":"Also, I'm not sure I agree with the result for a RegExp custom matcher as suggested here: https://github.com/tc39/proposal-pattern-matching?tab=readme-ov-file#regex-extractor-patterns\n\nTo match against a RegExp, you may want to match against either named capture groups, positional capture groups, or the whole match. I think the matcher could just be:\n\n```js\nRegExp.prototype[Symbol.customMatcher] = function(subject, hint) {\n    const result = this.exec(subject);\n    if (hint === \"boolean\") return !!result;\n    if (hint === \"list\") return result && [result];\n}\n```\nAnd the pattern would look like:\n\n```\nwhen /(?<left>\\d+) \\+ (?<right>\\d+)/({groups:{let left, let right}}): ...;\nwhen /(\\d+) \\* (\\d+)/([void, let left, let right]): ...;\nwhen /\\d+/([let digits]): ...;\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>Also, I'm not sure I agree with the result for a RegExp custom matcher as suggested here: https://github.com/tc39/proposal-pattern-matching?tab=readme-ov-file#regex-extractor-patterns</p>\n<p>To match against a RegExp, you may want to match against either named capture groups, positional capture groups, or the whole match. I think the matcher could just be:</p>\n<pre><code class=\"language-js\">RegExp.prototype[Symbol.customMatcher] = function(subject, hint) {\n    const result = this.exec(subject);\n    if (hint === \"boolean\") return !!result;\n    if (hint === \"list\") return result &amp;&amp; [result];\n}\n</code></pre>\n<p>And the pattern would look like:</p>\n<pre><code>when /(?&lt;left&gt;\\d+) \\+ (?&lt;right&gt;\\d+)/({groups:{let left, let right}}): ...;\nwhen /(\\d+) \\* (\\d+)/([void, let left, let right]): ...;\nwhen /\\d+/([let digits]): ...;\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712243522289,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ygPFG5M7wC9hPmvOAxk5WTDLrW-GIzn-OYvicAqUYtM"},
{"content":{"body":"The extra outputs from `...result.slice(1)` seem like unnecessary overhead for the sake of convenience as I doubt engines will optimize them away if unused.","format":"org.matrix.custom.html","formatted_body":"The extra outputs from <code>...result.slice(1)</code> seem like unnecessary overhead for the sake of convenience as I doubt engines will optimize them away if unused.","m.mentions":{},"msgtype":"m.text"},"ts":1712243722406,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TAsZJHMGVLqzVTLtF55akcgNOMCnHiPJZWSMqH3otfk"},
{"content":{"body":"I was kinda wanting to be able to do the second and third cases as just `(void, let left, let right)` and `(let digits)` rather than requiring an array pattern as well, but I suppose that's not a big deal, yeah.","format":"org.matrix.custom.html","formatted_body":"I was kinda wanting to be able to do the second and third cases as just <code>(void, let left, let right)</code> and <code>(let digits)</code> rather than requiring an array pattern as well, but I suppose that's not a big deal, yeah.","m.mentions":{},"msgtype":"m.text"},"ts":1712263620985,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rG1lElBZ70Xca-y4wKgwNbzL1vl09jFfEYK5_YCyBGU"},
{"content":{"body":"`(let digits)` doesn't work if you want to access groups. (at least, not without the abandoned `Foo{ }` syntax).","format":"org.matrix.custom.html","formatted_body":"<code>(let digits)</code> doesn't work if you want to access groups. (at least, not without the abandoned <code>Foo{ }</code> syntax).","m.mentions":{},"msgtype":"m.text"},"ts":1712264618770,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aBmluguPW1F-I7WnlnUqM_gU2WLZfg_NAFKoDQyyB9Y"},
{"content":{"body":"I'm in the middle of writing some code using C#'s pattern matching, and I may want to bring https://github.com/rbuckton/proposal-shorthand-improvements back at some point. C# has an object initialization syntax that lets you write code like this:\n```cs\nvar a = new Foo() {\n  Bar = 1,\n  Baz.Quxx = 2,\n}\n```\nwhich amounts to\n```cs\nvar a = new Foo();\na.Bar = 1;\na.Baz.Quxx = 2;\n```\n\nand `{ Baz.Quxx = 2 }` is essentially the same as `{ Baz = { Quxx = 2 } }`.","format":"org.matrix.custom.html","formatted_body":"<p>I'm in the middle of writing some code using C#'s pattern matching, and I may want to bring https://github.com/rbuckton/proposal-shorthand-improvements back at some point. C# has an object initialization syntax that lets you write code like this:</p>\n<pre><code class=\"language-cs\">var a = new Foo() {\n  Bar = 1,\n  Baz.Quxx = 2,\n}\n</code></pre>\n<p>which amounts to</p>\n<pre><code class=\"language-cs\">var a = new Foo();\na.Bar = 1;\na.Baz.Quxx = 2;\n</code></pre>\n<p>and <code>{ Baz.Quxx = 2 }</code> is essentially the same as <code>{ Baz = { Quxx = 2 } }</code>.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712264893032,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$e62Aida4b_URKvzWwkMcygHkDvByr1LQYDIxm8wjpks"},
{"content":{"body":"And unnamed types can be `new { Bar, Baz.Quxx }` which is essentially `new { Bar = Bar, Quxx = Baz.Quxx }`. ","format":"org.matrix.custom.html","formatted_body":"And unnamed types can be <code>new { Bar, Baz.Quxx }</code> which is essentially <code>new { Bar = Bar, Quxx = Baz.Quxx }</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712264984076,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oyerUxFnFirfa74nkycGYdhyAI70JwDRgyRQWuFAQvI"}
]