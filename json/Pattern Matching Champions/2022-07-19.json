[
{"content":{"body":"I haven't read all contents of yulia's proposal yet, but I like the direction, solve my many syntax concerns.\n\n","msgtype":"m.text","org.matrix.msc1767.text":"I haven't read all contents of yulia's proposal yet, but I like the direction, solve my many syntax concerns.\n\n"},"ts":1658208079161,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$YgjupJpVbRqWC9v-Za94yKfsp6fYwEFVZ3wSJWBnABg"},
{"content":{"body":"The current proposed syntax, to be honest, have too much noise and strangeness, need new rules which never in js language, in many cases, I find no benefit than using libs like https://github.com/gvergnaud/ts-pattern .","msgtype":"m.text","org.matrix.msc1767.text":"The current proposed syntax, to be honest, have too much noise and strangeness, need new rules which never in js language, in many cases, I find no benefit than using libs like https://github.com/gvergnaud/ts-pattern ."},"ts":1658208878743,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$K4AP5mvOLha5OD0uqXwnFjrv83LiOpEKK6jHSPIZNVY"},
{"content":{"body":"> <@rbuckton:matrix.org> I would concur with this position in the long term. \n> \n> I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: `x |> F` is roughly `F(x)`, and `F~(?, arg)` is roughly `x => F(x, arg)`, so `x |> F~(?, arg)` would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.\n> \n> Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the `is` operator I mentioned above).\n\n+1, I support PAPP+F# pipe","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$lNx5tO8nuvTZKQCEt35hfFp0w2iebva-udGFwebEc8c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br /><p>I would concur with this position in the long term.</p>\n<p>I'd initially hoped a similar layering approach would work for pipeline with F# pipes+PFA, as each proposal could be independent but layered together. It felt like it would be easier to explain as well: <code>x |&gt; F</code> is roughly <code>F(x)</code>, and <code>F~(?, arg)</code> is roughly <code>x =&gt; F(x, arg)</code>, so <code>x |&gt; F~(?, arg)</code> would then follow from unary function application. The layering approach didn't work there, partially because the reality of the pipeline mechanism forced us towards Hack-style.</p>\n<p>Pattern matching is, by its very nature, a fairly complex capability. I'm not sure a piecemeal, layered approach is necessarily the right direction, though I do believe we need to consider more consistency with patterns across the language (hence extractors and the <code>is</code> operator I mentioned above).</p>\n</blockquote></mx-reply>+1, I support PAPP+F# pipe","m.relates_to":{"m.in_reply_to":{"event_id":"$lNx5tO8nuvTZKQCEt35hfFp0w2iebva-udGFwebEc8c"}},"msgtype":"m.text"},"ts":1658208901168,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1-4SPq47Tjun_8Hu9Q1hTwUhkMOEPCOeWB8KJlUWssI"},
{"content":{"body":"I also support PAPP+F# pipe :-)","msgtype":"m.text","org.matrix.msc1767.text":"I also support PAPP+F# pipe :-)"},"ts":1658208939325,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$vAT5n8m5T__AF2unZBT8BjIoVE0UyBCqzfwYshVQiEA"}
]