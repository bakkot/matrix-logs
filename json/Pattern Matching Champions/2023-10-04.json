[
{"content":{"body":"> <@tabatkins:matrix.org> I think this is relevant if it's *easy* to write code like that and there is *benefit* to doing it, such that we can expect it to be a somewhat common pattern among authors. If it's just *possible* but *fairly silly* to write such code, then so long as the behavior is well-defined and not too surprising it's not something we need to worry about, imo. People can do *lots* of very silly things in their code; this is far from the only place where authors can nest to ridiculous degrees if they feel like it, and make their code hard to understand.\n\nI don't really understand how to interact with this group when the response to my concerns is to pretend they don't exist","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$NOSaK0vzHa3GGuDAcynZywY1Z_2Iy3zhkb0l2bPdoag?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br />I think this is relevant if it's <em>easy</em> to write code like that and there is <em>benefit</em> to doing it, such that we can expect it to be a somewhat common pattern among authors. If it's just <em>possible</em> but <em>fairly silly</em> to write such code, then so long as the behavior is well-defined and not too surprising it's not something we need to worry about, imo. People can do <em>lots</em> of very silly things in their code; this is far from the only place where authors can nest to ridiculous degrees if they feel like it, and make their code hard to understand.</blockquote></mx-reply>I don't really understand how to interact with this group when the response to my concerns is to pretend they don't exist","m.relates_to":{"m.in_reply_to":{"event_id":"$NOSaK0vzHa3GGuDAcynZywY1Z_2Iy3zhkb0l2bPdoag"}},"msgtype":"m.text"},"ts":1696377653951,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$RBfDZhzgi3-3yQFqaIr34qXzQhlzVP7rDzrA99et26I"},
{"content":{"body":"Tweeting \"have you tried just not writing bad code?\" is already not going to be a way to win friends when we're talking about _existing_ features ","msgtype":"m.text"},"ts":1696377720098,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$twGi8gPx_fMn8q_IH_sP8KiPHQyHFqw622vrX9wfrIE"},
{"content":{"body":"I'm not doing that? I'm providing my own reasoning.","msgtype":"m.text"},"ts":1696377727268,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$aZ8wsYT7Jzg9x02H6t50P20mLDL0dqlvQe6H11qcMYY"},
{"content":{"body":"This is a new feature; it needs to justify its own existencr","msgtype":"m.text"},"ts":1696377741337,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$01O3bmezlPXZA2Mr5C49ZvnM6S6qn2pO4jbim9PvpHA"},
{"content":{"body":"* This is a new feature; it needs to justify its own existence","m.new_content":{"body":"This is a new feature; it needs to justify its own existence","msgtype":"m.text"},"m.relates_to":{"event_id":"$01O3bmezlPXZA2Mr5C49ZvnM6S6qn2pO4jbim9PvpHA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696377749734,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$LYt-i8f6M0moIPlRcRIhU32JXOb6FHzoZM9ZrS0sCi8"},
{"content":{"body":"Like, I provided significant qualifications to my statement. I think they all apply here, and justify my judgement that is okay. If you disagree, feel free to say why! Especially if you feel any of my assumptions don't hold, it perhaps don't hold as strongly as I might think they do.","msgtype":"m.text"},"ts":1696377819152,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8jw_Nw0rx8EdeSScddb4FTLD0MEjha69PgvzShRfnT0"},
{"content":{"body":"* Like, I provided significant qualifications to my statement. I think they all apply here, and justify my judgement that is okay. If you disagree, feel free to say why! Especially if you feel any of my assumptions don't hold, or perhaps don't hold as strongly as I might think they do.","m.new_content":{"body":"Like, I provided significant qualifications to my statement. I think they all apply here, and justify my judgement that is okay. If you disagree, feel free to say why! Especially if you feel any of my assumptions don't hold, or perhaps don't hold as strongly as I might think they do.","msgtype":"m.text"},"m.relates_to":{"event_id":"$8jw_Nw0rx8EdeSScddb4FTLD0MEjha69PgvzShRfnT0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696377864232,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YipaF9W8pDNx7pqpwF1ib-2nkOcJyQyhLPXDch5RyE0"},
{"content":{"body":"An issue is that I think your objection, as stated, is a fully general counter argument to any new feature that can be nested; you can always sufficiently nest it to make it unreadable. Thus my qualifications about when I think your (valid!) concern applies, and why I think this situation doesn't meet those criteria.","msgtype":"m.text"},"ts":1696378026902,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HIYap-pPDYDTtZTujKl6chUPGF3cgMzO3U0-jH2VjWI"},
{"content":{"body":"I said it was extremely easy to write code that's very hard to read. This is literally part of my _initial reaction_. I'm not looking for edge cases, I'm literally just spelling out the basic facts of what this does to JS.","msgtype":"m.text"},"ts":1696378040681,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$LtCSaFI1V6qhxTCQgTw5zrI1mhhqTFKLnd_Q4mVRVto"},
{"content":{"body":"This is all brand new to me; I am your eyes before plenary shuts you down","msgtype":"m.text"},"ts":1696378059416,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$jfUWImrRLBnjofKIhYjFdY4c2-hY-p5iOmeczU1fdVw"},
{"content":{"body":"Like, my expressions of reservation during plenary this week were all met with \"oh, I'll be harsher if you're not willing\"","msgtype":"m.text"},"ts":1696378154651,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2D9tqui6xTZH8NhWcRHW8gIdNtBRmzDxX1u1niYuIrM"},
{"content":{"body":"Yup, and my counter was that I don't *currently* believe that the problematic code you gave an example of is actually a realistic thing someone will write. I could be wrong; a semi-realistic example would help. ","msgtype":"m.text"},"ts":1696378206630,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EJd2MXK-iWlrAb3eYLlSviNIBF8QRaJhodKfOZwy8vw"},
{"content":{"body":"With sufficient elision, it's similarly easy to show short code that puts an IIAFE inside the default argument value of the arglist of another IIAFE, for example, which is practically unreadable with only one level of nesting. We don't judge that to be a concern tho, because it's rare and not particularly helpful vs the more readable ways to write that code.","msgtype":"m.text"},"ts":1696378361567,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LE-iipis0eMsC8IRoQsuGhbXifI0BRnqYXHjp9BhWg0"},
{"content":{"body":"But there are other examples one can raise for various features that are realistic *and* similarly unreadable, and that's a problem to address ","msgtype":"m.text"},"ts":1696378394625,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$kFA825QT2DiFaTyQBY5PAtcWTi_EkDhZydrOvooJVkQ"},
{"content":{"body":"So the specifics matter, is what I'm saying","msgtype":"m.text"},"ts":1696378402356,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Ts-An4NdiT03YTHVRsFdijnnHWWezN2zQp0-q4n_7rs"},
{"content":{"body":"Sure but I pointed out a basic fact -- `if (...)` would now be two totally different constructs, which not only can appear adjacently but the new one is also nestable -- and there is strong interest in having me not say that but no interest in being like, \"oh yes, we _could_ come up with a terrible example, couldn't we\"","msgtype":"m.text"},"ts":1696378538345,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$l4LlsK5CcBHPpvALr9n0dHSaDXrTxbCUPbxwY4ZE7eU"},
{"content":{"body":"Seems like we're only looking for people to nod and agree","msgtype":"m.text"},"ts":1696378682081,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$0JPafovRQE0QfXe-Rx_CG7ZoKZHO1WS99SdTrtd9Fqs"},
{"content":{"body":"> <@ljharb:matrix.org> i think it’s extremely important to unbox primitives by default; it’s a mistake the language makes that so difficult already.\n\nbut nobody really use them right? boxed primitives","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$8lSWjH7E03mVEORxRzClqNtYeXix40epXaUPkSV6NSc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i think it’s extremely important to unbox primitives by default; it’s a mistake the language makes that so difficult already.</blockquote></mx-reply>but nobody really use them right? boxed primitives","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8lSWjH7E03mVEORxRzClqNtYeXix40epXaUPkSV6NSc"}},"msgtype":"m.text"},"ts":1696379993195,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$dgp3gdHS9CCQssZW_Wsu7YNXuj9vqTTz6Vrq4wmOuxg"},
{"content":{"body":"Not on purpose, but way more than people realize by accident.","msgtype":"m.text"},"ts":1696380013815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PKd1kGrag0BQcWmHJCKPBmYOAoXQMaeYdZSE-bZjR2g"},
{"content":{"body":"My goal here is to absorb those accidents and be able to write code that pretends boxed primitives doesn’t exist, and *still works with them*, something that’s quite difficult today.","format":"org.matrix.custom.html","formatted_body":"My goal here is to absorb those accidents and be able to write code that pretends boxed primitives doesn’t exist, and <em>still works with them</em>, something that’s quite difficult today.","msgtype":"m.text"},"ts":1696380053990,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NTdQT4LS85xN0M5LB_B2Lz-vkAi2uPAVARBn7krJ5pc"},
{"content":{"body":"> <@ljharb:matrix.org> My goal here is to absorb those accidents and be able to write code that pretends boxed primitives doesn’t exist, and *still works with them*, something that’s quite difficult today.\n\nHaving `x is String` work for both boxed and unboxed primitives is fine. I'm not sure how valuable `x is String(let y)` is though. If you are writing that you are definitely *not* pretending boxed primitives don't exist. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$NTdQT4LS85xN0M5LB_B2Lz-vkAi2uPAVARBn7krJ5pc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />My goal here is to absorb those accidents and be able to write code that pretends boxed primitives doesn’t exist, and <em>still works with them</em>, something that’s quite difficult today.</blockquote></mx-reply>Having <code>x is String</code> work for both boxed and unboxed primitives is fine. I'm not sure how valuable <code>x is String(let y)</code> is though. If you are writing that you are definitely <em>not</em> pretending boxed primitives don't exist.","m.relates_to":{"m.in_reply_to":{"event_id":"$NTdQT4LS85xN0M5LB_B2Lz-vkAi2uPAVARBn7krJ5pc"}},"msgtype":"m.text"},"ts":1696380666125,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Uedv-uiK5RBm6dco3zB1EJNcLWWxqG_LdPht6NEQ1gs"},
{"content":{"body":"i agree there’s no value there. However that seems like an unavoidable thing to fall out of the proposal’s semantics, and not a harmful one since it’ll be rare (unless it slows down normal usage, ofc)","msgtype":"m.text"},"ts":1696381595728,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dFW-d238HQWhTk_WXHeBd56hhHFJdcN225NkDdK2c0Y"},
{"content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` certainly makes sense. Still, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> certainly makes sense. Still, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1696383495577,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` certainly makes sense. Simultaneously, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> certainly makes sense. Simultaneously, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` certainly makes sense. Simultaneously, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> certainly makes sense. Simultaneously, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696383658006,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$WklFaGlmr0WZBnxN_uIkPk-_-n5lRwq-CShyzaur8K8"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696383677562,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$MwpOjZjZ4EpMHWfivYcOcQEApc9vpt62HGToifSmS8Y"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nAnd indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>And indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696383683784,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-oVGFuUHNQle_D6RosYNW23k6uHAqoqtCwHQMhsI4AA"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. Patterns ought to be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, and ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696383978672,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-1QO8PpJSDljcIKJHZHREuUT3stp7l1nNcf3gnBaDq4"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, but ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, but ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, but ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, but ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696384218459,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$FlFs-aAo4j0nVYSBMVxkwxU6MiHxPzXh8zEp8MzR1ys"},
{"content":{"body":" * So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":" * <p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"m.new_content":{"body":"So what's getting totally lost is why we want the things that we want.\n\n`is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n\nIndeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n\nAlthough I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where `and` is not the most intuitive keyword to read.","format":"org.matrix.custom.html","formatted_body":"<p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696384254782,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$lulI0xFWxMBGTLllOzWM1if1djfnL7Wf1MXrwNXQuiA"},
{"content":{"body":" * Like, my expressions of reservation during plenary this past week were all met with \"oh, I'll be harsher if you're not willing\"","m.mentions":{},"m.new_content":{"body":"Like, my expressions of reservation during plenary this past week were all met with \"oh, I'll be harsher if you're not willing\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2D9tqui6xTZH8NhWcRHW8gIdNtBRmzDxX1u1niYuIrM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1696384322620,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$HBdVWB1lpB42yKe-UBa7pp6RXHjjPtXYt0gEgiMzeSU"},
{"content":{"body":"> <@rkirsling:matrix.org> So what's getting totally lost is why we want the things that we want.\n> \n> `is` feels like \"_huh? this is not the proposal I showed up for? we're here to make a better `switch`, not to pull a bait-and-switch_\", yet wanting `if (x is Some(let v))` makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, `if (let { foo } = x)` would integrate better into the language.\n> \n> Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a _worrying_ signal, that the feature has grown unreasonably large.\n> \n> Although I was thinking yesterday that the spelling `if` is more of an issue than whether it's a pattern, this may have been mistaken. If `if` is a guard then it feels more natural to exclude it from `is`, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that `and` is a good idea; the thing that we really _need_ it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where `and` is not the most intuitive keyword to read.\n\nhalf a dozen sounds high? I recall mentioning it in relation to the negated `in`/`instanceof` proposal, which I had mentioned here in advance of plenary. I don't recall much more than that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br><p>So what's getting totally lost is why we want the things that we want.</p>\n<p><code>is</code> feels like \"<em>huh? this is not the proposal I showed up for? we're here to make a better <code>switch</code>, not to pull a bait-and-switch</em>\", yet wanting <code>if (x is Some(let v))</code> makes a lot of sense. Simultaneously though, it's clear that for the general POJO situation, <code>if (let { foo } = x)</code> would integrate better into the language.</p>\n<p>Indeed, the temperature of the committee that I was experiencing last week is that having \"pattern matching has a solution for that!\" come up in the discussion of a half-dozen disparate proposals is a <em>worrying</em> signal, that the feature has grown unreasonably large.</p>\n<p>Although I was thinking yesterday that the spelling <code>if</code> is more of an issue than whether it's a pattern, this may have been mistaken. If <code>if</code> is a guard then it feels more natural to exclude it from <code>is</code>, which makes my largest concerns disappear. I believe strongly that patterns should be as simple as possible -- it's not even clear to me that <code>and</code> is a good idea; the thing that we really <em>need</em> it for is a way to connect a binding to a pattern that's going to use that binding, yet ironically that's exactly the case where <code>and</code> is not the most intuitive keyword to read.</p>\n</blockquote></mx-reply>half a dozen sounds high? I recall mentioning it in relation to the negated <code>in</code>/<code>instanceof</code> proposal, which I had mentioned here in advance of plenary. I don't recall much more than that.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1BM14f28w-_-xVNrMTD59u0Y9uXQIBkD3dUiWksRxNM"}},"msgtype":"m.text"},"ts":1696384547302,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YhAT_8lZ7pPmhYxA-QVd5ftzzimGwZd7NgvRP33De3g"},
{"content":{"body":"`if (let { foo } = x)` may align with existing destructuring, but existing destructuring cannot be easily extended into a full pattern matching mechanism. ","format":"org.matrix.custom.html","formatted_body":"<code>if (let { foo } = x)</code> may align with existing destructuring, but existing destructuring cannot be easily extended into a full pattern matching mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1696384599087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NML81s67dwByjcIWXsBMN3bc9bu50Rf8robuistE3dg"},
{"content":{"body":"I also don't have a strong opinion on whether `if` should be excluded from `is`, only that if we have `if` patterns, then we shouldn't differ in what is allowed in the Pattern syntax between `if` and `match`.","format":"org.matrix.custom.html","formatted_body":"I also don't have a strong opinion on whether <code>if</code> should be excluded from <code>is</code>, only that if we have <code>if</code> patterns, then we shouldn't differ in what is allowed in the Pattern syntax between <code>if</code> and <code>match</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1696384683518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NIREYWZl8WOpkBbmk1gxQkSQ_8D8JAwlCfGZiphe5PQ"},
{"content":{"body":"\"half-dozen\" might be rounding up 😅 but I mean it in terms of folks' perception, regardless of the precise reality","m.mentions":{},"msgtype":"m.text"},"ts":1696384714044,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$QvenoGcx3jxNRIH0nrcGwgQyYtGxJAEXzOIpTQ4sMxM"},
{"content":{"body":"If anything, I feel that `is not` is far more palatable than `!in` and `!instanceof`, though that comes from a position of trying not to clash with TypeScript syntax if possible.","format":"org.matrix.custom.html","formatted_body":"If anything, I feel that <code>is not</code> is far more palatable than <code>!in</code> and <code>!instanceof</code>, though that comes from a position of trying not to clash with TypeScript syntax if possible.","m.mentions":{},"msgtype":"m.text"},"ts":1696384785988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Lu8hlmS0q4MvFiJRq1bH6J61bpS-1_IjcW9JUu8t7Ac"},
{"content":{"body":"Also, `if (let { foo } = x)` doesn't really work if it's not actually doing pattern matching. There's no condition in that case.","format":"org.matrix.custom.html","formatted_body":"Also, <code>if (let { foo } = x)</code> doesn't really work if it's not actually doing pattern matching. There's no condition in that case.","m.mentions":{},"msgtype":"m.text"},"ts":1696384833981,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y7DDi6gd9MSZTU77Yf-2m6UKtnBg-ctlb1wqssq9ehE"},
{"content":{"body":"it may be the case that destructuring can't be extending into pattern matching, but what I'm saying is that we have a great language without pattern matching which wants for an if-let construct","m.mentions":{},"msgtype":"m.text"},"ts":1696384883364,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$w5pvOxpuFgq3Q2mMb7QnSP6qSWeaw8Nvewdn2buDZ0I"},
{"content":{"body":"to introduce not destructuring but instead a \"competitor\" to it in that space feels like the language is attacking itself","m.mentions":{},"msgtype":"m.text"},"ts":1696384919173,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mOdWmSgxNAyMSneWiDeoDLRawApF1vX3e_Z2VjiX-fY"},
{"content":{"body":"I believe we have a great language which wants for a pattern matching mechanism. ","m.mentions":{},"msgtype":"m.text"},"ts":1696384920484,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uTlPik3z2ZGKvMuu1U0WSZCQZS-QEssYnlHU3iuVP1g"},
{"content":{"body":"There are so many things pattern matching can tie into with future proposals that can build upon it. A standalone `if let` mechanism is almost a throwaway feature. It doesn't add any other intrinsic value.","format":"org.matrix.custom.html","formatted_body":"There are so many things pattern matching can tie into with future proposals that can build upon it. A standalone <code>if let</code> mechanism is almost a throwaway feature. It doesn't add any other intrinsic value.","m.mentions":{},"msgtype":"m.text"},"ts":1696384975907,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iNIiJRAK4_0il4PjTQFMXpKBlX_iUGs-pQ48Kx7qROg"},
{"content":{"body":"Pattern matching is a boon for FP-style development and is a vast improvement in terms of expressivity and usability of the language, especially with a cohesive syntax.","m.mentions":{},"msgtype":"m.text"},"ts":1696385051823,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6D5jxCJGGySQ3eGgPWtugCMn_oi2_cBn8Vzs0z_dcn4"},
{"content":{"body":"If anything, I see \"this could be accomplished with pattern matching\" to be an indication that we're on the path to getting this right. Not in a \"shoehorn everything into pattern syntax\" way, but in a \"natural progression of the feature and its capabilities\" way.","m.mentions":{},"msgtype":"m.text"},"ts":1696385109873,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LhPl2txPZ4-RsF09dlDaRhf8G4RXpF3DjDQrCzcu5u0"},
{"content":{"body":"> <@rbuckton:matrix.org> There are so many things pattern matching can tie into with future proposals that can build upon it. A standalone `if let` mechanism is almost a throwaway feature. It doesn't add any other intrinsic value.\n\nthat's a very difficult philosophy for me to relate to 😓 ideally we'd never need to add anything to the language because it would already be enough. `if`-`let` is a simple extension of what we already have which adds value without introducing any worries about the ship capsizing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!XyZDxqjPFLRXDgUzhD:matrix.org/$iNIiJRAK4_0il4PjTQFMXpKBlX_iUGs-pQ48Kx7qROg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There are so many things pattern matching can tie into with future proposals that can build upon it. A standalone <code>if let</code> mechanism is almost a throwaway feature. It doesn't add any other intrinsic value.</blockquote></mx-reply>that's a very difficult philosophy for me to relate to 😓 ideally we'd never need to add anything to the language because it would already be enough. <code>if</code>-<code>let</code> is a simple extension of what we already have which adds value without introducing any worries about the ship capsizing","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iNIiJRAK4_0il4PjTQFMXpKBlX_iUGs-pQ48Kx7qROg"}},"msgtype":"m.text"},"ts":1696385224041,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$965jRyocdx3kV1G9gxKNBCvv1UNw8vLdOTmXj5N6h48"},
{"content":{"body":"If anything, I find it regrettable that destructuring was defined to be so loose in how it handles patterns, which makes it very difficult to extend into a full blown pattern matching mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1696385241836,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FqApZzgYdwAwo_65ASM35aP_uQy6bnDqv5q6rW3M1kc"},
{"content":{"body":"I don't see how `if let` is useful *without* pattern matching to go with it. ","format":"org.matrix.custom.html","formatted_body":"I don't see how <code>if let</code> is useful <em>without</em> pattern matching to go with it.","m.mentions":{},"msgtype":"m.text"},"ts":1696385280558,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qBsNGN6tmm92sgnmdDJmTRys29d-OgwI1jpVeUWuOiA"}
]