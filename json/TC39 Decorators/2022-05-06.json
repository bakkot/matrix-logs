[
{"content":{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","format":"org.matrix.custom.html","formatted_body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","mimetype":"text/plain"},{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$1MY71h-5XG3jC6gkL7DlG6ATHRIhTa8ZM3eTU0Ds3GM"}}},"ts":1651850709844,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg"},
{"content":{"body":"> <@rbuckton:matrix.org> Except F# computation expressions can add keywords. Not sure if I'd support that\n\n * Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$1MY71h-5XG3jC6gkL7DlG6ATHRIhTa8ZM3eTU0Ds3GM?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Except F# computation expressions can add keywords. Not sure if I'd support that</blockquote></mx-reply> * Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","m.new_content":{"body":"Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","format":"org.matrix.custom.html","formatted_body":"Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","mimetype":"text/plain"},{"body":"Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Except F# computation expressions can add keywords. Not sure if I'd support that\n\n * Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$1MY71h-5XG3jC6gkL7DlG6ATHRIhTa8ZM3eTU0Ds3GM?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Except F# computation expressions can add keywords. Not sure if I'd support that</blockquote></mx-reply> * Well, they wouldn’t add keywords so much as override the behavior of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","mimetype":"text/html"}]},"ts":1651850716309,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HrTFPQeHXQYYytR3qZQrb67vCnhDx3l-jLuflbNuI8Q"},
{"content":{"body":" * Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","format":"org.matrix.custom.html","formatted_body":" * Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","m.new_content":{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","format":"org.matrix.custom.html","formatted_body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","mimetype":"text/plain"},{"body":"Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!","mimetype":"text/plain"},{"body":" * Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!","mimetype":"text/html"}]},"ts":1651850756344,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UGC5OaXgfvh9VU7Y4hIx2Fyl_IxPjzl198Z69QXW5Ho"},
{"content":{"body":"Interesting. Just within that context tho, right? Not nested calls for example.","msgtype":"m.text"},"ts":1651850907775,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qapP3x0ontxNMX6Ibr7xWnQblsCHypwVslq7xjpWw3I"},
{"content":{"body":"> <@mhofman:matrix.org> Interesting. Just within that context tho, right? Not nested calls for example.\n\nYes, that’s right.\n\nI was rewriting a plan in https://gist.github.com/js-choi/854ccbc34787c697ea1f8458d6a1d660, but it was in the middle of a rewrite (most of the stuff is hidden in the Scratchpad’s <details> element at the end), then I lost the bandwidth to work on it. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$qapP3x0ontxNMX6Ibr7xWnQblsCHypwVslq7xjpWw3I?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Interesting. Just within that context tho, right? Not nested calls for example.</blockquote></mx-reply><p>Yes, that’s right.</p>\n<p>I was rewriting a plan in https://gist.github.com/js-choi/854ccbc34787c697ea1f8458d6a1d660, but it was in the middle of a rewrite (most of the stuff is hidden in the Scratchpad’s &lt;details&gt; element at the end), then I lost the bandwidth to work on it.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$qapP3x0ontxNMX6Ibr7xWnQblsCHypwVslq7xjpWw3I"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Interesting. Just within that context tho, right? Not nested calls for example.\n\nYes, that’s right.\n\nI was rewriting a plan in https://gist.github.com/js-choi/854ccbc34787c697ea1f8458d6a1d660, but it was in the middle of a rewrite (most of the stuff is hidden in the Scratchpad’s <details> element at the end), then I lost the bandwidth to work on it. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$qapP3x0ontxNMX6Ibr7xWnQblsCHypwVslq7xjpWw3I?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Interesting. Just within that context tho, right? Not nested calls for example.</blockquote></mx-reply><p>Yes, that’s right.</p>\n<p>I was rewriting a plan in https://gist.github.com/js-choi/854ccbc34787c697ea1f8458d6a1d660, but it was in the middle of a rewrite (most of the stuff is hidden in the Scratchpad’s &lt;details&gt; element at the end), then I lost the bandwidth to work on it.</p>\n","mimetype":"text/html"}]},"ts":1651851298855,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8FcxQYQkbg9iI3n9tA5vzJd50WnYCVVH-rHRkZlN8kc"},
{"content":{"body":"One big thing that blocked me was the unresolved question on whether `do` expressions will use implicit-result block semantics (`return` works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (`return` is required and works on the inner function). Context blocks / decorated blocks would *have* to use IIFE semantics, so if `do` blocks do not go with IIFE semantics then they can’t use the `do` keyword.","format":"org.matrix.custom.html","formatted_body":"One big thing that blocked me was the unresolved question on whether <code>do</code> expressions will use implicit-result block semantics (<code>return</code> works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (<code>return</code> is required and works on the inner function). Context blocks / decorated blocks would <em>have</em> to use IIFE semantics, so if <code>do</code> blocks do not go with IIFE semantics then they can’t use the <code>do</code> keyword.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One big thing that blocked me was the unresolved question on whether `do` expressions will use implicit-result block semantics (`return` works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (`return` is required and works on the inner function). Context blocks / decorated blocks would *have* to use IIFE semantics, so if `do` blocks do not go with IIFE semantics then they can’t use the `do` keyword.","mimetype":"text/plain"},{"body":"One big thing that blocked me was the unresolved question on whether <code>do</code> expressions will use implicit-result block semantics (<code>return</code> works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (<code>return</code> is required and works on the inner function). Context blocks / decorated blocks would <em>have</em> to use IIFE semantics, so if <code>do</code> blocks do not go with IIFE semantics then they can’t use the <code>do</code> keyword.","mimetype":"text/html"}]},"ts":1651851344681,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W09zBoV-fVH3NlFmqch-_xVJvYfvDEg76dlc_svfEWQ"},
{"content":{"body":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid).","msgtype":"m.text","org.matrix.msc1767.text":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid)."},"ts":1651851387925,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vDlmbvSwpVIuR0KWRnV6N8YYDNF2h2EU6d81k1BSNFI"},
{"content":{"body":" * The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective, although they use some of the usual higher-level FP jargon that we definitely would avoid.","m.new_content":{"body":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective, although they use some of the usual higher-level FP jargon that we definitely would avoid.","msgtype":"m.text","org.matrix.msc1767.text":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective, although they use some of the usual higher-level FP jargon that we definitely would avoid."},"m.relates_to":{"event_id":"$vDlmbvSwpVIuR0KWRnV6N8YYDNF2h2EU6d81k1BSNFI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective, although they use some of the usual higher-level FP jargon that we definitely would avoid."},"ts":1651851428520,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bP4QyjZc4puvMKMeUHxB4bhzOBl5mh0-4oFyTqyUUaA"},
{"content":{"body":" * The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid).","m.new_content":{"body":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid).","msgtype":"m.text","org.matrix.msc1767.text":"The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid)."},"m.relates_to":{"event_id":"$vDlmbvSwpVIuR0KWRnV6N8YYDNF2h2EU6d81k1BSNFI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * The papers in http://tomasp.net/academic/papers/computation-zoo/ give a nice overview of the general ideas from the F# perspective (although they use a little of the usual higher-level FP jargon that we definitely would avoid)."},"ts":1651851449577,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eI4is55rupGGzUWFUilboJqw0LhUQ0TvL5_QCBysyMQ"},
{"content":{"body":"> <@jschoi:matrix.org> Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!\n\nF# computations did both, and can also leverage a type system to acquire an AST for an expression to do tree rewrites to convert a local computation  expression into a remotely executed operation (such as in a SQL database).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!</blockquote></mx-reply>F# computations did both, and can also leverage a type system to acquire an AST for an expression to do tree rewrites to convert a local computation  expression into a remotely executed operation (such as in a SQL database).","m.relates_to":{"m.in_reply_to":{"event_id":"$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like `yield`, `await`, `return`) within the decorated blocks. But yeah!\n\nF# computations did both, and can also leverage a type system to acquire an AST for an expression to do tree rewrites to convert a local computation  expression into a remotely executed operation (such as in a SQL database).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$DrDLAOb-qSMiKAK2fPAMUmCFZHvGS1D8cPsTyDKGePg?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Well, they wouldn’t add keywords so much as override the semantics of several existing keywords (like <code>yield</code>, <code>await</code>, <code>return</code>) within the decorated blocks. But yeah!</blockquote></mx-reply>F# computations did both, and can also leverage a type system to acquire an AST for an expression to do tree rewrites to convert a local computation  expression into a remotely executed operation (such as in a SQL database).","mimetype":"text/html"}]},"ts":1651853341703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$blyGxn2eFHD4rW81N9_wCIMDGqUDXe1QG-iJIqKE8HI"},
{"content":{"body":"> <@jschoi:matrix.org> One big thing that blocked me was the unresolved question on whether `do` expressions will use implicit-result block semantics (`return` works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (`return` is required and works on the inner function). Context blocks / decorated blocks would *have* to use IIFE semantics, so if `do` blocks do not go with IIFE semantics then they can’t use the `do` keyword.\n\nI've always been concerned that `do` expressions don't have an explicit return from the block, even if it's not `return` per se.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$W09zBoV-fVH3NlFmqch-_xVJvYfvDEg76dlc_svfEWQ?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>One big thing that blocked me was the unresolved question on whether <code>do</code> expressions will use implicit-result block semantics (<code>return</code> works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (<code>return</code> is required and works on the inner function). Context blocks / decorated blocks would <em>have</em> to use IIFE semantics, so if <code>do</code> blocks do not go with IIFE semantics then they can’t use the <code>do</code> keyword.</blockquote></mx-reply>I've always been concerned that <code>do</code> expressions don't have an explicit return from the block, even if it's not <code>return</code> per se.","m.relates_to":{"m.in_reply_to":{"event_id":"$W09zBoV-fVH3NlFmqch-_xVJvYfvDEg76dlc_svfEWQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> One big thing that blocked me was the unresolved question on whether `do` expressions will use implicit-result block semantics (`return` works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (`return` is required and works on the inner function). Context blocks / decorated blocks would *have* to use IIFE semantics, so if `do` blocks do not go with IIFE semantics then they can’t use the `do` keyword.\n\nI've always been concerned that `do` expressions don't have an explicit return from the block, even if it's not `return` per se.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$W09zBoV-fVH3NlFmqch-_xVJvYfvDEg76dlc_svfEWQ?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>One big thing that blocked me was the unresolved question on whether <code>do</code> expressions will use implicit-result block semantics (<code>return</code> works on the outer function), explicit-result block semantics (same except the final statement is the final evaluation result), or IIFE semantics (<code>return</code> is required and works on the inner function). Context blocks / decorated blocks would <em>have</em> to use IIFE semantics, so if <code>do</code> blocks do not go with IIFE semantics then they can’t use the <code>do</code> keyword.</blockquote></mx-reply>I've always been concerned that <code>do</code> expressions don't have an explicit return from the block, even if it's not <code>return</code> per se.","mimetype":"text/html"}]},"ts":1651853403201,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MV-HuRDYFCt_mVI1oNMlS0CSz4NsMNkePNTHP-ndW5E"},
{"content":{"body":"I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","format":"org.matrix.custom.html","formatted_body":"<p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","mimetype":"text/plain"},{"body":"<p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1651853530541,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vDWKI6qyMxlne1xx1Vb3t54vScaHT7aokMhZLQlvFuc"},
{"content":{"body":" * I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","m.new_content":{"body":"I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","format":"org.matrix.custom.html","formatted_body":"<p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","mimetype":"text/plain"},{"body":"<p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vDWKI6qyMxlne1xx1Vb3t54vScaHT7aokMhZLQlvFuc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I was playing around with what this might look like:\n\n```ts\n// given:\n//\n//  @expr do {\n//      console.log(\"a\");\n//      yield 1;\n//      console.log(\"b\");\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() => {\n        console.log(\"a\");\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() => {\n                console.log(\"b\");\n                return expr.zero();\n            })\n        );\n    })\n);\n```","mimetype":"text/plain"},{"body":" * <p>I was playing around with what this might look like:</p>\n<pre><code class=\"language-ts\">// given:\n//\n//  @expr do {\n//      console.log(&quot;a&quot;);\n//      yield 1;\n//      console.log(&quot;b&quot;);\n//  }\n//\n// translates to:\n//\nexpr.run(\n    expr.delay(() =&gt; {\n        console.log(&quot;a&quot;);\n        return expr.combine(\n            expr.yield(1),\n            expr.delay(() =&gt; {\n                console.log(&quot;b&quot;);\n                return expr.zero();\n            })\n        );\n    })\n);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1651853546767,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZjRudmJ8c0haZi5Jd-2ozhGpBuj5BM1im0qmO01Qic"}
]