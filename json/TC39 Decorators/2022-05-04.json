[
{"content":{"body":"I was looking at the outline for parameter decorators mentioned here: https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#parameter-decorators-and-annotations, and was thinking about the shape of the context object. I think there are a few things we could add aside from `kind`:\n\n```ts\ninterface ParameterDecoratorContext {\n  kind: \"parameter\";\n  index: number; // ordinal position of parameter\n  name?: string; // name if an Identifier, `undefined` if a binding pattern\n  rest: boolean; // indicates a rest parameter (i.e., `...`)\n  parent:\n    | {\n        kind: \"function\";\n        name?: string;\n      }\n    | {\n        kind: \"method\" | \"getter\" | \"setter\";\n        name: string | symbol;\n        private: boolean;\n        static: boolean;\n        parent: // may be other parents in the future such as `struct`, `object`, etc.\n          | {\n              kind: \"class\";\n              name?: string;\n            }\n      };\n  // phase: \"function\" runs initializers at the start of the function body\n  addInitializer(cb: () => unknown, phase?: \"class\" | \"static\" | \"instance\" | \"function\"): void;\n}\n```\nThe above also incorporates the parent context idea from https://github.com/tc39/proposal-decorators/issues/466","format":"org.matrix.custom.html","formatted_body":"<p>I was looking at the outline for parameter decorators mentioned here: https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#parameter-decorators-and-annotations, and was thinking about the shape of the context object. I think there are a few things we could add aside from <code>kind</code>:</p>\n<pre><code class=\"language-ts\">interface ParameterDecoratorContext {\n  kind: &quot;parameter&quot;;\n  index: number; // ordinal position of parameter\n  name?: string; // name if an Identifier, `undefined` if a binding pattern\n  rest: boolean; // indicates a rest parameter (i.e., `...`)\n  parent:\n    | {\n        kind: &quot;function&quot;;\n        name?: string;\n      }\n    | {\n        kind: &quot;method&quot; | &quot;getter&quot; | &quot;setter&quot;;\n        name: string | symbol;\n        private: boolean;\n        static: boolean;\n        parent: // may be other parents in the future such as `struct`, `object`, etc.\n          | {\n              kind: &quot;class&quot;;\n              name?: string;\n            }\n      };\n  // phase: &quot;function&quot; runs initializers at the start of the function body\n  addInitializer(cb: () =&gt; unknown, phase?: &quot;class&quot; | &quot;static&quot; | &quot;instance&quot; | &quot;function&quot;): void;\n}\n</code></pre>\n<p>The above also incorporates the parent context idea from https://github.com/tc39/proposal-decorators/issues/466</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was looking at the outline for parameter decorators mentioned here: https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#parameter-decorators-and-annotations, and was thinking about the shape of the context object. I think there are a few things we could add aside from `kind`:\n\n```ts\ninterface ParameterDecoratorContext {\n  kind: \"parameter\";\n  index: number; // ordinal position of parameter\n  name?: string; // name if an Identifier, `undefined` if a binding pattern\n  rest: boolean; // indicates a rest parameter (i.e., `...`)\n  parent:\n    | {\n        kind: \"function\";\n        name?: string;\n      }\n    | {\n        kind: \"method\" | \"getter\" | \"setter\";\n        name: string | symbol;\n        private: boolean;\n        static: boolean;\n        parent: // may be other parents in the future such as `struct`, `object`, etc.\n          | {\n              kind: \"class\";\n              name?: string;\n            }\n      };\n  // phase: \"function\" runs initializers at the start of the function body\n  addInitializer(cb: () => unknown, phase?: \"class\" | \"static\" | \"instance\" | \"function\"): void;\n}\n```\nThe above also incorporates the parent context idea from https://github.com/tc39/proposal-decorators/issues/466","mimetype":"text/plain"},{"body":"<p>I was looking at the outline for parameter decorators mentioned here: https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#parameter-decorators-and-annotations, and was thinking about the shape of the context object. I think there are a few things we could add aside from <code>kind</code>:</p>\n<pre><code class=\"language-ts\">interface ParameterDecoratorContext {\n  kind: &quot;parameter&quot;;\n  index: number; // ordinal position of parameter\n  name?: string; // name if an Identifier, `undefined` if a binding pattern\n  rest: boolean; // indicates a rest parameter (i.e., `...`)\n  parent:\n    | {\n        kind: &quot;function&quot;;\n        name?: string;\n      }\n    | {\n        kind: &quot;method&quot; | &quot;getter&quot; | &quot;setter&quot;;\n        name: string | symbol;\n        private: boolean;\n        static: boolean;\n        parent: // may be other parents in the future such as `struct`, `object`, etc.\n          | {\n              kind: &quot;class&quot;;\n              name?: string;\n            }\n      };\n  // phase: &quot;function&quot; runs initializers at the start of the function body\n  addInitializer(cb: () =&gt; unknown, phase?: &quot;class&quot; | &quot;static&quot; | &quot;instance&quot; | &quot;function&quot;): void;\n}\n</code></pre>\n<p>The above also incorporates the parent context idea from https://github.com/tc39/proposal-decorators/issues/466</p>\n","mimetype":"text/html"}]},"ts":1651686185879,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y7Ont25W1uee_Ny09dRDQg9Vlgwo8jv8dr0SoPZMM18"}
]