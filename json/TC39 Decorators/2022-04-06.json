[
{"content":{"body":"In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke `PrivateMethodOrAccessorAdd` on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.\n\nI am wondering for a static private accessor:\n\n```\nclass C { static accessor #p }\n```\n\nat which step is the private name `#p` registered to `C`.[[PrivateElements]]? I feel like it should be handled in `PrivateMethodOrAccessorAdd` just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.","format":"org.matrix.custom.html","formatted_body":"<p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke `PrivateMethodOrAccessorAdd` on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.\n\nI am wondering for a static private accessor:\n\n```\nclass C { static accessor #p }\n```\n\nat which step is the private name `#p` registered to `C`.[[PrivateElements]]? I feel like it should be handled in `PrivateMethodOrAccessorAdd` just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.","mimetype":"text/plain"},{"body":"<p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n","mimetype":"text/html"}]},"ts":1649280968278,"senderName":"jlhwung","senderId":"@jlhwung:matrix.org","id":"$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y"},
{"content":{"body":"> <@jlhwung:matrix.org> In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke `PrivateMethodOrAccessorAdd` on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.\n> \n> I am wondering for a static private accessor:\n> \n> ```\n> class C { static accessor #p }\n> ```\n> \n> at which step is the private name `#p` registered to `C`.[[PrivateElements]]? I feel like it should be handled in `PrivateMethodOrAccessorAdd` just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.\n\nThis can be observed from half-constructed class:\n```\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jlhwung:matrix.org\">@jlhwung:matrix.org</a><br><p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n</blockquote></mx-reply><p>This can be observed from half-constructed class:</p>\n<pre><code></code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jlhwung:matrix.org> In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke `PrivateMethodOrAccessorAdd` on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.\n> \n> I am wondering for a static private accessor:\n> \n> ```\n> class C { static accessor #p }\n> ```\n> \n> at which step is the private name `#p` registered to `C`.[[PrivateElements]]? I feel like it should be handled in `PrivateMethodOrAccessorAdd` just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.\n\nThis can be observed from half-constructed class:\n```\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jlhwung:matrix.org\">@jlhwung:matrix.org</a><br><p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n</blockquote></mx-reply><p>This can be observed from half-constructed class:</p>\n<pre><code></code></pre>\n","mimetype":"text/html"}]},"ts":1649281159111,"senderName":"jlhwung","senderId":"@jlhwung:matrix.org","id":"$a1HG3lmbtDqR64hiVm340qPy0uusy_QSfVpVQkadBKs"},
{"content":{"body":"> <@pzura:matrix.org> ljharb: when you get a sec, can you update the meeting description to replace the existing agenda link with this one?\n\nsorry for the delay; this should be done","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$Ba0evrpSgk1_hQjy-wvvXDhTQzeW5l7deQoDbGyopMA?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: when you get a sec, can you update the meeting description to replace the existing agenda link with this one?</blockquote></mx-reply>sorry for the delay; this should be done","m.relates_to":{"m.in_reply_to":{"event_id":"$Ba0evrpSgk1_hQjy-wvvXDhTQzeW5l7deQoDbGyopMA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pzura:matrix.org> ljharb: when you get a sec, can you update the meeting description to replace the existing agenda link with this one?\n\nsorry for the delay; this should be done","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$Ba0evrpSgk1_hQjy-wvvXDhTQzeW5l7deQoDbGyopMA?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: when you get a sec, can you update the meeting description to replace the existing agenda link with this one?</blockquote></mx-reply>sorry for the delay; this should be done","mimetype":"text/html"}]},"ts":1649281334226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b83p2Ch5KhaYJ6mGH8m6R6yr6K2WeMqDPEY6vtcrYNM"},
{"content":{"body":" * This can be observed from a half-constructed class:\n\n```\ntry {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() => {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jlhwung:matrix.org\">@jlhwung:matrix.org</a><br><p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n</blockquote></mx-reply> * <p>This can be observed from a half-constructed class:</p>\n<pre><code>try {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() =&gt; {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n</code></pre>\n","m.new_content":{"body":"This can be observed from a half-constructed class:\n\n```\ntry {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() => {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>This can be observed from a half-constructed class:</p>\n<pre><code>try {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() =&gt; {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This can be observed from a half-constructed class:\n\n```\ntry {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() => {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n```","mimetype":"text/plain"},{"body":"<p>This can be observed from a half-constructed class:</p>\n<pre><code>try {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() =&gt; {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$a1HG3lmbtDqR64hiVm340qPy0uusy_QSfVpVQkadBKs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This can be observed from a half-constructed class:\n\n```\ntry {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() => {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$OX_Rqcv5_ybybFHiH3fYpFLdI0XXkzVrmOF7pxHG46Y?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@jlhwung:matrix.org\">@jlhwung:matrix.org</a><br><p>In RS:ClassDefinitionEvaluation of https://arai-a.github.io/ecma262-compare/?pr=2417, we invoke <code>PrivateMethodOrAccessorAdd</code> on each element of staticPrivateMethod, but staticPrivateMethod is not defined in previous steps.</p>\n<p>I am wondering for a static private accessor:</p>\n<pre><code>class C { static accessor #p }\n</code></pre>\n<p>at which step is the private name <code>#p</code> registered to <code>C</code>.[[PrivateElements]]? I feel like it should be handled in <code>PrivateMethodOrAccessorAdd</code> just like getter/setter, and its BackingStorageKey will be registered in InitializeFieldOrAccessor separately.</p>\n</blockquote></mx-reply> * <p>This can be observed from a half-constructed class:</p>\n<pre><code>try {\n  var halfConstructed;\n  class C {\n  static test() {\n    #x in C; //true or false?\n    }\n  static accessor #x;\n  static accessor #y = (() =&gt; {\n    halfConstructed = C;\n    throw new Error;\n  })();\n  }\n} catch {\n  halfConstructed.test()\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1649281469810,"senderName":"jlhwung","senderId":"@jlhwung:matrix.org","id":"$nrQnemRXHOZ4b5tsrj1sdkFtjPn3yKOdSOwASuNf_VE"}
]