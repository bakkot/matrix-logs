[
{"content":{"body":"So in the first case of runtime checks, I need the param decorator to be able to modify the function in such a way that param validation can run when the function is invoked (hopefully without requiring to decorate the function itself).","msgtype":"m.text","org.matrix.msc1767.text":"So in the first case of runtime checks, I need the param decorator to be able to modify the function in such a way that param validation can run when the function is invoked (hopefully without requiring to decorate the function itself)."},"ts":1651708900373,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3-O3bTDeRFdXQ45tSY9lwymGlId80EO2Bw9iAaw3G1A"},
{"content":{"body":"And in the second case, I need to annotate the object literal's method parameters in such a way that a related helper can read the annotations starting from the object itself","msgtype":"m.text","org.matrix.msc1767.text":"And in the second case, I need to annotate the object literal's method parameters in such a way that a related helper can read the annotations starting from the object itself"},"ts":1651708901842,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aStUbyMN5gEJw5DHlDxK2XzosvYQteQmjFeQWYyr2tY"},
{"content":{"body":"> <@mhofman:matrix.org> But you should still be able to add an initializer to the function/method definition, no? so it'd just be a runtime error to add an initializer to the rest param?\n\n`addInitializer` (normal and rest params) would be for adding initializers in general, while returning an initializer would be for piping through the passed argument (non rest params). So `addInitializer` would probably be what you would use in this case. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$lkaCBYHaa2Hhuu2aR5W2odps0GQV0goA-EtLTFR7mCs?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />But you should still be able to add an initializer to the function/method definition, no? so it'd just be a runtime error to add an initializer to the rest param?</blockquote></mx-reply><code>addInitializer</code> (normal and rest params) would be for adding initializers in general, while returning an initializer would be for piping through the passed argument (non rest params). So <code>addInitializer</code> would probably be what you would use in this case.","m.relates_to":{"m.in_reply_to":{"event_id":"$lkaCBYHaa2Hhuu2aR5W2odps0GQV0goA-EtLTFR7mCs"}},"msgtype":"m.text"},"ts":1651714430974,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$csBJLdEz-eTWAR-loBB89ThCEIpOWmhFMilI3bb8plU"},
{"content":{"body":"In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the <code>string</code> decorator above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"ts":1651714731551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao"},
{"content":{"body":"* In other words, you'd write the decorators above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","m.new_content":{"body":"In other words, you'd write the decorators above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the decorators above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1651714750564,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fbEz7UpycqlDzlPEDTgg2C29O7mxoI87qZSXN1Uc69o"},
{"content":{"body":"* In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","m.new_content":{"body":"In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the <code>string</code> decorator above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1651714792769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tOCEYwUQtq2NWkxxzefOQyMVQlB2kj8tbh8GjujeblM"}
]