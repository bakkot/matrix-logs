[
{"content":{"body":"So in the first case of runtime checks, I need the param decorator to be able to modify the function in such a way that param validation can run when the function is invoked (hopefully without requiring to decorate the function itself).","msgtype":"m.text","org.matrix.msc1767.text":"So in the first case of runtime checks, I need the param decorator to be able to modify the function in such a way that param validation can run when the function is invoked (hopefully without requiring to decorate the function itself)."},"ts":1651708900373,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3-O3bTDeRFdXQ45tSY9lwymGlId80EO2Bw9iAaw3G1A"},
{"content":{"body":"And in the second case, I need to annotate the object literal's method parameters in such a way that a related helper can read the annotations starting from the object itself","msgtype":"m.text","org.matrix.msc1767.text":"And in the second case, I need to annotate the object literal's method parameters in such a way that a related helper can read the annotations starting from the object itself"},"ts":1651708901842,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aStUbyMN5gEJw5DHlDxK2XzosvYQteQmjFeQWYyr2tY"},
{"content":{"body":"> <@mhofman:matrix.org> But you should still be able to add an initializer to the function/method definition, no? so it'd just be a runtime error to add an initializer to the rest param?\n\n`addInitializer` (normal and rest params) would be for adding initializers in general, while returning an initializer would be for piping through the passed argument (non rest params). So `addInitializer` would probably be what you would use in this case. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$lkaCBYHaa2Hhuu2aR5W2odps0GQV0goA-EtLTFR7mCs?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />But you should still be able to add an initializer to the function/method definition, no? so it'd just be a runtime error to add an initializer to the rest param?</blockquote></mx-reply><code>addInitializer</code> (normal and rest params) would be for adding initializers in general, while returning an initializer would be for piping through the passed argument (non rest params). So <code>addInitializer</code> would probably be what you would use in this case.","m.relates_to":{"m.in_reply_to":{"event_id":"$lkaCBYHaa2Hhuu2aR5W2odps0GQV0goA-EtLTFR7mCs"}},"msgtype":"m.text"},"ts":1651714430974,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$csBJLdEz-eTWAR-loBB89ThCEIpOWmhFMilI3bb8plU"},
{"content":{"body":"In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the <code>string</code> decorator above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"ts":1651714731551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao"},
{"content":{"body":"* In other words, you'd write the decorators above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","m.new_content":{"body":"In other words, you'd write the decorators above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the decorators above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1651714750564,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fbEz7UpycqlDzlPEDTgg2C29O7mxoI87qZSXN1Uc69o"},
{"content":{"body":"* In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","m.new_content":{"body":"In other words, you'd write the `string` decorator above like this:\n\n```js\nconst string = (_, { index, addInitializer }) => {\n  addInitializer((...args) => {\n    if (typeof args[index] !== \"string\") throw new TypeError();\n  });\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>In other words, you'd write the <code>string</code> decorator above like this:</p>\n<pre><code class=\"language-js\">const string = (_, { index, addInitializer }) =&gt; {\n  addInitializer((...args) =&gt; {\n    if (typeof args[index] !== &quot;string&quot;) throw new TypeError();\n  });\n};\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$XaWb1A4NVrsUAGlLZHJI8_tBuWjUypY8wkK15glXQao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1651714792769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tOCEYwUQtq2NWkxxzefOQyMVQlB2kj8tbh8GjujeblM"},
{"content":{"body":"Well and probably return the value if valid, right ?","msgtype":"m.text","org.matrix.msc1767.text":"Well and probably return the value if valid, right ?"},"ts":1651714889869,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uP-2xQLZAzUWdQDEU47mr-0Zw0ZtNqbaWPSRTF2S3w4"},
{"content":{"body":"oh I see this is an init on the method","msgtype":"m.text","org.matrix.msc1767.text":"oh I see this is an init on the method"},"ts":1651714917544,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kJnUsQv8ov7Kshm08eKrIC2lIP0qEoRZ5eA8Bj0baqA"},
{"content":{"body":"How would a validator that coerces work in this pattern?","msgtype":"m.text","org.matrix.msc1767.text":"How would a validator that coerces work in this pattern?"},"ts":1651714948787,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Tys-QRMeDJmLVl_SyDnIDXuf0aOD5nPz0Y7MwHPWwbk"},
{"content":{"body":"> <@mhofman:matrix.org> But also be able to add runtime metadata so that I can do things like:\n> ```\n> import { remotable, awaited } from 'rpc-lib';\n> \n> const foo = remotable({\n>   foo: (@awaited thing) => {\n>     if (myCollection.has(thing)) {\n>       ...\n>     } else {\n>       ...\n>     }\n>   }\n> });\n> ```\n> \n> Where the `remotable` helper (which could be written as an object literal decorator) would be able to get the annotations for the `foo` method on the object it received, and (to really simplify) build a new object with a new `foo` method that will implicitly await on the first argument.\n> \n\nNot sure where I stand on object literal decorators since theres `f({})` and `{} |> f(%)` ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$JY6xg6AsQ1Kg4mB3rRhErb5HW5IZil01MwhSoZSPqVw?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br /><p>But also be able to add runtime metadata so that I can do things like:</p>\n<pre><code>import { remotable, awaited } from 'rpc-lib';\n\nconst foo = remotable({\n  foo: (@awaited thing) =&gt; {\n    if (myCollection.has(thing)) {\n      ...\n    } else {\n      ...\n    }\n  }\n});\n</code></pre>\n<p>Where the <code>remotable</code> helper (which could be written as an object literal decorator) would be able to get the annotations for the <code>foo</code> method on the object it received, and (to really simplify) build a new object with a new <code>foo</code> method that will implicitly await on the first argument.</p>\n</blockquote></mx-reply>Not sure where I stand on object literal decorators since theres <code>f({})</code> and <code>{} |&gt; f(%)</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$JY6xg6AsQ1Kg4mB3rRhErb5HW5IZil01MwhSoZSPqVw"}},"msgtype":"m.text"},"ts":1651714968385,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tozqezCBuvhIwVXYJSgFnp4fWWxfPIrY1RFp1KqH_Uw"},
{"content":{"body":"If pipe was F#, we could have added a backpipe as well like `f <| { }`","format":"org.matrix.custom.html","formatted_body":"If pipe was F#, we could have added a backpipe as well like <code>f &lt;| { }</code>","msgtype":"m.text"},"ts":1651715022713,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H9DQK1uDaQZAhK-VCbBMT_bpU8HsU54GHQ_s14qxOgA"},
{"content":{"body":"> Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","mimetype":"text/html"}]},"ts":1651715023884,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$s4kh3OJUgSCktUpmqij3i4ixGs_REVtjk-EI8MLAG-c"},
{"content":{"body":" * > Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","m.new_content":{"body":"> Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$s4kh3OJUgSCktUpmqij3i4ixGs_REVtjk-EI8MLAG-c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Not sure where I stand on object literal decorators since theres f({}) and {} |> f(%)\n\nYup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Not sure where I stand on object literal decorators since theres f({}) and {} |&gt; f(%)</p>\n</blockquote>\n<p>Yup, that's why I excluded it. But I do want to make sure that one way or another I can get at the annotations</p>\n","mimetype":"text/html"}]},"ts":1651715033789,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$K4DFYbawxeF-a5gijRgDT_VgK3AdcY_eu312n1WoPbk"},
{"content":{"body":"Js-choi had thoughts about block decorators as a way to do comprehensions, similar to F#","msgtype":"m.text"},"ts":1651715101808,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A2kHEgwoc6bxn3nIvmakrlHg2JgTWrNen7VTQUhL04I"},
{"content":{"body":"* Js-choi had thoughts about block decorators as a way to do comprehensions, similar to F# computation expressions","m.new_content":{"body":"Js-choi had thoughts about block decorators as a way to do comprehensions, similar to F# computation expressions","msgtype":"m.text"},"m.relates_to":{"event_id":"$A2kHEgwoc6bxn3nIvmakrlHg2JgTWrNen7VTQUhL04I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1651715240848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k8Rj7EpQ6M_GLtQTrU8kWoHJu5jUi0VwzhJvissNlaA"},
{"content":{"body":"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions","msgtype":"m.text"},"ts":1651715259917,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GWd6oZyhCEGV8aB4PuZ8oWyrRl71FuTG05Lvanz36hk"},
{"content":{"body":"Something like\n```js\nconst q = @query do {\n  for (const x of ar) {\n    if (x > 1) yield x;\n  }\n};\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>Something like</p>\n<pre><code class=\"language-js\">const q = @query do {\n  for (const x of ar) {\n    if (x &gt; 1) yield x;\n  }\n};\n</code></pre>","msgtype":"m.text"},"ts":1651715505487,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Rh2DpPrBimHXO_NUmTsQ0V-Jup3DoNiLsbTPi22jBoQ"},
{"content":{"body":"Except F# computation expressions can add keywords. Not sure if I'd support that","msgtype":"m.text"},"ts":1651715552782,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1MY71h-5XG3jC6gkL7DlG6ATHRIhTa8ZM3eTU0Ds3GM"}
]