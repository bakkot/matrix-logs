[
{"content":{"body":"> <@rbuckton:matrix.org> Public metadata can be achieved with (1) by using a second decorator.\n> Private metadata can be achieved with (3) by storing an object in the public metadata that is only used as a WeakMap key.\n\ncan't public metadata be achieved with a single decorator also adding a static initializer?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$J3t-x6XWOn3Jl6UrRkPEe-QkmOXWTfQHyY_3iTlQot0?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Public metadata can be achieved with (1) by using a second decorator.<br/>Private metadata can be achieved with (3) by storing an object in the public metadata that is only used as a WeakMap key.</blockquote></mx-reply>can't public metadata be achieved with a single decorator also adding a static initializer?","m.relates_to":{"m.in_reply_to":{"event_id":"$J3t-x6XWOn3Jl6UrRkPEe-QkmOXWTfQHyY_3iTlQot0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Public metadata can be achieved with (1) by using a second decorator.\n> Private metadata can be achieved with (3) by storing an object in the public metadata that is only used as a WeakMap key.\n\ncan't public metadata be achieved with a single decorator also adding a static initializer?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$J3t-x6XWOn3Jl6UrRkPEe-QkmOXWTfQHyY_3iTlQot0?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Public metadata can be achieved with (1) by using a second decorator.<br/>Private metadata can be achieved with (3) by storing an object in the public metadata that is only used as a WeakMap key.</blockquote></mx-reply>can't public metadata be achieved with a single decorator also adding a static initializer?","mimetype":"text/html"}]},"ts":1652923230097,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CZsnbtSRUZx91BMJJfmPWIetawMMDQAShhXwLBTcuOc"},
{"content":{"body":"Which also raises the question of whether the opaque object from (1) actually needs to be installed on the class, or if that could be done by an explicit decorator.","msgtype":"m.text","org.matrix.msc1767.text":"Which also raises the question of whether the opaque object from (1) actually needs to be installed on the class, or if that could be done by an explicit decorator."},"ts":1652923281393,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zpYdAxPXJWnSoJWDdii1MXkFdUdIG2xXQsW96WFPPek"},
{"content":{"body":"> <@rbuckton:matrix.org> With #465 public and private metadata can still be achieved, but would depend on userland implementations (similar to `reflect-metadata`):\n>  \n> - Private Metadata: use `addInitializer(cb, \"class\")` to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the `this` binding and can store the constructor in a WeakMap.\n> \n> - Public Metadata: use `addInitializer(cb, \"class\")` to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the `this` binding can can store the metadata in a property on the constructor. Caveat: for performance reasons, the property should be declared on the class as well.\n\nThe limitation is for multiple decorators working together. We need a context object to key on, and the common class constructor is only available after the extra initializers have been all called","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$6vvYZ3hsSExWYbZpzlwvvGP-lo0x32__DviP29RLgdU?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>With #465 public and private metadata can still be achieved, but would depend on userland implementations (similar to <code>reflect-metadata</code>):</p>\n<ul>\n<li>\n<p>Private Metadata: use <code>addInitializer(cb, \"class\")</code> to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the <code>this</code> binding and can store the constructor in a WeakMap.</p>\n</li>\n<li>\n<p>Public Metadata: use <code>addInitializer(cb, \"class\")</code> to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the <code>this</code> binding can can store the metadata in a property on the constructor. Caveat: for performance reasons, the property should be declared on the class as well.</p>\n</li>\n</ul>\n</blockquote></mx-reply>The limitation is for multiple decorators working together. We need a context object to key on, and the common class constructor is only available after the extra initializers have been all called","m.relates_to":{"m.in_reply_to":{"event_id":"$6vvYZ3hsSExWYbZpzlwvvGP-lo0x32__DviP29RLgdU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> With #465 public and private metadata can still be achieved, but would depend on userland implementations (similar to `reflect-metadata`):\n>  \n> - Private Metadata: use `addInitializer(cb, \"class\")` to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the `this` binding and can store the constructor in a WeakMap.\n> \n> - Public Metadata: use `addInitializer(cb, \"class\")` to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the `this` binding can can store the metadata in a property on the constructor. Caveat: for performance reasons, the property should be declared on the class as well.\n\nThe limitation is for multiple decorators working together. We need a context object to key on, and the common class constructor is only available after the extra initializers have been all called","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!jiQJvracogtdUglzPZ:matrix.org/$6vvYZ3hsSExWYbZpzlwvvGP-lo0x32__DviP29RLgdU?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>With #465 public and private metadata can still be achieved, but would depend on userland implementations (similar to <code>reflect-metadata</code>):</p>\n<ul>\n<li>\n<p>Private Metadata: use <code>addInitializer(cb, \"class\")</code> to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the <code>this</code> binding and can store the constructor in a WeakMap.</p>\n</li>\n<li>\n<p>Public Metadata: use <code>addInitializer(cb, \"class\")</code> to add a class \"extra\" initializer regardless of decorator placement. The callback receives the constructor as the <code>this</code> binding can can store the metadata in a property on the constructor. Caveat: for performance reasons, the property should be declared on the class as well.</p>\n</li>\n</ul>\n</blockquote></mx-reply>The limitation is for multiple decorators working together. We need a context object to key on, and the common class constructor is only available after the extra initializers have been all called","mimetype":"text/html"}]},"ts":1652923487713,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mZ5xQaYq-XjhZFvoK99ZHmAYa7ottiD_2UJg81SzXpk"}
]