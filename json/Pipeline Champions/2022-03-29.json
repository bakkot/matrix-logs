[
{"content":{"body":"You have a few ‚Äúbind-this‚Äù in the ECOSYSTEM SCHISM‚ÄîFUTURE RISK section","msgtype":"m.text"},"ts":1648513934453,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uz6SdbxhyW1y99vRuQMQwsjW6V5BZFHI3LVsCJkitts"},
{"content":{"body":"Also a ‚Äúmigration to the latter from the latter‚Äù","msgtype":"m.text"},"ts":1648513973204,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$H47cFKsvtf73HeoSxT2A43MCMofFdjgiqw2aawU1KUU"},
{"content":{"body":"Justin Ridgewell: Thank you; fixed. :¬†)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Thank you; fixed. :¬†)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: Thank you; fixed. :¬†)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Thank you; fixed. :¬†)","mimetype":"text/html"}]},"ts":1648521920682,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$H1O-8Jh-VeSV0mfvF5EjAbzeo14bUeoJ3s5_Ho41a6I"},
{"content":{"body":"I‚Äôm presenting about pipe now.","msgtype":"m.text","org.matrix.msc1767.text":"I‚Äôm presenting about pipe now."},"ts":1648568702695,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vR8hzmvSn43sGZ7Z09Gl0qXH_VL6CKrP7YkNNuickzs"},
{"content":{"body":" * FYI: I‚Äôm presenting about pipe now.","m.new_content":{"body":"FYI: I‚Äôm presenting about pipe now.","msgtype":"m.text","org.matrix.msc1767.text":"FYI: I‚Äôm presenting about pipe now."},"m.relates_to":{"event_id":"$vR8hzmvSn43sGZ7Z09Gl0qXH_VL6CKrP7YkNNuickzs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * FYI: I‚Äôm presenting about pipe now."},"ts":1648568706032,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XtYyTNKvnNktwi3KA1zIIC7nXGBeEFrSE9wVrX2G03Q"},
{"content":{"body":"We agreed generally on single `@` for the topic reference.","format":"org.matrix.custom.html","formatted_body":"We agreed generally on single <code>@</code> for the topic reference.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We agreed generally on single `@` for the topic reference.","mimetype":"text/plain"},{"body":"We agreed generally on single <code>@</code> for the topic reference.","mimetype":"text/html"}]},"ts":1648569930615,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7eUbHAr1M69zRqmSgLakEo9wE3xt7fPMLL7pB3gxv8A"},
{"content":{"body":" * We agreed generally on single `@` for the topic reference.","format":"org.matrix.custom.html","formatted_body":" * We agreed generally on single <code>@</code> for the topic reference.","m.new_content":{"body":"We agreed generally on single `@` for the topic reference.","format":"org.matrix.custom.html","formatted_body":"We agreed generally on single <code>@</code> for the topic reference.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We agreed generally on single `@` for the topic reference.","mimetype":"text/plain"},{"body":"We agreed generally on single <code>@</code> for the topic reference.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$7eUbHAr1M69zRqmSgLakEo9wE3xt7fPMLL7pB3gxv8A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * We agreed generally on single `@` for the topic reference.","mimetype":"text/plain"},{"body":" * We agreed generally on single <code>@</code> for the topic reference.","mimetype":"text/html"}]},"ts":1648569935172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nuHeCSzm-1CuL3AhzrD8Rxf5FPJ1qx4Sq6Y9EvvBbWE"},
{"content":{"body":"üò≠","msgtype":"m.text","org.matrix.msc1767.text":"üò≠"},"ts":1648569976469,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$zt1ccToLSuTIFT-AFIl3ZlcTqE9lSTvscpqg7FB1jIs"},
{"content":{"body":"I'm actually quite positively surprised.","msgtype":"m.text","org.matrix.msc1767.text":"I'm actually quite positively surprised."},"ts":1648574596931,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$V0O31gWGkqRqIAJiJqZ8CWtg4BkNo6Viy5gKxoFjCHI"},
{"content":{"body":"I'm surprised by the decorator advancement so I'm also surprised by this in that context","msgtype":"m.text","org.matrix.msc1767.text":"I'm surprised by the decorator advancement so I'm also surprised by this in that context"},"ts":1648574648639,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Xwy892u6Dg8SoZJPh2RVxVNugiZbAU70RLSFCLV7NR4"},
{"content":{"body":"but hey, that means that no one should be overlooking anything :)","msgtype":"m.text","org.matrix.msc1767.text":"but hey, that means that no one should be overlooking anything :)"},"ts":1648574684372,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-deE-6tNcZa3rzJHYTvj9yNMyERT2dSy1DHAKbAFQEI"},
{"content":{"body":"Is `class C { @(decFun) m() {} }` allowed in decorators? It seems to be, based on Decorators Playground.","format":"org.matrix.custom.html","formatted_body":"Is <code>class C { @(decFun) m() {} }</code> allowed in decorators? It seems to be, based on Decorators Playground.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Is `class C { @(decFun) m() {} }` allowed in decorators? It seems to be, based on Decorators Playground.","mimetype":"text/plain"},{"body":"Is <code>class C { @(decFun) m() {} }</code> allowed in decorators? It seems to be, based on Decorators Playground.","mimetype":"text/html"}]},"ts":1648575628195,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$jU6s0nh-AyhYmdi1DFdcQBAvVe3BKS9rVNH46U7_odg"},
{"content":{"body":"i'd expect it to be; `@(<expr>)` should work for any expression","format":"org.matrix.custom.html","formatted_body":"i'd expect it to be; <code>@(&lt;expr&gt;)</code> should work for any expression","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i'd expect it to be; `@(<expr>)` should work for any expression","mimetype":"text/plain"},{"body":"i'd expect it to be; <code>@(&lt;expr&gt;)</code> should work for any expression","mimetype":"text/html"}]},"ts":1648575692374,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2gHVVCF0UXaKR_mb3bov_qQQMB_zg-gocmmyEXPfqvc"},
{"content":{"body":"`console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","format":"org.matrix.custom.html","formatted_body":"<code>console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/plain"},{"body":"<code>console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/html"}]},"ts":1648575877454,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$zZ-cuxwTS3maR27w_uvPfzmJ7UAj-entQXk6V6cLbqM"},
{"content":{"body":" * `const decoratedLogger = console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","format":"org.matrix.custom.html","formatted_body":" * <code>const decoratedLogger = console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","m.new_content":{"body":"`const decoratedLogger = console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","format":"org.matrix.custom.html","formatted_body":"<code>const decoratedLogger = console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`const decoratedLogger = console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/plain"},{"body":"<code>const decoratedLogger = console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$zZ-cuxwTS3maR27w_uvPfzmJ7UAj-entQXk6V6cLbqM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `const decoratedLogger = console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/plain"},{"body":" * <code>const decoratedLogger = console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.","mimetype":"text/html"}]},"ts":1648575968316,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$kevFOYR1Gt5VfXeuoUyfE11-0pBh2sUzeIl6AyXoJKk"},
{"content":{"body":"Well, we don't have to wait for free function decorators either. I think the same might happen with class decorators too.","msgtype":"m.text","org.matrix.msc1767.text":"Well, we don't have to wait for free function decorators either. I think the same might happen with class decorators too."},"ts":1648576067509,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$MuDU1FL1nrJVxYIZ8i_Y6pFBkD0bb0uAcnwgcvuyyVs"},
{"content":{"body":"> <@pokute:matrix.org> `const decoratedLogger = console.log |> @(decFun) function f(param) { @(param) }` will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.\n\nThis would be a syntax error. We would ban pipe bodies that are unparenthesized decorated expressions.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24zZ-cuxwTS3maR27w_uvPfzmJ7UAj-entQXk6V6cLbqM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br><code>const decoratedLogger = console.log |&gt; @(decFun) function f(param) { @(param) }</code> will be pretty difficult to parse, both for mind and matter. Fortunately it will probably be rare.</blockquote></mx-reply>This would be a syntax error. We would ban pipe bodies that are unparenthesized decorated expressions.","m.relates_to":{"m.in_reply_to":{"event_id":"$zZ-cuxwTS3maR27w_uvPfzmJ7UAj-entQXk6V6cLbqM"}},"msgtype":"m.text"},"ts":1648576639015,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SoKHnOEUPZSih7mizjzoSb5Righ31hYPnJDS6G4p_4Q"},
{"content":{"body":"We also should encourage developers to keep pipe bodies simple. Linters should probably ban class expressions and decorated functions in pipe bodies.","msgtype":"m.text"},"ts":1648576691241,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hPBv3fKZbzvKOd6-KyQnmX2pMskiyRJCsKQW0fStgSo"},
{"content":{"body":"i think most of that would be overstepping","msgtype":"m.text","org.matrix.msc1767.text":"i think most of that would be overstepping"},"ts":1648576884126,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QCSOfWZ11X4RsW2VGCsO1f1Z5eSjTpM8yDN66JsMxZE"},
{"content":{"body":"in general, anything that works outside a pipe body should work inside it, modulo a very few things that would otherwise be serious footguns","msgtype":"m.text","org.matrix.msc1767.text":"in general, anything that works outside a pipe body should work inside it, modulo a very few things that would otherwise be serious footguns"},"ts":1648576905283,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JywKWrRFzF10vsAkT_C3mVw9A22hMgnFNq_KtU3c6mQ"},
{"content":{"body":"Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah. ","format":"org.matrix.custom.html","formatted_body":"Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah.","msgtype":"m.text"},"ts":1648576934041,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xDMU5TQ9GKFTpFsYArDHm9sS63eMl1U-vBXBdzczyJQ"},
{"content":{"body":"* Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah. ","format":"org.matrix.custom.html","formatted_body":"* Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah.","m.new_content":{"body":"Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah. ","format":"org.matrix.custom.html","formatted_body":"Yeah, I‚Äôm talking about linting, which can afford to be more opinionated. Maybe that‚Äôs too restrictive though, yeah.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xDMU5TQ9GKFTpFsYArDHm9sS63eMl1U-vBXBdzczyJQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648576969009,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gN0HrXtvJ0XAlpiW_pPU1nF2DHmef64A71DGvuyZo0A"},
{"content":{"body":"in linting it's fine","msgtype":"m.text","org.matrix.msc1767.text":"in linting it's fine"},"ts":1648576969367,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NoHKdjSyqCXua7cXSAIAQXZAFuSynn7Q_vZksaTs9r8"},
{"content":{"body":"but we don't specify linters","msgtype":"m.text","org.matrix.msc1767.text":"but we don't specify linters"},"ts":1648576974058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ErmUfIUOaRnl7h0Nvr7o5mNc1qX8jAdyUEGQMBKKZms"},
{"content":{"body":"Yeah, here I‚Äôm talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important. ","format":"org.matrix.custom.html","formatted_body":"Yeah, here I‚Äôm talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important.","msgtype":"m.text"},"ts":1648577011468,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gexBtIpKrqhGF4s3EmtVKA4hbuUSY7pBqCWqbsH62Vs"},
{"content":{"body":"* Yeah, sorry, here I‚Äôm also talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important. ","format":"org.matrix.custom.html","formatted_body":"* Yeah, sorry, here I‚Äôm also talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important.","m.new_content":{"body":"Yeah, sorry, here I‚Äôm also talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important. ","format":"org.matrix.custom.html","formatted_body":"Yeah, sorry, here I‚Äôm also talking about developer education on how to use the operator, which isn‚Äôt part of the specification but is still important.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gexBtIpKrqhGF4s3EmtVKA4hbuUSY7pBqCWqbsH62Vs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648577453604,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eXl0aomA2E1FNm-FZJJEqgZg3iMfeyidBb31ekgN_ug"},
{"content":{"body":"right, i think i misread your earlier comments","msgtype":"m.text","org.matrix.msc1767.text":"right, i think i misread your earlier comments"},"ts":1648577464378,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QSuDDExhjFAswOU8iyTvP5Yc3gjQQJTevP-PsnBjGTs"},
{"content":{"body":"we're on the same page","msgtype":"m.text","org.matrix.msc1767.text":"we're on the same page"},"ts":1648577469012,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zigT5Z11Su0FVxYnlWZnuFZpuyH5Hq5P70kl24Pucik"},
{"content":{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","format":"org.matrix.custom.html","formatted_body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","mimetype":"text/plain"},{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","mimetype":"text/html"}]},"ts":1648578749424,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$xe0o9mwHCuevemt67donc-7HZ_G1y_o3YUiTpYRdIgc"},
{"content":{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}`. All except the first are still only possible extensions to decorators.","format":"org.matrix.custom.html","formatted_body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code>. All except the first are still only possible extensions to decorators.","m.new_content":{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}`. All except the first are still only possible extensions to decorators.","format":"org.matrix.custom.html","formatted_body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code>. All except the first are still only possible extensions to decorators.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}`. All except the first are still only possible extensions to decorators.","mimetype":"text/plain"},{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code>. All except the first are still only possible extensions to decorators.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xe0o9mwHCuevemt67donc-7HZ_G1y_o3YUiTpYRdIgc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}`. All except the first are still only possible extensions to decorators.","mimetype":"text/plain"},{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code>. All except the first are still only possible extensions to decorators.","mimetype":"text/html"}]},"ts":1648578759237,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$2zvE6NEjpMRsetJ5Fc-g-u94iv77oQX3dtr1YETakr0"},
{"content":{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","format":"org.matrix.custom.html","formatted_body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","m.new_content":{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","format":"org.matrix.custom.html","formatted_body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","mimetype":"text/plain"},{"body":"Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xe0o9mwHCuevemt67donc-7HZ_G1y_o3YUiTpYRdIgc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a \"crime\" against sensibility in code. From a machine parser perspective, I believe it does require lookahead for `class` / parameter / `function` / codeblock / `do {}` when encountering an `@(expr)`. All except the first are still only possible extensions to decorators.","mimetype":"text/plain"},{"body":" * Yeah, from fleshy reader perspective, that situation should be very rare / witnessing a &quot;crime&quot; against sensibility in code. From a machine parser perspective, I believe it does require lookahead for <code>class</code> / parameter / <code>function</code> / codeblock / <code>do {}</code> when encountering an <code>@(expr)</code>. All except the first are still only possible extensions to decorators.","mimetype":"text/html"}]},"ts":1648578857593,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$3LvBbTUMul2_o02qXc4IM3jAZC1_hp1hpheVXIt_UzI"},
{"content":{"body":"Which is still a ton better situation than `#` has. Most other token candidates have some kind of readability problems when thought about enough.","format":"org.matrix.custom.html","formatted_body":"Which is still a ton better situation than <code>#</code> has. Most other token candidates have some kind of readability problems when thought about enough.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Which is still a ton better situation than `#` has. Most other token candidates have some kind of readability problems when thought about enough.","mimetype":"text/plain"},{"body":"Which is still a ton better situation than <code>#</code> has. Most other token candidates have some kind of readability problems when thought about enough.","mimetype":"text/html"}]},"ts":1648578971292,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$eym7sGn-uD1PtwKsmurCVYDnojwXcaHNY5QFOPR6pRM"},
{"content":{"body":"Ah, I noticed the point in the slide about `|> @(@)`. So basically encountering a `|> (@(expr))` would require different parser behaviour.","format":"org.matrix.custom.html","formatted_body":"Ah, I noticed the point in the slide about <code>|&gt; @(@)</code>. So basically encountering a <code>|&gt; (@(expr))</code> would require different parser behaviour.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, I noticed the point in the slide about `|> @(@)`. So basically encountering a `|> (@(expr))` would require different parser behaviour.","mimetype":"text/plain"},{"body":"Ah, I noticed the point in the slide about <code>|&gt; @(@)</code>. So basically encountering a <code>|&gt; (@(expr))</code> would require different parser behaviour.","mimetype":"text/html"}]},"ts":1648580195206,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$5qaZdLx7CcPX-4DTx1ik94hvD7LNfpDOcOzPBary-XU"},
{"content":{"body":"> <@pokute:matrix.org> Ah, I noticed the point in the slide about `|> @(@)`. So basically encountering a `|> (@(expr))` would require different parser behaviour.\n\n`|> @(@)`, `|> (@(@))`, `|> @(expr)`, and `|> (@(expr))` will be all valid. However, `|> @(@) class {}` and `|> @(expr) class {}` will be early errors.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$5qaZdLx7CcPX-4DTx1ik94hvD7LNfpDOcOzPBary-XU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ah, I noticed the point in the slide about <code>|&gt; @(@)</code>. So basically encountering a <code>|&gt; (@(expr))</code> would require different parser behaviour.</blockquote></mx-reply><code>|&gt; @(@)</code>, <code>|&gt; (@(@))</code>, <code>|&gt; @(expr)</code>, and <code>|&gt; (@(expr))</code> will be all valid. However, <code>|&gt; @(@) class {}</code> and <code>|&gt; @(expr) class {}</code> will be early errors.","m.relates_to":{"m.in_reply_to":{"event_id":"$5qaZdLx7CcPX-4DTx1ik94hvD7LNfpDOcOzPBary-XU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pokute:matrix.org> Ah, I noticed the point in the slide about `|> @(@)`. So basically encountering a `|> (@(expr))` would require different parser behaviour.\n\n`|> @(@)`, `|> (@(@))`, `|> @(expr)`, and `|> (@(expr))` will be all valid. However, `|> @(@) class {}` and `|> @(expr) class {}` will be early errors.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$5qaZdLx7CcPX-4DTx1ik94hvD7LNfpDOcOzPBary-XU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ah, I noticed the point in the slide about <code>|&gt; @(@)</code>. So basically encountering a <code>|&gt; (@(expr))</code> would require different parser behaviour.</blockquote></mx-reply><code>|&gt; @(@)</code>, <code>|&gt; (@(@))</code>, <code>|&gt; @(expr)</code>, and <code>|&gt; (@(expr))</code> will be all valid. However, <code>|&gt; @(@) class {}</code> and <code>|&gt; @(expr) class {}</code> will be early errors.","mimetype":"text/html"}]},"ts":1648580361072,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dTw8fzIVxVAGS8048g-uoSlZR_jx_OlVctl3Gj_sT2g"},
{"content":{"body":"`|> (@(@) class {})` is valid.","format":"org.matrix.custom.html","formatted_body":"<code>|&gt; (@(@) class {})</code> is valid.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`|> (@(@) class {})` is valid.","mimetype":"text/plain"},{"body":"<code>|&gt; (@(@) class {})</code> is valid.","mimetype":"text/html"}]},"ts":1648580382704,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KFLYFZPcJkkQ29XxZ0B0HCtFYAX5C3CA-ytvELsOg-8"},
{"content":{"body":"`|> (@(expr) class {})` is an error (because no topic in the pipe body).","format":"org.matrix.custom.html","formatted_body":"<code>|&gt; (@(expr) class {})</code> is an error (because no topic in the pipe body).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`|> (@(expr) class {})` is an error (because no topic in the pipe body).","mimetype":"text/plain"},{"body":"<code>|&gt; (@(expr) class {})</code> is an error (because no topic in the pipe body).","mimetype":"text/html"}]},"ts":1648580394382,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dNlpHpYb6gGSyldz66ksJepkClbM4EAZb7O-vZhBr4U"},
{"content":{"body":"I meant requiring parser lookahead in the valid cases.","msgtype":"m.text","org.matrix.msc1767.text":"I meant requiring parser lookahead in the valid cases."},"ts":1648580426037,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$UWaA9j8B02qrvv744oUhz-NeB0d85lqyRjeO8UjKtEE"},
{"content":{"body":"Ah, yes, `@ (` will require lookahead until just after `)`.","format":"org.matrix.custom.html","formatted_body":"Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, yes, `@ (` will require lookahead until just after `)`.","mimetype":"text/plain"},{"body":"Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","mimetype":"text/html"}]},"ts":1648580486583,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1NX-QE8BGCNKAKK3bPXAoYTURnTnWW0DIyokzKso_Us"},
{"content":{"body":" * Ah, yes, `@ (` will require lookahead until just after `)`.","format":"org.matrix.custom.html","formatted_body":" * Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","m.new_content":{"body":"Ah, yes, `@ (` will require lookahead until just after `)`.","format":"org.matrix.custom.html","formatted_body":"Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, yes, `@ (` will require lookahead until just after `)`.","mimetype":"text/plain"},{"body":"Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$1NX-QE8BGCNKAKK3bPXAoYTURnTnWW0DIyokzKso_Us","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Ah, yes, `@ (` will require lookahead until just after `)`.","mimetype":"text/plain"},{"body":" * Ah, yes, <code>@ (</code> will require lookahead until just after <code>)</code>.","mimetype":"text/html"}]},"ts":1648580495591,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kFCmWGY2-24pGUNlBfFOuockV_sUyjT_cg7HM6PdlwU"},
{"content":{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/plain"},{"body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/html"}]},"ts":1648580534457,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dO4KwvePUoVUjHEdu-ACds42sjMw-2lqmuVCS6bnesk"},
{"content":{"body":"wouldn't that just be unbounded lookahead then?","msgtype":"m.text","org.matrix.msc1767.text":"wouldn't that just be unbounded lookahead then?"},"ts":1648580646032,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vXl7h79ygHALfbCOCDRPLtWjbV-UA_p0mIkJUr6dAvY"},
{"content":{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","m.new_content":{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/plain"},{"body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$dO4KwvePUoVUjHEdu-ACds42sjMw-2lqmuVCS6bnesk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/plain"},{"body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/html"}]},"ts":1648580655542,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VIYNtCu6JK5tWw-P14-ZbIuZpc-hHzff8UuTs1HQdKc"},
{"content":{"body":"because inside the parens could be an IIFE with a default argument that is itself an IIFE, etc","msgtype":"m.text","org.matrix.msc1767.text":"because inside the parens could be an IIFE with a default argument that is itself an IIFE, etc"},"ts":1648580656625,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PRmvfX_WjW2GNS5pjGqI32ntp3qCKps-hYwXTFypT5o"},
{"content":{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","m.new_content":{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/plain"},{"body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$dO4KwvePUoVUjHEdu-ACds42sjMw-2lqmuVCS6bnesk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/plain"},{"body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are just Stage¬†3 now.)","mimetype":"text/html"}]},"ts":1648580671486,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pOLUXqADaK7-Vnu6M9mwD7ne5vcltAVHtvREzXo4oV4"},
{"content":{"body":"It's unbounded lookahead but I don't think you need to re-parse the parentheses contents, so it's not much expensive","msgtype":"m.text"},"ts":1648580707645,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JlN2eyjvHDrCySk-bgWKMuJJMjHP8jqtbvFIp-iSLtY"},
{"content":{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","m.new_content":{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","format":"org.matrix.custom.html","formatted_body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","mimetype":"text/plain"},{"body":"(There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$dO4KwvePUoVUjHEdu-ACds42sjMw-2lqmuVCS6bnesk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (There is an open question on whether spaces after `@` will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","mimetype":"text/plain"},{"body":" * (There is an open question on whether spaces after <code>@</code> will be allowed in decorators: https://github.com/tc39/proposal-decorators/issues/430 ‚Ä¶I am not sure on what its status is because decorators are Stage¬†3 now.)","mimetype":"text/html"}]},"ts":1648580709701,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$f0dqXMdEyBguW6NcBBOEwcn2HzgEOuvlKnhKpwdTsrQ"},
{"content":{"body":"Yeah, it‚Äôs just switching between what to do with the expression that got already parsed inside `@( )`.","format":"org.matrix.custom.html","formatted_body":"Yeah, it‚Äôs just switching between what to do with the expression that got already parsed inside <code>@( )</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, it‚Äôs just switching between what to do with the expression that got already parsed inside `@( )`.","mimetype":"text/plain"},{"body":"Yeah, it‚Äôs just switching between what to do with the expression that got already parsed inside <code>@( )</code>.","mimetype":"text/html"}]},"ts":1648580738955,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YU0DJdd-LgEfglOGakPd8qUQsiO9VdEbTTXnYsPVO98"},
{"content":{"body":"It just changes from \"treat it like a decorator\" vs \"call the topic as a function and pass it as the argument\", right?","msgtype":"m.text","org.matrix.msc1767.text":"It just changes from \"treat it like a decorator\" vs \"call the topic as a function and pass it as the argument\", right?"},"ts":1648580782454,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$KOb-6Ashi6fCBf8fcmM__pjY7ZktADyHumNw4EIDONg"},
{"content":{"body":"Yes.","msgtype":"m.text","org.matrix.msc1767.text":"Yes."},"ts":1648580794719,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vU_Q-JmOcq4H2lUs0MZdBiledyhFXtzD6PZaX5m00gA"},
{"content":{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","format":"org.matrix.custom.html","formatted_body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","mimetype":"text/plain"},{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","mimetype":"text/html"}]},"ts":1648580822078,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ELAvHYYXYaK3_h8x1Dmb1ZB-3LqduaxbMUcUw9Q_UQo"},
{"content":{"body":" * No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","format":"org.matrix.custom.html","formatted_body":" * No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","m.new_content":{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","format":"org.matrix.custom.html","formatted_body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","mimetype":"text/plain"},{"body":"No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ELAvHYYXYaK3_h8x1Dmb1ZB-3LqduaxbMUcUw9Q_UQo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * No cover grammar needed either. It‚Äôs an ordinary expression inside the `@( )` either way.","mimetype":"text/plain"},{"body":" * No cover grammar needed either. It‚Äôs an ordinary expression inside the <code>@( )</code> either way.","mimetype":"text/html"}]},"ts":1648580840753,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_8-mqOC-Tmer5tm4DozVaz-13wphef3jhKnMO75wQhc"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648580853135,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wWuuFvraPOfzA290dECvQTPmU2zDf1_u2cNy310eWvI"},
{"content":{"body":"I didn't notice in the slides, but I guess the mentions of `@(@)` mean that `decFun |> @@ class () {}` is illegal?","format":"org.matrix.custom.html","formatted_body":"I didn't notice in the slides, but I guess the mentions of <code>@(@)</code> mean that <code>decFun |&gt; @@ class () {}</code> is illegal?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I didn't notice in the slides, but I guess the mentions of `@(@)` mean that `decFun |> @@ class () {}` is illegal?","mimetype":"text/plain"},{"body":"I didn't notice in the slides, but I guess the mentions of <code>@(@)</code> mean that <code>decFun |&gt; @@ class () {}</code> is illegal?","mimetype":"text/html"}]},"ts":1648580874307,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$VZkkjudSsT_QM-deI9DLswiwREEkO6hHf5iN6XLScmc"},
{"content":{"body":"Yes; `@@` is not a valid decorator.","format":"org.matrix.custom.html","formatted_body":"Yes; <code>@@</code> is not a valid decorator.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes; `@@` is not a valid decorator.","mimetype":"text/plain"},{"body":"Yes; <code>@@</code> is not a valid decorator.","mimetype":"text/html"}]},"ts":1648580892629,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kpZrVxIE6MIKD52Aq4gvba6Lc77Q4XQ3ECMQ6uRgqi8"},
{"content":{"body":"did you mean to put some parens in there?","msgtype":"m.text","org.matrix.msc1767.text":"did you mean to put some parens in there?"},"ts":1648580894251,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HH0cD0ucxe4BS4btO-I6la7cYK4DoyzBbb2BDneaVkU"},
{"content":{"body":"`decFun |> @(@) class {}` is also illegal; `decFun |> (@(@) class {})` is legal.","format":"org.matrix.custom.html","formatted_body":"<code>decFun |&gt; @(@) class {}</code> is also illegal; <code>decFun |&gt; (@(@) class {})</code> is legal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`decFun |> @(@) class {}` is also illegal; `decFun |> (@(@) class {})` is legal.","mimetype":"text/plain"},{"body":"<code>decFun |&gt; @(@) class {}</code> is also illegal; <code>decFun |&gt; (@(@) class {})</code> is legal.","mimetype":"text/html"}]},"ts":1648580927342,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$juLUywHCnvly8DFu3YdR6sVfTtosH47n-uNQysQczxk"},
{"content":{"body":"ah yeah, @ isn't an ident so it's not valid after an @ to name a decorator, same as `{@: 1}` is invalid even if the topic is a string","format":"org.matrix.custom.html","formatted_body":"ah yeah, @ isn't an ident so it's not valid after an @ to name a decorator, same as <code>{@: 1}</code> is invalid even if the topic is a string","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ah yeah, @ isn't an ident so it's not valid after an @ to name a decorator, same as `{@: 1}` is invalid even if the topic is a string","mimetype":"text/plain"},{"body":"ah yeah, @ isn't an ident so it's not valid after an @ to name a decorator, same as <code>{@: 1}</code> is invalid even if the topic is a string","mimetype":"text/html"}]},"ts":1648580936384,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OrhVgJZ-l_YvwGHDc3_0RQucKWps3qfkd6LBBaspBX4"},
{"content":{"body":"jschoi: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?","mimetype":"text/html"}]},"ts":1648581002248,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$T-AVfIZGfLUgCgeoW779aqe6k5QNSfQKCEEmZX3plsI"},
{"content":{"body":"> <@tabatkins:matrix.org> jschoi: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?\n\nIt‚Äôs that new early error we talked about a few days ago banning pipe bodies that are unparenthesized decorated classes/functions.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$T-AVfIZGfLUgCgeoW779aqe6k5QNSfQKCEEmZX3plsI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?</blockquote></mx-reply>It‚Äôs that new early error we talked about a few days ago banning pipe bodies that are unparenthesized decorated classes/functions.","m.relates_to":{"m.in_reply_to":{"event_id":"$T-AVfIZGfLUgCgeoW779aqe6k5QNSfQKCEEmZX3plsI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> jschoi: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?\n\nIt‚Äôs that new early error we talked about a few days ago banning pipe bodies that are unparenthesized decorated classes/functions.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$T-AVfIZGfLUgCgeoW779aqe6k5QNSfQKCEEmZX3plsI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: is that first code sample illegal by fiat, or is it falling out of some rule in a way i'm not seeing?</blockquote></mx-reply>It‚Äôs that new early error we talked about a few days ago banning pipe bodies that are unparenthesized decorated classes/functions.","mimetype":"text/html"}]},"ts":1648581031641,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mhShVe0eKKEQiy86vOyFPoNSdcOBDzSNimonGqzh650"},
{"content":{"body":"Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":"<p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648581041276,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HME8IF7JYPB_HgTgAD0c4SavyBlQJZuomHY2hItxo1w"},
{"content":{"body":"okay, so fiat. kk","msgtype":"m.text","org.matrix.msc1767.text":"okay, so fiat. kk"},"ts":1648581041745,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jhsXwy6Z8S64Bjk6QQT1lIH8Cgv91Uprz5apyc-d5Oc"},
{"content":{"body":" * Otherwise this would be valid:\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Otherwise this would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","m.new_content":{"body":"Otherwise this would be valid:\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Otherwise this would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Otherwise this would be valid:\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":"<p>Otherwise this would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HME8IF7JYPB_HgTgAD0c4SavyBlQJZuomHY2hItxo1w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Otherwise this would be valid:\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":" * <p>Otherwise this would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648581059238,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4OwHyl8X6APpFB07aoTN8VUGpEteqTGE5Yg5wtL8Y1U"},
{"content":{"body":" * Otherwise this confusing code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Otherwise this confusing code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","m.new_content":{"body":"Otherwise this confusing code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Otherwise this confusing code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Otherwise this confusing code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":"<p>Otherwise this confusing code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HME8IF7JYPB_HgTgAD0c4SavyBlQJZuomHY2hItxo1w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Otherwise this confusing code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":" * <p>Otherwise this confusing code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648581064392,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TJNzQmDyAcTd6BfTpLjXakUecqUwpAuZD_M_2HakhAQ"},
{"content":{"body":" * Otherwise this confusing code no-semicolon would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Otherwise this confusing code no-semicolon would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","m.new_content":{"body":"Otherwise this confusing code no-semicolon would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Otherwise this confusing code no-semicolon would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Otherwise this confusing code no-semicolon would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":"<p>Otherwise this confusing code no-semicolon would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HME8IF7JYPB_HgTgAD0c4SavyBlQJZuomHY2hItxo1w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Otherwise this confusing code no-semicolon would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":" * <p>Otherwise this confusing code no-semicolon would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648581073417,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rKgAxWSyxC4PLwwshQNDmVp66S3MG-ZPqGWQ8P-o7Nk"},
{"content":{"body":" * Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","m.new_content":{"body":"Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":"<p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HME8IF7JYPB_HgTgAD0c4SavyBlQJZuomHY2hItxo1w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Otherwise this confusing no-semicolon code would be valid:\n\n```js\nx |> @(@)\nclass C {}\n```","mimetype":"text/plain"},{"body":" * <p>Otherwise this confusing no-semicolon code would be valid:</p>\n<pre><code class=\"language-js\">x |&gt; @(@)\nclass C {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648581079282,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HH2v3ygfLpxSBVvflieiXC9o_ftIv4k5OdMh2O136gQ"},
{"content":{"body":"If the other co-champions are fine with it, I plan to update the explainer and specification to use `@` sometime in the next month.","format":"org.matrix.custom.html","formatted_body":"If the other co-champions are fine with it, I plan to update the explainer and specification to use <code>@</code> sometime in the next month.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If the other co-champions are fine with it, I plan to update the explainer and specification to use `@` sometime in the next month.","mimetype":"text/plain"},{"body":"If the other co-champions are fine with it, I plan to update the explainer and specification to use <code>@</code> sometime in the next month.","mimetype":"text/html"}]},"ts":1648581505634,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4mRsMv2I4eTqA09beAYHxJANr0ip9Ws7ilGgbywe3RI"},
{"content":{"body":"Well, I like this token. It's single character and it seems like the only apparent complicated case has both well defined rules for how to avoid ambiguousness and apparent ability to give good error messages on rule breaking that help comply with the rules.","msgtype":"m.text","org.matrix.msc1767.text":"Well, I like this token. It's single character and it seems like the only apparent complicated case has both well defined rules for how to avoid ambiguousness and apparent ability to give good error messages on rule breaking that help comply with the rules."},"ts":1648581548575,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$p4idqYi93YUmFKQsD6F0_EwE2SzeskDob-E0BntfDzc"},
{"content":{"body":"yeah, @ is a nice chunky token that has similar aesthetics to # for me personally, so I'm satisfied with the resolution.","msgtype":"m.text","org.matrix.msc1767.text":"yeah, @ is a nice chunky token that has similar aesthetics to # for me personally, so I'm satisfied with the resolution."},"ts":1648581620987,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6H5Aeqz0VEL-RG-h3JVU9X27zfF2cHpO844mAYcKhmo"},
{"content":{"body":"(Sorry, btw, that I couldn't attend this morning, but I've been editting notes from your topics as penance.)","msgtype":"m.text","org.matrix.msc1767.text":"(Sorry, btw, that I couldn't attend this morning, but I've been editting notes from your topics as penance.)"},"ts":1648581637681,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$n2kCUTjZRZt2KRr-p35NeqLBgttznH0yxxBjtpziJ3w"}
]