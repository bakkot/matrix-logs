[
{"content":{"body":"I don't think I'd have said they were different? I could be wrong, but if so, past me was incorrect. ^_^ The concerns are identical.","msgtype":"m.text"},"ts":1641600084309,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$t1liuPH6QRYSzMJWt64ZqMBaPd63SSXqqLUEFzdgEM4"},
{"content":{"body":"(See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"ts":1641600098843,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg"},
{"content":{"body":"* (See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","m.new_content":{"body":"(See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641600106642,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vFG5DiiI5BBIMGxfkr1VIseLTUAoPF0leV7syCRrQ5w"},
{"content":{"body":"> WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these aren’t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these aren’t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600161363,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZhxKMLs1bQhpyY_auGYowmmvNEzXTn29JDikW2DWvtI"},
{"content":{"body":"> WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600213648,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pTZrjNToJRLvqJ7i4pNu-CmnqSzU35BLxUhx6fgnb1w"},
{"content":{"body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","msgtype":"m.text"},"ts":1641600242719,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KiKEmTWXl_r7JzfHhJp1miZaOx0gGE-DQcNbhz8u5OU"}
]