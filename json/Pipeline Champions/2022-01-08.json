[
{"content":{"body":"I don't think I'd have said they were different? I could be wrong, but if so, past me was incorrect. ^_^ The concerns are identical.","msgtype":"m.text"},"ts":1641600084309,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$t1liuPH6QRYSzMJWt64ZqMBaPd63SSXqqLUEFzdgEM4"},
{"content":{"body":"(See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"ts":1641600098843,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg"},
{"content":{"body":"* (See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","m.new_content":{"body":"(See also WH’s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641600106642,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vFG5DiiI5BBIMGxfkr1VIseLTUAoPF0leV7syCRrQ5w"},
{"content":{"body":"> WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these aren’t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these aren’t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600161363,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZhxKMLs1bQhpyY_auGYowmmvNEzXTn29JDikW2DWvtI"},
{"content":{"body":"> WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600213648,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pTZrjNToJRLvqJ7i4pNu-CmnqSzU35BLxUhx6fgnb1w"},
{"content":{"body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","msgtype":"m.text"},"ts":1641600242719,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KiKEmTWXl_r7JzfHhJp1miZaOx0gGE-DQcNbhz8u5OU"},
{"content":{"body":"I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk. ","format":"org.matrix.custom.html","formatted_body":"I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.","msgtype":"m.text"},"ts":1641600326879,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA"},
{"content":{"body":"The namespace per se isn't necessary to Waldemar's complaint, it's the calling convention that bothers him.","msgtype":"m.text"},"ts":1641600352353,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DIHkyGIclO0cwVFd89T4RH1_fftujou7GYXafdB8Y2A"},
{"content":{"body":"* Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"* Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","m.new_content":{"body":"Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","msgtype":"m.text"},"m.relates_to":{"event_id":"$KiKEmTWXl_r7JzfHhJp1miZaOx0gGE-DQcNbhz8u5OU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641600354430,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ySS9X5J5_5b-_AU817rm3lng3IPa54ItrSQW6tj1D00"},
{"content":{"body":"> <@jschoi:matrix.org> I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.\n\nI mean, Justin's comments in this very room imply that there will be demand for authoring in that library style ^_^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.</blockquote></mx-reply>I mean, Justin's comments in this very room imply that there will be demand for authoring in that library style ^_^","m.relates_to":{"m.in_reply_to":{"event_id":"$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA"}},"msgtype":"m.text"},"ts":1641600392703,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tUO105gaSCyEmX1ylFnvWLhO4cRcjlqPW-4fwTQzOKA"},
{"content":{"body":"And the fact that `foo::bar(baz)` *is* slightly shorter than `foo|>bar(##, baz)` inclines me to believe him that it'll be at least somewhat common.","format":"org.matrix.custom.html","formatted_body":"And the fact that <code>foo::bar(baz)</code> <em>is</em> slightly shorter than <code>foo|&gt;bar(##, baz)</code> inclines me to believe him that it'll be at least somewhat common.","msgtype":"m.text"},"ts":1641600466774,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lMuMBshNhZ6t4OvJlHEmsyy3jz7LBXaa08XOLtQsi6Q"},
{"content":{"body":"I could have sworn, Tab, that, when I had raised this a few months ago in this room, you were less concerned about this ecosystem risk—but I could be remembering wrongly, haha. \nI would try searching the logs, but Bakkot’s fancy log search is giving me an error. 🥲","msgtype":"m.text"},"ts":1641600711603,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xUVgKGYB6QaXQ74x6pjYLt8OQ4MnIdTgetzEA2xOZXE"},
{"content":{"body":"…Anyways, regardless of whether people should publish libraries based on disembodied `this`-based functions or not, people are already using them with `.call` internally a lot for various reasons (such as conditionally switching between two methods or using `this` as a context object). My argument has been that we should discourage people publishing public libraries based on this style, but it’s already happening in internal APIs, and it is very common. It’s not just Array.prototype or Object.prototype methods in the dataset.","format":"org.matrix.custom.html","formatted_body":"…Anyways, regardless of whether people should publish libraries based on disembodied <code>this</code>-based functions or not, people are already using them with <code>.call</code> internally a lot for various reasons (such as conditionally switching between two methods or using <code>this</code> as a context object). My argument has been that we should discourage people publishing public libraries based on this style, but it’s already happening in internal APIs, and it is very common. It’s not just Array.prototype or Object.prototype methods in the dataset.","msgtype":"m.text"},"ts":1641600870680,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Tf1bTivEB_53slg40usLp4oRKb5IKe6ufqXSBcZLzkw"},
{"content":{"body":"That is: although this style should not be in public APIs, it is already happening and it is very frequent in private codebases (see the Gzemnid dataset), and it is yet another reason why .call’s brevity/clunkiness should be optimized with syntax.","msgtype":"m.text"},"ts":1641600968578,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4qm-F2E22sQSP-_eVzqJQ_1e2338awgFcOUJzDIM9qo"},
{"content":{"body":"Call-on would solve it too, and I am fine with that as a compromise, but I don’t think bind-this would bring significant ecosystem schism either.\n","msgtype":"m.text"},"ts":1641601175904,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CsalPCBw2uJ9XBccXJlPW5tOGZGIBaCzSZ_Olev5AOk"},
{"content":{"body":"\n\nAnd I also think bind-this’s redundancy with the pipe operator is small (just like how Function.pipe’s redundancy with the pipe operator is small). I’m not too concerned when the same problem is addressed by two proposals…I am more concerned where the same problem is addressed by *three* proposals (such as where pipe operator, bind-this, and PFA syntax all overlap in my diagram).","format":"org.matrix.custom.html","formatted_body":"And I also think bind-this’s redundancy with the pipe operator is small (just like how Function.pipe’s redundancy with the pipe operator is small). I’m not too concerned when the same problem is addressed by two proposals…I am more concerned where the same problem is addressed by <em>three</em> proposals (such as where pipe operator, bind-this, and PFA syntax all overlap in my diagram).","msgtype":"m.text"},"ts":1641601176274,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RNU6fVspEJNShPwTMvIpAyR3xuCkrUxrSTTemw1duXk"},
{"content":{"body":"Private codebases can do whatever bizarre stuff they want; I've written my share of heavily-functional private JS, after all. It's still virtually unheard of to actually publish a library expecting its functions to be called with `.call()`.","format":"org.matrix.custom.html","formatted_body":"Private codebases can do whatever bizarre stuff they want; I've written my share of heavily-functional private JS, after all. It's still virtually unheard of to actually publish a library expecting its functions to be called with <code>.call()</code>.","msgtype":"m.text"},"ts":1641601312068,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6PLpi2B7JnhwXSC-XF_E66BeqbgAGJOlvr_mkMfYBSc"},
{"content":{"body":"Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":"Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","msgtype":"m.text"},"ts":1641601392147,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$43Ndb1xUC5jmJFaeCl7vQ0ce4TZgVVbqS2U_UmSIcaI"},
{"content":{"body":" * Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":" * Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","m.new_content":{"body":"Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":"Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","msgtype":"m.text"},"m.relates_to":{"event_id":"$43Ndb1xUC5jmJFaeCl7vQ0ce4TZgVVbqS2U_UmSIcaI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641601410885,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aHNGEwNRPmMfqb_pvTLuXV7HmWwaFCJ7LjESm3X_o84"},
{"content":{"body":"Actually, I take it back: I think there *are* some public APIs that involve the user supplying a custom `this` value in the dataset. Whether this should be encouraged is another question…but, anyways, there are many extant use cases of `.call` in the dataset, which sum up to a big number.","format":"org.matrix.custom.html","formatted_body":"Actually, I take it back: I think there <em>are</em> some public APIs that involve the user supplying a custom <code>this</code> value in the dataset. Whether this should be encouraged is another question…but, anyways, there are many extant use cases of <code>.call</code> in the dataset, which sum up to a big number.","msgtype":"m.text"},"ts":1641601574793,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JylfTq2-u-yWhEJByw2PxIu6LDSvSqWwwdXWr-rRUgc"},
{"content":{"body":"Thus me being happy to address it. ^_^","msgtype":"m.text"},"ts":1641601596018,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$l1bWccuU9etZAUqf34Va1yCTfjWZkW0m6GGLQSZNl4Q"},
{"content":{"body":"Haha, yes. \nAnyways, I think the TIMTOWDI issue is the bigger fundamental question.","msgtype":"m.text"},"ts":1641601629011,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tmMA5Xyq5LWtoeXMNqgfJPrxLuiKvmmRqyebUDlh5oo"},
{"content":{"body":"Total TOOWTDI is unavoidable, no matter how much you want to reach Python zen, but how much of it is acceptable…? We will need to ask plenary, because it bumps against the fundamental approach to TC39 proposals and judgement on proposals’ own merits.","msgtype":"m.text"},"ts":1641601724015,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$y_ASwfShD0mIqKWmWPFhB9M9G0iuCQPLrUUbvZPkJO8"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1641601731696,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uGuQjwU6BtNX0TY2y1sEPmTR5KecTXntxOX1hK9SBiQ"},
{"content":{"body":"also i'm shifting call-this to `@()` because after some thought I think it looks really good","format":"org.matrix.custom.html","formatted_body":"also i'm shifting call-this to <code>@()</code> because after some thought I think it looks really good","msgtype":"m.text"},"ts":1641601750363,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DmRWpt5UzzkYj4Fx3Iye47BClZ4hYSjHQ5swlUDZt2s"},
{"content":{"body":"`slice@(arrLike, 1)`. “Slice at this `arrLike`.”","format":"org.matrix.custom.html","formatted_body":"<code>slice@(arrLike, 1)</code>. “Slice at this <code>arrLike</code>.”","msgtype":"m.text"},"ts":1641601805635,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Nm6R-8G_CA0v6NmZ-kyNXN4DjL4vQbH5OequEEfXzz8"},
{"content":{"body":"`arrLike |> slice@(#, 1)`. “The `arrLike`, slice at it.”","format":"org.matrix.custom.html","formatted_body":"<code>arrLike |&gt; slice@(#, 1)</code>. “The <code>arrLike</code>, slice at it.”","msgtype":"m.text"},"ts":1641601851788,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4y3AOIEP_PmxBJOHC_7wdf5jb4kRBGnY0xcdwsqYp5U"},
{"content":{"body":" * Some TIMTOWDI is unavoidable, and total TOOWTDI is impossible, no matter how much you want to reach Python zen, but how much TIMTOWDI is acceptable…? We will need to ask plenary, because it bumps against the fundamental approach to TC39 proposals and judgement on proposals’ own merits.","m.new_content":{"body":"Some TIMTOWDI is unavoidable, and total TOOWTDI is impossible, no matter how much you want to reach Python zen, but how much TIMTOWDI is acceptable…? We will need to ask plenary, because it bumps against the fundamental approach to TC39 proposals and judgement on proposals’ own merits.","msgtype":"m.text"},"m.relates_to":{"event_id":"$y_ASwfShD0mIqKWmWPFhB9M9G0iuCQPLrUUbvZPkJO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641601921008,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3C8YcGIn24sRaxXJ4fSsr-m4mQ8v4u67KKOVw3H2oKQ"},
{"content":{"body":"`arrLike::slice(1)`. “`arrLike`’s slice.”\nTo me, these are all fine and better than the `.call`-based status quo…","format":"org.matrix.custom.html","formatted_body":"<code>arrLike::slice(1)</code>. “<code>arrLike</code>’s slice.”<br>To me, these are all fine and better than the <code>.call</code>-based status quo…","msgtype":"m.text"},"ts":1641602055500,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PlI3Ok-_Yz0xaSAS5j_x_cEK5LfLxo79f1fyZD6MbW4"},
{"content":{"body":" * `arrLike::slice(1)`. “`arrLike`’s slice.”\nTo me, these are all fine and better than the `.call`-based status quo…","format":"org.matrix.custom.html","formatted_body":" * <code>arrLike::slice(1)</code>. “<code>arrLike</code>’s slice.”<br>To me, these are all fine and better than the <code>.call</code>-based status quo…","m.new_content":{"body":"`arrLike::slice(1)`. “`arrLike`’s slice.”\nTo me, these are all fine and better than the `.call`-based status quo…","format":"org.matrix.custom.html","formatted_body":"<code>arrLike::slice(1)</code>. “<code>arrLike</code>’s slice.”<br>To me, these are all fine and better than the <code>.call</code>-based status quo…","msgtype":"m.text"},"m.relates_to":{"event_id":"$PlI3Ok-_Yz0xaSAS5j_x_cEK5LfLxo79f1fyZD6MbW4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602067284,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WU_P81-yVLn6Q5PGpfUhfaZYKOUjLkjVaO9cDQs8sy4"},
{"content":{"body":" * Some TIMTOWDI is unavoidable, and total TOOWTDI is impossible, no matter how much you want to reach Python zen, but how much TIMTOWDI is acceptable…? We will need to ask plenary, because the question bumps against TC39’s fundamental approach to its proposals and how it judges them on their own merits.","m.new_content":{"body":"Some TIMTOWDI is unavoidable, and total TOOWTDI is impossible, no matter how much you want to reach Python zen, but how much TIMTOWDI is acceptable…? We will need to ask plenary, because the question bumps against TC39’s fundamental approach to its proposals and how it judges them on their own merits.","msgtype":"m.text"},"m.relates_to":{"event_id":"$y_ASwfShD0mIqKWmWPFhB9M9G0iuCQPLrUUbvZPkJO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602145487,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1X5VZ-vDbkySjgTBg4cRjPtmjokM4_znH1TCYsAnO9E"},
{"content":{"body":"(I think the ecosystem-schism concern applies to `slice@(arrLike, 1)` as much as it does to `arrLike::slice(1)`. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","format":"org.matrix.custom.html","formatted_body":"(I think the ecosystem-schism concern applies to <code>slice@(arrLike, 1)</code> as much as it does to <code>arrLike::slice(1)</code>. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","msgtype":"m.text"},"ts":1641602251271,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QU7bAjrzRQpmwQ-3Jzp16-57qVfSA5tip7Nx-bKGNc8"},
{"content":{"body":" * (I think the ecosystem-schism concern applies to `slice@(arrLike, 1)` as much as it does to `arrLike::slice(1)`. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","format":"org.matrix.custom.html","formatted_body":" * (I think the ecosystem-schism concern applies to <code>slice@(arrLike, 1)</code> as much as it does to <code>arrLike::slice(1)</code>. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","m.new_content":{"body":"(I think the ecosystem-schism concern applies to `slice@(arrLike, 1)` as much as it does to `arrLike::slice(1)`. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","format":"org.matrix.custom.html","formatted_body":"(I think the ecosystem-schism concern applies to <code>slice@(arrLike, 1)</code> as much as it does to <code>arrLike::slice(1)</code>. And I don’t think the ecosystem-schism risk is very large for either proposal. The big issue is TIMTOWDI vs. avoiding proposal redundancy.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$QU7bAjrzRQpmwQ-3Jzp16-57qVfSA5tip7Nx-bKGNc8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602342981,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$D6YrlqsN7D0ofdOFIRe0jJmcT1uS5iBPEmPREeE_OTw"},
{"content":{"body":"I strongly disagree that that `slice@(r, 1)` promotes ecosystem schisming. Writing a library in this fashion means your user's code is *identical* to if you'd just written a normal function, except slightly longer. There's literally no benefit.","format":"org.matrix.custom.html","formatted_body":"I strongly disagree that that <code>slice@(r, 1)</code> promotes ecosystem schisming. Writing a library in this fashion means your user's code is <em>identical</em> to if you'd just written a normal function, except slightly longer. There's literally no benefit.","msgtype":"m.text"},"ts":1641602502236,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_iHd2FiHS2p05GDeNHgV4oVVu2AGSwxaYfh7P69BVtQ"},
{"content":{"body":"What I mean is that it might encourage publishing a library that exports a `slice` function that relies on `this`, and which therefore relies on `.call` or `@()`.","format":"org.matrix.custom.html","formatted_body":"What I mean is that it might encourage publishing a library that exports a <code>slice</code> function that relies on <code>this</code>, and which therefore relies on <code>.call</code> or <code>@()</code>.","msgtype":"m.text"},"ts":1641602562387,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FtQRP63PVaHPGgk0b0kcz2u5pV0ZnMig9jvegLF0lac"},
{"content":{"body":"I myself do not think this risk is very large, but it may be similar to that encouraged by bind-this.","msgtype":"m.text"},"ts":1641602574532,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XuUNpFT9ahtGJvcBvfsb60bmbrNqz0OILe9z9PXTrwU"},
{"content":{"body":" * I myself do not think this risk is very large.","m.new_content":{"body":"I myself do not think this risk is very large.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XuUNpFT9ahtGJvcBvfsb60bmbrNqz0OILe9z9PXTrwU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602582474,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CAGJLIujrr2fcKWkSLif6G-j3VaaUZ0iP9zDiAdH6xI"},
{"content":{"body":"Right, I'm saying it *doesnt'* encourage that, because there is *literally no benefit to doing so*, only a (very small) downside.","format":"org.matrix.custom.html","formatted_body":"Right, I'm saying it <em>doesnt'</em> encourage that, because there is <em>literally no benefit to doing so</em>, only a (very small) downside.","msgtype":"m.text"},"ts":1641602595465,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_IJcUdwdkLXwqdvp1fhYUgEZyzeaQd9p6ZRWq1_JUe4"},
{"content":{"body":" * I myself do not think this risk is very large, but it may be similar to that encouraged by bind-this.","m.new_content":{"body":"I myself do not think this risk is very large, but it may be similar to that encouraged by bind-this.","msgtype":"m.text"},"m.relates_to":{"event_id":"$XuUNpFT9ahtGJvcBvfsb60bmbrNqz0OILe9z9PXTrwU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602600808,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bQNbhwKF8YYUb7UkGakDEfq-Mx_4KncRMz2521_QVQU"},
{"content":{"body":"Oh, you mean because it has no improvement in word order / fluency…without the pipe operator. ","msgtype":"m.text"},"ts":1641602608997,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UzEglUYTyCKUwnoam8qIsDRmp_PAW7xOU2J4cCtIX9M"},
{"content":{"body":"Versus bind-this, which actually does have an upside to doing so - `foo::bar()` is shorter than `foo |> bar(#)`","format":"org.matrix.custom.html","formatted_body":"Versus bind-this, which actually does have an upside to doing so - <code>foo::bar()</code> is shorter than <code>foo |&gt; bar(#)</code>","msgtype":"m.text"},"ts":1641602613055,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$u0W-4gj70ideAH6XG5fRSAkMeikj8YSMf6z1foReWIo"},
{"content":{"body":" * Oh, you mean because it has no added word-order improvement / fluency. ","m.new_content":{"body":"Oh, you mean because it has no added word-order improvement / fluency. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$UzEglUYTyCKUwnoam8qIsDRmp_PAW7xOU2J4cCtIX9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602614100,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6vcu7tEa85dKybARox2-mTbquVaxM4RGRrbaHb4-y-0"},
{"content":{"body":" * Oh, you mean because it has no added word-order improvement / fluency…without pipeline. ","m.new_content":{"body":"Oh, you mean because it has no added word-order improvement / fluency…without pipeline. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$UzEglUYTyCKUwnoam8qIsDRmp_PAW7xOU2J4cCtIX9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602619650,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hseLRD_miOJIeYhDcrlKioZ33uFfFeSfLXbL_4EbmUg"},
{"content":{"body":" * Oh, you mean because it has no improvement in word order / fluency…without the pipe operator. ","m.new_content":{"body":"Oh, you mean because it has no improvement in word order / fluency…without the pipe operator. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$UzEglUYTyCKUwnoam8qIsDRmp_PAW7xOU2J4cCtIX9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602635422,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uGQ27xY3S2Q5epGK_rFQeEzEyc5XVOF6DD-Y9vdCerw"},
{"content":{"body":"Ah, the slight improvement in conciseness too, yes.","msgtype":"m.text"},"ts":1641602662597,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rnb6QC9tHHXzzyhUxjoLXKkoSR4gHzaQRTInO6Dz2Sw"},
{"content":{"body":"So, “`.call` is very frequent, and therefore its conciseness deserves to be improved, but we want to avoid ecosystem schism, so we don’t want to improve it too much”?","format":"org.matrix.custom.html","formatted_body":"So, “<code>.call</code> is very frequent, and therefore its conciseness deserves to be improved, but we want to avoid ecosystem schism, so we don’t want to improve it too much”?","msgtype":"m.text"},"ts":1641602959632,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4sp7NWmoikxy1OGGjstxftOBomj-zTLU5d1Zs1O3WHY"},
{"content":{"body":" * Ah, the slight improvement in conciseness too, yes. I understand now.","m.new_content":{"body":"Ah, the slight improvement in conciseness too, yes. I understand now.","msgtype":"m.text"},"m.relates_to":{"event_id":"$rnb6QC9tHHXzzyhUxjoLXKkoSR4gHzaQRTInO6Dz2Sw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641602972749,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EZGvowJY8QsQFDs-mcRDtOXikIgVBppGbWEU8S4Lzh0"},
{"content":{"body":"That's my thesis, yeah","msgtype":"m.text"},"ts":1641603147767,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$94aNCCh-kx8RxTuGi9hD81bF6ycjo8axooZyzTFPmUc"},
{"content":{"body":"i don’t see how it’d cause ecosystem schism","msgtype":"m.text"},"ts":1641612943545,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ez_i_0tfPvySwPlGcWireoNm61R-1n4_u4PYVDHQG_A"},
{"content":{"body":"It’d be used for all the places .call is already used. Why would anyone go out of their way to design a standalone function to accept a receiver? The feature is only for borrowing prototype methods.","msgtype":"m.text"},"ts":1641612981750,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YxFTPdgQYS4ZXeG5CE39G0fTrGU5gwRqYjXAMWUmxuE"}
]