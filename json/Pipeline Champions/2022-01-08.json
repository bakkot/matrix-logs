[
{"content":{"body":"I don't think I'd have said they were different? I could be wrong, but if so, past me was incorrect. ^_^ The concerns are identical.","msgtype":"m.text"},"ts":1641600084309,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$t1liuPH6QRYSzMJWt64ZqMBaPd63SSXqqLUEFzdgEM4"},
{"content":{"body":"(See also WHâ€™s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"ts":1641600098843,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg"},
{"content":{"body":"* (See also WHâ€™s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","m.new_content":{"body":"(See also WHâ€™s comments in https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-19.md#extensions-for-stage-1)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UQevKNLIzir03jrGyUnEFqHSYcOzdoNaMJG5SHq0KJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641600106642,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vFG5DiiI5BBIMGxfkr1VIseLTUAoPF0leV7syCRrQ5w"},
{"content":{"body":"> WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these arenâ€™t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: Looking at the longer term consequences if we adopted this: This is mutually exclusive with a pipeline operator. I definitely do not want both in the language. I also see this as not really solving any significant problem. It does not define extension methods because, as you found out, you cannot use the same syntax for regular methods and what you're calling extension methods. So these arenâ€™t really extension methods, but this does create a rift in the ecosystem where some folks will adopt the convention of defining methods in the :: namespace and some folks will adopt the convention of using functions, and there will be lots of unnecessary friction around the boundaries. I see that kind of thing as being harmful to the ecosystem.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600161363,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZhxKMLs1bQhpyY_auGYowmmvNEzXTn29JDikW2DWvtI"},
{"content":{"body":"> WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WH: I'm really reluctant about this. It creates a rift in the ecosystem with two different ways of doing the same thing, which means that half of the people will adopt one way and half will adopt the other way. There will be friction at the boundaries. So far, I see this as just a different function calling syntax, but with a separate namespace.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1641600213648,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pTZrjNToJRLvqJ7i4pNu-CmnqSzU35BLxUhx6fgnb1w"},
{"content":{"body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"Part of it is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","msgtype":"m.text"},"ts":1641600242719,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KiKEmTWXl_r7JzfHhJp1miZaOx0gGE-DQcNbhz8u5OU"},
{"content":{"body":"I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk. ","format":"org.matrix.custom.html","formatted_body":"I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.","msgtype":"m.text"},"ts":1641600326879,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA"},
{"content":{"body":"The namespace per se isn't necessary to Waldemar's complaint, it's the calling convention that bothers him.","msgtype":"m.text"},"ts":1641600352353,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DIHkyGIclO0cwVFd89T4RH1_fftujou7GYXafdB8Y2A"},
{"content":{"body":"* Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"* Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","m.new_content":{"body":"Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied `this`-based functions, which bind-this does share.","format":"org.matrix.custom.html","formatted_body":"Yes, those comments. Part of them is about the separate namespace (which Hax is willing to drop and which bind-this does not have) but part of it is also about encouraging libraries disembodied <code>this</code>-based functions, which bind-this does share.","msgtype":"m.text"},"m.relates_to":{"event_id":"$KiKEmTWXl_r7JzfHhJp1miZaOx0gGE-DQcNbhz8u5OU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641600354430,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ySS9X5J5_5b-_AU817rm3lng3IPa54ItrSQW6tj1D00"},
{"content":{"body":"> <@jschoi:matrix.org> I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.\n\nI mean, Justin's comments in this very room imply that there will be demand for authoring in that library style ^_^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I have argued that bind-this would not encourage that library style that much: its purpose is to make more convenient a very common and clunky method (.call and to a lesser extent .bind), but perhaps there is still risk.</blockquote></mx-reply>I mean, Justin's comments in this very room imply that there will be demand for authoring in that library style ^_^","m.relates_to":{"m.in_reply_to":{"event_id":"$BY_T2FH0PeY5MhKzAVQQ4KHw5_HvtoXmm51MlhOZvRA"}},"msgtype":"m.text"},"ts":1641600392703,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tUO105gaSCyEmX1ylFnvWLhO4cRcjlqPW-4fwTQzOKA"},
{"content":{"body":"And the fact that `foo::bar(baz)` *is* slightly shorter than `foo|>bar(##, baz)` inclines me to believe him that it'll be at least somewhat common.","format":"org.matrix.custom.html","formatted_body":"And the fact that <code>foo::bar(baz)</code> <em>is</em> slightly shorter than <code>foo|&gt;bar(##, baz)</code> inclines me to believe him that it'll be at least somewhat common.","msgtype":"m.text"},"ts":1641600466774,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lMuMBshNhZ6t4OvJlHEmsyy3jz7LBXaa08XOLtQsi6Q"},
{"content":{"body":"I could have sworn, Tab, that, when I had raised this a few months ago in this room, you were less concerned about this ecosystem riskâ€”but I could be remembering wrongly, haha. \nI would try searching the logs, but Bakkotâ€™s fancy log search is giving me an error. ðŸ¥²","msgtype":"m.text"},"ts":1641600711603,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xUVgKGYB6QaXQ74x6pjYLt8OQ4MnIdTgetzEA2xOZXE"},
{"content":{"body":"â€¦Anyways, regardless of whether people should publish libraries based on disembodied `this`-based functions or not, people are already using them with `.call` internally a lot for various reasons (such as conditionally switching between two methods or using `this` as a context object). My argument has been that we should discourage people publishing public libraries based on this style, but itâ€™s already happening in internal APIs, and it is very common. Itâ€™s not just Array.prototype or Object.prototype methods in the dataset.","format":"org.matrix.custom.html","formatted_body":"â€¦Anyways, regardless of whether people should publish libraries based on disembodied <code>this</code>-based functions or not, people are already using them with <code>.call</code> internally a lot for various reasons (such as conditionally switching between two methods or using <code>this</code> as a context object). My argument has been that we should discourage people publishing public libraries based on this style, but itâ€™s already happening in internal APIs, and it is very common. Itâ€™s not just Array.prototype or Object.prototype methods in the dataset.","msgtype":"m.text"},"ts":1641600870680,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Tf1bTivEB_53slg40usLp4oRKb5IKe6ufqXSBcZLzkw"},
{"content":{"body":"That is: although this style should not be in public APIs, it is already happening and it is very frequent in private codebases (see the Gzemnid dataset), and it is yet another reason why .callâ€™s brevity/clunkiness should be optimized with syntax.","msgtype":"m.text"},"ts":1641600968578,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4qm-F2E22sQSP-_eVzqJQ_1e2338awgFcOUJzDIM9qo"},
{"content":{"body":"Call-on would solve it too, and I am fine with that as a compromise, but I donâ€™t think bind-this would bring significant ecosystem schism either.\n","msgtype":"m.text"},"ts":1641601175904,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CsalPCBw2uJ9XBccXJlPW5tOGZGIBaCzSZ_Olev5AOk"},
{"content":{"body":"\n\nAnd I also think bind-thisâ€™s redundancy with the pipe operator is small (just like how Function.pipeâ€™s redundancy with the pipe operator is small). Iâ€™m not too concerned when the same problem is addressed by two proposalsâ€¦I am more concerned where the same problem is addressed by *three* proposals (such as where pipe operator, bind-this, and PFA syntax all overlap in my diagram).","format":"org.matrix.custom.html","formatted_body":"And I also think bind-thisâ€™s redundancy with the pipe operator is small (just like how Function.pipeâ€™s redundancy with the pipe operator is small). Iâ€™m not too concerned when the same problem is addressed by two proposalsâ€¦I am more concerned where the same problem is addressed by <em>three</em> proposals (such as where pipe operator, bind-this, and PFA syntax all overlap in my diagram).","msgtype":"m.text"},"ts":1641601176274,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RNU6fVspEJNShPwTMvIpAyR3xuCkrUxrSTTemw1duXk"},
{"content":{"body":"Private codebases can do whatever bizarre stuff they want; I've written my share of heavily-functional private JS, after all. It's still virtually unheard of to actually publish a library expecting its functions to be called with `.call()`.","format":"org.matrix.custom.html","formatted_body":"Private codebases can do whatever bizarre stuff they want; I've written my share of heavily-functional private JS, after all. It's still virtually unheard of to actually publish a library expecting its functions to be called with <code>.call()</code>.","msgtype":"m.text"},"ts":1641601312068,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6PLpi2B7JnhwXSC-XF_E66BeqbgAGJOlvr_mkMfYBSc"},
{"content":{"body":"Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":"Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","msgtype":"m.text"},"ts":1641601392147,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$43Ndb1xUC5jmJFaeCl7vQ0ce4TZgVVbqS2U_UmSIcaI"},
{"content":{"body":" * Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":" * Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","m.new_content":{"body":"Yes, that is true. `.call` is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied `this`-based functions that would depend on `.call`. And it should probably stay that way.","format":"org.matrix.custom.html","formatted_body":"Yes, that is true. <code>.call</code> is very common, even excluding Array.prototype and Object.prototype methods (e.g., for conditionally switching between methods), but there is no known public API that is based on disembodied <code>this</code>-based functions that would depend on <code>.call</code>. And it should probably stay that way.","msgtype":"m.text"},"m.relates_to":{"event_id":"$43Ndb1xUC5jmJFaeCl7vQ0ce4TZgVVbqS2U_UmSIcaI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641601410885,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aHNGEwNRPmMfqb_pvTLuXV7HmWwaFCJ7LjESm3X_o84"},
{"content":{"body":"Actually, I take it back: I think there *are* some public APIs that involve the user supplying a custom `this` value in the dataset. Whether this should be encouraged is another questionâ€¦but, anyways, there are many extant use cases of `.call` in the dataset, which sum up to a big number.","format":"org.matrix.custom.html","formatted_body":"Actually, I take it back: I think there <em>are</em> some public APIs that involve the user supplying a custom <code>this</code> value in the dataset. Whether this should be encouraged is another questionâ€¦but, anyways, there are many extant use cases of <code>.call</code> in the dataset, which sum up to a big number.","msgtype":"m.text"},"ts":1641601574793,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JylfTq2-u-yWhEJByw2PxIu6LDSvSqWwwdXWr-rRUgc"},
{"content":{"body":"Thus me being happy to address it. ^_^","msgtype":"m.text"},"ts":1641601596018,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$l1bWccuU9etZAUqf34Va1yCTfjWZkW0m6GGLQSZNl4Q"},
{"content":{"body":"Haha, yes. \nAnyways, I think the TIMTOWDI issue is the bigger fundamental question.","msgtype":"m.text"},"ts":1641601629011,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tmMA5Xyq5LWtoeXMNqgfJPrxLuiKvmmRqyebUDlh5oo"},
{"content":{"body":"Total TOOWTDI is unavoidable, no matter how much you want to reach Python zen, but how much of it is acceptableâ€¦? We will need to ask plenary, because it bumps against the fundamental approach to TC39 proposals and judgement on proposalsâ€™Â own merits.","msgtype":"m.text"},"ts":1641601724015,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$y_ASwfShD0mIqKWmWPFhB9M9G0iuCQPLrUUbvZPkJO8"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1641601731696,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uGuQjwU6BtNX0TY2y1sEPmTR5KecTXntxOX1hK9SBiQ"},
{"content":{"body":"also i'm shifting call-this to `@()` because after some thought I think it looks really good","format":"org.matrix.custom.html","formatted_body":"also i'm shifting call-this to <code>@()</code> because after some thought I think it looks really good","msgtype":"m.text"},"ts":1641601750363,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DmRWpt5UzzkYj4Fx3Iye47BClZ4hYSjHQ5swlUDZt2s"}
]