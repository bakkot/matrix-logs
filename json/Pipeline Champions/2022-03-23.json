[
{"content":{"body":"> <@tabatkins:matrix.org> I'm abso going to block any attempt to make the topic sigil `#` if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.\n\nThe reason why `#` was even on the table again for a while is because it had looked like that `@[]` might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24b2p2XhfyVS1gGHovEWNYdbjRMv-4I6BNtONkPsF1Gs8\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I'm abso going to block any attempt to make the topic sigil <code>#</code> if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.</blockquote></mx-reply>The reason why <code>#</code> was even on the table again for a while is because it had looked like that <code>@[]</code> might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$b2p2XhfyVS1gGHovEWNYdbjRMv-4I6BNtONkPsF1Gs8"}}},"ts":1648010294350,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$G9DiT0SjlK0mR9xwWWiawSBXFB1CFFp6K5LMKXduoC0"},
{"content":{"body":"* > <@tabatkins:matrix.org> I'm abso going to block any attempt to make the topic sigil `#` if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.\n\nThe reason why `#` was even on the table again for a while is because it had looked like that `@[]` might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24b2p2XhfyVS1gGHovEWNYdbjRMv-4I6BNtONkPsF1Gs8\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I'm abso going to block any attempt to make the topic sigil <code>#</code> if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.</blockquote></mx-reply>The reason why <code>#</code> was even on the table again for a while is because it had looked like that <code>@[]</code> might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","m.new_content":{"body":"> <@tabatkins:matrix.org> I'm abso going to block any attempt to make the topic sigil `#` if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.\n\nThe reason why `#` was even on the table again for a while is because it had looked like that `@[]` might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24b2p2XhfyVS1gGHovEWNYdbjRMv-4I6BNtONkPsF1Gs8\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I'm abso going to block any attempt to make the topic sigil <code>#</code> if it means we can't do array access. It would be a huge mistake regardless of if there are (longer) alternatives (for some cases). But we're not even putting that forward as an option right now, last I saw jschoi's slides, so it's not a relevant topic anyway.</blockquote></mx-reply>The reason why <code>#</code> was even on the table again for a while is because it had looked like that <code>@[]</code> might be viable for tuple literals. But the reception I got from some TC39 representatives was cool, so out it went againâ€¦","msgtype":"m.text"},"m.relates_to":{"event_id":"$G9DiT0SjlK0mR9xwWWiawSBXFB1CFFp6K5LMKXduoC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648010304128,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mmgv1Hc4-nNXHrDt1vuQHaxYGeJLIOTT6i2cu3rULys"},
{"content":{"body":"Right","msgtype":"m.text","org.matrix.msc1767.text":"Right"},"ts":1648050420727,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VibyxbNQN7aMPE4LGuBlKmsYeNEgYpH701bBTHi3z_Y"},
{"content":{"body":"I do still feel `#_` to be an option worth remembering ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"I do still feel <code>#_</code> to be an option worth remembering ðŸ˜…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do still feel `#_` to be an option worth remembering ðŸ˜…","mimetype":"text/plain"},{"body":"I do still feel <code>#_</code> to be an option worth remembering ðŸ˜…","mimetype":"text/html"}]},"ts":1648062036417,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZSiCnv1wsOibfi7PerSykEcuCdzMD5hEvWqWShCEmHw"},
{"content":{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$ZSiCnv1wsOibfi7PerSykEcuCdzMD5hEvWqWShCEmHw"}}},"ts":1648063254291,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AbKu85tmZR4_fwty8XhC5EncCmsxohOXWn3CJ5s3n7E"},
{"content":{"body":"> <@rkirsling:matrix.org> I do still feel `#_` to be an option worth remembering ðŸ˜…\n\n * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ZSiCnv1wsOibfi7PerSykEcuCdzMD5hEvWqWShCEmHw\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>I do still feel <code>#_</code> to be an option worth remembering ðŸ˜…</blockquote></mx-reply> * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","m.new_content":{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AbKu85tmZR4_fwty8XhC5EncCmsxohOXWn3CJ5s3n7E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rkirsling:matrix.org> I do still feel `#_` to be an option worth remembering ðŸ˜…\n\n * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ZSiCnv1wsOibfi7PerSykEcuCdzMD5hEvWqWShCEmHw\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>I do still feel <code>#_</code> to be an option worth remembering ðŸ˜…</blockquote></mx-reply> * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"ts":1648063276398,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ekDJZoxDfADQME9XnTovAZAQPgpwudmaDd2Z5OjIrg4"},
{"content":{"body":" * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":" * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","m.new_content":{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AbKu85tmZR4_fwty8XhC5EncCmsxohOXWn3CJ5s3n7E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":" * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"ts":1648063301707,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ccRgCbi5G2p8VSwWd2hMrDdZXuBJX7saswohNTE-nvw"},
{"content":{"body":" * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":" * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","m.new_content":{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","format":"org.matrix.custom.html","formatted_body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":"Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$AbKu85tmZR4_fwty8XhC5EncCmsxohOXWn3CJ5s3n7E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Iâ€™d be happy to add `#_` to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that `^^` was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/plain"},{"body":" * Iâ€™d be happy to add <code>#_</code> to the slides. We need to properly consider every still-viable possibility at the next plenary meeting. It was my mistake that <code>^^</code> was not properly discussed in the 2021-11-15 incubator meeting.","mimetype":"text/html"}]},"ts":1648063304087,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tRkLlS-ug8pqqju2OLFsSqeuXt2pGacij79k_UVxACw"},
{"content":{"body":"Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","format":"org.matrix.custom.html","formatted_body":"Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","mimetype":"text/plain"},{"body":"Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","mimetype":"text/html"}]},"ts":1648063600976,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fdd_gnfDp_ISHe9T2b-1ZLSxM6hQXwx4HSt2wD3xlho"},
{"content":{"body":" * Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","format":"org.matrix.custom.html","formatted_body":" * Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","m.new_content":{"body":"Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","format":"org.matrix.custom.html","formatted_body":"Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","mimetype":"text/plain"},{"body":"Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fdd_gnfDp_ISHe9T2b-1ZLSxM6hQXwx4HSt2wD3xlho","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Iâ€™ve added `#_` to the slides. For what itâ€™s worth, I feel (moderately) that `#_` is less ASCII soupy / visually noisy than `##` when mixed with tuple/record literals.","mimetype":"text/plain"},{"body":" * Iâ€™ve added <code>#_</code> to the slides. For what itâ€™s worth, I feel (moderately) that <code>#_</code> is less ASCII soupy / visually noisy than <code>##</code> when mixed with tuple/record literals.","mimetype":"text/html"}]},"ts":1648063724944,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xV3LgQgdTyAp3eCV01VoRrxDd-EtU3rajzJINg5DtA0"},
{"content":{"body":"â€¦Should we consider bare `@` again? `x |> @(0);` technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","format":"org.matrix.custom.html","formatted_body":"â€¦Should we consider bare <code>@</code> again? <code>x |&gt; @(0);</code> technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","msgtype":"m.text"},"ts":1648074077697,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jHdTWYpYZaz_AKJxVeJE-LIm0VXouY7PatAL5R2HPfU"},
{"content":{"body":"* â€¦Should we consider bare `@` again? `x |> @(0);` technically is not ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","format":"org.matrix.custom.html","formatted_body":"* â€¦Should we consider bare <code>@</code> again? <code>x |&gt; @(0);</code> technically is not ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","m.new_content":{"body":"â€¦Should we consider bare `@` again? `x |> @(0);` technically is not ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","format":"org.matrix.custom.html","formatted_body":"â€¦Should we consider bare <code>@</code> again? <code>x |&gt; @(0);</code> technically is not ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","msgtype":"m.text"},"m.relates_to":{"event_id":"$jHdTWYpYZaz_AKJxVeJE-LIm0VXouY7PatAL5R2HPfU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648074097656,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lOf3ri3VgeBhyjTtHWGwNlIrGCJNSLIqHP7m-vexJ4o"},
{"content":{"body":"* â€¦Should we consider bare `@` again? `x |> @(0);` technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","format":"org.matrix.custom.html","formatted_body":"* â€¦Should we consider bare <code>@</code> again? <code>x |&gt; @(0);</code> technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","m.new_content":{"body":"â€¦Should we consider bare `@` again? `x |> @(0);` technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","format":"org.matrix.custom.html","formatted_body":"â€¦Should we consider bare <code>@</code> again? <code>x |&gt; @(0);</code> technically would not be ambiguous, because there is no following class expression. It just requires lookahead to the end of the parenthesesâ€¦","msgtype":"m.text"},"m.relates_to":{"event_id":"$jHdTWYpYZaz_AKJxVeJE-LIm0VXouY7PatAL5R2HPfU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648074107226,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JlIsmzZgYPP_bwSXM5Vp2cKXH6A0pIU2Gk5jxA0X0ew"},
{"content":{"body":"I want to make sure we arenâ€™t excluding anything that might be viable from the plenary discussion next week, and weâ€™ve always dismissed single `@` because of `@(expr) class {}` decorator syntax, but it isnâ€™t actually ambiguous. ","format":"org.matrix.custom.html","formatted_body":"I want to make sure we arenâ€™t excluding anything that might be viable from the plenary discussion next week, and weâ€™ve always dismissed single <code>@</code> because of <code>@(expr) class {}</code> decorator syntax, but it isnâ€™t actually ambiguous.","msgtype":"m.text"},"ts":1648074179494,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$phK6-qnYMc-2plDdycl7nqc6esYevmBR3cHwt3-y7_Q"},
{"content":{"body":"â€¦I suppose ASI would be the problem.\n```js\nx |> @(blah)\nclass {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>â€¦I suppose ASI would be the problem.</p>\n<pre><code class=\"language-js\">x |&gt; @(blah)\nclass {}\n</code></pre>","msgtype":"m.text"},"ts":1648074219313,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NEASAZ3SsG4ZUuZitiUDy3l4-kzY2dtA_vsG_ELaL9E"},
{"content":{"body":"* â€¦I suppose ASI would be the problem.\n```js\nx |> @(blah)\nclass {}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>â€¦I suppose ASI would be the problem.</p>\n<pre><code class=\"language-js\">x |&gt; @(blah)\nclass {}\n</code></pre>","m.new_content":{"body":"â€¦I suppose ASI would be the problem.\n```js\nx |> @(blah)\nclass {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>â€¦I suppose ASI would be the problem.</p>\n<pre><code class=\"language-js\">x |&gt; @(blah)\nclass {}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$NEASAZ3SsG4ZUuZitiUDy3l4-kzY2dtA_vsG_ELaL9E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648074279625,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qYrd2PNvkouprNhbuF0611zUse-k7ct1piHNcau9sOQ"},
{"content":{"body":"But the ASI problem is not insurmountable, and either way probably would be at least worth talking about at plenary.","msgtype":"m.text"},"ts":1648074296986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LCmWz401L5d-2OHdz6_pLKvDhRrWlZhqP4c7SFC9EOk"},
{"content":{"body":"* But the ASI problem may not be insurmountable, and either way probably would be at least worth talking about at plenary.","m.new_content":{"body":"But the ASI problem may not be insurmountable, and either way probably would be at least worth talking about at plenary.","msgtype":"m.text"},"m.relates_to":{"event_id":"$LCmWz401L5d-2OHdz6_pLKvDhRrWlZhqP4c7SFC9EOk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648074309069,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jPa8stb5OySKZ0TtfJIjVgQy49poOU12Xy1hSzA91Hw"},
{"content":{"body":"* â€¦I suppose ASI would be the problem.\n```js\nx |> @(blah)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>â€¦I suppose ASI would be the problem.</p>\n<pre><code class=\"language-js\">x |&gt; @(blah)\nclass C {}\n</code></pre>","m.new_content":{"body":"â€¦I suppose ASI would be the problem.\n```js\nx |> @(blah)\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>â€¦I suppose ASI would be the problem.</p>\n<pre><code class=\"language-js\">x |&gt; @(blah)\nclass C {}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$NEASAZ3SsG4ZUuZitiUDy3l4-kzY2dtA_vsG_ELaL9E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648075698580,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5VdDV0jOgWkKyjNelTMgYh2VInvt2KnOlXhCQG_eQXk"},
{"content":{"body":"Come to think of it, even if `@` is the topic token, `x |> @(blah) class C {}` would be a SyntaxError because the `@` indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","format":"org.matrix.custom.html","formatted_body":"Come to think of it, even if <code>@</code> is the topic token, <code>x |&gt; @(blah) class C {}</code> would be a SyntaxError because the <code>@</code> indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","msgtype":"m.text"},"ts":1648075886999,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mYetH2jQevgpxkY_N5XugXGg9sXTRB89pBuHcjzniho"},
{"content":{"body":"* Come to think of it, even if `@` is the topic token, `x |> @(blah) class C {}` would be a SyntaxError because the `@` indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","format":"org.matrix.custom.html","formatted_body":"* Come to think of it, even if <code>@</code> is the topic token, <code>x |&gt; @(blah) class C {}</code> would be a SyntaxError because the <code>@</code> indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","m.new_content":{"body":"Come to think of it, even if `@` is the topic token, `x |> @(blah) class C {}` would be a SyntaxError because the `@` indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","format":"org.matrix.custom.html","formatted_body":"Come to think of it, even if <code>@</code> is the topic token, <code>x |&gt; @(blah) class C {}</code> would be a SyntaxError because the <code>@</code> indicates a decorator pipe body has no topic reference, so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","msgtype":"m.text"},"m.relates_to":{"event_id":"$mYetH2jQevgpxkY_N5XugXGg9sXTRB89pBuHcjzniho","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648075931206,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yQNXnzCtXkq0dKXqXp08nekR8ZhT2ftOMjnjeFXRspY"},
{"content":{"body":"Also rkirsling: I had forgotten that `#_ in this` is already valid syntax, and therefore `x |> #_ in this` would be ambiguous between `#_` as topic and `#_` as private field (since the LHS of `in` can be an arbitrary expression). So `#_` as topic is probably not viable, sorry.","format":"org.matrix.custom.html","formatted_body":"Also <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: I had forgotten that <code>#_ in this</code> is already valid syntax, and therefore <code>x |&gt; #_ in this</code> would be ambiguous between <code>#_</code> as topic and <code>#_</code> as private field (since the LHS of <code>in</code> can be an arbitrary expression). So <code>#_</code> as topic is probably not viable, sorry.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also rkirsling: I had forgotten that `#_ in this` is already valid syntax, and therefore `x |> #_ in this` would be ambiguous between `#_` as topic and `#_` as private field (since the LHS of `in` can be an arbitrary expression). So `#_` as topic is probably not viable, sorry.","mimetype":"text/plain"},{"body":"Also <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: I had forgotten that <code>#_ in this</code> is already valid syntax, and therefore <code>x |&gt; #_ in this</code> would be ambiguous between <code>#_</code> as topic and <code>#_</code> as private field (since the LHS of <code>in</code> can be an arbitrary expression). So <code>#_</code> as topic is probably not viable, sorry.","mimetype":"text/html"}]},"ts":1648077134622,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Yn4cW6g4mECLHkSDSUd3knShm5zWMIabyzoOLZVBp7M"},
{"content":{"body":"â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","format":"org.matrix.custom.html","formatted_body":"â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","mimetype":"text/plain"},{"body":"â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","mimetype":"text/html"}]},"ts":1648077311743,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6P4J6OePIwKJePQU8HkR2X-zk2DAtKkpVoqeduRFLc4"},
{"content":{"body":" * â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","format":"org.matrix.custom.html","formatted_body":" * â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","m.new_content":{"body":"â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","format":"org.matrix.custom.html","formatted_body":"â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","mimetype":"text/plain"},{"body":"â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6P4J6OePIwKJePQU8HkR2X-zk2DAtKkpVoqeduRFLc4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * â€¦I suppose we could make a special case with a cover grammar such that `#_ in this` always means `#_` as private field and not as topic, but that seems bad.","mimetype":"text/plain"},{"body":" * â€¦I suppose we could make a special case with a cover grammar such that <code>#_ in this</code> always means <code>#_</code> as private field and not as topic, but that seems bad.","mimetype":"text/html"}]},"ts":1648077350436,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BLUaiYZNPevV6IZJT7eI--eqUn9FWhnRnfILJHvOIxQ"},
{"content":{"body":"hm I was aware of that case when I suggested it, but I'm not sure why I felt that it didn't affect viability","msgtype":"m.text","org.matrix.msc1767.text":"hm I was aware of that case when I suggested it, but I'm not sure why I felt that it didn't affect viability"},"ts":1648077583434,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$bTFWSQ5mBTOq-Gi21YqHXQV7ugBsrMgMe1Zgqbh07sw"},
{"content":{"body":"becoming _unable_ to do something is certainly not good","format":"org.matrix.custom.html","formatted_body":"becoming <em>unable</em> to do something is certainly not good","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"becoming _unable_ to do something is certainly not good","mimetype":"text/plain"},{"body":"becoming <em>unable</em> to do something is certainly not good","mimetype":"text/html"}]},"ts":1648077609615,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$G6zXYel2KSk3h34ovBYfTZwqpGeZeXCWhYeLtR0dv3g"},
{"content":{"body":"@ would be amazing if it were viable.","msgtype":"m.text","org.matrix.msc1767.text":"@ would be amazing if it were viable."},"ts":1648077681072,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$wRuryzMs15AEBtRpoW8xSGxNCos0oU_6tkpAwZC9UKw"},
{"content":{"body":"* Come to think of it, even if `@` is the topic token, `x |> @(blah) class C {}` would be a SyntaxError because the `@` indicates a decorator, and therefore the pipe body has no topic referenceâ€¦â€¦so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","format":"org.matrix.custom.html","formatted_body":"* Come to think of it, even if <code>@</code> is the topic token, <code>x |&gt; @(blah) class C {}</code> would be a SyntaxError because the <code>@</code> indicates a decorator, and therefore the pipe body has no topic referenceâ€¦â€¦so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","m.new_content":{"body":"Come to think of it, even if `@` is the topic token, `x |> @(blah) class C {}` would be a SyntaxError because the `@` indicates a decorator, and therefore the pipe body has no topic referenceâ€¦â€¦so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","format":"org.matrix.custom.html","formatted_body":"Come to think of it, even if <code>@</code> is the topic token, <code>x |&gt; @(blah) class C {}</code> would be a SyntaxError because the <code>@</code> indicates a decorator, and therefore the pipe body has no topic referenceâ€¦â€¦so arguably this isnâ€™t even an ASI hazard. And this scenario (a decorator expression in a pipe body) will hopefully be quite uncommon anywayâ€¦","msgtype":"m.text"},"m.relates_to":{"event_id":"$mYetH2jQevgpxkY_N5XugXGg9sXTRB89pBuHcjzniho","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648077690016,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QNaoIBXKlMDp1yJuneLEoX5kykeYTrQrMjYTC8EXfcs"},
{"content":{"body":"Yeah, it would be such a huge boon if the topic could be one character long.","msgtype":"m.text"},"ts":1648077728872,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6R_kPixth1IlW20_7eMwY14QL7fjQPi6GpbTH1QeSJA"},
{"content":{"body":"And developers should be encouraged to keep their pipe bodies short and simpleâ€¦and decorated expressions are almost never short or simple, so they almost never should be in pipe bodies anyway. So I donâ€™t think this ASI hazard is much of a hazard.","msgtype":"m.text"},"ts":1648077784609,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bz8RiSgdrylmP4wS9ve7gOjF5OH5oxkFzPXVcNAAOdU"},
{"content":{"body":"* And developers should be encouraged to keep their pipe bodies short and simpleâ€¦and decorated expressions are almost never short or simple, so they almost never should be in pipe bodies anyway.","m.new_content":{"body":"And developers should be encouraged to keep their pipe bodies short and simpleâ€¦and decorated expressions are almost never short or simple, so they almost never should be in pipe bodies anyway.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bz8RiSgdrylmP4wS9ve7gOjF5OH5oxkFzPXVcNAAOdU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648077804242,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UiyQnDHiY35q8hRvPXLzzzAgQnm62C2neNVFQkN7Jt4"},
{"content":{"body":"* And developers should be encouraged to keep their pipe bodies short and simpleâ€¦and decorated expressions are almost never short or simple, so they almost never should be in pipe bodies anyway. So I donâ€™t think this ASI hazard is much of a hazard.","m.new_content":{"body":"And developers should be encouraged to keep their pipe bodies short and simpleâ€¦and decorated expressions are almost never short or simple, so they almost never should be in pipe bodies anyway. So I donâ€™t think this ASI hazard is much of a hazard.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bz8RiSgdrylmP4wS9ve7gOjF5OH5oxkFzPXVcNAAOdU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648077829642,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d3I8Dj-biORv8ujjl4r87rLLmMTTZjvzyZdOv-hU3FA"}
]