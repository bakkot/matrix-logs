[
{"content":{"body":"jschoi: You've been doing quite well here; thank you for the talk so far.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: You've been doing quite well here; thank you for the talk so far.","msgtype":"m.text"},"ts":1643227275406,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FuE5U0_BGuhG3tb0CYSKsf_P3o_3QO72xOgPH782VaA"},
{"content":{"body":"yo","msgtype":"m.text"},"ts":1643231789431,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1u8659F2nfVC_wLV6BKv7HvHm-SwpxWM-FVktdj7YWI"},
{"content":{"body":"so, 1 https://matrix.to/#/!RKGOsXKqdKdyWOiTEA:matrix.org/$Xqf1VcaFHqzkIFLl6JerBlMhHS5e1SuAxxqBSvv-HkQ?via=matrix.org&via=mozilla.org&via=igalia.com","msgtype":"m.text"},"ts":1643231809998,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$A5cy6eDG78ANoLmZcWfy6FRH8Y5pxFR-goivTNrFpfs"},
{"content":{"body":"regarding this, I was thinking of this as how this overlaps with the pipeline operaor","msgtype":"m.text"},"ts":1643231828921,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qGuq2UQa8pC9IRH9PEjFgMR5eeDgv6FajZ-QidcCLM4"},
{"content":{"body":"but, i figured, that there had been discussion about this and there was a reason to exclude it","msgtype":"m.text"},"ts":1643231848839,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$L-DwU9lRbgo1T6BBFK7KYYL1j7xlnsJtR80sCrpCbwM"},
{"content":{"body":"_if this is intended_ then the overlap betweeen pipeline and bind should have been much larger","format":"org.matrix.custom.html","formatted_body":"<em>if this is intended</em> then the overlap betweeen pipeline and bind should have been much larger","msgtype":"m.text"},"ts":1643231873082,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$q2-M_7a1F58TUseb_WAQ_kTZH0lSeQ88GvTT1kmx78Y"},
{"content":{"body":"however, i would say that if we have both, it is reasonable to say that bind this cannot be chained","msgtype":"m.text"},"ts":1643231902389,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oMCLQfOymG9hlau-0xtwbjyjXrOPnkWUj7p4VVmyHDk"},
{"content":{"body":"or some other restriction","msgtype":"m.text"},"ts":1643231953973,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rY6Iibj_km33eb2zlPBBLl_1Ggh-AjVR2F9SlNfAGbs"},
{"content":{"body":"re bind-this: it is very important that there's a way to do `array <operator> slice` without needing `slice` to exist on `array`.","format":"org.matrix.custom.html","formatted_body":"re bind-this: it is very important that there's a way to do <code>array &lt;operator&gt; slice</code> without needing <code>slice</code> to exist on <code>array</code>.","msgtype":"m.text"},"ts":1643231955214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SXu6j-8oV5C_IU_dNy5TMYehlJ6OOU18LIdNGc5ZmUA"},
{"content":{"body":" * re bind-this: it is very important that there's a way to do `array <operator> slice` without needing `slice` to exist on `array`.","format":"org.matrix.custom.html","formatted_body":" * re bind-this: it is very important that there's a way to do <code>array &lt;operator&gt; slice</code> without needing <code>slice</code> to exist on <code>array</code>.","m.new_content":{"body":"re bind-this: it is very important that there's a way to do `array <operator> slice` without needing `slice` to exist on `array`.","format":"org.matrix.custom.html","formatted_body":"re bind-this: it is very important that there's a way to do <code>array &lt;operator&gt; slice</code> without needing <code>slice</code> to exist on <code>array</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$SXu6j-8oV5C_IU_dNy5TMYehlJ6OOU18LIdNGc5ZmUA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643231958735,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oskVe4wIagvyaizXx3vaUuJygSf2B0qL3QYjI5vKAec"},
{"content":{"body":"Yes, this overlap has been discussed, and is one of the reasons I *don't* want bind-this (and wrote call-this in the way I did)","format":"org.matrix.custom.html","formatted_body":"Yes, this overlap has been discussed, and is one of the reasons I <em>don't</em> want bind-this (and wrote call-this in the way I did)","msgtype":"m.text"},"ts":1643231962183,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$d-KE3yRFDAcbrifcOkVKolryfSmUMTnuGcrucjmteCI"},
{"content":{"body":"the word order being critical there.","msgtype":"m.text"},"ts":1643231964986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I5wdANXp0kmEXFSQTMK0N-pzTHAktO5E3MBx-SP5lEc"},
{"content":{"body":"> <@tabatkins:matrix.org> Yes, this overlap has been discussed, and is one of the reasons I *don't* want bind-this (and wrote call-this in the way I did)\n\nyeah, i would accept that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$d-KE3yRFDAcbrifcOkVKolryfSmUMTnuGcrucjmteCI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Yes, this overlap has been discussed, and is one of the reasons I <em>don't</em> want bind-this (and wrote call-this in the way I did)</blockquote></mx-reply>yeah, i would accept that","m.relates_to":{"m.in_reply_to":{"event_id":"$d-KE3yRFDAcbrifcOkVKolryfSmUMTnuGcrucjmteCI"}},"msgtype":"m.text"},"ts":1643231987194,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$FY_nxKn2KaLsUydvvs4rUlbvFTQ26GN8VXuNN5z5vEc"},
{"content":{"body":"> <@ljharb:matrix.org> re bind-this: it is very important that there's a way to do `array <operator> slice` without needing `slice` to exist on `array`.\n\nagreed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$SXu6j-8oV5C_IU_dNy5TMYehlJ6OOU18LIdNGc5ZmUA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>re bind-this: it is very important that there's a way to do <code>array &lt;operator&gt; slice</code> without needing <code>slice</code> to exist on <code>array</code>.</blockquote></mx-reply>agreed","m.relates_to":{"m.in_reply_to":{"event_id":"$SXu6j-8oV5C_IU_dNy5TMYehlJ6OOU18LIdNGc5ZmUA"}},"msgtype":"m.text"},"ts":1643231995066,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6kJ5Bj4IDE5CkHTctP1nAddzoe7hhg4rBBg9wGqyyno"},
{"content":{"body":"If word order is important, then it's unavoidable that we will have libraries explicitly written to allow \"method-chaining\"-ish (aka \"fluent API\") calling, using the operator.","msgtype":"m.text"},"ts":1643232015063,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8T9S-BGlphadWBbN-a6cqfeKI7BIsijHk7OvWfrSl_A"},
{"content":{"body":"that's fine","msgtype":"m.text"},"ts":1643232020198,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uePOBWmY3Fs86gcuT-EaXUiLJXHQUUgfItsJzR0Qt0I"},
{"content":{"body":"people do terrible things with Proxy, predominantly","msgtype":"m.text"},"ts":1643232025424,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9Or5D6QOvTSdOcyoxUH2bYcXwLPRD8ZT6OWLJIHjwgA"},
{"content":{"body":"i don't think we have a disagreement on this","msgtype":"m.text"},"ts":1643232026687,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Bihyg6S4vKgPFaGeYj40gbvlrs0OLmot_8PEfVmwWqg"},
{"content":{"body":"but the intended use case still needs them","msgtype":"m.text"},"ts":1643232032636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t-F701jBbVYa5pYG3z9vt3vcWbpTgKcUQoQ38cXNqNE"},
{"content":{"body":"our job is explicitly not to be paternalistic","msgtype":"m.text"},"ts":1643232044497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8BItfNq2ssLVZTIrWXdJlPOOnKTtK_AZFgWcAzvQsVM"},
{"content":{"body":"if people want to do gross things, we have to let them (in some ways)","msgtype":"m.text"},"ts":1643232049797,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UHY3sKTyc_IA_HV5CyIx2Q7TiLZOwt01a8PRD8DVme0"},
{"content":{"body":"If word order is less important, then call-this allows that functionality in a terse and reliable fashion, without encouraging such a library design pattern.","msgtype":"m.text"},"ts":1643232055044,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3HUPhUhRfa0Nkmx2DNtxW-RhR5h1J9vXxAgJiPh-BjU"},
{"content":{"body":" * if people want to do gross things, we have to let them (in some ways)","m.new_content":{"body":"if people want to do gross things, we have to let them (in some ways)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UHY3sKTyc_IA_HV5CyIx2Q7TiLZOwt01a8PRD8DVme0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232057740,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xfPzKywGiw-Iltq1kqeMUI2MWjgG_jwFOLzp8m4vupc"},
{"content":{"body":"word order is very important","msgtype":"m.text"},"ts":1643232064448,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HqbJMU6YYA8kUTITKPALryWuo992uw3pXiboxoKI5SE"},
{"content":{"body":"Our job is *absolutley* to predict how things will affect the ecosystem and avoid things that we believe will likely be bad.","format":"org.matrix.custom.html","formatted_body":"Our job is <em>absolutley</em> to predict how things will affect the ecosystem and avoid things that we believe will likely be bad.","msgtype":"m.text"},"ts":1643232077116,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MWQtZgYP286xI9ZUpDZ6BagszOH1S1ooihTqouvdwXo"},
{"content":{"body":"syntax sugar that just replaces `.call` doesn't hold its own weight imo","format":"org.matrix.custom.html","formatted_body":"syntax sugar that just replaces <code>.call</code> doesn't hold its own weight imo","msgtype":"m.text"},"ts":1643232080363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aG0nJ5FFMYkQ1bQcju7bkFTuFGgNUUmUBg12lOuUVf0"},
{"content":{"body":"it's to predict that, but that doesn't mean we can stop everyone from doing bad things","msgtype":"m.text"},"ts":1643232091178,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xbtRR_fROSYvD3xncRRz9sFjpESpRos_1jhSPZ5-3q8"},
{"content":{"body":"i think word order depends on it's context. it is an improvement in some cases","msgtype":"m.text"},"ts":1643232092939,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$tjKP3U61tHsHOIRI2MThZi2hij3cLKdShUTQgTVXDrU"},
{"content":{"body":"we can't stop ASI either","msgtype":"m.text"},"ts":1643232097588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8FB1s560l62C1dC92GNbfpn2eeNlKx9ZfPzkiM1FEPs"},
{"content":{"body":"i'm certainly all for minimizing misuse, especially when it reduces burden on eslint","msgtype":"m.text"},"ts":1643232126550,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n9sMSrdF1p6CiJpr3fAGDoEhdxkdm4LXTgCiBTHXNHs"},
{"content":{"body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","format":"org.matrix.custom.html","formatted_body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$3HUPhUhRfa0Nkmx2DNtxW-RhR5h1J9vXxAgJiPh-BjU"}}},"ts":1643232128845,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yqGMJfdY1-K8dUCYmzaDrZy_6-PFXJG6ECeRLXZVy0Y"},
{"content":{"body":"\"we can't stop bad things\" doesn't mean we give up on the concept of things being bad as a reason to avoid something; no need to slippery-slope this.","msgtype":"m.text"},"ts":1643232131342,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$byJBZptlReSnr818OW_w0tsSkqhyER72xP4yh9sk22c"},
{"content":{"body":" * i'm certainly all for minimizing misuse, especially when it reduces burden on eslint","m.new_content":{"body":"i'm certainly all for minimizing misuse, especially when it reduces burden on eslint","msgtype":"m.text"},"m.relates_to":{"event_id":"$n9sMSrdF1p6CiJpr3fAGDoEhdxkdm4LXTgCiBTHXNHs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232132116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pG4_0k4-mlQjzGaa3wsCzEa1hYtBN5ylIUvjLO0HQ7E"},
{"content":{"body":"> <@tabatkins:matrix.org> If word order is less important, then call-this allows that functionality in a terse and reliable fashion, without encouraging such a library design pattern.\n\n * I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, ri got?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$3HUPhUhRfa0Nkmx2DNtxW-RhR5h1J9vXxAgJiPh-BjU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>If word order is less important, then call-this allows that functionality in a terse and reliable fashion, without encouraging such a library design pattern.</blockquote></mx-reply> * I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, ri got?","m.new_content":{"body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, ri got?","format":"org.matrix.custom.html","formatted_body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, ri got?","msgtype":"m.text"},"m.relates_to":{"event_id":"$yqGMJfdY1-K8dUCYmzaDrZy_6-PFXJG6ECeRLXZVy0Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232133211,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1KiGGgwq6SoO2yOeOvB4D_Eh4qEBMTXLlWMgwm54vwE"},
{"content":{"body":" * I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","format":"org.matrix.custom.html","formatted_body":" * I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","m.new_content":{"body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","format":"org.matrix.custom.html","formatted_body":"I think you think word order is important but that word order can be solved by combining the pipe operator with call-this. That’s correct, right?","msgtype":"m.text"},"m.relates_to":{"event_id":"$yqGMJfdY1-K8dUCYmzaDrZy_6-PFXJG6ECeRLXZVy0Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232137321,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mV21rSzCUb6rDq_HS807n2XmIhICrdYl2bm4jtkVijA"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1643232137913,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$65OOqiK6MZF-mH2rZcVCD2yhJiMoDLxdVtMYLawhce8"},
{"content":{"body":"but it also doesn't mean \"people will do bad things\" is sufficient reason to block something","msgtype":"m.text"},"ts":1643232150661,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y8kP-D_IseChKIkCKZ5ejyM8MCNeh6D_I9lmUMcHpQg"},
{"content":{"body":"it's somewhere in the middle","msgtype":"m.text"},"ts":1643232156952,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5mrbuphiM8RsJinvL486OlrVO0zdTx7meKMPeAeEZhA"},
{"content":{"body":"jschoi: Yes, `obj |> slice@(#, 0, 2)` kinda works","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Yes, <code>obj |&gt; slice@(#, 0, 2)</code> kinda works","msgtype":"m.text"},"ts":1643232157116,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_s6tqWt3Th17BpiIy3vevaag7UOZuacddOw7DGyEUFM"},
{"content":{"body":"This is a good point. `f(x)` and `x |> f(#)` are both good at various times.","format":"org.matrix.custom.html","formatted_body":"This is a good point. <code>f(x)</code> and <code>x |&gt; f(#)</code> are both good at various times.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$tjKP3U61tHsHOIRI2MThZi2hij3cLKdShUTQgTVXDrU"}}},"ts":1643232166742,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ziv0iOr5L9xxIRXK4qKkvsFm0QR-DxMSn-aFWThDpzY"},
{"content":{"body":"Sometimes you want verb first; sometimes you want noun first.","msgtype":"m.text"},"ts":1643232180550,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$K3OMNpd05RE39DmHxTh-NR5X2PKvjrApGw5pul6nrro"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1643232184977,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$p904gG8-pB1uc9xcMCBM9mDWfrHEnFGc709eScpJpxM"},
{"content":{"body":"> <@yulia:mozilla.org> i think word order depends on it's context. it is an improvement in some cases\n\n * This is a good point. `f(x)` and `x |> f(#)` are both good at various ti mes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$tjKP3U61tHsHOIRI2MThZi2hij3cLKdShUTQgTVXDrU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i think word order depends on it's context. it is an improvement in some cases</blockquote></mx-reply> * This is a good point. <code>f(x)</code> and <code>x |&gt; f(#)</code> are both good at various ti mes.","m.new_content":{"body":"This is a good point. `f(x)` and `x |> f(#)` are both good at various ti mes.","format":"org.matrix.custom.html","formatted_body":"This is a good point. <code>f(x)</code> and <code>x |&gt; f(#)</code> are both good at various ti mes.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ziv0iOr5L9xxIRXK4qKkvsFm0QR-DxMSn-aFWThDpzY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232203553,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jwWRwAsFJNOdSEoyW_yrvyLSTQJ1Y70ERLC0y3T4hyE"},
{"content":{"body":" * This is a good point. `f(x)` and `x |> f(#)` are both good at various times.","format":"org.matrix.custom.html","formatted_body":" * This is a good point. <code>f(x)</code> and <code>x |&gt; f(#)</code> are both good at various times.","m.new_content":{"body":"This is a good point. `f(x)` and `x |> f(#)` are both good at various times.","format":"org.matrix.custom.html","formatted_body":"This is a good point. <code>f(x)</code> and <code>x |&gt; f(#)</code> are both good at various times.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ziv0iOr5L9xxIRXK4qKkvsFm0QR-DxMSn-aFWThDpzY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643232206851,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$thlbn5D_8zSqs8PsrMmAL3mfCJrSJ0xuCov5H0rHFt4"},
{"content":{"body":"I don't understand why call-this is taken as a viable alternative to bind-op.","msgtype":"m.text"},"ts":1643232208868,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$S5kw1NmQ2WBBx7iIP6MUuQpweE3aeLSE4bbNnn6Mfeo"},
{"content":{"body":"It's the less fluent choice, because we don't want to promote a code style.","msgtype":"m.text"},"ts":1643232237558,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aTB8mhACHWdIJC5yfBEiFXdR-9s12kB8ylzjTtz6QeI"},
{"content":{"body":"let me state my opinion more strongly: muggles (devs who aren't deep into language minutiae) *will never* prefer writing functions that use `this` solely because they can use it with `::`","format":"org.matrix.custom.html","formatted_body":"let me state my opinion more strongly: muggles (devs who aren't deep into language minutiae) <em>will never</em> prefer writing functions that use <code>this</code> solely because they can use it with <code>::</code>","msgtype":"m.text"},"ts":1643232238303,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eqabYfwaON2FTCJab18JRVPhMP5IEw-PsWkB1b3vDqc"},
{"content":{"body":"it just won't happen","msgtype":"m.text"},"ts":1643232245410,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i9aLc8In0aWlMIudhsqfYs6MH5lgRCukDtH2JvJXsW0"},
{"content":{"body":"certainly some rebels will try to do something terrible and clever with that approach! but that doesn't mean it'll go anywhere","msgtype":"m.text"},"ts":1643232268884,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$un7BXVfoksaTvoSZQPEoMx7-5NjmhsjJUWubsrx1vhQ"},
{"content":{"body":"i've seen a whole lot of bind and call","msgtype":"m.text"},"ts":1643232313006,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PbndWRwcSNrsj2DoikXoNOhHUzoxUJjLpiYt5PIdyuU"},
{"content":{"body":"and a lot of people being like \"why is this not the this that it was called on\"","msgtype":"m.text"},"ts":1643232328556,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Di5bQHvz7U9YUh6MUmAbXzdudwlq-1D7W-7jA1mIX7M"},
{"content":{"body":"> <@tabatkins:matrix.org> jschoi: Yes, `obj |> slice@(#, 0, 2)` kinda works\n\n`obj |> slice@(#, 0, 2)` arguably works as well as `obj |> slice(#, 0, 2)` works.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$_s6tqWt3Th17BpiIy3vevaag7UOZuacddOw7DGyEUFM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Yes, <code>obj |&gt; slice@(#, 0, 2)</code> kinda works</blockquote></mx-reply><code>obj |&gt; slice@(#, 0, 2)</code> arguably works as well as <code>obj |&gt; slice(#, 0, 2)</code> works.","m.relates_to":{"m.in_reply_to":{"event_id":"$_s6tqWt3Th17BpiIy3vevaag7UOZuacddOw7DGyEUFM"}},"msgtype":"m.text"},"ts":1643232335344,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QCtJxtkM2OJefvdmOAyLKnkRmUoUGctKea9BkU0kSaA"},
{"content":{"body":"Yes it does, it's just admittedly clearly worse than `obj::slice(0, 2)`","format":"org.matrix.custom.html","formatted_body":"Yes it does, it's just admittedly clearly worse than <code>obj::slice(0, 2)</code>","msgtype":"m.text"},"ts":1643232360341,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7HYKsHEDXlD34JN3YVF79ScEc-A5qrv1xorV3exSieg"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1643232364914,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EjSlPlZ-8BSCWgWFFG3M7OJhJUd-6xNJK5RTv0KRHxY"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1643232368799,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$pydSM4O23xXq02aHZANxEebY7EoBjtgbGy2yUVODb8c"},
{"content":{"body":"i hope we can all agree that all three forms are better than status quo","msgtype":"m.text"},"ts":1643232377607,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tl7QqWCnRwF1vb8Jno4l27bglIWSbIOrucMKHSklGGw"},
{"content":{"body":"and that the third is better than the other two, looking at it in isolation","msgtype":"m.text"},"ts":1643232387940,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QlWQwxoMWx8fKrNQnpvK5FCOsXDj1zvVt7JIi0K8HDA"},
{"content":{"body":"(better, for this use case)","msgtype":"m.text"},"ts":1643232394996,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q-OK50Gs39B7KIUIGv5zriuyffkIJXOueFmMUjbD9lQ"},
{"content":{"body":"i believe we do have the problem pipeline solves: functional chaining. We do have a problem with binding","msgtype":"m.text"},"ts":1643232404356,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$j7ToBzqQ6lh9NrRU-NykTAOffpuOuSscvIH0BZaKfBk"},
{"content":{"body":"oh, i think i misread","msgtype":"m.text"},"ts":1643232416600,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BqM5iAWL3NdoXmMq7LGsQCTUGbZnHiKOZ1QVgE4Bknw"},
{"content":{"body":"i would rather have obj::slice.","msgtype":"m.text"},"ts":1643232439448,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BbpXgEbNG7hbTBtP0U4_HzkgUaOkm0-U7gl-FDTi0bg"},
{"content":{"body":"By function chaining, do you mean nested functions or method chaining?","msgtype":"m.text"},"ts":1643232448147,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5Ef-1jB677dKIoUcvsF8l-i2NEisbUyueYxY7P-EicU"},
{"content":{"body":"I think we will continue to have method chaining (including patching onto the global prototypes) as long as we do not have a bind-op.","msgtype":"m.text"},"ts":1643232496291,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jnNHdCOMEw3o7RvoC0vtHNZ1dZtA7wrG98IpLMJWy5U"},
{"content":{"body":"I would rather not have `::` at all","format":"org.matrix.custom.html","formatted_body":"I would rather not have <code>::</code> at all","msgtype":"m.text"},"ts":1643232512154,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$iv-_byF91Zu9d3v05BNMpHJKCAwME5xIQeVHPiMMblo"},
{"content":{"body":"Pipeline will solve some of it, but the explicit topic token will always be less fluent than a regular method chain.","msgtype":"m.text"},"ts":1643232514651,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Cf7OUhB3tOBU4hwrEdb6qq9B-EytYUwd-GZkYFX7fps"},
{"content":{"body":"So we will continue to see method chaining regarless.","msgtype":"m.text"},"ts":1643232524881,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oKZPpERdswuQpevEuILvTmkYFv6GdBXyTCPXJeYcdwE"},
{"content":{"body":"i mean given\n```\narr\n  .slice(…)\n  .flat(…)\n  ::somethingNew(…)\n  .filter(…)\n```\nvs\n```\narr\n  .slice(…)\n  .flat(…)\n  |> somethingNew@(#, …)\n  .filter(…)\n```\n\nthe former is clearly better to me.","format":"org.matrix.custom.html","formatted_body":"<p>i mean given</p>\n<pre><code>arr\n  .slice(…)\n  .flat(…)\n  ::somethingNew(…)\n  .filter(…)\n</code></pre>\n<p>vs</p>\n<pre><code>arr\n  .slice(…)\n  .flat(…)\n  |&gt; somethingNew@(#, …)\n  .filter(…)\n</code></pre>\n<p>the former is clearly better to me.</p>\n","msgtype":"m.text"},"ts":1643232526159,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lCGqizNYZdSrN0WrBw7Gf9XxWl9o_qaRqP3Ft4pYoQk"},
{"content":{"body":"Is `arrayLike |> Array.slice@(#, 0, 2)` valid?","format":"org.matrix.custom.html","formatted_body":"Is <code>arrayLike |&gt; Array.slice@(#, 0, 2)</code> valid?","msgtype":"m.text"},"ts":1643232537060,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$yMwGboD6SUPBc-joB4yuwMv73kbrKTwOMJAgR8SddTM"},
{"content":{"body":"I think both of those are undesirable, honestly","msgtype":"m.text"},"ts":1643232549700,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$0Xs4KA6_3XnSJuHukN3xKB9lEs7B7vL_ZWOd5OjQKhU"},
{"content":{"body":"Justin Ridgewell: So, right, call-this is intentionally not as \"fluent\" as bind-this in the .call() case, specifically to avoid overlapping with pipeline. It achieves the functionality (terse, reliable .call()) without anything else. Self-binding (aka method extraction) is imo best done by PFA; `obj.method~()` is clearly better than `obj::obj.method`, imo.  Other-binding is the final leftover case, but I think this is (a) the least common of these cases, afaict from the collected data and (b) sufficiently okay to just use arrow functions with - `that=>slice@(that, 0, 2)` seems fine for this.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: So, right, call-this is intentionally not as &quot;fluent&quot; as bind-this in the .call() case, specifically to avoid overlapping with pipeline. It achieves the functionality (terse, reliable .call()) without anything else. Self-binding (aka method extraction) is imo best done by PFA; <code>obj.method~()</code> is clearly better than <code>obj::obj.method</code>, imo.  Other-binding is the final leftover case, but I think this is (a) the least common of these cases, afaict from the collected data and (b) sufficiently okay to just use arrow functions with - <code>that=&gt;slice@(that, 0, 2)</code> seems fine for this.","msgtype":"m.text"},"ts":1643232551775,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ngXKNf7jq1_vQfSfCxvyEhOu6zzYh8sfl4R2q5UBh2g"},
{"content":{"body":"pokute: `Array.slice` doesn't exist, but otherwise yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pokute:matrix.org\">pokute</a>: <code>Array.slice</code> doesn't exist, but otherwise yes","msgtype":"m.text"},"ts":1643232553956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iRdSHl1r213SoNl6iqAZGOfytVBLIWQdrZcCsB5r0wM"},
{"content":{"body":"pokute: yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pokute:matrix.org\">pokute</a>: yes","msgtype":"m.text"},"ts":1643232554695,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oq7QKu15H31v3GGPitP2_CmQVOHU-QJ5z-jC88E6Q1w"},
{"content":{"body":"sarahghp: i do that exact pattern in a ton of libraries, i just break it up because i don't have a chaining affordance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: i do that exact pattern in a ton of libraries, i just break it up because i don't have a chaining affordance","msgtype":"m.text"},"ts":1643232569100,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qsl6B5gxuhM2SI7RTglc1NOpM-M_FBN4iceJTuiIEkY"},
{"content":{"body":"Well, sorry, `Array.slice` is undefined","format":"org.matrix.custom.html","formatted_body":"Well, sorry, <code>Array.slice</code> is undefined","msgtype":"m.text"},"ts":1643232570507,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$mwBI1MN3tFfa4i8EUey1IXXiOWcFEitRXEbUIqzqVdA"},
{"content":{"body":"use `Array.prototype.slice`, and it works","format":"org.matrix.custom.html","formatted_body":"use <code>Array.prototype.slice</code>, and it works","msgtype":"m.text"},"ts":1643232582694,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DjtU611EpEbbbX806WNqHVEh_3jI4-XCFDqMJun50YU"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1643232589713,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QNI7xeEybWFFcFhfWRhgIoQCIY-WNTBR3KNEcLDBY5o"},
{"content":{"body":"Or `[].slice`","format":"org.matrix.custom.html","formatted_body":"Or <code>[].slice</code>","msgtype":"m.text"},"ts":1643232595109,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$70tEFa_wG9QQI4atCDggz480xbCD8G7Pi4vuvtZvdL0"},
{"content":{"body":"Next let's not have optional chaining, because we already have `&&` and regular dot accses...","format":"org.matrix.custom.html","formatted_body":"Next let's not have optional chaining, because we already have <code>&amp;&amp;</code> and regular dot accses...","msgtype":"m.text"},"ts":1643232603150,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RJ4FmjDch-lpFky7oWkqKvhcW2JJIamyf9MyAArgdSQ"}
]