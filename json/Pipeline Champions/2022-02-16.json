[
{"content":{"body":"nicolo-ribaudo published https://github.com/babel/babel/pull/14278. It tries to inline topic references by replacing them with their LHSes when they’re pure. Very cool!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> published https://github.com/babel/babel/pull/14278. It tries to inline topic references by replacing them with their LHSes when they’re pure. Very cool!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo published https://github.com/babel/babel/pull/14278. It tries to inline topic references by replacing them with their LHSes when they’re pure. Very cool!","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> published https://github.com/babel/babel/pull/14278. It tries to inline topic references by replacing them with their LHSes when they’re pure. Very cool!","mimetype":"text/html"}]},"ts":1645028595499,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_dpip3FWVddGnofYXiYn0D1oMX1-YZOF6bPoIdyL6h4"},
{"content":{"body":"I hadn’t known that a `path.isPure` method was already implemented in Babel…","format":"org.matrix.custom.html","formatted_body":"I hadn’t known that a <code>path.isPure</code> method was already implemented in Babel…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I hadn’t known that a `path.isPure` method was already implemented in Babel…","mimetype":"text/plain"},{"body":"I hadn’t known that a <code>path.isPure</code> method was already implemented in Babel…","mimetype":"text/html"}]},"ts":1645028650017,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LWRTzciRE4kC47ZtGWGmJRgUyJGPE7uS8EeJ_jxGGVs"},
{"content":{"body":"We already use it to optimize in multiple places!","msgtype":"m.text","org.matrix.msc1767.text":"We already use it to optimize in multiple places!"},"ts":1645028816277,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$g-L5UvLRo9Rex-G5PZulEDnFxzZOUhnvJeXRVyLFbu8"},
{"content":{"body":"The next step will be to introduce an \"assume that imported bindings are constant\" option, since it's what will help in most cases. Otherwise this code still needs tmp vars:\n```\nimport { map, filter } from \"array\";\nval\n  |> map(#, x => x + 2)\n  |> filter(#, x => x > 3)\n```","format":"org.matrix.custom.html","formatted_body":"<p>The next step will be to introduce an &quot;assume that imported bindings are constant&quot; option, since it's what will help in most cases. Otherwise this code still needs tmp vars:</p>\n<pre><code>import { map, filter } from &quot;array&quot;;\nval\n  |&gt; map(#, x =&gt; x + 2)\n  |&gt; filter(#, x =&gt; x &gt; 3)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The next step will be to introduce an \"assume that imported bindings are constant\" option, since it's what will help in most cases. Otherwise this code still needs tmp vars:\n```\nimport { map, filter } from \"array\";\nval\n  |> map(#, x => x + 2)\n  |> filter(#, x => x > 3)\n```","mimetype":"text/plain"},{"body":"<p>The next step will be to introduce an &quot;assume that imported bindings are constant&quot; option, since it's what will help in most cases. Otherwise this code still needs tmp vars:</p>\n<pre><code>import { map, filter } from &quot;array&quot;;\nval\n  |&gt; map(#, x =&gt; x + 2)\n  |&gt; filter(#, x =&gt; x &gt; 3)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1645028918473,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SNWVT306F0FCaRc9hkf24vVaj0BD_sB5tjDeGfOk490"},
{"content":{"body":"because a call to `map` might change what `filter` is","format":"org.matrix.custom.html","formatted_body":"because a call to <code>map</code> might change what <code>filter</code> is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because a call to `map` might change what `filter` is","mimetype":"text/plain"},{"body":"because a call to <code>map</code> might change what <code>filter</code> is","mimetype":"text/html"}]},"ts":1645028940907,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rWnxIzovrOKK86okv_HiSbolXiYozFOX1aOpiwTEi9c"},
{"content":{"body":" * because a call to `map` might change what `filter` is","format":"org.matrix.custom.html","formatted_body":" * because a call to <code>map</code> might change what <code>filter</code> is","m.new_content":{"body":"because a call to `map` might change what `filter` is","format":"org.matrix.custom.html","formatted_body":"because a call to <code>map</code> might change what <code>filter</code> is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because a call to `map` might change what `filter` is","mimetype":"text/plain"},{"body":"because a call to <code>map</code> might change what <code>filter</code> is","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rWnxIzovrOKK86okv_HiSbolXiYozFOX1aOpiwTEi9c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * because a call to `map` might change what `filter` is","mimetype":"text/plain"},{"body":" * because a call to <code>map</code> might change what <code>filter</code> is","mimetype":"text/html"}]},"ts":1645028952823,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CuFViYpek_FBS0lPb6AfUR-UZDIkxOQJgxqBxbqCwMc"},
{"content":{"body":"I'm interested in which of these assumptions would apply for TypeScript downlevel transformations too.","msgtype":"m.text","org.matrix.msc1767.text":"I'm interested in which of these assumptions would apply for TypeScript downlevel transformations too."},"ts":1645029017076,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$rgQtTf96T5pMst08HXfC7gyIGv72PAEW_Qmy7_kB8_M"},
{"content":{"body":"I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful...","msgtype":"m.text","org.matrix.msc1767.text":"I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful..."},"ts":1645029326759,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$_rzf1oF1XbHJIXzr4x4fePLQn0z-fScvsiBaF9bf7lc"},
{"content":{"body":" * I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful...","m.new_content":{"body":"I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful...","msgtype":"m.text","org.matrix.msc1767.text":"I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful..."},"m.relates_to":{"event_id":"$_rzf1oF1XbHJIXzr4x4fePLQn0z-fScvsiBaF9bf7lc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I wonder if TS has such purity checks too. I guess optimizing even literals would be helpful..."},"ts":1645029335896,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$89r7-zeomW-98dJT_L0K4ERhnyV8Z9X1Skgo-5INOAo"},
{"content":{"body":"Ah the purity constraint is because of the swapped order of evaluation, interesting","msgtype":"m.text"},"ts":1645050889058,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$beEC2Opf0a4jJ4dxIVK61cqE5n3cooASpX-FBpp6Oj4"}
]