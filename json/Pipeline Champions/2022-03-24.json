[
{"content":{"body":"jschoi: I'm reading your slides, and at slide 6 there is a `#` that probably should be a `@`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I'm reading your slides, and at slide 6 there is a <code>#</code> that probably should be a <code>@</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: I'm reading your slides, and at slide 6 there is a `#` that probably should be a `@`","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I'm reading your slides, and at slide 6 there is a <code>#</code> that probably should be a <code>@</code>","mimetype":"text/html"}]},"ts":1648145754052,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Z1pjh3noGMmsjGo52iy0KjaiWdGgAPC-R5Qzj5PkV2Y"},
{"content":{"body":"the auto-cooldown bot worked well","msgtype":"m.text"},"ts":1648148064763,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mWjHvSXCH249O_tfhjF_NA_QxfP13w_FD4cVMjPFkp8"},
{"content":{"body":"did the bot trigger recently? or is this just a historic observation?","msgtype":"m.text","org.matrix.msc1767.text":"did the bot trigger recently? or is this just a historic observation?"},"ts":1648149943803,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dfR2qlDTUJ5pkrLKNRNreOkcXYmFJ0pg6vQw6jcc0KU"},
{"content":{"body":"It triggered on the topic bikeshed issue","msgtype":"m.text","org.matrix.msc1767.text":"It triggered on the topic bikeshed issue"},"ts":1648153065480,"senderName":"James DiGioia (mAAdhaTTah on GH)","senderId":"@jamesdigioia:matrix.org","id":"$xMRnIlGXdUa0EJA4OTzkuZk0MFTxwrjFABWIs4kaUdA"},
{"content":{"body":" * It triggered on the topic bikeshed issue","m.new_content":{"body":"It triggered on the topic bikeshed issue","msgtype":"m.text","org.matrix.msc1767.text":"It triggered on the topic bikeshed issue"},"m.relates_to":{"event_id":"$xMRnIlGXdUa0EJA4OTzkuZk0MFTxwrjFABWIs4kaUdA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It triggered on the topic bikeshed issue"},"ts":1648153070634,"senderName":"James DiGioia (mAAdhaTTah on GH)","senderId":"@jamesdigioia:matrix.org","id":"$59D5Di8n6lMcSstDRng73aByiMTnbaBR5p6tPtty0L8"},
{"content":{"body":"Ah, I'm not sure how I didn't see that, thanks","msgtype":"m.text","org.matrix.msc1767.text":"Ah, I'm not sure how I didn't see that, thanks"},"ts":1648154943448,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CQPxUBoFlr6Gqg5CLBR8XpPvTAEn74UH-IhLczAhPfI"},
{"content":{"body":"And yup, that is *precisely* what that bot was installed for, hell yeah","format":"org.matrix.custom.html","formatted_body":"And yup, that is <em>precisely</em> what that bot was installed for, hell yeah","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And yup, that is *precisely* what that bot was installed for, hell yeah","mimetype":"text/plain"},{"body":"And yup, that is <em>precisely</em> what that bot was installed for, hell yeah","mimetype":"text/html"}]},"ts":1648155390056,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4vEx4RXhosalAXPcNbAVbZW1AM-hGJx74EIPqQ5Tat8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> jschoi: I'm reading your slides, and at slide 6 there is a `#` that probably should be a `@`\n\nWhich slideshow—the pipe one?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Z1pjh3noGMmsjGo52iy0KjaiWdGgAPC-R5Qzj5PkV2Y\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I'm reading your slides, and at slide 6 there is a <code>#</code> that probably should be a <code>@</code></blockquote></mx-reply>Which slideshow—the pipe one?","m.relates_to":{"m.in_reply_to":{"event_id":"$Z1pjh3noGMmsjGo52iy0KjaiWdGgAPC-R5Qzj5PkV2Y"}},"msgtype":"m.text"},"ts":1648155618621,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$N0Ibw5Z8w7NUue45VrD5XRAqvYPi5ZkBLWIrVFWGagM"},
{"content":{"body":"Yes","msgtype":"m.text","org.matrix.msc1767.text":"Yes"},"ts":1648155629740,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DNerOlL7Ehp9rdDeAVXAhGx8HxGVOFkanVCHxCRiWTI"},
{"content":{"body":"Where you show ASI","msgtype":"m.text","org.matrix.msc1767.text":"Where you show ASI"},"ts":1648155635572,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aPPpH3SRyW2vuaCKaohvJDS_BH2-0eFhNW3fX5RhwLs"},
{"content":{"body":"> <@jamesdigioia:matrix.org> It triggered on the topic bikeshed issue\n\nOh no, what happened, haha…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24xMRnIlGXdUa0EJA4OTzkuZk0MFTxwrjFABWIs4kaUdA\">In reply to</a> <a href=\"https://matrix.to/#/@jamesdigioia:matrix.org\">@jamesdigioia:matrix.org</a><br>It triggered on the topic bikeshed issue</blockquote></mx-reply>Oh no, what happened, haha…","m.relates_to":{"m.in_reply_to":{"event_id":"$xMRnIlGXdUa0EJA4OTzkuZk0MFTxwrjFABWIs4kaUdA"}},"msgtype":"m.text"},"ts":1648155638263,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VeiDyYI_ekE6hUCYOeKi8DCa4gCu-NL82llAZ-ppU1E"},
{"content":{"body":"People are mad Jordan is blocking valid identifiers","msgtype":"m.text","org.matrix.msc1767.text":"People are mad Jordan is blocking valid identifiers"},"ts":1648155669229,"senderName":"James DiGioia (mAAdhaTTah on GH)","senderId":"@jamesdigioia:matrix.org","id":"$X8oPSFEtLIuVoZMOSHw_jb4BQZyz2EEL5vvgmPYAdek"},
{"content":{"body":" * People are mad Jordan is blocking valid identifiers","m.new_content":{"body":"People are mad Jordan is blocking valid identifiers","msgtype":"m.text","org.matrix.msc1767.text":"People are mad Jordan is blocking valid identifiers"},"m.relates_to":{"event_id":"$X8oPSFEtLIuVoZMOSHw_jb4BQZyz2EEL5vvgmPYAdek","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * People are mad Jordan is blocking valid identifiers"},"ts":1648155717885,"senderName":"James DiGioia (mAAdhaTTah on GH)","senderId":"@jamesdigioia:matrix.org","id":"$6JUowGWarjaHk2-almHErsm1u7d9hsArTTBT_MsK588"},
{"content":{"body":"Ah, I see. Well, I’m glad I wrote that bot, then……","msgtype":"m.text"},"ts":1648155746091,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$p90crPl01IeZvFGN5Gj2yxqmtlZAla6txv1WNMXNqsg"},
{"content":{"body":"…Maybe we should unlock it tomorrow or something.","msgtype":"m.text"},"ts":1648155795371,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XB337hTQCSd_k-EqaNunzTUl-0ITo9oLGMpWnxIrbJk"},
{"content":{"body":"* Ah, I see. Well, I’m glad the bot worked, then……","m.new_content":{"body":"Ah, I see. Well, I’m glad the bot worked, then……","msgtype":"m.text"},"m.relates_to":{"event_id":"$p90crPl01IeZvFGN5Gj2yxqmtlZAla6txv1WNMXNqsg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648155938271,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8tj7OdcONUNzEJUNRTo0HDQRmvR7SHOr2Sp99Fvt-xc"},
{"content":{"body":"nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/html"}]},"ts":1648156078715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bPNa4BxStLOVT1fbviGp1-x_DUhksSyHPCUnIfZk57k"},
{"content":{"body":" * nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","m.new_content":{"body":"nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$bPNa4BxStLOVT1fbviGp1-x_DUhksSyHPCUnIfZk57k","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * nicolo-ribaudo: I see it now; thank you; fixed!\nI think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I see it now; thank you; fixed!<br>I think https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1077038247 has a good point in that this is analogous to the ASI hazard with class fields without semicolons. We might want to make this case an early error to force developers to use parentheses if they don’t want to use semicolons.","mimetype":"text/html"}]},"ts":1648156084559,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zIlr__828_cuYMGonRlVjR0Rg6ITc_WYiOmrMFvnpiU"},
{"content":{"body":"Or force them to use semicolons! (/s ?)","msgtype":"m.text","org.matrix.msc1767.text":"Or force them to use semicolons! (/s ?)"},"ts":1648156143015,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fm9OoIQm-Z2mxrDyfl7WvewrC_c-zIQ2ovOG3fRGxZs"},
{"content":{"body":"While I'm generally quite strongly on the side of \"just use semicolons you weirdos\", that example of ending a pipe by calling the topic, and then having a class as the next expression, does seem kinda bad. It's not killer - if the committee decided it was okay and worth being able to have a single-character topic, I def wouldn't block - but it's less than ideal I think.","msgtype":"m.text","org.matrix.msc1767.text":"While I'm generally quite strongly on the side of \"just use semicolons you weirdos\", that example of ending a pipe by calling the topic, and then having a class as the next expression, does seem kinda bad. It's not killer - if the committee decided it was okay and worth being able to have a single-character topic, I def wouldn't block - but it's less than ideal I think."},"ts":1648158787084,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5IBZiGov9eTApD0ZPliy6xe3x_GbxrQrtrYTl2Iddu4"},
{"content":{"body":"nicolo-ribaudo, TabAtkins: I just updated the slide with that ASI example (#6); please take a look and give your feedback on the updated slide when you’re able to. \nI’m okay with making it an early error and forcing developers to be explicit. Developers who do not want to use semicolons can just parenthesize.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>, <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I just updated the slide with that ASI example (#6); please take a look and give your feedback on the updated slide when you’re able to.<br>I’m okay with making it an early error and forcing developers to be explicit. Developers who do not want to use semicolons can just parenthesize.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo, TabAtkins: I just updated the slide with that ASI example (#6); please take a look and give your feedback on the updated slide when you’re able to. \nI’m okay with making it an early error and forcing developers to be explicit. Developers who do not want to use semicolons can just parenthesize.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>, <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I just updated the slide with that ASI example (#6); please take a look and give your feedback on the updated slide when you’re able to.<br>I’m okay with making it an early error and forcing developers to be explicit. Developers who do not want to use semicolons can just parenthesize.","mimetype":"text/html"}]},"ts":1648158996937,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1V2x0fmElWuCN7VP4NJja18tQqSoLY7Gcu6MrSBUyb0"},
{"content":{"body":"```js\nx |>\n  @(foo)\n  class C {}\n```\n…would already be an early error. The anti-semicolon developer must explicitly specify:\n```js\nx |> (\n  @(foo)\n)\nclass C {}\n```\n…or\n```js\nx |> (\n  @(foo)\n  class C { x = @; } // The pipe body must have a topic reference!\n)\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt;\n  @(foo)\n  class C {}\n</code></pre>\n<p>…would already be an early error. The anti-semicolon developer must explicitly specify:</p>\n<pre><code class=\"language-js\">x |&gt; (\n  @(foo)\n)\nclass C {}\n</code></pre>\n<p>…or</p>\n<pre><code class=\"language-js\">x |&gt; (\n  @(foo)\n  class C { x = @; } // The pipe body must have a topic reference!\n)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nx |>\n  @(foo)\n  class C {}\n```\n…would already be an early error. The anti-semicolon developer must explicitly specify:\n```js\nx |> (\n  @(foo)\n)\nclass C {}\n```\n…or\n```js\nx |> (\n  @(foo)\n  class C { x = @; } // The pipe body must have a topic reference!\n)\n```\n\n","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">x |&gt;\n  @(foo)\n  class C {}\n</code></pre>\n<p>…would already be an early error. The anti-semicolon developer must explicitly specify:</p>\n<pre><code class=\"language-js\">x |&gt; (\n  @(foo)\n)\nclass C {}\n</code></pre>\n<p>…or</p>\n<pre><code class=\"language-js\">x |&gt; (\n  @(foo)\n  class C { x = @; } // The pipe body must have a topic reference!\n)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648159089798,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HXVTxjM1H0ciR0iyHgM0FiTTDTFdVqNGu81JpvDh1bA"},
{"content":{"body":"so an early error to have a non-parenthesized decorated class in a pipeline body? works for me","msgtype":"m.text","org.matrix.msc1767.text":"so an early error to have a non-parenthesized decorated class in a pipeline body? works for me"},"ts":1648159093203,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3ZYf7EWxaleKOtVAnGCapd0yHKguci2vnX_ACsDEmDc"},
{"content":{"body":"Great. And I think we should be encouraging developers to keep pipe bodies simple anyway……","msgtype":"m.text","org.matrix.msc1767.text":"Great. And I think we should be encouraging developers to keep pipe bodies simple anyway……"},"ts":1648159133275,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oPOi1_L5Tbjt5oLBxkVVeyqQgcuqDFBV0y4k2jZRD50"},
{"content":{"body":"def","msgtype":"m.text","org.matrix.msc1767.text":"def"},"ts":1648159240198,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pQcXhdvDLrw2Vw4XH_pBrMnZfFLOc7y5FWpbeyvkvWw"},
{"content":{"body":"…Come to think of it, I’m uncertain whether ASI would have happened anyway even without a special early error.\n```js\nx |> @(foo)\nclass C {}\n```\nI’m…not sure if this fulfills any of the three ASI criteria…","format":"org.matrix.custom.html","formatted_body":"<p>…Come to think of it, I’m uncertain whether ASI would have happened anyway even without a special early error.</p>\n<pre><code class=\"language-js\">x |&gt; @(foo)\nclass C {}\n</code></pre>\n<p>I’m…not sure if this fulfills any of the three ASI criteria…</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"…Come to think of it, I’m uncertain whether ASI would have happened anyway even without a special early error.\n```js\nx |> @(foo)\nclass C {}\n```\nI’m…not sure if this fulfills any of the three ASI criteria…","mimetype":"text/plain"},{"body":"<p>…Come to think of it, I’m uncertain whether ASI would have happened anyway even without a special early error.</p>\n<pre><code class=\"language-js\">x |&gt; @(foo)\nclass C {}\n</code></pre>\n<p>I’m…not sure if this fulfills any of the three ASI criteria…</p>\n","mimetype":"text/html"}]},"ts":1648159856921,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HN2K7lbKHGiu9P-3lIYttpjuO5FI5U68iTueuqV9bdw"},
{"content":{"body":"…But, without ASI, this would be an early error anyway, because then there is no topic reference in the pipe body `@(foo)«newline»class C {}`.","format":"org.matrix.custom.html","formatted_body":"…But, without ASI, this would be an early error anyway, because then there is no topic reference in the pipe body <code>@(foo)«newline»class C {}</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"…But, without ASI, this would be an early error anyway, because then there is no topic reference in the pipe body `@(foo)«newline»class C {}`.","mimetype":"text/plain"},{"body":"…But, without ASI, this would be an early error anyway, because then there is no topic reference in the pipe body <code>@(foo)«newline»class C {}</code>.","mimetype":"text/html"}]},"ts":1648159880600,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rHwPOzJihGkshaxiG3uM5Vtt6UM82w6_RxmypIlQmAc"},
{"content":{"body":"I wonder if records & tuples considered\t`\t{{ }}` and `{[ ]}`. The second form would require a cover grammar, but it's visually distinct:\n\n```\nconst rec = {{ x: 1, y: 2 }};\nconst tuple = {[1, 2, 3]};\n```","format":"org.matrix.custom.html","formatted_body":"<p>I wonder if records &amp; tuples considered\t<code>\t{{ }}</code> and <code>{[ ]}</code>. The second form would require a cover grammar, but it's visually distinct:</p>\n<pre><code>const rec = {{ x: 1, y: 2 }};\nconst tuple = {[1, 2, 3]};\n</code></pre>","msgtype":"m.text"},"ts":1648159984720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2zmTkgRR1HFiEpQ3ZBAtms04DrQ-OdHGnIqAhx1ddTg"},
{"content":{"body":"too bad [[...]] doesn't work","msgtype":"m.text","org.matrix.msc1767.text":"too bad [[...]] doesn't work"},"ts":1648160137738,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZeNm9_PeG-snc58-9k6l3P3YmircSF6RuDpYcZPjJWU"},
{"content":{"body":"Time to bring in non-ASCII brackets.","msgtype":"m.text","org.matrix.msc1767.text":"Time to bring in non-ASCII brackets."},"ts":1648160234177,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cqeRd9cNKNRJJs4pd7HhBzfFbrI_upOoAWokaCkl4C8"},
{"content":{"body":"https://en.wikipedia.org/wiki/Bracket_(mathematics)#Symbols_for_representing_angle_brackets","msgtype":"m.text","org.matrix.msc1767.text":"https://en.wikipedia.org/wiki/Bracket_(mathematics)#Symbols_for_representing_angle_brackets"},"ts":1648160319807,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uNB-7nm_7A-tsSTDAxL2vvoaRxv2Yf20JAWFqy-hv9o"},
{"content":{"body":"I'd considered something like `{+}`, `{-}`, etc. for an \"operator functions\" proposal, though I'm unsure if it would be well received, but it was heavily predicated on PFA:\n\n```\nsum = ar \n  |> map(##, {*} 2)\n  |> reduceLeft(##, {+})\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'd considered something like <code>{+}</code>, <code>{-}</code>, etc. for an &quot;operator functions&quot; proposal, though I'm unsure if it would be well received, but it was heavily predicated on PFA:</p>\n<pre><code>sum = ar \n  |&gt; map(##, {*} 2)\n  |&gt; reduceLeft(##, {+})\n</code></pre>","msgtype":"m.text"},"ts":1648160336332,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$reLbf44nYo-bSWmn62HJLhbUdHs5nEcLkyiGKG4l7Kk"},
{"content":{"body":"It can be implemented in userland without syntax, though, which lessens its necessity","msgtype":"m.text"},"ts":1648160444213,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qU5HZfsdvEguow7gcX7KhW6gGgB6qPSiMYvUDySoHcc"},
{"content":{"body":"I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…","msgtype":"m.text","org.matrix.msc1767.text":"I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…"},"ts":1648160457016,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Asn8AXlh4v6hWzsnQ9wFZPCNSXzm8GmFnUlncq9fqJM"},
{"content":{"body":" * I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…","m.new_content":{"body":"I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…","msgtype":"m.text","org.matrix.msc1767.text":"I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…"},"m.relates_to":{"event_id":"$Asn8AXlh4v6hWzsnQ9wFZPCNSXzm8GmFnUlncq9fqJM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I remember that. It’s a cool idea, though, yes, I don’t know if expected usage would be widespread enough to persuade the Committee.\nI’m reminded of Perl 6’s hyperoperators: «+», «*», etc…"},"ts":1648160464580,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3yuOrNQbbPSWTCwZMV3FeEADi0RhSjp4o1fw-gACyPs"},
{"content":{"body":"* It can be implemented in userland without syntax, though, which lessens its necessity","m.new_content":{"body":"It can be implemented in userland without syntax, though, which lessens its necessity","msgtype":"m.text"},"m.relates_to":{"event_id":"$qU5HZfsdvEguow7gcX7KhW6gGgB6qPSiMYvUDySoHcc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648160476595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XY-t7Hc4w39zqP8aHEf0UZgtGyH2i71kbuQD3YcX1pw"},
{"content":{"body":"It made more sense with F# pipes and PFA. Even more sense with some kind of dot-compose operator for function composition. ","format":"org.matrix.custom.html","formatted_body":"It made more sense with F# pipes and PFA. Even more sense with some kind of dot-compose operator for function composition.","msgtype":"m.text"},"ts":1648160525195,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GiUvfxDxUAPsJSV1AHAw2W1uxELJ_hODNxsqR9SDUOE"},
{"content":{"body":"(i.e., `{.}` for compose) ","format":"org.matrix.custom.html","formatted_body":"(i.e., <code>{.}</code> for compose)","msgtype":"m.text"},"ts":1648160569884,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UgcncHEvL2h4XKUXztynhKhf3yJX0XCw90ADKG2mHGc"},
{"content":{"body":"The design was based on how F# operators work. ","format":"org.matrix.custom.html","formatted_body":"The design was based on how F# operators work.","msgtype":"m.text"},"ts":1648160611775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NftpCcotWMzrw8MXMQBVjy9cWoAsSrnqSuOZPtoOoyw"},
{"content":{"body":"I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. ","msgtype":"m.text","org.matrix.msc1767.text":"I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. "},"ts":1648160662033,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5t2Fuc19WjQcY2k8w6GMREFwE3JX1aLel3D616viquI"},
{"content":{"body":" * I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. ","m.new_content":{"body":"I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. ","msgtype":"m.text","org.matrix.msc1767.text":"I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. "},"m.relates_to":{"event_id":"$5t2Fuc19WjQcY2k8w6GMREFwE3JX1aLel3D616viquI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I think maybe the biggest fundamental impedance mismatch, in the end, from adapting those patterns comes from the fact that JS is an n-ary functional language, not a currying unary functional language like Haskell…The PFA syntax was an admirable effort at bridging that difference, though. "},"ts":1648160668464,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$F9r97xyhWb8vlZQ8IyIy8GfVHhZYZLf5iMEKMM6jBAE"}
]