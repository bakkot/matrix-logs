[
{"content":{"body":"I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","msgtype":"m.text"},"ts":1657719736663,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dfxVWZp50sB-Oe9Sim8rQcUxrNoJmH848aRwQ1mzCr8"},
{"content":{"body":"* I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"* I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","m.new_content":{"body":"I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$dfxVWZp50sB-Oe9Sim8rQcUxrNoJmH848aRwQ1mzCr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657719833420,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fUWw-inEsfF3ZAJtT3LxrLHNA0EG60QrkFiokIl909g"},
{"content":{"body":"Isn't `~~(n) ` still valid JS? I don't think doubling is a solution. ","format":"org.matrix.custom.html","formatted_body":"Isn't <code>~~(n) </code> still valid JS? I don't think doubling is a solution.","msgtype":"m.text"},"ts":1657721607310,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$CkQTYTPvGiickZY5KsrRuxCOE0_Taas-9jHX7yJHNu8"},
{"content":{"body":"Youâ€™re right; no doubled prefixes allowed.","msgtype":"m.text"},"ts":1657728292641,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$t938hL5GkDUgbPlg0laZoszLEesrhjKBAp4A20ffI4c"},
{"content":{"body":"Yeah double binaries is good, double unaries isn't.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah double binaries is good, double unaries isn't."},"ts":1657731264847,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0vA4Z1LxZe1Emdn9aiVtqf3RSSkI8yvGgzzt2kshUT4"},
{"content":{"body":"`#~` though? ;)","format":"org.matrix.custom.html","formatted_body":"<code>#~</code> though? ;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`#~` though? ;)","mimetype":"text/plain"},{"body":"<code>#~</code> though? ;)","mimetype":"text/html"}]},"ts":1657734078623,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UopBeNYn3fcgeBGBjiBkTsJRi_rO72G9Xsw7ltNmcCk"},
{"content":{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"ts":1657736789970,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Sbq2h-eZO32f5ZesjIBRAN9Is2WvjxB01DX9VALFwFI"},
{"content":{"body":" * Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":" * <p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","m.new_content":{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Sbq2h-eZO32f5ZesjIBRAN9Is2WvjxB01DX9VALFwFI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":" * <p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"ts":1657736834559,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$auhfjTSGosCYezWD2C7vVSViYM0hXI6tG2RcqRDaD9s"},
{"content":{"body":"(especially since I already wrote one 7 years ago for TS decorators while exploring the feature, though I never published it)","msgtype":"m.text","org.matrix.msc1767.text":"(especially since I already wrote one 7 years ago for TS decorators while exploring the feature, though I never published it)"},"ts":1657736893697,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$jOJbxCv9nDIVMZ2fyLJMLgj6RNyoZSLm3-QP3EDaZIE"},
{"content":{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion","format":"org.matrix.custom.html","formatted_body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion","mimetype":"text/plain"},{"body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion","mimetype":"text/html"}]},"ts":1657739396333,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nYU5ApkXza1XEf3G9STOB22bO54q2CuvvPWFlLZC-Hc"},
{"content":{"body":" * presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","format":"org.matrix.custom.html","formatted_body":" * presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","m.new_content":{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","format":"org.matrix.custom.html","formatted_body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/plain"},{"body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nYU5ApkXza1XEf3G9STOB22bO54q2CuvvPWFlLZC-Hc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/plain"},{"body":" * presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/html"}]},"ts":1657739426334,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wfO8O97HyPId6vF5ErcjjqBUzzNdtm3koXsOfgs9X7I"},
{"content":{"body":"what's interesting about unaries though is that they don't warrant a separate pipe","msgtype":"m.text","org.matrix.msc1767.text":"what's interesting about unaries though is that they don't warrant a separate pipe"},"ts":1657739785516,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$MHl9CCXOPO7pX8XuxMz050RFb22ulKjrxX1MLFuEBXQ"},
{"content":{"body":"Yes. TS compiler wants to use pipes and we internally use bitmasks, so we would be strongly against banning `~` or `^` inside a pipe","format":"org.matrix.custom.html","formatted_body":"Yes. TS compiler wants to use pipes and we internally use bitmasks, so we would be strongly against banning <code>~</code> or <code>^</code> inside a pipe","msgtype":"m.text"},"ts":1657739811084,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$aRnZtfdJ9_B4gYp1cMxVrqE7oov04_m8TYexOMIf3_c"},
{"content":{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"ts":1657739840837,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$vMG1tNuUgly_fpZQEMvhKSjnsTmeYx10t86DwT4p774"},
{"content":{"body":" * i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":" * i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","m.new_content":{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vMG1tNuUgly_fpZQEMvhKSjnsTmeYx10t86DwT4p774","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":" * i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"ts":1657739862634,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ywlRJc2kSvRKJeHJnoZ_M_TXOA7CIWa2_3Eyqdlssj0"},
{"content":{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n```js\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~ + 1]; // least upper bound\n```\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).\n","format":"org.matrix.custom.html","formatted_body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~ + 1]; // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n```js\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~ + 1]; // least upper bound\n```\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).\n","mimetype":"text/plain"},{"body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~ + 1]; // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","mimetype":"text/html"}]},"ts":1657740438282,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$4w5r-1kwmk4ZtzcbqtRk6xAFTeuKCTy7nIVgmEapaTk"},
{"content":{"body":"I much prefer the readability of an identifier here:\n```js\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it + 1]; // least upper bound\n```","format":"org.matrix.custom.html","formatted_body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it + 1]; // least upper bound\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I much prefer the readability of an identifier here:\n```js\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it + 1]; // least upper bound\n```","mimetype":"text/plain"},{"body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it + 1]; // least upper bound\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657740552832,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$c4pdcz4IM31j_bjuxB-o3AcKBWVTuzLjtbcR3Wz2XEQ"},
{"content":{"body":"Though we're much more likely to see the topic used with `~` in less ambiguous cases such as in the call to `setEmitFlags` below:\n```js\nreturn factory.createBinaryExpression(...)\n  |> setOriginalNode(~, node)\n  |> setSourceMapRange(~, { pos: ..., end: ... })\n  |> setEmitFlags(~, getEmitFlags(node) & ~EmitFlags.NoComments);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Though we're much more likely to see the topic used with <code>~</code> in less ambiguous cases such as in the call to <code>setEmitFlags</code> below:</p>\n<pre><code class=\"language-js\">return factory.createBinaryExpression(...)\n  |&gt; setOriginalNode(~, node)\n  |&gt; setSourceMapRange(~, { pos: ..., end: ... })\n  |&gt; setEmitFlags(~, getEmitFlags(node) &amp; ~EmitFlags.NoComments);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though we're much more likely to see the topic used with `~` in less ambiguous cases such as in the call to `setEmitFlags` below:\n```js\nreturn factory.createBinaryExpression(...)\n  |> setOriginalNode(~, node)\n  |> setSourceMapRange(~, { pos: ..., end: ... })\n  |> setEmitFlags(~, getEmitFlags(node) & ~EmitFlags.NoComments);\n```","mimetype":"text/plain"},{"body":"<p>Though we're much more likely to see the topic used with <code>~</code> in less ambiguous cases such as in the call to <code>setEmitFlags</code> below:</p>\n<pre><code class=\"language-js\">return factory.createBinaryExpression(...)\n  |&gt; setOriginalNode(~, node)\n  |&gt; setSourceMapRange(~, { pos: ..., end: ... })\n  |&gt; setEmitFlags(~, getEmitFlags(node) &amp; ~EmitFlags.NoComments);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657740759928,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$P2o6YH2M-yTxotjqbsRCgiX7EBRU4iLtuVeOolfiO6o"},
{"content":{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","format":"org.matrix.custom.html","formatted_body":"For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","mimetype":"text/plain"},{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","mimetype":"text/html"}]},"ts":1657741219606,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RlHvNYM0LC0XQtRy8XfPsHlK3fds4eONFSpYRdfjr-o"},
{"content":{"body":" * For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","format":"org.matrix.custom.html","formatted_body":" * For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","m.new_content":{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","format":"org.matrix.custom.html","formatted_body":"For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","mimetype":"text/plain"},{"body":"For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$RlHvNYM0LC0XQtRy8XfPsHlK3fds4eONFSpYRdfjr-o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For what itâ€™s worth, I am slowly coming around to using an identifier.\nBut I think that it really ought to be considered a contextual keyword like `await` and `yield`.\nThe keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use `await` and `yield` as ordinary variables.","mimetype":"text/plain"},{"body":" * For what itâ€™s worth, I am slowly coming around to using an identifier.<br>But I think that it really ought to be considered a contextual keyword like <code>await</code> and <code>yield</code>.<br>The keyword would be something that, from now on, we would discourage developers from using as an ordinary variable, just like how developers should not use <code>await</code> and <code>yield</code> as ordinary variables.","mimetype":"text/html"}]},"ts":1657741228533,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tawn5uHfJ2R_gIp52MeDpMRKXlFtQIxCE5apPXVaTDA"},
{"content":{"body":" * Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n\n```js\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~ + 1]); // least upper bound\n```\n\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).","format":"org.matrix.custom.html","formatted_body":" * <p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~ + 1]); // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","m.new_content":{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n\n```js\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~ + 1]); // least upper bound\n```\n\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).","format":"org.matrix.custom.html","formatted_body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~ + 1]); // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n\n```js\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~ + 1]); // least upper bound\n```\n\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).","mimetype":"text/plain"},{"body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~ + 1]); // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4w5r-1kwmk4ZtzcbqtRk6xAFTeuKCTy7nIVgmEapaTk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n\n```js\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |> (~ >= 0 ? array[~] : array[~~ + 1]); // least upper bound\n```\n\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).","mimetype":"text/plain"},{"body":" * <p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~]); // greatest lower bound\nbinarySearch(array, value) |&gt; (~ &gt;= 0 ? array[~] : array[~~ + 1]); // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","mimetype":"text/html"}]},"ts":1657741235518,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$kQHS_Q9Effx3K4DNqOjBub13BQbqX951fyXk-X9_RB4"},
{"content":{"body":" * I much prefer the readability of an identifier here:\n\n```js\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it + 1]); // least upper bound\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it + 1]); // least upper bound\n</code></pre>\n","m.new_content":{"body":"I much prefer the readability of an identifier here:\n\n```js\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it + 1]); // least upper bound\n```","format":"org.matrix.custom.html","formatted_body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it + 1]); // least upper bound\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I much prefer the readability of an identifier here:\n\n```js\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it + 1]); // least upper bound\n```","mimetype":"text/plain"},{"body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it + 1]); // least upper bound\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$c4pdcz4IM31j_bjuxB-o3AcKBWVTuzLjtbcR3Wz2XEQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I much prefer the readability of an identifier here:\n\n```js\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |> (it >= 0 ? array[it] : array[~it + 1]); // least upper bound\n```","mimetype":"text/plain"},{"body":" * <p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it]); // greatest lower bound\nbinarySearch(array, value) |&gt; (it &gt;= 0 ? array[it] : array[~it + 1]); // least upper bound\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657741253206,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$TI2TliJ8_voRdZvh_sbxGArHPYl8lzeLqzsqjJvtBaI"},
{"content":{"body":"If that's the case, I'd go for something like `$_` or `$$`. I've seen `__` used too often for unused parameters, i.e. `f((_, __, x) => { ... })`","format":"org.matrix.custom.html","formatted_body":"If that's the case, I'd go for something like <code>$_</code> or <code>$$</code>. I've seen <code>__</code> used too often for unused parameters, i.e. <code>f((_, __, x) =&gt; { ... })</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If that's the case, I'd go for something like `$_` or `$$`. I've seen `__` used too often for unused parameters, i.e. `f((_, __, x) => { ... })`","mimetype":"text/plain"},{"body":"If that's the case, I'd go for something like <code>$_</code> or <code>$$</code>. I've seen <code>__</code> used too often for unused parameters, i.e. <code>f((_, __, x) =&gt; { ... })</code>","mimetype":"text/html"}]},"ts":1657741322015,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$7t9f0tcLGvOIOXoNqRUGzSaMVlz872mrYP741ED1sj8"},
{"content":{"body":"```js\nbinarySearch(array, value) |> ($$ >= 0 ? array[$$] : array[~$$ + 1]);\nbinarySearch(array, value) |> (__ >= 0 ? array[__] : array[~__ + 1]);\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ($$ &gt;= 0 ? array[$$] : array[~$$ + 1]);\nbinarySearch(array, value) |&gt; (__ &gt;= 0 ? array[__] : array[~__ + 1]);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nbinarySearch(array, value) |> ($$ >= 0 ? array[$$] : array[~$$ + 1]);\nbinarySearch(array, value) |> (__ >= 0 ? array[__] : array[~__ + 1]);\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ($$ &gt;= 0 ? array[$$] : array[~$$ + 1]);\nbinarySearch(array, value) |&gt; (__ &gt;= 0 ? array[__] : array[~__ + 1]);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657741323802,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7gH8FmOqC6ZHXDWwU45RZxWqipb9J3SDo1bLinpPaBk"},
{"content":{"body":"Right, that makes sense.","msgtype":"m.text","org.matrix.msc1767.text":"Right, that makes sense."},"ts":1657741333347,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VBCzP21zG-fHdIwanB49XxaqaK_WLh-I-iEjOCR-yUE"},
{"content":{"body":"I generally prefer `$_` over `$$` despite it being a bit tricker to type, since `_` often indicates a placeholder in multiple languages, and there's precedent in many shell scripts and some languages for `$_`.","format":"org.matrix.custom.html","formatted_body":"I generally prefer <code>$_</code> over <code>$$</code> despite it being a bit tricker to type, since <code>_</code> often indicates a placeholder in multiple languages, and there's precedent in many shell scripts and some languages for <code>$_</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I generally prefer `$_` over `$$` despite it being a bit tricker to type, since `_` often indicates a placeholder in multiple languages, and there's precedent in many shell scripts and some languages for `$_`.","mimetype":"text/plain"},{"body":"I generally prefer <code>$_</code> over <code>$$</code> despite it being a bit tricker to type, since <code>_</code> often indicates a placeholder in multiple languages, and there's precedent in many shell scripts and some languages for <code>$_</code>.","mimetype":"text/html"}]},"ts":1657741403725,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$1ShzZ8rrqSv2OPvYc1u6MpgNrLK47jAR0kvZ6sEMwkA"},
{"content":{"body":"Plus editors can easily offer a completion for `$_` on the right of a `|>`, so its more likely someone just does `$<tab>`","format":"org.matrix.custom.html","formatted_body":"Plus editors can easily offer a completion for <code>$_</code> on the right of a <code>|&gt;</code>, so its more likely someone just does <code>$&lt;tab&gt;</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Plus editors can easily offer a completion for `$_` on the right of a `|>`, so its more likely someone just does `$<tab>`","mimetype":"text/plain"},{"body":"Plus editors can easily offer a completion for <code>$_</code> on the right of a <code>|&gt;</code>, so its more likely someone just does <code>$&lt;tab&gt;</code>","mimetype":"text/html"}]},"ts":1657741547348,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$lDgWqp1yaU2AeDF-tq-ocVCDLnR5mZe4rp9nyF1mCNY"},
{"content":{"body":"yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","format":"org.matrix.custom.html","formatted_body":"yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","mimetype":"text/plain"},{"body":"yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","mimetype":"text/html"}]},"ts":1657741861995,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$W_GR_PcM6LbkMrWczKkmkaYT5gTpZ6i4UFtD26C7gb8"},
{"content":{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","format":"org.matrix.custom.html","formatted_body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","mimetype":"text/plain"},{"body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","mimetype":"text/html"}]},"ts":1657741864695,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3RDmAeLtbBsOHWNJP1rfDm792aQzLDCnEEGZ7QVdVfc"},
{"content":{"body":" * yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","format":"org.matrix.custom.html","formatted_body":" * yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","m.new_content":{"body":"yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","format":"org.matrix.custom.html","formatted_body":"yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","mimetype":"text/plain"},{"body":"yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$W_GR_PcM6LbkMrWczKkmkaYT5gTpZ6i4UFtD26C7gb8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * yeah I've expressed before that something with `_` would feel the most \"obvious\" to me","mimetype":"text/plain"},{"body":" * yeah I've expressed before that something with <code>_</code> would feel the most &quot;obvious&quot; to me","mimetype":"text/html"}]},"ts":1657741868172,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$sEiQpFdZvDhLHAwA93wvnic1eUrPVr6vuhjSupWp5zY"},
{"content":{"body":"If the completion case is strong enough, a longer keyword like `topic` is potentially just as viable since an editor could rank it higher in a completion list.","format":"org.matrix.custom.html","formatted_body":"If the completion case is strong enough, a longer keyword like <code>topic</code> is potentially just as viable since an editor could rank it higher in a completion list.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If the completion case is strong enough, a longer keyword like `topic` is potentially just as viable since an editor could rank it higher in a completion list.","mimetype":"text/plain"},{"body":"If the completion case is strong enough, a longer keyword like <code>topic</code> is potentially just as viable since an editor could rank it higher in a completion list.","mimetype":"text/html"}]},"ts":1657741871009,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$IIutXc_cQ8tsci2W4Uh783yUW2iLlgBeQpL7CY8FxkI"},
{"content":{"body":" * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","format":"org.matrix.custom.html","formatted_body":" * I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","m.new_content":{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","format":"org.matrix.custom.html","formatted_body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","mimetype":"text/plain"},{"body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3RDmAeLtbBsOHWNJP1rfDm792aQzLDCnEEGZ7QVdVfc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, `$_` is valid syntax for variables in Bash/Perl/Ruby but `$$` is not. But this is a mild preference.","mimetype":"text/plain"},{"body":" * I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, <code>$_</code> is valid syntax for variables in Bash/Perl/Ruby but <code>$$</code> is not. But this is a mild preference.","mimetype":"text/html"}]},"ts":1657741871666,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fR1EuRErlCbJhGJC19t0ToQ9gEevxRIn87BxDQfo_cA"},
{"content":{"body":"`$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","format":"org.matrix.custom.html","formatted_body":"<code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/plain"},{"body":"<code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/html"}]},"ts":1657741948711,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$BrCHNl_ze8-cg39wu6rWTRsmOWnryJQ9iqhDOiPd1PQ"},
{"content":{"body":" * `$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","format":"org.matrix.custom.html","formatted_body":" * <code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","m.new_content":{"body":"`$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","format":"org.matrix.custom.html","formatted_body":"<code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/plain"},{"body":"<code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BrCHNl_ze8-cg39wu6rWTRsmOWnryJQ9iqhDOiPd1PQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `$_` in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/plain"},{"body":" * <code>$_</code> in dev tools is a power-user corner case that isn't used in any actual code and is fairly fragile anyways. I'm not as concerned about running into issues there.","mimetype":"text/html"}]},"ts":1657742024614,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$YGG1G7h2FqJmO5f_m6lvsCfcjgYgxV0Lr62B2ei5P_0"},
{"content":{"body":"The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","format":"org.matrix.custom.html","formatted_body":"The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","mimetype":"text/plain"},{"body":"The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","mimetype":"text/html"}]},"ts":1657742126692,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ImZozx6wICP1TzUP5bmAr_3b9JoSCzAV28lIAEbXqHk"},
{"content":{"body":" * The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","format":"org.matrix.custom.html","formatted_body":" * The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","m.new_content":{"body":"The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","format":"org.matrix.custom.html","formatted_body":"The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","mimetype":"text/plain"},{"body":"The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ImZozx6wICP1TzUP5bmAr_3b9JoSCzAV28lIAEbXqHk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The most important thing for me is if `$_` really is not being already used by libraries and such. The same would be with `$$`; common usage of `$$` would make it much less attractive to me.","mimetype":"text/plain"},{"body":" * The most important thing for me is if <code>$_</code> really is not being already used by libraries and such. The same would be with <code>$$</code>; common usage of <code>$$</code> would make it much less attractive to me.","mimetype":"text/html"}]},"ts":1657742133123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d3jSRRnXv3fqIQDak25WjOPi3TdXeOBzPiFNkWMmHvg"},
{"content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","mimetype":"text/html"}]},"ts":1657742522475,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0"},
{"content":{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~~A similar search for `language:js symbol:$_` has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...","format":"org.matrix.custom.html","formatted_body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~~A similar search for <code>language:js symbol:$_</code> has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","m.new_content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~~A similar search for `language:js symbol:$_` has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~~A similar search for <code>language:js symbol:$_</code> has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~~A similar search for `language:js symbol:$_` has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~~A similar search for <code>language:js symbol:$_</code> has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~~A similar search for `language:js symbol:$_` has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...","mimetype":"text/plain"},{"body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~~A similar search for <code>language:js symbol:$_</code> has 18 results.~~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","mimetype":"text/html"}]},"ts":1657742572690,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$CBBqo6vlycv8GHtw-LuIPUZ6i354jraWqhzgRq9zyV4"},
{"content":{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~A similar search for `language:js symbol:$_` has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...","format":"org.matrix.custom.html","formatted_body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~A similar search for <code>language:js symbol:$_</code> has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","m.new_content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~A similar search for `language:js symbol:$_` has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~A similar search for <code>language:js symbol:$_</code> has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~A similar search for `language:js symbol:$_` has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~A similar search for <code>language:js symbol:$_</code> has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\n~A similar search for `language:js symbol:$_` has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...","mimetype":"text/plain"},{"body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>~A similar search for <code>language:js symbol:$_</code> has 18 results.~ I need to recheck this due to an error in the query, so this may not be accurate...</p>\n","mimetype":"text/html"}]},"ts":1657742580169,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$r2otWr_VjBuzjbPeVeBXWUeDTWeUSR4RDRf41EYqbZ8"},
{"content":{"body":"GitHub is telling me results are not exhaustive, but still only provides me with 18 total matches.","msgtype":"m.text","org.matrix.msc1767.text":"GitHub is telling me results are not exhaustive, but still only provides me with 18 total matches."},"ts":1657742645556,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Utr-IH2vJn0tSLJuAxBmOasf7PUER7PBeWwbb-oycj0"},
{"content":{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","format":"org.matrix.custom.html","formatted_body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","m.new_content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive.","mimetype":"text/plain"},{"body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive.</p>\n","mimetype":"text/html"}]},"ts":1657742698019,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Mqaop7jkZCbBjmf6hBGWD8dQmfXpeWhD5aphV7SzbVc"},
{"content":{"body":"Does `$_` get set while in the expression","format":"org.matrix.custom.html","formatted_body":"Does <code>$_</code> get set while in the expression","msgtype":"m.text"},"ts":1657742714273,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-Q08KyVJLbDJQEQMmvGLG-xT7hYONClPqkzGkGZ2YBU"},
{"content":{"body":"I thought it was only done at statement positions","msgtype":"m.text"},"ts":1657742724921,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4oRxBbrFeQHDSqIaCBZEZNALyKludJi9HwlLAmM8ucM"},
{"content":{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.","format":"org.matrix.custom.html","formatted_body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.</p>\n","m.new_content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.","mimetype":"text/plain"},{"body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, some are substring matches and don't count.</p>\n","mimetype":"text/html"}]},"ts":1657742819283,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$zQnxprIGGA5DNywzd8Dfb7i525wssNlWdGfgifmhv4o"},
{"content":{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.","format":"org.matrix.custom.html","formatted_body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n","m.new_content":{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.","format":"org.matrix.custom.html","formatted_body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.","mimetype":"text/plain"},{"body":"<p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A quick search via GitHub's codesearch for `language:js symbol:$$` shows a fair number of projects that use `$$` as an alias for `document.querySelectorAll`. I found over 100+ files.\n\nA similar search for `language:js symbol:$_` has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.","mimetype":"text/plain"},{"body":" * <p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n","mimetype":"text/html"}]},"ts":1657742858627,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$3XS32VTcvoCwWvPJZhH9eX_6x9C3O_ZQK-ZVbYDUjm0"},
{"content":{"body":"Excellent data, thank you.","format":"org.matrix.custom.html","formatted_body":"Excellent data, thank you.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Excellent data, thank you.","mimetype":"text/plain"},{"body":"Excellent data, thank you.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0"}}},"ts":1657742876483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UVmIsFWfZRLUvuwMIxXzCEHXVm309POPXWUqlWxas80"},
{"content":{"body":" * Excellent data, thank you.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n</blockquote></mx-reply> * Excellent data, thank you.","m.new_content":{"body":"Excellent data, thank you.","format":"org.matrix.custom.html","formatted_body":"Excellent data, thank you.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Excellent data, thank you.","mimetype":"text/plain"},{"body":"Excellent data, thank you.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$UVmIsFWfZRLUvuwMIxXzCEHXVm309POPXWUqlWxas80","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Excellent data, thank you.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$vy0AmoOiOK6X-Hsy7JqyNqgfVZgiXToIRvXOkU9b4d0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>A quick search via GitHub's codesearch for <code>language:js symbol:$$</code> shows a fair number of projects that use <code>$$</code> as an alias for <code>document.querySelectorAll</code>. I found over 100+ files.</p>\n<p>A similar search for <code>language:js symbol:$_</code> has 18 results, though it tells me the results are not exhaustive. Of those 18 results, 15 are substring matches and don't count.</p>\n</blockquote></mx-reply> * Excellent data, thank you.","mimetype":"text/html"}]},"ts":1657742887536,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hOFJtPV2geNTacT5KfrNxnTytdJno5HHynEfW8ENkTc"},
{"content":{"body":"I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","format":"org.matrix.custom.html","formatted_body":"I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/plain"},{"body":"I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/html"}]},"ts":1657742931712,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$isuIJi6Kyb9b3oc3sKcl9oLfzEcKRJ4yqfK7XD-bRSA"},
{"content":{"body":"Yeah, that seems to be the case. There are only three exact matches for `$_` and they are either `var $_ = ` or `window.$_ = `, and the `window.$_ = ` case reports a deprecation warning.","format":"org.matrix.custom.html","formatted_body":"Yeah, that seems to be the case. There are only three exact matches for <code>$_</code> and they are either <code>var $_ = </code> or <code>window.$_ = </code>, and the <code>window.$_ = </code> case reports a deprecation warning.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, that seems to be the case. There are only three exact matches for `$_` and they are either `var $_ = ` or `window.$_ = `, and the `window.$_ = ` case reports a deprecation warning.","mimetype":"text/plain"},{"body":"Yeah, that seems to be the case. There are only three exact matches for <code>$_</code> and they are either <code>var $_ = </code> or <code>window.$_ = </code>, and the <code>window.$_ = </code> case reports a deprecation warning.","mimetype":"text/html"}]},"ts":1657742938994,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$bc7Xupik8hcb4R9V4bxe1WFTrQCoOFZBBumxT9GoabE"},
{"content":{"body":" * I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","format":"org.matrix.custom.html","formatted_body":" * I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","m.new_content":{"body":"I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","format":"org.matrix.custom.html","formatted_body":"I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/plain"},{"body":"I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$isuIJi6Kyb9b3oc3sKcl9oLfzEcKRJ4yqfK7XD-bRSA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I wonder how many people were using `yield` and `await` as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/plain"},{"body":" * I wonder how many people were using <code>yield</code> and <code>await</code> as variables before generators and async functionsâ€¦not that it matters. New uses ought to be be zero now.","mimetype":"text/html"}]},"ts":1657742951123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$roCoqLKcS9oNT17ydezZkIviYL0GARjR4KDqY3lA_ps"},
{"content":{"body":"`yield` was probably more common than `await`, since `yield` can also be used a noun in agriculture and finance","format":"org.matrix.custom.html","formatted_body":"<code>yield</code> was probably more common than <code>await</code>, since <code>yield</code> can also be used a noun in agriculture and finance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`yield` was probably more common than `await`, since `yield` can also be used a noun in agriculture and finance","mimetype":"text/plain"},{"body":"<code>yield</code> was probably more common than <code>await</code>, since <code>yield</code> can also be used a noun in agriculture and finance","mimetype":"text/html"}]},"ts":1657743037443,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$XdWNeirt81laVqFOTF9aw6GYwfGVGVPeujGbgIvxXQg"},
{"content":{"body":"I don't know if there were any actual statistics collected for either case, however.","msgtype":"m.text","org.matrix.msc1767.text":"I don't know if there were any actual statistics collected for either case, however."},"ts":1657743079601,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$2_SEDIZIDeb2aYVQLKCOZNEI_frYJ4RqjRBaZ1KOSEY"},
{"content":{"body":" * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`â€™s use is an incident of those languagesâ€™ peculiarities. \nBut this is a mild preference.","format":"org.matrix.custom.html","formatted_body":" * I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, the fact that <code>$_</code> but not <code>$$</code> is valid syntax for variables in Bash/Perl/Ruby, so <code>$_</code>â€™s use is an incident of those languagesâ€™ peculiarities.<br>But this is a mild preference.","m.new_content":{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`â€™s use is an incident of those languagesâ€™ peculiarities. \nBut this is a mild preference.","format":"org.matrix.custom.html","formatted_body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, the fact that <code>$_</code> but not <code>$$</code> is valid syntax for variables in Bash/Perl/Ruby, so <code>$_</code>â€™s use is an incident of those languagesâ€™ peculiarities.<br>But this is a mild preference.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`â€™s use is an incident of those languagesâ€™ peculiarities. \nBut this is a mild preference.","mimetype":"text/plain"},{"body":"I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, the fact that <code>$_</code> but not <code>$$</code> is valid syntax for variables in Bash/Perl/Ruby, so <code>$_</code>â€™s use is an incident of those languagesâ€™ peculiarities.<br>But this is a mild preference.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3RDmAeLtbBsOHWNJP1rfDm792aQzLDCnEEGZ7QVdVfc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I mildly prefer `$$` to `$_` because: `$_` is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), `$$` is indeed easier to type, and `$_` is uglier to me than `$$`. As you know, the fact that `$_` but not `$$` is valid syntax for variables in Bash/Perl/Ruby, so `$_`â€™s use is an incident of those languagesâ€™ peculiarities. \nBut this is a mild preference.","mimetype":"text/plain"},{"body":" * I mildly prefer <code>$$</code> to <code>$_</code> because: <code>$_</code> is already being used in some contexts like browser inspectors (although admittedly this is a niche case; there might be other extant uses), <code>$$</code> is indeed easier to type, and <code>$_</code> is uglier to me than <code>$$</code>. As you know, the fact that <code>$_</code> but not <code>$$</code> is valid syntax for variables in Bash/Perl/Ruby, so <code>$_</code>â€™s use is an incident of those languagesâ€™ peculiarities.<br>But this is a mild preference.","mimetype":"text/html"}]},"ts":1657743180152,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$I-qmyVJ0Mq5vIiOD9DfAY4R3npjBirTbjAc2m0x9iVg"},
{"content":{"body":"`yield` though ran into a case where Mozilla shipped generators unflagged prior to ES2015 without a `*` marker on the function, so that may have curtailed use somewhat.","format":"org.matrix.custom.html","formatted_body":"<code>yield</code> though ran into a case where Mozilla shipped generators unflagged prior to ES2015 without a <code>*</code> marker on the function, so that may have curtailed use somewhat.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`yield` though ran into a case where Mozilla shipped generators unflagged prior to ES2015 without a `*` marker on the function, so that may have curtailed use somewhat.","mimetype":"text/plain"},{"body":"<code>yield</code> though ran into a case where Mozilla shipped generators unflagged prior to ES2015 without a <code>*</code> marker on the function, so that may have curtailed use somewhat.","mimetype":"text/html"}]},"ts":1657743184954,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$c1LmQgRQmhPbGQ--6166DPS56HLzevbUKE9fJQhy5Do"},
{"content":{"body":"(if memory serves correctly)","msgtype":"m.text","org.matrix.msc1767.text":"(if memory serves correctly)"},"ts":1657743206194,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$8WceQxBQIBOK6H1yAXvLIPLgUZN1Fe1ExMdyv-t-zV8"},
{"content":{"body":"The usage statistics are compelling that `$_` is better than `$$`. I have been convinced.","format":"org.matrix.custom.html","formatted_body":"The usage statistics are compelling that <code>$_</code> is better than <code>$$</code>. I have been convinced.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The usage statistics are compelling that `$_` is better than `$$`. I have been convinced.","mimetype":"text/plain"},{"body":"The usage statistics are compelling that <code>$_</code> is better than <code>$$</code>. I have been convinced.","mimetype":"text/html"}]},"ts":1657743420288,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_bk6furZ538BrYfTDF1J38GJEb8afhnmxAIuQx0ktgg"},
{"content":{"body":"Disregard my earlier comment about counts. I refined my search to get around the \"too exhaustive warning\" and found more instances of `$_` than initially reported.","format":"org.matrix.custom.html","formatted_body":"Disregard my earlier comment about counts. I refined my search to get around the &quot;too exhaustive warning&quot; and found more instances of <code>$_</code> than initially reported.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Disregard my earlier comment about counts. I refined my search to get around the \"too exhaustive warning\" and found more instances of `$_` than initially reported.","mimetype":"text/plain"},{"body":"Disregard my earlier comment about counts. I refined my search to get around the &quot;too exhaustive warning&quot; and found more instances of <code>$_</code> than initially reported.","mimetype":"text/html"}]},"ts":1657743420613,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Wj_-qdPzqalkcGyWSkv4M1hyANz3l9hVDlnoUPkF5jA"},
{"content":{"body":"Oh, okay, in that case, never mind. ðŸ¥²","msgtype":"m.text","org.matrix.msc1767.text":"Oh, okay, in that case, never mind. ðŸ¥²"},"ts":1657743428936,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3cJYJulqqhp2DgLs7sYTi4pfOl7ZhTrcScU9_O8fDZo"},
{"content":{"body":" * Oh, okay, in that case, never mind. ðŸ¥²","m.new_content":{"body":"Oh, okay, in that case, never mind. ðŸ¥²","msgtype":"m.text","org.matrix.msc1767.text":"Oh, okay, in that case, never mind. ðŸ¥²"},"m.relates_to":{"event_id":"$3cJYJulqqhp2DgLs7sYTi4pfOl7ZhTrcScU9_O8fDZo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Oh, okay, in that case, never mind. ðŸ¥²"},"ts":1657743445096,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XKTY-6SrkZLjBMHElByZbkdFzAqkaSdYVwvPlHUtH_s"},
{"content":{"body":"cs won't give me accurate counts however, though it seems most cases are either:\n```js\nvar $_ = function ...;\nconst $_ = ...;\nclass $_ { ... }\nfunction $_ {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>cs won't give me accurate counts however, though it seems most cases are either:</p>\n<pre><code class=\"language-js\">var $_ = function ...;\nconst $_ = ...;\nclass $_ { ... }\nfunction $_ {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"cs won't give me accurate counts however, though it seems most cases are either:\n```js\nvar $_ = function ...;\nconst $_ = ...;\nclass $_ { ... }\nfunction $_ {}\n```","mimetype":"text/plain"},{"body":"<p>cs won't give me accurate counts however, though it seems most cases are either:</p>\n<pre><code class=\"language-js\">var $_ = function ...;\nconst $_ = ...;\nclass $_ { ... }\nfunction $_ {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657743479028,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$94EL7BCxdba_eJF52lNMDu4CuHyRMSPrNLm_-GtlBxU"},
{"content":{"body":"I'd have to find a different way to query to get more accurate counts from GitHub's corpus of OSS projects.","msgtype":"m.text","org.matrix.msc1767.text":"I'd have to find a different way to query to get more accurate counts from GitHub's corpus of OSS projects."},"ts":1657743515196,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$e8dpLkzAb1UKzH8ocnIIdbH2umK_cYeNiH4N17ercI4"},
{"content":{"body":"I wonder why they use `$_`, hmm. I guess itâ€™s still true that `$$` is still oftenÂ (?) used to mean `document.querySelectorAll`, probably as an adjunct to jQuery or whatever.","format":"org.matrix.custom.html","formatted_body":"I wonder why they use <code>$_</code>, hmm. I guess itâ€™s still true that <code>$$</code> is still oftenÂ (?) used to mean <code>document.querySelectorAll</code>, probably as an adjunct to jQuery or whatever.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder why they use `$_`, hmm. I guess itâ€™s still true that `$$` is still oftenÂ (?) used to mean `document.querySelectorAll`, probably as an adjunct to jQuery or whatever.","mimetype":"text/plain"},{"body":"I wonder why they use <code>$_</code>, hmm. I guess itâ€™s still true that <code>$$</code> is still oftenÂ (?) used to mean <code>document.querySelectorAll</code>, probably as an adjunct to jQuery or whatever.","mimetype":"text/html"}]},"ts":1657743542968,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_9HXrEgAAc92vvH9uhuBhHSnFrdo42kslC0UOIaJOMY"},
{"content":{"body":"I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, , from now on, developers should never use the keyword as an ordinary variable. Just like `await` and `yield`. This is why I donâ€™t think `it` is acceptable.\n","format":"org.matrix.custom.html","formatted_body":"I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, , from now on, developers should never use the keyword as an ordinary variable. Just like <code>await</code> and <code>yield</code>. This is why I donâ€™t think <code>it</code> is acceptable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, , from now on, developers should never use the keyword as an ordinary variable. Just like `await` and `yield`. This is why I donâ€™t think `it` is acceptable.\n","mimetype":"text/plain"},{"body":"I would support an identifier as the topic reference only if the idea is that we would be blessing a new (contextual) keyword, and that, , from now on, developers should never use the keyword as an ordinary variable. Just like <code>await</code> and <code>yield</code>. This is why I donâ€™t think <code>it</code> is acceptable.","mimetype":"text/html"}]},"ts":1657743572412,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JlnVHrGEHI7T40jMnmM3tk79EDJkGy8EDu5G16jTGoo"}
]