[
{"content":{"body":"I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","msgtype":"m.text"},"ts":1657719736663,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dfxVWZp50sB-Oe9Sim8rQcUxrNoJmH848aRwQ1mzCr8"},
{"content":{"body":"* I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"* I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","m.new_content":{"body":"I think the `f() |> ~ + ~` case is unfortunate enough to exclude ~ as topic, but `f() |> ~~ + ~~` should work, right?\n`^^`, `~~`, `%%`, `@@`, `##`.","format":"org.matrix.custom.html","formatted_body":"I think the <code>f() |&gt; ~ + ~</code> case is unfortunate enough to exclude ~ as topic, but <code>f() |&gt; ~~ + ~~</code> should work, right?<br />\n<code>^^</code>, <code>~~</code>, <code>%%</code>, <code>@@</code>, <code>##</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$dfxVWZp50sB-Oe9Sim8rQcUxrNoJmH848aRwQ1mzCr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657719833420,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fUWw-inEsfF3ZAJtT3LxrLHNA0EG60QrkFiokIl909g"},
{"content":{"body":"Isn't `~~(n) ` still valid JS? I don't think doubling is a solution. ","format":"org.matrix.custom.html","formatted_body":"Isn't <code>~~(n) </code> still valid JS? I don't think doubling is a solution.","msgtype":"m.text"},"ts":1657721607310,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$CkQTYTPvGiickZY5KsrRuxCOE0_Taas-9jHX7yJHNu8"},
{"content":{"body":"Youâ€™re right; no doubled prefixes allowed.","msgtype":"m.text"},"ts":1657728292641,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$t938hL5GkDUgbPlg0laZoszLEesrhjKBAp4A20ffI4c"},
{"content":{"body":"Yeah double binaries is good, double unaries isn't.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah double binaries is good, double unaries isn't."},"ts":1657731264847,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0vA4Z1LxZe1Emdn9aiVtqf3RSSkI8yvGgzzt2kshUT4"},
{"content":{"body":"`#~` though? ;)","format":"org.matrix.custom.html","formatted_body":"<code>#~</code> though? ;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`#~` though? ;)","mimetype":"text/plain"},{"body":"<code>#~</code> though? ;)","mimetype":"text/html"}]},"ts":1657734078623,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UopBeNYn3fcgeBGBjiBkTsJRi_rO72G9Xsw7ltNmcCk"},
{"content":{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"ts":1657736789970,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Sbq2h-eZO32f5ZesjIBRAN9Is2WvjxB01DX9VALFwFI"},
{"content":{"body":" * Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":" * <p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","m.new_content":{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","format":"org.matrix.custom.html","formatted_body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":"<p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Sbq2h-eZO32f5ZesjIBRAN9Is2WvjxB01DX9VALFwFI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Not even sure double binaries is good. What if we'd had pipeline before `**`, would we have excluded `**` from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?\n\nI was tempted to suggest `@it` and banning `it` in a decorator (though you could still potentially do `@(it)`), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.","mimetype":"text/plain"},{"body":" * <p>Not even sure double binaries is good. What if we'd had pipeline before <code>**</code>, would we have excluded <code>**</code> from the list of potential topics? What are the chances we might want to leverage a double binary for some other related math operation in the future?</p>\n<p>I was tempted to suggest <code>@it</code> and banning <code>it</code> in a decorator (though you could still potentially do <code>@(it)</code>), except I'm fairly certain decorator test frameworks (or decorator support in existing frameworks) will pop up when decorators is finalized.</p>\n","mimetype":"text/html"}]},"ts":1657736834559,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$auhfjTSGosCYezWD2C7vVSViYM0hXI6tG2RcqRDaD9s"},
{"content":{"body":"(especially since I already wrote one 7 years ago for TS decorators while exploring the feature, though I never published it)","msgtype":"m.text","org.matrix.msc1767.text":"(especially since I already wrote one 7 years ago for TS decorators while exploring the feature, though I never published it)"},"ts":1657736893697,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$jOJbxCv9nDIVMZ2fyLJMLgj6RNyoZSLm3-QP3EDaZIE"},
{"content":{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion","format":"org.matrix.custom.html","formatted_body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion","mimetype":"text/plain"},{"body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion","mimetype":"text/html"}]},"ts":1657739396333,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nYU5ApkXza1XEf3G9STOB22bO54q2CuvvPWFlLZC-Hc"},
{"content":{"body":" * presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","format":"org.matrix.custom.html","formatted_body":" * presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","m.new_content":{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","format":"org.matrix.custom.html","formatted_body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/plain"},{"body":"presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nYU5ApkXza1XEf3G9STOB22bO54q2CuvvPWFlLZC-Hc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * presumably 'banning' unary `~` in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/plain"},{"body":" * presumably 'banning' unary <code>~</code> in a pipe body is a very unpopular opinion. (I'm a ^^ fan, but just curious)","mimetype":"text/html"}]},"ts":1657739426334,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wfO8O97HyPId6vF5ErcjjqBUzzNdtm3koXsOfgs9X7I"},
{"content":{"body":"what's interesting about unaries though is that they don't warrant a separate pipe","msgtype":"m.text","org.matrix.msc1767.text":"what's interesting about unaries though is that they don't warrant a separate pipe"},"ts":1657739785516,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$MHl9CCXOPO7pX8XuxMz050RFb22ulKjrxX1MLFuEBXQ"},
{"content":{"body":"Yes. TS compiler wants to use pipes and we internally use bitmasks, so we would be strongly against banning `~` or `^` inside a pipe","format":"org.matrix.custom.html","formatted_body":"Yes. TS compiler wants to use pipes and we internally use bitmasks, so we would be strongly against banning <code>~</code> or <code>^</code> inside a pipe","msgtype":"m.text"},"ts":1657739811084,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$aRnZtfdJ9_B4gYp1cMxVrqE7oov04_m8TYexOMIf3_c"},
{"content":{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"ts":1657739840837,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$vMG1tNuUgly_fpZQEMvhKSjnsTmeYx10t86DwT4p774"},
{"content":{"body":" * i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":" * i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","m.new_content":{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","format":"org.matrix.custom.html","formatted_body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":"i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$vMG1tNuUgly_fpZQEMvhKSjnsTmeYx10t86DwT4p774","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i.e. you can do `~~x |> foo(#)` or `y |> ~~bar(#)`, there's no need for `|> ~~#`","mimetype":"text/plain"},{"body":" * i.e. you can do <code>~~x |&gt; foo(#)</code> or <code>y |&gt; ~~bar(#)</code>, there's no need for <code>|&gt; ~~#</code>","mimetype":"text/html"}]},"ts":1657739862634,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ywlRJc2kSvRKJeHJnoZ_M_TXOA7CIWa2_3Eyqdlssj0"},
{"content":{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n```js\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~ + 1]; // least upper bound\n```\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).\n","format":"org.matrix.custom.html","formatted_body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~ + 1]; // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Inside the TS compiler, our `binarySearch` function returns the twos-complement of the greatest lower bound when a match isn't found, so `result >= 0` equals an exact match, and `~result` indicates an potential insert location. I could potentially see a case where someone could leverage `~` in a pipe such that:\n```js\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |> ~ >= 0 ? array[~] : array[~~ + 1]; // least upper bound\n```\nAs you can see, this wouldn't work with `~` or `~~` (or any arbitrary length of `~`).\n","mimetype":"text/plain"},{"body":"<p>Inside the TS compiler, our <code>binarySearch</code> function returns the twos-complement of the greatest lower bound when a match isn't found, so <code>result &gt;= 0</code> equals an exact match, and <code>~result</code> indicates an potential insert location. I could potentially see a case where someone could leverage <code>~</code> in a pipe such that:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~]; // greatest lower bound\nbinarySearch(array, value) |&gt; ~ &gt;= 0 ? array[~] : array[~~ + 1]; // least upper bound\n</code></pre>\n<p>As you can see, this wouldn't work with <code>~</code> or <code>~~</code> (or any arbitrary length of <code>~</code>).</p>\n","mimetype":"text/html"}]},"ts":1657740438282,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$4w5r-1kwmk4ZtzcbqtRk6xAFTeuKCTy7nIVgmEapaTk"},
{"content":{"body":"I much prefer the readability of an identifier here:\n```js\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it + 1]; // least upper bound\n```","format":"org.matrix.custom.html","formatted_body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it + 1]; // least upper bound\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I much prefer the readability of an identifier here:\n```js\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |> it >= 0 ? array[it] : array[~it + 1]; // least upper bound\n```","mimetype":"text/plain"},{"body":"<p>I much prefer the readability of an identifier here:</p>\n<pre><code class=\"language-js\">binarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it]; // greatest lower bound\nbinarySearch(array, value) |&gt; it &gt;= 0 ? array[it] : array[~it + 1]; // least upper bound\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657740552832,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$c4pdcz4IM31j_bjuxB-o3AcKBWVTuzLjtbcR3Wz2XEQ"}
]