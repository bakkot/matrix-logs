[
{"content":{"body":"Waldemar made a comment showing his concerns at https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1084946624. They’re about distinguishing decorators from topic-then-infix-operators-that-are-also-valid-identifiers (examples he gave are `of` and `as`).\n\nThankfully, as far as I can tell, they are not a problem; the example he gave already has a SyntaxError (the LHS of `of` in `for` statements can only be identifiers, not `@`). \n\nThe biggest issue is with any future infix operators that are also valid identifiers (like `as`), and we can just keep `@ as class {}` and `@ as function () {}` decorators, and require parentheses to distinguish `@ as (class {})` and `@ as (function () {})`.","format":"org.matrix.custom.html","formatted_body":"<p>Waldemar made a comment showing his concerns at https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1084946624. They’re about distinguishing decorators from topic-then-infix-operators-that-are-also-valid-identifiers (examples he gave are <code>of</code> and <code>as</code>).</p>\n<p>Thankfully, as far as I can tell, they are not a problem; the example he gave already has a SyntaxError (the LHS of <code>of</code> in <code>for</code> statements can only be identifiers, not <code>@</code>).</p>\n<p>The biggest issue is with any future infix operators that are also valid identifiers (like <code>as</code>), and we can just keep <code>@ as class {}</code> and <code>@ as function () {}</code> decorators, and require parentheses to distinguish <code>@ as (class {})</code> and <code>@ as (function () {})</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Waldemar made a comment showing his concerns at https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1084946624. They’re about distinguishing decorators from topic-then-infix-operators-that-are-also-valid-identifiers (examples he gave are `of` and `as`).\n\nThankfully, as far as I can tell, they are not a problem; the example he gave already has a SyntaxError (the LHS of `of` in `for` statements can only be identifiers, not `@`). \n\nThe biggest issue is with any future infix operators that are also valid identifiers (like `as`), and we can just keep `@ as class {}` and `@ as function () {}` decorators, and require parentheses to distinguish `@ as (class {})` and `@ as (function () {})`.","mimetype":"text/plain"},{"body":"<p>Waldemar made a comment showing his concerns at https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1084946624. They’re about distinguishing decorators from topic-then-infix-operators-that-are-also-valid-identifiers (examples he gave are <code>of</code> and <code>as</code>).</p>\n<p>Thankfully, as far as I can tell, they are not a problem; the example he gave already has a SyntaxError (the LHS of <code>of</code> in <code>for</code> statements can only be identifiers, not <code>@</code>).</p>\n<p>The biggest issue is with any future infix operators that are also valid identifiers (like <code>as</code>), and we can just keep <code>@ as class {}</code> and <code>@ as function () {}</code> decorators, and require parentheses to distinguish <code>@ as (class {})</code> and <code>@ as (function () {})</code>.</p>\n","mimetype":"text/html"}]},"ts":1648755175341,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NUI_NMtcgeGohBKuFJecp1NRP0ow0q_JFZpFHbxk2FM"}
]