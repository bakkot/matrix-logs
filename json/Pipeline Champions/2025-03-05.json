[
{"content":{"body":"It’s been a long time, and yet I’m realizing now that nobody seems to have proposed `..` as the topic reference. \n\n```js\nx = grunt.config('uglify.all.files') |> Object.keys(..)[0];\nx = pkgs[0] |> npa(..).escapedName |> await npmFetch.json(.., opts);\nx = cb(predicate) |> _.negate(..) |> _.filter(obj, .., context);\nObject.keys(envars)\n  .map(envar => `${envar}=${envars[envar]}`)\n  .join(' ')\n  |> `$ ${..}`\n  |> chalk.dim(.., 'node', args.join(' '))\n  |> console.log(..);\ncontext\n  |> (.. && (..).nodeType ? (..).ownerDocument || .. : document)\n  |> jQuery.parseHTML(match[1], .., true)\n  |> jQuery.merge(..);\n```\n\n`..` as the topic doesn’t seem bad. It only really clashes with property accesses—which are already postfix, so you would rarely use pipe on them anyway. And spread syntax, I guess, but doing that on the topic would probably be even rarer. \n\n`..` is even more visually lightweight than `^^`, and it’s easier to type than `^^` and `%%`.\nPlus, `..` usually gets its own typographic ligatures in fancy code fonts, for those who are into those.","format":"org.matrix.custom.html","formatted_body":"<p>It’s been a long time, and yet I’m realizing now that nobody seems to have proposed <code>..</code> as the topic reference.</p>\n<pre><code class=\"language-js\">x = grunt.config('uglify.all.files') |&gt; Object.keys(..)[0];\nx = pkgs[0] |&gt; npa(..).escapedName |&gt; await npmFetch.json(.., opts);\nx = cb(predicate) |&gt; _.negate(..) |&gt; _.filter(obj, .., context);\nObject.keys(envars)\n  .map(envar =&gt; `${envar}=${envars[envar]}`)\n  .join(' ')\n  |&gt; `$ ${..}`\n  |&gt; chalk.dim(.., 'node', args.join(' '))\n  |&gt; console.log(..);\ncontext\n  |&gt; (.. &amp;&amp; (..).nodeType ? (..).ownerDocument || .. : document)\n  |&gt; jQuery.parseHTML(match[1], .., true)\n  |&gt; jQuery.merge(..);\n</code></pre>\n<p><code>..</code> as the topic doesn’t seem bad. It only really clashes with property accesses—which are already postfix, so you would rarely use pipe on them anyway. And spread syntax, I guess, but doing that on the topic would probably be even rarer.</p>\n<p><code>..</code> is even more visually lightweight than <code>^^</code>, and it’s easier to type than <code>^^</code> and <code>%%</code>.<br>Plus, <code>..</code> usually gets its own typographic ligatures in fancy code fonts, for those who are into those.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1741135198311,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VAr0jLof20URU1pV2VBzCA1mLVPDE8AAYJpgCunAhEA"},
{"content":{"body":"why would it be rare to have an iterable topic?","m.mentions":{},"msgtype":"m.text"},"ts":1741135685977,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MPTEN4lqcl3JcBhAdcp1BynRuwj5nShmYT7RuZG2rB8"},
{"content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal would be pretty rare.","m.mentions":{},"msgtype":"m.text"},"ts":1741135978162,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n```js\narr |> f(...(..)) // How often would this happen?\n```\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">arr |&gt; f(...(..)) // How often would this happen?\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n```js\narr |> f(...(..)) // How often would this happen?\n```\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">arr |&gt; f(...(..)) // How often would this happen?\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136126352,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gvz8YbxcVcSoku6up-iQgAdvcfZAbcYoiu5dAKWf7sM"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0) // How often would this happen?\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">x |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0) // How often would this happen?\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0) // How often would this happen?\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">x |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0) // How often would this happen?\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136181363,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mVZqqNOHVHkMoNudwWfzHZH7lxHeDKkbDw1orX2G8hE"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would spreading a topic into a variadic function happen?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would spreading a topic into a variadic function happen?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would spreading a topic into a variadic function happen?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would spreading a topic into a variadic function happen?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136210451,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WEbU-S4-L2WYbhHJ77Rt2Xp2PCvqtsgSejE7bLZfj9g"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that it’d be significantly easier to parse, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that it’d be significantly easier to parse, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136241086,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YQ26Gb7Fo-K5_iUlHpguPeSHjay4IKHe1W7_AHi93yk"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that spreading an iterable topic into a function call or array/object literal in a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136452864,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EFBGaDvGkvinzzvipUyCghe6ClypSGf2jNS_LxnvgDQ"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that *spreading* an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that *spreading* an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n```\n\nThough, even when it does happen, `...(..)` isn't the end of the world either. I think that might be worth the tradeoff versus `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n</code></pre>\n<p>Though, even when it does happen, <code>...(..)</code> isn't the end of the world either. I think that might be worth the tradeoff versus <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136502301,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GMUM9BN-Nd20CRyVMrHeIlZQg5ivvrXALCKXg2dCF5A"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |> fnThatReturnsArray(..) |> [ ...(..), 0 ]\n```\n\nThough, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |&gt; fnThatReturnsArray(..) |&gt; [ ...(..), 0 ]\n</code></pre>\n<p>Though, even when it does happen, <code>f(...(..))</code> or <code>[ ...(..) ]</code> wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> createIterable(..) |> variadicFn(...(..)) |> g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |> fnThatReturnsArray(..) |> [ ...(..), 0 ]\n```\n\nThough, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; createIterable(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |&gt; fnThatReturnsArray(..) |&gt; [ ...(..), 0 ]\n</code></pre>\n<p>Though, even when it does happen, <code>f(...(..))</code> or <code>[ ...(..) ]</code> wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136685648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$N4HxVHiAF5hfYEBClPukKq1f3M1kXwQMgTJuhIKP3AQ"},
{"content":{"body":"* I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> fnThatReturnsIter(..) |> variadicFn(...(..)) |> g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |> fnThatReturnsIter(..) |> [ ...(..), 0 ]\n```\n\nThough, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"* <p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; fnThatReturnsIter(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |&gt; fnThatReturnsIter(..) |&gt; [ ...(..), 0 ]\n</code></pre>\n<p>Though, even when it does happen, <code>f(...(..))</code> or <code>[ ...(..) ]</code> wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"m.new_content":{"body":"I don’t think having an iterable topic would be rare, but I do think that _spreading_ an iterable topic into a function call or array/object literal within a pipe would be pretty rare.\n\n```js\n// How often would you need to spread a topic\n// into a variadic function?\nx |> fnThatReturnsIter(..) |> variadicFn(...(..)) |> g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |> fnThatReturnsIter(..) |> [ ...(..), 0 ]\n```\n\nThough, even when it does happen, `f(...(..))` or `[ ...(..) ]` wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of `%%` or `^^`. And my intuition is that `..` would be significantly easier to parse than `%%` or `^^`, too.","format":"org.matrix.custom.html","formatted_body":"<p>I don’t think having an iterable topic would be rare, but I do think that <em>spreading</em> an iterable topic into a function call or array/object literal within a pipe would be pretty rare.</p>\n<pre><code class=\"language-js\">// How often would you need to spread a topic\n// into a variadic function?\nx |&gt; fnThatReturnsIter(..) |&gt; variadicFn(...(..)) |&gt; g(.., 0)\n// Maybe \"appending\" a value into an array copy is more common:\nx |&gt; fnThatReturnsIter(..) |&gt; [ ...(..), 0 ]\n</code></pre>\n<p>Though, even when it does happen, <code>f(...(..))</code> or <code>[ ...(..) ]</code> wouldn't be the end of the world either. I think that they might be worth the tradeoff versus the disadvantages of <code>%%</code> or <code>^^</code>. And my intuition is that <code>..</code> would be significantly easier to parse than <code>%%</code> or <code>^^</code>, too.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YKyMyRTp53ftm8zWa_bGWwg4SIg_KDcvlRaPGMIOoaM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741136706938,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PtnG_uJNyoJ_tw2_2oRoIXEjaR3fnl9fQ4f-wdCoL0o"},
{"content":{"body":"`arrayOfNumbers |> Math.max(...(..))`?","format":"org.matrix.custom.html","formatted_body":"<code>arrayOfNumbers |&gt; Math.max(...(..))</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1741150804004,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lSn58-bTw11MU05aFFc5qlPRKOODymEbWX9edc3WLiM"},
{"content":{"body":"^ this seems like a nice syntactic \"test case\"","m.mentions":{},"msgtype":"m.text"},"ts":1741150903055,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$aKLcdWvjr5at-vThwl2yj4sKx2E08yCnnRThe8FxDHQ"},
{"content":{"body":"* ^ this seems like it'd be a nice syntactic \"test case\" for considering the various options against","m.mentions":{},"m.new_content":{"body":"^ this seems like it'd be a nice syntactic \"test case\" for considering the various options against","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aKLcdWvjr5at-vThwl2yj4sKx2E08yCnnRThe8FxDHQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741150932884,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$JVX_oEPO3wkRdIYq__f7eCTwG5tu7Em2dqEXTLN_tkY"},
{"content":{"body":"* ^ this seems like a nice syntactic \"test case\" to consider the various options against","m.mentions":{},"m.new_content":{"body":"^ this seems like a nice syntactic \"test case\" to consider the various options against","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aKLcdWvjr5at-vThwl2yj4sKx2E08yCnnRThe8FxDHQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741150943255,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$j0kxDTj9mkD-YmxvY9gfoTZGR6C-NVNOU5As4N0y91Y"},
{"content":{"body":"* ^ this seems like a nice syntactic \"test case\" for evaluating the various options","m.mentions":{},"m.new_content":{"body":"^ this seems like a nice syntactic \"test case\" for evaluating the various options","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aKLcdWvjr5at-vThwl2yj4sKx2E08yCnnRThe8FxDHQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741151068032,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$8zxcNXjyyPrWPpwq3kx9RBoBGkY2IDwvbShSWxSWUtM"},
{"content":{"body":"Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls. \nAnd just a space separating `...` and `..` should work, without parentheses, right?\n```js\narr |> Math.min(0, ... ..) |> numFormat.format(..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> numFormat.format(^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> numFormat.format(^^) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> numFormat.format(#_) |> console.log(`Max is {#_}`);\n```\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right?</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; numFormat.format(..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; numFormat.format(^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; numFormat.format(^^) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; numFormat.format(#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1741154958331,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fxDh8zpVA3c2AD8o2ZZuLyjjvdE5wmidTB-gZi-WOj4"},
{"content":{"body":"* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.\nAnd just a space separating `...` and `..` should work, without parentheses, right?\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"* <p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right?</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"m.new_content":{"body":"Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.\nAnd just a space separating `...` and `..` should work, without parentheses, right?\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right?</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fxDh8zpVA3c2AD8o2ZZuLyjjvdE5wmidTB-gZi-WOj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741155008767,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pBTZodBtakILmRLTPRJdriDNeiPsJj96Tv9_70RABT0"},
{"content":{"body":"* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right?\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"* <p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right?</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"m.new_content":{"body":"Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right?\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right?</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fxDh8zpVA3c2AD8o2ZZuLyjjvdE5wmidTB-gZi-WOj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741155082741,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$32l0C-lhcbDQ_uTzOTIgty9WJPoKCUgOWVT9asX2SB8"},
{"content":{"body":"* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right? `[ ... .. ]` rather than `[ ...(..) ]`.\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"* <p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right? <code>[ ... .. ]</code> rather than <code>[ ...(..) ]</code>.</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"m.new_content":{"body":"Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right? `[ ... .. ]` rather than `[ ...(..) ]`.\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right? <code>[ ... .. ]</code> rather than <code>[ ...(..) ]</code>.</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fxDh8zpVA3c2AD8o2ZZuLyjjvdE5wmidTB-gZi-WOj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741155112069,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TqM1MrzipKrktHfQfaPWMJPXG6psQb177wyBvlYMIEg"},
{"content":{"body":"* Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right? `x |> [... ..]` rather than `x |> [...(..)]`.\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"* <p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right? <code>x |&gt; [... ..]</code> rather than <code>x |&gt; [...(..)]</code>.</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"m.new_content":{"body":"Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.\nAnd just a space separating `...` and `..` should work, without parentheses, right? `x |> [... ..]` rather than `x |> [...(..)]`.\n\n```js\narr |> Math.min(0, ... ..) |> console.log(`Max is {..}`);\narr |> Math.min(0, ...^^) |> console.log(`Max is {^^}`);\narr |> Math.min(0, ...%%) |> console.log(`Max is {%%}`);\narr |> Math.min(0, ...#_) |> console.log(`Max is {#_}`);\n```\n\nI’m actually kind of excited about `..` as another candidate topic token. It’s so “lightweight” compared to the other choices left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, I’ll acquiesce that flattening into Math.max and min does happen. Though I’d be a bit surprised if such calls exceeded 0.1%, let alone 1%, of all JS function calls that would benefit from piping.<br>And just a space separating <code>...</code> and <code>..</code> should work, without parentheses, right? <code>x |&gt; [... ..]</code> rather than <code>x |&gt; [...(..)]</code>.</p>\n<pre><code class=\"language-js\">arr |&gt; Math.min(0, ... ..) |&gt; console.log(`Max is {..}`);\narr |&gt; Math.min(0, ...^^) |&gt; console.log(`Max is {^^}`);\narr |&gt; Math.min(0, ...%%) |&gt; console.log(`Max is {%%}`);\narr |&gt; Math.min(0, ...#_) |&gt; console.log(`Max is {#_}`);\n</code></pre>\n<p>I’m actually kind of excited about <code>..</code> as another candidate topic token. It’s so “lightweight” compared to the other choices left.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fxDh8zpVA3c2AD8o2ZZuLyjjvdE5wmidTB-gZi-WOj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741155360984,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iObRU-ZDzEVs_6KBzesh5lN0UXe_lFQ-hywmmNHbJeE"},
{"content":{"body":"I can't say I'm thrilled with how `...x` looks for property access. ","format":"org.matrix.custom.html","formatted_body":"I can't say I'm thrilled with how <code>...x</code> looks for property access.","msgtype":"m.text"},"ts":1741156640067,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pphu_4keUROEh_ijH7X3oLhdt2Uas7cnPW73PGzRIFQ"},
{"content":{"body":"I'm still of the opinion that F#-style pipes would have been better. `arr |> (x) => Math.min(0, ...x)` means no special topic is needed, PFA or no PFA. ","format":"org.matrix.custom.html","formatted_body":"I'm still of the opinion that F#-style pipes would have been better. <code>arr |&gt; (x) =&gt; Math.min(0, ...x)</code> means no special topic is needed, PFA or no PFA.","msgtype":"m.text"},"ts":1741156949878,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J87OEFmL6olEepDhZEBnrCOaYXyx5UoxDmKwxPN8hbI"},
{"content":{"body":"that's a nonstarter tho based on browser feedback","m.mentions":{},"msgtype":"m.text"},"ts":1741158301779,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q4OnVdYvsWcnYnTjefasfpuvSQ29q_wXFHURO5_prUU"},
{"content":{"body":"personally i think `..` is way worse than `^^` or `&&`","format":"org.matrix.custom.html","formatted_body":"personally i think <code>..</code> is way worse than <code>^^</code> or <code>&amp;&amp;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1741158310209,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZOJaqAUf2sghusSMU_7z8jIy_5QUTTELLFkK0V9gUy8"},
{"content":{"body":"I mostly like the `..` except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing `(..)`","format":"org.matrix.custom.html","formatted_body":"I mostly like the <code>..</code> except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing <code>(..)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1741159343144,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$w7LmAeyqKKzoa0-P_U3kan7b8Bg0pBCP1LmXr0Cbg0c"},
{"content":{"body":"* I mostly like `..` except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing `(..)`, which might in itself rule it out","format":"org.matrix.custom.html","formatted_body":"* I mostly like <code>..</code> except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing <code>(..)</code>, which might in itself rule it out","m.mentions":{},"m.new_content":{"body":"I mostly like `..` except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing `(..)`, which might in itself rule it out","format":"org.matrix.custom.html","formatted_body":"I mostly like <code>..</code> except that I think there are so many cases where parens would be needed (at least from a lint perspective) that one would almost need to consider it a four-character thing <code>(..)</code>, which might in itself rule it out","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$w7LmAeyqKKzoa0-P_U3kan7b8Bg0pBCP1LmXr0Cbg0c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741159466480,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$qzGlE1le4N2b4RWUEb3WXzzaTfaqAW-wLZtRiA8xZnk"},
{"content":{"body":"I hate %% but I think this discussion makes me come around to ^^ a bit","m.mentions":{},"msgtype":"m.text"},"ts":1741159586853,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$DgUoOYgzvczyPmD_8myomf6C0JxbK1JfN2wMI75-v20"},
{"content":{"body":"* I hate %% but I think this discussion actually makes me come around to ^^ a bit","m.mentions":{},"m.new_content":{"body":"I hate %% but I think this discussion actually makes me come around to ^^ a bit","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DgUoOYgzvczyPmD_8myomf6C0JxbK1JfN2wMI75-v20","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741159592729,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$COrSVD_egiHM3ZCsg618iH3oGmCXkerAtA2ijfUu6fA"},
{"content":{"body":"the main thing I like about ^^ is the shape resemblance with |>","format":"org.matrix.custom.html","formatted_body":"the main thing I like about ^^ is the shape resemblance with |&gt;","msgtype":"m.text"},"ts":1741162379102,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YAKoWW9zgOt88VC8OYv2JqXOOoBa0vQ8ze9q6YujeGI"},
{"content":{"body":"interesting","m.mentions":{},"msgtype":"m.text"},"ts":1741163228429,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GQZeZL1blVg8lBAm-jDCF8V8hw29fNMqyTnTZS8fuDI"},
{"content":{"body":"I don't know about that, but in this context, I was appreciating how ^^ can sit next to . and ... nicely","m.mentions":{},"msgtype":"m.text"},"ts":1741163267121,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$3YyGKqkeyupCqRune3c7lZlQIBR2El4OoYmGHPH2G6Y"},
{"content":{"body":"if we could type dots above like ˙˙ then that'd be cool but we can't so ^^ stands as a typable alternative","m.mentions":{},"msgtype":"m.text"},"ts":1741163418248,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$egsyj1NeKf8UqbrcWCiJOLjgSetmcqvmGxExkVMdZB8"},
{"content":{"body":"> <@ljharb:matrix.org> that's a nonstarter tho based on browser feedback\n\nF# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable) the \"parameters\" evaluates its body? Since it's an iife anyway ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$Q4OnVdYvsWcnYnTjefasfpuvSQ29q_wXFHURO5_prUU?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />that's a nonstarter tho based on browser feedback</blockquote></mx-reply>F# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable) the \"parameters\" evaluates its body? Since it's an iife anyway ","m.relates_to":{"m.in_reply_to":{"event_id":"$Q4OnVdYvsWcnYnTjefasfpuvSQ29q_wXFHURO5_prUU"}},"msgtype":"m.text"},"ts":1741165503089,"senderName":"Nic","senderId":"@nribaudo:igalia.com","id":"$9yaqW_Y6epaoztpXpEqkGA8xtWl4lm_xVLWXLI2__LY"},
{"content":{"body":"* F# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable (the \"parameters\") and evaluates its body? Since it's an iife anyway ","m.new_content":{"body":"> <@ljharb:matrix.org> that's a nonstarter tho based on browser feedback\n\nF# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable (the \"parameters\") and evaluates its body? Since it's an iife anyway ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$Q4OnVdYvsWcnYnTjefasfpuvSQ29q_wXFHURO5_prUU?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a><br />that's a nonstarter tho based on browser feedback</blockquote></mx-reply>F# was stalled due to browser feedback about too many closures? Couldn't we define something that looks 100% like an arrow but doesn't actually introduce a function, it just binds some local variable (the \"parameters\") and evaluates its body? Since it's an iife anyway ","msgtype":"m.text"},"m.relates_to":{"event_id":"$9yaqW_Y6epaoztpXpEqkGA8xtWl4lm_xVLWXLI2__LY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1741165524094,"senderName":"Nic","senderId":"@nribaudo:igalia.com","id":"$bZh-8B7unDEyX5sO7UYjHy6On4m7bga8lNmNOwED_qk"}
]