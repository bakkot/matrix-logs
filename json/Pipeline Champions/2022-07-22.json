[
{"content":{"body":"Hi all, jschoi invited me to this channel. I expressed the position during the meeting today that I think it would be worthwhile to continue exploring the space of API functions for method chaining. Although the Function.pipe proposal didn't reach Stage 1, I think it would be helpful to consider that direction in the context of the Pipeline proposal.\n\nThe Pipeline champions considered \"hack style\" and \"F# style\" options for the pipeline proposal. I would like to see how the use cases would pan out with a third \"API style\" option. In other words, take the examples that motivate the pipeline syntax operator and show how they would work with Function.pipe, Function.pipeAsync, etc.","format":"org.matrix.custom.html","formatted_body":"<p>Hi all, <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> invited me to this channel. I expressed the position during the meeting today that I think it would be worthwhile to continue exploring the space of API functions for method chaining. Although the Function.pipe proposal didn't reach Stage 1, I think it would be helpful to consider that direction in the context of the Pipeline proposal.</p>\n<p>The Pipeline champions considered &quot;hack style&quot; and &quot;F# style&quot; options for the pipeline proposal. I would like to see how the use cases would pan out with a third &quot;API style&quot; option. In other words, take the examples that motivate the pipeline syntax operator and show how they would work with Function.pipe, Function.pipeAsync, etc.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Hi all, jschoi invited me to this channel. I expressed the position during the meeting today that I think it would be worthwhile to continue exploring the space of API functions for method chaining. Although the Function.pipe proposal didn't reach Stage 1, I think it would be helpful to consider that direction in the context of the Pipeline proposal.\n\nThe Pipeline champions considered \"hack style\" and \"F# style\" options for the pipeline proposal. I would like to see how the use cases would pan out with a third \"API style\" option. In other words, take the examples that motivate the pipeline syntax operator and show how they would work with Function.pipe, Function.pipeAsync, etc.","mimetype":"text/plain"},{"body":"<p>Hi all, <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> invited me to this channel. I expressed the position during the meeting today that I think it would be worthwhile to continue exploring the space of API functions for method chaining. Although the Function.pipe proposal didn't reach Stage 1, I think it would be helpful to consider that direction in the context of the Pipeline proposal.</p>\n<p>The Pipeline champions considered &quot;hack style&quot; and &quot;F# style&quot; options for the pipeline proposal. I would like to see how the use cases would pan out with a third &quot;API style&quot; option. In other words, take the examples that motivate the pipeline syntax operator and show how they would work with Function.pipe, Function.pipeAsync, etc.</p>\n","mimetype":"text/html"}]},"ts":1658451420153,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$r-eZ-rffPma8Gpt_IamkyNTvcOeDli8fvmAfd3FX-Xs"},
{"content":{"body":"Opened an issue: https://github.com/tc39/proposal-pipeline-operator/issues/273","msgtype":"m.text","org.matrix.msc1767.text":"Opened an issue: https://github.com/tc39/proposal-pipeline-operator/issues/273"},"ts":1658451934083,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$aVTEFI4Xy7ISEIFbf0E0TeyVhF7xF1YjJiyc62caslA"},
{"content":{"body":"Well, we could do an explicit comparison between topic pipe and pipe function in the explainer, but…chances are it’s not going to get very far. \nPipe functions don’t pipe through n-arg function calls, array/object literals, or other things, other than await for pipeAsync. \nI never wanted to position the pipe/flow functions as anything other than an adjunct to the topic pipe. ","format":"org.matrix.custom.html","formatted_body":"Well, we could do an explicit comparison between topic pipe and pipe function in the explainer, but…chances are it’s not going to get very far.<br />\nPipe functions don’t pipe through n-arg function calls, array/object literals, or other things, other than await for pipeAsync.<br />\nI never wanted to position the pipe/flow functions as anything other than an adjunct to the topic pipe.","msgtype":"m.text"},"ts":1658461210815,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PIOw3vwpIscE4KDNkgcBiaqtGTH3LM_qU49mwY7M-E8"},
{"content":{"body":"sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/html"}]},"ts":1658461409376,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$77d0ylLxMsBpA4kWvNnKKzMG9ikM1duDx51--2WPDlM"},
{"content":{"body":"(Also, a forewarning: that proposal-pipeline-operator’s issues can get very hot. We’ve had numerous CoC problems in that repository. 🥲)","msgtype":"m.text","org.matrix.msc1767.text":"(Also, a forewarning: that proposal-pipeline-operator’s issues can get very hot. We’ve had numerous CoC problems in that repository. 🥲)"},"ts":1658461474609,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0pA11fn3JWcJDuWp1j-g926dNQ4wwjRkaSKcqhDIQxk"},
{"content":{"body":" * sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","m.new_content":{"body":"sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$77d0ylLxMsBpA4kWvNnKKzMG9ikM1duDx51--2WPDlM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * sffc: I had actually invited you to the room here, primarily, to let both you and HE Shi-Jun know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: I had actually invited you to the room here, primarily, to let both you and <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> know that I’m planning to withdraw proposal-function-pipe-flow, and I wanted to offer championing that proposal to you before I archive it. Otherwise I would make it inactive, since I just don’t see any significant chance of it advancing in Committee given the feedback I got today. (My apologies for not making this clearer in my direct message!)","mimetype":"text/html"}]},"ts":1658461499586,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rjuW-aOnkfzWV5Q3wXQHVyE5DRj0W-ZmAW0Eb08sMp0"},
{"content":{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","format":"org.matrix.custom.html","formatted_body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","mimetype":"text/plain"},{"body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$PIOw3vwpIscE4KDNkgcBiaqtGTH3LM_qU49mwY7M-E8"}}},"ts":1658461776725,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4fwCNmXivbVqTWmiNsfx6C2UdfufeuN5kSQFY6fCNqU"},
{"content":{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$PIOw3vwpIscE4KDNkgcBiaqtGTH3LM_qU49mwY7M-E8?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Well, we could do an explicit comparison between topic pipe and pipe function in the explainer, but…chances are it’s not going to get very far.<br>\nPipe functions don’t pipe through n-arg function calls, array/object literals, or other things, other than await for pipeAsync.<br>\nI never wanted to position the pipe/flow functions as anything other than an adjunct to the topic pipe.</blockquote></mx-reply> * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","m.new_content":{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","format":"org.matrix.custom.html","formatted_body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","mimetype":"text/plain"},{"body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4fwCNmXivbVqTWmiNsfx6C2UdfufeuN5kSQFY6fCNqU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  $ => console.log(%),\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$PIOw3vwpIscE4KDNkgcBiaqtGTH3LM_qU49mwY7M-E8?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Well, we could do an explicit comparison between topic pipe and pipe function in the explainer, but…chances are it’s not going to get very far.<br>\nPipe functions don’t pipe through n-arg function calls, array/object literals, or other things, other than await for pipeAsync.<br>\nI never wanted to position the pipe/flow functions as anything other than an adjunct to the topic pipe.</blockquote></mx-reply> * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  $ =&gt; console.log(%),\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"ts":1658461795459,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Aid5EBMkhtyeL2hag7odYCUcA6eHOe5FrBbG7_PiDbs"},
{"content":{"body":"(To be honest, I had wanted to wait until we decided exactly what we should do with proposal-function-pipe-flow—withdraw and archive versus transfer championing to you or Hax—before we announced that it failed to get Stage 1. Because there’s a good chance that people are going to get heated after the announcement, so I wanted to make sure we had a coordinated presentation to the community when we announced it. My apologies for not making this clear! Please do let me know if you want to champion proposal-function-pipe-flow or if you are fine with me withdrawing it.)","msgtype":"m.text","org.matrix.msc1767.text":"(To be honest, I had wanted to wait until we decided exactly what we should do with proposal-function-pipe-flow—withdraw and archive versus transfer championing to you or Hax—before we announced that it failed to get Stage 1. Because there’s a good chance that people are going to get heated after the announcement, so I wanted to make sure we had a coordinated presentation to the community when we announced it. My apologies for not making this clear! Please do let me know if you want to champion proposal-function-pipe-flow or if you are fine with me withdrawing it.)"},"ts":1658461941599,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$h2OxGeIv45YeMn7zxTMOifmtBW73c3XXBhPtHHfrC0U"},
{"content":{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","m.new_content":{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4fwCNmXivbVqTWmiNsfx6C2UdfufeuN5kSQFY6fCNqU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine:\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine:</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"ts":1658462071229,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AFKYrDSf11BAyI95nFrjAFT3D-THhqGOA3b4Dj4UBg0"},
{"content":{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","m.new_content":{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4fwCNmXivbVqTWmiNsfx6C2UdfufeuN5kSQFY6fCNqU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ => `$ ${%}`,\n  $ => chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  $ =&gt; `$ ${%}`,\n  $ =&gt; chalk.dim(%, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"ts":1658462122873,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7RVJbEaZlIydckrGYXP4SwZdqqnXAcX22qwcChoFWXk"},
{"content":{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  v => `$ ${v}`,\n  v => chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  v =&gt; `$ ${v}`,\n  v =&gt; chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","m.new_content":{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  v => `$ ${v}`,\n  v => chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","format":"org.matrix.custom.html","formatted_body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  v =&gt; `$ ${v}`,\n  v =&gt; chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  v => `$ ${v}`,\n  v => chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":"<p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  v =&gt; `$ ${v}`,\n  v =&gt; chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4fwCNmXivbVqTWmiNsfx6C2UdfufeuN5kSQFY6fCNqU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:\n\n```js\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =>\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n```\n\nThis is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):\n\n```js\npipe(\n  Object.keys(envars)\n    .map(envar => `${envar}=${envars[envar]}`)\n    .join(' '),\n  v => `$ ${v}`,\n  v => chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n```\n\nThe explainer’s “real-world code” section has many examples like this.","mimetype":"text/plain"},{"body":" * <p>Anyways, regarding your new issue, it might be worth at least exploring the possibility of replacing operators with API. But I suspect it will not get far. For example, consider the explainer’s first example, from React:</p>\n<pre><code class=\"language-js\">console.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar =&gt;\n        `${envar}=${envars[envar]}`)\n      .join(' ')\n    }`,\n    'node',\n    args.join(' ')));\n</code></pre>\n<p>This is not an example where the pipe function would shine compared to the pipe operator (especially given the encouraging-throwaway-closures concern from the engines):</p>\n<pre><code class=\"language-js\">pipe(\n  Object.keys(envars)\n    .map(envar =&gt; `${envar}=${envars[envar]}`)\n    .join(' '),\n  v =&gt; `$ ${v}`,\n  v =&gt; chalk.dim(v, 'node', args.join(' ')),\n  console.log,\n);\n</code></pre>\n<p>The explainer’s “real-world code” section has many examples like this.</p>\n","mimetype":"text/html"}]},"ts":1658462200123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ix20APj0aKakxDLuhLtr6IyPdclxzfNegxylxPOv46A"},
{"content":{"body":"Hey! If you can post those examples on my issue that would be great to get the conversation started","msgtype":"m.text"},"ts":1658462237121,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$v4_xrE8DfNmfcxk4LUgxihor8UitMqFQNytlg9L1R_4"},
{"content":{"body":"I'm not currently interested in championing the proposal. But maybe in the future. I think the best path is to finish the main pipeline proposal, get people to start using it, and then a year later, reopen this proposal. That's a multi-year process but things in TC39 take time :)","msgtype":"m.text"},"ts":1658462322685,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$V2mtl-sjpkRonRT_XMy8j6qLrMODdd93hAg3WQg5Fhk"},
{"content":{"body":"Actually the iterator helpers proposal is a good example of that. Iterators have been around for several years now but they didn't come with a lot of standard library functions. So now the champions of iterator helpers can point to packages people have made to work around limitations in iterators in order to motivate their proposal.","msgtype":"m.text"},"ts":1658462448042,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$Sl7zHt_L6_rgEdNAmp64jl5p-zP7_sXNcy643qjw1ac"},
{"content":{"body":"Sounds good; thank you! (I’ll give HE Shi-Jun a few days to also respond before I freeze the repository.)","format":"org.matrix.custom.html","formatted_body":"Sounds good; thank you! (I’ll give <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> a few days to also respond before I freeze the repository.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Sounds good; thank you! (I’ll give HE Shi-Jun a few days to also respond before I freeze the repository.)","mimetype":"text/plain"},{"body":"Sounds good; thank you! (I’ll give <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> a few days to also respond before I freeze the repository.)","mimetype":"text/html"}]},"ts":1658462448887,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5SyLnYFJ14dacYCsrX8lQoxt7qIB3W1XRSh0Hl6cJfg"},
{"content":{"body":"So basically, after pipeline gets users, you can point to pain points to motivate the Function.pipe proposal.","msgtype":"m.text"},"ts":1658462515280,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$fMmqLQtUFiZNcT3qfRjhWTRfRhM1NtbXiuZkWF8juiE"}
]