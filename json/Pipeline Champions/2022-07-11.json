[
{"content":{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","format":"org.matrix.custom.html","formatted_body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","mimetype":"text/plain"},{"body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657503894303,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LjEbz8eDVmL_Otl88WOo6oEBVvYMK7w_NJyiLKknzqI"},
{"content":{"body":"That would not only cover the FP crowd but also the data science crowd.","msgtype":"m.text","org.matrix.msc1767.text":"That would not only cover the FP crowd but also the data science crowd."},"ts":1657503985044,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$VHV0ZlxAAiGQZk6dIWwrpLByQMqqeem8yTKO8CXvy9k"},
{"content":{"body":"And if we wanted true point/compose, we could pair it with \"back pipes\" like in F#:\n```\nG(%) <| F(%) <| x // trickier to parse though\nG <|| F <|| x\n(G <||| F) <|| x\n```","format":"org.matrix.custom.html","formatted_body":"<p>And if we wanted true point/compose, we could pair it with &quot;back pipes&quot; like in F#:</p>\n<pre><code>G(%) &lt;| F(%) &lt;| x // trickier to parse though\nG &lt;|| F &lt;|| x\n(G &lt;||| F) &lt;|| x\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And if we wanted true point/compose, we could pair it with \"back pipes\" like in F#:\n```\nG(%) <| F(%) <| x // trickier to parse though\nG <|| F <|| x\n(G <||| F) <|| x\n```","mimetype":"text/plain"},{"body":"<p>And if we wanted true point/compose, we could pair it with &quot;back pipes&quot; like in F#:</p>\n<pre><code>G(%) &lt;| F(%) &lt;| x // trickier to parse though\nG &lt;|| F &lt;|| x\n(G &lt;||| F) &lt;|| x\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657504114886,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$yn5VmJNhcSp-79OJwIho2mzind2l1v_KQLXlQ5ptWh4"},
{"content":{"body":"The back-pipe variant has similarities to decorator application as well:\n```\nclass C {\n  @F\n  @G\n  method() {}\n}\n \nF <||\nG <||\nfunction () {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The back-pipe variant has similarities to decorator application as well:</p>\n<pre><code>class C {\n  @F\n  @G\n  method() {}\n}\n \nF &lt;||\nG &lt;||\nfunction () {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The back-pipe variant has similarities to decorator application as well:\n```\nclass C {\n  @F\n  @G\n  method() {}\n}\n \nF <||\nG <||\nfunction () {}\n```","mimetype":"text/plain"},{"body":"<p>The back-pipe variant has similarities to decorator application as well:</p>\n<pre><code>class C {\n  @F\n  @G\n  method() {}\n}\n \nF &lt;||\nG &lt;||\nfunction () {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657504206930,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$5sM4BmruPt_tIP9-5zRPv2mS9I-KeR4emhX3BXUFAno"},
{"content":{"body":"Then there's something for everyone, and while there might be some that ask \"But can't we use `|>` for the F# case?\" we could say that `|>` means \"first-order\", `||>` means \"second-order\" and `|||>` means \"third-order\" as a heuristic roughly based in first-order vs. higher-order logic.","format":"org.matrix.custom.html","formatted_body":"Then there's something for everyone, and while there might be some that ask &quot;But can't we use <code>|&gt;</code> for the F# case?&quot; we could say that <code>|&gt;</code> means &quot;first-order&quot;, <code>||&gt;</code> means &quot;second-order&quot; and <code>|||&gt;</code> means &quot;third-order&quot; as a heuristic roughly based in first-order vs. higher-order logic.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Then there's something for everyone, and while there might be some that ask \"But can't we use `|>` for the F# case?\" we could say that `|>` means \"first-order\", `||>` means \"second-order\" and `|||>` means \"third-order\" as a heuristic roughly based in first-order vs. higher-order logic.","mimetype":"text/plain"},{"body":"Then there's something for everyone, and while there might be some that ask &quot;But can't we use <code>|&gt;</code> for the F# case?&quot; we could say that <code>|&gt;</code> means &quot;first-order&quot;, <code>||&gt;</code> means &quot;second-order&quot; and <code>|||&gt;</code> means &quot;third-order&quot; as a heuristic roughly based in first-order vs. higher-order logic.","mimetype":"text/html"}]},"ts":1657505043598,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Q9NTBJ8Kk7LwMITREVyB4G4FKeBm2NX-OztqzfcQpp0"},
{"content":{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657505617483,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$mYu3XpjERIKGF_0VLbb_NGozXRoUeoO3lCwn-hvDf44"},
{"content":{"body":" * For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":" * <p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","m.new_content":{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mYu3XpjERIKGF_0VLbb_NGozXRoUeoO3lCwn-hvDf44","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":" * <p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657505682865,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$pzJ3YbTbTlav6at36i9zGdD7oPE1nJY5FpLuk_0s8Os"}
]