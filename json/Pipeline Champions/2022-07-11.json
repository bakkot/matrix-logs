[
{"content":{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","format":"org.matrix.custom.html","formatted_body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","mimetype":"text/plain"},{"body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657503894303,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LjEbz8eDVmL_Otl88WOo6oEBVvYMK7w_NJyiLKknzqI"}
]