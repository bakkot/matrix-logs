[
{"content":{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","format":"org.matrix.custom.html","formatted_body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we, perhaps, appease the functional programming folks by using `|>` for Hack pipes, `||>` for F# pipes, and `|||>` for function composition? i.e., \n- `x |> expr` - First-order pipelining, i.e. evaluating expressions (i.e., \"evaluate pipeline\" or \"expression pipeline\"). Has a topic.\n- `x ||> F` - Second-order pipelining, i.e. calling unary functions (i.e., \"call pipeline\" or \"function pipeline\"). Does not have a topic.\n- `F |||> G` - Third-order pipelining, i.e. composition of unary functions (i.e., \"compose pipeline\"). Does not have a topic.\n\nThis makes some sense as far as first-order vs. higher-order pipeline:\n\n```\n// first-order\nx |> F(%) |> G(%) \n\n// second-order\nx ||> F ||> G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a \"back pipe\" `<|||` as a true point/compose operator\nx ||> (F |||> G)\nx |> (F |||> G)(%)\n```","mimetype":"text/plain"},{"body":"<p>Could we, perhaps, appease the functional programming folks by using <code>|&gt;</code> for Hack pipes, <code>||&gt;</code> for F# pipes, and <code>|||&gt;</code> for function composition? i.e.,</p>\n<ul>\n<li><code>x |&gt; expr</code> - First-order pipelining, i.e. evaluating expressions (i.e., &quot;evaluate pipeline&quot; or &quot;expression pipeline&quot;). Has a topic.</li>\n<li><code>x ||&gt; F</code> - Second-order pipelining, i.e. calling unary functions (i.e., &quot;call pipeline&quot; or &quot;function pipeline&quot;). Does not have a topic.</li>\n<li><code>F |||&gt; G</code> - Third-order pipelining, i.e. composition of unary functions (i.e., &quot;compose pipeline&quot;). Does not have a topic.</li>\n</ul>\n<p>This makes some sense as far as first-order vs. higher-order pipeline:</p>\n<pre><code>// first-order\nx |&gt; F(%) |&gt; G(%) \n\n// second-order\nx ||&gt; F ||&gt; G\n\n// third-order\n// NOTE: this is backwards from f . g === g(f(x)), but perhaps we \n//       could introduce a &quot;back pipe&quot; `&lt;|||` as a true point/compose operator\nx ||&gt; (F |||&gt; G)\nx |&gt; (F |||&gt; G)(%)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657503894303,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LjEbz8eDVmL_Otl88WOo6oEBVvYMK7w_NJyiLKknzqI"},
{"content":{"body":"That would not only cover the FP crowd but also the data science crowd.","msgtype":"m.text","org.matrix.msc1767.text":"That would not only cover the FP crowd but also the data science crowd."},"ts":1657503985044,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$VHV0ZlxAAiGQZk6dIWwrpLByQMqqeem8yTKO8CXvy9k"},
{"content":{"body":"And if we wanted true point/compose, we could pair it with \"back pipes\" like in F#:\n```\nG(%) <| F(%) <| x // trickier to parse though\nG <|| F <|| x\n(G <||| F) <|| x\n```","format":"org.matrix.custom.html","formatted_body":"<p>And if we wanted true point/compose, we could pair it with &quot;back pipes&quot; like in F#:</p>\n<pre><code>G(%) &lt;| F(%) &lt;| x // trickier to parse though\nG &lt;|| F &lt;|| x\n(G &lt;||| F) &lt;|| x\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And if we wanted true point/compose, we could pair it with \"back pipes\" like in F#:\n```\nG(%) <| F(%) <| x // trickier to parse though\nG <|| F <|| x\n(G <||| F) <|| x\n```","mimetype":"text/plain"},{"body":"<p>And if we wanted true point/compose, we could pair it with &quot;back pipes&quot; like in F#:</p>\n<pre><code>G(%) &lt;| F(%) &lt;| x // trickier to parse though\nG &lt;|| F &lt;|| x\n(G &lt;||| F) &lt;|| x\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657504114886,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$yn5VmJNhcSp-79OJwIho2mzind2l1v_KQLXlQ5ptWh4"},
{"content":{"body":"The back-pipe variant has similarities to decorator application as well:\n```\nclass C {\n  @F\n  @G\n  method() {}\n}\n \nF <||\nG <||\nfunction () {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The back-pipe variant has similarities to decorator application as well:</p>\n<pre><code>class C {\n  @F\n  @G\n  method() {}\n}\n \nF &lt;||\nG &lt;||\nfunction () {}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The back-pipe variant has similarities to decorator application as well:\n```\nclass C {\n  @F\n  @G\n  method() {}\n}\n \nF <||\nG <||\nfunction () {}\n```","mimetype":"text/plain"},{"body":"<p>The back-pipe variant has similarities to decorator application as well:</p>\n<pre><code>class C {\n  @F\n  @G\n  method() {}\n}\n \nF &lt;||\nG &lt;||\nfunction () {}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657504206930,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$5sM4BmruPt_tIP9-5zRPv2mS9I-KeR4emhX3BXUFAno"},
{"content":{"body":"Then there's something for everyone, and while there might be some that ask \"But can't we use `|>` for the F# case?\" we could say that `|>` means \"first-order\", `||>` means \"second-order\" and `|||>` means \"third-order\" as a heuristic roughly based in first-order vs. higher-order logic.","format":"org.matrix.custom.html","formatted_body":"Then there's something for everyone, and while there might be some that ask &quot;But can't we use <code>|&gt;</code> for the F# case?&quot; we could say that <code>|&gt;</code> means &quot;first-order&quot;, <code>||&gt;</code> means &quot;second-order&quot; and <code>|||&gt;</code> means &quot;third-order&quot; as a heuristic roughly based in first-order vs. higher-order logic.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Then there's something for everyone, and while there might be some that ask \"But can't we use `|>` for the F# case?\" we could say that `|>` means \"first-order\", `||>` means \"second-order\" and `|||>` means \"third-order\" as a heuristic roughly based in first-order vs. higher-order logic.","mimetype":"text/plain"},{"body":"Then there's something for everyone, and while there might be some that ask &quot;But can't we use <code>|&gt;</code> for the F# case?&quot; we could say that <code>|&gt;</code> means &quot;first-order&quot;, <code>||&gt;</code> means &quot;second-order&quot; and <code>|||&gt;</code> means &quot;third-order&quot; as a heuristic roughly based in first-order vs. higher-order logic.","mimetype":"text/html"}]},"ts":1657505043598,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$Q9NTBJ8Kk7LwMITREVyB4G4FKeBm2NX-OztqzfcQpp0"},
{"content":{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657505617483,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$mYu3XpjERIKGF_0VLbb_NGozXRoUeoO3lCwn-hvDf44"},
{"content":{"body":" * For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":" * <p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","m.new_content":{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":"<p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mYu3XpjERIKGF_0VLbb_NGozXRoUeoO3lCwn-hvDf44","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For example, suppose we had my [functional operators](https://github.com/rbuckton/proposal-functional-operators) and PFA proposals:\n\n```\na * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |> % * b |> % + c\na |> % {*} b |> % {+} c\na |> times(a, b) |> plus(%, c)\n \n// second-order\na ||> {*} b ||> {+} c\na ||> times~(?, b) ||> plus~(?, c)\n \n// third-order\na ||> ({*} b |||> {+} c)\na ||> (times~(?, b) |||> plus~(?, c))\n```","mimetype":"text/plain"},{"body":" * <p>For example, suppose we had my <a href=\"https://github.com/rbuckton/proposal-functional-operators\">functional operators</a> and PFA proposals:</p>\n<pre><code>a * b + c\na {*} b {+} c \nplus(times(a, b), c)\n\n// first-order\na |&gt; % * b |&gt; % + c\na |&gt; % {*} b |&gt; % {+} c\na |&gt; times(a, b) |&gt; plus(%, c)\n \n// second-order\na ||&gt; {*} b ||&gt; {+} c\na ||&gt; times~(?, b) ||&gt; plus~(?, c)\n \n// third-order\na ||&gt; ({*} b |||&gt; {+} c)\na ||&gt; (times~(?, b) |||&gt; plus~(?, c))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657505682865,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$pzJ3YbTbTlav6at36i9zGdD7oPE1nJY5FpLuk_0s8Os"},
{"content":{"body":"> <@jschoi:matrix.org> Did we ever consider `*` as a topic token? `f() |> g({ x: * })`. I don’t remember why `*` was disqualified, if it was at all.\n> \n> (Otherwise, the top runner is `^^`, given `@`’s recent problems found by WH.)\n\nBinary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$VwKSUQcdg8YghvwTI5gu9bw1y9rO2rfzjNOPQySbsvg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><p>Did we ever consider <code>*</code> as a topic token? <code>f() |&gt; g({ x: * })</code>. I don’t remember why <code>*</code> was disqualified, if it was at all.</p>\n<p>(Otherwise, the top runner is <code>^^</code>, given <code>@</code>’s recent problems found by WH.)</p></blockquote></mx-reply>Binary operators are all problematic, and common ones like <code>*</code> are bad separately bc it's not unlikely that authors will multiply the topic by something.","m.relates_to":{"m.in_reply_to":{"event_id":"$VwKSUQcdg8YghvwTI5gu9bw1y9rO2rfzjNOPQySbsvg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> Did we ever consider `*` as a topic token? `f() |> g({ x: * })`. I don’t remember why `*` was disqualified, if it was at all.\n> \n> (Otherwise, the top runner is `^^`, given `@`’s recent problems found by WH.)\n\nBinary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$VwKSUQcdg8YghvwTI5gu9bw1y9rO2rfzjNOPQySbsvg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><p>Did we ever consider <code>*</code> as a topic token? <code>f() |&gt; g({ x: * })</code>. I don’t remember why <code>*</code> was disqualified, if it was at all.</p>\n<p>(Otherwise, the top runner is <code>^^</code>, given <code>@</code>’s recent problems found by WH.)</p></blockquote></mx-reply>Binary operators are all problematic, and common ones like <code>*</code> are bad separately bc it's not unlikely that authors will multiply the topic by something.","mimetype":"text/html"}]},"ts":1657507414688,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tQ_0rWtvtC_rEXsIU4lu1jpDLYAM4AXU8C8GyXhCCxc"},
{"content":{"body":"But yeah, `*` vs `**` and `yield*` all make `*` even worse, specifically.","format":"org.matrix.custom.html","formatted_body":"But yeah, <code>*</code> vs <code>**</code> and <code>yield*</code> all make <code>*</code> even worse, specifically.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But yeah, `*` vs `**` and `yield*` all make `*` even worse, specifically.","mimetype":"text/plain"},{"body":"But yeah, <code>*</code> vs <code>**</code> and <code>yield*</code> all make <code>*</code> even worse, specifically.","mimetype":"text/html"}]},"ts":1657507452145,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yJfbs-C-LRuNOhDRqvOdrMfttSOD8J0PwZSopxXo_HE"},
{"content":{"body":"rbuckton (PTO: 7/5 - 7/16): Putting aside that I'm very confident a second pipe won't make it thru committee (the majority of the benefit of pipeline is already granted by the first one), I've no problem with pursuing tacit pipes in the future, so long as they don't block *this* proposal (either by trying to claim syntax, or by getting bundled into this proposal as a package).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (PTO: 7/5 - 7/16)</a>: Putting aside that I'm very confident a second pipe won't make it thru committee (the majority of the benefit of pipeline is already granted by the first one), I've no problem with pursuing tacit pipes in the future, so long as they don't block <em>this</em> proposal (either by trying to claim syntax, or by getting bundled into this proposal as a package).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton (PTO: 7/5 - 7/16): Putting aside that I'm very confident a second pipe won't make it thru committee (the majority of the benefit of pipeline is already granted by the first one), I've no problem with pursuing tacit pipes in the future, so long as they don't block *this* proposal (either by trying to claim syntax, or by getting bundled into this proposal as a package).","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (PTO: 7/5 - 7/16)</a>: Putting aside that I'm very confident a second pipe won't make it thru committee (the majority of the benefit of pipeline is already granted by the first one), I've no problem with pursuing tacit pipes in the future, so long as they don't block <em>this</em> proposal (either by trying to claim syntax, or by getting bundled into this proposal as a package).","mimetype":"text/html"}]},"ts":1657507845138,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$RnldToLS1jYBnwinrBiyiiD8H7L9smelyp86HzreH9Q"},
{"content":{"body":"It might have more credence if its promoted as a compromise for FP/Data Science, and that it may have less impact on performance if a first-order `|>` already exists, i.e.: The folks that need it will use it, as they would have been using unary functions anyways (so perf impact would be equivalent), but general use cases could lean on `|>` instead. Linters could, in theory, point users to using `|>` over `||>` (or `|||>`) when their usage would benefit from simplification.","format":"org.matrix.custom.html","formatted_body":"It might have more credence if its promoted as a compromise for FP/Data Science, and that it may have less impact on performance if a first-order <code>|&gt;</code> already exists, i.e.: The folks that need it will use it, as they would have been using unary functions anyways (so perf impact would be equivalent), but general use cases could lean on <code>|&gt;</code> instead. Linters could, in theory, point users to using <code>|&gt;</code> over <code>||&gt;</code> (or <code>|||&gt;</code>) when their usage would benefit from simplification.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It might have more credence if its promoted as a compromise for FP/Data Science, and that it may have less impact on performance if a first-order `|>` already exists, i.e.: The folks that need it will use it, as they would have been using unary functions anyways (so perf impact would be equivalent), but general use cases could lean on `|>` instead. Linters could, in theory, point users to using `|>` over `||>` (or `|||>`) when their usage would benefit from simplification.","mimetype":"text/plain"},{"body":"It might have more credence if its promoted as a compromise for FP/Data Science, and that it may have less impact on performance if a first-order <code>|&gt;</code> already exists, i.e.: The folks that need it will use it, as they would have been using unary functions anyways (so perf impact would be equivalent), but general use cases could lean on <code>|&gt;</code> instead. Linters could, in theory, point users to using <code>|&gt;</code> over <code>||&gt;</code> (or <code>|||&gt;</code>) when their usage would benefit from simplification.","mimetype":"text/html"}]},"ts":1657508164541,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$IwuwAm_ZD7IlUd_3d7UFqFhJw0c3XBWRgne6x0bHQII"},
{"content":{"body":"And it would help to include, rather than alienate, existing FP libraries in the ecosystem.","msgtype":"m.text","org.matrix.msc1767.text":"And it would help to include, rather than alienate, existing FP libraries in the ecosystem."},"ts":1657508231709,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$ZvOtBzztvd6HdiBhmCHqlOIc2Xb5W6B79UzR5f1da_A"},
{"content":{"body":" * And it would be a way to include, rather than alienate, existing FP libraries in the ecosystem.","m.new_content":{"body":"And it would be a way to include, rather than alienate, existing FP libraries in the ecosystem.","msgtype":"m.text","org.matrix.msc1767.text":"And it would be a way to include, rather than alienate, existing FP libraries in the ecosystem."},"m.relates_to":{"event_id":"$ZvOtBzztvd6HdiBhmCHqlOIc2Xb5W6B79UzR5f1da_A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * And it would be a way to include, rather than alienate, existing FP libraries in the ecosystem."},"ts":1657508505070,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$XXKUihkxXGtsuVgj3GWshHamrlKcOSstQdZmMI7T0GU"},
{"content":{"body":"while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice","format":"org.matrix.custom.html","formatted_body":"while any empirical data would obviously confirm that <code>*</code> is more widely used than <code>^</code>, I will never not hate that <code>^^</code> is in the running just because we consider <code>^</code> uncommon in practice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice","mimetype":"text/plain"},{"body":"while any empirical data would obviously confirm that <code>*</code> is more widely used than <code>^</code>, I will never not hate that <code>^^</code> is in the running just because we consider <code>^</code> uncommon in practice","mimetype":"text/html"}]},"ts":1657508714372,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GUs4XNal_1nCkxFlfp00XY2HwRQ76A1EgmHHSN2P6EQ"},
{"content":{"body":"I've said that here before but I guess I should say it more publicly/formally","msgtype":"m.text","org.matrix.msc1767.text":"I've said that here before but I guess I should say it more publicly/formally"},"ts":1657508750065,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$OkfDbB2itBNqLo47jLwqJE6J4-7LBwq3kOxoNqiqayo"},
{"content":{"body":"Like I said, I've no problem with it *so long as it doesn't do anything to block this one*; promoting it as a compromise solution implies that it's a package with the current pipeline and will only hurt our chances of getting either thru.","format":"org.matrix.custom.html","formatted_body":"Like I said, I've no problem with it <em>so long as it doesn't do anything to block this one</em>; promoting it as a compromise solution implies that it's a package with the current pipeline and will only hurt our chances of getting either thru.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Like I said, I've no problem with it *so long as it doesn't do anything to block this one*; promoting it as a compromise solution implies that it's a package with the current pipeline and will only hurt our chances of getting either thru.","mimetype":"text/plain"},{"body":"Like I said, I've no problem with it <em>so long as it doesn't do anything to block this one</em>; promoting it as a compromise solution implies that it's a package with the current pipeline and will only hurt our chances of getting either thru.","mimetype":"text/html"}]},"ts":1657509481120,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ebkzf8vhEv5BW_1rF8WGPK19CsWR53wuE61J8E4POsA"},
{"content":{"body":"> <@tabatkins:matrix.org> Binary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.\n\nYeah, agreed, but I think that requiring separation between the topic and binary `*`/`**` might not be a big cost. \n\nI suspect maybe >90% of uses of pipe will be with function calls or object/array literals `f() |> g([*], 0), and it may be worth optimizing for those cases, rather than for `f() |> * ** 2`. And even `f() |> * ** 2` isn’t that unreadable. \nIt’s worth at least considering, since it probably is basically the only single-character token left. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24tQ_0rWtvtC_rEXsIU4lu1jpDLYAM4AXU8C8GyXhCCxc\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Binary operators are all problematic, and common ones like <code>*</code> are bad separately bc it's not unlikely that authors will multiply the topic by something.</blockquote></mx-reply><p>Yeah, agreed, but I think that requiring separation between the topic and binary <code>*</code>/<code>**</code> might not be a big cost.</p>\n<p>I suspect maybe &gt;90% of uses of pipe will be with function calls or object/array literals <code>f() |&gt; g([*], 0), and it may be worth optimizing for those cases, rather than for </code>f() |&gt; * ** 2<code>. And even </code>f() |&gt; * ** 2` isn’t that unreadable.<br />\nIt’s worth at least considering, since it probably is basically the only single-character token left.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$tQ_0rWtvtC_rEXsIU4lu1jpDLYAM4AXU8C8GyXhCCxc"}},"msgtype":"m.text"},"ts":1657543135326,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$n_eAplSHX4u0LzEO2Hktam3PNeFpvzviSrbIUCfozAc"},
{"content":{"body":"> <@rkirsling:matrix.org> while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice\n\nDisliking `^^` then, are you? 🙂","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24GUs4XNal_1nCkxFlfp00XY2HwRQ76A1EgmHHSN2P6EQ\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>while any empirical data would obviously confirm that <code>*</code> is more widely used than <code>^</code>, I will never not hate that <code>^^</code> is in the running just because we consider <code>^</code> uncommon in practice</blockquote></mx-reply>Disliking <code>^^</code> then, are you? 🙂","m.relates_to":{"m.in_reply_to":{"event_id":"$GUs4XNal_1nCkxFlfp00XY2HwRQ76A1EgmHHSN2P6EQ"}},"msgtype":"m.text"},"ts":1657543183785,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cwipYvia91Jg0TvW-mMkqDiHEWK6urH4MDWen6gER2E"},
{"content":{"body":"> <@rkirsling:matrix.org> while any empirical data would obviously confirm that `*` is more widely used than `^`, I will never not hate that `^^` is in the running just because we consider `^` uncommon in practice\n\n * You dislike `^^` then, is that right? If so, I’ll add it to the table. 🙂","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24GUs4XNal_1nCkxFlfp00XY2HwRQ76A1EgmHHSN2P6EQ\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>while any empirical data would obviously confirm that <code>*</code> is more widely used than <code>^</code>, I will never not hate that <code>^^</code> is in the running just because we consider <code>^</code> uncommon in practice</blockquote></mx-reply> * You dislike <code>^^</code> then, is that right? If so, I’ll add it to the table. 🙂","m.new_content":{"body":"You dislike `^^` then, is that right? If so, I’ll add it to the table. 🙂","format":"org.matrix.custom.html","formatted_body":"You dislike <code>^^</code> then, is that right? If so, I’ll add it to the table. 🙂","msgtype":"m.text"},"m.relates_to":{"event_id":"$cwipYvia91Jg0TvW-mMkqDiHEWK6urH4MDWen6gER2E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657543221610,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4Samj2BTj9hRqsDQGnrwXjZ2HNyWUbgvGEPJVvEl214"},
{"content":{"body":"* You dislike `^^` then, is that right, Ross? If so, I’ll add it to the wiki page’s Table of Opinions. 🙂 ","format":"org.matrix.custom.html","formatted_body":"* You dislike <code>^^</code> then, is that right, Ross? If so, I’ll add it to the wiki page’s Table of Opinions. 🙂","m.new_content":{"body":"You dislike `^^` then, is that right, Ross? If so, I’ll add it to the wiki page’s Table of Opinions. 🙂 ","format":"org.matrix.custom.html","formatted_body":"You dislike <code>^^</code> then, is that right, Ross? If so, I’ll add it to the wiki page’s Table of Opinions. 🙂","msgtype":"m.text"},"m.relates_to":{"event_id":"$cwipYvia91Jg0TvW-mMkqDiHEWK6urH4MDWen6gER2E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657543321831,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$T3yZ3YVlHRjWwtw2Te8HJQbSF6jnxnfUooJBZePQfnM"},
{"content":{"body":"> <@tabatkins:matrix.org> Binary operators are all problematic, and common ones like `*` are bad separately bc it's not unlikely that authors will multiply the topic by something.\n\n * Yeah, agreed, but I think that requiring separation between the topic and binary `*`/`**` might not be a big cost.\n\nI suspect maybe >90% of uses of pipe will be with function calls or object/array/tuple/record literals `f() |> g(#[*], 0)`, and it may be worth optimizing readability for those cases, rather than for `f() |> * ** 2`. And even `f() |> * ** 2` isn’t that unreadable, I think.\n It’s worth at least considering, since it probably is basically the only single-character token left.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24tQ_0rWtvtC_rEXsIU4lu1jpDLYAM4AXU8C8GyXhCCxc\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Binary operators are all problematic, and common ones like <code>*</code> are bad separately bc it's not unlikely that authors will multiply the topic by something.</blockquote></mx-reply> * <p>Yeah, agreed, but I think that requiring separation between the topic and binary <code>*</code>/<code>**</code> might not be a big cost.</p>\n<p>I suspect maybe &gt;90% of uses of pipe will be with function calls or object/array/tuple/record literals <code>f() |&gt; g(#[*], 0)</code>, and it may be worth optimizing readability for those cases, rather than for <code>f() |&gt; * ** 2</code>. And even <code>f() |&gt; * ** 2</code> isn’t that unreadable, I think.<br />\n It’s worth at least considering, since it probably is basically the only single-character token left.</p>","m.new_content":{"body":"Yeah, agreed, but I think that requiring separation between the topic and binary `*`/`**` might not be a big cost.\n\nI suspect maybe >90% of uses of pipe will be with function calls or object/array/tuple/record literals `f() |> g(#[*], 0)`, and it may be worth optimizing readability for those cases, rather than for `f() |> * ** 2`. And even `f() |> * ** 2` isn’t that unreadable, I think.\n It’s worth at least considering, since it probably is basically the only single-character token left.","format":"org.matrix.custom.html","formatted_body":"<p>Yeah, agreed, but I think that requiring separation between the topic and binary <code>*</code>/<code>**</code> might not be a big cost.</p>\n<p>I suspect maybe &gt;90% of uses of pipe will be with function calls or object/array/tuple/record literals <code>f() |&gt; g(#[*], 0)</code>, and it may be worth optimizing readability for those cases, rather than for <code>f() |&gt; * ** 2</code>. And even <code>f() |&gt; * ** 2</code> isn’t that unreadable, I think.<br />\n It’s worth at least considering, since it probably is basically the only single-character token left.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$n_eAplSHX4u0LzEO2Hktam3PNeFpvzviSrbIUCfozAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657543424435,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KPB3ozdgy2Tc-Zqvh6v5lFVhTIkr5463y_6TQmes6_I"},
{"content":{"body":"I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","format":"org.matrix.custom.html","formatted_body":"I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/plain"},{"body":"I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/html"}]},"ts":1657544529639,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jFJ1o2znjPn0NN18HfUjkt4iwiQlp8Hg2BHBEgg-_SY"},
{"content":{"body":" * I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","format":"org.matrix.custom.html","formatted_body":" * I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","m.new_content":{"body":"I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","format":"org.matrix.custom.html","formatted_body":"I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/plain"},{"body":"I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jFJ1o2znjPn0NN18HfUjkt4iwiQlp8Hg2BHBEgg-_SY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I'm presuming `~` was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/plain"},{"body":" * I'm presuming <code>~</code> was discussed? It's at least only a unary operator and not binary. And uncommon","mimetype":"text/html"}]},"ts":1657544536868,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$7g7eaS5w2Ks5_wZDoOy2H9hiNs08yccsfJRjG0Mt6EQ"},
{"content":{"body":"I guess `~(1)` is visually ambiguous","format":"org.matrix.custom.html","formatted_body":"I guess <code>~(1)</code> is visually ambiguous","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess `~(1)` is visually ambiguous","mimetype":"text/plain"},{"body":"I guess <code>~(1)</code> is visually ambiguous","mimetype":"text/html"}]},"ts":1657544588868,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wtCsItvSOVeAV8WmvGlUYxmSTC6b5WyQRjLu8AkgVEA"},
{"content":{"body":" * I guess `~(1)` is visually ambiguous","format":"org.matrix.custom.html","formatted_body":" * I guess <code>~(1)</code> is visually ambiguous","m.new_content":{"body":"I guess `~(1)` is visually ambiguous","format":"org.matrix.custom.html","formatted_body":"I guess <code>~(1)</code> is visually ambiguous","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess `~(1)` is visually ambiguous","mimetype":"text/plain"},{"body":"I guess <code>~(1)</code> is visually ambiguous","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wtCsItvSOVeAV8WmvGlUYxmSTC6b5WyQRjLu8AkgVEA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I guess `~(1)` is visually ambiguous","mimetype":"text/plain"},{"body":" * I guess <code>~(1)</code> is visually ambiguous","mimetype":"text/html"}]},"ts":1657544634860,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mdA48L8Np0LMkV7G0Blwf8bwRRyztThVRSd3GN8UQaA"},
{"content":{"body":"`~` is nice and we haven’t discussed it properly either. `f() |> g(#[~], 0) |> ~(~)`, hmm…\n\nPFA syntax would use `~`. But `f() |> (~)~(0, ?)` would be quite rare!","format":"org.matrix.custom.html","formatted_body":"<p><code>~</code> is nice and we haven’t discussed it properly either. <code>f() |&gt; g(#[~], 0) |&gt; ~(~)</code>, hmm…</p>\n<p>PFA syntax would use <code>~</code>. But <code>f() |&gt; (~)~(0, ?)</code> would be quite rare!</p>","msgtype":"m.text"},"ts":1657544815554,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WWJMpNX7GDNI65nSy7yEhLtVDku8Z98uGl51JrbtSuY"},
{"content":{"body":"(I’ve added a breakout session for topic tokens to the plenary although we might not have time.)","msgtype":"m.text"},"ts":1657544888750,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SjyBhiX_3UBWyU2bMgo-B4mlv6RWWGoBN1S3QiZ9GgE"},
{"content":{"body":"To call it would have to do something like: `(~)(arg)`","format":"org.matrix.custom.html","formatted_body":"To call it would have to do something like: <code>(~)(arg)</code>","msgtype":"m.text"},"ts":1657544933190,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$aY2UB_fsqlYSX3-YwvnaDYgLWQ7-7mJ7n7JiCEKa2nQ"},
{"content":{"body":"Oh yeah. Which might not be that bad…?\n\nWhich is worse:\n`f() |> * ** 2`\n`f() |> (~)(0)`","format":"org.matrix.custom.html","formatted_body":"<p>Oh yeah. Which might not be that bad…?</p>\n<p>Which is worse:<br />\n<code>f() |&gt; * ** 2</code><br />\n<code>f() |&gt; (~)(0)</code></p>","msgtype":"m.text"},"ts":1657544992354,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$C99Ce_owM6dQQVkTTiUWzEpnf3UAD60uTcwQSdgPkEI"},
{"content":{"body":"* Oh yeah. Which might not be that bad…?\nWhich is worse (or at least which would be more common): `f() |> * ** 2` `f() |> (~)(2)`","format":"org.matrix.custom.html","formatted_body":"* Oh yeah. Which might not be that bad…?<br />\nWhich is worse (or at least which would be more common): <code>f() |&gt; * ** 2</code> <code>f() |&gt; (~)(2)</code>","m.new_content":{"body":"Oh yeah. Which might not be that bad…?\nWhich is worse (or at least which would be more common): `f() |> * ** 2` `f() |> (~)(2)`","format":"org.matrix.custom.html","formatted_body":"Oh yeah. Which might not be that bad…?<br />\nWhich is worse (or at least which would be more common): <code>f() |&gt; * ** 2</code> <code>f() |&gt; (~)(2)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$C99Ce_owM6dQQVkTTiUWzEpnf3UAD60uTcwQSdgPkEI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657545051037,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bQ8Ah3odVnn9MUXbw0zQ0qPpyGCXzKTaZAA1_G46bM8"},
{"content":{"body":"could be a hazard if someone writes `~(arg)` and expects a function call. If arg can be converted to a number it won’t throw either ","format":"org.matrix.custom.html","formatted_body":"could be a hazard if someone writes <code>~(arg)</code> and expects a function call. If arg can be converted to a number it won’t throw either","msgtype":"m.text"},"ts":1657545097160,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pe9X26SGW27llWmmVdKV-28CKy5ozusd3mKhbdSjuJM"},
{"content":{"body":"but again, maybe that’s OK for the benefit of a single character token","msgtype":"m.text"},"ts":1657545131517,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Vx_Z0DWL2Ho4tYs91ikJ06A8HHX-xwdM1Y3xfCzq8L8"},
{"content":{"body":"At least it will throw if it’s the only expected use of topic in the pipe body. `f() |> ~(2)` is a SyntaxError: “Pipe body contains no topic.”","format":"org.matrix.custom.html","formatted_body":"At least it will throw if it’s the only expected use of topic in the pipe body. <code>f() |&gt; ~(2)</code> is a SyntaxError: “Pipe body contains no topic.”","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$pe9X26SGW27llWmmVdKV-28CKy5ozusd3mKhbdSjuJM"}}},"ts":1657545198337,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PFvL5IzYc6TvFALIRXIz9bL_V8IrYflBMUwkbjE602g"},
{"content":{"body":"> <@aclaymore:matrix.org> could be a hazard if someone writes `~(arg)` and expects a function call. If arg can be converted to a number it won’t throw either \n\n * At least it will throw if it’s the only expected use of topic in the pipe body. `f() |> ~(2)` is a SyntaxError: “Pipe body contains no topic.”","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24pe9X26SGW27llWmmVdKV-28CKy5ozusd3mKhbdSjuJM\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>could be a hazard if someone writes <code>~(arg)</code> and expects a function call. If arg can be converted to a number it won’t throw either</blockquote></mx-reply> * At least it will throw if it’s the only expected use of topic in the pipe body. <code>f() |&gt; ~(2)</code> is a SyntaxError: “Pipe body contains no topic.”","m.new_content":{"body":"At least it will throw if it’s the only expected use of topic in the pipe body. `f() |> ~(2)` is a SyntaxError: “Pipe body contains no topic.”","format":"org.matrix.custom.html","formatted_body":"At least it will throw if it’s the only expected use of topic in the pipe body. <code>f() |&gt; ~(2)</code> is a SyntaxError: “Pipe body contains no topic.”","msgtype":"m.text"},"m.relates_to":{"event_id":"$PFvL5IzYc6TvFALIRXIz9bL_V8IrYflBMUwkbjE602g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657545237413,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yllNF3F8oHLLUo7NbzU-60B6ZEiSFUXgnWvWqmvUpuU"},
{"content":{"body":" * At least it will throw if it’s the only expected use of topic in the pipe body. \n\n`f() |> ~(2)` would be a SyntaxError: “Pipe body contains no topic.”\n\n(`f() |> #[~(2), ~ + 1]` would not be a SyntaxError, but is that situation going to be common? Hmm.)","format":"org.matrix.custom.html","formatted_body":" * <p>At least it will throw if it’s the only expected use of topic in the pipe body.</p>\n<p><code>f() |&gt; ~(2)</code> would be a SyntaxError: “Pipe body contains no topic.”</p>\n<p>(<code>f() |&gt; #[~(2), ~ + 1]</code> would not be a SyntaxError, but is that situation going to be common? Hmm.)</p>\n","m.new_content":{"body":"At least it will throw if it’s the only expected use of topic in the pipe body. \n\n`f() |> ~(2)` would be a SyntaxError: “Pipe body contains no topic.”\n\n(`f() |> #[~(2), ~ + 1]` would not be a SyntaxError, but is that situation going to be common? Hmm.)","format":"org.matrix.custom.html","formatted_body":"<p>At least it will throw if it’s the only expected use of topic in the pipe body.</p>\n<p><code>f() |&gt; ~(2)</code> would be a SyntaxError: “Pipe body contains no topic.”</p>\n<p>(<code>f() |&gt; #[~(2), ~ + 1]</code> would not be a SyntaxError, but is that situation going to be common? Hmm.)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"At least it will throw if it’s the only expected use of topic in the pipe body. \n\n`f() |> ~(2)` would be a SyntaxError: “Pipe body contains no topic.”\n\n(`f() |> #[~(2), ~ + 1]` would not be a SyntaxError, but is that situation going to be common? Hmm.)","mimetype":"text/plain"},{"body":"<p>At least it will throw if it’s the only expected use of topic in the pipe body.</p>\n<p><code>f() |&gt; ~(2)</code> would be a SyntaxError: “Pipe body contains no topic.”</p>\n<p>(<code>f() |&gt; #[~(2), ~ + 1]</code> would not be a SyntaxError, but is that situation going to be common? Hmm.)</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PFvL5IzYc6TvFALIRXIz9bL_V8IrYflBMUwkbjE602g","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * At least it will throw if it’s the only expected use of topic in the pipe body. \n\n`f() |> ~(2)` would be a SyntaxError: “Pipe body contains no topic.”\n\n(`f() |> #[~(2), ~ + 1]` would not be a SyntaxError, but is that situation going to be common? Hmm.)","mimetype":"text/plain"},{"body":" * <p>At least it will throw if it’s the only expected use of topic in the pipe body.</p>\n<p><code>f() |&gt; ~(2)</code> would be a SyntaxError: “Pipe body contains no topic.”</p>\n<p>(<code>f() |&gt; #[~(2), ~ + 1]</code> would not be a SyntaxError, but is that situation going to be common? Hmm.)</p>\n","mimetype":"text/html"}]},"ts":1657545365411,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$g3n0r8jhWFymfNe0j999PTRyTY4BBhhmLIJTTSyDqtM"},
{"content":{"body":"Ah yes. I had completely forgotten about \"it will throw if it’s the only expected use of topic in the pipe body.\"","msgtype":"m.text","org.matrix.msc1767.text":"Ah yes. I had completely forgotten about \"it will throw if it’s the only expected use of topic in the pipe body.\""},"ts":1657545549123,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Eml2STjYX76UAkotX1UjW-Sqx7pTD9P9Fp-b7zqV75w"}
]