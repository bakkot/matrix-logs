[
{"content":{"body":"ljharb: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, `source |> a + (# |> b + #)` is valid. It is the same as `source |> a + (b + #)` and `a + (b + source)`.\n\nHowever, `source |> (a + # |> b) + #` is invalid, because `|> b` does not contain any topic reference.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, <code>source |&gt; a + (# |&gt; b + #)</code> is valid. It is the same as <code>source |&gt; a + (b + #)</code> and <code>a + (b + source)</code>.</p>\n<p>However, <code>source |&gt; (a + # |&gt; b) + #</code> is invalid, because <code>|&gt; b</code> does not contain any topic reference.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, `source |> a + (# |> b + #)` is valid. It is the same as `source |> a + (b + #)` and `a + (b + source)`.\n\nHowever, `source |> (a + # |> b) + #` is invalid, because `|> b` does not contain any topic reference.","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, <code>source |&gt; a + (# |&gt; b + #)</code> is valid. It is the same as <code>source |&gt; a + (b + #)</code> and <code>a + (b + source)</code>.</p>\n<p>However, <code>source |&gt; (a + # |&gt; b) + #</code> is invalid, because <code>|&gt; b</code> does not contain any topic reference.</p>\n","mimetype":"text/html"}]},"ts":1644594878870,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xXTK3LS8d-p71K3Rxz9EW_oIViR_ARbPgENLHezV8fc"},
{"content":{"body":"Also, `source |> a => # + a |> output(#)` is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","format":"org.matrix.custom.html","formatted_body":"Also, <code>source |&gt; a =&gt; # + a |&gt; output(#)</code> is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, `source |> a => # + a |> output(#)` is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","mimetype":"text/plain"},{"body":"Also, <code>source |&gt; a =&gt; # + a |&gt; output(#)</code> is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","mimetype":"text/html"}]},"ts":1644594918880,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dK9X8KsSzzmCvKnXEDB41MnsgvJBM6Fc1mZSKJXw4IU"},
{"content":{"body":"Thanks, the rules are straightforward but that doesnâ€™t mean contrived examples are intuitive :-)","msgtype":"m.text"},"ts":1644595346654,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Mr97lcj6l4cKuRLYM-HrN5NZtPLZfP7ME7-Lfai-8L0"},
{"content":{"body":"We have banned `a |> # ? c : d` and require parentheses: `(a |> #) ? c : d` or `a |> (# ? c : d)`.\n\nI think we should also ban `a ? b : c |> #` and require parentheses: `(a ? b : c) |> #` or `a ? b : (c |> #)`. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.","format":"org.matrix.custom.html","formatted_body":"<p>We have banned <code>a |&gt; # ? c : d</code> and require parentheses: <code>(a |&gt; #) ? c : d</code> or <code>a |&gt; (# ? c : d)</code>.</p>\n<p>I think we should also ban <code>a ? b : c |&gt; #</code> and require parentheses: <code>(a ? b : c) |&gt; #</code> or <code>a ? b : (c |&gt; #)</code>. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We have banned `a |> # ? c : d` and require parentheses: `(a |> #) ? c : d` or `a |> (# ? c : d)`.\n\nI think we should also ban `a ? b : c |> #` and require parentheses: `(a ? b : c) |> #` or `a ? b : (c |> #)`. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.","mimetype":"text/plain"},{"body":"<p>We have banned <code>a |&gt; # ? c : d</code> and require parentheses: <code>(a |&gt; #) ? c : d</code> or <code>a |&gt; (# ? c : d)</code>.</p>\n<p>I think we should also ban <code>a ? b : c |&gt; #</code> and require parentheses: <code>(a ? b : c) |&gt; #</code> or <code>a ? b : (c |&gt; #)</code>. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.</p>\n","mimetype":"text/html"}]},"ts":1644605166983,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JUqIeA97dt7-AaChgbuzVyCsgSaaRgEstR8uTOwRdFw"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1644605742176,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$InFZ91J2z_i27nlAd1musKutohhO_QuLm-j5WUa58OI"},
{"content":{"body":"Should we require ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","format":"org.matrix.custom.html","formatted_body":"Should we require ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Should we require ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","mimetype":"text/plain"},{"body":"Should we require ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644606869021,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rkZ_6Fw8seH0OitI7WYB9i8I2GO_TLDkvAiaPY7gfnE"},
{"content":{"body":"Same with banning `yield a |> #` and requiring `(yield a) |> #` or `yield (a |> #)`.","format":"org.matrix.custom.html","formatted_body":"Same with banning <code>yield a |&gt; #</code> and requiring <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Same with banning `yield a |> #` and requiring `(yield a) |> #` or `yield (a |> #)`.","mimetype":"text/plain"},{"body":"Same with banning <code>yield a |&gt; #</code> and requiring <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","mimetype":"text/html"}]},"ts":1644606892764,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6AMwR3q34qbH_5S5Mj6F5VelgU_wbAFnRUmHOqWV0y8"}
]