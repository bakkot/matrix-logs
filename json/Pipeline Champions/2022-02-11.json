[
{"content":{"body":"ljharb: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, `source |> a + (# |> b + #)` is valid. It is the same as `source |> a + (b + #)` and `a + (b + source)`.\n\nHowever, `source |> (a + # |> b) + #` is invalid, because `|> b` does not contain any topic reference.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, <code>source |&gt; a + (# |&gt; b + #)</code> is valid. It is the same as <code>source |&gt; a + (b + #)</code> and <code>a + (b + source)</code>.</p>\n<p>However, <code>source |&gt; (a + # |&gt; b) + #</code> is invalid, because <code>|&gt; b</code> does not contain any topic reference.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, `source |> a + (# |> b + #)` is valid. It is the same as `source |> a + (b + #)` and `a + (b + source)`.\n\nHowever, `source |> (a + # |> b) + #` is invalid, because `|> b` does not contain any topic reference.","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Regarding https://github.com/tc39/proposal-pipeline-operator/issues/262#issuecomment-1036323490, <code>source |&gt; a + (# |&gt; b + #)</code> is valid. It is the same as <code>source |&gt; a + (b + #)</code> and <code>a + (b + source)</code>.</p>\n<p>However, <code>source |&gt; (a + # |&gt; b) + #</code> is invalid, because <code>|&gt; b</code> does not contain any topic reference.</p>\n","mimetype":"text/html"}]},"ts":1644594878870,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xXTK3LS8d-p71K3Rxz9EW_oIViR_ARbPgENLHezV8fc"},
{"content":{"body":"Also, `source |> a => # + a |> output(#)` is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","format":"org.matrix.custom.html","formatted_body":"Also, <code>source |&gt; a =&gt; # + a |&gt; output(#)</code> is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, `source |> a => # + a |> output(#)` is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","mimetype":"text/plain"},{"body":"Also, <code>source |&gt; a =&gt; # + a |&gt; output(#)</code> is invalid because arrow functions (and all other non-pipe AssignmentExpressions) must be parenthesized in pipe bodies to prevent confusing grouping.","mimetype":"text/html"}]},"ts":1644594918880,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dK9X8KsSzzmCvKnXEDB41MnsgvJBM6Fc1mZSKJXw4IU"},
{"content":{"body":"Thanks, the rules are straightforward but that doesn’t mean contrived examples are intuitive :-)","msgtype":"m.text"},"ts":1644595346654,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Mr97lcj6l4cKuRLYM-HrN5NZtPLZfP7ME7-Lfai-8L0"},
{"content":{"body":"We have banned `a |> # ? c : d` and require parentheses: `(a |> #) ? c : d` or `a |> (# ? c : d)`.\n\nI think we should also ban `a ? b : c |> #` and require parentheses: `(a ? b : c) |> #` or `a ? b : (c |> #)`. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.","format":"org.matrix.custom.html","formatted_body":"<p>We have banned <code>a |&gt; # ? c : d</code> and require parentheses: <code>(a |&gt; #) ? c : d</code> or <code>a |&gt; (# ? c : d)</code>.</p>\n<p>I think we should also ban <code>a ? b : c |&gt; #</code> and require parentheses: <code>(a ? b : c) |&gt; #</code> or <code>a ? b : (c |&gt; #)</code>. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We have banned `a |> # ? c : d` and require parentheses: `(a |> #) ? c : d` or `a |> (# ? c : d)`.\n\nI think we should also ban `a ? b : c |> #` and require parentheses: `(a ? b : c) |> #` or `a ? b : (c |> #)`. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.","mimetype":"text/plain"},{"body":"<p>We have banned <code>a |&gt; # ? c : d</code> and require parentheses: <code>(a |&gt; #) ? c : d</code> or <code>a |&gt; (# ? c : d)</code>.</p>\n<p>I think we should also ban <code>a ? b : c |&gt; #</code> and require parentheses: <code>(a ? b : c) |&gt; #</code> or <code>a ? b : (c |&gt; #)</code>. This would add an early error to ConditionalExpression. I plan to add this to the spec later if nobody else has objections.</p>\n","mimetype":"text/html"}]},"ts":1644605166983,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JUqIeA97dt7-AaChgbuzVyCsgSaaRgEstR8uTOwRdFw"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1644605742176,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$InFZ91J2z_i27nlAd1musKutohhO_QuLm-j5WUa58OI"},
{"content":{"body":"Should we require ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","format":"org.matrix.custom.html","formatted_body":"Should we require ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Should we require ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","mimetype":"text/plain"},{"body":"Should we require ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644606869021,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rkZ_6Fw8seH0OitI7WYB9i8I2GO_TLDkvAiaPY7gfnE"},
{"content":{"body":"Same with banning `yield a |> #` and requiring `(yield a) |> #` or `yield (a |> #)`.","format":"org.matrix.custom.html","formatted_body":"Same with banning <code>yield a |&gt; #</code> and requiring <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Same with banning `yield a |> #` and requiring `(yield a) |> #` or `yield (a |> #)`.","mimetype":"text/plain"},{"body":"Same with banning <code>yield a |&gt; #</code> and requiring <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","mimetype":"text/html"}]},"ts":1644606892764,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6AMwR3q34qbH_5S5Mj6F5VelgU_wbAFnRUmHOqWV0y8"},
{"content":{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`.","format":"org.matrix.custom.html","formatted_body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","m.new_content":{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`.","format":"org.matrix.custom.html","formatted_body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`.","mimetype":"text/plain"},{"body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6AMwR3q34qbH_5S5Mj6F5VelgU_wbAFnRUmHOqWV0y8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`.","mimetype":"text/plain"},{"body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>.","mimetype":"text/html"}]},"ts":1644606906114,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AzW6-XWZeHG7BnJh9T48e0fFcGO6Uk1S5lSwXxpUhsE"},
{"content":{"body":" * Should we ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","format":"org.matrix.custom.html","formatted_body":" * Should we ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","m.new_content":{"body":"Should we ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","format":"org.matrix.custom.html","formatted_body":"Should we ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Should we ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","mimetype":"text/plain"},{"body":"Should we ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rkZ_6Fw8seH0OitI7WYB9i8I2GO_TLDkvAiaPY7gfnE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Should we ban `a = b |> #` and require `(a = b) |> #` or `a = (b |> #)`?","mimetype":"text/plain"},{"body":" * Should we ban <code>a = b |&gt; #</code> and require <code>(a = b) |&gt; #</code> or <code>a = (b |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644606909464,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rsKOZbVziJgBOwtsJmjLoo78qFH8pGKChU8Zv_JXGrw"},
{"content":{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","format":"org.matrix.custom.html","formatted_body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","m.new_content":{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","format":"org.matrix.custom.html","formatted_body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","mimetype":"text/plain"},{"body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6AMwR3q34qbH_5S5Mj6F5VelgU_wbAFnRUmHOqWV0y8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","mimetype":"text/plain"},{"body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644606918975,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$L3ft-6gPCCQbdQzA6abx7jwdhAjGZ6kymasqhWfs0Qw"},
{"content":{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","format":"org.matrix.custom.html","formatted_body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","mimetype":"text/plain"},{"body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644606960857,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tKdE_h4mtKOp6x7L46W7AaadMtsHnNFB6PMAARuBRBs"},
{"content":{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","format":"org.matrix.custom.html","formatted_body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","mimetype":"text/plain"},{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","mimetype":"text/html"}]},"ts":1644607058512,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zqjj7lRkul4UxKeQF6IE1DYAKwgRQw5DE7LNEm4ApTY"},
{"content":{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","format":"org.matrix.custom.html","formatted_body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","m.new_content":{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","format":"org.matrix.custom.html","formatted_body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","mimetype":"text/plain"},{"body":"And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tKdE_h4mtKOp6x7L46W7AaadMtsHnNFB6PMAARuBRBs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And should we ban `yield a |> #` and require `(yield a) |> #` or `yield (a |> #)`?","mimetype":"text/plain"},{"body":" * And should we ban <code>yield a |&gt; #</code> and require <code>(yield a) |&gt; #</code> or <code>yield (a |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644607072332,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9pZ-Mh7ghWZz5ntc3IsR7Ega59l7S6dTu9Zxl0It5yc"},
{"content":{"body":" * And should we ban `a => b |> #` and require `(a => b) |> #` or `a => (b |> #)`?\n","format":"org.matrix.custom.html","formatted_body":" * And should we ban <code>a =&gt; b |&gt; #</code> and require <code>(a =&gt; b) |&gt; #</code> or <code>a =&gt; (b |&gt; #)</code>?","m.new_content":{"body":"And should we ban `a => b |> #` and require `(a => b) |> #` or `a => (b |> #)`?\n","format":"org.matrix.custom.html","formatted_body":"And should we ban <code>a =&gt; b |&gt; #</code> and require <code>(a =&gt; b) |&gt; #</code> or <code>a =&gt; (b |&gt; #)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And should we ban `a => b |> #` and require `(a => b) |> #` or `a => (b |> #)`?\n","mimetype":"text/plain"},{"body":"And should we ban <code>a =&gt; b |&gt; #</code> and require <code>(a =&gt; b) |&gt; #</code> or <code>a =&gt; (b |&gt; #)</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6AMwR3q34qbH_5S5Mj6F5VelgU_wbAFnRUmHOqWV0y8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And should we ban `a => b |> #` and require `(a => b) |> #` or `a => (b |> #)`?\n","mimetype":"text/plain"},{"body":" * And should we ban <code>a =&gt; b |&gt; #</code> and require <code>(a =&gt; b) |&gt; #</code> or <code>a =&gt; (b |&gt; #)</code>?","mimetype":"text/html"}]},"ts":1644607074246,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Ct5NPGFPnVv9vCvrU74mfiFp01KJCNCT1r7fxzDYC5A"},
{"content":{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion.\n(Note: We do already ban all four of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","format":"org.matrix.custom.html","formatted_body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion.<br>(Note: We do already ban all four of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","m.new_content":{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion.\n(Note: We do already ban all four of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","format":"org.matrix.custom.html","formatted_body":"My inclination is no: the ternary operator is special and has special opportunity for confusion.<br>(Note: We do already ban all four of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion.\n(Note: We do already ban all four of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","mimetype":"text/plain"},{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion.<br>(Note: We do already ban all four of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$zqjj7lRkul4UxKeQF6IE1DYAKwgRQw5DE7LNEm4ApTY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion.\n(Note: We do already ban all four of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","mimetype":"text/plain"},{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion.<br>(Note: We do already ban all four of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","mimetype":"text/html"}]},"ts":1644607101674,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jb1KeXs4XKEdUzk3YeiAlPpBPu-ygSFKotiq1OmiAl8"},
{"content":{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion.","m.new_content":{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion.","msgtype":"m.text","org.matrix.msc1767.text":"My inclination is no: the ternary operator is special and has special opportunity for confusion."},"m.relates_to":{"event_id":"$zqjj7lRkul4UxKeQF6IE1DYAKwgRQw5DE7LNEm4ApTY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * My inclination is no: the ternary operator is special and has special opportunity for confusion."},"ts":1644607106929,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lLVBMRSvfTGZ3f7am0IPYUhdoE8TLLtU2fJtLc1WQL8"},
{"content":{"body":"(Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","format":"org.matrix.custom.html","formatted_body":"(Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","mimetype":"text/plain"},{"body":"(Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","mimetype":"text/html"}]},"ts":1644607107519,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qUhAswBS0m7QkKV6d8tQj-Znsfqx2R8VJ4qpd-wPDic"},
{"content":{"body":" * (Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","format":"org.matrix.custom.html","formatted_body":" * (Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","m.new_content":{"body":"(Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","format":"org.matrix.custom.html","formatted_body":"(Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","mimetype":"text/plain"},{"body":"(Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qUhAswBS0m7QkKV6d8tQj-Znsfqx2R8VJ4qpd-wPDic","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (Note: We do already ban all three of these operators in pipe _bodies_: `a |> b = #`, `a |> b => #`, and `a |> yield #` are all SyntaxErrors.)","mimetype":"text/plain"},{"body":" * (Note: We do already ban all three of these operators in pipe <em>bodies</em>: <code>a |&gt; b = #</code>, <code>a |&gt; b =&gt; #</code>, and <code>a |&gt; yield #</code> are all SyntaxErrors.)","mimetype":"text/html"}]},"ts":1644607120517,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hRp_hleSP_jPZDxTib5gjUHEcypFShyBBm-4_w-b-8w"},
{"content":{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","format":"org.matrix.custom.html","formatted_body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","m.new_content":{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","format":"org.matrix.custom.html","formatted_body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","mimetype":"text/plain"},{"body":"My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$zqjj7lRkul4UxKeQF6IE1DYAKwgRQw5DE7LNEm4ApTY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion, but `=`, `=>`, and `yield` are okay to have “looser” precedence than `|>`.","mimetype":"text/plain"},{"body":" * My inclination is no: the ternary operator is special and has special opportunity for confusion, but <code>=</code>, <code>=&gt;</code>, and <code>yield</code> are okay to have “looser” precedence than <code>|&gt;</code>.","mimetype":"text/html"}]},"ts":1644607152165,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i_Y4NPbT6BcINdfGXdLNgvu2k_knu9H_OQ9UlyhDZ3s"},
{"content":{"body":"Agree on all counts; those all read reasonably to me as the head of statements (assuming that for all of them the pipe binds tighter, producing the second parenthesized example)","msgtype":"m.text","org.matrix.msc1767.text":"Agree on all counts; those all read reasonably to me as the head of statements (assuming that for all of them the pipe binds tighter, producing the second parenthesized example)"},"ts":1644607724239,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$TzrOg_5nfq-5eXNjYVADOFP1TfZH75vVnJV-Op-S7R8"},
{"content":{"body":"Yeah.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah."},"ts":1644607996471,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$o_blqdIsFqP7i9M7MIoNXiG_aiNM4xXEeasxxK86VDA"},
{"content":{"body":"The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","format":"org.matrix.custom.html","formatted_body":"<p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","mimetype":"text/plain"},{"body":"<p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","mimetype":"text/html"}]},"ts":1644608015065,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BZIsim_jBpO3Q1lfE1b5fwCwCxJLK611g7ypazHimQQ"},
{"content":{"body":" * The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","format":"org.matrix.custom.html","formatted_body":" * <p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","m.new_content":{"body":"The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","format":"org.matrix.custom.html","formatted_body":"<p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","mimetype":"text/plain"},{"body":"<p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BZIsim_jBpO3Q1lfE1b5fwCwCxJLK611g7ypazHimQQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The precedence relationships between `yield`, `=`, `=>`, and `? :` are already a mess, due to the weird LHSes of `=` and `=>`, as well as `? :`’s being ternary.\n\n`1 ? x = 2 : 3` groups as `1 ? (x = 2) : 3` and `1 ? x => 2 : 3` groups as `1 ? (x => 2) : 3`. But `x = 1 ? 2 : 3` is `x = (1 ? 2 : 3)` and `x => 1 ? 2 : 3` is `x => (1 ? 2 : 3)`. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where `|>` fits in in laypersons’ terms (let alone explaining how `yield`, `=`, `=>`, and `? :` in such terms).","mimetype":"text/plain"},{"body":" * <p>The precedence relationships between <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> are already a mess, due to the weird LHSes of <code>=</code> and <code>=&gt;</code>, as well as <code>? :</code>’s being ternary.</p>\n<p><code>1 ? x = 2 : 3</code> groups as <code>1 ? (x = 2) : 3</code> and <code>1 ? x =&gt; 2 : 3</code> groups as <code>1 ? (x =&gt; 2) : 3</code>. But <code>x = 1 ? 2 : 3</code> is <code>x = (1 ? 2 : 3)</code> and <code>x =&gt; 1 ? 2 : 3</code> is <code>x =&gt; (1 ? 2 : 3)</code>. The whole concept of “precedence” breaks down at this level…so I’m not sure how to explain where <code>|&gt;</code> fits in in laypersons’ terms (let alone explaining how <code>yield</code>, <code>=</code>, <code>=&gt;</code>, and <code>? :</code> in such terms).</p>\n","mimetype":"text/html"}]},"ts":1644608037477,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9TcjzDEhpoMZywcngoHEbiu2Vnvm-fiiJeNjwLgIvUw"},
{"content":{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strong, it seems like `^^` is the top contender (or at least the least offensive) within the Committee.","format":"org.matrix.custom.html","formatted_body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strong, it seems like <code>^^</code> is the top contender (or at least the least offensive) within the Committee.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strong, it seems like `^^` is the top contender (or at least the least offensive) within the Committee.","mimetype":"text/plain"},{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strong, it seems like <code>^^</code> is the top contender (or at least the least offensive) within the Committee.","mimetype":"text/html"}]},"ts":1644616158221,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-fFMmSqKHsQmh9DF0uTnpP-5zuHJIBkvQZmWsCUyK6I"},
{"content":{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` may be the top contender (or at least the least offensive) within the Committee.","format":"org.matrix.custom.html","formatted_body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> may be the top contender (or at least the least offensive) within the Committee.","m.new_content":{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` may be the top contender (or at least the least offensive) within the Committee.","format":"org.matrix.custom.html","formatted_body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> may be the top contender (or at least the least offensive) within the Committee.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` may be the top contender (or at least the least offensive) within the Committee.","mimetype":"text/plain"},{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> may be the top contender (or at least the least offensive) within the Committee.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$-fFMmSqKHsQmh9DF0uTnpP-5zuHJIBkvQZmWsCUyK6I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` may be the top contender (or at least the least offensive) within the Committee.","mimetype":"text/plain"},{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> may be the top contender (or at least the least offensive) within the Committee.","mimetype":"text/html"}]},"ts":1644616651308,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$S3qqJpkPfbyJCdlCKW04T7WFdIe7HOHyZbU-mAEHQeo"},
{"content":{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` and `%%` may be the top contenders (or at least the least offensive) within the Committee.","format":"org.matrix.custom.html","formatted_body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> and <code>%%</code> may be the top contenders (or at least the least offensive) within the Committee.","m.new_content":{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` and `%%` may be the top contenders (or at least the least offensive) within the Committee.","format":"org.matrix.custom.html","formatted_body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> and <code>%%</code> may be the top contenders (or at least the least offensive) within the Committee.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` and `%%` may be the top contenders (or at least the least offensive) within the Committee.","mimetype":"text/plain"},{"body":"Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> and <code>%%</code> may be the top contenders (or at least the least offensive) within the Committee.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$-fFMmSqKHsQmh9DF0uTnpP-5zuHJIBkvQZmWsCUyK6I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like ljharb would push back against `#` and `@@`. If this is strongly felt, it seems like `^^` and `%%` may be the top contenders (or at least the least offensive) within the Committee.","mimetype":"text/plain"},{"body":" * Regarding the topic token: Based on https://github.com/tc39/proposal-record-tuple/issues/10#issuecomment-1036648269, it seems like <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> would push back against <code>#</code> and <code>@@</code>. If this is strongly felt, it seems like <code>^^</code> and <code>%%</code> may be the top contenders (or at least the least offensive) within the Committee.","mimetype":"text/html"}]},"ts":1644616673649,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aW73X6JZ7pUMxXKfzv3_8QTT3Y0Ew_auCvO3HeD4npo"},
{"content":{"body":"i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","format":"org.matrix.custom.html","formatted_body":"i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","mimetype":"text/plain"},{"body":"i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","mimetype":"text/html"}]},"ts":1644617393028,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x7ibi8da_DkNgN8DzUErLtSbkxNJENUZwo450srC_zo"},
{"content":{"body":" * i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","format":"org.matrix.custom.html","formatted_body":" * i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","m.new_content":{"body":"i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","format":"org.matrix.custom.html","formatted_body":"i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","mimetype":"text/plain"},{"body":"i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$x7ibi8da_DkNgN8DzUErLtSbkxNJENUZwo450srC_zo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i haven't decided how strong i feel about it, but i don't think `@` is better than `#`","mimetype":"text/plain"},{"body":" * i haven't decided how strong i feel about it, but i don't think <code>@</code> is better than <code>#</code>","mimetype":"text/html"}]},"ts":1644617400229,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oIO4ABNfnmwItrglROA3MTrbWfdeGKIHt5UaikT6dZM"},
{"content":{"body":"i do prefer a single token over a double one tho","msgtype":"m.text","org.matrix.msc1767.text":"i do prefer a single token over a double one tho"},"ts":1644617412272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y52IUlImQLR1aKpUAqwVLKjgeccm9eSbPNraEGoJx8k"}
]