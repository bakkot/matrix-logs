[
{"content":{"body":"FYI: https://github.com/tc39/agendas/pull/1133\n\n","msgtype":"m.text","org.matrix.msc1767.text":"FYI: https://github.com/tc39/agendas/pull/1133\n\n"},"ts":1647570526697,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$a6v_B4_sdR1TxAd0SMUpc__LfzCNeh0fYRHVy_ovUdA"},
{"content":{"body":"(Please update https://github.com/tc39/agendas/blob/main/2022/03.md#schedule-constraints if you have schedule constraints and don’t want to miss the topic-reference bikeshedding, the bind-this syntax bikeshedding, or the holistic dataflow redux. ljharb, you have some constraints, so you might want to do so.)","format":"org.matrix.custom.html","formatted_body":"(Please update https://github.com/tc39/agendas/blob/main/2022/03.md#schedule-constraints if you have schedule constraints and don’t want to miss the topic-reference bikeshedding, the bind-this syntax bikeshedding, or the holistic dataflow redux. <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, you have some constraints, so you might want to do so.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Please update https://github.com/tc39/agendas/blob/main/2022/03.md#schedule-constraints if you have schedule constraints and don’t want to miss the topic-reference bikeshedding, the bind-this syntax bikeshedding, or the holistic dataflow redux. ljharb, you have some constraints, so you might want to do so.)","mimetype":"text/plain"},{"body":"(Please update https://github.com/tc39/agendas/blob/main/2022/03.md#schedule-constraints if you have schedule constraints and don’t want to miss the topic-reference bikeshedding, the bind-this syntax bikeshedding, or the holistic dataflow redux. <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>, you have some constraints, so you might want to do so.)","mimetype":"text/html"}]},"ts":1647570564723,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LEyffwdF8UGJ626KuWz7iLCSsN6AKllkLkZL928pbTw"},
{"content":{"body":"thanks, will do","msgtype":"m.text"},"ts":1647571766108,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lhCz0jbpfrO4tpwTj9ZnCnxbOzrUIz94rjlAiwK1U2w"},
{"content":{"body":"I’ll land your PR shortly also","msgtype":"m.text"},"ts":1647571784712,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xMJY6T6Y9OD83JowGlB_8gEubpK31Ln4mev173MKmrA"},
{"content":{"body":"Just also made a community update: https://github.com/tc39/proposal-pipeline-operator/issues/232#issuecomment-1071995811","msgtype":"m.text","org.matrix.msc1767.text":"Just also made a community update: https://github.com/tc39/proposal-pipeline-operator/issues/232#issuecomment-1071995811"},"ts":1647574517239,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Zf0mcHMUXxXDFEYonetJPTrfisZ6JiseYCR0Dpdpin0"},
{"content":{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","format":"org.matrix.custom.html","formatted_body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","mimetype":"text/plain"},{"body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$yZKTTmUFD46matzjDJyKQeMgfX9-IwXjJ4Cp8WWB-hg"}}},"ts":1647624618562,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6JiefHjW6bgKnCoWgy79kM6LiSRHLVqwTLxtsxodgWM"},
{"content":{"body":"> <@ljharb:matrix.org> jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)\n\n * I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^ y` or `(%%)% y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$yZKTTmUFD46matzjDJyKQeMgfX9-IwXjJ4Cp8WWB-hg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)</blockquote></mx-reply> * <p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^ y</code> or <code>(%%)% y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","m.new_content":{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^ y` or `(%%)% y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","format":"org.matrix.custom.html","formatted_body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^ y</code> or <code>(%%)% y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^ y` or `(%%)% y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","mimetype":"text/plain"},{"body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^ y</code> or <code>(%%)% y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6JiefHjW6bgKnCoWgy79kM6LiSRHLVqwTLxtsxodgWM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)\n\n * I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^ y` or `(%%)% y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$yZKTTmUFD46matzjDJyKQeMgfX9-IwXjJ4Cp8WWB-hg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)</blockquote></mx-reply> * <p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^ y</code> or <code>(%%)% y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","mimetype":"text/html"}]},"ts":1647624632315,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nqFvc4Wdw9COevwfyXlIeYSdM9TgqOVH64Kw3f18nME"},
{"content":{"body":" * I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","format":"org.matrix.custom.html","formatted_body":" * <p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","m.new_content":{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","format":"org.matrix.custom.html","formatted_body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","mimetype":"text/plain"},{"body":"<p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6JiefHjW6bgKnCoWgy79kM6LiSRHLVqwTLxtsxodgWM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I’ve come around to `#` as the topic reference again, even if tuple literals go with `#[]`.\n\nRequiring separation between topic and property access isn’t too bad: `x |> (#)[0]`…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between `(^^)^y` or `(%%)%y`.\n\nOur candidates right now are `#`, `^^`, `%%`, `@@`, and `##`.","mimetype":"text/plain"},{"body":" * <p>I’ve come around to <code>#</code> as the topic reference again, even if tuple literals go with <code>#[]</code>.</p>\n<p>Requiring separation between topic and property access isn’t too bad: <code>x |&gt; (#)[0]</code>…since dynamically accessing the property of a topic is going to be strictly less common than using the topic reference itself. And it’s not really a “special case”…or at least it’s as much as a special case as requiring separation between <code>(^^)^y</code> or <code>(%%)%y</code>.</p>\n<p>Our candidates right now are <code>#</code>, <code>^^</code>, <code>%%</code>, <code>@@</code>, and <code>##</code>.</p>\n","mimetype":"text/html"}]},"ts":1647624641511,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0LIVMRLiKAzpvIP-ay8yywqnxtJywJhmeUwGYyWk-iY"},
{"content":{"body":"in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","format":"org.matrix.custom.html","formatted_body":"in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","mimetype":"text/plain"},{"body":"in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","mimetype":"text/html"}]},"ts":1647624655250,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mg2pm3lw9r-WwoQAam7kt_C8tVoDJQgR4-B-pOqZIis"},
{"content":{"body":"Yes.","msgtype":"m.text","org.matrix.msc1767.text":"Yes."},"ts":1647624658834,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7CnyD3n4zMXS0HrcSklUHEKe4eSJTOfZnBKPhGVKG88"},
{"content":{"body":" * in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","format":"org.matrix.custom.html","formatted_body":" * in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","m.new_content":{"body":"in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","format":"org.matrix.custom.html","formatted_body":"in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","mimetype":"text/plain"},{"body":"in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mg2pm3lw9r-WwoQAam7kt_C8tVoDJQgR4-B-pOqZIis","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * in that case you'd do `(#)[x]` but `#.x` and `#?.[x]`?","mimetype":"text/plain"},{"body":" * in that case you'd do <code>(#)[x]</code> but <code>#.x</code> and <code>#?.[x]</code>?","mimetype":"text/html"}]},"ts":1647624664797,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0gKcWH5MloQ6ZY0ZyoK-2Oo_6-L41PvjaY87cGJfv2E"},
{"content":{"body":"so it's only non-optional bracketed access that would need parens","msgtype":"m.text","org.matrix.msc1767.text":"so it's only non-optional bracketed access that would need parens"},"ts":1647624678549,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4_kG4a44S6c0ZY9jAhRxqhIacBNDYOnn0s1_0W_CFkY"},
{"content":{"body":"Leaving the `#[` token to be reserved for tuple literals.","format":"org.matrix.custom.html","formatted_body":"Leaving the <code>#[</code> token to be reserved for tuple literals.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Leaving the `#[` token to be reserved for tuple literals.","mimetype":"text/plain"},{"body":"Leaving the <code>#[</code> token to be reserved for tuple literals.","mimetype":"text/html"}]},"ts":1647624679832,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YvXqCE8Gm0bGgNVtYGXsEqEy-P0rJj8Md0-tRAxwrwY"},
{"content":{"body":"Yes.","msgtype":"m.text","org.matrix.msc1767.text":"Yes."},"ts":1647624681251,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MbPqedi9O1nJaewfOqbNQZt4O3V9PrikYp4LMTZZb0c"},
{"content":{"body":" * so it's only non-optional bracketed access that would need parens","m.new_content":{"body":"so it's only non-optional bracketed access that would need parens","msgtype":"m.text","org.matrix.msc1767.text":"so it's only non-optional bracketed access that would need parens"},"m.relates_to":{"event_id":"$4_kG4a44S6c0ZY9jAhRxqhIacBNDYOnn0s1_0W_CFkY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so it's only non-optional bracketed access that would need parens"},"ts":1647624684042,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VTLUih7wwWtLtlebtwbHIHcuCAxIuFgZnbUdsQQbhGo"},
{"content":{"body":" * Leaving the `#[` token to be reserved for tuple literals.","format":"org.matrix.custom.html","formatted_body":" * Leaving the <code>#[</code> token to be reserved for tuple literals.","m.new_content":{"body":"Leaving the `#[` token to be reserved for tuple literals.","format":"org.matrix.custom.html","formatted_body":"Leaving the <code>#[</code> token to be reserved for tuple literals.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Leaving the `#[` token to be reserved for tuple literals.","mimetype":"text/plain"},{"body":"Leaving the <code>#[</code> token to be reserved for tuple literals.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YvXqCE8Gm0bGgNVtYGXsEqEy-P0rJj8Md0-tRAxwrwY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Leaving the `#[` token to be reserved for tuple literals.","mimetype":"text/plain"},{"body":" * Leaving the <code>#[</code> token to be reserved for tuple literals.","mimetype":"text/html"}]},"ts":1647624688519,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gwEcvVgwUwCxIel_ZZm0yFXUQ3ZuhP4chvnvXlGfeY0"},
{"content":{"body":"while in practice that's probably fine, that is an odd inconsistency","msgtype":"m.text","org.matrix.msc1767.text":"while in practice that's probably fine, that is an odd inconsistency"},"ts":1647624694422,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fggtnl0bRksQitdzVs_lhV_RCSxtiMIt7Jy40ASoOwY"},
{"content":{"body":"i assume in Records, `#\\n{` wouldn't be allowed","format":"org.matrix.custom.html","formatted_body":"i assume in Records, <code>#\\n{</code> wouldn't be allowed","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i assume in Records, `#\\n{` wouldn't be allowed","mimetype":"text/plain"},{"body":"i assume in Records, <code>#\\n{</code> wouldn't be allowed","mimetype":"text/html"}]},"ts":1647624752225,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rHuMaXIfol4YKDst6T40zZZP_tQS3gN4k8XJFAUlnGs"},
{"content":{"body":"Yes, I believe they are making `#[` and `#{` their own lexical tokens.","format":"org.matrix.custom.html","formatted_body":"Yes, I believe they are making <code>#[</code> and <code>#{</code> their own lexical tokens.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, I believe they are making `#[` and `#{` their own lexical tokens.","mimetype":"text/plain"},{"body":"Yes, I believe they are making <code>#[</code> and <code>#{</code> their own lexical tokens.","mimetype":"text/html"}]},"ts":1647624766728,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IGjHllILYdWhj9kPy5w-upfFQ2tmm1Gx-4juXYI5icA"},
{"content":{"body":"https://tc39.es/proposal-record-tuple/#sec-punctuators","msgtype":"m.text","org.matrix.msc1767.text":"https://tc39.es/proposal-record-tuple/#sec-punctuators"},"ts":1647624811985,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zVVs6It9w91NZDxfVGfOTKJJIsKe_ftCs-T5IPXMRSY"},
{"content":{"body":"Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","format":"org.matrix.custom.html","formatted_body":"Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/plain"},{"body":"Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/html"}]},"ts":1647624940336,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uILOVjQIofQOkZbUE4-DNB5NZ5drco-thM4-YiHfBlQ"},
{"content":{"body":" * Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","format":"org.matrix.custom.html","formatted_body":" * Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","m.new_content":{"body":"Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","format":"org.matrix.custom.html","formatted_body":"Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/plain"},{"body":"Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uILOVjQIofQOkZbUE4-DNB5NZ5drco-thM4-YiHfBlQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Requiring parentheses to distinguish dynamic access `(#)[0]` from tuple `#[0]` is an odd inconsistency, I agree, but…\nThe benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/plain"},{"body":" * Requiring parentheses to distinguish dynamic access <code>(#)[0]</code> from tuple <code>#[0]</code> is an odd inconsistency, I agree, but…<br>The benefit of having a single- rather than double-character token (which would occur very frequently, every time a topic occurs) might be great enough to outweigh the cost of that inconsistency (which would occur relatively infrequently).","mimetype":"text/html"}]},"ts":1647625175272,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$v_oZCDAIsQ2MQUSJueC-QNW2nl7diAahEGLBjrJ5pxs"},
{"content":{"body":"Oh no, `#[0]` being a tuple *by default* is absolutely awful. Property access is going to remain *far* more common than tuple literals, forever.","format":"org.matrix.custom.html","formatted_body":"Oh no, <code>#[0]</code> being a tuple <em>by default</em> is absolutely awful. Property access is going to remain <em>far</em> more common than tuple literals, forever.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Oh no, `#[0]` being a tuple *by default* is absolutely awful. Property access is going to remain *far* more common than tuple literals, forever.","mimetype":"text/plain"},{"body":"Oh no, <code>#[0]</code> being a tuple <em>by default</em> is absolutely awful. Property access is going to remain <em>far</em> more common than tuple literals, forever.","mimetype":"text/html"}]},"ts":1647625479194,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$G9_WQPeeUS8sOsR8-l7iVXEkR-2vP1nZ4z9ba92EJvA"},
{"content":{"body":"So long as tuples stick with `#[]` a single `#` for topic is verboten, imo.","format":"org.matrix.custom.html","formatted_body":"So long as tuples stick with <code>#[]</code> a single <code>#</code> for topic is verboten, imo.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So long as tuples stick with `#[]` a single `#` for topic is verboten, imo.","mimetype":"text/plain"},{"body":"So long as tuples stick with <code>#[]</code> a single <code>#</code> for topic is verboten, imo.","mimetype":"text/html"}]},"ts":1647625500880,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$laGGYi3FrtESMAAXhtbFYl2gEX-S0d2QyjW_eqsaN4Y"}
]