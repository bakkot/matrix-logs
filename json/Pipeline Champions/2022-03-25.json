[
{"content":{"body":"https://i.imgur.com/qV5ClVf.png","msgtype":"m.text","org.matrix.msc1767.text":"https://i.imgur.com/qV5ClVf.png"},"ts":1648167553127,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$I-lYQt5J2dPTTSRGhNn6zp0h8UHOC3BvkHUBsObrO4c"},
{"content":{"body":"https://i.imgur.com/ff9aniE.png","msgtype":"m.text","org.matrix.msc1767.text":"https://i.imgur.com/ff9aniE.png"},"ts":1648167555824,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1-pVkrdcaldNx8J6BoApeSLrjMw34FoaUwtXh-rMbSY"},
{"content":{"body":"I have here two versions of the updated dataflow-proposal diagram.","msgtype":"m.text","org.matrix.msc1767.text":"I have here two versions of the updated dataflow-proposal diagram."},"ts":1648167569648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NmBR0DkKWs7f9yUkQGnyyjdfeEf-gorWBNI_rN90wPI"},
{"content":{"body":"What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use `.call` with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.\n```js\nfn.call(rec, arg) // Unnatural word order\nrec |> fn.call(@, arg) // Natural word order but worsened readability\nrec :> f(arg)\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use <code>.call</code> with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.</p>\n<pre><code class=\"language-js\">fn.call(rec, arg) // Unnatural word order\nrec |&gt; fn.call(@, arg) // Natural word order but worsened readability\nrec :&gt; f(arg)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use `.call` with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.\n```js\nfn.call(rec, arg) // Unnatural word order\nrec |> fn.call(@, arg) // Natural word order but worsened readability\nrec :> f(arg)\n```\n","mimetype":"text/plain"},{"body":"<p>What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use <code>.call</code> with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.</p>\n<pre><code class=\"language-js\">fn.call(rec, arg) // Unnatural word order\nrec |&gt; fn.call(@, arg) // Natural word order but worsened readability\nrec :&gt; f(arg)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648167720407,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6hHHp1B3MyzWMzL-VQiYYOVPbV7dQCuPm0H5ZkAUXJ0"},
{"content":{"body":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this.","m.new_content":{"body":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this.","msgtype":"m.text","org.matrix.msc1767.text":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this."},"m.relates_to":{"event_id":"$NmBR0DkKWs7f9yUkQGnyyjdfeEf-gorWBNI_rN90wPI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this."},"ts":1648167753408,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2oADTted2lmimrW8_Sv9LKfdaJ6zCKXPvy4E-lph2PM"}
]