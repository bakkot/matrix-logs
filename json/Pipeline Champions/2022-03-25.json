[
{"content":{"body":"https://i.imgur.com/qV5ClVf.png","msgtype":"m.text","org.matrix.msc1767.text":"https://i.imgur.com/qV5ClVf.png"},"ts":1648167553127,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$I-lYQt5J2dPTTSRGhNn6zp0h8UHOC3BvkHUBsObrO4c"},
{"content":{"body":"https://i.imgur.com/ff9aniE.png","msgtype":"m.text","org.matrix.msc1767.text":"https://i.imgur.com/ff9aniE.png"},"ts":1648167555824,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1-pVkrdcaldNx8J6BoApeSLrjMw34FoaUwtXh-rMbSY"},
{"content":{"body":"I have here two versions of the updated dataflow-proposal diagram.","msgtype":"m.text","org.matrix.msc1767.text":"I have here two versions of the updated dataflow-proposal diagram."},"ts":1648167569648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NmBR0DkKWs7f9yUkQGnyyjdfeEf-gorWBNI_rN90wPI"},
{"content":{"body":"What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use `.call` with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.\n```js\nfn.call(rec, arg) // Unnatural word order\nrec |> fn.call(@, arg) // Natural word order but worsened readability\nrec :> f(arg)\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use <code>.call</code> with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.</p>\n<pre><code class=\"language-js\">fn.call(rec, arg) // Unnatural word order\nrec |&gt; fn.call(@, arg) // Natural word order but worsened readability\nrec :&gt; f(arg)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use `.call` with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.\n```js\nfn.call(rec, arg) // Unnatural word order\nrec |> fn.call(@, arg) // Natural word order but worsened readability\nrec :> f(arg)\n```\n","mimetype":"text/plain"},{"body":"<p>What I’m wondering is if I can get away with claiming that call-this does not overlap with the pipe operator, since trying to use <code>.call</code> with the pipe operator solves the word order alone…but it doesn’t make the clunkiness better—it makes it worse.</p>\n<pre><code class=\"language-js\">fn.call(rec, arg) // Unnatural word order\nrec |&gt; fn.call(@, arg) // Natural word order but worsened readability\nrec :&gt; f(arg)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648167720407,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6hHHp1B3MyzWMzL-VQiYYOVPbV7dQCuPm0H5ZkAUXJ0"},
{"content":{"body":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this.","m.new_content":{"body":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this.","msgtype":"m.text","org.matrix.msc1767.text":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this."},"m.relates_to":{"event_id":"$NmBR0DkKWs7f9yUkQGnyyjdfeEf-gorWBNI_rN90wPI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this."},"ts":1648167753408,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2oADTted2lmimrW8_Sv9LKfdaJ6zCKXPvy4E-lph2PM"},
{"content":{"body":"Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","mimetype":"text/html"}]},"ts":1648167961233,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0yYY9qQF_aCqVfp8b7OF3gf0mtuB2zt2Lu8B27IgzuM"},
{"content":{"body":"But will I be able to put this idea without pushback in the dataflow diagram too? Or is it too subjective?","msgtype":"m.text","org.matrix.msc1767.text":"But will I be able to put this idea without pushback in the dataflow diagram too? Or is it too subjective?"},"ts":1648167966289,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$epn-CO2avbGRF2QaDxKH1hdy8qOovqeWBVIrNOhhqjY"},
{"content":{"body":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this, which I believe is appropriate…but I worry that getting rid of that overlap will get pushback at plenary for being too subjective.","m.new_content":{"body":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this, which I believe is appropriate…but I worry that getting rid of that overlap will get pushback at plenary for being too subjective.","msgtype":"m.text","org.matrix.msc1767.text":"I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this, which I believe is appropriate…but I worry that getting rid of that overlap will get pushback at plenary for being too subjective."},"m.relates_to":{"event_id":"$NmBR0DkKWs7f9yUkQGnyyjdfeEf-gorWBNI_rN90wPI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I have here two versions of the updated dataflow-proposal diagram. The second version gets rid of the overlap between pipe operator and call-this, which I believe is appropriate…but I worry that getting rid of that overlap will get pushback at plenary for being too subjective."},"ts":1648167997817,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3f7WOwsy8JV3NL9hGLTJ-O3RpY2uAS_jV2AO2WzbOxE"},
{"content":{"body":" * Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","m.new_content":{"body":"Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0yYY9qQF_aCqVfp8b7OF3gf0mtuB2zt2Lu8B27IgzuM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Richard Gibson gave me this idea at the Research Call today.\n\nSince we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve `.call`’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> gave me this idea at the Research Call today.</p>\n<p>Since we must have both pipe operator and call-this, it’s going to be important to convey the idea that pipe operator does not solve <code>.call</code>’s clunkiness problem, and that another operator is necessary. (Slide 6 in the call-this presentation talks about this too.)</p>\n","mimetype":"text/html"}]},"ts":1648168021061,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NzVO8iaaTStCM16dP5z_smuCFZrphC_OZ-3_4zXA_5Y"},
{"content":{"body":"I think there _is_ overlap in the sense that a pipe operator allows for expression an invocation in SVO order like `receiver |> method.call(@̂%̂, ...args)`, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.","format":"org.matrix.custom.html","formatted_body":"I think there <em>is</em> overlap in the sense that a pipe operator allows for expression an invocation in SVO order like <code>receiver |&gt; method.call(@̂%̂, ...args)</code>, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think there _is_ overlap in the sense that a pipe operator allows for expression an invocation in SVO order like `receiver |> method.call(@̂%̂, ...args)`, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.","mimetype":"text/plain"},{"body":"I think there <em>is</em> overlap in the sense that a pipe operator allows for expression an invocation in SVO order like <code>receiver |&gt; method.call(@̂%̂, ...args)</code>, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.","mimetype":"text/html"}]},"ts":1648174749355,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$AibFPdROB2PEsmmAyqpAKnOPHGlJ-c1qgwofsrPsKPw"},
{"content":{"body":"Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂. ","msgtype":"m.text","org.matrix.msc1767.text":"Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂. "},"ts":1648175179616,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JPG9fcF_JENUTepnCe_c_hmgzUwJ-DN50dvQzBTbM7A"},
{"content":{"body":"but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the `:>` example punctuator for call-this with something more suggestive of tight binding, e.g. `~>` (I understand it could change, but this seems like a \"best foot forward\" approach)","format":"org.matrix.custom.html","formatted_body":"but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the <code>:&gt;</code> example punctuator for call-this with something more suggestive of tight binding, e.g. <code>~&gt;</code> (I understand it could change, but this seems like a &quot;best foot forward&quot; approach)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the `:>` example punctuator for call-this with something more suggestive of tight binding, e.g. `~>` (I understand it could change, but this seems like a \"best foot forward\" approach)","mimetype":"text/plain"},{"body":"but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the <code>:&gt;</code> example punctuator for call-this with something more suggestive of tight binding, e.g. <code>~&gt;</code> (I understand it could change, but this seems like a &quot;best foot forward&quot; approach)","mimetype":"text/html"}]},"ts":1648175191500,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$mjdlcQLCYDjAhqAnlEtnWqli8t-tGuBBIb0CJGkhfYY"},
{"content":{"body":"> <@jschoi:matrix.org> Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂.\n\nthat was me trying to be maximally token-agnostic 😉","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$JPG9fcF_JENUTepnCe_c_hmgzUwJ-DN50dvQzBTbM7A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂. </blockquote></mx-reply>that was me trying to be maximally token-agnostic 😉","m.relates_to":{"m.in_reply_to":{"event_id":"$JPG9fcF_JENUTepnCe_c_hmgzUwJ-DN50dvQzBTbM7A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂.\n\nthat was me trying to be maximally token-agnostic 😉","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$JPG9fcF_JENUTepnCe_c_hmgzUwJ-DN50dvQzBTbM7A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Whoa, somehow Matrix turned those carets into circumflex accents: @̂%̂. </blockquote></mx-reply>that was me trying to be maximally token-agnostic 😉","mimetype":"text/html"}]},"ts":1648175217392,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$7inpDreJlyJ7lsLxAce5ped7DGmJm4hj9ow5RP2ppZk"},
{"content":{"body":"> <@gibson042:matrix.org> I think there _is_ overlap in the sense that a pipe operator allows for expression an invocation in SVO order like `receiver |> method.call(@̂%̂, ...args)`, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.\n\nhttps://imgur.com/S0QLrhn","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$AibFPdROB2PEsmmAyqpAKnOPHGlJ-c1qgwofsrPsKPw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>I think there <em>is</em> overlap in the sense that a pipe operator allows for expression an invocation in SVO order like <code>receiver |&gt; method.call(@̂%̂, ...args)</code>, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.</blockquote></mx-reply>https://imgur.com/S0QLrhn","m.relates_to":{"m.in_reply_to":{"event_id":"$AibFPdROB2PEsmmAyqpAKnOPHGlJ-c1qgwofsrPsKPw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> I think there _is_ overlap in the sense that a pipe operator allows for expression an invocation in SVO order like `receiver |> method.call(@̂%̂, ...args)`, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.\n\nhttps://imgur.com/S0QLrhn","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$AibFPdROB2PEsmmAyqpAKnOPHGlJ-c1qgwofsrPsKPw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>I think there <em>is</em> overlap in the sense that a pipe operator allows for expression an invocation in SVO order like <code>receiver |&gt; method.call(@̂%̂, ...args)</code>, but I also like the idea of strikethrough on the pipe examples under call-this to indicate that they don't really address the clunkiness motivation for it. So basically, a combination of the two diagrams—graphical layout of the first, textual formatting of the second.</blockquote></mx-reply>https://imgur.com/S0QLrhn","mimetype":"text/html"}]},"ts":1648175456097,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xn-CmmIXq4hjfg3zQVCZoWNZWnJs3q3RC7w8tVb2rkY"},
{"content":{"body":"nice!","msgtype":"m.text","org.matrix.msc1767.text":"nice!"},"ts":1648175563535,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$H4CoZIsY6jD03niN3C1XYOxjiksSa8mEuDMJiRXfJJY"},
{"content":{"body":" * nice!","m.new_content":{"body":"nice!","msgtype":"m.text","org.matrix.msc1767.text":"nice!"},"m.relates_to":{"event_id":"$H4CoZIsY6jD03niN3C1XYOxjiksSa8mEuDMJiRXfJJY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * nice!"},"ts":1648175574814,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$RjxbmPrg7UNZuXKr3dHVGbl3HpAT1NJ4TbyaCyIK3Wk"},
{"content":{"body":"By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","format":"org.matrix.custom.html","formatted_body":"By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","mimetype":"text/plain"},{"body":"By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$mjdlcQLCYDjAhqAnlEtnWqli8t-tGuBBIb0CJGkhfYY"}}},"ts":1648175630071,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0YWum_8xa1Z6trkZlEzJzmgkuLu_6Xe9ttRUwjbpJuQ"},
{"content":{"body":"> <@gibson042:matrix.org> but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the `:>` example punctuator for call-this with something more suggestive of tight binding, e.g. `~>` (I understand it could change, but this seems like a \"best foot forward\" approach)\n\n * By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$mjdlcQLCYDjAhqAnlEtnWqli8t-tGuBBIb0CJGkhfYY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the <code>:&gt;</code> example punctuator for call-this with something more suggestive of tight binding, e.g. <code>~&gt;</code> (I understand it could change, but this seems like a \"best foot forward\" approach)</blockquote></mx-reply> * By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","m.new_content":{"body":"By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","format":"org.matrix.custom.html","formatted_body":"By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","mimetype":"text/plain"},{"body":"By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0YWum_8xa1Z6trkZlEzJzmgkuLu_6Xe9ttRUwjbpJuQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the `:>` example punctuator for call-this with something more suggestive of tight binding, e.g. `~>` (I understand it could change, but this seems like a \"best foot forward\" approach)\n\n * By the way, I’m a bit surprised you think `~>` may suggest a tight `.`-like precedence rather than loose `|>`-like precedence. I do recall you saying that you didn’t much like `:>` (whether tight or loose?).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$mjdlcQLCYDjAhqAnlEtnWqli8t-tGuBBIb0CJGkhfYY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>but also, in the wake of today's meeting and to further separate call-this from pipelines, I think it would make sense to update both the diagram and the slides to replace the <code>:&gt;</code> example punctuator for call-this with something more suggestive of tight binding, e.g. <code>~&gt;</code> (I understand it could change, but this seems like a \"best foot forward\" approach)</blockquote></mx-reply> * By the way, I’m a bit surprised you think <code>~&gt;</code> may suggest a tight <code>.</code>-like precedence rather than loose <code>|&gt;</code>-like precedence. I do recall you saying that you didn’t much like <code>:&gt;</code> (whether tight or loose?).","mimetype":"text/html"}]},"ts":1648175635096,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RRjO8L9m6U_vxxR6VrQS4H_pO7nWCtCYik9wvqC2mKk"},
{"content":{"body":"correct, I think it has too much visual similarity with `|>`. `~>` suggests tight binding to me because it is arrow-like (as does `->`, for the same reason)","format":"org.matrix.custom.html","formatted_body":"correct, I think it has too much visual similarity with <code>|&gt;</code>. <code>~&gt;</code> suggests tight binding to me because it is arrow-like (as does <code>-&gt;</code>, for the same reason)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"correct, I think it has too much visual similarity with `|>`. `~>` suggests tight binding to me because it is arrow-like (as does `->`, for the same reason)","mimetype":"text/plain"},{"body":"correct, I think it has too much visual similarity with <code>|&gt;</code>. <code>~&gt;</code> suggests tight binding to me because it is arrow-like (as does <code>-&gt;</code>, for the same reason)","mimetype":"text/html"}]},"ts":1648175747815,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$af_rqVUVDRR-lzYm8AbTESEmzezCwBvzbCLRMEPqonQ"},
{"content":{"body":"I would have also suggested `::`, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions","format":"org.matrix.custom.html","formatted_body":"I would have also suggested <code>::</code>, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would have also suggested `::`, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions","mimetype":"text/plain"},{"body":"I would have also suggested <code>::</code>, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions","mimetype":"text/html"}]},"ts":1648175819951,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hpDvyRJtTJdmddOXd-peSsDGW8yw_0CPciSvlsnaTkQ"},
{"content":{"body":"> <@gibson042:matrix.org> I would have also suggested `::`, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions\n\nAh, okay, so this isn’t necessarily about call-this in of itself but just for the dataflow-proposal diagram.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$hpDvyRJtTJdmddOXd-peSsDGW8yw_0CPciSvlsnaTkQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>I would have also suggested <code>::</code>, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions</blockquote></mx-reply>Ah, okay, so this isn’t necessarily about call-this in of itself but just for the dataflow-proposal diagram.","m.relates_to":{"m.in_reply_to":{"event_id":"$hpDvyRJtTJdmddOXd-peSsDGW8yw_0CPciSvlsnaTkQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> I would have also suggested `::`, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions\n\nAh, okay, so this isn’t necessarily about call-this in of itself but just for the dataflow-proposal diagram.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$hpDvyRJtTJdmddOXd-peSsDGW8yw_0CPciSvlsnaTkQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>I would have also suggested <code>::</code>, but I think it's more important for the content to differentiate proposals and that is already being homesteaded by extensions</blockquote></mx-reply>Ah, okay, so this isn’t necessarily about call-this in of itself but just for the dataflow-proposal diagram.","mimetype":"text/html"}]},"ts":1648175862876,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hJHLYRDXS6vvRJ8ReY25fjunP_A4SBAKS4EgFCHhZeU"},
{"content":{"body":"This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","format":"org.matrix.custom.html","formatted_body":"This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","mimetype":"text/plain"},{"body":"This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$af_rqVUVDRR-lzYm8AbTESEmzezCwBvzbCLRMEPqonQ"}}},"ts":1648175909993,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lgXw5OWXRu_F9WTo0bCo14v_ntiUL4W4DMPurB5H9wY"},
{"content":{"body":"> <@gibson042:matrix.org> correct, I think it has too much visual similarity with `|>`. `~>` suggests tight binding to me because it is arrow-like (as does `->`, for the same reason)\n\n * This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$af_rqVUVDRR-lzYm8AbTESEmzezCwBvzbCLRMEPqonQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>correct, I think it has too much visual similarity with <code>|&gt;</code>. <code>~&gt;</code> suggests tight binding to me because it is arrow-like (as does <code>-&gt;</code>, for the same reason)</blockquote></mx-reply> * This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","m.new_content":{"body":"This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","format":"org.matrix.custom.html","formatted_body":"This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","mimetype":"text/plain"},{"body":"This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lgXw5OWXRu_F9WTo0bCo14v_ntiUL4W4DMPurB5H9wY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> correct, I think it has too much visual similarity with `|>`. `~>` suggests tight binding to me because it is arrow-like (as does `->`, for the same reason)\n\n * This applies only for *tight* unbracketed receiver-first style, right? Since if precedence is loose, like with `|>`, then you see similarity to `|>` as an advantage, right?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$af_rqVUVDRR-lzYm8AbTESEmzezCwBvzbCLRMEPqonQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>correct, I think it has too much visual similarity with <code>|&gt;</code>. <code>~&gt;</code> suggests tight binding to me because it is arrow-like (as does <code>-&gt;</code>, for the same reason)</blockquote></mx-reply> * This applies only for <em>tight</em> unbracketed receiver-first style, right? Since if precedence is loose, like with <code>|&gt;</code>, then you see similarity to <code>|&gt;</code> as an advantage, right?","mimetype":"text/html"}]},"ts":1648175916118,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LobWuCc9YVuWjYlYJZQl8umUPzi8SN1TFIsYncd9Lpo"},
{"content":{"body":"right. I think the example call-this punctuator should suggest tight binding to put some distance between that proposal and pipeline, but if the proposal evolves towards loose binding then the punctuator should follow suit and `:>` becomes more illustrative","format":"org.matrix.custom.html","formatted_body":"right. I think the example call-this punctuator should suggest tight binding to put some distance between that proposal and pipeline, but if the proposal evolves towards loose binding then the punctuator should follow suit and <code>:&gt;</code> becomes more illustrative","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"right. I think the example call-this punctuator should suggest tight binding to put some distance between that proposal and pipeline, but if the proposal evolves towards loose binding then the punctuator should follow suit and `:>` becomes more illustrative","mimetype":"text/plain"},{"body":"right. I think the example call-this punctuator should suggest tight binding to put some distance between that proposal and pipeline, but if the proposal evolves towards loose binding then the punctuator should follow suit and <code>:&gt;</code> becomes more illustrative","mimetype":"text/html"}]},"ts":1648175984030,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$8WKljPCpQscb3Q8PeOC3EB_jIkGR51j3267UyzHKDk8"},
{"content":{"body":"I know that some representatives are concerned about too much visual similarity between whatever bind-this looks like and `.` or `|>`, even if they are functionally similar or have similar precedence.","format":"org.matrix.custom.html","formatted_body":"I know that some representatives are concerned about too much visual similarity between whatever bind-this looks like and <code>.</code> or <code>|&gt;</code>, even if they are functionally similar or have similar precedence.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I know that some representatives are concerned about too much visual similarity between whatever bind-this looks like and `.` or `|>`, even if they are functionally similar or have similar precedence.","mimetype":"text/plain"},{"body":"I know that some representatives are concerned about too much visual similarity between whatever bind-this looks like and <code>.</code> or <code>|&gt;</code>, even if they are functionally similar or have similar precedence.","mimetype":"text/html"}]},"ts":1648176101791,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kquehLOigJrJitwgh1uoS9nA8EIUrlGTT_484TxzNOg"},
{"content":{"body":"Ditto for confusion with other programming languages’ `->`, `::`, etc.","format":"org.matrix.custom.html","formatted_body":"Ditto for confusion with other programming languages’ <code>-&gt;</code>, <code>::</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ditto for confusion with other programming languages’ `->`, `::`, etc.","mimetype":"text/plain"},{"body":"Ditto for confusion with other programming languages’ <code>-&gt;</code>, <code>::</code>, etc.","mimetype":"text/html"}]},"ts":1648176114763,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0A1zbh_68W6j1z_fp-5S07BuOA8OwJ1Mvwt2iZjusHY"},
{"content":{"body":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes.","msgtype":"m.text","org.matrix.msc1767.text":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes."},"ts":1648176126643,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XCLx4QSVhJl3d7u27QiLq8bCUpoYvy4foRSINzFhQb0"},
{"content":{"body":" * It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough.","m.new_content":{"body":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough.","msgtype":"m.text","org.matrix.msc1767.text":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough."},"m.relates_to":{"event_id":"$XCLx4QSVhJl3d7u27QiLq8bCUpoYvy4foRSINzFhQb0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough."},"ts":1648176135739,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mgfrkOGci4SMuy_vTOLRqQKt-HAI6rv3IG27ea9K8lA"},
{"content":{"body":" * It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes.","m.new_content":{"body":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes.","msgtype":"m.text","org.matrix.msc1767.text":"It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes."},"m.relates_to":{"event_id":"$XCLx4QSVhJl3d7u27QiLq8bCUpoYvy4foRSINzFhQb0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It’ll be hard to balance all of these criteria. Maybe thirty plenary minutes won’t be enough and I should steal some from pipe’s sixty plenary minutes."},"ts":1648176153724,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3GMCaf0eKRBhKmigqgET2QIrwOaJIdStKvHqV_paPaQ"},
{"content":{"body":"I hope it doesn't go down that road next week. The ideal example punctuator would suggest tight binding (or at least _not_ suggest loose binding) and avoid those concerns, because they're not appropriate at this early stage anyway","format":"org.matrix.custom.html","formatted_body":"I hope it doesn't go down that road next week. The ideal example punctuator would suggest tight binding (or at least <em>not</em> suggest loose binding) and avoid those concerns, because they're not appropriate at this early stage anyway","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I hope it doesn't go down that road next week. The ideal example punctuator would suggest tight binding (or at least _not_ suggest loose binding) and avoid those concerns, because they're not appropriate at this early stage anyway","mimetype":"text/plain"},{"body":"I hope it doesn't go down that road next week. The ideal example punctuator would suggest tight binding (or at least <em>not</em> suggest loose binding) and avoid those concerns, because they're not appropriate at this early stage anyway","mimetype":"text/html"}]},"ts":1648176213073,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$22wiAzwphTTmewhVjgehQW_F7RjmD3ZANi6sYUxj8vo"},
{"content":{"body":"I suggested `~>` rather than `->` because I'm aware of some languages that already use the latter, but if there are also some that use the former then varying even further afield might be prudent","format":"org.matrix.custom.html","formatted_body":"I suggested <code>~&gt;</code> rather than <code>-&gt;</code> because I'm aware of some languages that already use the latter, but if there are also some that use the former then varying even further afield might be prudent","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I suggested `~>` rather than `->` because I'm aware of some languages that already use the latter, but if there are also some that use the former then varying even further afield might be prudent","mimetype":"text/plain"},{"body":"I suggested <code>~&gt;</code> rather than <code>-&gt;</code> because I'm aware of some languages that already use the latter, but if there are also some that use the former then varying even further afield might be prudent","mimetype":"text/html"}]},"ts":1648176317264,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$j_TN68D61dDc73uO2tFZJLx6QmT6DUi2sgSVCoWM464"},
{"content":{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","format":"org.matrix.custom.html","formatted_body":"I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","mimetype":"text/plain"},{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","mimetype":"text/html"}]},"ts":1648176482087,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TLuvQS37QYVT_hoz1rLhvtYTkPDyHuvSFOjOCTuWiQY"},
{"content":{"body":"Obviously there’s a spectrum, but it’d be fun (albeit probably difficult) to empirically study this.","msgtype":"m.text","org.matrix.msc1767.text":"Obviously there’s a spectrum, but it’d be fun (albeit probably difficult) to empirically study this."},"ts":1648176505433,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$T-_nB8y-eI7eqYOtSTPCAm_sf3svDSVSzC5KbAVv2TM"},
{"content":{"body":" * I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","format":"org.matrix.custom.html","formatted_body":" * I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","m.new_content":{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","format":"org.matrix.custom.html","formatted_body":"I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","mimetype":"text/plain"},{"body":"I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$TLuvQS37QYVT_hoz1rLhvtYTkPDyHuvSFOjOCTuWiQY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I would be quite interested to poll which operators visually/psychologically suggest tighter `.`-like precedences versus looser `|>`-like precedences…","mimetype":"text/plain"},{"body":" * I would be quite interested to poll which operators visually/psychologically suggest tighter <code>.</code>-like precedences versus looser <code>|&gt;</code>-like precedences…","mimetype":"text/html"}]},"ts":1648176510924,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FuN3s5hYd2GUuMCUWHbtMH3qaFy3e0QdTJCmC21Zvd8"},
{"content":{"body":"I agree. I just don't want to get the plenary bogged down in it 😅","msgtype":"m.text","org.matrix.msc1767.text":"I agree. I just don't want to get the plenary bogged down in it 😅"},"ts":1648176549815,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Uk5yqE3ZvqxApip2d97bBwnGxGA_l51ZsIhnSVOd-Ew"},
{"content":{"body":"Yeah, probably should focus most on which of the four syntax styles we want to pursue (or exclude).","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, probably should focus most on which of the four syntax styles we want to pursue (or exclude)."},"ts":1648176587593,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5wwK1YzaxSctVOgLgxqFLVO2F2v_CKnNqYRkWOmU18U"},
{"content":{"body":"I don't see how precedence could be more important than \"what it does\" though","msgtype":"m.text","org.matrix.msc1767.text":"I don't see how precedence could be more important than \"what it does\" though"},"ts":1648179198065,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$vKiCmnqkRhhgThd415FOxg3yArhvS2VbbpYOf0JLh3c"},
{"content":{"body":"`:>` was suggested because it behaves as a pipeline operator for `this`","format":"org.matrix.custom.html","formatted_body":"<code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`:>` was suggested because it behaves as a pipeline operator for `this`","mimetype":"text/plain"},{"body":"<code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>","mimetype":"text/html"}]},"ts":1648179226314,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$sSHB2n_G7HuDTXcWO6jNtQBvBtcaoU3HWJ7CTVLcd2Q"},
{"content":{"body":" * `:>` was suggested because it behaves as a pipeline operator for `this`, i.e. for the invisible zeroth argument","format":"org.matrix.custom.html","formatted_body":" * <code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>, i.e. for the invisible zeroth argument","m.new_content":{"body":"`:>` was suggested because it behaves as a pipeline operator for `this`, i.e. for the invisible zeroth argument","format":"org.matrix.custom.html","formatted_body":"<code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>, i.e. for the invisible zeroth argument","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`:>` was suggested because it behaves as a pipeline operator for `this`, i.e. for the invisible zeroth argument","mimetype":"text/plain"},{"body":"<code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>, i.e. for the invisible zeroth argument","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$sSHB2n_G7HuDTXcWO6jNtQBvBtcaoU3HWJ7CTVLcd2Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `:>` was suggested because it behaves as a pipeline operator for `this`, i.e. for the invisible zeroth argument","mimetype":"text/plain"},{"body":" * <code>:&gt;</code> was suggested because it behaves as a pipeline operator for <code>this</code>, i.e. for the invisible zeroth argument","mimetype":"text/html"}]},"ts":1648179327526,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_S1l5STQrQLr_U60FRX_ClyI-ALvgklRPQB9oXI6HGI"},
{"content":{"body":"but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","format":"org.matrix.custom.html","formatted_body":"but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","mimetype":"text/plain"},{"body":"but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","mimetype":"text/html"}]},"ts":1648179892774,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5riMkB5cfX8zo0AJGg_GMrHqwlmultIjqESITyMQsN8"},
{"content":{"body":" * but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","format":"org.matrix.custom.html","formatted_body":" * but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","m.new_content":{"body":"but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","format":"org.matrix.custom.html","formatted_body":"but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","mimetype":"text/plain"},{"body":"but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$5riMkB5cfX8zo0AJGg_GMrHqwlmultIjqESITyMQsN8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * but if that's problematic then I would support the `f(this: x, y)` approach since it's unmistakable","mimetype":"text/plain"},{"body":" * but if that's problematic then I would support the <code>f(this: x, y)</code> approach since it's unmistakable","mimetype":"text/html"}]},"ts":1648179901153,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$EMiBVCzkItQASkYBhI2jKbhj9b1l5615QZoj8bvpomY"}
]