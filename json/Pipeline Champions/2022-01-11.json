[
{"content":{"body":"No, if you use the plain `?` each is taken as a separate argument; you have to use the indexed variant to reuse placeholder args.","format":"org.matrix.custom.html","formatted_body":"No, if you use the plain <code>?</code> each is taken as a separate argument; you have to use the indexed variant to reuse placeholder args.","msgtype":"m.text"},"ts":1641859584849,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BSCCe4WwdaGXEm0bm4TQ6kCLqMM5oHPMBqmNfYOa-vY"},
{"content":{"body":"Since multiple placeholders is a more common case than reusing a single placeholder.","msgtype":"m.text"},"ts":1641859605243,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iMI73IKp1jruntHIuc6fJvlnPYHMxtpwd9ET_Q98eh0"},
{"content":{"body":"> <@tabatkins:matrix.org> Since multiple placeholders is a more common case than reusing a single placeholder.\n\nSo then you're undoing and redoing the meaningfulness of order in the same process ... interesting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$iMI73IKp1jruntHIuc6fJvlnPYHMxtpwd9ET_Q98eh0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Since multiple placeholders is a more common case than reusing a single placeholder.</blockquote></mx-reply>So then you're undoing and redoing the meaningfulness of order in the same process ... interesting","m.relates_to":{"m.in_reply_to":{"event_id":"$iMI73IKp1jruntHIuc6fJvlnPYHMxtpwd9ET_Q98eh0"}},"msgtype":"m.text"},"ts":1641934044858,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$LBeOA2xIKYLBKso4INxrVzWW_jzenhfLcqERHX-km3Q"},
{"content":{"body":"I'm not sure what you mean - the placeholders are still subbed in order","msgtype":"m.text"},"ts":1641934080448,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wggONviv48d0VSFca_dbVnjGFIiuqOlUd2jk_Tit-6E"},
{"content":{"body":"But the whole point of PFA is order is meaningless. Otherwise, you can just use `.bind`","format":"org.matrix.custom.html","formatted_body":"But the whole point of PFA is order is meaningless. Otherwise, you can just use <code>.bind</code>","msgtype":"m.text"},"ts":1641934115908,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$7ftC74bFKinMBMgyyqVwauCKQ64gBMKtBeMq8UJmnYg"},
{"content":{"body":"One issue with `.bind` is there isn't a way to leave gaps","format":"org.matrix.custom.html","formatted_body":"One issue with <code>.bind</code> is there isn't a way to leave gaps","msgtype":"m.text"},"ts":1641934331530,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KDjyujDO8E20mwxTkj-ApSbLVExk9ra1XD44XvLRMxI"},
{"content":{"body":"Which is reordering, right? Leaving gaps means changing the argument order. ","msgtype":"m.text"},"ts":1641934440698,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$PRwAF0JRNzNHU_AlJqZy_0v-stu97yPefkhCWOV2M-E"},
{"content":{"body":"* having sudden flash backs to my  c++ days `std::bind(f, _1, 42, _2)`","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>having sudden flash backs to my  c++ days <code>std::bind(f, _1, 42, _2)</code></li>\n</ul>\n","msgtype":"m.text"},"ts":1641934462540,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$r6LfNpQeW08vQ7tkZJF87Tna50AdGj_Cbyk7BGwm7_w"},
{"content":{"body":"I guess when only binding certain arguments it does change order in one way, in that it brings some arguments forwards. But not changing their relative order.","msgtype":"m.text"},"ts":1641934593699,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BcoY7lKkLU0xYH2xMXO2_rXN8pgV3NJCNOc6gwQhs7U"},
{"content":{"body":"If I've understood you 🙂","msgtype":"m.text"},"ts":1641934634000,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$x0kj4GqTRo20TSbv8keQs747TE9THwQKjh5SilZN278"},
{"content":{"body":" * If I've understood you 🙂","m.new_content":{"body":"If I've understood you 🙂","msgtype":"m.text"},"m.relates_to":{"event_id":"$x0kj4GqTRo20TSbv8keQs747TE9THwQKjh5SilZN278","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641934643059,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vVz6o9VozRGFCyETslJcb8sbBYmzhTHeQj_C4LQYF_0"},
{"content":{"body":"Yes, I think you have. It seems like the cost of adding more syntax (in inscrutability) just to get reordering, which can also happen with arrow functions, is a worrisome trade-off. ","msgtype":"m.text"},"ts":1641934859870,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$9Mkny2xjH16anUc0IJLH7k8UsfrQkzm3fBuhOBiqiJ8"},
{"content":{"body":"Especially since it feels like breaking some fairly fundamental agreement, although maybe just to me. 😆","msgtype":"m.text"},"ts":1641934883526,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$F6vBNuyfBk9F4OLL5J8qhwC81-XC-p1ey-PDVv_TBSA"},
{"content":{"body":"sarahghp: I'm still not sure what you're talking about, unfortunately. `.bind()` lets you provide arguments *in sequence* only; PFA relaxes that and lets you skip args, but still defaults to supplying them *in order*.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I'm still not sure what you're talking about, unfortunately. <code>.bind()</code> lets you provide arguments <em>in sequence</em> only; PFA relaxes that and lets you skip args, but still defaults to supplying them <em>in order</em>.","msgtype":"m.text"},"ts":1641936476267,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CC2-Fp5y9r4FtKAXyynwhz647LxUo2g46RBi4D9UHDo"},
{"content":{"body":"Omitting arguments from the end doesn't seem (imo, at least) to be significantly different from omitting arguments from the start or center.","msgtype":"m.text"},"ts":1641936575733,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vl6vi0cdTPG0AYYz2x3N_a37D4_GJrnYD1YySk0d5kU"},
{"content":{"body":"Like, if `fn~(a, ?)` is \"undoing the meaningfulness of order\", I don't see how `fn.bind(null, a)` isn't equally so.","format":"org.matrix.custom.html","formatted_body":"Like, if <code>fn~(a, ?)</code> is &quot;undoing the meaningfulness of order&quot;, I don't see how <code>fn.bind(null, a)</code> isn't equally so.","msgtype":"m.text"},"ts":1641936690016,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9XMINUwayj2TfAdNC8xdisjpFSp0atpyiEbl8CwAzo0"},
{"content":{"body":"> <@tabatkins:matrix.org> sarahghp: I'm still not sure what you're talking about, unfortunately. `.bind()` lets you provide arguments *in sequence* only; PFA relaxes that and lets you skip args, but still defaults to supplying them *in order*.\n\nOh no maybe I am being this goat! https://twitter.com/Maschlea5/status/1481014660736462850\n\nBut yes, I am saying to me, the salient difference between PFA and `.bind` is that PFA lets you supply arguments in a different order. In the example of one argument, it doesn't matter. But in the case of `x = fn~(arg0, ?, arg2, ?)`, the code is saying that it is desirable to create functions where arguments can be passed in a different order — so desirable that we've made a shorthand for it —, except then order matters again when the hole-y function x is called.  And in that way it's relying on contradictory assumptions at the same time.\n\nIt's possible this bothers me aesthetically and doesn't actually matter ... I am still thinking about that but it definitely concerns me now. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$CC2-Fp5y9r4FtKAXyynwhz647LxUo2g46RBi4D9UHDo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I'm still not sure what you're talking about, unfortunately. <code>.bind()</code> lets you provide arguments <em>in sequence</em> only; PFA relaxes that and lets you skip args, but still defaults to supplying them <em>in order</em>.</blockquote></mx-reply><p>Oh no maybe I am being this goat! https://twitter.com/Maschlea5/status/1481014660736462850</p>\n<p>But yes, I am saying to me, the salient difference between PFA and <code>.bind</code> is that PFA lets you supply arguments in a different order. In the example of one argument, it doesn't matter. But in the case of <code>x = fn~(arg0, ?, arg2, ?)</code>, the code is saying that it is desirable to create functions where arguments can be passed in a different order — so desirable that we've made a shorthand for it —, except then order matters again when the hole-y function x is called.  And in that way it's relying on contradictory assumptions at the same time.</p>\n<p>It's possible this bothers me aesthetically and doesn't actually matter ... I am still thinking about that but it definitely concerns me now.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$CC2-Fp5y9r4FtKAXyynwhz647LxUo2g46RBi4D9UHDo"}},"msgtype":"m.text"},"ts":1641937067853,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$yWUhjsZshdwFHPALXL9zyMoPYpUywSMu81gukttUoxI"},
{"content":{"body":"It also definitely feels like a lint trap where the rule to always use ordinals comes right after the facility exists. Maybe that's ok too. ","msgtype":"m.text"},"ts":1641937134755,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$Pol5X5qeqB_bm5O1l13psijIKj0hPMgE3CVLbOAmUEM"},
{"content":{"body":"I still don't understand why you're saying \"a different order\". `fn~(arg0, ?, arg2, ?)` still takes args in the listed order - `(x, y) => fn(arg0, x, arg2, y)`","format":"org.matrix.custom.html","formatted_body":"I still don't understand why you're saying &quot;a different order&quot;. <code>fn~(arg0, ?, arg2, ?)</code> still takes args in the listed order - <code>(x, y) =&gt; fn(arg0, x, arg2, y)</code>","msgtype":"m.text"},"ts":1641937203237,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2aRZNqmuMjalZ6utauHRk7E9I6dncOiIo6Potlm_tio"},
{"content":{"body":"Are you meaning, like, mentally we're rewriting the arg order to be 0, 2, 1, 3, and then binding the first two ahead of time?","msgtype":"m.text"},"ts":1641937255528,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$j5svglniej9b9dTjAXiUEJndX9ad1e-cGfKJWu3LJSc"},
{"content":{"body":"Yes, precisely that.","msgtype":"m.text"},"ts":1641937395900,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$qwaWPaiZHehLx6SYZzYXeJMSe4iZWJtMcmnwuKRJQA0"},
{"content":{"body":"Ah. I'm certainly not doing any such transformation. ^_^","msgtype":"m.text"},"ts":1641937470798,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dB6QAbPaZBvmLelL7pwURllx1aQw9S-PlSoWKzlmxQ0"},
{"content":{"body":"No more than I am when writing the same thing as an arrow func.","msgtype":"m.text"},"ts":1641937479502,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9fLochNiQQ51f2DUp3XmdmjKg4jzEAs2Pnw3gAsoeAY"},
{"content":{"body":"But you are _are_ doing that transformation, right? That's literally what's happening. Are you saying you don't think of it that way?\n\nYou are right tho, it's not more than an arrow func, except that by making a shorthand syntax for it, we are communicating its desirabltility. And that is where I fall off the train. If you have to reorder something, you can, but it has a tiny bit of friction, which is good, because it's weird.","format":"org.matrix.custom.html","formatted_body":"<p>But you are <em>are</em> doing that transformation, right? That's literally what's happening. Are you saying you don't think of it that way?</p>\n<p>You are right tho, it's not more than an arrow func, except that by making a shorthand syntax for it, we are communicating its desirabltility. And that is where I fall off the train. If you have to reorder something, you can, but it has a tiny bit of friction, which is good, because it's weird.</p>\n","msgtype":"m.text"},"ts":1641937649267,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$psoLeU4N9DhKzSUXYBDTD8rKufscFNVwGsdDpPpWhmg"},
{"content":{"body":"And by \"weird\" I mean it deviates from a fairly core understanding in JS, which is that argument order is meaningful. And when it's not, you can communicate that by having an object argument.","msgtype":"m.text"},"ts":1641937805573,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$9FG8nKnEP8XzZbaMIcw16HBCEg0ViADmCOJ4JjJmzWo"},
{"content":{"body":"I absolutely don't think of it that way, right. There is zero argument rearranging going on in my head when I write `(x,y)=>fn(0, x, 2, y)`","format":"org.matrix.custom.html","formatted_body":"I absolutely don't think of it that way, right. There is zero argument rearranging going on in my head when I write <code>(x,y)=&gt;fn(0, x, 2, y)</code>","msgtype":"m.text"},"ts":1641937814752,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IY5tsMV3PsDyv-AAVnlx578xYS3WO54rkwbhUR2Usns"},
{"content":{"body":"I can't speak for others, since I haven't done more than a smattering of programming teaching, and I know people's mental models can diverge *significantly* and in surprising ways.","format":"org.matrix.custom.html","formatted_body":"I can't speak for others, since I haven't done more than a smattering of programming teaching, and I know people's mental models can diverge <em>significantly</em> and in surprising ways.","msgtype":"m.text"},"ts":1641937846693,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$TvJSMcOy4HTNHMdExcJ_edPoBaRO1jYR5vqriiNQ444"},
{"content":{"body":"To put another way, `fn~(0, ?, 2, y)` and `fn~(0, 1, ?, ?)` are equivalent in my mental model, but appear to be meaningfully distinct in yours?","format":"org.matrix.custom.html","formatted_body":"To put another way, <code>fn~(0, ?, 2, y)</code> and <code>fn~(0, 1, ?, ?)</code> are equivalent in my mental model, but appear to be meaningfully distinct in yours?","msgtype":"m.text"},"ts":1641938028046,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2KHugG_wHogaJJxL5hU4wbrw0xsfP_dhtk8wYXzgkPc"},
{"content":{"body":"Or more simply, `fn~(?, 1)` vs `fn~(0, ?)`","format":"org.matrix.custom.html","formatted_body":"Or more simply, <code>fn~(?, 1)</code> vs <code>fn~(0, ?)</code>","msgtype":"m.text"},"ts":1641938046762,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Bz0NlcsDwlI6UUrc2My6Uke8ehwvms9BzI_bxBcgL30"},
{"content":{"body":"Yes, that's correct.","msgtype":"m.text"},"ts":1641938364612,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$5XxYOGPx2r7sZSzZDtdl6Y6brgSphILTEuydbrxKhIQ"},
{"content":{"body":" * Yes, that's correct.","m.new_content":{"body":"Yes, that's correct.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5XxYOGPx2r7sZSzZDtdl6Y6brgSphILTEuydbrxKhIQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641938373845,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$QRW6L83LsP2HYNSKla5LME7FtWyhMSH5vBPZV8FaOGc"},
{"content":{"body":"For what it’s worth, the “this is already solved by arrow functions” argument was maybe the biggest reason why PFA syntax didn’t successfully advance to Stage 1 last October: https://github.com/tc39/notes/blob/master/meetings/2021-10/oct-25.md#partial-function-application-for-stage-2","msgtype":"m.text"},"ts":1641938747440,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PYs02kfCFy8BF8YJYTihSR74fDVDvjKXoNzVRKmk8bY"},
{"content":{"body":"Yeah, arrow functions do already achieve 80% of what PFA is trying to do, and in a reasonably terse and readable way (slightly longer than PFA, but not terribly so). I've come around to idea that the remaining 20% (pre-computing receivers and arguments, and making \"pass a method as a callback\" as terse as possible) are worth syntax, but that's very much an arguable point.","msgtype":"m.text"},"ts":1641939131674,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$t2M9nDbjAlt4knZRfN2au3m_2nPMK-R_81KMFzPDnxE"},
{"content":{"body":"The other 20%, is it eager function and argument evaluation?","msgtype":"m.text"},"ts":1641939395792,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aEfL4ee1QwdndW2oU7CvhuzvRX3kk0enJYhu1m2f-Ag"},
{"content":{"body":"I.e., the lazy `(x, y) => f()(x, y, a(), b())` versus the eager `f()~(x, y, a(), b())`.","format":"org.matrix.custom.html","formatted_body":"I.e., the lazy <code>(x, y) =&gt; f()(x, y, a(), b())</code> versus the eager <code>f()~(x, y, a(), b())</code>.","msgtype":"m.text"},"ts":1641939462670,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$D5c0GaCfrfsbhhBPo75xtN78PN0d2JnTn0hqgGBI_2U"},
{"content":{"body":"* I.e., the lazy `(x, y) => f()(x, y, a(), b())` versus the eager `f()~(x, y, a(), b())`.","format":"org.matrix.custom.html","formatted_body":"* I.e., the lazy <code>(x, y) =&gt; f()(x, y, a(), b())</code> versus the eager <code>f()~(x, y, a(), b())</code>.","m.new_content":{"body":"I.e., the lazy `(x, y) => f()(x, y, a(), b())` versus the eager `f()~(x, y, a(), b())`.","format":"org.matrix.custom.html","formatted_body":"I.e., the lazy <code>(x, y) =&gt; f()(x, y, a(), b())</code> versus the eager <code>f()~(x, y, a(), b())</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$D5c0GaCfrfsbhhBPo75xtN78PN0d2JnTn0hqgGBI_2U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641939550045,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bd04W54ln-Gk9Xhxk0jUyz3VqZleEewTd1Ots5530M8"},
{"content":{"body":"Yeah that and the `arr.map(obj.meth)` use-case","format":"org.matrix.custom.html","formatted_body":"Yeah that and the <code>arr.map(obj.meth)</code> use-case","msgtype":"m.text"},"ts":1641939796459,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xw0BaKAz9DCb-C-lKA0VWZjWHwnobC1mZxRUPxBjjKY"},
{"content":{"body":" * Yeah that and the `arr.map(obj.meth)` use-case","format":"org.matrix.custom.html","formatted_body":" * Yeah that and the <code>arr.map(obj.meth)</code> use-case","m.new_content":{"body":"Yeah that and the `arr.map(obj.meth)` use-case","format":"org.matrix.custom.html","formatted_body":"Yeah that and the <code>arr.map(obj.meth)</code> use-case","msgtype":"m.text"},"m.relates_to":{"event_id":"$xw0BaKAz9DCb-C-lKA0VWZjWHwnobC1mZxRUPxBjjKY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641939807593,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QlngoEoCaMNjlFb7pmqCb_2eY09o6mPv7v3lo_USe-U"},
{"content":{"body":"which today is usually broken for *two* reasons","format":"org.matrix.custom.html","formatted_body":"which today is usually broken for <em>two</em> reasons","msgtype":"m.text"},"ts":1641939825527,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$phXe1nPhfH-8JGcmvOfT34Dcj1Zot0Qy9x9Sq6z_WSA"},
{"content":{"body":"* I.e., the lazy `(x, y) => f()(x, y, a(), b())` versus the eager `f()~(?, ?, a(), b())`.","format":"org.matrix.custom.html","formatted_body":"* I.e., the lazy <code>(x, y) =&gt; f()(x, y, a(), b())</code> versus the eager <code>f()~(?, ?, a(), b())</code>.","m.new_content":{"body":"I.e., the lazy `(x, y) => f()(x, y, a(), b())` versus the eager `f()~(?, ?, a(), b())`.","format":"org.matrix.custom.html","formatted_body":"I.e., the lazy <code>(x, y) =&gt; f()(x, y, a(), b())</code> versus the eager <code>f()~(?, ?, a(), b())</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$D5c0GaCfrfsbhhBPo75xtN78PN0d2JnTn0hqgGBI_2U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641939961267,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5e8tnsGd2ZTJlF-VzRVBBagSmalCpXWuYsOG_gdYA80"},
{"content":{"body":"So right now for `arr.map(obj.meth)` you need `arr.map((el) => obj.meth(el))` to limit to one argument. Why else is it broken?","format":"org.matrix.custom.html","formatted_body":"So right now for <code>arr.map(obj.meth)</code> you need <code>arr.map((el) =&gt; obj.meth(el))</code> to limit to one argument. Why else is it broken?","msgtype":"m.text"},"ts":1641940519721,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$qSEreX7sbBr4UP302pKswoYqaXfOMZlUD9lnlkfcu0E"},
{"content":{"body":"Or verbose, say, since it's possible.","msgtype":"m.text"},"ts":1641940556305,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$w9W_Gi6UR1WLwSPv0dnmEseEr1x2zF_RqusudGrPjDc"},
{"content":{"body":"* For what it’s worth, the “this is already solved by arrow functions” argument was maybe the biggest reason why PFA syntax didn’t successfully advance to Stage 2 last October: https://github.com/tc39/notes/blob/master/meetings/2021-10/oct-25.md#partial-function-application-for-stage-2","m.new_content":{"body":"For what it’s worth, the “this is already solved by arrow functions” argument was maybe the biggest reason why PFA syntax didn’t successfully advance to Stage 2 last October: https://github.com/tc39/notes/blob/master/meetings/2021-10/oct-25.md#partial-function-application-for-stage-2","msgtype":"m.text"},"m.relates_to":{"event_id":"$PYs02kfCFy8BF8YJYTihSR74fDVDvjKXoNzVRKmk8bY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641940896582,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$P3cafqWU2zVjcCwiCMp7PTg9EitIWYaaSXilDnhbw2c"}
]