[
{"content":{"body":"Justin Ridgewell: Args being implicitly public works reasonably well in Python, imxp. (And you can now dictate that some args are positional-only and not available by name.) Or is the concern just that exposing arg name of *existing* functions, predating such a syntax, would be a problem?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Args being implicitly public works reasonably well in Python, imxp. (And you can now dictate that some args are positional-only and not available by name.) Or is the concern just that exposing arg name of <em>existing</em> functions, predating such a syntax, would be a problem?","msgtype":"m.text"},"ts":1643329244432,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5WLIvYhCuU9k8hekZtZL71EUm1uxXQ93kBr8g4sorJA"},
{"content":{"body":"My worry would be libraries who are unaware, but users who are.","msgtype":"m.text"},"ts":1643329692900,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oCVgjA9C8ydRanf_vtz8N7GDDaJYr9O5P49oVi30lUg"},
{"content":{"body":"JS devs don’t currently need to think about it, and so it’s normal for it to change without updating the major.","msgtype":"m.text"},"ts":1643329750955,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZJBe5IjBioByb8Sr9ZohD6Fn-sL_TX0LDY_VwAvRXlg"},
{"content":{"body":"Additionally, what if the lib went through a minifier? What are the public names now?","msgtype":"m.text"},"ts":1643329825385,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HZ7In6g9nSrqhRd9_8mrlPLuSXaQ0QOl7JBBEBintEk"},
{"content":{"body":"And what will they be the next time it’s run though?","msgtype":"m.text"},"ts":1643329864490,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1rTdD6n7lh-14g_chv6zkFDONuSSs493YJfgnAxBPMQ"},
{"content":{"body":"Terser uses char frequency to select mangled names. A completely unrelated code change in a string can cause the mangled name in a function to change.","msgtype":"m.text"},"ts":1643329932220,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-so8i9RfB5iKeMEJdTKfiQymPkDBtpWrvWC8XTLjeyo"},
{"content":{"body":"I think if JS did add actual named parameters, you would have to opt-in somehow.","msgtype":"m.text"},"ts":1643334886287,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NMRaW-SSAE3Os9J1ONlfE8w1Kv0D5pl6GuldHCTXX2M"},
{"content":{"body":"lol why do I even bother","msgtype":"m.text"},"ts":1643337732361,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ii8QHdK4QQFrBHf9E0GIeqIH0TeMXazEsmak3Y9DXjE"},
{"content":{"body":"> <@rkirsling:matrix.org> lol why do I even bother\n\nIs this about the responses to your comment? I interpreted yours as subjective, and it's hard not to have a subjective response to it. I'm sorry if you feel like I'm dismissing your opinion.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ii8QHdK4QQFrBHf9E0GIeqIH0TeMXazEsmak3Y9DXjE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>lol why do I even bother</blockquote></mx-reply>Is this about the responses to your comment? I interpreted yours as subjective, and it's hard not to have a subjective response to it. I'm sorry if you feel like I'm dismissing your opinion.","m.relates_to":{"m.in_reply_to":{"event_id":"$ii8QHdK4QQFrBHf9E0GIeqIH0TeMXazEsmak3Y9DXjE"}},"msgtype":"m.text"},"ts":1643339599084,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IFglsj-1RlkeJv9crkuM5dkZ_OygSeTmcdvu1BYhuUs"},
{"content":{"body":"I spent hours thinking over why something was hard for me to understand and expressed it as clearly and concisely as I am capable.","msgtype":"m.text"},"ts":1643339611753,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ju16bFcdK71bFcvnOmBLFC57UhRM9nWcQDtFhrpIaWc"},
{"content":{"body":"in that sense it is subjective, but I feel like if I claimed \"the sky is blue\" at this point someone would \"nuh uh\" me","msgtype":"m.text"},"ts":1643339674287,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$DV-gpdA1udcp75XUeT-_V4IQZdgMZJgHfwqs8WUw_e8"},
{"content":{"body":"Which part do you think is being dismissed?","msgtype":"m.text"},"ts":1643339925615,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cxL8Dlh2TfVPscxe6iCvC9DyV2RK8ib3FlIH1mog8aM"},
{"content":{"body":"In a sense, I read your comment as a difficulty in translating the code into an English phrase.","msgtype":"m.text"},"ts":1643339957312,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oBVNQBEJN1wuLxGwEijROSbEQMvmmRRYNqBPCP3H6TQ"},
{"content":{"body":"And my thought to answer is \"well this is how I would say it\"","msgtype":"m.text"},"ts":1643339978909,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xpI3xmOf35GJhQWjOF8H_EyKX-7duxhwAcmXwFD0W0E"},
{"content":{"body":"I didn't feel dismissed at all by your comment","msgtype":"m.text"},"ts":1643340003176,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$RGMr6aOXg1DKDNEoeKPeLMe37AMFHpbYHoQQXn4mZ9A"},
{"content":{"body":"I did want to clarify the notion of subject at that point but now it's just a chain of disagreeing with every presupposition I had","msgtype":"m.text"},"ts":1643340035547,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$0GIdnrqQF0CYh3K2mMxNnh7AtMFGqjkJ-c_4REJ5hmY"},
{"content":{"body":"I didn't expect to convince anyone per se but I certainly hoped to clearly express where I was coming from","msgtype":"m.text"},"ts":1643340077160,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1tgLsu_LwQfsJe9aWI_Kc4-6W7tPIhaR84iV_40MEPU"},
{"content":{"body":"at this point I don't feel like I can speak again until somebody acknowledges what I was actually trying to say","msgtype":"m.text"},"ts":1643340105204,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_3dUf6v2MomDwROjy00DkSUOYdgZU9M0oqVttyi1miE"},
{"content":{"body":"and it's frustrating because I would expect that from the broader community, that's why I shy away from these threads so often, but","msgtype":"m.text"},"ts":1643340192706,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$V00Bh3z2CQGpgxxexQPcoO2OUH0dx1GNAz8ipWXZqTQ"},
{"content":{"body":"anyway I don't think it's a good place for round-and-round conversations","msgtype":"m.text"},"ts":1643340664750,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$cLtGk6pPX14_-LJBJ3C5r3_GJggtILcfYv7fvvXOg0A"},
{"content":{"body":"Rereading:\n> It's worth noting here that mathematical function notation sometimes uses a subscript for a similar purpose: e.g. logb(x). We bind b first, and indeed, could pass logb as a function instead of feeding it an x right away.","format":"org.matrix.custom.html","formatted_body":"<p>Rereading:</p>\n<blockquote>\n<p>It's worth noting here that mathematical function notation sometimes uses a subscript for a similar purpose: e.g. logb(x). We bind b first, and indeed, could pass logb as a function instead of feeding it an x right away.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643340873542,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VypF8WAIv49KQs_UdvyWFlSExH4eGjL-PxSrD1KS0kw"},
{"content":{"body":"otherwise one person spends hours trying to dot every i and cross every t while others spend two minutes regurgitating some entrenched view","msgtype":"m.text"},"ts":1643340874030,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Dm1ceK6KEHYslRnD1OAOPT5MQ19DL7JmxgRZ4F35olI"},
{"content":{"body":"If I understand right, you're treating `log` as something that would need to a bound to a context `b`?","format":"org.matrix.custom.html","formatted_body":"If I understand right, you're treating <code>log</code> as something that would need to a bound to a context <code>b</code>?","msgtype":"m.text"},"ts":1643340939469,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QhPBOmzcKeGzyL05VxW-eL47PMuSLNGGmGnewzDO_Tg"},
{"content":{"body":"Which would always be on the RHS of the `log` expression","format":"org.matrix.custom.html","formatted_body":"Which would always be on the RHS of the <code>log</code> expression","msgtype":"m.text"},"ts":1643340948020,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7mvpGhtbgW4XGrwKalYsTl207Mhn7Sdu9_WIXXROj80"},
{"content":{"body":"But this is directly at odds with what Jordan and I have expressed","msgtype":"m.text"},"ts":1643340978000,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZLJ4-OhVAKaqmjcViu2H8hyBdbz-aWXsxugAA8oLLMI"},
{"content":{"body":"Having to repeat the context on the right hand side is effectively the same ergonomics as hack pipe.","msgtype":"m.text"},"ts":1643341000573,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$abC2U1k8liQGf9YJhwAfJsj_okgWQxo8dkixkDIFnvQ"},
{"content":{"body":"But it seems you'd be open to `receiver :> fn()`, and I think it's because the spaces make it appear `fn` is not a property lookup?","format":"org.matrix.custom.html","formatted_body":"But it seems you'd be open to <code>receiver :&gt; fn()</code>, and I think it's because the spaces make it appear <code>fn</code> is not a property lookup?","msgtype":"m.text"},"ts":1643341037581,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nDixbNuFU8z-6lgQMoawDObhoH--Md49xDicgu9RrBQ"},
{"content":{"body":"yeah so I explicitly said that I wasn't expecting people to like my suggestion that the operands be reversed, but I realized that that was the crux of why I find it so hard to read","msgtype":"m.text"},"ts":1643341052338,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ilJI1SAKOMXBKqR_dv1xXLkQ6XRce8IvVtU2xV36ZEY"},
{"content":{"body":"yeah `:>` would seem okay at least for the `.call` case, though I wonder if it's separately problematic for the `.bind` case","format":"org.matrix.custom.html","formatted_body":"yeah <code>:&gt;</code> would seem okay at least for the <code>.call</code> case, though I wonder if it's separately problematic for the <code>.bind</code> case","msgtype":"m.text"},"ts":1643341091317,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yjv9dno-jE5eMFfvRxzF-9FUmkbnanTLf0XBCtQG4DM"},
{"content":{"body":"But is it the spaces that make it more comfortable for you?","msgtype":"m.text"},"ts":1643341135232,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-yEPcO8SmMxS5dt3Qw5CMRzqUpBGkxGeQKgyuoFAbHs"},
{"content":{"body":"yeah because it's passing an argument","msgtype":"m.text"},"ts":1643341154869,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$l1IV8xJwkUmuv4LXVJ61QWs76wwW9HCyybPx_1P9cAA"},
{"content":{"body":"since JS is an imperative language, the \"subject\" of a function call is the engine, IMO 😅","msgtype":"m.text"},"ts":1643341212528,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$NSkGMX1FGxYLvWTJjZ1pAlAUZnn1aUE9uSm6kMZN7dg"},
{"content":{"body":"(or my computer. or me.)","msgtype":"m.text"},"ts":1643341225597,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yZdvE9QAHY-lccZx66HZiMxM67MBSU6NdyUNAjEUdE8"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1643341242270,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9SHfw-Rhc8M49PUwTkxJBiApfJOefPLJzcOyTZB4aFQ"},
{"content":{"body":"I could definitely see how `a::b` could be confused with namespace (effectively property) lookup.","format":"org.matrix.custom.html","formatted_body":"I could definitely see how <code>a::b</code> could be confused with namespace (effectively property) lookup.","msgtype":"m.text"},"ts":1643341259715,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ejyJ4DxjvAjGxHiYZEvk8qL2zn3ArQbjqfvkPyng3Wk"},
{"content":{"body":"And I don't think even spaces `a :: b` would help with that.","format":"org.matrix.custom.html","formatted_body":"And I don't think even spaces <code>a :: b</code> would help with that.","msgtype":"m.text"},"ts":1643341285328,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VtByF2Bpc16M4RNyCiUZByw3xZUwfd1C0dK0fHP7bZ8"},
{"content":{"body":"I'm fine with `:>`, it is a pipe behavior that I want https://github.com/tc39/proposal-bind-this/issues/10#issuecomment-936725043","format":"org.matrix.custom.html","formatted_body":"I'm fine with <code>:&gt;</code>, it is a pipe behavior that I want https://github.com/tc39/proposal-bind-this/issues/10#issuecomment-936725043","msgtype":"m.text"},"ts":1643341331409,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Gh8gQcbw7byjOGpLMTENlwTKAwDSq9mrxmLRBfjRSJo"},
{"content":{"body":"And it might be alright to have `bound = receiver :> slice;`","format":"org.matrix.custom.html","formatted_body":"And it might be alright to have <code>bound = receiver :&gt; slice;</code>","msgtype":"m.text"},"ts":1643341355383,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jnE2gmjQL7mbYMK1tIv5ddrOzEjnoJJ6dUHLrRQHrjA"},
{"content":{"body":"(which I don't want as much)","msgtype":"m.text"},"ts":1643341371345,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$K4BajLoxyHy0RXQd0_7KgHGVwqDk7d4A4YcJE9q9fgk"},
{"content":{"body":"> <@jridgewell:matrix.org> I'm fine with `:>`, it is a pipe behavior that I want https://github.com/tc39/proposal-bind-this/issues/10#issuecomment-936725043\n\nyeah I remembered that it was an option when I reread that comment :D","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$Gh8gQcbw7byjOGpLMTENlwTKAwDSq9mrxmLRBfjRSJo?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I'm fine with <code>:&gt;</code>, it is a pipe behavior that I want https://github.com/tc39/proposal-bind-this/issues/10#issuecomment-936725043</blockquote></mx-reply>yeah I remembered that it was an option when I reread that comment :D","m.relates_to":{"m.in_reply_to":{"event_id":"$Gh8gQcbw7byjOGpLMTENlwTKAwDSq9mrxmLRBfjRSJo"}},"msgtype":"m.text"},"ts":1643341376486,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$HEQODCA6oH9djk0fOyZk4TzOumO-ie5Cah7Y7jwNTmA"},
{"content":{"body":"So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think `:>` might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":"So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think <code>:&gt;</code> might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$l1IV8xJwkUmuv4LXVJ61QWs76wwW9HCyybPx_1P9cAA"}}},"ts":1643341725927,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$RmizAiqOD1v9lsiPK150JKy2v3Rd8BjJi5uQlKr6MUs"},
{"content":{"body":"> <@rkirsling:matrix.org> yeah because it's passing an argument\n\n * So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think `:>` might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$l1IV8xJwkUmuv4LXVJ61QWs76wwW9HCyybPx_1P9cAA?via=matrix.org&amp;via=igalia.com&amp;via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>yeah because it's passing an argument</blockquote></mx-reply> * So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think <code>:&gt;</code> might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","m.new_content":{"body":"So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think `:>` might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":"So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think <code>:&gt;</code> might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$RmizAiqOD1v9lsiPK150JKy2v3Rd8BjJi5uQlKr6MUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643341798399,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Y_t4Ni7MIzlM8cwojnyOnIEjCPIkipUYNoIoKcivr5A"},
{"content":{"body":" * So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think \"`:>`\" might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":" * So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think &quot;<code>:&gt;</code>&quot; might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","m.new_content":{"body":"So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think \"`:>`\" might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":"So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think &quot;<code>:&gt;</code>&quot; might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$RmizAiqOD1v9lsiPK150JKy2v3Rd8BjJi5uQlKr6MUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643341826900,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$iJzOvw9-xodNMkXV0g2uf0zSfRfgfylhNXpGP0z3NDM"},
{"content":{"body":" * So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think \"`:>`\" with trailing whitespace might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":" * So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think &quot;<code>:&gt;</code>&quot; with trailing whitespace might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","m.new_content":{"body":"So `receiver.method()` is then a bit weird when the combo of `.` and `()` makes `()` work differently when they're both present since the preceding `.` changes the \"function\" call.   guess this is why `.` is bad to use with trailing whitespaces since it changes the following function call. I think \"`:>`\" with trailing whitespace might have the same problem - for a piece of code `receiver :> func()` the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with `arg |>> Math.round` suffers a bit from the same problem.)","format":"org.matrix.custom.html","formatted_body":"So <code>receiver.method()</code> is then a bit weird when the combo of <code>.</code> and <code>()</code> makes <code>()</code> work differently when they're both present since the preceding <code>.</code> changes the &quot;function&quot; call.   guess this is why <code>.</code> is bad to use with trailing whitespaces since it changes the following function call. I think &quot;<code>:&gt;</code>&quot; with trailing whitespace might have the same problem - for a piece of code <code>receiver :&gt; func()</code> the whitespace separates the receiver from the function call while I think it's a very important to link them strongly together. (I guess tacit function call application with <code>arg |&gt;&gt; Math.round</code> suffers a bit from the same problem.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$RmizAiqOD1v9lsiPK150JKy2v3Rd8BjJi5uQlKr6MUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643341842503,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$V9Ge-U_K1YLA1emxVgpIXR0W-HJ-GbjyHJVlY45m2eg"},
{"content":{"body":"By changing it, do you mean that the a receiver is passed as `this` instead of nothing?","format":"org.matrix.custom.html","formatted_body":"By changing it, do you mean that the a receiver is passed as <code>this</code> instead of nothing?","msgtype":"m.text"},"ts":1643341851252,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$upYOpOv9axmJpeQnmr_I0bRhcXcz4dx4DKpR5Z6oypY"},
{"content":{"body":" * By changing it, do you mean that the a receiver is passed as `this` instead of nothing?","format":"org.matrix.custom.html","formatted_body":" * By changing it, do you mean that the a receiver is passed as <code>this</code> instead of nothing?","m.new_content":{"body":"By changing it, do you mean that the a receiver is passed as `this` instead of nothing?","format":"org.matrix.custom.html","formatted_body":"By changing it, do you mean that the a receiver is passed as <code>this</code> instead of nothing?","msgtype":"m.text"},"m.relates_to":{"event_id":"$upYOpOv9axmJpeQnmr_I0bRhcXcz4dx4DKpR5Z6oypY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643341853337,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sYbSdykBJHo04duzq-cDtVUSUtk5Z1JmqUnZ0Y5zyR8"},
{"content":{"body":"Doesn't having `.` and `(` on the same line alleviate that?","format":"org.matrix.custom.html","formatted_body":"Doesn't having <code>.</code> and <code>(</code> on the same line alleviate that?","msgtype":"m.text"},"ts":1643341878216,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ceUjhcZ2plauiMxt7P1mMeBthpgCJ3BI627CBxTTYYI"},
{"content":{"body":"Eg, we break up long chains:\n```\nfoo\n  .bar()\n  .then(() => {\n  });\n```","format":"org.matrix.custom.html","formatted_body":"<p>Eg, we break up long chains:</p>\n<pre><code>foo\n  .bar()\n  .then(() =&gt; {\n  });\n</code></pre>\n","msgtype":"m.text"},"ts":1643341910956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ejpZDmlOf0t_WLZLFdzyQovPBciAppewZrZ1oibDpyM"},
{"content":{"body":"> <@jridgewell:matrix.org> By changing it, do you mean that the a receiver is passed as `this` instead of nothing?\n\nWell yeah. function call vs. method call.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$upYOpOv9axmJpeQnmr_I0bRhcXcz4dx4DKpR5Z6oypY?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>By changing it, do you mean that the a receiver is passed as <code>this</code> instead of nothing?</blockquote></mx-reply>Well yeah. function call vs. method call.","m.relates_to":{"m.in_reply_to":{"event_id":"$upYOpOv9axmJpeQnmr_I0bRhcXcz4dx4DKpR5Z6oypY"}},"msgtype":"m.text"},"ts":1643341937882,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$_8bCGyxU76ooyeB_52eYt4DjyLEJHraRnvieSn9zCrg"},
{"content":{"body":"Of course, multi-line version would be usually formatted pretty straightforwardly, but a single-line `.... && receiver :> freeFunctionLookalike() || ...` might be misleading.","format":"org.matrix.custom.html","formatted_body":"Of course, multi-line version would be usually formatted pretty straightforwardly, but a single-line <code>.... &amp;&amp; receiver :&gt; freeFunctionLookalike() || ...</code> might be misleading.","msgtype":"m.text"},"ts":1643342103342,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$wY6uFS9_lrYRA8qFf-LTrD6aSbYpmrAFesGeUcY4jRg"},
{"content":{"body":"I mean, mixing binary operators is always confusing. 😛","msgtype":"m.text"},"ts":1643342251328,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nISeBBwaPHQGLVx4LwChdyuKQIMAaMoP59wC1qr42z8"},
{"content":{"body":"But yah, I have no idea where the expression nodes end in that example.","msgtype":"m.text"},"ts":1643342285833,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RnNrN-juvRwk4S_1rVLoch2lqDMhe-UHAHJeWGSiLxc"},
{"content":{"body":"well, I didn't mean even that :-).  I would rather see `receiver :>freeFunctionLookalike()` instead of `receiver :> freeFunctionLookalike()`for the same reason I would rather see `receiver .freeFunctionLookalike()` instead of `receiver . freeFunctionLookalike()`.","format":"org.matrix.custom.html","formatted_body":"well, I didn't mean even that :-).  I would rather see <code>receiver :&gt;freeFunctionLookalike()</code> instead of <code>receiver :&gt; freeFunctionLookalike()</code>for the same reason I would rather see <code>receiver .freeFunctionLookalike()</code> instead of <code>receiver . freeFunctionLookalike()</code>.","msgtype":"m.text"},"ts":1643342347172,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$4Z18EL8727gAnaVvTwYthUOlsLM2gUh-YAwyfb-HK40"},
{"content":{"body":" * well, I didn't mean even that :-).  I would rather see `receiver :>freeFunctionLookalike()` instead of `receiver :> freeFunctionLookalike()`for the same reason I would rather see `receiver .freeFunctionLookalike()` instead of `receiver . freeFunctionLookalike()`.","format":"org.matrix.custom.html","formatted_body":" * well, I didn't mean even that :-).  I would rather see <code>receiver :&gt;freeFunctionLookalike()</code> instead of <code>receiver :&gt; freeFunctionLookalike()</code>for the same reason I would rather see <code>receiver .freeFunctionLookalike()</code> instead of <code>receiver . freeFunctionLookalike()</code>.","m.new_content":{"body":"well, I didn't mean even that :-).  I would rather see `receiver :>freeFunctionLookalike()` instead of `receiver :> freeFunctionLookalike()`for the same reason I would rather see `receiver .freeFunctionLookalike()` instead of `receiver . freeFunctionLookalike()`.","format":"org.matrix.custom.html","formatted_body":"well, I didn't mean even that :-).  I would rather see <code>receiver :&gt;freeFunctionLookalike()</code> instead of <code>receiver :&gt; freeFunctionLookalike()</code>for the same reason I would rather see <code>receiver .freeFunctionLookalike()</code> instead of <code>receiver . freeFunctionLookalike()</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$4Z18EL8727gAnaVvTwYthUOlsLM2gUh-YAwyfb-HK40","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643342372894,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$DGeUAzomR-UCDSTDNgE2ydtaPCz3iT5lELGztv9U-4M"},
{"content":{"body":"hmmm","msgtype":"m.text"},"ts":1643342509807,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$njhm9tsMhUeH6tbJp5cqn4IKBVD7020IpUUQLlxrIaY"},
{"content":{"body":"I guess I'm really viewing it as the same as `|>` but","format":"org.matrix.custom.html","formatted_body":"I guess I'm really viewing it as the same as <code>|&gt;</code> but","msgtype":"m.text"},"ts":1643342587157,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$N4Lt_rmhlK1wwvbmYF2aWVTuipX3nYj3Ox8AVPI9iAM"},
{"content":{"body":"Hack pipeline has a bit of benefit where the \"RHS\" expression has an topic indicator that gives a hint that it's a part of a bigger expression.","msgtype":"m.text"},"ts":1643342662195,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$s3PWpQOvQVxUAGbam0CvMQbwFPJQoN8kAmLasZQHfXM"},
{"content":{"body":"that is true","msgtype":"m.text"},"ts":1643342680554,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$73bMkYCtVQjT-TinJSIZUFRSVGFf8N0c-kDGCIhTiiU"},
{"content":{"body":"Tacit function application or F# pipelines don't have such a hint always.","msgtype":"m.text"},"ts":1643342707062,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$GBrmK1bg7x9PhJhp1Gg1iMMVZNON1EisAyeI9tivfpQ"},
{"content":{"body":"For these kind of issues, It's about even better to write some half-page example code where the point of interest snippet is embedded in - not too obfuscated but not too separated either. When we're having it as a topic of discussion, we automatically focus our attention for it and can't really evaluate how it looks around other code.","msgtype":"m.text"},"ts":1643342972810,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$JutIKSlZdzabmFmwEjwCh951gFpFX3ox0w2MShYghaU"},
{"content":{"body":"I guess in the case of `:>` we don't need a hint since it only fills one param though","format":"org.matrix.custom.html","formatted_body":"I guess in the case of <code>:&gt;</code> we don't need a hint since it only fills one param though","msgtype":"m.text"},"ts":1643342989877,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$XuvHz0hw8lBh2xiDtKNUWwAifIa-LeKukQs_A5sc8G8"},
{"content":{"body":"Hopefully.","msgtype":"m.text"},"ts":1643343034722,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ss5jstSYhgvzUpcj-tefpgUbttV9naUJQbjhw_8dDB0"},
{"content":{"body":"`({}).hasOwnProperty('foo')` looks like someone typoed until the preceding :> is noticed: `noPrototypeObject :> ({}).hasOwnProperty('foo')`. Though it needs some inside-real-code visibility testing.","format":"org.matrix.custom.html","formatted_body":"<code>({}).hasOwnProperty('foo')</code> looks like someone typoed until the preceding :&gt; is noticed: <code>noPrototypeObject :&gt; ({}).hasOwnProperty('foo')</code>. Though it needs some inside-real-code visibility testing.","msgtype":"m.text"},"ts":1643343772505,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$LuHwybRK2N43c8ITV6KS36TT0zTmI2ZoaK8rO-eLEG0"},
{"content":{"body":"And realistic use cases too. While pipelines can be used myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people don't write such code.","msgtype":"m.text"},"ts":1643343949385,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Ix9EZNomi1J4NTCxsDHUiwDT0-6V5jtK2Q-bO5xOC5E"},
{"content":{"body":" * And realistic use cases too. While pipelines can be used myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people write such code.","m.new_content":{"body":"And realistic use cases too. While pipelines can be used myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people write such code.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ix9EZNomi1J4NTCxsDHUiwDT0-6V5jtK2Q-bO5xOC5E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643343960353,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$hVINWc4cyPI3TIXrgX1nvEbJaPlmR5A-PVL1rDktY_U"},
{"content":{"body":" * And realistic use cases too. While pipelines can be used myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people don't write such code.","m.new_content":{"body":"And realistic use cases too. While pipelines can be used myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people don't write such code.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ix9EZNomi1J4NTCxsDHUiwDT0-6V5jtK2Q-bO5xOC5E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643343968926,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$GtdoLqtFFWz2sBpBFZ6FpPdL1y1NCsC2lCUZE3rG33U"},
{"content":{"body":" * And realistic use cases too. While pipelines can be used in myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people don't write such code.","m.new_content":{"body":"And realistic use cases too. While pipelines can be used in myriad of situations, I doubt this-call or bind-this will be used as variedly. We also need to dismiss code that's deliberately obfuscated in a way that people don't write such code.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ix9EZNomi1J4NTCxsDHUiwDT0-6V5jtK2Q-bO5xOC5E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643344235277,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$olcUF46mr94OCEE2ImNgFVAL-qWOLwmpECdGADSAMMM"},
{"content":{"body":"I don't understand the example.","msgtype":"m.text"},"ts":1643344421611,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$B6e-5jYwQj7D3WKsPLDPwtbiCVatVcCaf9V5ZgvrCo8"},
{"content":{"body":"Did you mean `noPrototypeObject :> ({}.hasOwnProperty)('foo')`","format":"org.matrix.custom.html","formatted_body":"Did you mean <code>noPrototypeObject :&gt; ({}.hasOwnProperty)('foo')</code>","msgtype":"m.text"},"ts":1643344442281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6b4Q9d5Ews4obeYT69HKGt0GA1iFz4YLAgL6Tn9mTDE"},
{"content":{"body":"(I for one really dislike the complexity that the non-identifier form of RHS introduces)","msgtype":"m.text"},"ts":1643344460665,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jF18ctXDtHLYO6cJkE8HNaJQkWVLbSK7y5xHX_dmwog"},
{"content":{"body":" * (I for one really dislike the complexity that the non-identifier form of RHS introduces)","m.new_content":{"body":"(I for one really dislike the complexity that the non-identifier form of RHS introduces)","msgtype":"m.text"},"m.relates_to":{"event_id":"$jF18ctXDtHLYO6cJkE8HNaJQkWVLbSK7y5xHX_dmwog","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643344463215,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Jnfr3245mnSkCvdQYssMy2CZ-2B62PnmimzjOiku80g"},
{"content":{"body":"> <@jridgewell:matrix.org> Did you mean `noPrototypeObject :> ({}.hasOwnProperty)('foo')`\n\nI don't know there precedence, so this might be the correct way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$6b4Q9d5Ews4obeYT69HKGt0GA1iFz4YLAgL6Tn9mTDE?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Did you mean <code>noPrototypeObject :&gt; ({}.hasOwnProperty)('foo')</code></blockquote></mx-reply>I don't know there precedence, so this might be the correct way.","m.relates_to":{"m.in_reply_to":{"event_id":"$6b4Q9d5Ews4obeYT69HKGt0GA1iFz4YLAgL6Tn9mTDE"}},"msgtype":"m.text"},"ts":1643344567245,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Www8WivAGDHGqblt1fPf-ldcom7iTT5KvyvzqScpx5M"}
]