[
{"content":{"body":"clearly we just need to sink decorators once and for all and reclaim @ 😉","msgtype":"m.text","org.matrix.msc1767.text":"clearly we just need to sink decorators once and for all and reclaim @ 😉"},"ts":1644903688141,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$se7DZyZkjxwb1FyDoYIGwM_EZL0KSbmYUii1UskbDe0"},
{"content":{"body":"but if not, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","format":"org.matrix.custom.html","formatted_body":"but if not, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but if not, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","mimetype":"text/plain"},{"body":"but if not, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","mimetype":"text/html"}]},"ts":1644904191129,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$XoMR6YeiYtWZdaAc0UvFyllwq5cg6rQgOxEOY_AqMU4"},
{"content":{"body":" * but since that's sadly not going to happen, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","format":"org.matrix.custom.html","formatted_body":" * but since that's sadly not going to happen, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","m.new_content":{"body":"but since that's sadly not going to happen, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","format":"org.matrix.custom.html","formatted_body":"but since that's sadly not going to happen, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but since that's sadly not going to happen, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","mimetype":"text/plain"},{"body":"but since that's sadly not going to happen, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$XoMR6YeiYtWZdaAc0UvFyllwq5cg6rQgOxEOY_AqMU4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * but since that's sadly not going to happen, I'd suggest `#_`; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be `_`. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize `_`. presumably this doesn't cause any problems since `#_` would only be currently valid as an `in` LHS","mimetype":"text/plain"},{"body":" * but since that's sadly not going to happen, I'd suggest <code>#_</code>; if we can't use # or @ alone then we're clearly dead in the water on single-character solutions, but the ideal solution if we were starting from scratch would obviously be <code>_</code>. so if we've been tending to use # as a sigil for stuff lately then it seems reasonable to sigilize <code>_</code>. presumably this doesn't cause any problems since <code>#_</code> would only be currently valid as an <code>in</code> LHS","mimetype":"text/html"}]},"ts":1644904222427,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$SRwZKgeEcE1CZ9StOYDN5Rxe0FB3GgXiDsMEeGCqt5Y"},
{"content":{"body":"Are there plans to ever allow unqualified private fields, like `1 + #x`?","format":"org.matrix.custom.html","formatted_body":"Are there plans to ever allow unqualified private fields, like <code>1 + #x</code>?","msgtype":"m.text"},"ts":1644940920529,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Y2iCqBA9YSnURsSFs6rxOvG7fLjFXc4emmky_wX1N84"},
{"content":{"body":"> <@jschoi:matrix.org> Are there plans to ever allow unqualified private fields, like `1 + #x`?\n\nI believe not as that would make '`#x in v`' ambiguous.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Y2iCqBA9YSnURsSFs6rxOvG7fLjFXc4emmky_wX1N84\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Are there plans to ever allow unqualified private fields, like <code>1 + #x</code>?</blockquote></mx-reply>I believe not as that would make '<code>#x in v</code>' ambiguous.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Y2iCqBA9YSnURsSFs6rxOvG7fLjFXc4emmky_wX1N84"}}},"ts":1644948016602,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IyuRNnVUhMjR2t8ZUIV36lVF7FeTfuxMDiLpGiia2EQ"},
{"content":{"body":"* > <@jschoi:matrix.org> Are there plans to ever allow unqualified private fields, like `1 + #x`?\n\nI believe not as that would make '`#x in v`' ambiguous.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Y2iCqBA9YSnURsSFs6rxOvG7fLjFXc4emmky_wX1N84\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Are there plans to ever allow unqualified private fields, like <code>1 + #x</code>?</blockquote></mx-reply>I believe not as that would make '<code>#x in v</code>' ambiguous.","m.new_content":{"body":"> <@jschoi:matrix.org> Are there plans to ever allow unqualified private fields, like `1 + #x`?\n\nI believe not as that would make '`#x in v`' ambiguous.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Y2iCqBA9YSnURsSFs6rxOvG7fLjFXc4emmky_wX1N84\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Are there plans to ever allow unqualified private fields, like <code>1 + #x</code>?</blockquote></mx-reply>I believe not as that would make '<code>#x in v</code>' ambiguous.","msgtype":"m.text"},"m.relates_to":{"event_id":"$IyuRNnVUhMjR2t8ZUIV36lVF7FeTfuxMDiLpGiia2EQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1644948042855,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$whbotFEXUas7zLDYeLoNE_5_wWWJ_VH6XCKl4WZuZFA"},
{"content":{"body":"That was explicitly decided to never be an option as part of private-in","msgtype":"m.text"},"ts":1644954245970,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2UbHzA9XhbGVXROSNcr9Us_oos7t7vB-CrkWuXUoDhc"},
{"content":{"body":"but also, nonzero people would have prevented that from happening anyways, because not all field access is on the receiver.","msgtype":"m.text"},"ts":1644954287885,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8reOIk6RnxU_3-0dE3ch_MS1qriV-EAEaJVn9IcbdBk"},
{"content":{"body":"Being reminded that private fields are always qualified—and that `#_` is an option—has made me somewhat less averse to `##`, funnily enough. As long as we’re making `#` into a ‘syntax dispatch’ token, maybe `##` or `#_` wouldn’t be too bad even when mixed with tuples/records…but `##` at least is still “heavier” and “noisier” than `^^`.","format":"org.matrix.custom.html","formatted_body":"Being reminded that private fields are always qualified—and that <code>#_</code> is an option—has made me somewhat less averse to <code>##</code>, funnily enough. As long as we’re making <code>#</code> into a ‘syntax dispatch’ token, maybe <code>##</code> or <code>#_</code> wouldn’t be too bad even when mixed with tuples/records…but <code>##</code> at least is still “heavier” and “noisier” than <code>^^</code>.","msgtype":"m.text"},"ts":1644961447753,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8SoNQJCRbx9nQePNyn_xSFfsmAbQTQbwJ5ZkbelNqnY"},
{"content":{"body":"`… |> f(#[##])` / `… |> f(#[#_])` / `… |> f(#[^^])` is going to be real, and it’s going to be common. ","format":"org.matrix.custom.html","formatted_body":"<code>… |&gt; f(#[##])</code> / <code>… |&gt; f(#[#_])</code> / <code>… |&gt; f(#[^^])</code> is going to be real, and it’s going to be common.","msgtype":"m.text"},"ts":1644961537850,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pmNXXNunGDw7CBQ9d4v0EglUzYQ9WSTykaLD38K5Wr8"},
{"content":{"body":"* `|> f(#[##])` / `|> f(#[#_])` / `|> f(#[^^])` is going to be real, and it’s going to be common. ","format":"org.matrix.custom.html","formatted_body":"* <code>|&gt; f(#[##])</code> / <code>|&gt; f(#[#_])</code> / <code>|&gt; f(#[^^])</code> is going to be real, and it’s going to be common.","m.new_content":{"body":"`|> f(#[##])` / `|> f(#[#_])` / `|> f(#[^^])` is going to be real, and it’s going to be common. ","format":"org.matrix.custom.html","formatted_body":"<code>|&gt; f(#[##])</code> / <code>|&gt; f(#[#_])</code> / <code>|&gt; f(#[^^])</code> is going to be real, and it’s going to be common.","msgtype":"m.text"},"m.relates_to":{"event_id":"$pmNXXNunGDw7CBQ9d4v0EglUzYQ9WSTykaLD38K5Wr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1644961548621,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hqKFo-I39ZOrRc3CaF1ZMpCDWM6QYtWwFSepdZQhKOw"},
{"content":{"body":"* Being reminded that private fields are always qualified—and that `#_` is an option—has made me somewhat less averse to `##`, funnily enough. As long as we’re making `#` into a ‘syntax dispatch’ token, maybe `##` or `#_` wouldn’t be too bad even when mixed with tuples/records…but `##` at least is still “heavier” and “noisier” than `^^`.","format":"org.matrix.custom.html","formatted_body":"* Being reminded that private fields are always qualified—and that <code>#_</code> is an option—has made me somewhat less averse to <code>##</code>, funnily enough. As long as we’re making <code>#</code> into a ‘syntax dispatch’ token, maybe <code>##</code> or <code>#_</code> wouldn’t be too bad even when mixed with tuples/records…but <code>##</code> at least is still “heavier” and “noisier” than <code>^^</code>.","m.new_content":{"body":"Being reminded that private fields are always qualified—and that `#_` is an option—has made me somewhat less averse to `##`, funnily enough. As long as we’re making `#` into a ‘syntax dispatch’ token, maybe `##` or `#_` wouldn’t be too bad even when mixed with tuples/records…but `##` at least is still “heavier” and “noisier” than `^^`.","format":"org.matrix.custom.html","formatted_body":"Being reminded that private fields are always qualified—and that <code>#_</code> is an option—has made me somewhat less averse to <code>##</code>, funnily enough. As long as we’re making <code>#</code> into a ‘syntax dispatch’ token, maybe <code>##</code> or <code>#_</code> wouldn’t be too bad even when mixed with tuples/records…but <code>##</code> at least is still “heavier” and “noisier” than <code>^^</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$8SoNQJCRbx9nQePNyn_xSFfsmAbQTQbwJ5ZkbelNqnY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1644961583096,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oMdirw1aoP9GtP1ocNvKyFYMdOx37PuVGKeHyiCQ15U"},
{"content":{"body":"* `… |> f(#[##])` / `… |> f(#[#_])` / `… |> f(#[^^])` is going to be real, and it’s going to be common. ","format":"org.matrix.custom.html","formatted_body":"* <code>… |&gt; f(#[##])</code> / <code>… |&gt; f(#[#_])</code> / <code>… |&gt; f(#[^^])</code> is going to be real, and it’s going to be common.","m.new_content":{"body":"`… |> f(#[##])` / `… |> f(#[#_])` / `… |> f(#[^^])` is going to be real, and it’s going to be common. ","format":"org.matrix.custom.html","formatted_body":"<code>… |&gt; f(#[##])</code> / <code>… |&gt; f(#[#_])</code> / <code>… |&gt; f(#[^^])</code> is going to be real, and it’s going to be common.","msgtype":"m.text"},"m.relates_to":{"event_id":"$pmNXXNunGDw7CBQ9d4v0EglUzYQ9WSTykaLD38K5Wr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1644961638813,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2fXxpxLpN5O_p4FrEYh34-Qd-8cwVvzZ_rLKg_KDguY"},
{"content":{"body":"jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","mimetype":"text/html"}]},"ts":1644962322198,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yZKTTmUFD46matzjDJyKQeMgfX9-IwXjJ4Cp8WWB-hg"},
{"content":{"body":" * jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","m.new_content":{"body":"jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$yZKTTmUFD46matzjDJyKQeMgfX9-IwXjJ4Cp8WWB-hg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * jschoi: `x |> #y in #` isn't all too bad, to be sure (with `#` or `##`)","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: <code>x |&gt; #y in #</code> isn't all too bad, to be sure (with <code>#</code> or <code>##</code>)","mimetype":"text/html"}]},"ts":1644962336344,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mP_esCHBPSkwXsguKvZ_Teuf-oEytbS46qoOKoo5DVU"},
{"content":{"body":"Worst-case syntax confusion so far would be `#[##.#x]`","format":"org.matrix.custom.html","formatted_body":"Worst-case syntax confusion so far would be <code>#[##.#x]</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Worst-case syntax confusion so far would be `#[##.#x]`","mimetype":"text/plain"},{"body":"Worst-case syntax confusion so far would be <code>#[##.#x]</code>","mimetype":"text/html"}]},"ts":1644963172118,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$K84boag_xOvMxEl4MWvi9ZVEBo8V3qqbtGYzGHJ-4Fo"},
{"content":{"body":"which imo is sufficiently okay? There's always non-`#` tokens between the `#` that help break up the visual flow.","format":"org.matrix.custom.html","formatted_body":"which imo is sufficiently okay? There's always non-<code>#</code> tokens between the <code>#</code> that help break up the visual flow.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"which imo is sufficiently okay? There's always non-`#` tokens between the `#` that help break up the visual flow.","mimetype":"text/plain"},{"body":"which imo is sufficiently okay? There's always non-<code>#</code> tokens between the <code>#</code> that help break up the visual flow.","mimetype":"text/html"}]},"ts":1644963194093,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$v4owC5d6q6FhZqj914Vr994DE0GDktgRg73IebaZuaA"},
{"content":{"body":"(The only reason I'd object lightly to `#_` is they're on opposite hands and both Shifted, so I've gotta do a little dance when typing it.)","format":"org.matrix.custom.html","formatted_body":"(The only reason I'd object lightly to <code>#_</code> is they're on opposite hands and both Shifted, so I've gotta do a little dance when typing it.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(The only reason I'd object lightly to `#_` is they're on opposite hands and both Shifted, so I've gotta do a little dance when typing it.)","mimetype":"text/plain"},{"body":"(The only reason I'd object lightly to <code>#_</code> is they're on opposite hands and both Shifted, so I've gotta do a little dance when typing it.)","mimetype":"text/html"}]},"ts":1644963228336,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xVwf8bYvEUO1LfVKH8TXfkx7nAPwmXtMjCYpp-rCetw"}
]