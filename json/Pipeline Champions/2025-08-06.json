[
{"content":{"body":"> <@rbuckton:matrix.org> The fact we advanced Iterator helpers, which also depends on ad hoc arrows, weakens that argument, IMO.\n\nBut iterator helpers work on the receiver. So there is only one closure.\n\n`i.filter(f)` vs `filter(f)(i)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24qv1n9OI3W9QBLHq_S_cU8vMyIiTc5wI0vzYDEXOL1Qg\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The fact we advanced Iterator helpers, which also depends on ad hoc arrows, weakens that argument, IMO.</blockquote></mx-reply><p>But iterator helpers work on the receiver. So there is only one closure.</p>\n<p><code>i.filter(f)</code> vs <code>filter(f)(i)</code></p>","m.relates_to":{"m.in_reply_to":{"event_id":"$qv1n9OI3W9QBLHq_S_cU8vMyIiTc5wI0vzYDEXOL1Qg"}},"msgtype":"m.text"},"ts":1754449042006,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$k-CWcGgttce2cM7m3ypd6oGeIVFyLdKE-RIfPYaNarU"},
{"content":{"body":"Engines aren't saying we can't have any APIs that take a callback","msgtype":"m.text"},"ts":1754449087929,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$a_nCFB8aPawJgVqHDElHIzbSy_jhGXvlm_4z1ZTk__c"},
{"content":{"body":"If PFAs are inlined in the presence of a `|>`, then the only other place they would have utility are places where you're already using `=>`.","format":"org.matrix.custom.html","formatted_body":"If PFAs are inlined in the presence of a <code>|&gt;</code>, then the only other place they would have utility are places where you're already using <code>=&gt;</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1754449527155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-brp76gc2iL-L-CU-7L4LxAOqE_6HFKr8It_lFItpOY"},
{"content":{"body":"In which case, `?` vs `=>` doesn't really change the math.","format":"org.matrix.custom.html","formatted_body":"In which case, <code>?</code> vs <code>=&gt;</code> doesn't really change the math.","m.mentions":{},"msgtype":"m.text"},"ts":1754449643473,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bntoIAWUgoxEXUaeAlmgi8pTZMcgI6k5mmttGBNWS-o"},
{"content":{"body":"If I am doing `[1, 2, 3].map(x => add(x, 1))` today, then `[1, 2, 3].map(add(?, 1))` saves a few characters but is functionally similar.","format":"org.matrix.custom.html","formatted_body":"If I am doing <code>[1, 2, 3].map(x =&gt; add(x, 1))</code> today, then <code>[1, 2, 3].map(add(?, 1))</code> saves a few characters but is functionally similar.","m.mentions":{},"msgtype":"m.text"},"ts":1754449742966,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JgVIDYYqo9RmLFCmlDpWcjPvxPtAfMff8QkOSD-dc5E"},
{"content":{"body":"There are more than a few interesting cases, but most boil down to something you could do with either `=>` or `.bind()` without some of the caveats. For example, you could do \n```js\nconst MyLogger = Logger(\"output.log\", ...);\n...\nconst logger = new MyLogger(Severity.Info);\nlogger.log(\"hi\");\n```\nYou can't `new` an arrow, so its functionally similar to `.bind`, except that you can put placeholders anywhere in the argument list.","format":"org.matrix.custom.html","formatted_body":"<p>There are more than a few interesting cases, but most boil down to something you could do with either <code>=&gt;</code> or <code>.bind()</code> without some of the caveats. For example, you could do</p>\n<pre><code class=\"language-js\">const MyLogger = Logger(\"output.log\", ...);\n...\nconst logger = new MyLogger(Severity.Info);\nlogger.log(\"hi\");\n</code></pre>\n<p>You can't <code>new</code> an arrow, so its functionally similar to <code>.bind</code>, except that you can put placeholders anywhere in the argument list.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1754449967033,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E_jlPjvPeMMfbTifvYyPv7BvkvdscCvxr_hvEzgI610"},
{"content":{"body":"I think having PFA would be neat, and I do like that it meshes nicely with pipeline. But I'm more aligned with Chrome's performance concerns, and I think it encourages functions-returning-closures style of programing that will be a huge bottleneck in applications.","m.mentions":{},"msgtype":"m.text"},"ts":1754506567370,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6kQQO-J4EEAYEyaDO2LMqeS0TdKmYPiIcctfqPuxhzU"},
{"content":{"body":"If people only did `foo |> bar(?, 1)` with the PFA as the literal RHS of the pipe, I think it wouldn't be a concern.","format":"org.matrix.custom.html","formatted_body":"If people only did <code>foo |&gt; bar(?, 1)</code> with the PFA as the literal RHS of the pipe, I think it wouldn't be a concern.","m.mentions":{},"msgtype":"m.text"},"ts":1754506590966,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$c9DM3pWabokaaqNZgSsyF9bHfRLHgOQCYqZvA3pKrsU"},
{"content":{"body":"But it's going to turn into `foo |> filter(bar)` in a lot of code, and that's not easy to statically elminate","format":"org.matrix.custom.html","formatted_body":"But it's going to turn into <code>foo |&gt; filter(bar)</code> in a lot of code, and that's not easy to statically elminate","m.mentions":{},"msgtype":"m.text"},"ts":1754506643090,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-zh6eVkK23mkudrj4VlYul-tVGLsmR3cNE0I48Kw6tc"},
{"content":{"body":"Hack style `foo | filter(bar)(%%)` isn't immune to it, but it feels so foreign to have `fn(a)(b)` that I think it'd discourage the bad patterns, or at least subtly push people to write `filter(bar, %%)`","format":"org.matrix.custom.html","formatted_body":"Hack style <code>foo | filter(bar)(%%)</code> isn't immune to it, but it feels so foreign to have <code>fn(a)(b)</code> that I think it'd discourage the bad patterns, or at least subtly push people to write <code>filter(bar, %%)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1754506791928,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$A4aevGIuO_GwEXJ_oS0NYsJaTV9ieygF-83ZCO0qBB8"}
]