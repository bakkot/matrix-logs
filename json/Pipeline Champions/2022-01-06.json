[
{"content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"ts":1641493622385,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM"},
{"content":{"body":" * Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":" * Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","m.new_content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641493639122,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZUJNkPaIYECTsZeQetz_FMGo3npej6ueGqkJTYpD9Tc"},
{"content":{"body":"something that lets me, eg, `const { slice } = Array.prototype; slice::(receiver, ...args)` or `const slice = ::Array.prototype.slice; slice(receiver, ...args)` would work","format":"org.matrix.custom.html","formatted_body":"something that lets me, eg, <code>const { slice } = Array.prototype; slice::(receiver, ...args)</code> or <code>const slice = ::Array.prototype.slice; slice(receiver, ...args)</code> would work","msgtype":"m.text"},"ts":1641493716423,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wQhzwVFg7-8MeqyaFF0DwpbgLGnxJXMkF_eydri1IU4"},
{"content":{"body":"Yes, exactly.","msgtype":"m.text"},"ts":1641493728601,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$in6eyrFXBSDRFG-UApABCimIks1Vx5EcHw_K95iLUpo"},
{"content":{"body":"and yes i 100% agree that it works very well in concert with pipe","msgtype":"m.text"},"ts":1641493734806,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uufs_uAF0jiDTZlxaUxAViEZXhGdi7WqPo3eYiFBxKw"},
{"content":{"body":"the call form in particular","msgtype":"m.text"},"ts":1641493739937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xf7niVAeRl8ZEdV569ONK3uAuZC9i7tKX0KN5lGZKGY"},
{"content":{"body":"and both would also work well in concert with `getIntrinsic`","format":"org.matrix.custom.html","formatted_body":"and both would also work well in concert with <code>getIntrinsic</code>","msgtype":"m.text"},"ts":1641493756006,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6B136e4tx2Bj5s0DHj5QRCj25fIjt4X67zwRsd3NXqA"},
{"content":{"body":"All right, I've added a nota bene to my summary essay covering this: https://gist.github.com/tabatkins/60d831d3e304e3e7316d473f5c1f269b#nota-bene-reliable-method-calling","msgtype":"m.text"},"ts":1641495112694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BisGgIQIWEWGNr6MUZZ1NXeZ7Jm7ZaVmlsKxi-axvq4"},
{"content":{"body":"I agree that the call-operator version works better, for several reasons I outline here.","msgtype":"m.text"},"ts":1641495130045,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I_YP0Lr6gtJhR_9zttCWzwh_kjsDnllZe2R7ZM4SbtU"},
{"content":{"body":"If I may try summarizing: between `arrayLike |> slice::(##, 1)` and `arrayLike |> ##::slice(1)`, you prefer the former, Tab, right?","format":"org.matrix.custom.html","formatted_body":"If I may try summarizing: between <code>arrayLike |&gt; slice::(##, 1)</code> and <code>arrayLike |&gt; ##::slice(1)</code>, you prefer the former, Tab, right?","msgtype":"m.text"},"ts":1641495973674,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ"},
{"content":{"body":"(The former uses the newly proposed “call-on” operator while the latter uses the “bind-this” operator.)","msgtype":"m.text"},"ts":1641496122988,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4rr2xvNFGeAwhdDNhLX19ZoXvwUjhYPok2jiJ6R_TQ0"},
{"content":{"body":"yes, strongly prefer the former","msgtype":"m.text"},"ts":1641496521281,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wnOyuYnWa97XI4zROOC-n6HW5P5Gn4yTizRgwfsK9cA"},
{"content":{"body":"It solves the problem just as elegantly, but without the possibility of people writing libraries intentionally aimed at that calling style","msgtype":"m.text"},"ts":1641496561111,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$A8u2b6qyam6_Dn6kMHdbKNWPr6ieAjhjJxJDKF0fzhA"},
{"content":{"body":"I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ"}}},"ts":1641496572214,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iW9yPvi5ehHYgngWE8F33S_iv92L5pIDHgxNs2811Ko"},
{"content":{"body":"right, exactly","msgtype":"m.text"},"ts":1641496583791,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$a6dz_ziaPwEsOGh2HH7_LbCj4fuXpODlEhiuJ0udoYw"},
{"content":{"body":"> <@jschoi:matrix.org> If I may try summarizing: between `arrayLike |> slice::(##, 1)` and `arrayLike |> ##::slice(1)`, you prefer the former, Tab, right?\n\n * I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>If I may try summarizing: between <code>arrayLike |&gt; slice::(##, 1)</code> and <code>arrayLike |&gt; ##::slice(1)</code>, you prefer the former, Tab, right?</blockquote></mx-reply> * I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","m.new_content":{"body":"I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$iW9yPvi5ehHYgngWE8F33S_iv92L5pIDHgxNs2811Ko","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641496585262,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$rBJJA-9Cgw8AYcctcyEftliUKAdgrNQXv19lxMwrYfE"},
{"content":{"body":"Yes, I did `arrayLike |> ##::slice(1)` only to show parallelism, but it would actually be `arrayLike::slice(1)`.","format":"org.matrix.custom.html","formatted_body":"Yes, I did <code>arrayLike |&gt; ##::slice(1)</code> only to show parallelism, but it would actually be <code>arrayLike::slice(1)</code>.","msgtype":"m.text"},"ts":1641496638683,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kFYSIwxS2_UsYz9Q9x7XzBG-LVR7OS6KZv1aJwcJyNk"},
{"content":{"body":"also, I think it's better ad-hoc - `arrayLike::Array.prototype.slice(1)` requires us to be pretty careful with precedence to get right, but `Array.prototyype.slice::(arrayLike, 1)` is easy","format":"org.matrix.custom.html","formatted_body":"also, I think it's better ad-hoc - <code>arrayLike::Array.prototype.slice(1)</code> requires us to be pretty careful with precedence to get right, but <code>Array.prototyype.slice::(arrayLike, 1)</code> is easy","msgtype":"m.text"},"ts":1641496639068,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hnchQx96L3jvRqURc191zh96wCXE2b50ORGrzJpt7N4"},
{"content":{"body":"i think it's pretty easy to explain, too, since it's literally just \"`.call()`, but an operator\"","format":"org.matrix.custom.html","formatted_body":"i think it's pretty easy to explain, too, since it's literally just &quot;<code>.call()</code>, but an operator&quot;","msgtype":"m.text"},"ts":1641496692588,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y"},
{"content":{"body":"I think this is understandable. I can try proposing a rival-rival call-on operator at the next meeting along with Function.pipe.","msgtype":"m.text"},"ts":1641496709633,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eQJHFnWvfBAFgwHFMkwxQ0QLSHEQMlU8mEmqa3GkUqM"},
{"content":{"body":"Let's get in on that together, and we can rope in Jordan too. ^_^","msgtype":"m.text"},"ts":1641496731730,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_oWQa47BbkgJvprAyeCC-L_OB1865FdH3Bct8bCrTMg"},
{"content":{"body":"i'm thinking over how I might present your diagram for an overview/discussion","msgtype":"m.text"},"ts":1641496758382,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6PvFrCcARX6WsFzuo7aULVt2Oy2y72SOhpvUxuDKSHQ"},
{"content":{"body":"invites sent, lmk if anyone else wants in","msgtype":"m.text"},"ts":1641496962010,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$csWeX3JOCHp1WRO2qU_Vbe9ul8UaxqbU8x9_sOAkmgA"},
{"content":{"body":"> <@tabatkins:matrix.org> i think it's pretty easy to explain, too, since it's literally just \"`.call()`, but an operator\"\n\nthat seems like a potential weakness? Seems that makes the benefit mostly about protection against `Function.prototype.call` being patched? Which can be done with `Array.prototype.slice |> ReflectApply(##, arrayLike, 1)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>i think it's pretty easy to explain, too, since it's literally just \"<code>.call()</code>, but an operator\"</blockquote></mx-reply>that seems like a potential weakness? Seems that makes the benefit mostly about protection against <code>Function.prototype.call</code> being patched? Which can be done with <code>Array.prototype.slice |&gt; ReflectApply(##, arrayLike, 1)</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y"}},"msgtype":"m.text"},"ts":1641496975942,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jYRuodEHvaPxYmVlxjYVq4aGSnu7aUDNOqhHdZMMGfc"},
{"content":{"body":"Well it's \".call(), but more convenient\". ","msgtype":"m.text"},"ts":1641497011886,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$92Qe-jIEipB2VtRRnJYzoc24m6pY8Hc65OyOSUXKNfY"},
{"content":{"body":"I would argue the primary benefit is that `.call` is very common and we are shortening a very common function.","format":"org.matrix.custom.html","formatted_body":"I would argue the primary benefit is that <code>.call</code> is very common and we are shortening a very common function.","msgtype":"m.text"},"ts":1641497018601,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4RhYV3h9UWbQYnqv02Hq_cBLFCORDsi8Qr2bKfiXa3c"},
{"content":{"body":"(I’d also be particularly interested to know how much Richard Gibson feels call-on would overlap with other dataflow proposals.)","format":"org.matrix.custom.html","formatted_body":"(I’d also be particularly interested to know how much <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> feels call-on would overlap with other dataflow proposals.)","msgtype":"m.text"},"ts":1641497065895,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HjI6NNuHpnFrSadUvTBRYgVJbbsI3m8L8BdUdf4ihAQ"},
{"content":{"body":"`call` is already quite short and doesn't involve holding shift to type?","format":"org.matrix.custom.html","formatted_body":"<code>call</code> is already quite short and doesn't involve holding shift to type?","msgtype":"m.text"},"ts":1641497133444,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$d2_qVyd9-ce2OdLq_DPHw15UzD0HFvHWDQiyPv_TNys"},
{"content":{"body":"I guess I do need to work out how things would change with having to use pipe with call-on to get the word-order benefit…","msgtype":"m.text"},"ts":1641497184468,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RZ6DiXFi2lR-bYzlHiinqpj7oOC1Myt5Y297ErqeQ1g"},
{"content":{"body":"not if you're worried about patching, which is a big part of this in the first place","msgtype":"m.text"},"ts":1641497197719,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Z3kau733QUSPlnves5rHFG0KlBDd1F6rKpq5l7C8b2E"},
{"content":{"body":"`meth |> ReflectApply(##, obj, args)` is a lot longer ^_^","format":"org.matrix.custom.html","formatted_body":"<code>meth |&gt; ReflectApply(##, obj, args)</code> is a lot longer ^_^","msgtype":"m.text"},"ts":1641497222193,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SJkxFggVs2nfQMGDA8Oh0T1akokfFZwtNCJ1CGHb34A"},
{"content":{"body":"And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","msgtype":"m.text"},"ts":1641497242061,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY"},
{"content":{"body":"* And also obscures the meaning of the code (which very commonly occurs).","m.new_content":{"body":"And also obscures the meaning of the code (which very commonly occurs).","msgtype":"m.text"},"m.relates_to":{"event_id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497267184,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_2_YYisZHc_ouCsCyNct1WjhGc_7VtrKJvR7YR1DTXA"},
{"content":{"body":"* And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","m.new_content":{"body":"And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","msgtype":"m.text"},"m.relates_to":{"event_id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497288170,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gEobjjD5jBhc78dXkdRGikXTyKi3ttM5T_eQ--8ooVk"},
{"content":{"body":"It would probably be `obj |> ReflectApply(meth, ##, args)`, though.","format":"org.matrix.custom.html","formatted_body":"It would probably be <code>obj |&gt; ReflectApply(meth, ##, args)</code>, though.","msgtype":"m.text"},"ts":1641497338934,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4Sox-FR2FuxIS_gtTyIsmdIEgWs6Larw7sk4KvPBTnU"},
{"content":{"body":"Versus `obj |> meth::(##, args)`.","format":"org.matrix.custom.html","formatted_body":"Versus <code>obj |&gt; meth::(##, args)</code>.","msgtype":"m.text"},"ts":1641497364399,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KkWbw8PKclBnR8--wFM-_HMtCZ54dPKzfPxE19YFEdk"},
{"content":{"body":"ah yeah, sure","msgtype":"m.text"},"ts":1641497374876,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CDm_IbOM7cULLhgUeKGAMPJgA3TcaSRzxcO5aLcksVg"},
{"content":{"body":"I will admit tho, that a major motivation for this particular shape is to solve this use-case *without* overlapping over dataflow proposals. Between Pipe and PFA, the other bind-this operations can be done reasonably well already; this covers the last significant unhandled use-case (afaict) without stomping on either of those.","format":"org.matrix.custom.html","formatted_body":"I will admit tho, that a major motivation for this particular shape is to solve this use-case <em>without</em> overlapping over dataflow proposals. Between Pipe and PFA, the other bind-this operations can be done reasonably well already; this covers the last significant unhandled use-case (afaict) without stomping on either of those.","msgtype":"m.text"},"ts":1641497487074,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VMayqNYCQjyrK14arhnGrK5CE_DtOkIkkDVYZ4Gkim8"},
{"content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too.","msgtype":"m.text"},"ts":1641497690317,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497728327,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oMJELbdSNtXbI_vbmhNe-aOsHxSg5hdU0_fIQcvVwJc"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497734797,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lV5ahgptjFmb45j6UuLXa8qSUWZr41qTeMBF52wUUns"},
{"content":{"body":"And when .bind is just used to hard-bind a method to the object it's already sitting on, PFA covers that well on its own. The remaining \"hard-bind a method to an unrelated object\" is, afaict, a lot less common.","msgtype":"m.text"},"ts":1641497781060,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FsDDDjerwloDbWuIGC4sVzoMo49ydKLPMXwE7ULfcFM"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can optimize .call’s word order and brevity by combining with the pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can optimize .call’s word order and brevity by combining with the pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497782930,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gYtR15aDDv4K0eglakNpmcDhTANDvHclxtEbI6xJIfE"},
{"content":{"body":"Another potential solution to avoiding `Function.prototype.call` tampering. Is a build step.\nA tool that looks for `someMethod.$call(obj, ...args)` and transforms it to `reflectApply(someMethod, obj, args)`.\nIt could install `Function.prototype.$call` during development to avoid needing to transform during fast dev builds. And only transform for production.","format":"org.matrix.custom.html","formatted_body":"Another potential solution to avoiding <code>Function.prototype.call</code> tampering. Is a build step.<br>A tool that looks for <code>someMethod.$call(obj, ...args)</code> and transforms it to <code>reflectApply(someMethod, obj, args)</code>.<br>It could install <code>Function.prototype.$call</code> during development to avoid needing to transform during fast dev builds. And only transform for production.","msgtype":"m.text"},"ts":1641497794234,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ICuThamtuvEjJi3CjFwIqt2n3z32R5eAKKJdq-JZJSw"},
{"content":{"body":"TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","msgtype":"m.text"},"ts":1641497804288,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hc5lXi7SBfhuxSVqjBCwh8nFZMCJQcRwnQuaf6dAC9M"},
{"content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","msgtype":"m.text"},"ts":1641497820550,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU"},
{"content":{"body":" * TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","m.new_content":{"body":"TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","msgtype":"m.text"},"m.relates_to":{"event_id":"$hc5lXi7SBfhuxSVqjBCwh8nFZMCJQcRwnQuaf6dAC9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497827681,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qKDj3pFmhAOD9vpBbF4giqVvAqw5uVRcFOYxgB1Em1o"},
{"content":{"body":" * build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author","m.new_content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497837161,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3kcWxanA8qt15XK-maAcwPus5Hhxm389j6_c1ZtQ4v0"},
{"content":{"body":" * build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","m.new_content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497842056,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wGD4ml3WbMjsiCOf165RblCsF3WOhjekdabrGehcPfY"},
{"content":{"body":"The receiver–function–arguments word order is solved (albeit slightly more verbosely) with pipe operator + call-on.","msgtype":"m.text"},"ts":1641497846437,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nuzqHIhWjC32mefVrEXIDMTl6FfPclKpwUE97qe3-LY"},
{"content":{"body":"I understand why that order is appealing, but note that using that order makes it easy to publish modules that are *intended* to be called with this syntax, promoting ecosystem forking that we don't want.","format":"org.matrix.custom.html","formatted_body":"I understand why that order is appealing, but note that using that order makes it easy to publish modules that are <em>intended</em> to be called with this syntax, promoting ecosystem forking that we don't want.","msgtype":"m.text"},"ts":1641497874142,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$M5CcvKGSEm9pjj2UHqbIIaavzl-yFP1xYEy3z7VRGwg"},
{"content":{"body":"how? `fn |> ^::(receiver, ...args)` has the same ordering issue as `fn::(receiver, ...args)`","format":"org.matrix.custom.html","formatted_body":"how? <code>fn |&gt; ^::(receiver, ...args)</code> has the same ordering issue as <code>fn::(receiver, ...args)</code>","msgtype":"m.text"},"ts":1641497881747,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_L4BBdwioorfzXzE0Sx9fXdLa97RvTw52gReldiNWL4"},
{"content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","msgtype":"m.text"},"ts":1641497886937,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0"},
{"content":{"body":"Thus the overlap with pipe that makes some committee members uncomfortable, yeah","msgtype":"m.text"},"ts":1641497890334,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MnDJKv63Q_0XupVs9tWJpY9sUrf7TdyVUo0b8Z7qUiM"},
{"content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","msgtype":"m.text"},"ts":1641497900073,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497904624,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yIeFwMsRw15XroOfi6yf3HmzUxRWd9sGAeoMW5PrUvE"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497914875,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-SE2ZcZ6BNoUzywuAdhb9-jfQxt1-FIVQoqaAwBSJa8"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497916210,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TfW2Nun8XKOsHXsGwxuL1ATAvl5srJt0JLjguKtSgI0"},
{"content":{"body":"* `receiver |> fn::(#, ...args)`.","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code>.","m.new_content":{"body":"`receiver |> fn::(#, ...args)`.","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497918380,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5l_aIfTK9dlC3fvbR39fG-65ACHmm7bfTuIKPuHXszA"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497919334,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gtv4aHO9NU2Ss196HdtglaF1dn1Vteg3fDrts4619oQ"},
{"content":{"body":"Right, publishing a module where *free-floating functions* are authored to use `this` is, imo, bad.","format":"org.matrix.custom.html","formatted_body":"Right, publishing a module where <em>free-floating functions</em> are authored to use <code>this</code> is, imo, bad.","msgtype":"m.text"},"ts":1641497923843,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qteBLMAUBzz7K1SZOe00QYJiiE6TO03mC38eny6mGRY"},
{"content":{"body":"i'm not sure what you mean, that's already a thing people can (and sometimes do) do","msgtype":"m.text"},"ts":1641497958030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dhNDc81M1v3jOHVPGMzu_u_cNDNnUq2PUa6R3a5CzYQ"},
{"content":{"body":"* `receiver |> fn::(#, ...args)` has the desired word order.","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code> has the desired word order.","m.new_content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order.","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497958500,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8NUNdEDqK9Eck4EAzb_hezZ9P0CToSIKe3Dx0CJo018"},
{"content":{"body":"Who does that today? You'd have to use `.call()` to invoke the functions.","format":"org.matrix.custom.html","formatted_body":"Who does that today? You'd have to use <code>.call()</code> to invoke the functions.","msgtype":"m.text"},"ts":1641497977933,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DwXcBFmNF1qO2295nJa79UbpuZHkdSSrCRybKxtz51Q"},
{"content":{"body":"it's not our place to discourage `export default function (...args) { this }`, that's a normal part of the language","format":"org.matrix.custom.html","formatted_body":"it's not our place to discourage <code>export default function (...args) { this }</code>, that's a normal part of the language","msgtype":"m.text"},"ts":1641497980676,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X0MLE7I0qkq0P2XrxmWDv-50VdN_0KCqjxQyCHMx8Vc"},
{"content":{"body":"yes, that's right, you would","msgtype":"m.text"},"ts":1641497983894,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VGY3joueHT1bAx1qJ7eaZX2swyssfDfvYiW_KkRw8-s"},
{"content":{"body":"* `receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","m.new_content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497990087,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$At51W6s6ewS3vTbRnWqARuVtkGN3-KoVPpJnMLhyZnc"},
{"content":{"body":"and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":"and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","msgtype":"m.text"},"ts":1641497999438,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pOipldNn_NDNTPsLLfZNzvRzdvPQR8uCrQiLu15C0QU"},
{"content":{"body":" * and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":" * and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","m.new_content":{"body":"and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":"and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","msgtype":"m.text"},"m.relates_to":{"event_id":"$pOipldNn_NDNTPsLLfZNzvRzdvPQR8uCrQiLu15C0QU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498002326,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Jz4wh4_afM57H8q3tEeXEQU_Wg19bGHhDn_wwhzaE5s"},
{"content":{"body":"Okay, well that's werid and people can be weird if they want. But that's not something normal libraries do.","msgtype":"m.text"},"ts":1641498002403,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yxzFmF37YlOTM2xOO9y4lA6aIkhkFFYp1PdEwcRq3BA"}
]