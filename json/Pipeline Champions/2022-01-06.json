[
{"content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"ts":1641493622385,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM"},
{"content":{"body":" * Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":" * Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","m.new_content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641493639122,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZUJNkPaIYECTsZeQetz_FMGo3npej6ueGqkJTYpD9Tc"},
{"content":{"body":"something that lets me, eg, `const { slice } = Array.prototype; slice::(receiver, ...args)` or `const slice = ::Array.prototype.slice; slice(receiver, ...args)` would work","format":"org.matrix.custom.html","formatted_body":"something that lets me, eg, <code>const { slice } = Array.prototype; slice::(receiver, ...args)</code> or <code>const slice = ::Array.prototype.slice; slice(receiver, ...args)</code> would work","msgtype":"m.text"},"ts":1641493716423,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wQhzwVFg7-8MeqyaFF0DwpbgLGnxJXMkF_eydri1IU4"},
{"content":{"body":"Yes, exactly.","msgtype":"m.text"},"ts":1641493728601,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$in6eyrFXBSDRFG-UApABCimIks1Vx5EcHw_K95iLUpo"},
{"content":{"body":"and yes i 100% agree that it works very well in concert with pipe","msgtype":"m.text"},"ts":1641493734806,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uufs_uAF0jiDTZlxaUxAViEZXhGdi7WqPo3eYiFBxKw"},
{"content":{"body":"the call form in particular","msgtype":"m.text"},"ts":1641493739937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xf7niVAeRl8ZEdV569ONK3uAuZC9i7tKX0KN5lGZKGY"},
{"content":{"body":"and both would also work well in concert with `getIntrinsic`","format":"org.matrix.custom.html","formatted_body":"and both would also work well in concert with <code>getIntrinsic</code>","msgtype":"m.text"},"ts":1641493756006,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6B136e4tx2Bj5s0DHj5QRCj25fIjt4X67zwRsd3NXqA"},
{"content":{"body":"All right, I've added a nota bene to my summary essay covering this: https://gist.github.com/tabatkins/60d831d3e304e3e7316d473f5c1f269b#nota-bene-reliable-method-calling","msgtype":"m.text"},"ts":1641495112694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BisGgIQIWEWGNr6MUZZ1NXeZ7Jm7ZaVmlsKxi-axvq4"},
{"content":{"body":"I agree that the call-operator version works better, for several reasons I outline here.","msgtype":"m.text"},"ts":1641495130045,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I_YP0Lr6gtJhR_9zttCWzwh_kjsDnllZe2R7ZM4SbtU"}
]