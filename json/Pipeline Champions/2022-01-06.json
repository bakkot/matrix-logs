[
{"content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"ts":1641493622385,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM"},
{"content":{"body":" * Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":" * Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","m.new_content":{"body":"Okay, just reminding myself: an \"uncurry-this\" operator (or unforgeable function) would satisfy ljharb's usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely _with_ pipe.","format":"org.matrix.custom.html","formatted_body":"Okay, just reminding myself: an &quot;uncurry-this&quot; operator (or unforgeable function) would satisfy <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>'s usecase, right? You'd be able to reliably yank methods off of classes and then later call them with specific objects, just as a normal function taking the object as its first arg. If we can limit it to that one usage, the overlap with pipe disappears, and it instead works nicely <em>with</em> pipe.","msgtype":"m.text"},"m.relates_to":{"event_id":"$5FBF6eD-NEvDeyP7U_z2J9FYorRzbW_aeF7tPGQI_eM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641493639122,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZUJNkPaIYECTsZeQetz_FMGo3npej6ueGqkJTYpD9Tc"},
{"content":{"body":"something that lets me, eg, `const { slice } = Array.prototype; slice::(receiver, ...args)` or `const slice = ::Array.prototype.slice; slice(receiver, ...args)` would work","format":"org.matrix.custom.html","formatted_body":"something that lets me, eg, <code>const { slice } = Array.prototype; slice::(receiver, ...args)</code> or <code>const slice = ::Array.prototype.slice; slice(receiver, ...args)</code> would work","msgtype":"m.text"},"ts":1641493716423,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wQhzwVFg7-8MeqyaFF0DwpbgLGnxJXMkF_eydri1IU4"},
{"content":{"body":"Yes, exactly.","msgtype":"m.text"},"ts":1641493728601,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$in6eyrFXBSDRFG-UApABCimIks1Vx5EcHw_K95iLUpo"},
{"content":{"body":"and yes i 100% agree that it works very well in concert with pipe","msgtype":"m.text"},"ts":1641493734806,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uufs_uAF0jiDTZlxaUxAViEZXhGdi7WqPo3eYiFBxKw"},
{"content":{"body":"the call form in particular","msgtype":"m.text"},"ts":1641493739937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xf7niVAeRl8ZEdV569ONK3uAuZC9i7tKX0KN5lGZKGY"},
{"content":{"body":"and both would also work well in concert with `getIntrinsic`","format":"org.matrix.custom.html","formatted_body":"and both would also work well in concert with <code>getIntrinsic</code>","msgtype":"m.text"},"ts":1641493756006,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6B136e4tx2Bj5s0DHj5QRCj25fIjt4X67zwRsd3NXqA"},
{"content":{"body":"All right, I've added a nota bene to my summary essay covering this: https://gist.github.com/tabatkins/60d831d3e304e3e7316d473f5c1f269b#nota-bene-reliable-method-calling","msgtype":"m.text"},"ts":1641495112694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BisGgIQIWEWGNr6MUZZ1NXeZ7Jm7ZaVmlsKxi-axvq4"},
{"content":{"body":"I agree that the call-operator version works better, for several reasons I outline here.","msgtype":"m.text"},"ts":1641495130045,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I_YP0Lr6gtJhR_9zttCWzwh_kjsDnllZe2R7ZM4SbtU"},
{"content":{"body":"If I may try summarizing: between `arrayLike |> slice::(##, 1)` and `arrayLike |> ##::slice(1)`, you prefer the former, Tab, right?","format":"org.matrix.custom.html","formatted_body":"If I may try summarizing: between <code>arrayLike |&gt; slice::(##, 1)</code> and <code>arrayLike |&gt; ##::slice(1)</code>, you prefer the former, Tab, right?","msgtype":"m.text"},"ts":1641495973674,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ"},
{"content":{"body":"(The former uses the newly proposed “call-on” operator while the latter uses the “bind-this” operator.)","msgtype":"m.text"},"ts":1641496122988,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4rr2xvNFGeAwhdDNhLX19ZoXvwUjhYPok2jiJ6R_TQ0"},
{"content":{"body":"yes, strongly prefer the former","msgtype":"m.text"},"ts":1641496521281,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wnOyuYnWa97XI4zROOC-n6HW5P5Gn4yTizRgwfsK9cA"},
{"content":{"body":"It solves the problem just as elegantly, but without the possibility of people writing libraries intentionally aimed at that calling style","msgtype":"m.text"},"ts":1641496561111,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$A8u2b6qyam6_Dn6kMHdbKNWPr6ieAjhjJxJDKF0fzhA"},
{"content":{"body":"I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ"}}},"ts":1641496572214,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$iW9yPvi5ehHYgngWE8F33S_iv92L5pIDHgxNs2811Ko"},
{"content":{"body":"right, exactly","msgtype":"m.text"},"ts":1641496583791,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$a6dz_ziaPwEsOGh2HH7_LbCj4fuXpODlEhiuJ0udoYw"},
{"content":{"body":"> <@jschoi:matrix.org> If I may try summarizing: between `arrayLike |> slice::(##, 1)` and `arrayLike |> ##::slice(1)`, you prefer the former, Tab, right?\n\n * I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$3xKEqkQEmQz91JQSyK13FrsPwUiUWFUYetOMJzkAXwQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>If I may try summarizing: between <code>arrayLike |&gt; slice::(##, 1)</code> and <code>arrayLike |&gt; ##::slice(1)</code>, you prefer the former, Tab, right?</blockquote></mx-reply> * I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","m.new_content":{"body":"I imagine `arrayLike |> ##::slice(1)` appearing on it's own (not as part of a longer pipe) would be uncommon as one could write `arrayLike::slice(1)`","format":"org.matrix.custom.html","formatted_body":"I imagine <code>arrayLike |&gt; ##::slice(1)</code> appearing on it's own (not as part of a longer pipe) would be uncommon as one could write <code>arrayLike::slice(1)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$iW9yPvi5ehHYgngWE8F33S_iv92L5pIDHgxNs2811Ko","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641496585262,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$rBJJA-9Cgw8AYcctcyEftliUKAdgrNQXv19lxMwrYfE"},
{"content":{"body":"Yes, I did `arrayLike |> ##::slice(1)` only to show parallelism, but it would actually be `arrayLike::slice(1)`.","format":"org.matrix.custom.html","formatted_body":"Yes, I did <code>arrayLike |&gt; ##::slice(1)</code> only to show parallelism, but it would actually be <code>arrayLike::slice(1)</code>.","msgtype":"m.text"},"ts":1641496638683,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kFYSIwxS2_UsYz9Q9x7XzBG-LVR7OS6KZv1aJwcJyNk"},
{"content":{"body":"also, I think it's better ad-hoc - `arrayLike::Array.prototype.slice(1)` requires us to be pretty careful with precedence to get right, but `Array.prototyype.slice::(arrayLike, 1)` is easy","format":"org.matrix.custom.html","formatted_body":"also, I think it's better ad-hoc - <code>arrayLike::Array.prototype.slice(1)</code> requires us to be pretty careful with precedence to get right, but <code>Array.prototyype.slice::(arrayLike, 1)</code> is easy","msgtype":"m.text"},"ts":1641496639068,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$hnchQx96L3jvRqURc191zh96wCXE2b50ORGrzJpt7N4"},
{"content":{"body":"i think it's pretty easy to explain, too, since it's literally just \"`.call()`, but an operator\"","format":"org.matrix.custom.html","formatted_body":"i think it's pretty easy to explain, too, since it's literally just &quot;<code>.call()</code>, but an operator&quot;","msgtype":"m.text"},"ts":1641496692588,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y"},
{"content":{"body":"I think this is understandable. I can try proposing a rival-rival call-on operator at the next meeting along with Function.pipe.","msgtype":"m.text"},"ts":1641496709633,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eQJHFnWvfBAFgwHFMkwxQ0QLSHEQMlU8mEmqa3GkUqM"},
{"content":{"body":"Let's get in on that together, and we can rope in Jordan too. ^_^","msgtype":"m.text"},"ts":1641496731730,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$_oWQa47BbkgJvprAyeCC-L_OB1865FdH3Bct8bCrTMg"},
{"content":{"body":"i'm thinking over how I might present your diagram for an overview/discussion","msgtype":"m.text"},"ts":1641496758382,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6PvFrCcARX6WsFzuo7aULVt2Oy2y72SOhpvUxuDKSHQ"},
{"content":{"body":"invites sent, lmk if anyone else wants in","msgtype":"m.text"},"ts":1641496962010,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$csWeX3JOCHp1WRO2qU_Vbe9ul8UaxqbU8x9_sOAkmgA"},
{"content":{"body":"> <@tabatkins:matrix.org> i think it's pretty easy to explain, too, since it's literally just \"`.call()`, but an operator\"\n\nthat seems like a potential weakness? Seems that makes the benefit mostly about protection against `Function.prototype.call` being patched? Which can be done with `Array.prototype.slice |> ReflectApply(##, arrayLike, 1)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>i think it's pretty easy to explain, too, since it's literally just \"<code>.call()</code>, but an operator\"</blockquote></mx-reply>that seems like a potential weakness? Seems that makes the benefit mostly about protection against <code>Function.prototype.call</code> being patched? Which can be done with <code>Array.prototype.slice |&gt; ReflectApply(##, arrayLike, 1)</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$nfG_ASubvXyMi013wpUP_YVkznB8Z-0yA62IFWtgF9Y"}},"msgtype":"m.text"},"ts":1641496975942,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jYRuodEHvaPxYmVlxjYVq4aGSnu7aUDNOqhHdZMMGfc"},
{"content":{"body":"Well it's \".call(), but more convenient\". ","msgtype":"m.text"},"ts":1641497011886,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$92Qe-jIEipB2VtRRnJYzoc24m6pY8Hc65OyOSUXKNfY"},
{"content":{"body":"I would argue the primary benefit is that `.call` is very common and we are shortening a very common function.","format":"org.matrix.custom.html","formatted_body":"I would argue the primary benefit is that <code>.call</code> is very common and we are shortening a very common function.","msgtype":"m.text"},"ts":1641497018601,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4RhYV3h9UWbQYnqv02Hq_cBLFCORDsi8Qr2bKfiXa3c"},
{"content":{"body":"(I’d also be particularly interested to know how much Richard Gibson feels call-on would overlap with other dataflow proposals.)","format":"org.matrix.custom.html","formatted_body":"(I’d also be particularly interested to know how much <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> feels call-on would overlap with other dataflow proposals.)","msgtype":"m.text"},"ts":1641497065895,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HjI6NNuHpnFrSadUvTBRYgVJbbsI3m8L8BdUdf4ihAQ"},
{"content":{"body":"`call` is already quite short and doesn't involve holding shift to type?","format":"org.matrix.custom.html","formatted_body":"<code>call</code> is already quite short and doesn't involve holding shift to type?","msgtype":"m.text"},"ts":1641497133444,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$d2_qVyd9-ce2OdLq_DPHw15UzD0HFvHWDQiyPv_TNys"},
{"content":{"body":"I guess I do need to work out how things would change with having to use pipe with call-on to get the word-order benefit…","msgtype":"m.text"},"ts":1641497184468,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RZ6DiXFi2lR-bYzlHiinqpj7oOC1Myt5Y297ErqeQ1g"},
{"content":{"body":"not if you're worried about patching, which is a big part of this in the first place","msgtype":"m.text"},"ts":1641497197719,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Z3kau733QUSPlnves5rHFG0KlBDd1F6rKpq5l7C8b2E"},
{"content":{"body":"`meth |> ReflectApply(##, obj, args)` is a lot longer ^_^","format":"org.matrix.custom.html","formatted_body":"<code>meth |&gt; ReflectApply(##, obj, args)</code> is a lot longer ^_^","msgtype":"m.text"},"ts":1641497222193,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SJkxFggVs2nfQMGDA8Oh0T1akokfFZwtNCJ1CGHb34A"},
{"content":{"body":"And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","msgtype":"m.text"},"ts":1641497242061,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY"},
{"content":{"body":"* And also obscures the meaning of the code (which very commonly occurs).","m.new_content":{"body":"And also obscures the meaning of the code (which very commonly occurs).","msgtype":"m.text"},"m.relates_to":{"event_id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497267184,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_2_YYisZHc_ouCsCyNct1WjhGc_7VtrKJvR7YR1DTXA"},
{"content":{"body":"* And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","m.new_content":{"body":"And also obscures the meaning of the code (important, since this use case actually very commonly occurs).","msgtype":"m.text"},"m.relates_to":{"event_id":"$l5sUW3kv0fse0K6EFiFU-R83qEI8TjEv04wRUDnNrqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497288170,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gEobjjD5jBhc78dXkdRGikXTyKi3ttM5T_eQ--8ooVk"},
{"content":{"body":"It would probably be `obj |> ReflectApply(meth, ##, args)`, though.","format":"org.matrix.custom.html","formatted_body":"It would probably be <code>obj |&gt; ReflectApply(meth, ##, args)</code>, though.","msgtype":"m.text"},"ts":1641497338934,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4Sox-FR2FuxIS_gtTyIsmdIEgWs6Larw7sk4KvPBTnU"},
{"content":{"body":"Versus `obj |> meth::(##, args)`.","format":"org.matrix.custom.html","formatted_body":"Versus <code>obj |&gt; meth::(##, args)</code>.","msgtype":"m.text"},"ts":1641497364399,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KkWbw8PKclBnR8--wFM-_HMtCZ54dPKzfPxE19YFEdk"},
{"content":{"body":"ah yeah, sure","msgtype":"m.text"},"ts":1641497374876,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CDm_IbOM7cULLhgUeKGAMPJgA3TcaSRzxcO5aLcksVg"},
{"content":{"body":"I will admit tho, that a major motivation for this particular shape is to solve this use-case *without* overlapping over dataflow proposals. Between Pipe and PFA, the other bind-this operations can be done reasonably well already; this covers the last significant unhandled use-case (afaict) without stomping on either of those.","format":"org.matrix.custom.html","formatted_body":"I will admit tho, that a major motivation for this particular shape is to solve this use-case <em>without</em> overlapping over dataflow proposals. Between Pipe and PFA, the other bind-this operations can be done reasonably well already; this covers the last significant unhandled use-case (afaict) without stomping on either of those.","msgtype":"m.text"},"ts":1641497487074,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VMayqNYCQjyrK14arhnGrK5CE_DtOkIkkDVYZ4Gkim8"},
{"content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too.","msgtype":"m.text"},"ts":1641497690317,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497728327,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$oMJELbdSNtXbI_vbmhNe-aOsHxSg5hdU0_fIQcvVwJc"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can solve word order and brevity by combining with pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497734797,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lV5ahgptjFmb45j6UuLXa8qSUWZr41qTeMBF52wUUns"},
{"content":{"body":"And when .bind is just used to hard-bind a method to the object it's already sitting on, PFA covers that well on its own. The remaining \"hard-bind a method to an unrelated object\" is, afaict, a lot less common.","msgtype":"m.text"},"ts":1641497781060,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$FsDDDjerwloDbWuIGC4sVzoMo49ydKLPMXwE7ULfcFM"},
{"content":{"body":"* My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can optimize .call’s word order and brevity by combining with the pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","m.new_content":{"body":"My argument for bind-this had been that .call’s frequency (as well as, to a lesser extent, .bind’s) is sufficiently high to justify optimizing its word order and brevity with syntax, even in spite of its overlap with the pipe operator, similarly to how Function.pipe is useful in spite of the pipe operator. But if we can optimize .call’s word order and brevity by combining with the pipe instead of overlapping with it, so much the better. The syntax of call-on is simpler, too. And, although call-on does not improve using .bind, .bind’s frequency is not nearly as high as .call’s, so it is less important.","msgtype":"m.text"},"m.relates_to":{"event_id":"$iYmpbI1uVC_gHpanmrNIDBnpbc7FxTr_JxGNJ7kp0j4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497782930,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gYtR15aDDv4K0eglakNpmcDhTANDvHclxtEbI6xJIfE"},
{"content":{"body":"Another potential solution to avoiding `Function.prototype.call` tampering. Is a build step.\nA tool that looks for `someMethod.$call(obj, ...args)` and transforms it to `reflectApply(someMethod, obj, args)`.\nIt could install `Function.prototype.$call` during development to avoid needing to transform during fast dev builds. And only transform for production.","format":"org.matrix.custom.html","formatted_body":"Another potential solution to avoiding <code>Function.prototype.call</code> tampering. Is a build step.<br>A tool that looks for <code>someMethod.$call(obj, ...args)</code> and transforms it to <code>reflectApply(someMethod, obj, args)</code>.<br>It could install <code>Function.prototype.$call</code> during development to avoid needing to transform during fast dev builds. And only transform for production.","msgtype":"m.text"},"ts":1641497794234,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ICuThamtuvEjJi3CjFwIqt2n3z32R5eAKKJdq-JZJSw"},
{"content":{"body":"TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","msgtype":"m.text"},"ts":1641497804288,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hc5lXi7SBfhuxSVqjBCwh8nFZMCJQcRwnQuaf6dAC9M"},
{"content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","msgtype":"m.text"},"ts":1641497820550,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU"},
{"content":{"body":" * TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","m.new_content":{"body":"TabAtkins:  i definitely would prefer something that's ordered like receiver, function, arguments tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>:  i definitely would prefer something that's ordered like receiver, function, arguments tho","msgtype":"m.text"},"m.relates_to":{"event_id":"$hc5lXi7SBfhuxSVqjBCwh8nFZMCJQcRwnQuaf6dAC9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497827681,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qKDj3pFmhAOD9vpBbF4giqVvAqw5uVRcFOYxgB1Em1o"},
{"content":{"body":" * build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author","m.new_content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497837161,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3kcWxanA8qt15XK-maAcwPus5Hhxm389j6_c1ZtQ4v0"},
{"content":{"body":" * build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","m.new_content":{"body":"build steps don't solve the problem for packages, and it's very dangerous to transpile code you didn't author, so i wouldn't want us to recommend that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$yrqO7aRAjWvDiZZ6tqu1Vh4hlCqOo8a3XuHn8fUVeHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497842056,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wGD4ml3WbMjsiCOf165RblCsF3WOhjekdabrGehcPfY"},
{"content":{"body":"The receiver–function–arguments word order is solved (albeit slightly more verbosely) with pipe operator + call-on.","msgtype":"m.text"},"ts":1641497846437,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nuzqHIhWjC32mefVrEXIDMTl6FfPclKpwUE97qe3-LY"},
{"content":{"body":"I understand why that order is appealing, but note that using that order makes it easy to publish modules that are *intended* to be called with this syntax, promoting ecosystem forking that we don't want.","format":"org.matrix.custom.html","formatted_body":"I understand why that order is appealing, but note that using that order makes it easy to publish modules that are <em>intended</em> to be called with this syntax, promoting ecosystem forking that we don't want.","msgtype":"m.text"},"ts":1641497874142,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$M5CcvKGSEm9pjj2UHqbIIaavzl-yFP1xYEy3z7VRGwg"},
{"content":{"body":"how? `fn |> ^::(receiver, ...args)` has the same ordering issue as `fn::(receiver, ...args)`","format":"org.matrix.custom.html","formatted_body":"how? <code>fn |&gt; ^::(receiver, ...args)</code> has the same ordering issue as <code>fn::(receiver, ...args)</code>","msgtype":"m.text"},"ts":1641497881747,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_L4BBdwioorfzXzE0Sx9fXdLa97RvTw52gReldiNWL4"},
{"content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","msgtype":"m.text"},"ts":1641497886937,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0"},
{"content":{"body":"Thus the overlap with pipe that makes some committee members uncomfortable, yeah","msgtype":"m.text"},"ts":1641497890334,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MnDJKv63Q_0XupVs9tWJpY9sUrf7TdyVUo0b8Z7qUiM"},
{"content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","msgtype":"m.text"},"ts":1641497900073,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497904624,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yIeFwMsRw15XroOfi6yf3HmzUxRWd9sGAeoMW5PrUvE"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be equired.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497914875,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-SE2ZcZ6BNoUzywuAdhb9-jfQxt1-FIVQoqaAwBSJa8"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention is or should be required.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497916210,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TfW2Nun8XKOsHXsGwxuL1ATAvl5srJt0JLjguKtSgI0"},
{"content":{"body":"* `receiver |> fn::(#, ...args)`.","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code>.","m.new_content":{"body":"`receiver |> fn::(#, ...args)`.","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497918380,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5l_aIfTK9dlC3fvbR39fG-65ACHmm7bfTuIKPuHXszA"},
{"content":{"body":" * any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":" * any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","m.new_content":{"body":"any function that looks at `this` is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","format":"org.matrix.custom.html","formatted_body":"any function that looks at <code>this</code> is intended to be called with this syntax - which includes most builtin methods. no explicit intention beyond that is or should be required.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gg2L0K0u95_SNKGoMWjS0Ziih3iatTnI_RyFST6EXLo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497919334,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gtv4aHO9NU2Ss196HdtglaF1dn1Vteg3fDrts4619oQ"},
{"content":{"body":"Right, publishing a module where *free-floating functions* are authored to use `this` is, imo, bad.","format":"org.matrix.custom.html","formatted_body":"Right, publishing a module where <em>free-floating functions</em> are authored to use <code>this</code> is, imo, bad.","msgtype":"m.text"},"ts":1641497923843,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qteBLMAUBzz7K1SZOe00QYJiiE6TO03mC38eny6mGRY"},
{"content":{"body":"i'm not sure what you mean, that's already a thing people can (and sometimes do) do","msgtype":"m.text"},"ts":1641497958030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dhNDc81M1v3jOHVPGMzu_u_cNDNnUq2PUa6R3a5CzYQ"},
{"content":{"body":"* `receiver |> fn::(#, ...args)` has the desired word order.","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code> has the desired word order.","m.new_content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order.","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497958500,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8NUNdEDqK9Eck4EAzb_hezZ9P0CToSIKe3Dx0CJo018"},
{"content":{"body":"Who does that today? You'd have to use `.call()` to invoke the functions.","format":"org.matrix.custom.html","formatted_body":"Who does that today? You'd have to use <code>.call()</code> to invoke the functions.","msgtype":"m.text"},"ts":1641497977933,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DwXcBFmNF1qO2295nJa79UbpuZHkdSSrCRybKxtz51Q"},
{"content":{"body":"it's not our place to discourage `export default function (...args) { this }`, that's a normal part of the language","format":"org.matrix.custom.html","formatted_body":"it's not our place to discourage <code>export default function (...args) { this }</code>, that's a normal part of the language","msgtype":"m.text"},"ts":1641497980676,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X0MLE7I0qkq0P2XrxmWDv-50VdN_0KCqjxQyCHMx8Vc"},
{"content":{"body":"yes, that's right, you would","msgtype":"m.text"},"ts":1641497983894,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VGY3joueHT1bAx1qJ7eaZX2swyssfDfvYiW_KkRw8-s"},
{"content":{"body":"* `receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"* <code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","m.new_content":{"body":"`receiver |> fn::(#, ...args)` has the desired word order. @ljharb ","format":"org.matrix.custom.html","formatted_body":"<code>receiver |&gt; fn::(#, ...args)</code> has the desired word order. @ljharb","msgtype":"m.text"},"m.relates_to":{"event_id":"$bk6UnxEqtcK9Ldo6M4xihau-_JoSGis6aqikiy3_RV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641497990087,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$At51W6s6ewS3vTbRnWqARuVtkGN3-KoVPpJnMLhyZnc"},
{"content":{"body":"and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":"and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","msgtype":"m.text"},"ts":1641497999438,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pOipldNn_NDNTPsLLfZNzvRzdvPQR8uCrQiLu15C0QU"},
{"content":{"body":" * and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":" * and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","m.new_content":{"body":"and \"use `.call()`\" is the thing that needs to be made easier/more robust","format":"org.matrix.custom.html","formatted_body":"and &quot;use <code>.call()</code>&quot; is the thing that needs to be made easier/more robust","msgtype":"m.text"},"m.relates_to":{"event_id":"$pOipldNn_NDNTPsLLfZNzvRzdvPQR8uCrQiLu15C0QU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498002326,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Jz4wh4_afM57H8q3tEeXEQU_Wg19bGHhDn_wwhzaE5s"},
{"content":{"body":"Okay, well that's werid and people can be weird if they want. But that's not something normal libraries do.","msgtype":"m.text"},"ts":1641498002403,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yxzFmF37YlOTM2xOO9y4lA6aIkhkFFYp1PdEwcRq3BA"},
{"content":{"body":"Publishing functions with that signature (a) overlaps with the pipe use-case, and (b) forces an up-front calling-convention decision that is distinct from how every other function in the language is called.","msgtype":"m.text"},"ts":1641498050877,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZoWKXIy2hH4o6QaNjuWD7HezDG7i5wNg6bFv2I_1ex4"},
{"content":{"body":" * Publishing functions with that signature (a) overlaps with the pipe use-case, and (b) forces an up-front calling-convention decision that is distinct from how every other function in the language is called.","m.new_content":{"body":"Publishing functions with that signature (a) overlaps with the pipe use-case, and (b) forces an up-front calling-convention decision that is distinct from how every other function in the language is called.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZoWKXIy2hH4o6QaNjuWD7HezDG7i5wNg6bFv2I_1ex4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498062356,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$L5f6cas0lF0CCUDkFwkB3FVF5Bl9NTpeEYKgY_dx_0U"},
{"content":{"body":"`topic.fn(arg)`, `topic |> fn(#, arg)`, `topic |> fn::(#, arg)`.","format":"org.matrix.custom.html","formatted_body":"<code>topic.fn(arg)</code>, <code>topic |&gt; fn(#, arg)</code>, <code>topic |&gt; fn::(#, arg)</code>.","msgtype":"m.text"},"ts":1641498069519,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XlfHFgDcrXH_k-Q7KfW1Ua96IHe6VUgP4KBR7UEMbj8"},
{"content":{"body":"All the same word order.","msgtype":"m.text"},"ts":1641498084091,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$czuTa5WT4XlvJn5qxfQC96M89b_JGLAhpIhI6I_c0iE"},
{"content":{"body":"it only forces it if the receiver is required. it's perfectly fine if there's fallback behavior for when `this` is nullish","format":"org.matrix.custom.html","formatted_body":"it only forces it if the receiver is required. it's perfectly fine if there's fallback behavior for when <code>this</code> is nullish","msgtype":"m.text"},"ts":1641498113364,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VW0OPkhAIFPahL1V6s9k35JKeqDlaGuSTgs7R-T4FYg"},
{"content":{"body":"jschoi: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","msgtype":"m.text"},"ts":1641498135566,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yjlhfMsQv0vCybZzxpGkFRSeNpF1IAEGFwypBQ8IFOc"},
{"content":{"body":" * jschoi: no, in the last two, the function comes first before the topic","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, in the last two, the function comes first before the topic","m.new_content":{"body":"jschoi: no, in the last two, the function comes first before the topic","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, in the last two, the function comes first before the topic","msgtype":"m.text"},"m.relates_to":{"event_id":"$yjlhfMsQv0vCybZzxpGkFRSeNpF1IAEGFwypBQ8IFOc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498146980,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Zi3qHkYrAUZ0gWnaykRN1AN5aq_tb1YEUoNt92-TfI8"},
{"content":{"body":"Not as authored, no - that's the point.","msgtype":"m.text"},"ts":1641498158986,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$omovpxv668Eejh4j9ZMUoLVelEmc5PqCy8c8Fz7Xzxs"},
{"content":{"body":" * jschoi: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","m.new_content":{"body":"jschoi: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: no, in the last two, the function comes first before the topic (because only the word order in that one pipe segment is what i think matters)","msgtype":"m.text"},"m.relates_to":{"event_id":"$yjlhfMsQv0vCybZzxpGkFRSeNpF1IAEGFwypBQ8IFOc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498161572,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$we0exvdwRhhB8vLCHv4XAmClLrc01vJic1QTZ0KnUOc"},
{"content":{"body":"I’m talking about for each entire expression.","msgtype":"m.text"},"ts":1641498165033,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$O7sKND9MzuDX62_0Z966Dha29FeuAX6qOvsrXIIumAc"},
{"content":{"body":"The code is literally in the same order in all three.","msgtype":"m.text"},"ts":1641498169191,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$x8CLz7IpCy50ft0InRNJlfUryvUhcoq-oEuhaGLOtEg"},
{"content":{"body":"the function call only occurs in the one segment","msgtype":"m.text"},"ts":1641498179753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VhAXU4_bJltP7SGf1cPFkK90NiFSExemDX2xb1Pcqr4"},
{"content":{"body":"a pipeline is not one atomic thing, it's an aggregation of segments","msgtype":"m.text"},"ts":1641498191757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fooo-nXGyzrs8MnIOgEI6Adrurs_zK7oXosm37AZ0mI"},
{"content":{"body":"Yes?","msgtype":"m.text"},"ts":1641498201175,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GXQaO3q4ma_DRYGRaMYOPTf6Z-OI9sUfAtW2fbAEcMA"},
{"content":{"body":"Well, it can be viewed either way, right?","msgtype":"m.text"},"ts":1641498205207,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Dog--FRJmEGPe2cT3xUSwSlD_BNNhlfgLW7L4mp0ckA"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1641498209242,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rbO7AEiGFIkeQVCsPpWdDbPT2rMuDjfxVDgKpriRtv4"},
{"content":{"body":"Pipes can be viewed as a rearrangement of word order.","msgtype":"m.text"},"ts":1641498217061,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DkcwgWpnejjFPYqKxhuSeKzTt_p30F1OGOsYC9_VfLg"},
{"content":{"body":"but since it can be viewed segment-by-segment, the word order is wrong when viewed that way","msgtype":"m.text"},"ts":1641498220583,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FqulX0rJTr1ouNwIYr1O5aEEO8yv0jRTwMKSXbGTPHk"},
{"content":{"body":"i'm specifically talking about the ordering of a single function call","msgtype":"m.text"},"ts":1641498235608,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$S92q5GlraIUcidiNU8n1Kl6-Eu4BsaYBbi1cZNu5Q5U"},
{"content":{"body":"`obj.method(...args)` is the order everyone expects","format":"org.matrix.custom.html","formatted_body":"<code>obj.method(...args)</code> is the order everyone expects","msgtype":"m.text"},"ts":1641498246568,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E2Cdf31KyfrEsaGFCcQc3mvC4BLSgQ9UsIBAv6GmDCg"},
{"content":{"body":"`fn.call(obj, ...args)` is awkward primarily because the order is weird (the robustness angle is separate)","format":"org.matrix.custom.html","formatted_body":"<code>fn.call(obj, ...args)</code> is awkward primarily because the order is weird (the robustness angle is separate)","msgtype":"m.text"},"ts":1641498258603,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QmS7ff05acNrCYxAvPeM3_Qx1xy0EOdVGwjZoZkhARg"},
{"content":{"body":" * `fn.call(obj, ...args)` is awkward primarily because the order is weird (the robustness angle is separate)","format":"org.matrix.custom.html","formatted_body":" * <code>fn.call(obj, ...args)</code> is awkward primarily because the order is weird (the robustness angle is separate)","m.new_content":{"body":"`fn.call(obj, ...args)` is awkward primarily because the order is weird (the robustness angle is separate)","format":"org.matrix.custom.html","formatted_body":"<code>fn.call(obj, ...args)</code> is awkward primarily because the order is weird (the robustness angle is separate)","msgtype":"m.text"},"m.relates_to":{"event_id":"$QmS7ff05acNrCYxAvPeM3_Qx1xy0EOdVGwjZoZkhARg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498265976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mF8yr9-xW514mVJ8fM1f891lI4MDlrCrHIBWSGSXi3M"},
{"content":{"body":"which is why `obj::fn(...args)` is nice","format":"org.matrix.custom.html","formatted_body":"which is why <code>obj::fn(...args)</code> is nice","msgtype":"m.text"},"ts":1641498290062,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fMYEWE7ZAOY1nAA-eFc9csNEOKhq-HYz1Bh0W2qgusw"},
{"content":{"body":"because it restores intuitive OOP ordering for a non-OOP usage","msgtype":"m.text"},"ts":1641498305182,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tU7W2yA0wdpJX1bADwhfEdnfJWBD-a6v9XkqZ5t8vzg"},
{"content":{"body":"Well, with functional programming, people do do `fn(primaryThingOfInterest)` too, but `primaryThingOfInterest |> fn(#)` is an improvement in word order, too.","format":"org.matrix.custom.html","formatted_body":"Well, with functional programming, people do do <code>fn(primaryThingOfInterest)</code> too, but <code>primaryThingOfInterest |&gt; fn(#)</code> is an improvement in word order, too.","msgtype":"m.text"},"ts":1641498376313,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EYZ8mrbsUTtS-L1TILMEKjbHjgurLhGYQ8nOK5x7o5c"},
{"content":{"body":"We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But `|>` also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that `@@` operator or whatever to improve the word order for non-this-using calls too.","format":"org.matrix.custom.html","formatted_body":"We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that <code>@@</code> operator or whatever to improve the word order for non-this-using calls too.","msgtype":"m.text"},"ts":1641498428125,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wyP3Q1wAn4FPfeZCQUexCPCdp9baQbe-W87Lgu67OFQ"},
{"content":{"body":"* We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. But `|>` also takes care of it…if you view a pipe as a single atomic thing.","format":"org.matrix.custom.html","formatted_body":"* We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing.","m.new_content":{"body":"We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. But `|>` also takes care of it…if you view a pipe as a single atomic thing.","format":"org.matrix.custom.html","formatted_body":"We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing.","msgtype":"m.text"},"m.relates_to":{"event_id":"$wyP3Q1wAn4FPfeZCQUexCPCdp9baQbe-W87Lgu67OFQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498446821,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7IyFMh4EJEW-0zUEQ7y2rP2wFA1GpmyJnljMoZWshx4"},
{"content":{"body":"* We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But `|>` also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that `@@` operator or whatever for non-this-using calls too.","format":"org.matrix.custom.html","formatted_body":"* We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that <code>@@</code> operator or whatever for non-this-using calls too.","m.new_content":{"body":"We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But `|>` also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that `@@` operator or whatever for non-this-using calls too.","format":"org.matrix.custom.html","formatted_body":"We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that <code>@@</code> operator or whatever for non-this-using calls too.","msgtype":"m.text"},"m.relates_to":{"event_id":"$wyP3Q1wAn4FPfeZCQUexCPCdp9baQbe-W87Lgu67OFQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498475791,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$c-Lr4r_lx_32N0x5DhbKIi02LTiDSLKP_KaAKeQ1BKY"},
{"content":{"body":"* We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But `|>` also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that `@@` operator or whatever to improve the word order for non-this-using calls too.","format":"org.matrix.custom.html","formatted_body":"* We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that <code>@@</code> operator or whatever to improve the word order for non-this-using calls too.","m.new_content":{"body":"We could do something like `primaryThingOfInterest@@fn()` to mean `fn(primaryThingOfInterest)`, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But `|>` also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that `@@` operator or whatever to improve the word order for non-this-using calls too.","format":"org.matrix.custom.html","formatted_body":"We could do something like <code>primaryThingOfInterest@@fn()</code> to mean <code>fn(primaryThingOfInterest)</code>, which in fact is something that Hax’s extensions can do. The word order is improved in that case also. But <code>|&gt;</code> also takes care of it…if you view a pipe as a single atomic thing. If you don’t, then, well, you need that <code>@@</code> operator or whatever to improve the word order for non-this-using calls too.","msgtype":"m.text"},"m.relates_to":{"event_id":"$wyP3Q1wAn4FPfeZCQUexCPCdp9baQbe-W87Lgu67OFQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498489744,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$J-JEQ2f8hI1JjGOVVLDv-UTZQm_VU_dD7bypuzyoU3M"},
{"content":{"body":"to be clear, either way, a syntactic `.call` does what i want. i just think it's a lost opportunity if we force the ordering to match `.call`","format":"org.matrix.custom.html","formatted_body":"to be clear, either way, a syntactic <code>.call</code> does what i want. i just think it's a lost opportunity if we force the ordering to match <code>.call</code>","msgtype":"m.text"},"ts":1641498491539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rkdp2IJ6BD4w5LL8pExUhedevLpzeh_XcHMHQJUkRnY"},
{"content":{"body":" * to be clear, either way, a syntactic `.call` does what i want. i just think it's a lost opportunity if we force the ordering to match `.call`","format":"org.matrix.custom.html","formatted_body":" * to be clear, either way, a syntactic <code>.call</code> does what i want. i just think it's a lost opportunity if we force the ordering to match <code>.call</code>","m.new_content":{"body":"to be clear, either way, a syntactic `.call` does what i want. i just think it's a lost opportunity if we force the ordering to match `.call`","format":"org.matrix.custom.html","formatted_body":"to be clear, either way, a syntactic <code>.call</code> does what i want. i just think it's a lost opportunity if we force the ordering to match <code>.call</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$rkdp2IJ6BD4w5LL8pExUhedevLpzeh_XcHMHQJUkRnY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498500864,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tbtT4Sy4KoQrwWz75X46A7rcbagf-W9GnQBU48hZAms"},
{"content":{"body":"I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like `receiver|>fn::(#)` as an atomic thing.","format":"org.matrix.custom.html","formatted_body":"I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like <code>receiver|&gt;fn::(#)</code> as an atomic thing.","msgtype":"m.text"},"ts":1641498560697,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$S1OOdsEdYOumfEsczoLCFIwbwT-kfxiEU22yzbmDFgw"},
{"content":{"body":"* I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like `receiver|>fn::(#)` as an atomic thing.","format":"org.matrix.custom.html","formatted_body":"* I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like <code>receiver|&gt;fn::(#)</code> as an atomic thing.","m.new_content":{"body":"I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like `receiver|>fn::(#)` as an atomic thing.","format":"org.matrix.custom.html","formatted_body":"I’m personally fine either way, whether bind-this or call-on. I do think that pipe would allow improving the word order with a call-on operator, but I understand that it might be tough to view a pipe like <code>receiver|&gt;fn::(#)</code> as an atomic thing.","msgtype":"m.text"},"m.relates_to":{"event_id":"$S1OOdsEdYOumfEsczoLCFIwbwT-kfxiEU22yzbmDFgw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498586912,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OjdLuJ7mytjBz7ttlsyol68pXr6rAfilLToWwLHONqQ"},
{"content":{"body":"it's fine if using pipe offers an improvement, but a proposal for .call needs to be an improvement on its own merits","msgtype":"m.text"},"ts":1641498649263,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C-udryrSbD6OampqgMPn1ER8f_eQ1WAOtEfkeP_3g_I"},
{"content":{"body":"and a proposal that just allows `f<?>(o, ...a)` vs `f.call(o, ...a)` isn't likely to be considered worth it by the wider committee","format":"org.matrix.custom.html","formatted_body":"and a proposal that just allows <code>f&lt;?&gt;(o, ...a)</code> vs <code>f.call(o, ...a)</code> isn't likely to be considered worth it by the wider committee","msgtype":"m.text"},"ts":1641498677082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qDy65jk4uQ1Op8Nx_RnKFKkR9Em75RRfQ3IA9X2zg2U"},
{"content":{"body":" * and a proposal that just allows `f<?>(o, ...a)` vs `f.call(o, ...a)` isn't likely to be considered worth it by the wider committee","format":"org.matrix.custom.html","formatted_body":" * and a proposal that just allows <code>f&lt;?&gt;(o, ...a)</code> vs <code>f.call(o, ...a)</code> isn't likely to be considered worth it by the wider committee","m.new_content":{"body":"and a proposal that just allows `f<?>(o, ...a)` vs `f.call(o, ...a)` isn't likely to be considered worth it by the wider committee","format":"org.matrix.custom.html","formatted_body":"and a proposal that just allows <code>f&lt;?&gt;(o, ...a)</code> vs <code>f.call(o, ...a)</code> isn't likely to be considered worth it by the wider committee","msgtype":"m.text"},"m.relates_to":{"event_id":"$qDy65jk4uQ1Op8Nx_RnKFKkR9Em75RRfQ3IA9X2zg2U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498689370,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HSg0OjHy1-LOW9Zfb2mmG0ROkE7SQdkOjKcMAVaAelc"},
{"content":{"body":"That brings up an interesting question, actually.","msgtype":"m.text"},"ts":1641498710734,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$C4NtVE_hz6fmHLwSPnhSkQ8A9fMthnPfEmpvPWAKjZQ"},
{"content":{"body":"We want proposals to stand on their own, on their own merits.","msgtype":"m.text"},"ts":1641498719670,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qBjprKkeUYYUFwDMBfXRxpRqNp6mL-wuro7c_xT_xHs"},
{"content":{"body":"But in this particular case we have had several representatives, like Richard Gibson and Yulia, express concerns about redundancy and overlap between these dataflow proposals. That’s why I created that diagram.","msgtype":"m.text"},"ts":1641498746525,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$quBAPccGCPzQEBmllNdUiv7ZGVdg3K-Yc3u_bm5U3DA"},
{"content":{"body":"These two desires are somewhat in conflict…","msgtype":"m.text"},"ts":1641498755266,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0wOCAjrFfapzVlTCjxnzNY6jFd_4fOI8YfjDOh1t-ow"},
{"content":{"body":"proposals can stand alone while also interoperating","msgtype":"m.text"},"ts":1641498756968,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y49GJ3Lc2yFIfr0udlkqu_aCjBWba90ERpQ-pnqMPCc"},
{"content":{"body":"it's a *good* thing if proposals that hold their own weight, are better when used in concert","format":"org.matrix.custom.html","formatted_body":"it's a <em>good</em> thing if proposals that hold their own weight, are better when used in concert","msgtype":"m.text"},"ts":1641498773433,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rjUHmcbr6w33hwhKbYOBJw7PzVARaFGS3BvKnoUXLkY"},
{"content":{"body":"and any syntactic call will benefit from being used in concert with pipeline. i just doubt a syntactic call will hold its own weight if it persist's `.call`'s broken ordering","format":"org.matrix.custom.html","formatted_body":"and any syntactic call will benefit from being used in concert with pipeline. i just doubt a syntactic call will hold its own weight if it persist's <code>.call</code>'s broken ordering","msgtype":"m.text"},"ts":1641498807879,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$14hRqk4TdhFegoV11nFHsCNZfz73jX2b-odFEMvE91Q"},
{"content":{"body":"Yeah. `.call` is *really common*, but improving really-common-frequency × brevity+robustness alone might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order.","format":"org.matrix.custom.html","formatted_body":"Yeah. <code>.call</code> is <em>really common</em>, but improving really-common-frequency × brevity+robustness alone might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order.","msgtype":"m.text"},"ts":1641498880316,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qCBOZHQKpnQISdNQ9ht3RRVizTPaE1phHvlhdhpvHOM"},
{"content":{"body":"Yeah, the issue here is that it's not just interoperating (that's what we want) but *duplication* of significant functionality","format":"org.matrix.custom.html","formatted_body":"Yeah, the issue here is that it's not just interoperating (that's what we want) but <em>duplication</em> of significant functionality","msgtype":"m.text"},"ts":1641498901654,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$UEXmDo1jk2LnMPDCHWiv7YwOWpvQDVV7ZBsMnRbhfyI"},
{"content":{"body":"* Yeah. `.call` is *really common*, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order (bind-this).","format":"org.matrix.custom.html","formatted_body":"* Yeah. <code>.call</code> is <em>really common</em>, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order (bind-this).","m.new_content":{"body":"Yeah. `.call` is *really common*, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order (bind-this).","format":"org.matrix.custom.html","formatted_body":"Yeah. <code>.call</code> is <em>really common</em>, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to really-common-frequency × brevity+robustness+word-order (bind-this).","msgtype":"m.text"},"m.relates_to":{"event_id":"$qCBOZHQKpnQISdNQ9ht3RRVizTPaE1phHvlhdhpvHOM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641498904916,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$u6KuSO40yw1_TQF5NeEQNEQJ4zQ3W6nDXdEDEz1LV8E"},
{"content":{"body":"I think this is a larger question that the plenary might need to discuss on its own: considering proposals on their own merits versus avoiding duplication of functionality between proposals. Which is the bigger goal?","msgtype":"m.text"},"ts":1641498975923,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tmmSfyxJ3yKi82AAZ7QDBfHE9qMP8QxU1hHV3d9iUUc"},
{"content":{"body":"That fundamental question may deserve its own plenary time when we present the diagram of dataflow proposals.","msgtype":"m.text"},"ts":1641499006968,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9uLaOO-WMaa-sK5LK03c9R2T5EyI4kxzMbiRLPTZuDU"},
{"content":{"body":"* That fundamental question may deserve its own plenary time when we present the diagram of dataflow proposals.","m.new_content":{"body":"That fundamental question may deserve its own plenary time when we present the diagram of dataflow proposals.","msgtype":"m.text"},"m.relates_to":{"event_id":"$9uLaOO-WMaa-sK5LK03c9R2T5EyI4kxzMbiRLPTZuDU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499015755,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s4hh-QvkAKLOJTZief0XaYZPufwWl5JgjMW-xN1n_qU"},
{"content":{"body":"After all, this situation is going to happen again in the future someday.","msgtype":"m.text"},"ts":1641499034483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DzaPrCfJqRC0LcS1mt6g58OouwvMxWt4ms6VoESl4XU"},
{"content":{"body":"* After all, this situation is going to happen again in the future someday.","m.new_content":{"body":"After all, this situation is going to happen again in the future someday.","msgtype":"m.text"},"m.relates_to":{"event_id":"$DzaPrCfJqRC0LcS1mt6g58OouwvMxWt4ms6VoESl4XU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499045132,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hwES7DHaynGci128Im6dekPEyJ8qPThaj-mh1HFZThU"},
{"content":{"body":"* Yeah. `.call` is *really common*, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to improving really-common-frequency × brevity+robustness+word-order (bind-this).","format":"org.matrix.custom.html","formatted_body":"* Yeah. <code>.call</code> is <em>really common</em>, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to improving really-common-frequency × brevity+robustness+word-order (bind-this).","m.new_content":{"body":"Yeah. `.call` is *really common*, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to improving really-common-frequency × brevity+robustness+word-order (bind-this).","format":"org.matrix.custom.html","formatted_body":"Yeah. <code>.call</code> is <em>really common</em>, but improving really-common-frequency × brevity+robustness alone (call-on without pipe) might not be compelling enough, compared to improving really-common-frequency × brevity+robustness+word-order (bind-this).","msgtype":"m.text"},"m.relates_to":{"event_id":"$qCBOZHQKpnQISdNQ9ht3RRVizTPaE1phHvlhdhpvHOM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499101329,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-hrcEvZj5Jnn5kkidoTWNKUvqVz7-shafh_AdV3pdgk"},
{"content":{"body":"* I think this is a larger question that the plenary might need to discuss on its own: Considering proposals on their own merits—versus avoiding duplication of functionality between proposals—which is the bigger goal?","m.new_content":{"body":"I think this is a larger question that the plenary might need to discuss on its own: Considering proposals on their own merits—versus avoiding duplication of functionality between proposals—which is the bigger goal?","msgtype":"m.text"},"m.relates_to":{"event_id":"$tmmSfyxJ3yKi82AAZ7QDBfHE9qMP8QxU1hHV3d9iUUc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499228765,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XqkIfwvl-hqArMa3swRdXmM8UfHoeIctgze59R_yQJI"},
{"content":{"body":"i don't see those goals as in conflict here tbh","msgtype":"m.text"},"ts":1641499376678,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$618_W2_EinKTLzKJ6gman9fOSgcWVtHhw6LSfwnIRZ0"},
{"content":{"body":"if two proposals stand on their own, then any use cases in one not covered by the other are why the duplication is necessary","msgtype":"m.text"},"ts":1641499406337,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lHZHFaVatlqLHdg-QdBxXDpsnmm6c9iBugpyl2B_VVc"},
{"content":{"body":" * if two proposals stand on their own, then any use cases in one not covered by the other are why the duplication is necessary","m.new_content":{"body":"if two proposals stand on their own, then any use cases in one not covered by the other are why the duplication is necessary","msgtype":"m.text"},"m.relates_to":{"event_id":"$lHZHFaVatlqLHdg-QdBxXDpsnmm6c9iBugpyl2B_VVc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499407681,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MPJwu94jeJGlzU3DBRmBm8ToVsbWczn597oxy3vnJkw"},
{"content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","msgtype":"m.text"},"ts":1641499962466,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0"},
{"content":{"body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree, so we will see.","format":"org.matrix.custom.html","formatted_body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree, so we will see.","m.new_content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree, so we will see.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree, so we will see.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641499980956,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WA82WgHNY56fiTCWLVIWRTipcIdiNcWozOnU4FRbV_o"},
{"content":{"body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","m.new_content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500024164,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$z9S55E5atDRCfhUTv3i0yp5al5k18TZUbBujeAcYNhc"},
{"content":{"body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","m.new_content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing There’s More Than One Way to Do It for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500054666,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RjPxOubCUU-JzqtRYYaYFysEgfeut1oTIB7ydpksTd8"},
{"content":{"body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","m.new_content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. But I also think that other representatives might not agree. I suppose we will see at plenary.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500129706,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$q-lzYzV_vqkLYtRobhQda-NANtbGSl9QPUtgqSSfjkE"},
{"content":{"body":"yes, exactly","msgtype":"m.text"},"ts":1641500422782,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FgSU0QmWIeNZMahMKntnEV9X2raTLzl1hP-Izbtc5w0"},
{"content":{"body":"it's great to minimize ways to do things, and i personally prefer one","msgtype":"m.text"},"ts":1641500442618,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WMT8OfwKqkWu_59w0H7RXgtE-PI8p6iZzxGPvXCLO08"},
{"content":{"body":"but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many debates by citing TIMTOWTDI as \"the way JS works\"","msgtype":"m.text"},"ts":1641500466746,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2mH8i4moniUKiYLpqWO5sTY-GQR51ri1I2UFc3VGIwQ"},
{"content":{"body":" * but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many debates by citing TIMTOWTDI as \"the way JS works\"","m.new_content":{"body":"but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many debates by citing TIMTOWTDI as \"the way JS works\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$2mH8i4moniUKiYLpqWO5sTY-GQR51ri1I2UFc3VGIwQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500475124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OvwLip8PYzeQr_FgMfBS5SfP5Y2Mtri0FCuYFxZKhgE"},
{"content":{"body":" * but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many potential objections by citing TIMTOWTDI as \"the way JS works\"","m.new_content":{"body":"but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many potential objections by citing TIMTOWTDI as \"the way JS works\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$2mH8i4moniUKiYLpqWO5sTY-GQR51ri1I2UFc3VGIwQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500712099,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lanRloDcvDEdI9MPpgJ4MgoxdoPU95GTj8VgbMcUyQg"},
{"content":{"body":" * but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many potential objections over the years by citing TIMTOWTDI as \"the way JS works\"","m.new_content":{"body":"but i don't recall us ever blocking anything because it added a different way to do things - brendan has shut down many potential objections over the years by citing TIMTOWTDI as \"the way JS works\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$2mH8i4moniUKiYLpqWO5sTY-GQR51ri1I2UFc3VGIwQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641500719310,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1Lmh3_ja4FiHx__977eaaA50wrr6YosfvcgTXW-oQkU"},
{"content":{"body":"I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose `fn.call(that, …)` and `Reflect.apply(fn, that, […])`) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","format":"org.matrix.custom.html","formatted_body":"I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose <code>fn.call(that, …)</code> and <code>Reflect.apply(fn, that, […])</code>) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","msgtype":"m.text"},"ts":1641501135597,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$CaOIUggU6c4Dpi7YgApVzcmToI9k5XcWfoEbTfZZkLU"},
{"content":{"body":" * I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose `fn.call(that, …)` and `Reflect.apply(fn, that, […])`) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","format":"org.matrix.custom.html","formatted_body":" * I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose <code>fn.call(that, …)</code> and <code>Reflect.apply(fn, that, […])</code>) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","m.new_content":{"body":"I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose `fn.call(that, …)` and `Reflect.apply(fn, that, […])`) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","format":"org.matrix.custom.html","formatted_body":"I personally find call-on as discussed above (undeniable and concise syntax for invoking a function with specified receiver and arguments as an alternative to the deniable and more verbose <code>fn.call(that, …)</code> and <code>Reflect.apply(fn, that, […])</code>) to be satisfyingly orthogonal to pipeline in particular—they seem to work well both independently and together, with pipeline primarily covering the flow of data between human-relevant (sub)expressions/invocations and call-on putting invocation receiver and arguments on even footing (with an inherently opinionated order, regardless of whether that is receiver…function…args or function…receiver…args).","msgtype":"m.text"},"m.relates_to":{"event_id":"$CaOIUggU6c4Dpi7YgApVzcmToI9k5XcWfoEbTfZZkLU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641501195370,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UgEeJQFqZEsOd73QNjVSM-jN4fcNynREqkNex_loANQ"},
{"content":{"body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. \nBut I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"* If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible.<br />\nBut I also think that other representatives might not agree. I suppose we will see at plenary.","m.new_content":{"body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible. \nBut I also think that other representatives might not agree. I suppose we will see at plenary.","format":"org.matrix.custom.html","formatted_body":"If I’m understanding correctly, in your opinion, some duplication between two proposals is acceptable, if it occurs due to the proposals having to stand on their own merits.<br />\nI do agree: increasing TMTOWTDI for JavaScript is not very desirable but also would not be very terrible.<br />\nBut I also think that other representatives might not agree. I suppose we will see at plenary.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vv9kMRCez7-Y9H_YGtiVeh4omcjdls_aptZ0tqYFEF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641501684501,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Kev2qBoksOTMXtGkiTIsZWtsH4I9-TVdLY3gAgNZXfw"},
{"content":{"body":"I agree in large part with the latest gist, and really can't thank TabAtkins or jschoi enough for condensing all of this. The questions that remain most interesting to me after digesting those summaries are around PFA, which includes placeholder(s) (potentially interacting with pipeline) and a new invocation-like syntax (potentially interacting with call-on/bind-this/extensions) but provides capabilities that are cumbersome to access and supports patterns that are difficult to accomplish even with the other proposals.","format":"org.matrix.custom.html","formatted_body":"I agree in large part with the latest gist, and really can't thank <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a> or <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> enough for condensing all of this. The questions that remain most interesting to me after digesting those summaries are around PFA, which includes placeholder(s) (potentially interacting with pipeline) and a new invocation-like syntax (potentially interacting with call-on/bind-this/extensions) but provides capabilities that are cumbersome to access and supports patterns that are difficult to accomplish even with the other proposals.","msgtype":"m.text"},"ts":1641502249222,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$nNo2_kvTwVPDAyvRenl6bu_ESUJG9ZO-c3kFoGu0akM"},
{"content":{"body":"TMTOWTDI is a concern that was explicitly raised about pipe and other dataflow proposals, tho. So yes it's an important thing to discuss so we can get an Official Opinion, rather than distinct groups going \"oh this isn't big enough to be worth it, we should scope it up\" and \"oh this is big enough to overlap with the other one, we should scope it down\".","msgtype":"m.text"},"ts":1641504857088,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8NOvn9g8Ya6dnGeigLltwyCN53pafQCXRaAsutnGgRI"},
{"content":{"body":" * TIMTOWTDI is a concern that was explicitly raised about pipe and other dataflow proposals, tho. So yes it's an important thing to discuss so we can get an Official Opinion, rather than distinct groups going \"oh this isn't big enough to be worth it, we should scope it up\" and \"oh this is big enough to overlap with the other one, we should scope it down\".","m.new_content":{"body":"TIMTOWTDI is a concern that was explicitly raised about pipe and other dataflow proposals, tho. So yes it's an important thing to discuss so we can get an Official Opinion, rather than distinct groups going \"oh this isn't big enough to be worth it, we should scope it up\" and \"oh this is big enough to overlap with the other one, we should scope it down\".","msgtype":"m.text"},"m.relates_to":{"event_id":"$8NOvn9g8Ya6dnGeigLltwyCN53pafQCXRaAsutnGgRI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641504984443,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GGcO7gu44DJ5kksvPZekaEX2AZJqVLNvLs5iFxxrPHM"},
{"content":{"body":"http://www.xanthir.com/b5Gd0","msgtype":"m.text"},"ts":1641508197137,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0GW2MbpCE4kLLMDLHj7CsV7_2LGF3dbNDKUohbzY0oI"},
{"content":{"body":"(This is just me moving the essay from Gist to my blog)","msgtype":"m.text"},"ts":1641508422625,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7tkjT3krQS3l8r510GOc7xn6ArXlL2EbPBjMbes22eI"},
{"content":{"body":"All right, started the Call Operator repo https://github.com/tabatkins/proposal-call-operator","msgtype":"m.text"},"ts":1641509363824,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0nqMOb61wHKEypursTLvrq-xlcJX1Pso7dlK-ygT5OA"},
{"content":{"body":"And I realized while writing it that call+PFA reproduces the bind operator, too: `meth::~(receiver, arg)` == `meth.bind(receiver, arg)`","format":"org.matrix.custom.html","formatted_body":"And I realized while writing it that call+PFA reproduces the bind operator, too: <code>meth::~(receiver, arg)</code> == <code>meth.bind(receiver, arg)</code>","msgtype":"m.text"},"ts":1641509407020,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ohcfucTTvHaTn66MGHh7Dsn9YQoftYRKaKwaFLOckn8"},
{"content":{"body":"Feel free to duplicate and modify the text from https://github.com/tc39/proposal-bind-this/blob/main/README.md#bind-and-call-are-very-common into that explainer.","msgtype":"m.text"},"ts":1641510147346,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qryQQgzaN3V9YPPFo_xuG1dYb3HMV0TnNDzbHYXt6RE"},
{"content":{"body":"* Feel free to duplicate and modify the text from https://github.com/tc39/proposal-bind-this/blob/main/README.md#bind-and-call-are-very-common into that explainer.","m.new_content":{"body":"Feel free to duplicate and modify the text from https://github.com/tc39/proposal-bind-this/blob/main/README.md#bind-and-call-are-very-common into that explainer.","msgtype":"m.text"},"m.relates_to":{"event_id":"$qryQQgzaN3V9YPPFo_xuG1dYb3HMV0TnNDzbHYXt6RE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1641510163208,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3H3q5Hy4emiQjqxwUbhtTNnyLFPuYXvglb2CFxiOmwY"},
{"content":{"body":"I also kind of think we should name it proposal-call-this…or at least something other than proposal-call-operator: https://github.com/tabatkins/proposal-call-operator/issues/1","msgtype":"m.text"},"ts":1641510236097,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4IQfFIn8duMUqMnzO-7h6Iffa1hdGRPpbcaAXULROOM"},
{"content":{"body":"> <@tabatkins:matrix.org> And I realized while writing it that call+PFA reproduces the bind operator, too: `meth::~(receiver, arg)` == `meth.bind(receiver, arg)`\n\nif we consider the bind use case important, i do not think it would be prudent to wait for PFA to solve it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ohcfucTTvHaTn66MGHh7Dsn9YQoftYRKaKwaFLOckn8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>And I realized while writing it that call+PFA reproduces the bind operator, too: <code>meth::~(receiver, arg)</code> == <code>meth.bind(receiver, arg)</code></blockquote></mx-reply>if we consider the bind use case important, i do not think it would be prudent to wait for PFA to solve it","m.relates_to":{"m.in_reply_to":{"event_id":"$ohcfucTTvHaTn66MGHh7Dsn9YQoftYRKaKwaFLOckn8"}},"msgtype":"m.text"},"ts":1641511831104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UKnQldmkR7EcvhUnFbNZcwyDjqww5m_jdSc9ifgki4A"},
{"content":{"body":"I consider it less important than call, but more importantly I'm just laying out a roadmap of features+intersections that don't have duplications. If it takes a little bit to get there, that's fine to me.","msgtype":"m.text"},"ts":1641511884739,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7EjBgKekjGflXTo2gMA21mQjDpl2LF4NX-nGCQYc0Q4"}
]