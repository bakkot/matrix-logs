[
{"content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"ts":1648825003339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825043986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qYIMtYFlAMBl4sp-_mZrCTC98uOu6Jd-UoCXErP6YxQ"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825135287,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OLFvRWCrxrOskKz31WsTMcjQML4sn3mnN9r1Jut6q2k"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825245803,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1XyIZ3Q8z3NXdwjNWxeGRKUb-czjpTLK0-OWRt3unqQ"},
{"content":{"body":"So the plan is to use a cover grammar ShortCircuitExpression `|>` CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","format":"org.matrix.custom.html","formatted_body":"So the plan is to use a cover grammar ShortCircuitExpression <code>|&gt;</code> CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","msgtype":"m.text"},"ts":1648825290622,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gdSKGQWAoctWXiT08BvuXSly-8mWwiR8UT3w5iWY19M"},
{"content":{"body":"I have heard about obejct property decorators, but never about decorators for the whole object. It can just be a function call?","msgtype":"m.text"},"ts":1648825332932,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M2e0IzRVvKU9agFVcqeopUBCNHE5BkoQKwSYvtcSwAU"},
{"content":{"body":"Not sure. Take a look at https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#object-literal-and-property-decorators-and-annotations.","msgtype":"m.text"},"ts":1648825351626,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pI0RA0qzNEM3szvuW0rrUCGi30kh_rO0CdiltCxM62c"},
{"content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825440411,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws"},
{"content":{"body":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","m.new_content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"m.relates_to":{"event_id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825447203,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$syPkHGyVq1KKvG6Pp525UKweRRwG0TuoBx7HcSPPqjk"},
{"content":{"body":"Since (if?) we’re going with `@` as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions. ","format":"org.matrix.custom.html","formatted_body":"Since (if?) we’re going with <code>@</code> as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions.","msgtype":"m.text"},"ts":1648825491389,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UEIX57CKHDEx9PqcDHNaACkupSDOF704lyzM-3y9ED4"},
{"content":{"body":"It’s only decorators really that pipe has to be careful about.","msgtype":"m.text"},"ts":1648825503561,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RoOqz1sUQP8isUvfZ4m01rc3eLycNZUQyT3E5IWL55E"},
{"content":{"body":"* The only proposal that that pipe has to be careful about is decorators.","m.new_content":{"body":"The only proposal that that pipe has to be careful about is decorators.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RoOqz1sUQP8isUvfZ4m01rc3eLycNZUQyT3E5IWL55E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825518924,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pm9JDaRojhUCge3IMs2vZpQK6Lr3pxMnDVHUkx8OdHs"},
{"content":{"body":"It though that we have to be careful about infix operators too.","msgtype":"m.text","org.matrix.msc1767.text":"It though that we have to be careful about infix operators too."},"ts":1648825539221,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$6w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE"},
{"content":{"body":"(…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","msgtype":"m.text"},"ts":1648825551800,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UtSgHbRMdXcHJIwLUV7A79VIy234ZSaXaAPjxWyTmRQ"},
{"content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$6w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE"}}},"ts":1648825587452,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc"},
{"content":{"body":"* > <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","m.new_content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825626821,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pGbCRpq5LaHM9xNY6QifstaQACHQnUvwgx2f6X-i--s"},
{"content":{"body":"* > <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","m.new_content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825648152,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ijD9NcmhBdkwYKjVHt6hu6M7Zis1sgJOtBH6MlbgiZM"},
{"content":{"body":"* (…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","m.new_content":{"body":"(…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UtSgHbRMdXcHJIwLUV7A79VIy234ZSaXaAPjxWyTmRQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825656262,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MU_OVd2dQMlrTPHahbCbwNwM_UzcdIjlW5Xg0xDz8jY"},
{"content":{"body":"I wish we could just ban ASI after pipes","msgtype":"m.text"},"ts":1648825700049,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9iyKeH705X5zpNFCZb3KrZKdPZbP0JfykM4BIlTIbVo"},
{"content":{"body":"If that would be enough","msgtype":"m.text"},"ts":1648825714200,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J8uM3yuA5lE9K7gGLj2_OaAyKoHbGnm3aB82wTieeXo"},
{"content":{"body":"I’ll think about if we can do that instead.","msgtype":"m.text"},"ts":1648825749392,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5RMalkxg4QCBsEmlt4RRLGNk1ugKngK5QoFe_nG2AG8"},
{"content":{"body":"But the problem isn’t that ASI is happening. It’s that developers might expect ASI to happen when it wouldn’t.\n","format":"org.matrix.custom.html","formatted_body":"But the problem isn’t that ASI is happening. It’s that developers might expect ASI to happen when it wouldn’t.","msgtype":"m.text"},"ts":1648825804608,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yOvX2XuEF_bsz943Y1LPbLSkLElgAJv1qk8AcnBo1ps"},
{"content":{"body":"```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","msgtype":"m.text"},"ts":1648825859271,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dxwO-hmyiQlRhjjPNc5rpdfMmiOyS0Fjz2al5kVztHE"},
{"content":{"body":"* ```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"* <pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","m.new_content":{"body":"```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$dxwO-hmyiQlRhjjPNc5rpdfMmiOyS0Fjz2al5kVztHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825865566,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TknMXPJclqS1LGmrX4LM2mFZNRp05EarE2BvB5w4jDY"},
{"content":{"body":"Well, that's the same expectation in\n```\na = b\n[c].map(f)\n```","msgtype":"m.text"},"ts":1648825908490,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$baVpGr4edcwMLbzQ3wIobKwnnsv-kwaoZdXzS8_zHJM"},
{"content":{"body":"If you use ASI, learn it and don't complain 🤷","msgtype":"m.text"},"ts":1648825926775,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aws6TQRu2HC3opYqHzmlD-m2paHsPKYJuiFdA1gDywg"},
{"content":{"body":"Yes, that is true, heh.","msgtype":"m.text"},"ts":1648825931478,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2YWXUSKNO9vVOHuLf1VZWpx7--1OI9L7fU3oIirZ1Co"},
{"content":{"body":"But there is also future-proofing. ","format":"org.matrix.custom.html","formatted_body":"But there is also future-proofing.","msgtype":"m.text"},"ts":1648825946206,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$t9OIGGUKvu3F--3BfgkosUuoeGg8TA-pZQj9vI7GYwE"},
{"content":{"body":"```js\nx |> @(d)\n{ a: 0 }\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre>","msgtype":"m.text"},"ts":1648825956907,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE"},
{"content":{"body":"ASI *does* happen…until object-literal decorators get added.","format":"org.matrix.custom.html","formatted_body":"ASI <em>does</em> happen…until object-literal decorators get added.","msgtype":"m.text"},"ts":1648825974416,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Wy1Vyvti1h51BQ1kmADFjzv-vC0e5Uv8ZiE-FMBSgLk"},
{"content":{"body":"We could ask to the other delegates if anyone feels like all those decorators extensions are a possibility on the future","msgtype":"m.text"},"ts":1648825975412,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZHPGf5ml1gGVoHFHvp8peXNSQA2jKt5yzKanWLVCaL0"},
{"content":{"body":"I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\nCome to think of it, we probably don’t even need a cover grammar.","format":"org.matrix.custom.html","formatted_body":"I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.","msgtype":"m.text"},"ts":1648826043758,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM"},
{"content":{"body":"That's a great idea","msgtype":"m.text"},"ts":1648826070130,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fGV8xFuMH1Mt7x0a4Qqh13-hpyo3XEwYwrblmymkxKc"},
{"content":{"body":"That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"That's always a pipe token, never decorator (missing parens I think)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE"}}},"ts":1648826121531,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0"},
{"content":{"body":" * That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE?via=matrix.org&amp;via=igalia.com&amp;via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre></blockquote></mx-reply> * That's always a pipe token, never decorator (missing parens I think)","m.new_content":{"body":"That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"That's always a pipe token, never decorator (missing parens I think)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE?via=matrix.org&amp;via=igalia.com&amp;via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre></blockquote></mx-reply> * That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}]},"ts":1648826129456,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$e3PWkiuCpQ8ku1v9jq-0jHbGWNyPKFgqrXg0Li3Vvyo"},
{"content":{"body":"> <@jschoi:matrix.org> I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\n> Come to think of it, we probably don’t even need a cover grammar.\n\n```\nPipeExpression :\n  ShortCircuitExpression `|>` PipeBody\n  ShortCircuitExpression `|>` [lookahead ∉ {`class`}] DecoratorList Expression\n```\nIt is a Syntax Error if PipeBody covers DecoratorList `class` BindingIdentifier? ClassTail.\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression `|>` DecoratorList Expression.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.</blockquote></mx-reply><pre><code>PipeExpression :\n  ShortCircuitExpression `|&gt;` PipeBody\n  ShortCircuitExpression `|&gt;` [lookahead ∉ {`class`}] DecoratorList Expression\n</code></pre>\n<p>It is a Syntax Error if PipeBody covers DecoratorList <code>class</code> BindingIdentifier? ClassTail.<br />\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM"}},"msgtype":"m.text"},"ts":1648826189781,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IKBd59paONDp1pCENVfCF0gAAJlmTLbMtYfZo6vZNk4"},
{"content":{"body":"> <@pokute:matrix.org> That's always a pipe token, never decorator (missing parens I think)\n\nIt is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>That's always a pipe token, never decorator (missing parens I think)</blockquote></mx-reply>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.","m.relates_to":{"m.in_reply_to":{"event_id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0"}},"msgtype":"m.text"},"ts":1648826240003,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs"},
{"content":{"body":"> <@jschoi:matrix.org> It is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.\n\nAren't decorators illegal in pipe body unless inside parens?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.</blockquote></mx-reply>Aren't decorators illegal in pipe body unless inside parens?","m.relates_to":{"m.in_reply_to":{"event_id":"$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> It is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.\n\nAren't decorators illegal in pipe body unless inside parens?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.</blockquote></mx-reply>Aren't decorators illegal in pipe body unless inside parens?","mimetype":"text/html"}]},"ts":1648826289199,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4"},
{"content":{"body":"Or did I just mess up everything in my mind? :-)","msgtype":"m.text","org.matrix.msc1767.text":"Or did I just mess up everything in my mind? :-)"},"ts":1648826357339,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$9uAqmr9D3cmQf60J6iUc2BGl2gRfWCUSXPeK_CjEPvE"},
{"content":{"body":"> <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4"}}},"ts":1648826423015,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cf-ztRSfYELxxYPBB8dB35nz2wo3iyeDH3AvV-JC5w0"},
{"content":{"body":"The plan is that, if PipeBody covers a decorated class, then it is an early error.","msgtype":"m.text"},"ts":1648826457680,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0I46KEXkHMcOXbQffD2z1WLA4uUsiOOUYHuRk3ZgxVA"},
{"content":{"body":"But we also need to cover for future cases that are not yet covered by PipeBody because they are not yet valid expressions (like `@(foo) function () {}` or `@(foo) { a: 0 }`).","format":"org.matrix.custom.html","formatted_body":"But we also need to cover for future cases that are not yet covered by PipeBody because they are not yet valid expressions (like <code>@(foo) function () {}</code> or <code>@(foo) { a: 0 }</code>).","msgtype":"m.text"},"ts":1648826503594,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$A23yVtaPljc9vMF8T1DsZJhZzd0q6QgsQyO4SGOjigc"},
{"content":{"body":"* > <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","m.new_content":{"body":"> <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$cf-ztRSfYELxxYPBB8dB35nz2wo3iyeDH3AvV-JC5w0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648826519925,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gS_SXj-YWGwgQXXtxOYqQQqCLiUBHkMnPGeGi1a11_Y"},
{"content":{"body":"And, as usual, developers should be discouraged from putting any decorators inside pipe bodies anyway…","msgtype":"m.text"},"ts":1648826541547,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NyoHQsBfz-zUshpK3tWhcWqwuAxgKY_DT2MTYhnkwb0"},
{"content":{"body":"I would expect that ```x |> (@(d)\n{ a: 0 })``` to be a minimal valid usage.","format":"org.matrix.custom.html","formatted_body":"I would expect that <code>x |&gt; (@(d) { a: 0 })</code> to be a minimal valid usage.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would expect that ```x |> (@(d)\n{ a: 0 })``` to be a minimal valid usage.","mimetype":"text/plain"},{"body":"I would expect that <code>x |&gt; (@(d) { a: 0 })</code> to be a minimal valid usage.","mimetype":"text/html"}]},"ts":1648826640566,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$96Cn0jcBAte5whlR6qk0gK0MoBigyHGBwKyDZeJWPDk"},
{"content":{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"ts":1648826684467,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec"},
{"content":{"body":" * Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":" * Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","m.new_content":{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":" * Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"ts":1648826692084,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$CJMNMxrw7FkV0vaqAVs8h-NMjhgxETFgML0Vac01hKE"}
]