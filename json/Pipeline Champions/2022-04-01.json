[
{"content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"ts":1648825003339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825043986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qYIMtYFlAMBl4sp-_mZrCTC98uOu6Jd-UoCXErP6YxQ"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825135287,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OLFvRWCrxrOskKz31WsTMcjQML4sn3mnN9r1Jut6q2k"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825245803,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1XyIZ3Q8z3NXdwjNWxeGRKUb-czjpTLK0-OWRt3unqQ"},
{"content":{"body":"So the plan is to use a cover grammar ShortCircuitExpression `|>` CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","format":"org.matrix.custom.html","formatted_body":"So the plan is to use a cover grammar ShortCircuitExpression <code>|&gt;</code> CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","msgtype":"m.text"},"ts":1648825290622,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gdSKGQWAoctWXiT08BvuXSly-8mWwiR8UT3w5iWY19M"},
{"content":{"body":"I have heard about obejct property decorators, but never about decorators for the whole object. It can just be a function call?","msgtype":"m.text"},"ts":1648825332932,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M2e0IzRVvKU9agFVcqeopUBCNHE5BkoQKwSYvtcSwAU"},
{"content":{"body":"Not sure. Take a look at https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#object-literal-and-property-decorators-and-annotations.","msgtype":"m.text"},"ts":1648825351626,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pI0RA0qzNEM3szvuW0rrUCGi30kh_rO0CdiltCxM62c"},
{"content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825440411,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws"},
{"content":{"body":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","m.new_content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"m.relates_to":{"event_id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825447203,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$syPkHGyVq1KKvG6Pp525UKweRRwG0TuoBx7HcSPPqjk"},
{"content":{"body":"Since (if?) we’re going with `@` as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions. ","format":"org.matrix.custom.html","formatted_body":"Since (if?) we’re going with <code>@</code> as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions.","msgtype":"m.text"},"ts":1648825491389,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UEIX57CKHDEx9PqcDHNaACkupSDOF704lyzM-3y9ED4"},
{"content":{"body":"It’s only decorators really that pipe has to be careful about.","msgtype":"m.text"},"ts":1648825503561,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RoOqz1sUQP8isUvfZ4m01rc3eLycNZUQyT3E5IWL55E"}
]