[
{"content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"ts":1648825003339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825043986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qYIMtYFlAMBl4sp-_mZrCTC98uOu6Jd-UoCXErP6YxQ"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825135287,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OLFvRWCrxrOskKz31WsTMcjQML4sn3mnN9r1Jut6q2k"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```\n\n…or maybe ban any DecoratorList Expression immediately following `|>`.","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>\n<p>…or maybe ban any DecoratorList Expression immediately following <code>|&gt;</code>.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825245803,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1XyIZ3Q8z3NXdwjNWxeGRKUb-czjpTLK0-OWRt3unqQ"},
{"content":{"body":"So the plan is to use a cover grammar ShortCircuitExpression `|>` CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","format":"org.matrix.custom.html","formatted_body":"So the plan is to use a cover grammar ShortCircuitExpression <code>|&gt;</code> CoverPipeBodyOrDecoratedExpression. PipeBody is the usual. DecoratedExpression is something like DecoratorList Expression. It’s an early error if DecoratedExpression covers CoverPipeBodyOrDecoratedExpression.","msgtype":"m.text"},"ts":1648825290622,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gdSKGQWAoctWXiT08BvuXSly-8mWwiR8UT3w5iWY19M"},
{"content":{"body":"I have heard about obejct property decorators, but never about decorators for the whole object. It can just be a function call?","msgtype":"m.text"},"ts":1648825332932,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M2e0IzRVvKU9agFVcqeopUBCNHE5BkoQKwSYvtcSwAU"},
{"content":{"body":"Not sure. Take a look at https://github.com/tc39/proposal-decorators/blob/master/EXTENSIONS.md#object-literal-and-property-decorators-and-annotations.","msgtype":"m.text"},"ts":1648825351626,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pI0RA0qzNEM3szvuW0rrUCGi30kh_rO0CdiltCxM62c"},
{"content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825440411,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws"},
{"content":{"body":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","m.new_content":{"body":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.","msgtype":"m.text","org.matrix.msc1767.text":"It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"m.relates_to":{"event_id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't."},"ts":1648825447203,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$syPkHGyVq1KKvG6Pp525UKweRRwG0TuoBx7HcSPPqjk"},
{"content":{"body":"Since (if?) we’re going with `@` as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions. ","format":"org.matrix.custom.html","formatted_body":"Since (if?) we’re going with <code>@</code> as the topic reference, I think it’s reasonable to try to future proof against any potential future conflict with future decorator extensions.","msgtype":"m.text"},"ts":1648825491389,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UEIX57CKHDEx9PqcDHNaACkupSDOF704lyzM-3y9ED4"},
{"content":{"body":"It’s only decorators really that pipe has to be careful about.","msgtype":"m.text"},"ts":1648825503561,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RoOqz1sUQP8isUvfZ4m01rc3eLycNZUQyT3E5IWL55E"},
{"content":{"body":"* The only proposal that that pipe has to be careful about is decorators.","m.new_content":{"body":"The only proposal that that pipe has to be careful about is decorators.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RoOqz1sUQP8isUvfZ4m01rc3eLycNZUQyT3E5IWL55E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825518924,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pm9JDaRojhUCge3IMs2vZpQK6Lr3pxMnDVHUkx8OdHs"},
{"content":{"body":"It though that we have to be careful about infix operators too.","msgtype":"m.text","org.matrix.msc1767.text":"It though that we have to be careful about infix operators too."},"ts":1648825539221,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$6w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE"},
{"content":{"body":"(…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","msgtype":"m.text"},"ts":1648825551800,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UtSgHbRMdXcHJIwLUV7A79VIy234ZSaXaAPjxWyTmRQ"},
{"content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$6w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE"}}},"ts":1648825587452,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc"},
{"content":{"body":"* > <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","m.new_content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed, and it should be fine.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825626821,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pGbCRpq5LaHM9xNY6QifstaQACHQnUvwgx2f6X-i--s"},
{"content":{"body":"* > <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","m.new_content":{"body":"> <@pokute:matrix.org> It though that we have to be careful about infix operators too.\n\nI don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the `@` topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%246w2rOrLeXSVQX1Rd1paluU8gSCUFWwrzZ2aOHOpDaDE\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It though that we have to be careful about infix operators too.</blockquote></mx-reply>I don’t think we have to be careful about future non-identifier infix operators. It’s future infix operators that have to be careful of pipe (or specifically of the <code>@</code> topic). And those future proposals will be able to use some simple lookahead rules when they get proposed (https://github.com/tc39/proposal-pipeline-operator/issues/91#issuecomment-1085006912), and it should be fine.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tnVERNbs66eDSImSEC4bHb7rZ3JXapJM7GXOVJlfAAc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825648152,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ijD9NcmhBdkwYKjVHt6hu6M7Zis1sgJOtBH6MlbgiZM"},
{"content":{"body":"* (…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","m.new_content":{"body":"(…Well, I guess there’s the dataflow stuff in general. Like how pipe will not advance unless bind-this advances. But I’m talking about syntax only.)","msgtype":"m.text"},"m.relates_to":{"event_id":"$UtSgHbRMdXcHJIwLUV7A79VIy234ZSaXaAPjxWyTmRQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825656262,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MU_OVd2dQMlrTPHahbCbwNwM_UzcdIjlW5Xg0xDz8jY"},
{"content":{"body":"I wish we could just ban ASI after pipes","msgtype":"m.text"},"ts":1648825700049,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9iyKeH705X5zpNFCZb3KrZKdPZbP0JfykM4BIlTIbVo"},
{"content":{"body":"If that would be enough","msgtype":"m.text"},"ts":1648825714200,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J8uM3yuA5lE9K7gGLj2_OaAyKoHbGnm3aB82wTieeXo"},
{"content":{"body":"I’ll think about if we can do that instead.","msgtype":"m.text"},"ts":1648825749392,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5RMalkxg4QCBsEmlt4RRLGNk1ugKngK5QoFe_nG2AG8"},
{"content":{"body":"But the problem isn’t that ASI is happening. It’s that developers might expect ASI to happen when it wouldn’t.\n","format":"org.matrix.custom.html","formatted_body":"But the problem isn’t that ASI is happening. It’s that developers might expect ASI to happen when it wouldn’t.","msgtype":"m.text"},"ts":1648825804608,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yOvX2XuEF_bsz943Y1LPbLSkLElgAJv1qk8AcnBo1ps"},
{"content":{"body":"```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","msgtype":"m.text"},"ts":1648825859271,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dxwO-hmyiQlRhjjPNc5rpdfMmiOyS0Fjz2al5kVztHE"},
{"content":{"body":"* ```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"* <pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","m.new_content":{"body":"```js\nx |> @(d)\nclass C {}\n```\nHere, ASI would *not* happen. It would be equivalent to:\n```js\nx |> (@(d) class C {})\n```\nBut a developer might expect ASI to happen, as if it were:\n```js\nx |> @(d); class C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\nclass C {}\n</code></pre>\n<p>Here, ASI would <em>not</em> happen. It would be equivalent to:</p>\n<pre><code class=\"language-js\">x |&gt; (@(d) class C {})\n</code></pre>\n<p>But a developer might expect ASI to happen, as if it were:</p>\n<pre><code class=\"language-js\">x |&gt; @(d); class C {}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$dxwO-hmyiQlRhjjPNc5rpdfMmiOyS0Fjz2al5kVztHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825865566,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TknMXPJclqS1LGmrX4LM2mFZNRp05EarE2BvB5w4jDY"},
{"content":{"body":"Well, that's the same expectation in\n```\na = b\n[c].map(f)\n```","msgtype":"m.text"},"ts":1648825908490,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$baVpGr4edcwMLbzQ3wIobKwnnsv-kwaoZdXzS8_zHJM"},
{"content":{"body":"If you use ASI, learn it and don't complain 🤷","msgtype":"m.text"},"ts":1648825926775,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aws6TQRu2HC3opYqHzmlD-m2paHsPKYJuiFdA1gDywg"},
{"content":{"body":"Yes, that is true, heh.","msgtype":"m.text"},"ts":1648825931478,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2YWXUSKNO9vVOHuLf1VZWpx7--1OI9L7fU3oIirZ1Co"},
{"content":{"body":"But there is also future-proofing. ","format":"org.matrix.custom.html","formatted_body":"But there is also future-proofing.","msgtype":"m.text"},"ts":1648825946206,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$t9OIGGUKvu3F--3BfgkosUuoeGg8TA-pZQj9vI7GYwE"},
{"content":{"body":"```js\nx |> @(d)\n{ a: 0 }\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre>","msgtype":"m.text"},"ts":1648825956907,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE"},
{"content":{"body":"ASI *does* happen…until object-literal decorators get added.","format":"org.matrix.custom.html","formatted_body":"ASI <em>does</em> happen…until object-literal decorators get added.","msgtype":"m.text"},"ts":1648825974416,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Wy1Vyvti1h51BQ1kmADFjzv-vC0e5Uv8ZiE-FMBSgLk"},
{"content":{"body":"We could ask to the other delegates if anyone feels like all those decorators extensions are a possibility on the future","msgtype":"m.text"},"ts":1648825975412,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZHPGf5ml1gGVoHFHvp8peXNSQA2jKt5yzKanWLVCaL0"},
{"content":{"body":"I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\nCome to think of it, we probably don’t even need a cover grammar.","format":"org.matrix.custom.html","formatted_body":"I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.","msgtype":"m.text"},"ts":1648826043758,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM"},
{"content":{"body":"That's a great idea","msgtype":"m.text"},"ts":1648826070130,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fGV8xFuMH1Mt7x0a4Qqh13-hpyo3XEwYwrblmymkxKc"},
{"content":{"body":"That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"That's always a pipe token, never decorator (missing parens I think)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE"}}},"ts":1648826121531,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0"},
{"content":{"body":" * That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE?via=matrix.org&amp;via=igalia.com&amp;via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre></blockquote></mx-reply> * That's always a pipe token, never decorator (missing parens I think)","m.new_content":{"body":"That's always a pipe token, never decorator (missing parens I think)","format":"org.matrix.custom.html","formatted_body":"That's always a pipe token, never decorator (missing parens I think)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ZC-BZWhQZ1ArI9_RKyQ0_GWwhXkgKiBqU6JpOZ-SMIE?via=matrix.org&amp;via=igalia.com&amp;via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><pre><code class=\"language-js\">x |&gt; @(d)\n{ a: 0 }\n</code></pre></blockquote></mx-reply> * That's always a pipe token, never decorator (missing parens I think)","mimetype":"text/html"}]},"ts":1648826129456,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$e3PWkiuCpQ8ku1v9jq-0jHbGWNyPKFgqrXg0Li3Vvyo"},
{"content":{"body":"> <@jschoi:matrix.org> I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\n> Come to think of it, we probably don’t even need a cover grammar.\n\n```\nPipeExpression :\n  ShortCircuitExpression `|>` PipeBody\n  ShortCircuitExpression `|>` [lookahead ∉ {`class`}] DecoratorList Expression\n```\nIt is a Syntax Error if PipeBody covers DecoratorList `class` BindingIdentifier? ClassTail.\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression `|>` DecoratorList Expression.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.</blockquote></mx-reply><pre><code>PipeExpression :\n  ShortCircuitExpression `|&gt;` PipeBody\n  ShortCircuitExpression `|&gt;` [lookahead ∉ {`class`}] DecoratorList Expression\n</code></pre>\n<p>It is a Syntax Error if PipeBody covers DecoratorList <code>class</code> BindingIdentifier? ClassTail.<br />\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM"}},"msgtype":"m.text"},"ts":1648826189781,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IKBd59paONDp1pCENVfCF0gAAJlmTLbMtYfZo6vZNk4"},
{"content":{"body":"> <@pokute:matrix.org> That's always a pipe token, never decorator (missing parens I think)\n\nIt is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>That's always a pipe token, never decorator (missing parens I think)</blockquote></mx-reply>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.","m.relates_to":{"m.in_reply_to":{"event_id":"$pdl8g1Hog503t-BmV0OlOtrjz9P3v84tUjjzGXlz3o0"}},"msgtype":"m.text"},"ts":1648826240003,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs"},
{"content":{"body":"> <@jschoi:matrix.org> It is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.\n\nAren't decorators illegal in pipe body unless inside parens?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.</blockquote></mx-reply>Aren't decorators illegal in pipe body unless inside parens?","m.relates_to":{"m.in_reply_to":{"event_id":"$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> It is currently two statements because PipeBody will only parse up to a valid expression, and `@d { a: 0 }` is not a valid expression…until, in the future, they add object-literal decorators. Then `@d { a: 0 }` suddenly becomes a valid expression.\n\nAren't decorators illegal in pipe body unless inside parens?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$zHkce-KIpWmbhYKHNaAFLNFl6CBpv7Xj5fe0jYsRCOs?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>It is currently two statements because PipeBody will only parse up to a valid expression, and <code>@d { a: 0 }</code> is not a valid expression…until, in the future, they add object-literal decorators. Then <code>@d { a: 0 }</code> suddenly becomes a valid expression.</blockquote></mx-reply>Aren't decorators illegal in pipe body unless inside parens?","mimetype":"text/html"}]},"ts":1648826289199,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4"},
{"content":{"body":"Or did I just mess up everything in my mind? :-)","msgtype":"m.text","org.matrix.msc1767.text":"Or did I just mess up everything in my mind? :-)"},"ts":1648826357339,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$9uAqmr9D3cmQf60J6iUc2BGl2gRfWCUSXPeK_CjEPvE"},
{"content":{"body":"> <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4"}}},"ts":1648826423015,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cf-ztRSfYELxxYPBB8dB35nz2wo3iyeDH3AvV-JC5w0"},
{"content":{"body":"The plan is that, if PipeBody covers a decorated class, then it is an early error.","msgtype":"m.text"},"ts":1648826457680,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0I46KEXkHMcOXbQffD2z1WLA4uUsiOOUYHuRk3ZgxVA"},
{"content":{"body":"But we also need to cover for future cases that are not yet covered by PipeBody because they are not yet valid expressions (like `@(foo) function () {}` or `@(foo) { a: 0 }`).","format":"org.matrix.custom.html","formatted_body":"But we also need to cover for future cases that are not yet covered by PipeBody because they are not yet valid expressions (like <code>@(foo) function () {}</code> or <code>@(foo) { a: 0 }</code>).","msgtype":"m.text"},"ts":1648826503594,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$A23yVtaPljc9vMF8T1DsZJhZzd0q6QgsQyO4SGOjigc"},
{"content":{"body":"* > <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","m.new_content":{"body":"> <@pokute:matrix.org> Aren't decorators illegal in pipe body unless inside parens?\n\nRight now, the plan is:\n```js\nx |> @(foo) class { x = @ }\n```\n…is illegal.\n```js\nx |> (@(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> (() => @(foo) class { x = @ })\n```\n…is legal.\n```js\nx |> do { @(foo) class { x = @ }; }\n```\n…is legal.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Pd-9Orba0_at1Tg_7qi6ARVEnKnBL0c9wppL5G2cLn4\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Aren't decorators illegal in pipe body unless inside parens?</blockquote></mx-reply><p>Right now, the plan is:</p>\n<pre><code class=\"language-js\">x |&gt; @(foo) class { x = @ }\n</code></pre>\n<p>…is illegal.</p>\n<pre><code class=\"language-js\">x |&gt; (@(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; (() =&gt; @(foo) class { x = @ })\n</code></pre>\n<p>…is legal.</p>\n<pre><code class=\"language-js\">x |&gt; do { @(foo) class { x = @ }; }\n</code></pre>\n<p>…is legal.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$cf-ztRSfYELxxYPBB8dB35nz2wo3iyeDH3AvV-JC5w0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648826519925,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gS_SXj-YWGwgQXXtxOYqQQqCLiUBHkMnPGeGi1a11_Y"},
{"content":{"body":"And, as usual, developers should be discouraged from putting any decorators inside pipe bodies anyway…","msgtype":"m.text"},"ts":1648826541547,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NyoHQsBfz-zUshpK3tWhcWqwuAxgKY_DT2MTYhnkwb0"},
{"content":{"body":"I would expect that ```x |> (@(d)\n{ a: 0 })``` to be a minimal valid usage.","format":"org.matrix.custom.html","formatted_body":"I would expect that <code>x |&gt; (@(d) { a: 0 })</code> to be a minimal valid usage.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would expect that ```x |> (@(d)\n{ a: 0 })``` to be a minimal valid usage.","mimetype":"text/plain"},{"body":"I would expect that <code>x |&gt; (@(d) { a: 0 })</code> to be a minimal valid usage.","mimetype":"text/html"}]},"ts":1648826640566,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$96Cn0jcBAte5whlR6qk0gK0MoBigyHGBwKyDZeJWPDk"},
{"content":{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"ts":1648826684467,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec"},
{"content":{"body":" * Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":" * Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","m.new_content":{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","format":"org.matrix.custom.html","formatted_body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":"Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?","mimetype":"text/plain"},{"body":" * Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?","mimetype":"text/html"}]},"ts":1648826692084,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$CJMNMxrw7FkV0vaqAVs8h-NMjhgxETFgML0Vac01hKE"},
{"content":{"body":"> <@pokute:matrix.org> I would expect that ```x |> (@(d)\n> { a: 0 })``` to be a minimal valid usage.\n\nThat would also be valid.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%2496Cn0jcBAte5whlR6qk0gK0MoBigyHGBwKyDZeJWPDk\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>I would expect that <code>x |&gt; (@(d) { a: 0 })</code> to be a minimal valid usage.</blockquote></mx-reply>That would also be valid.","m.relates_to":{"m.in_reply_to":{"event_id":"$96Cn0jcBAte5whlR6qk0gK0MoBigyHGBwKyDZeJWPDk"}},"msgtype":"m.text"},"ts":1648826727900,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fOlEIFltabF04ZxZ4V1ptA08eF6xybZhS5H0gYfSIRY"},
{"content":{"body":"Parens aren't really needed since you shouldn't ever use expressions as infix operators (IMO)","msgtype":"m.text","org.matrix.msc1767.text":"Parens aren't really needed since you shouldn't ever use expressions as infix operators (IMO)"},"ts":1648826731414,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$K3C5HuqJ7KStd6fRgHt0b4PPwK2I53QB9MTDxS3HFgc"},
{"content":{"body":"> <@pokute:matrix.org> Could we expect that infix operators to always be in `x infixOp y` form and never in `x (infixOp) y`?\n\nEven if we added an `infixOp` (where `infixOp` is already a valid identifier), then we could just ban `@ infixOp operand`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Could we expect that infix operators to always be in <code>x infixOp y</code> form and never in <code>x (infixOp) y</code>?</blockquote></mx-reply>Even if we added an <code>infixOp</code> (where <code>infixOp</code> is already a valid identifier), then we could just ban <code>@ infixOp operand</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$zt1wcJCdgDObQN5i2OJBcwkfuN2fzEBhEapIr-zyAec"}},"msgtype":"m.text"},"ts":1648826796856,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WN-wEf3bTCaiJmDzyP9H2Kb7DdksDrKmVXKoF_eU-lY"},
{"content":{"body":"Or, rather, we would make `@ infixOp operand` always mean a decorated operand, not “topic `infixOp` operand”.","format":"org.matrix.custom.html","formatted_body":"Or, rather, we would make <code>@ infixOp operand</code> always mean a decorated operand, not “topic <code>infixOp</code> operand”.","msgtype":"m.text"},"ts":1648826866231,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LkkK1qYv__EoDVzYqGmBD9zBkicchzawgLYnFOfPmKc"},
{"content":{"body":"* > <@jschoi:matrix.org> I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\n> Come to think of it, we probably don’t even need a cover grammar.\n\n```\nPipeExpression :\n  ShortCircuitExpression `|>` PipeBody\n  ShortCircuitExpression `|>` DecoratorList [lookahead ∉ {`class`}] Expression\n```\nIt is a Syntax Error if PipeBody covers DecoratorList `class` BindingIdentifier? ClassTail.\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression `|>` DecoratorList Expression.\n","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.</blockquote></mx-reply><pre><code>PipeExpression :\n  ShortCircuitExpression `|&gt;` PipeBody\n  ShortCircuitExpression `|&gt;` DecoratorList [lookahead ∉ {`class`}] Expression\n</code></pre>\n<p>It is a Syntax Error if PipeBody covers DecoratorList <code>class</code> BindingIdentifier? ClassTail.<br />\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.</p>","m.new_content":{"body":"> <@jschoi:matrix.org> I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression `|>` DecoratorList Expression.\n> Come to think of it, we probably don’t even need a cover grammar.\n\n```\nPipeExpression :\n  ShortCircuitExpression `|>` PipeBody\n  ShortCircuitExpression `|>` DecoratorList [lookahead ∉ {`class`}] Expression\n```\nIt is a Syntax Error if PipeBody covers DecoratorList `class` BindingIdentifier? ClassTail.\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression `|>` DecoratorList Expression.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24ajpck5J_BSaF9TYwhmQYbzfDwBosHh8cIiCPe6ebLrM\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I think it’s reasonable to just ban PipeExpression : ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.<br />\nCome to think of it, we probably don’t even need a cover grammar.</blockquote></mx-reply><pre><code>PipeExpression :\n  ShortCircuitExpression `|&gt;` PipeBody\n  ShortCircuitExpression `|&gt;` DecoratorList [lookahead ∉ {`class`}] Expression\n</code></pre>\n<p>It is a Syntax Error if PipeBody covers DecoratorList <code>class</code> BindingIdentifier? ClassTail.<br />\nIt is a Syntax Error if PipeExpression covers ShortCircuitExpression <code>|&gt;</code> DecoratorList Expression.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$IKBd59paONDp1pCENVfCF0gAAJlmTLbMtYfZo6vZNk4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648827070508,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ekhyntzEjWcWZ_jWVgHqYSulyafntNbdcltZBdxPwpI"},
{"content":{"body":"> <@pokute:matrix.org> It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.\n\nevery proposal should, and I’m not aware of any that knowingly don’t ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>It feels a bit that pipeline is taking into account other possible proposals in a way that many other proposals don't.</blockquote></mx-reply>every proposal should, and I’m not aware of any that knowingly don’t","m.relates_to":{"m.in_reply_to":{"event_id":"$Ri0AMrgTcrUmEV2n9Et8UmIO73SYrYxqjSEv5Q_uRws"}},"msgtype":"m.text"},"ts":1648827164557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mFHAphyfJ55nbSRz3LUkQtZdnol_bLO_DfZZFYzMJhY"},
{"content":{"body":"Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`","format":"org.matrix.custom.html","formatted_body":"Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`","mimetype":"text/plain"},{"body":"Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code>","mimetype":"text/html"}]},"ts":1648827169413,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM"},
{"content":{"body":"> <@pokute:matrix.org> Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`\n\nThat should just be `class foo extends (Date |> (@dateDecorator(@))) { … }`, unless I’m missing something.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code></blockquote></mx-reply>That should just be <code>class foo extends (Date |&gt; (@dateDecorator(@))) { … }</code>, unless I’m missing something.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM"}}},"ts":1648827215891,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SPsR-B5F0tEbfCIsWPoUpkV-Mfdg-qX1SWWIfyATnCc"},
{"content":{"body":"Should this be possible, any problems?","msgtype":"m.text","org.matrix.msc1767.text":"Should this be possible, any problems?"},"ts":1648827215931,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$QSAwqezrsT6UVLEIYe_hbjtcUwgXk5yDD72PBAeJq-c"},
{"content":{"body":"* > <@pokute:matrix.org> Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`\n\nThat should just be `class foo extends (Date |> (@dateDecorator(@))) { … }`, unless I’m missing something.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code></blockquote></mx-reply>That should just be <code>class foo extends (Date |&gt; (@dateDecorator(@))) { … }</code>, unless I’m missing something.","m.new_content":{"body":"> <@pokute:matrix.org> Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`\n\nThat should just be `class foo extends (Date |> (@dateDecorator(@))) { … }`, unless I’m missing something.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code></blockquote></mx-reply>That should just be <code>class foo extends (Date |&gt; (@dateDecorator(@))) { … }</code>, unless I’m missing something.","msgtype":"m.text"},"m.relates_to":{"event_id":"$SPsR-B5F0tEbfCIsWPoUpkV-Mfdg-qX1SWWIfyATnCc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648827227882,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MT3hJZKMzwiPjICh6_iW00lVNdmCPlE1rEIf62rgI2Q"},
{"content":{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","format":"org.matrix.custom.html","formatted_body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/plain"},{"body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/html"}]},"ts":1648827464110,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$B3ZSXiA0owch09sAKf6XwwgDQUpUhbt8HlLsaLiC92o"},
{"content":{"body":" * I've seen at least one person who's really interested in using pipelines in `extends` part and I don't seem to recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","format":"org.matrix.custom.html","formatted_body":" * I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't seem to recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","m.new_content":{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't seem to recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","format":"org.matrix.custom.html","formatted_body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't seem to recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't seem to recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/plain"},{"body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't seem to recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$B3ZSXiA0owch09sAKf6XwwgDQUpUhbt8HlLsaLiC92o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I've seen at least one person who's really interested in using pipelines in `extends` part and I don't seem to recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/plain"},{"body":" * I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't seem to recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/html"}]},"ts":1648827495300,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$ol6j7hFi-U16qhGED0wfhhiLB2lZMP8Nnh7NKYusfQ8"},
{"content":{"body":" * I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","format":"org.matrix.custom.html","formatted_body":" * I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","m.new_content":{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","format":"org.matrix.custom.html","formatted_body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/plain"},{"body":"I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$B3ZSXiA0owch09sAKf6XwwgDQUpUhbt8HlLsaLiC92o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I've seen at least one person who's really interested in using pipelines in `extends` part and I don't recall anyone discussing it yet. Now when using `@` topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/plain"},{"body":" * I've seen at least one person who's really interested in using pipelines in <code>extends</code> part and I don't recall anyone discussing it yet. Now when using <code>@</code> topic token, it would be better to probe if anyone can spot any problems arising due to decorators with it.","mimetype":"text/html"}]},"ts":1648827532991,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$r1ZHiChkIgvNii69isLwBkeMQBhIyro2z38WpWYzbZo"},
{"content":{"body":"I don’t think it should be a problem at all, but let us know if you find one.","msgtype":"m.text"},"ts":1648827574255,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jRX5U5fRUCuK9NI0v_OS-xLl6WzzLS-NPqyrDh7mSqM"},
{"content":{"body":"Actually, I think it probably is just impossible. I don't think `Date |> (@dateDecorator(@))` is valid anyway.","format":"org.matrix.custom.html","formatted_body":"Actually, I think it probably is just impossible. I don't think <code>Date |&gt; (@dateDecorator(@))</code> is valid anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Actually, I think it probably is just impossible. I don't think `Date |> (@dateDecorator(@))` is valid anyway.","mimetype":"text/plain"},{"body":"Actually, I think it probably is just impossible. I don't think <code>Date |&gt; (@dateDecorator(@))</code> is valid anyway.","mimetype":"text/html"}]},"ts":1648827728987,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$JB7StCdUsg4JkUI9ezvjZZj0yV5fuu4i11VhOIqmG-8"},
{"content":{"body":"Oh wait, I misread your original example.","msgtype":"m.text"},"ts":1648827759026,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jxavN3BPDAwXGwuHKaZz1TsqY3Z3exT9Gp8RCvrPkIk"},
{"content":{"body":"Yes, that is not valid.","msgtype":"m.text"},"ts":1648827761747,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jQWSuhn0E2YEk1tB9i8c5N21vt7D0uXRETIIi8fr3v0"},
{"content":{"body":"Maybe `Date |> dateDecorator(@)` is","format":"org.matrix.custom.html","formatted_body":"Maybe <code>Date |&gt; dateDecorator(@)</code> is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Maybe `Date |> dateDecorator(@)` is","mimetype":"text/plain"},{"body":"Maybe <code>Date |&gt; dateDecorator(@)</code> is","mimetype":"text/html"}]},"ts":1648827774678,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$deXZM32d7L9NKmNWFD5qDiM-8sz5YEos33DXGP4jiwM"},
{"content":{"body":"Because `@dateDecorator(Date)` is not an expression; it is a decorator.","format":"org.matrix.custom.html","formatted_body":"Because <code>@dateDecorator(Date)</code> is not an expression; it is a decorator.","msgtype":"m.text"},"ts":1648827778475,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$clq_wakquT51VkjEC05FMCucRVRLBe-Xi13Xy3l0WuY"},
{"content":{"body":"You would want `@(Date |> dateDecorator(@))`.","format":"org.matrix.custom.html","formatted_body":"You would want <code>@(Date |&gt; dateDecorator(@))</code>.","msgtype":"m.text"},"ts":1648827795887,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vMOmi_lUlALe2BtxdjVV5X97d81ywYiK-e1dEPq-_XA"},
{"content":{"body":"One possible partial solution would be to never allow decorator extensions from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","format":"org.matrix.custom.html","formatted_body":"One possible partial solution would be to never allow decorator extensions from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One possible partial solution would be to never allow decorator extensions from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","mimetype":"text/plain"},{"body":"One possible partial solution would be to never allow decorator extensions from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","mimetype":"text/html"}]},"ts":1648828087687,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$aqBHLFG47Ez9JR-s-qHA7_ZwwqSoMZkDNBoimsHxu6M"},
{"content":{"body":"<thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","format":"org.matrix.custom.html","formatted_body":"&lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"<thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","mimetype":"text/plain"},{"body":"&lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","mimetype":"text/html"}]},"ts":1648828139771,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$pdxHAsJP75j7tM597s89lSIOgBjqGE0Xw1ZRCoqFFA8"},
{"content":{"body":" * <thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","format":"org.matrix.custom.html","formatted_body":" * &lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","m.new_content":{"body":"<thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","format":"org.matrix.custom.html","formatted_body":"&lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"<thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","mimetype":"text/plain"},{"body":"&lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pdxHAsJP75j7tM597s89lSIOgBjqGE0Xw1ZRCoqFFA8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * <thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.","mimetype":"text/plain"},{"body":" * &lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.","mimetype":"text/html"}]},"ts":1648828167118,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$xOQIB3ZV3YhOZkzq4Ej9j2cTIgi2iS8Hr_EX6oDeqD0"},
{"content":{"body":"While code blocks & do expressions would support `@decoratorFun { return 0; }`","format":"org.matrix.custom.html","formatted_body":"While code blocks &amp; do expressions would support <code>@decoratorFun { return 0; }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"While code blocks & do expressions would support `@decoratorFun { return 0; }`","mimetype":"text/plain"},{"body":"While code blocks &amp; do expressions would support <code>@decoratorFun { return 0; }</code>","mimetype":"text/html"}]},"ts":1648828204383,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$f8LyUX_ar76d2_9twxHTkK4gbpUcTWEEZg41Yyne-5c"},
{"content":{"body":" * One possible partial solution would be to never allow decorator extensions proposals from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","format":"org.matrix.custom.html","formatted_body":" * One possible partial solution would be to never allow decorator extensions proposals from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","m.new_content":{"body":"One possible partial solution would be to never allow decorator extensions proposals from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","format":"org.matrix.custom.html","formatted_body":"One possible partial solution would be to never allow decorator extensions proposals from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One possible partial solution would be to never allow decorator extensions proposals from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","mimetype":"text/plain"},{"body":"One possible partial solution would be to never allow decorator extensions proposals from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$aqBHLFG47Ez9JR-s-qHA7_ZwwqSoMZkDNBoimsHxu6M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * One possible partial solution would be to never allow decorator extensions proposals from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.","mimetype":"text/plain"},{"body":" * One possible partial solution would be to never allow decorator extensions proposals from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.","mimetype":"text/html"}]},"ts":1648828234721,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$uWA6uBuL7Qk0sipISZuwE3E39DHHZnfgiHZ0GG5mnlk"},
{"content":{"body":"It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","format":"org.matrix.custom.html","formatted_body":"It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","mimetype":"text/plain"},{"body":"It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","mimetype":"text/html"}]},"ts":1648828286199,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$I11iICI8P3By1E92-F-H3r_PbIW4-RmratYn8OXGQLc"},
{"content":{"body":" * It might be that `@decoratorFun class` is already a precedent that makes this difficult.","format":"org.matrix.custom.html","formatted_body":" * It might be that <code>@decoratorFun class</code> is already a precedent that makes this difficult.","m.new_content":{"body":"It might be that `@decoratorFun class` is already a precedent that makes this difficult.","format":"org.matrix.custom.html","formatted_body":"It might be that <code>@decoratorFun class</code> is already a precedent that makes this difficult.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It might be that `@decoratorFun class` is already a precedent that makes this difficult.","mimetype":"text/plain"},{"body":"It might be that <code>@decoratorFun class</code> is already a precedent that makes this difficult.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$I11iICI8P3By1E92-F-H3r_PbIW4-RmratYn8OXGQLc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * It might be that `@decoratorFun class` is already a precedent that makes this difficult.","mimetype":"text/plain"},{"body":" * It might be that <code>@decoratorFun class</code> is already a precedent that makes this difficult.","mimetype":"text/html"}]},"ts":1648828299767,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$0nwsOa8mzevkSSolO1RkoijWOcU9DZtxE62uVmCzdi0"},
{"content":{"body":" * It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","format":"org.matrix.custom.html","formatted_body":" * It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","m.new_content":{"body":"It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","format":"org.matrix.custom.html","formatted_body":"It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","mimetype":"text/plain"},{"body":"It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$I11iICI8P3By1E92-F-H3r_PbIW4-RmratYn8OXGQLc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * It might be that `@decoratorFun class ...` is already a precedent that makes this difficult.","mimetype":"text/plain"},{"body":" * It might be that <code>@decoratorFun class ...</code> is already a precedent that makes this difficult.","mimetype":"text/html"}]},"ts":1648828306727,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$uMKnwIIUZq2uXN5MITXB59D1Loe_8kPAKisiI5XuuRU"},
{"content":{"body":"🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have `class A { function b() {} |@> methodDecorator } |@> classDecorator`, but I guess we're too late.","format":"org.matrix.custom.html","formatted_body":"🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have <code>class A { function b() {} |@&gt; methodDecorator } |@&gt; classDecorator</code>, but I guess we're too late.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have `class A { function b() {} |@> methodDecorator } |@> classDecorator`, but I guess we're too late.","mimetype":"text/plain"},{"body":"🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have <code>class A { function b() {} |@&gt; methodDecorator } |@&gt; classDecorator</code>, but I guess we're too late.","mimetype":"text/html"}]},"ts":1648828742369,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$0Pp7M3qxm-oM6lAyHW5yDkS3ppZXr84pM0AfhOXNgXI"},
{"content":{"body":"Alarmingly, it's starting to make more and more sense to me.","msgtype":"m.text","org.matrix.msc1767.text":"Alarmingly, it's starting to make more and more sense to me."},"ts":1648829000922,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$UFML9CNZw2PUvSfGm7OHstFiFF9NszTHG9y41qvnpdk"},
{"content":{"body":"> <@pokute:matrix.org> Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`\n\n * ~~That should just be `class foo extends (Date |> (dateDecorator(@))) { … }`, unless I’m missing something.~~ I misread this example.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code></blockquote></mx-reply> * ~~That should just be <code>class foo extends (Date |&gt; (dateDecorator(@))) { … }</code>, unless I’m missing something.~~ I misread this example.","m.new_content":{"body":"~~That should just be `class foo extends (Date |> (dateDecorator(@))) { … }`, unless I’m missing something.~~ I misread this example.","format":"org.matrix.custom.html","formatted_body":"~~That should just be <code>class foo extends (Date |&gt; (dateDecorator(@))) { … }</code>, unless I’m missing something.~~ I misread this example.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"~~That should just be `class foo extends (Date |> (dateDecorator(@))) { … }`, unless I’m missing something.~~ I misread this example.","mimetype":"text/plain"},{"body":"~~That should just be <code>class foo extends (Date |&gt; (dateDecorator(@))) { … }</code>, unless I’m missing something.~~ I misread this example.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$SPsR-B5F0tEbfCIsWPoUpkV-Mfdg-qX1SWWIfyATnCc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pokute:matrix.org> Ok, here's another wild scenario that I haven't seen mentioned yet: `class foo extends Date |> (@dateDecorator(@)) { ... }`\n\n * ~~That should just be `class foo extends (Date |> (dateDecorator(@))) { … }`, unless I’m missing something.~~ I misread this example.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU%3Amatrix.org/%24RwEh3N6G7qdM1H1k1WvjIp_8Tcuj-vk66KArY8bkmnM\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br>Ok, here's another wild scenario that I haven't seen mentioned yet: <code>class foo extends Date |&gt; (@dateDecorator(@)) { ... }</code></blockquote></mx-reply> * ~~That should just be <code>class foo extends (Date |&gt; (dateDecorator(@))) { … }</code>, unless I’m missing something.~~ I misread this example.","mimetype":"text/html"}]},"ts":1648829099613,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RP2npeULSCFhfZfguurKzXaD0fzXO2eYSTni0Q5DA8k"},
{"content":{"body":"FYI: https://github.com/tc39/proposal-pipeline-operator/pull/268","msgtype":"m.text","org.matrix.msc1767.text":"FYI: https://github.com/tc39/proposal-pipeline-operator/pull/268"},"ts":1648831574025,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$S2gCS10EAXL8i5TthatKApwX7Vp5vunbmhpIMFnK2Zc"},
{"content":{"body":"> <@pokute:matrix.org> One possible partial solution would be to never allow decorator extensions proposals from using `@decoratorFun <thing>` for anything where `decoratorFun(<thing>)` works as ergonomically.\n\n`@dec` and `@dec()` aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$aqBHLFG47Ez9JR-s-qHA7_ZwwqSoMZkDNBoimsHxu6M?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br />One possible partial solution would be to never allow decorator extensions proposals from using <code>@decoratorFun &lt;thing&gt;</code> for anything where <code>decoratorFun(&lt;thing&gt;)</code> works as ergonomically.</blockquote></mx-reply><code>@dec</code> and <code>@dec()</code> aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory","m.relates_to":{"m.in_reply_to":{"event_id":"$aqBHLFG47Ez9JR-s-qHA7_ZwwqSoMZkDNBoimsHxu6M"}},"msgtype":"m.text"},"ts":1648831841558,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$0XpmOFZG2YpZ6FegSNBXvU7dDbylSkGwDwKOAF2sxPg"},
{"content":{"body":"> <@pokute:matrix.org> 🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have `class A { function b() {} |@> methodDecorator } |@> classDecorator`, but I guess we're too late.\n\nPlease no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$0Pp7M3qxm-oM6lAyHW5yDkS3ppZXr84pM0AfhOXNgXI?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br />🚎 Maybe we could've forgotten the prefix decorators alltogether and instead have <code>class A { function b() {} |@&gt; methodDecorator } |@&gt; classDecorator</code>, but I guess we're too late.</blockquote></mx-reply>Please no","m.relates_to":{"m.in_reply_to":{"event_id":"$0Pp7M3qxm-oM6lAyHW5yDkS3ppZXr84pM0AfhOXNgXI"}},"msgtype":"m.text"},"ts":1648831932339,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$B2noC31Dv2G1xX_2eqksP6AQPQnUicB6wE1h9YpsDtM"},
{"content":{"body":"> <@pokute:matrix.org> <thing> that wouldn't support `@decoratorFun` could include object literal likes, arraylikes and functions.\n\nDefinitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using `@` is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$pdxHAsJP75j7tM597s89lSIOgBjqGE0Xw1ZRCoqFFA8?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br />&lt;thing&gt; that wouldn't support <code>@decoratorFun</code> could include object literal likes, arraylikes and functions.</blockquote></mx-reply>Definitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using <code>@</code> is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax.","m.relates_to":{"m.in_reply_to":{"event_id":"$pdxHAsJP75j7tM597s89lSIOgBjqGE0Xw1ZRCoqFFA8"}},"msgtype":"m.text"},"ts":1648832195762,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$oFJPOjuaCWqQLMjIAoZccScvBVZK-pSDnxM3IcPwt7s"},
{"content":{"body":"This is making me less and less convinced that `@` is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use `@@` or `##` than have this hazard","format":"org.matrix.custom.html","formatted_body":"This is making me less and less convinced that <code>@</code> is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use <code>@@</code> or <code>##</code> than have this hazard","msgtype":"m.text"},"ts":1648832257961,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$xUSQpgmHw2UNZ9js5vlk20GL-AuCY5C5JhdkWf8hZCY"},
{"content":{"body":"> <@rbuckton:matrix.org> `@dec` and `@dec()` aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory\n\nThe latter example, `decoratorfun(<thing>)` was missing `@` deliberately. Admittedly I'm not sure if it would work the same during runtime for all those examples (object literals, functions) and whether engine implementors want to be sure that nothing can touch the intermediary form.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$0XpmOFZG2YpZ6FegSNBXvU7dDbylSkGwDwKOAF2sxPg?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><code>@dec</code> and <code>@dec()</code> aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory</blockquote></mx-reply>The latter example, <code>decoratorfun(&lt;thing&gt;)</code> was missing <code>@</code> deliberately. Admittedly I'm not sure if it would work the same during runtime for all those examples (object literals, functions) and whether engine implementors want to be sure that nothing can touch the intermediary form.","m.relates_to":{"m.in_reply_to":{"event_id":"$0XpmOFZG2YpZ6FegSNBXvU7dDbylSkGwDwKOAF2sxPg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> `@dec` and `@dec()` aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory\n\nThe latter example, `decoratorfun(<thing>)` was missing `@` deliberately. Admittedly I'm not sure if it would work the same during runtime for all those examples (object literals, functions) and whether engine implementors want to be sure that nothing can touch the intermediary form.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$0XpmOFZG2YpZ6FegSNBXvU7dDbylSkGwDwKOAF2sxPg?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><code>@dec</code> and <code>@dec()</code> aren't synonymous. The 1st is a decorator, the 2nd is a decorator factory</blockquote></mx-reply>The latter example, <code>decoratorfun(&lt;thing&gt;)</code> was missing <code>@</code> deliberately. Admittedly I'm not sure if it would work the same during runtime for all those examples (object literals, functions) and whether engine implementors want to be sure that nothing can touch the intermediary form.","mimetype":"text/html"}]},"ts":1648832463294,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$pbS7-lnbZflYCQDR8jV5UwD_1Yl2B77uBnUyH2_7j7E"},
{"content":{"body":"Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","format":"org.matrix.custom.html","formatted_body":"<p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","mimetype":"text/plain"},{"body":"<p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$oFJPOjuaCWqQLMjIAoZccScvBVZK-pSDnxM3IcPwt7s"}}},"ts":1648832465672,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ArfkXjLm-D9XmJwPnKRnSQ8fr16C9hE_SxsTqdolnm8"},
{"content":{"body":"> <@rbuckton:matrix.org> Definitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using `@` is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax.\n\n * Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$oFJPOjuaCWqQLMjIAoZccScvBVZK-pSDnxM3IcPwt7s?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Definitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using <code>@</code> is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax.</blockquote></mx-reply> * <p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","m.new_content":{"body":"Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","format":"org.matrix.custom.html","formatted_body":"<p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","mimetype":"text/plain"},{"body":"<p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ArfkXjLm-D9XmJwPnKRnSQ8fr16C9hE_SxsTqdolnm8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Definitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using `@` is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax.\n\n * Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.\n\nIf you find a concerning example, then put it here and we’ll take a look.\nDevelopers should not be putting decorators in pipes anyway.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$oFJPOjuaCWqQLMjIAoZccScvBVZK-pSDnxM3IcPwt7s?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Definitely want functions to work in the future. We spent multiple plenary meetings discussing the possibility of decorating many other things as well. I'd rather not have pipeline derail decorators, and I'm more and more concerned that using <code>@</code> is a very future hostile hazard considering the very valid use cases for decorated functions, structs, and enums (assuming the latter two also end up with expression forms), plus any other future syntax.</blockquote></mx-reply> * <p>Check the specification and see what you think. It has a bunch of future proofing that (hopefully) covers any possible decorator expression.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p>\n","mimetype":"text/html"}]},"ts":1648832514596,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2FF1r11ZRox9GmU5BhhMSn9auIZq0V2V3EiHX20KF30"},
{"content":{"body":"> <@jschoi:matrix.org> Check the specification and see what you think. I think the future proofing should be okay. \n> If you find a concerning example, then put it here and we’ll take a look.\n> Developers should not be putting decorators in pipes anyway.\n\nI agree, but it's not the *intentional* use of decorators in pipes I'm worried about, it's the *unintentional* use. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$ArfkXjLm-D9XmJwPnKRnSQ8fr16C9hE_SxsTqdolnm8?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br /><p>Check the specification and see what you think. I think the future proofing should be okay.</p>\n<p>If you find a concerning example, then put it here and we’ll take a look.<br>Developers should not be putting decorators in pipes anyway.</p></blockquote></mx-reply>I agree, but it's not the <em>intentional</em> use of decorators in pipes I'm worried about, it's the <em>unintentional</em> use.","m.relates_to":{"m.in_reply_to":{"event_id":"$ArfkXjLm-D9XmJwPnKRnSQ8fr16C9hE_SxsTqdolnm8"}},"msgtype":"m.text"},"ts":1648832545664,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$jSS1lzaCviKQPaqkewBa3gJv1Eg2aOYt359gYoSltm4"},
{"content":{"body":"I'm in an airport now, I'll read through the spec tonight. ","format":"org.matrix.custom.html","formatted_body":"I'm in an airport now, I'll read through the spec tonight.","msgtype":"m.text"},"ts":1648832576245,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$NZ80z1igivR-4bdEvVNsA3uOeUOljd_6FI5uXbJgHRQ"},
{"content":{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","format":"org.matrix.custom.html","formatted_body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","mimetype":"text/plain"},{"body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","mimetype":"text/html"}]},"ts":1648832633270,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YpKgPtocY0-kdjADhZRStnf-z7V7BUpyF0HIWXunxes"},
{"content":{"body":" * The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","format":"org.matrix.custom.html","formatted_body":" * <p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","m.new_content":{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","format":"org.matrix.custom.html","formatted_body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","mimetype":"text/plain"},{"body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YpKgPtocY0-kdjADhZRStnf-z7V7BUpyF0HIWXunxes","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","mimetype":"text/plain"},{"body":" * <p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference; pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","mimetype":"text/html"}]},"ts":1648832705148,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4xbE0bpbUoRsgxpeV3_e6kD6BpZROPHdREmYcif9FZg"},
{"content":{"body":" * The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","format":"org.matrix.custom.html","formatted_body":" * <p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","m.new_content":{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","format":"org.matrix.custom.html","formatted_body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","mimetype":"text/plain"},{"body":"<p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YpKgPtocY0-kdjADhZRStnf-z7V7BUpyF0HIWXunxes","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The spec does also try to prevent unintentional use of decorators, making things like the following an early error:\n\n```js\n// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |> @(foo)\n{ x: 0 };\n```\n\nThank you for looking!","mimetype":"text/plain"},{"body":" * <p>The spec does also try to prevent unintentional use of decorators, making things like the following an early error:</p>\n<pre><code class=\"language-js\">// Syntax Error: Pipe body does not contain topic reference;\n// pipe body cannot be unparenthesized decorated expression.\nx |&gt; @(foo)\n{ x: 0 };\n</code></pre>\n<p>Thank you for looking!</p>\n","mimetype":"text/html"}]},"ts":1648832713999,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$AnQcEH_Su1HSDQ1MfTpO8x8_L_oc0huSom7rXmYxrSE"},
{"content":{"body":"rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/html"}]},"ts":1648833253956,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_wwKwYSzWAw930RsJlbKYRnUNuuaMkYhD2Aw-TcJYlg"},
{"content":{"body":" * rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","m.new_content":{"body":"rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_wwKwYSzWAw930RsJlbKYRnUNuuaMkYhD2Aw-TcJYlg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * rbuckton (OOF thru Apr. 1st): FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (OOF thru Apr. 1st)</a>: FYI, I just found a typo in the pull request; just force pushed, so go refresh in case you’re looking at it already.","mimetype":"text/html"}]},"ts":1648833278198,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IwvSv1BeE3YugPAFBs0LJc6OBrc0riJx5q1pSXzOy6w"},
{"content":{"body":" For Apr.1 you should announce the topic was changed to `$#!+` to make it easier to see in a pipeline","format":"org.matrix.custom.html","formatted_body":"For Apr.1 you should announce the topic was changed to <code>$#!+</code> to make it easier to see in a pipeline","msgtype":"m.text"},"ts":1648833386718,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$OnZQ7GbVsTmCfR_L83ScbOfbc7DTJ5ynRtLCqrFdyEE"},
{"content":{"body":"> <@rbuckton:matrix.org> This is making me less and less convinced that `@` is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use `@@` or `##` than have this hazard\n\nFor every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.\n\nFor this reason, I think the proponents of `@` as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$xUSQpgmHw2UNZ9js5vlk20GL-AuCY5C5JhdkWf8hZCY?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This is making me less and less convinced that <code>@</code> is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use <code>@@</code> or <code>##</code> than have this hazard</blockquote></mx-reply><p>For every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.</p>\n<p>For this reason, I think the proponents of <code>@</code> as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$xUSQpgmHw2UNZ9js5vlk20GL-AuCY5C5JhdkWf8hZCY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> This is making me less and less convinced that `@` is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use `@@` or `##` than have this hazard\n\nFor every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.\n\nFor this reason, I think the proponents of `@` as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$xUSQpgmHw2UNZ9js5vlk20GL-AuCY5C5JhdkWf8hZCY?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This is making me less and less convinced that <code>@</code> is viable every time I think about it. It feels like we're cooking up future hazards for the convenience of a single character token. I'd rather see pipeline use <code>@@</code> or <code>##</code> than have this hazard</blockquote></mx-reply><p>For every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.</p>\n<p>For this reason, I think the proponents of <code>@</code> as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.</p>\n","mimetype":"text/html"}]},"ts":1648833387785,"senderName":"pokute","senderId":"@pokute:matrix.org","id":"$m2z7ttm4Pg-B8x3XYZjL8PmR8HMAUKKbwED00Yt7I-0"},
{"content":{"body":"> <@pokute:matrix.org> For every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.\n> For this reason, I think the proponents of `@` as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.\n\nKeep in mind Waldemar required grouped/auto-accessors to use a keyword so as not to pave over any other future `id {}` proposal in class bodies. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$m2z7ttm4Pg-B8x3XYZjL8PmR8HMAUKKbwED00Yt7I-0?via=matrix.org&via=igalia.com&via=t2bot.io\">In reply to</a> <a href=\"https://matrix.to/#/@pokute:matrix.org\">@pokute:matrix.org</a><br /><p>For every imaginable hazard, we can list them and see if they can be mitigated. If they're all mitigated, then they wouldn't be hazards any more.</p>\n<p>For this reason, I think the proponents of <code>@</code> as a topic should try their best to discover those hazards, as with any proposal. For this, checking out every possible proposal / idea for conflicts that result in hazards is important. I don't think unpublished ideas/proposals nor unimaginable hazards should influence the decision - no proposal would advance with that kind of burden.</p></blockquote></mx-reply>Keep in mind Waldemar required grouped/auto-accessors to use a keyword so as not to pave over any other future <code>id {}</code> proposal in class bodies.","m.relates_to":{"m.in_reply_to":{"event_id":"$m2z7ttm4Pg-B8x3XYZjL8PmR8HMAUKKbwED00Yt7I-0"}},"msgtype":"m.text"},"ts":1648833497072,"senderName":"rbuckton (OOF thru Apr. 1st)","senderId":"@rbuckton:matrix.org","id":"$eRREyF_oN2xi9yCUk1twDm_FpzFwN5zKPo_rDa1Jm8g"}
]