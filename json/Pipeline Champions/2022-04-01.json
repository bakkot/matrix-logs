[
{"content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"ts":1648825003339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come. I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers?)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825043986,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qYIMtYFlAMBl4sp-_mZrCTC98uOu6Jd-UoCXErP6YxQ"},
{"content":{"body":"* There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"* <p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","m.new_content":{"body":"There are vague future plans for object-literal decorators like `@(d) { x: 0 }`. So:\n```js\nx |> @(d)\n{ x: 0 }\n```\n…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)\n\nBlocks are fine.\n```js\nx |> @(d)\n{ 0 }\n```\n…only has one reasonable interpretation (as `x |> @(d); { 0 }`).\n\nI don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:\n\n```js\nx |> @(d)\ny\n```","format":"org.matrix.custom.html","formatted_body":"<p>There are vague future plans for object-literal decorators like <code>@(d) { x: 0 }</code>. So:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ x: 0 }\n</code></pre>\n<p>…also needs to be future proofed with an early error. We presumably should do the same with array literals. (And tuple/record literals when they come.)</p>\n<p>Blocks are fine.</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\n{ 0 }\n</code></pre>\n<p>…only has one reasonable interpretation (as <code>x |&gt; @(d); { 0 }</code>).</p>\n<p>I don’t think there’s anything else on the expression level that might get decorated…Maybe identifiers? Right now there are only plans for parameter identifiers so maybe we also ban this too:</p>\n<pre><code class=\"language-js\">x |&gt; @(d)\ny\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4XG67HPk1Qc427I6kxfSKjJ1d6B0Y5XJ5TCk3cPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648825135287,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OLFvRWCrxrOskKz31WsTMcjQML4sn3mnN9r1Jut6q2k"}
]