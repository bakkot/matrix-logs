[
{"content":{"body":"ljharb: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.\nAlthough I will direct the bikeshedding over bind/call-this’s syntax, I will try to push `rec :> f(arg0)` as my favored syntax, since rkirsling and Justin Ridgewell are also fine with it.\n","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.<br>Although I will direct the bikeshedding over bind/call-this’s syntax, I will try to push <code>rec :&gt; f(arg0)</code> as my favored syntax, since <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a> and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> are also fine with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.\nAlthough I will direct the bikeshedding over bind/call-this’s syntax, I will try to push `rec :> f(arg0)` as my favored syntax, since rkirsling and Justin Ridgewell are also fine with it.\n","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.<br>Although I will direct the bikeshedding over bind/call-this’s syntax, I will try to push <code>rec :&gt; f(arg0)</code> as my favored syntax, since <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a> and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> are also fine with it.","mimetype":"text/html"}]},"ts":1647649092234,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$q1IZqxEJXDBl-q9hh5D_DZGFzHd6u5Ot5nYKYBZGlX8"},
{"content":{"body":"I will also try to be persuasive to MM and company that both pipe and bind-this deserve to be in the language (“big frequency\n× big clunkiness = worth improving with syntax”). ","msgtype":"m.text","org.matrix.msc1767.text":"I will also try to be persuasive to MM and company that both pipe and bind-this deserve to be in the language (“big frequency\n× big clunkiness = worth improving with syntax”). "},"ts":1647649098783,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eFv-mdpYF__2Cy47sfPTtdWVW7WE0n6wQbw2ZM1lYuo"},
{"content":{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making `rec :> f` an error)…That would get rid the overlap with PFA syntax and pipe operator.","format":"org.matrix.custom.html","formatted_body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making <code>rec :&gt; f</code> an error)…That would get rid the overlap with PFA syntax and pipe operator.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making `rec :> f` an error)…That would get rid the overlap with PFA syntax and pipe operator.","mimetype":"text/plain"},{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making <code>rec :&gt; f</code> an error)…That would get rid the overlap with PFA syntax and pipe operator.","mimetype":"text/html"}]},"ts":1647649130756,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6gN74fGmzT-Nt0djQ4i59HbnbtXY2QSfhIxTIoxHemA"},
{"content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649178205,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8"},
{"content":{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","m.new_content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649201715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GE64gMD81LnEgW5xMShaYQSQsH_DFifZb7vT-WUC9aA"},
{"content":{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","m.new_content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649213962,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iKGpyaom1DWsNQ3c6zHs0DJ5I-MZmzf1RmoaPEAgrvk"},
{"content":{"body":"i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it","msgtype":"m.text"},"ts":1647649218509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y"},
{"content":{"body":"I personally want a call syntax, and don’t care at all about the binding ability","msgtype":"m.text"},"ts":1647649223511,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rHhtT1Cf_q5N-EAyTqDMW9u7DtTM9ZZEfM7csI9dwQc"},
{"content":{"body":"** a receiver-first call syntax","msgtype":"m.text"},"ts":1647649270444,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AjiPWl7_A2ULJy54xTzY5ONkbjJad70_OI39U5bmwPQ"},
{"content":{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y"}}},"ts":1647649397853,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y"},
{"content":{"body":"We did resolve in the post-plenary meeting, “In general, some overlap is okay, but too much is bad; we have to decide this on a case-by-case basis.”","msgtype":"m.text","org.matrix.msc1767.text":"We did resolve in the post-plenary meeting, “In general, some overlap is okay, but too much is bad; we have to decide this on a case-by-case basis.”"},"ts":1647649400562,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mHbT8i_F9S3J4gN0gnXdMjHwSoCz5jnH4vK0ayK9SFc"},
{"content":{"body":"In this case, it seems to be “not really much loss, not really much gain, maybe punt to later”. I don’t have strong opinions on this issue myself, other than whatever it takes to garner the most support within Committee…","msgtype":"m.text","org.matrix.msc1767.text":"In this case, it seems to be “not really much loss, not really much gain, maybe punt to later”. I don’t have strong opinions on this issue myself, other than whatever it takes to garner the most support within Committee…"},"ts":1647649441766,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sFig0JK10LbepQWmfQ-AZH2lWOHKL8RwX32hgWr9F-M"},
{"content":{"body":"> <@ljharb:matrix.org> i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it\n\n * Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it</blockquote></mx-reply> * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","m.new_content":{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it\n\n * Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it</blockquote></mx-reply> * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"ts":1647649459726,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d10Abtj9dd8ItvOzJTZKwDRF_mAGmaX3X9Vbses9QTA"},
{"content":{"body":"Persuading MM about bind-this’s worth is going to be important, because if we cannot persuade MM to not block bind-this, then JHD will block pipe operator…In the situation that we have, we must have both or neither.","msgtype":"m.text","org.matrix.msc1767.text":"Persuading MM about bind-this’s worth is going to be important, because if we cannot persuade MM to not block bind-this, then JHD will block pipe operator…In the situation that we have, we must have both or neither."},"ts":1647649521136,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xDGAeEg4z_KOrKFdOC_PjPPZXUxF56PfSP_BUFbmr3w"},
{"content":{"body":"sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy","msgtype":"m.text"},"ts":1647649544761,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58"},
{"content":{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58"}}},"ts":1647649616664,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DJ5LNStQg6QNFW0qMvQHRJzczQG3o5elFjK-gSp4b4g"},
{"content":{"body":"> <@ljharb:matrix.org> sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy\n\n * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy</blockquote></mx-reply> * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","m.new_content":{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DJ5LNStQg6QNFW0qMvQHRJzczQG3o5elFjK-gSp4b4g","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy\n\n * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy</blockquote></mx-reply> * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}]},"ts":1647649626452,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xnGcmYAc4VFrKGzSHrKmBIZFxMUKbcTHafP8XYxvrbw"},
{"content":{"body":" * Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":" * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","m.new_content":{"body":"Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":" * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"ts":1647649676849,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VkOBN9QuhrUaSbMjO-9xSfzPUfYXsNvDjqhbcqa9Qfk"},
{"content":{"body":"Yes, but i also don’t think call-this holds its syntax weight without receiver-first","msgtype":"m.text"},"ts":1647649894400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wFH6_toT0_U48YkOVKAbEDPSmV0KfG30cqM9RNjKGmw"},
{"content":{"body":"we already have .call for that","msgtype":"m.text"},"ts":1647649900050,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2rCQPehsYV3fNESPvXc4sxGU8JpJ1R13oVwESs3JcvU"},
{"content":{"body":"call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","msgtype":"m.text"},"ts":1647649954014,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yJXL1vn_mp7W1GYPFyA6nRIYJ4Lhlw5S0rLULLIU63U"},
{"content":{"body":"`.call` is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","format":"org.matrix.custom.html","formatted_body":"<code>.call</code> is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`.call` is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","mimetype":"text/plain"},{"body":"<code>.call</code> is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","mimetype":"text/html"}]},"ts":1647649955543,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tEY_dZsvvqqLWb5bY8jB-BI9Z-A1iIsWd_rpn30sQTU"},
{"content":{"body":"* call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","m.new_content":{"body":"call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","msgtype":"m.text"},"m.relates_to":{"event_id":"$yJXL1vn_mp7W1GYPFyA6nRIYJ4Lhlw5S0rLULLIU63U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1647649972945,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JF1bEz0rEIuf3h8Ni_qc989mSpisdqDIGBBgH5S572s"},
{"content":{"body":"If I drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”. \nTherefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If I drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If I drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”. \nTherefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If I drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647650083638,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647650163378,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$799kwiwTZknysXspq7sKxWNGOCuKbLDVL1IKSlVfefA"},
{"content":{"body":"Justin Ridgewell: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.\n\nHowever, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting `this`-based functions for use with the “this” operator – rather than non-`this`-based functions for use with the pipe operator?\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.</p>\n<p>However, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting <code>this</code>-based functions for use with the “this” operator – rather than non-<code>this</code>-based functions for use with the pipe operator?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.\n\nHowever, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting `this`-based functions for use with the “this” operator – rather than non-`this`-based functions for use with the pipe operator?\n","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.</p>\n<p>However, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting <code>this</code>-based functions for use with the “this” operator – rather than non-<code>this</code>-based functions for use with the pipe operator?</p>\n","mimetype":"text/html"}]},"ts":1647651160950,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d9aCONYqsl2069ntQiI-PDu6L5UPYlp4i7A6Rj5y2Hc"},
{"content":{"body":"I ask this because I anticipate viral ecosystem schism to continue being a (weak?) concern from Waldemar and maybe Tab and others. ","msgtype":"m.text","org.matrix.msc1767.text":"I ask this because I anticipate viral ecosystem schism to continue being a (weak?) concern from Waldemar and maybe Tab and others. "},"ts":1647651165600,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kJO0uDMjdU_AcoHn4YwF4AZmGgDEmVigonkmjvJ1wDA"},
{"content":{"body":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651190156,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0"},
{"content":{"body":" * We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","m.new_content":{"body":"We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"m.relates_to":{"event_id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651193889,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UgcgjRGg7mZ5CDHA1J7ViyoHOPmx3525T0VzQMnMi_8"},
{"content":{"body":" * We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","m.new_content":{"body":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"m.relates_to":{"event_id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651201922,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9Pj414Jhi8TlvAzdZn-VOgPdsuLkSSjBCOCKtE-E8g4"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651269786,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-QyKDUvZBJIvFOUHx0YwJsdHEU10Rcda3UAgmby-Uck"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651282611,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$h4OhP8VSnZQFpJx5mQOV-DZdS97be26Rt9Ol2WOXl_M"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651367155,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$o8UZ47CQQD5j096vjiJTzOsAWwSoRvmgpoz2cZbmyDw"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651420689,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QGcJMALOBg9x-ybYR556edayp7TvQAU9zrwiGiaWDNA"},
{"content":{"body":"TabAtkins: If we drop function binding from `rec :> fn()`, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: If we drop function binding from <code>rec :&gt; fn()</code>, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: If we drop function binding from `rec :> fn()`, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: If we drop function binding from <code>rec :&gt; fn()</code>, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","mimetype":"text/html"}]},"ts":1647652594361,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$B4YkUXGz52-Jg034lad5bzqxrERp2JvwppVqMzJ9VrY"},
{"content":{"body":"Yeah that's fine, I have no attachment to the proposal except as a way to thread the syntax needle","msgtype":"m.text"},"ts":1647652630644,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$bm20KXzTyWPKL2uUnEzMqJd8OEcUsSRx7Gk0mbxQR8U"}
]