[
{"content":{"body":"ljharb: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.\nAlthough I will direct the bikeshedding over bind/call-this’s syntax, I will try to push `rec :> f(arg0)` as my favored syntax, since rkirsling and Justin Ridgewell are also fine with it.\n","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.<br>Although I will direct the bikeshedding over bind/call-this’s syntax, I will try to push <code>rec :&gt; f(arg0)</code> as my favored syntax, since <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a> and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> are also fine with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.\nAlthough I will direct the bikeshedding over bind/call-this’s syntax, I will try to push `rec :> f(arg0)` as my favored syntax, since rkirsling and Justin Ridgewell are also fine with it.\n","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Got it, thank you. I will not float Function.unThis as an alternative possibility to bind-this/call-this.<br>Although I will direct the bikeshedding over bind/call-this’s syntax, I will try to push <code>rec :&gt; f(arg0)</code> as my favored syntax, since <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a> and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> are also fine with it.","mimetype":"text/html"}]},"ts":1647649092234,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$q1IZqxEJXDBl-q9hh5D_DZGFzHd6u5Ot5nYKYBZGlX8"},
{"content":{"body":"I will also try to be persuasive to MM and company that both pipe and bind-this deserve to be in the language (“big frequency\n× big clunkiness = worth improving with syntax”). ","msgtype":"m.text","org.matrix.msc1767.text":"I will also try to be persuasive to MM and company that both pipe and bind-this deserve to be in the language (“big frequency\n× big clunkiness = worth improving with syntax”). "},"ts":1647649098783,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eFv-mdpYF__2Cy47sfPTtdWVW7WE0n6wQbw2ZM1lYuo"},
{"content":{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making `rec :> f` an error)…That would get rid the overlap with PFA syntax and pipe operator.","format":"org.matrix.custom.html","formatted_body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making <code>rec :&gt; f</code> an error)…That would get rid the overlap with PFA syntax and pipe operator.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making `rec :> f` an error)…That would get rid the overlap with PFA syntax and pipe operator.","mimetype":"text/plain"},{"body":"I wonder if it would be more persuasive if we dropped the binding semantics without arguments (making <code>rec :&gt; f</code> an error)…That would get rid the overlap with PFA syntax and pipe operator.","mimetype":"text/html"}]},"ts":1647649130756,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6gN74fGmzT-Nt0djQ4i59HbnbtXY2QSfhIxTIoxHemA"},
{"content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649178205,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8"},
{"content":{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","m.new_content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649201715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GE64gMD81LnEgW5xMShaYQSQsH_DFifZb7vT-WUC9aA"},
{"content":{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","m.new_content":{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","format":"org.matrix.custom.html","formatted_body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":"We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Krf5iwyYD4UoryUdDp-HgQ5HggWzymAjj0nJC3GLGB8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in `rec :> rec.f` anyway.","mimetype":"text/plain"},{"body":" * We could always add binding semantics later. And, as people have pointed out, most binding involves extraction from the same original owner object as the receiver, which requires clunky repetition in <code>rec :&gt; rec.f</code> anyway.","mimetype":"text/html"}]},"ts":1647649213962,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iKGpyaom1DWsNQ3c6zHs0DJ5I-MZmzf1RmoaPEAgrvk"},
{"content":{"body":"i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it","msgtype":"m.text"},"ts":1647649218509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y"},
{"content":{"body":"I personally want a call syntax, and don’t care at all about the binding ability","msgtype":"m.text"},"ts":1647649223511,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rHhtT1Cf_q5N-EAyTqDMW9u7DtTM9ZZEfM7csI9dwQc"},
{"content":{"body":"** a receiver-first call syntax","msgtype":"m.text"},"ts":1647649270444,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AjiPWl7_A2ULJy54xTzY5ONkbjJad70_OI39U5bmwPQ"},
{"content":{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y"}}},"ts":1647649397853,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y"},
{"content":{"body":"We did resolve in the post-plenary meeting, “In general, some overlap is okay, but too much is bad; we have to decide this on a case-by-case basis.”","msgtype":"m.text","org.matrix.msc1767.text":"We did resolve in the post-plenary meeting, “In general, some overlap is okay, but too much is bad; we have to decide this on a case-by-case basis.”"},"ts":1647649400562,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$mHbT8i_F9S3J4gN0gnXdMjHwSoCz5jnH4vK0ayK9SFc"},
{"content":{"body":"In this case, it seems to be “not really much loss, not really much gain, maybe punt to later”. I don’t have strong opinions on this issue myself, other than whatever it takes to garner the most support within Committee…","msgtype":"m.text","org.matrix.msc1767.text":"In this case, it seems to be “not really much loss, not really much gain, maybe punt to later”. I don’t have strong opinions on this issue myself, other than whatever it takes to garner the most support within Committee…"},"ts":1647649441766,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sFig0JK10LbepQWmfQ-AZH2lWOHKL8RwX32hgWr9F-M"},
{"content":{"body":"> <@ljharb:matrix.org> i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it\n\n * Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it</blockquote></mx-reply> * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","m.new_content":{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it\n\n * Because some other representatives (definitely TabAtkins, hence his call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$uhCfVw62fM-O56pehD4XHU4oYsYyfFsJh1-VNeVi14Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i am perfectly content to not have the binding form, but also it seems practically zero-cost to have, so I’m not sure why we’d drop it</blockquote></mx-reply> * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence his call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"ts":1647649459726,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d10Abtj9dd8ItvOzJTZKwDRF_mAGmaX3X9Vbses9QTA"},
{"content":{"body":"Persuading MM about bind-this’s worth is going to be important, because if we cannot persuade MM to not block bind-this, then JHD will block pipe operator…In the situation that we have, we must have both or neither.","msgtype":"m.text","org.matrix.msc1767.text":"Persuading MM about bind-this’s worth is going to be important, because if we cannot persuade MM to not block bind-this, then JHD will block pipe operator…In the situation that we have, we must have both or neither."},"ts":1647649521136,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xDGAeEg4z_KOrKFdOC_PjPPZXUxF56PfSP_BUFbmr3w"},
{"content":{"body":"sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy","msgtype":"m.text"},"ts":1647649544761,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58"},
{"content":{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58"}}},"ts":1647649616664,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DJ5LNStQg6QNFW0qMvQHRJzczQG3o5elFjK-gSp4b4g"},
{"content":{"body":"> <@ljharb:matrix.org> sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy\n\n * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy</blockquote></mx-reply> * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","m.new_content":{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","format":"org.matrix.custom.html","formatted_body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DJ5LNStQg6QNFW0qMvQHRJzczQG3o5elFjK-gSp4b4g","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy\n\n * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$M7OX5mv0HO9n7J3JRj0LWrx_h3qbkL1CqcTYWIenk58?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure, agreed. As long as i have one or the other syntax, in proper receiver-first order, I’m happy</blockquote></mx-reply> * Just to clarify: You had expressed in the January post-plenary meeting that you do greatly prefer bind-this (receiver first) to call-this (function first), but even call-this would be acceptable enough for you not to block the pipe operator. That’s still true, right?","mimetype":"text/html"}]},"ts":1647649626452,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xnGcmYAc4VFrKGzSHrKmBIZFxMUKbcTHafP8XYxvrbw"},
{"content":{"body":" * Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":" * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","m.new_content":{"body":"Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","format":"org.matrix.custom.html","formatted_body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":"Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$IuODnbjjg8GgjoEvGZoVgA9NxD_0MoeyIaJHaLD3I5Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Because some other representatives (definitely TabAtkins, hence their call-this syntax idea…maybe yulia | sick during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/plain"},{"body":" * Because some other representatives (definitely <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>, hence their call-this syntax idea…maybe <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a> during January plenary?) have expressed concerns about new proposals overlapping with each other – and the desire to minimize overlap between features where possible. So this may make it more palatable in that sense.","mimetype":"text/html"}]},"ts":1647649676849,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VkOBN9QuhrUaSbMjO-9xSfzPUfYXsNvDjqhbcqa9Qfk"},
{"content":{"body":"Yes, but i also don’t think call-this holds its syntax weight without receiver-first","msgtype":"m.text"},"ts":1647649894400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wFH6_toT0_U48YkOVKAbEDPSmV0KfG30cqM9RNjKGmw"},
{"content":{"body":"we already have .call for that","msgtype":"m.text"},"ts":1647649900050,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2rCQPehsYV3fNESPvXc4sxGU8JpJ1R13oVwESs3JcvU"},
{"content":{"body":"call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","msgtype":"m.text"},"ts":1647649954014,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yJXL1vn_mp7W1GYPFyA6nRIYJ4Lhlw5S0rLULLIU63U"},
{"content":{"body":"`.call` is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","format":"org.matrix.custom.html","formatted_body":"<code>.call</code> is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`.call` is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","mimetype":"text/plain"},{"body":"<code>.call</code> is still clunky; I’d make a conciseness argument there, especially for such a frequently used feature of the language.","mimetype":"text/html"}]},"ts":1647649955543,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tEY_dZsvvqqLWb5bY8jB-BI9Z-A1iIsWd_rpn30sQTU"},
{"content":{"body":"* call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","m.new_content":{"body":"call-this would provide the robustness i want, but without the aesthetics/ergonomics it deserves, iow","msgtype":"m.text"},"m.relates_to":{"event_id":"$yJXL1vn_mp7W1GYPFyA6nRIYJ4Lhlw5S0rLULLIU63U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1647649972945,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JF1bEz0rEIuf3h8Ni_qc989mSpisdqDIGBBgH5S572s"},
{"content":{"body":"If I drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”. \nTherefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If I drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If I drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”. \nTherefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If I drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and I will distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647650083638,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647650163378,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$799kwiwTZknysXspq7sKxWNGOCuKbLDVL1IKSlVfefA"},
{"content":{"body":"Justin Ridgewell: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.\n\nHowever, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting `this`-based functions for use with the “this” operator – rather than non-`this`-based functions for use with the pipe operator?\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.</p>\n<p>However, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting <code>this</code>-based functions for use with the “this” operator – rather than non-<code>this</code>-based functions for use with the pipe operator?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.\n\nHowever, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting `this`-based functions for use with the “this” operator – rather than non-`this`-based functions for use with the pipe operator?\n","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: You’ve expressed before the desire for object-oriented programmers to use less prototype methods and more individually exported functions. This is a big reason why you have supported adding the pipe operator. It’s part of a bigger shift in the ecosystem, e.g., with Firebase’s new JS API.</p>\n<p>However, if both the pipe operator and the “this” operator get added to the language…do you anticipate yourself or other programmers individually exporting <code>this</code>-based functions for use with the “this” operator – rather than non-<code>this</code>-based functions for use with the pipe operator?</p>\n","mimetype":"text/html"}]},"ts":1647651160950,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$d9aCONYqsl2069ntQiI-PDu6L5UPYlp4i7A6Rj5y2Hc"},
{"content":{"body":"I ask this because I anticipate viral ecosystem schism to continue being a (weak?) concern from Waldemar and maybe Tab and others. ","msgtype":"m.text","org.matrix.msc1767.text":"I ask this because I anticipate viral ecosystem schism to continue being a (weak?) concern from Waldemar and maybe Tab and others. "},"ts":1647651165600,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kJO0uDMjdU_AcoHn4YwF4AZmGgDEmVigonkmjvJ1wDA"},
{"content":{"body":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651190156,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0"},
{"content":{"body":" * We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","m.new_content":{"body":"We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"m.relates_to":{"event_id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We affirmed that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651193889,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UgcgjRGg7mZ5CDHA1J7ViyoHOPmx3525T0VzQMnMi_8"},
{"content":{"body":" * We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","m.new_content":{"body":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…","msgtype":"m.text","org.matrix.msc1767.text":"We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"m.relates_to":{"event_id":"$wls3TjD9rmeGx33Qd6UKKOa60TrZDeKBt2HZmVeAAV0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * We concluded that this concern was relatively weak in the post-plenary meeting, but it’s probably going to get brought up again…"},"ts":1647651201922,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9Pj414Jhi8TlvAzdZn-VOgPdsuLkSSjBCOCKtE-E8g4"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “call-this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651269786,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-QyKDUvZBJIvFOUHx0YwJsdHEU10Rcda3UAgmby-Uck"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator, and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651282611,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$h4OhP8VSnZQFpJx5mQOV-DZdS97be26Rt9Ol2WOXl_M"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-on operator”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651367155,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$o8UZ47CQQD5j096vjiJTzOsAWwSoRvmgpoz2cZbmyDw"},
{"content":{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","m.new_content":{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","format":"org.matrix.custom.html","formatted_body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":"If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pBEDCjPfRczw_JsELG37B4KA0xe9-m-p-WDTQQuyNBM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If we drop binding from `r :> f()`, then it no longer would make sense to call it “bind-this”.\nTherefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish `r :> f()` versus `f.@(r)` with “receiver first” versus “function first”.","mimetype":"text/plain"},{"body":" * If we drop binding from <code>r :&gt; f()</code>, then it no longer would make sense to call it “bind-this”.<br>Therefore I plan to start calling the proposal as a whole the “this” operator (“call-this”?), and we can continue to distinguish <code>r :&gt; f()</code> versus <code>f.@(r)</code> with “receiver first” versus “function first”.","mimetype":"text/html"}]},"ts":1647651420689,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QGcJMALOBg9x-ybYR556edayp7TvQAU9zrwiGiaWDNA"},
{"content":{"body":"TabAtkins: If we drop function binding from `rec :> fn()`, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: If we drop function binding from <code>rec :&gt; fn()</code>, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: If we drop function binding from `rec :> fn()`, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: If we drop function binding from <code>rec :&gt; fn()</code>, then the overlap with PFA syntax disappears. Is it okay if I call this new proposal “receiver-first call-this”, and change your idea to “function-first call-this”? I’m asking since you have first claim to the “call-first” name.","mimetype":"text/html"}]},"ts":1647652594361,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$B4YkUXGz52-Jg034lad5bzqxrERp2JvwppVqMzJ9VrY"},
{"content":{"body":"Yeah that's fine, I have no attachment to the proposal except as a way to thread the syntax needle","msgtype":"m.text"},"ts":1647652630644,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$bm20KXzTyWPKL2uUnEzMqJd8OEcUsSRx7Gk0mbxQR8U"},
{"content":{"body":"Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.","msgtype":"m.text","org.matrix.msc1767.text":"Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better."},"ts":1647656512420,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fxk8otU92esbjB766khdNCXCM2ORUQKOERAYBbXLR2Q"},
{"content":{"body":" * Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.","m.new_content":{"body":"Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.","msgtype":"m.text","org.matrix.msc1767.text":"Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better."},"m.relates_to":{"event_id":"$fxk8otU92esbjB766khdNCXCM2ORUQKOERAYBbXLR2Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better."},"ts":1647656537985,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dVDe2z9cqrs6driIOwZ-EjfPed-nkS1J0l0w1P2L1no"},
{"content":{"body":"Eg, imagine you already have a `const foo = new Foo()`","format":"org.matrix.custom.html","formatted_body":"Eg, imagine you already have a <code>const foo = new Foo()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Eg, imagine you already have a `const foo = new Foo()`","mimetype":"text/plain"},{"body":"Eg, imagine you already have a <code>const foo = new Foo()</code>","mimetype":"text/html"}]},"ts":1647656553960,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$a5a6WJEc-h5ycPiu0jZ8ZDPIvvNzaURcaZVAIHFJ66w"},
{"content":{"body":"If I do `foo :> b` (and I just typed `b`), and IDE could predict functions which receive a `Foo` instance","format":"org.matrix.custom.html","formatted_body":"If I do <code>foo :&gt; b</code> (and I just typed <code>b</code>), and IDE could predict functions which receive a <code>Foo</code> instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If I do `foo :> b` (and I just typed `b`), and IDE could predict functions which receive a `Foo` instance","mimetype":"text/plain"},{"body":"If I do <code>foo :&gt; b</code> (and I just typed <code>b</code>), and IDE could predict functions which receive a <code>Foo</code> instance","mimetype":"text/html"}]},"ts":1647656599281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6vg7-jtANE6YqmQyMe0iBh623JgVidhFLUAkK4tLMuc"},
{"content":{"body":"> <@jridgewell:matrix.org> Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.\n\nDo you anticipate that IDEs will add support for function suggestions after `|>`? I can certainly see that happening…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$fxk8otU92esbjB766khdNCXCM2ORUQKOERAYBbXLR2Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Yes, I&#39;d prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.</blockquote></mx-reply>Do you anticipate that IDEs will add support for function suggestions after <code>|&gt;</code>? I can certainly see that happening…","m.relates_to":{"m.in_reply_to":{"event_id":"$fxk8otU92esbjB766khdNCXCM2ORUQKOERAYBbXLR2Q"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Yes, I'd prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.\n\nDo you anticipate that IDEs will add support for function suggestions after `|>`? I can certainly see that happening…","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$fxk8otU92esbjB766khdNCXCM2ORUQKOERAYBbXLR2Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Yes, I&#39;d prefer this-based functions, because I think the IDE integration for a receiver first is considerably better.</blockquote></mx-reply>Do you anticipate that IDEs will add support for function suggestions after <code>|&gt;</code>? I can certainly see that happening…","mimetype":"text/html"}]},"ts":1647657024098,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SXm2CxxbSryHPi7NeDGeb_TkApXFJcbR5yKuHrHtg0A"},
{"content":{"body":"This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","format":"org.matrix.custom.html","formatted_body":"This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/plain"},{"body":"This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/html"}]},"ts":1647657042188,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60"},
{"content":{"body":" * This IDE-integration advantage unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","m.new_content":{"body":"This IDE-integration advantage unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","msgtype":"m.text","org.matrix.msc1767.text":"This IDE-integration advantage unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary."},"m.relates_to":{"event_id":"$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * This IDE-integration advantage unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary."},"ts":1647657046155,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WWBfkt-TYZSK0tc3hxuUF2N_w6ys4UoTvkZhDWtAowg"},
{"content":{"body":" * This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","format":"org.matrix.custom.html","formatted_body":" * This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","m.new_content":{"body":"This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","format":"org.matrix.custom.html","formatted_body":"This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/plain"},{"body":"This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/plain"},{"body":" * This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.","mimetype":"text/html"}]},"ts":1647657052783,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HBfNqUODFg-nMI9WyWlL_AC9W5-c1l4lzBM4A80Hu-E"},
{"content":{"body":"I think both will receive IDE support","msgtype":"m.text","org.matrix.msc1767.text":"I think both will receive IDE support"},"ts":1647657056314,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$INekJRZNJy2jansAN0SEHdJN5p_bnU7G2686YOmkUcM"},
{"content":{"body":"> <@jschoi:matrix.org> This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.\n\n…That is, it weakens my argument that the ecosystem-schism risk is low.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.</blockquote></mx-reply>…That is, it weakens my argument that the ecosystem-schism risk is low.","m.relates_to":{"m.in_reply_to":{"event_id":"$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> This IDE-integration advantage for `this`-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.\n\n…That is, it weakens my argument that the ecosystem-schism risk is low.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!mjlgwjKxWUpgSgeCQU:matrix.org/$_zJConT-QDzxZTymdmY5DmGi0k7Dc6rGOq-blvhhJ60?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>This IDE-integration advantage for <code>this</code>-based functions unfortunately somewhat weakens my argument. But I anticipate that the IDE advantage is going to be temporary.</blockquote></mx-reply>…That is, it weakens my argument that the ecosystem-schism risk is low.","mimetype":"text/html"}]},"ts":1647657078110,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Cs0BoCcfbEV3QpDhorm0wI81bXn3ZHwReA3iwf1fbfA"},
{"content":{"body":"But the pipeline operator's won't be as efficient because it could be _any_ function that has those starting letters","format":"org.matrix.custom.html","formatted_body":"But the pipeline operator's won't be as efficient because it could be <em>any</em> function that has those starting letters","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But the pipeline operator's won't be as efficient because it could be _any_ function that has those starting letters","mimetype":"text/plain"},{"body":"But the pipeline operator's won't be as efficient because it could be <em>any</em> function that has those starting letters","mimetype":"text/html"}]},"ts":1647657090930,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Nz4ulLNim2dDutinYrNZ1DbN85kk0IN00DXCoW-eFQ4"},
{"content":{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","format":"org.matrix.custom.html","formatted_body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","mimetype":"text/plain"},{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","mimetype":"text/html"}]},"ts":1647657102450,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$xeLvNrW74LF9e2J2-7b7pW_MTBa5rTH9lO6018v10QY"},
{"content":{"body":"With bind-op/call-op, it can narrow it down to functions with those starting letter that also use this type as the recevier","msgtype":"m.text","org.matrix.msc1767.text":"With bind-op/call-op, it can narrow it down to functions with those starting letter that also use this type as the recevier"},"ts":1647657119499,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_Gv-2ZmkMtf8StH0IQFoQadbmrs67B9LZZ2x-xklIzw"},
{"content":{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before `:>`.","format":"org.matrix.custom.html","formatted_body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before <code>:&gt;</code>.","m.new_content":{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before `:>`.","format":"org.matrix.custom.html","formatted_body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before <code>:&gt;</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before `:>`.","mimetype":"text/plain"},{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before <code>:&gt;</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xeLvNrW74LF9e2J2-7b7pW_MTBa5rTH9lO6018v10QY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before `:>`.","mimetype":"text/plain"},{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the part before <code>:&gt;</code>.","mimetype":"text/html"}]},"ts":1647657134228,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kdwhrbo-wu4t9CffDe4o4gmuEmhws09l25RK5eY1jQc"},
{"content":{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","format":"org.matrix.custom.html","formatted_body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","m.new_content":{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","format":"org.matrix.custom.html","formatted_body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","mimetype":"text/plain"},{"body":"It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xeLvNrW74LF9e2J2-7b7pW_MTBa5rTH9lO6018v10QY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before `:>`.","mimetype":"text/plain"},{"body":" * It would have to infer the typing of the pipe head in order to be able to filter them, yes. Though I’m not sure if that’s any different than having to infer the type of the expression before <code>:&gt;</code>.","mimetype":"text/html"}]},"ts":1647657145804,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$38kKsy8LClMqWCqJsTQcpe4nj6SRGTNTAdUj9zcnBis"},
{"content":{"body":"The `|>`'s argument can go anywhere","format":"org.matrix.custom.html","formatted_body":"The <code>|&gt;</code>'s argument can go anywhere","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `|>`'s argument can go anywhere","mimetype":"text/plain"},{"body":"The <code>|&gt;</code>'s argument can go anywhere","mimetype":"text/html"}]},"ts":1647657151291,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$efXZ3i3-xkUvnAzO3bHvNfKaxY9tnhZZHAHOjQhqpQ0"},
{"content":{"body":"Ah, I see, yes.","msgtype":"m.text","org.matrix.msc1767.text":"Ah, I see, yes."},"ts":1647657159458,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZrzXGk-uZ8fWDBI25X3F83fhLEVwsQAGo98FyDzVgA8"},
{"content":{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","format":"org.matrix.custom.html","formatted_body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","mimetype":"text/plain"},{"body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","mimetype":"text/html"}]},"ts":1647657172959,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FQaj7VlVPCsz2ZI7HoIMCXJGrKGhce3gHcw5sbntwxI"},
{"content":{"body":"With call-op, we know it's the recevier","msgtype":"m.text","org.matrix.msc1767.text":"With call-op, we know it's the recevier"},"ts":1647657182149,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2dmF4Me-EB6yBu-w_D8R_bH9RCyZ3DRXsApmeRuPh5Y"},
{"content":{"body":" * `##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third art, etc","format":"org.matrix.custom.html","formatted_body":" * <code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third art, etc","m.new_content":{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third art, etc","format":"org.matrix.custom.html","formatted_body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third art, etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third art, etc","mimetype":"text/plain"},{"body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third art, etc","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FQaj7VlVPCsz2ZI7HoIMCXJGrKGhce3gHcw5sbntwxI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third art, etc","mimetype":"text/plain"},{"body":" * <code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third art, etc","mimetype":"text/html"}]},"ts":1647657198137,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0OWLATOwdj9_1BvnZEuk1sYZRQBXutPNIGfHwBEQcwU"},
{"content":{"body":" * `##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","format":"org.matrix.custom.html","formatted_body":" * <code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","m.new_content":{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","format":"org.matrix.custom.html","formatted_body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","mimetype":"text/plain"},{"body":"<code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FQaj7VlVPCsz2ZI7HoIMCXJGrKGhce3gHcw5sbntwxI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `##.prop` access, `fn(##)` first arg, `fn(1, 2, ##)` third arg, etc","mimetype":"text/plain"},{"body":" * <code>##.prop</code> access, <code>fn(##)</code> first arg, <code>fn(1, 2, ##)</code> third arg, etc","mimetype":"text/html"}]},"ts":1647657203062,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IxQ-mnOarTEqWzTpeLKJnRcgvk9PUwxpcfPMbHB-FvU"},
{"content":{"body":"Okay, so with that, I think I’m going to have difficulty arguing that `:>` won’t encourage an ecosystem schism between libraries that export functions that use `this` and libraries whose functions do not use `this`…","format":"org.matrix.custom.html","formatted_body":"Okay, so with that, I think I’m going to have difficulty arguing that <code>:&gt;</code> won’t encourage an ecosystem schism between libraries that export functions that use <code>this</code> and libraries whose functions do not use <code>this</code>…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Okay, so with that, I think I’m going to have difficulty arguing that `:>` won’t encourage an ecosystem schism between libraries that export functions that use `this` and libraries whose functions do not use `this`…","mimetype":"text/plain"},{"body":"Okay, so with that, I think I’m going to have difficulty arguing that <code>:&gt;</code> won’t encourage an ecosystem schism between libraries that export functions that use <code>this</code> and libraries whose functions do not use <code>this</code>…","mimetype":"text/html"}]},"ts":1647657318110,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BtGngYYZhF-2RuMJFduZAQxI_T7rLRTXKZ_gG9C555s"},
{"content":{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","format":"org.matrix.custom.html","formatted_body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","mimetype":"text/plain"},{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","mimetype":"text/html"}]},"ts":1647657360644,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1XsyjKVwtFC3c4sSb6oA6Uz2XjmQBY5psk_Gq3jX9J8"},
{"content":{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`.”","format":"org.matrix.custom.html","formatted_body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>.”","m.new_content":{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`.”","format":"org.matrix.custom.html","formatted_body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>.”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`.”","mimetype":"text/plain"},{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>.”","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$1XsyjKVwtFC3c4sSb6oA6Uz2XjmQBY5psk_Gq3jX9J8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`.”","mimetype":"text/plain"},{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>.”","mimetype":"text/html"}]},"ts":1647657375661,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WMO2liifjNcI3dQtoIjJ3_LubUgrYLli2d6RvbswriA"},
{"content":{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","format":"org.matrix.custom.html","formatted_body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","m.new_content":{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","format":"org.matrix.custom.html","formatted_body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","mimetype":"text/plain"},{"body":"The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$1XsyjKVwtFC3c4sSb6oA6Uz2XjmQBY5psk_Gq3jX9J8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use `this`—which is already possible without `:>`—it would not be a big deal, because, when you have both `|>` and `:>`, you can fluently switch between the two styles in a flow of data by mixing `|>` and `:>`…just like how you can already mix `|>` and `.`.”","mimetype":"text/plain"},{"body":" * The best I may be able to argue might be: “Even if libraries appear that export functions that use <code>this</code>—which is already possible without <code>:&gt;</code>—it would not be a big deal, because, when you have both <code>|&gt;</code> and <code>:&gt;</code>, you can fluently switch between the two styles in a flow of data by mixing <code>|&gt;</code> and <code>:&gt;</code>…just like how you can already mix <code>|&gt;</code> and <code>.</code>.”","mimetype":"text/html"}]},"ts":1647657383386,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qmFarpsYFlstakzCvfRYe1_ZuoGX_y_O2ZrhtRxLKIE"},
{"content":{"body":"I think the schism already exists with prototype-based methods and free functions in pipeline?","msgtype":"m.text","org.matrix.msc1767.text":"I think the schism already exists with prototype-based methods and free functions in pipeline?"},"ts":1647657410405,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hPtDBVvj9XjMfFQGnR1-TfAEnnK2H2F7WbGi5jLfrLg"},
{"content":{"body":"If anything, this is closer to the way programmers write code in prototype-based APIs.","msgtype":"m.text","org.matrix.msc1767.text":"If anything, this is closer to the way programmers write code in prototype-based APIs."},"ts":1647657451239,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yBtMUdL6ICpctb9RufVe0DyGBihY7pNo594lykqboLc"},
{"content":{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","format":"org.matrix.custom.html","formatted_body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","mimetype":"text/plain"},{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","mimetype":"text/html"}]},"ts":1647657468305,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FvaNPB_4JChhXCWcPVAOyr31IhiHuFLa1SW1E0Bldjs"},
{"content":{"body":"Though I could try to argue that fluency would actually be improved by using both `|>` and `:>`…","format":"org.matrix.custom.html","formatted_body":"Though I could try to argue that fluency would actually be improved by using both <code>|&gt;</code> and <code>:&gt;</code>…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though I could try to argue that fluency would actually be improved by using both `|>` and `:>`…","mimetype":"text/plain"},{"body":"Though I could try to argue that fluency would actually be improved by using both <code>|&gt;</code> and <code>:&gt;</code>…","mimetype":"text/html"}]},"ts":1647657497643,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$jHXDGUL9XGNLuYYleyt4E6hCfzCi2R0yAxtlQ2y1c2A"},
{"content":{"body":"`a.b |> c(^^).d :> e() |> f().g`…\n","format":"org.matrix.custom.html","formatted_body":"<code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`a.b |> c(^^).d :> e() |> f().g`…\n","mimetype":"text/plain"},{"body":"<code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","mimetype":"text/html"}]},"ts":1647657544710,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FStI_a7pWXwXd0VAzenF8qa9_SdG3rvqlKC4gctTCtk"},
{"content":{"body":" * `a.b |> c(^^).d :> e() |> f().g`…\n","format":"org.matrix.custom.html","formatted_body":" * <code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","m.new_content":{"body":"`a.b |> c(^^).d :> e() |> f().g`…\n","format":"org.matrix.custom.html","formatted_body":"<code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`a.b |> c(^^).d :> e() |> f().g`…\n","mimetype":"text/plain"},{"body":"<code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FStI_a7pWXwXd0VAzenF8qa9_SdG3rvqlKC4gctTCtk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `a.b |> c(^^).d :> e() |> f().g`…\n","mimetype":"text/plain"},{"body":" * <code>a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>…","mimetype":"text/html"}]},"ts":1647657563358,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bKN2JBQbeuMhKmhNBBjk1KA-NCqJGbgs1agjShuTiGA"},
{"content":{"body":" * The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","format":"org.matrix.custom.html","formatted_body":" * The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","m.new_content":{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","format":"org.matrix.custom.html","formatted_body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","mimetype":"text/plain"},{"body":"The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FvaNPB_4JChhXCWcPVAOyr31IhiHuFLa1SW1E0Bldjs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported `this`-based functions (which are not common right now).","mimetype":"text/plain"},{"body":" * The argument, I believe, is that, while it already exists, it may worsen it by encouraging further creation of individually exported <code>this</code>-based functions (which are not common right now).","mimetype":"text/html"}]},"ts":1647657593944,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rcNDnAsmd6QZphpuLZW-i1oy_04UUIYmFoUGFsBggH0"},
{"content":{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…","format":"org.matrix.custom.html","formatted_body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…","m.new_content":{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…","format":"org.matrix.custom.html","formatted_body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…","mimetype":"text/plain"},{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jHXDGUL9XGNLuYYleyt4E6hCfzCi2R0yAxtlQ2y1c2A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…","mimetype":"text/plain"},{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…","mimetype":"text/html"}]},"ts":1647657616405,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qxfM_H5YPBRdEYWLHu7EJb1J2mQGjmpUEOvxsGo1JNY"},
{"content":{"body":" * `import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |> c(^^).d :> e() |> f().g`.","format":"org.matrix.custom.html","formatted_body":" * <code>import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>.","m.new_content":{"body":"`import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |> c(^^).d :> e() |> f().g`.","format":"org.matrix.custom.html","formatted_body":"<code>import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |> c(^^).d :> e() |> f().g`.","mimetype":"text/plain"},{"body":"<code>import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FStI_a7pWXwXd0VAzenF8qa9_SdG3rvqlKC4gctTCtk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |> c(^^).d :> e() |> f().g`.","mimetype":"text/plain"},{"body":" * <code>import { a, c, e, f } from 'A'; import { e } from 'B'; a.b |&gt; c(^^).d :&gt; e() |&gt; f().g</code>.","mimetype":"text/html"}]},"ts":1647657698434,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lJnT5M_NpIr7Is200rQT1TT8PSpGQwHvJSJ8UQJyv28"},
{"content":{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…That’s the best argument I got now.","format":"org.matrix.custom.html","formatted_body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…That’s the best argument I got now.","m.new_content":{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…That’s the best argument I got now.","format":"org.matrix.custom.html","formatted_body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…That’s the best argument I got now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…That’s the best argument I got now.","mimetype":"text/plain"},{"body":"Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…That’s the best argument I got now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$jHXDGUL9XGNLuYYleyt4E6hCfzCi2R0yAxtlQ2y1c2A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both `|>` and `:>`…That’s the best argument I got now.","mimetype":"text/plain"},{"body":" * Though I could try to argue that, even if libraries in that style may become more common, fluency would not be impacted when you can mix both <code>|&gt;</code> and <code>:&gt;</code>…That’s the best argument I got now.","mimetype":"text/html"}]},"ts":1647657713872,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$U2Dg3Hy0TWeO4QtgwbwPvDCbspGukP8PbOKsIc_Py7o"},
{"content":{"body":" * ```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f().g;\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f().g;\n</code></pre>\n","m.new_content":{"body":"```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f().g;\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f().g;\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f().g;\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f().g;\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FStI_a7pWXwXd0VAzenF8qa9_SdG3rvqlKC4gctTCtk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * ```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f().g;\n```","mimetype":"text/plain"},{"body":" * <pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f().g;\n</code></pre>\n","mimetype":"text/html"}]},"ts":1647657768268,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8Ba1GIyDB9jmcsi6y-t6M8bShWP3duOOcFxQ9AvxiQY"},
{"content":{"body":"You're missing a context token in the `f().g`","format":"org.matrix.custom.html","formatted_body":"You're missing a context token in the <code>f().g</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You're missing a context token in the `f().g`","mimetype":"text/plain"},{"body":"You're missing a context token in the <code>f().g</code>","mimetype":"text/html"}]},"ts":1647657791108,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xA9x8aKbe_WI01gWLgfrlFr_cGL5WBooHfJs3_MfgWo"},
{"content":{"body":" * ```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f(^^).g;\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f(^^).g;\n</code></pre>\n","m.new_content":{"body":"```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f(^^).g;\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f(^^).g;\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f(^^).g;\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f(^^).g;\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FStI_a7pWXwXd0VAzenF8qa9_SdG3rvqlKC4gctTCtk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * ```js\nimport { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |> c(^^).d :> e() |> f(^^).g;\n```","mimetype":"text/plain"},{"body":" * <pre><code class=\"language-js\">import { a, c, e, f } from 'A'; \nimport { e } from 'B'; \na.b |&gt; c(^^).d :&gt; e() |&gt; f(^^).g;\n</code></pre>\n","mimetype":"text/html"}]},"ts":1647657802309,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$N6NQrZra3N9E7CbXPOTgf7hNS3Pn6enNnFIgQw1rof8"},
{"content":{"body":"Fixed. Anyways, A there is a library exporting functions that don’t use `this`, and B is a library that exports functions that do use `this`.","format":"org.matrix.custom.html","formatted_body":"Fixed. Anyways, A there is a library exporting functions that don’t use <code>this</code>, and B is a library that exports functions that do use <code>this</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Fixed. Anyways, A there is a library exporting functions that don’t use `this`, and B is a library that exports functions that do use `this`.","mimetype":"text/plain"},{"body":"Fixed. Anyways, A there is a library exporting functions that don’t use <code>this</code>, and B is a library that exports functions that do use <code>this</code>.","mimetype":"text/html"}]},"ts":1647657829698,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$s-zn34T86tb3tQeGpEmwk8wWge3KIYBTM4qTbpJNUm8"},
{"content":{"body":"That’s the schism that Waldemar et al. are concerned about—that libraries like B would be encouraged, as you yourself would create—but maybe it would still be okay, since we can mix `|>` and `:>` in dataflows…?","format":"org.matrix.custom.html","formatted_body":"That’s the schism that Waldemar et al. are concerned about—that libraries like B would be encouraged, as you yourself would create—but maybe it would still be okay, since we can mix <code>|&gt;</code> and <code>:&gt;</code> in dataflows…?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That’s the schism that Waldemar et al. are concerned about—that libraries like B would be encouraged, as you yourself would create—but maybe it would still be okay, since we can mix `|>` and `:>` in dataflows…?","mimetype":"text/plain"},{"body":"That’s the schism that Waldemar et al. are concerned about—that libraries like B would be encouraged, as you yourself would create—but maybe it would still be okay, since we can mix <code>|&gt;</code> and <code>:&gt;</code> in dataflows…?","mimetype":"text/html"}]},"ts":1647657879394,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RF3LOBnqYetpPqkQw27xydQBFgGDjKJJuMhl0N7yjI0"},
{"content":{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","format":"org.matrix.custom.html","formatted_body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/plain"},{"body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/html"}]},"ts":1647657962052,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Y-L5AhEFL_5Lt6PTjh46_zCNShLuEk-mzHkddoVhNRo"},
{"content":{"body":" * (Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype `this`-using functions—would be even worse.)","format":"org.matrix.custom.html","formatted_body":" * (Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype <code>this</code>-using functions—would be even worse.)","m.new_content":{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype `this`-using functions—would be even worse.)","format":"org.matrix.custom.html","formatted_body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype <code>this</code>-using functions—would be even worse.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype `this`-using functions—would be even worse.)","mimetype":"text/plain"},{"body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype <code>this</code>-using functions—would be even worse.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Y-L5AhEFL_5Lt6PTjh46_zCNShLuEk-mzHkddoVhNRo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype `this`-using functions—would be even worse.)","mimetype":"text/plain"},{"body":" * (Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”, and that compounding it by making the third category—non-prototype <code>this</code>-using functions—would be even worse.)","mimetype":"text/html"}]},"ts":1647658000537,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MGBlvoDTRQf0hOF1AjFLzrlpvi4MiwQB_eumTf8Xe9U"},
{"content":{"body":" * (Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","format":"org.matrix.custom.html","formatted_body":" * (Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","m.new_content":{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","format":"org.matrix.custom.html","formatted_body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/plain"},{"body":"(Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Y-L5AhEFL_5Lt6PTjh46_zCNShLuEk-mzHkddoVhNRo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (Yes, this is similar to the ecosystem schism between ordinary `.` prototype method calls versus non-`this`-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype `this`-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/plain"},{"body":" * (Yes, this is similar to the ecosystem schism between ordinary <code>.</code> prototype method calls versus non-<code>this</code>-using function calls, but one could argue that this existing schism is already “bad”…and that compounding it by making the third category—non-prototype <code>this</code>-using functions—more common…would make the situation even worse. So I imagine they might say.)","mimetype":"text/html"}]},"ts":1647658030286,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4GGBm_m6khIDEUum5BOvVLTrn5QHRGHZ4w4-zU6qFew"},
{"content":{"body":" * Fixed. Anyways, `A` there is a library exporting functions that don’t use `this`, and `B` is a library that exports functions that do use `this`.","format":"org.matrix.custom.html","formatted_body":" * Fixed. Anyways, <code>A</code> there is a library exporting functions that don’t use <code>this</code>, and <code>B</code> is a library that exports functions that do use <code>this</code>.","m.new_content":{"body":"Fixed. Anyways, `A` there is a library exporting functions that don’t use `this`, and `B` is a library that exports functions that do use `this`.","format":"org.matrix.custom.html","formatted_body":"Fixed. Anyways, <code>A</code> there is a library exporting functions that don’t use <code>this</code>, and <code>B</code> is a library that exports functions that do use <code>this</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Fixed. Anyways, `A` there is a library exporting functions that don’t use `this`, and `B` is a library that exports functions that do use `this`.","mimetype":"text/plain"},{"body":"Fixed. Anyways, <code>A</code> there is a library exporting functions that don’t use <code>this</code>, and <code>B</code> is a library that exports functions that do use <code>this</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$s-zn34T86tb3tQeGpEmwk8wWge3KIYBTM4qTbpJNUm8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Fixed. Anyways, `A` there is a library exporting functions that don’t use `this`, and `B` is a library that exports functions that do use `this`.","mimetype":"text/plain"},{"body":" * Fixed. Anyways, <code>A</code> there is a library exporting functions that don’t use <code>this</code>, and <code>B</code> is a library that exports functions that do use <code>this</code>.","mimetype":"text/html"}]},"ts":1647658071670,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i4BtlQC-AHd56UT53kez28XM54mc6SevKsSu4rLQDSM"},
{"content":{"body":"I understand and sympathize a bit, but I think it's warranted in this case.","msgtype":"m.text","org.matrix.msc1767.text":"I understand and sympathize a bit, but I think it's warranted in this case."},"ts":1647658101875,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pQA76I6tL9HVTds0oPBftD1LUkkaJHjNQLrtSYqN5Xw"},
{"content":{"body":"The upside here for extremely efficient tree-shaking is massive","msgtype":"m.text","org.matrix.msc1767.text":"The upside here for extremely efficient tree-shaking is massive"},"ts":1647658198412,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WeSbb3v_kn2ycif28CFCuLNVpaq1tFlNWyJWyGytA_g"},
{"content":{"body":"The similarity with class-based approaches make ease-of-use pretty good","msgtype":"m.text","org.matrix.msc1767.text":"The similarity with class-based approaches make ease-of-use pretty good"},"ts":1647658232599,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kvWoup6QrQHSL_DPU9_J_FQWRSkNd0LtXcXCUM59emU"},
{"content":{"body":"Without the \"ideal\" syntax here, I worry that we won't reach that point","msgtype":"m.text","org.matrix.msc1767.text":"Without the \"ideal\" syntax here, I worry that we won't reach that point"},"ts":1647658284290,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nKBmeHvo1aP2EJE9pHbbU-e4NtQyD2e-lW3OalOBm1M"},
{"content":{"body":"Even with pipeline (which has a huge ergo benefit)","msgtype":"m.text","org.matrix.msc1767.text":"Even with pipeline (which has a huge ergo benefit)"},"ts":1647658297556,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$n4ZnOaYVQZUVTTPULfcNMH0WBWLTZxWoJXCSY1Y-sDg"},
{"content":{"body":"The backwards ordering and topic token are enough friction where people may continue to use prototype-based.","msgtype":"m.text","org.matrix.msc1767.text":"The backwards ordering and topic token are enough friction where people may continue to use prototype-based."},"ts":1647658328226,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TzKOX2YY1S45wlKssA3z2tndTEBIu-DJezBdHvGzQZc"},
{"content":{"body":" * The backwards ordering and topic token are enough friction where people may continue to use prototype-based.","m.new_content":{"body":"The backwards ordering and topic token are enough friction where people may continue to use prototype-based.","msgtype":"m.text","org.matrix.msc1767.text":"The backwards ordering and topic token are enough friction where people may continue to use prototype-based."},"m.relates_to":{"event_id":"$TzKOX2YY1S45wlKssA3z2tndTEBIu-DJezBdHvGzQZc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * The backwards ordering and topic token are enough friction where people may continue to use prototype-based."},"ts":1647658341718,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OQ_U4kX9KW5GT7Z88GPTx-xYlDPsll3lr996jSYmATs"},
{"content":{"body":"I would say that pipeline's ability to support receiver-first-arg style functions is the odd one out","msgtype":"m.text","org.matrix.msc1767.text":"I would say that pipeline's ability to support receiver-first-arg style functions is the odd one out"},"ts":1647658378757,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ofNfSpstJp9mabJ2LKi6fYS5gsPgBz8x5p1Q517L6SY"},
{"content":{"body":"That's the unneeded overlap","msgtype":"m.text","org.matrix.msc1767.text":"That's the unneeded overlap"},"ts":1647658403766,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FUsocVrWAWdz9icw1yo89wYE52Od7dGyY2Hb1OvTt8A"},
{"content":{"body":"Receiver-first-arg style functions?","msgtype":"m.text","org.matrix.msc1767.text":"Receiver-first-arg style functions?"},"ts":1647658427715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SH6qP-kg0e4lYd_k8Thh5paUjOsBiYEe2jg7E3fK_zM"},
{"content":{"body":"Instead of `function foo(this: Bar) {}`, accepting `Bar` as the first param: `function foo(rec: Bar) {}`","format":"org.matrix.custom.html","formatted_body":"Instead of <code>function foo(this: Bar) {}</code>, accepting <code>Bar</code> as the first param: <code>function foo(rec: Bar) {}</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Instead of `function foo(this: Bar) {}`, accepting `Bar` as the first param: `function foo(rec: Bar) {}`","mimetype":"text/plain"},{"body":"Instead of <code>function foo(this: Bar) {}</code>, accepting <code>Bar</code> as the first param: <code>function foo(rec: Bar) {}</code>","mimetype":"text/html"}]},"ts":1647658488406,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-MqMRLUvwe4kgp8FSs1i7v9_OA4HzXW_t7IA-1wZ5Dc"},
{"content":{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","format":"org.matrix.custom.html","formatted_body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","mimetype":"text/plain"},{"body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","mimetype":"text/html"}]},"ts":1647658613172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fk5UgNrc7MJzo-n_BGGzUVGskEEC3ru8yPhq8z3wDnk"},
{"content":{"body":" * Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`.","format":"org.matrix.custom.html","formatted_body":" * Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>.","m.new_content":{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`.","format":"org.matrix.custom.html","formatted_body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`.","mimetype":"text/plain"},{"body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fk5UgNrc7MJzo-n_BGGzUVGskEEC3ru8yPhq8z3wDnk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`.","mimetype":"text/plain"},{"body":" * Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>.","mimetype":"text/html"}]},"ts":1647658628330,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$G1eh4mSM-uqqwSExI4RHHLjb3ABZGwKlpseOP5PG070"},
{"content":{"body":" * Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","format":"org.matrix.custom.html","formatted_body":" * Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","m.new_content":{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","format":"org.matrix.custom.html","formatted_body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","mimetype":"text/plain"},{"body":"Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fk5UgNrc7MJzo-n_BGGzUVGskEEC3ru8yPhq8z3wDnk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Ah, functions that do not use `this` and which instead use arguments only. Well…surely you are not saying that all functions that do not use `this` are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like `console.log` or `parseInt`. Or with things like Lodash.","mimetype":"text/plain"},{"body":" * Ah, functions that do not use <code>this</code> and which instead use arguments only. Well…surely you are not saying that all functions that do not use <code>this</code> are non-idiomatic, are you? There are plenty of such functions in JavaScript core alone, like <code>console.log</code> or <code>parseInt</code>. Or with things like Lodash.","mimetype":"text/html"}]},"ts":1647658705673,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PcczRJPcRSSwp00rDfyL919Oh0aHxgzXshKFi9t3tic"},
{"content":{"body":"We already have this schism between functions that use `this` and functions that do not…and the pipe operator’s ability make the latter more fluent is crucial. ","format":"org.matrix.custom.html","formatted_body":"We already have this schism between functions that use <code>this</code> and functions that do not…and the pipe operator’s ability make the latter more fluent is crucial.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We already have this schism between functions that use `this` and functions that do not…and the pipe operator’s ability make the latter more fluent is crucial. ","mimetype":"text/plain"},{"body":"We already have this schism between functions that use <code>this</code> and functions that do not…and the pipe operator’s ability make the latter more fluent is crucial.","mimetype":"text/html"}]},"ts":1647658715931,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vevMmoLFWugGKNCnOxHuT-sYlFSeLrvjKSLuOqBwqTM"},
{"content":{"body":"In fact, I daresay most newly written functions nowadays might not use `this` at all…","format":"org.matrix.custom.html","formatted_body":"In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In fact, I daresay most newly written functions nowadays might not use `this` at all…","mimetype":"text/plain"},{"body":"In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","mimetype":"text/html"}]},"ts":1647658741048,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sNW-9kd9Wcdmx7WjB4eB0hBr0cETgE7TNoRKE5Eb_Wk"},
{"content":{"body":" * In fact, I daresay most newly written functions nowadays might not use `this` at all…","format":"org.matrix.custom.html","formatted_body":" * In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","m.new_content":{"body":"In fact, I daresay most newly written functions nowadays might not use `this` at all…","format":"org.matrix.custom.html","formatted_body":"In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In fact, I daresay most newly written functions nowadays might not use `this` at all…","mimetype":"text/plain"},{"body":"In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$sNW-9kd9Wcdmx7WjB4eB0hBr0cETgE7TNoRKE5Eb_Wk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * In fact, I daresay most newly written functions nowadays might not use `this` at all…","mimetype":"text/plain"},{"body":" * In fact, I daresay most newly written functions nowadays might not use <code>this</code> at all…","mimetype":"text/html"}]},"ts":1647658748433,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DRQgs9Yw0q45IWeW2aWF1SfvQT6gQYSq026-QZOA930"}
]