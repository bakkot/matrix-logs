[
{"content":{"body":"Yes, would like to do that if possible","msgtype":"m.text"},"ts":1648734311146,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$C3H3mfO7dDPRESZGDoblKbej3cxRYCnxfCrGLOkc5Oc"},
{"content":{"body":"Sorry for all of the last minute additions ðŸ˜…","msgtype":"m.text"},"ts":1648734324030,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$o3OtOZHWeFw0jAou39ElGcWRWIUbNzJyOrNfYrltJVc"},
{"content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734851978,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg"},
{"content":{"body":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734875525,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6khfEmHTt87vwNcc3v4J8sFCmJLY_f-CkG8AUxeKB4w"},
{"content":{"body":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734892690,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Qi41ACII7SDrGdl1ju-w7O4Jp5ba3R6s--cext7Ceus"},
{"content":{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/html"}]},"ts":1648734944136,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-3q7zvMDpD17RLuuEZSPHX1IkNn6TzOw-nrHUz2ab38"},
{"content":{"body":"*** Plenary begins in 3 mins! ***","msgtype":"m.text","org.matrix.msc1767.text":"*** Plenary begins in 3 mins! ***"},"ts":1648735045071,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$OVomhiwp4UTxL2fRH1rrnyIOAlc9R5HqcVXfMgaW3ko"},
{"content":{"body":"bakkot: thanks for the answer","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: thanks for the answer","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","mimetype":"text/html"}]},"ts":1648736918521,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gNp-fSvWWSscCInhNTwESaUk41Blsgcwd-RJSbWXJR8"},
{"content":{"body":"not familiar with that meaning of \"borrowability\"","msgtype":"m.text","org.matrix.msc1767.text":"not familiar with that meaning of \"borrowability\""},"ts":1648736962864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MlFFx1i7SFWfQH7NHAIrfeyWhkOKI6Dn3HD58CzZoQ8"},
{"content":{"body":"shu: \"borrowing\" a method and calling it on another instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: \"borrowing\" a method and calling it on another instance","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","mimetype":"text/html"}]},"ts":1648737243481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QSoUlrPP1KpyXg03OY9WVsl-w2SA-7rdPogXzxedNxU"},
{"content":{"body":"Richard Gibson: please mute","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: please mute","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","mimetype":"text/html"}]},"ts":1648737900963,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uJzhTzcxLHQnhNLbsgHbZI6n7-_85NF2cuqhaRG6hws"},
{"content":{"body":"Did we discuss whether arguments can branch on whether it has the internal slot?","msgtype":"m.text","org.matrix.msc1767.text":"Did we discuss whether arguments can branch on whether it has the internal slot?"},"ts":1648738106200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OccBLSD8_kUlRDI15pCLIwJ5WXOQlGNQlFBtnmDsI9Q"},
{"content":{"body":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set","msgtype":"m.text","org.matrix.msc1767.text":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set"},"ts":1648738145185,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RL0lhlc-vmLXbRr8upL3MC2a4jVGCzceXPUM6vxDtfs"},
{"content":{"body":"Justin Ridgewell: briefly during the presentation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: briefly during the presentation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","mimetype":"text/html"}]},"ts":1648738148794,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Acp0H70p18Hfog3OmmP1u9TF9jLYUVuuBuIVBVaJ0UQ"},
{"content":{"body":"haven't presented that explicitly, but yes, it's a possibility","msgtype":"m.text","org.matrix.msc1767.text":"haven't presented that explicitly, but yes, it's a possibility"},"ts":1648738151703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FRERSHd8HTYeRYX6GiFch-BE1BLqeQ6t4fJhIAJxq84"},
{"content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738157745,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8"},
{"content":{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","mimetype":"text/html"}]},"ts":1648738158495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upjKjspg_lnpPH0q6KTn397vrvQ8OgnfJ2aXCfEqLLA"},
{"content":{"body":" * This branches on whether the argument is a true TypedArray or an iterable","m.new_content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"m.relates_to":{"event_id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738165284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ddZCANQwe8lbyjOdqSsnvcsnbnPqzz3O8vHuYj0z4fw"},
{"content":{"body":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)","msgtype":"m.text","org.matrix.msc1767.text":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)"},"ts":1648738167922,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jDbhI0B7IibOONwFL8RJpl2YdDlOwICy3j9IGCQhi1Q"},
{"content":{"body":"We could have both a fast path and a customizable slow path","msgtype":"m.text","org.matrix.msc1767.text":"We could have both a fast path and a customizable slow path"},"ts":1648738180086,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$A_OQfwf14tdUJqWiTVBfmi8TYbZmVX57qPLp8u1qPt8"},
{"content":{"body":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot","msgtype":"m.text","org.matrix.msc1767.text":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot"},"ts":1648738201421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFGVVDK_tKHD7MWEt-GCxvsBo2GO9QOBX7Hef8vvxE4"},
{"content":{"body":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about","msgtype":"m.text","org.matrix.msc1767.text":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about"},"ts":1648738215553,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OR3_DSNvWOv3ZSo8yjqyPyYWFYb3jbSRgXu9fFfs8zM"},
{"content":{"body":"but without something like constructor hooks, that still breaks expected subclass invariants","msgtype":"m.text","org.matrix.msc1767.text":"but without something like constructor hooks, that still breaks expected subclass invariants"},"ts":1648738217422,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8KCkTpKmE7-9q5eZgCqdcd7TnhGO75r457YOSeKKi2Y"},
{"content":{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","format":"org.matrix.custom.html","formatted_body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","mimetype":"text/plain"},{"body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","mimetype":"text/html"}]},"ts":1648738222625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$31kX8T68OgjBCwOzflpPfq69kVo1IxWIRTeJ90j2xzA"},
{"content":{"body":"Ah, slide 10 discusses hybrid appraoch","msgtype":"m.text","org.matrix.msc1767.text":"Ah, slide 10 discusses hybrid appraoch"},"ts":1648738270743,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CRw_w0bgRpr7ZQfhdQoLwancIQMK_7_47G5EHBFoykw"},
{"content":{"body":"Sorry, I need to pay more attention","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, I need to pay more attention"},"ts":1648738280771,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CFF5_UFKFONa4NpaFXpRNzl9QJS_6JF5TwtRhP_nr7c"},
{"content":{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/html"}]},"ts":1648738645123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bLAynzk8frXgCbFNCf8nU18hZrVw1evJUbWHs7W8fME"},
{"content":{"body":"yes, will do","msgtype":"m.text","org.matrix.msc1767.text":"yes, will do"},"ts":1648738686216,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$K_3Z7glqRUjxnyPUgIURaB3h9GKQhCNFnFbR1PeGg38"},
{"content":{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/html"}]},"ts":1648738759807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gry30tg6oBzzTFmn0qs_HqbA1ErSItkhOm-IBNZE9mY"},
{"content":{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","format":"org.matrix.custom.html","formatted_body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","mimetype":"text/plain"},{"body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","mimetype":"text/html"}]},"ts":1648738776508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3uvI4Uu7oTY4wcK3L-aym5qvP5I-_Uv4Ej1uOSBDfrc"},
{"content":{"body":"and if the hooks are built in, now you can't avoid it","msgtype":"m.text","org.matrix.msc1767.text":"and if the hooks are built in, now you can't avoid it"},"ts":1648738784001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3dCZFqEEp7HRGe2sufMXCpVTa1SiFrou3XNHl8szX0"},
{"content":{"body":"so... seems bad?","msgtype":"m.text","org.matrix.msc1767.text":"so... seems bad?"},"ts":1648738786647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UlXS5_ZSHMmxY87MfcOYGxj2tdtX0SXeC_b1rkEcm3k"},
{"content":{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","format":"org.matrix.custom.html","formatted_body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","mimetype":"text/plain"},{"body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","mimetype":"text/html"}]},"ts":1648738807177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zAdCUP9KaH2GBSfxRazD9olHCloxxucvnNTbim7NQzw"},
{"content":{"body":"no, it's because i don't want to depend on the `add` method being present","format":"org.matrix.custom.html","formatted_body":"no, it's because i don't want to depend on the <code>add</code> method being present","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no, it's because i don't want to depend on the `add` method being present","mimetype":"text/plain"},{"body":"no, it's because i don't want to depend on the <code>add</code> method being present","mimetype":"text/html"}]},"ts":1648738833647,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7uq84C_5RY0m2UAfFV-8V62J3EpTEp6GmiHGtKcj1Jg"},
{"content":{"body":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine","msgtype":"m.text","org.matrix.msc1767.text":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine"},"ts":1648738852439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rclTRQLalyMLZpMbQv6pNGwaZyP5-WDEdmO8DcUjgmw"},
{"content":{"body":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely.","msgtype":"m.text","org.matrix.msc1767.text":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely."},"ts":1648738884883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tcPbRTEfO3jeO6pj5LW0LFZSf7DIOrKGfgzCr6qcLu8"},
{"content":{"body":"couldn't you just cache the methods off the instance?","msgtype":"m.text","org.matrix.msc1767.text":"couldn't you just cache the methods off the instance?"},"ts":1648738913370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_728BNOMLpycJ4Y-bwFwnHBU9N2IGg5l2_jJVijNmc"},
{"content":{"body":"my fn might be called with instances from N different subclasses, how would i cache them all","msgtype":"m.text","org.matrix.msc1767.text":"my fn might be called with instances from N different subclasses, how would i cache them all"},"ts":1648739002939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krwWA0XkJoGsk17W8TektUmUGN1jDVYOWPby-hbP1ws"},
{"content":{"body":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that","msgtype":"m.text","org.matrix.msc1767.text":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that"},"ts":1648739022386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MYMXiiveb2VK_yvUOr8EWKe6yXHcbh9hqgmyM5u6yCI"},
{"content":{"body":"so, wait, why do you not want to call the method when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"so, wait, why do you not want to call the method when it's passed to you"},"ts":1648739115719,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mt4IFw0SknjLrEcwRBa2_ZxNX6i1BK-54NcbL3ITyj8"},
{"content":{"body":"why can you trust it any more when the instance is crated than when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"why can you trust it any more when the instance is crated than when it's passed to you"},"ts":1648739125416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QKNG-N170YDydNRQrJanVDSOGBfggL8oqMxRIG3S3wk"},
{"content":{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","format":"org.matrix.custom.html","formatted_body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","mimetype":"text/plain"},{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","mimetype":"text/html"}]},"ts":1648739223362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sBsV6mgGZJ41mIi6mC0yEuIJnJ7z39q__a0FTJO0x-k"},
{"content":{"body":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one","msgtype":"m.text","org.matrix.msc1767.text":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one"},"ts":1648739249542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$23Vjqiuwi8wQP9QVGCJMF11L1F6p6vosdBipsYVTF6A"},
{"content":{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","format":"org.matrix.custom.html","formatted_body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/plain"},{"body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/html"}]},"ts":1648739333249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1zevfZoCjxw6NG8AeVe7Goz9BOamENbrNHbSw_K6-4U"},
{"content":{"body":"like a [[SetData]] -> set-like -> iterable fallback?","msgtype":"m.text","org.matrix.msc1767.text":"like a [[SetData]] -> set-like -> iterable fallback?"},"ts":1648739456105,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O6hvBlYXgXnrIxkCSOVLinqOntZQR7sh7Zwz33oCTdA"},
{"content":{"body":"I guess that wouldn't hurt","msgtype":"m.text","org.matrix.msc1767.text":"I guess that wouldn't hurt"},"ts":1648739461903,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vFIBtmxJx3fFAodHyO_pX1kmRz3SyT9JVioqji-cVfE"},
{"content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739464531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A"},
{"content":{"body":" * <hit enter too fast, one sec>","m.new_content":{"body":"<hit enter too fast, one sec>","msgtype":"m.text","org.matrix.msc1767.text":"<hit enter too fast, one sec>"},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * <hit enter too fast, one sec>"},"ts":1648739473752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XaVCqblF_PPd2mEVNrmgoRdBmyWUmY6tXD5pLcPj-yA"},
{"content":{"body":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.text":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"ts":1648739499457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZTKLZWYO33e5EAy1oga9ZpEDv0qlHuMf7Eg7vrHWD30"},
{"content":{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739505774,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5NeGmd4X_PYOOmXnxh3H_bLhc2oJBS5tbnIV2O5V4wE"},
{"content":{"body":"really? how can that be true?","msgtype":"m.text","org.matrix.msc1767.text":"really? how can that be true?"},"ts":1648739637638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FS_96hXKcvU0Onf6t6NgfTXS41a93VUY5nUmC3bDrro"},
{"content":{"body":"as long as you delete them after the app is initialized, it should keep working just fine","msgtype":"m.text","org.matrix.msc1767.text":"as long as you delete them after the app is initialized, it should keep working just fine"},"ts":1648739889538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KiDm0YORrVRuqMvTPtyj0dXdFKBUkeBtPgkt_78P3ik"},
{"content":{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","format":"org.matrix.custom.html","formatted_body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","mimetype":"text/plain"},{"body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","mimetype":"text/html"}]},"ts":1648739930917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"},
{"content":{"body":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break","msgtype":"m.text","org.matrix.msc1767.text":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break"},"ts":1648739953345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"},
{"content":{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/html"}]},"ts":1648740106948,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FQscr3lKAWtZAUk2l9MJ99oAoq5kjKdLdyukLYOvWco"},
{"content":{"body":"and it sounds like we're mostly leaning toward discouraging subclassing","msgtype":"m.text","org.matrix.msc1767.text":"and it sounds like we're mostly leaning toward discouraging subclassing"},"ts":1648740129676,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$U1AE9zJSQ0BkpdxY2PtpRKOVMc56SJjCiLtgZx1v8Dk"},
{"content":{"body":"(also the constructor calls `add` lol)","format":"org.matrix.custom.html","formatted_body":"(also the constructor calls <code>add</code> lol)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also the constructor calls `add` lol)","mimetype":"text/plain"},{"body":"(also the constructor calls <code>add</code> lol)","mimetype":"text/html"}]},"ts":1648740310777,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SseKF7pty3CLONytMigJWXjq7dUtqMnroZFhIy6p5wE"},
{"content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"}}},"ts":1648740337140,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4"},
{"content":{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","m.new_content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"ts":1648740343129,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q8NNcLc18wHTzuJFQN5REYxnvYaphEjVWBpdeJV5RnE"},
{"content":{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/html"}]},"ts":1648740370729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LoehH7EbajJP0Ye5NNesl0hhUvl4wjFqXYzG88o8W-I"},
{"content":{"body":"oh i see, yeah i think that style is vanishingly rare","msgtype":"m.text","org.matrix.msc1767.text":"oh i see, yeah i think that style is vanishingly rare"},"ts":1648740371609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$stuCPMcrw9w_0-YnENi9Mzj7DIO3fDJw-xbUBQjsZjA"},
{"content":{"body":"it very much is","msgtype":"m.text","org.matrix.msc1767.text":"it very much is"},"ts":1648740377472,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d12oNu3KdwVBQkEFWrgLj5htlFn6Oz3yO3I6T0ZpS2g"},
{"content":{"body":"you literally never lookup on the prototype?","msgtype":"m.text","org.matrix.msc1767.text":"you literally never lookup on the prototype?"},"ts":1648740380818,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BG54z1VzRInTyiDmKKl1kuj7XmJbrcNQJvnZ1ccBlUY"},
{"content":{"body":"you cache every single thing?","msgtype":"m.text","org.matrix.msc1767.text":"you cache every single thing?"},"ts":1648740384416,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zlIIXqoxe4i9I1_Dpi4r-_nMlhK0xeh5Z1vLZi-RVGI"},
{"content":{"body":"yep, only at module level","msgtype":"m.text","org.matrix.msc1767.text":"yep, only at module level"},"ts":1648740389123,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lv41sLgmBVnVKVs3gMc96npnaiozJRcmTjtulE_exIs"},
{"content":{"body":"in libraries, that is. in apps ofc i can have guarantees","msgtype":"m.text","org.matrix.msc1767.text":"in libraries, that is. in apps ofc i can have guarantees"},"ts":1648740403705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uca0SIPH67arcA01QSbHeACzfXzx-f9CC7fWwbpQcME"},
{"content":{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","mimetype":"text/html"}]},"ts":1648740404535,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cUqMlXmpSUOzXHEpfuVoP2md7BEAn-WhZokWIZlkr7w"},
{"content":{"body":"yeah I... do not want to optimize for this case","msgtype":"m.text","org.matrix.msc1767.text":"yeah I... do not want to optimize for this case"},"ts":1648740419008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mgPSKfeZOQbAeKATSQ3pqcvBruFodNrS3R3b9hUJrgA"},
{"content":{"body":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes.","msgtype":"m.text","org.matrix.msc1767.text":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes."},"ts":1648740456158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1PXT78Pxb-Y-C7jbhlWZM4oTtF5DFQ8g_x7z0d39q-g"},
{"content":{"body":"like your frozen set example","msgtype":"m.text","org.matrix.msc1767.text":"like your frozen set example"},"ts":1648740467946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EwojQW7LuNQBsabcqjYwtRbRmhXpre3HeVjQm9F6lcc"},
{"content":{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","mimetype":"text/html"}]},"ts":1648740498311,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yGwgujBqf9z7A3VRLzCQs57ThGtvEzU92g2p1nN8xTs"},
{"content":{"body":"i agree there isn't a single algebraic understanding","msgtype":"m.text","org.matrix.msc1767.text":"i agree there isn't a single algebraic understanding"},"ts":1648740511692,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2u3H6zAqcQ3fqivGo0w7cO8W8uMyY2sUWOS1LAjoYK0"},
{"content":{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","format":"org.matrix.custom.html","formatted_body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","mimetype":"text/plain"},{"body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","mimetype":"text/html"}]},"ts":1648740521393,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iCAkybp7yEstTlYHseN1PM1awBRc1oBg3RULO0n1dtY"},
{"content":{"body":"sure, but that's still limiting","msgtype":"m.text","org.matrix.msc1767.text":"sure, but that's still limiting"},"ts":1648740533567,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Bs_o8-JSizPNV7JGeb3HgejEJ5OGHtkMJj0IFkMaA_w"},
{"content":{"body":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra","msgtype":"m.text","org.matrix.msc1767.text":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra"},"ts":1648740583946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p-XiCzG5NjcYFr6qZZu6c_qEyiWKRM3ZKtCA-9zBzkE"},
{"content":{"body":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide","msgtype":"m.text","org.matrix.msc1767.text":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide"},"ts":1648740604801,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dtpSx7wI49WMVdY_ljD_EdmTDmVW-4_H5delgTm1IyE"},
{"content":{"body":"and that's the division in my mind","msgtype":"m.text","org.matrix.msc1767.text":"and that's the division in my mind"},"ts":1648740612711,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4br-t2RpM_j22PlRtVhHQGYEx1R9ZstwQG4JBgGVkOI"},
{"content":{"body":"shu: are you willing to maintain two radically different Set implementations though?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: are you willing to maintain two radically different Set implementations though?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","mimetype":"text/html"}]},"ts":1648740616726,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VQQz8v7rTl5xC8fWYCx12gs5s6gcVPuqVbyqk9OG5no"},
{"content":{"body":"i don't follow","msgtype":"m.text","org.matrix.msc1767.text":"i don't follow"},"ts":1648740626988,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iwZ8cEgPbnjQvZHGapgtXdHLJQmsgSuAhUOqy7C-czI"},
{"content":{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","mimetype":"text/html"}]},"ts":1648740669111,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WzPfvXBT5zbdoAuJGeR3WOQlCM0RQZxVuz8tdQYbG8I"},
{"content":{"body":"you mean, a fast path for builtin and a slow path for overridden?","msgtype":"m.text"},"ts":1648740670211,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$iHGlG7-mqdQCls4MuuGF8-GzFg_obvq4iLJpQbQ3gYQ"},
{"content":{"body":"Michael Ficarra: i mean depends on the algebra right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: i mean depends on the algebra right?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","mimetype":"text/html"}]},"ts":1648740707087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3sbLxLBjpLYLogs2GtfMSmSEsCirY2q3l_XEBLSgSQM"},
{"content":{"body":"actually i'm not sure what we're discussing anymore","msgtype":"m.text","org.matrix.msc1767.text":"actually i'm not sure what we're discussing anymore"},"ts":1648740733421,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y4fE_GFiCBn7rYTYxb3Qni9__TdLe70NBs-0Opl_xIE"},
{"content":{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/html"}]},"ts":1648740736112,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_K_5-F1be6xC9kzLV0U_LFrpxlKowhk8hktgSxFXHbQ"},
{"content":{"body":"shu: a motivating question: is `clear` part of the minimal core","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: a motivating question: is `clear` part of the minimal core","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","mimetype":"text/html"}]},"ts":1648740739068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2aeNHFYXXpDWFEqAbBhWN_Cktv5D_lEWWt-M4ca7Dc4"},
{"content":{"body":"it is clearly possible in terms of iteration/`delete`","format":"org.matrix.custom.html","formatted_body":"it is clearly possible in terms of iteration/<code>delete</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it is clearly possible in terms of iteration/`delete`","mimetype":"text/plain"},{"body":"it is clearly possible in terms of iteration/<code>delete</code>","mimetype":"text/html"}]},"ts":1648740750767,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DmxCj8PebvsDqN7rn5tdomGSXnA3w6NmrLhdpOTxEY8"},
{"content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"ts":1648740756042,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1648740762759,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4cF0IDBz-ysle7c41jI94lLZDAdYC4ve9cSgFvNV5lU"},
{"content":{"body":" * what does that do, in-place emptying?","m.new_content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"m.relates_to":{"event_id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * what does that do, in-place emptying?"},"ts":1648740765186,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IWKMeXQQG3N2sTCRmv9lBaWdDDknUBBoDeH3c8ZD5vE"},
{"content":{"body":"okay","msgtype":"m.text","org.matrix.msc1767.text":"okay"},"ts":1648740768303,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0ciXjM2-fX2fzlwtRqU4qYJ5290haV0NApsMzeAWqGE"},
{"content":{"body":"good question, i'd say yes","msgtype":"m.text","org.matrix.msc1767.text":"good question, i'd say yes"},"ts":1648740784272,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hQWrtqw0DDmanaJ6EftUtkjamFITAh0Mey_MHsTWGaI"},
{"content":{"body":"don't write per-item finalizing logic","msgtype":"m.text","org.matrix.msc1767.text":"don't write per-item finalizing logic"},"ts":1648740791296,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EI4i5FZb6yxR3sSuWirUZM2Ar_xDOcV4dHct7oXet_8"},
{"content":{"body":"bad idea","msgtype":"m.text","org.matrix.msc1767.text":"bad idea"},"ts":1648740792015,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OROv-EOUuIiWmIlw_Zn3AE3fdCer9Rr0NmnQyiyoFBs"},
{"content":{"body":"fwiw I find Temporal.TimeZone a reasonable case for a minimal core of methods","msgtype":"m.text"},"ts":1648740816748,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ucbGpJIpWH0AxuuK28lKsbGYO0ORQeTomVhEJuT6Jy4"},
{"content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"ts":1648740837510,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8"},
{"content":{"body":" * if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":" * if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","m.new_content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"m.relates_to":{"event_id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648740845184,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$jcbKst7maMPUIu_8zLVM03uO8YcSj4ArTGxp3kMZk0g"},
{"content":{"body":"(which just calls `getPossibleInstantsFor()` and picks one of the values in the returned array based on the other parameter you give it)","format":"org.matrix.custom.html","formatted_body":"(which just calls <code>getPossibleInstantsFor()</code> and picks one of the values in the returned array based on the other parameter you give it)","msgtype":"m.text"},"ts":1648740875067,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$gycKIp36krrDuKKBiDfmWlYnIx8lQ4uRfHHB5nc-1rk"},
{"content":{"body":"I think TimeZone is definitely a \"higher-level\" built in, in the terminology used in the slides","msgtype":"m.text"},"ts":1648740907647,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$FhpllXUChMBZpx3YiafKHdlzYrxow7VwF8lB7qmrkpU"},
{"content":{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","mimetype":"text/html"}]},"ts":1648741682297,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-LzWeG5wUYu5t5dv0Ed6TeGtE9z0942MKlM-67Tblu8"},
{"content":{"body":"only one: the string identifier, e.g. `UTC` or `Europe/Berlin`","format":"org.matrix.custom.html","formatted_body":"only one: the string identifier, e.g. <code>UTC</code> or <code>Europe/Berlin</code>","msgtype":"m.text"},"ts":1648741734952,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ZVuaYFn-mlokFyH9g--5lvB5hYe10ikfxhW_K8aWtd4"},
{"content":{"body":"the default implementations of the methods aren't internal slots","msgtype":"m.text"},"ts":1648741766027,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$mk02e5D39iF0249oXnTKcwFUY2m9-9eHGFgrm1jipYc"},
{"content":{"body":"I think we could write it that way & the difference wouldn't be observable, but I'm not 100% sure off the top of my head","msgtype":"m.text"},"ts":1648741785122,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$2EMJWwgLUfZ7SHVDXs4oO2Bf9mT6QvWetRGQKv8WRgY"},
{"content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742114439,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg"},
{"content":{"body":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","m.new_content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"m.relates_to":{"event_id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742123476,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$O-C58HORErEcGQK1qYXeOxjQyOfPq_lccLphKBhPzHw"},
{"content":{"body":"FYI: The next discussion topic, holistic dataflow, doesnâ€™t have slidesâ€”instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/.","msgtype":"m.text","org.matrix.msc1767.text":"FYI: The next discussion topic, holistic dataflow, doesnâ€™t have slidesâ€”instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/."},"ts":1648742277888,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Bg8rJK3IWXVEUz54l5oAVHi1AUgZuI9RAGCwRStVVdc"},
{"content":{"body":"More decorators?","msgtype":"m.text","org.matrix.msc1767.text":"More decorators?"},"ts":1648742339056,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CmFuOCriniUwOnYYyphFWlBS42VXSpK_yvnv5OIzr2Q"},
{"content":{"body":"Justin Ridgewell: more decorators","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: more decorators","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","mimetype":"text/html"}]},"ts":1648742353751,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oAor9YbANRdid3ZARy61qtuMMhJPBAZo0-csVV88b9c"},
{"content":{"body":"MORE DECORATORS","msgtype":"m.text","org.matrix.msc1767.text":"MORE DECORATORS"},"ts":1648742441460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb89e26Kb3XzSpFu8NktMaRaKzEIC2oJ8z3iWOPdHYU"},
{"content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743044936,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg"},
{"content":{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","m.new_content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743168090,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wR83oF4tDsS8lZe-O6961GTe-OZdNUzhqarcWE-FzJg"},
{"content":{"body":"by replacing the class in a class constructor, maybe?","msgtype":"m.text","org.matrix.msc1767.text":"by replacing the class in a class constructor, maybe?"},"ts":1648743220653,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iiurxxHKOXL1F6BPc2_Ypdg7ONxtiwvehqzxZr6DVrI"},
{"content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743330073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss"},
{"content":{"body":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","m.new_content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"m.relates_to":{"event_id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743334240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SvwaJ9vShw9TkzRh-D3Mb-2SXUuV_gp8H79XhzkdfQs"},
{"content":{"body":"but you can indeed replace the class with a subclass which does that check","msgtype":"m.text","org.matrix.msc1767.text":"but you can indeed replace the class with a subclass which does that check"},"ts":1648743352899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZYgUtUFWdSjrIWpiTMywciaw9WwhIM5se5RNia2z-f0"},
{"content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743416852,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648743427787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n5rOobjvMLoSzvRVYKxy3SiX3oqELvTTOom4w4eekos"},
{"content":{"body":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","m.new_content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"m.relates_to":{"event_id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743428507,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$l1-erN8c6AuSgP4b-xt0kDvVS6TAY4Gu5Wlj2dsogWE"},
{"content":{"body":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)","msgtype":"m.text","org.matrix.msc1767.text":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)"},"ts":1648743466692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dqDfEdb6h-nUDbSqViWNMXxbdby02LGSk8zbBl8Lfhs"},
{"content":{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","format":"org.matrix.custom.html","formatted_body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","mimetype":"text/plain"},{"body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","mimetype":"text/html"}]},"ts":1648743476245,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MD30kFPqH4uPIoiYbSkQOhrZFDRLgRFiV2CDOSiVkCs"},
{"content":{"body":"how does that look in TS on fields?","msgtype":"m.text","org.matrix.msc1767.text":"how does that look in TS on fields?"},"ts":1648743721347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a6P7CWKPDJ4spiXb9VUudHWudzEk8buZG3nsLE0WGZc"},
{"content":{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648743837998,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6YUSG6MQIW30tnwt64zSVgcR1YFjGZ_PCLMvyH0iAvY"},
{"content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743911875,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0"},
{"content":{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","m.new_content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743933396,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cxYlwDwU9dp-uQuZN79TwaTiNguKSJGOixCE0hoMesg"},
{"content":{"body":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field","msgtype":"m.text","org.matrix.msc1767.text":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field"},"ts":1648745073074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$248LANg0AklYpDvgO3ihbKClPurf1JJcTAF6KOArQSo"}
]