[
{"content":{"body":"Yes, would like to do that if possible","msgtype":"m.text"},"ts":1648734311146,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$C3H3mfO7dDPRESZGDoblKbej3cxRYCnxfCrGLOkc5Oc"},
{"content":{"body":"Sorry for all of the last minute additions ðŸ˜…","msgtype":"m.text"},"ts":1648734324030,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$o3OtOZHWeFw0jAou39ElGcWRWIUbNzJyOrNfYrltJVc"},
{"content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734851978,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg"},
{"content":{"body":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734875525,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6khfEmHTt87vwNcc3v4J8sFCmJLY_f-CkG8AUxeKB4w"},
{"content":{"body":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734892690,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Qi41ACII7SDrGdl1ju-w7O4Jp5ba3R6s--cext7Ceus"},
{"content":{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/html"}]},"ts":1648734944136,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-3q7zvMDpD17RLuuEZSPHX1IkNn6TzOw-nrHUz2ab38"},
{"content":{"body":"*** Plenary begins in 3 mins! ***","msgtype":"m.text","org.matrix.msc1767.text":"*** Plenary begins in 3 mins! ***"},"ts":1648735045071,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$OVomhiwp4UTxL2fRH1rrnyIOAlc9R5HqcVXfMgaW3ko"},
{"content":{"body":"bakkot: thanks for the answer","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: thanks for the answer","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","mimetype":"text/html"}]},"ts":1648736918521,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gNp-fSvWWSscCInhNTwESaUk41Blsgcwd-RJSbWXJR8"},
{"content":{"body":"not familiar with that meaning of \"borrowability\"","msgtype":"m.text","org.matrix.msc1767.text":"not familiar with that meaning of \"borrowability\""},"ts":1648736962864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MlFFx1i7SFWfQH7NHAIrfeyWhkOKI6Dn3HD58CzZoQ8"},
{"content":{"body":"shu: \"borrowing\" a method and calling it on another instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: \"borrowing\" a method and calling it on another instance","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","mimetype":"text/html"}]},"ts":1648737243481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QSoUlrPP1KpyXg03OY9WVsl-w2SA-7rdPogXzxedNxU"},
{"content":{"body":"Richard Gibson: please mute","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: please mute","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","mimetype":"text/html"}]},"ts":1648737900963,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uJzhTzcxLHQnhNLbsgHbZI6n7-_85NF2cuqhaRG6hws"},
{"content":{"body":"Did we discuss whether arguments can branch on whether it has the internal slot?","msgtype":"m.text","org.matrix.msc1767.text":"Did we discuss whether arguments can branch on whether it has the internal slot?"},"ts":1648738106200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OccBLSD8_kUlRDI15pCLIwJ5WXOQlGNQlFBtnmDsI9Q"},
{"content":{"body":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set","msgtype":"m.text","org.matrix.msc1767.text":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set"},"ts":1648738145185,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RL0lhlc-vmLXbRr8upL3MC2a4jVGCzceXPUM6vxDtfs"},
{"content":{"body":"Justin Ridgewell: briefly during the presentation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: briefly during the presentation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","mimetype":"text/html"}]},"ts":1648738148794,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Acp0H70p18Hfog3OmmP1u9TF9jLYUVuuBuIVBVaJ0UQ"},
{"content":{"body":"haven't presented that explicitly, but yes, it's a possibility","msgtype":"m.text","org.matrix.msc1767.text":"haven't presented that explicitly, but yes, it's a possibility"},"ts":1648738151703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FRERSHd8HTYeRYX6GiFch-BE1BLqeQ6t4fJhIAJxq84"},
{"content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738157745,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8"},
{"content":{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","mimetype":"text/html"}]},"ts":1648738158495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upjKjspg_lnpPH0q6KTn397vrvQ8OgnfJ2aXCfEqLLA"},
{"content":{"body":" * This branches on whether the argument is a true TypedArray or an iterable","m.new_content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"m.relates_to":{"event_id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738165284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ddZCANQwe8lbyjOdqSsnvcsnbnPqzz3O8vHuYj0z4fw"},
{"content":{"body":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)","msgtype":"m.text","org.matrix.msc1767.text":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)"},"ts":1648738167922,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jDbhI0B7IibOONwFL8RJpl2YdDlOwICy3j9IGCQhi1Q"},
{"content":{"body":"We could have both a fast path and a customizable slow path","msgtype":"m.text","org.matrix.msc1767.text":"We could have both a fast path and a customizable slow path"},"ts":1648738180086,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$A_OQfwf14tdUJqWiTVBfmi8TYbZmVX57qPLp8u1qPt8"},
{"content":{"body":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot","msgtype":"m.text","org.matrix.msc1767.text":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot"},"ts":1648738201421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFGVVDK_tKHD7MWEt-GCxvsBo2GO9QOBX7Hef8vvxE4"},
{"content":{"body":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about","msgtype":"m.text","org.matrix.msc1767.text":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about"},"ts":1648738215553,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OR3_DSNvWOv3ZSo8yjqyPyYWFYb3jbSRgXu9fFfs8zM"},
{"content":{"body":"but without something like constructor hooks, that still breaks expected subclass invariants","msgtype":"m.text","org.matrix.msc1767.text":"but without something like constructor hooks, that still breaks expected subclass invariants"},"ts":1648738217422,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8KCkTpKmE7-9q5eZgCqdcd7TnhGO75r457YOSeKKi2Y"},
{"content":{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","format":"org.matrix.custom.html","formatted_body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","mimetype":"text/plain"},{"body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","mimetype":"text/html"}]},"ts":1648738222625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$31kX8T68OgjBCwOzflpPfq69kVo1IxWIRTeJ90j2xzA"},
{"content":{"body":"Ah, slide 10 discusses hybrid appraoch","msgtype":"m.text","org.matrix.msc1767.text":"Ah, slide 10 discusses hybrid appraoch"},"ts":1648738270743,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CRw_w0bgRpr7ZQfhdQoLwancIQMK_7_47G5EHBFoykw"},
{"content":{"body":"Sorry, I need to pay more attention","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, I need to pay more attention"},"ts":1648738280771,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CFF5_UFKFONa4NpaFXpRNzl9QJS_6JF5TwtRhP_nr7c"},
{"content":{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/html"}]},"ts":1648738645123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bLAynzk8frXgCbFNCf8nU18hZrVw1evJUbWHs7W8fME"},
{"content":{"body":"yes, will do","msgtype":"m.text","org.matrix.msc1767.text":"yes, will do"},"ts":1648738686216,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$K_3Z7glqRUjxnyPUgIURaB3h9GKQhCNFnFbR1PeGg38"},
{"content":{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/html"}]},"ts":1648738759807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gry30tg6oBzzTFmn0qs_HqbA1ErSItkhOm-IBNZE9mY"},
{"content":{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","format":"org.matrix.custom.html","formatted_body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","mimetype":"text/plain"},{"body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","mimetype":"text/html"}]},"ts":1648738776508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3uvI4Uu7oTY4wcK3L-aym5qvP5I-_Uv4Ej1uOSBDfrc"},
{"content":{"body":"and if the hooks are built in, now you can't avoid it","msgtype":"m.text","org.matrix.msc1767.text":"and if the hooks are built in, now you can't avoid it"},"ts":1648738784001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3dCZFqEEp7HRGe2sufMXCpVTa1SiFrou3XNHl8szX0"},
{"content":{"body":"so... seems bad?","msgtype":"m.text","org.matrix.msc1767.text":"so... seems bad?"},"ts":1648738786647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UlXS5_ZSHMmxY87MfcOYGxj2tdtX0SXeC_b1rkEcm3k"},
{"content":{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","format":"org.matrix.custom.html","formatted_body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","mimetype":"text/plain"},{"body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","mimetype":"text/html"}]},"ts":1648738807177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zAdCUP9KaH2GBSfxRazD9olHCloxxucvnNTbim7NQzw"},
{"content":{"body":"no, it's because i don't want to depend on the `add` method being present","format":"org.matrix.custom.html","formatted_body":"no, it's because i don't want to depend on the <code>add</code> method being present","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no, it's because i don't want to depend on the `add` method being present","mimetype":"text/plain"},{"body":"no, it's because i don't want to depend on the <code>add</code> method being present","mimetype":"text/html"}]},"ts":1648738833647,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7uq84C_5RY0m2UAfFV-8V62J3EpTEp6GmiHGtKcj1Jg"},
{"content":{"body":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine","msgtype":"m.text","org.matrix.msc1767.text":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine"},"ts":1648738852439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rclTRQLalyMLZpMbQv6pNGwaZyP5-WDEdmO8DcUjgmw"},
{"content":{"body":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely.","msgtype":"m.text","org.matrix.msc1767.text":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely."},"ts":1648738884883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tcPbRTEfO3jeO6pj5LW0LFZSf7DIOrKGfgzCr6qcLu8"},
{"content":{"body":"couldn't you just cache the methods off the instance?","msgtype":"m.text","org.matrix.msc1767.text":"couldn't you just cache the methods off the instance?"},"ts":1648738913370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_728BNOMLpycJ4Y-bwFwnHBU9N2IGg5l2_jJVijNmc"},
{"content":{"body":"my fn might be called with instances from N different subclasses, how would i cache them all","msgtype":"m.text","org.matrix.msc1767.text":"my fn might be called with instances from N different subclasses, how would i cache them all"},"ts":1648739002939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krwWA0XkJoGsk17W8TektUmUGN1jDVYOWPby-hbP1ws"},
{"content":{"body":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that","msgtype":"m.text","org.matrix.msc1767.text":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that"},"ts":1648739022386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MYMXiiveb2VK_yvUOr8EWKe6yXHcbh9hqgmyM5u6yCI"},
{"content":{"body":"so, wait, why do you not want to call the method when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"so, wait, why do you not want to call the method when it's passed to you"},"ts":1648739115719,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mt4IFw0SknjLrEcwRBa2_ZxNX6i1BK-54NcbL3ITyj8"},
{"content":{"body":"why can you trust it any more when the instance is crated than when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"why can you trust it any more when the instance is crated than when it's passed to you"},"ts":1648739125416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QKNG-N170YDydNRQrJanVDSOGBfggL8oqMxRIG3S3wk"},
{"content":{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","format":"org.matrix.custom.html","formatted_body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","mimetype":"text/plain"},{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","mimetype":"text/html"}]},"ts":1648739223362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sBsV6mgGZJ41mIi6mC0yEuIJnJ7z39q__a0FTJO0x-k"},
{"content":{"body":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one","msgtype":"m.text","org.matrix.msc1767.text":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one"},"ts":1648739249542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$23Vjqiuwi8wQP9QVGCJMF11L1F6p6vosdBipsYVTF6A"},
{"content":{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","format":"org.matrix.custom.html","formatted_body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/plain"},{"body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/html"}]},"ts":1648739333249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1zevfZoCjxw6NG8AeVe7Goz9BOamENbrNHbSw_K6-4U"}
]