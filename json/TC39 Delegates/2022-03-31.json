[
{"content":{"body":"Yes, would like to do that if possible","msgtype":"m.text"},"ts":1648734311146,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$C3H3mfO7dDPRESZGDoblKbej3cxRYCnxfCrGLOkc5Oc"},
{"content":{"body":"Sorry for all of the last minute additions 😅","msgtype":"m.text"},"ts":1648734324030,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$o3OtOZHWeFw0jAou39ElGcWRWIUbNzJyOrNfYrltJVc"},
{"content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734851978,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg"},
{"content":{"body":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734875525,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6khfEmHTt87vwNcc3v4J8sFCmJLY_f-CkG8AUxeKB4w"},
{"content":{"body":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734892690,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Qi41ACII7SDrGdl1ju-w7O4Jp5ba3R6s--cext7Ceus"},
{"content":{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/html"}]},"ts":1648734944136,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-3q7zvMDpD17RLuuEZSPHX1IkNn6TzOw-nrHUz2ab38"},
{"content":{"body":"*** Plenary begins in 3 mins! ***","msgtype":"m.text","org.matrix.msc1767.text":"*** Plenary begins in 3 mins! ***"},"ts":1648735045071,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$OVomhiwp4UTxL2fRH1rrnyIOAlc9R5HqcVXfMgaW3ko"},
{"content":{"body":"bakkot: thanks for the answer","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: thanks for the answer","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","mimetype":"text/html"}]},"ts":1648736918521,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gNp-fSvWWSscCInhNTwESaUk41Blsgcwd-RJSbWXJR8"},
{"content":{"body":"not familiar with that meaning of \"borrowability\"","msgtype":"m.text","org.matrix.msc1767.text":"not familiar with that meaning of \"borrowability\""},"ts":1648736962864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MlFFx1i7SFWfQH7NHAIrfeyWhkOKI6Dn3HD58CzZoQ8"},
{"content":{"body":"shu: \"borrowing\" a method and calling it on another instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: \"borrowing\" a method and calling it on another instance","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","mimetype":"text/html"}]},"ts":1648737243481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QSoUlrPP1KpyXg03OY9WVsl-w2SA-7rdPogXzxedNxU"},
{"content":{"body":"Richard Gibson: please mute","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: please mute","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","mimetype":"text/html"}]},"ts":1648737900963,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uJzhTzcxLHQnhNLbsgHbZI6n7-_85NF2cuqhaRG6hws"},
{"content":{"body":"Did we discuss whether arguments can branch on whether it has the internal slot?","msgtype":"m.text","org.matrix.msc1767.text":"Did we discuss whether arguments can branch on whether it has the internal slot?"},"ts":1648738106200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OccBLSD8_kUlRDI15pCLIwJ5WXOQlGNQlFBtnmDsI9Q"},
{"content":{"body":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set","msgtype":"m.text","org.matrix.msc1767.text":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set"},"ts":1648738145185,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RL0lhlc-vmLXbRr8upL3MC2a4jVGCzceXPUM6vxDtfs"},
{"content":{"body":"Justin Ridgewell: briefly during the presentation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: briefly during the presentation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","mimetype":"text/html"}]},"ts":1648738148794,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Acp0H70p18Hfog3OmmP1u9TF9jLYUVuuBuIVBVaJ0UQ"},
{"content":{"body":"haven't presented that explicitly, but yes, it's a possibility","msgtype":"m.text","org.matrix.msc1767.text":"haven't presented that explicitly, but yes, it's a possibility"},"ts":1648738151703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FRERSHd8HTYeRYX6GiFch-BE1BLqeQ6t4fJhIAJxq84"},
{"content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738157745,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8"},
{"content":{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","mimetype":"text/html"}]},"ts":1648738158495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upjKjspg_lnpPH0q6KTn397vrvQ8OgnfJ2aXCfEqLLA"},
{"content":{"body":" * This branches on whether the argument is a true TypedArray or an iterable","m.new_content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"m.relates_to":{"event_id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738165284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ddZCANQwe8lbyjOdqSsnvcsnbnPqzz3O8vHuYj0z4fw"},
{"content":{"body":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)","msgtype":"m.text","org.matrix.msc1767.text":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)"},"ts":1648738167922,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jDbhI0B7IibOONwFL8RJpl2YdDlOwICy3j9IGCQhi1Q"},
{"content":{"body":"We could have both a fast path and a customizable slow path","msgtype":"m.text","org.matrix.msc1767.text":"We could have both a fast path and a customizable slow path"},"ts":1648738180086,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$A_OQfwf14tdUJqWiTVBfmi8TYbZmVX57qPLp8u1qPt8"},
{"content":{"body":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot","msgtype":"m.text","org.matrix.msc1767.text":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot"},"ts":1648738201421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFGVVDK_tKHD7MWEt-GCxvsBo2GO9QOBX7Hef8vvxE4"},
{"content":{"body":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about","msgtype":"m.text","org.matrix.msc1767.text":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about"},"ts":1648738215553,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OR3_DSNvWOv3ZSo8yjqyPyYWFYb3jbSRgXu9fFfs8zM"},
{"content":{"body":"but without something like constructor hooks, that still breaks expected subclass invariants","msgtype":"m.text","org.matrix.msc1767.text":"but without something like constructor hooks, that still breaks expected subclass invariants"},"ts":1648738217422,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8KCkTpKmE7-9q5eZgCqdcd7TnhGO75r457YOSeKKi2Y"},
{"content":{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","format":"org.matrix.custom.html","formatted_body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","mimetype":"text/plain"},{"body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","mimetype":"text/html"}]},"ts":1648738222625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$31kX8T68OgjBCwOzflpPfq69kVo1IxWIRTeJ90j2xzA"},
{"content":{"body":"Ah, slide 10 discusses hybrid appraoch","msgtype":"m.text","org.matrix.msc1767.text":"Ah, slide 10 discusses hybrid appraoch"},"ts":1648738270743,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CRw_w0bgRpr7ZQfhdQoLwancIQMK_7_47G5EHBFoykw"},
{"content":{"body":"Sorry, I need to pay more attention","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, I need to pay more attention"},"ts":1648738280771,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CFF5_UFKFONa4NpaFXpRNzl9QJS_6JF5TwtRhP_nr7c"},
{"content":{"body":"pzuraq: Were you still planning to request extra time for decorators? It’s not in the TCQ agenda yet.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? It’s not in the TCQ agenda yet.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: Were you still planning to request extra time for decorators? It’s not in the TCQ agenda yet.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? It’s not in the TCQ agenda yet.","mimetype":"text/html"}]},"ts":1648738645123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bLAynzk8frXgCbFNCf8nU18hZrVw1evJUbWHs7W8fME"},
{"content":{"body":"yes, will do","msgtype":"m.text","org.matrix.msc1767.text":"yes, will do"},"ts":1648738686216,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$K_3Z7glqRUjxnyPUgIURaB3h9GKQhCNFnFbR1PeGg38"},
{"content":{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/html"}]},"ts":1648738759807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gry30tg6oBzzTFmn0qs_HqbA1ErSItkhOm-IBNZE9mY"},
{"content":{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","format":"org.matrix.custom.html","formatted_body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","mimetype":"text/plain"},{"body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","mimetype":"text/html"}]},"ts":1648738776508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3uvI4Uu7oTY4wcK3L-aym5qvP5I-_Uv4Ej1uOSBDfrc"},
{"content":{"body":"and if the hooks are built in, now you can't avoid it","msgtype":"m.text","org.matrix.msc1767.text":"and if the hooks are built in, now you can't avoid it"},"ts":1648738784001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3dCZFqEEp7HRGe2sufMXCpVTa1SiFrou3XNHl8szX0"},
{"content":{"body":"so... seems bad?","msgtype":"m.text","org.matrix.msc1767.text":"so... seems bad?"},"ts":1648738786647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UlXS5_ZSHMmxY87MfcOYGxj2tdtX0SXeC_b1rkEcm3k"},
{"content":{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","format":"org.matrix.custom.html","formatted_body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","mimetype":"text/plain"},{"body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","mimetype":"text/html"}]},"ts":1648738807177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zAdCUP9KaH2GBSfxRazD9olHCloxxucvnNTbim7NQzw"},
{"content":{"body":"no, it's because i don't want to depend on the `add` method being present","format":"org.matrix.custom.html","formatted_body":"no, it's because i don't want to depend on the <code>add</code> method being present","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no, it's because i don't want to depend on the `add` method being present","mimetype":"text/plain"},{"body":"no, it's because i don't want to depend on the <code>add</code> method being present","mimetype":"text/html"}]},"ts":1648738833647,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7uq84C_5RY0m2UAfFV-8V62J3EpTEp6GmiHGtKcj1Jg"},
{"content":{"body":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine","msgtype":"m.text","org.matrix.msc1767.text":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine"},"ts":1648738852439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rclTRQLalyMLZpMbQv6pNGwaZyP5-WDEdmO8DcUjgmw"},
{"content":{"body":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely.","msgtype":"m.text","org.matrix.msc1767.text":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely."},"ts":1648738884883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tcPbRTEfO3jeO6pj5LW0LFZSf7DIOrKGfgzCr6qcLu8"},
{"content":{"body":"couldn't you just cache the methods off the instance?","msgtype":"m.text","org.matrix.msc1767.text":"couldn't you just cache the methods off the instance?"},"ts":1648738913370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_728BNOMLpycJ4Y-bwFwnHBU9N2IGg5l2_jJVijNmc"},
{"content":{"body":"my fn might be called with instances from N different subclasses, how would i cache them all","msgtype":"m.text","org.matrix.msc1767.text":"my fn might be called with instances from N different subclasses, how would i cache them all"},"ts":1648739002939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krwWA0XkJoGsk17W8TektUmUGN1jDVYOWPby-hbP1ws"},
{"content":{"body":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that","msgtype":"m.text","org.matrix.msc1767.text":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that"},"ts":1648739022386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MYMXiiveb2VK_yvUOr8EWKe6yXHcbh9hqgmyM5u6yCI"},
{"content":{"body":"so, wait, why do you not want to call the method when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"so, wait, why do you not want to call the method when it's passed to you"},"ts":1648739115719,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mt4IFw0SknjLrEcwRBa2_ZxNX6i1BK-54NcbL3ITyj8"},
{"content":{"body":"why can you trust it any more when the instance is crated than when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"why can you trust it any more when the instance is crated than when it's passed to you"},"ts":1648739125416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QKNG-N170YDydNRQrJanVDSOGBfggL8oqMxRIG3S3wk"},
{"content":{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","format":"org.matrix.custom.html","formatted_body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","mimetype":"text/plain"},{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","mimetype":"text/html"}]},"ts":1648739223362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sBsV6mgGZJ41mIi6mC0yEuIJnJ7z39q__a0FTJO0x-k"},
{"content":{"body":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one","msgtype":"m.text","org.matrix.msc1767.text":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one"},"ts":1648739249542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$23Vjqiuwi8wQP9QVGCJMF11L1F6p6vosdBipsYVTF6A"},
{"content":{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","format":"org.matrix.custom.html","formatted_body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/plain"},{"body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/html"}]},"ts":1648739333249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1zevfZoCjxw6NG8AeVe7Goz9BOamENbrNHbSw_K6-4U"},
{"content":{"body":"like a [[SetData]] -> set-like -> iterable fallback?","msgtype":"m.text","org.matrix.msc1767.text":"like a [[SetData]] -> set-like -> iterable fallback?"},"ts":1648739456105,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O6hvBlYXgXnrIxkCSOVLinqOntZQR7sh7Zwz33oCTdA"},
{"content":{"body":"I guess that wouldn't hurt","msgtype":"m.text","org.matrix.msc1767.text":"I guess that wouldn't hurt"},"ts":1648739461903,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vFIBtmxJx3fFAodHyO_pX1kmRz3SyT9JVioqji-cVfE"},
{"content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739464531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A"},
{"content":{"body":" * <hit enter too fast, one sec>","m.new_content":{"body":"<hit enter too fast, one sec>","msgtype":"m.text","org.matrix.msc1767.text":"<hit enter too fast, one sec>"},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * <hit enter too fast, one sec>"},"ts":1648739473752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XaVCqblF_PPd2mEVNrmgoRdBmyWUmY6tXD5pLcPj-yA"},
{"content":{"body":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.text":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"ts":1648739499457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZTKLZWYO33e5EAy1oga9ZpEDv0qlHuMf7Eg7vrHWD30"},
{"content":{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739505774,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5NeGmd4X_PYOOmXnxh3H_bLhc2oJBS5tbnIV2O5V4wE"},
{"content":{"body":"really? how can that be true?","msgtype":"m.text","org.matrix.msc1767.text":"really? how can that be true?"},"ts":1648739637638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FS_96hXKcvU0Onf6t6NgfTXS41a93VUY5nUmC3bDrro"},
{"content":{"body":"as long as you delete them after the app is initialized, it should keep working just fine","msgtype":"m.text","org.matrix.msc1767.text":"as long as you delete them after the app is initialized, it should keep working just fine"},"ts":1648739889538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KiDm0YORrVRuqMvTPtyj0dXdFKBUkeBtPgkt_78P3ik"},
{"content":{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","format":"org.matrix.custom.html","formatted_body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","mimetype":"text/plain"},{"body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","mimetype":"text/html"}]},"ts":1648739930917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"},
{"content":{"body":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break","msgtype":"m.text","org.matrix.msc1767.text":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break"},"ts":1648739953345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"},
{"content":{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/html"}]},"ts":1648740106948,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FQscr3lKAWtZAUk2l9MJ99oAoq5kjKdLdyukLYOvWco"},
{"content":{"body":"and it sounds like we're mostly leaning toward discouraging subclassing","msgtype":"m.text","org.matrix.msc1767.text":"and it sounds like we're mostly leaning toward discouraging subclassing"},"ts":1648740129676,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$U1AE9zJSQ0BkpdxY2PtpRKOVMc56SJjCiLtgZx1v8Dk"},
{"content":{"body":"(also the constructor calls `add` lol)","format":"org.matrix.custom.html","formatted_body":"(also the constructor calls <code>add</code> lol)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also the constructor calls `add` lol)","mimetype":"text/plain"},{"body":"(also the constructor calls <code>add</code> lol)","mimetype":"text/html"}]},"ts":1648740310777,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SseKF7pty3CLONytMigJWXjq7dUtqMnroZFhIy6p5wE"},
{"content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"}}},"ts":1648740337140,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4"},
{"content":{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","m.new_content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"ts":1648740343129,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q8NNcLc18wHTzuJFQN5REYxnvYaphEjVWBpdeJV5RnE"},
{"content":{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/html"}]},"ts":1648740370729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LoehH7EbajJP0Ye5NNesl0hhUvl4wjFqXYzG88o8W-I"},
{"content":{"body":"oh i see, yeah i think that style is vanishingly rare","msgtype":"m.text","org.matrix.msc1767.text":"oh i see, yeah i think that style is vanishingly rare"},"ts":1648740371609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$stuCPMcrw9w_0-YnENi9Mzj7DIO3fDJw-xbUBQjsZjA"},
{"content":{"body":"it very much is","msgtype":"m.text","org.matrix.msc1767.text":"it very much is"},"ts":1648740377472,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d12oNu3KdwVBQkEFWrgLj5htlFn6Oz3yO3I6T0ZpS2g"},
{"content":{"body":"you literally never lookup on the prototype?","msgtype":"m.text","org.matrix.msc1767.text":"you literally never lookup on the prototype?"},"ts":1648740380818,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BG54z1VzRInTyiDmKKl1kuj7XmJbrcNQJvnZ1ccBlUY"},
{"content":{"body":"you cache every single thing?","msgtype":"m.text","org.matrix.msc1767.text":"you cache every single thing?"},"ts":1648740384416,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zlIIXqoxe4i9I1_Dpi4r-_nMlhK0xeh5Z1vLZi-RVGI"},
{"content":{"body":"yep, only at module level","msgtype":"m.text","org.matrix.msc1767.text":"yep, only at module level"},"ts":1648740389123,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lv41sLgmBVnVKVs3gMc96npnaiozJRcmTjtulE_exIs"},
{"content":{"body":"in libraries, that is. in apps ofc i can have guarantees","msgtype":"m.text","org.matrix.msc1767.text":"in libraries, that is. in apps ofc i can have guarantees"},"ts":1648740403705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uca0SIPH67arcA01QSbHeACzfXzx-f9CC7fWwbpQcME"},
{"content":{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","mimetype":"text/html"}]},"ts":1648740404535,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cUqMlXmpSUOzXHEpfuVoP2md7BEAn-WhZokWIZlkr7w"},
{"content":{"body":"yeah I... do not want to optimize for this case","msgtype":"m.text","org.matrix.msc1767.text":"yeah I... do not want to optimize for this case"},"ts":1648740419008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mgPSKfeZOQbAeKATSQ3pqcvBruFodNrS3R3b9hUJrgA"},
{"content":{"body":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes.","msgtype":"m.text","org.matrix.msc1767.text":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes."},"ts":1648740456158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1PXT78Pxb-Y-C7jbhlWZM4oTtF5DFQ8g_x7z0d39q-g"},
{"content":{"body":"like your frozen set example","msgtype":"m.text","org.matrix.msc1767.text":"like your frozen set example"},"ts":1648740467946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EwojQW7LuNQBsabcqjYwtRbRmhXpre3HeVjQm9F6lcc"},
{"content":{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","mimetype":"text/html"}]},"ts":1648740498311,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yGwgujBqf9z7A3VRLzCQs57ThGtvEzU92g2p1nN8xTs"},
{"content":{"body":"i agree there isn't a single algebraic understanding","msgtype":"m.text","org.matrix.msc1767.text":"i agree there isn't a single algebraic understanding"},"ts":1648740511692,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2u3H6zAqcQ3fqivGo0w7cO8W8uMyY2sUWOS1LAjoYK0"},
{"content":{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","format":"org.matrix.custom.html","formatted_body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","mimetype":"text/plain"},{"body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","mimetype":"text/html"}]},"ts":1648740521393,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iCAkybp7yEstTlYHseN1PM1awBRc1oBg3RULO0n1dtY"},
{"content":{"body":"sure, but that's still limiting","msgtype":"m.text","org.matrix.msc1767.text":"sure, but that's still limiting"},"ts":1648740533567,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Bs_o8-JSizPNV7JGeb3HgejEJ5OGHtkMJj0IFkMaA_w"},
{"content":{"body":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra","msgtype":"m.text","org.matrix.msc1767.text":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra"},"ts":1648740583946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p-XiCzG5NjcYFr6qZZu6c_qEyiWKRM3ZKtCA-9zBzkE"},
{"content":{"body":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide","msgtype":"m.text","org.matrix.msc1767.text":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide"},"ts":1648740604801,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dtpSx7wI49WMVdY_ljD_EdmTDmVW-4_H5delgTm1IyE"},
{"content":{"body":"and that's the division in my mind","msgtype":"m.text","org.matrix.msc1767.text":"and that's the division in my mind"},"ts":1648740612711,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4br-t2RpM_j22PlRtVhHQGYEx1R9ZstwQG4JBgGVkOI"},
{"content":{"body":"shu: are you willing to maintain two radically different Set implementations though?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: are you willing to maintain two radically different Set implementations though?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","mimetype":"text/html"}]},"ts":1648740616726,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VQQz8v7rTl5xC8fWYCx12gs5s6gcVPuqVbyqk9OG5no"},
{"content":{"body":"i don't follow","msgtype":"m.text","org.matrix.msc1767.text":"i don't follow"},"ts":1648740626988,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iwZ8cEgPbnjQvZHGapgtXdHLJQmsgSuAhUOqy7C-czI"},
{"content":{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","mimetype":"text/html"}]},"ts":1648740669111,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WzPfvXBT5zbdoAuJGeR3WOQlCM0RQZxVuz8tdQYbG8I"},
{"content":{"body":"you mean, a fast path for builtin and a slow path for overridden?","msgtype":"m.text"},"ts":1648740670211,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$iHGlG7-mqdQCls4MuuGF8-GzFg_obvq4iLJpQbQ3gYQ"},
{"content":{"body":"Michael Ficarra: i mean depends on the algebra right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: i mean depends on the algebra right?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","mimetype":"text/html"}]},"ts":1648740707087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3sbLxLBjpLYLogs2GtfMSmSEsCirY2q3l_XEBLSgSQM"},
{"content":{"body":"actually i'm not sure what we're discussing anymore","msgtype":"m.text","org.matrix.msc1767.text":"actually i'm not sure what we're discussing anymore"},"ts":1648740733421,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y4fE_GFiCBn7rYTYxb3Qni9__TdLe70NBs-0Opl_xIE"},
{"content":{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/html"}]},"ts":1648740736112,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_K_5-F1be6xC9kzLV0U_LFrpxlKowhk8hktgSxFXHbQ"},
{"content":{"body":"shu: a motivating question: is `clear` part of the minimal core","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: a motivating question: is `clear` part of the minimal core","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","mimetype":"text/html"}]},"ts":1648740739068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2aeNHFYXXpDWFEqAbBhWN_Cktv5D_lEWWt-M4ca7Dc4"},
{"content":{"body":"it is clearly possible in terms of iteration/`delete`","format":"org.matrix.custom.html","formatted_body":"it is clearly possible in terms of iteration/<code>delete</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it is clearly possible in terms of iteration/`delete`","mimetype":"text/plain"},{"body":"it is clearly possible in terms of iteration/<code>delete</code>","mimetype":"text/html"}]},"ts":1648740750767,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DmxCj8PebvsDqN7rn5tdomGSXnA3w6NmrLhdpOTxEY8"},
{"content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"ts":1648740756042,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1648740762759,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4cF0IDBz-ysle7c41jI94lLZDAdYC4ve9cSgFvNV5lU"},
{"content":{"body":" * what does that do, in-place emptying?","m.new_content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"m.relates_to":{"event_id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * what does that do, in-place emptying?"},"ts":1648740765186,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IWKMeXQQG3N2sTCRmv9lBaWdDDknUBBoDeH3c8ZD5vE"},
{"content":{"body":"okay","msgtype":"m.text","org.matrix.msc1767.text":"okay"},"ts":1648740768303,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0ciXjM2-fX2fzlwtRqU4qYJ5290haV0NApsMzeAWqGE"},
{"content":{"body":"good question, i'd say yes","msgtype":"m.text","org.matrix.msc1767.text":"good question, i'd say yes"},"ts":1648740784272,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hQWrtqw0DDmanaJ6EftUtkjamFITAh0Mey_MHsTWGaI"},
{"content":{"body":"don't write per-item finalizing logic","msgtype":"m.text","org.matrix.msc1767.text":"don't write per-item finalizing logic"},"ts":1648740791296,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EI4i5FZb6yxR3sSuWirUZM2Ar_xDOcV4dHct7oXet_8"},
{"content":{"body":"bad idea","msgtype":"m.text","org.matrix.msc1767.text":"bad idea"},"ts":1648740792015,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OROv-EOUuIiWmIlw_Zn3AE3fdCer9Rr0NmnQyiyoFBs"},
{"content":{"body":"fwiw I find Temporal.TimeZone a reasonable case for a minimal core of methods","msgtype":"m.text"},"ts":1648740816748,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ucbGpJIpWH0AxuuK28lKsbGYO0ORQeTomVhEJuT6Jy4"},
{"content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"ts":1648740837510,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8"},
{"content":{"body":" * if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":" * if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","m.new_content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"m.relates_to":{"event_id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648740845184,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$jcbKst7maMPUIu_8zLVM03uO8YcSj4ArTGxp3kMZk0g"},
{"content":{"body":"(which just calls `getPossibleInstantsFor()` and picks one of the values in the returned array based on the other parameter you give it)","format":"org.matrix.custom.html","formatted_body":"(which just calls <code>getPossibleInstantsFor()</code> and picks one of the values in the returned array based on the other parameter you give it)","msgtype":"m.text"},"ts":1648740875067,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$gycKIp36krrDuKKBiDfmWlYnIx8lQ4uRfHHB5nc-1rk"},
{"content":{"body":"I think TimeZone is definitely a \"higher-level\" built in, in the terminology used in the slides","msgtype":"m.text"},"ts":1648740907647,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$FhpllXUChMBZpx3YiafKHdlzYrxow7VwF8lB7qmrkpU"},
{"content":{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","mimetype":"text/html"}]},"ts":1648741682297,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-LzWeG5wUYu5t5dv0Ed6TeGtE9z0942MKlM-67Tblu8"},
{"content":{"body":"only one: the string identifier, e.g. `UTC` or `Europe/Berlin`","format":"org.matrix.custom.html","formatted_body":"only one: the string identifier, e.g. <code>UTC</code> or <code>Europe/Berlin</code>","msgtype":"m.text"},"ts":1648741734952,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ZVuaYFn-mlokFyH9g--5lvB5hYe10ikfxhW_K8aWtd4"},
{"content":{"body":"the default implementations of the methods aren't internal slots","msgtype":"m.text"},"ts":1648741766027,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$mk02e5D39iF0249oXnTKcwFUY2m9-9eHGFgrm1jipYc"},
{"content":{"body":"I think we could write it that way & the difference wouldn't be observable, but I'm not 100% sure off the top of my head","msgtype":"m.text"},"ts":1648741785122,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$2EMJWwgLUfZ7SHVDXs4oO2Bf9mT6QvWetRGQKv8WRgY"},
{"content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742114439,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg"},
{"content":{"body":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","m.new_content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"m.relates_to":{"event_id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742123476,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$O-C58HORErEcGQK1qYXeOxjQyOfPq_lccLphKBhPzHw"},
{"content":{"body":"FYI: The next discussion topic, holistic dataflow, doesn’t have slides—instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/.","msgtype":"m.text","org.matrix.msc1767.text":"FYI: The next discussion topic, holistic dataflow, doesn’t have slides—instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/."},"ts":1648742277888,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Bg8rJK3IWXVEUz54l5oAVHi1AUgZuI9RAGCwRStVVdc"},
{"content":{"body":"More decorators?","msgtype":"m.text","org.matrix.msc1767.text":"More decorators?"},"ts":1648742339056,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CmFuOCriniUwOnYYyphFWlBS42VXSpK_yvnv5OIzr2Q"},
{"content":{"body":"Justin Ridgewell: more decorators","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: more decorators","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","mimetype":"text/html"}]},"ts":1648742353751,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oAor9YbANRdid3ZARy61qtuMMhJPBAZo0-csVV88b9c"},
{"content":{"body":"MORE DECORATORS","msgtype":"m.text","org.matrix.msc1767.text":"MORE DECORATORS"},"ts":1648742441460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb89e26Kb3XzSpFu8NktMaRaKzEIC2oJ8z3iWOPdHYU"},
{"content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743044936,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg"},
{"content":{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","m.new_content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743168090,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wR83oF4tDsS8lZe-O6961GTe-OZdNUzhqarcWE-FzJg"},
{"content":{"body":"by replacing the class in a class constructor, maybe?","msgtype":"m.text","org.matrix.msc1767.text":"by replacing the class in a class constructor, maybe?"},"ts":1648743220653,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iiurxxHKOXL1F6BPc2_Ypdg7ONxtiwvehqzxZr6DVrI"},
{"content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743330073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss"},
{"content":{"body":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","m.new_content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"m.relates_to":{"event_id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743334240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SvwaJ9vShw9TkzRh-D3Mb-2SXUuV_gp8H79XhzkdfQs"},
{"content":{"body":"but you can indeed replace the class with a subclass which does that check","msgtype":"m.text","org.matrix.msc1767.text":"but you can indeed replace the class with a subclass which does that check"},"ts":1648743352899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZYgUtUFWdSjrIWpiTMywciaw9WwhIM5se5RNia2z-f0"},
{"content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743416852,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648743427787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n5rOobjvMLoSzvRVYKxy3SiX3oqELvTTOom4w4eekos"},
{"content":{"body":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","m.new_content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"m.relates_to":{"event_id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743428507,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$l1-erN8c6AuSgP4b-xt0kDvVS6TAY4Gu5Wlj2dsogWE"},
{"content":{"body":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)","msgtype":"m.text","org.matrix.msc1767.text":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)"},"ts":1648743466692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dqDfEdb6h-nUDbSqViWNMXxbdby02LGSk8zbBl8Lfhs"},
{"content":{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","format":"org.matrix.custom.html","formatted_body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","mimetype":"text/plain"},{"body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","mimetype":"text/html"}]},"ts":1648743476245,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MD30kFPqH4uPIoiYbSkQOhrZFDRLgRFiV2CDOSiVkCs"},
{"content":{"body":"how does that look in TS on fields?","msgtype":"m.text","org.matrix.msc1767.text":"how does that look in TS on fields?"},"ts":1648743721347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a6P7CWKPDJ4spiXb9VUudHWudzEk8buZG3nsLE0WGZc"},
{"content":{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648743837998,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6YUSG6MQIW30tnwt64zSVgcR1YFjGZ_PCLMvyH0iAvY"},
{"content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743911875,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0"},
{"content":{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","m.new_content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743933396,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cxYlwDwU9dp-uQuZN79TwaTiNguKSJGOixCE0hoMesg"},
{"content":{"body":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field","msgtype":"m.text","org.matrix.msc1767.text":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field"},"ts":1648745073074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$248LANg0AklYpDvgO3ihbKClPurf1JJcTAF6KOArQSo"},
{"content":{"body":"yeah, my example was weak. Usually the value being initialised is more complex and based on arguments being passed around","msgtype":"m.text","org.matrix.msc1767.text":"yeah, my example was weak. Usually the value being initialised is more complex and based on arguments being passed around"},"ts":1648745576676,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$F_Wya173NwyziQO8ULvBkvQr7Up6k6987aK-qyosCNM"},
{"content":{"body":"If TypeScript sees a direct assignment to the field in the constructor body (not a closure) then the assertion is not required","msgtype":"m.text","org.matrix.msc1767.text":"If TypeScript sees a direct assignment to the field in the constructor body (not a closure) then the assertion is not required"},"ts":1648745668577,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NJkda0snMl12lQWDSOkmlo66H1AU7wjAjpKzPtY73lY"},
{"content":{"body":"https://jschoi.org/22/es-dataflow/","msgtype":"m.text","org.matrix.msc1767.text":"https://jschoi.org/22/es-dataflow/"},"ts":1648746082443,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yD8YelFK-aCk0qIAvBwjHrrzTk1HHXbgwrrq280YY2E"},
{"content":{"body":"the module splitting thing is fake","msgtype":"m.text","org.matrix.msc1767.text":"the module splitting thing is fake"},"ts":1648746656932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6l99RC8cMbsUTiIiBqMlV8KqAMN8-4zypfQkj4EV_Pk"},
{"content":{"body":"we could totally optimize those cases in bundlers","msgtype":"m.text","org.matrix.msc1767.text":"we could totally optimize those cases in bundlers"},"ts":1648746665421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eCyNC1DdaElmiEVIEE55t2IgagP-PvBx22vdWpqbrPQ"},
{"content":{"body":"we just don't","msgtype":"m.text","org.matrix.msc1767.text":"we just don't"},"ts":1648746667613,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uF7IPynAtKYT3g2W2Afoxx4qZvC7BrYKy0MRPRmmNLM"},
{"content":{"body":"those cases = prototype-based fluent apis","msgtype":"m.text","org.matrix.msc1767.text":"those cases = prototype-based fluent apis"},"ts":1648746695979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vu1Yh3L1VDPzHoK_F8UD1c6UisS-kG2hhyNU8HWV8eU"},
{"content":{"body":"i understand that to mean bundlers don't want to build more sophisticated static analysis, which, yeah, sounds like they can try to?","msgtype":"m.text","org.matrix.msc1767.text":"i understand that to mean bundlers don't want to build more sophisticated static analysis, which, yeah, sounds like they can try to?"},"ts":1648746745041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_00s76-DgJU8dZNN0mZyiXdYnjtA-EbnXFUjwGb7jM8"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1648746752562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HIgPqY4ICayQJRnFxZ44jAr5284KH8NZbwaumTb9wmw"},
{"content":{"body":"you really need types for it to work","msgtype":"m.text","org.matrix.msc1767.text":"you really need types for it to work"},"ts":1648746756954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dZjEkR9w1icjHvUlyi2L5w54CNMGG1QFpKDCBt5l-ME"},
{"content":{"body":"We could (Closure can), but it's be incredibly hard (only TS has an equivalent type system and it's not a minifier)","msgtype":"m.text","org.matrix.msc1767.text":"We could (Closure can), but it's be incredibly hard (only TS has an equivalent type system and it's not a minifier)"},"ts":1648746766043,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HRuFeBeZZ1aN_rLDicAMjfIA5kRTK4Ql7iPV2C_ZdZw"},
{"content":{"body":"and it's true there are many cases where you can't figure it out","msgtype":"m.text","org.matrix.msc1767.text":"and it's true there are many cases where you can't figure it out"},"ts":1648746766534,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ULbi5Xx80p2dCzQyJiKc4iK2ii1LcibnAPoS-O3MAl4"},
{"content":{"body":"And there are tons of deopts.","msgtype":"m.text","org.matrix.msc1767.text":"And there are tons of deopts."},"ts":1648746771417,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iLvSuF0VD-yN0tZlXktQSqva2T-IX9t-49zF-_83Hoo"},
{"content":{"body":"A single cast, and elimination isn't guaranteed anymore.","msgtype":"m.text","org.matrix.msc1767.text":"A single cast, and elimination isn't guaranteed anymore."},"ts":1648746792024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jzFaFLVidqmoP-IM8Am2j-_G04bOPSsmvlVkL6y703U"},
{"content":{"body":"I don't think that's an acceptable \"we could but don't\"","msgtype":"m.text","org.matrix.msc1767.text":"I don't think that's an acceptable \"we could but don't\""},"ts":1648746813353,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GAgJl_WrIhnzm6tPjehacf3jPAYH-HBKfcMcY14KzjA"},
{"content":{"body":"so on paper the functional APIs have the exact same issue except the popular way to do it is simple enough (e.g. import foo and use foo without renaming or fancy namespace objects) to analyze?","msgtype":"m.text","org.matrix.msc1767.text":"so on paper the functional APIs have the exact same issue except the popular way to do it is simple enough (e.g. import foo and use foo without renaming or fancy namespace objects) to analyze?"},"ts":1648746863033,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dYJNOXK9nrqJ2QkxKF1CmaY5jvjQ-IWl6ohxaDA72Ok"},
{"content":{"body":"Static analysis is trivial to perform, and it's built into every minifier","msgtype":"m.text","org.matrix.msc1767.text":"Static analysis is trivial to perform, and it's built into every minifier"},"ts":1648746886529,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xec9ABK2w0RLqhaBEjZilxBdZhxjzso27LDY9nzj3-E"},
{"content":{"body":"the functional APIs are always possible to analyze unless you do a `* as x` import","format":"org.matrix.custom.html","formatted_body":"the functional APIs are always possible to analyze unless you do a <code>* as x</code> import","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the functional APIs are always possible to analyze unless you do a `* as x` import","mimetype":"text/plain"},{"body":"the functional APIs are always possible to analyze unless you do a <code>* as x</code> import","mimetype":"text/html"}]},"ts":1648746894646,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ncejG4mqy_omoINIujiNNO0xQMAG1qizFNNa1uYf770"},
{"content":{"body":"so the rules to learn to stay on the happy path are easier","msgtype":"m.text","org.matrix.msc1767.text":"so the rules to learn to stay on the happy path are easier"},"ts":1648746905556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MiIMdUm-HsoTSg6wSBSH3AMhDSlAq4riHe5P0hbjVeM"},
{"content":{"body":"Virtual dispatch requires types, and only Closure has a type system and minifier combined to do it.","msgtype":"m.text","org.matrix.msc1767.text":"Virtual dispatch requires types, and only Closure has a type system and minifier combined to do it."},"ts":1648746907101,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Aiahn7-75Sd2RjrK3FRD83-koCQCUDr93mwrqf_iu5M"},
{"content":{"body":"asked another way, functional APIs don't have complex flow like being passed to HOFs?","msgtype":"m.text","org.matrix.msc1767.text":"asked another way, functional APIs don't have complex flow like being passed to HOFs?"},"ts":1648746928046,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ymTm10uGXXSad9orPmICuVH8ewTaaBDFpBk2J22s6_I"},
{"content":{"body":"Namespace imports are DCEable depending on how it's used.","msgtype":"m.text","org.matrix.msc1767.text":"Namespace imports are DCEable depending on how it's used."},"ts":1648746933313,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ozzjCqJJK7cHmvW3kyPlkOEtjsPRdC_6o3dQ15MNydU"},
{"content":{"body":"the complex flow isn't the problem","msgtype":"m.text","org.matrix.msc1767.text":"the complex flow isn't the problem"},"ts":1648746944879,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AUmHZyN5JOCyme9wjGu0PtHH3BQeX8U0IpPnsNNpD_c"},
{"content":{"body":"If you do `ns.foo()`, it's easy to see only `foo` import is used","format":"org.matrix.custom.html","formatted_body":"If you do <code>ns.foo()</code>, it's easy to see only <code>foo</code> import is used","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you do `ns.foo()`, it's easy to see only `foo` import is used","mimetype":"text/plain"},{"body":"If you do <code>ns.foo()</code>, it's easy to see only <code>foo</code> import is used","mimetype":"text/html"}]},"ts":1648746946702,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kFRUHOLaxxboDBA0azJq3u1WUa5f0DT4lO5rjMQkUfU"},
{"content":{"body":"ehhh","msgtype":"m.text","org.matrix.msc1767.text":"ehhh"},"ts":1648746956407,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V9c8OQ7pZ4tjmD7Jg8cbqVfguUf_PLoNHSUVaNY0ofM"},
{"content":{"body":"what's the problem if not complex flow?","msgtype":"m.text","org.matrix.msc1767.text":"what's the problem if not complex flow?"},"ts":1648746966946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bEZzqIMrZz_KnWt-gCo6Q6jUygfDNi1guuw7YcpT2Ck"},
{"content":{"body":"namespace objects are exactly as difficult to analyze as OO-based modules","msgtype":"m.text","org.matrix.msc1767.text":"namespace objects are exactly as difficult to analyze as OO-based modules"},"ts":1648746968877,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IfVVy76ct07uEOF41wrE8yozKxPvmNXfTnmTDi-ahA0"},
{"content":{"body":"If you do `Object.values()`, then it becomes dynamic and you can't DCE","format":"org.matrix.custom.html","formatted_body":"If you do <code>Object.values()</code>, then it becomes dynamic and you can't DCE","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you do `Object.values()`, then it becomes dynamic and you can't DCE","mimetype":"text/plain"},{"body":"If you do <code>Object.values()</code>, then it becomes dynamic and you can't DCE","mimetype":"text/html"}]},"ts":1648746969207,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0TLP3BiSay2IJV6EJugXvr0ZrZbInP6c3ZlQXa3rAdg"},
{"content":{"body":"Not at all","msgtype":"m.text","org.matrix.msc1767.text":"Not at all"},"ts":1648746977539,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HPTKKJimBOAcphtSwTzdbQNTNBAPS-nW6XQiRZDxnqo"},
{"content":{"body":"yes at all; they're the same thing","msgtype":"m.text","org.matrix.msc1767.text":"yes at all; they're the same thing"},"ts":1648746985245,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UGgsBbeYwBvwEJGHl7UxHwY6yDLE25Rd_keLsnic9sI"},
{"content":{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"ts":1648747022596,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FIID8ETgefVTKts8JZtksdU6bqFVccVBT9_IGYPB5B8"},
{"content":{"body":" * There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":" * There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","m.new_content":{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FIID8ETgefVTKts8JZtksdU6bqFVccVBT9_IGYPB5B8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":" * There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"ts":1648747031394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pezkqDV3_WzFVmusq1T9q9bGMBT_ZUZHspTU1BUFbd8"},
{"content":{"body":"you can pass `ns` imports around","format":"org.matrix.custom.html","formatted_body":"you can pass <code>ns</code> imports around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can pass `ns` imports around","mimetype":"text/plain"},{"body":"you can pass <code>ns</code> imports around","mimetype":"text/html"}]},"ts":1648747043935,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ly8FPF1n0W76QvBDuzgxwdWcz2yQhqMqs4pkjyifmtM"},
{"content":{"body":"and now they are dynamic variables bound to objects","msgtype":"m.text","org.matrix.msc1767.text":"and now they are dynamic variables bound to objects"},"ts":1648747054321,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tZFHnH6vrFSk4_Og2kKMGKlF5Zlrz1l_ofJg4k9sod0"},
{"content":{"body":"You can treat a namespace as an object with key-values, but that's not the norm for imports.","msgtype":"m.text","org.matrix.msc1767.text":"You can treat a namespace as an object with key-values, but that's not the norm for imports."},"ts":1648747061224,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lK3BQVCaApxe6flYTrUSQy0KBNn1B_NyLSUkqbaf44I"},
{"content":{"body":"Again, it depends on how it's used.","msgtype":"m.text","org.matrix.msc1767.text":"Again, it depends on how it's used."},"ts":1648747083131,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dJ336_1ds4QvLLMqf8_bgSajewx9bF70qAw48Xw2Mr4"},
{"content":{"body":"yeah.","msgtype":"m.text","org.matrix.msc1767.text":"yeah."},"ts":1648747089379,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gmeNg9umjALAQIAvtUGndcop_sKj9r0Xv_Krbp_xiXU"},
{"content":{"body":"that's what i'm asking, does it come down to norms","msgtype":"m.text","org.matrix.msc1767.text":"that's what i'm asking, does it come down to norms"},"ts":1648747100795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RsQLCzfsM0SqoPTAqGBS9wbBq4VgeatAQ2Ug1n9jVjE"},
{"content":{"body":"The point is it starts from a staticly analyzable point, so it can remain statically analyzable.","msgtype":"m.text","org.matrix.msc1767.text":"The point is it starts from a staticly analyzable point, so it can remain statically analyzable."},"ts":1648747104053,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZaoM2G_2ATJger6G_gmE7OIEGw3XqmKh2WddjqN64Aw"},
{"content":{"body":"shu: anyway, the problem is if you have something like\n\n```js\nfunction pretty(x) {\n  console.log(x.color())\n}\n```\n\nand `print(y)` gets called, anywhere in your code, then in order to eliminate a prototype method named `color` on some class you have to prove that no instance of the class is ever passed to `pretty`","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: anyway, the problem is if you have something like</p>\n<pre><code class=\"language-js\">function pretty(x) {\n  console.log(x.color())\n}\n</code></pre>\n<p>and <code>print(y)</code> gets called, anywhere in your code, then in order to eliminate a prototype method named <code>color</code> on some class you have to prove that no instance of the class is ever passed to <code>pretty</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: anyway, the problem is if you have something like\n\n```js\nfunction pretty(x) {\n  console.log(x.color())\n}\n```\n\nand `print(y)` gets called, anywhere in your code, then in order to eliminate a prototype method named `color` on some class you have to prove that no instance of the class is ever passed to `pretty`","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: anyway, the problem is if you have something like</p>\n<pre><code class=\"language-js\">function pretty(x) {\n  console.log(x.color())\n}\n</code></pre>\n<p>and <code>print(y)</code> gets called, anywhere in your code, then in order to eliminate a prototype method named <code>color</code> on some class you have to prove that no instance of the class is ever passed to <code>pretty</code></p>\n","mimetype":"text/html"}]},"ts":1648747148725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qi35evmaRsvBhkCf0OI2kiTu5MUyEia5sHmMyIzzETc"},
{"content":{"body":"now, IME that's fairly practical, but no one really implements that optimization","msgtype":"m.text","org.matrix.msc1767.text":"now, IME that's fairly practical, but no one really implements that optimization"},"ts":1648747161995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QudY9rvgJvyo7s6g1Ods__OUgfbAMHFvH-nbo9DaXfU"},
{"content":{"body":"bakkot: that is exactly the \"complex flow\" problem?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that is exactly the &quot;complex flow&quot; problem?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: that is exactly the \"complex flow\" problem?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that is exactly the &quot;complex flow&quot; problem?","mimetype":"text/html"}]},"ts":1648747166881,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jMZCRxP7GgjwCdSGILaUXpkCO1FgXJ-olPAg2ysV-Pg"},
{"content":{"body":"and it's true that there are places which become hard","msgtype":"m.text","org.matrix.msc1767.text":"and it's true that there are places which become hard"},"ts":1648747172762,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$unBtfbThSlSZzITEewC16yWZkZE133QsD10QcgIOzqE"},
{"content":{"body":"you gotta monomorphize and have some kind of class hierarchy analysis to eliminate","msgtype":"m.text","org.matrix.msc1767.text":"you gotta monomorphize and have some kind of class hierarchy analysis to eliminate"},"ts":1648747189140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L-ILrqZaciI_OqE1eO7lVJnz7Mzw4uKsc5VLE443hOo"},
{"content":{"body":"ah, sorry, I didn't realize that's what you meant","msgtype":"m.text","org.matrix.msc1767.text":"ah, sorry, I didn't realize that's what you meant"},"ts":1648747190219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dfLxg0_Ci91M4dFwLe3ghhAAgTAKfrxsdSR6iXUIlMA"},
{"content":{"body":"sorry yeah it's an unclear term","msgtype":"m.text","org.matrix.msc1767.text":"sorry yeah it's an unclear term"},"ts":1648747204594,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hh4CPokXKBO2SF924_KxOAtjAG4GkAH2hsy9L5SGS8E"},
{"content":{"body":"then yes, the complex flow is the problem, and FP doesn't have nearly as much of that particular kind of flow","msgtype":"m.text","org.matrix.msc1767.text":"then yes, the complex flow is the problem, and FP doesn't have nearly as much of that particular kind of flow"},"ts":1648747208486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q5EF8CN6YKVHsfJpS6-P6C0mmP23JksS33tppmYbPsw"},
{"content":{"body":"I like that we are acknowledging this ecosystem schism, I don't think we've really explicitly talked about this enough","msgtype":"m.text","org.matrix.msc1767.text":"I like that we are acknowledging this ecosystem schism, I don't think we've really explicitly talked about this enough"},"ts":1648747257864,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$icPAJ2BVtPBojkEotx5yUMBZVsbP7D_U6uXDJtRksSE"},
{"content":{"body":"a schism suggests there was some unified whole that split","msgtype":"m.text","org.matrix.msc1767.text":"a schism suggests there was some unified whole that split"},"ts":1648747295756,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gtQolnpg36rER0gT8DsnC7LGgNCTvcvEbEJNGprKmuk"},
{"content":{"body":"there are two paradigms","msgtype":"m.text","org.matrix.msc1767.text":"there are two paradigms"},"ts":1648747300107,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ecCXG279XbP4-ETDbsMRMH2toFyFzj6XrTB-8AHQdSM"},
{"content":{"body":"i don't understand why the difference is so harmful yet","msgtype":"m.text","org.matrix.msc1767.text":"i don't understand why the difference is so harmful yet"},"ts":1648747317685,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I6ZVP_HhqKFBr8fzf-JGP7ms-MGLkP7hujNGee-CxC0"},
{"content":{"body":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","msgtype":"m.text","org.matrix.msc1767.text":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"ts":1648747330555,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yM8_ySEbkCpvhkF-knEoFtT-x9mQUsw2XUwueDEa9tc"},
{"content":{"body":"and we have a semblance of that today","msgtype":"m.text","org.matrix.msc1767.text":"and we have a semblance of that today"},"ts":1648747342483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F1Fazr6qiGnVYMiieBO8sr5E3DXn76VGj348aCMU82E"},
{"content":{"body":" * it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","m.new_content":{"body":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","msgtype":"m.text","org.matrix.msc1767.text":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"m.relates_to":{"event_id":"$yM8_ySEbkCpvhkF-knEoFtT-x9mQUsw2XUwueDEa9tc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"ts":1648747344569,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xpcN8DWmemrwyuVr2LFpZQNx2EYrrgE3p8b-lJ8IqP8"},
{"content":{"body":"i don't quite understand the line being drawn here as the one contended to be harmful","msgtype":"m.text","org.matrix.msc1767.text":"i don't quite understand the line being drawn here as the one contended to be harmful"},"ts":1648747362864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Irxy0hADZRIQzEwsvJuF2F77qKnQReQMuVJCvelhhVE"},
{"content":{"body":"method call syntax and function call syntax don't mix as well as they could, so it currently forces you to pick a lane and stick to it","msgtype":"m.text","org.matrix.msc1767.text":"method call syntax and function call syntax don't mix as well as they could, so it currently forces you to pick a lane and stick to it"},"ts":1648747468232,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XLspdCMSIyAfgKvN_hhBZSYTXPs9IK2qfS9ArT6pLYw"},
{"content":{"body":"\"zero cost\" is also not true here; the FP paradigm gets megamorphic real fast, in a way the OO paradigm maybe does not","msgtype":"m.text","org.matrix.msc1767.text":"\"zero cost\" is also not true here; the FP paradigm gets megamorphic real fast, in a way the OO paradigm maybe does not"},"ts":1648747489384,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t-_b_X-r50EhO5RQYU4GMEl6v-87bmMqIxKz3WsjX3E"},
{"content":{"body":"that's the contention. i don't see why that's so harmful","msgtype":"m.text","org.matrix.msc1767.text":"that's the contention. i don't see why that's so harmful"},"ts":1648747498246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lX70TS-Cvej3sNPe9nnILxZQpSiFuJkXiY7vZcMfDSo"},
{"content":{"body":"I think that \"zero cost\" line of thought comes from statically compiled languages","msgtype":"m.text","org.matrix.msc1767.text":"I think that \"zero cost\" line of thought comes from statically compiled languages"},"ts":1648747507543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c3h4OSvtXVIzYo7SWfemd91oRb8moc_TiDRMXOJlmq8"},
{"content":{"body":" * I think that \"zero cost\" line of thought comes from statically compiled languages","m.new_content":{"body":"I think that \"zero cost\" line of thought comes from statically compiled languages","msgtype":"m.text","org.matrix.msc1767.text":"I think that \"zero cost\" line of thought comes from statically compiled languages"},"m.relates_to":{"event_id":"$c3h4OSvtXVIzYo7SWfemd91oRb8moc_TiDRMXOJlmq8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I think that \"zero cost\" line of thought comes from statically compiled languages"},"ts":1648747515531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CTBj182Xsu8qw5Cks5XgMdekc-J9doJlvaAWuFF-cWM"},
{"content":{"body":"bakkot: that's a good point","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's a good point","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: that's a good point","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's a good point","mimetype":"text/html"}]},"ts":1648747520584,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tLbWXaSlHPz4qNsbkmoD9dJ-4YWXPX8L1ws1LUvECRU"},
{"content":{"body":"Other delegates have argued it's harmful, I think JSC is trying to explain it's not that bad.","msgtype":"m.text","org.matrix.msc1767.text":"Other delegates have argued it's harmful, I think JSC is trying to explain it's not that bad."},"ts":1648747522128,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$g96qPALBxwVSrolTbqTXB43wt1sfZfMOCJz0I7iHkpc"},
{"content":{"body":"also this interop argument is a new argument to me: i though the main motivation thus far has been word order for the FP stuff","msgtype":"m.text","org.matrix.msc1767.text":"also this interop argument is a new argument to me: i though the main motivation thus far has been word order for the FP stuff"},"ts":1648747543236,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pBr7oXex0oYIeS4l69kM38XopwjQSQd93fnGmsGy3jU"},
{"content":{"body":"This is to explain that the schism some delegates are afraid of is actually improved by adding the call-op.","msgtype":"m.text","org.matrix.msc1767.text":"This is to explain that the schism some delegates are afraid of is actually improved by adding the call-op."},"ts":1648747587422,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jcpDOVexuVsXQUXQdZk7YZOJ7os_fLoqCulTd7JeUJw"},
{"content":{"body":"You can interop between the two styles better with both pipe and call.","msgtype":"m.text","org.matrix.msc1767.text":"You can interop between the two styles better with both pipe and call."},"ts":1648747603645,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zA-R3tfulyJkxkGlkTc9hY5OWRkycjdoyNhGSRWsp08"},
{"content":{"body":"bakkot: the runtime polymorphism point is very good, yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the runtime polymorphism point is very good, yes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: the runtime polymorphism point is very good, yes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the runtime polymorphism point is very good, yes","mimetype":"text/html"}]},"ts":1648747731026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nksTGUhcqBlLC9MRcn2JY7IxUi7W1AYPxC34hhq7aBo"},
{"content":{"body":"if you have two distinct methods `ClassA.F` and `ClassB.F`, you've split it manually by just how you organize code into two contexts that gather type feedback independently","format":"org.matrix.custom.html","formatted_body":"if you have two distinct methods <code>ClassA.F</code> and <code>ClassB.F</code>, you've split it manually by just how you organize code into two contexts that gather type feedback independently","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you have two distinct methods `ClassA.F` and `ClassB.F`, you've split it manually by just how you organize code into two contexts that gather type feedback independently","mimetype":"text/plain"},{"body":"if you have two distinct methods <code>ClassA.F</code> and <code>ClassB.F</code>, you've split it manually by just how you organize code into two contexts that gather type feedback independently","mimetype":"text/html"}]},"ts":1648747769829,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gtRHC1E4U2n3tCKn1Urh4JFcJMxHySIF_l8NPmmPVhI"},
{"content":{"body":"i have looked at automatically inferring such splits for functional-style programs in VMs and have never had any success","msgtype":"m.text","org.matrix.msc1767.text":"i have looked at automatically inferring such splits for functional-style programs in VMs and have never had any success"},"ts":1648747788225,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-wezKbK9kzUgtQPznm37umIjDUXoq1kbiM3XaQtjVFA"},
{"content":{"body":"would be a fun grad problem but i don't know of any good heuristics","msgtype":"m.text","org.matrix.msc1767.text":"would be a fun grad problem but i don't know of any good heuristics"},"ts":1648747803100,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$18W42SPi8sZLm9O34e6vZIV1ntvx4rRRAG7N4uzfMcE"},
{"content":{"body":"once you're into the optimizing tier you can get splitting like this for free with deep inlining, but the point is this is way way before all that, before you decide to even gather type feedback","msgtype":"m.text","org.matrix.msc1767.text":"once you're into the optimizing tier you can get splitting like this for free with deep inlining, but the point is this is way way before all that, before you decide to even gather type feedback"},"ts":1648747855432,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$v5mPDONhQ9NyemVxjynDk47oWo7-7tzvcJjaECeP5MY"},
{"content":{"body":"shu: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","mimetype":"text/html"}]},"ts":1648748027342,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SXsq3c_yIIVB-iWb_t3LZoaqHqhWxBle0b9GnccHYMo"},
{"content":{"body":"what is \"this feature\"?","msgtype":"m.text","org.matrix.msc1767.text":"what is \"this feature\"?"},"ts":1648748047571,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6o9lrKQ39I0Uj2SDdD064l2gnZSjSjdeqsndROHdNMI"},
{"content":{"body":"I was thinking about the pipe operator","msgtype":"m.text","org.matrix.msc1767.text":"I was thinking about the pipe operator"},"ts":1648748103863,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rrzYJBdmtWZqhlWOL1V3o35VVAipCbvUUiPygz6tllw"},
{"content":{"body":"very skeptical of that claim, i don't think method chaining is any less likely in hot paths, if that's a suitable analogy","msgtype":"m.text","org.matrix.msc1767.text":"very skeptical of that claim, i don't think method chaining is any less likely in hot paths, if that's a suitable analogy"},"ts":1648748138872,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vWKItKDLjUC88IYJwue6TrNZVa9ADgddS-R55mbsBIU"},
{"content":{"body":"nor normal function application, if this makes some cases of that easier to read","msgtype":"m.text","org.matrix.msc1767.text":"nor normal function application, if this makes some cases of that easier to read"},"ts":1648748149177,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rie48geqFP9wdq3WwFCr_BGSbxtdURm8yZa0BvwVY8I"},
{"content":{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about `this`, is very good","format":"org.matrix.custom.html","formatted_body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about <code>this</code>, is very good","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about `this`, is very good","mimetype":"text/plain"},{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about <code>this</code>, is very good","mimetype":"text/html"}]},"ts":1648748576799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Anxwxfjkg_T6-HtGkA01Eilf0rHRSb9t-vGFgdRCX-8"},
{"content":{"body":"like there's no reason not to just pass the context argument as the first API, over using call-this","msgtype":"m.text","org.matrix.msc1767.text":"like there's no reason not to just pass the context argument as the first API, over using call-this"},"ts":1648748632066,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"},
{"content":{"body":"no reason whatsoever","msgtype":"m.text","org.matrix.msc1767.text":"no reason whatsoever"},"ts":1648748638566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xnp-Y_VR-JKi11FV7ZU95QhiyIBfqGmKxuMXa45ouJg"},
{"content":{"body":"We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"}}},"ts":1648748671926,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lCi8KfGrT6phFA2CEAp9qPGJZg57yZ89G-u0uWPx1lw"},
{"content":{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\nCall site ergonomics will prevent adoption of this.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there&#39;s no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply>Call site ergonomics will prevent adoption of this.","m.relates_to":{"m.in_reply_to":{"event_id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\nCall site ergonomics will prevent adoption of this.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there&#39;s no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply>Call site ergonomics will prevent adoption of this.","mimetype":"text/html"}]},"ts":1648748674764,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs"},
{"content":{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\n * We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there's no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply> * We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","m.new_content":{"body":"We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lCi8KfGrT6phFA2CEAp9qPGJZg57yZ89G-u0uWPx1lw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\n * We’ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there's no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply> * We’ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}]},"ts":1648748676505,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qs_FFGDhDQXtFoM6VwVKCOjyA_Pc9txE0qgRUhxPtD8"},
{"content":{"body":"jschoi: again, I don't think \"people are already doing this\" is a good enough reason to add it to the language","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: again, I don't think &quot;people are already doing this&quot; is a good enough reason to add it to the language","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: again, I don't think \"people are already doing this\" is a good enough reason to add it to the language","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: again, I don't think &quot;people are already doing this&quot; is a good enough reason to add it to the language","mimetype":"text/html"}]},"ts":1648748691393,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$27oD1lhr7AZrhl1FOdOTya8IKXEI6N5zj1lLP72rkq4"},
{"content":{"body":"Firebase is so strange in a language that has settled on OOP designs","msgtype":"m.text","org.matrix.msc1767.text":"Firebase is so strange in a language that has settled on OOP designs"},"ts":1648748697956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"},
{"content":{"body":"(also I didn't find your data all that convincing, to be frank)","msgtype":"m.text","org.matrix.msc1767.text":"(also I didn't find your data all that convincing, to be frank)"},"ts":1648748700455,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg"},
{"content":{"body":"> <@jridgewell:matrix.org> Call site ergonomics will prevent adoption of this.\n\nI don't think inventing _entirely new syntax_ actually does amount to being a more ergonomic syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Call site ergonomics will prevent adoption of this.</blockquote></mx-reply>I don't think inventing <em>entirely new syntax</em> actually does amount to being a more ergonomic syntax","m.relates_to":{"m.in_reply_to":{"event_id":"$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Call site ergonomics will prevent adoption of this.\n\nI don't think inventing _entirely new syntax_ actually does amount to being a more ergonomic syntax","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Call site ergonomics will prevent adoption of this.</blockquote></mx-reply>I don't think inventing <em>entirely new syntax</em> actually does amount to being a more ergonomic syntax","mimetype":"text/html"}]},"ts":1648748733805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AOy2m4nXYxoWBlzGAsbDP0YLY_REmVqX20u32OiQqNI"},
{"content":{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nthe language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>the language hasn't &quot;settled&quot; on that tho, it's just parts of the ecosystem that have.","m.relates_to":{"m.in_reply_to":{"event_id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nthe language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>the language hasn't &quot;settled&quot; on that tho, it's just parts of the ecosystem that have.","mimetype":"text/html"}]},"ts":1648748862849,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU"},
{"content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg"}}},"ts":1648748866860,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8"},
{"content":{"body":"> <@bakkot:matrix.org> (also I didn't find your data all that convincing, to be frank)\n\n * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(also I didn't find your data all that convincing, to be frank)</blockquote></mx-reply> * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","m.new_content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> (also I didn't find your data all that convincing, to be frank)\n\n * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(also I didn't find your data all that convincing, to be frank)</blockquote></mx-reply> * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}]},"ts":1648748911523,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rwv4xct92Iaq_nF7vPJKyzRyt6Zvkcr0oriId-_eFG4"},
{"content":{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nI've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>I've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","m.relates_to":{"m.in_reply_to":{"event_id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nI've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>I've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","mimetype":"text/html"}]},"ts":1648748914728,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$9vgM13u_XUoWkKDEYIpCzqQQobpWuVEArhqZ3EmYxWA"},
{"content":{"body":"> <@ljharb:matrix.org> the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.\n\nThis is where the puck is heading, libraries designed for code splitting will become more prevalent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.</blockquote></mx-reply>This is where the puck is heading, libraries designed for code splitting will become more prevalent","m.relates_to":{"m.in_reply_to":{"event_id":"$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.\n\nThis is where the puck is heading, libraries designed for code splitting will become more prevalent","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.</blockquote></mx-reply>This is where the puck is heading, libraries designed for code splitting will become more prevalent","mimetype":"text/html"}]},"ts":1648748937488,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$O60espnjxY_VJT6NgyQlBKaMPybqprwxSmzkYkEQq5Q"},
{"content":{"body":"right but those aren't OOP","msgtype":"m.text","org.matrix.msc1767.text":"right but those aren't OOP"},"ts":1648748949272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P5kMOaNp5z_a4BctDxrJLO7n7fWm3vV2ZWlLLu42AaQ"},
{"content":{"body":"those are more functional","msgtype":"m.text","org.matrix.msc1767.text":"those are more functional"},"ts":1648748953815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IAKxL4jLZsAbnp_fi4odhiiz20LpNwT5wYFjdAXOPus"},
{"content":{"body":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","msgtype":"m.text","org.matrix.msc1767.text":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"ts":1648748979816,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q5I72y0XfoLKcizUHa4Cv6xLoYgC48QvQvOhmDToQHE"},
{"content":{"body":" * they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","m.new_content":{"body":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","msgtype":"m.text","org.matrix.msc1767.text":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"m.relates_to":{"event_id":"$q5I72y0XfoLKcizUHa4Cv6xLoYgC48QvQvOhmDToQHE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"ts":1648748983674,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Do958Xfou2tMY7LOVD7FmsnnGeBTFANQwHBcjLBNxHU"},
{"content":{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","m.new_content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/plain"},{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/html"}]},"ts":1648749266294,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kkDhHcYp65tJmi63A2Wib7iiKhQ-JTiZOO_uOf7OTD4"},
{"content":{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","m.new_content":{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/plain"},{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.","mimetype":"text/html"}]},"ts":1648749272816,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$glPzoQA1YL5cdpJaSsNjL4OrzlBNCk0UlVb5aMO_ZOs"},
{"content":{"body":"`super` actually is totally reasonable","format":"org.matrix.custom.html","formatted_body":"<code>super</code> actually is totally reasonable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`super` actually is totally reasonable","mimetype":"text/plain"},{"body":"<code>super</code> actually is totally reasonable","mimetype":"text/html"}]},"ts":1648749635629,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ogMLaVmw5HPOD-FryE6ybYtarVMZJe0OhrIncJbjkr8"},
{"content":{"body":"if it refers to the superclass, anyway","msgtype":"m.text","org.matrix.msc1767.text":"if it refers to the superclass, anyway"},"ts":1648749644677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u3S2p2vfP9gZuh-IrbJDSK3Lh0YN85WF2BYy2H7FbfY"},
{"content":{"body":"`this` is just a variable name; i had no idea it was distinguished in the grammar in any way and find that very surprising.","format":"org.matrix.custom.html","formatted_body":"<code>this</code> is just a variable name; i had no idea it was distinguished in the grammar in any way and find that very surprising.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`this` is just a variable name; i had no idea it was distinguished in the grammar in any way and find that very surprising.","mimetype":"text/plain"},{"body":"<code>this</code> is just a variable name; i had no idea it was distinguished in the grammar in any way and find that very surprising.","mimetype":"text/html"}]},"ts":1648749671576,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dzoqgpGSqtnlHYZa-pLbNfat6DedxnfxHf6CXcDWC5k"},
{"content":{"body":"jschoi: Thx. for the presentation. It gave me a good overview and you addressed a lot of good points. Personally I agree with you - JavaScript is a multi-paradigm language and we should keep it that way. However I am also unsure, what that really means. :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thx. for the presentation. It gave me a good overview and you addressed a lot of good points. Personally I agree with you - JavaScript is a multi-paradigm language and we should keep it that way. However I am also unsure, what that really means. :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: Thx. for the presentation. It gave me a good overview and you addressed a lot of good points. Personally I agree with you - JavaScript is a multi-paradigm language and we should keep it that way. However I am also unsure, what that really means. :)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: Thx. for the presentation. It gave me a good overview and you addressed a lot of good points. Personally I agree with you - JavaScript is a multi-paradigm language and we should keep it that way. However I am also unsure, what that really means. :)","mimetype":"text/html"}]},"ts":1648749674688,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$dBtqlCt1leobdJYQe-T33qFX230WoPlyHb_AmvQykKs"},
{"content":{"body":"TabAtkins: so you would be surprised that `this = 0` fails to parse?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: so you would be surprised that <code>this = 0</code> fails to parse?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: so you would be surprised that `this = 0` fails to parse?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: so you would be surprised that <code>this = 0</code> fails to parse?","mimetype":"text/html"}]},"ts":1648749785120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I8-DhKI6EGohN6b_e_mRUcKIt_l6CfqnYwry8VXycxM"},
{"content":{"body":"TabAtkins: I don't believe you","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I don't believe you","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: I don't believe you","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I don't believe you","mimetype":"text/html"}]},"ts":1648749818184,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tQ-dpjNeUE4-LVTyny9HCameUvIhSUB7wSXOLz29k2E"},
{"content":{"body":"Assignment and reference are different contexts that I'm okay to distinguish between","msgtype":"m.text","org.matrix.msc1767.text":"Assignment and reference are different contexts that I'm okay to distinguish between"},"ts":1648749819599,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$l8LP2qYKp_x0hVfBWuAqz96NgZ8NA2EdwInT5KCwzgQ"},
{"content":{"body":"Michael Ficarra: you don't believe me? how? what?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: you don't believe me? how? what?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: you don't believe me? how? what?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: you don't believe me? how? what?","mimetype":"text/html"}]},"ts":1648749833688,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OCvOAR_XBV3XyxfqOKCdE6pHL8uV4CjGKdVRkggAp0E"},
{"content":{"body":"Prior art I'd say. Decorators have been using the `@` for ages...","format":"org.matrix.custom.html","formatted_body":"Prior art I'd say. Decorators have been using the <code>@</code> for ages...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Prior art I'd say. Decorators have been using the `@` for ages...","mimetype":"text/plain"},{"body":"Prior art I'd say. Decorators have been using the <code>@</code> for ages...","mimetype":"text/html"}]},"ts":1648749870105,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$H07iQoRrquaSbvz4whQeZ-SmjGXxgY1sHIOa4lU2kyU"},
{"content":{"body":"TabAtkins: working on pattern matching, you became familiar with the fact that undefined/Infinity are identifiers, which means you should know that things like `this`/`null`/`true` are not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: working on pattern matching, you became familiar with the fact that undefined/Infinity are identifiers, which means you should know that things like <code>this</code>/<code>null</code>/<code>true</code> are not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: working on pattern matching, you became familiar with the fact that undefined/Infinity are identifiers, which means you should know that things like `this`/`null`/`true` are not","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: working on pattern matching, you became familiar with the fact that undefined/Infinity are identifiers, which means you should know that things like <code>this</code>/<code>null</code>/<code>true</code> are not","mimetype":"text/html"}]},"ts":1648749889425,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cPYgO7kxawp4AEavjm0rAZhIvkwWsB9sTz31uklYdaU"},
{"content":{"body":"???? I have no idea why you'd think that's a necessity, notably the idea that `this` is definitely grouped in with the other values.","format":"org.matrix.custom.html","formatted_body":"???? I have no idea why you'd think that's a necessity, notably the idea that <code>this</code> is definitely grouped in with the other values.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"???? I have no idea why you'd think that's a necessity, notably the idea that `this` is definitely grouped in with the other values.","mimetype":"text/plain"},{"body":"???? I have no idea why you'd think that's a necessity, notably the idea that <code>this</code> is definitely grouped in with the other values.","mimetype":"text/html"}]},"ts":1648749938641,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$BryGzHbOnY-_D32JmdPpAPyTD-T6_a_heXNaHHpm4Ko"},
{"content":{"body":"(But also, uh, \"I don't believe you\" is a pretty sucky thing to allege, dude.)","msgtype":"m.text","org.matrix.msc1767.text":"(But also, uh, \"I don't believe you\" is a pretty sucky thing to allege, dude.)"},"ts":1648749956292,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PTA7GnicTJYhThGH8cFOFfNkfY2mklaBm5dnechrW2Q"},
{"content":{"body":"All those other things are literals in practice, even if they're technically identifiers for technicaly/legacy reasons. `this` is something completely unrelated","format":"org.matrix.custom.html","formatted_body":"All those other things are literals in practice, even if they're technically identifiers for technicaly/legacy reasons. <code>this</code> is something completely unrelated","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"All those other things are literals in practice, even if they're technically identifiers for technicaly/legacy reasons. `this` is something completely unrelated","mimetype":"text/plain"},{"body":"All those other things are literals in practice, even if they're technically identifiers for technicaly/legacy reasons. <code>this</code> is something completely unrelated","mimetype":"text/html"}]},"ts":1648750019377,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0X_PDOKS4vhRvnQMvq5vBDK2LuE1Eciwf5lhrYx5zwQ"},
{"content":{"body":"HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","mimetype":"text/html"}]},"ts":1648750126623,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FimVWyZ4VSHKjSyIedXGKO6DB-kmShYPf87zU2aXV7c"},
{"content":{"body":" * HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","m.new_content":{"body":"HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FimVWyZ4VSHKjSyIedXGKO6DB-kmShYPf87zU2aXV7c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * HE Shi-Jun:\n\n```\nclass X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n```\nsomething like that","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n","mimetype":"text/html"}]},"ts":1648750137858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F6-4q5vRLqVL3RsKXMtybyW1zJbIl5uHIxbvBgddshQ"},
{"content":{"body":"this isn't even a case we'd need to leave to a linter","msgtype":"m.text","org.matrix.msc1767.text":"this isn't even a case we'd need to leave to a linter"},"ts":1648750312633,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m1A8SDG12dNZHNSuybm5zL6YNgj16wurCFLjTLdkLAU"},
{"content":{"body":"either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule","msgtype":"m.text","org.matrix.msc1767.text":"either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule"},"ts":1648750325395,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7AP1sRA9jjOcNRjdtYje02WqFRNse6kSdbOC9SofTm4"},
{"content":{"body":" * either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule","m.new_content":{"body":"either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule","msgtype":"m.text","org.matrix.msc1767.text":"either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule"},"m.relates_to":{"event_id":"$7AP1sRA9jjOcNRjdtYje02WqFRNse6kSdbOC9SofTm4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * either it's a sensible thing to do, in which case people would do it and a linter shouldn't ban it, or it's not, in which case there's no need for a lint rule"},"ts":1648750349033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E5icP93Nb7wQSux1cAzw3cucWbrxC2LKBCbnm8fbCf0"},
{"content":{"body":"right, this stuff - edge cases or not - only makes sense if someone actually has a decorator to reference","msgtype":"m.text","org.matrix.msc1767.text":"right, this stuff - edge cases or not - only makes sense if someone actually has a decorator to reference"},"ts":1648750364618,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-Xo-aRlhgdPpZbd3wlPFsstRelQU-EZOotKyiwMPwlQ"},
{"content":{"body":"If there's not an actual problem with allowing them, then any restriction which requires authors to understand arcane details of the grammar is an unreservedly bad idea","msgtype":"m.text","org.matrix.msc1767.text":"If there's not an actual problem with allowing them, then any restriction which requires authors to understand arcane details of the grammar is an unreservedly bad idea"},"ts":1648750369716,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2weg9n8wJhhNgYX6Fu27hUG3ZLFNmkjgfQLhshVB64I"},
{"content":{"body":"if it's there, why not allow it? if it's not there, they'll get a TypeError anyways","msgtype":"m.text","org.matrix.msc1767.text":"if it's there, why not allow it? if it's not there, they'll get a TypeError anyways"},"ts":1648750377413,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AhaThpp8cyVle0XEgNR5i3ZYUFETZrI5t52mBxvWNlk"},
{"content":{"body":"> <@tabatkins:matrix.org> (But also, uh, \"I don't believe you\" is a pretty sucky thing to allege, dude.)\n\nno offense meant, all I was saying is that I'm sure that if you had thought about it for a second, you'd have been able to figure it out, since the proposal you presented at this meeting specifically accounts for all identifiers that people don't think of as identifiers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PTA7GnicTJYhThGH8cFOFfNkfY2mklaBm5dnechrW2Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>(But also, uh, &quot;I don&#39;t believe you&quot; is a pretty sucky thing to allege, dude.)</blockquote></mx-reply>no offense meant, all I was saying is that I'm sure that if you had thought about it for a second, you'd have been able to figure it out, since the proposal you presented at this meeting specifically accounts for all identifiers that people don't think of as identifiers","m.relates_to":{"m.in_reply_to":{"event_id":"$PTA7GnicTJYhThGH8cFOFfNkfY2mklaBm5dnechrW2Q"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> (But also, uh, \"I don't believe you\" is a pretty sucky thing to allege, dude.)\n\nno offense meant, all I was saying is that I'm sure that if you had thought about it for a second, you'd have been able to figure it out, since the proposal you presented at this meeting specifically accounts for all identifiers that people don't think of as identifiers","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PTA7GnicTJYhThGH8cFOFfNkfY2mklaBm5dnechrW2Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>(But also, uh, &quot;I don&#39;t believe you&quot; is a pretty sucky thing to allege, dude.)</blockquote></mx-reply>no offense meant, all I was saying is that I'm sure that if you had thought about it for a second, you'd have been able to figure it out, since the proposal you presented at this meeting specifically accounts for all identifiers that people don't think of as identifiers","mimetype":"text/html"}]},"ts":1648750378208,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9os9NzzXmu_xwLmxY4A7Fbs8HMAte0KHscvE9Od0Rfw"},
{"content":{"body":"I had thought about it for a second, and would not have figured it out, because you're assuming that I've read the grammar deeply and recently enough to immediately know what is \"identifier\" and what is \"other things which look similar syntactically but are a different category\". I assume *you've* done so, but I definitely have not.","format":"org.matrix.custom.html","formatted_body":"I had thought about it for a second, and would not have figured it out, because you're assuming that I've read the grammar deeply and recently enough to immediately know what is &quot;identifier&quot; and what is &quot;other things which look similar syntactically but are a different category&quot;. I assume <em>you've</em> done so, but I definitely have not.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I had thought about it for a second, and would not have figured it out, because you're assuming that I've read the grammar deeply and recently enough to immediately know what is \"identifier\" and what is \"other things which look similar syntactically but are a different category\". I assume *you've* done so, but I definitely have not.","mimetype":"text/plain"},{"body":"I had thought about it for a second, and would not have figured it out, because you're assuming that I've read the grammar deeply and recently enough to immediately know what is &quot;identifier&quot; and what is &quot;other things which look similar syntactically but are a different category&quot;. I assume <em>you've</em> done so, but I definitely have not.","mimetype":"text/html"}]},"ts":1648750464791,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zyLEXbZHhIvQZrhgDjI8nlgRXcJFjd9iMAEidGv9etc"},
{"content":{"body":"I can rattle off the tip of my tongue arcane details of CSS syntax that would very likely confuse you (because I wrote the CSS Syntax spec and have written two parsers) but I don't have that level fo knowledge for JS.","msgtype":"m.text","org.matrix.msc1767.text":"I can rattle off the tip of my tongue arcane details of CSS syntax that would very likely confuse you (because I wrote the CSS Syntax spec and have written two parsers) but I don't have that level fo knowledge for JS."},"ts":1648750573456,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4I79nr0P2DiQi1HFSYbTYlgzr-vMf6ESC1IhpxhfMEY"},
{"content":{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.\nYour point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","format":"org.matrix.custom.html","formatted_body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.<br>Your point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","m.new_content":{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.\nYour point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.<br>Your point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.\nYour point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.<br>Your point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.\nYour point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","mimetype":"text/plain"},{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. I’m not sure how we could have done better.<br>Your point is taken that “just because people are doing it, we shouldn’t necessarily encourage it,” but that’s separate from the validity of the data themselves.","mimetype":"text/html"}]},"ts":1648750582906,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$p5atFJJKJcpdacdHlz13PhxMnu5Ksltor-bRwCOS578"},
{"content":{"body":"> <@ljharb:matrix.org> HE Shi-Jun:\n> \n> ```\n> class X {\n>   static decorate() {}\n> }\n> \n> class Y extends X {\n>   @super.decorate\n>   foo() {}\n> }\n> ```\n> something like that\n\nWhat does `super` reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FimVWyZ4VSHKjSyIedXGKO6DB-kmShYPf87zU2aXV7c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n</blockquote></mx-reply>What does <code>super</code> reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?","m.relates_to":{"m.in_reply_to":{"event_id":"$FimVWyZ4VSHKjSyIedXGKO6DB-kmShYPf87zU2aXV7c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> HE Shi-Jun:\n> \n> ```\n> class X {\n>   static decorate() {}\n> }\n> \n> class Y extends X {\n>   @super.decorate\n>   foo() {}\n> }\n> ```\n> something like that\n\nWhat does `super` reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FimVWyZ4VSHKjSyIedXGKO6DB-kmShYPf87zU2aXV7c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p><a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>:</p>\n<pre><code>class X {\n  static decorate() {}\n}\n\nclass Y extends X {\n  @super.decorate\n  foo() {}\n}\n</code></pre>\n<p>something like that</p>\n</blockquote></mx-reply>What does <code>super</code> reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?","mimetype":"text/html"}]},"ts":1648750641924,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$x4AkSCdAqKfhhVLxHKoB5q4v8dnykCqGrvxwpsZQ0sI"},
{"content":{"body":"@shu Ok, after second thought, I have to say disallowing @meta.property seems too strong... I'm still need some time to think about `@this` `@super`...","format":"org.matrix.custom.html","formatted_body":"@shu Ok, after second thought, I have to say disallowing @meta.property seems too strong... I'm still need some time to think about <code>@this</code> <code>@super</code>...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"@shu Ok, after second thought, I have to say disallowing @meta.property seems too strong... I'm still need some time to think about `@this` `@super`...","mimetype":"text/plain"},{"body":"@shu Ok, after second thought, I have to say disallowing @meta.property seems too strong... I'm still need some time to think about <code>@this</code> <code>@super</code>...","mimetype":"text/html"}]},"ts":1648750650331,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$k0Rdmzk61mqnELbMzELu1xRscCt0MClUoV4epVPa5dg"},
{"content":{"body":"understood. now i'm confused again what the conclusion is","msgtype":"m.text","org.matrix.msc1767.text":"understood. now i'm confused again what the conclusion is"},"ts":1648750669993,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3Lwbekuu-hz7ByEh7_Tf3uDJNN2HsZcApvRU6wQfIFo"},
{"content":{"body":"One question, do we allow `@this class {} ` now?","format":"org.matrix.custom.html","formatted_body":"One question, do we allow <code>@this class {} </code> now?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"One question, do we allow `@this class {} ` now?","mimetype":"text/plain"},{"body":"One question, do we allow <code>@this class {} </code> now?","mimetype":"text/html"}]},"ts":1648750697427,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$-leWwFtUK7PiiGQqPdIQVgX2eTGIlIckAdJRXJlB9qs"},
{"content":{"body":"why not, as long as the `this` resolves to a decorator it'd work","format":"org.matrix.custom.html","formatted_body":"why not, as long as the <code>this</code> resolves to a decorator it'd work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why not, as long as the `this` resolves to a decorator it'd work","mimetype":"text/plain"},{"body":"why not, as long as the <code>this</code> resolves to a decorator it'd work","mimetype":"text/html"}]},"ts":1648750744120,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5CTPhVmkl2OyKE4qhZNtPdzYWCLRQl2VqnrSqgjiSzs"},
{"content":{"body":"shu: no conclusion","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: no conclusion","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: no conclusion","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: no conclusion","mimetype":"text/html"}]},"ts":1648750765651,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cl7Q-loJfWis0vcDaeeXFhm7gUAevtmuJI9oZhdaOAE"},
{"content":{"body":"\"that thing that falls out of consistency seems gross\" is a reason to lint against it, not a reason to make it a parse error","msgtype":"m.text","org.matrix.msc1767.text":"\"that thing that falls out of consistency seems gross\" is a reason to lint against it, not a reason to make it a parse error"},"ts":1648750766484,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$INBiJhYRgY4PUMY93OhCyGoGNgvM4s1NyMbSFYDCZTc"},
{"content":{"body":"I mean, because the issue is whether to allow `@this.dec`","format":"org.matrix.custom.html","formatted_body":"I mean, because the issue is whether to allow <code>@this.dec</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean, because the issue is whether to allow `@this.dec`","mimetype":"text/plain"},{"body":"I mean, because the issue is whether to allow <code>@this.dec</code>","mimetype":"text/html"}]},"ts":1648750769721,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$aRSi8JAstktQ3eXSNZ82bVFxbg65miQiTCkhqRQ4wPA"},
{"content":{"body":"bakkot: ok, thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: ok, thanks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: ok, thanks","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: ok, thanks","mimetype":"text/html"}]},"ts":1648750779775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7b2znoUnyGqn0AFC1iL-uF0FblAsDNI79MLqfAwk3f4"},
{"content":{"body":"A reminder:  Rob recuses as chair during Types as Comments.","msgtype":"m.text","org.matrix.msc1767.text":"A reminder:  Rob recuses as chair during Types as Comments."},"ts":1648750783489,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$d8LJI7I_OYLApS0qq047gcs7ypLZw3UB9p7zKPyrdbg"},
{"content":{"body":"> <@haxjs:matrix.org> I mean, because the issue is whether to allow `@this.dec`\n\nOk, I read the issue, `@this` is also not decided. I see.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aRSi8JAstktQ3eXSNZ82bVFxbg65miQiTCkhqRQ4wPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I mean, because the issue is whether to allow <code>@this.dec</code></blockquote></mx-reply>Ok, I read the issue, <code>@this</code> is also not decided. I see.","m.relates_to":{"m.in_reply_to":{"event_id":"$aRSi8JAstktQ3eXSNZ82bVFxbg65miQiTCkhqRQ4wPA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> I mean, because the issue is whether to allow `@this.dec`\n\nOk, I read the issue, `@this` is also not decided. I see.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aRSi8JAstktQ3eXSNZ82bVFxbg65miQiTCkhqRQ4wPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I mean, because the issue is whether to allow <code>@this.dec</code></blockquote></mx-reply>Ok, I read the issue, <code>@this</code> is also not decided. I see.","mimetype":"text/html"}]},"ts":1648750902396,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$XvMdHWIqHDXG1YvgEFUf8DYZH2h8xGbPoxAsk82bhwc"},
{"content":{"body":"> <@mhofman:matrix.org> What does `super` reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?\n\nI would assume it has to be the super constructor; it shouldn't switch based on the kind of thing you're decorating","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x4AkSCdAqKfhhVLxHKoB5q4v8dnykCqGrvxwpsZQ0sI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What does <code>super</code> reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?</blockquote></mx-reply>I would assume it has to be the super constructor; it shouldn't switch based on the kind of thing you're decorating","m.relates_to":{"m.in_reply_to":{"event_id":"$x4AkSCdAqKfhhVLxHKoB5q4v8dnykCqGrvxwpsZQ0sI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> What does `super` reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?\n\nI would assume it has to be the super constructor; it shouldn't switch based on the kind of thing you're decorating","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x4AkSCdAqKfhhVLxHKoB5q4v8dnykCqGrvxwpsZQ0sI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What does <code>super</code> reference here? It's decorating an instance method, so why would it reference the super constructor and not the super instance ?</blockquote></mx-reply>I would assume it has to be the super constructor; it shouldn't switch based on the kind of thing you're decorating","mimetype":"text/html"}]},"ts":1648750902982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jof19Xj5debm6ClFoq5XTpLE0O7msf3roL6ds5OEn-E"},
{"content":{"body":"also the decorator is called before any instance is constructed","msgtype":"m.text","org.matrix.msc1767.text":"also the decorator is called before any instance is constructed"},"ts":1648750911821,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EC3WfwHmJ7i4dn6JxfkTrJFcEJSQ1MLUiqcIFWgFaOQ"},
{"content":{"body":"so calling an instance method (even from the prototype) is incoherent","msgtype":"m.text","org.matrix.msc1767.text":"so calling an instance method (even from the prototype) is incoherent"},"ts":1648750918487,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6hufyMeDumo2vub68S0Zzr2z9hq_QXwVih0DwHbSocc"},
{"content":{"body":"the super constructor is the only thing which actually exists at that point","msgtype":"m.text","org.matrix.msc1767.text":"the super constructor is the only thing which actually exists at that point"},"ts":1648750928446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T_GZXki-ko8V-9y0MYnISbq4Uu-l-JpbyzyEt4I7wD0"},
{"content":{"body":" * also the decorator is called before any instance is constructed","m.new_content":{"body":"also the decorator is called before any instance is constructed","msgtype":"m.text","org.matrix.msc1767.text":"also the decorator is called before any instance is constructed"},"m.relates_to":{"event_id":"$EC3WfwHmJ7i4dn6JxfkTrJFcEJSQ1MLUiqcIFWgFaOQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * also the decorator is called before any instance is constructed"},"ts":1648750991674,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6szGYEC99QvpwHeRCxvbv28xIrGaBu2r4RF5kpEjTSk"},
{"content":{"body":"bakkot: so the context currently of decorator evaluation is the same as dynamic property name evaluation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so the context currently of decorator evaluation is the same as dynamic property name evaluation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: so the context currently of decorator evaluation is the same as dynamic property name evaluation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so the context currently of decorator evaluation is the same as dynamic property name evaluation","mimetype":"text/html"}]},"ts":1648751051015,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$IQKnkmMBVOa_RuPiOfJEqJYTMmxfUsalo_h4JMwFLKI"},
{"content":{"body":"so what does","msgtype":"m.text","org.matrix.msc1767.text":"so what does"},"ts":1648751054248,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$D5IEUHJwhmgRc-ILWFloiFAzFlC4e5X7ek-teosY3m8"},
{"content":{"body":"hmm","msgtype":"m.text","org.matrix.msc1767.text":"hmm"},"ts":1648751062671,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKkmClH7B5gXOAjsf-IxEwJcxmxMMSb4CQnMpmVYqMU"},
{"content":{"body":"My policy as a 10+ year language designer is that the line between \"valid\" and \"invalid\" code should be, as much as possible, simple and obvious from inspection by people with an average amount of experience and familiarity with the language. Mentally, the boundary that cleaves the two should be \"smooth\", rather than fractally textured, to the extent possible. Exceptions are allowed when something is actually problematic (but then, it might be good to disallow *more* than is strictly required to make the boundary smoother and easier to remember); exceptions for \"nobody would do it\" are bad unless they *also* serve to smooth out the boundary.","format":"org.matrix.custom.html","formatted_body":"My policy as a 10+ year language designer is that the line between &quot;valid&quot; and &quot;invalid&quot; code should be, as much as possible, simple and obvious from inspection by people with an average amount of experience and familiarity with the language. Mentally, the boundary that cleaves the two should be &quot;smooth&quot;, rather than fractally textured, to the extent possible. Exceptions are allowed when something is actually problematic (but then, it might be good to disallow <em>more</em> than is strictly required to make the boundary smoother and easier to remember); exceptions for &quot;nobody would do it&quot; are bad unless they <em>also</em> serve to smooth out the boundary.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My policy as a 10+ year language designer is that the line between \"valid\" and \"invalid\" code should be, as much as possible, simple and obvious from inspection by people with an average amount of experience and familiarity with the language. Mentally, the boundary that cleaves the two should be \"smooth\", rather than fractally textured, to the extent possible. Exceptions are allowed when something is actually problematic (but then, it might be good to disallow *more* than is strictly required to make the boundary smoother and easier to remember); exceptions for \"nobody would do it\" are bad unless they *also* serve to smooth out the boundary.","mimetype":"text/plain"},{"body":"My policy as a 10+ year language designer is that the line between &quot;valid&quot; and &quot;invalid&quot; code should be, as much as possible, simple and obvious from inspection by people with an average amount of experience and familiarity with the language. Mentally, the boundary that cleaves the two should be &quot;smooth&quot;, rather than fractally textured, to the extent possible. Exceptions are allowed when something is actually problematic (but then, it might be good to disallow <em>more</em> than is strictly required to make the boundary smoother and easier to remember); exceptions for &quot;nobody would do it&quot; are bad unless they <em>also</em> serve to smooth out the boundary.","mimetype":"text/html"}]},"ts":1648751066580,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2kT5nn-pivwBL6D9UkgC9ssJKOD6WjLbw77WdibgGqI"},
{"content":{"body":"`class C { [super.foo]; }`","format":"org.matrix.custom.html","formatted_body":"<code>class C { [super.foo]; }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`class C { [super.foo]; }`","mimetype":"text/plain"},{"body":"<code>class C { [super.foo]; }</code>","mimetype":"text/html"}]},"ts":1648751068608,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$lx7aJ7xLz6CLbydj29dIM3G_eBo6loUMdP5fD0By48o"},
{"content":{"body":"I kind of assumed it would be the same as `static {}` blocks","format":"org.matrix.custom.html","formatted_body":"I kind of assumed it would be the same as <code>static {}</code> blocks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I kind of assumed it would be the same as `static {}` blocks","mimetype":"text/plain"},{"body":"I kind of assumed it would be the same as <code>static {}</code> blocks","mimetype":"text/html"}]},"ts":1648751068946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tWv8XLjQajNTuy2OF6bm8x4eX6Lbm789Qg_zO4JneEk"},
{"content":{"body":"evalution to?","msgtype":"m.text","org.matrix.msc1767.text":"evalution to?"},"ts":1648751070989,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$E1II3_jbRz1hpWa4oj6-cCXb4DGKwMK_0RceS3JuIrg"},
{"content":{"body":"I should've caught that before","msgtype":"m.text","org.matrix.msc1767.text":"I should've caught that before"},"ts":1648751084476,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BTkQUDyoub9FiQ7H4BgsssNO83gvvIzezXQfrAvfzOg"},
{"content":{"body":"I would expect it to be the `super` of the _surrounding_ class, should it exist","format":"org.matrix.custom.html","formatted_body":"I would expect it to be the <code>super</code> of the <em>surrounding</em> class, should it exist","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would expect it to be the `super` of the _surrounding_ class, should it exist","mimetype":"text/plain"},{"body":"I would expect it to be the <code>super</code> of the <em>surrounding</em> class, should it exist","mimetype":"text/html"}]},"ts":1648751099555,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$-Ek2KLJFSlm27ckZFDToPWPxBsdUKzAu90P3e2Jn7Sg"},
{"content":{"body":"`class C { [super.foo]; }` refers to the `super` from the outer context, yes","format":"org.matrix.custom.html","formatted_body":"<code>class C { [super.foo]; }</code> refers to the <code>super</code> from the outer context, yes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`class C { [super.foo]; }` refers to the `super` from the outer context, yes","mimetype":"text/plain"},{"body":"<code>class C { [super.foo]; }</code> refers to the <code>super</code> from the outer context, yes","mimetype":"text/html"}]},"ts":1648751106916,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sKOtFUpCvIvyRTrNjLRMP8CO51MndQkc7rV_GwakIxg"},
{"content":{"body":"which would be the same as `this`","format":"org.matrix.custom.html","formatted_body":"which would be the same as <code>this</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"which would be the same as `this`","mimetype":"text/plain"},{"body":"which would be the same as <code>this</code>","mimetype":"text/html"}]},"ts":1648751107754,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$9E5pt4QOWQNVdUPH9PqTBSzDvV8R69hzZ8kFckBYSXs"},
{"content":{"body":"but `class extends B { static { super.x } }` refers to `B.x`","format":"org.matrix.custom.html","formatted_body":"but <code>class extends B { static { super.x } }</code> refers to <code>B.x</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but `class extends B { static { super.x } }` refers to `B.x`","mimetype":"text/plain"},{"body":"but <code>class extends B { static { super.x } }</code> refers to <code>B.x</code>","mimetype":"text/html"}]},"ts":1648751120853,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NHAEKC5DCNu6dZi9OPM_i-HnfMxp7tOMZFRwIWKcjLA"},
{"content":{"body":"yeah, decorators evaluate before static blocks and generally have the same scope as code immediately outside of the class","msgtype":"m.text","org.matrix.msc1767.text":"yeah, decorators evaluate before static blocks and generally have the same scope as code immediately outside of the class"},"ts":1648751157476,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$5M5NQ5uMx34BNQ3uwai3UhZ1M5J6eo_Zpra1ct8dX2A"},
{"content":{"body":"same as property names","msgtype":"m.text","org.matrix.msc1767.text":"same as property names"},"ts":1648751160433,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$eMy5LUU3WugiJP-Pw60le7jyqnkEaWZiCiQF8If7Kvo"},
{"content":{"body":"boo :(","msgtype":"m.text","org.matrix.msc1767.text":"boo :("},"ts":1648751163697,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zbV4Flo2LB5OJLVyhPej0olIoUoKKqQtZ6clGSTak74"},
{"content":{"body":"I still think that we should allow these keywords","msgtype":"m.text","org.matrix.msc1767.text":"I still think that we should allow these keywords"},"ts":1648751204296,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$O75O2YYzxH0hkMd8OdVVdPqSw0HfS97DI7QfeiAthS8"},
{"content":{"body":"I just don't think there are many good use cases. It would be _gnarly_ code","format":"org.matrix.custom.html","formatted_body":"I just don't think there are many good use cases. It would be <em>gnarly</em> code","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I just don't think there are many good use cases. It would be _gnarly_ code","mimetype":"text/plain"},{"body":"I just don't think there are many good use cases. It would be <em>gnarly</em> code","mimetype":"text/html"}]},"ts":1648751225795,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$4Zo_b_RF9FR2e-6WvqCjZMCpii_IEeW2t5PQX6pktd0"},
{"content":{"body":"ok so\n```\nclass Parent {\n  static decorate() {}\n}\nclass Outer extends Parent {\n  static x = @super.decorate class {};\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>ok so</p>\n<pre><code>class Parent {\n  static decorate() {}\n}\nclass Outer extends Parent {\n  static x = @super.decorate class {};\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok so\n```\nclass Parent {\n  static decorate() {}\n}\nclass Outer extends Parent {\n  static x = @super.decorate class {};\n}\n```","mimetype":"text/plain"},{"body":"<p>ok so</p>\n<pre><code>class Parent {\n  static decorate() {}\n}\nclass Outer extends Parent {\n  static x = @super.decorate class {};\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648751230143,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LKWJ7cjlHEC7LyHfRzdOjJXJIdkwtTZfjOtNxAejrR8"},
{"content":{"body":"Well I found that there could be use cases of `@super.deco class {}`, and it even could have use case of `@this.deco class {}`. but still such code look confusing. And people could always write `@(super.deco) class {}` if they want...","format":"org.matrix.custom.html","formatted_body":"Well I found that there could be use cases of <code>@super.deco class {}</code>, and it even could have use case of <code>@this.deco class {}</code>. but still such code look confusing. And people could always write <code>@(super.deco) class {}</code> if they want...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Well I found that there could be use cases of `@super.deco class {}`, and it even could have use case of `@this.deco class {}`. but still such code look confusing. And people could always write `@(super.deco) class {}` if they want...","mimetype":"text/plain"},{"body":"Well I found that there could be use cases of <code>@super.deco class {}</code>, and it even could have use case of <code>@this.deco class {}</code>. but still such code look confusing. And people could always write <code>@(super.deco) class {}</code> if they want...","mimetype":"text/html"}]},"ts":1648751231077,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$rqXdFh8Hxx7o3JZkvw2bjiPQglZ4RhOfeiDzn9kD3vw"},
{"content":{"body":"it's fine if bad code looks confusing","msgtype":"m.text","org.matrix.msc1767.text":"it's fine if bad code looks confusing"},"ts":1648751244986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LC4HDsRFFj1gjcTrRX6vfFX6qy1jHunNgOyzw2YSV-k"},
{"content":{"body":"ljharb: I would expect that to be a syntax error","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I would expect that to be a syntax error","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: I would expect that to be a syntax error","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I would expect that to be a syntax error","mimetype":"text/html"}]},"ts":1648751250714,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$wrOztGBDc5uVTKP4Jul032sUtc5_qvnIzbuK0k7V4U4"},
{"content":{"body":"why?","msgtype":"m.text","org.matrix.msc1767.text":"why?"},"ts":1648751257200,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1YMnUxCn3bsSXjtuwAtwAeC7MK7KtOcCz7ifSl3aio4"},
{"content":{"body":"it's important we don't make the parsing rules confusing; linters can keep the code clean.","msgtype":"m.text","org.matrix.msc1767.text":"it's important we don't make the parsing rules confusing; linters can keep the code clean."},"ts":1648751272347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pWQx8Rx2rPndQn8QIod9rtVwkq8hoz1unbxzeRMAzAY"},
{"content":{"body":"same reason\n```\nclass Outer extends Parent {\n  [super.x] = 0;\n}\n```\nis a syntax error","format":"org.matrix.custom.html","formatted_body":"<p>same reason</p>\n<pre><code>class Outer extends Parent {\n  [super.x] = 0;\n}\n</code></pre>\n<p>is a syntax error</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"same reason\n```\nclass Outer extends Parent {\n  [super.x] = 0;\n}\n```\nis a syntax error","mimetype":"text/plain"},{"body":"<p>same reason</p>\n<pre><code>class Outer extends Parent {\n  [super.x] = 0;\n}\n</code></pre>\n<p>is a syntax error</p>\n","mimetype":"text/html"}]},"ts":1648751291731,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2QychEtUAJzvfda1VaqdzIgoda8dyud3t3VhTn1j-MI"},
{"content":{"body":"I think Wardmar 's point stands, @keyword seems like some special magic thing.","msgtype":"m.text","org.matrix.msc1767.text":"I think Wardmar 's point stands, @keyword seems like some special magic thing."},"ts":1648751297628,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$zFHHsxYUqV7iBvM0dPb-TNigGKD_JJDTxLEjD4tscTk"},
{"content":{"body":"because `super` comes from the surrounding context, not from the class","format":"org.matrix.custom.html","formatted_body":"because <code>super</code> comes from the surrounding context, not from the class","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because `super` comes from the surrounding context, not from the class","mimetype":"text/plain"},{"body":"because <code>super</code> comes from the surrounding context, not from the class","mimetype":"text/html"}]},"ts":1648751303325,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1YmqDiuAYWigHMFEZP4T0vHBt6iFAdCTRedRZMCEqEs"},
{"content":{"body":"same rules as dynamic properties, is why","msgtype":"m.text","org.matrix.msc1767.text":"same rules as dynamic properties, is why"},"ts":1648751304233,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$MP2gim9lUfxLYbUHLvUmjeZFuwK_d4nxV1qD4ofnksk"},
{"content":{"body":"I think the dynamic property rules are the wrong ones","msgtype":"m.text","org.matrix.msc1767.text":"I think the dynamic property rules are the wrong ones"},"ts":1648751313798,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EI-870OKORK7zDZWdkx6Q0lbc9NiWzZO5tLtqKBhpd8"},
{"content":{"body":"static block rules would be better","msgtype":"m.text","org.matrix.msc1767.text":"static block rules would be better"},"ts":1648751317989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NwckQedsX9QY7VnLGs29mFo8hyTxbar_0mF2VeKwfE4"},
{"content":{"body":"or static initializers, even","msgtype":"m.text","org.matrix.msc1767.text":"or static initializers, even"},"ts":1648751321665,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x-B_LEjTp5od8DfTObYnx2nsXapupfnMvXlyQmodvjA"},
{"content":{"body":"the timing is more like dynamic props","msgtype":"m.text","org.matrix.msc1767.text":"the timing is more like dynamic props"},"ts":1648751367174,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$g7JnjJtZPFuSAatYVG78U0GbVZb-wbIvpJrwVR39bwo"},
{"content":{"body":"ehhhhh","msgtype":"m.text","org.matrix.msc1767.text":"ehhhhh"},"ts":1648751377209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ea1H9GuKfFODXBuaodnbj1y7HKDlZB0X7V_2P4sNIdc"},
{"content":{"body":"I don't think that difference matters in a relevant way for `super`","format":"org.matrix.custom.html","formatted_body":"I don't think that difference matters in a relevant way for <code>super</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think that difference matters in a relevant way for `super`","mimetype":"text/plain"},{"body":"I don't think that difference matters in a relevant way for <code>super</code>","mimetype":"text/html"}]},"ts":1648751388869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZV2Wl_DtPyVSrgrbovsDT_mv5v0uh08rMLnetRJe5ds"},
{"content":{"body":"I also remember some people discussed the possible syntax like `@this` `@@this` in dsl proposal.","format":"org.matrix.custom.html","formatted_body":"I also remember some people discussed the possible syntax like <code>@this</code> <code>@@this</code> in dsl proposal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also remember some people discussed the possible syntax like `@this` `@@this` in dsl proposal.","mimetype":"text/plain"},{"body":"I also remember some people discussed the possible syntax like <code>@this</code> <code>@@this</code> in dsl proposal.","mimetype":"text/html"}]},"ts":1648751462369,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$v87t3Hn3litcKjYk6uS7yFqL_3mGYsMBh2aDvVS5CPA"},
{"content":{"body":"i'm pretty sure types that differ from all existing type checkers, especially with semantics, is a hard nonstarter","msgtype":"m.text","org.matrix.msc1767.text":"i'm pretty sure types that differ from all existing type checkers, especially with semantics, is a hard nonstarter"},"ts":1648751471142,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_H0MyJqOhz62WdE1XMndPb5E3XZPseQCNH4zLUGmXtc"},
{"content":{"body":"and i don't really see value in broadening the problem statement in that way","msgtype":"m.text","org.matrix.msc1767.text":"and i don't really see value in broadening the problem statement in that way"},"ts":1648751482152,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DPTRyzOldBQYie-bZLvsMhFbRf_TGtyFfmvD_aaIfsM"},
{"content":{"body":"sorry, what is exactly being claimed here? is Waldemar's claim that Daniel says he is willing to consider other approaches but secretly will not be?","msgtype":"m.text"},"ts":1648751602716,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$HSRBoR28aywNDW2VxVOeOsO4AjveOVh6Jc0n9XwTDDw"},
{"content":{"body":"ill interupt","msgtype":"m.text","org.matrix.msc1767.text":"ill interupt"},"ts":1648751618439,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$TWlQeECcVgy1J8LCFj4KVhVbmW0mZbnX_vArdR1az4s"},
{"content":{"body":"i don't agree with this actually. i did not take \"types in JS\" as the problem statement put forth by the champions","msgtype":"m.text","org.matrix.msc1767.text":"i don't agree with this actually. i did not take \"types in JS\" as the problem statement put forth by the champions"},"ts":1648751666625,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OR6oe5DfKIP2AgDZCI67CzhD9Cimg1pU-HcRuf7lats"},
{"content":{"body":"agreeing to that problem statement is a very different proposal to me","msgtype":"m.text","org.matrix.msc1767.text":"agreeing to that problem statement is a very different proposal to me"},"ts":1648751676706,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JHk8q4kzFLIJUjguztIJJaJGAMq98_Tqt_ooQfqABts"},
{"content":{"body":"I think the high-level motivation should be narrow the gap between js and ts (or other type checkers).","msgtype":"m.text","org.matrix.msc1767.text":"I think the high-level motivation should be narrow the gap between js and ts (or other type checkers)."},"ts":1648751681651,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$FOCup7v3Qp0VIH469usoKVB5hb9S31qHFoC88h0Sqx4"},
{"content":{"body":"I would be interested in hearing the TypeScript team's stance on whether they would adopt new syntax based on a syntax space we carve out, if that's what we decide to do","msgtype":"m.text","org.matrix.msc1767.text":"I would be interested in hearing the TypeScript team's stance on whether they would adopt new syntax based on a syntax space we carve out, if that's what we decide to do"},"ts":1648751706906,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-OJso8vAJ3NIz3WFafekTbrEX-wV6Bd-RmxeoQt5Bl4"},
{"content":{"body":"the slide before implies that yes ts would probably take hints from the standardization process","msgtype":"m.text","org.matrix.msc1767.text":"the slide before implies that yes ts would probably take hints from the standardization process"},"ts":1648751793449,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$9Kzehn36juIlwk6yRoSVcJ4HhTgIgA1C_3FGo5bVmso"},
{"content":{"body":"I mean that is how I interpret it","msgtype":"m.text","org.matrix.msc1767.text":"I mean that is how I interpret it"},"ts":1648751817521,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$akGv2-1Cr2zAKeWw9b-CWi2jDUthLZBVdqbVLEHWgiU"},
{"content":{"body":"it's a two-way discussion","msgtype":"m.text","org.matrix.msc1767.text":"it's a two-way discussion"},"ts":1648751824150,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$wo2lM1YbfcpHVxSV2HI0gBzcyAEpCW4cKOWzzT54GbI"},
{"content":{"body":"so like, concretely, if tc39 is like \"all these declaration forms are too much, we're going to standardize on letting `:` be a new comment marker with unusual rules\", would TS try to encourage users to shift over that or would they keep having `type x = 0;`","format":"org.matrix.custom.html","formatted_body":"so like, concretely, if tc39 is like &quot;all these declaration forms are too much, we're going to standardize on letting <code>:</code> be a new comment marker with unusual rules&quot;, would TS try to encourage users to shift over that or would they keep having <code>type x = 0;</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so like, concretely, if tc39 is like \"all these declaration forms are too much, we're going to standardize on letting `:` be a new comment marker with unusual rules\", would TS try to encourage users to shift over that or would they keep having `type x = 0;`","mimetype":"text/plain"},{"body":"so like, concretely, if tc39 is like &quot;all these declaration forms are too much, we're going to standardize on letting <code>:</code> be a new comment marker with unusual rules&quot;, would TS try to encourage users to shift over that or would they keep having <code>type x = 0;</code>","mimetype":"text/html"}]},"ts":1648751940622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q_x-krKmXotK0ZFnPXJfn90pVtfGfPafDpbTararLr0"},
{"content":{"body":"We are TC39. We are not M$. \"They\" present a proposal for stage 1. There is nothing, that suddenly explodes into a full-blown 200 page spec that we cannot block in any way. danielrosenwasser Has taken into consideration the various concerns and I see the proposal as broad as it should be. It is just stage 1.","format":"org.matrix.custom.html","formatted_body":"We are TC39. We are not M$. &quot;They&quot; present a proposal for stage 1. There is nothing, that suddenly explodes into a full-blown 200 page spec that we cannot block in any way. <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> Has taken into consideration the various concerns and I see the proposal as broad as it should be. It is just stage 1.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We are TC39. We are not M$. \"They\" present a proposal for stage 1. There is nothing, that suddenly explodes into a full-blown 200 page spec that we cannot block in any way. danielrosenwasser Has taken into consideration the various concerns and I see the proposal as broad as it should be. It is just stage 1.","mimetype":"text/plain"},{"body":"We are TC39. We are not M$. &quot;They&quot; present a proposal for stage 1. There is nothing, that suddenly explodes into a full-blown 200 page spec that we cannot block in any way. <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> Has taken into consideration the various concerns and I see the proposal as broad as it should be. It is just stage 1.","mimetype":"text/html"}]},"ts":1648751947795,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$SyJZDdxjhZtcOrRoGl5ymbGOxCBgk-JZUKZzJ9WpVw0"},
{"content":{"body":"bakkot: I'm gonna ask exactly that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I'm gonna ask exactly that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: I'm gonna ask exactly that","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I'm gonna ask exactly that","mimetype":"text/html"}]},"ts":1648751995355,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_BdeOS3vnRH4m9uMfhlvE7WcOx6A2TCpPQCd443267I"},
{"content":{"body":"bakkot: from what I understand, this discussion is on the menu for stage 1","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: from what I understand, this discussion is on the menu for stage 1","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: from what I understand, this discussion is on the menu for stage 1","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: from what I understand, this discussion is on the menu for stage 1","mimetype":"text/html"}]},"ts":1648751996662,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$vy-KMJJYN_hnDp0X-2ejVfk0QDRNxvkgIJoN4ln7aY0"},
{"content":{"body":"ok cool","msgtype":"m.text","org.matrix.msc1767.text":"ok cool"},"ts":1648752004375,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OEoxRWMXzqI_26eCj_v28V_p6h7JlpVbs0ATKiHm5xM"},
{"content":{"body":"I am fine with stage 1 as long as those discussions are in scope","msgtype":"m.text","org.matrix.msc1767.text":"I am fine with stage 1 as long as those discussions are in scope"},"ts":1648752013097,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$A9Cl3xrmiSmlDyllm2z4G1WCAZdVRfuU98HPelsErU8"},
{"content":{"body":"I mean I am no champion so let's see what is the answer to Michael's question","msgtype":"m.text","org.matrix.msc1767.text":"I mean I am no champion so let's see what is the answer to Michael's question"},"ts":1648752054806,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$YUuLRK9J9sTRbDBHpd0mnJTSIfnttIrXFpHNA3DsxwM"},
{"content":{"body":" * I mean I am no champion so let's see what is the answer to Michael's question","m.new_content":{"body":"I mean I am no champion so let's see what is the answer to Michael's question","msgtype":"m.text","org.matrix.msc1767.text":"I mean I am no champion so let's see what is the answer to Michael's question"},"m.relates_to":{"event_id":"$YUuLRK9J9sTRbDBHpd0mnJTSIfnttIrXFpHNA3DsxwM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I mean I am no champion so let's see what is the answer to Michael's question"},"ts":1648752102873,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$WkPjXuxetzIB4v2H7zbJcnWvAQEdl7chTgpBmlRRaoc"},
{"content":{"body":"I'm unsure whether my topic counts as a reply anymore? that topic was kind of meandering","msgtype":"m.text","org.matrix.msc1767.text":"I'm unsure whether my topic counts as a reply anymore? that topic was kind of meandering"},"ts":1648752237401,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VOfeafIKuqIIKO7AlY71218M52fmMLImWj2VJJV7S70"},
{"content":{"body":"chairs: feel free to move it if you want","msgtype":"m.text","org.matrix.msc1767.text":"chairs: feel free to move it if you want"},"ts":1648752247114,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CMKSHT0JDvSiy-Onqz0GDw-Lwm7tfCBfkPbtd8K03gI"},
{"content":{"body":"why should we tiptoe around singling out TS? i am kind of confused","msgtype":"m.text","org.matrix.msc1767.text":"why should we tiptoe around singling out TS? i am kind of confused"},"ts":1648752405142,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pZOSgwot-DMsi0uoF50VnP4nLhA3wl1QmIqNUIUHQpo"},
{"content":{"body":"it _is_ special in the ecosystem","format":"org.matrix.custom.html","formatted_body":"it <em>is</em> special in the ecosystem","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it _is_ special in the ecosystem","mimetype":"text/plain"},{"body":"it <em>is</em> special in the ecosystem","mimetype":"text/html"}]},"ts":1648752410441,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wctiO1d9Op6amEd8JxD9GyrEvxTL2N3o-YwBydpAAa0"},
{"content":{"body":"The idea that we need something close to TS to express type semantics seems overstated on its face; mypy gets by reasonably on literally nothing more than `Foo[Bar, Baz]` for its types.","format":"org.matrix.custom.html","formatted_body":"The idea that we need something close to TS to express type semantics seems overstated on its face; mypy gets by reasonably on literally nothing more than <code>Foo[Bar, Baz]</code> for its types.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The idea that we need something close to TS to express type semantics seems overstated on its face; mypy gets by reasonably on literally nothing more than `Foo[Bar, Baz]` for its types.","mimetype":"text/plain"},{"body":"The idea that we need something close to TS to express type semantics seems overstated on its face; mypy gets by reasonably on literally nothing more than <code>Foo[Bar, Baz]</code> for its types.","mimetype":"text/html"}]},"ts":1648752414420,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8pBF0AH4bm7NniB5wgPnISqtPtshTjR7ut4jJSbHGvc"},
{"content":{"body":"_we_ are not picking winners","format":"org.matrix.custom.html","formatted_body":"<em>we</em> are not picking winners","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"_we_ are not picking winners","mimetype":"text/plain"},{"body":"<em>we</em> are not picking winners","mimetype":"text/html"}]},"ts":1648752419965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DmNm6n0MVtwlz7tTh_hH5hAt_Z4gAuzMPA6ZVSpntRI"},
{"content":{"body":"shu: for one thing, TS keeps adding new syntax, so sticking with their current syntax is bad even if you ignore any other type checkers","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: for one thing, TS keeps adding new syntax, so sticking with their current syntax is bad even if you ignore any other type checkers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: for one thing, TS keeps adding new syntax, so sticking with their current syntax is bad even if you ignore any other type checkers","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: for one thing, TS keeps adding new syntax, so sticking with their current syntax is bad even if you ignore any other type checkers","mimetype":"text/html"}]},"ts":1648752436545,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$46ZTXEe1Qgmmq1AoWGQ5J22G_J7ydomLZSCzU4dEAs8"},
{"content":{"body":"that's not what i'm saying","msgtype":"m.text","org.matrix.msc1767.text":"that's not what i'm saying"},"ts":1648752446115,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DeFPxJkDvDbd9AM0USdKUZ3huLV7YXnCSa2EfkeMoF4"},
{"content":{"body":"seems reasonably likely that the type syntax of 2040 does not look like TS","msgtype":"m.text","org.matrix.msc1767.text":"seems reasonably likely that the type syntax of 2040 does not look like TS"},"ts":1648752452850,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5YIfhnV9H7thhce8Iq9lrVm-sR3zDiGQB5T6gqEn30o"},
{"content":{"body":" * seems reasonably likely that the type syntax of 2040 does not look like TS","m.new_content":{"body":"seems reasonably likely that the type syntax of 2040 does not look like TS","msgtype":"m.text","org.matrix.msc1767.text":"seems reasonably likely that the type syntax of 2040 does not look like TS"},"m.relates_to":{"event_id":"$5YIfhnV9H7thhce8Iq9lrVm-sR3zDiGQB5T6gqEn30o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * seems reasonably likely that the type syntax of 2040 does not look like TS"},"ts":1648752454272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XizOmXORIl2vvzQP3a7cxYNVWO5eo_rd4iRbP3Uldk0"},
{"content":{"body":"even if it's still called that","msgtype":"m.text","org.matrix.msc1767.text":"even if it's still called that"},"ts":1648752459023,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ifqoGpwGjM9cYuIRhLw9DHVYMMFEVWmlUBnnWBm6ZdQ"},
{"content":{"body":"i'm saying a non-technical thing, that it is fine to call out TS as part of the problem statement","msgtype":"m.text","org.matrix.msc1767.text":"i'm saying a non-technical thing, that it is fine to call out TS as part of the problem statement"},"ts":1648752461659,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iYzESdJ_qSrmpZJjTyu4r3Zywa2RPmUg4DsIS9UKuU4"},
{"content":{"body":"(and it might not be)","msgtype":"m.text","org.matrix.msc1767.text":"(and it might not be)"},"ts":1648752462941,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iJMp4HH6VEKZvsDcPyK7Ax-iUQYhqu7WocNX0DCpByA"},
{"content":{"body":"hm","msgtype":"m.text","org.matrix.msc1767.text":"hm"},"ts":1648752471406,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Cu3ZZfz02puwVLqNcm8Z9I52vcqNNPX8PDoT0reCUH4"},
{"content":{"body":"i agree that merging the grammars is infeasible","msgtype":"m.text","org.matrix.msc1767.text":"i agree that merging the grammars is infeasible"},"ts":1648752475063,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0EGNPZUVUXtJT5ogVcR2XObF3t6eNWWsv8-M7G4epOs"},
{"content":{"body":"but apparently the two statements are somehow equivalent in folks' minds? that's confusing to me","msgtype":"m.text","org.matrix.msc1767.text":"but apparently the two statements are somehow equivalent in folks' minds? that's confusing to me"},"ts":1648752486684,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HrrJNGMRduynQsZwmE8Lmz-J3E8VyRxqgL_HcTJUVJY"},
{"content":{"body":"yeah, calling out TS as something that should be accommodateable seems reasonable for the problem statement","msgtype":"m.text","org.matrix.msc1767.text":"yeah, calling out TS as something that should be accommodateable seems reasonable for the problem statement"},"ts":1648752513826,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xomuQ5-EkHoMVYvHJ9-0QQzWvR2l0VqGVTyy2KlIWY4"},
{"content":{"body":"like, i do _not_ want the problem statement to be \"types in JS\"","format":"org.matrix.custom.html","formatted_body":"like, i do <em>not</em> want the problem statement to be &quot;types in JS&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, i do _not_ want the problem statement to be \"types in JS\"","mimetype":"text/plain"},{"body":"like, i do <em>not</em> want the problem statement to be &quot;types in JS&quot;","mimetype":"text/html"}]},"ts":1648752528012,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0H5aqXTjLCJ2eK8O5noNInL6rlQTxpm8I6UkA-n-E3s"},
{"content":{"body":"that's not a problem i'm actually interested in solving! but narrowing gap to TS certainly is","msgtype":"m.text","org.matrix.msc1767.text":"that's not a problem i'm actually interested in solving! but narrowing gap to TS certainly is"},"ts":1648752539645,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xxGCvKyIV75YiYpn0f6efTAmG6dJKZKnzKqcaUU4OAA"},
{"content":{"body":"who's the speaker? for the notes","msgtype":"m.text","org.matrix.msc1767.text":"who's the speaker? for the notes"},"ts":1648752570033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q5wsEyKUkC_WuBDxadRa1qprbZcPZZ38bVAOuzQsLww"},
{"content":{"body":"Francisco Tolmasky","msgtype":"m.text","org.matrix.msc1767.text":"Francisco Tolmasky"},"ts":1648752585379,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JGFEDd59ZLXPyg2CHaLLtEN-sv1cKYNwWsvN50vjGaM"},
{"content":{"body":"Francisco Ryan Tolmasky I","msgtype":"m.text","org.matrix.msc1767.text":"Francisco Ryan Tolmasky I"},"ts":1648752592161,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$i4GVBnWsIJ9Ns6OTxTOqWKKK5vj4wtxTbZCvpFp00Sg"},
{"content":{"body":"shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a syntax node\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a syntax node&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a syntax node\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a syntax node&quot;","mimetype":"text/html"}]},"ts":1648752597665,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$b_O8geXsQ1ICxsJWJ846tV1UEeWNgZo9NyFwiGZQr8E"},
{"content":{"body":"this person does not have an acronym ","msgtype":"m.text","org.matrix.msc1767.text":"this person does not have an acronym "},"ts":1648752613269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KRJ7uy_w65E3tnAT6KHd9giq6vuxE6We-oaXD09Tyo4"},
{"content":{"body":" * shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a parse node\"","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a parse node&quot;","m.new_content":{"body":"shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a parse node\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a parse node&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a parse node\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a parse node&quot;","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$b_O8geXsQ1ICxsJWJ846tV1UEeWNgZo9NyFwiGZQr8E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * shu I very much appreciated your earlier reframing to something like \"non-functional syntax that is unambiguously associated with a parse node\"","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> I very much appreciated your earlier reframing to something like &quot;non-functional syntax that is unambiguously associated with a parse node&quot;","mimetype":"text/html"}]},"ts":1648752613431,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$_E-DSgwPqjiIEHUgI3Fp4AMcT3X5JxukgBnnmNenOgA"},
{"content":{"body":"Richard Gibson: thank you","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: thank you","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: thank you","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: thank you","mimetype":"text/html"}]},"ts":1648752626901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wd7wyrXqGpsSJpufHKeWnY2uctnZeM4kfgF_2_4bJ8s"},
{"content":{"body":"like, nowhere?","msgtype":"m.text","org.matrix.msc1767.text":"like, nowhere?"},"ts":1648752629883,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gZ8VvYha7CH3v9APhHHKisNfAiVndZ5muE-5hVvn7Ug"},
{"content":{"body":"hmm, that's surprising","msgtype":"m.text","org.matrix.msc1767.text":"hmm, that's surprising"},"ts":1648752656308,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ioey1cD2p3ODE9wLNmQjBHI_Meupj_hHGFdM-9H5sfo"},
{"content":{"body":"https://github.com/tc39/notes/blob/main/delegates.txt","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/notes/blob/main/delegates.txt"},"ts":1648752660004,"senderName":"SoftwareChris","senderId":"@softwarechris:matrix.org","id":"$UcnwYnEcqSTPefiPBBLPTbdei8Oso1BlmkGJsoGlh5A"},
{"content":{"body":"not seeing them","msgtype":"m.text","org.matrix.msc1767.text":"not seeing them"},"ts":1648752661475,"senderName":"SoftwareChris","senderId":"@softwarechris:matrix.org","id":"$QLm_4MUPUZwXYdZhgIag00gDPvgf8dLqONpMwRb1ax8"},
{"content":{"body":"...","msgtype":"m.text","org.matrix.msc1767.text":"..."},"ts":1648752670659,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8kTIZRuanpg0daoC31aikDfE-OoPZmN3Ah9xbwLn-kg"},
{"content":{"body":"what's their affiliation?","msgtype":"m.text","org.matrix.msc1767.text":"what's their affiliation?"},"ts":1648752680795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M4KmLAtU9D7kW9-tyOzjftnN3hYe4nM8GSGi2o8KCEE"},
{"content":{"body":"he's from RunKit","msgtype":"m.text","org.matrix.msc1767.text":"he's from RunKit"},"ts":1648752686202,"senderName":"Pieter Ouwerkerk","senderId":"@pouwerkerk:matrix.org","id":"$rBHXoVZItc38jSpDGhP6OsMcjRZCrO97y1w8Bnah1Fg"},
{"content":{"body":"somebody skipped an onboarding step","msgtype":"m.text","org.matrix.msc1767.text":"somebody skipped an onboarding step"},"ts":1648752697662,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4lyz50siSLn-Kyo3otO8-RxTl1Q3gXCujxSVa1WFUNc"},
{"content":{"body":"is that a member?","msgtype":"m.text","org.matrix.msc1767.text":"is that a member?"},"ts":1648752708711,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pS_4U6oZbwTHQxR_vAN9_Gvq9cB7_vB3cO3zCbGx-MU"},
{"content":{"body":"the application to TC39 was in his name but I'll add the issue to GitHub","msgtype":"m.text","org.matrix.msc1767.text":"the application to TC39 was in his name but I'll add the issue to GitHub"},"ts":1648752718126,"senderName":"Pieter Ouwerkerk","senderId":"@pouwerkerk:matrix.org","id":"$sW-oRvyFuRpg01ElidOng-ymr8EEcoOJ_g8m8iwn-tU"},
{"content":{"body":"RunKit, Inc. is an SPC member","msgtype":"m.text","org.matrix.msc1767.text":"RunKit, Inc. is an SPC member"},"ts":1648752741643,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$MLOX5HctYpIadMOxfos1CtdZBao8YCigeXYte2EUATw"},
{"content":{"body":" * RunKit, Inc. is an SPC member","m.new_content":{"body":"RunKit, Inc. is an SPC member","msgtype":"m.text","org.matrix.msc1767.text":"RunKit, Inc. is an SPC member"},"m.relates_to":{"event_id":"$MLOX5HctYpIadMOxfos1CtdZBao8YCigeXYte2EUATw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * RunKit, Inc. is an SPC member"},"ts":1648752763076,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$HeXEaJJJpSxl9CDCjfTm5YlNbu5W9AKXmc7U3w7-AHI"},
{"content":{"body":"thanks folks","msgtype":"m.text","org.matrix.msc1767.text":"thanks folks"},"ts":1648752770059,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$SjmwovA0kjmh7C7xSsKR_qr_j5ID3-3QpcsBur4cO_o"},
{"content":{"body":"I'm not seeing any onboarding issue for them in GH","msgtype":"m.text","org.matrix.msc1767.text":"I'm not seeing any onboarding issue for them in GH"},"ts":1648752831399,"senderName":"SoftwareChris","senderId":"@softwarechris:matrix.org","id":"$Whbmh29YLE4tywDnEs3W4Nb9fAjhgjZS26cdOKt7XSI"},
{"content":{"body":"(creating the onboarding issue, he was under the impression this was all done already)","msgtype":"m.text","org.matrix.msc1767.text":"(creating the onboarding issue, he was under the impression this was all done already)"},"ts":1648752844059,"senderName":"Pieter Ouwerkerk","senderId":"@pouwerkerk:matrix.org","id":"$wqwlpY5bAw2353BY1MuZKr8F_kB4XZGBC6aiedEEToo"},
{"content":{"body":"> <@shuyuguo:matrix.org> that's not a problem i'm actually interested in solving! but narrowing gap to TS certainly is\n\nif the problem the proposal is trying to solve is specific to TS, that needs to be made clear","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xxGCvKyIV75YiYpn0f6efTAmG6dJKZKnzKqcaUU4OAA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that&#39;s not a problem i&#39;m actually interested in solving! but narrowing gap to TS certainly is</blockquote></mx-reply>if the problem the proposal is trying to solve is specific to TS, that needs to be made clear","m.relates_to":{"m.in_reply_to":{"event_id":"$xxGCvKyIV75YiYpn0f6efTAmG6dJKZKnzKqcaUU4OAA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> that's not a problem i'm actually interested in solving! but narrowing gap to TS certainly is\n\nif the problem the proposal is trying to solve is specific to TS, that needs to be made clear","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xxGCvKyIV75YiYpn0f6efTAmG6dJKZKnzKqcaUU4OAA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that&#39;s not a problem i&#39;m actually interested in solving! but narrowing gap to TS certainly is</blockquote></mx-reply>if the problem the proposal is trying to solve is specific to TS, that needs to be made clear","mimetype":"text/html"}]},"ts":1648752909715,"senderName":"SoftwareChris","senderId":"@softwarechris:matrix.org","id":"$HOUl71RAxQPKqnU9O17xPfUZQWIX8bxMYxY1hJFUUwU"},
{"content":{"body":"genuinely asking, in what way is this currently unclear","msgtype":"m.text","org.matrix.msc1767.text":"genuinely asking, in what way is this currently unclear"},"ts":1648752938292,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EbTYhFhU05G4mOI0dW1tn_PZf3uWfwsbxmPdVN-sJIM"},
{"content":{"body":"and to be clear, there is nuance to \"specific to TS\"","msgtype":"m.text","org.matrix.msc1767.text":"and to be clear, there is nuance to \"specific to TS\""},"ts":1648752946644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XFquZ3cD2n-U4issfhM31awmW1tjIz8MpVY8J7Wt7RY"},
{"content":{"body":"it does not mean \"make JS TS\"","msgtype":"m.text","org.matrix.msc1767.text":"it does not mean \"make JS TS\""},"ts":1648752950993,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GT5IWRnLd1LXTjmdhyTvPQ8Sa8kvxpPqhRasMg7kmJM"},
{"content":{"body":"it means \"narrowing gap to TS is part of the goal\"","msgtype":"m.text","org.matrix.msc1767.text":"it means \"narrowing gap to TS is part of the goal\""},"ts":1648752962739,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eC3TMjAvqE0HnnJtgtZFj3y03lkELWtkXZPGcliKHB8"},
{"content":{"body":"the responses to WH sounded like it was not specific to TS","msgtype":"m.text","org.matrix.msc1767.text":"the responses to WH sounded like it was not specific to TS"},"ts":1648752976459,"senderName":"SoftwareChris","senderId":"@softwarechris:matrix.org","id":"$5D90yKpeU_11w6DlO0FF62MRv6q92mWDn8R3rQodaOE"},
{"content":{"body":"to be clear, it is not solely around ts and there should be efforts to accomodate flow as well for instance even if it is less used","msgtype":"m.text","org.matrix.msc1767.text":"to be clear, it is not solely around ts and there should be efforts to accomodate flow as well for instance even if it is less used"},"ts":1648752997748,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$-_qBeEg-P-ilKhlouU3VVTVNnWxjP2e63FAFQF-rI_w"},
{"content":{"body":"a solution can be not exclusive to TS and still be specific to TS","msgtype":"m.text","org.matrix.msc1767.text":"a solution can be not exclusive to TS and still be specific to TS"},"ts":1648752998018,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cd1vhIjLzbieDu9QQV43n0mK2h1YIGnFI1BXQfU7PCk"},
{"content":{"body":"is how i understood it","msgtype":"m.text","org.matrix.msc1767.text":"is how i understood it"},"ts":1648753000906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_L34Dv67A4h77CK98EUTXhwY7qmsMwNtc-OPYlaKSIk"},
{"content":{"body":"flow and ts could evolve their type system in the same standardized space","msgtype":"m.text","org.matrix.msc1767.text":"flow and ts could evolve their type system in the same standardized space"},"ts":1648753010993,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$GV4FkXGKCsowzet4ySnPjPwZgCZTWCLXW8vz7NX1Qcg"},
{"content":{"body":" * flow and ts could evolve their type system in the same standardized space","m.new_content":{"body":"flow and ts could evolve their type system in the same standardized space","msgtype":"m.text","org.matrix.msc1767.text":"flow and ts could evolve their type system in the same standardized space"},"m.relates_to":{"event_id":"$GV4FkXGKCsowzet4ySnPjPwZgCZTWCLXW8vz7NX1Qcg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * flow and ts could evolve their type system in the same standardized space"},"ts":1648753021428,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$BE7zJzrg3_Qiv_maXXbtCCT0QXOaC8idoxnEGCO7-io"},
{"content":{"body":"> <@pouwerkerk:matrix.org> (creating the onboarding issue, he was under the impression this was all done already)\n\nhttps://github.com/tc39/Admin-and-Business/issues/223","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wqwlpY5bAw2353BY1MuZKr8F_kB4XZGBC6aiedEEToo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pouwerkerk:matrix.org\">@pouwerkerk:matrix.org</a><br>(creating the onboarding issue, he was under the impression this was all done already)</blockquote></mx-reply>https://github.com/tc39/Admin-and-Business/issues/223","m.relates_to":{"m.in_reply_to":{"event_id":"$wqwlpY5bAw2353BY1MuZKr8F_kB4XZGBC6aiedEEToo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pouwerkerk:matrix.org> (creating the onboarding issue, he was under the impression this was all done already)\n\nhttps://github.com/tc39/Admin-and-Business/issues/223","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wqwlpY5bAw2353BY1MuZKr8F_kB4XZGBC6aiedEEToo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pouwerkerk:matrix.org\">@pouwerkerk:matrix.org</a><br>(creating the onboarding issue, he was under the impression this was all done already)</blockquote></mx-reply>https://github.com/tc39/Admin-and-Business/issues/223","mimetype":"text/html"}]},"ts":1648753030416,"senderName":"Pieter Ouwerkerk","senderId":"@pouwerkerk:matrix.org","id":"$x-wR5x60V265USbJUZJ7t7Kcz1PTnAWQFMZtG2IKLzo"},
{"content":{"body":"can we put the scope clarifications in the conclusion of the notes?","msgtype":"m.text","org.matrix.msc1767.text":"can we put the scope clarifications in the conclusion of the notes?"},"ts":1648753087435,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hks90eRA0BlrZe56MVBINgb6kGCUr3VVmwQl0sxb_t8"},
{"content":{"body":"agree with ljharb we should be careful about community messaging","format":"org.matrix.custom.html","formatted_body":"agree with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> we should be careful about community messaging","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"agree with ljharb we should be careful about community messaging","mimetype":"text/plain"},{"body":"agree with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> we should be careful about community messaging","mimetype":"text/html"}]},"ts":1648753112868,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MlRwZthyFND8p0dLbJYHYRW305JEOZ8XudH3prVuOTY"},
{"content":{"body":"big +1 to kevin's thing","msgtype":"m.text","org.matrix.msc1767.text":"big +1 to kevin's thing"},"ts":1648753142413,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f6FNvJ50bUNEwM5Xo5ctrK3vBRV1hvEO5H70ql0D5HE"},
{"content":{"body":"Community is already afraid: -> https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c","msgtype":"m.text","org.matrix.msc1767.text":"Community is already afraid: -> https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c"},"ts":1648753187991,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$PZmdXTRZRYgOawvTHr5iBTxccaspr7P9U_X-wS2Z44s"},
{"content":{"body":"Daniel said the other day on the record that they would not give special treatment to TypeScript and would maintain neutrality among TS vs. Flow vs. X (with the caveat that what the committee decides is not up to him)","msgtype":"m.text","org.matrix.msc1767.text":"Daniel said the other day on the record that they would not give special treatment to TypeScript and would maintain neutrality among TS vs. Flow vs. X (with the caveat that what the committee decides is not up to him)"},"ts":1648753195703,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$nFHvu5owkc3fQllVtzdhj9bXbnwmff6WBmgcM8YI--k"},
{"content":{"body":"Which we will hope to see in upcoming discussions ","msgtype":"m.text","org.matrix.msc1767.text":"Which we will hope to see in upcoming discussions "},"ts":1648753213672,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$GyW7UXW7FE0HgBRLzIVqZcpu8UHMvXUvwmfI_QAU2lI"},
{"content":{"body":"I assume the proposal repo will need to be updated to reflect this","msgtype":"m.text","org.matrix.msc1767.text":"I assume the proposal repo will need to be updated to reflect this"},"ts":1648753225592,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$7l_Yd0TTg5pgGTZDs4OtRjuMljQV8bOpdCYDRHdegSc"},
{"content":{"body":"That blogpost is jumping to some very wrong conclusions, so shrug.","msgtype":"m.text","org.matrix.msc1767.text":"That blogpost is jumping to some very wrong conclusions, so shrug."},"ts":1648753235346,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$J2TUQZeYKUAkD0r2N-bioF_h6HEb7gVcZ4OexOVBhsI"},
{"content":{"body":"> <@christianulbrich:matrix.org> Community is already afraid: -> https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c\n\nthis person is already severely mistaken in thinking that there will ever be a type system built into JS","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PZmdXTRZRYgOawvTHr5iBTxccaspr7P9U_X-wS2Z44s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br>Community is already afraid: -&gt; https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c</blockquote></mx-reply>this person is already severely mistaken in thinking that there will ever be a type system built into JS","m.relates_to":{"m.in_reply_to":{"event_id":"$PZmdXTRZRYgOawvTHr5iBTxccaspr7P9U_X-wS2Z44s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@christianulbrich:matrix.org> Community is already afraid: -> https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c\n\nthis person is already severely mistaken in thinking that there will ever be a type system built into JS","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PZmdXTRZRYgOawvTHr5iBTxccaspr7P9U_X-wS2Z44s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br>Community is already afraid: -&gt; https://medium.com/codex/the-typescript-team-is-going-to-kill-javascript-59c65937258c</blockquote></mx-reply>this person is already severely mistaken in thinking that there will ever be a type system built into JS","mimetype":"text/html"}]},"ts":1648753319098,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KGugbNogtEbIPu_8kh91R-htaht2pJ7kyzG3V4fR7rA"},
{"content":{"body":"we really gotta make, like, a formal statement about that somewhere","msgtype":"m.text","org.matrix.msc1767.text":"we really gotta make, like, a formal statement about that somewhere"},"ts":1648753337786,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jNBYhCjpk0IupcU4piHpRy_renwfGRWHvy69onMui4w"},
{"content":{"body":"lol, but even if we did, we're still cool to do so with a pragma.","msgtype":"m.text","org.matrix.msc1767.text":"lol, but even if we did, we're still cool to do so with a pragma."},"ts":1648753339228,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Q0DsFppt8E-3KIkjUgBTGFSGku1USjkCAMZmG7WyZd8"},
{"content":{"body":"people keep thinking it will happen","msgtype":"m.text","org.matrix.msc1767.text":"people keep thinking it will happen"},"ts":1648753344523,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t1sgxsQZ_15z4yQFyiKSrWxhBEVGFNPsh6hfHwJrh4E"},
{"content":{"body":"how is TS's system not \"real\"","msgtype":"m.text","org.matrix.msc1767.text":"how is TS's system not \"real\""},"ts":1648753371191,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ju5ZpQymw2EPpKr6HnQoxdJIRniW7FtM1RWKe5tfP6s"},
{"content":{"body":"lol","msgtype":"m.text","org.matrix.msc1767.text":"lol"},"ts":1648753371744,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8GiyATruQOLCdwnM9v-PpXt8_jRysdkOjx1p863C5Fg"},
{"content":{"body":"i dunno, depends how you define \"real\" :-p","msgtype":"m.text","org.matrix.msc1767.text":"i dunno, depends how you define \"real\" :-p"},"ts":1648753398443,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kLyc92g3APBtvhmCL-OrJeJ9Te1Wl-eIxgyRObFWwCY"},
{"content":{"body":"i define it by a thing that exists?","msgtype":"m.text","org.matrix.msc1767.text":"i define it by a thing that exists?"},"ts":1648753414332,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$juJc6LDAkox7-scoYUHKg2esZBzUqu2qlYx_yC5p258"},
{"content":{"body":"things not in the JS specification are not real","msgtype":"m.text","org.matrix.msc1767.text":"things not in the JS specification are not real"},"ts":1648753421539,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y8kLagSBRXJkHX_raxw2eg1eAga5BULLAvOEDlRa2pQ"},
{"content":{"body":"for example, console.log is fake","msgtype":"m.text","org.matrix.msc1767.text":"for example, console.log is fake"},"ts":1648753426498,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aMxZkpp1p52HIkPmn-FzmGnTNur5zdSp1qMkVWooqc0"},
{"content":{"body":"new worldview","msgtype":"m.text","org.matrix.msc1767.text":"new worldview"},"ts":1648753429223,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$psBHSVaKqQeyHqMR4xq5GfJ8w9bPeguqJFVziQ6mBQM"},
{"content":{"body":"\"understood and given meaning by the browser\" is a reasonable definition of \"real\" in this context","msgtype":"m.text","org.matrix.msc1767.text":"\"understood and given meaning by the browser\" is a reasonable definition of \"real\" in this context"},"ts":1648753449074,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LEUamDVKpYV4glkOR09GtQaLHcu40m4B-nhCSwDEu1k"},
{"content":{"body":"Thank you yulia. That was much needed.","format":"org.matrix.custom.html","formatted_body":"Thank you <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>. That was much needed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thank you yulia. That was much needed.","mimetype":"text/plain"},{"body":"Thank you <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>. That was much needed.","mimetype":"text/html"}]},"ts":1648753475021,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TR0AEE-otvEOw6fly5df9I9O3BvJpU8wa-HdfFOz994"},
{"content":{"body":"Very great, where is the slide?","msgtype":"m.text","org.matrix.msc1767.text":"Very great, where is the slide?"},"ts":1648753485426,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$8dEtM1H1THuTM1M2Z9zu4-oXJpw5jSA0LszhEIsXhVg"},
{"content":{"body":"https://docs.google.com/presentation/d/1ls5RZiBaLekVrJoj4Ju8hBSGQdKLTXU1uI-0XcjcDvs/edit#slide=id.g1210bab1685_0_75","msgtype":"m.text","org.matrix.msc1767.text":"https://docs.google.com/presentation/d/1ls5RZiBaLekVrJoj4Ju8hBSGQdKLTXU1uI-0XcjcDvs/edit#slide=id.g1210bab1685_0_75"},"ts":1648753500166,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wnRavdePZZ1pGJSRgpczbvQgHJGRMwAbe1lN_q-CMl0"},
{"content":{"body":"spec is here: https://ci.tc39.es/preview/tc39/ecma262/sha/efb411f2f2a6f0e242849a8cc8d7e21bbcdff543/#sec-apl-expression-rules","msgtype":"m.text","org.matrix.msc1767.text":"spec is here: https://ci.tc39.es/preview/tc39/ecma262/sha/efb411f2f2a6f0e242849a8cc8d7e21bbcdff543/#sec-apl-expression-rules"},"ts":1648753506974,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$IooGdzSUv39F0Xf_eZ191SXCypkYx8sMaZ7nGedS5W0"},
{"content":{"body":"I'd like to share it to all chinese delegates because they are sleeping now","msgtype":"m.text","org.matrix.msc1767.text":"I'd like to share it to all chinese delegates because they are sleeping now"},"ts":1648753507100,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$5BFiFYT1A78A-NQeo-a7zpFshL_kDu4iACRaWSKT0y8"},
{"content":{"body":"pr is here https://github.com/tc39/ecma262/pull/2717","msgtype":"m.text","org.matrix.msc1767.text":"pr is here https://github.com/tc39/ecma262/pull/2717"},"ts":1648753521156,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_SZuD08K08tFj-2G16mRG2_r3i3YterxtH-pLbxMSrA"},
{"content":{"body":"it is april 1st in china, so we are shipping a bit early but it is april first somewhere ","msgtype":"m.text","org.matrix.msc1767.text":"it is april 1st in china, so we are shipping a bit early but it is april first somewhere "},"ts":1648753534056,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Tu7EI4fPJggmmkoUitS572Gqi_dSXfyI3_DJaTYfFMk"},
{"content":{"body":"TabAtkins: i had thought this, but! not being in ecma262 isn't what's stopping browsers from interpreting TS with a typechecker","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: i had thought this, but! not being in ecma262 isn't what's stopping browsers from interpreting TS with a typechecker","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: i had thought this, but! not being in ecma262 isn't what's stopping browsers from interpreting TS with a typechecker","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: i had thought this, but! not being in ecma262 isn't what's stopping browsers from interpreting TS with a typechecker","mimetype":"text/html"}]},"ts":1648753542434,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yJJ3u1D_MFOv25TaPN10YL-Qm5Zr0vaIae89ELc4CNA"},
{"content":{"body":"we made it through everything?! no overflow! thanks chairs!","msgtype":"m.text","org.matrix.msc1767.text":"we made it through everything?! no overflow! thanks chairs!"},"ts":1648753567648,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TVMJPVd__sKZAYHdA7CtfUWaGEypp_TfQk2EAi2dp1s"},
{"content":{"body":"bakkot: another thing to consider re: `super` in decorators is that decorator evaluations are interwoven with dynamic prop evaluations ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: another thing to consider re: <code>super</code> in decorators is that decorator evaluations are interwoven with dynamic prop evaluations","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: another thing to consider re: `super` in decorators is that decorator evaluations are interwoven with dynamic prop evaluations ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: another thing to consider re: <code>super</code> in decorators is that decorator evaluations are interwoven with dynamic prop evaluations","mimetype":"text/html"}]},"ts":1648753578632,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$LYq13MFSvKZ9FZcaXaL9lTHO9OIBZ78k11xEHCdvlJM"},
{"content":{"body":"it would be _possible_ to switch the context back and forth for each one, but certainly confusing","format":"org.matrix.custom.html","formatted_body":"it would be <em>possible</em> to switch the context back and forth for each one, but certainly confusing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it would be _possible_ to switch the context back and forth for each one, but certainly confusing","mimetype":"text/plain"},{"body":"it would be <em>possible</em> to switch the context back and forth for each one, but certainly confusing","mimetype":"text/html"}]},"ts":1648753602222,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$vPYjQcaXY-BPlOH87BZrD78E53HUMxyYX-5CYdkE78s"},
{"content":{"body":"and I'm not sure if possible performantly","msgtype":"m.text","org.matrix.msc1767.text":"and I'm not sure if possible performantly"},"ts":1648753610654,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$cSiflfFqcIjS6QceG_sKE9SAo-6aMjQYcd_wj8b7b24"},
{"content":{"body":"I guess in implementation it's probably different than in spec","msgtype":"m.text","org.matrix.msc1767.text":"I guess in implementation it's probably different than in spec"},"ts":1648753627594,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$aaQ_5GfnlXf33Cy_IzioiNEWp-HxFXXbLRw4FEF-TFM"},
{"content":{"body":"Congrats on stage 5 yulia! Really record setting championing right there!","msgtype":"m.text"},"ts":1648754338587,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$owlTEHffeQEGc5-AaAyfi7VupzHcQ4ywrO8Clec6sjA"}
]