[
{"content":{"body":"Yes, would like to do that if possible","msgtype":"m.text"},"ts":1648734311146,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$C3H3mfO7dDPRESZGDoblKbej3cxRYCnxfCrGLOkc5Oc"},
{"content":{"body":"Sorry for all of the last minute additions ðŸ˜…","msgtype":"m.text"},"ts":1648734324030,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$o3OtOZHWeFw0jAou39ElGcWRWIUbNzJyOrNfYrltJVc"},
{"content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734851978,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg"},
{"content":{"body":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734875525,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6khfEmHTt87vwNcc3v4J8sFCmJLY_f-CkG8AUxeKB4w"},
{"content":{"body":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","m.new_content":{"body":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?","msgtype":"m.text","org.matrix.msc1767.text":"Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"m.relates_to":{"event_id":"$gTYRIsqzdHX0j-MYdfuKChPQdVymrwmiLmqS-m5istg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Always been curious - Is there a formal difference between the incubator calls and other (non-plenary) calls where proposals may be discussed?"},"ts":1648734892690,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Qi41ACII7SDrGdl1ju-w7O4Jp5ba3R6s--cext7Ceus"},
{"content":{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: incubator calls are usually just one-offs instead of recurring like most of the others","mimetype":"text/html"}]},"ts":1648734944136,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-3q7zvMDpD17RLuuEZSPHX1IkNn6TzOw-nrHUz2ab38"},
{"content":{"body":"*** Plenary begins in 3 mins! ***","msgtype":"m.text","org.matrix.msc1767.text":"*** Plenary begins in 3 mins! ***"},"ts":1648735045071,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$OVomhiwp4UTxL2fRH1rrnyIOAlc9R5HqcVXfMgaW3ko"},
{"content":{"body":"bakkot: thanks for the answer","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: thanks for the answer","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: thanks for the answer","mimetype":"text/html"}]},"ts":1648736918521,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gNp-fSvWWSscCInhNTwESaUk41Blsgcwd-RJSbWXJR8"},
{"content":{"body":"not familiar with that meaning of \"borrowability\"","msgtype":"m.text","org.matrix.msc1767.text":"not familiar with that meaning of \"borrowability\""},"ts":1648736962864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MlFFx1i7SFWfQH7NHAIrfeyWhkOKI6Dn3HD58CzZoQ8"},
{"content":{"body":"shu: \"borrowing\" a method and calling it on another instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: \"borrowing\" a method and calling it on another instance","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;borrowing&quot; a method and calling it on another instance","mimetype":"text/html"}]},"ts":1648737243481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QSoUlrPP1KpyXg03OY9WVsl-w2SA-7rdPogXzxedNxU"},
{"content":{"body":"Richard Gibson: please mute","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: please mute","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: please mute","mimetype":"text/html"}]},"ts":1648737900963,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uJzhTzcxLHQnhNLbsgHbZI6n7-_85NF2cuqhaRG6hws"},
{"content":{"body":"Did we discuss whether arguments can branch on whether it has the internal slot?","msgtype":"m.text","org.matrix.msc1767.text":"Did we discuss whether arguments can branch on whether it has the internal slot?"},"ts":1648738106200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OccBLSD8_kUlRDI15pCLIwJ5WXOQlGNQlFBtnmDsI9Q"},
{"content":{"body":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set","msgtype":"m.text","org.matrix.msc1767.text":"Eg, https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.set"},"ts":1648738145185,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RL0lhlc-vmLXbRr8upL3MC2a4jVGCzceXPUM6vxDtfs"},
{"content":{"body":"Justin Ridgewell: briefly during the presentation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: briefly during the presentation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: briefly during the presentation","mimetype":"text/html"}]},"ts":1648738148794,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Acp0H70p18Hfog3OmmP1u9TF9jLYUVuuBuIVBVaJ0UQ"},
{"content":{"body":"haven't presented that explicitly, but yes, it's a possibility","msgtype":"m.text","org.matrix.msc1767.text":"haven't presented that explicitly, but yes, it's a possibility"},"ts":1648738151703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FRERSHd8HTYeRYX6GiFch-BE1BLqeQ6t4fJhIAJxq84"},
{"content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738157745,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8"},
{"content":{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: we didn't talk about it for arguments specifically","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: we didn't talk about it for arguments specifically","mimetype":"text/html"}]},"ts":1648738158495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$upjKjspg_lnpPH0q6KTn397vrvQ8OgnfJ2aXCfEqLLA"},
{"content":{"body":" * This branches on whether the argument is a true TypedArray or an iterable","m.new_content":{"body":"This branches on whether the argument is a true TypedArray or an iterable","msgtype":"m.text","org.matrix.msc1767.text":"This branches on whether the argument is a true TypedArray or an iterable"},"m.relates_to":{"event_id":"$TjmsOgqiuT91OWwdqun2rksrOEuhXL7CbjvJvSRslz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * This branches on whether the argument is a true TypedArray or an iterable"},"ts":1648738165284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ddZCANQwe8lbyjOdqSsnvcsnbnPqzz3O8vHuYj0z4fw"},
{"content":{"body":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)","msgtype":"m.text","org.matrix.msc1767.text":"(fresh handler lookup was definitely a mistake tho, even if it's not why Proxy is slow)"},"ts":1648738167922,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jDbhI0B7IibOONwFL8RJpl2YdDlOwICy3j9IGCQhi1Q"},
{"content":{"body":"We could have both a fast path and a customizable slow path","msgtype":"m.text","org.matrix.msc1767.text":"We could have both a fast path and a customizable slow path"},"ts":1648738180086,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$A_OQfwf14tdUJqWiTVBfmi8TYbZmVX57qPLp8u1qPt8"},
{"content":{"body":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot","msgtype":"m.text","org.matrix.msc1767.text":"i like the idea of detecting argument slots, and only calling the method observably if it lacks the slot"},"ts":1648738201421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFGVVDK_tKHD7MWEt-GCxvsBo2GO9QOBX7Hef8vvxE4"},
{"content":{"body":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about","msgtype":"m.text","org.matrix.msc1767.text":"V8 has said they don't want more than 2 paths because it becomes impossible to reason about"},"ts":1648738215553,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OR3_DSNvWOv3ZSo8yjqyPyYWFYb3jbSRgXu9fFfs8zM"},
{"content":{"body":"but without something like constructor hooks, that still breaks expected subclass invariants","msgtype":"m.text","org.matrix.msc1767.text":"but without something like constructor hooks, that still breaks expected subclass invariants"},"ts":1648738217422,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8KCkTpKmE7-9q5eZgCqdcd7TnhGO75r457YOSeKKi2Y"},
{"content":{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","format":"org.matrix.custom.html","formatted_body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and Justin Ridgewell's suggestion would satisfy markm, as I understand it","mimetype":"text/plain"},{"body":"and <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>'s suggestion would satisfy markm, as I understand it","mimetype":"text/html"}]},"ts":1648738222625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$31kX8T68OgjBCwOzflpPfq69kVo1IxWIRTeJ90j2xzA"},
{"content":{"body":"Ah, slide 10 discusses hybrid appraoch","msgtype":"m.text","org.matrix.msc1767.text":"Ah, slide 10 discusses hybrid appraoch"},"ts":1648738270743,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CRw_w0bgRpr7ZQfhdQoLwancIQMK_7_47G5EHBFoykw"},
{"content":{"body":"Sorry, I need to pay more attention","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, I need to pay more attention"},"ts":1648738280771,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CFF5_UFKFONa4NpaFXpRNzl9QJS_6JF5TwtRhP_nr7c"},
{"content":{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: Were you still planning to request extra time for decorators? Itâ€™s not in the TCQ agenda yet.","mimetype":"text/html"}]},"ts":1648738645123,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bLAynzk8frXgCbFNCf8nU18hZrVw1evJUbWHs7W8fME"},
{"content":{"body":"yes, will do","msgtype":"m.text","org.matrix.msc1767.text":"yes, will do"},"ts":1648738686216,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$K_3Z7glqRUjxnyPUgIURaB3h9GKQhCNFnFbR1PeGg38"},
{"content":{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: thinking more, I don't understand why hooks would satisfy your use case","mimetype":"text/html"}]},"ts":1648738759807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gry30tg6oBzzTFmn0qs_HqbA1ErSItkhOm-IBNZE9mY"},
{"content":{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","format":"org.matrix.custom.html","formatted_body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, the reason you do `Set.p.add.call` is presumably because you want to _not_ use the user hooks","mimetype":"text/plain"},{"body":"like, the reason you do <code>Set.p.add.call</code> is presumably because you want to <em>not</em> use the user hooks","mimetype":"text/html"}]},"ts":1648738776508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3uvI4Uu7oTY4wcK3L-aym5qvP5I-_Uv4Ej1uOSBDfrc"},
{"content":{"body":"and if the hooks are built in, now you can't avoid it","msgtype":"m.text","org.matrix.msc1767.text":"and if the hooks are built in, now you can't avoid it"},"ts":1648738784001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3dCZFqEEp7HRGe2sufMXCpVTa1SiFrou3XNHl8szX0"},
{"content":{"body":"so... seems bad?","msgtype":"m.text","org.matrix.msc1767.text":"so... seems bad?"},"ts":1648738786647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UlXS5_ZSHMmxY87MfcOYGxj2tdtX0SXeC_b1rkEcm3k"},
{"content":{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","format":"org.matrix.custom.html","formatted_body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you want to give the user the option to hook, you would just call `arg.add()`","mimetype":"text/plain"},{"body":"like if you want to give the user the option to hook, you would just call <code>arg.add()</code>","mimetype":"text/html"}]},"ts":1648738807177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zAdCUP9KaH2GBSfxRazD9olHCloxxucvnNTbim7NQzw"},
{"content":{"body":"no, it's because i don't want to depend on the `add` method being present","format":"org.matrix.custom.html","formatted_body":"no, it's because i don't want to depend on the <code>add</code> method being present","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no, it's because i don't want to depend on the `add` method being present","mimetype":"text/plain"},{"body":"no, it's because i don't want to depend on the <code>add</code> method being present","mimetype":"text/html"}]},"ts":1648738833647,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7uq84C_5RY0m2UAfFV-8V62J3EpTEp6GmiHGtKcj1Jg"},
{"content":{"body":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine","msgtype":"m.text","org.matrix.msc1767.text":"certainly if someone provides a hook that throws, then i'll just throw, and that's fine"},"ts":1648738852439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rclTRQLalyMLZpMbQv6pNGwaZyP5-WDEdmO8DcUjgmw"},
{"content":{"body":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely.","msgtype":"m.text","org.matrix.msc1767.text":"but what it means is that at the time their instance is created - when i can just trust everything works - the proper behavior is set in stone, and i can invoke it later safely."},"ts":1648738884883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tcPbRTEfO3jeO6pj5LW0LFZSf7DIOrKGfgzCr6qcLu8"},
{"content":{"body":"couldn't you just cache the methods off the instance?","msgtype":"m.text","org.matrix.msc1767.text":"couldn't you just cache the methods off the instance?"},"ts":1648738913370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6_728BNOMLpycJ4Y-bwFwnHBU9N2IGg5l2_jJVijNmc"},
{"content":{"body":"my fn might be called with instances from N different subclasses, how would i cache them all","msgtype":"m.text","org.matrix.msc1767.text":"my fn might be called with instances from N different subclasses, how would i cache them all"},"ts":1648739002939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krwWA0XkJoGsk17W8TektUmUGN1jDVYOWPby-hbP1ws"},
{"content":{"body":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that","msgtype":"m.text","org.matrix.msc1767.text":"iow i can rely on the instance being correct when it was created - but \"when it's passed to me\" is potentially much later than that"},"ts":1648739022386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MYMXiiveb2VK_yvUOr8EWKe6yXHcbh9hqgmyM5u6yCI"},
{"content":{"body":"so, wait, why do you not want to call the method when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"so, wait, why do you not want to call the method when it's passed to you"},"ts":1648739115719,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mt4IFw0SknjLrEcwRBa2_ZxNX6i1BK-54NcbL3ITyj8"},
{"content":{"body":"why can you trust it any more when the instance is crated than when it's passed to you","msgtype":"m.text","org.matrix.msc1767.text":"why can you trust it any more when the instance is crated than when it's passed to you"},"ts":1648739125416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QKNG-N170YDydNRQrJanVDSOGBfggL8oqMxRIG3S3wk"},
{"content":{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","format":"org.matrix.custom.html","formatted_body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could `delete Set.prototype.add`","mimetype":"text/plain"},{"body":"if it's a subclass i probably can, tbh. but if it's not a subclass, i can't trust it because any random person could <code>delete Set.prototype.add</code>","mimetype":"text/html"}]},"ts":1648739223362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sBsV6mgGZJ41mIi6mC0yEuIJnJ7z39q__a0FTJO0x-k"},
{"content":{"body":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one","msgtype":"m.text","org.matrix.msc1767.text":"i agree this stuff is murky, and the Set constructor's calling of \"add\" makes this specific example probably a bad one"},"ts":1648739249542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$23Vjqiuwi8wQP9QVGCJMF11L1F6p6vosdBipsYVTF6A"},
{"content":{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","format":"org.matrix.custom.html","formatted_body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i feel like, if someone passes you a set, and someone else has deleted `Set.prototype.add`, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/plain"},{"body":"i feel like, if someone passes you a set, and someone else has deleted <code>Set.prototype.add</code>, and you still want to work, it is not obvious to me that there's any benefit to anyone to still work","mimetype":"text/html"}]},"ts":1648739333249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1zevfZoCjxw6NG8AeVe7Goz9BOamENbrNHbSw_K6-4U"},
{"content":{"body":"like a [[SetData]] -> set-like -> iterable fallback?","msgtype":"m.text","org.matrix.msc1767.text":"like a [[SetData]] -> set-like -> iterable fallback?"},"ts":1648739456105,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O6hvBlYXgXnrIxkCSOVLinqOntZQR7sh7Zwz33oCTdA"},
{"content":{"body":"I guess that wouldn't hurt","msgtype":"m.text","org.matrix.msc1767.text":"I guess that wouldn't hurt"},"ts":1648739461903,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vFIBtmxJx3fFAodHyO_pX1kmRz3SyT9JVioqji-cVfE"},
{"content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739464531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A"},
{"content":{"body":" * <hit enter too fast, one sec>","m.new_content":{"body":"<hit enter too fast, one sec>","msgtype":"m.text","org.matrix.msc1767.text":"<hit enter too fast, one sec>"},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * <hit enter too fast, one sec>"},"ts":1648739473752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XaVCqblF_PPd2mEVNrmgoRdBmyWUmY6tXD5pLcPj-yA"},
{"content":{"body":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.text":"@bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * @bakkot for me, deleting builtins shouldn't cause any part of the app not to work, ideally."},"ts":1648739499457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZTKLZWYO33e5EAy1oga9ZpEDv0qlHuMf7Eg7vrHWD30"},
{"content":{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","m.new_content":{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$CAkvwPB5rgmBz53PPOMfEVUumu2qYLAjp27vT-H1C5A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>:  for me, deleting builtins shouldn't cause any part of the app not to work, ideally.","mimetype":"text/html"}]},"ts":1648739505774,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5NeGmd4X_PYOOmXnxh3H_bLhc2oJBS5tbnIV2O5V4wE"},
{"content":{"body":"really? how can that be true?","msgtype":"m.text","org.matrix.msc1767.text":"really? how can that be true?"},"ts":1648739637638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FS_96hXKcvU0Onf6t6NgfTXS41a93VUY5nUmC3bDrro"},
{"content":{"body":"as long as you delete them after the app is initialized, it should keep working just fine","msgtype":"m.text","org.matrix.msc1767.text":"as long as you delete them after the app is initialized, it should keep working just fine"},"ts":1648739889538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KiDm0YORrVRuqMvTPtyj0dXdFKBUkeBtPgkt_78P3ik"},
{"content":{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","format":"org.matrix.custom.html","formatted_body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work","mimetype":"text/plain"},{"body":"wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work","mimetype":"text/html"}]},"ts":1648739930917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"},
{"content":{"body":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break","msgtype":"m.text","org.matrix.msc1767.text":"i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break"},"ts":1648739953345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"},
{"content":{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: I would agree with that, but if we're discouraging subclassing built-ins, we shouldn't need it","mimetype":"text/html"}]},"ts":1648740106948,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FQscr3lKAWtZAUk2l9MJ99oAoq5kjKdLdyukLYOvWco"},
{"content":{"body":"and it sounds like we're mostly leaning toward discouraging subclassing","msgtype":"m.text","org.matrix.msc1767.text":"and it sounds like we're mostly leaning toward discouraging subclassing"},"ts":1648740129676,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$U1AE9zJSQ0BkpdxY2PtpRKOVMc56SJjCiLtgZx1v8Dk"},
{"content":{"body":"(also the constructor calls `add` lol)","format":"org.matrix.custom.html","formatted_body":"(also the constructor calls <code>add</code> lol)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(also the constructor calls `add` lol)","mimetype":"text/plain"},{"body":"(also the constructor calls <code>add</code> lol)","mimetype":"text/html"}]},"ts":1648740310777,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SseKF7pty3CLONytMigJWXjq7dUtqMnroZFhIy6p5wE"},
{"content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w"}}},"ts":1648740337140,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4"},
{"content":{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","m.new_content":{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","format":"org.matrix.custom.html","formatted_body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$tgYtlVIdD1_56py2ft3YzFQVcIahJcjuRr8yUajDtF4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> wait but like, if my app uses `Math.sin` and you delete `Math.sin` how is my app supposed to work\n\n * because _my_ app at least would cache `Math.sin` on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2w8SUx4z9rXJJBdDZNMYMyG4FBn0KTCCMlNKQ_kV0w?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait but like, if my app uses <code>Math.sin</code> and you delete <code>Math.sin</code> how is my app supposed to work</blockquote></mx-reply> * because <em>my</em> app at least would cache <code>Math.sin</code> on module evaluation, it wouldn't dynamically look it up at runtime on Math","mimetype":"text/html"}]},"ts":1648740343129,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q8NNcLc18wHTzuJFQN5REYxnvYaphEjVWBpdeJV5RnE"},
{"content":{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> i appreciate that desire but do not think it is reasonable when you are interoperating with other people's code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break\n\nsure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J_66RjJLClqoBcEx4Sc1Et8Kkgx_qtWiZCuoT1fmn5o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i appreciate that desire but do not think it is reasonable when you are interoperating with other people&#39;s code, since their code almost certainly does not have this property. like if they made themselves a Set, and then someone else deleted Set.prototype.add, their code is gonna break</blockquote></mx-reply>sure. but that doesn't mean i want my code to be the reason it breaks. i'm fine with their app breaking - i just don't want my code to be in the stack trace :-)","mimetype":"text/html"}]},"ts":1648740370729,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LoehH7EbajJP0Ye5NNesl0hhUvl4wjFqXYzG88o8W-I"},
{"content":{"body":"oh i see, yeah i think that style is vanishingly rare","msgtype":"m.text","org.matrix.msc1767.text":"oh i see, yeah i think that style is vanishingly rare"},"ts":1648740371609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$stuCPMcrw9w_0-YnENi9Mzj7DIO3fDJw-xbUBQjsZjA"},
{"content":{"body":"it very much is","msgtype":"m.text","org.matrix.msc1767.text":"it very much is"},"ts":1648740377472,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d12oNu3KdwVBQkEFWrgLj5htlFn6Oz3yO3I6T0ZpS2g"},
{"content":{"body":"you literally never lookup on the prototype?","msgtype":"m.text","org.matrix.msc1767.text":"you literally never lookup on the prototype?"},"ts":1648740380818,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BG54z1VzRInTyiDmKKl1kuj7XmJbrcNQJvnZ1ccBlUY"},
{"content":{"body":"you cache every single thing?","msgtype":"m.text","org.matrix.msc1767.text":"you cache every single thing?"},"ts":1648740384416,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zlIIXqoxe4i9I1_Dpi4r-_nMlhK0xeh5Z1vLZi-RVGI"},
{"content":{"body":"yep, only at module level","msgtype":"m.text","org.matrix.msc1767.text":"yep, only at module level"},"ts":1648740389123,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lv41sLgmBVnVKVs3gMc96npnaiozJRcmTjtulE_exIs"},
{"content":{"body":"in libraries, that is. in apps ofc i can have guarantees","msgtype":"m.text","org.matrix.msc1767.text":"in libraries, that is. in apps ofc i can have guarantees"},"ts":1648740403705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uca0SIPH67arcA01QSbHeACzfXzx-f9CC7fWwbpQcME"},
{"content":{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"keith_miller: in Java, all method calls are virtual, so subclasses \"replace M\" all the time","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: in Java, all method calls are virtual, so subclasses &quot;replace M&quot; all the time","mimetype":"text/html"}]},"ts":1648740404535,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cUqMlXmpSUOzXHEpfuVoP2md7BEAn-WhZokWIZlkr7w"},
{"content":{"body":"yeah I... do not want to optimize for this case","msgtype":"m.text","org.matrix.msc1767.text":"yeah I... do not want to optimize for this case"},"ts":1648740419008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mgPSKfeZOQbAeKATSQ3pqcvBruFodNrS3R3b9hUJrgA"},
{"content":{"body":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes.","msgtype":"m.text","org.matrix.msc1767.text":"i understand that lack of desire :-) i'm not asking to optimize for this case exactly. it's just that constructor hooks happens to solve it, while also checking a lot of other boxes."},"ts":1648740456158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1PXT78Pxb-Y-C7jbhlWZM4oTtF5DFQ8g_x7z0d39q-g"},
{"content":{"body":"like your frozen set example","msgtype":"m.text","org.matrix.msc1767.text":"like your frozen set example"},"ts":1648740467946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EwojQW7LuNQBsabcqjYwtRbRmhXpre3HeVjQm9F6lcc"},
{"content":{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the \"comparison operation\" that doesn't actually exist in practice","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I don't even think there's a single algebraic understanding of a Set, as we discussed when considering swapping out the &quot;comparison operation&quot; that doesn't actually exist in practice","mimetype":"text/html"}]},"ts":1648740498311,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yGwgujBqf9z7A3VRLzCQs57ThGtvEzU92g2p1nN8xTs"},
{"content":{"body":"i agree there isn't a single algebraic understanding","msgtype":"m.text","org.matrix.msc1767.text":"i agree there isn't a single algebraic understanding"},"ts":1648740511692,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2u3H6zAqcQ3fqivGo0w7cO8W8uMyY2sUWOS1LAjoYK0"},
{"content":{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","format":"org.matrix.custom.html","formatted_body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but it doesn't actively _resist_ an algebraic understanding like RegExp.exec?","mimetype":"text/plain"},{"body":"but it doesn't actively <em>resist</em> an algebraic understanding like RegExp.exec?","mimetype":"text/html"}]},"ts":1648740521393,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iCAkybp7yEstTlYHseN1PM1awBRc1oBg3RULO0n1dtY"},
{"content":{"body":"sure, but that's still limiting","msgtype":"m.text","org.matrix.msc1767.text":"sure, but that's still limiting"},"ts":1648740533567,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Bs_o8-JSizPNV7JGeb3HgejEJ5OGHtkMJj0IFkMaA_w"},
{"content":{"body":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra","msgtype":"m.text","org.matrix.msc1767.text":"all i'm saying is if we have a minimal core for Set, it's reasonable to expect us being able to come up with and communicate an algebra"},"ts":1648740583946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p-XiCzG5NjcYFr6qZZu6c_qEyiWKRM3ZKtCA-9zBzkE"},
{"content":{"body":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide","msgtype":"m.text","org.matrix.msc1767.text":"and i think it is most def not reasonable what Kevin has categorized as \"low-level\" on that slide"},"ts":1648740604801,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dtpSx7wI49WMVdY_ljD_EdmTDmVW-4_H5delgTm1IyE"},
{"content":{"body":"and that's the division in my mind","msgtype":"m.text","org.matrix.msc1767.text":"and that's the division in my mind"},"ts":1648740612711,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4br-t2RpM_j22PlRtVhHQGYEx1R9ZstwQG4JBgGVkOI"},
{"content":{"body":"shu: are you willing to maintain two radically different Set implementations though?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: are you willing to maintain two radically different Set implementations though?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: are you willing to maintain two radically different Set implementations though?","mimetype":"text/html"}]},"ts":1648740616726,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VQQz8v7rTl5xC8fWYCx12gs5s6gcVPuqVbyqk9OG5no"},
{"content":{"body":"i don't follow","msgtype":"m.text","org.matrix.msc1767.text":"i don't follow"},"ts":1648740626988,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iwZ8cEgPbnjQvZHGapgtXdHLJQmsgSuAhUOqy7C-czI"},
{"content":{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time `add` that repeatedly applies the provided comparison?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: like if we had constructor hooks, would you also want to provide a Set implementation with a linear time <code>add</code> that repeatedly applies the provided comparison?","mimetype":"text/html"}]},"ts":1648740669111,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WzPfvXBT5zbdoAuJGeR3WOQlCM0RQZxVuz8tdQYbG8I"},
{"content":{"body":"you mean, a fast path for builtin and a slow path for overridden?","msgtype":"m.text"},"ts":1648740670211,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$iHGlG7-mqdQCls4MuuGF8-GzFg_obvq4iLJpQbQ3gYQ"},
{"content":{"body":"Michael Ficarra: i mean depends on the algebra right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: i mean depends on the algebra right?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i mean depends on the algebra right?","mimetype":"text/html"}]},"ts":1648740707087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3sbLxLBjpLYLogs2GtfMSmSEsCirY2q3l_XEBLSgSQM"},
{"content":{"body":"actually i'm not sure what we're discussing anymore","msgtype":"m.text","org.matrix.msc1767.text":"actually i'm not sure what we're discussing anymore"},"ts":1648740733421,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y4fE_GFiCBn7rYTYxb3Qni9__TdLe70NBs-0Opl_xIE"},
{"content":{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sure, but I imagine the algebra will often not align with that of your current, fast implementation","mimetype":"text/html"}]},"ts":1648740736112,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_K_5-F1be6xC9kzLV0U_LFrpxlKowhk8hktgSxFXHbQ"},
{"content":{"body":"shu: a motivating question: is `clear` part of the minimal core","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: a motivating question: is `clear` part of the minimal core","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: a motivating question: is <code>clear</code> part of the minimal core","mimetype":"text/html"}]},"ts":1648740739068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2aeNHFYXXpDWFEqAbBhWN_Cktv5D_lEWWt-M4ca7Dc4"},
{"content":{"body":"it is clearly possible in terms of iteration/`delete`","format":"org.matrix.custom.html","formatted_body":"it is clearly possible in terms of iteration/<code>delete</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it is clearly possible in terms of iteration/`delete`","mimetype":"text/plain"},{"body":"it is clearly possible in terms of iteration/<code>delete</code>","mimetype":"text/html"}]},"ts":1648740750767,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DmxCj8PebvsDqN7rn5tdomGSXnA3w6NmrLhdpOTxEY8"},
{"content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"ts":1648740756042,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1648740762759,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4cF0IDBz-ysle7c41jI94lLZDAdYC4ve9cSgFvNV5lU"},
{"content":{"body":" * what does that do, in-place emptying?","m.new_content":{"body":"what does that do, in-place emptying?","msgtype":"m.text","org.matrix.msc1767.text":"what does that do, in-place emptying?"},"m.relates_to":{"event_id":"$jEjFFu0OZjtUoBslv7rIWAIoSda7aOn2Sp0QosfFFl0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * what does that do, in-place emptying?"},"ts":1648740765186,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IWKMeXQQG3N2sTCRmv9lBaWdDDknUBBoDeH3c8ZD5vE"},
{"content":{"body":"okay","msgtype":"m.text","org.matrix.msc1767.text":"okay"},"ts":1648740768303,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0ciXjM2-fX2fzlwtRqU4qYJ5290haV0NApsMzeAWqGE"},
{"content":{"body":"good question, i'd say yes","msgtype":"m.text","org.matrix.msc1767.text":"good question, i'd say yes"},"ts":1648740784272,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hQWrtqw0DDmanaJ6EftUtkjamFITAh0Mey_MHsTWGaI"},
{"content":{"body":"don't write per-item finalizing logic","msgtype":"m.text","org.matrix.msc1767.text":"don't write per-item finalizing logic"},"ts":1648740791296,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EI4i5FZb6yxR3sSuWirUZM2Ar_xDOcV4dHct7oXet_8"},
{"content":{"body":"bad idea","msgtype":"m.text","org.matrix.msc1767.text":"bad idea"},"ts":1648740792015,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OROv-EOUuIiWmIlw_Zn3AE3fdCer9Rr0NmnQyiyoFBs"},
{"content":{"body":"fwiw I find Temporal.TimeZone a reasonable case for a minimal core of methods","msgtype":"m.text"},"ts":1648740816748,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ucbGpJIpWH0AxuuK28lKsbGYO0ORQeTomVhEJuT6Jy4"},
{"content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"ts":1648740837510,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8"},
{"content":{"body":" * if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":" * if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","m.new_content":{"body":"if you have implemented `getPossibleInstantsFor()` then you don't need to implement `getInstantFor()` as well","format":"org.matrix.custom.html","formatted_body":"if you have implemented <code>getPossibleInstantsFor()</code> then you don't need to implement <code>getInstantFor()</code> as well","msgtype":"m.text"},"m.relates_to":{"event_id":"$b-AZMlnLG2BptGoexq9fnqr4aKOfHDQIfX3L5FUeqp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648740845184,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$jcbKst7maMPUIu_8zLVM03uO8YcSj4ArTGxp3kMZk0g"},
{"content":{"body":"(which just calls `getPossibleInstantsFor()` and picks one of the values in the returned array based on the other parameter you give it)","format":"org.matrix.custom.html","formatted_body":"(which just calls <code>getPossibleInstantsFor()</code> and picks one of the values in the returned array based on the other parameter you give it)","msgtype":"m.text"},"ts":1648740875067,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$gycKIp36krrDuKKBiDfmWlYnIx8lQ4uRfHHB5nc-1rk"},
{"content":{"body":"I think TimeZone is definitely a \"higher-level\" built in, in the terminology used in the slides","msgtype":"m.text"},"ts":1648740907647,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$FhpllXUChMBZpx3YiafKHdlzYrxow7VwF8lB7qmrkpU"},
{"content":{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ptomato: are there internal slots on a `Temporal.TimeZone`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: are there internal slots on a <code>Temporal.TimeZone</code>?","mimetype":"text/html"}]},"ts":1648741682297,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-LzWeG5wUYu5t5dv0Ed6TeGtE9z0942MKlM-67Tblu8"},
{"content":{"body":"only one: the string identifier, e.g. `UTC` or `Europe/Berlin`","format":"org.matrix.custom.html","formatted_body":"only one: the string identifier, e.g. <code>UTC</code> or <code>Europe/Berlin</code>","msgtype":"m.text"},"ts":1648741734952,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ZVuaYFn-mlokFyH9g--5lvB5hYe10ikfxhW_K8aWtd4"},
{"content":{"body":"the default implementations of the methods aren't internal slots","msgtype":"m.text"},"ts":1648741766027,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$mk02e5D39iF0249oXnTKcwFUY2m9-9eHGFgrm1jipYc"},
{"content":{"body":"I think we could write it that way & the difference wouldn't be observable, but I'm not 100% sure off the top of my head","msgtype":"m.text"},"ts":1648741785122,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$2EMJWwgLUfZ7SHVDXs4oO2Bf9mT6QvWetRGQKv8WRgY"},
{"content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742114439,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg"},
{"content":{"body":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","m.new_content":{"body":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today.","msgtype":"m.text","org.matrix.msc1767.text":"As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"m.relates_to":{"event_id":"$D_ITUQRtwzXDNHiVp_oiV_96Aacxfral0kj3fcugtTg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * As a heads up, we have Decorators coming back (again) for 20min in the afternoon slot today."},"ts":1648742123476,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$O-C58HORErEcGQK1qYXeOxjQyOfPq_lccLphKBhPzHw"},
{"content":{"body":"FYI: The next discussion topic, holistic dataflow, doesnâ€™t have slidesâ€”instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/.","msgtype":"m.text","org.matrix.msc1767.text":"FYI: The next discussion topic, holistic dataflow, doesnâ€™t have slidesâ€”instead, it has a diagram and an article that you can read at https://jschoi.org/22/es-dataflow/."},"ts":1648742277888,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Bg8rJK3IWXVEUz54l5oAVHi1AUgZuI9RAGCwRStVVdc"},
{"content":{"body":"More decorators?","msgtype":"m.text","org.matrix.msc1767.text":"More decorators?"},"ts":1648742339056,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CmFuOCriniUwOnYYyphFWlBS42VXSpK_yvnv5OIzr2Q"},
{"content":{"body":"Justin Ridgewell: more decorators","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: more decorators","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: more decorators","mimetype":"text/html"}]},"ts":1648742353751,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oAor9YbANRdid3ZARy61qtuMMhJPBAZo0-csVV88b9c"},
{"content":{"body":"MORE DECORATORS","msgtype":"m.text","org.matrix.msc1767.text":"MORE DECORATORS"},"ts":1648742441460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb89e26Kb3XzSpFu8NktMaRaKzEIC2oJ8z3iWOPdHYU"},
{"content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743044936,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg"},
{"content":{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","m.new_content":{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","format":"org.matrix.custom.html","formatted_body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":"I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$7F7gObVGdrHfwEy8AGLUUinSqNwPLxMQqz8Ln_VNnxg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass? ","mimetype":"text/plain"},{"body":" * I was tying to imagine writing a decorator for enforcing that a field was initialised by the end of the constructor. Am I right in thinking <del>this won't work super well</del> the only way to add logic at the end is to add a subclass?","mimetype":"text/html"}]},"ts":1648743168090,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wR83oF4tDsS8lZe-O6961GTe-OZdNUzhqarcWE-FzJg"},
{"content":{"body":"by replacing the class in a class constructor, maybe?","msgtype":"m.text","org.matrix.msc1767.text":"by replacing the class in a class constructor, maybe?"},"ts":1648743220653,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iiurxxHKOXL1F6BPc2_Ypdg7ONxtiwvehqzxZr6DVrI"},
{"content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743330073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss"},
{"content":{"body":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","m.new_content":{"body":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely","msgtype":"m.text","org.matrix.msc1767.text":"yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"m.relates_to":{"event_id":"$IAzAouQhv11ZSqZ5xW9fQ06xGwVAW0Df7QvT8E2imss","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * yeah \"at the end of the constructor\" is not one of the positions into which decorator allow you to inject code, except by replacing the class entirely"},"ts":1648743334240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SvwaJ9vShw9TkzRh-D3Mb-2SXUuV_gp8H79XhzkdfQs"},
{"content":{"body":"but you can indeed replace the class with a subclass which does that check","msgtype":"m.text","org.matrix.msc1767.text":"but you can indeed replace the class with a subclass which does that check"},"ts":1648743352899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZYgUtUFWdSjrIWpiTMywciaw9WwhIM5se5RNia2z-f0"},
{"content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743416852,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648743427787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n5rOobjvMLoSzvRVYKxy3SiX3oqELvTTOom4w4eekos"},
{"content":{"body":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","m.new_content":{"body":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it","msgtype":"m.text","org.matrix.msc1767.text":"cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"m.relates_to":{"event_id":"$g53Jp8HrtXGzitfqdoqg3qp5oebyC2zI_YUw0ieU1EE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * cool thanks, so it would be paired up with a class level decorator with a way to communicate to it"},"ts":1648743428507,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$l1-erN8c6AuSgP4b-xt0kDvVS6TAY4Gu5Wlj2dsogWE"},
{"content":{"body":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)","msgtype":"m.text","org.matrix.msc1767.text":"(I should say, this is just from my understanding of decorators, which I might easily be forgetting something)"},"ts":1648743466692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dqDfEdb6h-nUDbSqViWNMXxbdby02LGSk8zbBl8Lfhs"},
{"content":{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","format":"org.matrix.custom.html","formatted_body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was just thinking about the `!` initialisation assertion in TypeScript, and if that had a runtime equivalent ","mimetype":"text/plain"},{"body":"I was just thinking about the <code>!</code> initialisation assertion in TypeScript, and if that had a runtime equivalent","mimetype":"text/html"}]},"ts":1648743476245,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MD30kFPqH4uPIoiYbSkQOhrZFDRLgRFiV2CDOSiVkCs"},
{"content":{"body":"how does that look in TS on fields?","msgtype":"m.text","org.matrix.msc1767.text":"how does that look in TS on fields?"},"ts":1648743721347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a6P7CWKPDJ4spiXb9VUudHWudzEk8buZG3nsLE0WGZc"},
{"content":{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```\nclass C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n```","mimetype":"text/plain"},{"body":"<pre><code>class C {\n  f!: string; // I promise this will be a string once constructed\n\n  constructor() {\n     this.#init();\n  }\n\n  #init() {\n     this.f = 'hey';\n  }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648743837998,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6YUSG6MQIW30tnwt64zSVgcR1YFjGZ_PCLMvyH0iAvY"},
{"content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743911875,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0"},
{"content":{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","m.new_content":{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","format":"org.matrix.custom.html","formatted_body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":"I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LyNV7AXwNTQDLpRfzzXq7GEwwLmDHQaNFDYVsSvSKe0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate `init` pattern. Rather than in new code.","mimetype":"text/plain"},{"body":" * I use it more when adding type-annotations to existing .js code that has that seperate <code>init</code> pattern. Rather than in new code.","mimetype":"text/html"}]},"ts":1648743933396,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cxYlwDwU9dp-uQuZN79TwaTiNguKSJGOixCE0hoMesg"},
{"content":{"body":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field","msgtype":"m.text","org.matrix.msc1767.text":"i assume it would depend on constructor params, otherwise you'd just initialize it as a field"},"ts":1648745073074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$248LANg0AklYpDvgO3ihbKClPurf1JJcTAF6KOArQSo"},
{"content":{"body":"yeah, my example was weak. Usually the value being initialised is more complex and based on arguments being passed around","msgtype":"m.text","org.matrix.msc1767.text":"yeah, my example was weak. Usually the value being initialised is more complex and based on arguments being passed around"},"ts":1648745576676,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$F_Wya173NwyziQO8ULvBkvQr7Up6k6987aK-qyosCNM"},
{"content":{"body":"If TypeScript sees a direct assignment to the field in the constructor body (not a closure) then the assertion is not required","msgtype":"m.text","org.matrix.msc1767.text":"If TypeScript sees a direct assignment to the field in the constructor body (not a closure) then the assertion is not required"},"ts":1648745668577,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NJkda0snMl12lQWDSOkmlo66H1AU7wjAjpKzPtY73lY"},
{"content":{"body":"https://jschoi.org/22/es-dataflow/","msgtype":"m.text","org.matrix.msc1767.text":"https://jschoi.org/22/es-dataflow/"},"ts":1648746082443,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yD8YelFK-aCk0qIAvBwjHrrzTk1HHXbgwrrq280YY2E"},
{"content":{"body":"the module splitting thing is fake","msgtype":"m.text","org.matrix.msc1767.text":"the module splitting thing is fake"},"ts":1648746656932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6l99RC8cMbsUTiIiBqMlV8KqAMN8-4zypfQkj4EV_Pk"},
{"content":{"body":"we could totally optimize those cases in bundlers","msgtype":"m.text","org.matrix.msc1767.text":"we could totally optimize those cases in bundlers"},"ts":1648746665421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eCyNC1DdaElmiEVIEE55t2IgagP-PvBx22vdWpqbrPQ"},
{"content":{"body":"we just don't","msgtype":"m.text","org.matrix.msc1767.text":"we just don't"},"ts":1648746667613,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uF7IPynAtKYT3g2W2Afoxx4qZvC7BrYKy0MRPRmmNLM"},
{"content":{"body":"those cases = prototype-based fluent apis","msgtype":"m.text","org.matrix.msc1767.text":"those cases = prototype-based fluent apis"},"ts":1648746695979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vu1Yh3L1VDPzHoK_F8UD1c6UisS-kG2hhyNU8HWV8eU"},
{"content":{"body":"i understand that to mean bundlers don't want to build more sophisticated static analysis, which, yeah, sounds like they can try to?","msgtype":"m.text","org.matrix.msc1767.text":"i understand that to mean bundlers don't want to build more sophisticated static analysis, which, yeah, sounds like they can try to?"},"ts":1648746745041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_00s76-DgJU8dZNN0mZyiXdYnjtA-EbnXFUjwGb7jM8"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1648746752562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HIgPqY4ICayQJRnFxZ44jAr5284KH8NZbwaumTb9wmw"},
{"content":{"body":"you really need types for it to work","msgtype":"m.text","org.matrix.msc1767.text":"you really need types for it to work"},"ts":1648746756954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dZjEkR9w1icjHvUlyi2L5w54CNMGG1QFpKDCBt5l-ME"},
{"content":{"body":"We could (Closure can), but it's be incredibly hard (only TS has an equivalent type system and it's not a minifier)","msgtype":"m.text","org.matrix.msc1767.text":"We could (Closure can), but it's be incredibly hard (only TS has an equivalent type system and it's not a minifier)"},"ts":1648746766043,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HRuFeBeZZ1aN_rLDicAMjfIA5kRTK4Ql7iPV2C_ZdZw"},
{"content":{"body":"and it's true there are many cases where you can't figure it out","msgtype":"m.text","org.matrix.msc1767.text":"and it's true there are many cases where you can't figure it out"},"ts":1648746766534,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ULbi5Xx80p2dCzQyJiKc4iK2ii1LcibnAPoS-O3MAl4"},
{"content":{"body":"And there are tons of deopts.","msgtype":"m.text","org.matrix.msc1767.text":"And there are tons of deopts."},"ts":1648746771417,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iLvSuF0VD-yN0tZlXktQSqva2T-IX9t-49zF-_83Hoo"},
{"content":{"body":"A single cast, and elimination isn't guaranteed anymore.","msgtype":"m.text","org.matrix.msc1767.text":"A single cast, and elimination isn't guaranteed anymore."},"ts":1648746792024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jzFaFLVidqmoP-IM8Am2j-_G04bOPSsmvlVkL6y703U"},
{"content":{"body":"I don't think that's an acceptable \"we could but don't\"","msgtype":"m.text","org.matrix.msc1767.text":"I don't think that's an acceptable \"we could but don't\""},"ts":1648746813353,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GAgJl_WrIhnzm6tPjehacf3jPAYH-HBKfcMcY14KzjA"},
{"content":{"body":"so on paper the functional APIs have the exact same issue except the popular way to do it is simple enough (e.g. import foo and use foo without renaming or fancy namespace objects) to analyze?","msgtype":"m.text","org.matrix.msc1767.text":"so on paper the functional APIs have the exact same issue except the popular way to do it is simple enough (e.g. import foo and use foo without renaming or fancy namespace objects) to analyze?"},"ts":1648746863033,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dYJNOXK9nrqJ2QkxKF1CmaY5jvjQ-IWl6ohxaDA72Ok"},
{"content":{"body":"Static analysis is trivial to perform, and it's built into every minifier","msgtype":"m.text","org.matrix.msc1767.text":"Static analysis is trivial to perform, and it's built into every minifier"},"ts":1648746886529,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xec9ABK2w0RLqhaBEjZilxBdZhxjzso27LDY9nzj3-E"},
{"content":{"body":"the functional APIs are always possible to analyze unless you do a `* as x` import","format":"org.matrix.custom.html","formatted_body":"the functional APIs are always possible to analyze unless you do a <code>* as x</code> import","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the functional APIs are always possible to analyze unless you do a `* as x` import","mimetype":"text/plain"},{"body":"the functional APIs are always possible to analyze unless you do a <code>* as x</code> import","mimetype":"text/html"}]},"ts":1648746894646,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ncejG4mqy_omoINIujiNNO0xQMAG1qizFNNa1uYf770"},
{"content":{"body":"so the rules to learn to stay on the happy path are easier","msgtype":"m.text","org.matrix.msc1767.text":"so the rules to learn to stay on the happy path are easier"},"ts":1648746905556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MiIMdUm-HsoTSg6wSBSH3AMhDSlAq4riHe5P0hbjVeM"},
{"content":{"body":"Virtual dispatch requires types, and only Closure has a type system and minifier combined to do it.","msgtype":"m.text","org.matrix.msc1767.text":"Virtual dispatch requires types, and only Closure has a type system and minifier combined to do it."},"ts":1648746907101,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Aiahn7-75Sd2RjrK3FRD83-koCQCUDr93mwrqf_iu5M"},
{"content":{"body":"asked another way, functional APIs don't have complex flow like being passed to HOFs?","msgtype":"m.text","org.matrix.msc1767.text":"asked another way, functional APIs don't have complex flow like being passed to HOFs?"},"ts":1648746928046,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ymTm10uGXXSad9orPmICuVH8ewTaaBDFpBk2J22s6_I"},
{"content":{"body":"Namespace imports are DCEable depending on how it's used.","msgtype":"m.text","org.matrix.msc1767.text":"Namespace imports are DCEable depending on how it's used."},"ts":1648746933313,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ozzjCqJJK7cHmvW3kyPlkOEtjsPRdC_6o3dQ15MNydU"},
{"content":{"body":"the complex flow isn't the problem","msgtype":"m.text","org.matrix.msc1767.text":"the complex flow isn't the problem"},"ts":1648746944879,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AUmHZyN5JOCyme9wjGu0PtHH3BQeX8U0IpPnsNNpD_c"},
{"content":{"body":"If you do `ns.foo()`, it's easy to see only `foo` import is used","format":"org.matrix.custom.html","formatted_body":"If you do <code>ns.foo()</code>, it's easy to see only <code>foo</code> import is used","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you do `ns.foo()`, it's easy to see only `foo` import is used","mimetype":"text/plain"},{"body":"If you do <code>ns.foo()</code>, it's easy to see only <code>foo</code> import is used","mimetype":"text/html"}]},"ts":1648746946702,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kFRUHOLaxxboDBA0azJq3u1WUa5f0DT4lO5rjMQkUfU"},
{"content":{"body":"ehhh","msgtype":"m.text","org.matrix.msc1767.text":"ehhh"},"ts":1648746956407,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V9c8OQ7pZ4tjmD7Jg8cbqVfguUf_PLoNHSUVaNY0ofM"},
{"content":{"body":"what's the problem if not complex flow?","msgtype":"m.text","org.matrix.msc1767.text":"what's the problem if not complex flow?"},"ts":1648746966946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bEZzqIMrZz_KnWt-gCo6Q6jUygfDNi1guuw7YcpT2Ck"},
{"content":{"body":"namespace objects are exactly as difficult to analyze as OO-based modules","msgtype":"m.text","org.matrix.msc1767.text":"namespace objects are exactly as difficult to analyze as OO-based modules"},"ts":1648746968877,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IfVVy76ct07uEOF41wrE8yozKxPvmNXfTnmTDi-ahA0"},
{"content":{"body":"If you do `Object.values()`, then it becomes dynamic and you can't DCE","format":"org.matrix.custom.html","formatted_body":"If you do <code>Object.values()</code>, then it becomes dynamic and you can't DCE","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you do `Object.values()`, then it becomes dynamic and you can't DCE","mimetype":"text/plain"},{"body":"If you do <code>Object.values()</code>, then it becomes dynamic and you can't DCE","mimetype":"text/html"}]},"ts":1648746969207,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0TLP3BiSay2IJV6EJugXvr0ZrZbInP6c3ZlQXa3rAdg"},
{"content":{"body":"Not at all","msgtype":"m.text","org.matrix.msc1767.text":"Not at all"},"ts":1648746977539,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HPTKKJimBOAcphtSwTzdbQNTNBAPS-nW6XQiRZDxnqo"},
{"content":{"body":"yes at all; they're the same thing","msgtype":"m.text","org.matrix.msc1767.text":"yes at all; they're the same thing"},"ts":1648746985245,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UGgsBbeYwBvwEJGHl7UxHwY6yDLE25Rd_keLsnic9sI"},
{"content":{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"ts":1648747022596,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FIID8ETgefVTKts8JZtksdU6bqFVccVBT9_IGYPB5B8"},
{"content":{"body":" * There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":" * There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","m.new_content":{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","format":"org.matrix.custom.html","formatted_body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":"There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$FIID8ETgefVTKts8JZtksdU6bqFVccVBT9_IGYPB5B8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * There's a huge difference between a static `ns` import and a dynamic variable binding to an object.","mimetype":"text/plain"},{"body":" * There's a huge difference between a static <code>ns</code> import and a dynamic variable binding to an object.","mimetype":"text/html"}]},"ts":1648747031394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pezkqDV3_WzFVmusq1T9q9bGMBT_ZUZHspTU1BUFbd8"},
{"content":{"body":"you can pass `ns` imports around","format":"org.matrix.custom.html","formatted_body":"you can pass <code>ns</code> imports around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can pass `ns` imports around","mimetype":"text/plain"},{"body":"you can pass <code>ns</code> imports around","mimetype":"text/html"}]},"ts":1648747043935,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ly8FPF1n0W76QvBDuzgxwdWcz2yQhqMqs4pkjyifmtM"},
{"content":{"body":"and now they are dynamic variables bound to objects","msgtype":"m.text","org.matrix.msc1767.text":"and now they are dynamic variables bound to objects"},"ts":1648747054321,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tZFHnH6vrFSk4_Og2kKMGKlF5Zlrz1l_ofJg4k9sod0"},
{"content":{"body":"You can treat a namespace as an object with key-values, but that's not the norm for imports.","msgtype":"m.text","org.matrix.msc1767.text":"You can treat a namespace as an object with key-values, but that's not the norm for imports."},"ts":1648747061224,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lK3BQVCaApxe6flYTrUSQy0KBNn1B_NyLSUkqbaf44I"},
{"content":{"body":"Again, it depends on how it's used.","msgtype":"m.text","org.matrix.msc1767.text":"Again, it depends on how it's used."},"ts":1648747083131,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dJ336_1ds4QvLLMqf8_bgSajewx9bF70qAw48Xw2Mr4"},
{"content":{"body":"yeah.","msgtype":"m.text","org.matrix.msc1767.text":"yeah."},"ts":1648747089379,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gmeNg9umjALAQIAvtUGndcop_sKj9r0Xv_Krbp_xiXU"},
{"content":{"body":"that's what i'm asking, does it come down to norms","msgtype":"m.text","org.matrix.msc1767.text":"that's what i'm asking, does it come down to norms"},"ts":1648747100795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RsQLCzfsM0SqoPTAqGBS9wbBq4VgeatAQ2Ug1n9jVjE"},
{"content":{"body":"The point is it starts from a staticly analyzable point, so it can remain statically analyzable.","msgtype":"m.text","org.matrix.msc1767.text":"The point is it starts from a staticly analyzable point, so it can remain statically analyzable."},"ts":1648747104053,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZaoM2G_2ATJger6G_gmE7OIEGw3XqmKh2WddjqN64Aw"},
{"content":{"body":"shu: anyway, the problem is if you have something like\n\n```js\nfunction pretty(x) {\n  console.log(x.color())\n}\n```\n\nand `print(y)` gets called, anywhere in your code, then in order to eliminate a prototype method named `color` on some class you have to prove that no instance of the class is ever passed to `pretty`","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: anyway, the problem is if you have something like</p>\n<pre><code class=\"language-js\">function pretty(x) {\n  console.log(x.color())\n}\n</code></pre>\n<p>and <code>print(y)</code> gets called, anywhere in your code, then in order to eliminate a prototype method named <code>color</code> on some class you have to prove that no instance of the class is ever passed to <code>pretty</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: anyway, the problem is if you have something like\n\n```js\nfunction pretty(x) {\n  console.log(x.color())\n}\n```\n\nand `print(y)` gets called, anywhere in your code, then in order to eliminate a prototype method named `color` on some class you have to prove that no instance of the class is ever passed to `pretty`","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: anyway, the problem is if you have something like</p>\n<pre><code class=\"language-js\">function pretty(x) {\n  console.log(x.color())\n}\n</code></pre>\n<p>and <code>print(y)</code> gets called, anywhere in your code, then in order to eliminate a prototype method named <code>color</code> on some class you have to prove that no instance of the class is ever passed to <code>pretty</code></p>\n","mimetype":"text/html"}]},"ts":1648747148725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qi35evmaRsvBhkCf0OI2kiTu5MUyEia5sHmMyIzzETc"},
{"content":{"body":"now, IME that's fairly practical, but no one really implements that optimization","msgtype":"m.text","org.matrix.msc1767.text":"now, IME that's fairly practical, but no one really implements that optimization"},"ts":1648747161995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QudY9rvgJvyo7s6g1Ods__OUgfbAMHFvH-nbo9DaXfU"},
{"content":{"body":"bakkot: that is exactly the \"complex flow\" problem?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that is exactly the &quot;complex flow&quot; problem?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: that is exactly the \"complex flow\" problem?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that is exactly the &quot;complex flow&quot; problem?","mimetype":"text/html"}]},"ts":1648747166881,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jMZCRxP7GgjwCdSGILaUXpkCO1FgXJ-olPAg2ysV-Pg"},
{"content":{"body":"and it's true that there are places which become hard","msgtype":"m.text","org.matrix.msc1767.text":"and it's true that there are places which become hard"},"ts":1648747172762,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$unBtfbThSlSZzITEewC16yWZkZE133QsD10QcgIOzqE"},
{"content":{"body":"you gotta monomorphize and have some kind of class hierarchy analysis to eliminate","msgtype":"m.text","org.matrix.msc1767.text":"you gotta monomorphize and have some kind of class hierarchy analysis to eliminate"},"ts":1648747189140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L-ILrqZaciI_OqE1eO7lVJnz7Mzw4uKsc5VLE443hOo"},
{"content":{"body":"ah, sorry, I didn't realize that's what you meant","msgtype":"m.text","org.matrix.msc1767.text":"ah, sorry, I didn't realize that's what you meant"},"ts":1648747190219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dfLxg0_Ci91M4dFwLe3ghhAAgTAKfrxsdSR6iXUIlMA"},
{"content":{"body":"sorry yeah it's an unclear term","msgtype":"m.text","org.matrix.msc1767.text":"sorry yeah it's an unclear term"},"ts":1648747204594,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hh4CPokXKBO2SF924_KxOAtjAG4GkAH2hsy9L5SGS8E"},
{"content":{"body":"then yes, the complex flow is the problem, and FP doesn't have nearly as much of that particular kind of flow","msgtype":"m.text","org.matrix.msc1767.text":"then yes, the complex flow is the problem, and FP doesn't have nearly as much of that particular kind of flow"},"ts":1648747208486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q5EF8CN6YKVHsfJpS6-P6C0mmP23JksS33tppmYbPsw"},
{"content":{"body":"I like that we are acknowledging this ecosystem schism, I don't think we've really explicitly talked about this enough","msgtype":"m.text","org.matrix.msc1767.text":"I like that we are acknowledging this ecosystem schism, I don't think we've really explicitly talked about this enough"},"ts":1648747257864,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$icPAJ2BVtPBojkEotx5yUMBZVsbP7D_U6uXDJtRksSE"},
{"content":{"body":"a schism suggests there was some unified whole that split","msgtype":"m.text","org.matrix.msc1767.text":"a schism suggests there was some unified whole that split"},"ts":1648747295756,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gtQolnpg36rER0gT8DsnC7LGgNCTvcvEbEJNGprKmuk"},
{"content":{"body":"there are two paradigms","msgtype":"m.text","org.matrix.msc1767.text":"there are two paradigms"},"ts":1648747300107,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ecCXG279XbP4-ETDbsMRMH2toFyFzj6XrTB-8AHQdSM"},
{"content":{"body":"i don't understand why the difference is so harmful yet","msgtype":"m.text","org.matrix.msc1767.text":"i don't understand why the difference is so harmful yet"},"ts":1648747317685,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I6ZVP_HhqKFBr8fzf-JGP7ms-MGLkP7hujNGee-CxC0"},
{"content":{"body":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","msgtype":"m.text","org.matrix.msc1767.text":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"ts":1648747330555,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yM8_ySEbkCpvhkF-knEoFtT-x9mQUsw2XUwueDEa9tc"},
{"content":{"body":"and we have a semblance of that today","msgtype":"m.text","org.matrix.msc1767.text":"and we have a semblance of that today"},"ts":1648747342483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F1Fazr6qiGnVYMiieBO8sr5E3DXn76VGj348aCMU82E"},
{"content":{"body":" * it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","m.new_content":{"body":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs","msgtype":"m.text","org.matrix.msc1767.text":"it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"m.relates_to":{"event_id":"$yM8_ySEbkCpvhkF-knEoFtT-x9mQUsw2XUwueDEa9tc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's entirely possible that you can mix paradigms in the language in a way that does not discourage their use together in programs"},"ts":1648747344569,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xpcN8DWmemrwyuVr2LFpZQNx2EYrrgE3p8b-lJ8IqP8"},
{"content":{"body":"i don't quite understand the line being drawn here as the one contended to be harmful","msgtype":"m.text","org.matrix.msc1767.text":"i don't quite understand the line being drawn here as the one contended to be harmful"},"ts":1648747362864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Irxy0hADZRIQzEwsvJuF2F77qKnQReQMuVJCvelhhVE"},
{"content":{"body":"method call syntax and function call syntax don't mix as well as they could, so it currently forces you to pick a lane and stick to it","msgtype":"m.text","org.matrix.msc1767.text":"method call syntax and function call syntax don't mix as well as they could, so it currently forces you to pick a lane and stick to it"},"ts":1648747468232,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XLspdCMSIyAfgKvN_hhBZSYTXPs9IK2qfS9ArT6pLYw"},
{"content":{"body":"\"zero cost\" is also not true here; the FP paradigm gets megamorphic real fast, in a way the OO paradigm maybe does not","msgtype":"m.text","org.matrix.msc1767.text":"\"zero cost\" is also not true here; the FP paradigm gets megamorphic real fast, in a way the OO paradigm maybe does not"},"ts":1648747489384,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t-_b_X-r50EhO5RQYU4GMEl6v-87bmMqIxKz3WsjX3E"},
{"content":{"body":"that's the contention. i don't see why that's so harmful","msgtype":"m.text","org.matrix.msc1767.text":"that's the contention. i don't see why that's so harmful"},"ts":1648747498246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lX70TS-Cvej3sNPe9nnILxZQpSiFuJkXiY7vZcMfDSo"},
{"content":{"body":"I think that \"zero cost\" line of thought comes from statically compiled languages","msgtype":"m.text","org.matrix.msc1767.text":"I think that \"zero cost\" line of thought comes from statically compiled languages"},"ts":1648747507543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c3h4OSvtXVIzYo7SWfemd91oRb8moc_TiDRMXOJlmq8"},
{"content":{"body":" * I think that \"zero cost\" line of thought comes from statically compiled languages","m.new_content":{"body":"I think that \"zero cost\" line of thought comes from statically compiled languages","msgtype":"m.text","org.matrix.msc1767.text":"I think that \"zero cost\" line of thought comes from statically compiled languages"},"m.relates_to":{"event_id":"$c3h4OSvtXVIzYo7SWfemd91oRb8moc_TiDRMXOJlmq8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I think that \"zero cost\" line of thought comes from statically compiled languages"},"ts":1648747515531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CTBj182Xsu8qw5Cks5XgMdekc-J9doJlvaAWuFF-cWM"},
{"content":{"body":"bakkot: that's a good point","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's a good point","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: that's a good point","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's a good point","mimetype":"text/html"}]},"ts":1648747520584,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tLbWXaSlHPz4qNsbkmoD9dJ-4YWXPX8L1ws1LUvECRU"},
{"content":{"body":"Other delegates have argued it's harmful, I think JSC is trying to explain it's not that bad.","msgtype":"m.text","org.matrix.msc1767.text":"Other delegates have argued it's harmful, I think JSC is trying to explain it's not that bad."},"ts":1648747522128,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$g96qPALBxwVSrolTbqTXB43wt1sfZfMOCJz0I7iHkpc"},
{"content":{"body":"also this interop argument is a new argument to me: i though the main motivation thus far has been word order for the FP stuff","msgtype":"m.text","org.matrix.msc1767.text":"also this interop argument is a new argument to me: i though the main motivation thus far has been word order for the FP stuff"},"ts":1648747543236,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pBr7oXex0oYIeS4l69kM38XopwjQSQd93fnGmsGy3jU"},
{"content":{"body":"This is to explain that the schism some delegates are afraid of is actually improved by adding the call-op.","msgtype":"m.text","org.matrix.msc1767.text":"This is to explain that the schism some delegates are afraid of is actually improved by adding the call-op."},"ts":1648747587422,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jcpDOVexuVsXQUXQdZk7YZOJ7os_fLoqCulTd7JeUJw"},
{"content":{"body":"You can interop between the two styles better with both pipe and call.","msgtype":"m.text","org.matrix.msc1767.text":"You can interop between the two styles better with both pipe and call."},"ts":1648747603645,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zA-R3tfulyJkxkGlkTc9hY5OWRkycjdoyNhGSRWsp08"},
{"content":{"body":"bakkot: the runtime polymorphism point is very good, yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the runtime polymorphism point is very good, yes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: the runtime polymorphism point is very good, yes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the runtime polymorphism point is very good, yes","mimetype":"text/html"}]},"ts":1648747731026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nksTGUhcqBlLC9MRcn2JY7IxUi7W1AYPxC34hhq7aBo"},
{"content":{"body":"if you have two distinct methods `ClassA.F` and `ClassB.F`, you've split it manually by just how you organize code into two contexts that gather type feedback independently","format":"org.matrix.custom.html","formatted_body":"if you have two distinct methods <code>ClassA.F</code> and <code>ClassB.F</code>, you've split it manually by just how you organize code into two contexts that gather type feedback independently","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you have two distinct methods `ClassA.F` and `ClassB.F`, you've split it manually by just how you organize code into two contexts that gather type feedback independently","mimetype":"text/plain"},{"body":"if you have two distinct methods <code>ClassA.F</code> and <code>ClassB.F</code>, you've split it manually by just how you organize code into two contexts that gather type feedback independently","mimetype":"text/html"}]},"ts":1648747769829,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gtRHC1E4U2n3tCKn1Urh4JFcJMxHySIF_l8NPmmPVhI"},
{"content":{"body":"i have looked at automatically inferring such splits for functional-style programs in VMs and have never had any success","msgtype":"m.text","org.matrix.msc1767.text":"i have looked at automatically inferring such splits for functional-style programs in VMs and have never had any success"},"ts":1648747788225,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-wezKbK9kzUgtQPznm37umIjDUXoq1kbiM3XaQtjVFA"},
{"content":{"body":"would be a fun grad problem but i don't know of any good heuristics","msgtype":"m.text","org.matrix.msc1767.text":"would be a fun grad problem but i don't know of any good heuristics"},"ts":1648747803100,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$18W42SPi8sZLm9O34e6vZIV1ntvx4rRRAG7N4uzfMcE"},
{"content":{"body":"once you're into the optimizing tier you can get splitting like this for free with deep inlining, but the point is this is way way before all that, before you decide to even gather type feedback","msgtype":"m.text","org.matrix.msc1767.text":"once you're into the optimizing tier you can get splitting like this for free with deep inlining, but the point is this is way way before all that, before you decide to even gather type feedback"},"ts":1648747855432,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$v5mPDONhQ9NyemVxjynDk47oWo7-7tzvcJjaECeP5MY"},
{"content":{"body":"shu: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: it's also worth considering that this feature may be used most often for high-level organisation and therefore may usually not be in the hot path","mimetype":"text/html"}]},"ts":1648748027342,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SXsq3c_yIIVB-iWb_t3LZoaqHqhWxBle0b9GnccHYMo"},
{"content":{"body":"what is \"this feature\"?","msgtype":"m.text","org.matrix.msc1767.text":"what is \"this feature\"?"},"ts":1648748047571,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6o9lrKQ39I0Uj2SDdD064l2gnZSjSjdeqsndROHdNMI"},
{"content":{"body":"I was thinking about the pipe operator","msgtype":"m.text","org.matrix.msc1767.text":"I was thinking about the pipe operator"},"ts":1648748103863,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rrzYJBdmtWZqhlWOL1V3o35VVAipCbvUUiPygz6tllw"},
{"content":{"body":"very skeptical of that claim, i don't think method chaining is any less likely in hot paths, if that's a suitable analogy","msgtype":"m.text","org.matrix.msc1767.text":"very skeptical of that claim, i don't think method chaining is any less likely in hot paths, if that's a suitable analogy"},"ts":1648748138872,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vWKItKDLjUC88IYJwue6TrNZVa9ADgddS-R55mbsBIU"},
{"content":{"body":"nor normal function application, if this makes some cases of that easier to read","msgtype":"m.text","org.matrix.msc1767.text":"nor normal function application, if this makes some cases of that easier to read"},"ts":1648748149177,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rie48geqFP9wdq3WwFCr_BGSbxtdURm8yZa0BvwVY8I"},
{"content":{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about `this`, is very good","format":"org.matrix.custom.html","formatted_body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about <code>this</code>, is very good","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about `this`, is very good","mimetype":"text/plain"},{"body":"I think the point that call-this is only useful for late-binding APIs, and at that point you are not using the OO paradigm at all and so should not be talking about <code>this</code>, is very good","mimetype":"text/html"}]},"ts":1648748576799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Anxwxfjkg_T6-HtGkA01Eilf0rHRSb9t-vGFgdRCX-8"},
{"content":{"body":"like there's no reason not to just pass the context argument as the first API, over using call-this","msgtype":"m.text","org.matrix.msc1767.text":"like there's no reason not to just pass the context argument as the first API, over using call-this"},"ts":1648748632066,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"},
{"content":{"body":"no reason whatsoever","msgtype":"m.text","org.matrix.msc1767.text":"no reason whatsoever"},"ts":1648748638566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xnp-Y_VR-JKi11FV7ZU95QhiyIBfqGmKxuMXa45ouJg"},
{"content":{"body":"Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"}}},"ts":1648748671926,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lCi8KfGrT6phFA2CEAp9qPGJZg57yZ89G-u0uWPx1lw"},
{"content":{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\nCall site ergonomics will prevent adoption of this.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there&#39;s no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply>Call site ergonomics will prevent adoption of this.","m.relates_to":{"m.in_reply_to":{"event_id":"$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\nCall site ergonomics will prevent adoption of this.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there&#39;s no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply>Call site ergonomics will prevent adoption of this.","mimetype":"text/html"}]},"ts":1648748674764,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs"},
{"content":{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\n * Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there's no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply> * Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","m.new_content":{"body":"Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","format":"org.matrix.custom.html","formatted_body":"Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$lCi8KfGrT6phFA2CEAp9qPGJZg57yZ89G-u0uWPx1lw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> like there's no reason not to just pass the context argument as the first API, over using call-this\n\n * Weâ€™ve seen that `.call` is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjG3g24jSO7CCnkb8bu9mQWfIfu-pZ95WKUoOvTUyxk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like there's no reason not to just pass the context argument as the first API, over using call-this</blockquote></mx-reply> * Weâ€™ve seen that <code>.call</code> is already one of the most common methods in the entire language, though. Like for conditional switching between methods.","mimetype":"text/html"}]},"ts":1648748676505,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$qs_FFGDhDQXtFoM6VwVKCOjyA_Pc9txE0qgRUhxPtD8"},
{"content":{"body":"jschoi: again, I don't think \"people are already doing this\" is a good enough reason to add it to the language","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: again, I don't think &quot;people are already doing this&quot; is a good enough reason to add it to the language","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: again, I don't think \"people are already doing this\" is a good enough reason to add it to the language","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: again, I don't think &quot;people are already doing this&quot; is a good enough reason to add it to the language","mimetype":"text/html"}]},"ts":1648748691393,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$27oD1lhr7AZrhl1FOdOTya8IKXEI6N5zj1lLP72rkq4"},
{"content":{"body":"Firebase is so strange in a language that has settled on OOP designs","msgtype":"m.text","org.matrix.msc1767.text":"Firebase is so strange in a language that has settled on OOP designs"},"ts":1648748697956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"},
{"content":{"body":"(also I didn't find your data all that convincing, to be frank)","msgtype":"m.text","org.matrix.msc1767.text":"(also I didn't find your data all that convincing, to be frank)"},"ts":1648748700455,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg"},
{"content":{"body":"> <@jridgewell:matrix.org> Call site ergonomics will prevent adoption of this.\n\nI don't think inventing _entirely new syntax_ actually does amount to being a more ergonomic syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Call site ergonomics will prevent adoption of this.</blockquote></mx-reply>I don't think inventing <em>entirely new syntax</em> actually does amount to being a more ergonomic syntax","m.relates_to":{"m.in_reply_to":{"event_id":"$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Call site ergonomics will prevent adoption of this.\n\nI don't think inventing _entirely new syntax_ actually does amount to being a more ergonomic syntax","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ec3w84CvZ9tZJ6wcgKwnhoZL54UUbEwMvtvMi7CqoEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Call site ergonomics will prevent adoption of this.</blockquote></mx-reply>I don't think inventing <em>entirely new syntax</em> actually does amount to being a more ergonomic syntax","mimetype":"text/html"}]},"ts":1648748733805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AOy2m4nXYxoWBlzGAsbDP0YLY_REmVqX20u32OiQqNI"},
{"content":{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nthe language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>the language hasn't &quot;settled&quot; on that tho, it's just parts of the ecosystem that have.","m.relates_to":{"m.in_reply_to":{"event_id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nthe language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>the language hasn't &quot;settled&quot; on that tho, it's just parts of the ecosystem that have.","mimetype":"text/html"}]},"ts":1648748862849,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU"},
{"content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg"}}},"ts":1648748866860,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8"},
{"content":{"body":"> <@bakkot:matrix.org> (also I didn't find your data all that convincing, to be frank)\n\n * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(also I didn't find your data all that convincing, to be frank)</blockquote></mx-reply> * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","m.new_content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> (also I didn't find your data all that convincing, to be frank)\n\n * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cOOxx-gMZoNuEco8he9Cam-Dk9gAfwNUIyjmADbSBPg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(also I didn't find your data all that convincing, to be frank)</blockquote></mx-reply> * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely.","mimetype":"text/html"}]},"ts":1648748911523,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rwv4xct92Iaq_nF7vPJKyzRyt6Zvkcr0oriId-_eFG4"},
{"content":{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nI've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>I've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","m.relates_to":{"m.in_reply_to":{"event_id":"$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Firebase is so strange in a language that has settled on OOP designs\n\nI've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cN8eBgA_VlHG3yKKvApKOiFRVFymADyUsCJDnGL53o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Firebase is so strange in a language that has settled on OOP designs</blockquote></mx-reply>I've always found JS very unopinionated about whether applications should be written with an OOP pattern, and I see quite a lot of code written in a more functional style. Usually it's a mix.","mimetype":"text/html"}]},"ts":1648748914728,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$9vgM13u_XUoWkKDEYIpCzqQQobpWuVEArhqZ3EmYxWA"},
{"content":{"body":"> <@ljharb:matrix.org> the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.\n\nThis is where the puck is heading, libraries designed for code splitting will become more prevalent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.</blockquote></mx-reply>This is where the puck is heading, libraries designed for code splitting will become more prevalent","m.relates_to":{"m.in_reply_to":{"event_id":"$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.\n\nThis is where the puck is heading, libraries designed for code splitting will become more prevalent","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDRdudzzoCUix7Myf080SCF1Fyt8sMlTY1mvMcYEGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the language hasn't \"settled\" on that tho, it's just parts of the ecosystem that have.</blockquote></mx-reply>This is where the puck is heading, libraries designed for code splitting will become more prevalent","mimetype":"text/html"}]},"ts":1648748937488,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$O60espnjxY_VJT6NgyQlBKaMPybqprwxSmzkYkEQq5Q"},
{"content":{"body":"right but those aren't OOP","msgtype":"m.text","org.matrix.msc1767.text":"right but those aren't OOP"},"ts":1648748949272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P5kMOaNp5z_a4BctDxrJLO7n7fWm3vV2ZWlLLu42AaQ"},
{"content":{"body":"those are more functional","msgtype":"m.text","org.matrix.msc1767.text":"those are more functional"},"ts":1648748953815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IAKxL4jLZsAbnp_fi4odhiiz20LpNwT5wYFjdAXOPus"},
{"content":{"body":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","msgtype":"m.text","org.matrix.msc1767.text":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"ts":1648748979816,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q5I72y0XfoLKcizUHa4Cv6xLoYgC48QvQvOhmDToQHE"},
{"content":{"body":" * they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","m.new_content":{"body":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style","msgtype":"m.text","org.matrix.msc1767.text":"they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"m.relates_to":{"event_id":"$q5I72y0XfoLKcizUHa4Cv6xLoYgC48QvQvOhmDToQHE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * they may use some kind of \"mixin\" magic, or pipeline, to pretend it's OOP, but that doesn't make it that style - just written in that style"},"ts":1648748983674,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Do958Xfou2tMY7LOVD7FmsnnGeBTFANQwHBcjLBNxHU"},
{"content":{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","m.new_content":{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/plain"},{"body":" * Are there any specific problems that you see in the data? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/html"}]},"ts":1648749266294,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kkDhHcYp65tJmi63A2Wib7iiKhQ-JTiZOO_uOf7OTD4"},
{"content":{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","m.new_content":{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","format":"org.matrix.custom.html","formatted_body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/plain"},{"body":"Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ji4bN5agfNZGzcFlgWJryG5twz_MugtveuYb7Q9XxG8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/plain"},{"body":" * Are there any specific problems that you see in the corpus analysis? Let me know, maybe later over DM or something, and I can see if we can examine them more closely. Iâ€™m not sure how we could have done better.","mimetype":"text/html"}]},"ts":1648749272816,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$glPzoQA1YL5cdpJaSsNjL4OrzlBNCk0UlVb5aMO_ZOs"}
]