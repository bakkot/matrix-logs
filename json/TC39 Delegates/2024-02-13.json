[
{"content":{"body":"Yeah we need the metadata. Another param decorator we would have is an `@Awaited`, which would have to be coupled with a `@Async` (name to be bikeshed) method decorator since the param decorator cannot replace the method itself (like how method decorators cannot replace the class itself)","msgtype":"m.text"},"ts":1707790764277,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CM1O43NUWuKFtXgCXpjvkYriqotSM3eJA0Lrg6KNG3c"},
{"content":{"body":"> <@rbuckton:matrix.org> Some FFI marshaling scenarios require up-front knowledge of the function parameters incl. data types, string decoding behaviors, etc., that makes extractors a poor fit. \n\nCould you elaborate on this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AcsGfUPWkdiL2D1sEnMcHpe2vmPO-ahK5jLBUuKuBgM\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Some FFI marshaling scenarios require up-front knowledge of the function parameters incl. data types, string decoding behaviors, etc., that makes extractors a poor fit.</blockquote></mx-reply>Could you elaborate on this?","m.relates_to":{"m.in_reply_to":{"event_id":"$AcsGfUPWkdiL2D1sEnMcHpe2vmPO-ahK5jLBUuKuBgM"}},"msgtype":"m.text"},"ts":1707828843135,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hL3SuC4klHUY4fKwMw_qgTVtXzbzS2OPW8VNFm3d-FU"},
{"content":{"body":"See the example at https://github.com/tc39/proposal-class-method-parameter-decorators?tab=readme-ov-file#foreign-function-interfaces. If you are passing a JS function as a callback to a native API that will use it as a function pointer, it may need to know the expected data types (e.g., integer widths) ahead of time when marshalling from native to JS.","m.mentions":{},"msgtype":"m.text"},"ts":1707829991163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0KZ_6Ycy2qhGc9SsdreAZ6wwYE9DgnGeJSb_FdG1yqA"}
]