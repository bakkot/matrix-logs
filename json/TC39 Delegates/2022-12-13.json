[
{"content":{"body":"oof, that is a super gross user experience :-/","msgtype":"m.text","org.matrix.msc1767.text":"oof, that is a super gross user experience :-/"},"ts":1670889704517,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uYVWHeWpq7AafplhaSDTPX3WrrothuDOAiDCvAZJaGk"},
{"content":{"body":"so everyone basically has to wrap their return in `[]`, ugh","format":"org.matrix.custom.html","formatted_body":"so everyone basically has to wrap their return in <code>[]</code>, ugh","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so everyone basically has to wrap their return in `[]`, ugh","mimetype":"text/plain"},{"body":"so everyone basically has to wrap their return in <code>[]</code>, ugh","mimetype":"text/html"}]},"ts":1670889755166,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CGJMSNYn77bLtsZiyiMJlELlVncCWHDhVXopQkRSA1U"},
{"content":{"body":"point 2 of https://github.com/tc39/proposal-iterator-helpers/issues/55 sold me on those semantics, personally","msgtype":"m.text","org.matrix.msc1767.text":"point 2 of https://github.com/tc39/proposal-iterator-helpers/issues/55 sold me on those semantics, personally"},"ts":1670889893933,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sL426AXUShY3vj___z_tqW93wUw5_eL-Lwa8kucsdvE"},
{"content":{"body":"yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable","msgtype":"m.text","org.matrix.msc1767.text":"yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable"},"ts":1670889920854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q01n0D_t4x0KXghSCKcEfCSUZxk0aVELnjZ59W3C-uE"},
{"content":{"body":"meaning, strings would not be auto-flattened, which resolves point 2","msgtype":"m.text","org.matrix.msc1767.text":"meaning, strings would not be auto-flattened, which resolves point 2"},"ts":1670889928698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DRpiu6uR3TNo1SZjYv9Zulzwb4wMtXXsbIm3F4c4HcE"},
{"content":{"body":"iow, if flatMap only considered Object as potential iterables, and all primitives were allowed, i think it'd maximize usability without causing any of the footguns mentioned","msgtype":"m.text","org.matrix.msc1767.text":"iow, if flatMap only considered Object as potential iterables, and all primitives were allowed, i think it'd maximize usability without causing any of the footguns mentioned"},"ts":1670889958589,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L0-QORV6li_lE3z0P4pkL_3TNXisV1C_jdrVj3rL-TE"},
{"content":{"body":"I am still confused about, why would you be returning something which is not already iterable from flatMap?","msgtype":"m.text","org.matrix.msc1767.text":"I am still confused about, why would you be returning something which is not already iterable from flatMap?"},"ts":1670890005985,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r0f3Tye2bkcUHpnVEWgrHcF9LeyAI0CuOlap189wZiM"},
{"content":{"body":"like","msgtype":"m.text","org.matrix.msc1767.text":"like"},"ts":1670890011100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ePfM5L3nOp8vdmDbpweJyhQGBwydcqJCfnCdHDgEH3U"},
{"content":{"body":"if you don't do that, you don't need to wrap","msgtype":"m.text","org.matrix.msc1767.text":"if you don't do that, you don't need to wrap"},"ts":1670890019596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-FM1tM8pavL4kjtkjNFdFKgT70Cw-A2YJjNm2jsi0xs"},
{"content":{"body":"and I don't know why you would do that","msgtype":"m.text","org.matrix.msc1767.text":"and I don't know why you would do that"},"ts":1670890025412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gK4rccjmMEd2A7M7_4ytEbsR8Vd7pyT0zCqAj6aRHf8"},
{"content":{"body":"in any case I consider the third item in the issue linked above (i.e., auto-boxing means adding Symbol.iterator is basically always a breaking change) to be sufficient on its own","msgtype":"m.text","org.matrix.msc1767.text":"in any case I consider the third item in the issue linked above (i.e., auto-boxing means adding Symbol.iterator is basically always a breaking change) to be sufficient on its own"},"ts":1670890081862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AFh9A10xtcpQ8y_3xBclpU0V_18aLXHms-TmWRPfUsk"},
{"content":{"body":"specifically because i don't want to have to care if the item i'm returning is iterable or not","msgtype":"m.text","org.matrix.msc1767.text":"specifically because i don't want to have to care if the item i'm returning is iterable or not"},"ts":1670890093384,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JGTqxb8AXQGgoTv801921ZSUA3sKuR2kx-ZcS86ifxI"},
{"content":{"body":"I guess we already had this conversation in this thread","msgtype":"m.text","org.matrix.msc1767.text":"I guess we already had this conversation in this thread"},"ts":1670890108809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iX8hqjsXIJZF6Iqham3GRyDdQDOJpS-XQ069kUmN48Q"},
{"content":{"body":"that is also addressed by disallowing a non-iterable Object","msgtype":"m.text","org.matrix.msc1767.text":"that is also addressed by disallowing a non-iterable Object"},"ts":1670890111092,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xohwiI6GZaNc69ZadL5Of0Kw91-px2eJPfz2PCkOGfA"},
{"content":{"body":"don't need to repeat it","msgtype":"m.text","org.matrix.msc1767.text":"don't need to repeat it"},"ts":1670890114551,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lzn93rRHIoiMRhHNpjaez1HpxTKL4GmTgDpfcdjGZhg"},
{"content":{"body":"iow, currently you're allowed \"only iterable objects\", i'd like to see \"primitive, or iterable objects\"","msgtype":"m.text","org.matrix.msc1767.text":"iow, currently you're allowed \"only iterable objects\", i'd like to see \"primitive, or iterable objects\""},"ts":1670890125663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IBu-OXJLMwlYPq6TCt9RG17tCBzKKv_E9nYrHiXwRzU"},
{"content":{"body":"but... why","msgtype":"m.text","org.matrix.msc1767.text":"but... why"},"ts":1670890136736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JJw_c0TbHYFoR9Kts-TxHimLEmpRQJC_MTFiPXN-hM0"},
{"content":{"body":"that's even weirder","msgtype":"m.text","org.matrix.msc1767.text":"that's even weirder"},"ts":1670890138599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uT5icrbLTcJN2WF7AQS5V2jFKsRWzDgtQEyuHDZx72s"},
{"content":{"body":"why? a common case of a mapper is to produce a primitive","msgtype":"m.text","org.matrix.msc1767.text":"why? a common case of a mapper is to produce a primitive"},"ts":1670890150551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xB_NHSo3r3M1es3toyGzh8ZfV4VP4OzTYyvVMeG0pSQ"},
{"content":{"body":"yeah but if you are mapping you use `.map`, not `.flatMap`","format":"org.matrix.custom.html","formatted_body":"yeah but if you are mapping you use <code>.map</code>, not <code>.flatMap</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah but if you are mapping you use `.map`, not `.flatMap`","mimetype":"text/plain"},{"body":"yeah but if you are mapping you use <code>.map</code>, not <code>.flatMap</code>","mimetype":"text/html"}]},"ts":1670890163495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X1RmADi_4rSB_um-yv4rJLeJx1d9q2Da7Jpu_xTPPLw"},
{"content":{"body":"not if i sometimes want to return an array","msgtype":"m.text","org.matrix.msc1767.text":"not if i sometimes want to return an array"},"ts":1670890172477,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FyBXi6LOHDVGe3U0oaP2xLgIkH6QwQG-MjRALVN1BFI"},
{"content":{"body":"flatMap is for when you are producing a sequence","msgtype":"m.text","org.matrix.msc1767.text":"flatMap is for when you are producing a sequence"},"ts":1670890174524,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vkpo2tlT41nG1YBibTv8qKTGR-SqmbB3aQYOiEHo4Ls"},
{"content":{"body":"map and flatMap on arrays already work this way","msgtype":"m.text","org.matrix.msc1767.text":"map and flatMap on arrays already work this way"},"ts":1670890178255,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zahIW4FdezANOMjSBgGhyOf63M5dxbvQnrUJWV80u8U"},
{"content":{"body":"yes, flatMap is for when i want to produce a sequence at the end","msgtype":"m.text","org.matrix.msc1767.text":"yes, flatMap is for when i want to produce a sequence at the end"},"ts":1670890187046,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L5xTP-PAB3w4hL4eGianB-nC8wtf-6Q2ykj54oreHK4"},
{"content":{"body":"it is NOT for \"each callback produces a sequence\"","msgtype":"m.text","org.matrix.msc1767.text":"it is NOT for \"each callback produces a sequence\""},"ts":1670890194171,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VLlWR0vqV8IXfQGez-pGKehCCfWnlwJhCzv9bm2XVtM"},
{"content":{"body":"yes it is","msgtype":"m.text","org.matrix.msc1767.text":"yes it is"},"ts":1670890199445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Zb51G3YSsqpyRQDwsfFvKFfkqtXB-hQIveuparWvZvU"},
{"content":{"body":"that is what it is for","msgtype":"m.text","org.matrix.msc1767.text":"that is what it is for"},"ts":1670890202018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cCY7lR5RmI5VferZykq8LvBuJOYfZpro9kj0V0Lkf78"},
{"content":{"body":"that is, very definitively, what it is for","msgtype":"m.text","org.matrix.msc1767.text":"that is, very definitively, what it is for"},"ts":1670890208661,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fqq1FWdMGgTEiUcEIOuGbNpbDTFdOngLWmdRFa6SdN4"},
{"content":{"body":"it's for \"each callback *might* produce a sequence\", which is why the one on arrays works that way","format":"org.matrix.custom.html","formatted_body":"it's for &quot;each callback <em>might</em> produce a sequence&quot;, which is why the one on arrays works that way","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's for \"each callback *might* produce a sequence\", which is why the one on arrays works that way","mimetype":"text/plain"},{"body":"it's for &quot;each callback <em>might</em> produce a sequence&quot;, which is why the one on arrays works that way","mimetype":"text/html"}]},"ts":1670890213505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZYIfBAP0pG-ARchRptQ7JJCcESQW1hojDWLyldhwTWg"},
{"content":{"body":"we did not invent flatMap","msgtype":"m.text","org.matrix.msc1767.text":"we did not invent flatMap"},"ts":1670890222265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UZ7O5UkTU83F9Blt46pmDxFFkkIGBFiRcbNaabUrmls"},
{"content":{"body":"i realize that. but this makes the iterator flatMap different from the array one in a way that harms usability - it means i can't transparently refactor between map and flatMap without also changing the mapper - something i can already do on arrays, and very very often do.","msgtype":"m.text","org.matrix.msc1767.text":"i realize that. but this makes the iterator flatMap different from the array one in a way that harms usability - it means i can't transparently refactor between map and flatMap without also changing the mapper - something i can already do on arrays, and very very often do."},"ts":1670890256791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ovErmEPyZq24RSifSJAkAuXBDTShlPOwGmi-pv5C4DM"},
{"content":{"body":"the only reason the one on arrays works that way is for symmetry with `.flat`, which does not exist on iterator helpers","format":"org.matrix.custom.html","formatted_body":"the only reason the one on arrays works that way is for symmetry with <code>.flat</code>, which does not exist on iterator helpers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the only reason the one on arrays works that way is for symmetry with `.flat`, which does not exist on iterator helpers","mimetype":"text/plain"},{"body":"the only reason the one on arrays works that way is for symmetry with <code>.flat</code>, which does not exist on iterator helpers","mimetype":"text/html"}]},"ts":1670890262178,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f9qVb6TBiqlStNzzqtISwDtUv1P0hjyW_af3yyKdSs0"},
{"content":{"body":"ok but flat and flatMap now exist on Arrays. the reason for array flatMap's behavior isn't really relevant - the two flatMaps are now inconsistent","msgtype":"m.text","org.matrix.msc1767.text":"ok but flat and flatMap now exist on Arrays. the reason for array flatMap's behavior isn't really relevant - the two flatMaps are now inconsistent"},"ts":1670890294986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lowL04RlAgiAVCMCeghYYJROyIrNBngVTKfJWbR1s7E"},
{"content":{"body":"\"primitives or iterables\" would not restore the consistency with Array that you're looking for","msgtype":"m.text","org.matrix.msc1767.text":"\"primitives or iterables\" would not restore the consistency with Array that you're looking for"},"ts":1670890316267,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$59j56tuOoFhUUbneNgqCiJm4SEqVs8KYim6y3KgceqY"},
{"content":{"body":"true. it would bring it closer tho.","msgtype":"m.text","org.matrix.msc1767.text":"true. it would bring it closer tho."},"ts":1670890328196,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oLKeywJ5q6T9zebxmoSxfVTvf-zDhFoIbdcFwlLkQhA"},
{"content":{"body":"that's not always a good thing","msgtype":"m.text","org.matrix.msc1767.text":"that's not always a good thing"},"ts":1670890343365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DQc7zxnc4VdH4Oujp-0fVE3JhAU22NovT8RJY7FYqiA"},
{"content":{"body":"sorry what was the change in how non-objects were handled?","msgtype":"m.text","org.matrix.msc1767.text":"sorry what was the change in how non-objects were handled?"},"ts":1670890353208,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dbwIP59hkx1O7OtYigC8VASMna66ke1hm41slTgnQ5o"},
{"content":{"body":"agreed. i fail to see why this wouldn't be a good thing tho","msgtype":"m.text","org.matrix.msc1767.text":"agreed. i fail to see why this wouldn't be a good thing tho"},"ts":1670890355213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KHjqsEHEqiji8Nv9CDBZ2u-Ugc8Bs_8mZ9d2fhuMK28"},
{"content":{"body":"littledan: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","mimetype":"text/html"}]},"ts":1670890376906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$al7KLm0OGC3nLy41EUGp-c2syUm3xj3Dki1IjPwgVs8"},
{"content":{"body":"in iterator flatMap, if the callback return is a non-iterable, it always throws - instead of just being used as-is","msgtype":"m.text","org.matrix.msc1767.text":"in iterator flatMap, if the callback return is a non-iterable, it always throws - instead of just being used as-is"},"ts":1670890392802,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PAhCHndq3xPQ2m6CjUgODfNKXSqrbI_YeVyvOWXzwNQ"},
{"content":{"body":"littledan: right now, `flatMap` throws if you return anything other than an iterable object; ljharb proposes that instead it throw if you return anything other than an iterable object _or a primitive_, and that in the latter case it auto-box","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: right now, <code>flatMap</code> throws if you return anything other than an iterable object; <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> proposes that instead it throw if you return anything other than an iterable object <em>or a primitive</em>, and that in the latter case it auto-box","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: right now, `flatMap` throws if you return anything other than an iterable object; ljharb proposes that instead it throw if you return anything other than an iterable object _or a primitive_, and that in the latter case it auto-box","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: right now, <code>flatMap</code> throws if you return anything other than an iterable object; <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> proposes that instead it throw if you return anything other than an iterable object <em>or a primitive</em>, and that in the latter case it auto-box","mimetype":"text/html"}]},"ts":1670890413351,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L5bpC8N-nQ9hLB4DMLgDQpHpI8YTcQuw1Zfgr3hUIik"},
{"content":{"body":"in particular this introduces a refactoring hazard for arrays","msgtype":"m.text","org.matrix.msc1767.text":"in particular this introduces a refactoring hazard for arrays"},"ts":1670890414499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BaLA1SlYijdOrg6RtsYKlRMEBQZmASMDoGrRhaCdZ7s"},
{"content":{"body":"`arr.map(x).filter(y).flatMap(z)` to `Iterator.from(arr).map(x).filter(y).flatMap(z)` won't work as intended","format":"org.matrix.custom.html","formatted_body":"<code>arr.map(x).filter(y).flatMap(z)</code> to <code>Iterator.from(arr).map(x).filter(y).flatMap(z)</code> won't work as intended","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`arr.map(x).filter(y).flatMap(z)` to `Iterator.from(arr).map(x).filter(y).flatMap(z)` won't work as intended","mimetype":"text/plain"},{"body":"<code>arr.map(x).filter(y).flatMap(z)</code> to <code>Iterator.from(arr).map(x).filter(y).flatMap(z)</code> won't work as intended","mimetype":"text/html"}]},"ts":1670890442533,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y-KskcBl1KmWqW6dmM3w6i784uL4lnDlUculDWySBT4"},
{"content":{"body":"the refactoring hazard is there either way, though; making the hazard more subtle (i.e. only relevant for non-primitives) is not an improvement IMO","msgtype":"m.text","org.matrix.msc1767.text":"the refactoring hazard is there either way, though; making the hazard more subtle (i.e. only relevant for non-primitives) is not an improvement IMO"},"ts":1670890443317,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iaUh8gvfUvKRVA7Z1CZZJsXdT99gDEdCEB9KECF7enQ"},
{"content":{"body":"also Array.prototype.flatMap flattens _arrays_, and _not_ iterables","format":"org.matrix.custom.html","formatted_body":"also Array.prototype.flatMap flattens <em>arrays</em>, and <em>not</em> iterables","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also Array.prototype.flatMap flattens _arrays_, and _not_ iterables","mimetype":"text/plain"},{"body":"also Array.prototype.flatMap flattens <em>arrays</em>, and <em>not</em> iterables","mimetype":"text/html"}]},"ts":1670890480301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5Ea8CCBRPuXVjDPL86zsDXMnKVDdu6J84ptCPaPsJ-k"},
{"content":{"body":"they're just fundamentally different operations","msgtype":"m.text","org.matrix.msc1767.text":"they're just fundamentally different operations"},"ts":1670890484262,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hAfLyt0zU1tuAYpIHjgxiinFYz5e66YpGBGiESmFWTc"},
{"content":{"body":"i suppose if you were returning a non-array iterable in the array case, the hazard is indeed always there","msgtype":"m.text","org.matrix.msc1767.text":"i suppose if you were returning a non-array iterable in the array case, the hazard is indeed always there"},"ts":1670890485106,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ljPXJLhuPuxggvoiyRtMkIqvxqqYftyP-huXnK-Y_7o"},
{"content":{"body":"but the only non-array iterable i would think is commonly returned from a mapper is strings","msgtype":"m.text","org.matrix.msc1767.text":"but the only non-array iterable i would think is commonly returned from a mapper is strings"},"ts":1670890509831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ie7kb4h6uoUG2hqRhoh-z210IVRa0usghxmBGi9xxuE"},
{"content":{"body":" * but the only non-array iterable i would think is commonly returned from a mapper is primitive strings","m.new_content":{"body":"but the only non-array iterable i would think is commonly returned from a mapper is primitive strings","msgtype":"m.text","org.matrix.msc1767.text":"but the only non-array iterable i would think is commonly returned from a mapper is primitive strings"},"m.relates_to":{"event_id":"$Ie7kb4h6uoUG2hqRhoh-z210IVRa0usghxmBGi9xxuE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * but the only non-array iterable i would think is commonly returned from a mapper is primitive strings"},"ts":1670890532892,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3PrOgZiHyb5XZWoAnYa0IRHPuTsmx45LPLxL0Fzoxnk"},
{"content":{"body":"I think that Set and Map are not unusual data structures to be working with, personally","msgtype":"m.text","org.matrix.msc1767.text":"I think that Set and Map are not unusual data structures to be working with, personally"},"ts":1670890540252,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k93mVtQYJbx_U7rlS4b5KaVA9jC5Wt7jTiQX_33gATU"},
{"content":{"body":"it's not like, surprising or bad code to have a mapper that returns those, ofc. but i doubt it's at all common.","msgtype":"m.text","org.matrix.msc1767.text":"it's not like, surprising or bad code to have a mapper that returns those, ofc. but i doubt it's at all common."},"ts":1670890556643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GEytDjhLvT82maBKPZtf7T_NuulyEan0rxYXZcUbM-Q"},
{"content":{"body":"ok but I think that having a `flatMap` function that returns a primitive is also not common","format":"org.matrix.custom.html","formatted_body":"ok but I think that having a <code>flatMap</code> function that returns a primitive is also not common","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok but I think that having a `flatMap` function that returns a primitive is also not common","mimetype":"text/plain"},{"body":"ok but I think that having a <code>flatMap</code> function that returns a primitive is also not common","mimetype":"text/html"}]},"ts":1670890652136,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iqmdvt9GCLpTzZV_q59N12IHTbmXh3nwMefajzA2Lbc"},
{"content":{"body":"I know you do this but I do not expect that most people reaching for flatMap would do that","msgtype":"m.text","org.matrix.msc1767.text":"I know you do this but I do not expect that most people reaching for flatMap would do that"},"ts":1670890674507,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LqfpGxhrJBS8uee7XqdSQNrGGPUnVrFsBYitTBnM1f4"},
{"content":{"body":"and of the people who would, it's not going to be that unusual to sometimes return an object instead","msgtype":"m.text","org.matrix.msc1767.text":"and of the people who would, it's not going to be that unusual to sometimes return an object instead"},"ts":1670890694367,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JhAZloY1hHjHnPWfqqtxs_auolnJlPS4uOfQMLGWjy4"},
{"content":{"body":"i do expect most flatMap functions are also map functions","msgtype":"m.text","org.matrix.msc1767.text":"i do expect most flatMap functions are also map functions"},"ts":1670890726430,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rpRicAA0ScAk8CUNvq9c9xpc2zEv6ehJOLqwq7PhjmQ"},
{"content":{"body":"I really think we should just expect people to learn that `X.prototype.flatMap` is for returning and flattening `X`s, and not try to guess what they meant if they return a non-X","format":"org.matrix.custom.html","formatted_body":"I really think we should just expect people to learn that <code>X.prototype.flatMap</code> is for returning and flattening <code>X</code>s, and not try to guess what they meant if they return a non-X","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I really think we should just expect people to learn that `X.prototype.flatMap` is for returning and flattening `X`s, and not try to guess what they meant if they return a non-X","mimetype":"text/plain"},{"body":"I really think we should just expect people to learn that <code>X.prototype.flatMap</code> is for returning and flattening <code>X</code>s, and not try to guess what they meant if they return a non-X","mimetype":"text/html"}]},"ts":1670890728233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gw1ew4iZFjxgytKNhMs_KQ31AzL520WC-x_T1cksBuY"},
{"content":{"body":"that's, uh.","msgtype":"m.text","org.matrix.msc1767.text":"that's, uh."},"ts":1670890734468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_0bZywptK0GMotvmDNwOzEzvNXJwVJVRAVO-VwQbrsc"},
{"content":{"body":"not an expectation I share","msgtype":"m.text","org.matrix.msc1767.text":"not an expectation I share"},"ts":1670890737678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$abFcFhEnZo88VzJUE4LEmKN8ZNklFjtsO8pWm0Zwt2U"},
{"content":{"body":"i agree with the X.prototype.flatMap flattens X's argument","msgtype":"m.text","org.matrix.msc1767.text":"i agree with the X.prototype.flatMap flattens X's argument"},"ts":1670890748023,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F_reBuCnKVol_BrtphNHWlaVoWyKEHki-2AXMz17UUc"},
{"content":{"body":"again, we did not invent flatMap","msgtype":"m.text","org.matrix.msc1767.text":"again, we did not invent flatMap"},"ts":1670890755519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OPHAmkfn7kKTdieLAi8WURH7w4M2LZuAt4IBmf3m_LU"},
{"content":{"body":"but the precedent *we already have* is that if you return a non-X, it's automatically somethinged into an X containing that non-X","format":"org.matrix.custom.html","formatted_body":"but the precedent <em>we already have</em> is that if you return a non-X, it's automatically somethinged into an X containing that non-X","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but the precedent *we already have* is that if you return a non-X, it's automatically somethinged into an X containing that non-X","mimetype":"text/plain"},{"body":"but the precedent <em>we already have</em> is that if you return a non-X, it's automatically somethinged into an X containing that non-X","mimetype":"text/html"}]},"ts":1670890770132,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6Uz9rS18lltVCKz7h6yoklWT1dCw8Ect-HedFEVlR54"},
{"content":{"body":"i forget the haskelly term for \"something\"","msgtype":"m.text","org.matrix.msc1767.text":"i forget the haskelly term for \"something\""},"ts":1670890777174,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$07CDdUOk0xV3D9oU2_LpQX7fYrXJWz0J3jeuKy-pH2o"},
{"content":{"body":"auto-somethinged maybe","msgtype":"m.text","org.matrix.msc1767.text":"auto-somethinged maybe"},"ts":1670890795539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zamhlKanU_TqJ-LsbYS0W-3StJ4OR5-00mG6UC-lWqY"},
{"content":{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators _cannot work that way_","format":"org.matrix.custom.html","formatted_body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators <em>cannot work that way</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators _cannot work that way_","mimetype":"text/plain"},{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators <em>cannot work that way</em>","mimetype":"text/html"}]},"ts":1670890803725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qCFXu24ZbknRcQ85Df0E-TRH7yANyo1_yxUO3VAxZ24"}
]