[
{"content":{"body":"oof, that is a super gross user experience :-/","msgtype":"m.text","org.matrix.msc1767.text":"oof, that is a super gross user experience :-/"},"ts":1670889704517,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uYVWHeWpq7AafplhaSDTPX3WrrothuDOAiDCvAZJaGk"},
{"content":{"body":"so everyone basically has to wrap their return in `[]`, ugh","format":"org.matrix.custom.html","formatted_body":"so everyone basically has to wrap their return in <code>[]</code>, ugh","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so everyone basically has to wrap their return in `[]`, ugh","mimetype":"text/plain"},{"body":"so everyone basically has to wrap their return in <code>[]</code>, ugh","mimetype":"text/html"}]},"ts":1670889755166,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CGJMSNYn77bLtsZiyiMJlELlVncCWHDhVXopQkRSA1U"},
{"content":{"body":"point 2 of https://github.com/tc39/proposal-iterator-helpers/issues/55 sold me on those semantics, personally","msgtype":"m.text","org.matrix.msc1767.text":"point 2 of https://github.com/tc39/proposal-iterator-helpers/issues/55 sold me on those semantics, personally"},"ts":1670889893933,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sL426AXUShY3vj___z_tqW93wUw5_eL-Lwa8kucsdvE"},
{"content":{"body":"yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable","msgtype":"m.text","org.matrix.msc1767.text":"yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable"},"ts":1670889920854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q01n0D_t4x0KXghSCKcEfCSUZxk0aVELnjZ59W3C-uE"},
{"content":{"body":"meaning, strings would not be auto-flattened, which resolves point 2","msgtype":"m.text","org.matrix.msc1767.text":"meaning, strings would not be auto-flattened, which resolves point 2"},"ts":1670889928698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DRpiu6uR3TNo1SZjYv9Zulzwb4wMtXXsbIm3F4c4HcE"},
{"content":{"body":"iow, if flatMap only considered Object as potential iterables, and all primitives were allowed, i think it'd maximize usability without causing any of the footguns mentioned","msgtype":"m.text","org.matrix.msc1767.text":"iow, if flatMap only considered Object as potential iterables, and all primitives were allowed, i think it'd maximize usability without causing any of the footguns mentioned"},"ts":1670889958589,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L0-QORV6li_lE3z0P4pkL_3TNXisV1C_jdrVj3rL-TE"},
{"content":{"body":"I am still confused about, why would you be returning something which is not already iterable from flatMap?","msgtype":"m.text","org.matrix.msc1767.text":"I am still confused about, why would you be returning something which is not already iterable from flatMap?"},"ts":1670890005985,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r0f3Tye2bkcUHpnVEWgrHcF9LeyAI0CuOlap189wZiM"},
{"content":{"body":"like","msgtype":"m.text","org.matrix.msc1767.text":"like"},"ts":1670890011100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ePfM5L3nOp8vdmDbpweJyhQGBwydcqJCfnCdHDgEH3U"},
{"content":{"body":"if you don't do that, you don't need to wrap","msgtype":"m.text","org.matrix.msc1767.text":"if you don't do that, you don't need to wrap"},"ts":1670890019596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-FM1tM8pavL4kjtkjNFdFKgT70Cw-A2YJjNm2jsi0xs"},
{"content":{"body":"and I don't know why you would do that","msgtype":"m.text","org.matrix.msc1767.text":"and I don't know why you would do that"},"ts":1670890025412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gK4rccjmMEd2A7M7_4ytEbsR8Vd7pyT0zCqAj6aRHf8"},
{"content":{"body":"in any case I consider the third item in the issue linked above (i.e., auto-boxing means adding Symbol.iterator is basically always a breaking change) to be sufficient on its own","msgtype":"m.text","org.matrix.msc1767.text":"in any case I consider the third item in the issue linked above (i.e., auto-boxing means adding Symbol.iterator is basically always a breaking change) to be sufficient on its own"},"ts":1670890081862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AFh9A10xtcpQ8y_3xBclpU0V_18aLXHms-TmWRPfUsk"},
{"content":{"body":"specifically because i don't want to have to care if the item i'm returning is iterable or not","msgtype":"m.text","org.matrix.msc1767.text":"specifically because i don't want to have to care if the item i'm returning is iterable or not"},"ts":1670890093384,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JGTqxb8AXQGgoTv801921ZSUA3sKuR2kx-ZcS86ifxI"},
{"content":{"body":"I guess we already had this conversation in this thread","msgtype":"m.text","org.matrix.msc1767.text":"I guess we already had this conversation in this thread"},"ts":1670890108809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iX8hqjsXIJZF6Iqham3GRyDdQDOJpS-XQ069kUmN48Q"},
{"content":{"body":"that is also addressed by disallowing a non-iterable Object","msgtype":"m.text","org.matrix.msc1767.text":"that is also addressed by disallowing a non-iterable Object"},"ts":1670890111092,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xohwiI6GZaNc69ZadL5Of0Kw91-px2eJPfz2PCkOGfA"},
{"content":{"body":"don't need to repeat it","msgtype":"m.text","org.matrix.msc1767.text":"don't need to repeat it"},"ts":1670890114551,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lzn93rRHIoiMRhHNpjaez1HpxTKL4GmTgDpfcdjGZhg"},
{"content":{"body":"iow, currently you're allowed \"only iterable objects\", i'd like to see \"primitive, or iterable objects\"","msgtype":"m.text","org.matrix.msc1767.text":"iow, currently you're allowed \"only iterable objects\", i'd like to see \"primitive, or iterable objects\""},"ts":1670890125663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IBu-OXJLMwlYPq6TCt9RG17tCBzKKv_E9nYrHiXwRzU"},
{"content":{"body":"but... why","msgtype":"m.text","org.matrix.msc1767.text":"but... why"},"ts":1670890136736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JJw_c0TbHYFoR9Kts-TxHimLEmpRQJC_MTFiPXN-hM0"},
{"content":{"body":"that's even weirder","msgtype":"m.text","org.matrix.msc1767.text":"that's even weirder"},"ts":1670890138599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uT5icrbLTcJN2WF7AQS5V2jFKsRWzDgtQEyuHDZx72s"},
{"content":{"body":"why? a common case of a mapper is to produce a primitive","msgtype":"m.text","org.matrix.msc1767.text":"why? a common case of a mapper is to produce a primitive"},"ts":1670890150551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xB_NHSo3r3M1es3toyGzh8ZfV4VP4OzTYyvVMeG0pSQ"},
{"content":{"body":"yeah but if you are mapping you use `.map`, not `.flatMap`","format":"org.matrix.custom.html","formatted_body":"yeah but if you are mapping you use <code>.map</code>, not <code>.flatMap</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah but if you are mapping you use `.map`, not `.flatMap`","mimetype":"text/plain"},{"body":"yeah but if you are mapping you use <code>.map</code>, not <code>.flatMap</code>","mimetype":"text/html"}]},"ts":1670890163495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X1RmADi_4rSB_um-yv4rJLeJx1d9q2Da7Jpu_xTPPLw"},
{"content":{"body":"not if i sometimes want to return an array","msgtype":"m.text","org.matrix.msc1767.text":"not if i sometimes want to return an array"},"ts":1670890172477,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FyBXi6LOHDVGe3U0oaP2xLgIkH6QwQG-MjRALVN1BFI"},
{"content":{"body":"flatMap is for when you are producing a sequence","msgtype":"m.text","org.matrix.msc1767.text":"flatMap is for when you are producing a sequence"},"ts":1670890174524,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vkpo2tlT41nG1YBibTv8qKTGR-SqmbB3aQYOiEHo4Ls"},
{"content":{"body":"map and flatMap on arrays already work this way","msgtype":"m.text","org.matrix.msc1767.text":"map and flatMap on arrays already work this way"},"ts":1670890178255,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zahIW4FdezANOMjSBgGhyOf63M5dxbvQnrUJWV80u8U"},
{"content":{"body":"yes, flatMap is for when i want to produce a sequence at the end","msgtype":"m.text","org.matrix.msc1767.text":"yes, flatMap is for when i want to produce a sequence at the end"},"ts":1670890187046,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L5xTP-PAB3w4hL4eGianB-nC8wtf-6Q2ykj54oreHK4"},
{"content":{"body":"it is NOT for \"each callback produces a sequence\"","msgtype":"m.text","org.matrix.msc1767.text":"it is NOT for \"each callback produces a sequence\""},"ts":1670890194171,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VLlWR0vqV8IXfQGez-pGKehCCfWnlwJhCzv9bm2XVtM"},
{"content":{"body":"yes it is","msgtype":"m.text","org.matrix.msc1767.text":"yes it is"},"ts":1670890199445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Zb51G3YSsqpyRQDwsfFvKFfkqtXB-hQIveuparWvZvU"},
{"content":{"body":"that is what it is for","msgtype":"m.text","org.matrix.msc1767.text":"that is what it is for"},"ts":1670890202018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cCY7lR5RmI5VferZykq8LvBuJOYfZpro9kj0V0Lkf78"},
{"content":{"body":"that is, very definitively, what it is for","msgtype":"m.text","org.matrix.msc1767.text":"that is, very definitively, what it is for"},"ts":1670890208661,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fqq1FWdMGgTEiUcEIOuGbNpbDTFdOngLWmdRFa6SdN4"},
{"content":{"body":"it's for \"each callback *might* produce a sequence\", which is why the one on arrays works that way","format":"org.matrix.custom.html","formatted_body":"it's for &quot;each callback <em>might</em> produce a sequence&quot;, which is why the one on arrays works that way","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's for \"each callback *might* produce a sequence\", which is why the one on arrays works that way","mimetype":"text/plain"},{"body":"it's for &quot;each callback <em>might</em> produce a sequence&quot;, which is why the one on arrays works that way","mimetype":"text/html"}]},"ts":1670890213505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZYIfBAP0pG-ARchRptQ7JJCcESQW1hojDWLyldhwTWg"},
{"content":{"body":"we did not invent flatMap","msgtype":"m.text","org.matrix.msc1767.text":"we did not invent flatMap"},"ts":1670890222265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UZ7O5UkTU83F9Blt46pmDxFFkkIGBFiRcbNaabUrmls"},
{"content":{"body":"i realize that. but this makes the iterator flatMap different from the array one in a way that harms usability - it means i can't transparently refactor between map and flatMap without also changing the mapper - something i can already do on arrays, and very very often do.","msgtype":"m.text","org.matrix.msc1767.text":"i realize that. but this makes the iterator flatMap different from the array one in a way that harms usability - it means i can't transparently refactor between map and flatMap without also changing the mapper - something i can already do on arrays, and very very often do."},"ts":1670890256791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ovErmEPyZq24RSifSJAkAuXBDTShlPOwGmi-pv5C4DM"},
{"content":{"body":"the only reason the one on arrays works that way is for symmetry with `.flat`, which does not exist on iterator helpers","format":"org.matrix.custom.html","formatted_body":"the only reason the one on arrays works that way is for symmetry with <code>.flat</code>, which does not exist on iterator helpers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the only reason the one on arrays works that way is for symmetry with `.flat`, which does not exist on iterator helpers","mimetype":"text/plain"},{"body":"the only reason the one on arrays works that way is for symmetry with <code>.flat</code>, which does not exist on iterator helpers","mimetype":"text/html"}]},"ts":1670890262178,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f9qVb6TBiqlStNzzqtISwDtUv1P0hjyW_af3yyKdSs0"},
{"content":{"body":"ok but flat and flatMap now exist on Arrays. the reason for array flatMap's behavior isn't really relevant - the two flatMaps are now inconsistent","msgtype":"m.text","org.matrix.msc1767.text":"ok but flat and flatMap now exist on Arrays. the reason for array flatMap's behavior isn't really relevant - the two flatMaps are now inconsistent"},"ts":1670890294986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lowL04RlAgiAVCMCeghYYJROyIrNBngVTKfJWbR1s7E"},
{"content":{"body":"\"primitives or iterables\" would not restore the consistency with Array that you're looking for","msgtype":"m.text","org.matrix.msc1767.text":"\"primitives or iterables\" would not restore the consistency with Array that you're looking for"},"ts":1670890316267,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$59j56tuOoFhUUbneNgqCiJm4SEqVs8KYim6y3KgceqY"},
{"content":{"body":"true. it would bring it closer tho.","msgtype":"m.text","org.matrix.msc1767.text":"true. it would bring it closer tho."},"ts":1670890328196,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oLKeywJ5q6T9zebxmoSxfVTvf-zDhFoIbdcFwlLkQhA"},
{"content":{"body":"that's not always a good thing","msgtype":"m.text","org.matrix.msc1767.text":"that's not always a good thing"},"ts":1670890343365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DQc7zxnc4VdH4Oujp-0fVE3JhAU22NovT8RJY7FYqiA"},
{"content":{"body":"sorry what was the change in how non-objects were handled?","msgtype":"m.text","org.matrix.msc1767.text":"sorry what was the change in how non-objects were handled?"},"ts":1670890353208,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dbwIP59hkx1O7OtYigC8VASMna66ke1hm41slTgnQ5o"},
{"content":{"body":"agreed. i fail to see why this wouldn't be a good thing tho","msgtype":"m.text","org.matrix.msc1767.text":"agreed. i fail to see why this wouldn't be a good thing tho"},"ts":1670890355213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KHjqsEHEqiji8Nv9CDBZ2u-Ugc8Bs_8mZ9d2fhuMK28"},
{"content":{"body":"littledan: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in array flatMap, if the callback return is an array, it's flattened; if not, it's just used as-is","mimetype":"text/html"}]},"ts":1670890376906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$al7KLm0OGC3nLy41EUGp-c2syUm3xj3Dki1IjPwgVs8"},
{"content":{"body":"in iterator flatMap, if the callback return is a non-iterable, it always throws - instead of just being used as-is","msgtype":"m.text","org.matrix.msc1767.text":"in iterator flatMap, if the callback return is a non-iterable, it always throws - instead of just being used as-is"},"ts":1670890392802,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PAhCHndq3xPQ2m6CjUgODfNKXSqrbI_YeVyvOWXzwNQ"},
{"content":{"body":"littledan: right now, `flatMap` throws if you return anything other than an iterable object; ljharb proposes that instead it throw if you return anything other than an iterable object _or a primitive_, and that in the latter case it auto-box","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: right now, <code>flatMap</code> throws if you return anything other than an iterable object; <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> proposes that instead it throw if you return anything other than an iterable object <em>or a primitive</em>, and that in the latter case it auto-box","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: right now, `flatMap` throws if you return anything other than an iterable object; ljharb proposes that instead it throw if you return anything other than an iterable object _or a primitive_, and that in the latter case it auto-box","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: right now, <code>flatMap</code> throws if you return anything other than an iterable object; <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> proposes that instead it throw if you return anything other than an iterable object <em>or a primitive</em>, and that in the latter case it auto-box","mimetype":"text/html"}]},"ts":1670890413351,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L5bpC8N-nQ9hLB4DMLgDQpHpI8YTcQuw1Zfgr3hUIik"},
{"content":{"body":"in particular this introduces a refactoring hazard for arrays","msgtype":"m.text","org.matrix.msc1767.text":"in particular this introduces a refactoring hazard for arrays"},"ts":1670890414499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BaLA1SlYijdOrg6RtsYKlRMEBQZmASMDoGrRhaCdZ7s"},
{"content":{"body":"`arr.map(x).filter(y).flatMap(z)` to `Iterator.from(arr).map(x).filter(y).flatMap(z)` won't work as intended","format":"org.matrix.custom.html","formatted_body":"<code>arr.map(x).filter(y).flatMap(z)</code> to <code>Iterator.from(arr).map(x).filter(y).flatMap(z)</code> won't work as intended","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`arr.map(x).filter(y).flatMap(z)` to `Iterator.from(arr).map(x).filter(y).flatMap(z)` won't work as intended","mimetype":"text/plain"},{"body":"<code>arr.map(x).filter(y).flatMap(z)</code> to <code>Iterator.from(arr).map(x).filter(y).flatMap(z)</code> won't work as intended","mimetype":"text/html"}]},"ts":1670890442533,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y-KskcBl1KmWqW6dmM3w6i784uL4lnDlUculDWySBT4"},
{"content":{"body":"the refactoring hazard is there either way, though; making the hazard more subtle (i.e. only relevant for non-primitives) is not an improvement IMO","msgtype":"m.text","org.matrix.msc1767.text":"the refactoring hazard is there either way, though; making the hazard more subtle (i.e. only relevant for non-primitives) is not an improvement IMO"},"ts":1670890443317,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iaUh8gvfUvKRVA7Z1CZZJsXdT99gDEdCEB9KECF7enQ"},
{"content":{"body":"also Array.prototype.flatMap flattens _arrays_, and _not_ iterables","format":"org.matrix.custom.html","formatted_body":"also Array.prototype.flatMap flattens <em>arrays</em>, and <em>not</em> iterables","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also Array.prototype.flatMap flattens _arrays_, and _not_ iterables","mimetype":"text/plain"},{"body":"also Array.prototype.flatMap flattens <em>arrays</em>, and <em>not</em> iterables","mimetype":"text/html"}]},"ts":1670890480301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5Ea8CCBRPuXVjDPL86zsDXMnKVDdu6J84ptCPaPsJ-k"},
{"content":{"body":"they're just fundamentally different operations","msgtype":"m.text","org.matrix.msc1767.text":"they're just fundamentally different operations"},"ts":1670890484262,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hAfLyt0zU1tuAYpIHjgxiinFYz5e66YpGBGiESmFWTc"},
{"content":{"body":"i suppose if you were returning a non-array iterable in the array case, the hazard is indeed always there","msgtype":"m.text","org.matrix.msc1767.text":"i suppose if you were returning a non-array iterable in the array case, the hazard is indeed always there"},"ts":1670890485106,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ljPXJLhuPuxggvoiyRtMkIqvxqqYftyP-huXnK-Y_7o"},
{"content":{"body":"but the only non-array iterable i would think is commonly returned from a mapper is strings","msgtype":"m.text","org.matrix.msc1767.text":"but the only non-array iterable i would think is commonly returned from a mapper is strings"},"ts":1670890509831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ie7kb4h6uoUG2hqRhoh-z210IVRa0usghxmBGi9xxuE"},
{"content":{"body":" * but the only non-array iterable i would think is commonly returned from a mapper is primitive strings","m.new_content":{"body":"but the only non-array iterable i would think is commonly returned from a mapper is primitive strings","msgtype":"m.text","org.matrix.msc1767.text":"but the only non-array iterable i would think is commonly returned from a mapper is primitive strings"},"m.relates_to":{"event_id":"$Ie7kb4h6uoUG2hqRhoh-z210IVRa0usghxmBGi9xxuE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * but the only non-array iterable i would think is commonly returned from a mapper is primitive strings"},"ts":1670890532892,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3PrOgZiHyb5XZWoAnYa0IRHPuTsmx45LPLxL0Fzoxnk"},
{"content":{"body":"I think that Set and Map are not unusual data structures to be working with, personally","msgtype":"m.text","org.matrix.msc1767.text":"I think that Set and Map are not unusual data structures to be working with, personally"},"ts":1670890540252,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k93mVtQYJbx_U7rlS4b5KaVA9jC5Wt7jTiQX_33gATU"},
{"content":{"body":"it's not like, surprising or bad code to have a mapper that returns those, ofc. but i doubt it's at all common.","msgtype":"m.text","org.matrix.msc1767.text":"it's not like, surprising or bad code to have a mapper that returns those, ofc. but i doubt it's at all common."},"ts":1670890556643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GEytDjhLvT82maBKPZtf7T_NuulyEan0rxYXZcUbM-Q"},
{"content":{"body":"ok but I think that having a `flatMap` function that returns a primitive is also not common","format":"org.matrix.custom.html","formatted_body":"ok but I think that having a <code>flatMap</code> function that returns a primitive is also not common","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok but I think that having a `flatMap` function that returns a primitive is also not common","mimetype":"text/plain"},{"body":"ok but I think that having a <code>flatMap</code> function that returns a primitive is also not common","mimetype":"text/html"}]},"ts":1670890652136,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iqmdvt9GCLpTzZV_q59N12IHTbmXh3nwMefajzA2Lbc"},
{"content":{"body":"I know you do this but I do not expect that most people reaching for flatMap would do that","msgtype":"m.text","org.matrix.msc1767.text":"I know you do this but I do not expect that most people reaching for flatMap would do that"},"ts":1670890674507,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LqfpGxhrJBS8uee7XqdSQNrGGPUnVrFsBYitTBnM1f4"},
{"content":{"body":"and of the people who would, it's not going to be that unusual to sometimes return an object instead","msgtype":"m.text","org.matrix.msc1767.text":"and of the people who would, it's not going to be that unusual to sometimes return an object instead"},"ts":1670890694367,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JhAZloY1hHjHnPWfqqtxs_auolnJlPS4uOfQMLGWjy4"},
{"content":{"body":"i do expect most flatMap functions are also map functions","msgtype":"m.text","org.matrix.msc1767.text":"i do expect most flatMap functions are also map functions"},"ts":1670890726430,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rpRicAA0ScAk8CUNvq9c9xpc2zEv6ehJOLqwq7PhjmQ"},
{"content":{"body":"I really think we should just expect people to learn that `X.prototype.flatMap` is for returning and flattening `X`s, and not try to guess what they meant if they return a non-X","format":"org.matrix.custom.html","formatted_body":"I really think we should just expect people to learn that <code>X.prototype.flatMap</code> is for returning and flattening <code>X</code>s, and not try to guess what they meant if they return a non-X","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I really think we should just expect people to learn that `X.prototype.flatMap` is for returning and flattening `X`s, and not try to guess what they meant if they return a non-X","mimetype":"text/plain"},{"body":"I really think we should just expect people to learn that <code>X.prototype.flatMap</code> is for returning and flattening <code>X</code>s, and not try to guess what they meant if they return a non-X","mimetype":"text/html"}]},"ts":1670890728233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gw1ew4iZFjxgytKNhMs_KQ31AzL520WC-x_T1cksBuY"},
{"content":{"body":"that's, uh.","msgtype":"m.text","org.matrix.msc1767.text":"that's, uh."},"ts":1670890734468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_0bZywptK0GMotvmDNwOzEzvNXJwVJVRAVO-VwQbrsc"},
{"content":{"body":"not an expectation I share","msgtype":"m.text","org.matrix.msc1767.text":"not an expectation I share"},"ts":1670890737678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$abFcFhEnZo88VzJUE4LEmKN8ZNklFjtsO8pWm0Zwt2U"},
{"content":{"body":"i agree with the X.prototype.flatMap flattens X's argument","msgtype":"m.text","org.matrix.msc1767.text":"i agree with the X.prototype.flatMap flattens X's argument"},"ts":1670890748023,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F_reBuCnKVol_BrtphNHWlaVoWyKEHki-2AXMz17UUc"},
{"content":{"body":"again, we did not invent flatMap","msgtype":"m.text","org.matrix.msc1767.text":"again, we did not invent flatMap"},"ts":1670890755519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OPHAmkfn7kKTdieLAi8WURH7w4M2LZuAt4IBmf3m_LU"},
{"content":{"body":"but the precedent *we already have* is that if you return a non-X, it's automatically somethinged into an X containing that non-X","format":"org.matrix.custom.html","formatted_body":"but the precedent <em>we already have</em> is that if you return a non-X, it's automatically somethinged into an X containing that non-X","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but the precedent *we already have* is that if you return a non-X, it's automatically somethinged into an X containing that non-X","mimetype":"text/plain"},{"body":"but the precedent <em>we already have</em> is that if you return a non-X, it's automatically somethinged into an X containing that non-X","mimetype":"text/html"}]},"ts":1670890770132,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6Uz9rS18lltVCKz7h6yoklWT1dCw8Ect-HedFEVlR54"},
{"content":{"body":"i forget the haskelly term for \"something\"","msgtype":"m.text","org.matrix.msc1767.text":"i forget the haskelly term for \"something\""},"ts":1670890777174,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$07CDdUOk0xV3D9oU2_LpQX7fYrXJWz0J3jeuKy-pH2o"},
{"content":{"body":"auto-somethinged maybe","msgtype":"m.text","org.matrix.msc1767.text":"auto-somethinged maybe"},"ts":1670890795539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zamhlKanU_TqJ-LsbYS0W-3StJ4OR5-00mG6UC-lWqY"},
{"content":{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators _cannot work that way_","format":"org.matrix.custom.html","formatted_body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators <em>cannot work that way</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators _cannot work that way_","mimetype":"text/plain"},{"body":"I agree that Arrays work this way, and you are increasingly convincing me that it's a mistake, but we are agreed that iterators <em>cannot work that way</em>","mimetype":"text/html"}]},"ts":1670890803725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qCFXu24ZbknRcQ85Df0E-TRH7yANyo1_yxUO3VAxZ24"},
{"content":{"body":"i don't understand why not","msgtype":"m.text","org.matrix.msc1767.text":"i don't understand why not"},"ts":1670890817680,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bthqiCqlyUwz9WL_4RN_6nkNgdLwviTchY4IBLTZFQc"},
{"content":{"body":"adding Symbol.iterator to anything is already a breaking change","msgtype":"m.text","org.matrix.msc1767.text":"adding Symbol.iterator to anything is already a breaking change"},"ts":1670890826414,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XHklMQin95--AfMqgaJiZZMGUEupfzMWKHCFzYwvBkg"},
{"content":{"body":"adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one","msgtype":"m.text","org.matrix.msc1767.text":"adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one"},"ts":1670890846715,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zXWRGJSV2tuN2S0jZpGOG7NOKUe3ObQJ_SwGKF7xbxE"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1670890853985,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5OF3eDuDhbcQePFXW4MCXMl1-3aksWHuv4aKySzNI3w"},
{"content":{"body":" * adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one","m.new_content":{"body":"adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one","msgtype":"m.text","org.matrix.msc1767.text":"adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one"},"m.relates_to":{"event_id":"$zXWRGJSV2tuN2S0jZpGOG7NOKUe3ObQJ_SwGKF7xbxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * adding a protocol to anything that didn't previously have it is always a breaking change, and must always be considered as one"},"ts":1670890856974,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FNGW_AjI1hDw5VQFfPqNC3F-QqNvVVrjYSVcEdAv3nU"},
{"content":{"body":"that is an opinion you can have but I am talking about, like, actually breaking in practice","msgtype":"m.text","org.matrix.msc1767.text":"that is an opinion you can have but I am talking about, like, actually breaking in practice"},"ts":1670890864661,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tZ60FJkHVDGPUAfUlkS6mzFNHBnWVOJJQsXtW3Mpr3Q"},
{"content":{"body":"and in real life people add Symbol.iterator to existing classes all the time without breaking anything","msgtype":"m.text","org.matrix.msc1767.text":"and in real life people add Symbol.iterator to existing classes all the time without breaking anything"},"ts":1670890877529,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KTZtgxbirXELSChGYSwphc4GvnhIqdB-KxfgDcgSL0k"},
{"content":{"body":"web platform just did that with streams and it was fine","msgtype":"m.text","org.matrix.msc1767.text":"web platform just did that with streams and it was fine"},"ts":1670890882246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BpL_Q7ylFfXiE-TNhbfehFwx-LjoATN19gZ8o0B0g7s"},
{"content":{"body":"i'm saying that \"i can't use a map callback on iterator flatmap\" has already broken me in practice, today","msgtype":"m.text","org.matrix.msc1767.text":"i'm saying that \"i can't use a map callback on iterator flatmap\" has already broken me in practice, today"},"ts":1670890887312,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ts5TvYVXL6ZICR5h1lJS3Tpr2T9QkZB9VhkeLJCX9D8"},
{"content":{"body":"which is why i brought it up","msgtype":"m.text","org.matrix.msc1767.text":"which is why i brought it up"},"ts":1670890891159,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gPPQOlmiO2BVkD6og_vEHNDrg-UuMPZL09-YhAwZXME"},
{"content":{"body":"and if adding Symbol.iterator to things is fine, then it would still be fine even if it changed how flatMap worked","msgtype":"m.text","org.matrix.msc1767.text":"and if adding Symbol.iterator to things is fine, then it would still be fine even if it changed how flatMap worked"},"ts":1670890906445,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tpA37md4_VDxxkufi7s3Hmohv6XeT9xl5Oh0n9VUjaI"},
{"content":{"body":"\"I did not know how this API worked\" is not at all as serious of a problem as \"I am permanently prevented from adding a feature to my library\"","msgtype":"m.text","org.matrix.msc1767.text":"\"I did not know how this API worked\" is not at all as serious of a problem as \"I am permanently prevented from adding a feature to my library\""},"ts":1670890915579,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6Q-Yzlc9-ZlSD91OaNDcBLeo3MmuQAMfvJwCRyobA1w"},
{"content":{"body":"agreed. why would it be a permanent obstacle?","msgtype":"m.text","org.matrix.msc1767.text":"agreed. why would it be a permanent obstacle?"},"ts":1670890928798,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zZhX7rwvJdydSCLUzAGlYKkfKymHfb8P0Ptm0nRCgdY"},
{"content":{"body":"that's what semver is for","msgtype":"m.text","org.matrix.msc1767.text":"that's what semver is for"},"ts":1670890932601,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8xTYif9vFy83xrLMxn5tx4I499Xp_iiruIfxzVuwxLg"},
{"content":{"body":"the language and platform already are hopefully risk-averse enough to be very cautious adding existing protocols to anything","msgtype":"m.text","org.matrix.msc1767.text":"the language and platform already are hopefully risk-averse enough to be very cautious adding existing protocols to anything"},"ts":1670890952158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TuxCcdmmOzlAAG1fG67yUiZsocs1izlGRVrv8fNV16E"},
{"content":{"body":"I think you're the only person I have ever met who is of the opinion that adding a protocol to a thing that didn't previously have it is always a breaking change","msgtype":"m.text","org.matrix.msc1767.text":"I think you're the only person I have ever met who is of the opinion that adding a protocol to a thing that didn't previously have it is always a breaking change"},"ts":1670890978920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dU7CL4PmvV2AyeE45EUs6D_hu_vS3OQ4lOyYKwZrOsM"},
{"content":{"body":"i mean, potentially. obv not in practice, just like any breaking change might not be","msgtype":"m.text","org.matrix.msc1767.text":"i mean, potentially. obv not in practice, just like any breaking change might not be"},"ts":1670890995607,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NA9Hfm698fn3VZNiFvY2gNrNzhzKXZWBaDnvp-4NAiM"},
{"content":{"body":"literally every change is potentially brekaing","msgtype":"m.text","org.matrix.msc1767.text":"literally every change is potentially brekaing"},"ts":1670891007859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kaltQvroG7WNG0Ao0w-DQARYobrqjRb1or2pbs05tEM"},
{"content":{"body":"I have had things depend on the literal source text of a function and break because I changed that","msgtype":"m.text","org.matrix.msc1767.text":"I have had things depend on the literal source text of a function and break because I changed that"},"ts":1670891020497,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ETb5cPHEynDWAgpl2wmfAj-a98H9VIlDJjK03JYu3_U"},
{"content":{"body":"this is not what is normally meant by \"breaking change\"","msgtype":"m.text","org.matrix.msc1767.text":"this is not what is normally meant by \"breaking change\""},"ts":1670891025540,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GJDdNOfYVCncrwE_XnlNyHZrCbR9LNKoW-f6t7Fyq1Y"},
{"content":{"body":"i don't think that's true, but that's not really a useful debate","msgtype":"m.text","org.matrix.msc1767.text":"i don't think that's true, but that's not really a useful debate"},"ts":1670891028754,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rrAwU9qJoRo7Ot8fV-0wm2LtZyDHDtb8z2Wt1ZLqK8A"},
{"content":{"body":"oh sure, there's a line like \"changing source text\" isn't breaking","msgtype":"m.text","org.matrix.msc1767.text":"oh sure, there's a line like \"changing source text\" isn't breaking"},"ts":1670891050197,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eSDBdjWxeEjGuG7EMpCNwncc2_m0IVGu8gFtBEWGpEE"},
{"content":{"body":"i would love to see a concrete example of an object type, that someone is returning from a flatMap callback, that makes sense to suddenly make iterable later, and where the breakage caused is difficult to debug or fix.","msgtype":"m.text","org.matrix.msc1767.text":"i would love to see a concrete example of an object type, that someone is returning from a flatMap callback, that makes sense to suddenly make iterable later, and where the breakage caused is difficult to debug or fix."},"ts":1670891100355,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aUEb38c9vlERNhA8bfYKsfXH9D8J7ezfGpPxMF2J_50"},
{"content":{"body":"streams!","msgtype":"m.text","org.matrix.msc1767.text":"streams!"},"ts":1670891107195,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zxXBMwrHde6w9Kt3h_427t0x4C1p9XLLLcBxkCIvHE0"},
{"content":{"body":"streams literally just did this!","msgtype":"m.text","org.matrix.msc1767.text":"streams literally just did this!"},"ts":1670891115506,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MExMJCF4gaWvj4N1PYdcFe4Lsi_CgsdxG3sBxyTFFRU"},
{"content":{"body":"and by \"just\" I mean \"sometime in the last few years\" but still","msgtype":"m.text","org.matrix.msc1767.text":"and by \"just\" I mean \"sometime in the last few years\" but still"},"ts":1670891126269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gw57zDVd6ceWuH4fdc5a_lyPtVV1vl7S1rEjEmQ6j2E"},
{"content":{"body":"did streams predate iteration, or was it a mistake to not have them iterable in the first place?","msgtype":"m.text","org.matrix.msc1767.text":"did streams predate iteration, or was it a mistake to not have them iterable in the first place?"},"ts":1670891149155,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q_cLXcxOzDqMfnK6uTP1lTOny2OoPeiqzIK8NGZaE94"},
{"content":{"body":"neither? they just didn't start out being iterable, and then evolved, as is very often the case","msgtype":"m.text","org.matrix.msc1767.text":"neither? they just didn't start out being iterable, and then evolved, as is very often the case"},"ts":1670891170260,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DdCfIvwXP3Spyv--gjVby4fBIe8eCgNec1vAgLsPWUU"},
{"content":{"body":"https://github.com/whatwg/streams/pull/980","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/whatwg/streams/pull/980"},"ts":1670891170920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KYZaM5SKUo5U0F7xZsTOe8QFFaDnx5PwFUPdRHVqso0"},
{"content":{"body":"oh well i'm sure web streams predated async iteration","msgtype":"m.text","org.matrix.msc1767.text":"oh well i'm sure web streams predated async iteration"},"ts":1670891189547,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0COwXMdBPentOGYrqrI_jE8FLfZBc_ZhA-PxkdmnQZg"},
{"content":{"body":"i meant normal iteration","msgtype":"m.text","org.matrix.msc1767.text":"i meant normal iteration"},"ts":1670891192460,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$M2J2uaS2VlPQ0818QMLhuon23kn_E8fcePEfTCff7uU"},
{"content":{"body":"flatMap also exists on async iterables so I don't understand why you are drawing a distinction","msgtype":"m.text","org.matrix.msc1767.text":"flatMap also exists on async iterables so I don't understand why you are drawing a distinction"},"ts":1670891208774,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qo9c9UBCdn0SxylMi4AjdLhSZTuUov13x5HR4CISzlE"},
{"content":{"body":"i'm not really thinking about async rn, because the usability problem i'm running into is primarily on sync","msgtype":"m.text","org.matrix.msc1767.text":"i'm not really thinking about async rn, because the usability problem i'm running into is primarily on sync"},"ts":1670891231524,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U5bEe-S-XTaqDE1HYl4tENPgA2vuGbzwsH1H8Q_OfM4"},
{"content":{"body":"so why would auto-whatevering primitives be a problem for flatMap?","msgtype":"m.text","org.matrix.msc1767.text":"so why would auto-whatevering primitives be a problem for flatMap?"},"ts":1670891266003,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0IpUVrOi8O59PKM1J3HeDo9x75rmWlfSMAYj6kqbJzs"},
{"content":{"body":"\"wrap\" i guess but there's another term i'm forgetting","msgtype":"m.text","org.matrix.msc1767.text":"\"wrap\" i guess but there's another term i'm forgetting"},"ts":1670891309924,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lawxVez5-_5v7lpjqu4kB2StYnp9YbcJMfNZPOThzgU"},
{"content":{"body":"\"box\", possibly","msgtype":"m.text","org.matrix.msc1767.text":"\"box\", possibly"},"ts":1670891316203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sm0n6Yl2OYucPp_r90kk4Bo1b94lrU918nqcvW1kL3I"},
{"content":{"body":"or \"pure\"","msgtype":"m.text","org.matrix.msc1767.text":"or \"pure\""},"ts":1670891323680,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fULiJYb8x_2-9rtnC9VQB8NXTxnSEypNFxnygeoFw6k"},
{"content":{"body":"pure! i think that's the term michael used","msgtype":"m.text","org.matrix.msc1767.text":"pure! i think that's the term michael used"},"ts":1670891347701,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Yc8OYbHk9lWnWr3_jTFoA_szqdRdASEpsNH-8moqNI4"},
{"content":{"body":"anyway: because once we get to the point that we're not being exactly consistent with Arrays, we need to choose different semantics anyway, and I think the only coherent option is \"reject things you can't flatten\"","msgtype":"m.text","org.matrix.msc1767.text":"anyway: because once we get to the point that we're not being exactly consistent with Arrays, we need to choose different semantics anyway, and I think the only coherent option is \"reject things you can't flatten\""},"ts":1670891347735,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0u5v40kWsuIqbD22fAcMLR6Izvajf_xAI8Y8RGv1ojk"},
{"content":{"body":"\"reject things you can't flatten, except primitives for some reason\" is not very coherent","msgtype":"m.text","org.matrix.msc1767.text":"\"reject things you can't flatten, except primitives for some reason\" is not very coherent"},"ts":1670891361042,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WnUUE7V3b3H-IaC_IT0VvC5NW3o8aVa3InD6PM88gWg"},
{"content":{"body":"\"can't flatten, but allow things that are already flat\"","msgtype":"m.text","org.matrix.msc1767.text":"\"can't flatten, but allow things that are already flat\""},"ts":1670891373587,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N6otndbm9U4oillDXVzWYfCaZSP0-Ruq7_oRhYHz1Mo"},
{"content":{"body":"`{}` is already flat","format":"org.matrix.custom.html","formatted_body":"<code>{}</code> is already flat","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`{}` is already flat","mimetype":"text/plain"},{"body":"<code>{}</code> is already flat","mimetype":"text/html"}]},"ts":1670891388982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4kNuASdJKFxEQ0VTRjqpSk9X-Aih7ISabM7Cmxtzkys"},
{"content":{"body":"arguably","msgtype":"m.text","org.matrix.msc1767.text":"arguably"},"ts":1670891394097,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KleyGOmZIsk0qt03RVkcjRhq1SI9cfyWfDa2hIDerHw"},
{"content":{"body":"except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","format":"org.matrix.custom.html","formatted_body":"except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/plain"},{"body":"except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/html"}]},"ts":1670891441375,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LK8h4Pmg7vGyAyrVbd4HLnnDusOVYzz1BCbcRg62l2k"},
{"content":{"body":" * except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","format":"org.matrix.custom.html","formatted_body":" * except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","m.new_content":{"body":"except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","format":"org.matrix.custom.html","formatted_body":"except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/plain"},{"body":"except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LK8h4Pmg7vGyAyrVbd4HLnnDusOVYzz1BCbcRg62l2k","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * except that the existing semantics say that only Objects are flattenable, so `{}` is _potentially_ flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/plain"},{"body":" * except that the existing semantics say that only Objects are flattenable, so <code>{}</code> is <em>potentially</em> flat or not, depending on what Object.prototype has on it. primitives are always flat, by the current semantics of the proposal.","mimetype":"text/html"}]},"ts":1670891451659,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VSn4r-2-WpPgLnkuRRCXkSKX0FTa0gsi5rsgIhd_Wt8"},
{"content":{"body":"I don't really see why a user would be thinking about whether something is \"potentially\" flat","msgtype":"m.text","org.matrix.msc1767.text":"I don't really see why a user would be thinking about whether something is \"potentially\" flat"},"ts":1670891467779,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EwTt_ZSovIPOkqRitS_IBtHzpJaMwDlOhF0ueMnZgTE"},
{"content":{"body":"well sure, but i also don't think they're going to be thinking about whether something is iterable or not. they're going to assume it works like array concat/flatMap and \"just work\" with non-iterables","msgtype":"m.text","org.matrix.msc1767.text":"well sure, but i also don't think they're going to be thinking about whether something is iterable or not. they're going to assume it works like array concat/flatMap and \"just work\" with non-iterables"},"ts":1670891503900,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZAPou5UB7D9oiqStFPYtn62K009wudNMfneubxFjg9w"},
{"content":{"body":"and they will be wrong for at least objects, in the \"we are special-casing primitives\" world, so they are going to have to correct their misconception at some point anyway","msgtype":"m.text","org.matrix.msc1767.text":"and they will be wrong for at least objects, in the \"we are special-casing primitives\" world, so they are going to have to correct their misconception at some point anyway"},"ts":1670891564321,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pntE0Iom48wdUPHrW92qq1F4T7uTCTMCG4EcM94yOU4"},
{"content":{"body":"why not make the misconception easier to correct, by making the rule simpler and more obvious?","msgtype":"m.text","org.matrix.msc1767.text":"why not make the misconception easier to correct, by making the rule simpler and more obvious?"},"ts":1670891579624,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NvfkKN2ACrMSpaMZPISvWD1zPnFyFa6pEoEVNODHLQU"},
{"content":{"body":"i don't think the current thing is more obvious","msgtype":"m.text","org.matrix.msc1767.text":"i don't think the current thing is more obvious"},"ts":1670891603610,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tdgsFotp6oLCcJWEHNEtWxJFH9SCqtC9o9Hn7cNed04"},
{"content":{"body":" * i don't think the current thing is more obvious","m.new_content":{"body":"i don't think the current thing is more obvious","msgtype":"m.text","org.matrix.msc1767.text":"i don't think the current thing is more obvious"},"m.relates_to":{"event_id":"$tdgsFotp6oLCcJWEHNEtWxJFH9SCqtC9o9Hn7cNed04","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i don't think the current thing is more obvious"},"ts":1670891605340,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P6cuN9Ow2ZaMEtut1k8qBljexCQLi4pC8dLc060T7jU"},
{"content":{"body":"or i'd have brought it up during plenary","msgtype":"m.text","org.matrix.msc1767.text":"or i'd have brought it up during plenary"},"ts":1670891610346,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JD3OEFULGNuHlimoa6_xzGbSREnEak4aic24_bV2Phg"},
{"content":{"body":"it literally took me implementing it to discover this confusing behavvior","msgtype":"m.text","org.matrix.msc1767.text":"it literally took me implementing it to discover this confusing behavvior"},"ts":1670891625711,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OgW_fUHXwebwK1V7W-OBIMzBijhfyfAF9Z2nid8ylH0"},
{"content":{"body":"you don't think it's more obvious than special-casing primitives?","msgtype":"m.text","org.matrix.msc1767.text":"you don't think it's more obvious than special-casing primitives?"},"ts":1670891641787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I6lFaAgSwRKywDDj4WqFdO1feNHlOxF_ybANvOqeaJ0"},
{"content":{"body":"I think it is definitely more obvious than that; we are unlikely to reconcile on that point","msgtype":"m.text","org.matrix.msc1767.text":"I think it is definitely more obvious than that; we are unlikely to reconcile on that point"},"ts":1670891651494,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$62Bv-UU5cadlq-oacQlL98fzSZbtphDG2pNdLjwXi6A"},
{"content":{"body":"i totally accept that it's a simpler thing to explain as-is","msgtype":"m.text","org.matrix.msc1767.text":"i totally accept that it's a simpler thing to explain as-is"},"ts":1670891664622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6sA2rfC4TO17bCulx3Qd7EMyRlIRR0z0DhoeOIGJrGM"},
{"content":{"body":"but that's not the same thing as which is more surprising and frustrating","msgtype":"m.text","org.matrix.msc1767.text":"but that's not the same thing as which is more surprising and frustrating"},"ts":1670891677773,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$19OqNeeR1jO-g3EoiIkNp4JpIFgTnnT7ewTz7szfPvg"},
{"content":{"body":"I think it's both less surprising and less frustrating as-is","msgtype":"m.text","org.matrix.msc1767.text":"I think it's both less surprising and less frustrating as-is"},"ts":1670891698763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$16865s9t-FxOOvhDxKV9QZISLxDeo41bCH82ml7Ng8s"},
{"content":{"body":"the only way you can run into the special case is if you return a primitive, and while I accept that you personally do that on purpose, I think that for a typical user that's going to be a bug which they would prefer to be notified of","msgtype":"m.text","org.matrix.msc1767.text":"the only way you can run into the special case is if you return a primitive, and while I accept that you personally do that on purpose, I think that for a typical user that's going to be a bug which they would prefer to be notified of"},"ts":1670891764757,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sVhi4xVYTAAKg4xNHcRVqkUsav6So5FXE0Wfdn07t6U"},
{"content":{"body":"moreover I think even the person who _does_ want the auto-boxing behavior is going to want to know as early as possible that their assumption about the behavior is wrong, and they will learn that faster if primitives are not special-cased","format":"org.matrix.custom.html","formatted_body":"moreover I think even the person who <em>does</em> want the auto-boxing behavior is going to want to know as early as possible that their assumption about the behavior is wrong, and they will learn that faster if primitives are not special-cased","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"moreover I think even the person who _does_ want the auto-boxing behavior is going to want to know as early as possible that their assumption about the behavior is wrong, and they will learn that faster if primitives are not special-cased","mimetype":"text/plain"},{"body":"moreover I think even the person who <em>does</em> want the auto-boxing behavior is going to want to know as early as possible that their assumption about the behavior is wrong, and they will learn that faster if primitives are not special-cased","mimetype":"text/html"}]},"ts":1670891767954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5M9stbVBdrEIdP7VLCM95zYAFLAEfVmhKeQCakUANP0"},
{"content":{"body":"> <@ljharb:matrix.org> yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable\n\nsorry, I was asking about the change ljharb was referencing here","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q01n0D_t4x0KXghSCKcEfCSUZxk0aVELnjZ59W3C-uE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable</blockquote></mx-reply>sorry, I was asking about the change ljharb was referencing here","m.relates_to":{"m.in_reply_to":{"event_id":"$Q01n0D_t4x0KXghSCKcEfCSUZxk0aVELnjZ59W3C-uE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable\n\nsorry, I was asking about the change ljharb was referencing here","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q01n0D_t4x0KXghSCKcEfCSUZxk0aVELnjZ59W3C-uE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes - but since the time that decision was made in 2019, iterator helpers now (in from i think) only treats Object iterables as iterable</blockquote></mx-reply>sorry, I was asking about the change ljharb was referencing here","mimetype":"text/html"}]},"ts":1670892087054,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hmaP5hYvZlqkcqCJRwro8BY62wpIFtNgA5PCqgtov5w"},
{"content":{"body":"littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/html"}]},"ts":1670892207994,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h-UA_wk5ScoPHOPmUS6JHk4l7AsdATBxXfEZcJPPxp0"},
{"content":{"body":" * littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","m.new_content":{"body":"littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$h-UA_wk5ScoPHOPmUS6JHk4l7AsdATBxXfEZcJPPxp0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * littledan: ah, specifically, `Iterator.prototype.flatMap` throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: ah, specifically, <code>Iterator.prototype.flatMap</code> throws if your mapper function returns a string, instead of spreading its code points","mimetype":"text/html"}]},"ts":1670892218206,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gk-1YahoHY-7zRMUViPxGirDa01rSORcXuFk55Ep_nA"},
{"content":{"body":"no one was particularly happy about this decision but it seems pragmatic","msgtype":"m.text","org.matrix.msc1767.text":"no one was particularly happy about this decision but it seems pragmatic"},"ts":1670892226597,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I-x7_X60MmCoO0ocGCF1nHfAd3CC4RzVtdsG3EM_7Uk"},
{"content":{"body":"oh, I thought ljharb was saying that there was some other decision made which would have some impact on that decision","msgtype":"m.text","org.matrix.msc1767.text":"oh, I thought ljharb was saying that there was some other decision made which would have some impact on that decision"},"ts":1670892231601,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fH149FTWhiSEyMveEAYjUivuwalWXEjwQUIRSoLbIV0"},
{"content":{"body":"and so the point 2 I referenced is no longer relevant","msgtype":"m.text","org.matrix.msc1767.text":"and so the point 2 I referenced is no longer relevant"},"ts":1670892244330,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zzz5Na9SBYdIv6hTVk4fTMxbZJ2Xp-RW1U_-SXcTPnM"},
{"content":{"body":"i'd be opposed to any argument that would make strings auto-spread, for the hopefully obvious reasons :-)","msgtype":"m.text","org.matrix.msc1767.text":"i'd be opposed to any argument that would make strings auto-spread, for the hopefully obvious reasons :-)"},"ts":1670892322605,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3G6LkupxF-U88zc3ViYgLbgvhaQZmPTFWQGTkr_hgiI"},
{"content":{"body":"as would I, but I was just having trouble understanding what you meant by that comment I quoted","msgtype":"m.text","org.matrix.msc1767.text":"as would I, but I was just having trouble understanding what you meant by that comment I quoted"},"ts":1670892349981,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZnwA_YtK1v3_1iBKbv_WYM4N_oMh1ibln2qEO4neYPo"},
{"content":{"body":"special-casing primitives seems weird--wouldn't it be natural to want pojos to have this sort of behavior as well?","msgtype":"m.text","org.matrix.msc1767.text":"special-casing primitives seems weird--wouldn't it be natural to want pojos to have this sort of behavior as well?"},"ts":1670892383183,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$O7jVW45PzOpLw3ic2qRnpUpcCfywfk6NzBYez0po91g"},
{"content":{"body":"from there, I'm kinda synpathetic to the argument that it'd be weird if *adding* an implementation of a protocol were a compat hazard","format":"org.matrix.custom.html","formatted_body":"from there, I'm kinda synpathetic to the argument that it'd be weird if <em>adding</em> an implementation of a protocol were a compat hazard","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"from there, I'm kinda synpathetic to the argument that it'd be weird if *adding* an implementation of a protocol were a compat hazard","mimetype":"text/plain"},{"body":"from there, I'm kinda synpathetic to the argument that it'd be weird if <em>adding</em> an implementation of a protocol were a compat hazard","mimetype":"text/html"}]},"ts":1670892429738,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gLX7pndjnvNeLnYe1nWzPOc3IV4bvhNVFKlLjxNFWf4"},
{"content":{"body":"my claim is that adding a *pre-existing* protocol to an object is a potential breaking change, since it could cause the object to travel a different code path than previously","format":"org.matrix.custom.html","formatted_body":"my claim is that adding a <em>pre-existing</em> protocol to an object is a potential breaking change, since it could cause the object to travel a different code path than previously","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"my claim is that adding a *pre-existing* protocol to an object is a potential breaking change, since it could cause the object to travel a different code path than previously","mimetype":"text/plain"},{"body":"my claim is that adding a <em>pre-existing</em> protocol to an object is a potential breaking change, since it could cause the object to travel a different code path than previously","mimetype":"text/html"}]},"ts":1670892566362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$12D5rASjUnejQDM92NCTnDnD6sUiP10DbXVvZSaZz2E"},
{"content":{"body":"(this is the same argument browsers used to say that it would not be web compatible to have a predicate that changed its response to an input over time, ftr)","msgtype":"m.text","org.matrix.msc1767.text":"(this is the same argument browsers used to say that it would not be web compatible to have a predicate that changed its response to an input over time, ftr)"},"ts":1670892611231,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tEvxAj8CDbB38LxnZJS5Pbwtaxyu76BmDLAALPT-Kmc"},
{"content":{"body":"it's true that it's a _potential_ breaking change, but by making `flatMap` auto-flatten we would radically increase the likelihood of it being breaking _in practice_","format":"org.matrix.custom.html","formatted_body":"it's true that it's a <em>potential</em> breaking change, but by making <code>flatMap</code> auto-flatten we would radically increase the likelihood of it being breaking <em>in practice</em>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's true that it's a _potential_ breaking change, but by making `flatMap` auto-flatten we would radically increase the likelihood of it being breaking _in practice_","mimetype":"text/plain"},{"body":"it's true that it's a <em>potential</em> breaking change, but by making <code>flatMap</code> auto-flatten we would radically increase the likelihood of it being breaking <em>in practice</em>","mimetype":"text/html"}]},"ts":1670892648823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t69UVexBAuCh84IMshK7mujq0lGFq9nXKNJ-mw-FH6Q"},
{"content":{"body":"in particular I strongly suspect it would have meant that Streams could never have been made iterable","msgtype":"m.text","org.matrix.msc1767.text":"in particular I strongly suspect it would have meant that Streams could never have been made iterable"},"ts":1670892665044,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kFiVLSIrQfZCuOnaxVlxYrZhC_JiJz6VGTlJwG9c8no"},
{"content":{"body":"(had things been sequenced in that order)","msgtype":"m.text","org.matrix.msc1767.text":"(had things been sequenced in that order)"},"ts":1670892722881,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nLjPmbE2HMtVcCZ7s-zckOCUUOAfh-ZZ45s_pbm36dk"}
]