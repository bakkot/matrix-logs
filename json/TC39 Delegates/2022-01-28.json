[
{"content":{"body":"> <@tabatkins:matrix.org> Do people remember the reasons why named argument syntax was rejected in JS? A la `foo(argname: 1, arg2name: 2)`?\n\nI don't remember why, it was dead before I ever started attending meetings. Either way, it's a non-starter now because...\n\n> The Syntactic Grammar must not be extended in any manner that allows the token : to immediately follow source text that is matched by the BindingIdentifier nonterminal symbol.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9T2eD1iQVUfu44n6arNO-SXFfceeU69z6sJe6j4sokc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Do people remember the reasons why named argument syntax was rejected in JS? A la <code>foo(argname: 1, arg2name: 2)</code>?</blockquote></mx-reply><p>I don't remember why, it was dead before I ever started attending meetings. Either way, it's a non-starter now because...</p>\n<blockquote>\n<p>The Syntactic Grammar must not be extended in any manner that allows the token : to immediately follow source text that is matched by the BindingIdentifier nonterminal symbol.</p>\n</blockquote>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$9T2eD1iQVUfu44n6arNO-SXFfceeU69z6sJe6j4sokc"}},"msgtype":"m.text"},"ts":1643332904281,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$HfDk8RrNaxVtKLbPv5avFfxvBj4ZgvNwUR3zck49eqU"},
{"content":{"body":"Mathieu Hofman: to your point ^^\n> I could see conflicts with type systems which also use :\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: to your point ^^</p>\n<blockquote>\n<p>I could see conflicts with type systems which also use :</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643332935585,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$7iXRzm1LPaZYCUMLFhSHVQF0PmjkxT39xPAtCEauHik"},
{"content":{"body":"That Forbidden Extension was written exactly for the case you mention","msgtype":"m.text"},"ts":1643333022756,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$Drgo9uqrhCcD4W_CAke0Kh0GyajV9Vab3YDAKquTuW8"},
{"content":{"body":"> <@rwaldron:matrix.org> I don't remember why, it was dead before I ever started attending meetings. Either way, it's a non-starter now because...\n> \n> > The Syntactic Grammar must not be extended in any manner that allows the token : to immediately follow source text that is matched by the BindingIdentifier nonterminal symbol.\n> \n\nHuh! I had not known this was a thing. When was it added? Is it specifically to accommodate future ES type-like annotation, or is it specifically for ES extensions like TypeScript and Flow…?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24HfDk8RrNaxVtKLbPv5avFfxvBj4ZgvNwUR3zck49eqU\">In reply to</a> <a href=\"https://matrix.to/#/@rwaldron:matrix.org\">@rwaldron:matrix.org</a><br><p>I don't remember why, it was dead before I ever started attending meetings. Either way, it's a non-starter now because...</p>\n<blockquote>\n<p>The Syntactic Grammar must not be extended in any manner that allows the token : to immediately follow source text that is matched by the BindingIdentifier nonterminal symbol.</p>\n</blockquote>\n</blockquote></mx-reply>Huh! I had not known this was a thing. When was it added? Is it specifically to accommodate future ES type-like annotation, or is it specifically for ES extensions like TypeScript and Flow…?","m.relates_to":{"m.in_reply_to":{"event_id":"$HfDk8RrNaxVtKLbPv5avFfxvBj4ZgvNwUR3zck49eqU"}},"msgtype":"m.text"},"ts":1643336314284,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ftQ-aQ9F3DB-CyJ_OOq9jWV1qZdgamZqdY2aySYZb0w"},
{"content":{"body":"strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax _without_ it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","format":"org.matrix.custom.html","formatted_body":"strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax <em>without</em> it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","msgtype":"m.text"},"ts":1643337765608,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YvptmfLDBciwzBlDCv_1USHBbs0ENDjQWZ1eDQuxU2A"},
{"content":{"body":" * strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax _without_ it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","format":"org.matrix.custom.html","formatted_body":" * strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax <em>without</em> it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","m.new_content":{"body":"strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax _without_ it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","format":"org.matrix.custom.html","formatted_body":"strictly speaking, forbidden extensions constrain implementations, not us. we could write this into the spec and then implementations could ship it and that would be kosher. the point (as I understand it) is to prevent stuff like happened in the earlier eras when browsers would ship new syntax <em>without</em> it being in the spec (like function declarations in blocks, for example), and then we'd be stuck with it forever","msgtype":"m.text"},"m.relates_to":{"event_id":"$YvptmfLDBciwzBlDCv_1USHBbs0ENDjQWZ1eDQuxU2A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643337776191,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$39GIw_P21gYLkUKjY_nfOY6DN-_YVdxCf1lrIHdc1Mw"},
{"content":{"body":"that said, we probably should not ship `param: x` unless it means roughly what it does in TS.","format":"org.matrix.custom.html","formatted_body":"that said, we probably should not ship <code>param: x</code> unless it means roughly what it does in TS.","msgtype":"m.text"},"ts":1643337822437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d8CDdDYiJMSQhPyRTMvwhAoGN_k1WhSrLlR-2Vb9hws"},
{"content":{"body":"Does TS have `param: x` at call sites? I thought it was only function definition","format":"org.matrix.custom.html","formatted_body":"Does TS have <code>param: x</code> at call sites? I thought it was only function definition","msgtype":"m.text"},"ts":1643338192592,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UGW0DTA20rnxPuYrI4Snd79T9qngGwwak3c_iR4nY_0"},
{"content":{"body":"yeah, true","msgtype":"m.text"},"ts":1643338305160,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dztXoQRjJ_oAoso5bzU1tLTOGNOTDT6VxPHYkyVH-VE"},
{"content":{"body":"wouldn't you need at definition too for named argument? I understand you may not need it for explicit receiver","msgtype":"m.text"},"ts":1643338444789,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2Huua6kbqFoKxgbBga-S80-4QEAa7J6mpzBiDb3bE7U"},
{"content":{"body":"(Btw, I actually like that TS unlike Flow has the ability to type the `this` in function declarations, I wish it was more thoroughly leveraged though) ","format":"org.matrix.custom.html","formatted_body":"(Btw, I actually like that TS unlike Flow has the ability to type the <code>this</code> in function declarations, I wish it was more thoroughly leveraged though)","msgtype":"m.text"},"ts":1643338509196,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ds03yApA3dBGZOadqJXb_vyiwu4kvBOY03Ei2Bpvg28"},
{"content":{"body":"re groupBy Justin Ridgewell we have another report involving the sugar.js library: https://github.com/webcompat/web-bugs/issues/98458","format":"org.matrix.custom.html","formatted_body":"re groupBy <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> we have another report involving the sugar.js library: https://github.com/webcompat/web-bugs/issues/98458","msgtype":"m.text"},"ts":1643365781770,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Om7BYLI3e2Zd1fmrfCEo0_biW-IEd3P2-6rrjDzTCCg"},
{"content":{"body":"> <@jschoi:matrix.org> Huh! I had not known this was a thing. When was it added? Is it specifically to accommodate future ES type-like annotation, or is it specifically for ES extensions like TypeScript and Flow…?\n\nSeptember 2014! Here's the meeting notes conclusion/resolution: https://github.com/tc39/notes/blob/8711614630f631cb51dfb803caa087bedfc051a3/meetings/2014-09/sept-25.md#conclusionresolution-2 and the topic starts here: https://github.com/tc39/notes/blob/8711614630f631cb51dfb803caa087bedfc051a3/meetings/2014-09/sept-25.md#types","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ftQ-aQ9F3DB-CyJ_OOq9jWV1qZdgamZqdY2aySYZb0w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Huh! I had not known this was a thing. When was it added? Is it specifically to accommodate future ES type-like annotation, or is it specifically for ES extensions like TypeScript and Flow…?</blockquote></mx-reply>September 2014! Here's the meeting notes conclusion/resolution: https://github.com/tc39/notes/blob/8711614630f631cb51dfb803caa087bedfc051a3/meetings/2014-09/sept-25.md#conclusionresolution-2 and the topic starts here: https://github.com/tc39/notes/blob/8711614630f631cb51dfb803caa087bedfc051a3/meetings/2014-09/sept-25.md#types","m.relates_to":{"m.in_reply_to":{"event_id":"$ftQ-aQ9F3DB-CyJ_OOq9jWV1qZdgamZqdY2aySYZb0w"}},"msgtype":"m.text"},"ts":1643380626010,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$lr1Za2YeLLbEb375dkUh-E-Jz9p5CgeIkHnDp3FRGYI"},
{"content":{"body":"> Reserve syntax used by TypeScript, Flow, etc. for some form of annotation\n\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Reserve syntax used by TypeScript, Flow, etc. for some form of annotation</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643380787982,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QEwHgF3KF454k-scw7bOWGH5DIe2u8deXD4urTx-G7M"},
{"content":{"body":"There it is, hmmm.","msgtype":"m.text"},"ts":1643380791133,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SC1kUuCBCm_HSDuKj9L1LuXKhN1kAa4Vr18SJ4BwOyA"}
]