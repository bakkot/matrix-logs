[
{"content":{"body":"Yup, the time zone situation in Lebanon is quite a mess at the moment: https://www.cnbc.com/2023/03/27/lebanon-in-two-different-time-zones-as-government-disagrees-on-daylight-savings.html","msgtype":"m.text"},"ts":1679964913241,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$5FupDE4Xn_XO01HDjChBABPcKaCsLMiJHvehSTTsHJg"},
{"content":{"body":"It amazes me how governments—repeatedly—make last-minute changes to DST and then are shocked, just shocked, about the tech turmoil that inevitably ensues. Brazil in 2019 stopped using DST with only 6 months' notice, and that was still a mess. Countries really should be giving 2-3 years' heads up to allow updating all the software that was playing by the old time zone rules. IoT and mobile devices are particularly challenging because they often require OS or firmware updates to get new time zone rules, and many device vendors' support budgets are skimpy.\n\nFWIW, `Temporal.ZonedDateTime`'s default behavior was designed to flag cases when parsing previously-stored data after time zone rules have unexpectedly changed. So a string like `2020-01-15T12:00:00-02:00[America/Sao_Paulo]` stores both the exact timestamp (what you'd store in a `Temporal.Instant`) as well as the time zone identifier America/Sao_Paulo. If you try to parse that string today (after we know about Brazil's stopping DST in 2019) using `Temporal.ZonedDateTime.from`  then you'll get a RangeError because there's a conflict between the offset -02:00 and the time zone ID America/Sao_Paulo.\n\nFor developers who know what behavior they want in cases like that, there's an `offset` option that can be used to choose how to resolve conflicts. https://tc39.es/proposal-temporal/docs/zoneddatetime.html#from https://tc39.es/proposal-temporal/docs/ambiguity.html#examples-offset-option\n\nThis won't help cases like Lebanon's which have minimal (or negative!) advance notice, but should help developers find and recover from changes like Brazil's where changes are announced a few months in advance: long enough for IANA Time Zone Database updates to be rolled out into ECMAScript implementations.\n\nThank you for coming to my TED talk. ⏰","format":"org.matrix.custom.html","formatted_body":"<p>It amazes me how governments—repeatedly—make last-minute changes to DST and then are shocked, just shocked, about the tech turmoil that inevitably ensues. Brazil in 2019 stopped using DST with only 6 months' notice, and that was still a mess. Countries really should be giving 2-3 years' heads up to allow updating all the software that was playing by the old time zone rules. IoT and mobile devices are particularly challenging because they often require OS or firmware updates to get new time zone rules, and many device vendors' support budgets are skimpy.</p>\n<p>FWIW, <code>Temporal.ZonedDateTime</code>'s default behavior was designed to flag cases when parsing previously-stored data after time zone rules have unexpectedly changed. So a string like <code>2020-01-15T12:00:00-02:00[America/Sao_Paulo]</code> stores both the exact timestamp (what you'd store in a <code>Temporal.Instant</code>) as well as the time zone identifier America/Sao_Paulo. If you try to parse that string today (after we know about Brazil's stopping DST in 2019) using <code>Temporal.ZonedDateTime.from</code>  then you'll get a RangeError because there's a conflict between the offset -02:00 and the time zone ID America/Sao_Paulo.</p>\n<p>For developers who know what behavior they want in cases like that, there's an <code>offset</code> option that can be used to choose how to resolve conflicts. https://tc39.es/proposal-temporal/docs/zoneddatetime.html#from https://tc39.es/proposal-temporal/docs/ambiguity.html#examples-offset-option</p>\n<p>This won't help cases like Lebanon's which have minimal (or negative!) advance notice, but should help developers find and recover from changes like Brazil's where changes are announced a few months in advance: long enough for IANA Time Zone Database updates to be rolled out into ECMAScript implementations.</p>\n<p>Thank you for coming to my TED talk. ⏰</p>\n","msgtype":"m.text"},"ts":1679968245928,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$faqRImemgF1x1bY-iZxeeoZa3v2xt2hmgLllEheKqkw"}
]