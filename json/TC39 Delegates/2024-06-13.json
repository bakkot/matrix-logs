[
{"content":{"body":" * this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":" * this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"m.new_content":{"body":"this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":"this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mhXtOVM1r3YeOdeQRml9pXC6TQQfpMbBWpBmMMfahmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718258332176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qqcf2mskIMEjgC8AJnsqPHWDGAnbSAa9K-azBY3Fls0"},
{"content":{"body":"global was in a known web-incompatible state with no changes publicly proposed over the course of a year, so I think that's different. We don't have particular known issues for Temporal, and definitely not with respect to web compatibility.","m.mentions":{},"msgtype":"m.text"},"ts":1718262042938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J6q9vyQNfSl9ODcn_Zlx8ha1V35XHWxLRua6n71_7ko"},
{"content":{"body":"(or did I say something about what should happen after the new name was proposed? I don't remember making that suggestion at that time.)","m.mentions":{},"msgtype":"m.text"},"ts":1718262127261,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8E5uZh4iqUd2bmquVCXR6sJXvCgL6iMM4wo_G2OMtDM"},
{"content":{"body":"very true that there's no web compat concern; it's not exactly the same","m.mentions":{},"msgtype":"m.text"},"ts":1718262136427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e__WvIG7Htdj2Ib2GFcFfi1mAhBem79p4GLERaGhlnU"},
{"content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to chnage","m.mentions":{},"msgtype":"m.text"},"ts":1718262169057,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY"},
{"content":{"body":" * but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"m.new_content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262171214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n5lvm_pYIxYzmmP05HyxsXn6sPEYuwlRFp5Cp8fqnyU"},
{"content":{"body":"right, so that's a case of a change that needs to happen for something to be shippable, whereas we're not aware of changes that need to happen for Temporal for it to be shippable","m.mentions":{},"msgtype":"m.text"},"ts":1718262210814,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NnI4b5TCYnFNL0v9x8k-CBjEtuC0His5lL95S894CfM"},
{"content":{"body":"wasn't that the entire agenda item? it was too big to be shippable.","m.mentions":{},"msgtype":"m.text"},"ts":1718262230631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OnpQhwVPQI60myq9mvXYzKs8TUA5eVAwkILBJ9fWO8E"},
{"content":{"body":"and we addressed it, we hope (modulo implementer feedback, which makes sense to seek during Stage 3)","m.mentions":{},"msgtype":"m.text"},"ts":1718262271002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F34D2kU65vCCMhtSMtU__Jek3y-2LV8Oh_c6izNcI0A"},
{"content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"ts":1718262320826,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc"},
{"content":{"body":" * right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"m.new_content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262374856,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SXNizrvosx6GqPBw8ak5_WSrjRsT7cdEj5jjnCAZtkw"},
{"content":{"body":"\"once shy\"? ","m.mentions":{},"msgtype":"m.text"},"ts":1718262415454,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$U5Z9vBJxpCUCsa6c9TKeQmsw5cCrpQq_2zfxujc_ZhI"},
{"content":{"body":"lol i was trying to paraphrase \"once bitten twice shy\", i've been up for nearly 20 hours so it might not make sense","m.mentions":{},"msgtype":"m.text"},"ts":1718262444741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kRJNmTXWV2JQhj9Jnsx7Pm9NvexXM2eW2kLJIwKw88w"},
{"content":{"body":"once bitten, twice shy\nidiom\n—used to mean that a person who has failed or been hurt when trying to do something is careful or fearful about doing it again","m.mentions":{},"msgtype":"m.text"},"ts":1718262450694,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1YBC0xNSjfteAItSsADbcuwoA-bf-IIEkmSBVMUC1ag"},
{"content":{"body":"if the corrective action suggested here is to more liberally request consensus to regress proposals when it seems they should be regressed, that seems reasonable to me","m.mentions":{},"msgtype":"m.text"},"ts":1718262530414,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3eQ4MtZLtlWqXj52HiBfYNYs-oRZQDFDilfv1CDVAOs"},
{"content":{"body":"exactly that. which is something we've discussed multiple times in recent years, like with import attributes for example","m.mentions":{},"msgtype":"m.text"},"ts":1718262558245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hdVYaCaPl1YOAPNyCKXFOtnCh3nxRqwAMIfXO1Q1pnc"},
{"content":{"body":"(to pretty consistently positive response, iirc)","m.mentions":{},"msgtype":"m.text"},"ts":1718262575791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r4Qtmgbh0DHLlDSBE3S_wN1kYD0wnGd5BcjhtCDl2Pg"},
{"content":{"body":"so, for import attributes, it was retracted because a change was in progress, which is more similar to the globalThis case.","m.mentions":{},"msgtype":"m.text"},"ts":1718262600841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ow9myXWNEFSNcCjjbGQicJt5r8D380x9Pr83_lvjcaY"},
{"content":{"body":"the concept of a \"scoped demotion\" helped make that palatable, i think","m.mentions":{},"msgtype":"m.text"},"ts":1718262604201,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10rH1Ms5FmstUi1271hmrvMEs_Re8PeMSosCkNyRMho"},
{"content":{"body":"I wonder if the proposed action would have been \"lets split the proposal in two and bring this part back to stage 2\", rather than \"lets remove this part\", the stability impression would have been different","m.mentions":{},"msgtype":"m.text"},"ts":1718262607683,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M5zvbLLNPooNtzIzLBOMRmaKuLquhwiBLd2tMSmjMxY"},
{"content":{"body":"it was unfortunate that we didn't permit ourselves a scoped demotion. I think the committee agreed to the demotion partly because the strongly opinionated people agreed to scoping, even if the committee as a whole wasn't going to commit to scoping.","m.mentions":{},"msgtype":"m.text"},"ts":1718262662233,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XmgsL3olb5J1XPcOuwCCXMjc5pDIcPxc32X-Y2_cPG8"},
{"content":{"body":"or alternatively, at this point we could move it back to ~2 with a scope of \"no design changes, only implementation-driven ones\" - which sounds like stage 3, but, because of the scale of Temporal might be worthy of some flexibility","m.mentions":{},"msgtype":"m.text"},"ts":1718262662481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jFSLrFXRAHey9V6lNAUAbJElIITznXHFKlLfRY6gHfw"},
{"content":{"body":"but there's no design changes proposed here, so I'm not sure what the criteria would be later for re-promotion","m.mentions":{},"msgtype":"m.text"},"ts":1718262682532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pYMTdsgWe_AiW21tOq_fSbEgWQXYo30_qU7PUkrYSmg"},
{"content":{"body":"dropping calendar and timezone were pretty massive design changes","m.mentions":{},"msgtype":"m.text"},"ts":1718262695660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GACb9ubE_DEtd78G0ZgPZ4qhRd2ZEVhlejj5jyqpdyg"},
{"content":{"body":"right, but we don't have any *further* changes proposed","format":"org.matrix.custom.html","formatted_body":"right, but we don't have any <em>further</em> changes proposed","m.mentions":{},"msgtype":"m.text"},"ts":1718262707310,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VJUBDPjIsw8YqIbAcF4KmhV69fzaammVtrUynuhLsqQ"},
{"content":{"body":"oh sure. that's been the case after every plenary tho, until the next one","m.mentions":{},"msgtype":"m.text"},"ts":1718262718998,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ub6wCQS_8jtyBCYXIHB3RjdDAD9O-5L6SE-GfkFM15w"},
{"content":{"body":"when import attributes were re-promoted, there was the idea raised, \"even though we agree on these changes, should we wait longer to let things settle?\" we decided no wait was needed, and that turned out just fine.","m.mentions":{},"msgtype":"m.text"},"ts":1718262743873,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mMYM12lKpeLXJRiYJRgPRWZU1i9ziWj9zdwyAJkq15E"},
{"content":{"body":"since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)","m.mentions":{},"msgtype":"m.text"},"ts":1718262777858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"},
{"content":{"body":"but if more changes come back in july, i think we should seriously consider demoting it until changes stop coming","m.mentions":{},"msgtype":"m.text"},"ts":1718262797118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4FEJUNJxGYAcfcklY-omz8r-MWdMNmu6Tb1sgmVPgmo"},
{"content":{"body":"> <@ljharb:matrix.org> since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)\n\nwe could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>since we won&#39;t have time to discuss temporal&#39;s stage this meeting, i guess we&#39;ll see either way :-)</blockquote></mx-reply>we could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"}},"msgtype":"m.text"},"ts":1718262806073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f-BoP5gvp3pdfZUOWdX9y9oeOopb8ZKQGTJDvuIGZTs"},
{"content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that","m.mentions":{},"msgtype":"m.text"},"ts":1718262828308,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU"},
{"content":{"body":"ah OK good to know","m.mentions":{},"msgtype":"m.text"},"ts":1718262835245,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KHK46wj1nxxtogmbpWfE44PyGsvPYzbMtC-YZ8Ubp0"},
{"content":{"body":" * perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"m.new_content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262847289,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_OFvTMvFwjCDjtffFp6mh9QUh3So0IwXrVRGm9mdE6c"},
{"content":{"body":"my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"ts":1718262887651,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA"},
{"content":{"body":" * (presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"m.new_content":{"body":"(presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262949453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QieKWPreXO4dZymafnGVMuMkTIEzFXKZM9ikpmq5Wco"},
{"content":{"body":"I think we've made the points back and forth here; I'm not sure what more we should discuss","m.mentions":{},"msgtype":"m.text"},"ts":1718262992690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IF835DU1ZAf9WLsp2eIHoBbQrdKKrAtyrIbYwVmqvvI"},
{"content":{"body":"it'd only be worth discussing if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"ts":1718263045873,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0"},
{"content":{"body":" * it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"m.new_content":{"body":"it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718263052176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P65Tib7AyjTMDTTyhdhZfSmsO_bpdbs13fFJjJ4etR8"},
{"content":{"body":"maybe I wasn't clear?","msgtype":"m.text"},"ts":1718264211934,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OaCiVRelAbSV11sWK-96uX36KaUrb-UwtuOW8ry5TQE"},
{"content":{"body":"the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective","msgtype":"m.text"},"ts":1718264251018,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"},
{"content":{"body":"I understood \"High level APIs and Syntax\" to mean the rough design we want to proceed with. We've never been so strict for stage 2.","m.mentions":{},"msgtype":"m.text"},"ts":1718264275727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VW5764aRYQzI3BJisD1IbWYJsswioZRqsuRUs2RXffc"},
{"content":{"body":"\"Placeholders and TODOs are acceptable\"","m.mentions":{},"msgtype":"m.text"},"ts":1718264288224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U5R3I0CiKmxaij_ovdNqX_GG6GmQ9x4-23dA9BrUcjU"},
{"content":{"body":"The description in the Purpose column describes the kinds of things Waldemar is discussing","m.mentions":{},"msgtype":"m.text"},"ts":1718264338249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oAQWw-dWMNvRVS1xbLjbSUXIXHTdTnMAvbZyJjZr3yQ"},
{"content":{"body":"there have been proposals entering stage 2 with entire methods stubbed out","m.mentions":{},"msgtype":"m.text"},"ts":1718264350586,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LB53UL5xiStugHvuCasdHBb3HcE5kou7x1f5D_faoU4"},
{"content":{"body":"re Shane's topic: I think we *do* approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","format":"org.matrix.custom.html","formatted_body":"re Shane's topic: I think we <em>do</em> approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","m.mentions":{},"msgtype":"m.text"},"ts":1718264390957,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mv02aKNYoErRWcSNzYlUVGQwdCyIQXIGvq8U8Q18kxU"},
{"content":{"body":"@littledan:matrix.org even stage 4 is advanced on conceptual agreements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> even stage 4 is advanced on conceptual agreements","msgtype":"m.text"},"ts":1718264447295,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ukSv46UgsbKk79Os4AFHJltW21VKyCDTWON8XyJ4MHM"},
{"content":{"body":"> <@michaelficarra:matrix.org> the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective\n\nagree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered &quot;major&quot;, which is subjective</blockquote></mx-reply>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"}},"msgtype":"m.text"},"ts":1718264485501,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"},
{"content":{"body":"the editor group often finds things *in the 262 spec document* that don't align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","format":"org.matrix.custom.html","formatted_body":"the editor group often finds things <i data-md=\"*\">in the 262 spec document</i> that don&#39;t align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","msgtype":"m.text"},"ts":1718264488869,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jB6POXAyDryp0WofCxO4kUhNLqDuyUcK19NtHD6_vLA"},
{"content":{"body":"part of the editor's job responsibilities is going back through consensus (written and in our memory) to confirm that the document aligns with it","msgtype":"m.text"},"ts":1718264563484,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1726qo7xak2tbnv34SE6UVSYubeCb1tg1ToClw3aJ-k"},
{"content":{"body":"Purpose of Stage 2:\n\n- Refining the solution.\n- Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.\n- Receive and address spec text reviews from the assigned reviewers and the appropriate editor group\n- Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details\n- Investigate integration with relevant host APIs, if necessary","format":"org.matrix.custom.html","formatted_body":"<p>Purpose of Stage 2:</p>\n<ul>\n<li>Refining the solution.</li>\n<li>Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.</li>\n<li>Receive and address spec text reviews from the assigned reviewers and the appropriate editor group</li>\n<li>Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details</li>\n<li>Investigate integration with relevant host APIs, if necessary</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264584866,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$worYq05EbVIIj7Z7SFgBcVDROA6l8JdQPFt-cy9SK8c"},
{"content":{"body":"If we agree this is the right direction to go for Decimal, then Stage 2 seems perfectly reasonable. It means we've committed to that direction and now we want to flesh out the details. ","m.mentions":{},"msgtype":"m.text"},"ts":1718264754534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6zYR3kNNti_hDJWvhmmR9eTz5CrH8XfK0BU6tlnipc"},
{"content":{"body":"more greatest hits from the process doc, re: stage 2 status\n\n> The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.","format":"org.matrix.custom.html","formatted_body":"<p>more greatest hits from the process doc, re: stage 2 status</p>\n<blockquote>\n<p>The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264980321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nHyWwV_YRVYQ83INxaZ-tOZIPlAzWTeJZDF5oHRxSwc"},
{"content":{"body":"If we overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"ts":1718265030324,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE"},
{"content":{"body":" * If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"m.new_content":{"body":"If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265046338,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-jldvJqeEOw6b7JqUcUkiLwM55g7Qz98O38Rrl3ygNc"},
{"content":{"body":"The DurationForrmat update is not going to even come close to filling its timebox, so that clears up time this afternoon","m.mentions":{},"msgtype":"m.text"},"ts":1718265058400,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$U8tIKHjA5_Yz13BaXXt2btxfDxYy1tkPLr2DQbXVgCk"},
{"content":{"body":"(I've reached out to Ujjwal about this)","m.mentions":{},"msgtype":"m.text"},"ts":1718265071718,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$7CumuqbEFYO0Ml6zzwPJBMlwY5ivG4e-ffsSE8UGo_Y"},
{"content":{"body":"Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1718265082163,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"},
{"content":{"body":"I'd like us to not over-rotate on API design based on the temporal experience","m.mentions":{},"msgtype":"m.text"},"ts":1718265219895,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$jKEOc_VOWpmScoOzfCdnA46tOlfqoqU8mJHcmDU8t5E"},
{"content":{"body":"Chrome is working on shipping the web neural network API, that has all the comparisons :)","m.mentions":{},"msgtype":"m.text"},"ts":1718265277853,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ce6vBqeN8x2tu228DL7a1dn0KwKmSNpdboQAfGL5CWc"},
{"content":{"body":"(just to put feedback on Chrome's code size into perspective)","m.mentions":{},"msgtype":"m.text"},"ts":1718265319636,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bbxXYs2aCwEVBHv_wZ-mkEJzfASVKN-MvAHqlfwpPiw"},
{"content":{"body":"If we don't provide an equals method, users will test for = and ≠ via compare(…) == 0 and compare(…) != 0 respectively. This produces incorrect results.","m.mentions":{},"msgtype":"m.text"},"ts":1718265350568,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$pKMw-SnoefeEmNVv-UeHJeV6Osidk7YxJyF0gi2Yv0U"},
{"content":{"body":"Stage 1 is scouting the terrain and coming up with a battle plan.\nStage 2 is starting the long march to battle and preparing fortifications.\nStage 2.7 is checking your gear before the battle starts.\nStage 3 is when you see how much of your plan survives contact with the enemy.\nStage 4 is the parade.","m.mentions":{},"msgtype":"m.text"},"ts":1718265361825,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rXp5R_mpCSPQH6TuhUyNbTwbiXYnKOkB39SHob-FPdA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.\n\nAh right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.</blockquote></mx-reply>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"}},"msgtype":"m.text"},"ts":1718265361878,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"},
{"content":{"body":"> <@aardvark179:matrix.org> Ah right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.\n\nThe .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.</blockquote></mx-reply>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"}},"msgtype":"m.text"},"ts":1718265417827,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"},
{"content":{"body":"Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible","m.mentions":{},"msgtype":"m.text"},"ts":1718265529952,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"},
{"content":{"body":"facts?","m.mentions":{},"msgtype":"m.text"},"ts":1718265540321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$i2No75-l7tTopw24KjWwhdUeDd6KMyEXjdOGLWYS_sY"},
{"content":{"body":"that is browsers' position as i understand it, yes","m.mentions":{},"msgtype":"m.text"},"ts":1718265557058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0cRO41_CPNnuIYh2i1LLumqgOPw398OJ3d73M1JOTzc"},
{"content":{"body":"(which impacts both R&T and Decimal)","m.mentions":{},"msgtype":"m.text"},"ts":1718265576293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2eevLidmRhbIBO6VUx4LUFGfz10N0iBZBZHEucqvqoA"},
{"content":{"body":"I understand browsers position as \"a primitive only makes sense if we see proof that it's actually going to be widely used\", and I hope that decimal objects getting adoption will fulfill that","m.mentions":{},"msgtype":"m.text"},"ts":1718265611509,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Yo7c8giBSx3tn229vOArb9vgX5aY6T0LKCWS5rKNcAQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nYeah seems consistent, and maps reasonably to IEEE spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>Yeah seems consistent, and maps reasonably to IEEE spec.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265619888,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ve5OD3e_oKNHH9m4zlRVGu2WbA33wtPUGdJLjGhC8pk"},
{"content":{"body":"I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.","m.mentions":{},"msgtype":"m.text"},"ts":1718265668371,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"},
{"content":{"body":"it can be proved out, though, without being in the spec - that's what npm is for","m.mentions":{},"msgtype":"m.text"},"ts":1718265690394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rj-lspRC3MZHGFQcn1l2ODm3IyYhtmmOddZ6MqqyVoc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nthis would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>this would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265692103,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},
{"content":{"body":"> <@robpalme:matrix.org> I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.\n\nprecedent?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.</blockquote></mx-reply>precedent?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"}},"msgtype":"m.text"},"ts":1718265713283,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$oESqBvnailVC2U5ATpFjJlz8NVFZFIeXYCIVVktqPCE"},
{"content":{"body":"this constraint on primitives is pretty new so i'm not sure there is any precedent","m.mentions":{},"msgtype":"m.text"},"ts":1718265730542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2EMs0C8I9G2HrQCO9RJlM937xRxypo5iONGlokxTho8"},
{"content":{"body":"Ugh, that's annoying. In wonder wether we could extend the definition of consistent comparators to include \"some values can consistently not be compared with any other value\"","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265793461,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},
{"content":{"body":"it would be nice to hear from vendors if that sort of signal would be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"ts":1718265824863,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k"},
{"content":{"body":"Because, NaN returned from .compare happens if and only if one of the arguments is a NaN","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265833303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},
{"content":{"body":"I would have to check if implementations in practice are already doing it","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265853943,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},
{"content":{"body":"very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&via=mozilla.org&via=igalia.com\n> you can get consistent sorting like `newPages.sort( ( a, b ) => (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )`, but I don't think there's any way to avoid some kind of surrogate value","format":"org.matrix.custom.html","formatted_body":"<p>very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com</p>\n<blockquote>\n<p>you can get consistent sorting like <code>newPages.sort( ( a, b ) =&gt; (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )</code>, but I don't think there's any way to avoid some kind of surrogate value</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265866280,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},
{"content":{"body":"Infiniti - Infinity is NaN, right?","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265884322,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},
{"content":{"body":" * Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":" * Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.new_content":{"body":"Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":"Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265889147,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Y-JAuUqrdoD_GOOyPFn7etFMCUR16gSOoXre4dL7rss"},
{"content":{"body":"right","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265896256,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},
{"content":{"body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"m.new_content":{"body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265903815,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$FrmbJZKNSHJR3ShUufVsfS4zzcfhQvjkgH5-qUfv8cs"},
{"content":{"body":"Yes","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265913245,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},
{"content":{"body":"which is treated as zero, i.e. same-sign infinities are not differentiated by that kind of sorting","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265957539,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},
{"content":{"body":"> <@softwarechris:matrix.org> agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2\n\nThat's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2</blockquote></mx-reply>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","m.mentions":{"user_ids":["@softwarechris:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"}},"msgtype":"m.text"},"ts":1718265991319,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"},
{"content":{"body":"> <@softwarechris:matrix.org> Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible\n\nI meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>Eemeli&#39;s comment makes it sound like it&#39;s a foregone conclusion that a new primitive is not possible</blockquote></mx-reply>I meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"}},"msgtype":"m.text"},"ts":1718265995731,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$zn772S3slvmXgrfUrosRdgIT8uJmaGYs9PKC1fMT334"},
{"content":{"body":"So the JVM's position on this is\n> Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (<, <=, ==, >=, >) on double values.\nA NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).\nPositive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).\nThis ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.","format":"org.matrix.custom.html","formatted_body":"<p>So the JVM's position on this is</p>\n<blockquote>\n<p>Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (&lt;, &lt;=, ==, &gt;=, &gt;) on double values.<br>A NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).<br>Positive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).<br>This ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266065433,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},
{"content":{"body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in `Array.prototype.sort()` implementations.","format":"org.matrix.custom.html","formatted_body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in <code>Array.prototype.sort()</code> implementations.","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266167837,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$cuVJHd_Y1XbytyE6rHi65iTRh5JpNABBNJGmjxoVwgQ"},
{"content":{"body":"> <@waldemarh:matrix.org> That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.\n\nyou're right -- and the purpose of the discussion was to clarify","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.</blockquote></mx-reply>you're right -- and the purpose of the discussion was to clarify","m.mentions":{"user_ids":["@waldemarh:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"}},"msgtype":"m.text"},"ts":1718266197950,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KlyLGWQ_8g6pblT55Oyzf5TJw5lMXDxQSmQArESeuos"},
{"content":{"body":"The spec is not even in a good enough state for Shane to be able to read and understand it.","m.mentions":{},"msgtype":"m.text"},"ts":1718266234362,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$ODK01oln1WG9HmT0LXpXhVZnZuwbau5t0d2WifkBY4s"},
{"content":{"body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write `new Decimal()` for now while `Decimal()` and `Decimal.prototype.valueOf()` throw, and later we add decimal primitives treating `new Decimal` as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","format":"org.matrix.custom.html","formatted_body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write <code>new Decimal()</code> for now while <code>Decimal()</code> and <code>Decimal.prototype.valueOf()</code> throw, and later we add decimal primitives treating <code>new Decimal</code> as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","m.mentions":{},"msgtype":"m.text"},"ts":1718266247536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CSzCWEpg4CnwWuzAS7uLzbV5oEDp_wdMs2Pzfb7WLVg"},
{"content":{"body":"waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1718266298461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"},
{"content":{"body":"> <@littledan:matrix.org> waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?\n\nThat's fine by me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?</blockquote></mx-reply>That's fine by me.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"}},"msgtype":"m.text"},"ts":1718266313038,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"},
{"content":{"body":"I *want* this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","format":"org.matrix.custom.html","formatted_body":"I <em>want</em> this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","m.mentions":{},"msgtype":"m.text"},"ts":1718266365150,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VdMfok7gQvcvxSFH3VVPmUdku5BDakjuH-n82-1IpTw"},
{"content":{"body":"> <@waldemarh:matrix.org> That's fine by me.\n\nsffc: ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's fine by me.</blockquote></mx-reply><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: ?","m.mentions":{"user_ids":["@waldemarh:matrix.org","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"}},"msgtype":"m.text"},"ts":1718266371092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wGyPDzje7DpqlmMKrcPH_fiXtZKbFuUPXDdwu14iRp0"},
{"content":{"body":"I'm not convinced by the argument that Decimal is the answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"ts":1718266409545,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8"},
{"content":{"body":" * I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":" * I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"m.new_content":{"body":"I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":"I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266422280,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jMZ2H16RM-hlkO-8dqNQjzY-b1uHcDXuotnQZyoeNoI"},
{"content":{"body":"I think the existing libraries have tons of downloads, but maybe that is partly because of people depending on them when they don't really need them","m.mentions":{},"msgtype":"m.text"},"ts":1718266485491,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3TjEXWRwf_fTuUkzviRWiczsX5Xr_jkwKGdIaTS_yvo"},
{"content":{"body":"About the diff with Decimal128 and Temporal, I think it's how people expect. For Decimal128 in non-primitive form, people will say: WTF! For Temporal, people will say: ok, it at least much much better than Date!","m.mentions":{},"msgtype":"m.text"},"ts":1718266508559,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6YOJSA9-cSgW1slxVRtfJaFz3McJu9tOG9LfNZkS3AQ"},
{"content":{"body":"`13,603,794` weekly downloads is tons or no?","format":"org.matrix.custom.html","formatted_body":"<code>13,603,794</code> weekly downloads is tons or no?","m.mentions":{},"msgtype":"m.text"},"ts":1718266526336,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nuzd9e8JOcTqjyqLD-2PkB6q2-fNfHyHKXfSvdG-EWc"},
{"content":{"body":"looking around on npm, i do see https://www.npmjs.com/package/bignumber.js which has 11m downloads, which is a pretty decent number","m.mentions":{},"msgtype":"m.text"},"ts":1718266539403,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cNzUzOZ_gemOwknOdjgtMmYFvFotzkveDbUJZ_RjGCg"},
{"content":{"body":"https://www.npmjs.com/package/decimal.js, https://www.npmjs.com/package/big.js, https://www.npmjs.com/package/bignumber.js","m.mentions":{},"msgtype":"m.text"},"ts":1718266542994,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$GVVDaGtbCg-Femn8cbXhIea-_TnyxESXu1r5iH0s1NE"},
{"content":{"body":"The spec intelligibility issues are not egregious enough to get in the way of Stage 2 for me; I think the committee sending a positive signal by promoting to Stage 2 is more important at this point in time","m.mentions":{},"msgtype":"m.text"},"ts":1718266546636,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$O2RH3iUJIfoyBd_y3Q_BEU-ojLlu9fplk2xq6bfzRJw"},
{"content":{"body":"50mil","m.mentions":{},"msgtype":"m.text"},"ts":1718266546735,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$Y2iYjDhYmD2Z6Yxs53WFwaCqx1AFRMBOFijl5MaywGc"},
{"content":{"body":"and indeed decimal.js has 17 million","m.mentions":{},"msgtype":"m.text"},"ts":1718266560499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-mVvylkAKEBpdjxkQSian1wvdVicob5TobaJGaN9FgM"},
{"content":{"body":"so that's a great indicator, thank you. (i'd still want the proposal readme to have a list ofc)","m.mentions":{},"msgtype":"m.text"},"ts":1718266586026,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-RueSwzCw4jlqH7dkVYCvXizYnX8ZFv13WIaU6-78h8"},
{"content":{"body":"the polyfill is not being developed in a way where it intends to compete with other decimal libraries","m.mentions":{},"msgtype":"m.text"},"ts":1718266600452,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"},
{"content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me","m.mentions":{},"msgtype":"m.text"},"ts":1718266645771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg"},
{"content":{"body":"> <@littledan:matrix.org> the polyfill is not being developed in a way where it intends to compete with other decimal libraries\n\ncan you elaborate this? this seems like a statement that needs more explanation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the polyfill is not being developed in a way where it intends to compete with other decimal libraries</blockquote></mx-reply>can you elaborate this? this seems like a statement that needs more explanation","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"}},"msgtype":"m.text"},"ts":1718266646543,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AO7cm-7q99t8j6YaLuNwIDMwTmvAuQjV-d-m_LwTQ0w"},
{"content":{"body":" * oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"m.new_content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266662083,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LL6d7cvnBAlnBDiimfMHdmSkZusU5UZZAi04ai2I2lI"},
{"content":{"body":"might need to invite `MikeMcl` to the chat at some point","format":"org.matrix.custom.html","formatted_body":"might need to invite <code>MikeMcl</code> to the chat at some point","m.mentions":{},"msgtype":"m.text"},"ts":1718266666261,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$B_k9X0gLyoA21zOG4ocJUI2w4fqtCayol0il5vsW4OQ"},
{"content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation","m.mentions":{},"msgtype":"m.text"},"ts":1718266679598,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw"},
{"content":{"body":"Same for temporal for example","m.mentions":{},"msgtype":"m.text"},"ts":1718266685306,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gdvxa7S6xoW25xgp5VQ96E_YMXCBB_0-3OZclHlMBiA"},
{"content":{"body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.new_content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266700847,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_CNBNNJJOKWTC8D7ZainKEJAi9xkBFKhKt9S2Mw6JMo"},
{"content":{"body":"Lets just add a single new primitive type that covers flexible user-defined data types and operator overloading and just base all other new primitives on that. ","m.mentions":{},"msgtype":"m.text"},"ts":1718266703084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},
{"content":{"body":"Let's call this primitive \"object\" :)","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266722909,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},
{"content":{"body":"oh i misread polyfill as spec 🤦‍♂️","m.mentions":{},"msgtype":"m.text"},"ts":1718266726210,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fGBlPQDHGkfGqCChEfiNds3wR_XmUP-Ch7utnpqtKxE"},
{"content":{"body":"i read \"this spec is not being developed in a way where it intends to compete with other decimal libraries\"","m.mentions":{},"msgtype":"m.text"},"ts":1718266765099,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$66lKsT8XaXKgpsQrb4miZ0zf59AyFVoR3QSl4WC--IY"},
{"content":{"body":"Honestly, this was one of the things I wanted to do with my version of the `struct` proposal prior to Shu's version.","format":"org.matrix.custom.html","formatted_body":"Honestly, this was one of the things I wanted to do with my version of the <code>struct</code> proposal prior to Shu's version.","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266773730,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},
{"content":{"body":"So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It's tempting, but it has real downsides.","m.mentions":{},"msgtype":"m.text"},"ts":1718266777441,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0"},
{"content":{"body":"I would have just called the primitive `\"value\"` ","format":"org.matrix.custom.html","formatted_body":"I would have just called the primitive <code>\"value\"</code>","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266787588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qyjGZuzymo7cYWvhXdWXdCht9iEPy9-hf7ZFgd-Z8rQ"},
{"content":{"body":"\"tempting but has real downsides\" is an understatement in my experience on both parts","m.mentions":{},"msgtype":"m.text"},"ts":1718266807929,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WNRf4G111KY6XVZp0vjulb-r71Ud8Gqa-1x0AUYU5SQ"}
]