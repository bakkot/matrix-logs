[
{"content":{"body":" * this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":" * this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"m.new_content":{"body":"this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":"this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mhXtOVM1r3YeOdeQRml9pXC6TQQfpMbBWpBmMMfahmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718258332176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qqcf2mskIMEjgC8AJnsqPHWDGAnbSAa9K-azBY3Fls0"},
{"content":{"body":"global was in a known web-incompatible state with no changes publicly proposed over the course of a year, so I think that's different. We don't have particular known issues for Temporal, and definitely not with respect to web compatibility.","m.mentions":{},"msgtype":"m.text"},"ts":1718262042938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J6q9vyQNfSl9ODcn_Zlx8ha1V35XHWxLRua6n71_7ko"},
{"content":{"body":"(or did I say something about what should happen after the new name was proposed? I don't remember making that suggestion at that time.)","m.mentions":{},"msgtype":"m.text"},"ts":1718262127261,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8E5uZh4iqUd2bmquVCXR6sJXvCgL6iMM4wo_G2OMtDM"},
{"content":{"body":"very true that there's no web compat concern; it's not exactly the same","m.mentions":{},"msgtype":"m.text"},"ts":1718262136427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e__WvIG7Htdj2Ib2GFcFfi1mAhBem79p4GLERaGhlnU"},
{"content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to chnage","m.mentions":{},"msgtype":"m.text"},"ts":1718262169057,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY"},
{"content":{"body":" * but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"m.new_content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262171214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n5lvm_pYIxYzmmP05HyxsXn6sPEYuwlRFp5Cp8fqnyU"},
{"content":{"body":"right, so that's a case of a change that needs to happen for something to be shippable, whereas we're not aware of changes that need to happen for Temporal for it to be shippable","m.mentions":{},"msgtype":"m.text"},"ts":1718262210814,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NnI4b5TCYnFNL0v9x8k-CBjEtuC0His5lL95S894CfM"},
{"content":{"body":"wasn't that the entire agenda item? it was too big to be shippable.","m.mentions":{},"msgtype":"m.text"},"ts":1718262230631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OnpQhwVPQI60myq9mvXYzKs8TUA5eVAwkILBJ9fWO8E"},
{"content":{"body":"and we addressed it, we hope (modulo implementer feedback, which makes sense to seek during Stage 3)","m.mentions":{},"msgtype":"m.text"},"ts":1718262271002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F34D2kU65vCCMhtSMtU__Jek3y-2LV8Oh_c6izNcI0A"},
{"content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"ts":1718262320826,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc"},
{"content":{"body":" * right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"m.new_content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262374856,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SXNizrvosx6GqPBw8ak5_WSrjRsT7cdEj5jjnCAZtkw"},
{"content":{"body":"\"once shy\"? ","m.mentions":{},"msgtype":"m.text"},"ts":1718262415454,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$U5Z9vBJxpCUCsa6c9TKeQmsw5cCrpQq_2zfxujc_ZhI"},
{"content":{"body":"lol i was trying to paraphrase \"once bitten twice shy\", i've been up for nearly 20 hours so it might not make sense","m.mentions":{},"msgtype":"m.text"},"ts":1718262444741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kRJNmTXWV2JQhj9Jnsx7Pm9NvexXM2eW2kLJIwKw88w"},
{"content":{"body":"once bitten, twice shy\nidiom\n—used to mean that a person who has failed or been hurt when trying to do something is careful or fearful about doing it again","m.mentions":{},"msgtype":"m.text"},"ts":1718262450694,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1YBC0xNSjfteAItSsADbcuwoA-bf-IIEkmSBVMUC1ag"},
{"content":{"body":"if the corrective action suggested here is to more liberally request consensus to regress proposals when it seems they should be regressed, that seems reasonable to me","m.mentions":{},"msgtype":"m.text"},"ts":1718262530414,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3eQ4MtZLtlWqXj52HiBfYNYs-oRZQDFDilfv1CDVAOs"},
{"content":{"body":"exactly that. which is something we've discussed multiple times in recent years, like with import attributes for example","m.mentions":{},"msgtype":"m.text"},"ts":1718262558245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hdVYaCaPl1YOAPNyCKXFOtnCh3nxRqwAMIfXO1Q1pnc"},
{"content":{"body":"(to pretty consistently positive response, iirc)","m.mentions":{},"msgtype":"m.text"},"ts":1718262575791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r4Qtmgbh0DHLlDSBE3S_wN1kYD0wnGd5BcjhtCDl2Pg"},
{"content":{"body":"so, for import attributes, it was retracted because a change was in progress, which is more similar to the globalThis case.","m.mentions":{},"msgtype":"m.text"},"ts":1718262600841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ow9myXWNEFSNcCjjbGQicJt5r8D380x9Pr83_lvjcaY"},
{"content":{"body":"the concept of a \"scoped demotion\" helped make that palatable, i think","m.mentions":{},"msgtype":"m.text"},"ts":1718262604201,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10rH1Ms5FmstUi1271hmrvMEs_Re8PeMSosCkNyRMho"},
{"content":{"body":"I wonder if the proposed action would have been \"lets split the proposal in two and bring this part back to stage 2\", rather than \"lets remove this part\", the stability impression would have been different","m.mentions":{},"msgtype":"m.text"},"ts":1718262607683,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M5zvbLLNPooNtzIzLBOMRmaKuLquhwiBLd2tMSmjMxY"},
{"content":{"body":"it was unfortunate that we didn't permit ourselves a scoped demotion. I think the committee agreed to the demotion partly because the strongly opinionated people agreed to scoping, even if the committee as a whole wasn't going to commit to scoping.","m.mentions":{},"msgtype":"m.text"},"ts":1718262662233,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XmgsL3olb5J1XPcOuwCCXMjc5pDIcPxc32X-Y2_cPG8"},
{"content":{"body":"or alternatively, at this point we could move it back to ~2 with a scope of \"no design changes, only implementation-driven ones\" - which sounds like stage 3, but, because of the scale of Temporal might be worthy of some flexibility","m.mentions":{},"msgtype":"m.text"},"ts":1718262662481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jFSLrFXRAHey9V6lNAUAbJElIITznXHFKlLfRY6gHfw"},
{"content":{"body":"but there's no design changes proposed here, so I'm not sure what the criteria would be later for re-promotion","m.mentions":{},"msgtype":"m.text"},"ts":1718262682532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pYMTdsgWe_AiW21tOq_fSbEgWQXYo30_qU7PUkrYSmg"},
{"content":{"body":"dropping calendar and timezone were pretty massive design changes","m.mentions":{},"msgtype":"m.text"},"ts":1718262695660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GACb9ubE_DEtd78G0ZgPZ4qhRd2ZEVhlejj5jyqpdyg"},
{"content":{"body":"right, but we don't have any *further* changes proposed","format":"org.matrix.custom.html","formatted_body":"right, but we don't have any <em>further</em> changes proposed","m.mentions":{},"msgtype":"m.text"},"ts":1718262707310,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VJUBDPjIsw8YqIbAcF4KmhV69fzaammVtrUynuhLsqQ"},
{"content":{"body":"oh sure. that's been the case after every plenary tho, until the next one","m.mentions":{},"msgtype":"m.text"},"ts":1718262718998,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ub6wCQS_8jtyBCYXIHB3RjdDAD9O-5L6SE-GfkFM15w"},
{"content":{"body":"when import attributes were re-promoted, there was the idea raised, \"even though we agree on these changes, should we wait longer to let things settle?\" we decided no wait was needed, and that turned out just fine.","m.mentions":{},"msgtype":"m.text"},"ts":1718262743873,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mMYM12lKpeLXJRiYJRgPRWZU1i9ziWj9zdwyAJkq15E"},
{"content":{"body":"since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)","m.mentions":{},"msgtype":"m.text"},"ts":1718262777858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"},
{"content":{"body":"but if more changes come back in july, i think we should seriously consider demoting it until changes stop coming","m.mentions":{},"msgtype":"m.text"},"ts":1718262797118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4FEJUNJxGYAcfcklY-omz8r-MWdMNmu6Tb1sgmVPgmo"},
{"content":{"body":"> <@ljharb:matrix.org> since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)\n\nwe could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>since we won&#39;t have time to discuss temporal&#39;s stage this meeting, i guess we&#39;ll see either way :-)</blockquote></mx-reply>we could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"}},"msgtype":"m.text"},"ts":1718262806073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f-BoP5gvp3pdfZUOWdX9y9oeOopb8ZKQGTJDvuIGZTs"},
{"content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that","m.mentions":{},"msgtype":"m.text"},"ts":1718262828308,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU"},
{"content":{"body":"ah OK good to know","m.mentions":{},"msgtype":"m.text"},"ts":1718262835245,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KHK46wj1nxxtogmbpWfE44PyGsvPYzbMtC-YZ8Ubp0"},
{"content":{"body":" * perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"m.new_content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262847289,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_OFvTMvFwjCDjtffFp6mh9QUh3So0IwXrVRGm9mdE6c"},
{"content":{"body":"my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"ts":1718262887651,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA"},
{"content":{"body":" * (presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"m.new_content":{"body":"(presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262949453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QieKWPreXO4dZymafnGVMuMkTIEzFXKZM9ikpmq5Wco"},
{"content":{"body":"I think we've made the points back and forth here; I'm not sure what more we should discuss","m.mentions":{},"msgtype":"m.text"},"ts":1718262992690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IF835DU1ZAf9WLsp2eIHoBbQrdKKrAtyrIbYwVmqvvI"},
{"content":{"body":"it'd only be worth discussing if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"ts":1718263045873,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0"},
{"content":{"body":" * it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"m.new_content":{"body":"it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718263052176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P65Tib7AyjTMDTTyhdhZfSmsO_bpdbs13fFJjJ4etR8"},
{"content":{"body":"maybe I wasn't clear?","msgtype":"m.text"},"ts":1718264211934,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OaCiVRelAbSV11sWK-96uX36KaUrb-UwtuOW8ry5TQE"},
{"content":{"body":"the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective","msgtype":"m.text"},"ts":1718264251018,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"},
{"content":{"body":"I understood \"High level APIs and Syntax\" to mean the rough design we want to proceed with. We've never been so strict for stage 2.","m.mentions":{},"msgtype":"m.text"},"ts":1718264275727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VW5764aRYQzI3BJisD1IbWYJsswioZRqsuRUs2RXffc"},
{"content":{"body":"\"Placeholders and TODOs are acceptable\"","m.mentions":{},"msgtype":"m.text"},"ts":1718264288224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U5R3I0CiKmxaij_ovdNqX_GG6GmQ9x4-23dA9BrUcjU"},
{"content":{"body":"The description in the Purpose column describes the kinds of things Waldemar is discussing","m.mentions":{},"msgtype":"m.text"},"ts":1718264338249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oAQWw-dWMNvRVS1xbLjbSUXIXHTdTnMAvbZyJjZr3yQ"},
{"content":{"body":"there have been proposals entering stage 2 with entire methods stubbed out","m.mentions":{},"msgtype":"m.text"},"ts":1718264350586,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LB53UL5xiStugHvuCasdHBb3HcE5kou7x1f5D_faoU4"},
{"content":{"body":"re Shane's topic: I think we *do* approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","format":"org.matrix.custom.html","formatted_body":"re Shane's topic: I think we <em>do</em> approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","m.mentions":{},"msgtype":"m.text"},"ts":1718264390957,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mv02aKNYoErRWcSNzYlUVGQwdCyIQXIGvq8U8Q18kxU"},
{"content":{"body":"@littledan:matrix.org even stage 4 is advanced on conceptual agreements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> even stage 4 is advanced on conceptual agreements","msgtype":"m.text"},"ts":1718264447295,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ukSv46UgsbKk79Os4AFHJltW21VKyCDTWON8XyJ4MHM"},
{"content":{"body":"> <@michaelficarra:matrix.org> the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective\n\nagree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered &quot;major&quot;, which is subjective</blockquote></mx-reply>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"}},"msgtype":"m.text"},"ts":1718264485501,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"},
{"content":{"body":"the editor group often finds things *in the 262 spec document* that don't align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","format":"org.matrix.custom.html","formatted_body":"the editor group often finds things <i data-md=\"*\">in the 262 spec document</i> that don&#39;t align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","msgtype":"m.text"},"ts":1718264488869,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jB6POXAyDryp0WofCxO4kUhNLqDuyUcK19NtHD6_vLA"},
{"content":{"body":"part of the editor's job responsibilities is going back through consensus (written and in our memory) to confirm that the document aligns with it","msgtype":"m.text"},"ts":1718264563484,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1726qo7xak2tbnv34SE6UVSYubeCb1tg1ToClw3aJ-k"},
{"content":{"body":"Purpose of Stage 2:\n\n- Refining the solution.\n- Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.\n- Receive and address spec text reviews from the assigned reviewers and the appropriate editor group\n- Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details\n- Investigate integration with relevant host APIs, if necessary","format":"org.matrix.custom.html","formatted_body":"<p>Purpose of Stage 2:</p>\n<ul>\n<li>Refining the solution.</li>\n<li>Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.</li>\n<li>Receive and address spec text reviews from the assigned reviewers and the appropriate editor group</li>\n<li>Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details</li>\n<li>Investigate integration with relevant host APIs, if necessary</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264584866,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$worYq05EbVIIj7Z7SFgBcVDROA6l8JdQPFt-cy9SK8c"},
{"content":{"body":"If we agree this is the right direction to go for Decimal, then Stage 2 seems perfectly reasonable. It means we've committed to that direction and now we want to flesh out the details. ","m.mentions":{},"msgtype":"m.text"},"ts":1718264754534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6zYR3kNNti_hDJWvhmmR9eTz5CrH8XfK0BU6tlnipc"},
{"content":{"body":"more greatest hits from the process doc, re: stage 2 status\n\n> The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.","format":"org.matrix.custom.html","formatted_body":"<p>more greatest hits from the process doc, re: stage 2 status</p>\n<blockquote>\n<p>The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264980321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nHyWwV_YRVYQ83INxaZ-tOZIPlAzWTeJZDF5oHRxSwc"},
{"content":{"body":"If we overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"ts":1718265030324,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE"},
{"content":{"body":" * If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"m.new_content":{"body":"If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265046338,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-jldvJqeEOw6b7JqUcUkiLwM55g7Qz98O38Rrl3ygNc"},
{"content":{"body":"The DurationForrmat update is not going to even come close to filling its timebox, so that clears up time this afternoon","m.mentions":{},"msgtype":"m.text"},"ts":1718265058400,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$U8tIKHjA5_Yz13BaXXt2btxfDxYy1tkPLr2DQbXVgCk"},
{"content":{"body":"(I've reached out to Ujjwal about this)","m.mentions":{},"msgtype":"m.text"},"ts":1718265071718,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$7CumuqbEFYO0Ml6zzwPJBMlwY5ivG4e-ffsSE8UGo_Y"},
{"content":{"body":"Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1718265082163,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"},
{"content":{"body":"I'd like us to not over-rotate on API design based on the temporal experience","m.mentions":{},"msgtype":"m.text"},"ts":1718265219895,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$jKEOc_VOWpmScoOzfCdnA46tOlfqoqU8mJHcmDU8t5E"},
{"content":{"body":"Chrome is working on shipping the web neural network API, that has all the comparisons :)","m.mentions":{},"msgtype":"m.text"},"ts":1718265277853,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ce6vBqeN8x2tu228DL7a1dn0KwKmSNpdboQAfGL5CWc"},
{"content":{"body":"(just to put feedback on Chrome's code size into perspective)","m.mentions":{},"msgtype":"m.text"},"ts":1718265319636,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bbxXYs2aCwEVBHv_wZ-mkEJzfASVKN-MvAHqlfwpPiw"},
{"content":{"body":"If we don't provide an equals method, users will test for = and ≠ via compare(…) == 0 and compare(…) != 0 respectively. This produces incorrect results.","m.mentions":{},"msgtype":"m.text"},"ts":1718265350568,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$pKMw-SnoefeEmNVv-UeHJeV6Osidk7YxJyF0gi2Yv0U"},
{"content":{"body":"Stage 1 is scouting the terrain and coming up with a battle plan.\nStage 2 is starting the long march to battle and preparing fortifications.\nStage 2.7 is checking your gear before the battle starts.\nStage 3 is when you see how much of your plan survives contact with the enemy.\nStage 4 is the parade.","m.mentions":{},"msgtype":"m.text"},"ts":1718265361825,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rXp5R_mpCSPQH6TuhUyNbTwbiXYnKOkB39SHob-FPdA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.\n\nAh right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.</blockquote></mx-reply>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"}},"msgtype":"m.text"},"ts":1718265361878,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"},
{"content":{"body":"> <@aardvark179:matrix.org> Ah right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.\n\nThe .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.</blockquote></mx-reply>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"}},"msgtype":"m.text"},"ts":1718265417827,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"},
{"content":{"body":"Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible","m.mentions":{},"msgtype":"m.text"},"ts":1718265529952,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"},
{"content":{"body":"facts?","m.mentions":{},"msgtype":"m.text"},"ts":1718265540321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$i2No75-l7tTopw24KjWwhdUeDd6KMyEXjdOGLWYS_sY"},
{"content":{"body":"that is browsers' position as i understand it, yes","m.mentions":{},"msgtype":"m.text"},"ts":1718265557058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0cRO41_CPNnuIYh2i1LLumqgOPw398OJ3d73M1JOTzc"},
{"content":{"body":"(which impacts both R&T and Decimal)","m.mentions":{},"msgtype":"m.text"},"ts":1718265576293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2eevLidmRhbIBO6VUx4LUFGfz10N0iBZBZHEucqvqoA"},
{"content":{"body":"I understand browsers position as \"a primitive only makes sense if we see proof that it's actually going to be widely used\", and I hope that decimal objects getting adoption will fulfill that","m.mentions":{},"msgtype":"m.text"},"ts":1718265611509,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Yo7c8giBSx3tn229vOArb9vgX5aY6T0LKCWS5rKNcAQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nYeah seems consistent, and maps reasonably to IEEE spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>Yeah seems consistent, and maps reasonably to IEEE spec.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265619888,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ve5OD3e_oKNHH9m4zlRVGu2WbA33wtPUGdJLjGhC8pk"},
{"content":{"body":"I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.","m.mentions":{},"msgtype":"m.text"},"ts":1718265668371,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"},
{"content":{"body":"it can be proved out, though, without being in the spec - that's what npm is for","m.mentions":{},"msgtype":"m.text"},"ts":1718265690394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rj-lspRC3MZHGFQcn1l2ODm3IyYhtmmOddZ6MqqyVoc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nthis would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>this would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265692103,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},
{"content":{"body":"> <@robpalme:matrix.org> I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.\n\nprecedent?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.</blockquote></mx-reply>precedent?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"}},"msgtype":"m.text"},"ts":1718265713283,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$oESqBvnailVC2U5ATpFjJlz8NVFZFIeXYCIVVktqPCE"},
{"content":{"body":"this constraint on primitives is pretty new so i'm not sure there is any precedent","m.mentions":{},"msgtype":"m.text"},"ts":1718265730542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2EMs0C8I9G2HrQCO9RJlM937xRxypo5iONGlokxTho8"},
{"content":{"body":"Ugh, that's annoying. In wonder wether we could extend the definition of consistent comparators to include \"some values can consistently not be compared with any other value\"","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265793461,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},
{"content":{"body":"it would be nice to hear from vendors if that sort of signal would be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"ts":1718265824863,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k"},
{"content":{"body":"Because, NaN returned from .compare happens if and only if one of the arguments is a NaN","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265833303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},
{"content":{"body":"I would have to check if implementations in practice are already doing it","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265853943,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},
{"content":{"body":"very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&via=mozilla.org&via=igalia.com\n> you can get consistent sorting like `newPages.sort( ( a, b ) => (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )`, but I don't think there's any way to avoid some kind of surrogate value","format":"org.matrix.custom.html","formatted_body":"<p>very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com</p>\n<blockquote>\n<p>you can get consistent sorting like <code>newPages.sort( ( a, b ) =&gt; (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )</code>, but I don't think there's any way to avoid some kind of surrogate value</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265866280,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},
{"content":{"body":"Infiniti - Infinity is NaN, right?","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265884322,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},
{"content":{"body":" * Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":" * Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.new_content":{"body":"Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":"Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265889147,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Y-JAuUqrdoD_GOOyPFn7etFMCUR16gSOoXre4dL7rss"},
{"content":{"body":"right","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265896256,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},
{"content":{"body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"m.new_content":{"body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265903815,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$FrmbJZKNSHJR3ShUufVsfS4zzcfhQvjkgH5-qUfv8cs"},
{"content":{"body":"Yes","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265913245,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},
{"content":{"body":"which is treated as zero, i.e. same-sign infinities are not differentiated by that kind of sorting","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265957539,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},
{"content":{"body":"> <@softwarechris:matrix.org> agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2\n\nThat's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2</blockquote></mx-reply>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","m.mentions":{"user_ids":["@softwarechris:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"}},"msgtype":"m.text"},"ts":1718265991319,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"},
{"content":{"body":"> <@softwarechris:matrix.org> Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible\n\nI meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>Eemeli&#39;s comment makes it sound like it&#39;s a foregone conclusion that a new primitive is not possible</blockquote></mx-reply>I meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"}},"msgtype":"m.text"},"ts":1718265995731,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$zn772S3slvmXgrfUrosRdgIT8uJmaGYs9PKC1fMT334"},
{"content":{"body":"So the JVM's position on this is\n> Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (<, <=, ==, >=, >) on double values.\nA NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).\nPositive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).\nThis ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.","format":"org.matrix.custom.html","formatted_body":"<p>So the JVM's position on this is</p>\n<blockquote>\n<p>Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (&lt;, &lt;=, ==, &gt;=, &gt;) on double values.<br>A NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).<br>Positive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).<br>This ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266065433,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},
{"content":{"body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in `Array.prototype.sort()` implementations.","format":"org.matrix.custom.html","formatted_body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in <code>Array.prototype.sort()</code> implementations.","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266167837,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$cuVJHd_Y1XbytyE6rHi65iTRh5JpNABBNJGmjxoVwgQ"},
{"content":{"body":"> <@waldemarh:matrix.org> That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.\n\nyou're right -- and the purpose of the discussion was to clarify","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.</blockquote></mx-reply>you're right -- and the purpose of the discussion was to clarify","m.mentions":{"user_ids":["@waldemarh:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"}},"msgtype":"m.text"},"ts":1718266197950,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KlyLGWQ_8g6pblT55Oyzf5TJw5lMXDxQSmQArESeuos"},
{"content":{"body":"The spec is not even in a good enough state for Shane to be able to read and understand it.","m.mentions":{},"msgtype":"m.text"},"ts":1718266234362,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$ODK01oln1WG9HmT0LXpXhVZnZuwbau5t0d2WifkBY4s"},
{"content":{"body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write `new Decimal()` for now while `Decimal()` and `Decimal.prototype.valueOf()` throw, and later we add decimal primitives treating `new Decimal` as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","format":"org.matrix.custom.html","formatted_body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write <code>new Decimal()</code> for now while <code>Decimal()</code> and <code>Decimal.prototype.valueOf()</code> throw, and later we add decimal primitives treating <code>new Decimal</code> as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","m.mentions":{},"msgtype":"m.text"},"ts":1718266247536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CSzCWEpg4CnwWuzAS7uLzbV5oEDp_wdMs2Pzfb7WLVg"},
{"content":{"body":"waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1718266298461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"},
{"content":{"body":"> <@littledan:matrix.org> waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?\n\nThat's fine by me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?</blockquote></mx-reply>That's fine by me.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"}},"msgtype":"m.text"},"ts":1718266313038,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"},
{"content":{"body":"I *want* this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","format":"org.matrix.custom.html","formatted_body":"I <em>want</em> this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","m.mentions":{},"msgtype":"m.text"},"ts":1718266365150,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VdMfok7gQvcvxSFH3VVPmUdku5BDakjuH-n82-1IpTw"},
{"content":{"body":"> <@waldemarh:matrix.org> That's fine by me.\n\nsffc: ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's fine by me.</blockquote></mx-reply><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: ?","m.mentions":{"user_ids":["@waldemarh:matrix.org","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"}},"msgtype":"m.text"},"ts":1718266371092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wGyPDzje7DpqlmMKrcPH_fiXtZKbFuUPXDdwu14iRp0"},
{"content":{"body":"I'm not convinced by the argument that Decimal is the answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"ts":1718266409545,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8"},
{"content":{"body":" * I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":" * I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"m.new_content":{"body":"I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":"I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266422280,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jMZ2H16RM-hlkO-8dqNQjzY-b1uHcDXuotnQZyoeNoI"},
{"content":{"body":"I think the existing libraries have tons of downloads, but maybe that is partly because of people depending on them when they don't really need them","m.mentions":{},"msgtype":"m.text"},"ts":1718266485491,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3TjEXWRwf_fTuUkzviRWiczsX5Xr_jkwKGdIaTS_yvo"},
{"content":{"body":"About the diff with Decimal128 and Temporal, I think it's how people expect. For Decimal128 in non-primitive form, people will say: WTF! For Temporal, people will say: ok, it at least much much better than Date!","m.mentions":{},"msgtype":"m.text"},"ts":1718266508559,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6YOJSA9-cSgW1slxVRtfJaFz3McJu9tOG9LfNZkS3AQ"},
{"content":{"body":"`13,603,794` weekly downloads is tons or no?","format":"org.matrix.custom.html","formatted_body":"<code>13,603,794</code> weekly downloads is tons or no?","m.mentions":{},"msgtype":"m.text"},"ts":1718266526336,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nuzd9e8JOcTqjyqLD-2PkB6q2-fNfHyHKXfSvdG-EWc"},
{"content":{"body":"looking around on npm, i do see https://www.npmjs.com/package/bignumber.js which has 11m downloads, which is a pretty decent number","m.mentions":{},"msgtype":"m.text"},"ts":1718266539403,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cNzUzOZ_gemOwknOdjgtMmYFvFotzkveDbUJZ_RjGCg"},
{"content":{"body":"https://www.npmjs.com/package/decimal.js, https://www.npmjs.com/package/big.js, https://www.npmjs.com/package/bignumber.js","m.mentions":{},"msgtype":"m.text"},"ts":1718266542994,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$GVVDaGtbCg-Femn8cbXhIea-_TnyxESXu1r5iH0s1NE"},
{"content":{"body":"The spec intelligibility issues are not egregious enough to get in the way of Stage 2 for me; I think the committee sending a positive signal by promoting to Stage 2 is more important at this point in time","m.mentions":{},"msgtype":"m.text"},"ts":1718266546636,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$O2RH3iUJIfoyBd_y3Q_BEU-ojLlu9fplk2xq6bfzRJw"},
{"content":{"body":"50mil","m.mentions":{},"msgtype":"m.text"},"ts":1718266546735,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$Y2iYjDhYmD2Z6Yxs53WFwaCqx1AFRMBOFijl5MaywGc"},
{"content":{"body":"and indeed decimal.js has 17 million","m.mentions":{},"msgtype":"m.text"},"ts":1718266560499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-mVvylkAKEBpdjxkQSian1wvdVicob5TobaJGaN9FgM"},
{"content":{"body":"so that's a great indicator, thank you. (i'd still want the proposal readme to have a list ofc)","m.mentions":{},"msgtype":"m.text"},"ts":1718266586026,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-RueSwzCw4jlqH7dkVYCvXizYnX8ZFv13WIaU6-78h8"},
{"content":{"body":"the polyfill is not being developed in a way where it intends to compete with other decimal libraries","m.mentions":{},"msgtype":"m.text"},"ts":1718266600452,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"},
{"content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me","m.mentions":{},"msgtype":"m.text"},"ts":1718266645771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg"},
{"content":{"body":"> <@littledan:matrix.org> the polyfill is not being developed in a way where it intends to compete with other decimal libraries\n\ncan you elaborate this? this seems like a statement that needs more explanation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the polyfill is not being developed in a way where it intends to compete with other decimal libraries</blockquote></mx-reply>can you elaborate this? this seems like a statement that needs more explanation","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"}},"msgtype":"m.text"},"ts":1718266646543,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AO7cm-7q99t8j6YaLuNwIDMwTmvAuQjV-d-m_LwTQ0w"},
{"content":{"body":" * oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"m.new_content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266662083,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LL6d7cvnBAlnBDiimfMHdmSkZusU5UZZAi04ai2I2lI"},
{"content":{"body":"might need to invite `MikeMcl` to the chat at some point","format":"org.matrix.custom.html","formatted_body":"might need to invite <code>MikeMcl</code> to the chat at some point","m.mentions":{},"msgtype":"m.text"},"ts":1718266666261,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$B_k9X0gLyoA21zOG4ocJUI2w4fqtCayol0il5vsW4OQ"},
{"content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation","m.mentions":{},"msgtype":"m.text"},"ts":1718266679598,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw"},
{"content":{"body":"Same for temporal for example","m.mentions":{},"msgtype":"m.text"},"ts":1718266685306,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gdvxa7S6xoW25xgp5VQ96E_YMXCBB_0-3OZclHlMBiA"},
{"content":{"body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.new_content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266700847,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_CNBNNJJOKWTC8D7ZainKEJAi9xkBFKhKt9S2Mw6JMo"},
{"content":{"body":"Lets just add a single new primitive type that covers flexible user-defined data types and operator overloading and just base all other new primitives on that. ","m.mentions":{},"msgtype":"m.text"},"ts":1718266703084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},
{"content":{"body":"Let's call this primitive \"object\" :)","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266722909,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},
{"content":{"body":"oh i misread polyfill as spec 🤦‍♂️","m.mentions":{},"msgtype":"m.text"},"ts":1718266726210,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fGBlPQDHGkfGqCChEfiNds3wR_XmUP-Ch7utnpqtKxE"},
{"content":{"body":"i read \"this spec is not being developed in a way where it intends to compete with other decimal libraries\"","m.mentions":{},"msgtype":"m.text"},"ts":1718266765099,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$66lKsT8XaXKgpsQrb4miZ0zf59AyFVoR3QSl4WC--IY"},
{"content":{"body":"Honestly, this was one of the things I wanted to do with my version of the `struct` proposal prior to Shu's version.","format":"org.matrix.custom.html","formatted_body":"Honestly, this was one of the things I wanted to do with my version of the <code>struct</code> proposal prior to Shu's version.","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266773730,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},
{"content":{"body":"So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It's tempting, but it has real downsides.","m.mentions":{},"msgtype":"m.text"},"ts":1718266777441,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0"},
{"content":{"body":"I would have just called the primitive `\"value\"` ","format":"org.matrix.custom.html","formatted_body":"I would have just called the primitive <code>\"value\"</code>","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266787588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qyjGZuzymo7cYWvhXdWXdCht9iEPy9-hf7ZFgd-Z8rQ"},
{"content":{"body":"\"tempting but has real downsides\" is an understatement in my experience on both parts","m.mentions":{},"msgtype":"m.text"},"ts":1718266807929,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WNRf4G111KY6XVZp0vjulb-r71Ud8Gqa-1x0AUYU5SQ"},
{"content":{"body":":-)","m.mentions":{},"msgtype":"m.text"},"ts":1718266819762,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$sTmadkxQ3qx9zScu-vzDhYbrycbiOLPQ0zfumdNd7Zc"},
{"content":{"body":" * 🤣","m.mentions":{},"m.new_content":{"body":"🤣","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sTmadkxQ3qx9zScu-vzDhYbrycbiOLPQ0zfumdNd7Zc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266827414,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$_2oNP_K7Qy7KobpK71RGRHL6mgj2_BCZZz7xeUhOJUc"},
{"content":{"body":"> <@aardvark179:matrix.org> So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It's tempting, but it has real downsides.\n\nIt would probably have to be lexically scoped to restrict the overhead to where you need it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It&#39;s tempting, but it has real downsides.</blockquote></mx-reply>It would probably have to be lexically scoped to restrict the overhead to where you need it","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0"}},"msgtype":"m.text"},"ts":1718266835757,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU"},
{"content":{"body":" * \"tempting but has real downsides\" is an understatement in my experience on both parts in any language i've used with the feature","m.mentions":{},"m.new_content":{"body":"\"tempting but has real downsides\" is an understatement in my experience on both parts in any language i've used with the feature","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WNRf4G111KY6XVZp0vjulb-r71Ud8Gqa-1x0AUYU5SQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266837199,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-Pr6-3BuOppfoa80xNDyzbcMi793ULjBllYOMeeEGTM"},
{"content":{"body":"i suspect that would remove a lot of the downsides","m.mentions":{},"msgtype":"m.text"},"ts":1718266853309,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NiIAtC2BgQiqZh64UzvW4435qK0DEbzwC2a3gcUWLj0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> It would probably have to be lexically scoped to restrict the overhead to where you need it\n\nBut then you can end up with weird corner cases because you're code does one thing while a library does another.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>It would probably have to be lexically scoped to restrict the overhead to where you need it</blockquote></mx-reply>But then you can end up with weird corner cases because you're code does one thing while a library does another.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU"}},"msgtype":"m.text"},"ts":1718266939965,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$s1pOFFsm8_i75cR5lFvoQZFbo9rupReCj86682q6QKA"},
{"content":{"body":"Question to implementers, when `bigint` was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of `bigint`?","format":"org.matrix.custom.html","formatted_body":"Question to implementers, when <code>bigint</code> was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of <code>bigint</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1718267024255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY"},
{"content":{"body":"Scoped overloads seems like a footgun how does a library support overloading in that case?","m.mentions":{},"msgtype":"m.text"},"ts":1718267026448,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WR9UCk4XYzIAOyhYD9LErz35mYBBjjzCMB4a8lRHjuU"},
{"content":{"body":"i suppose it'd provide exports that can be \"activated\" inside a scope with syntax","m.mentions":{},"msgtype":"m.text"},"ts":1718267052569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CLJds-CX2-HDgVP3tGiFkxnLa1tIU2JI20oMXkIRokQ"},
{"content":{"body":"> <@rbuckton:matrix.org> Question to implementers, when `bigint` was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of `bigint`?\n\nAFAIK, none","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Question to implementers, when <code>bigint</code> was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of <code>bigint</code>?</blockquote></mx-reply>AFAIK, none","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY"}},"msgtype":"m.text"},"ts":1718267057660,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE"},
{"content":{"body":"like a special decorator or something","m.mentions":{},"msgtype":"m.text"},"ts":1718267063075,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IRl68vEyc5JveBvrWbdhgbzqWalIQCmt2rrCqIpMVz4"},
{"content":{"body":"Or it wouldn't have shipped","m.mentions":{},"msgtype":"m.text"},"ts":1718267064230,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WRLc0RNdK9CBXq-i5BIOoGZxxUDlMf86jgamR-IinHA"},
{"content":{"body":"On the === front you could say that if object identity is equal then it doesn't call your overload. I don't think that's a crazy rule.","m.mentions":{},"msgtype":"m.text"},"ts":1718267114974,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0"},
{"content":{"body":"littledan: CC^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: CC^","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267137944,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$bhygUUFphkpRZ-rYQ-LJ8dWgWE-Ruq4hoe0k907UcGE"},
{"content":{"body":"> <@keith_miller:matrix.org> AFAIK, none\n\nGenerally none, but some sites could end up having more types flowing through them than previously. Rarely significant though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>AFAIK, none</blockquote></mx-reply>Generally none, but some sites could end up having more types flowing through them than previously. Rarely significant though.","m.mentions":{"user_ids":["@keith_miller:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE"}},"msgtype":"m.text"},"ts":1718267158946,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$wPGL6uNmQQ7tjJm7m2g66GUfk2DU3LBXNt22c-R1Zrg"},
{"content":{"body":"I think browsers want to be able to return \"false\" fast","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$bhygUUFphkpRZ-rYQ-LJ8dWgWE-Ruq4hoe0k907UcGE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267159484,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-GwZSW6SQ72QkGX80nLzHnE5frSXGyi3FbDxqja2R1U"},
{"content":{"body":"When we talk about performance, do we also include \"time from when the user clicks on a link to when the page is available\"? (i.e. loading time)","m.mentions":{},"msgtype":"m.text"},"ts":1718267166231,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$U7QgyzkTesR1XivQ2V07FNK0tqzWhky4neArRNfSTYg"},
{"content":{"body":"Or just runtime performance?","m.mentions":{},"msgtype":"m.text"},"ts":1718267173654,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Vttg4f-QNJPsolI-Bvw6PmWEV0BHmIGpEi25kz81Idw"},
{"content":{"body":"You already have to look into your object to figure out if it's a string or BigInt though","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$-GwZSW6SQ72QkGX80nLzHnE5frSXGyi3FbDxqja2R1U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267190899,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Kiw_hDM9MOSbCMtKqrabuTjwXfaHSwY4Xc_7GeaEl68"},
{"content":{"body":"I think we mean both.","m.mentions":{},"msgtype":"m.text"},"ts":1718267193483,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$y417EMD82z2wWnLIM7msIOI5sDhHzdRU2nKS5COu_p0"},
{"content":{"body":"At that point you can check for overloading, which too much cost in an IC","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$Kiw_hDM9MOSbCMtKqrabuTjwXfaHSwY4Xc_7GeaEl68"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267211588,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U"},
{"content":{"body":"If we did provide a user-defined primitive capability with operator overloading in a similar vein, would it then be reasonable to assume that all performance overhead would be in interactions with those primitives, and not all other JS?","m.mentions":{},"msgtype":"m.text"},"ts":1718267221015,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xi-7-PYlnC87B53vsXBYffDqEDgx9xQmIDCwp4QIsR0"},
{"content":{"body":" * At that point you can check for overloading, without too much cost in an IC","format":"org.matrix.custom.html","formatted_body":" * At that point you can check for overloading, without too much cost in an IC","m.mentions":{},"m.new_content":{"body":"At that point you can check for overloading, without too much cost in an IC","format":"org.matrix.custom.html","formatted_body":"At that point you can check for overloading, without too much cost in an IC","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718267227579,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$fHQ1X7lagRl-ON40PbeKYyn-IMUjp3NaW6NapJfTDR0"},
{"content":{"body":"I don't understand what you mean by \"user-defined primitive capability\"?","m.mentions":{},"msgtype":"m.text"},"ts":1718267303816,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE"},
{"content":{"body":"something close to Tuple/Record","m.mentions":{},"msgtype":"m.text"},"ts":1718267332890,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$sJIq69no4zEwypV1aNaISAGcLHWKl5QFN9X28xOIvRo"},
{"content":{"body":"Record & Tuple was also blocked from being a primitive","m.mentions":{},"msgtype":"m.text"},"ts":1718267377211,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Fotb-NHoZe5rsXEWSLh5lDBioUlLrgzlRkAoFCTVrgg"},
{"content":{"body":"It would still be an object though so it's not really a primitive. It just looks kinda like a primitive unless you squint","m.mentions":{},"msgtype":"m.text"},"ts":1718267378838,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA"},
{"content":{"body":"> <@keith_miller:matrix.org> I don't understand what you mean by \"user-defined primitive capability\"?\n\nFor the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I don&#39;t understand what you mean by &quot;user-defined primitive capability&quot;?</blockquote></mx-reply>For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE"}},"msgtype":"m.text"},"ts":1718267388048,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM"},
{"content":{"body":"Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.","m.mentions":{},"msgtype":"m.text"},"ts":1718267389750,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4"},
{"content":{"body":"(Personal Hat on): User defined primitives are a fascinating design space that I think would provide a lot of value, and potentially could be done -- a path I would propose would be abstracting BigInt such that you could re-host BigInt atop the abstraction, then provide user access to the abstraction. But there's many, many dragons here ","m.mentions":{},"msgtype":"m.text"},"ts":1718267423800,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$EVWd5mGdAILFzXHdkh2xgGEqUbGPZ6rtPsZu21jeyvs"},
{"content":{"body":"> <@keith_miller:matrix.org> It would still be an object though so it's not really a primitive. It just looks kinda like a primitive unless you squint\n\nSure, that's fine to me. I'm talking about \"looks like a primitive\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>It would still be an object though so it&#39;s not really a primitive. It just looks kinda like a primitive unless you squint</blockquote></mx-reply>Sure, that's fine to me. I'm talking about \"looks like a primitive\".","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA"}},"msgtype":"m.text"},"ts":1718267430116,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMqvW21TEAy4sUIA_Krz81XmdrD8QBixtQJ-lrUz8Rc"},
{"content":{"body":"(c.f. Project Valhalla etc) ","m.mentions":{},"msgtype":"m.text"},"ts":1718267434969,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg"},
{"content":{"body":"> <@rbuckton:matrix.org> For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.\n\nlike Java primitive class ...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.</blockquote></mx-reply>like Java primitive class ...","m.mentions":{"user_ids":["@rbuckton:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM"}},"msgtype":"m.text"},"ts":1718267468066,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_AQt38uk7jfnLUJsDqJftAw5OhrsaGi4PuOc22F2mDE"},
{"content":{"body":"> <@mgaudet:mozilla.org> (c.f. Project Valhalla etc)\n\nTrigger warning, please. 😀","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>(c.f. Project Valhalla etc) </blockquote></mx-reply>Trigger warning, please. 😀","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg"}},"msgtype":"m.text"},"ts":1718267471959,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE"},
{"content":{"body":"With the caveat that operator overloads on a user-defined \"primitive\" will likely be far slower than native primitives.","m.mentions":{},"msgtype":"m.text"},"ts":1718267473772,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Isyg5--JVTgWy70jSr5ozWLs8lyULm2ey41c5c3Bo7I"},
{"content":{"body":"I see where Jodran's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","msgtype":"m.text"},"ts":1718267480122,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CBbebTqCyMXDK7M6wAcNgPzjIm1U25pT0qaCAuiQNpM"},
{"content":{"body":"> <@aardvark179:matrix.org> Trigger warning, please. 😀\n\nApologies","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Trigger warning, please. 😀</blockquote></mx-reply>Apologies","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE"}},"msgtype":"m.text"},"ts":1718267488029,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$IrNMzPPqGgt_rPwGQmZNUM5LKQyAliiv7odoEPz7QGk"},
{"content":{"body":"* I see where Jordan's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","m.new_content":{"body":"I see where Jordan's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$CBbebTqCyMXDK7M6wAcNgPzjIm1U25pT0qaCAuiQNpM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718267575645,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IzTUeIu43BovZATYNBmXntp2sE7OQbv6SMxYrGnhwx0"},
{"content":{"body":"> <@aardvark179:matrix.org> Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.\n\nYeah, I DEFINITELY don't think we can let users change e.g. `number + number`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.</blockquote></mx-reply>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code>","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4"}},"msgtype":"m.text"},"ts":1718267585132,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"},
{"content":{"body":"For both performance and sanity reasons","m.mentions":{},"msgtype":"m.text"},"ts":1718267598520,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$4qFpw3T9IPWEsUFpvgq_7TgnzyjIcNH6E8yjueSuRVM"},
{"content":{"body":"You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.","m.mentions":{},"msgtype":"m.text"},"ts":1718267610783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I DEFINITELY don't think we can let users change e.g. `number + number`\n\nBut if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code></blockquote></mx-reply>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"}},"msgtype":"m.text"},"ts":1718267654255,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I DEFINITELY don't think we can let users change e.g. `number + number`\n\nAgreed. You'd only get custom overloading when one of the operands is the user-defined primitive.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code></blockquote></mx-reply>Agreed. You'd only get custom overloading when one of the operands is the user-defined primitive.","m.mentions":{"user_ids":["@keith_miller:matrix.org","@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"}},"msgtype":"m.text"},"ts":1718267658019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kS-p2tCnGXUkC7meHhctLCkEUlEkGi41EO6vWKCTnek"},
{"content":{"body":"what if both operands have a different overload?","m.mentions":{},"msgtype":"m.text"},"ts":1718267674597,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7zGtbln7X7yHXZOJMXEvaO1U8a2TsGz9tQjZwBK3rco"},
{"content":{"body":"That's another dragon.","m.mentions":{},"msgtype":"m.text"},"ts":1718267695403,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ryYsSBhnQa416FMu_rhCoNkl7VC37Y_AI9MnZ9RhMdE"},
{"content":{"body":"You could say both have to have the same function?","m.mentions":{},"msgtype":"m.text"},"ts":1718267702246,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$UawI6iKlwwbmX0SQJV4a8xlZyY15aF27M8aG6YzvhSI"},
{"content":{"body":"Ruby does it by operators really being methods","m.mentions":{},"msgtype":"m.text"},"ts":1718267704564,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ru-71bOvkI_hZG4ZZEj9q6up1uQ45JP3U2jssqwHbyw"},
{"content":{"body":"Or an exception","m.mentions":{},"msgtype":"m.text"},"ts":1718267708805,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$BUhlhtBxwxZj7mk-NUUfycs1JJFPhMi741H5RLxYZ2s"},
{"content":{"body":"idk","m.mentions":{},"msgtype":"m.text"},"ts":1718267710710,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$a7SdhevesPnMQIAD7fmJVQhgvBPreD1p5X3acMw-Nak"},
{"content":{"body":"Other langauges do multi-argument dispatch","m.mentions":{},"msgtype":"m.text"},"ts":1718267720970,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$CWXfvRIh46doZ5jMsa1LtXBwRERqJWgJBm53KhWS0Gs"},
{"content":{"body":"> <@aardvark179:matrix.org> But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.\n\nYes, but the expectation is that using a user-defined \"primitive\" as an operand is about convenience and not performance.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.</blockquote></mx-reply>Yes, but the expectation is that using a user-defined \"primitive\" as an operand is about convenience and not performance.","m.mentions":{"user_ids":["@aardvark179:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"}},"msgtype":"m.text"},"ts":1718267723320,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IYHr-cMJanOaT1MXERvD7X1zAbG2svz1uH_hQQDsiw4"},
{"content":{"body":"We've investigated various mechanisms for operator overloading in the past. ","m.mentions":{},"msgtype":"m.text"},"ts":1718267801597,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r86ulhfx8zXYlOs0m1SR8zso0JDs4I9QI0fjP7M_f9Q"},
{"content":{"body":"> <@aardvark179:matrix.org> But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.\n\nYeah, I could see `object <op> primitive` calling some overload too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.</blockquote></mx-reply>Yeah, I could see <code>object &lt;op&gt; primitive</code> calling some overload too","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"}},"msgtype":"m.text"},"ts":1718267945769,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ"},
{"content":{"body":"But maybe there's dragons there I haven't thought through","m.mentions":{},"msgtype":"m.text"},"ts":1718267967103,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kQEtpUexFPHirPJUDwFx4cxAtd1daNmea16p4FxOs7U"},
{"content":{"body":"Can someone advance the queue?","m.mentions":{},"msgtype":"m.text"},"ts":1718267981371,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fKSYSiMRQSF0oua1nijZKPXMF-bOw33K374-_4H6Oq8"},
{"content":{"body":"> <@rbuckton:matrix.org> You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.\n\nyes, this corresponds to my previous operator overloading proposal, where you had to make it clear when allocating the object that it had overloading","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You don&#39;t pay the cost of operator overloading for all Objects, only this different thing. If you want to define a &quot;primitive&quot;-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any &quot;primitive&quot;-like type we might want to include in the standard library as well.</blockquote></mx-reply>yes, this corresponds to my previous operator overloading proposal, where you had to make it clear when allocating the object that it had overloading","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"}},"msgtype":"m.text"},"ts":1718268020495,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3_BrEPNZE9BPH76YG1sL4QoK4oHC_mhA7OIPBUgmmQc"},
{"content":{"body":"I had a very early draft for operator overloading syntax in my original `struct` proposal, something like:\n```\nstruct Decimal {\n  ...\n  static (Decimal + Decimal) (a, b) { return ...; }\n  static (Decimal - Decimal) (a, b) { return ...; }\n  static (Decimal * Decimal) (a, b) { return ...; }\n  ...\n}\n```\nNOTE that this is *not* being considered for the current `struct` proposal.","format":"org.matrix.custom.html","formatted_body":"<p>I had a very early draft for operator overloading syntax in my original <code>struct</code> proposal, something like:</p>\n<pre><code>struct Decimal {\n  ...\n  static (Decimal + Decimal) (a, b) { return ...; }\n  static (Decimal - Decimal) (a, b) { return ...; }\n  static (Decimal * Decimal) (a, b) { return ...; }\n  ...\n}\n</code></pre>\n<p>NOTE that this is <em>not</em> being considered for the current <code>struct</code> proposal.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718268029836,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6OAHVNWzGhBFqrGAfDJDlBflQZh0ii5WSulHwdhx5kg"},
{"content":{"body":"sure if there's an easy to check tag on the object that says whether it has overloading","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718268068684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cUo7OQP8ECpPPOCFQJ8xUmopy6NnyTrslWjxLzzZeNE"},
{"content":{"body":"(There's another dimension here to operators, which is also identity; primitives bring *both* operators *and* a lack of identity, and there's no ability as a user to create a user-defined-thing that has no identity too -- c.f. earlier R&T) ","format":"org.matrix.custom.html","formatted_body":"(There's another dimension here to operators, which is also identity; primitives bring <em>both</em> operators <em>and</em> a lack of identity, and there's no ability as a user to create a user-defined-thing that has no identity too -- c.f. earlier R&amp;T)","m.mentions":{},"msgtype":"m.text"},"ts":1718268156880,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$ceQqfy3n2JD8FhrPzqJB-qG47Kd5HTEh-__PYCzhAJA"},
{"content":{"body":"Though I did spend some time fleshing out what a user-defined \"primitive\" might look like in my _old_ struct proposal: https://github.com/rbuckton/proposal-struct","format":"org.matrix.custom.html","formatted_body":"Though I did spend some time fleshing out what a user-defined \"primitive\" might look like in my <em>old</em> struct proposal: https://github.com/rbuckton/proposal-struct","m.mentions":{},"msgtype":"m.text"},"ts":1718268187786,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y-1t9Mew_yXKCzkddnTlnqecWHunTNphh693sNV6tvg"},
{"content":{"body":"> <@rbuckton:matrix.org> You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.\n\nI don't think from the engine side there's a difference","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You don&#39;t pay the cost of operator overloading for all Objects, only this different thing. If you want to define a &quot;primitive&quot;-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any &quot;primitive&quot;-like type we might want to include in the standard library as well.</blockquote></mx-reply>I don't think from the engine side there's a difference","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"}},"msgtype":"m.text"},"ts":1718268198162,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$q6Y5gooM0aC5P0NJQVIJv3AnNitu86GklagGHxKl9Sc"},
{"content":{"body":"(a lack of identity also ties in immutability too) ","m.mentions":{},"msgtype":"m.text"},"ts":1718268202360,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$n55mg7wzgByxFzrZsvtYD7s4EIm_CJLDaCdAAYkopqw"},
{"content":{"body":"But maybe that's different for other engines","m.mentions":{},"msgtype":"m.text"},"ts":1718268212093,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI"},
{"content":{"body":"Lack of guaranteed identity seems like a relatively small problem.","m.mentions":{},"msgtype":"m.text"},"ts":1718268253001,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM"},
{"content":{"body":"> <@aardvark179:matrix.org> Lack of guaranteed identity seems like a relatively small problem.\n\nwas arguably the core of R&T","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Lack of guaranteed identity seems like a relatively small problem.</blockquote></mx-reply>was arguably the core of R&amp;T","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM"}},"msgtype":"m.text"},"ts":1718268273259,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$BndztJDYiK7sWqO8LjDhUIEID4-zMEPKoDmXOAqpBAU"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I could see `object <op> primitive` calling some overload too\n\nobligatory suggestion for infix function calls","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I could see <code>object &lt;op&gt; primitive</code> calling some overload too</blockquote></mx-reply>obligatory suggestion for infix function calls","m.mentions":{"user_ids":["@keith_miller:matrix.org","@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ"}},"msgtype":"m.text"},"ts":1718268278695,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$opycA3fHvapAVOnHyN7acRQlaHYMNtYZSuBr1chF5i4"},
{"content":{"body":"> <@keith_miller:matrix.org> But maybe that's different for other engines\n\nMy understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>But maybe that&#39;s different for other engines</blockquote></mx-reply>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations","m.mentions":{"user_ids":["@keith_miller:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI"}},"msgtype":"m.text"},"ts":1718268297016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"},
{"content":{"body":"> <@rbuckton:matrix.org> My understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations\n\nsure but it creates other ones","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations</blockquote></mx-reply>sure but it creates other ones","m.mentions":{"user_ids":["@rbuckton:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"}},"msgtype":"m.text"},"ts":1718268312639,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aAm1xa1AO8ammq5u7juX4NuOSTL-G0MOYkl9Cc_cpMc"},
{"content":{"body":"it's also to address the behavior injection concerns from a design/correctness perspective","m.mentions":{},"msgtype":"m.text"},"ts":1718268325059,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wvOPetegBosnlXwnwyGF6c2tTPo_5TeMxIwT5_saaN0"},
{"content":{"body":"Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T… lots of ways to do it in VM implementations.","m.mentions":{},"msgtype":"m.text"},"ts":1718268356420,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$FpRKCtzXR6jXKWaw5T6IaSPn3ybbh1f6P51DZm5NAt0"},
{"content":{"body":" * Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T…) lots of ways to do it in VM implementations.","m.mentions":{},"m.new_content":{"body":"Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T…) lots of ways to do it in VM implementations.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FpRKCtzXR6jXKWaw5T6IaSPn3ybbh1f6P51DZm5NAt0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718268394449,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$oOt8Okl5WwvTpnDtqkOq1vvWpN1csTwjalBv_JCSdLA"},
{"content":{"body":"> <@rbuckton:matrix.org> My understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations\n\nThat sounds... just worse than even a `Symbol.add` but I'd have to hear the exact performance objections. I would imagine `Symbol.add` would behave the same as a getter in the IC. Most engines already have the infrastructure for getters so I'm a bit surprised such code couldn't be generalized for operators.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations</blockquote></mx-reply>That sounds... just worse than even a <code>Symbol.add</code> but I'd have to hear the exact performance objections. I would imagine <code>Symbol.add</code> would behave the same as a getter in the IC. Most engines already have the infrastructure for getters so I'm a bit surprised such code couldn't be generalized for operators.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"}},"msgtype":"m.text"},"ts":1718268515449,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$1Rbv1jiHld71Df3hbwFGR2kxjrUKSdgoWRW0xE_PR1w"},
{"content":{"body":"When I put together my old struct proposal I was looking for a way to unify the mechanics for R&T, a Decimal primitive, maybe Temporal as a \"primitive\", and other user-defined \"primitive\" types.","m.mentions":{},"msgtype":"m.text"},"ts":1718268558936,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_zjypp7q9V68IATG2Vc9eaDp2E4R-PurL_DaIQtpY-4"},
{"content":{"body":"`with operators from` means a lot of requirements for bookkeeping. But it's easy to see when you're *not* inside of those things and you can use the ICs which *don't* have support for the new operator overloaded things","format":"org.matrix.custom.html","formatted_body":"<code>with operators from</code> means a lot of requirements for bookkeeping. But it's easy to see when you're <em>not</em> inside of those things and you can use the ICs which <em>don't</em> have support for the new operator overloaded things","m.mentions":{},"msgtype":"m.text"},"ts":1718268575212,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw"},
{"content":{"body":"If we did have operator overloading, I'd much rather restrict it to a specific domain of values than support `with operators from`. `with operators from` would be a mess for TypeScript.","format":"org.matrix.custom.html","formatted_body":"If we did have operator overloading, I'd much rather restrict it to a specific domain of values than support <code>with operators from</code>. <code>with operators from</code> would be a mess for TypeScript.","m.mentions":{},"msgtype":"m.text"},"ts":1718268686083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-J_TISvcXeesZ69UXa-5og5u7bOTTxVwCYOeVJqVOrw"},
{"content":{"body":"> <@littledan:matrix.org> `with operators from` means a lot of requirements for bookkeeping. But it's easy to see when you're *not* inside of those things and you can use the ICs which *don't* have support for the new operator overloaded things\n\nThe whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><code>with operators from</code> means a lot of requirements for bookkeeping. But it's easy to see when you're <em>not</em> inside of those things and you can use the ICs which <em>don't</em> have support for the new operator overloaded things</blockquote></mx-reply>The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw"}},"msgtype":"m.text"},"ts":1718268749331,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic"},
{"content":{"body":"And that's just type checking, we wouldn't downlevel operator overloading it would be to expensive based on our \"no type-based emit\" policy.","m.mentions":{},"msgtype":"m.text"},"ts":1718268774703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CidnGBXetJoB_IQteRT6TAiBpFB7BIWW4EmiYPScA80"},
{"content":{"body":"But, that said, I'm only intimately familiar with JSC's ICs","m.mentions":{},"msgtype":"m.text"},"ts":1718268776601,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$pvC7f_xU4b5ot7w4zAt6_qYltbQ9NYLiJoA1--9487o"},
{"content":{"body":"> <@keith_miller:matrix.org> The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.\n\noh sorry I don't mean ICs, I guess I mean paths in the interpreter or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.</blockquote></mx-reply>oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic"}},"msgtype":"m.text"},"ts":1718268792605,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80"},
{"content":{"body":"I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments *and then* perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.","format":"org.matrix.custom.html","formatted_body":"I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments <em>and then</em> perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.","m.mentions":{},"msgtype":"m.text"},"ts":1718268830348,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c"},
{"content":{"body":"> <@littledan:matrix.org> oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something\n\nAh ok. Assuming we don't allow primitive operator overloading I don't think that would be an issue. At least for JSC.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something</blockquote></mx-reply>Ah ok. Assuming we don't allow primitive operator overloading I don't think that would be an issue. At least for JSC.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80"}},"msgtype":"m.text"},"ts":1718268856208,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zqbHbiPJqJgQwjFMglmNXNg1tmwb83A98uIJRNYGrX4"},
{"content":{"body":"Once you're in the non-primitive not-equal pointer case you're already doing slow stuff","m.mentions":{},"msgtype":"m.text"},"ts":1718268934275,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JgTtpLV1bhl6c38v5rE2StwDDwydbn3zcHXnZoOsf_k"},
{"content":{"body":"Again, that's just JSC not necessarily other engines","m.mentions":{},"msgtype":"m.text"},"ts":1718268964364,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$52wjwoQbQ3ZAKr5IPXdnQO2rG9toH1Bdb8P0-DFvgmE"},
{"content":{"body":"Oh, also, my old struct proposal required \"typed\" field definitions to handle cases like size, alignment, packing, etc. You could, in theory, support `===` using the memory contents of the value.","format":"org.matrix.custom.html","formatted_body":"Oh, also, my old struct proposal required \"typed\" field definitions to handle cases like size, alignment, packing, etc. You could, in theory, support <code>===</code> using the memory contents of the value.","m.mentions":{},"msgtype":"m.text"},"ts":1718268978855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T4g1g7vdHJCTz3m2Xa7le0h4LL1v4jlJ4N3Gcs86CF8"},
{"content":{"body":"> <@aardvark179:matrix.org> I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments *and then* perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.\n\nWhy is it necessary to do coercions?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments <em>and then</em> perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.</blockquote></mx-reply>Why is it necessary to do coercions?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c"}},"msgtype":"m.text"},"ts":1718269041796,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8"},
{"content":{"body":"> <@keith_miller:matrix.org> Why is it necessary to do coercions?\n\nSo at the moment we do `GetValue` and then `ToPrimitive` (which of course we don't actually need to do most of the time).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Why is it necessary to do coercions?</blockquote></mx-reply>So at the moment we do <code>GetValue</code> and then <code>ToPrimitive</code> (which of course we don't actually need to do most of the time).","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8"}},"msgtype":"m.text"},"ts":1718269115118,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY"},
{"content":{"body":"Michael Ficarra\n\nI was going to answer that this is more of a question for the existing stage 3 proposal, that adds the concept of \"sources\" and wasm is already using it. This new proposal is only for defining what a JS source is.\n\nHowever, Guy can probably still answer that (I know well how this proposal works for JS, but my Wasm knowledge is more limited 😛)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a></p>\n<p>I was going to answer that this is more of a question for the existing stage 3 proposal, that adds the concept of \"sources\" and wasm is already using it. This new proposal is only for defining what a JS source is.</p>\n<p>However, Guy can probably still answer that (I know well how this proposal works for JS, but my Wasm knowledge is more limited 😛)</p>\n","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1718269164798,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YrgFSACuZlvsKk_U3vjiVZ_CupmCLxTkJq64TOAvlmU"},
{"content":{"body":"yeah but this is the first to introduce an import syntax, right?","msgtype":"m.text"},"ts":1718269201243,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8"},
{"content":{"body":"> <@aardvark179:matrix.org> So at the moment we do `GetValue` and then `ToPrimitive` (which of course we don't actually need to do most of the time).\n\nThe fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So at the moment we do <code>GetValue</code> and then <code>ToPrimitive</code> (which of course we don't actually need to do most of the time).</blockquote></mx-reply>The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY"}},"msgtype":"m.text"},"ts":1718269207166,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q"},
{"content":{"body":"> <@michaelficarra:matrix.org> yeah but this is the first to introduce an import syntax, right?\n\nNo, that's already in stage 3 and being implemented","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah but this is the first to introduce an import syntax, right?</blockquote></mx-reply>No, that's already in stage 3 and being implemented","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8"}},"msgtype":"m.text"},"ts":1718269216894,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Idi_NCl2X9qhBYGjeUdOnMn2DdbClNufOqNtlr3Cj34"},
{"content":{"body":"This only defines what using that syntax for importing JS files does","m.mentions":{},"msgtype":"m.text"},"ts":1718269228047,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YuxWkfY-H2aBGPu9Eo0O5YF3BiXdJJvWtGF1Pwj8ME8"},
{"content":{"body":"oh maybe I'm confused","msgtype":"m.text"},"ts":1718269240323,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$F8V83ZPYBc8kr_H6WvGnr_6j6DWlP65MmiNCTdmOtpY"},
{"content":{"body":"can you send me a link?","msgtype":"m.text"},"ts":1718269243160,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9XilbcOw01TczsFfSY4BrHdG08EftEf7VFBS8YZIbiI"},
{"content":{"body":"> <@aardvark179:matrix.org> The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.\n\nAh, yeah, I see. I would expect we would do the coercion after but maybe that causes problems?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.</blockquote></mx-reply>Ah, yeah, I see. I would expect we would do the coercion after but maybe that causes problems?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q"}},"msgtype":"m.text"},"ts":1718269251800,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Ra4X8OqPc--vkfchuGQV1KKD0SKYX758uVoJ7bVQ2oI"},
{"content":{"body":"there's so many of these module proposals","msgtype":"m.text"},"ts":1718269254411,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ"},
{"content":{"body":"Stage 3: https://github.com/tc39/proposal-source-phase-imports\nthis: https://github.com/tc39/proposal-esm-phase-imports/","m.mentions":{},"msgtype":"m.text"},"ts":1718269261439,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XbvaRHMWiERDbN9jDWlbqTFVm9M9qivFoHypjBTkQr4"},
{"content":{"body":"> <@michaelficarra:matrix.org> there's so many of these module proposals\n\nSorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>there&#39;s so many of these module proposals</blockquote></mx-reply>Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ"}},"msgtype":"m.text"},"ts":1718269301528,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅\n\nI'm legitimately still confused 😭","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅</blockquote></mx-reply>I&#39;m legitimately still confused 😭","m.relates_to":{"m.in_reply_to":{"event_id":"$XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0"}},"msgtype":"m.text"},"ts":1718269489206,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'm legitimately still confused 😭\n\nLet's talk about that during lunch? :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I'm legitimately still confused 😭</blockquote></mx-reply>Let's talk about that during lunch? :)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U"}},"msgtype":"m.text"},"ts":1718269517327,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Let's talk about that during lunch? :)\n\nyes, please help me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />Let's talk about that during lunch? :)</blockquote></mx-reply>yes, please help me","m.relates_to":{"m.in_reply_to":{"event_id":"$cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c"}},"msgtype":"m.text"},"ts":1718269535801,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU"},
{"content":{"body":"> <@michaelficarra:matrix.org> yes, please help me\n\nwould love to join this session!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yes, please help me</blockquote></mx-reply>would love to join this session!","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU"}},"msgtype":"m.text"},"ts":1718269691432,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$J0EKGOe1b1JPtcQ8K7olw9Xl7SE0yAQhBPXje76vH7s"},
{"content":{"body":"Could someone from Zoom plz. post the slide deck link, here?","m.mentions":{},"msgtype":"m.text"},"ts":1718272870052,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$xmapRrphukMhA5VUklw5gVnnpIk-zbOxjJOXmYnS72Y"},
{"content":{"body":"cc Ben ","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@benallen:igalia.com\">Ben</a>","m.mentions":{"user_ids":["@benallen:igalia.com"]},"msgtype":"m.text"},"ts":1718273336273,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$1t1ewRG9LRqM3P8UqlfDfgjnyFHwB3NTtfsBu37pGYQ"},
{"content":{"body":"https://notes.igalia.com/p/pj5uX_5nC#/","m.mentions":{},"msgtype":"m.text"},"ts":1718273354498,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$GrfOyTpKG4QwIPpKnpL15Md2InH197cj1wPKSzp675Y"},
{"content":{"body":"Going back through meeting notes I have found the first reference to operator overloading and decimal [here](https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md) in section 9.iv.b \"Decimal for stage 0\". keith_miller . ","format":"org.matrix.custom.html","formatted_body":"Going back through meeting notes I have found the first reference to operator overloading and decimal <a href=\"https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md\">here</a> in section 9.iv.b \"Decimal for stage 0\". <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> .","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1718273822521,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE"},
{"content":{"body":"> <@aardvark179:matrix.org> Going back through meeting notes I have found the first reference to operator overloading and decimal [here](https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md) in section 9.iv.b \"Decimal for stage 0\". keith_miller .\n\nIt's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Going back through meeting notes I have found the first reference to operator overloading and decimal <a href=\"https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md\">here</a> in section 9.iv.b \"Decimal for stage 0\". <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> .</blockquote></mx-reply>It's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html","m.mentions":{"user_ids":["@aardvark179:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE"}},"msgtype":"m.text"},"ts":1718274400347,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nabhOJDnwJUUe7GYd9u5s_vKft63UwXvxAJy3OrdTxQ"},
{"content":{"body":"And then https://web.archive.org/web/20161227042517/http://wiki.ecmascript.org/doku.php?id=proposals:operators some years later","m.mentions":{},"msgtype":"m.text"},"ts":1718274452601,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JExiLrQ376Jt5Ruoje4zwWQ-cm1wo__8miN-zdo-43w"},
{"content":{"body":"the problem with underscore is that you can't avoid shadowing an outer underscore variable","msgtype":"m.text"},"ts":1718274810164,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AUSLuOu4IvDnMId3_hbLCEtucrIh3CEJJSs4SZVndww"},
{"content":{"body":"void doesn't have this problem","msgtype":"m.text"},"ts":1718274830340,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8RE2Ambsl9owqGr2FoEWz5qqz2OeoVhQGHdI5rFbD7k"},
{"content":{"body":"like I get the people who want underscore for aesthetics, but it's *technically* strictly worse","format":"org.matrix.custom.html","formatted_body":"like I get the people who want underscore for aesthetics, but it&#39;s <i data-md=\"*\">technically</i> strictly worse","msgtype":"m.text"},"ts":1718274853459,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$b5exZHbU0YegkjD8jkxcWRxaYA-Z_uyulawFWavhmaA"},
{"content":{"body":"get a custom ligature font that convers `void` to `_`","format":"org.matrix.custom.html","formatted_body":"get a custom ligature font that convers <code>void</code> to <code>_</code>","m.mentions":{},"msgtype":"m.text"},"ts":1718274892928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_WS92L5_LosBkLBdlgJ3T4FLJBF8BvKas6yB-ibZ6zM"},
{"content":{"body":" * get a custom ligature font that converts `void` to `_`","format":"org.matrix.custom.html","formatted_body":" * get a custom ligature font that converts <code>void</code> to <code>_</code>","m.mentions":{},"m.new_content":{"body":"get a custom ligature font that converts `void` to `_`","format":"org.matrix.custom.html","formatted_body":"get a custom ligature font that converts <code>void</code> to <code>_</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_WS92L5_LosBkLBdlgJ3T4FLJBF8BvKas6yB-ibZ6zM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718274901009,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aE4kXjdg0w9e3M890qSqu00ol0YlrPxlH9kjr0fRNPI"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> It's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html\n\nOh yeah, that was just the first ref I could find to operator overloading with reference to the decimal proposal, with a very FLT like comment\n> I was going to propose operator overloading this meeting but didnt have time to finish it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nabhOJDnwJUUe7GYd9u5s_vKft63UwXvxAJy3OrdTxQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>It's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html</blockquote></mx-reply><p>Oh yeah, that was just the first ref I could find to operator overloading with reference to the decimal proposal, with a very FLT like comment</p>\n<blockquote>\n<p>I was going to propose operator overloading this meeting but didnt have time to finish it.</p>\n</blockquote>\n","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nabhOJDnwJUUe7GYd9u5s_vKft63UwXvxAJy3OrdTxQ"}},"msgtype":"m.text"},"ts":1718274952404,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$hKFXPAwZA58TEnEOyI1c8rtbvq_o6ics5fwVxv9xLpw"},
{"content":{"body":"Michael Ficarra: i really do not think `void` operator is a thing JS developers know about?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i really do not think <code>void</code> operator is a thing JS developers know about?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1718275188328,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QrO2GJakpvL6WbhPGwjkQWXsTaFI1Kr3KlnotRfFfU8"},
{"content":{"body":"like the extent to people will know about is using (void 0) as an incantation for undefined","m.mentions":{},"msgtype":"m.text"},"ts":1718275201089,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S2j_7Xa9d-Nz6ogDlacVG0Mc_k01MDMuqzS7XiH94K0"},
{"content":{"body":"Sometimes we get questions in Babel about what's that `void 0` think that we generate so much in our output","format":"org.matrix.custom.html","formatted_body":"Sometimes we get questions in Babel about what's that <code>void 0</code> think that we generate so much in our output","m.mentions":{},"msgtype":"m.text"},"ts":1718275229477,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ocBUHbhCFGXroad7lLbj92WdGjuCqQ5zLHevTo0hZZ4"},
{"content":{"body":" * Sometimes we get questions in Babel about what's that `void 0` thing that we generate so much in our output","format":"org.matrix.custom.html","formatted_body":" * Sometimes we get questions in Babel about what's that <code>void 0</code> thing that we generate so much in our output","m.mentions":{},"m.new_content":{"body":"Sometimes we get questions in Babel about what's that `void 0` thing that we generate so much in our output","format":"org.matrix.custom.html","formatted_body":"Sometimes we get questions in Babel about what's that <code>void 0</code> thing that we generate so much in our output","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ocBUHbhCFGXroad7lLbj92WdGjuCqQ5zLHevTo0hZZ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718275235792,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3YN_VrlM3HR5DlOu59XgOotCvpwNBjvvMWYb9EDYMjg"},
{"content":{"body":"feeling a lot less imposter syndrome having just googled \"mdn void operator\"","m.mentions":{},"msgtype":"m.text"},"ts":1718275235796,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$wP1EaNj-0pAXGZVUEjxDo0mdBSJrU2UOcxrb4x9ASaA"},
{"content":{"body":" * like the extent to which people will know about it is using (void 0) as an incantation for undefined","m.mentions":{},"m.new_content":{"body":"like the extent to which people will know about it is using (void 0) as an incantation for undefined","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$S2j_7Xa9d-Nz6ogDlacVG0Mc_k01MDMuqzS7XiH94K0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718275240496,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4oQCLDtheX5HOJYkhcKE6pWE8ZRBMgotkuLEz_LVmQM"},
{"content":{"body":"https://github.com/search?q=%2F%5Cbvoid+%5Ba-z_%5D%2F+language%3AJavaScript+&type=code","m.mentions":{},"msgtype":"m.text"},"ts":1718275275505,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ZhV16lQIRikMJvgQjCmbclF9mmVU-YZfe583liC9p8M"},
{"content":{"body":"looks like mostly minified code, but there is definitely intentional use","m.mentions":{},"msgtype":"m.text"},"ts":1718275339101,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$_EpiJrF5UsvilkaNmH7E5naey6elgQpbFtbzmzOVnyo"},
{"content":{"body":"other than void 0, void is often used in front of IIFEs or in arrow concise bodies","msgtype":"m.text"},"ts":1718275340591,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vI9up9FMK5HAsIZ56Fe9J7RQvtsSn2vKG1JLM9zbs4Q"},
{"content":{"body":"Those results are mind blowing","m.mentions":{},"msgtype":"m.text"},"ts":1718275397821,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$BNThy8VZSqyp66PRaKd9j3IAC9TSEaQyoLSsnJpAGbE"},
{"content":{"body":"There are so many usages of `void e` in the catch block in a statement position","format":"org.matrix.custom.html","formatted_body":"There are so many usages of <code>void e</code> in the catch block in a statement position","m.mentions":{},"msgtype":"m.text"},"ts":1718275409784,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HrEHid-rjJq3ZVGr2DvTnvFeQxGoKy_FreDZ0vF-R90"},
{"content":{"body":"I assume it's to workaround bad linters before that the catch binding was optional","m.mentions":{},"msgtype":"m.text"},"ts":1718275422699,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3OoSFvWu_UqxhFFkDiY_2TVJRqyar4TJttjVib25rVs"},
{"content":{"body":"Than, many of the results \"for JS\" are actually C code 😛","m.mentions":{},"msgtype":"m.text"},"ts":1718275439674,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dSy6IM_EkWrk8GI7PRrH8EHanpuAi3_908b4qFVDwy8"},
{"content":{"body":"this is a really good example from those search results","msgtype":"m.text"},"ts":1718275471885,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7cV4d860sZCaT08dRfy_ZsEvMvzMKKDwSBWe3RwOAvg"},
{"content":{"body":"yeah those results are quite surprising to me as well, fascinating","m.mentions":{},"msgtype":"m.text"},"ts":1718275472493,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8h8XSieG26ZfuIt_ke5e5pO1fgoAlGWGsNyb0zHbUtE"},
{"content":{"body":"`void undefined` at https://github.com/inspect-js/is-equal/blob/1b8f8f4ffe6e652b0bce57b4563237c90898b150/why.js#L244 🙃","format":"org.matrix.custom.html","formatted_body":"<code>void undefined</code> at https://github.com/inspect-js/is-equal/blob/1b8f8f4ffe6e652b0bce57b4563237c90898b150/why.js#L244 🙃","m.mentions":{},"msgtype":"m.text"},"ts":1718275566409,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$GygC4M8aDbbBtNBoOFIx7jGR047Y3NtDNiy5ZYLoaV4"},
{"content":{"body":"okay lol not *all* of them are good","format":"org.matrix.custom.html","formatted_body":"okay lol not <i data-md=\"*\">all</i> of them are good","msgtype":"m.text"},"ts":1718275601946,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vbPLs7Gf5CBZonve5KtRae91H3RsvDMBNO1_uUJ24_k"},
{"content":{"body":"who knows, maybe there's a `var undefined` in there somewhere","format":"org.matrix.custom.html","formatted_body":"who knows, maybe there&#39;s a <code data-md=\"`\">var undefined</code> in there somewhere","msgtype":"m.text"},"ts":1718275630791,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CbLdkX9lYq4zHfXvdGM6QV1jYsX_7JM7LhgYGV0QTJk"},
{"content":{"body":"> <@michaelficarra:matrix.org> sent an image.\n\nIf you look at this file it's clearly code that has been minified and then re-formatted","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hXrlwhnC6Ers3o8QEF18bA2Mfnxbaw2fXR4_2j78gNk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>sent an image.</blockquote></mx-reply>If you look at this file it's clearly code that has been minified and then re-formatted","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hXrlwhnC6Ers3o8QEF18bA2Mfnxbaw2fXR4_2j78gNk"}},"msgtype":"m.text"},"ts":1718275640446,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$w1OKluUQnSbo70LlVOwl7bpvWz0OA5P34R8ZrHA9wPo"},
{"content":{"body":"https://github.com/everthis/tpp_script/blob/1e4b0f02adea066ccdb21df4a857ec9e2fe2fcd0/um.js#L857","m.mentions":{},"msgtype":"m.text"},"ts":1718275646242,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ydBpOERPJ10AF3oWMjHDazpGfNWDvsKLDIj1YrPb3GA"},
{"content":{"body":"lol `um.js` is a great name","format":"org.matrix.custom.html","formatted_body":"lol <code>um.js</code> is a great name","m.mentions":{},"msgtype":"m.text"},"ts":1718275693598,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S6GD0Dz7kE-liKYeKKtmQ2GMW9BN5MwHinTVSI-jSx4"},
{"content":{"body":" * https://github.com/everthis/tpp_script/blob/1e4b0f02adea066ccdb21df4a857ec9e2fe2fcd0/um.js#L1219","m.mentions":{},"m.new_content":{"body":"https://github.com/everthis/tpp_script/blob/1e4b0f02adea066ccdb21df4a857ec9e2fe2fcd0/um.js#L1219","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ydBpOERPJ10AF3oWMjHDazpGfNWDvsKLDIj1YrPb3GA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718275702778,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OHWmDMvQx-ZIixILdMyvIYzFQq0QXEeVwnzFab4rOfg"},
{"content":{"body":"I like that the two most interesting examples are a `why.js` file and an `um.js` file","format":"org.matrix.custom.html","formatted_body":"I like that the two most interesting examples are a <code>why.js</code> file and an <code>um.js</code> file","m.mentions":{},"msgtype":"m.text"},"ts":1718275732254,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$SP0CAA96dbWxSRfkJ0Dh3_CGAwByvZNxYm4Q5hoZKRs"},
{"content":{"body":"I searched over some large JS codebases I've worked on and I didn't find any references to `void`, except where it is used in TypeScript to mean \"this function does not return a value\"","format":"org.matrix.custom.html","formatted_body":"I searched over some large JS codebases I've worked on and I didn't find any references to <code>void</code>, except where it is used in TypeScript to mean \"this function does not return a value\"","m.mentions":{},"msgtype":"m.text"},"ts":1718275904171,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$vTn4HImQeAV7-rzDtlWHd2O0IP2vI_fIagDaGG-sZLE"},
{"content":{"body":"To explicitly not want to handle a promise https://typescript-eslint.io/rules/no-floating-promises/ `void somePromiseChain`","format":"org.matrix.custom.html","formatted_body":"To explicitly not want to handle a promise https://typescript-eslint.io/rules/no-floating-promises/ <code>void somePromiseChain</code>","m.mentions":{},"msgtype":"m.text"},"ts":1718275913524,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HhNkW6_dscfZdr44Q9pJuClKlf280lK4jEK7v4kDCK8"},
{"content":{"body":"`void undefined` at https://github.com/inspect-js/is-equal/blob/1b8f8f4ffe6e652b0bce57b4563237c90898b150/why.js#L244 🙃","format":"org.matrix.custom.html","formatted_body":"<code>void undefined</code> at https://github.com/inspect-js/is-equal/blob/1b8f8f4ffe6e652b0bce57b4563237c90898b150/why.js#L244 🙃","m.mentions":{},"msgtype":"m.text"},"ts":1718276181567,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$w2ZjZGea4onvKs9zUc3ZXOKffPmjS8__n4vHYFDQb8w"},
{"content":{"body":"> You already have to look into your object to figure out if it's a string or BigInt though\nI don't think that is true for SpiderMonkey, their tagging includes that info AFAIK","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>You already have to look into your object to figure out if it's a string or BigInt though<br>I don't think that is true for SpiderMonkey, their tagging includes that info AFAIK</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$cUo7OQP8ECpPPOCFQJ8xUmopy6NnyTrslWjxLzzZeNE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718276194536,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2RmGWthAGDqTI8bU_HoT8tDrh95YI9exSZ6_4PEpm8w"},
{"content":{"body":" * > You already have to look into your object to figure out if it's a string or BigInt though\n\nI don't think that is true for SpiderMonkey, their tagging includes that info AFAIK","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>You already have to look into your object to figure out if it's a string or BigInt though</p>\n</blockquote>\n<p>I don't think that is true for SpiderMonkey, their tagging includes that info AFAIK</p>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.new_content":{"body":"> You already have to look into your object to figure out if it's a string or BigInt though\n\nI don't think that is true for SpiderMonkey, their tagging includes that info AFAIK","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>You already have to look into your object to figure out if it's a string or BigInt though</p>\n</blockquote>\n<p>I don't think that is true for SpiderMonkey, their tagging includes that info AFAIK</p>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2RmGWthAGDqTI8bU_HoT8tDrh95YI9exSZ6_4PEpm8w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718276199544,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uE7ou2LuAAGq3CG8tasMqyXt8nhlF6r9RzEf5AnQb7k"},
{"content":{"body":"belt and braces","m.mentions":{},"msgtype":"m.text"},"ts":1718276241970,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cfzYHrn7-dKMOTWjfyR1uYKtCD3nYiwihgpzKRYSXAk"},
{"content":{"body":"I think I've seen Java code with annotations to suppress unnecessary type casts, which feels similar.","m.mentions":{},"msgtype":"m.text"},"ts":1718276319345,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$c3ZmFZO1rTGn9AJjf_RUHcqSgaWd87nd9-tdJAGWQ9w"},
{"content":{"body":"note: we'll need to merge https://github.com/tc39/notes/pull/326/files for the meeting notes to pass CI when that time comes","m.mentions":{},"msgtype":"m.text"},"ts":1718277018985,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UQN5gfVYdReVRIz0Z-AMCY_PmzbD57HW-BKo9JnzXRw"},
{"content":{"body":"is that who was just speaking?","msgtype":"m.text"},"ts":1718277060416,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$prTxNH9v6ZqHZyDbxNYA7-Ff_sjn2mWQ0FVCzrQA6c4"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1718277067285,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xbBNKPK77rvHv75kovu2C9yiYJLggKWIHBkBtvf_Kfk"},
{"content":{"body":"is there any reason not to just merge it right away?","m.mentions":{},"msgtype":"m.text"},"ts":1718277102765,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$9yUDyXRMmMsjeGAa_G9Es3u-R2VDxFg5Z_seEFnrU4k"},
{"content":{"body":"> <@usharma:igalia.com> is there any reason not to just merge it right away?\n\nhttps://github.com/tc39/Admin-and-Business/issues/442 is still pending","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9yUDyXRMmMsjeGAa_G9Es3u-R2VDxFg5Z_seEFnrU4k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>is there any reason not to just merge it right away?</blockquote></mx-reply>https://github.com/tc39/Admin-and-Business/issues/442 is still pending","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9yUDyXRMmMsjeGAa_G9Es3u-R2VDxFg5Z_seEFnrU4k"}},"msgtype":"m.text"},"ts":1718277139931,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WWSu9BW_XoM0LEMOm7cuwZyI4lVXziytP4lz2iAFYpE"},
{"content":{"body":"this issue means they were accepted as IE","m.mentions":{},"msgtype":"m.text"},"ts":1718277163545,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$23ctWPPecjGEuU7AN1-9A6_rnKe57RXRljN2dRNHo-k"},
{"content":{"body":"and are being onboarded","m.mentions":{},"msgtype":"m.text"},"ts":1718277168373,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$rNh0EGAEnilOwAhUSyv98J1t7OerRuedqrRRCL9bma8"},
{"content":{"body":"done","m.mentions":{},"msgtype":"m.text"},"ts":1718277195137,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$CbVEeXDPmK3KUIjjou3TdQweCpBNpgV3_0Jul5Xsv3M"},
{"content":{"body":"resume at hh:40","m.mentions":{},"msgtype":"m.text"},"ts":1718277889933,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$EfDrwIQM27ei4CiZkq3SpjlFd5OdXj3KmvvXzl-7mYg"},
{"content":{"body":"@usharma:igalia.com please advance the queue so I can reply","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40usharma%3Aigalia.com\">@ryzokuken (TC39 🇫🇮)</a> please advance the queue so I can reply","msgtype":"m.text"},"ts":1718279162022,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vy8SZFzRoSbjqCMdQ64z3eZq_Lk6lUqQn77BzKPm1rk"},
{"content":{"body":"Michael Ficarra to waldemar's?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> to waldemar's?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1718279194979,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$favqUbT6VdtYX2jn4gPYHDXQWUSSpT0hUJIrC7b1PSM"},
{"content":{"body":"ah yes nvm","m.mentions":{},"msgtype":"m.text"},"ts":1718279200982,"senderName":"ryzokuken (TC39 🇫🇮)","senderId":"@usharma:igalia.com","id":"$xHn3ytYNPKdj4u45cLlbS0JG6kAUm_IVBC-YL0gOzlM"},
{"content":{"body":"yes that's the topic we're on","msgtype":"m.text"},"ts":1718279203099,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$syoMVyfZ6qvd2Zm1eSrkhkslPBVDStEWDp110muSXwc"},
{"content":{"body":"sounds like a good rule for the nascent guide to writing good spec text 🧐","m.mentions":{},"msgtype":"m.text"},"ts":1718279779971,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$6pYZ1tt7739o80k4SVeEykLHheKTj7futv495ul08KE"},
{"content":{"body":"I think the spec should not change meaning if you remove all green notes -- they should just clarify what you can otherwise infer","m.mentions":{},"msgtype":"m.text"},"ts":1718279979455,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Oah0M8i94APa_EsqVwhcIh3WYvfcjUQlgHi9g8Rr9kk"},
{"content":{"body":"@littledan:matrix.org please try not to jump queue topics like that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> please try not to jump queue topics like that","msgtype":"m.text"},"ts":1718280446426,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Sw1Au47I0Ue6byWU7Se00kPmp2XSzSCFq3e_G_IBvwg"},
{"content":{"body":"what? I was on the queue","m.mentions":{},"msgtype":"m.text"},"ts":1718280459927,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BqlofWbWnIxXsU66KrSp8VI54XcKJ6AxnnSApRfp4Mk"},
{"content":{"body":"I really don't like when people read a TCQ topic and try to pre-reply to it, assuming what the person was going to say","msgtype":"m.text"},"ts":1718280467488,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3L_aWqv-ql-t5x81hm4wBTQAbXtHEXJqsL8e_yXxcr0"},
{"content":{"body":"sorry","m.mentions":{},"msgtype":"m.text"},"ts":1718280469107,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TLz3d-ZUOi6RiaAAUjxYqu9oTMUb44PIqGXax3Z06Cs"},
{"content":{"body":"it's also speaking out of turn IMO","msgtype":"m.text"},"ts":1718280480565,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QA1OyU6Gk7ZxcMIYpJ2WZd2ydY4Qn0al-PbFDfXdi6E"},
{"content":{"body":"you mean how I used replies?","m.mentions":{},"msgtype":"m.text"},"ts":1718280492390,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bJR5Hdxz2YT4zB1LOsLQ1WBha-BgpML5X9CZSSvxQHI"},
{"content":{"body":"OK I'll be more careful about that, thanks","m.mentions":{},"msgtype":"m.text"},"ts":1718280549225,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AVn4Cr5Dwwexjx8DPV52JWzAZrb4mfw0OGo-lv7NFJA"},
{"content":{"body":"if we have two topics, A and B, in TCQ in that order, a reply to A (or the submitter of topic A if different from B) shouldn't try to also address B before B has been introduced","msgtype":"m.text"},"ts":1718280554045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$t62sc9x-bKhSlYmWM8YNRbwoC0ubb0wqQALRWkOKqig"},
{"content":{"body":"oh, about testing? right, sorry I didn't want to presume what you were going to say, but yes my comment was off-topic for what I had put on the queue","m.mentions":{},"msgtype":"m.text"},"ts":1718280590514,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hb88dws4FqFd2LUcj4TB7KvAq8X6D-SmTDjCmrd1B7A"},
{"content":{"body":"yes, thank you","msgtype":"m.text"},"ts":1718280605595,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1v9weOPG2WDhLjveId-EbYpCrt_jDGlpf-wU1K5W1AA"},
{"content":{"body":"(I had wanted to make that point independently from whether I was responding to you, just with respect to what Shu and Keith seemed to be assuming about the implications of normative text)","m.mentions":{},"msgtype":"m.text"},"ts":1718280643489,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FOIaXrbne1Vrlvc7Uk7U67SxS5ACWEuqpdq79G-vi9E"},
{"content":{"body":"I guess I don't understand the point of having normative text that has no requirement?","m.mentions":{},"msgtype":"m.text"},"ts":1718280699643,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$mhwKdt8VSq8DmwqvQaT5y7gHKVFRNg48pTTIiKrQNa8"},
{"content":{"body":"I have no hard feelings, it's just every time it happens, it makes me feel more pressure to fully express myself in the topic so nobody pre-replies to me with a misinterpretation of what I want to say","msgtype":"m.text"},"ts":1718280700890,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$N15xcx38x1vX1rJjud-wuRxdoIRQNlMdJsfT5c-5bgI"},
{"content":{"body":"> <@keith_miller:matrix.org> I guess I don't understand the point of having normative text that has no requirement?\n\nThe notes should be for context; reading the normative text should be enough to build an implementation, even if we can't have tests for it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mhwKdt8VSq8DmwqvQaT5y7gHKVFRNg48pTTIiKrQNa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I guess I don&#39;t understand the point of having normative text that has no requirement?</blockquote></mx-reply>The notes should be for context; reading the normative text should be enough to build an implementation, even if we can't have tests for it","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mhwKdt8VSq8DmwqvQaT5y7gHKVFRNg48pTTIiKrQNa8"}},"msgtype":"m.text"},"ts":1718280752189,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PsvN2QBxFptUEawiN5pF4-F_JAVl168L2XZt4rhtKhE"},
{"content":{"body":"And Atomics.pause _does_ have behavior, you just cannot test it within JS. Otherwise we wouldn't have this proposal at all","format":"org.matrix.custom.html","formatted_body":"And Atomics.pause <em>does</em> have behavior, you just cannot test it within JS. Otherwise we wouldn't have this proposal at all","m.mentions":{},"msgtype":"m.text"},"ts":1718280795349,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0KHrmm_WKW6pt4BNChskXQqWVwZPs_7uJrbuNSJy5nM"},
{"content":{"body":"> <@littledan:matrix.org> The notes should be for context; reading the normative text should be enough to build an implementation, even if we can't have tests for it\n\nI guess but how do you ever say if something meets the specification or not if it's subjective?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PsvN2QBxFptUEawiN5pF4-F_JAVl168L2XZt4rhtKhE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The notes should be for context; reading the normative text should be enough to build an implementation, even if we can't have tests for it</blockquote></mx-reply>I guess but how do you ever say if something meets the specification or not if it's subjective?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PsvN2QBxFptUEawiN5pF4-F_JAVl168L2XZt4rhtKhE"}},"msgtype":"m.text"},"ts":1718280828741,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$RVnmatMVYeHby1mZ92tbPwQfFk6DEeblsU-jNzqtTTs"},
{"content":{"body":"specs are allowed to say \"should\", it's not must or nothing. There's more that the spec can say than \"does this conform, yes or no\"","m.mentions":{},"msgtype":"m.text"},"ts":1718280876811,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WM3ZsIHm2zVap_bPbK2ThrMBk5_fk9IZ3vG8TVIL4wU"},
{"content":{"body":"these are just communication devices for humans","m.mentions":{},"msgtype":"m.text"},"ts":1718280896043,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_MwXhB1ymFbJpMJ57sudhTOLqZThuOCQX5ldkqrdWr8"},
{"content":{"body":"Example: step 7 of https://tc39.es/ecma262/#sec-suspendthisagent","m.mentions":{},"msgtype":"m.text"},"ts":1718280959971,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$PAx4_HLl3-q_54pXsvLe_fINt0u46yfiPUYFz7yVzfI"},
{"content":{"body":"It waits for some time","m.mentions":{},"msgtype":"m.text"},"ts":1718280963254,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$E5ZhUv33k08s6-4x06r-m8Uo9jNtiwL91xiU0GBlbEo"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Example: step 7 of https://tc39.es/ecma262/#sec-suspendthisagent\n\nDoing something like this would address what I asked for, and it would do it exactly in the form that Richard Gibson proposed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PAx4_HLl3-q_54pXsvLe_fINt0u46yfiPUYFz7yVzfI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Example: step 7 of https://tc39.es/ecma262/#sec-suspendthisagent</blockquote></mx-reply>Doing something like this would address what I asked for, and it would do it exactly in the form that <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a> proposed","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PAx4_HLl3-q_54pXsvLe_fINt0u46yfiPUYFz7yVzfI"}},"msgtype":"m.text"},"ts":1718281010160,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$iAuGCch8ss7Bmbh8c_4ktUomC8AbMLXEG3pFycPZDuU"},
{"content":{"body":"And the time in that case is implementation-defined (see step 24 of https://tc39.es/ecma262/#sec-dowait)","m.mentions":{},"msgtype":"m.text"},"ts":1718281067794,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SV-Hs6Vrjk_-208IgdH3hy8ox3WTfUKZcnsvtLjyWrY"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Example: step 7 of https://tc39.es/ecma262/#sec-suspendthisagent\n\nThat's definitively observable though. So it has actual requirements and is testable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PAx4_HLl3-q_54pXsvLe_fINt0u46yfiPUYFz7yVzfI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Example: step 7 of https://tc39.es/ecma262/#sec-suspendthisagent</blockquote></mx-reply>That's definitively observable though. So it has actual requirements and is testable.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PAx4_HLl3-q_54pXsvLe_fINt0u46yfiPUYFz7yVzfI"}},"msgtype":"m.text"},"ts":1718281087287,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CBd1wAyKRYqnTkrZ6CZ18fx1aYRAQ525ZHYEYvYC034"},
{"content":{"body":"what is p1/p2 in the slide?","m.mentions":{},"msgtype":"m.text"},"ts":1718281090718,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$XZapZ0hhR3bZb3YfkO3u25uTThfJWpP_zECdR0cegiE"},
{"content":{"body":"> <@haxjs:matrix.org> what is p1/p2 in the slide?\n\nprobably thinking of this and p","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XZapZ0hhR3bZb3YfkO3u25uTThfJWpP_zECdR0cegiE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>what is p1/p2 in the slide?</blockquote></mx-reply>probably thinking of this and p","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XZapZ0hhR3bZb3YfkO3u25uTThfJWpP_zECdR0cegiE"}},"msgtype":"m.text"},"ts":1718281103219,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SQapmlidOfqJoDOl3uZ_Tn5khHtMbp1ccvmFAzrlr4M"},
{"content":{"body":"I think it's a typo","m.mentions":{},"msgtype":"m.text"},"ts":1718281103996,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$QoxgwhADDOqqdoc6IY3EpKwK1pI520zweOlcOnl0JMk"},
{"content":{"body":"> <@haxjs:matrix.org> what is p1/p2 in the slide?\n\ncopy paste typo. `p1` is `this` and `p2` is `p`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XZapZ0hhR3bZb3YfkO3u25uTThfJWpP_zECdR0cegiE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>what is p1/p2 in the slide?</blockquote></mx-reply>copy paste typo. <code>p1</code> is <code>this</code> and <code>p2</code> is <code>p</code>","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XZapZ0hhR3bZb3YfkO3u25uTThfJWpP_zECdR0cegiE"}},"msgtype":"m.text"},"ts":1718281125368,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wMSTlybDzH5k_XGgoVfyiIVFatA4639FomOyDkb_aRM"},
{"content":{"body":"Yeah, this change was made by the IANA TZDB maintainers in 2015. \n\nOf all the intra-country merges, I do wish we could find some principled excuse to make this exception for my Quebcois friends (my current startup is based in Montreal) while not opening the door for 100+ other intra-country merges that are justified.\n\n","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718281389379,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$lycMpYDjF4nXhyMf8WQhmHGjPXNS8nQxgQGuZOJS198"},
{"content":{"body":"> <@keith_miller:matrix.org> That's definitively observable though. So it has actual requirements and is testable.\n\nThe text in `Atomics.pause` is outside the engine's or even OS's control in the third box. So would be impossible to do. Unless you want it to say is \"For integral numbers N, Atomics.pause(N) should *attempt to* wait at most as long as Atomics.pause(N+1).\"? Then I would agree that has some meaning.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CBd1wAyKRYqnTkrZ6CZ18fx1aYRAQ525ZHYEYvYC034?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>That's definitively observable though. So it has actual requirements and is testable.</blockquote></mx-reply>The text in <code>Atomics.pause</code> is outside the engine's or even OS's control in the third box. So would be impossible to do. Unless you want it to say is \"For integral numbers N, Atomics.pause(N) should <em>attempt to</em> wait at most as long as Atomics.pause(N+1).\"? Then I would agree that has some meaning.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CBd1wAyKRYqnTkrZ6CZ18fx1aYRAQ525ZHYEYvYC034"}},"msgtype":"m.text"},"ts":1718281394664,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$pawgmf-2cGhffH2ZuF3ROHd3vBQJLEOX7y6QGxbSnbw"},
{"content":{"body":"yes, I agree that this \"should\" needs to be super non-binding. \"should attempt to\" SGTM.","m.mentions":{},"msgtype":"m.text"},"ts":1718281436083,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LQIJby-motx0wOQ04ZY4-QbnWyin1WhgQUZg2aG67BQ"},
{"content":{"body":"Yes I would be ok with that text","m.mentions":{},"msgtype":"m.text"},"ts":1718281504091,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AhW7DJiuD9MUNgF2kM_WsmRusYBWn9MKkMiQqzwpqZQ"},
{"content":{"body":"The first box would have to be something like: \"Implementations are expected to implement a pause or yield instruction if *some version* of the best practices of the underlying architecture recommends such instructions in spin loops.\"","format":"org.matrix.custom.html","formatted_body":"The first box would have to be something like: \"Implementations are expected to implement a pause or yield instruction if <em>some version</em> of the best practices of the underlying architecture recommends such instructions in spin loops.\"","m.mentions":{},"msgtype":"m.text"},"ts":1718281508149,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$3eGTOeFJZBRb4UX31fX4EC5-HiopqBG3OGuecMAo9ho"},
{"content":{"body":"The context is that adding Zones in TZDB was originally done pretty much arbitrarily. And the volunteer maintainer (Paul Eggert) who has maintained for the last 15 years has been trying to prune it ever since, using a basic rule that if rules have been the same since 1/1/1970 then they get merged. ","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$lycMpYDjF4nXhyMf8WQhmHGjPXNS8nQxgQGuZOJS198"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718281545642,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$2P2i9Sre0INQM7SJWggdC7OVG-9ogb5FLF7w1ZcXUeE"},
{"content":{"body":"The question is: if you were to delete the green notes, would your implementation still behave the same as if you are implementing it by also taking the green notes into account?","m.mentions":{},"msgtype":"m.text"},"ts":1718281566116,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pqCnSOZ99BmgarzHFEl835rffLu13V6C4oWR3pzrYEE"},
{"content":{"body":"The answer should be \"yes\"","m.mentions":{},"msgtype":"m.text"},"ts":1718281569624,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LgIdkXMVkIGZ6cemLmDc47KQvWREILwZFlETwEXvsqw"},
{"content":{"body":"Since the best practices can change over time and the engine may not know the best practices for the particular CPU it's targeting","m.mentions":{},"msgtype":"m.text"},"ts":1718281575090,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$sXy1oWyn3jpdcg-0IVfGqbYcN3SMLSGBEwZo0VdQNEI"},
{"content":{"body":"If we have such auto correlation incantation, could it also apply to normal class?? 😃","m.mentions":{},"msgtype":"m.text"},"ts":1718281587374,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$APB9fJm-Mz5jNQ6tEsZE9hmBFRUSVIWmI1hJH4C4BE4"},
{"content":{"body":"> <@haxjs:matrix.org> If we have such auto correlation incantation, could it also apply to normal class?? 😃\n\nNo, how could it? Classes aren't shareable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$APB9fJm-Mz5jNQ6tEsZE9hmBFRUSVIWmI1hJH4C4BE4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>If we have such auto correlation incantation, could it also apply to normal class?? 😃</blockquote></mx-reply>No, how could it? Classes aren't shareable.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$APB9fJm-Mz5jNQ6tEsZE9hmBFRUSVIWmI1hJH4C4BE4"}},"msgtype":"m.text"},"ts":1718281624645,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9w-ieUKwx_-PypUH0FB7xfU3M6F3xeJ_3TDEtX38MtA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The question is: if you were to delete the green notes, would your implementation still behave the same as if you are implementing it by also taking the green notes into account?\n\nWhat if some implementation finds people get better performance if they differ from those notes?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pqCnSOZ99BmgarzHFEl835rffLu13V6C4oWR3pzrYEE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>The question is: if you were to delete the green notes, would your implementation still behave the same as if you are implementing it by also taking the green notes into account?</blockquote></mx-reply>What if some implementation finds people get better performance if they differ from those notes?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pqCnSOZ99BmgarzHFEl835rffLu13V6C4oWR3pzrYEE"}},"msgtype":"m.text"},"ts":1718281687102,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$0HC8yk6849YD8KJu2MhTuLw4PWA-gW6_rmH5oMsPe-k"},
{"content":{"body":"Should they be considered non-spec compliant?","m.mentions":{},"msgtype":"m.text"},"ts":1718281706174,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YIbxLk9lnxENi2WU0-Sv2gi6VsUv7nHonB1VZljz1ac"},
{"content":{"body":"Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations","m.mentions":{},"msgtype":"m.text"},"ts":1718281782410,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0AAjubv2A7ymwCDM1ZgiZe9pkqEN2DgUolDNi_jm40o"},
{"content":{"body":"The current spec text does not have enough info to hint what `N` is for","format":"org.matrix.custom.html","formatted_body":"The current spec text does not have enough info to hint what <code>N</code> is for","m.mentions":{},"msgtype":"m.text"},"ts":1718281796220,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wMezULs5VnwRFmib2B3Py91YGyDt7svLwTqIhL5iQ78"},
{"content":{"body":"Oh I misread","m.mentions":{},"msgtype":"m.text"},"ts":1718281815681,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jHtTUChZ-YC-a7N3ZModgJTmt4YgTER7Ho1SVrtqF7A"},
{"content":{"body":" * ~~Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations~~","m.mentions":{},"m.new_content":{"body":"~~Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations~~","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0AAjubv2A7ymwCDM1ZgiZe9pkqEN2DgUolDNi_jm40o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718281819588,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ErFDibuMmsW2ltgxTB6BrnkVdyUuAEtp5FdxyJhPj3s"},
{"content":{"body":" * <del>The current spec text does not have enough info to hint what `N` is for</del>","format":"org.matrix.custom.html","formatted_body":" * <del>The current spec text does not have enough info to hint what <code>N</code> is for</del>","m.mentions":{},"m.new_content":{"body":"<del>The current spec text does not have enough info to hint what `N` is for</del>","format":"org.matrix.custom.html","formatted_body":"<del>The current spec text does not have enough info to hint what <code>N</code> is for</del>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wMezULs5VnwRFmib2B3Py91YGyDt7svLwTqIhL5iQ78","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718281824397,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$L4rGX7i3giLQR_CrmVMSePtw4jaqOYPt0x6Yd1Ongt0"},
{"content":{"body":" * <del>Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations</del>","format":"org.matrix.custom.html","formatted_body":" * <del>Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations</del>","m.mentions":{},"m.new_content":{"body":"<del>Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations</del>","format":"org.matrix.custom.html","formatted_body":"<del>Assume that the person doing the implementation is infinitely smart and they can find all the possible optimizations</del>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0AAjubv2A7ymwCDM1ZgiZe9pkqEN2DgUolDNi_jm40o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718281830182,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AA_djoU6SXDSgGYJ2fzWPczs_8fwxhbfFJ18XoCJtiM"},
{"content":{"body":"> <@keith_miller:matrix.org> Should they be considered non-spec compliant?\n\nNo, violating a should is not non-compliant","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YIbxLk9lnxENi2WU0-Sv2gi6VsUv7nHonB1VZljz1ac?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Should they be considered non-spec compliant?</blockquote></mx-reply>No, violating a should is not non-compliant","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YIbxLk9lnxENi2WU0-Sv2gi6VsUv7nHonB1VZljz1ac"}},"msgtype":"m.text"},"ts":1718281839407,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-kjSQmmunNdEFEkNmkvsb8q7_Mioa_h2FY6y1zBdQEw"},
{"content":{"body":"But that doesn't mean that the spec text shouldn't describe the intention","m.mentions":{},"msgtype":"m.text"},"ts":1718281852443,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$NGBz7OgdHfcMuPyi8ZLxX5JxbUD1F3U6guDSzAO1EkM"},
{"content":{"body":" * But that doesn't mean that the spec text shouldn't clearly communicate the intention","m.mentions":{},"m.new_content":{"body":"But that doesn't mean that the spec text shouldn't clearly communicate the intention","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NGBz7OgdHfcMuPyi8ZLxX5JxbUD1F3U6guDSzAO1EkM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718281859116,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vf1TCkdhedvJ4ajuAdeERLan3VR0iAEiUHpNtbfEmTc"},
{"content":{"body":" * But that doesn't mean that the spec text shouldn't clearly communicate the intention / recommended behavior","m.mentions":{},"m.new_content":{"body":"But that doesn't mean that the spec text shouldn't clearly communicate the intention / recommended behavior","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NGBz7OgdHfcMuPyi8ZLxX5JxbUD1F3U6guDSzAO1EkM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718281912234,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$O9accwgxH9EGraSf5pSpUIp-2y0mfylWt9fDBVjlSLo"},
{"content":{"body":"rbuckton: is the manual correlation token the same as Mechanism 1? or was Mechanism 1 \"manually add the prototype to all incoming shared structs\"? I couldn't quite tell","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: is the manual correlation token the same as Mechanism 1? or was Mechanism 1 \"manually add the prototype to all incoming shared structs\"? I couldn't quite tell","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1718281936079,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$899M-lAh38XJ4DBIIZLczr8skK_fMu9urXsGe03BMIE"},
{"content":{"body":"Not quite the same, no","m.mentions":{},"msgtype":"m.text"},"ts":1718281953591,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OGVJA2i6syZOVyAbheFjd99LA-sj2LEkffp8_V5sHio"},
{"content":{"body":"ok, so then i don't understand Mechanism 1 I think","m.mentions":{},"msgtype":"m.text"},"ts":1718282004120,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$aqHTRSHUJDsNIYW0FxCchAOR8Jki0lkgaqEnaKUj8o4"},
{"content":{"body":"> <@keith_miller:matrix.org> The first box would have to be something like: \"Implementations are expected to implement a pause or yield instruction if *some version* of the best practices of the underlying architecture recommends such instructions in spin loops.\"\n\nsure this sounds fine. Honestly I think the current text has enough caveats but no harm adding more.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3eGTOeFJZBRb4UX31fX4EC5-HiopqBG3OGuecMAo9ho?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>The first box would have to be something like: \"Implementations are expected to implement a pause or yield instruction if <em>some version</em> of the best practices of the underlying architecture recommends such instructions in spin loops.\"</blockquote></mx-reply>sure this sounds fine. Honestly I think the current text has enough caveats but no harm adding more.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3eGTOeFJZBRb4UX31fX4EC5-HiopqBG3OGuecMAo9ho"}},"msgtype":"m.text"},"ts":1718282004548,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3FKNeL7z9f99z66l0D1kJoOJJMUZb_E7nOTC45l6eaA"},
{"content":{"body":"If that's the consensus then I don't have a problem with normative should. Although, I would prefer a recommends but maybe should is well defined enough in TC39?","m.mentions":{},"msgtype":"m.text"},"ts":1718282043513,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$v1H2gYPkRMI759tm8Ln44_MpFsg71P9RVPCasFDG38Q"},
{"content":{"body":"> <@lucacasonato:matrix.org> ok, so then i don't understand Mechanism 1 I think\n\nno, it's like, at startup, thread A sends a message to thread B containing some magical reference to the Point class, and thread B hooks up that reference to its Point class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aqHTRSHUJDsNIYW0FxCchAOR8Jki0lkgaqEnaKUj8o4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>ok, so then i don&#39;t understand Mechanism 1 I think</blockquote></mx-reply>no, it's like, at startup, thread A sends a message to thread B containing some magical reference to the Point class, and thread B hooks up that reference to its Point class","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aqHTRSHUJDsNIYW0FxCchAOR8Jki0lkgaqEnaKUj8o4"}},"msgtype":"m.text"},"ts":1718282045151,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CcKkCBiM5_SUbj6M_xgOfwW6-6yOEPzcol_sjPiYUbs"},
{"content":{"body":"> <@rbuckton:matrix.org> No, how could it? Classes aren't shareable.\n\nI mean, u postMessage a normal class instance, and u got structured clone object which lose methods, so maybe it could be used to also auto correlation methods of them? 😃","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9w-ieUKwx_-PypUH0FB7xfU3M6F3xeJ_3TDEtX38MtA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, how could it? Classes aren't shareable.</blockquote></mx-reply>I mean, u postMessage a normal class instance, and u got structured clone object which lose methods, so maybe it could be used to also auto correlation methods of them? 😃","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9w-ieUKwx_-PypUH0FB7xfU3M6F3xeJ_3TDEtX38MtA"}},"msgtype":"m.text"},"ts":1718282050526,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$iG_eVyu3zCmEgOOnBh8goPdLd87SihZTos0Tq_5CwaE"},
{"content":{"body":"> <@keith_miller:matrix.org> If that's the consensus then I don't have a problem with normative should. Although, I would prefer a recommends but maybe should is well defined enough in TC39?\n\neither seems fine to me, I don't know what the difference is tbh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v1H2gYPkRMI759tm8Ln44_MpFsg71P9RVPCasFDG38Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>If that&#39;s the consensus then I don&#39;t have a problem with normative should. Although, I would prefer a recommends but maybe should is well defined enough in TC39?</blockquote></mx-reply>either seems fine to me, I don't know what the difference is tbh","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v1H2gYPkRMI759tm8Ln44_MpFsg71P9RVPCasFDG38Q"}},"msgtype":"m.text"},"ts":1718282067442,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_yLlcLA0DBd7FLz-AZMbnyIwcrxIn-cDDagnqsWX7JU"},
{"content":{"body":"> <@littledan:matrix.org> no, it's like, at startup, thread A sends a message to thread B containing some magical reference to the Point class, and thread B hooks up that reference to its Point class\n\nok, i don't understand how this \"magical reference\" could work","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CcKkCBiM5_SUbj6M_xgOfwW6-6yOEPzcol_sjPiYUbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>no, it's like, at startup, thread A sends a message to thread B containing some magical reference to the Point class, and thread B hooks up that reference to its Point class</blockquote></mx-reply>ok, i don't understand how this \"magical reference\" could work","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CcKkCBiM5_SUbj6M_xgOfwW6-6yOEPzcol_sjPiYUbs"}},"msgtype":"m.text"},"ts":1718282070304,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$H7i_gCtKTEdB5rxvv9QDGVzZIzqAegqcS_QrfTaFaBQ"},
{"content":{"body":"we'd still need some \"key\" for each shared struct?","m.mentions":{},"msgtype":"m.text"},"ts":1718282085357,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$F9BhbCAai3DRirlybJ9MSXikxaqHGprAtHcSXGwcZCA"},
{"content":{"body":"Something something module declarations","m.mentions":{},"msgtype":"m.text"},"ts":1718282086248,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PDh-CzTIifO2CJqnK_HaSn-UKBi2g-labe-swuail6c"},
{"content":{"body":"> <@lucacasonato:matrix.org> we'd still need some \"key\" for each shared struct?\n\nyes, this actually physically has to exist as the thing that's in memory as the prototype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F9BhbCAai3DRirlybJ9MSXikxaqHGprAtHcSXGwcZCA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>we&#39;d still need some &quot;key&quot; for each shared struct?</blockquote></mx-reply>yes, this actually physically has to exist as the thing that's in memory as the prototype","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$F9BhbCAai3DRirlybJ9MSXikxaqHGprAtHcSXGwcZCA"}},"msgtype":"m.text"},"ts":1718282110090,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tNleAK0vY3huNeG4LU93elj3MdtssOkVaRouKlg_tPM"},
{"content":{"body":"but yes this is breaking new ground for postMessage","m.mentions":{},"msgtype":"m.text"},"ts":1718282125516,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$is48JagO8PgAhAQsZXmQo0BKYmLH2Kt9rvUhIDGTu80"},
{"content":{"body":"To clarify for myself.. if you don't have auto correlation, but you *have* imported the module on main and worker... it's just that points which are post-messaged will have no prototype;  right?","format":"org.matrix.custom.html","formatted_body":"To clarify for myself.. if you don't have auto correlation, but you <em>have</em> imported the module on main and worker... it's just that points which are post-messaged will have no prototype;  right?","m.mentions":{},"msgtype":"m.text"},"ts":1718282139067,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$a18nNtkDYWQXfmIfWjHljCA_bHY1dnKY9zw450g3rpM"},
{"content":{"body":"ok - i still don't quite see how this isn't exactly the same as the auto correlation key","m.mentions":{},"msgtype":"m.text"},"ts":1718282145026,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$YXt0P1yX1aWGEXvuF2-XF9F1i9vD_xMzRGYPcKfA-QU"},
{"content":{"body":"> <@lucacasonato:matrix.org> ok - i still don't quite see how this isn't exactly the same as the auto correlation key\n\nautocorrelation means, you don't have to send that reference explicitly; the system just already is using the same key","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YXt0P1yX1aWGEXvuF2-XF9F1i9vD_xMzRGYPcKfA-QU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>ok - i still don&#39;t quite see how this isn&#39;t exactly the same as the auto correlation key</blockquote></mx-reply>autocorrelation means, you don't have to send that reference explicitly; the system just already is using the same key","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YXt0P1yX1aWGEXvuF2-XF9F1i9vD_xMzRGYPcKfA-QU"}},"msgtype":"m.text"},"ts":1718282176281,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AlVOX-SBLbDcbIk7fpVXya9PTznWioEq8h-dnexKXkI"},
{"content":{"body":"oh i guess that each realm does not need to automatically resolve to the same key","m.mentions":{},"msgtype":"m.text"},"ts":1718282177818,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Vh8rNzpa_GxEgwg34qxmsIVvlT1QrJk4KGbkuHO6pnU"},
{"content":{"body":"> <@littledan:matrix.org> either seems fine to me, I don't know what the difference is tbh\n\nTo me, should implies not doing it could be seen as non-compliance. Recommends is well a recommendation lol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_yLlcLA0DBd7FLz-AZMbnyIwcrxIn-cDDagnqsWX7JU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>either seems fine to me, I don't know what the difference is tbh</blockquote></mx-reply>To me, should implies not doing it could be seen as non-compliance. Recommends is well a recommendation lol","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_yLlcLA0DBd7FLz-AZMbnyIwcrxIn-cDDagnqsWX7JU"}},"msgtype":"m.text"},"ts":1718282193531,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$5tbvMkUWqmsO6De6XJgi8vR8nfzRLQFcga-v0Nwel0c"},
{"content":{"body":"the shared structs on either side do not have to have the same \"identity\" - you manually have to tie the identities together?","m.mentions":{},"msgtype":"m.text"},"ts":1718282211932,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$iso4DGR3cHkf8_PdGnEIJcuGjnNSIDxPBjMxkVavXdg"},
{"content":{"body":"(and, I have forgotten a bit) and if you don't import on a worker, and you recieve a shared struct... you can read them like they're just POJOs with a null proto? ","m.mentions":{},"msgtype":"m.text"},"ts":1718282214611,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$WRcABluOvMl68NKXy55bwx0jGXyKF2ydMj02yJPQhF4"},
{"content":{"body":"> <@lucacasonato:matrix.org> ok - i still don't quite see how this isn't exactly the same as the auto correlation key\n\nso we skip adding a weird API that's \"Correlate this magic key to this prototype\", and reifying that magic key","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YXt0P1yX1aWGEXvuF2-XF9F1i9vD_xMzRGYPcKfA-QU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>ok - i still don&#39;t quite see how this isn&#39;t exactly the same as the auto correlation key</blockquote></mx-reply>so we skip adding a weird API that's \"Correlate this magic key to this prototype\", and reifying that magic key","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YXt0P1yX1aWGEXvuF2-XF9F1i9vD_xMzRGYPcKfA-QU"}},"msgtype":"m.text"},"ts":1718282222871,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$j7QMqXWFVse_ALsEER8Xu5sxxoPDKNLySs4Rx3SSQnY"},
{"content":{"body":"> <@mgaudet:mozilla.org> (and, I have forgotten a bit) and if you don't import on a worker, and you recieve a shared struct... you can read them like they're just POJOs with a null proto?\n\nyes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WRcABluOvMl68NKXy55bwx0jGXyKF2ydMj02yJPQhF4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>(and, I have forgotten a bit) and if you don&#39;t import on a worker, and you recieve a shared struct... you can read them like they&#39;re just POJOs with a null proto? </blockquote></mx-reply>yes","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WRcABluOvMl68NKXy55bwx0jGXyKF2ydMj02yJPQhF4"}},"msgtype":"m.text"},"ts":1718282239910,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0hWGYqj1NDs2sbEAzvPZlGpgFbiNzb660JPDOP4vjDM"},
{"content":{"body":"or maybe a \"[[Prototype]] which throws\"","m.mentions":{},"msgtype":"m.text"},"ts":1718282254850,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fNTZIkqNTKM3AUsGn801cA43yRwf6HnNeU00HijjwTw"},
{"content":{"body":"> <@mgaudet:mozilla.org> To clarify for myself.. if you don't have auto correlation, but you *have* imported the module on main and worker... it's just that points which are post-messaged will have no prototype;  right?\n\nNot just postmessage. You can just set a shared struct value into a field on an existing shared struct","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$a18nNtkDYWQXfmIfWjHljCA_bHY1dnKY9zw450g3rpM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>To clarify for myself.. if you don't have auto correlation, but you <em>have</em> imported the module on main and worker... it's just that points which are post-messaged will have no prototype;  right?</blockquote></mx-reply>Not just postmessage. You can just set a shared struct value into a field on an existing shared struct","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a18nNtkDYWQXfmIfWjHljCA_bHY1dnKY9zw450g3rpM"}},"msgtype":"m.text"},"ts":1718282254931,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F48-zbFWRLbUzA1wL-YwsXRdyDhwcRPKk7OnzpLojl4"},
{"content":{"body":"> <@rbuckton:matrix.org> Not just postmessage. You can just set a shared struct value into a field on an existing shared struct\n\nright, this is why the only thing needed with postMessage is this one-time setup","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F48-zbFWRLbUzA1wL-YwsXRdyDhwcRPKk7OnzpLojl4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Not just postmessage. You can just set a shared struct value into a field on an existing shared struct</blockquote></mx-reply>right, this is why the only thing needed with postMessage is this one-time setup","m.mentions":{"user_ids":["@rbuckton:matrix.org","@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$F48-zbFWRLbUzA1wL-YwsXRdyDhwcRPKk7OnzpLojl4"}},"msgtype":"m.text"},"ts":1718282277821,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$br4UukJsTaPPrJKzQsuHCzxY8oREqk4XqcnkxjEF7PI"},
{"content":{"body":"rbuckton: Ah that's a helpful reminder too","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Ah that's a helpful reminder too","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1718282293014,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$kD07v-KaMfup3ZX6aEERweknR-GHhHAXIZtoZweSzZQ"},
{"content":{"body":"> <@littledan:matrix.org> right, this is why the only thing needed with postMessage is this one-time setup\n\nMy biggest concern with manual correlation is that it weakens privacy, so we could probably never have private state in a shared struct. Auto correlation means you're loading the same code with the same privacy guarantees.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$br4UukJsTaPPrJKzQsuHCzxY8oREqk4XqcnkxjEF7PI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>right, this is why the only thing needed with postMessage is this one-time setup</blockquote></mx-reply>My biggest concern with manual correlation is that it weakens privacy, so we could probably never have private state in a shared struct. Auto correlation means you're loading the same code with the same privacy guarantees.","m.mentions":{"user_ids":["@littledan:matrix.org","@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$br4UukJsTaPPrJKzQsuHCzxY8oREqk4XqcnkxjEF7PI"}},"msgtype":"m.text"},"ts":1718282389539,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KqJcOSwtsdXvnLVcdaMFv2pdINvSHEQS0yYi9kD0cko"},
{"content":{"body":"manual correlation does not have to weaken privacy","m.mentions":{},"msgtype":"m.text"},"ts":1718282426540,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mxO1KwwwAWrvHzg-tJJXmm3JfvozOu1mk-bEZHMDLFU"},
{"content":{"body":"And I think having private state is an important capability for encapsulation, such as ensuring a field is only read/written atomically or under a lock via a method on the struct.","m.mentions":{},"msgtype":"m.text"},"ts":1718282489968,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cJTVGHGZBBUNtWfqJ7fPDScLPbGGI-3za5EeNO02rzY"},
{"content":{"body":"> <@mhofman:matrix.org> manual correlation does not have to weaken privacy\n\nYeah, do we know how it was thought it would?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mxO1KwwwAWrvHzg-tJJXmm3JfvozOu1mk-bEZHMDLFU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>manual correlation does not have to weaken privacy</blockquote></mx-reply>Yeah, do we know how it was thought it would?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mxO1KwwwAWrvHzg-tJJXmm3JfvozOu1mk-bEZHMDLFU"}},"msgtype":"m.text"},"ts":1718282497533,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$5e9TB-5S8xgvNtlEjsWpFT8Jxa7Pgt_qzjic-cosCJ4"},
{"content":{"body":"yeah I can see how autocorrelation could help us with private field sharing, but I don't see how we'd do it with manual sharing","m.mentions":{},"msgtype":"m.text"},"ts":1718282549382,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RerQ0FQKX-AiI0smiNxnni0kWujAxINOlqLzakbzgtI"},
{"content":{"body":"You have to reify a sharable object for the type that describes the capability to attach behavior and access private data (that is not reachable simply from having an instance, or even the constructor)","m.mentions":{},"msgtype":"m.text"},"ts":1718282549979,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$46a0sV23i2QRg93MoeXRRzB-YeIAdgPWHLXZ64s1idY"},
{"content":{"body":"I would consider the identity of a ModuleSource to be specifier+(id of the realm where it was originally created), and not just the specifier","m.mentions":{},"msgtype":"m.text"},"ts":1718282553840,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$udstNAbxAkR4OiMreQNRodxFCvDfEdHW3X3ePQLDgY0"},
{"content":{"body":"Which means that what I and Dan said is not the same behavior","m.mentions":{},"msgtype":"m.text"},"ts":1718282569247,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$o_a_bIwlZX8TG2MSwNYBMF5wU-Vipo9g5AZPOt1vxLg"},
{"content":{"body":"right so in particular it's much more convenient if you *don't* have to pass along the handle, and can just independently import the same specifier and have it autocorrelate","format":"org.matrix.custom.html","formatted_body":"right so in particular it's much more convenient if you <em>don't</em> have to pass along the handle, and can just independently import the same specifier and have it autocorrelate","m.mentions":{},"msgtype":"m.text"},"ts":1718282599022,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NhMQ0g0ZDL6Ir4mwyhro3XS8bJ5JsKDZTDdt1CrMWKA"},
{"content":{"body":"Yes I agree it's more convenient","m.mentions":{},"msgtype":"m.text"},"ts":1718282610762,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$42-DkgMFqhMffjskFApEern1KhJJAuVIJJzAJpsUBkE"},
{"content":{"body":"It's also more magival","m.mentions":{},"msgtype":"m.text"},"ts":1718282616202,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mGWwMWeyMsbNY2xqNAK2g2ZxoQYpP4yZDcXryy92zG4"},
{"content":{"body":" * It's also more magical","m.mentions":{},"m.new_content":{"body":"It's also more magical","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mGWwMWeyMsbNY2xqNAK2g2ZxoQYpP4yZDcXryy92zG4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718282619164,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-zrp5voz5YTzsvzdr0wW4xKT6e336YT0ChRZZdXxrXI"},
{"content":{"body":"yes, so, the mechanism you're describing is a way to do a handshake without exposing \"too powerful\" APIs","m.mentions":{},"msgtype":"m.text"},"ts":1718282639860,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b5ORX8-ey_D8rykGmHe7Kvw0tcXYkASxv6DM7n7uORs"},
{"content":{"body":"Yes right","m.mentions":{},"msgtype":"m.text"},"ts":1718282648643,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FPjgePPvBbLs9vn16RrASSBU2_IVR80a4sAEkRbtvTY"},
{"content":{"body":"somehow in between the two mechanisms","m.mentions":{},"msgtype":"m.text"},"ts":1718282652306,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F5vryqZ6kBFkpDtIyj3j5wytcGNrGW0vafrM2Ahsno0"},
{"content":{"body":"(and corresponds to what I proposed a while ago)","m.mentions":{},"msgtype":"m.text"},"ts":1718282667237,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ssFgfJtKwvYtVu1QMd7PfJPPkFxwe2XOa_WJ0oZ-QCo"},
{"content":{"body":"right, I would like that to the basis of the implementation, and then we can consider sugar on top","m.mentions":{},"msgtype":"m.text"},"ts":1718282675096,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lXG9oge85HdCPRPeRv6eD3doXtbZHeaTDQpUXR8maw4"},
{"content":{"body":" * right, I would like \"a type admin capability\" to the basis of the implementation, and then we can consider sugar on top","m.mentions":{},"m.new_content":{"body":"right, I would like \"a type admin capability\" to the basis of the implementation, and then we can consider sugar on top","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lXG9oge85HdCPRPeRv6eD3doXtbZHeaTDQpUXR8maw4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718282704460,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SCzaxBIBnBlM0ASOEVzIBYQ8WC_qzL4lv7n-MbvBFyI"},
{"content":{"body":"what nicolo-ribaudo is proposing would give us plenty of rope to implement sharing private field names","format":"org.matrix.custom.html","formatted_body":"what <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> is proposing would give us plenty of rope to implement sharing private field names","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1718282705198,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rjXSMt647310XOUTHPCNIbnecKGmTFSdGD2mdNQX-WY"},
{"content":{"body":"but a more imperative mechanism would not","m.mentions":{},"msgtype":"m.text"},"ts":1718282730016,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uXyVQRiwMa80mypkaLh5P3UgICI9p3YxlTbqQGMLA0Y"},
{"content":{"body":"Not really if you start to consider wasm, and how some wasm code would correlate the type","m.mentions":{},"msgtype":"m.text"},"ts":1718282777521,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0myfClR1noAakcBmMgdfUZJvCKSUgEzNASTvPKtGqQg"},
{"content":{"body":"a more imperative mechanism can conceptually give you access to private fields","m.mentions":{},"msgtype":"m.text"},"ts":1718282819263,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$stbc_8F1aBylHXZUkVHVp0aj4MZ7e7ay31-5oLNDx5c"},
{"content":{"body":" * a more imperative mechanism can conceptually give you access to private data (maybe not fields per se)","m.mentions":{},"m.new_content":{"body":"a more imperative mechanism can conceptually give you access to private data (maybe not fields per se)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$stbc_8F1aBylHXZUkVHVp0aj4MZ7e7ay31-5oLNDx5c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718282839435,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BfuwsfK-TXzikbAdvrePCSwQfmQujNphSBtJBrjuyK4"},
{"content":{"body":"well, currently Wasm doesn't need to correlate types because it's all structural. But if it gets some nominal capacity, why not transmit it by postMessaging WebAssembly.Module instances? I guess the thing is, they don't contain any reference to their Realm/Agent right now.","m.mentions":{},"msgtype":"m.text"},"ts":1718282861505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7fI30HMp8llSp_7AEuw6BHFlcI4e2NipAG_WEAQ1uG4"},
{"content":{"body":"(I really want Wasm to get this nominal capacity)","m.mentions":{},"msgtype":"m.text"},"ts":1718282880660,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$S5E3RIyftzlbLq84qR_dmfP4r-I4vxU7xFxtKFpmty0"},
{"content":{"body":"> <@aardvark179:matrix.org> Yeah, do we know how it was thought it would?\n\nI can explain my concerns after plenary. Feel free to ask in #shared-structs:matrix.org and I'll follow up. Unfortunately I'm still fighting off COVID so it would be easier to explain my position once I've had time to recover and have a clear head.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5e9TB-5S8xgvNtlEjsWpFT8Jxa7Pgt_qzjic-cosCJ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Yeah, do we know how it was thought it would?</blockquote></mx-reply>I can explain my concerns after plenary. Feel free to ask in <a href=\"https://matrix.to/#/#shared-structs:matrix.org\">#shared-structs:matrix.org</a> and I'll follow up. Unfortunately I'm still fighting off COVID so it would be easier to explain my position once I've had time to recover and have a clear head.","m.mentions":{"user_ids":["@aardvark179:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5e9TB-5S8xgvNtlEjsWpFT8Jxa7Pgt_qzjic-cosCJ4"}},"msgtype":"m.text"},"ts":1718282918039,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tq3JZ7WUoAuzj0AqnYvQzYDQYCecoeQLp0YoZrE0yVs"},
{"content":{"body":"> <@littledan:matrix.org> well, currently Wasm doesn't need to correlate types because it's all structural. But if it gets some nominal capacity, why not transmit it by postMessaging WebAssembly.Module instances? I guess the thing is, they don't contain any reference to their Realm/Agent right now.\n\nWhat restricts a module to contain only a single shared struct definition? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7fI30HMp8llSp_7AEuw6BHFlcI4e2NipAG_WEAQ1uG4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, currently Wasm doesn&#39;t need to correlate types because it&#39;s all structural. But if it gets some nominal capacity, why not transmit it by postMessaging WebAssembly.Module instances? I guess the thing is, they don&#39;t contain any reference to their Realm/Agent right now.</blockquote></mx-reply>What restricts a module to contain only a single shared struct definition?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7fI30HMp8llSp_7AEuw6BHFlcI4e2NipAG_WEAQ1uG4"}},"msgtype":"m.text"},"ts":1718282937670,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pTL5ppRuKdPZ8FNZRPSJvp586uI5u_5FqTiCEO66lP4"},
{"content":{"body":"> <@mhofman:matrix.org> What restricts a module to contain only a single shared struct definition?\n\nnothing, but in Wasm it'd also correlate by index (a sufficient replacement for source position)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pTL5ppRuKdPZ8FNZRPSJvp586uI5u_5FqTiCEO66lP4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What restricts a module to contain only a single shared struct definition?</blockquote></mx-reply>nothing, but in Wasm it'd also correlate by index (a sufficient replacement for source position)","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pTL5ppRuKdPZ8FNZRPSJvp586uI5u_5FqTiCEO66lP4"}},"msgtype":"m.text"},"ts":1718282959264,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1pLD_m8eDHuZIRKNZAabz4MFWyvDmUhtTMPhFBRgWhs"},
{"content":{"body":"similar to us correlating by Parse Node","m.mentions":{},"msgtype":"m.text"},"ts":1718282968741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JR3vSF9ZzIILiUqonUn08lsDDwC1YurhWpSHQw83AbM"},
{"content":{"body":"so it would be by specifier + allocating agent/realm + index","m.mentions":{},"msgtype":"m.text"},"ts":1718283006481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mqQh1J3jFbeBQCw6pcOSTBHQZusHTSXki51E86Povks"},
{"content":{"body":"That really seems like forcing JS specific concepts onto wasm.  Does that mean wasm needs a JS module if it wants to correlate types between its own threads ?","m.mentions":{},"msgtype":"m.text"},"ts":1718283150912,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4acF3xa8L79X_CbotEjZ-ADbMlHdUw8xZSv3rgxxSWQ"},
{"content":{"body":"Wasm as agents and specifiers; not sure what you mean","m.mentions":{},"msgtype":"m.text"},"ts":1718283200722,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wvKCxE2OEHi1OBFloslFNxAP6Qq7KcyuF499lD4aiYI"},
{"content":{"body":"Wasm on the web (theoretically, with ESM integration) has a module map per Realm, so it'd be natural to use that rather than agent","m.mentions":{},"msgtype":"m.text"},"ts":1718283253679,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EU21hK8qpuS-fP0d_1ksDPGGhcTmq8uo2XVoGTZ2tqI"},
{"content":{"body":"I'm glad it's not just me who didn't understand that thread safety argument.","m.mentions":{},"msgtype":"m.text"},"ts":1718283302384,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$6g1NEYdJTWPhi5dvFjcxy2SLIeI5gXqsRmDrPkcfF0Q"},
{"content":{"body":"littledan: I think auto-correlation could handle privacy just fine.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I think auto-correlation could handle privacy just fine.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1718283803660,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yR9ObpTnhO8nHRFVXaL21-KQo2xnok4sAXlUkLqO1bc"},
{"content":{"body":"> <@rbuckton:matrix.org> littledan: I think auto-correlation could handle privacy just fine.\n\nyep agreed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yR9ObpTnhO8nHRFVXaL21-KQo2xnok4sAXlUkLqO1bc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I think auto-correlation could handle privacy just fine.</blockquote></mx-reply>yep agreed","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yR9ObpTnhO8nHRFVXaL21-KQo2xnok4sAXlUkLqO1bc"}},"msgtype":"m.text"},"ts":1718283819703,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DKwXr2RVAzU3yS_NXHoZ9trK6oTk8aNnJTjQ2Sfk5Lk"},
{"content":{"body":"I think nicolo-ribaudo 's handshake mechanism would also handle it fine. It's \"even more lexical\".","format":"org.matrix.custom.html","formatted_body":"I think <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> 's handshake mechanism would also handle it fine. It's \"even more lexical\".","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1718283867741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r52jCd9N7Z9Bhgu9l6A7W5I43EBq7sS6Yhf7892ZfaI"},
{"content":{"body":"> <@littledan:matrix.org> I think nicolo-ribaudo 's handshake mechanism would also handle it fine. It's \"even more lexical\".\n\nYes I think so too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$r52jCd9N7Z9Bhgu9l6A7W5I43EBq7sS6Yhf7892ZfaI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> 's handshake mechanism would also handle it fine. It's \"even more lexical\".</blockquote></mx-reply>Yes I think so too","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$r52jCd9N7Z9Bhgu9l6A7W5I43EBq7sS6Yhf7892ZfaI"}},"msgtype":"m.text"},"ts":1718283891589,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qGd-mS-SgTAWhViGYlo3jq0jUmQ2ig3qtgivCKjNa3U"},
{"content":{"body":"How would auto correlation work across languages in a way that doesn't require either language to hold objects specific to the other language (as each language may run without the other existing)","m.mentions":{},"msgtype":"m.text"},"ts":1718283938366,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gSF5uIS_2MWJthcbvfwm3UdtvKgPJ-cI7nso4nPskAw"},
{"content":{"body":"My concern with manual correlation (i.e., based on postMessage/exemplars) is that realm B could wire up a struct from realm A into a struct definition that exposes private state, so you have to guard against malicious code being able to spawn a Worker (CSP helps on the web, but not in NodeJS) that can be used to hijack a struct.","m.mentions":{},"msgtype":"m.text"},"ts":1718283979441,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sau-RB_jwwlRVoX68ADJz4O-bSGKuNXxjdLLm2-Nf4Q"},
{"content":{"body":"Aka how would 2 wasm threads correlate shared structs (to get access private data) without requiring it to know what a JS module is","m.mentions":{},"msgtype":"m.text"},"ts":1718284011455,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ziZAt-_KZ_9HWkzJfTCxWFIKOZjlspIjTXlQvK_NPNU"},
{"content":{"body":"> <@rbuckton:matrix.org> My concern with manual correlation (i.e., based on postMessage/exemplars) is that realm B could wire up a struct from realm A into a struct definition that exposes private state, so you have to guard against malicious code being able to spawn a Worker (CSP helps on the web, but not in NodeJS) that can be used to hijack a struct.\n\nYes, I share these kinds of soundness concerns with a very expressive imperative API, but I think nicolo-ribaudo 's suggestion is not subject to this risk.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sau-RB_jwwlRVoX68ADJz4O-bSGKuNXxjdLLm2-Nf4Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My concern with manual correlation (i.e., based on postMessage/exemplars) is that realm B could wire up a struct from realm A into a struct definition that exposes private state, so you have to guard against malicious code being able to spawn a Worker (CSP helps on the web, but not in NodeJS) that can be used to hijack a struct.</blockquote></mx-reply>Yes, I share these kinds of soundness concerns with a very expressive imperative API, but I think <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> 's suggestion is not subject to this risk.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sau-RB_jwwlRVoX68ADJz4O-bSGKuNXxjdLLm2-Nf4Q"}},"msgtype":"m.text"},"ts":1718284023369,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RqlrUswMpVSorkbjrQ7g1kwQelV1pZd8-SHt4mtiszw"},
{"content":{"body":"> <@mhofman:matrix.org> How would auto correlation work across languages in a way that doesn't require either language to hold objects specific to the other language (as each language may run without the other existing)\n\nDoes it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gSF5uIS_2MWJthcbvfwm3UdtvKgPJ-cI7nso4nPskAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>How would auto correlation work across languages in a way that doesn&#39;t require either language to hold objects specific to the other language (as each language may run without the other existing)</blockquote></mx-reply>Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gSF5uIS_2MWJthcbvfwm3UdtvKgPJ-cI7nso4nPskAw"}},"msgtype":"m.text"},"ts":1718284055746,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w"},
{"content":{"body":"> <@rbuckton:matrix.org> Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.\n\nyeah exactly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.</blockquote></mx-reply>yeah exactly","m.mentions":{"user_ids":["@rbuckton:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w"}},"msgtype":"m.text"},"ts":1718284086467,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J11jeG1KDcImoeMkG7cfesDM7ZT9ib8MwH4TaQr1Roc"},
{"content":{"body":"> <@rbuckton:matrix.org> Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.\n\nsome form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.</blockquote></mx-reply>some form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects","m.mentions":{"user_ids":["@rbuckton:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w"}},"msgtype":"m.text"},"ts":1718284096894,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UMH_76YqFdpsIfFtSgoXqqnkl14KFe7LafekS8aHN6A"},
{"content":{"body":"you do some tearoffs that can exfiltrate private data and import them from the wasm side","m.mentions":{},"msgtype":"m.text"},"ts":1718284101446,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UgDNo5zs7dw-vOpJwKPHQDhyytCDMa7CDaWNksWd7LA"},
{"content":{"body":"> <@rbuckton:matrix.org> My concern with manual correlation (i.e., based on postMessage/exemplars) is that realm B could wire up a struct from realm A into a struct definition that exposes private state, so you have to guard against malicious code being able to spawn a Worker (CSP helps on the web, but not in NodeJS) that can be used to hijack a struct.\n\nif you use forgeable type description, of course. Manual correlation has to be based on non forgeable type descriptors that need to be explicitly shared with the realm in the first place","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sau-RB_jwwlRVoX68ADJz4O-bSGKuNXxjdLLm2-Nf4Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My concern with manual correlation (i.e., based on postMessage/exemplars) is that realm B could wire up a struct from realm A into a struct definition that exposes private state, so you have to guard against malicious code being able to spawn a Worker (CSP helps on the web, but not in NodeJS) that can be used to hijack a struct.</blockquote></mx-reply>if you use forgeable type description, of course. Manual correlation has to be based on non forgeable type descriptors that need to be explicitly shared with the realm in the first place","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sau-RB_jwwlRVoX68ADJz4O-bSGKuNXxjdLLm2-Nf4Q"}},"msgtype":"m.text"},"ts":1718284118652,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-UDXtyCppyqli-w78NkZZsnx8pD5-qcGn4zkxIhJtXU"},
{"content":{"body":"Mathieu Hofman: you're engaged in the nuts & bolts of how correlation could work. great! but i'm more interested in working through the very high level, \"i feel this is unsafe\" objection","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: you're engaged in the nuts &amp; bolts of how correlation could work. great! but i'm more interested in working through the very high level, \"i feel this is unsafe\" objection","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1718284194973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wVYgmuQsNxFpXTWaX6_8AktYymnF0ezkkm-U3WvOjis"},
{"content":{"body":"> <@rbuckton:matrix.org> Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.\n\nDoes wasm really have no notion of private data for objects?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Does it need to work across languages? If JS private state is a uniquely JS mechanism, then WASM could interact with the struct via FFI calls into JS.</blockquote></mx-reply>Does wasm really have no notion of private data for objects?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$StypZpmCkbupCSrMxwdCsx9s4NimSEQQDP5MLNjA_-w"}},"msgtype":"m.text"},"ts":1718284207206,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$9HeUOji-PhJi2YAB2uQX3snb37bklWsh2fSrRrnilXk"},
{"content":{"body":"> <@littledan:matrix.org> some form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects\n\nIs there any concern that malicious code could craft a WASM assembly on the fly to unpack private state from a class?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UMH_76YqFdpsIfFtSgoXqqnkl14KFe7LafekS8aHN6A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>some form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects</blockquote></mx-reply>Is there any concern that malicious code could craft a WASM assembly on the fly to unpack private state from a class?","m.mentions":{"user_ids":["@littledan:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UMH_76YqFdpsIfFtSgoXqqnkl14KFe7LafekS8aHN6A"}},"msgtype":"m.text"},"ts":1718284208230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WpSbfhcSMJrIn8TuDEfQ-6cwOnChRHB7qDetrwZ0H_U"},
{"content":{"body":"> <@mhofman:matrix.org> Does wasm really have no notion of private data for objects?\n\nwhy would it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9HeUOji-PhJi2YAB2uQX3snb37bklWsh2fSrRrnilXk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Does wasm really have no notion of private data for objects?</blockquote></mx-reply>why would it?","m.mentions":{"user_ids":["@mhofman:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9HeUOji-PhJi2YAB2uQX3snb37bklWsh2fSrRrnilXk"}},"msgtype":"m.text"},"ts":1718284214691,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3yv3tstJzK8H8rQZdTLjfKd6IgfUCc39DqGDq87qPxk"},
{"content":{"body":"it's a target for compilers of higher level languages","m.mentions":{},"msgtype":"m.text"},"ts":1718284222977,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$es3c-a4K2gwV5cLR4P-CRwTVoHJ549DzJ5moY4dFoh8"},
{"content":{"body":"> <@mhofman:matrix.org> Does wasm really have no notion of private data for objects?\n\nwasm structs are simply typed tuples","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9HeUOji-PhJi2YAB2uQX3snb37bklWsh2fSrRrnilXk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Does wasm really have no notion of private data for objects?</blockquote></mx-reply>wasm structs are simply typed tuples","m.mentions":{"user_ids":["@mhofman:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9HeUOji-PhJi2YAB2uQX3snb37bklWsh2fSrRrnilXk"}},"msgtype":"m.text"},"ts":1718284224564,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-iD_qPv8Uu4FjNd7JzTMmU7xjQxDQNTLM3vOkMMy17A"},
{"content":{"body":"it doesn't have methods because you're supposed to just compile a vtable yourself","m.mentions":{},"msgtype":"m.text"},"ts":1718284238220,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kWN-nzPgFmwtSUDdKRpqkfNe9ZKjPXgNaG8fBNG8uJo"},
{"content":{"body":"not that it literally doesn't have methods","m.mentions":{},"msgtype":"m.text"},"ts":1718284244652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VMx_vfBLFFBp3-ATqnfFoDQLiXgq4PuPzWKqTaH113Q"},
{"content":{"body":"How is soon is now, I deployed dockerized _TCQ reloaded_ to https://tcq.staging.tcq-reloaded.tcq.ninja/ , **now** with _persistent_ storage, actual PR is at: https://github.com/zalari/tcq/pull/7 ; I will explain individual decisions. So I think, we can use TCQ reloaded next plenary!","format":"org.matrix.custom.html","formatted_body":"How is soon is now, I deployed dockerized <em>TCQ reloaded</em> to https://tcq.staging.tcq-reloaded.tcq.ninja/ , <strong>now</strong> with <em>persistent</em> storage, actual PR is at: https://github.com/zalari/tcq/pull/7 ; I will explain individual decisions. So I think, we can use TCQ reloaded next plenary!","m.mentions":{},"msgtype":"m.text"},"ts":1718284323072,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$Dn3Ii3jOqYCToHvus8bxEHn-QllKIX75u87qPeFq-fs"},
{"content":{"body":"i feel like there's a lot of wishful thinking from opponents of the proposal","m.mentions":{},"msgtype":"m.text"},"ts":1718284336627,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zRuPyGDbj9I7tJwZJsx5ZV_ZDEY6BFnVXbqvrtT-GdQ"},
{"content":{"body":"yes, this is a difficult-to-program-correctly space","m.mentions":{},"msgtype":"m.text"},"ts":1718284351595,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xCzwyt-dd2-7fZpJzvVReHF_Xulto2wTfX6tZ3IJ5cI"},
{"content":{"body":"> <@littledan:matrix.org> some form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects\n\nIgnoring private state JS could expose an API to acquire a \"correlation token\" it could pass to WASM to set up prototypes? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UMH_76YqFdpsIfFtSgoXqqnkl14KFe7LafekS8aHN6A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>some form of nominal correlation would be useful for Wasm, especially if Wasm wants to interact with JS in various threads and give prototypes to its objects</blockquote></mx-reply>Ignoring private state JS could expose an API to acquire a \"correlation token\" it could pass to WASM to set up prototypes?","m.mentions":{"user_ids":["@littledan:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UMH_76YqFdpsIfFtSgoXqqnkl14KFe7LafekS8aHN6A"}},"msgtype":"m.text"},"ts":1718284377700,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZRUiiS5t6uUI51OTreGCmrqFagZiaEuwCwuoRqCObxg"},
{"content":{"body":"but adding on little guardrails doesn't really advance the goal of writing correct programs","m.mentions":{},"msgtype":"m.text"},"ts":1718284382363,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sVu6KK_C5qych16IYKeBfO475GL98otsEhZM210PEjk"},
{"content":{"body":"well, not even guardrails, just pointless friction imo","m.mentions":{},"msgtype":"m.text"},"ts":1718284397540,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WUhbbXjQlBd28mFVhBgphxAk4UqK4rKHJEerdJTsUno"},
{"content":{"body":"> <@mhofman:matrix.org> if you use forgeable type description, of course. Manual correlation has to be based on non forgeable type descriptors that need to be explicitly shared with the realm in the first place\n\nWhat do you consider to be a \"non forgeable type descriptor\"? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-UDXtyCppyqli-w78NkZZsnx8pD5-qcGn4zkxIhJtXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>if you use forgeable type description, of course. Manual correlation has to be based on non forgeable type descriptors that need to be explicitly shared with the realm in the first place</blockquote></mx-reply>What do you consider to be a \"non forgeable type descriptor\"?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-UDXtyCppyqli-w78NkZZsnx8pD5-qcGn4zkxIhJtXU"}},"msgtype":"m.text"},"ts":1718284415541,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LgcoFqnlsV2gD067oCA8Pe8qKZSSHDdGdtgJDDs56Aw"},
{"content":{"body":"> <@shuyuguo:matrix.org> Mathieu Hofman: you're engaged in the nuts & bolts of how correlation could work. great! but i'm more interested in working through the very high level, \"i feel this is unsafe\" objection\n\nThat is mostly a question for Mark. My personal opinion right now is that shared fields should be private by default, and that correlated behavior would be providing the necessary encapsulation to access that shared data in a thread safe way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wVYgmuQsNxFpXTWaX6_8AktYymnF0ezkkm-U3WvOjis?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: you're engaged in the nuts &amp; bolts of how correlation could work. great! but i'm more interested in working through the very high level, \"i feel this is unsafe\" objection</blockquote></mx-reply>That is mostly a question for Mark. My personal opinion right now is that shared fields should be private by default, and that correlated behavior would be providing the necessary encapsulation to access that shared data in a thread safe way","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wVYgmuQsNxFpXTWaX6_8AktYymnF0ezkkm-U3WvOjis"}},"msgtype":"m.text"},"ts":1718284447237,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VXCQ7_J1KGcJLVemwdIaNK2Wavb4iKLNImlK3OocsAw"},
{"content":{"body":"mark literally just said that didn't work for java","m.mentions":{},"msgtype":"m.text"},"ts":1718284467240,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UgL_KBxDzJj4K4HL-kUuAFvQ7WeJj38RuFUy3zwpEzw"},
{"content":{"body":"why do you think that'll move the safety needle here?","m.mentions":{},"msgtype":"m.text"},"ts":1718284479376,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KinnWfcQjtr9WsYofdtp7hLAyFK4PaeNg_mbWBcKdGA"},
{"content":{"body":"i'd also request you ask yourself the question, what happens if you get thread unsafe code in JS/Wasm","m.mentions":{},"msgtype":"m.text"},"ts":1718284515170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9VxYlBQhLVUe_Rzq0GXtWKgyKsOk96aTbXf-HD4NTHk"},
{"content":{"body":"> <@shuyuguo:matrix.org> you do some tearoffs that can exfiltrate private data and import them from the wasm side\n\njumping to JS land for this seems inefficient. I am really surprised that wasm wouldn't want a private field concept on its own wasm gc objects (shared or non shared)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UgDNo5zs7dw-vOpJwKPHQDhyytCDMa7CDaWNksWd7LA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you do some tearoffs that can exfiltrate private data and import them from the wasm side</blockquote></mx-reply>jumping to JS land for this seems inefficient. I am really surprised that wasm wouldn't want a private field concept on its own wasm gc objects (shared or non shared)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UgDNo5zs7dw-vOpJwKPHQDhyytCDMa7CDaWNksWd7LA"}},"msgtype":"m.text"},"ts":1718284519090,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mhJustuBbQhvawNZTb7ODQcJZRKPtGgPlWHeRnjm7nk"},
{"content":{"body":"it's the wrong abstraction level","m.mentions":{},"msgtype":"m.text"},"ts":1718284532439,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UzY_QoF-p2Xrq1R2JshV-OTHWQnVB9af0QkDkk5xkSY"},
{"content":{"body":"so who wants to volunteer to take a look at the print PDFs? they're in a state approaching publishable","m.mentions":{},"msgtype":"m.text"},"ts":1718284702997,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$iTS4_RByLvrXgxrTDU6Ybu88VogLRXw5M788m-zqGXE"},
{"content":{"body":"> <@rbuckton:matrix.org> What do you consider to be a \"non forgeable type descriptor\"?\n\nAn object you get when defining the struct that is itself shareable. Not something you can obtain simply by having a reference to the constructor or any instance.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LgcoFqnlsV2gD067oCA8Pe8qKZSSHDdGdtgJDDs56Aw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What do you consider to be a \"non forgeable type descriptor\"?</blockquote></mx-reply>An object you get when defining the struct that is itself shareable. Not something you can obtain simply by having a reference to the constructor or any instance.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LgcoFqnlsV2gD067oCA8Pe8qKZSSHDdGdtgJDDs56Aw"}},"msgtype":"m.text"},"ts":1718284722145,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eUyQKH04FYUIMc6huBqwGS5jSWDUP3pL6aRSyxaDvh0"},
{"content":{"body":"Do we, as a committee, think JS privacy is a security feature? Would it be unforgivable if private state isn't really private at the realm boundary? If we could have `struct S { #x; ... }` in realm A mapped to `struct S { x; ... }` in realm B, would we consider that a security vulnerability? ","format":"org.matrix.custom.html","formatted_body":"Do we, as a committee, think JS privacy is a security feature? Would it be unforgivable if private state isn't really private at the realm boundary? If we could have <code>struct S { #x; ... }</code> in realm A mapped to <code>struct S { x; ... }</code> in realm B, would we consider that a security vulnerability?","m.mentions":{},"msgtype":"m.text"},"ts":1718284839120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sOP53ZLnxKyzbW9Pwxe2UfAJURQhHLrlTw7tFVwtxvs"},
{"content":{"body":"good question","m.mentions":{},"msgtype":"m.text"},"ts":1718284877700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I0m6oX4HSQzvUBgE9DiO81xFzWTAogWYCU_WAlowW3s"},
{"content":{"body":"this is all echoes of hard constraints held by SES folks that are not clearly communicated as such, and so they feel like stop energy","m.mentions":{},"msgtype":"m.text"},"ts":1718284909848,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P8_MT_ZrMhayd6-8SLqx8JFbXDaE2U--mlv0IjrT2Gg"},
{"content":{"body":"also like look, i'm *fine* with removing methods","format":"org.matrix.custom.html","formatted_body":"also like look, i'm <em>fine</em> with removing methods","m.mentions":{},"msgtype":"m.text"},"ts":1718284963335,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0WnuWSnSaQAQN54MAOhNkm1RfApGxFKxZOXH2QgehKo"},
{"content":{"body":"but i think that's actually *worse* for correctness! and i really don't get the arguments that it's better for correctness","format":"org.matrix.custom.html","formatted_body":"but i think that's actually <em>worse</em> for correctness! and i really don't get the arguments that it's better for correctness","m.mentions":{},"msgtype":"m.text"},"ts":1718284986005,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dmk7iQAy9LbTCh0NPSsxv7cnmChb4R3ulCvtAgbRzoY"},
{"content":{"body":"and it sounded like others share my confusion","m.mentions":{},"msgtype":"m.text"},"ts":1718284992780,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YUj6DoUQVTBwf0x4ANNPqEmGb7dpWcXs2rnB3kWkLJs"},
{"content":{"body":"In a shared struct, `struct S { #x; ... }` means that in the realm where it is defined, the private name `#x` refers to the first fixed storage field in the struct. in another realm you could have `struct S { x; ... }` that just says the field \"x\" refers to the first fixed storage field in the struct. If you manually correlate S in each realm, does the privacy need to be preserved?","format":"org.matrix.custom.html","formatted_body":"In a shared struct, <code>struct S { #x; ... }</code> means that in the realm where it is defined, the private name <code>#x</code> refers to the first fixed storage field in the struct. in another realm you could have <code>struct S { x; ... }</code> that just says the field \"x\" refers to the first fixed storage field in the struct. If you manually correlate S in each realm, does the privacy need to be preserved?","m.mentions":{},"msgtype":"m.text"},"ts":1718285020791,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g4Ulj79d_zfdbuFJujIRqxX2gifZq-tLgyTuwePNSOM"},
{"content":{"body":"the _only_ thing i can make sense of is, \"if we don't have methods, i can mentally compartmentalize everything over in wasm land, so i can not think about it\"","format":"org.matrix.custom.html","formatted_body":"the <em>only</em> thing i can make sense of is, \"if we don't have methods, i can mentally compartmentalize everything over in wasm land, so i can not think about it\"","m.mentions":{},"msgtype":"m.text"},"ts":1718285035094,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fYkqtlJqpNDgJ1wwnSQFtcbz8dstHcCYNnnaOQNob2M"},
{"content":{"body":"but end-to-end that argument doesn't make sense","m.mentions":{},"msgtype":"m.text"},"ts":1718285043443,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hZvf7YkU5C03XELRD8PH_TWF-teCXYBIQobVNT50RUQ"},
{"content":{"body":"The equivalence of private fields has always been WeakMap, and the guiding principle is \"how do you give access to the WeakMap instance to access private data\". In JS, the WeakMap instance is an object capability like everything else. No-one should be able to get object references without explicitely receiving them.","m.mentions":{},"msgtype":"m.text"},"ts":1718285066532,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qNyJFsqVgAQN9NL01kRt8do3ozrFA1FKEfwEaBtNCCo"},
{"content":{"body":"you can use shared structs as a WeakMap key in a per-thread WeakMap?","m.mentions":{},"msgtype":"m.text"},"ts":1718285096412,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dRXs2yNqBTpdGMg1eddrq5cpGqGkBoMYDwX8ckW32qA"},
{"content":{"body":" * you can use shared structs as a WeakMap key in a per-thread WeakMap","m.mentions":{},"m.new_content":{"body":"you can use shared structs as a WeakMap key in a per-thread WeakMap","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dRXs2yNqBTpdGMg1eddrq5cpGqGkBoMYDwX8ckW32qA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718285101185,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bvAZwl5uWgp8cO98gCTqaQpkd6Nf7Bw7Z2UYH5ixdtQ"},
{"content":{"body":"that's fine","m.mentions":{},"msgtype":"m.text"},"ts":1718285102277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KoSS2kWUInxdf-2SIrrHJtVwPDZzkE_txKdi4HEpSY0"},
{"content":{"body":"Methods are just functions with lexical access to private state. The correlation mechanism is to make sure you're using the *right* functions (methods) in a given realm. Free functions provide no benefits.","format":"org.matrix.custom.html","formatted_body":"Methods are just functions with lexical access to private state. The correlation mechanism is to make sure you're using the <em>right</em> functions (methods) in a given realm. Free functions provide no benefits.","m.mentions":{},"msgtype":"m.text"},"ts":1718285161420,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fm2VIg4W__MNW_d32sVGfDCIKiB-_UnT1bW066z-XrQ"},
{"content":{"body":"yeah exactly!","m.mentions":{},"msgtype":"m.text"},"ts":1718285171188,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-5Jv4q9quHrakFPDeza2cKnhTijIXNKWzwyMyFpFvME"},
{"content":{"body":"IMO the only interest to private data is to have it shared, so that it can be used for encapsulation","m.mentions":{},"msgtype":"m.text"},"ts":1718285191835,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3qQtb6wU9iC8-9aQQSAl3MCkYi5Rj0JD5kw1--IzWvA"},
{"content":{"body":"i am going to become le joker","m.mentions":{},"msgtype":"m.text"},"ts":1718285262116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$onbrMopF8xMea8LtANq_gt0YrRSW1LCMbZI73RwKyd0"},
{"content":{"body":"And if you want to guard your shared memory multithreading data structures and logic with a wrapper facade, as Mark suggested, you can do the same thing with methods. Methods vs functions has no impact on that.","m.mentions":{},"msgtype":"m.text"},"ts":1718285268526,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J2lFKjdG3jxa8-v7jb7sZhIXVK-h4GVdLu4NsGdqvGs"},
{"content":{"body":"> <@mhofman:matrix.org> IMO the only interest to private data is to have it shared, so that it can be used for encapsulation\n\nThat's precisely why I want private state to be an option for shared structs in the future.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3qQtb6wU9iC8-9aQQSAl3MCkYi5Rj0JD5kw1--IzWvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>IMO the only interest to private data is to have it shared, so that it can be used for encapsulation</blockquote></mx-reply>That's precisely why I want private state to be an option for shared structs in the future.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3qQtb6wU9iC8-9aQQSAl3MCkYi5Rj0JD5kw1--IzWvA"}},"msgtype":"m.text"},"ts":1718285383990,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ixjAhwVg3Ttd-v2V8etwTSyRD2ncSUe6odsQNdd89RU"},
{"content":{"body":"i want to be very clear on my thinking on footguns","m.mentions":{},"msgtype":"m.text"},"ts":1718285469315,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zDcGHMZwBvsMWXEXCy5pep7Wn_302b7meb4BVmV2Sv4"},
{"content":{"body":"where something _is already expressible_, we should be thinking hard about not introducing alternative forms that are easy to get wrong, or easy to be slow, etc. because the incentive for a developer to do a thing is because it has the semantics the developer wants to do. so if choosing between form A and B that have more or less the same core behavior but differ in performance or some aspect of correctness, we shouldn't add forms that have higher likelihood of being slow or incorrect","format":"org.matrix.custom.html","formatted_body":"where something <em>is already expressible</em>, we should be thinking hard about not introducing alternative forms that are easy to get wrong, or easy to be slow, etc. because the incentive for a developer to do a thing is because it has the semantics the developer wants to do. so if choosing between form A and B that have more or less the same core behavior but differ in performance or some aspect of correctness, we shouldn't add forms that have higher likelihood of being slow or incorrect","m.mentions":{},"msgtype":"m.text"},"ts":1718285584824,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rrOrjaTlAwqcG3JQ3-T2-jcnwErNzWYesAxwSXH-n8A"},
{"content":{"body":"but if one's claim is that the likelihood of incorrectness comes from _expressing the thing at all_ (like shared memory), banning alternate forms adds friction for zero gain!","format":"org.matrix.custom.html","formatted_body":"but if one's claim is that the likelihood of incorrectness comes from <em>expressing the thing at all</em> (like shared memory), banning alternate forms adds friction for zero gain!","m.mentions":{},"msgtype":"m.text"},"ts":1718285655298,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jgQa63IXGP_cCiEvpYi9dg_9qEvI9SMDTvBehKmQTqk"},
{"content":{"body":"In terms of TypeScript's \"incremental adoption\" story, most of our AST nodes are essentially \"immutable\" after they are created (though that's only enforced through type checking). Being able to produce AST nodes in parallel parsers and collect them in the main thread for checking, and then spin them out to parallel emitters would be essential for incremental adoption in TS. Public fields aren't really a concern since we could annotate them with a design-time only `readonly` modifier, though it would be interesting to add an actual concept of an init-only field, e.g., `shared struct S { const x; ... }`","format":"org.matrix.custom.html","formatted_body":"In terms of TypeScript's \"incremental adoption\" story, most of our AST nodes are essentially \"immutable\" after they are created (though that's only enforced through type checking). Being able to produce AST nodes in parallel parsers and collect them in the main thread for checking, and then spin them out to parallel emitters would be essential for incremental adoption in TS. Public fields aren't really a concern since we could annotate them with a design-time only <code>readonly</code> modifier, though it would be interesting to add an actual concept of an init-only field, e.g., <code>shared struct S { const x; ... }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1718286098467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jOQlAH07daC4iCpeyX5L6aDS-5x1Kc65lBe_4JTGcsQ"},
{"content":{"body":"ah right, that reminds me i didn't respond to the narrow point that mark made about the Point example being incorrect","m.mentions":{},"msgtype":"m.text"},"ts":1718286178627,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hTrVdabeH40V23XJjZbgWVTw2PgbhpkoAQFjPJpo0QU"},
{"content":{"body":"i also didn't show any code mutating .x and .y :)","m.mentions":{},"msgtype":"m.text"},"ts":1718286184707,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_LU3g-Bmb-Q_xFSYDhuQusNvwdEyWF5D8RpdMu5Q5dQ"},
{"content":{"body":" * ah right, that reminds me i didn't respond to the narrow point that mark made about the Point example being not thread safe","m.mentions":{},"m.new_content":{"body":"ah right, that reminds me i didn't respond to the narrow point that mark made about the Point example being not thread safe","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hTrVdabeH40V23XJjZbgWVTw2PgbhpkoAQFjPJpo0QU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718286193008,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y-xxm2VSNR-DAcRzTBQcMT2JYu7BrNVUWvb_3oQTySA"},
{"content":{"body":"But for incremental adoption to work those nodes would need to have methods, otherwise we would need to rewrite the entire compiler to even get started.","m.mentions":{},"msgtype":"m.text"},"ts":1718286278030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TDbcIr9c54mp4FExWfesPRX_7TGhHNLMdDfOyAhuNVE"},
{"content":{"body":"> <@rbuckton:matrix.org> Do we, as a committee, think JS privacy is a security feature? Would it be unforgivable if private state isn't really private at the realm boundary? If we could have `struct S { #x; ... }` in realm A mapped to `struct S { x; ... }` in realm B, would we consider that a security vulnerability?\n\nyes, yes, and yes.  if I understand your example correctly, the private field on A being accessible from B, I would consider that a security vulnerability\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sOP53ZLnxKyzbW9Pwxe2UfAJURQhHLrlTw7tFVwtxvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Do we, as a committee, think JS privacy is a security feature? Would it be unforgivable if private state isn't really private at the realm boundary? If we could have <code>struct S { #x; ... }</code> in realm A mapped to <code>struct S { x; ... }</code> in realm B, would we consider that a security vulnerability?</blockquote></mx-reply>yes, yes, and yes.  if I understand your example correctly, the private field on A being accessible from B, I would consider that a security vulnerability","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sOP53ZLnxKyzbW9Pwxe2UfAJURQhHLrlTw7tFVwtxvs"}},"msgtype":"m.text"},"ts":1718287097974,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$VWZ0yphmol5gez85rIkufNbJzCv5PtOzyLk2iXvzJE8"},
{"content":{"body":"> <@softwarechris:matrix.org> yes, yes, and yes.  if I understand your example correctly, the private field on A being accessible from B, I would consider that a security vulnerability\n\nThen I would expect that WASM can't read JS private state directly as it constitutes a vulnerability. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VWZ0yphmol5gez85rIkufNbJzCv5PtOzyLk2iXvzJE8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br />yes, yes, and yes.  if I understand your example correctly, the private field on A being accessible from B, I would consider that a security vulnerability</blockquote></mx-reply>Then I would expect that WASM can't read JS private state directly as it constitutes a vulnerability.","m.relates_to":{"m.in_reply_to":{"event_id":"$VWZ0yphmol5gez85rIkufNbJzCv5PtOzyLk2iXvzJE8"}},"msgtype":"m.text"},"ts":1718287230491,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l9CttEuDrg8K5vwMXRSnVMqdVChscGsm2Gr82X-dfhg"},
{"content":{"body":"But I also do not hold that private state is a security feature. ","msgtype":"m.text"},"ts":1718287319992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xNUTZQ4SvcCWX2T10VqkOUdvF4prUjA6kkj2KGeXkBU"},
{"content":{"body":"> <@rbuckton:matrix.org> But I also do not hold that private state is a security feature.\n\nwould you agree that encapsulation is a security feature?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xNUTZQ4SvcCWX2T10VqkOUdvF4prUjA6kkj2KGeXkBU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But I also do not hold that private state is a security feature. </blockquote></mx-reply>would you agree that encapsulation is a security feature?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xNUTZQ4SvcCWX2T10VqkOUdvF4prUjA6kkj2KGeXkBU"}},"msgtype":"m.text"},"ts":1718287648802,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$oI85wsWgTGfUcCrATBlZm0ERT5D6P9fMXybMDxz177Q"},
{"content":{"body":"to be clear I don't suggest that privacy is _exclusively_ a security feature","format":"org.matrix.custom.html","formatted_body":"to be clear I don't suggest that privacy is <em>exclusively</em> a security feature","m.mentions":{},"msgtype":"m.text"},"ts":1718287693957,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$OMnnPXKoKXegquHtG8q3zgy7stbHkH5xFbPYVIQmEKM"},
{"content":{"body":" * to be clear I don't suggest that privacy (or encapsulation in general) is _exclusively_ a security feature","format":"org.matrix.custom.html","formatted_body":" * to be clear I don't suggest that privacy (or encapsulation in general) is <em>exclusively</em> a security feature","m.mentions":{},"m.new_content":{"body":"to be clear I don't suggest that privacy (or encapsulation in general) is _exclusively_ a security feature","format":"org.matrix.custom.html","formatted_body":"to be clear I don't suggest that privacy (or encapsulation in general) is <em>exclusively</em> a security feature","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OMnnPXKoKXegquHtG8q3zgy7stbHkH5xFbPYVIQmEKM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718287713280,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$ajSPI86T85HSlbzyEk_7auTJyxNYWXJoML3gC_afwTA"},
{"content":{"body":"I see it as a developer experience/convenience mechanism. It's not that I think it should be less \"secure\", per se, but that I don't consider private state to be trustworthy as there are limitations to its \"security\" in some situations. ","msgtype":"m.text"},"ts":1718287789750,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YAuzZEO7hb44vppv5soM_PmglDq68kUdz67CrBG_1Co"},
{"content":{"body":"I agree with not relying on it completely as a protection mechanism","m.mentions":{},"msgtype":"m.text"},"ts":1718287827526,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$EYtIbV0yKwljxF4j2ijO-JqWie7FgWSsCibdc2BPnmc"},
{"content":{"body":"> <@softwarechris:matrix.org> would you agree that encapsulation is a security feature?\n\nthat risks devolving into arguing what \"security\" means so i think of it in terms of SLAs and who's responsible for hitting those SLAs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oI85wsWgTGfUcCrATBlZm0ERT5D6P9fMXybMDxz177Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>would you agree that encapsulation is a security feature?</blockquote></mx-reply>that risks devolving into arguing what \"security\" means so i think of it in terms of SLAs and who's responsible for hitting those SLAs","m.mentions":{"user_ids":["@softwarechris:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oI85wsWgTGfUcCrATBlZm0ERT5D6P9fMXybMDxz177Q"}},"msgtype":"m.text"},"ts":1718287852037,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cVXUEc_M6CmWJPkuC7vJpHfwckr2YMvixAv05lph-C0"},
{"content":{"body":"> <@shuyuguo:matrix.org> that risks devolving into arguing what \"security\" means so i think of it in terms of SLAs and who's responsible for hitting those SLAs\n\nI'm just trying to understand his perspective and where the line is drawn","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cVXUEc_M6CmWJPkuC7vJpHfwckr2YMvixAv05lph-C0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that risks devolving into arguing what \"security\" means so i think of it in terms of SLAs and who's responsible for hitting those SLAs</blockquote></mx-reply>I'm just trying to understand his perspective and where the line is drawn","m.mentions":{"user_ids":["@shuyuguo:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cVXUEc_M6CmWJPkuC7vJpHfwckr2YMvixAv05lph-C0"}},"msgtype":"m.text"},"ts":1718287880171,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$5lzH-fGsoM_7Gkz3F_8DugIb0Tn3NS6yMYKTCNlBL5I"},
{"content":{"body":"forgetting about security for the moment, the private field on A being accessible from B, is it not problematic that this is violating privacy/encapsulation in general?","m.mentions":{},"msgtype":"m.text"},"ts":1718287912215,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$0IfLUROroRqZ_YQS7fDX7bSPedBgG0o0hjBNXVgob8w"},
{"content":{"body":"practically to me, as a SWE, \"security\" means the highest priority bug that we'll pull out all the stops for to fix","m.mentions":{},"msgtype":"m.text"},"ts":1718287915274,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V9ARnsjpvrSIzvI4ZWnFGHq_Ao0P6KUyElPq05222AM"},
{"content":{"body":"> <@softwarechris:matrix.org> forgetting about security for the moment, the private field on A being accessible from B, is it not problematic that this is violating privacy/encapsulation in general?\n\nall bugs are problematic, i'm explaining the real world consequences of how problematic it's considered","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0IfLUROroRqZ_YQS7fDX7bSPedBgG0o0hjBNXVgob8w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>forgetting about security for the moment, the private field on A being accessible from B, is it not problematic that this is violating privacy/encapsulation in general?</blockquote></mx-reply>all bugs are problematic, i'm explaining the real world consequences of how problematic it's considered","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0IfLUROroRqZ_YQS7fDX7bSPedBgG0o0hjBNXVgob8w"}},"msgtype":"m.text"},"ts":1718287961074,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y55xlMT5EYbkFa-KeF8_pkLijprM1FXsoD_leyGR1xQ"},
{"content":{"body":"if there were a bug with private fields, browser VMs aren't going consider it a \"security bug\" in that we're not going to be trying to get a fix ASAP, respin binaries for stable branch, etc","m.mentions":{},"msgtype":"m.text"},"ts":1718288011655,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kwcMLStTAl_Nc4TOYTVuvKydrFnCKBVU7fXQxvScIu8"},
{"content":{"body":"but an application that depends on that private field might","m.mentions":{},"msgtype":"m.text"},"ts":1718288019887,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2i1i-7LQFdjoH9QSlBC-iOjFC2U38aZzLrPce6Dx28o"},
{"content":{"body":"> <@shuyuguo:matrix.org> all bugs are problematic, i'm explaining the real world consequences of how problematic it's considered\n\nI may not be connecting the dots between what you're saying and what Ron is saying","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Y55xlMT5EYbkFa-KeF8_pkLijprM1FXsoD_leyGR1xQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>all bugs are problematic, i'm explaining the real world consequences of how problematic it's considered</blockquote></mx-reply>I may not be connecting the dots between what you're saying and what Ron is saying","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Y55xlMT5EYbkFa-KeF8_pkLijprM1FXsoD_leyGR1xQ"}},"msgtype":"m.text"},"ts":1718288094205,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$cJXqxXlzTUhgpxV5NgEik5nKxF2_qFITFZU4BHfHk7I"},
{"content":{"body":"okay then ignore me, i don't think it's particularly important for this concrete topic","m.mentions":{},"msgtype":"m.text"},"ts":1718288150870,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a_MMAa7iEBUUrMD0pfzSjYnTIW6Koebx-9O-2ugVymg"},
{"content":{"body":"IANA's rule for zone merges is that the largest-population city (at the time of the merge) wins.","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$2P2i9Sre0INQM7SJWggdC7OVG-9ogb5FLF7w1ZcXUeE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718288442870,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$MrAJKHjzyH5LRxMnDIGUTZm6exxMVoI9zw7p8Oj3TBM"},
{"content":{"body":"If privacy is an important security concern, then you must have an unforgeable correlation mechanism. Auto-correlation by source location is unforgeable. I'll admit I still don't quite understand Mathieu Hofman's suggestion about an unforgeable type descriptor as it still seems unsound to me.","format":"org.matrix.custom.html","formatted_body":"If privacy is an important security concern, then you must have an unforgeable correlation mechanism. Auto-correlation by source location is unforgeable. I'll admit I still don't quite understand <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>'s suggestion about an unforgeable type descriptor as it still seems unsound to me.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1718288758654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xpdOG9H4r826fWQfMpVEiOpokteBN8K9AvxD-51guWg"},
{"content":{"body":"They also do this across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the [402 PR](https://github.com/tc39/ecma402/pull/877) we approved on Tuesday) backs out. \n\nBut backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from. \n\nWhat's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.","format":"org.matrix.custom.html","formatted_body":"<p>They also do this across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the <a href=\"https://github.com/tc39/ecma402/pull/877\">402 PR</a> we approved on Tuesday) backs out.</p>\n<p>But backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from.</p>\n<p>What's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.</p>\n","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$MrAJKHjzyH5LRxMnDIGUTZm6exxMVoI9zw7p8Oj3TBM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718288769348,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$FspdGMYbN7YgGu-WvMWuZiG-vsaqEWY8I0RJj-uWaPw"},
{"content":{"body":" * They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the [402 PR](https://github.com/tc39/ecma402/pull/877) we approved on Tuesday) backs out.\n\nBut backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from.\n\nWhat's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.","format":"org.matrix.custom.html","formatted_body":" * <p>They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the <a href=\"https://github.com/tc39/ecma402/pull/877\">402 PR</a> we approved on Tuesday) backs out.</p>\n<p>But backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from.</p>\n<p>What's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.</p>\n","m.mentions":{},"m.new_content":{"body":"They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the [402 PR](https://github.com/tc39/ecma402/pull/877) we approved on Tuesday) backs out.\n\nBut backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from.\n\nWhat's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.","format":"org.matrix.custom.html","formatted_body":"<p>They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the <a href=\"https://github.com/tc39/ecma402/pull/877\">402 PR</a> we approved on Tuesday) backs out.</p>\n<p>But backing out intra-country merges too would make time zone pickers hugely confusing, and backing out some but not others would generate political fuss that I think TC39 (and CLDR) wants to stay far away from.</p>\n<p>What's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FspdGMYbN7YgGu-WvMWuZiG-vsaqEWY8I0RJj-uWaPw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718288793128,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$rxvwoMEVUAoO-H68J_c61f9cfBT6vQaW36YRq8VceX0"},
{"content":{"body":" * They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the [402 PR](https://github.com/tc39/ecma402/pull/877) we approved on Tuesday) backs out.\n\nBut backing out intra-country merges too would make time zone picker UIs hugely confusing for end users, and backing out some but not others would generate political fuss that TC39 (and CLDR) wants to stay far away from.\n\nWhat's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.","format":"org.matrix.custom.html","formatted_body":" * <p>They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the <a href=\"https://github.com/tc39/ecma402/pull/877\">402 PR</a> we approved on Tuesday) backs out.</p>\n<p>But backing out intra-country merges too would make time zone picker UIs hugely confusing for end users, and backing out some but not others would generate political fuss that TC39 (and CLDR) wants to stay far away from.</p>\n<p>What's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.</p>\n","m.mentions":{},"m.new_content":{"body":"They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the [402 PR](https://github.com/tc39/ecma402/pull/877) we approved on Tuesday) backs out.\n\nBut backing out intra-country merges too would make time zone picker UIs hugely confusing for end users, and backing out some but not others would generate political fuss that TC39 (and CLDR) wants to stay far away from.\n\nWhat's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.","format":"org.matrix.custom.html","formatted_body":"<p>They also do merges across country boundaries, which is the thing that CLDR (correctly, IMO and now according to the <a href=\"https://github.com/tc39/ecma402/pull/877\">402 PR</a> we approved on Tuesday) backs out.</p>\n<p>But backing out intra-country merges too would make time zone picker UIs hugely confusing for end users, and backing out some but not others would generate political fuss that TC39 (and CLDR) wants to stay far away from.</p>\n<p>What's nice about the \"don't merge across country codes\" rule is that ISO 3166-1 decides what the country codes are, not CLDR or TC39. And IANA maps every country code to a Zone. So JS can just draft behind others.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FspdGMYbN7YgGu-WvMWuZiG-vsaqEWY8I0RJj-uWaPw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718288826766,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$suPM-VwVtsr8PDJK3Y2vM788GOmTHHcmPzXwgKmq6H8"},
{"content":{"body":"One more important detail: today, merges are really visible in JS because Intl.DateTimeFormat canonicalizes zone IDs.\n\nThis behavior will change once Temporal is Stage 4. So if you create a Temporal.ZonedDateTime with America/Montreal, then it will stay America/Montreal. \n\nAfter Temporal Stage 4, the only place that merges will matter up in JS will be when the IDs come from ECMAScript built-ins: when reading the system's current time zone and when calling Intl.supportedValuesOf('timeZone').\n\nAny time users provide IDs, JS won't touch them anymore.  Vive La Quebec! ","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$FspdGMYbN7YgGu-WvMWuZiG-vsaqEWY8I0RJj-uWaPw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718289099277,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$CRUxjAUg0l-vIaY-5fHSUqkYuCF8W3oMGWl2dyIlmpo"},
{"content":{"body":"Le Quebec? ","m.mentions":{},"m.relates_to":{"event_id":"$b4ZfKsbIyZe-grW_AN6-QdJRLHShqLMq8lBbeKwnP4A","is_falling_back":true,"m.in_reply_to":{"event_id":"$CRUxjAUg0l-vIaY-5fHSUqkYuCF8W3oMGWl2dyIlmpo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718289112134,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$r7t1CaVNvaHdvcKXd8kGwT25iItQg86LUyGt00JKjkc"},
{"content":{"body":"> <@rkirsling:matrix.org> yeah that's an interesting typo that only an English speaker could make\n\nYep, guilty as charged!  I was in a hurry and made a typo. Thanks hax (HE Shi-Jun) for calling it out. I just corrected the slide. \n\nSorry it's taken so long to respond, I'm just now catching up on matrix. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9pfmgsShA192RoROyWtK8s9bCgTiY983AiBvhxRk78s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>yeah that&#39;s an interesting typo that only an English speaker could make</blockquote></mx-reply><p>Yep, guilty as charged!  I was in a hurry and made a typo. Thanks <a href=\"https://matrix.to/#/@haxjs:matrix.org\">hax (HE Shi-Jun)</a> for calling it out. I just corrected the slide.</p>\n<p>Sorry it's taken so long to respond, I'm just now catching up on matrix.</p>\n","m.mentions":{"user_ids":["@rkirsling:matrix.org","@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9pfmgsShA192RoROyWtK8s9bCgTiY983AiBvhxRk78s"}},"msgtype":"m.text"},"ts":1718289286722,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$Xs_EzGz4mV7UisxdaRV3n8O0i3UaNIOZWKyqFoeu8bE"},
{"content":{"body":"> If privacy is an important security concern, then you must have an unforgeable correlation mechanism. Auto-correlation by source location is unforgeable.\n👍️","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>If privacy is an important security concern, then you must have an unforgeable correlation mechanism. Auto-correlation by source location is unforgeable.<br>👍️</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718289462482,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nzK3h-mvFgQJ60MQYcuun1NGjkC4HSF6g5TxJXIV-Rc"},
{"content":{"body":"> <@littledan:matrix.org> Yes, ICU and JS implementations tend to implement this historical part\n\nMy understanding was that JS implementations don't actually use the data in `backzone`. I think (not 100% sure) that  the actual timezone data used is Asia/Shanghai. Here's Chrome: \n\n```\nnew Intl.DateTimeFormat(\"en\", {timeZone: 'Asia/Chongqing', timeStyle: 'long'}).format(new Date('1940-01-01T00:00Z'))\n// => '8:00:00 AM GMT+8'\nnew Intl.DateTimeFormat(\"en\", {timeZone: 'Asia/Shanghai', timeStyle: 'long'}).format(new Date('1940-01-01T00:00Z'))\n//=> '8:00:00 AM GMT+8' \n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bctacmZDjfy5i3ciYYwx9udbk7Rj6Fm9h3Pp38g4BJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yes, ICU and JS implementations tend to implement this historical part</blockquote></mx-reply><p>My understanding was that JS implementations don't actually use the data in <code>backzone</code>. I think (not 100% sure) that  the actual timezone data used is Asia/Shanghai. Here's Chrome:</p>\n<pre><code>new Intl.DateTimeFormat(\"en\", {timeZone: 'Asia/Chongqing', timeStyle: 'long'}).format(new Date('1940-01-01T00:00Z'))\n// =&gt; '8:00:00 AM GMT+8'\nnew Intl.DateTimeFormat(\"en\", {timeZone: 'Asia/Shanghai', timeStyle: 'long'}).format(new Date('1940-01-01T00:00Z'))\n//=&gt; '8:00:00 AM GMT+8' \n</code></pre>\n","m.mentions":{"user_ids":["@littledan:matrix.org","@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bctacmZDjfy5i3ciYYwx9udbk7Rj6Fm9h3Pp38g4BJw"}},"msgtype":"m.text"},"ts":1718308961537,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$kdF-ybZCc8Pv7v33GuflWV3GvKOOWNDyGAx7Z1GO7xs"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Could somebody re-explain to me this comment? 😅 Do databases use timezones that are not the timezones we are using in temporal?\n\nnicolo-ribaudo:  - did you get an answer to this?  I don't remember this comment but it was a long presentation so it might have slipped by me. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$va0Hd0QcjolQ0GCLb8c46TfnfYSt2gqx6440muOUWRY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Could somebody re-explain to me this comment? 😅 Do databases use timezones that are not the timezones we are using in temporal?</blockquote></mx-reply><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>:  - did you get an answer to this?  I don't remember this comment but it was a long presentation so it might have slipped by me.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$va0Hd0QcjolQ0GCLb8c46TfnfYSt2gqx6440muOUWRY"}},"msgtype":"m.text"},"ts":1718310936374,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$S6tgdpFte38ZREh5OpNBDdxdZuCZcL5UNC4mAZ6odZg"},
{"content":{"body":"> <@leftmostcat:matrix.org> justingrant ptomato I'd definitely be interested in discussing declarative custom time zone behavior further.\n\nleftmostcat (UTC-7): I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalednar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nhqIytFq24mqBPoZKqJBNVm9eGb-KAhkSTydH9jYPKQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">@leftmostcat:matrix.org</a><br><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a> I'd definitely be interested in discussing declarative custom time zone behavior further.</blockquote></mx-reply><a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">leftmostcat (UTC-7)</a>: I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalednar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","m.mentions":{"user_ids":["@leftmostcat:matrix.org","@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nhqIytFq24mqBPoZKqJBNVm9eGb-KAhkSTydH9jYPKQ"}},"msgtype":"m.text"},"ts":1718311849916,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$1aFcWkG5zMbBARgLMxWb5A7045ZKp-tnXDArMNLNRSk"},
{"content":{"body":"> <@justingrant:matrix.org> leftmostcat (UTC-7): I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalednar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.\n\nI would be.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1aFcWkG5zMbBARgLMxWb5A7045ZKp-tnXDArMNLNRSk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@justingrant:matrix.org\">@justingrant:matrix.org</a><br><a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">leftmostcat (UTC-7)</a>: I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalednar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.</blockquote></mx-reply>I would be.","m.mentions":{"user_ids":["@justingrant:matrix.org","@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1aFcWkG5zMbBARgLMxWb5A7045ZKp-tnXDArMNLNRSk"}},"msgtype":"m.text"},"ts":1718312135708,"senderName":"leftmostcat (UTC-7)","senderId":"@leftmostcat:matrix.org","id":"$cyG_Zt4jO1HuOAXRrWxz-A3uq2fKzN-L2xZqoYiuZzw"},
{"content":{"body":"> <@leftmostcat:matrix.org> I would be.\n\nGreat!  I'll DM you and we can get a proposal started.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cyG_Zt4jO1HuOAXRrWxz-A3uq2fKzN-L2xZqoYiuZzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">@leftmostcat:matrix.org</a><br>I would be.</blockquote></mx-reply>Great!  I'll DM you and we can get a proposal started.","m.mentions":{"user_ids":["@leftmostcat:matrix.org","@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cyG_Zt4jO1HuOAXRrWxz-A3uq2fKzN-L2xZqoYiuZzw"}},"msgtype":"m.text"},"ts":1718313424694,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$nvip0fcmR2MfsD7pZkb4s-p4q-6YcEImJNkQe3CwJeQ"},
{"content":{"body":"> <@leftmostcat:matrix.org> justingrant ptomato I'd definitely be interested in discussing declarative custom time zone behavior further.\n\n * leftmostcat (UTC-7): I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalendar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nhqIytFq24mqBPoZKqJBNVm9eGb-KAhkSTydH9jYPKQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">@leftmostcat:matrix.org</a><br><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a> I'd definitely be interested in discussing declarative custom time zone behavior further.</blockquote></mx-reply> * <a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">leftmostcat (UTC-7)</a>: I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalendar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","m.mentions":{},"m.new_content":{"body":"leftmostcat (UTC-7): I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalendar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leftmostcat:matrix.org\">leftmostcat (UTC-7)</a>: I would like to start a proposal for declarative custom time zones. Would you be interested in co-championing this with me?  I don't have the domain expertise in iCalendar/jCal/JSCalendar to turn their schemas into spec text, but if you (or someone you know) is interested in doing that part, then I'd be eager to help turn that into reality.","m.mentions":{"user_ids":["@leftmostcat:matrix.org","@pchimento:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1aFcWkG5zMbBARgLMxWb5A7045ZKp-tnXDArMNLNRSk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718313755843,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$YtsMtbsRrwJrjIJDA1EDpKYC3tJxKWHCIGbnTxLP3LQ"},
{"content":{"body":"speaking of timezones, people interested may wish to follow or contribute to the proposal for adding timezones to WASI https://github.com/WebAssembly/wasi-clocks/pull/61","m.mentions":{},"msgtype":"m.text"},"ts":1718314006728,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jeCdCw3-sfow5LmGOFD-e5drCvHmQkE5BvDBhJaaarE"}
]