[
{"content":{"body":" * this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":" * this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"m.new_content":{"body":"this was the precise suggestion you made for `global`, if you recall.","format":"org.matrix.custom.html","formatted_body":"this was the precise suggestion you made for <code>global</code>, if you recall.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mhXtOVM1r3YeOdeQRml9pXC6TQQfpMbBWpBmMMfahmU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718258332176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qqcf2mskIMEjgC8AJnsqPHWDGAnbSAa9K-azBY3Fls0"},
{"content":{"body":"global was in a known web-incompatible state with no changes publicly proposed over the course of a year, so I think that's different. We don't have particular known issues for Temporal, and definitely not with respect to web compatibility.","m.mentions":{},"msgtype":"m.text"},"ts":1718262042938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J6q9vyQNfSl9ODcn_Zlx8ha1V35XHWxLRua6n71_7ko"},
{"content":{"body":"(or did I say something about what should happen after the new name was proposed? I don't remember making that suggestion at that time.)","m.mentions":{},"msgtype":"m.text"},"ts":1718262127261,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8E5uZh4iqUd2bmquVCXR6sJXvCgL6iMM4wo_G2OMtDM"},
{"content":{"body":"very true that there's no web compat concern; it's not exactly the same","m.mentions":{},"msgtype":"m.text"},"ts":1718262136427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e__WvIG7Htdj2Ib2GFcFfi1mAhBem79p4GLERaGhlnU"},
{"content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to chnage","m.mentions":{},"msgtype":"m.text"},"ts":1718262169057,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY"},
{"content":{"body":" * but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"m.new_content":{"body":"but what i remember is that you argued (a position i disagreed with at the time, but have come around on and now agree with) that it should have dropped to stage 2 since the name was going to change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GdGEfyU8mAnE4jyRFH2GR8-3bIqzPegYVV56s2Te7FY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262171214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n5lvm_pYIxYzmmP05HyxsXn6sPEYuwlRFp5Cp8fqnyU"},
{"content":{"body":"right, so that's a case of a change that needs to happen for something to be shippable, whereas we're not aware of changes that need to happen for Temporal for it to be shippable","m.mentions":{},"msgtype":"m.text"},"ts":1718262210814,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NnI4b5TCYnFNL0v9x8k-CBjEtuC0His5lL95S894CfM"},
{"content":{"body":"wasn't that the entire agenda item? it was too big to be shippable.","m.mentions":{},"msgtype":"m.text"},"ts":1718262230631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OnpQhwVPQI60myq9mvXYzKs8TUA5eVAwkILBJ9fWO8E"},
{"content":{"body":"and we addressed it, we hope (modulo implementer feedback, which makes sense to seek during Stage 3)","m.mentions":{},"msgtype":"m.text"},"ts":1718262271002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F34D2kU65vCCMhtSMtU__Jek3y-2LV8Oh_c6izNcI0A"},
{"content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"ts":1718262320826,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc"},
{"content":{"body":" * right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"m.new_content":{"body":"right. it's the \"we hope\" part that's been proven false in nearly every plenary for the last 4 years, and i'd think that (likely well) over 10 times bitten should at least produce once shy","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x97tvET8C7QxWVQgMdfPj24EvSL9BDtWtidcjkKfLuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262374856,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SXNizrvosx6GqPBw8ak5_WSrjRsT7cdEj5jjnCAZtkw"},
{"content":{"body":"\"once shy\"? ","m.mentions":{},"msgtype":"m.text"},"ts":1718262415454,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$U5Z9vBJxpCUCsa6c9TKeQmsw5cCrpQq_2zfxujc_ZhI"},
{"content":{"body":"lol i was trying to paraphrase \"once bitten twice shy\", i've been up for nearly 20 hours so it might not make sense","m.mentions":{},"msgtype":"m.text"},"ts":1718262444741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kRJNmTXWV2JQhj9Jnsx7Pm9NvexXM2eW2kLJIwKw88w"},
{"content":{"body":"once bitten, twice shy\nidiom\n—used to mean that a person who has failed or been hurt when trying to do something is careful or fearful about doing it again","m.mentions":{},"msgtype":"m.text"},"ts":1718262450694,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1YBC0xNSjfteAItSsADbcuwoA-bf-IIEkmSBVMUC1ag"},
{"content":{"body":"if the corrective action suggested here is to more liberally request consensus to regress proposals when it seems they should be regressed, that seems reasonable to me","m.mentions":{},"msgtype":"m.text"},"ts":1718262530414,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3eQ4MtZLtlWqXj52HiBfYNYs-oRZQDFDilfv1CDVAOs"},
{"content":{"body":"exactly that. which is something we've discussed multiple times in recent years, like with import attributes for example","m.mentions":{},"msgtype":"m.text"},"ts":1718262558245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hdVYaCaPl1YOAPNyCKXFOtnCh3nxRqwAMIfXO1Q1pnc"},
{"content":{"body":"(to pretty consistently positive response, iirc)","m.mentions":{},"msgtype":"m.text"},"ts":1718262575791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r4Qtmgbh0DHLlDSBE3S_wN1kYD0wnGd5BcjhtCDl2Pg"},
{"content":{"body":"so, for import attributes, it was retracted because a change was in progress, which is more similar to the globalThis case.","m.mentions":{},"msgtype":"m.text"},"ts":1718262600841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ow9myXWNEFSNcCjjbGQicJt5r8D380x9Pr83_lvjcaY"},
{"content":{"body":"the concept of a \"scoped demotion\" helped make that palatable, i think","m.mentions":{},"msgtype":"m.text"},"ts":1718262604201,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10rH1Ms5FmstUi1271hmrvMEs_Re8PeMSosCkNyRMho"},
{"content":{"body":"I wonder if the proposed action would have been \"lets split the proposal in two and bring this part back to stage 2\", rather than \"lets remove this part\", the stability impression would have been different","m.mentions":{},"msgtype":"m.text"},"ts":1718262607683,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M5zvbLLNPooNtzIzLBOMRmaKuLquhwiBLd2tMSmjMxY"},
{"content":{"body":"it was unfortunate that we didn't permit ourselves a scoped demotion. I think the committee agreed to the demotion partly because the strongly opinionated people agreed to scoping, even if the committee as a whole wasn't going to commit to scoping.","m.mentions":{},"msgtype":"m.text"},"ts":1718262662233,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XmgsL3olb5J1XPcOuwCCXMjc5pDIcPxc32X-Y2_cPG8"},
{"content":{"body":"or alternatively, at this point we could move it back to ~2 with a scope of \"no design changes, only implementation-driven ones\" - which sounds like stage 3, but, because of the scale of Temporal might be worthy of some flexibility","m.mentions":{},"msgtype":"m.text"},"ts":1718262662481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jFSLrFXRAHey9V6lNAUAbJElIITznXHFKlLfRY6gHfw"},
{"content":{"body":"but there's no design changes proposed here, so I'm not sure what the criteria would be later for re-promotion","m.mentions":{},"msgtype":"m.text"},"ts":1718262682532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pYMTdsgWe_AiW21tOq_fSbEgWQXYo30_qU7PUkrYSmg"},
{"content":{"body":"dropping calendar and timezone were pretty massive design changes","m.mentions":{},"msgtype":"m.text"},"ts":1718262695660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GACb9ubE_DEtd78G0ZgPZ4qhRd2ZEVhlejj5jyqpdyg"},
{"content":{"body":"right, but we don't have any *further* changes proposed","format":"org.matrix.custom.html","formatted_body":"right, but we don't have any <em>further</em> changes proposed","m.mentions":{},"msgtype":"m.text"},"ts":1718262707310,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VJUBDPjIsw8YqIbAcF4KmhV69fzaammVtrUynuhLsqQ"},
{"content":{"body":"oh sure. that's been the case after every plenary tho, until the next one","m.mentions":{},"msgtype":"m.text"},"ts":1718262718998,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ub6wCQS_8jtyBCYXIHB3RjdDAD9O-5L6SE-GfkFM15w"},
{"content":{"body":"when import attributes were re-promoted, there was the idea raised, \"even though we agree on these changes, should we wait longer to let things settle?\" we decided no wait was needed, and that turned out just fine.","m.mentions":{},"msgtype":"m.text"},"ts":1718262743873,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mMYM12lKpeLXJRiYJRgPRWZU1i9ziWj9zdwyAJkq15E"},
{"content":{"body":"since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)","m.mentions":{},"msgtype":"m.text"},"ts":1718262777858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"},
{"content":{"body":"but if more changes come back in july, i think we should seriously consider demoting it until changes stop coming","m.mentions":{},"msgtype":"m.text"},"ts":1718262797118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4FEJUNJxGYAcfcklY-omz8r-MWdMNmu6Tb1sgmVPgmo"},
{"content":{"body":"> <@ljharb:matrix.org> since we won't have time to discuss temporal's stage this meeting, i guess we'll see either way :-)\n\nwe could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>since we won&#39;t have time to discuss temporal&#39;s stage this meeting, i guess we&#39;ll see either way :-)</blockquote></mx-reply>we could have time--I agreed to the chair's request to cut down the signals topic to 30 minutes to permit an overflow topic on this subject.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VyLmHlahNCBb9XrBbkQsyCDF3c975iK4rxjv96MA3F4"}},"msgtype":"m.text"},"ts":1718262806073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f-BoP5gvp3pdfZUOWdX9y9oeOopb8ZKQGTJDvuIGZTs"},
{"content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that","m.mentions":{},"msgtype":"m.text"},"ts":1718262828308,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU"},
{"content":{"body":"ah OK good to know","m.mentions":{},"msgtype":"m.text"},"ts":1718262835245,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KHK46wj1nxxtogmbpWfE44PyGsvPYzbMtC-YZ8Ubp0"},
{"content":{"body":" * perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"m.new_content":{"body":"perhaps yall can indeed discuss it; i'm going to bed in an hour or so and won't be present after that. i sleepy.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gbdEo4BYiZjfjt0-J73UgHBCznrE9pXf9Xs3-pVndEU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262847289,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_OFvTMvFwjCDjtffFp6mh9QUh3So0IwXrVRGm9mdE6c"},
{"content":{"body":"my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"ts":1718262887651,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA"},
{"content":{"body":" * (presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"m.new_content":{"body":"(presumably) my opinion is clear tho so i don't necessarily need to be there","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$j71RkYgz21CRPPmO3Ir2HdaIFZgmDbnQOt4X9oIx1BA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718262949453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QieKWPreXO4dZymafnGVMuMkTIEzFXKZM9ikpmq5Wco"},
{"content":{"body":"I think we've made the points back and forth here; I'm not sure what more we should discuss","m.mentions":{},"msgtype":"m.text"},"ts":1718262992690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IF835DU1ZAf9WLsp2eIHoBbQrdKKrAtyrIbYwVmqvvI"},
{"content":{"body":"it'd only be worth discussing if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"ts":1718263045873,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0"},
{"content":{"body":" * it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"m.new_content":{"body":"it'd only be worth discussing imo if there's a decent chance of a demotion, otherwise it's probably more efficient to just wait til july and revisit if there's more changes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LR-_ULZHxwcJNp-3LOQIz2lPXRJpYrcKyJtyqIUKxK0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718263052176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P65Tib7AyjTMDTTyhdhZfSmsO_bpdbs13fFJjJ4etR8"},
{"content":{"body":"maybe I wasn't clear?","msgtype":"m.text"},"ts":1718264211934,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OaCiVRelAbSV11sWK-96uX36KaUrb-UwtuOW8ry5TQE"},
{"content":{"body":"the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective","msgtype":"m.text"},"ts":1718264251018,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"},
{"content":{"body":"I understood \"High level APIs and Syntax\" to mean the rough design we want to proceed with. We've never been so strict for stage 2.","m.mentions":{},"msgtype":"m.text"},"ts":1718264275727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VW5764aRYQzI3BJisD1IbWYJsswioZRqsuRUs2RXffc"},
{"content":{"body":"\"Placeholders and TODOs are acceptable\"","m.mentions":{},"msgtype":"m.text"},"ts":1718264288224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U5R3I0CiKmxaij_ovdNqX_GG6GmQ9x4-23dA9BrUcjU"},
{"content":{"body":"The description in the Purpose column describes the kinds of things Waldemar is discussing","m.mentions":{},"msgtype":"m.text"},"ts":1718264338249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oAQWw-dWMNvRVS1xbLjbSUXIXHTdTnMAvbZyJjZr3yQ"},
{"content":{"body":"there have been proposals entering stage 2 with entire methods stubbed out","m.mentions":{},"msgtype":"m.text"},"ts":1718264350586,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LB53UL5xiStugHvuCasdHBb3HcE5kou7x1f5D_faoU4"},
{"content":{"body":"re Shane's topic: I think we *do* approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","format":"org.matrix.custom.html","formatted_body":"re Shane's topic: I think we <em>do</em> approve slideshows: we advance things based on conceptual agreements, which I think we have here. Stage 2.7 is where we look for the spec to be basically perfect.","m.mentions":{},"msgtype":"m.text"},"ts":1718264390957,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mv02aKNYoErRWcSNzYlUVGQwdCyIQXIGvq8U8Q18kxU"},
{"content":{"body":"@littledan:matrix.org even stage 4 is advanced on conceptual agreements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> even stage 4 is advanced on conceptual agreements","msgtype":"m.text"},"ts":1718264447295,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ukSv46UgsbKk79Os4AFHJltW21VKyCDTWON8XyJ4MHM"},
{"content":{"body":"> <@michaelficarra:matrix.org> the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered \"major\", which is subjective\n\nagree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the question is NOT about whether there are only editorial changes remaining, it is about whether the remaining changes are considered &quot;major&quot;, which is subjective</blockquote></mx-reply>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6qHy3ZjseMjPTcuwSjCgdWMBPwM6k8Qn4jVJgyOjG_0"}},"msgtype":"m.text"},"ts":1718264485501,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"},
{"content":{"body":"the editor group often finds things *in the 262 spec document* that don't align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","format":"org.matrix.custom.html","formatted_body":"the editor group often finds things <i data-md=\"*\">in the 262 spec document</i> that don&#39;t align to what we conceptually agreed to and we just fix them and notify committee at the next plenary","msgtype":"m.text"},"ts":1718264488869,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jB6POXAyDryp0WofCxO4kUhNLqDuyUcK19NtHD6_vLA"},
{"content":{"body":"part of the editor's job responsibilities is going back through consensus (written and in our memory) to confirm that the document aligns with it","msgtype":"m.text"},"ts":1718264563484,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1726qo7xak2tbnv34SE6UVSYubeCb1tg1ToClw3aJ-k"},
{"content":{"body":"Purpose of Stage 2:\n\n- Refining the solution.\n- Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.\n- Receive and address spec text reviews from the assigned reviewers and the appropriate editor group\n- Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details\n- Investigate integration with relevant host APIs, if necessary","format":"org.matrix.custom.html","formatted_body":"<p>Purpose of Stage 2:</p>\n<ul>\n<li>Refining the solution.</li>\n<li>Work out minor details such as ordering of observable effects, handling of invalid inputs, API names, etc.</li>\n<li>Receive and address spec text reviews from the assigned reviewers and the appropriate editor group</li>\n<li>Produce experimental implementations such as loosely-correct (not for production use) polyfills to aid in validating the design and exploring the details</li>\n<li>Investigate integration with relevant host APIs, if necessary</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264584866,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$worYq05EbVIIj7Z7SFgBcVDROA6l8JdQPFt-cy9SK8c"},
{"content":{"body":"If we agree this is the right direction to go for Decimal, then Stage 2 seems perfectly reasonable. It means we've committed to that direction and now we want to flesh out the details. ","m.mentions":{},"msgtype":"m.text"},"ts":1718264754534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6zYR3kNNti_hDJWvhmmR9eTz5CrH8XfK0BU6tlnipc"},
{"content":{"body":"more greatest hits from the process doc, re: stage 2 status\n\n> The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.","format":"org.matrix.custom.html","formatted_body":"<p>more greatest hits from the process doc, re: stage 2 status</p>\n<blockquote>\n<p>The committee has chosen a preferred solution or solution space, but the design is a draft and may still change significantly.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718264980321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nHyWwV_YRVYQ83INxaZ-tOZIPlAzWTeJZDF5oHRxSwc"},
{"content":{"body":"If we overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"ts":1718265030324,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE"},
{"content":{"body":" * If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"m.new_content":{"body":"If Decimals overflow, please feel free to take time away from Signals (even if it means we don't get to it at all this meeting)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cmTL93sNemkuQJkvUzL0VhdTFgJxO7hC6u4GL06DfuE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265046338,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-jldvJqeEOw6b7JqUcUkiLwM55g7Qz98O38Rrl3ygNc"},
{"content":{"body":"The DurationForrmat update is not going to even come close to filling its timebox, so that clears up time this afternoon","m.mentions":{},"msgtype":"m.text"},"ts":1718265058400,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$U8tIKHjA5_Yz13BaXXt2btxfDxYy1tkPLr2DQbXVgCk"},
{"content":{"body":"(I've reached out to Ujjwal about this)","m.mentions":{},"msgtype":"m.text"},"ts":1718265071718,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$7CumuqbEFYO0Ml6zzwPJBMlwY5ivG4e-ffsSE8UGo_Y"},
{"content":{"body":"Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1718265082163,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"},
{"content":{"body":"I'd like us to not over-rotate on API design based on the temporal experience","m.mentions":{},"msgtype":"m.text"},"ts":1718265219895,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$jKEOc_VOWpmScoOzfCdnA46tOlfqoqU8mJHcmDU8t5E"},
{"content":{"body":"Chrome is working on shipping the web neural network API, that has all the comparisons :)","m.mentions":{},"msgtype":"m.text"},"ts":1718265277853,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ce6vBqeN8x2tu228DL7a1dn0KwKmSNpdboQAfGL5CWc"},
{"content":{"body":"(just to put feedback on Chrome's code size into perspective)","m.mentions":{},"msgtype":"m.text"},"ts":1718265319636,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bbxXYs2aCwEVBHv_wZ-mkEJzfASVKN-MvAHqlfwpPiw"},
{"content":{"body":"If we don't provide an equals method, users will test for = and ≠ via compare(…) == 0 and compare(…) != 0 respectively. This produces incorrect results.","m.mentions":{},"msgtype":"m.text"},"ts":1718265350568,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$pKMw-SnoefeEmNVv-UeHJeV6Osidk7YxJyF0gi2Yv0U"},
{"content":{"body":"Stage 1 is scouting the terrain and coming up with a battle plan.\nStage 2 is starting the long march to battle and preparing fortifications.\nStage 2.7 is checking your gear before the battle starts.\nStage 3 is when you see how much of your plan survives contact with the enemy.\nStage 4 is the parade.","m.mentions":{},"msgtype":"m.text"},"ts":1718265361825,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rXp5R_mpCSPQH6TuhUyNbTwbiXYnKOkB39SHob-FPdA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Duncan MacGregor When comparing floats there is the same beahvior: `1 < NaN` is false, `1 > NaN` is false, and `1 == NaN` is false, so `compare` cannot return neither -1, nor 0, nor 1.\n\nAh right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> When comparing floats there is the same beahvior: <code>1 &lt; NaN</code> is false, <code>1 &gt; NaN</code> is false, and <code>1 == NaN</code> is false, so <code>compare</code> cannot return neither -1, nor 0, nor 1.</blockquote></mx-reply>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J4Jc3g6-qfXHYdk_O1yaDU9I4351ngZ9ExRlDxa3IOg"}},"msgtype":"m.text"},"ts":1718265361878,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"},
{"content":{"body":"> <@aardvark179:matrix.org> Ah right. Too used to comparison methods which return an int and so *cannot* return NaN. It is also worth noting that things like `Array.prototype..sort()` turn a Nan value as +0.\n\nThe .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Ah right. Too used to comparison methods which return an int and so <em>cannot</em> return NaN. It is also worth noting that things like <code>Array.prototype..sort()</code> turn a Nan value as +0.</blockquote></mx-reply>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$inMQjTsZ7TIQ4LWIU0UIloHCyiKGRcExJEd52pGdPk8"}},"msgtype":"m.text"},"ts":1718265417827,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"},
{"content":{"body":"Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible","m.mentions":{},"msgtype":"m.text"},"ts":1718265529952,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"},
{"content":{"body":"facts?","m.mentions":{},"msgtype":"m.text"},"ts":1718265540321,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$i2No75-l7tTopw24KjWwhdUeDd6KMyEXjdOGLWYS_sY"},
{"content":{"body":"that is browsers' position as i understand it, yes","m.mentions":{},"msgtype":"m.text"},"ts":1718265557058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0cRO41_CPNnuIYh2i1LLumqgOPw398OJ3d73M1JOTzc"},
{"content":{"body":"(which impacts both R&T and Decimal)","m.mentions":{},"msgtype":"m.text"},"ts":1718265576293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2eevLidmRhbIBO6VUx4LUFGfz10N0iBZBZHEucqvqoA"},
{"content":{"body":"I understand browsers position as \"a primitive only makes sense if we see proof that it's actually going to be widely used\", and I hope that decimal objects getting adoption will fulfill that","m.mentions":{},"msgtype":"m.text"},"ts":1718265611509,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Yo7c8giBSx3tn229vOArb9vgX5aY6T0LKCWS5rKNcAQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nYeah seems consistent, and maps reasonably to IEEE spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>Yeah seems consistent, and maps reasonably to IEEE spec.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265619888,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ve5OD3e_oKNHH9m4zlRVGu2WbA33wtPUGdJLjGhC8pk"},
{"content":{"body":"I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.","m.mentions":{},"msgtype":"m.text"},"ts":1718265668371,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"},
{"content":{"body":"it can be proved out, though, without being in the spec - that's what npm is for","m.mentions":{},"msgtype":"m.text"},"ts":1718265690394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rj-lspRC3MZHGFQcn1l2ODm3IyYhtmmOddZ6MqqyVoc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"\n\nthis would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />The .sort behavior seems good with the .compare behavior: \"I don't know how to compare these two things, so I don't shuffle them around\"</blockquote></mx-reply>this would be an inconsistent comparator though: https://tc39.es/ecma262/#consistent-comparator","m.relates_to":{"m.in_reply_to":{"event_id":"$jDrbEZQgmhe88tKnjpj6NawV80I-9fhpdU1QkE5z6PU"}},"msgtype":"m.text"},"ts":1718265692103,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},
{"content":{"body":"> <@robpalme:matrix.org> I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.\n\nprecedent?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I do not see any route to convincing browsers that the juice is worth the squeeze on Decimal, other than the incremental route of proving it out first in API form.</blockquote></mx-reply>precedent?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7gSuoJHc-WejfnlBw-XWSzXzw-My8Ru0sZO0BgSqAwA"}},"msgtype":"m.text"},"ts":1718265713283,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$oESqBvnailVC2U5ATpFjJlz8NVFZFIeXYCIVVktqPCE"},
{"content":{"body":"this constraint on primitives is pretty new so i'm not sure there is any precedent","m.mentions":{},"msgtype":"m.text"},"ts":1718265730542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2EMs0C8I9G2HrQCO9RJlM937xRxypo5iONGlokxTho8"},
{"content":{"body":"Ugh, that's annoying. In wonder wether we could extend the definition of consistent comparators to include \"some values can consistently not be compared with any other value\"","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265793461,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},
{"content":{"body":"it would be nice to hear from vendors if that sort of signal would be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"ts":1718265824863,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k"},
{"content":{"body":"Because, NaN returned from .compare happens if and only if one of the arguments is a NaN","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$gNUtEq8M02d-dK_WsROMSIg7l1qAjdOhyyTywlVnDTs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265833303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},
{"content":{"body":"I would have to check if implementations in practice are already doing it","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$2T2sCSyaIYahYfYXB0NIGpXS3g1-sUO-Y8rWCj9MVU4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265853943,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},
{"content":{"body":"very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&via=mozilla.org&via=igalia.com\n> you can get consistent sorting like `newPages.sort( ( a, b ) => (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )`, but I don't think there's any way to avoid some kind of surrogate value","format":"org.matrix.custom.html","formatted_body":"<p>very much related: https://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oOM8aZZATkGRuYJ1QzLp2veLMwV3yXlD1275Z1d6nBs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com</p>\n<blockquote>\n<p>you can get consistent sorting like <code>newPages.sort( ( a, b ) =&gt; (isNaN(a.index) ? Infinity : a.index) - (isNaN(b.index) ? Infinity : b.index) )</code>, but I don't think there's any way to avoid some kind of surrogate value</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$HmNMtY0jPXkl_p64jWRXqL7RYD2o-EMtar_y4hoqWhw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265866280,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},
{"content":{"body":"Infiniti - Infinity is NaN, right?","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$4i7Ww28w9pLBwDH2c2pyUhEF3nb2NaNGDCYZeIfnE5o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265884322,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},
{"content":{"body":" * Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":" * Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.new_content":{"body":"Infinity - Infinity is NaN, right?","format":"org.matrix.custom.html","formatted_body":"Infinity - Infinity is NaN, right?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265889147,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Y-JAuUqrdoD_GOOyPFn7etFMCUR16gSOoXre4dL7rss"},
{"content":{"body":"right","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$agymC7i_JAUB7elqLNhw7E3OOKdsMZqge5tOvbUX-Os"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265896256,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},
{"content":{"body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":" * it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"m.new_content":{"body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","format":"org.matrix.custom.html","formatted_body":"it would be nice to hear from vendors if that sort of signal <del>would</del> might be sufficient to convince","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lmWu_rgoQ8tdla8xdrXu_jesXAQ49TPE9O3MXpUIR_k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718265903815,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$FrmbJZKNSHJR3ShUufVsfS4zzcfhQvjkgH5-qUfv8cs"},
{"content":{"body":"Yes","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Zr1TJEVX44JKxEZdloMJduObhJ5tMN27rSchzJXJufU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265913245,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},
{"content":{"body":"which is treated as zero, i.e. same-sign infinities are not differentiated by that kind of sorting","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$AcWKx_DpUp9w0aSemUhpRrWu1AkkjF7OmLcz1v0reyI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718265957539,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},
{"content":{"body":"> <@softwarechris:matrix.org> agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2\n\nThat's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>agree, and I disagree with the characterization that we are having a meta discussion on process.  we are talking about this proposal and what appear to be blocking possibly based on stage 2.7 or 3 entrance criteria rather than stage 2</blockquote></mx-reply>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.","m.mentions":{"user_ids":["@softwarechris:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mPPy-7HNLYFdn2XoE_LeU3NteXfNdBny6EkbrcOnKHw"}},"msgtype":"m.text"},"ts":1718265991319,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"},
{"content":{"body":"> <@softwarechris:matrix.org> Eemeli's comment makes it sound like it's a foregone conclusion that a new primitive is not possible\n\nI meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>Eemeli&#39;s comment makes it sound like it&#39;s a foregone conclusion that a new primitive is not possible</blockquote></mx-reply>I meant that only in the current specific context of Decimal as a class being proposed to Stage 2.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CDkkA40cbjxB3zxETF9Pk-7Yk89POSEUQa9Yn-rglqY"}},"msgtype":"m.text"},"ts":1718265995731,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$zn772S3slvmXgrfUrosRdgIT8uJmaGYs9PKC1fMT334"},
{"content":{"body":"So the JVM's position on this is\n> Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (<, <=, ==, >=, >) on double values.\nA NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).\nPositive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).\nThis ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.","format":"org.matrix.custom.html","formatted_body":"<p>So the JVM's position on this is</p>\n<blockquote>\n<p>Compares two Double objects numerically. This method imposes a total order on Double objects with two differences compared to the incomplete order defined by the Java language numerical comparison operators (&lt;, &lt;=, ==, &gt;=, &gt;) on double values.<br>A NaN is unordered with respect to other values and unequal to itself under the comparison operators. This method chooses to define Double.NaN to be equal to itself and greater than all other double values (including Double.POSITIVE_INFINITY).<br>Positive zero and negative zero compare equal numerically, but are distinct and distinguishable values. This method chooses to define positive zero (+0.0d), to be greater than negative zero (-0.0d).<br>This ensures that the natural ordering of Double objects imposed by this method is consistent with equals; see this discussion for details of floating-point comparison and ordering.</p>\n</blockquote>\n","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$riQaVQrpxwAkkFDOXQQ4QvQ23HGZ4wXB473U5Jr40Io"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266065433,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},
{"content":{"body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in `Array.prototype.sort()` implementations.","format":"org.matrix.custom.html","formatted_body":"It ends up putting all the doubles at the end of a sorted array, which also seems to be what I see in <code>Array.prototype.sort()</code> implementations.","m.mentions":{},"m.relates_to":{"event_id":"$252qUNDYrJ4OGA448G7qGNH0u3pGqb8QEPGv5BwtjqI","is_falling_back":true,"m.in_reply_to":{"event_id":"$BjZhRJpKkiZ-eMjLZ6EOWQKz5X9zscVy5frDrLb53OU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266167837,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$cuVJHd_Y1XbytyE6rHi65iTRh5JpNABBNJGmjxoVwgQ"},
{"content":{"body":"> <@waldemarh:matrix.org> That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.\n\nyou're right -- and the purpose of the discussion was to clarify","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's an unfair characterization. A lot of folks making this claim are making assumptions about what's currently working and what isn't working in the spec.</blockquote></mx-reply>you're right -- and the purpose of the discussion was to clarify","m.mentions":{"user_ids":["@waldemarh:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w2_9GzwMWQ5FdFDswiDoFDcwywn5B82xXUnRNCzkcUQ"}},"msgtype":"m.text"},"ts":1718266197950,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KlyLGWQ_8g6pblT55Oyzf5TJw5lMXDxQSmQArESeuos"},
{"content":{"body":"The spec is not even in a good enough state for Shane to be able to read and understand it.","m.mentions":{},"msgtype":"m.text"},"ts":1718266234362,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$ODK01oln1WG9HmT0LXpXhVZnZuwbau5t0d2WifkBY4s"},
{"content":{"body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write `new Decimal()` for now while `Decimal()` and `Decimal.prototype.valueOf()` throw, and later we add decimal primitives treating `new Decimal` as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","format":"org.matrix.custom.html","formatted_body":"Could we add Decimal as a class and later add a primitive version for it if we block off relevant functionality to allow for it in the future? i.e., you have to write <code>new Decimal()</code> for now while <code>Decimal()</code> and <code>Decimal.prototype.valueOf()</code> throw, and later we add decimal primitives treating <code>new Decimal</code> as the boxed primitive version? That would give us the opportunity to ship it and prove out its utility in the ecosystem. IIRC, shu's concern was that BigInt added too much complexity for something whose only significant use ended up being for unscrupulous cryptocurrency mining.","m.mentions":{},"msgtype":"m.text"},"ts":1718266247536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CSzCWEpg4CnwWuzAS7uLzbV5oEDp_wdMs2Pzfb7WLVg"},
{"content":{"body":"waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1718266298461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"},
{"content":{"body":"> <@littledan:matrix.org> waldemar: What do you think about \"conditional Stage 2\" on fixing those spec issues?\n\nThat's fine by me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: What do you think about \"conditional Stage 2\" on fixing those spec issues?</blockquote></mx-reply>That's fine by me.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0aljmzFtcjdeqgyBDq6sPU3o4Zdf4Q0uA_LOZse5Plk"}},"msgtype":"m.text"},"ts":1718266313038,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"},
{"content":{"body":"I *want* this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","format":"org.matrix.custom.html","formatted_body":"I <em>want</em> this to go to stage 2. It's just not ready at the moment, but it's getting there quickly.","m.mentions":{},"msgtype":"m.text"},"ts":1718266365150,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VdMfok7gQvcvxSFH3VVPmUdku5BDakjuH-n82-1IpTw"},
{"content":{"body":"> <@waldemarh:matrix.org> That's fine by me.\n\nsffc: ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>That's fine by me.</blockquote></mx-reply><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: ?","m.mentions":{"user_ids":["@waldemarh:matrix.org","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_9k1lac_Bx80Z0KJRed6gLlBYwz4zXlH80JMm7EWat8"}},"msgtype":"m.text"},"ts":1718266371092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wGyPDzje7DpqlmMKrcPH_fiXtZKbFuUPXDdwu14iRp0"},
{"content":{"body":"I'm not convinced by the argument that Decimal is the answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"ts":1718266409545,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8"},
{"content":{"body":" * I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":" * I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"m.new_content":{"body":"I'm not convinced by the argument that Decimal is a *good* answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","format":"org.matrix.custom.html","formatted_body":"I'm not convinced by the argument that Decimal is a <em>good</em> answer to solving rounding issues seen by inexperienced developers, but I do understand that Decimal is a good answer to a particular set of problems.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$23aidUkEN_PGcS226o8_I77O6wjIb5uG11jVDNuYGl8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266422280,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jMZ2H16RM-hlkO-8dqNQjzY-b1uHcDXuotnQZyoeNoI"},
{"content":{"body":"I think the existing libraries have tons of downloads, but maybe that is partly because of people depending on them when they don't really need them","m.mentions":{},"msgtype":"m.text"},"ts":1718266485491,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3TjEXWRwf_fTuUkzviRWiczsX5Xr_jkwKGdIaTS_yvo"},
{"content":{"body":"About the diff with Decimal128 and Temporal, I think it's how people expect. For Decimal128 in non-primitive form, people will say: WTF! For Temporal, people will say: ok, it at least much much better than Date!","m.mentions":{},"msgtype":"m.text"},"ts":1718266508559,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6YOJSA9-cSgW1slxVRtfJaFz3McJu9tOG9LfNZkS3AQ"},
{"content":{"body":"`13,603,794` weekly downloads is tons or no?","format":"org.matrix.custom.html","formatted_body":"<code>13,603,794</code> weekly downloads is tons or no?","m.mentions":{},"msgtype":"m.text"},"ts":1718266526336,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$nuzd9e8JOcTqjyqLD-2PkB6q2-fNfHyHKXfSvdG-EWc"},
{"content":{"body":"looking around on npm, i do see https://www.npmjs.com/package/bignumber.js which has 11m downloads, which is a pretty decent number","m.mentions":{},"msgtype":"m.text"},"ts":1718266539403,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cNzUzOZ_gemOwknOdjgtMmYFvFotzkveDbUJZ_RjGCg"},
{"content":{"body":"https://www.npmjs.com/package/decimal.js, https://www.npmjs.com/package/big.js, https://www.npmjs.com/package/bignumber.js","m.mentions":{},"msgtype":"m.text"},"ts":1718266542994,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$GVVDaGtbCg-Femn8cbXhIea-_TnyxESXu1r5iH0s1NE"},
{"content":{"body":"The spec intelligibility issues are not egregious enough to get in the way of Stage 2 for me; I think the committee sending a positive signal by promoting to Stage 2 is more important at this point in time","m.mentions":{},"msgtype":"m.text"},"ts":1718266546636,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$O2RH3iUJIfoyBd_y3Q_BEU-ojLlu9fplk2xq6bfzRJw"},
{"content":{"body":"50mil","m.mentions":{},"msgtype":"m.text"},"ts":1718266546735,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$Y2iYjDhYmD2Z6Yxs53WFwaCqx1AFRMBOFijl5MaywGc"},
{"content":{"body":"and indeed decimal.js has 17 million","m.mentions":{},"msgtype":"m.text"},"ts":1718266560499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-mVvylkAKEBpdjxkQSian1wvdVicob5TobaJGaN9FgM"},
{"content":{"body":"so that's a great indicator, thank you. (i'd still want the proposal readme to have a list ofc)","m.mentions":{},"msgtype":"m.text"},"ts":1718266586026,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-RueSwzCw4jlqH7dkVYCvXizYnX8ZFv13WIaU6-78h8"},
{"content":{"body":"the polyfill is not being developed in a way where it intends to compete with other decimal libraries","m.mentions":{},"msgtype":"m.text"},"ts":1718266600452,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"},
{"content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me","m.mentions":{},"msgtype":"m.text"},"ts":1718266645771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg"},
{"content":{"body":"> <@littledan:matrix.org> the polyfill is not being developed in a way where it intends to compete with other decimal libraries\n\ncan you elaborate this? this seems like a statement that needs more explanation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the polyfill is not being developed in a way where it intends to compete with other decimal libraries</blockquote></mx-reply>can you elaborate this? this seems like a statement that needs more explanation","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$avYsUaUAVWrg4k9v9N3jK7oH9XnOz3AFdHepZJqLYhM"}},"msgtype":"m.text"},"ts":1718266646543,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AO7cm-7q99t8j6YaLuNwIDMwTmvAuQjV-d-m_LwTQ0w"},
{"content":{"body":" * oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"m.new_content":{"body":"oh sure, i don't care that a specific package has low usage, to be clear, i just was not aware that any were significantly used; those 3 high-usage examples certainly addresses the \"demand\" point for me (but still not the \"carries its weight\" part)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7DKBml1uDUt9t6Wlqr2RIaYLDwZAQ5p759aptIMrOCg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266662083,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LL6d7cvnBAlnBDiimfMHdmSkZusU5UZZAi04ai2I2lI"},
{"content":{"body":"might need to invite `MikeMcl` to the chat at some point","format":"org.matrix.custom.html","formatted_body":"might need to invite <code>MikeMcl</code> to the chat at some point","m.mentions":{},"msgtype":"m.text"},"ts":1718266666261,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$B_k9X0gLyoA21zOG4ocJUI2w4fqtCayol0il5vsW4OQ"},
{"content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation","m.mentions":{},"msgtype":"m.text"},"ts":1718266679598,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw"},
{"content":{"body":"Same for temporal for example","m.mentions":{},"msgtype":"m.text"},"ts":1718266685306,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gdvxa7S6xoW25xgp5VQ96E_YMXCBB_0-3OZclHlMBiA"},
{"content":{"body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":" * The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.new_content":{"body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation Luca Casonato ","format":"org.matrix.custom.html","formatted_body":"The goal of the polyfill is to have spec-compliant semantics, not to be an optimized production-ready implementation <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$q6ulW7vn4tymozrIDp2x0h69frYf5TvzUJ6C-N3kNJw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266700847,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_CNBNNJJOKWTC8D7ZainKEJAi9xkBFKhKt9S2Mw6JMo"},
{"content":{"body":"Lets just add a single new primitive type that covers flexible user-defined data types and operator overloading and just base all other new primitives on that. ","m.mentions":{},"msgtype":"m.text"},"ts":1718266703084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},
{"content":{"body":"Let's call this primitive \"object\" :)","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266722909,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},
{"content":{"body":"oh i misread polyfill as spec 🤦‍♂️","m.mentions":{},"msgtype":"m.text"},"ts":1718266726210,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fGBlPQDHGkfGqCChEfiNds3wR_XmUP-Ch7utnpqtKxE"},
{"content":{"body":"i read \"this spec is not being developed in a way where it intends to compete with other decimal libraries\"","m.mentions":{},"msgtype":"m.text"},"ts":1718266765099,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$66lKsT8XaXKgpsQrb4miZ0zf59AyFVoR3QSl4WC--IY"},
{"content":{"body":"Honestly, this was one of the things I wanted to do with my version of the `struct` proposal prior to Shu's version.","format":"org.matrix.custom.html","formatted_body":"Honestly, this was one of the things I wanted to do with my version of the <code>struct</code> proposal prior to Shu's version.","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$pJi-D4VpK-nC7LROW-7nFatAGQ6shS7LG48sSlFDgD8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266773730,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},
{"content":{"body":"So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It's tempting, but it has real downsides.","m.mentions":{},"msgtype":"m.text"},"ts":1718266777441,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0"},
{"content":{"body":"I would have just called the primitive `\"value\"` ","format":"org.matrix.custom.html","formatted_body":"I would have just called the primitive <code>\"value\"</code>","m.mentions":{},"m.relates_to":{"event_id":"$aYolTMGN5OuMeQU8OfGWW4_51bwlM8261t7Wdb_G0ME","is_falling_back":true,"m.in_reply_to":{"event_id":"$34quSHOiAh3Ou2ZRxbdPv8w0XnlS98zM4xo2QE4tsXQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718266787588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qyjGZuzymo7cYWvhXdWXdCht9iEPy9-hf7ZFgd-Z8rQ"},
{"content":{"body":"\"tempting but has real downsides\" is an understatement in my experience on both parts","m.mentions":{},"msgtype":"m.text"},"ts":1718266807929,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WNRf4G111KY6XVZp0vjulb-r71Ud8Gqa-1x0AUYU5SQ"},
{"content":{"body":":-)","m.mentions":{},"msgtype":"m.text"},"ts":1718266819762,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$sTmadkxQ3qx9zScu-vzDhYbrycbiOLPQ0zfumdNd7Zc"},
{"content":{"body":" * 🤣","m.mentions":{},"m.new_content":{"body":"🤣","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sTmadkxQ3qx9zScu-vzDhYbrycbiOLPQ0zfumdNd7Zc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266827414,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$_2oNP_K7Qy7KobpK71RGRHL6mgj2_BCZZz7xeUhOJUc"},
{"content":{"body":"> <@aardvark179:matrix.org> So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It's tempting, but it has real downsides.\n\nIt would probably have to be lexically scoped to restrict the overhead to where you need it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So I can say that operator overloading is a significant implementation overhead in Ruby, and we try very hard to boil it away as much as we can. It&#39;s tempting, but it has real downsides.</blockquote></mx-reply>It would probably have to be lexically scoped to restrict the overhead to where you need it","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E3_fCDQgLgU-FuYRmyXstuYVqHCwqCMtzYTtPH2AsV0"}},"msgtype":"m.text"},"ts":1718266835757,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU"},
{"content":{"body":" * \"tempting but has real downsides\" is an understatement in my experience on both parts in any language i've used with the feature","m.mentions":{},"m.new_content":{"body":"\"tempting but has real downsides\" is an understatement in my experience on both parts in any language i've used with the feature","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WNRf4G111KY6XVZp0vjulb-r71Ud8Gqa-1x0AUYU5SQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718266837199,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-Pr6-3BuOppfoa80xNDyzbcMi793ULjBllYOMeeEGTM"},
{"content":{"body":"i suspect that would remove a lot of the downsides","m.mentions":{},"msgtype":"m.text"},"ts":1718266853309,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NiIAtC2BgQiqZh64UzvW4435qK0DEbzwC2a3gcUWLj0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> It would probably have to be lexically scoped to restrict the overhead to where you need it\n\nBut then you can end up with weird corner cases because you're code does one thing while a library does another.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>It would probably have to be lexically scoped to restrict the overhead to where you need it</blockquote></mx-reply>But then you can end up with weird corner cases because you're code does one thing while a library does another.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZJzCApY0kRNHTRopfBlwd52dBL79h0a-_Sk5dlRAoXU"}},"msgtype":"m.text"},"ts":1718266939965,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$s1pOFFsm8_i75cR5lFvoQZFbo9rupReCj86682q6QKA"},
{"content":{"body":"Question to implementers, when `bigint` was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of `bigint`?","format":"org.matrix.custom.html","formatted_body":"Question to implementers, when <code>bigint</code> was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of <code>bigint</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1718267024255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY"},
{"content":{"body":"Scoped overloads seems like a footgun how does a library support overloading in that case?","m.mentions":{},"msgtype":"m.text"},"ts":1718267026448,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WR9UCk4XYzIAOyhYD9LErz35mYBBjjzCMB4a8lRHjuU"},
{"content":{"body":"i suppose it'd provide exports that can be \"activated\" inside a scope with syntax","m.mentions":{},"msgtype":"m.text"},"ts":1718267052569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CLJds-CX2-HDgVP3tGiFkxnLa1tIU2JI20oMXkIRokQ"},
{"content":{"body":"> <@rbuckton:matrix.org> Question to implementers, when `bigint` was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of `bigint`?\n\nAFAIK, none","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Question to implementers, when <code>bigint</code> was added along with its necessary operator overloads, how much of an impact on performance did that have for other javascript code that didn't make use of <code>bigint</code>?</blockquote></mx-reply>AFAIK, none","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$8Y8NxUPnfgbMMdN7oikenRXQAHev4l6qwZ3OtXo2byY"}},"msgtype":"m.text"},"ts":1718267057660,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE"},
{"content":{"body":"like a special decorator or something","m.mentions":{},"msgtype":"m.text"},"ts":1718267063075,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IRl68vEyc5JveBvrWbdhgbzqWalIQCmt2rrCqIpMVz4"},
{"content":{"body":"Or it wouldn't have shipped","m.mentions":{},"msgtype":"m.text"},"ts":1718267064230,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WRLc0RNdK9CBXq-i5BIOoGZxxUDlMf86jgamR-IinHA"},
{"content":{"body":"On the === front you could say that if object identity is equal then it doesn't call your overload. I don't think that's a crazy rule.","m.mentions":{},"msgtype":"m.text"},"ts":1718267114974,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0"},
{"content":{"body":"littledan: CC^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: CC^","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267137944,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$bhygUUFphkpRZ-rYQ-LJ8dWgWE-Ruq4hoe0k907UcGE"},
{"content":{"body":"> <@keith_miller:matrix.org> AFAIK, none\n\nGenerally none, but some sites could end up having more types flowing through them than previously. Rarely significant though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>AFAIK, none</blockquote></mx-reply>Generally none, but some sites could end up having more types flowing through them than previously. Rarely significant though.","m.mentions":{"user_ids":["@keith_miller:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$O7SxfetpBqNPpb4AN6tvsCl8W50M2doN2ERspXRQUCE"}},"msgtype":"m.text"},"ts":1718267158946,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$wPGL6uNmQQ7tjJm7m2g66GUfk2DU3LBXNt22c-R1Zrg"},
{"content":{"body":"I think browsers want to be able to return \"false\" fast","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$bhygUUFphkpRZ-rYQ-LJ8dWgWE-Ruq4hoe0k907UcGE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267159484,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-GwZSW6SQ72QkGX80nLzHnE5frSXGyi3FbDxqja2R1U"},
{"content":{"body":"When we talk about performance, do we also include \"time from when the user clicks on a link to when the page is available\"? (i.e. loading time)","m.mentions":{},"msgtype":"m.text"},"ts":1718267166231,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$U7QgyzkTesR1XivQ2V07FNK0tqzWhky4neArRNfSTYg"},
{"content":{"body":"Or just runtime performance?","m.mentions":{},"msgtype":"m.text"},"ts":1718267173654,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Vttg4f-QNJPsolI-Bvw6PmWEV0BHmIGpEi25kz81Idw"},
{"content":{"body":"You already have to look into your object to figure out if it's a string or BigInt though","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$-GwZSW6SQ72QkGX80nLzHnE5frSXGyi3FbDxqja2R1U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267190899,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Kiw_hDM9MOSbCMtKqrabuTjwXfaHSwY4Xc_7GeaEl68"},
{"content":{"body":"I think we mean both.","m.mentions":{},"msgtype":"m.text"},"ts":1718267193483,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$y417EMD82z2wWnLIM7msIOI5sDhHzdRU2nKS5COu_p0"},
{"content":{"body":"At that point you can check for overloading, which too much cost in an IC","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$Kiw_hDM9MOSbCMtKqrabuTjwXfaHSwY4Xc_7GeaEl68"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718267211588,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U"},
{"content":{"body":"If we did provide a user-defined primitive capability with operator overloading in a similar vein, would it then be reasonable to assume that all performance overhead would be in interactions with those primitives, and not all other JS?","m.mentions":{},"msgtype":"m.text"},"ts":1718267221015,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xi-7-PYlnC87B53vsXBYffDqEDgx9xQmIDCwp4QIsR0"},
{"content":{"body":" * At that point you can check for overloading, without too much cost in an IC","format":"org.matrix.custom.html","formatted_body":" * At that point you can check for overloading, without too much cost in an IC","m.mentions":{},"m.new_content":{"body":"At that point you can check for overloading, without too much cost in an IC","format":"org.matrix.custom.html","formatted_body":"At that point you can check for overloading, without too much cost in an IC","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718267227579,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$fHQ1X7lagRl-ON40PbeKYyn-IMUjp3NaW6NapJfTDR0"},
{"content":{"body":"I don't understand what you mean by \"user-defined primitive capability\"?","m.mentions":{},"msgtype":"m.text"},"ts":1718267303816,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE"},
{"content":{"body":"something close to Tuple/Record","m.mentions":{},"msgtype":"m.text"},"ts":1718267332890,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$sJIq69no4zEwypV1aNaISAGcLHWKl5QFN9X28xOIvRo"},
{"content":{"body":"Record & Tuple was also blocked from being a primitive","m.mentions":{},"msgtype":"m.text"},"ts":1718267377211,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Fotb-NHoZe5rsXEWSLh5lDBioUlLrgzlRkAoFCTVrgg"},
{"content":{"body":"It would still be an object though so it's not really a primitive. It just looks kinda like a primitive unless you squint","m.mentions":{},"msgtype":"m.text"},"ts":1718267378838,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA"},
{"content":{"body":"> <@keith_miller:matrix.org> I don't understand what you mean by \"user-defined primitive capability\"?\n\nFor the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I don&#39;t understand what you mean by &quot;user-defined primitive capability&quot;?</blockquote></mx-reply>For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$S9uEn7aCziOyR7nDiyidiBDPliq-nJpOleaGYs2hdoE"}},"msgtype":"m.text"},"ts":1718267388048,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM"},
{"content":{"body":"Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.","m.mentions":{},"msgtype":"m.text"},"ts":1718267389750,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4"},
{"content":{"body":"(Personal Hat on): User defined primitives are a fascinating design space that I think would provide a lot of value, and potentially could be done -- a path I would propose would be abstracting BigInt such that you could re-host BigInt atop the abstraction, then provide user access to the abstraction. But there's many, many dragons here ","m.mentions":{},"msgtype":"m.text"},"ts":1718267423800,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$EVWd5mGdAILFzXHdkh2xgGEqUbGPZ6rtPsZu21jeyvs"},
{"content":{"body":"> <@keith_miller:matrix.org> It would still be an object though so it's not really a primitive. It just looks kinda like a primitive unless you squint\n\nSure, that's fine to me. I'm talking about \"looks like a primitive\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>It would still be an object though so it&#39;s not really a primitive. It just looks kinda like a primitive unless you squint</blockquote></mx-reply>Sure, that's fine to me. I'm talking about \"looks like a primitive\".","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$35_0q_A-oTsbdy7rmI5KDG4VYAL67DaFMBH6Gyuv8PA"}},"msgtype":"m.text"},"ts":1718267430116,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMqvW21TEAy4sUIA_Krz81XmdrD8QBixtQJ-lrUz8Rc"},
{"content":{"body":"(c.f. Project Valhalla etc) ","m.mentions":{},"msgtype":"m.text"},"ts":1718267434969,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg"},
{"content":{"body":"> <@rbuckton:matrix.org> For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.\n\nlike Java primitive class ...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For the purpose of this discussion, I mean some bespoke syntax to declare a user-defined \"primitive\" type, much like a class, except it isn't Object.</blockquote></mx-reply>like Java primitive class ...","m.mentions":{"user_ids":["@rbuckton:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iLnhR7aHKvfNyKcOxpYlkFMi-7Vku4kltyNpquXNtAM"}},"msgtype":"m.text"},"ts":1718267468066,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_AQt38uk7jfnLUJsDqJftAw5OhrsaGi4PuOc22F2mDE"},
{"content":{"body":"> <@mgaudet:mozilla.org> (c.f. Project Valhalla etc)\n\nTrigger warning, please. 😀","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>(c.f. Project Valhalla etc) </blockquote></mx-reply>Trigger warning, please. 😀","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5VG3xphta7hBx0xExDEuVhUtsLUArhvHSZyknnVdHQg"}},"msgtype":"m.text"},"ts":1718267471959,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE"},
{"content":{"body":"With the caveat that operator overloads on a user-defined \"primitive\" will likely be far slower than native primitives.","m.mentions":{},"msgtype":"m.text"},"ts":1718267473772,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Isyg5--JVTgWy70jSr5ozWLs8lyULm2ey41c5c3Bo7I"},
{"content":{"body":"I see where Jodran's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","msgtype":"m.text"},"ts":1718267480122,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CBbebTqCyMXDK7M6wAcNgPzjIm1U25pT0qaCAuiQNpM"},
{"content":{"body":"> <@aardvark179:matrix.org> Trigger warning, please. 😀\n\nApologies","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Trigger warning, please. 😀</blockquote></mx-reply>Apologies","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$khGK6XBdminu7exEscZQiHG_OqVRSl3Ljef4UI4h3rE"}},"msgtype":"m.text"},"ts":1718267488029,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$IrNMzPPqGgt_rPwGQmZNUM5LKQyAliiv7odoEPz7QGk"},
{"content":{"body":"* I see where Jordan's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","m.new_content":{"body":"I see where Jordan's coming from. I believe this proposal is much less motivated without the primitive. But I still think it is motivated enough by its other merits, and there is a path to a primitive in the future, so I support it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$CBbebTqCyMXDK7M6wAcNgPzjIm1U25pT0qaCAuiQNpM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718267575645,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IzTUeIu43BovZATYNBmXntp2sE7OQbv6SMxYrGnhwx0"},
{"content":{"body":"> <@aardvark179:matrix.org> Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.\n\nYeah, I DEFINITELY don't think we can let users change e.g. `number + number`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Oh, the area where we would likely see a performance degradation is if people can define new cases involving the existing primitives.</blockquote></mx-reply>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code>","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kUMwMbvrfSZeRYP7fZ9oVy8pcPF5wwF6H7C7XU_5By4"}},"msgtype":"m.text"},"ts":1718267585132,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"},
{"content":{"body":"For both performance and sanity reasons","m.mentions":{},"msgtype":"m.text"},"ts":1718267598520,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$4qFpw3T9IPWEsUFpvgq_7TgnzyjIcNH6E8yjueSuRVM"},
{"content":{"body":"You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.","m.mentions":{},"msgtype":"m.text"},"ts":1718267610783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I DEFINITELY don't think we can let users change e.g. `number + number`\n\nBut if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code></blockquote></mx-reply>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"}},"msgtype":"m.text"},"ts":1718267654255,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I DEFINITELY don't think we can let users change e.g. `number + number`\n\nAgreed. You'd only get custom overloading when one of the operands is the user-defined primitive.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I DEFINITELY don't think we can let users change e.g. <code>number + number</code></blockquote></mx-reply>Agreed. You'd only get custom overloading when one of the operands is the user-defined primitive.","m.mentions":{"user_ids":["@keith_miller:matrix.org","@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v4FiBA2wjhnVbHbKQo4ewbom5K2UGZBPWxhh5MFrvWM"}},"msgtype":"m.text"},"ts":1718267658019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kS-p2tCnGXUkC7meHhctLCkEUlEkGi41EO6vWKCTnek"},
{"content":{"body":"what if both operands have a different overload?","m.mentions":{},"msgtype":"m.text"},"ts":1718267674597,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7zGtbln7X7yHXZOJMXEvaO1U8a2TsGz9tQjZwBK3rco"},
{"content":{"body":"That's another dragon.","m.mentions":{},"msgtype":"m.text"},"ts":1718267695403,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ryYsSBhnQa416FMu_rhCoNkl7VC37Y_AI9MnZ9RhMdE"},
{"content":{"body":"You could say both have to have the same function?","m.mentions":{},"msgtype":"m.text"},"ts":1718267702246,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$UawI6iKlwwbmX0SQJV4a8xlZyY15aF27M8aG6YzvhSI"},
{"content":{"body":"Ruby does it by operators really being methods","m.mentions":{},"msgtype":"m.text"},"ts":1718267704564,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$ru-71bOvkI_hZG4ZZEj9q6up1uQ45JP3U2jssqwHbyw"},
{"content":{"body":"Or an exception","m.mentions":{},"msgtype":"m.text"},"ts":1718267708805,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$BUhlhtBxwxZj7mk-NUUfycs1JJFPhMi741H5RLxYZ2s"},
{"content":{"body":"idk","m.mentions":{},"msgtype":"m.text"},"ts":1718267710710,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$a7SdhevesPnMQIAD7fmJVQhgvBPreD1p5X3acMw-Nak"},
{"content":{"body":"Other langauges do multi-argument dispatch","m.mentions":{},"msgtype":"m.text"},"ts":1718267720970,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$CWXfvRIh46doZ5jMsa1LtXBwRERqJWgJBm53KhWS0Gs"},
{"content":{"body":"> <@aardvark179:matrix.org> But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.\n\nYes, but the expectation is that using a user-defined \"primitive\" as an operand is about convenience and not performance.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.</blockquote></mx-reply>Yes, but the expectation is that using a user-defined \"primitive\" as an operand is about convenience and not performance.","m.mentions":{"user_ids":["@aardvark179:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"}},"msgtype":"m.text"},"ts":1718267723320,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IYHr-cMJanOaT1MXERvD7X1zAbG2svz1uH_hQQDsiw4"},
{"content":{"body":"We've investigated various mechanisms for operator overloading in the past. ","m.mentions":{},"msgtype":"m.text"},"ts":1718267801597,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r86ulhfx8zXYlOs0m1SR8zso0JDs4I9QI0fjP7M_f9Q"},
{"content":{"body":"> <@aardvark179:matrix.org> But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.\n\nYeah, I could see `object <op> primitive` calling some overload too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>But if I have a matrix type I'd definitely want to be able to define number * matrix… This is where the dragons are.</blockquote></mx-reply>Yeah, I could see <code>object &lt;op&gt; primitive</code> calling some overload too","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ffjc9FWGLwz4hjLaTYZgersUEDgHlLuq1UrZTiNOxuM"}},"msgtype":"m.text"},"ts":1718267945769,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ"},
{"content":{"body":"But maybe there's dragons there I haven't thought through","m.mentions":{},"msgtype":"m.text"},"ts":1718267967103,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kQEtpUexFPHirPJUDwFx4cxAtd1daNmea16p4FxOs7U"},
{"content":{"body":"Can someone advance the queue?","m.mentions":{},"msgtype":"m.text"},"ts":1718267981371,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fKSYSiMRQSF0oua1nijZKPXMF-bOw33K374-_4H6Oq8"},
{"content":{"body":"> <@rbuckton:matrix.org> You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.\n\nyes, this corresponds to my previous operator overloading proposal, where you had to make it clear when allocating the object that it had overloading","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You don&#39;t pay the cost of operator overloading for all Objects, only this different thing. If you want to define a &quot;primitive&quot;-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any &quot;primitive&quot;-like type we might want to include in the standard library as well.</blockquote></mx-reply>yes, this corresponds to my previous operator overloading proposal, where you had to make it clear when allocating the object that it had overloading","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"}},"msgtype":"m.text"},"ts":1718268020495,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3_BrEPNZE9BPH76YG1sL4QoK4oHC_mhA7OIPBUgmmQc"},
{"content":{"body":"I had a very early draft for operator overloading syntax in my original `struct` proposal, something like:\n```\nstruct Decimal {\n  ...\n  static (Decimal + Decimal) (a, b) { return ...; }\n  static (Decimal - Decimal) (a, b) { return ...; }\n  static (Decimal * Decimal) (a, b) { return ...; }\n  ...\n}\n```\nNOTE that this is *not* being considered for the current `struct` proposal.","format":"org.matrix.custom.html","formatted_body":"<p>I had a very early draft for operator overloading syntax in my original <code>struct</code> proposal, something like:</p>\n<pre><code>struct Decimal {\n  ...\n  static (Decimal + Decimal) (a, b) { return ...; }\n  static (Decimal - Decimal) (a, b) { return ...; }\n  static (Decimal * Decimal) (a, b) { return ...; }\n  ...\n}\n</code></pre>\n<p>NOTE that this is <em>not</em> being considered for the current <code>struct</code> proposal.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1718268029836,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6OAHVNWzGhBFqrGAfDJDlBflQZh0ii5WSulHwdhx5kg"},
{"content":{"body":"sure if there's an easy to check tag on the object that says whether it has overloading","m.mentions":{},"m.relates_to":{"event_id":"$al6NaMMlXnom0QkLxUt3YUbTsFoI7CwLYQsy1UlvMg0","is_falling_back":true,"m.in_reply_to":{"event_id":"$wA5O6Ej13P_YAp3b_ULLMrsUI9dRUbKDecSG98JIX7U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1718268068684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cUo7OQP8ECpPPOCFQJ8xUmopy6NnyTrslWjxLzzZeNE"},
{"content":{"body":"(There's another dimension here to operators, which is also identity; primitives bring *both* operators *and* a lack of identity, and there's no ability as a user to create a user-defined-thing that has no identity too -- c.f. earlier R&T) ","format":"org.matrix.custom.html","formatted_body":"(There's another dimension here to operators, which is also identity; primitives bring <em>both</em> operators <em>and</em> a lack of identity, and there's no ability as a user to create a user-defined-thing that has no identity too -- c.f. earlier R&amp;T)","m.mentions":{},"msgtype":"m.text"},"ts":1718268156880,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$ceQqfy3n2JD8FhrPzqJB-qG47Kd5HTEh-__PYCzhAJA"},
{"content":{"body":"Though I did spend some time fleshing out what a user-defined \"primitive\" might look like in my _old_ struct proposal: https://github.com/rbuckton/proposal-struct","format":"org.matrix.custom.html","formatted_body":"Though I did spend some time fleshing out what a user-defined \"primitive\" might look like in my <em>old</em> struct proposal: https://github.com/rbuckton/proposal-struct","m.mentions":{},"msgtype":"m.text"},"ts":1718268187786,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y-1t9Mew_yXKCzkddnTlnqecWHunTNphh693sNV6tvg"},
{"content":{"body":"> <@rbuckton:matrix.org> You don't pay the cost of operator overloading for all Objects, only this different thing. If you want to define a \"primitive\"-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any \"primitive\"-like type we might want to include in the standard library as well.\n\nI don't think from the engine side there's a difference","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You don&#39;t pay the cost of operator overloading for all Objects, only this different thing. If you want to define a &quot;primitive&quot;-like type with operator overloading, you use this and not Object. Implementations only have to plumb this through once and it is a catch-all for any &quot;primitive&quot;-like type we might want to include in the standard library as well.</blockquote></mx-reply>I don't think from the engine side there's a difference","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$0SDoJBRIROcyt_nvImufBZ6Ghczn-Hkt1dVYbmgUGv4"}},"msgtype":"m.text"},"ts":1718268198162,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$q6Y5gooM0aC5P0NJQVIJv3AnNitu86GklagGHxKl9Sc"},
{"content":{"body":"(a lack of identity also ties in immutability too) ","m.mentions":{},"msgtype":"m.text"},"ts":1718268202360,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$n55mg7wzgByxFzrZsvtYD7s4EIm_CJLDaCdAAYkopqw"},
{"content":{"body":"But maybe that's different for other engines","m.mentions":{},"msgtype":"m.text"},"ts":1718268212093,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI"},
{"content":{"body":"Lack of guaranteed identity seems like a relatively small problem.","m.mentions":{},"msgtype":"m.text"},"ts":1718268253001,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM"},
{"content":{"body":"> <@aardvark179:matrix.org> Lack of guaranteed identity seems like a relatively small problem.\n\nwas arguably the core of R&T","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Lack of guaranteed identity seems like a relatively small problem.</blockquote></mx-reply>was arguably the core of R&amp;T","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rs7AmFPkjRR83_xo0GQwwojX5oux0ynvvefJvhBgOVM"}},"msgtype":"m.text"},"ts":1718268273259,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$BndztJDYiK7sWqO8LjDhUIEID4-zMEPKoDmXOAqpBAU"},
{"content":{"body":"> <@keith_miller:matrix.org> Yeah, I could see `object <op> primitive` calling some overload too\n\nobligatory suggestion for infix function calls","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Yeah, I could see <code>object &lt;op&gt; primitive</code> calling some overload too</blockquote></mx-reply>obligatory suggestion for infix function calls","m.mentions":{"user_ids":["@keith_miller:matrix.org","@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FpAJW4Vqlj5wrj5EEe5DMbKtZ04NmHiQ2o62GSYfJrQ"}},"msgtype":"m.text"},"ts":1718268278695,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$opycA3fHvapAVOnHyN7acRQlaHYMNtYZSuBr1chF5i4"},
{"content":{"body":"> <@keith_miller:matrix.org> But maybe that's different for other engines\n\nMy understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>But maybe that&#39;s different for other engines</blockquote></mx-reply>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations","m.mentions":{"user_ids":["@keith_miller:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kSuRe5a7HhjW5ew3tr0N8EyRgiHS1djc4ncphzqCHZI"}},"msgtype":"m.text"},"ts":1718268297016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"},
{"content":{"body":"> <@rbuckton:matrix.org> My understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations\n\nsure but it creates other ones","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations</blockquote></mx-reply>sure but it creates other ones","m.mentions":{"user_ids":["@rbuckton:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"}},"msgtype":"m.text"},"ts":1718268312639,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aAm1xa1AO8ammq5u7juX4NuOSTL-G0MOYkl9Cc_cpMc"},
{"content":{"body":"it's also to address the behavior injection concerns from a design/correctness perspective","m.mentions":{},"msgtype":"m.text"},"ts":1718268325059,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wvOPetegBosnlXwnwyGF6c2tTPo_5TeMxIwT5_saaN0"},
{"content":{"body":"Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T… lots of ways to do it in VM implementations.","m.mentions":{},"msgtype":"m.text"},"ts":1718268356420,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$FpRKCtzXR6jXKWaw5T6IaSPn3ybbh1f6P51DZm5NAt0"},
{"content":{"body":" * Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T…) lots of ways to do it in VM implementations.","m.mentions":{},"m.new_content":{"body":"Right, records, tuples, value decorators (hard for JS as there aren't good immutability guarantees without R&T…) lots of ways to do it in VM implementations.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FpRKCtzXR6jXKWaw5T6IaSPn3ybbh1f6P51DZm5NAt0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718268394449,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$oOt8Okl5WwvTpnDtqkOq1vvWpN1csTwjalBv_JCSdLA"},
{"content":{"body":"> <@rbuckton:matrix.org> My understand was that the `with operators from ...` syntax that littledan had proposed was primarily to address performance concerns raised by some implementations\n\nThat sounds... just worse than even a `Symbol.add` but I'd have to hear the exact performance objections. I would imagine `Symbol.add` would behave the same as a getter in the IC. Most engines already have the infrastructure for getters so I'm a bit surprised such code couldn't be generalized for operators.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My understand was that the <code>with operators from ...</code> syntax that <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had proposed was primarily to address performance concerns raised by some implementations</blockquote></mx-reply>That sounds... just worse than even a <code>Symbol.add</code> but I'd have to hear the exact performance objections. I would imagine <code>Symbol.add</code> would behave the same as a getter in the IC. Most engines already have the infrastructure for getters so I'm a bit surprised such code couldn't be generalized for operators.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KMza5Aj2lEovJA6BuWz5kAj8TI-Fy6ubsdM4i1UMxJw"}},"msgtype":"m.text"},"ts":1718268515449,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$1Rbv1jiHld71Df3hbwFGR2kxjrUKSdgoWRW0xE_PR1w"},
{"content":{"body":"When I put together my old struct proposal I was looking for a way to unify the mechanics for R&T, a Decimal primitive, maybe Temporal as a \"primitive\", and other user-defined \"primitive\" types.","m.mentions":{},"msgtype":"m.text"},"ts":1718268558936,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_zjypp7q9V68IATG2Vc9eaDp2E4R-PurL_DaIQtpY-4"},
{"content":{"body":"`with operators from` means a lot of requirements for bookkeeping. But it's easy to see when you're *not* inside of those things and you can use the ICs which *don't* have support for the new operator overloaded things","format":"org.matrix.custom.html","formatted_body":"<code>with operators from</code> means a lot of requirements for bookkeeping. But it's easy to see when you're <em>not</em> inside of those things and you can use the ICs which <em>don't</em> have support for the new operator overloaded things","m.mentions":{},"msgtype":"m.text"},"ts":1718268575212,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw"},
{"content":{"body":"If we did have operator overloading, I'd much rather restrict it to a specific domain of values than support `with operators from`. `with operators from` would be a mess for TypeScript.","format":"org.matrix.custom.html","formatted_body":"If we did have operator overloading, I'd much rather restrict it to a specific domain of values than support <code>with operators from</code>. <code>with operators from</code> would be a mess for TypeScript.","m.mentions":{},"msgtype":"m.text"},"ts":1718268686083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-J_TISvcXeesZ69UXa-5og5u7bOTTxVwCYOeVJqVOrw"},
{"content":{"body":"> <@littledan:matrix.org> `with operators from` means a lot of requirements for bookkeeping. But it's easy to see when you're *not* inside of those things and you can use the ICs which *don't* have support for the new operator overloaded things\n\nThe whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><code>with operators from</code> means a lot of requirements for bookkeeping. But it's easy to see when you're <em>not</em> inside of those things and you can use the ICs which <em>don't</em> have support for the new operator overloaded things</blockquote></mx-reply>The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TblaFG2FNiraOok_O-e7bZ9V5Hv0iYYDHF1DAWLhYcw"}},"msgtype":"m.text"},"ts":1718268749331,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic"},
{"content":{"body":"And that's just type checking, we wouldn't downlevel operator overloading it would be to expensive based on our \"no type-based emit\" policy.","m.mentions":{},"msgtype":"m.text"},"ts":1718268774703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CidnGBXetJoB_IQteRT6TAiBpFB7BIWW4EmiYPScA80"},
{"content":{"body":"But, that said, I'm only intimately familiar with JSC's ICs","m.mentions":{},"msgtype":"m.text"},"ts":1718268776601,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$pvC7f_xU4b5ot7w4zAt6_qYltbQ9NYLiJoA1--9487o"},
{"content":{"body":"> <@keith_miller:matrix.org> The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.\n\noh sorry I don't mean ICs, I guess I mean paths in the interpreter or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>The whole point of ICs is that you only generate the cases you've seen though. So, I'm a bit surprised that would help anything.</blockquote></mx-reply>oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$htKX8zcm81ZYBwydSfuzSGsQGBfhVVBOVSPBaVHW1Ic"}},"msgtype":"m.text"},"ts":1718268792605,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80"},
{"content":{"body":"I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments *and then* perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.","format":"org.matrix.custom.html","formatted_body":"I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments <em>and then</em> perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.","m.mentions":{},"msgtype":"m.text"},"ts":1718268830348,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c"},
{"content":{"body":"> <@littledan:matrix.org> oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something\n\nAh ok. Assuming we don't allow primitive operator overloading I don't think that would be an issue. At least for JSC.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>oh sorry I don't mean ICs, I guess I mean paths in the interpreter or something</blockquote></mx-reply>Ah ok. Assuming we don't allow primitive operator overloading I don't think that would be an issue. At least for JSC.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8DEt8_y8anLEDdqY5oPIdMnwG7aJ881FlF0cS51Ir80"}},"msgtype":"m.text"},"ts":1718268856208,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zqbHbiPJqJgQwjFMglmNXNg1tmwb83A98uIJRNYGrX4"},
{"content":{"body":"Once you're in the non-primitive not-equal pointer case you're already doing slow stuff","m.mentions":{},"msgtype":"m.text"},"ts":1718268934275,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JgTtpLV1bhl6c38v5rE2StwDDwydbn3zcHXnZoOsf_k"},
{"content":{"body":"Again, that's just JSC not necessarily other engines","m.mentions":{},"msgtype":"m.text"},"ts":1718268964364,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$52wjwoQbQ3ZAKr5IPXdnQO2rG9toH1Bdb8P0-DFvgmE"},
{"content":{"body":"Oh, also, my old struct proposal required \"typed\" field definitions to handle cases like size, alignment, packing, etc. You could, in theory, support `===` using the memory contents of the value.","format":"org.matrix.custom.html","formatted_body":"Oh, also, my old struct proposal required \"typed\" field definitions to handle cases like size, alignment, packing, etc. You could, in theory, support <code>===</code> using the memory contents of the value.","m.mentions":{},"msgtype":"m.text"},"ts":1718268978855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T4g1g7vdHJCTz3m2Xa7le0h4LL1v4jlJ4N3Gcs86CF8"},
{"content":{"body":"> <@aardvark179:matrix.org> I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments *and then* perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.\n\nWhy is it necessary to do coercions?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>I think the thing I wouldn't like about trying to add operator overloading to JS as currently defined is that we do various coercions  on the two arguments <em>and then</em> perform the operation. Ruby and Python both tree all this stuff as a simple method call, so it is simply up to the left operand what is done to the right operand.</blockquote></mx-reply>Why is it necessary to do coercions?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SclxgWT1ghOwur1QIWF4gg8iZngJq5QJBkYqd7gKT2c"}},"msgtype":"m.text"},"ts":1718269041796,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8"},
{"content":{"body":"> <@keith_miller:matrix.org> Why is it necessary to do coercions?\n\nSo at the moment we do `GetValue` and then `ToPrimitive` (which of course we don't actually need to do most of the time).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Why is it necessary to do coercions?</blockquote></mx-reply>So at the moment we do <code>GetValue</code> and then <code>ToPrimitive</code> (which of course we don't actually need to do most of the time).","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$l8VEJKb_cb5lNbRH6EbT73Xm81Q4nKGWjn7lUB_LTj8"}},"msgtype":"m.text"},"ts":1718269115118,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY"},
{"content":{"body":"Michael Ficarra\n\nI was going to answer that this is more of a question for the existing stage 3 proposal, that adds the concept of \"sources\" and wasm is already using it. This new proposal is only for defining what a JS source is.\n\nHowever, Guy can probably still answer that (I know well how this proposal works for JS, but my Wasm knowledge is more limited 😛)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a></p>\n<p>I was going to answer that this is more of a question for the existing stage 3 proposal, that adds the concept of \"sources\" and wasm is already using it. This new proposal is only for defining what a JS source is.</p>\n<p>However, Guy can probably still answer that (I know well how this proposal works for JS, but my Wasm knowledge is more limited 😛)</p>\n","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1718269164798,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YrgFSACuZlvsKk_U3vjiVZ_CupmCLxTkJq64TOAvlmU"},
{"content":{"body":"yeah but this is the first to introduce an import syntax, right?","msgtype":"m.text"},"ts":1718269201243,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8"},
{"content":{"body":"> <@aardvark179:matrix.org> So at the moment we do `GetValue` and then `ToPrimitive` (which of course we don't actually need to do most of the time).\n\nThe fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So at the moment we do <code>GetValue</code> and then <code>ToPrimitive</code> (which of course we don't actually need to do most of the time).</blockquote></mx-reply>The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2XEJrHPF-Pos-a3KBUQoSBW8CM8nguk4-5FHC4MFhJY"}},"msgtype":"m.text"},"ts":1718269207166,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q"},
{"content":{"body":"> <@michaelficarra:matrix.org> yeah but this is the first to introduce an import syntax, right?\n\nNo, that's already in stage 3 and being implemented","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah but this is the first to introduce an import syntax, right?</blockquote></mx-reply>No, that's already in stage 3 and being implemented","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bUHBQGLFK3CeanPbsrGiNLp0r3oDjbjN-XglM2EFRc8"}},"msgtype":"m.text"},"ts":1718269216894,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Idi_NCl2X9qhBYGjeUdOnMn2DdbClNufOqNtlr3Cj34"},
{"content":{"body":"This only defines what using that syntax for importing JS files does","m.mentions":{},"msgtype":"m.text"},"ts":1718269228047,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YuxWkfY-H2aBGPu9Eo0O5YF3BiXdJJvWtGF1Pwj8ME8"},
{"content":{"body":"oh maybe I'm confused","msgtype":"m.text"},"ts":1718269240323,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$F8V83ZPYBc8kr_H6WvGnr_6j6DWlP65MmiNCTdmOtpY"},
{"content":{"body":"can you send me a link?","msgtype":"m.text"},"ts":1718269243160,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9XilbcOw01TczsFfSY4BrHdG08EftEf7VFBS8YZIbiI"},
{"content":{"body":"> <@aardvark179:matrix.org> The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.\n\nAh, yeah, I see. I would expect we would do the coercion after but maybe that causes problems?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>The fact those are just used in operator coercion means we'd need to come up with a new way to spec that, and work out whether we look for overloads before or after doing those conversion.</blockquote></mx-reply>Ah, yeah, I see. I would expect we would do the coercion after but maybe that causes problems?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VBMcbKWJLwmAENXq6iPY2m5yDypxqdV5d-ltTbn7l_Q"}},"msgtype":"m.text"},"ts":1718269251800,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Ra4X8OqPc--vkfchuGQV1KKD0SKYX758uVoJ7bVQ2oI"},
{"content":{"body":"there's so many of these module proposals","msgtype":"m.text"},"ts":1718269254411,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ"},
{"content":{"body":"Stage 3: https://github.com/tc39/proposal-source-phase-imports\nthis: https://github.com/tc39/proposal-esm-phase-imports/","m.mentions":{},"msgtype":"m.text"},"ts":1718269261439,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XbvaRHMWiERDbN9jDWlbqTFVm9M9qivFoHypjBTkQr4"},
{"content":{"body":"> <@michaelficarra:matrix.org> there's so many of these module proposals\n\nSorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>there&#39;s so many of these module proposals</blockquote></mx-reply>Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kLgtnkNMJCLY0oRK9EPeb_uBYtNfE-U4Y4MTH-9SiNQ"}},"msgtype":"m.text"},"ts":1718269301528,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅\n\nI'm legitimately still confused 😭","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />Sorry about that, the space is huge and we ended up trying to split it in \"independently motivated incremental changes\", but maybe it ended up not being the best way 😅</blockquote></mx-reply>I&#39;m legitimately still confused 😭","m.relates_to":{"m.in_reply_to":{"event_id":"$XW20PHI5z9JNPVwBh5ih0IPlxdAtxbnNMrAX2Eii4R0"}},"msgtype":"m.text"},"ts":1718269489206,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'm legitimately still confused 😭\n\nLet's talk about that during lunch? :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I'm legitimately still confused 😭</blockquote></mx-reply>Let's talk about that during lunch? :)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mgO1AA3NxUXLDmOExSKjO0ZlZDqcfMwWSlaOh-hMc5U"}},"msgtype":"m.text"},"ts":1718269517327,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Let's talk about that during lunch? :)\n\nyes, please help me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c\">In reply to</a><a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo:matrix.org</a><br />Let's talk about that during lunch? :)</blockquote></mx-reply>yes, please help me","m.relates_to":{"m.in_reply_to":{"event_id":"$cFo9YNrw6rVJrgwW_SIJHA-S28jxsb84jcre1QYt29c"}},"msgtype":"m.text"},"ts":1718269535801,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU"},
{"content":{"body":"> <@michaelficarra:matrix.org> yes, please help me\n\nwould love to join this session!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yes, please help me</blockquote></mx-reply>would love to join this session!","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hwA7-hvs8sxn1jbut2docD6IyW6tdCewGdthBcrBPfU"}},"msgtype":"m.text"},"ts":1718269691432,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$J0EKGOe1b1JPtcQ8K7olw9Xl7SE0yAQhBPXje76vH7s"},
{"content":{"body":"Could someone from Zoom plz. post the slide deck link, here?","m.mentions":{},"msgtype":"m.text"},"ts":1718272870052,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$xmapRrphukMhA5VUklw5gVnnpIk-zbOxjJOXmYnS72Y"},
{"content":{"body":"cc Ben ","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@benallen:igalia.com\">Ben</a>","m.mentions":{"user_ids":["@benallen:igalia.com"]},"msgtype":"m.text"},"ts":1718273336273,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$1t1ewRG9LRqM3P8UqlfDfgjnyFHwB3NTtfsBu37pGYQ"},
{"content":{"body":"https://notes.igalia.com/p/pj5uX_5nC#/","m.mentions":{},"msgtype":"m.text"},"ts":1718273354498,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$GrfOyTpKG4QwIPpKnpL15Md2InH197cj1wPKSzp675Y"},
{"content":{"body":"Going back through meeting notes I have found the first reference to operator overloading and decimal [here](https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md) in section 9.iv.b \"Decimal for stage 0\". keith_miller . ","format":"org.matrix.custom.html","formatted_body":"Going back through meeting notes I have found the first reference to operator overloading and decimal <a href=\"https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md\">here</a> in section 9.iv.b \"Decimal for stage 0\". <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> .","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1718273822521,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE"},
{"content":{"body":"> <@aardvark179:matrix.org> Going back through meeting notes I have found the first reference to operator overloading and decimal [here](https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md) in section 9.iv.b \"Decimal for stage 0\". keith_miller .\n\nIt's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Going back through meeting notes I have found the first reference to operator overloading and decimal <a href=\"https://github.com/tc39/notes/blob/main/meetings/2017-11/nov-29.md\">here</a> in section 9.iv.b \"Decimal for stage 0\". <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> .</blockquote></mx-reply>It's much older (2002-04): https://web.archive.org/web/20161227042517/http://www.mozilla.org/js/language/js20-2002-04/core/operators.html","m.mentions":{"user_ids":["@aardvark179:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jVBrwgIVrCy98hGsjmQPUIDc7Ca94P5PeED5Tr5rrEE"}},"msgtype":"m.text"},"ts":1718274400347,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nabhOJDnwJUUe7GYd9u5s_vKft63UwXvxAJy3OrdTxQ"},
{"content":{"body":"And then https://web.archive.org/web/20161227042517/http://wiki.ecmascript.org/doku.php?id=proposals:operators some years later","m.mentions":{},"msgtype":"m.text"},"ts":1718274452601,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JExiLrQ376Jt5Ruoje4zwWQ-cm1wo__8miN-zdo-43w"}
]