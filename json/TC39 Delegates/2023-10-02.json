[
{"content":{"body":"> <@mhofman:matrix.org> rbuckton: I'd like to bring to your attention a TypeScript limitation that seriously impedes the usage of any function call that unconditionally throws like this. I suspect it would also be a problem that needs to be solved for throw expressions in general: https://github.com/microsoft/TypeScript/issues/50739\n\nMaybe it might be easier to solve for throw expressions, as the TypeScript AST control-flow-node can be determined without any binding lookup or type-information, the throw is right there in the syntax.  ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24DEWWDEFMwQ_YwvhZogbYdPhup4gYeQBcMS-zNGc3MSc\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I'd like to bring to your attention a TypeScript limitation that seriously impedes the usage of any function call that unconditionally throws like this. I suspect it would also be a problem that needs to be solved for throw expressions in general: https://github.com/microsoft/TypeScript/issues/50739</blockquote></mx-reply>Maybe it might be easier to solve for throw expressions, as the TypeScript AST control-flow-node can be determined without any binding lookup or type-information, the throw is right there in the syntax.  ","m.relates_to":{"m.in_reply_to":{"event_id":"$DEWWDEFMwQ_YwvhZogbYdPhup4gYeQBcMS-zNGc3MSc"}},"msgtype":"m.text"},"ts":1696233304548,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$C4zK3Dnu0WYNBGx-HBSxXvjgws-h9hnzpO3Fp2EpALU"}
]