[
{"content":{"body":"```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"<pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1754281393255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY"},
{"content":{"body":"I... don't understand how that's safe. Doesn't that override/delete a .then property on the element, potentially wiping out an existing .then property?","m.mentions":{},"msgtype":"m.text"},"ts":1754281805182,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rmf1DsG-lhYXjzq0rzJ1vVLIa4L-lF-rM2x9EJ_mjwA"},
{"content":{"body":"sorry, yes, the assumption is that you are only using this with an object you've just created yourself","m.mentions":{},"msgtype":"m.text"},"ts":1754281964862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZPSM5QvoyXHVQhfvE6uwVXPwIpOYQXsVlYervfG8bwI"},
{"content":{"body":"and you're trying to avoid the problem where someone might have put a `.then` on Object.prototype","format":"org.matrix.custom.html","formatted_body":"and you're trying to avoid the problem where someone might have put a <code>.then</code> on Object.prototype","m.mentions":{},"msgtype":"m.text"},"ts":1754281975296,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nECUi7Q67uX4fMZZ7ggG0MQDamHITGhJbJwogtRQMNQ"},
{"content":{"body":"* sorry, yes, the assumption is that you are only using this with an object you've just created yourself, which you know not to have such a property","m.mentions":{},"m.new_content":{"body":"sorry, yes, the assumption is that you are only using this with an object you've just created yourself, which you know not to have such a property","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZPSM5QvoyXHVQhfvE6uwVXPwIpOYQXsVlYervfG8bwI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754282005614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zx3gpM9pc_DlVN3919mjsqXWEF6ACxvsGh8BODj8_ek"},
{"content":{"body":"* ```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\n\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"* <pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"m.new_content":{"body":"```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\n\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"<pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754282100663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b33AXUsmUHoBVadXvUGaqoKvNYycewGwo3CKCS7ulq0"}
]