[
{"content":{"body":"```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"<pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1754281393255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY"},
{"content":{"body":"I... don't understand how that's safe. Doesn't that override/delete a .then property on the element, potentially wiping out an existing .then property?","m.mentions":{},"msgtype":"m.text"},"ts":1754281805182,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rmf1DsG-lhYXjzq0rzJ1vVLIa4L-lF-rM2x9EJ_mjwA"},
{"content":{"body":"sorry, yes, the assumption is that you are only using this with an object you've just created yourself","m.mentions":{},"msgtype":"m.text"},"ts":1754281964862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZPSM5QvoyXHVQhfvE6uwVXPwIpOYQXsVlYervfG8bwI"},
{"content":{"body":"and you're trying to avoid the problem where someone might have put a `.then` on Object.prototype","format":"org.matrix.custom.html","formatted_body":"and you're trying to avoid the problem where someone might have put a <code>.then</code> on Object.prototype","m.mentions":{},"msgtype":"m.text"},"ts":1754281975296,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nECUi7Q67uX4fMZZ7ggG0MQDamHITGhJbJwogtRQMNQ"},
{"content":{"body":"* sorry, yes, the assumption is that you are only using this with an object you've just created yourself, which you know not to have such a property","m.mentions":{},"m.new_content":{"body":"sorry, yes, the assumption is that you are only using this with an object you've just created yourself, which you know not to have such a property","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZPSM5QvoyXHVQhfvE6uwVXPwIpOYQXsVlYervfG8bwI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754282005614,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zx3gpM9pc_DlVN3919mjsqXWEF6ACxvsGh8BODj8_ek"},
{"content":{"body":"* ```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\n\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"* <pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"m.new_content":{"body":"```\nfunction safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n```\n\nturns out we already have the \"safe promise resolve\" capability with no changes to the language","format":"org.matrix.custom.html","formatted_body":"<pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754282100663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b33AXUsmUHoBVadXvUGaqoKvNYycewGwo3CKCS7ulq0"},
{"content":{"body":"This example makes my concern about having `.then` being called with a thenable (and thus `.then(x => x)` not being an identity) moot, since it's already possible","format":"org.matrix.custom.html","formatted_body":"This example makes my concern about having <code>.then</code> being called with a thenable (and thus <code>.then(x =&gt; x)</code> not being an identity) moot, since it's already possible","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY"}},"msgtype":"m.text"},"ts":1754304886926,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9-3MBwg9x6l47vpMGgIoyQ8ptxp_JZOuRDEivCW4lpc"},
{"content":{"body":"\"only using this with an [unfrozen] object you've just created yourself\" is an **enormous** restriction","format":"org.matrix.custom.html","formatted_body":"\"only using this with an [unfrozen] object you've just created yourself\" is an <strong>enormous</strong> restriction","m.mentions":{},"msgtype":"m.text"},"ts":1754321271901,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ZrlvYOW7xqvwrDohse_jf6qcxNy8xa_FuFUDJZa6_h8"},
{"content":{"body":"* \"only using this with an \\[extensible\\] object you've just created yourself\" is an **enormous** restriction","format":"org.matrix.custom.html","formatted_body":"* \"only using this with an [extensible] object you've just created yourself\" is an <strong>enormous</strong> restriction","m.mentions":{},"m.new_content":{"body":"\"only using this with an \\[extensible\\] object you've just created yourself\" is an **enormous** restriction","format":"org.matrix.custom.html","formatted_body":"\"only using this with an [extensible] object you've just created yourself\" is an <strong>enormous</strong> restriction","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZrlvYOW7xqvwrDohse_jf6qcxNy8xa_FuFUDJZa6_h8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754321554657,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F8UzslzlKwtMrAJ6EN0Zqu-xUojXliCbBRrc7k1idnA"},
{"content":{"body":"TC39 your individual contributor RFTC license/permission form is so good I'm adapting it for all of Ecma","m.mentions":{},"msgtype":"m.text"},"ts":1754321966867,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$0ew4AJfEtqe61PHt-TrvRtRiubMAnW_4eHFj9GCHKvs"},
{"content":{"body":"Yes, but it's exactly the case that matters for the security problems in web specs that were presented","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZrlvYOW7xqvwrDohse_jf6qcxNy8xa_FuFUDJZa6_h8"}},"msgtype":"m.text"},"ts":1754322475650,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$B-TQwhK-6b92beujHQtl2B5TOqJ1kbSnDw6hZx-FRVw"},
{"content":{"body":"I should say, basic idea is due to Justin Ridgewell https://github.com/tc39/proposal-thenable-curtailment/issues/5#issuecomment-3145520373","format":"org.matrix.custom.html","formatted_body":"I should say, basic idea is due to <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> https://github.com/tc39/proposal-thenable-curtailment/issues/5#issuecomment-3145520373","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1754327052467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iobJ18sEL7WRpTDGyCr1Zj5TLLdLefnBVU4FngIgV7g"},
{"content":{"body":"\"extensible\" isn't necessary since you can make it non-extensible after doing this step, but yes, still a pretty significant restriction. but as nicolo says it does cover most of the actual CVEs","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZrlvYOW7xqvwrDohse_jf6qcxNy8xa_FuFUDJZa6_h8"}},"msgtype":"m.text"},"ts":1754327163028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xZjxLrsVmAamyRUzMibOZfQ4V9ohMNDofyhjBj7Tdjs"},
{"content":{"body":"also the \"just\" created yourself can be dropped if you're willing to have it throw if the object has a `.then` property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created then you can rely on it not being a proxy and so the hasOwn check not triggering user code","format":"org.matrix.custom.html","formatted_body":"also the \"just\" created yourself can be dropped if you're willing to have it throw if the object has a <code>.then</code> property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created then you can rely on it not being a proxy and so the hasOwn check not triggering user code","m.mentions":{},"msgtype":"m.text"},"ts":1754327215186,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_-7s7fqrYPOGNqt-ROz250l_Xz6h3vJgOrApcP66nhw"},
{"content":{"body":"* also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a `.then` property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code","format":"org.matrix.custom.html","formatted_body":"* also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a <code>.then</code> property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code","m.mentions":{},"m.new_content":{"body":"also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a `.then` property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code","format":"org.matrix.custom.html","formatted_body":"also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a <code>.then</code> property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_-7s7fqrYPOGNqt-ROz250l_Xz6h3vJgOrApcP66nhw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754327250814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$53vlBZiXVX9cXxzH__dlg-kSbXCojhNtdbRcYUiVXMc"},
{"content":{"body":"I wonder if we ought to do this for async iterator result objects https://github.com/tc39/Reflector/issues/535","m.mentions":{},"msgtype":"m.text"},"ts":1754327576569,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$33-_FY9PzXeOsIRAwfZw7YY53DYxW4lrfo_HHFTMJM4"}
]