[
{"content":{"body":"given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":"given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","msgtype":"m.text"},"ts":1639546744457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RP9qRc6gLFFM6w0bM8rjN0knnyRtPhB-st9503cxFzo"},
{"content":{"body":" * given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":" * given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","m.new_content":{"body":"given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":"given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$RP9qRc6gLFFM6w0bM8rjN0knnyRtPhB-st9503cxFzo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639546749246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P3Hc9am7INfNDvboTgdHJw-ztbJC3r9DXjHx0nJuVAk"},
{"content":{"body":"Hey all, yesterday's plenary went faster than planned.  As a result there is now 25min of spare time at the end of today's session.  So HE Shi-Jun could choose to bring back Class brand checks, or we could just end the meeting early.","format":"org.matrix.custom.html","formatted_body":"Hey all, yesterday's plenary went faster than planned.  As a result there is now 25min of spare time at the end of today's session.  So <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> could choose to bring back Class brand checks, or we could just end the meeting early.","msgtype":"m.text"},"ts":1639581412263,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xkYKiDBMOMQz8i4Vz98lugFD7dVLeKRIT_VYQEvdxbA"},
{"content":{"body":"as it is a PT-time meeting this time, either is fine with me","msgtype":"m.text"},"ts":1639585341238,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6iE8X3eB7ZiNz2RK36uufPYlgVDStT2LEDd1wL0yBh8"},
{"content":{"body":"you may get stronger opinions from EMEA or APAC folks","msgtype":"m.text"},"ts":1639585393461,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ik_8VnBXpccmt2aWZsA9Uzc4JIX6PmrHQmNzSPREObM"},
{"content":{"body":"3pm PT is like 7am or something China time? guess if folks are pulling all nighters for this...","msgtype":"m.text"},"ts":1639585406855,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XDD_42M_8hLOErv6bJ-Z8AHa8hssIWHIsWSNr2wLcPY"},
{"content":{"body":"When I join the meeting, I'm in a room by myself.  I have tried several times.","msgtype":"m.text"},"ts":1639589470836,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$xH3WHvRjUdfb8dClb5PofTNPbMD3T5ibNRRV3uIMA-8"},
{"content":{"body":"If we have some leftover time I wouldn't mind giving a pattern-matching update; I can prepare quick slides with the latest form of the proposal. Happy to yield for anyone with more important needs tho.","msgtype":"m.text"},"ts":1639589516865,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$f8-EUEm8vuozaX1IV1otAtS-VlUgockqJnOWU2hUCGg"},
{"content":{"body":"msaboff: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.","msgtype":"m.text"},"ts":1639589572145,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM"},
{"content":{"body":"Is it still appropriate practice to correct notes?","msgtype":"m.text"},"ts":1639589750051,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$j2aAncBDgS_s0ZSgAbzW8IF4TkLon3dS7pKWL-bRi1A"},
{"content":{"body":"Nevermind, I see that it is. ","msgtype":"m.text"},"ts":1639589803007,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$S30UZaNOsntEbok7aZ602WoS7D2AqMToCSyDdaam3ww"},
{"content":{"body":"yup, please do so liberally","msgtype":"m.text"},"ts":1639590272640,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZsaLeuchG5u2HAnJShEpUM6YM8z4X_L1o37qBHh59Lc"},
{"content":{"body":"> <@tabatkins:matrix.org> msaboff: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.\n\nI figured there may have been people early.  Guess not.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.</blockquote></mx-reply>I figured there may have been people early.  Guess not.","m.relates_to":{"m.in_reply_to":{"event_id":"$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM"}},"msgtype":"m.text"},"ts":1639590371295,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$v7CfTpnOsldTAYHUo1Rza7dAIrKLBR0OvpFVwe8wspo"},
{"content":{"body":"msaboff I'm in now, if you want to see if it actually put you in  a different room","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a> I'm in now, if you want to see if it actually put you in  a different room","msgtype":"m.text"},"ts":1639590712989,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$b3wRbdb0KvOldXmFCYRwkK_PPoXdjMUxUQuW0TZK-ss"},
{"content":{"body":"we are starting the meeting in 1 minutes","msgtype":"m.text"},"ts":1639591170445,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$6tEHMNZQa96ank2yhq0YHfAg6CG41Vk919f4VR14Jzc"},
{"content":{"body":"11 attendees so far","msgtype":"m.text"},"ts":1639591179482,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$XHfsW45YCORRrrfJAnEyCZHcJJqZ-cmJFwN6aM2QN4E"},
{"content":{"body":"31 attendees - we are starting with Record & Tuple","msgtype":"m.text"},"ts":1639591387541,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dVAJv4XUn0i2_F-9qCsKmyVbZDaabSb_kkc6cBk7i64"},
{"content":{"body":"maybe this invariant (and its importance to us) would be a good short topic for a TG3 meeting","msgtype":"m.text"},"ts":1639592403119,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TvluIowWhxEpeUT83w47U863doWhE522g6MI_6s4ON4"},
{"content":{"body":"copying over what i said from TDZ: not a fan of membranes being design constraints for JS in perpetuity","msgtype":"m.text"},"ts":1639592677849,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pT9JqirV5rnC5ZPBX2RAFdTMQUSWcmc90-XRAUc774E"},
{"content":{"body":"my recollection is most features contorted specifically to accommodate membranes have not been well received at large","msgtype":"m.text"},"ts":1639592717826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3536DhbWgYBelfRdlFtEbf0t0EXcET3svVbtiF_hX1o"},
{"content":{"body":"okay maybe it would be a long topic","msgtype":"m.text"},"ts":1639592735045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ovBXpY_E-TFwm-xyg4YS2DgRFSni0VS0_XAqUwdIy2M"},
{"content":{"body":"and i count Proxies under that umbrella","msgtype":"m.text"},"ts":1639592756537,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KBdM0YKIQHx9TmjEVZ8oqeDyfaO76Xnw8aij7WWSYtA"},
{"content":{"body":"The debate over this invariant will block how to work with mutable objects in records/tuples, but should it block records/tuples themselves?","msgtype":"m.text"},"ts":1639592789598,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6siRfbuhDDKUItcMyMn2QE0bMBKm3DXb9tCcasK2dvk"},
{"content":{"body":"up to the champions to remove support for this use case","msgtype":"m.text"},"ts":1639592804017,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8bIOp6DC-825CTzpjSeKQE23Ftw-ACX6QOPj3eYQXpU"},
{"content":{"body":"if they want to not support mutable objects to start, then that seems to sidestep this issue?","msgtype":"m.text"},"ts":1639592821913,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QOhPO_lutRQmRZ0vrYykxBsp2W_R1Hbs2gux3NZhD-4"},
{"content":{"body":"to be clear this is not about mutability only but the ability to reference things mutable or not ","msgtype":"m.text"},"ts":1639592949674,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$_sxLBseEkJkWYAKK_yd4oK0RJZH-0ey76bTbWvrcp0E"},
{"content":{"body":" * to be clear this is not about mutability only but the ability to reference things mutable or not ","m.new_content":{"body":"to be clear this is not about mutability only but the ability to reference things mutable or not ","msgtype":"m.text"},"m.relates_to":{"event_id":"$_sxLBseEkJkWYAKK_yd4oK0RJZH-0ey76bTbWvrcp0E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639592960812,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$vC_v2KQtwlmQNRSmBEVlDaY3mo76Nj24qF-wyAnkpuM"},
{"content":{"body":"Yes, sorry, that’s what I mean.","msgtype":"m.text"},"ts":1639592961116,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-5tW5EFx-OC18HJSD-MFSA2fWM0e4KZ4vzhAs56wvnY"},
{"content":{"body":"Is that needed for the minimal viable product of records/tuples? What’s the risk of punting?","msgtype":"m.text"},"ts":1639592983897,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VH7zisfsWjqYVMF1Hs8sedoo4cgOMDPIuWIwDsY3S7A"},
{"content":{"body":"main use cases for OPs are fn handlers and host objects I like to think","msgtype":"m.text"},"ts":1639592991608,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$J7bbFk5ZV3DE-HMIRi9Nw8SvrHS1HIzSIVSDDZP8MpM"},
{"content":{"body":"We've been told those use cases are very important and would virtually make this proposal uselss without a way to reference","msgtype":"m.text"},"ts":1639593039491,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$K0OZp7iS13jB9gRDZsIPkL8K5Zotrdw4hqsjMXvUv9s"},
{"content":{"body":"Records and tuples would still be useful for me, but I guess I’m used to working with immutable data all the time, heh.","msgtype":"m.text"},"ts":1639593069940,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$50htZokqr9FspJqVfkkzbod-QGKOo2zAaq0eTSB8HVs"},
{"content":{"body":"(originally the proposal did not let you ref, because we kinda had that vision as well!)","msgtype":"m.text"},"ts":1639593120160,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$XZ6mwGuUJg7856LES8v10kvuRo_q1b_PRhtmBkU76OQ"},
{"content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","msgtype":"m.text"},"ts":1639593151022,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593166070,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WNXHjilyNKrL365rBsMuU6uZP5bSH0FMidJ1ih2iFAQ"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593174526,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZzWzpb2CZlOw2-2cfhOk52kTk47aj9F3jI3a9Cj0d2Y"},
{"content":{"body":"to your point, we had clojure devs tell us they need to be able to reference because clojure can do it","msgtype":"m.text"},"ts":1639593201030,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$buPt92GJdcafhFkz6jBOAfYTgfXjeWZFXxf0KCDwfCA"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593203726,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9_WW8ikzYi2Fg2VwrXaiLAN1zxSky5aQtHO42EjXa2g"},
{"content":{"body":"Heh, I wonder how often they really need to embed references (atoms, etc. in Clojure) deeply in immutable structures rather than at the top level.","msgtype":"m.text"},"ts":1639593251373,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8SIJh5_HettNhNy0cOOXcnXcxQku9SwzpQ_tlFKpIWs"},
{"content":{"body":"Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","msgtype":"m.text"},"ts":1639593372128,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8TP4SZLbQt7JVTPWr5tiF-4qV8kLPd5LWwwn6eVJrRU"},
{"content":{"body":"* Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","m.new_content":{"body":"Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","msgtype":"m.text"},"m.relates_to":{"event_id":"$8TP4SZLbQt7JVTPWr5tiF-4qV8kLPd5LWwwn6eVJrRU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593545959,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8MwKBKMY6TItv8cg52VHy1G9DpYwxlPsNPAiMff5pys"},
{"content":{"body":"to be completely clear: the invariants we write down are subject to consensus of the committee","msgtype":"m.text"},"ts":1639593756132,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e6hjC1YKO5CGmHhEqw4TGv2ypo5xhenTkEVh-7BbtZ0"},
{"content":{"body":"i was going to object that usage of \"invariant\"","msgtype":"m.text"},"ts":1639593840371,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rBezzrakB_3VSvg2g6cmKmAUrPqrJjFvMLSEta6msVU"},
{"content":{"body":"when writing them down, we should definitely differentiate for each invariant which:\n - are true at the moment\n - were intentionally held vs accidentally held\n - has committee consensus to be held moving forward","format":"org.matrix.custom.html","formatted_body":"<p>when writing them down, we should definitely differentiate for each invariant which:</p>\n<ul>\n<li>are true at the moment</li>\n<li>were intentionally held vs accidentally held</li>\n<li>has committee consensus to be held moving forward</li>\n</ul>\n","msgtype":"m.text"},"ts":1639593846185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CD6U3HTjl2UL-treNSyptUvGN3cHnZseZ1B84RNrgHI"},
{"content":{"body":"my contention is that it sounds like the \"invariants\" that some of these membrane libraries depend on are just \"properties\"","msgtype":"m.text"},"ts":1639593861977,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d_QahFn_eGzhNVMbbb6ES0qsUp8YRfNV4AIaoEhR5JQ"},
{"content":{"body":"yeah, what ljharb said","format":"org.matrix.custom.html","formatted_body":"yeah, what <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> said","msgtype":"m.text"},"ts":1639593865504,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HecpOki5_5QbRBI-MW7GuNrpMQAyBuPgcb__wzvnmTo"},
{"content":{"body":"we have many invariants that are true now, were accidentally held, and have no consensus to be held moving forward.","msgtype":"m.text"},"ts":1639593884371,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sR_p1D6hV25LSe9dhnwWVkO9UbdTz-Gv03uPsNlWv7s"},
{"content":{"body":"tbf this is an invariant which mark has been carefully ensuring continues to hold","msgtype":"m.text"},"ts":1639593901849,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3N_oUwk0e6wo4O-7WXaMSrOigBaAByuwwpsewC4ZGp8"},
{"content":{"body":" * tbf this is a property which mark has been carefully ensuring continues to hold","m.new_content":{"body":"tbf this is a property which mark has been carefully ensuring continues to hold","msgtype":"m.text"},"m.relates_to":{"event_id":"$3N_oUwk0e6wo4O-7WXaMSrOigBaAByuwwpsewC4ZGp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593908208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6VmUc7TSpP8ziud6tpwD5peMb8g1WSayCWYrwg1-rKQ"},
{"content":{"body":"it's important that we get explicit consensus, or note explicit lack of, for that third point for all the invariants we write down","msgtype":"m.text"},"ts":1639593908237,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TN1dVOmXgEI6v-9DASkgMQUI3RUtwP13BQVt8uPK6yU"},
{"content":{"body":"which is like being an invariant, kind of","msgtype":"m.text"},"ts":1639593912756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SBRXqbts1FDm1aARIJ8p30iYBFSnru2m9bigbSspIz4"},
{"content":{"body":"right - that makes it intentional, but doesn't necessarily have consensus","msgtype":"m.text"},"ts":1639593923219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gVqnJ2sB1akfRRptgR_wHSGI0gyuUuqjTf0zUR4LwyE"},
{"content":{"body":"bakkot: i think my disagreement is that the _actual_ property is only in mark's head","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i think my disagreement is that the <em>actual</em> property is only in mark's head","msgtype":"m.text"},"ts":1639593928895,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3XJLr3DTu2BfarwXKEhy2ueXQJ-5eYAfSfwI8eFWh6I"},
{"content":{"body":"and how he has been ensuring it to hold is to give targeted pushback","msgtype":"m.text"},"ts":1639593943281,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UsirpzIKREiSUsfxQ2EvyFJqEdg3VkPTWwFt4NJVZFQ"},
{"content":{"body":"again tbf he has said he'd like to write it down","msgtype":"m.text"},"ts":1639593955333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hofSr0NTfCZGjUwR3AaQxVu36JUN5VeTaQGm-qUGj3A"},
{"content":{"body":"so it has not been a part of the larger design lexicon except very vaguely, in terms of \"is mark going to object\"","msgtype":"m.text"},"ts":1639593961391,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cJb0ZvXfJMacbDQdaj-QZ1xfVYuoa_peobZv6l-F5DI"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1639593962505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jKnr8q5Xi0JesrJGlPXG1E5CYd3RY93Kr_oc1koWPAM"},
{"content":{"body":"Did someone rearrange the queue?","msgtype":"m.text"},"ts":1639593963166,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$wCSvJ06smeU4bAWtmluz2FjeIG3Fuz6GMh019Mh7EK0"},
{"content":{"body":"i think so; my topic is now a reply","msgtype":"m.text"},"ts":1639593969489,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-nqsBy0FlixlbPfUdscHKq26as771Nq_mzyBOF3hZ7s"},
{"content":{"body":"Brian rearranged to group topics, waldemar","msgtype":"m.text"},"ts":1639593978836,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RXU4HfRKyl1H99FY1ikWhoszLVBGQcrU0p33_6guT14"},
{"content":{"body":"ObjectPlaceholder is just not a good primitive","msgtype":"m.text"},"ts":1639594252672,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LYjIb85zwy3TKGJ2WjASlCNnp5lIslP1ERGXFRzLHJA"},
{"content":{"body":"bterlson: my two topics are on this subject as well, should i wait or directly respond?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: my two topics are on this subject as well, should i wait or directly respond?","msgtype":"m.text"},"ts":1639594256694,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JY9pptCE1jxj28rnZEwO7FRfGntzm-MRByB4a-KtMh0"},
{"content":{"body":"the fact it ticks all the right boxes for a particular scenario is not convincing if i don't find the scenario convincing","msgtype":"m.text"},"ts":1639594274268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PsHTqiHG8AQT07xIGve4ePO5pMFdV4KQLT-ITsuh6Qc"},
{"content":{"body":"can we just make `object(tuple) === tuple`, then declare that the invariant is specifically in terms of \"things for which `object(x) !== x`\"?","format":"org.matrix.custom.html","formatted_body":"can we just make <code>object(tuple) === tuple</code>, then declare that the invariant is specifically in terms of &quot;things for which <code>object(x) !== x</code>&quot;?","msgtype":"m.text"},"ts":1639594338972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ktHU4uUUIZjPoPSseR7scs4fKMVK4E6iX5tecFdI_28"},
{"content":{"body":"I guess I should ask mark that question","msgtype":"m.text"},"ts":1639594343228,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KP-4p9H9gfDaIpOwzJtDVMzK0tlM8aoY8y3ItRVJvM4"},
{"content":{"body":"`Object(x) === x` is already an invariant for any object, and it also must be false or any primitive","format":"org.matrix.custom.html","formatted_body":"<code>Object(x) === x</code> is already an invariant for any object, and it also must be false or any primitive","msgtype":"m.text"},"ts":1639594372104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dCSsKfIf6VMaf15OUcdkarxSgTiYS4GvNczs2oHpu6s"},
{"content":{"body":"right, so this amounts to a proposal that records/tuples be somewhere between objects and primitives, not either thing in particular","msgtype":"m.text"},"ts":1639594394879,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cywSl8KRmXlpcw9Zy5jYHF6KoJCo8xwz2Fqykr2z-Eg"},
{"content":{"body":"cf waldemar's \"there is a continuum between primitives and objects\"","msgtype":"m.text"},"ts":1639594425555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fvXEaMol7a_kV7AO64NASROF5Lyld1cOQO1cG5tKFiQ"},
{"content":{"body":"which I trust we will get to someday","msgtype":"m.text"},"ts":1639594439443,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4bnwVyMjR1Dk02dg0Y_1Ue2KW7qJ8jGc6mBAX41cgpY"},
{"content":{"body":"at least I hope we do","msgtype":"m.text"},"ts":1639594454038,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n0Hr8dwAyOGH0dxVKWkEpSbqUWAktS4aDWhLjX1OwMo"},
{"content":{"body":"i think i agree","msgtype":"m.text"},"ts":1639594459491,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-B1LGWuIifZ3qNmRF6bx2kqZCl1OlMW3VdERDaIhRvU"},
{"content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","msgtype":"m.text"},"ts":1639594515072,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E"},
{"content":{"body":" * i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable.","m.new_content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594521213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gWq0wiQpsp3JwtX884jA17m3ZmPhQOMPqRLcMZVk7rI"},
{"content":{"body":"ok, then this amounts to a proposal that \"it must be false for any primitive\" stop being true for these primitives","msgtype":"m.text"},"ts":1639594538979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb_c4kCj77_eK5um7yXcCrB7akLXHrdUveb0YV6iH1k"},
{"content":{"body":" * i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","m.new_content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594549757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XOvf7Tp4ffXh85QRVNkA_5_fnfuv1O-n1ln38kFbg18"},
{"content":{"body":"that is a property which current holds, not an invariant which is written in stone","msgtype":"m.text"},"ts":1639594558457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$joRA3cO0nZ6f3a-x4XsNHqQycWU1a-fb1luvcwNlC2E"},
{"content":{"body":"that would break far more code than any membrane breakage.","msgtype":"m.text"},"ts":1639594562527,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jXsM6n7nykY8aRnQH8l_0XAyehxLxKj_4pF3yI65uFo"},
{"content":{"body":"would it though","msgtype":"m.text"},"ts":1639594567330,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M2kVCvVE-yFVBEa2aGA54kNJvnbtzNq_QD8PKQGXrB8"},
{"content":{"body":"and what level of 'break' are we talking here","msgtype":"m.text"},"ts":1639594584819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rg7wFj-wTt9stnjMKLaXz_x-qCLQ5khGaoNTLDBebNc"},
{"content":{"body":"i mean i can pull out my list of npm packages and download counts and audit it if you want, but i'm pretty confident","msgtype":"m.text"},"ts":1639594586228,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zNFm1mTBxJjDBz1F49dBHu1KhgmOIHBbwmAlbppF-CY"},
{"content":{"body":"a lot of code breaks when we add a new `typeof` value, in the sense of \"no longer interoperates with new code\"","format":"org.matrix.custom.html","formatted_body":"a lot of code breaks when we add a new <code>typeof</code> value, in the sense of &quot;no longer interoperates with new code&quot;","msgtype":"m.text"},"ts":1639594608546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cid0jtLCmPl6Ay-wvg9Ak3_s_4Szu9mSKjqxeP93_j8"},
{"content":{"body":"\"what level\" i can't really say without actually looking at the code, to be fair","msgtype":"m.text"},"ts":1639594610114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mP5NC6OLemT568ahjOkVjUyCrHdmQqyBj4fTeo4nKik"},
{"content":{"body":"but that is fine","msgtype":"m.text"},"ts":1639594612213,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fgdqdf7x2nqNM0kGOgKeImxEbJG2kqaeX2yNzD07ocY"},
{"content":{"body":"don't use new code without updating","msgtype":"m.text"},"ts":1639594620180,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ulXDMCMblf-CznP8ewgvoG-hD1d9hkb-8RQthqRV9wg"},
{"content":{"body":"we need clarity on evolution","msgtype":"m.text"},"ts":1639594628779,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5IVmT-TA2EaC6j35zyAkLIt1-a3uyf53Ob4ZXIxg6q0"},
{"content":{"body":"\"don't use new code without updating\" is just not practical. browsers update things all the time","msgtype":"m.text"},"ts":1639594642213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rk0IiJHToxPZcVqS_nWKqYT1mNNIrXQtFk3pK47BnwE"},
{"content":{"body":"i would really like to get to my comments, they were related to this topic but were not moved up. I would like a timebox extension","msgtype":"m.text"},"ts":1639594649922,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$vxdWnzgHNv5RxxWqLI1zOLDlLZg7Xryk_sKaUcyWSm8"},
{"content":{"body":"browsers do not start injecting new javascript onto the page","msgtype":"m.text"},"ts":1639594655984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cpKJrt-eABu4PrkiDaABCBrKL0VjPwAHf5bF0T9Bp4s"},
{"content":{"body":"because it increasingly sounds like there are some folks who have interpreted \"don't break the web\" to not evolve the language?","msgtype":"m.text"},"ts":1639594658668,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HkMHi26UjspZrnxdNUySL6TIZgbsXILxHCFHFjiN6YY"},
{"content":{"body":"since basically nobody's code is entirely first party, there's never just one author involved","msgtype":"m.text"},"ts":1639594667710,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VNXGp44dMFtPKBdgAqk4XRiQtnKkWKSdPTe1E40iyMQ"},
{"content":{"body":"which does mean that new app code will exist with old libraries often","msgtype":"m.text"},"ts":1639594690457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ojig1PH5CZYgi758qhwEyekkS2UQB523PTuJgsscAkg"},
{"content":{"body":" * which does mean that new app code will exist with old libraries often","m.new_content":{"body":"which does mean that new app code will exist with old libraries often","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ojig1PH5CZYgi758qhwEyekkS2UQB523PTuJgsscAkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594695624,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hvv8CTlMdGmsBPWLKdm65amDuF35AA93jUNShTR_5gY"},
{"content":{"body":"yeah, but that app has not already shipped","msgtype":"m.text"},"ts":1639594701649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6vGxKKCbN7RHOXn1lWJRpsiQJPBj83-2_P3Eyt7S9J4"},
{"content":{"body":"so it isn't an existing thing we can break","msgtype":"m.text"},"ts":1639594705412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tY0L4lcG3ruoFD5x13OqI5ZqRxiRrCK869Jyuk32jE4"},
{"content":{"body":"if the user tries to write the new feature, they'll discover it doesn't work with the old library","msgtype":"m.text"},"ts":1639594718965,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_ZyqJHsRVDV4kGfcurW_Tawh6nVtzW-BRuzFRMnbKSg"},
{"content":{"body":"and that's fine","msgtype":"m.text"},"ts":1639594720104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ld6X5aZRtvght4w3pc2sqbKHuoqXLEvdC8HonMxLN4o"},
{"content":{"body":"the existing page will work","msgtype":"m.text"},"ts":1639594724431,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3DduEIVomoDR2QGAaCZrDMSm8124Thb30JJ2wAjBOKk"},
{"content":{"body":"i see what you're saying and i completely agree there's many scenarios where the breakage isn't a problem. i think the object/primitive thing is not one of those scenarios.","msgtype":"m.text"},"ts":1639594738541,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JCBD_lbHiFDDaggg4G1yHbctOS6q3C3Oz3SvFTlGnMo"},
{"content":{"body":"i am open to being convinced, but nothing said so far has convinced me","msgtype":"m.text"},"ts":1639594757624,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NebujGK0WclYNl7kc_Xvj8q6PmxZZfTzvXSb1knuP1Y"},
{"content":{"body":"things that have been said have convinced me less, if anyhing!","msgtype":"m.text"},"ts":1639594802086,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K1khNZgjzyq8kI6sGVotnk4UC1kIJYDG2SHcIqUfbWU"},
{"content":{"body":"bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","msgtype":"m.text"},"ts":1639594840807,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kpbm9NHeloiMxBH48Fajq8LMXe1eK4VXADBhLiSDot4"},
{"content":{"body":" * bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","m.new_content":{"body":"bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","msgtype":"m.text"},"m.relates_to":{"event_id":"$kpbm9NHeloiMxBH48Fajq8LMXe1eK4VXADBhLiSDot4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594855558,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NsIkIahoo2XLYjEEgVouz8ndAVz7cK86j-7whtOgSmc"},
{"content":{"body":"Is the slide on the screen coming through jitsi as unreadable low-res for others as well?","msgtype":"m.text"},"ts":1639594941734,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$4sHOElKepIkaVdneBDzlEMJLKwjnczXV4yLQQAqF0eU"},
{"content":{"body":"yes low res","msgtype":"m.text"},"ts":1639594950110,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$yZv9xE4_AvF12HKPSXVsxxgraytgFJIp-dkAGN5fohs"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1639594955865,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Nu0h-DOluAG7uOynBLDQ8SH2_LPt-til17I-8rOmRKE"},
{"content":{"body":"the slides link is in the doc and schedule i believe","msgtype":"m.text"},"ts":1639594958272,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$pdyr5MncCdnuWSF4fvyIaaPYwtN9p6p3qfQkTZz42g8"},
{"content":{"body":"I don't know what's special about this one, because in other presentations jitsi was showing full resolution","msgtype":"m.text"},"ts":1639594998984,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Kjm3vc0xJUl4tMknKGNHPSm4yj6m6d581CQTel5hUe4"},
{"content":{"body":"I think it dropped the quality on Nicolo's side?","msgtype":"m.text"},"ts":1639595016064,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$cG7gNVuRzMyFIDwURslNxM9zs6PXfMTpmFbK2KYc1RM"},
{"content":{"body":"maybe weak connection?","msgtype":"m.text"},"ts":1639595029068,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$mZHr33iRsctZg1AgCWMfSHEAf-Wc9uxgVz7ZOXCXxfk"},
{"content":{"body":"My feeling is that we should use symbols for the objectPlaceholder -- i don't see what objectplaceholder as a new primitive would do that we cannot do with symbol","msgtype":"m.text"},"ts":1639595146589,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$t14nXZwIVeicIuRo3RrOaLpW6im2aDlHrdK-0RAq9Wg"},
{"content":{"body":"I would also say that we can introduce a light syntax sugar on records to make the pattern easy for developers -- this is what i heard as the main objection to the weakmap solution","msgtype":"m.text"},"ts":1639595187386,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$se62IQXC6EraoSPi9-WLckm1-qUAuDN2aJUPrKrTdO4"},
{"content":{"body":"I tend to agree with yulia here","msgtype":"m.text"},"ts":1639595215203,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$S2-JfnMo43SXwOGwaUIAQDvv9XjnLRpALBtoyEUNRpk"},
{"content":{"body":"i think ObjectPlaceholders are needless complexity and might bite us later","msgtype":"m.text"},"ts":1639595236849,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8nIrgIG_WoDKYXQvhTYrDdX4Hjv7uBIS7Vm9kAJU-zQ"},
{"content":{"body":"for example `x = #{... y: Symbol.tie(\"symName\", objRef) }`","format":"org.matrix.custom.html","formatted_body":"for example <code>x = #{... y: Symbol.tie(&quot;symName&quot;, objRef) }</code>","msgtype":"m.text"},"ts":1639595243099,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE"},
{"content":{"body":"Is the conclusion for R&T that no conclusion was made?","msgtype":"m.text"},"ts":1639595261361,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0-YE29wStqUYubQIYhDJdsYCYtklnW21etRUQyQbngc"},
{"content":{"body":"this also alleviates the issue of the memory leak, as we can specify Symbol.tie as we like","msgtype":"m.text"},"ts":1639595281786,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$DQQGZQf0IMIcyAaMJNVt1obhDT61KYoAjgr6Nq2w-XM"},
{"content":{"body":"cc nicolo-ribaudo Robin Ricard  ^","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>  ^","msgtype":"m.text"},"ts":1639595361133,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$kEetwyPEekLw6TA9phrJ_B3CISY5q6AwIFI0ooTnqrM"},
{"content":{"body":"`Symbol.tie` would be interesting but hits the same realm/membrane invariant","format":"org.matrix.custom.html","formatted_body":"<code>Symbol.tie</code> would be interesting but hits the same realm/membrane invariant","msgtype":"m.text"},"ts":1639595364361,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$peuT46QV45wuu1aXx2JZSKE7JhPgYlWBHmKcVmVyrDQ"},
{"content":{"body":"it would respond the same way as the weakmap","msgtype":"m.text"},"ts":1639595385160,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lwX45oVUC2fhtEg7zTklo5GSE1soGYLgs0GuqeA3Jm8"},
{"content":{"body":"but +1 on all of this, I can sign on to symbols in WM on the argument that it is much simpler","msgtype":"m.text"},"ts":1639595386221,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$lcSwYwpq4nW-XzuA-z15B5I2c4NPuiqz-pVti53XgdA"},
{"content":{"body":"symbol.tie is just sugar for that pattern","msgtype":"m.text"},"ts":1639595392146,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6XBI-C3udJBy3wVK5kYWmNYve7kD0uIsMXsvW27fJCM"},
{"content":{"body":"well, where is the weakmap?","msgtype":"m.text"},"ts":1639595400697,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Wgw7uU3qEZtWnqgfy3_34DWlvZ2U4cy_kJWgbDuAv1k"},
{"content":{"body":"bakkot: so here's an example, admittedly in the es5-shim for bind (first lib i checked), where `new` of a bound function would fail in the presence of a shimmed bind function and a bound constructor that returns an R/T: https://github.com/es-shims/es5-shim/blob/master/es5-shim.js#L254","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so here's an example, admittedly in the es5-shim for bind (first lib i checked), where <code>new</code> of a bound function would fail in the presence of a shimmed bind function and a bound constructor that returns an R/T: https://github.com/es-shims/es5-shim/blob/master/es5-shim.js#L254","msgtype":"m.text"},"ts":1639595425485,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krdi4Xhrtc6W1kmSaa0VNdzFddhnBqnxnMxGf1K8Bik"},
{"content":{"body":"rickbutton: this is something we decide -- i would say it is in the realm that creates it (if i understood the slides -- this is to be in line with the goals of the champions, apologies if i got it wrong)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: this is something we decide -- i would say it is in the realm that creates it (if i understood the slides -- this is to be in line with the goals of the champions, apologies if i got it wrong)","msgtype":"m.text"},"ts":1639595704353,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mpJXJdwh9zfLQlCfVzo1Z8kId0cD_c56IvoZB9sCpoU"},
{"content":{"body":"obviously this needs to be fully fleshed out -- for example the retreival, but this is fundamentally sugar","msgtype":"m.text"},"ts":1639595763818,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-xRc16OiZinVZbNAF-YAwYvdhyhE1rUMNi1mfzUs71s"},
{"content":{"body":"no that makes sense, but my point is that it runs into the exact problem that some folks have with ObjectPlaceholders across realms, the symbol lookup on the other side of a realm needs to have that weakmap, so either it is shared across all realms or per-realm","msgtype":"m.text"},"ts":1639595788632,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$O4tQmXIIEaXQQsEiVyZWSGUCDlNBlbONJsG6RJY6JfY"},
{"content":{"body":"ljharb: right, so that library will not interoperate with new code written with this feature, but no existing pages will break","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: right, so that library will not interoperate with new code written with this feature, but no existing pages will break","msgtype":"m.text"},"ts":1639595805181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d2SQkELCeqJTDlSK9MOE_xEWnJK8n0x8NUtUUorTMKs"},
{"content":{"body":"seems fine","msgtype":"m.text"},"ts":1639595807713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GMAnodxs5s4wT3bIP-0l3Sd411WcEtHOXv2JQG4X2TA"},
{"content":{"body":"ultimately the problem is \"who owns the weakmap\", some don't want the realm itself to own a weakmap per realm","msgtype":"m.text"},"ts":1639595823471,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Y5rj11BOPiK02lk6QF85HqWRONOSqY0Rq-0xpXEqJng"},
{"content":{"body":"rickbutton: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&T should be beholden to","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&amp;T should be beholden to","msgtype":"m.text"},"ts":1639595846910,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg"},
{"content":{"body":"> <@yulia:mozilla.org> rickbutton: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&T should be beholden to\n\nI certainly agree.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&amp;T should be beholden to</blockquote></mx-reply>I certainly agree.","m.relates_to":{"m.in_reply_to":{"event_id":"$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg"}},"msgtype":"m.text"},"ts":1639595859442,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$KlCMtrZCYhW6sU3qod15brfCnMIPDv04016qsANX5pU"},
{"content":{"body":"bakkot: existing pages would break when they try to use the new types in that manner tho, which is not fine","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: existing pages would break when they try to use the new types in that manner tho, which is not fine","msgtype":"m.text"},"ts":1639596004554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D_vqX00WSDOZwMCYzfOIjYjiEduXepR_iCPMtCcZIxM"},
{"content":{"body":"\"don't break the web\" doesn't just mean \"don't break pages that are never touched\"","msgtype":"m.text"},"ts":1639596045469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AP5Kgt_xW14l-5kQu63GpbUY7WmPznbjLymd4zj6F1s"},
{"content":{"body":"how is that not fine","msgtype":"m.text"},"ts":1639596046521,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O8HmzKf9EFkfKeKy94_PblZaFYa9jmMZIZtsR6jl9ww"},
{"content":{"body":"yes it does","msgtype":"m.text"},"ts":1639596064174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MEMXee-K5DKVI1jm9WO8YbnMD2FsvkhkwU0Pj2SKQ1o"},
{"content":{"body":"that's what that means","msgtype":"m.text"},"ts":1639596066037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dL6W9dOjkM29KBDC9-c5Xjn3eeuzCvmqqtWmuW82_5g"},
{"content":{"body":"\"if your page currently works, it keeps working\", not \"if you start writing new code, it will keep working\"","msgtype":"m.text"},"ts":1639596084972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$esRsmPH36qC4ATB0_Z0msbk-TxeDEHRxpJ00WbOJTys"},
{"content":{"body":"we cannot make that promise","msgtype":"m.text"},"ts":1639596087116,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iU7gv6ibyp5zuwt4OpxHbQed6vMJ116Tu2_0mFiOPcM"},
{"content":{"body":"+5","msgtype":"m.text"},"ts":1639596095172,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dfjgTGKJPyFu5L3VfEb17YurXlsF47zze1ZY5Wqo7yk"},
{"content":{"body":"i do see your argument and largely agree","msgtype":"m.text"},"ts":1639596100606,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bVkGUDNxMRL5ObMNiFodcO6iJpJbNMxy-qYE7V-ryLw"},
{"content":{"body":"SML/NJ is there if you want an ossified language","msgtype":"m.text"},"ts":1639596109764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5Up3M-VjlD-Gez_qCfw7O3vZR0CdSRIlOdX51-Clmoo"},
{"content":{"body":"but i think that pre-existing invariants should not be casually broken","msgtype":"m.text"},"ts":1639596113594,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QJTSciSDaYPfzuyBf62DIxiPceiMjlfQpdN5GfsEb2E"},
{"content":{"body":"and `Object(x) === x` meaning \"is an object\" is an ancient one that tons of code relies on","format":"org.matrix.custom.html","formatted_body":"and <code>Object(x) === x</code> meaning &quot;is an object&quot; is an ancient one that tons of code relies on","msgtype":"m.text"},"ts":1639596130774,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C7Sln2TvWWaWaxP1By9irQTQBm0NOTIZqfP_HMMPirQ"},
{"content":{"body":"especially since ES6, when everything using a list of typeof values for that concept switched to using `Object(x) === x` to avoid future additions breaking them like symbol did (and bigint)","format":"org.matrix.custom.html","formatted_body":"especially since ES6, when everything using a list of typeof values for that concept switched to using <code>Object(x) === x</code> to avoid future additions breaking them like symbol did (and bigint)","msgtype":"m.text"},"ts":1639596157311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$82-rxLyNWyRV1kRYXEVLpudDjYvpXhcX6LCtt4Vkra4"},
{"content":{"body":"I'm not being casual about it","msgtype":"m.text"},"ts":1639596190247,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FLQ-lvlwPArVCCQI6LLiKavQXYyZVTJNHPGyjZELkzQ"},
{"content":{"body":"I just think that tuples are _genuinely_ something between primitives and objects","format":"org.matrix.custom.html","formatted_body":"I just think that tuples are <em>genuinely</em> something between primitives and objects","msgtype":"m.text"},"ts":1639596201122,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OO9O-_aDUHl5qpc8E7Sb4rmP618aPLbfT7PWyXmhGfQ"},
{"content":{"body":"and it's ok for them to behave like primitives in some ways and objects in others","msgtype":"m.text"},"ts":1639596209044,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ht7QRGG9SqDJdG5vbwpdm28SAOkSGIzx0OVPTuvzM04"},
{"content":{"body":"in a general sense i don't agree that that is ok","msgtype":"m.text"},"ts":1639596240768,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_w7XctvCL6V9El9xL2VbLvFqP-PfEW7Ynktcai-UtkQ"},
{"content":{"body":"well, they do: like objects, they contain other values; like primitives, they are forgeable","msgtype":"m.text"},"ts":1639596263441,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A"},
{"content":{"body":"i'm sure there's some specific ways that i'll agree it's fine, but in a general sense, objects need to behave like objects and primitives like primitives, and i don't want that line blurred","msgtype":"m.text"},"ts":1639596266660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W9Dl4dPevQjIHjOYOsCbueAwt8iBOVuO7vJO2GNY0Gk"},
{"content":{"body":"forgeability isn't a primitive property; non-global symbols aren't.","msgtype":"m.text"},"ts":1639596286186,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dhYMFen0jSQF8vGp_Ta-Z5CtuzafdkYfowvLITMsAdk"},
{"content":{"body":"\"like primitives they can't be used in a map\", then","msgtype":"m.text"},"ts":1639596308376,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jMF1g9_SuEezHsDmBwO0IBqCIv9TLSavBv4UFA_9n94"},
{"content":{"body":"or \"like primitives they compare by value\"","msgtype":"m.text"},"ts":1639596315478,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJ4Q0_3SKFbJyPpsepsxwsRiYAkZyzuAlwyLvyAyIjs"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1639596317327,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BO8OANuTcdzwb2VYNE3uE-dPv4LcdDHbUrH8uzQnMck"},
{"content":{"body":"weakmap, sure","msgtype":"m.text"},"ts":1639596321425,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oxbtcecMpQvDYB6ZkuP9Z4wI-QfrB1m3SzA-qhpnXLo"},
{"content":{"body":"and how do i write my code to branch on whether it'll throw or not? by using Object(x) === x","msgtype":"m.text"},"ts":1639596337268,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kswZpJa1x8dgxBoJh5G4Fv5Nu-DnbIUkz9tswB9vVPg"},
{"content":{"body":"that won't work if we let you put symbols in weakmaps","msgtype":"m.text"},"ts":1639596359705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI"},
{"content":{"body":"and that's _fine_","format":"org.matrix.custom.html","formatted_body":"and that's <em>fine</em>","msgtype":"m.text"},"ts":1639596362712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BzDjLiT_YpJzBnCbAeA_N4154TOn2g7ID8YzclaVFjg"},
{"content":{"body":"> <@bakkot:matrix.org> well, they do: like objects, they contain other values; like primitives, they are forgeable\n\nInsofar that strings can be considered to “contain” other strings, I don’t think that “containing” values is a unique feature of non-primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>well, they do: like objects, they contain other values; like primitives, they are forgeable</blockquote></mx-reply>Insofar that strings can be considered to “contain” other strings, I don’t think that “containing” values is a unique feature of non-primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A"}},"msgtype":"m.text"},"ts":1639596362751,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CM_9JhPnAetfcphLVqyfIgkocLtmWriOXKkYqXbcaD4"},
{"content":{"body":"give me an actual \"is an object\" or \"is a primitive\" predicate, and time to migrate everything to use it, and i think there'll be a much stronger case to break those invariants","msgtype":"m.text"},"ts":1639596365482,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YC6DmBCbZVTx9hI8nyev4ELF5NJPj8TDy3OMBq8k7h8"},
{"content":{"body":"jschoi I do not regard strings as containing other strings","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> I do not regard strings as containing other strings","msgtype":"m.text"},"ts":1639596377091,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s"},
{"content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI"}}},"ts":1639596379120,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU"},
{"content":{"body":"> <@bakkot:matrix.org> that won't work if we let you put symbols in weakmaps\n\n * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that won't work if we let you put symbols in weakmaps</blockquote></mx-reply> * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","m.new_content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","msgtype":"m.text"},"m.relates_to":{"event_id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596390336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0HEwvAcdNFe0D1iuS1Z31qY2sY1omxTe_Y_0-wSvoFw"},
{"content":{"body":" * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":" * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","m.new_content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","msgtype":"m.text"},"m.relates_to":{"event_id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596393976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hoqG3s84oqLgg9Zk8KGRxrNYnm1iUsakMwX1Nh0ai-E"},
{"content":{"body":"> <@bakkot:matrix.org> jschoi I do not regard strings as containing other strings\n\nI mean like my own mental model is that sometimes you can compose primitives into primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> I do not regard strings as containing other strings</blockquote></mx-reply>I mean like my own mental model is that sometimes you can compose primitives into primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s"}},"msgtype":"m.text"},"ts":1639596404814,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_NYOCkhDGptnPFU-YgDLstHeU1V8TLwVydkfW2hjXtk"},
{"content":{"body":"fallback Map?","msgtype":"m.text"},"ts":1639596410127,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$LvH2uUc0K3sPOYL5Iy3ohV-Kq521o6Mnh-y6Qi039Fs"},
{"content":{"body":"rickbutton: in my code where i want to key on any value, and i use a weakmap for objects and a Map for everything else, so i can provide a maximally weak unified collection interface","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: in my code where i want to key on any value, and i use a weakmap for objects and a Map for everything else, so i can provide a maximally weak unified collection interface","msgtype":"m.text"},"ts":1639596437788,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ia3GYju8brEfeNzWj99yo7kyDC8wr0KQgYt8daO3ww8"},
{"content":{"body":"yoru code is now going down the wrong branch. just because it happens to still work doesn't mean `Object(x) === x` is actually the check you wanted.","format":"org.matrix.custom.html","formatted_body":"yoru code is now going down the wrong branch. just because it happens to still work doesn't mean <code>Object(x) === x</code> is actually the check you wanted.","msgtype":"m.text"},"ts":1639596439773,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zFRLJNo58Bh-T0-pcWbwoi7NW8IkPVqdVbiCgwb32Rc"},
{"content":{"body":"it's not wrong - my code still functions properly. it's just putting the symbol in a Map instead of a WeakMap","msgtype":"m.text"},"ts":1639596454016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l9BpfFQBGRJWtaBvCLGzTfui6MJesa7VGGIpPuOfzXM"},
{"content":{"body":"and i agree, that in that case the Object comparison isn't the check i want - but that check doesn't exist yet","msgtype":"m.text"},"ts":1639596467752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I8n-qaRTNmdaudZymjn2g8e_K4GijNSVSDmLwy9wYUo"},
{"content":{"body":"`let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":"<code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","msgtype":"m.text"},"ts":1639596498365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HkCOx3izlvCOo8z7_Zc1UBPAWvcgyQsgkl_NwKt52E0"},
{"content":{"body":"when a semantic lacks a first-class predicate, code will and does abuse an existing property to provide that semantic.","msgtype":"m.text"},"ts":1639596499840,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0dQp2CFc70XjDrFBPVwJ6xiuk9TeJ5xDdkql_f2VedM"},
{"content":{"body":"it's not wrong right now. it just may become wrong in the future.","msgtype":"m.text"},"ts":1639596511580,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T4Ly-JxyiVy6yxsIWdEYtmERgDsnC702OEBd4jLHkT8"},
{"content":{"body":"it will become wrong if we put symbols in weakmaps","msgtype":"m.text"},"ts":1639596520370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xLzaKChBXSd7Gd2DeV79GTbLaUGCH5-Gco8SCFaRk2U"},
{"content":{"body":"and that is ok","msgtype":"m.text"},"ts":1639596522463,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$woga8HL6IOAI6EmqCmKlk7miXSB1nmLIfJ39DKG9AHY"},
{"content":{"body":" * `let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":" * <code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","m.new_content":{"body":"`let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":"<code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HkCOx3izlvCOo8z7_Zc1UBPAWvcgyQsgkl_NwKt52E0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596533648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Iu49YEBU9LBRgs4Usv28nqj2lYgWLVfc_SlXil6UYns"},
{"content":{"body":"whether it's OK or not depends heavily on the context that predicate is used in","msgtype":"m.text"},"ts":1639596563767,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bee7uChfCNHzlDWfWqon2mT_Fd4PX3eBibpd1JAHxYs"},
{"content":{"body":"as a builtin predicate tho, then it would be updated in sync with the engine, and then it's always OK","msgtype":"m.text"},"ts":1639596577226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gjfbRV33msOn-Xul3WdC7XoPBlhvupSAf40e5EWqc3k"},
{"content":{"body":"it's just unconditionally OK. there is no promise that old code continues to behave identically when provided with new values.","msgtype":"m.text"},"ts":1639596608078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j9naNGyzgcZ9us7020xXgdVCKj5P7o7h_c3W1Et1eko"},
{"content":{"body":"it is a very broad spectrum","msgtype":"m.text"},"ts":1639596646134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kd044SJOnWnijONkaSyooN1wwtkie7nFohjfUpDa-3o"},
{"content":{"body":"will your old code not do the exact same thing in this case? it will put the symbol into a map, the old behavior","msgtype":"m.text"},"ts":1639596649902,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$T9iVgyOW4fG1j6XkI7H0Cgm18HmLOzb_vDKrXbQf7Vo"},
{"content":{"body":"i'm misunderstanding the actual problem here","msgtype":"m.text"},"ts":1639596658238,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$jL7sE-4z5IgkZ9Vrs5oP4RID-Tx9F8YLlQOSioXqT3A"},
{"content":{"body":"rickbutton: yes, this is a use case where it's fine, when i have the fallback map","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: yes, this is a use case where it's fine, when i have the fallback map","msgtype":"m.text"},"ts":1639596685340,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R6oYO2XQjC3tUFjnGMvB9KU2cbGEutuMzc2t6rRrHsg"},
{"content":{"body":"the question is whether it is acceptable for `object(x) === x` to hold for tuples","format":"org.matrix.custom.html","formatted_body":"the question is whether it is acceptable for <code>object(x) === x</code> to hold for tuples","msgtype":"m.text"},"ts":1639596699863,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qvN14lyd-3h6ewfgnuBYu-uiVnA_-BJGzEDepjZShIw"},
{"content":{"body":"i'm talking generally about that axiom being relied on in a myriad of ways","msgtype":"m.text"},"ts":1639596700228,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Td0tZiIv9MB7NWiNVf0ZjS405f1bqr7K8yJxySID2QE"},
{"content":{"body":"I think it's fine","msgtype":"m.text"},"ts":1639596707859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SIyyBBy3nkM1VSaUtvdIYIxY7QK_pYmB2ptirebjCVc"},
{"content":{"body":"jordan thinks otherwise","msgtype":"m.text"},"ts":1639596713134,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vSgu4OduNkjm9qtg6lidx2LQiprpOxY3XSMOkphhPT4"},
{"content":{"body":"I have no opinion on this, I think","msgtype":"m.text"},"ts":1639596749287,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$4d4MwbM5LuzbCnlKCoomG8iC6yVefjS5VJlkO4VzeZE"},
{"content":{"body":"(the best opinion :) )","msgtype":"m.text"},"ts":1639596761757,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$VDYb523aTUnu4OjWVtQ-d-jbpsMKLxyTLPFczP9J6Ls"},
{"content":{"body":"wait, is the decorator presenter here?","msgtype":"m.text"},"ts":1639596882950,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZnuknHdhNZc_WoPccDon5X921jMZ1qfEDvGGihsY4v4"},
{"content":{"body":"did i hear right that _static_ field initializers aren't symmetric with _instance_ field initializers?","format":"org.matrix.custom.html","formatted_body":"did i hear right that <em>static</em> field initializers aren't symmetric with <em>instance</em> field initializers?","msgtype":"m.text"},"ts":1639596896031,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A1WkFmf2Lnf5Fr2w5Vpkhu2hIhGgjmVZ9vD_15Ky6Tk"},
{"content":{"body":"static field initializers have `addInitializer` but instance fields can only do replacement?","format":"org.matrix.custom.html","formatted_body":"static field initializers have <code>addInitializer</code> but instance fields can only do replacement?","msgtype":"m.text"},"ts":1639596912928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Rvt4LZlslaCgyKMFcTRwP8IxvrughgovpOa6XtbUFxA"},
{"content":{"body":"(no opinion, just clarifying)","msgtype":"m.text"},"ts":1639596921047,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$btIqsr9kqq6f0eL_NmeoZe7tyq_y7wdyyLT6bpb2Qtk"},
{"content":{"body":"pzuraq: I've been meaning to examine in more detail how the current version of the proposal interacts with how GNOME would like to use decorators. hence the question about static fields. if you plan to go to stage 3 soon I'll make sure I do that in January","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: I've been meaning to examine in more detail how the current version of the proposal interacts with how GNOME would like to use decorators. hence the question about static fields. if you plan to go to stage 3 soon I'll make sure I do that in January","msgtype":"m.text"},"ts":1639596940526,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$-aOPdEQTejzeUpm3CJygJjphcZu_Tq2gA7QsGSpyUoI"},
{"content":{"body":"strong font game on this preso","msgtype":"m.text"},"ts":1639596951552,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$6eQFBzTxIouZz26-ITNBDG96FYq3s4lwHOnVO9JqVVo"},
{"content":{"body":"I see corruption on the top right of the slides. Anyone else?","msgtype":"m.text"},"ts":1639596973144,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$zjd6YH7bkhZtuKe-d8pvq8z5wa6dg19LMbj1uRCn_0E"},
{"content":{"body":"agree, game gotta respect game","msgtype":"m.text"},"ts":1639596977678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ToDdoVnKoGX7vrGkz3GsHW1l27WVGCPAmEhLRVs5dUY"},
{"content":{"body":"best font since shu's presentations","msgtype":"m.text"},"ts":1639597008573,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lng6V1-j9YWuzia9VErxx2r4-B3m5dhTi8Ysos5caOs"},
{"content":{"body":"waldemar: me too","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: me too","msgtype":"m.text"},"ts":1639597013117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ujTKWneHMwHpaKVXAWxbAEkp5fblJFqiKh8B46Kssuo"},
{"content":{"body":"The slide corruption changed…","msgtype":"m.text"},"ts":1639597177165,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Kmp3A4gKGEgdEV4DQ4PXusNdUY08FynS6zuu4Bge3-I"},
{"content":{"body":"> <@yulia:mozilla.org> for example `x = #{... y: Symbol.tie(\"symName\", objRef) }`\n\nHow would you retrieve `objRef` from `y` when consuming the record? If you have an equivalent `Symbol.fromTie(y)`, then what you have is effectively `ObjectPlaceholder`. Or did I miss something ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>for example <code>x = #{... y: Symbol.tie(\"symName\", objRef) }</code></blockquote></mx-reply>How would you retrieve <code>objRef</code> from <code>y</code> when consuming the record? If you have an equivalent <code>Symbol.fromTie(y)</code>, then what you have is effectively <code>ObjectPlaceholder</code>. Or did I miss something ?","m.relates_to":{"m.in_reply_to":{"event_id":"$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE"}},"msgtype":"m.text"},"ts":1639597179406,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ZOQRA_qXdTnbR5-lYSgE0twHCS8QI3VdEwbPrB5Sjjs"},
{"content":{"body":"Mathieu Hofman: its kind of my point actually","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: its kind of my point actually","msgtype":"m.text"},"ts":1639597210662,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nE_Kwfg6smwYBWAfNDU25GA3MTA1K_JN479N7H7UXto"},
{"content":{"body":"I look forward to never using Kahan's summation again","msgtype":"m.text"},"ts":1639597278271,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$29EDwKlyJaWrPwKJ1rz3vaj5_vkjLF3LFbTp_lA_yTM"},
{"content":{"body":"I once read one of Kahan’s papers on why IEEE floats are designed the way they are. It was illuminating albeit confusing.","msgtype":"m.text"},"ts":1639597305583,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NTVDKONN55uvQSXCNigetPR52EjqLBdk19KsTxNz7B4"},
{"content":{"body":"jschoi: if you liked that, I highly recommend https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: if you liked that, I highly recommend https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868","msgtype":"m.text"},"ts":1639597395810,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$195S1nBIGefVo4MFyXIekROWt7qY8M5CTxpOH68ncgs"},
{"content":{"body":"What I remember from Kahan: We should have had many distinguishable NaN values. Heh.","msgtype":"m.text"},"ts":1639597473575,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$a8ubLuI0gLuKNNp4VZMjdQ3bLpM0W2fjj2ZCuNGs1oQ"},
{"content":{"body":"This book looks cool.","msgtype":"m.text"},"ts":1639597477495,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_uJw0YRI7Bke0mJQhH9veVQqCl0QnO89aTVjIH96uPk"},
{"content":{"body":"many indistiguishable NaN values is responsible for your iphone's web engine being fast yo","msgtype":"m.text"},"ts":1639597505601,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k"},
{"content":{"body":"jschoi: there's some shorter papers that pretty much sum it up, with lots of great figures, if you want me to dig those links up for you","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: there's some shorter papers that pretty much sum it up, with lots of great figures, if you want me to dig those links up for you","msgtype":"m.text"},"ts":1639597517733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lAqsxiBz3yftUSV766LevHX4kzoObyJtGmwgGvcdMg8"},
{"content":{"body":"Okay, a five minute slide deck for updating on Pattern Matching: https://docs.google.com/presentation/d/1D6rJzRRxf235sQH6JUXeKdJk5QLnYu66_gH5lpvcbwI/edit","msgtype":"m.text"},"ts":1639597527707,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YMENUiMlATMadUn-Oegf5zC6LJ6rYz2f-P9KhVj1HpA"},
{"content":{"body":"instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)","msgtype":"m.text"},"ts":1639597552598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg"},
{"content":{"body":"> <@shuyuguo:matrix.org> many indistiguishable NaN values is responsible for your iphone's web engine being fast yo\n\nI imagine Kahan shedding a tear at this. 🥲","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>many indistiguishable NaN values is responsible for your iphone&#39;s web engine being fast yo</blockquote></mx-reply>I imagine Kahan shedding a tear at this. 🥲","m.relates_to":{"m.in_reply_to":{"event_id":"$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k"}},"msgtype":"m.text"},"ts":1639597557411,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nzMysisTaeFp6XFOBq3-e3darbFQARtS5vAKdRAvyoQ"},
{"content":{"body":"> <@bakkot:matrix.org> instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)\n\nOh, I heard about this too. I remember seeing a debate on YouTube between the creator of this and Kahan, in fact…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)</blockquote></mx-reply>Oh, I heard about this too. I remember seeing a debate on YouTube between the creator of this and Kahan, in fact…","m.relates_to":{"m.in_reply_to":{"event_id":"$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg"}},"msgtype":"m.text"},"ts":1639597592884,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6n8cDbhJE7-05Vox-WsefoRWGx3U4upIM63d5CUJcY0"},
{"content":{"body":"nah, that wikipedia article isn't great","msgtype":"m.text"},"ts":1639597598915,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sgrAlfHDBUA7_hf63DR_RQNeSOqcYJ2qxggz73fj018"},
{"content":{"body":"i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","msgtype":"m.text"},"ts":1639597727672,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7HmrHEbbiZgX_U6l7Yi4x_T_WXZoYJrHCqiS2zksk90"},
{"content":{"body":" * i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","m.new_content":{"body":"i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","msgtype":"m.text"},"m.relates_to":{"event_id":"$7HmrHEbbiZgX_U6l7Yi4x_T_WXZoYJrHCqiS2zksk90","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639597736244,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qOEajZei-BnVH6JFRiKAS6hTLWp0szOWJmSdbAbafQE"},
{"content":{"body":"or wait, that's bit size, not decimal precision, so maybe that's an unrelated question","msgtype":"m.text"},"ts":1639597761111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B-qxNQOyfGbaLS-fGUaSzwrX-7wGRuUIKFu3cXkJ5JY"},
{"content":{"body":"well, yes, it is","msgtype":"m.text"},"ts":1639597765654,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P8HHzr8KIj9ikglHGR0_YLnGlloS4rSyGlXxR9mdvMo"},
{"content":{"body":"to be clear, I think there's probably too much buy-in to IEEE-754 to ever replace it with Unums, but I have been convinced they are better in every way, and it would have been a better alternative timeline if we had had them instead","msgtype":"m.text"},"ts":1639597767520,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aQ1ExQzh6GoANd8FiyFYle9O9dN-7hhikxB7zP-mV54"},
{"content":{"body":"Imagine hardware accelerated unums.","msgtype":"m.text"},"ts":1639597789894,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tzdvFwpLaB8L_CcO9WmGfW_U79rxe8fLJkeoYcXrJQ0"},
{"content":{"body":"shu: yes I am completely lost whenever I don't run into overflow/underflow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: yes I am completely lost whenever I don't run into overflow/underflow","msgtype":"m.text"},"ts":1639597801409,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MMRrVbTh3iHId27GFluR5aMXSedxiFFxfGXhZfSwxH8"},
{"content":{"body":"jschoi: people have done it! just not mass produced","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: people have done it! just not mass produced","msgtype":"m.text"},"ts":1639597841048,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FI2lZCYg8wNCLR4TUGIU3X0WKs_agYtVFPQjW2xDGwk"},
{"content":{"body":"Is anyone else having issues with matrix?","msgtype":"m.text"},"ts":1639597867214,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5cK2nKL_aEQSxaJTVA_vE1B1g3so9PYnWiRxMjqZ8VY"},
{"content":{"body":"i mean i think using numbers qua numbers is fairly rare in what i do?","msgtype":"m.text"},"ts":1639597870587,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ARTR5VYXTTmHjt3zCTiD9LBC5SpW9Za5M-uGHo-whtM"},
{"content":{"body":"i'm tagging stuff, composing it with other stuff","msgtype":"m.text"},"ts":1639597884963,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t_HWzuNWXawTb66so87gjwt88mY491GHV1wgNYPVf0Q"},
{"content":{"body":"yulia: no. I suspect it's an issue with the federation with mozilla's homeserver?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: no. I suspect it's an issue with the federation with mozilla's homeserver?","msgtype":"m.text"},"ts":1639597900508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mTQ_KWACCpx8uwFSvVUmwTzlW8fI885KHW9mOrnR2Ng"},
{"content":{"body":"yeah precision blow-up from repeated mults is non-obvious if you're not paying attention.","msgtype":"m.text"},"ts":1639597915834,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rtZigtkIKP4cOBNdDoyAtr0uZL4WtTyBWH9k44rv7sI"},
{"content":{"body":":-( sad to hear that bigints are mostly only used for crypto fraud","msgtype":"m.text"},"ts":1639598005788,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LvA17SYNP_FG3euXvj8L1CfDilcKFPQ-n4lVXbGDCXc"},
{"content":{"body":"unsurprised though","msgtype":"m.text"},"ts":1639598014742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cR7rU1rn73AepLxbW5j6k2FFiVKNjnqtPWPAXlqC-Ew"},
{"content":{"body":"I use BigInts in my work. 🥲\nThough most recently it was with Node’s high-resolution performance API…","msgtype":"m.text"},"ts":1639598037082,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1kRA-uPh6ljnJVE60kwj8x8w05fFVgzXZPpZRd2lD7E"},
{"content":{"body":"but hey, the fact that bigints are mostly used for cryptominers does mean their usage probably went up 10x in the five days or so!","msgtype":"m.text"},"ts":1639598077518,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pR34QWRHfNn43SHFABHdxVklycNLyRxcbxRGV0_2t44"},
{"content":{"body":"i suspect it's just because they need 128bit ints?","msgtype":"m.text"},"ts":1639598085606,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jMxSQakcdgcV4HxGG-jWifBMi9sC7_PA1MjyLvLQiqM"}
]