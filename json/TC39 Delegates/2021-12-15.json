[
{"content":{"body":"given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":"given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","msgtype":"m.text"},"ts":1639546744457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RP9qRc6gLFFM6w0bM8rjN0knnyRtPhB-st9503cxFzo"},
{"content":{"body":" * given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":" * given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","m.new_content":{"body":"given that both `'\\u{1F468}\\u{1F3FE}'` and `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'` are RGI_Emoji, does `/\\p{RGI_Emoji}.../u` match `'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'`?","format":"org.matrix.custom.html","formatted_body":"given that both <code>'\\u{1F468}\\u{1F3FE}'</code> and <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code> are RGI_Emoji, does <code>/\\p{RGI_Emoji}.../u</code> match <code>'\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$RP9qRc6gLFFM6w0bM8rjN0knnyRtPhB-st9503cxFzo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639546749246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P3Hc9am7INfNDvboTgdHJw-ztbJC3r9DXjHx0nJuVAk"},
{"content":{"body":"Hey all, yesterday's plenary went faster than planned.  As a result there is now 25min of spare time at the end of today's session.  So HE Shi-Jun could choose to bring back Class brand checks, or we could just end the meeting early.","format":"org.matrix.custom.html","formatted_body":"Hey all, yesterday's plenary went faster than planned.  As a result there is now 25min of spare time at the end of today's session.  So <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> could choose to bring back Class brand checks, or we could just end the meeting early.","msgtype":"m.text"},"ts":1639581412263,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xkYKiDBMOMQz8i4Vz98lugFD7dVLeKRIT_VYQEvdxbA"},
{"content":{"body":"as it is a PT-time meeting this time, either is fine with me","msgtype":"m.text"},"ts":1639585341238,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6iE8X3eB7ZiNz2RK36uufPYlgVDStT2LEDd1wL0yBh8"},
{"content":{"body":"you may get stronger opinions from EMEA or APAC folks","msgtype":"m.text"},"ts":1639585393461,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ik_8VnBXpccmt2aWZsA9Uzc4JIX6PmrHQmNzSPREObM"},
{"content":{"body":"3pm PT is like 7am or something China time? guess if folks are pulling all nighters for this...","msgtype":"m.text"},"ts":1639585406855,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XDD_42M_8hLOErv6bJ-Z8AHa8hssIWHIsWSNr2wLcPY"},
{"content":{"body":"When I join the meeting, I'm in a room by myself.  I have tried several times.","msgtype":"m.text"},"ts":1639589470836,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$xH3WHvRjUdfb8dClb5PofTNPbMD3T5ibNRRV3uIMA-8"},
{"content":{"body":"If we have some leftover time I wouldn't mind giving a pattern-matching update; I can prepare quick slides with the latest form of the proposal. Happy to yield for anyone with more important needs tho.","msgtype":"m.text"},"ts":1639589516865,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$f8-EUEm8vuozaX1IV1otAtS-VlUgockqJnOWU2hUCGg"},
{"content":{"body":"msaboff: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.","msgtype":"m.text"},"ts":1639589572145,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM"},
{"content":{"body":"Is it still appropriate practice to correct notes?","msgtype":"m.text"},"ts":1639589750051,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$j2aAncBDgS_s0ZSgAbzW8IF4TkLon3dS7pKWL-bRi1A"},
{"content":{"body":"Nevermind, I see that it is. ","msgtype":"m.text"},"ts":1639589803007,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$S30UZaNOsntEbok7aZ602WoS7D2AqMToCSyDdaam3ww"},
{"content":{"body":"yup, please do so liberally","msgtype":"m.text"},"ts":1639590272640,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZsaLeuchG5u2HAnJShEpUM6YM8z4X_L1o37qBHh59Lc"},
{"content":{"body":"> <@tabatkins:matrix.org> msaboff: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.\n\nI figured there may have been people early.  Guess not.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: There shouldn't be anyone in the room yet, the meeting doesn't start until the next hour.</blockquote></mx-reply>I figured there may have been people early.  Guess not.","m.relates_to":{"m.in_reply_to":{"event_id":"$8nn36CqyVy652s7mGCVOafb9vYibRVlx6fCInhmfixM"}},"msgtype":"m.text"},"ts":1639590371295,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$v7CfTpnOsldTAYHUo1Rza7dAIrKLBR0OvpFVwe8wspo"},
{"content":{"body":"msaboff I'm in now, if you want to see if it actually put you in  a different room","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a> I'm in now, if you want to see if it actually put you in  a different room","msgtype":"m.text"},"ts":1639590712989,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$b3wRbdb0KvOldXmFCYRwkK_PPoXdjMUxUQuW0TZK-ss"},
{"content":{"body":"we are starting the meeting in 1 minutes","msgtype":"m.text"},"ts":1639591170445,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$6tEHMNZQa96ank2yhq0YHfAg6CG41Vk919f4VR14Jzc"},
{"content":{"body":"11 attendees so far","msgtype":"m.text"},"ts":1639591179482,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$XHfsW45YCORRrrfJAnEyCZHcJJqZ-cmJFwN6aM2QN4E"},
{"content":{"body":"31 attendees - we are starting with Record & Tuple","msgtype":"m.text"},"ts":1639591387541,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dVAJv4XUn0i2_F-9qCsKmyVbZDaabSb_kkc6cBk7i64"},
{"content":{"body":"maybe this invariant (and its importance to us) would be a good short topic for a TG3 meeting","msgtype":"m.text"},"ts":1639592403119,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TvluIowWhxEpeUT83w47U863doWhE522g6MI_6s4ON4"},
{"content":{"body":"copying over what i said from TDZ: not a fan of membranes being design constraints for JS in perpetuity","msgtype":"m.text"},"ts":1639592677849,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pT9JqirV5rnC5ZPBX2RAFdTMQUSWcmc90-XRAUc774E"},
{"content":{"body":"my recollection is most features contorted specifically to accommodate membranes have not been well received at large","msgtype":"m.text"},"ts":1639592717826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3536DhbWgYBelfRdlFtEbf0t0EXcET3svVbtiF_hX1o"},
{"content":{"body":"okay maybe it would be a long topic","msgtype":"m.text"},"ts":1639592735045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ovBXpY_E-TFwm-xyg4YS2DgRFSni0VS0_XAqUwdIy2M"},
{"content":{"body":"and i count Proxies under that umbrella","msgtype":"m.text"},"ts":1639592756537,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KBdM0YKIQHx9TmjEVZ8oqeDyfaO76Xnw8aij7WWSYtA"},
{"content":{"body":"The debate over this invariant will block how to work with mutable objects in records/tuples, but should it block records/tuples themselves?","msgtype":"m.text"},"ts":1639592789598,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6siRfbuhDDKUItcMyMn2QE0bMBKm3DXb9tCcasK2dvk"},
{"content":{"body":"up to the champions to remove support for this use case","msgtype":"m.text"},"ts":1639592804017,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8bIOp6DC-825CTzpjSeKQE23Ftw-ACX6QOPj3eYQXpU"},
{"content":{"body":"if they want to not support mutable objects to start, then that seems to sidestep this issue?","msgtype":"m.text"},"ts":1639592821913,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QOhPO_lutRQmRZ0vrYykxBsp2W_R1Hbs2gux3NZhD-4"},
{"content":{"body":"to be clear this is not about mutability only but the ability to reference things mutable or not ","msgtype":"m.text"},"ts":1639592949674,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$_sxLBseEkJkWYAKK_yd4oK0RJZH-0ey76bTbWvrcp0E"},
{"content":{"body":" * to be clear this is not about mutability only but the ability to reference things mutable or not ","m.new_content":{"body":"to be clear this is not about mutability only but the ability to reference things mutable or not ","msgtype":"m.text"},"m.relates_to":{"event_id":"$_sxLBseEkJkWYAKK_yd4oK0RJZH-0ey76bTbWvrcp0E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639592960812,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$vC_v2KQtwlmQNRSmBEVlDaY3mo76Nj24qF-wyAnkpuM"},
{"content":{"body":"Yes, sorry, that’s what I mean.","msgtype":"m.text"},"ts":1639592961116,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-5tW5EFx-OC18HJSD-MFSA2fWM0e4KZ4vzhAs56wvnY"},
{"content":{"body":"Is that needed for the minimal viable product of records/tuples? What’s the risk of punting?","msgtype":"m.text"},"ts":1639592983897,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VH7zisfsWjqYVMF1Hs8sedoo4cgOMDPIuWIwDsY3S7A"},
{"content":{"body":"main use cases for OPs are fn handlers and host objects I like to think","msgtype":"m.text"},"ts":1639592991608,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$J7bbFk5ZV3DE-HMIRi9Nw8SvrHS1HIzSIVSDDZP8MpM"},
{"content":{"body":"We've been told those use cases are very important and would virtually make this proposal uselss without a way to reference","msgtype":"m.text"},"ts":1639593039491,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$K0OZp7iS13jB9gRDZsIPkL8K5Zotrdw4hqsjMXvUv9s"},
{"content":{"body":"Records and tuples would still be useful for me, but I guess I’m used to working with immutable data all the time, heh.","msgtype":"m.text"},"ts":1639593069940,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$50htZokqr9FspJqVfkkzbod-QGKOo2zAaq0eTSB8HVs"},
{"content":{"body":"(originally the proposal did not let you ref, because we kinda had that vision as well!)","msgtype":"m.text"},"ts":1639593120160,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$XZ6mwGuUJg7856LES8v10kvuRo_q1b_PRhtmBkU76OQ"},
{"content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","msgtype":"m.text"},"ts":1639593151022,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593166070,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$WNXHjilyNKrL365rBsMuU6uZP5bSH0FMidJ1ih2iFAQ"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in a single root reference and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures; I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593174526,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZzWzpb2CZlOw2-2cfhOk52kTk47aj9F3jI3a9Cj0d2Y"},
{"content":{"body":"to your point, we had clojure devs tell us they need to be able to reference because clojure can do it","msgtype":"m.text"},"ts":1639593201030,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$buPt92GJdcafhFkz6jBOAfYTgfXjeWZFXxf0KCDwfCA"},
{"content":{"body":"* Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","m.new_content":{"body":"Things like Clojure tend to promote putting large globs of immutable data structures in single root references and isolating external mutability to separate structures. Although there are styles in which references are embedded within immutable structures, I’ve never had to do that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fN_L0viTEbGstsyjH7VzHjII9Ng4ROmNynSE8m9gBrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593203726,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9_WW8ikzYi2Fg2VwrXaiLAN1zxSky5aQtHO42EjXa2g"},
{"content":{"body":"Heh, I wonder how often they really need to embed references (atoms, etc. in Clojure) deeply in immutable structures rather than at the top level.","msgtype":"m.text"},"ts":1639593251373,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8SIJh5_HettNhNy0cOOXcnXcxQku9SwzpQ_tlFKpIWs"},
{"content":{"body":"Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","msgtype":"m.text"},"ts":1639593372128,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8TP4SZLbQt7JVTPWr5tiF-4qV8kLPd5LWwwn6eVJrRU"},
{"content":{"body":"* Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","m.new_content":{"body":"Anyways, having no external-object references yet would make this proposal useless to many people, but not all people (certainly not me). I wonder if this issue really should be considered a blocker for the MVP, given the controversy over fundamental cross-cutting invariants.","msgtype":"m.text"},"m.relates_to":{"event_id":"$8TP4SZLbQt7JVTPWr5tiF-4qV8kLPd5LWwwn6eVJrRU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593545959,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8MwKBKMY6TItv8cg52VHy1G9DpYwxlPsNPAiMff5pys"},
{"content":{"body":"to be completely clear: the invariants we write down are subject to consensus of the committee","msgtype":"m.text"},"ts":1639593756132,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e6hjC1YKO5CGmHhEqw4TGv2ypo5xhenTkEVh-7BbtZ0"},
{"content":{"body":"i was going to object that usage of \"invariant\"","msgtype":"m.text"},"ts":1639593840371,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rBezzrakB_3VSvg2g6cmKmAUrPqrJjFvMLSEta6msVU"},
{"content":{"body":"when writing them down, we should definitely differentiate for each invariant which:\n - are true at the moment\n - were intentionally held vs accidentally held\n - has committee consensus to be held moving forward","format":"org.matrix.custom.html","formatted_body":"<p>when writing them down, we should definitely differentiate for each invariant which:</p>\n<ul>\n<li>are true at the moment</li>\n<li>were intentionally held vs accidentally held</li>\n<li>has committee consensus to be held moving forward</li>\n</ul>\n","msgtype":"m.text"},"ts":1639593846185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CD6U3HTjl2UL-treNSyptUvGN3cHnZseZ1B84RNrgHI"},
{"content":{"body":"my contention is that it sounds like the \"invariants\" that some of these membrane libraries depend on are just \"properties\"","msgtype":"m.text"},"ts":1639593861977,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d_QahFn_eGzhNVMbbb6ES0qsUp8YRfNV4AIaoEhR5JQ"},
{"content":{"body":"yeah, what ljharb said","format":"org.matrix.custom.html","formatted_body":"yeah, what <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> said","msgtype":"m.text"},"ts":1639593865504,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HecpOki5_5QbRBI-MW7GuNrpMQAyBuPgcb__wzvnmTo"},
{"content":{"body":"we have many invariants that are true now, were accidentally held, and have no consensus to be held moving forward.","msgtype":"m.text"},"ts":1639593884371,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sR_p1D6hV25LSe9dhnwWVkO9UbdTz-Gv03uPsNlWv7s"},
{"content":{"body":"tbf this is an invariant which mark has been carefully ensuring continues to hold","msgtype":"m.text"},"ts":1639593901849,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3N_oUwk0e6wo4O-7WXaMSrOigBaAByuwwpsewC4ZGp8"},
{"content":{"body":" * tbf this is a property which mark has been carefully ensuring continues to hold","m.new_content":{"body":"tbf this is a property which mark has been carefully ensuring continues to hold","msgtype":"m.text"},"m.relates_to":{"event_id":"$3N_oUwk0e6wo4O-7WXaMSrOigBaAByuwwpsewC4ZGp8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639593908208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6VmUc7TSpP8ziud6tpwD5peMb8g1WSayCWYrwg1-rKQ"},
{"content":{"body":"it's important that we get explicit consensus, or note explicit lack of, for that third point for all the invariants we write down","msgtype":"m.text"},"ts":1639593908237,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TN1dVOmXgEI6v-9DASkgMQUI3RUtwP13BQVt8uPK6yU"},
{"content":{"body":"which is like being an invariant, kind of","msgtype":"m.text"},"ts":1639593912756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SBRXqbts1FDm1aARIJ8p30iYBFSnru2m9bigbSspIz4"},
{"content":{"body":"right - that makes it intentional, but doesn't necessarily have consensus","msgtype":"m.text"},"ts":1639593923219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gVqnJ2sB1akfRRptgR_wHSGI0gyuUuqjTf0zUR4LwyE"},
{"content":{"body":"bakkot: i think my disagreement is that the _actual_ property is only in mark's head","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i think my disagreement is that the <em>actual</em> property is only in mark's head","msgtype":"m.text"},"ts":1639593928895,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3XJLr3DTu2BfarwXKEhy2ueXQJ-5eYAfSfwI8eFWh6I"},
{"content":{"body":"and how he has been ensuring it to hold is to give targeted pushback","msgtype":"m.text"},"ts":1639593943281,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UsirpzIKREiSUsfxQ2EvyFJqEdg3VkPTWwFt4NJVZFQ"},
{"content":{"body":"again tbf he has said he'd like to write it down","msgtype":"m.text"},"ts":1639593955333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hofSr0NTfCZGjUwR3AaQxVu36JUN5VeTaQGm-qUGj3A"},
{"content":{"body":"so it has not been a part of the larger design lexicon except very vaguely, in terms of \"is mark going to object\"","msgtype":"m.text"},"ts":1639593961391,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cJb0ZvXfJMacbDQdaj-QZ1xfVYuoa_peobZv6l-F5DI"},
{"content":{"body":"fair","msgtype":"m.text"},"ts":1639593962505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jKnr8q5Xi0JesrJGlPXG1E5CYd3RY93Kr_oc1koWPAM"},
{"content":{"body":"Did someone rearrange the queue?","msgtype":"m.text"},"ts":1639593963166,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$wCSvJ06smeU4bAWtmluz2FjeIG3Fuz6GMh019Mh7EK0"},
{"content":{"body":"i think so; my topic is now a reply","msgtype":"m.text"},"ts":1639593969489,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-nqsBy0FlixlbPfUdscHKq26as771Nq_mzyBOF3hZ7s"},
{"content":{"body":"Brian rearranged to group topics, waldemar","msgtype":"m.text"},"ts":1639593978836,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RXU4HfRKyl1H99FY1ikWhoszLVBGQcrU0p33_6guT14"},
{"content":{"body":"ObjectPlaceholder is just not a good primitive","msgtype":"m.text"},"ts":1639594252672,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LYjIb85zwy3TKGJ2WjASlCNnp5lIslP1ERGXFRzLHJA"},
{"content":{"body":"bterlson: my two topics are on this subject as well, should i wait or directly respond?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: my two topics are on this subject as well, should i wait or directly respond?","msgtype":"m.text"},"ts":1639594256694,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JY9pptCE1jxj28rnZEwO7FRfGntzm-MRByB4a-KtMh0"},
{"content":{"body":"the fact it ticks all the right boxes for a particular scenario is not convincing if i don't find the scenario convincing","msgtype":"m.text"},"ts":1639594274268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PsHTqiHG8AQT07xIGve4ePO5pMFdV4KQLT-ITsuh6Qc"},
{"content":{"body":"can we just make `object(tuple) === tuple`, then declare that the invariant is specifically in terms of \"things for which `object(x) !== x`\"?","format":"org.matrix.custom.html","formatted_body":"can we just make <code>object(tuple) === tuple</code>, then declare that the invariant is specifically in terms of &quot;things for which <code>object(x) !== x</code>&quot;?","msgtype":"m.text"},"ts":1639594338972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ktHU4uUUIZjPoPSseR7scs4fKMVK4E6iX5tecFdI_28"},
{"content":{"body":"I guess I should ask mark that question","msgtype":"m.text"},"ts":1639594343228,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KP-4p9H9gfDaIpOwzJtDVMzK0tlM8aoY8y3ItRVJvM4"},
{"content":{"body":"`Object(x) === x` is already an invariant for any object, and it also must be false or any primitive","format":"org.matrix.custom.html","formatted_body":"<code>Object(x) === x</code> is already an invariant for any object, and it also must be false or any primitive","msgtype":"m.text"},"ts":1639594372104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dCSsKfIf6VMaf15OUcdkarxSgTiYS4GvNczs2oHpu6s"},
{"content":{"body":"right, so this amounts to a proposal that records/tuples be somewhere between objects and primitives, not either thing in particular","msgtype":"m.text"},"ts":1639594394879,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cywSl8KRmXlpcw9Zy5jYHF6KoJCo8xwz2Fqykr2z-Eg"},
{"content":{"body":"cf waldemar's \"there is a continuum between primitives and objects\"","msgtype":"m.text"},"ts":1639594425555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fvXEaMol7a_kV7AO64NASROF5Lyld1cOQO1cG5tKFiQ"},
{"content":{"body":"which I trust we will get to someday","msgtype":"m.text"},"ts":1639594439443,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4bnwVyMjR1Dk02dg0Y_1Ue2KW7qJ8jGc6mBAX41cgpY"},
{"content":{"body":"at least I hope we do","msgtype":"m.text"},"ts":1639594454038,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n0Hr8dwAyOGH0dxVKWkEpSbqUWAktS4aDWhLjX1OwMo"},
{"content":{"body":"i think i agree","msgtype":"m.text"},"ts":1639594459491,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-B1LGWuIifZ3qNmRF6bx2kqZCl1OlMW3VdERDaIhRvU"},
{"content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","msgtype":"m.text"},"ts":1639594515072,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E"},
{"content":{"body":" * i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable.","m.new_content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594521213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gWq0wiQpsp3JwtX884jA17m3ZmPhQOMPqRLcMZVk7rI"},
{"content":{"body":"ok, then this amounts to a proposal that \"it must be false for any primitive\" stop being true for these primitives","msgtype":"m.text"},"ts":1639594538979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb_c4kCj77_eK5um7yXcCrB7akLXHrdUveb0YV6iH1k"},
{"content":{"body":" * i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","m.new_content":{"body":"i would object to any proposal that adds a third category to \"objects, primitives\" - nothing should be in between if avoidable. (obv i have to be flexible for R&T, since they always blur the lines somewhat)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ntsyCgqI5XOK49o8vcRDHBqdpxCRw4in_o8AuEo061E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594549757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XOvf7Tp4ffXh85QRVNkA_5_fnfuv1O-n1ln38kFbg18"},
{"content":{"body":"that is a property which current holds, not an invariant which is written in stone","msgtype":"m.text"},"ts":1639594558457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$joRA3cO0nZ6f3a-x4XsNHqQycWU1a-fb1luvcwNlC2E"},
{"content":{"body":"that would break far more code than any membrane breakage.","msgtype":"m.text"},"ts":1639594562527,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jXsM6n7nykY8aRnQH8l_0XAyehxLxKj_4pF3yI65uFo"},
{"content":{"body":"would it though","msgtype":"m.text"},"ts":1639594567330,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M2kVCvVE-yFVBEa2aGA54kNJvnbtzNq_QD8PKQGXrB8"},
{"content":{"body":"and what level of 'break' are we talking here","msgtype":"m.text"},"ts":1639594584819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rg7wFj-wTt9stnjMKLaXz_x-qCLQ5khGaoNTLDBebNc"},
{"content":{"body":"i mean i can pull out my list of npm packages and download counts and audit it if you want, but i'm pretty confident","msgtype":"m.text"},"ts":1639594586228,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zNFm1mTBxJjDBz1F49dBHu1KhgmOIHBbwmAlbppF-CY"},
{"content":{"body":"a lot of code breaks when we add a new `typeof` value, in the sense of \"no longer interoperates with new code\"","format":"org.matrix.custom.html","formatted_body":"a lot of code breaks when we add a new <code>typeof</code> value, in the sense of &quot;no longer interoperates with new code&quot;","msgtype":"m.text"},"ts":1639594608546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cid0jtLCmPl6Ay-wvg9Ak3_s_4Szu9mSKjqxeP93_j8"},
{"content":{"body":"\"what level\" i can't really say without actually looking at the code, to be fair","msgtype":"m.text"},"ts":1639594610114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mP5NC6OLemT568ahjOkVjUyCrHdmQqyBj4fTeo4nKik"},
{"content":{"body":"but that is fine","msgtype":"m.text"},"ts":1639594612213,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fgdqdf7x2nqNM0kGOgKeImxEbJG2kqaeX2yNzD07ocY"},
{"content":{"body":"don't use new code without updating","msgtype":"m.text"},"ts":1639594620180,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ulXDMCMblf-CznP8ewgvoG-hD1d9hkb-8RQthqRV9wg"},
{"content":{"body":"we need clarity on evolution","msgtype":"m.text"},"ts":1639594628779,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5IVmT-TA2EaC6j35zyAkLIt1-a3uyf53Ob4ZXIxg6q0"},
{"content":{"body":"\"don't use new code without updating\" is just not practical. browsers update things all the time","msgtype":"m.text"},"ts":1639594642213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rk0IiJHToxPZcVqS_nWKqYT1mNNIrXQtFk3pK47BnwE"},
{"content":{"body":"i would really like to get to my comments, they were related to this topic but were not moved up. I would like a timebox extension","msgtype":"m.text"},"ts":1639594649922,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$vxdWnzgHNv5RxxWqLI1zOLDlLZg7Xryk_sKaUcyWSm8"},
{"content":{"body":"browsers do not start injecting new javascript onto the page","msgtype":"m.text"},"ts":1639594655984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cpKJrt-eABu4PrkiDaABCBrKL0VjPwAHf5bF0T9Bp4s"},
{"content":{"body":"because it increasingly sounds like there are some folks who have interpreted \"don't break the web\" to not evolve the language?","msgtype":"m.text"},"ts":1639594658668,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HkMHi26UjspZrnxdNUySL6TIZgbsXILxHCFHFjiN6YY"},
{"content":{"body":"since basically nobody's code is entirely first party, there's never just one author involved","msgtype":"m.text"},"ts":1639594667710,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VNXGp44dMFtPKBdgAqk4XRiQtnKkWKSdPTe1E40iyMQ"},
{"content":{"body":"which does mean that new app code will exist with old libraries often","msgtype":"m.text"},"ts":1639594690457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ojig1PH5CZYgi758qhwEyekkS2UQB523PTuJgsscAkg"},
{"content":{"body":" * which does mean that new app code will exist with old libraries often","m.new_content":{"body":"which does mean that new app code will exist with old libraries often","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ojig1PH5CZYgi758qhwEyekkS2UQB523PTuJgsscAkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594695624,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hvv8CTlMdGmsBPWLKdm65amDuF35AA93jUNShTR_5gY"},
{"content":{"body":"yeah, but that app has not already shipped","msgtype":"m.text"},"ts":1639594701649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6vGxKKCbN7RHOXn1lWJRpsiQJPBj83-2_P3Eyt7S9J4"},
{"content":{"body":"so it isn't an existing thing we can break","msgtype":"m.text"},"ts":1639594705412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tY0L4lcG3ruoFD5x13OqI5ZqRxiRrCK869Jyuk32jE4"},
{"content":{"body":"if the user tries to write the new feature, they'll discover it doesn't work with the old library","msgtype":"m.text"},"ts":1639594718965,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_ZyqJHsRVDV4kGfcurW_Tawh6nVtzW-BRuzFRMnbKSg"},
{"content":{"body":"and that's fine","msgtype":"m.text"},"ts":1639594720104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ld6X5aZRtvght4w3pc2sqbKHuoqXLEvdC8HonMxLN4o"},
{"content":{"body":"the existing page will work","msgtype":"m.text"},"ts":1639594724431,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3DduEIVomoDR2QGAaCZrDMSm8124Thb30JJ2wAjBOKk"},
{"content":{"body":"i see what you're saying and i completely agree there's many scenarios where the breakage isn't a problem. i think the object/primitive thing is not one of those scenarios.","msgtype":"m.text"},"ts":1639594738541,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JCBD_lbHiFDDaggg4G1yHbctOS6q3C3Oz3SvFTlGnMo"},
{"content":{"body":"i am open to being convinced, but nothing said so far has convinced me","msgtype":"m.text"},"ts":1639594757624,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NebujGK0WclYNl7kc_Xvj8q6PmxZZfTzvXSb1knuP1Y"},
{"content":{"body":"things that have been said have convinced me less, if anyhing!","msgtype":"m.text"},"ts":1639594802086,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K1khNZgjzyq8kI6sGVotnk4UC1kIJYDG2SHcIqUfbWU"},
{"content":{"body":"bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","msgtype":"m.text"},"ts":1639594840807,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kpbm9NHeloiMxBH48Fajq8LMXe1eK4VXADBhLiSDot4"},
{"content":{"body":" * bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","m.new_content":{"body":"bakkot: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but `Object(tuple) === tuple` and the same for Record?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: i'll check some libraries. so to be clear, you're suggesting that tuple be a primitive but <code>Object(tuple) === tuple</code> and the same for Record?","msgtype":"m.text"},"m.relates_to":{"event_id":"$kpbm9NHeloiMxBH48Fajq8LMXe1eK4VXADBhLiSDot4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639594855558,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NsIkIahoo2XLYjEEgVouz8ndAVz7cK86j-7whtOgSmc"},
{"content":{"body":"Is the slide on the screen coming through jitsi as unreadable low-res for others as well?","msgtype":"m.text"},"ts":1639594941734,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$4sHOElKepIkaVdneBDzlEMJLKwjnczXV4yLQQAqF0eU"},
{"content":{"body":"yes low res","msgtype":"m.text"},"ts":1639594950110,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$yZv9xE4_AvF12HKPSXVsxxgraytgFJIp-dkAGN5fohs"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1639594955865,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Nu0h-DOluAG7uOynBLDQ8SH2_LPt-til17I-8rOmRKE"},
{"content":{"body":"the slides link is in the doc and schedule i believe","msgtype":"m.text"},"ts":1639594958272,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$pdyr5MncCdnuWSF4fvyIaaPYwtN9p6p3qfQkTZz42g8"},
{"content":{"body":"I don't know what's special about this one, because in other presentations jitsi was showing full resolution","msgtype":"m.text"},"ts":1639594998984,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Kjm3vc0xJUl4tMknKGNHPSm4yj6m6d581CQTel5hUe4"},
{"content":{"body":"I think it dropped the quality on Nicolo's side?","msgtype":"m.text"},"ts":1639595016064,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$cG7gNVuRzMyFIDwURslNxM9zs6PXfMTpmFbK2KYc1RM"},
{"content":{"body":"maybe weak connection?","msgtype":"m.text"},"ts":1639595029068,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$mZHr33iRsctZg1AgCWMfSHEAf-Wc9uxgVz7ZOXCXxfk"},
{"content":{"body":"My feeling is that we should use symbols for the objectPlaceholder -- i don't see what objectplaceholder as a new primitive would do that we cannot do with symbol","msgtype":"m.text"},"ts":1639595146589,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$t14nXZwIVeicIuRo3RrOaLpW6im2aDlHrdK-0RAq9Wg"},
{"content":{"body":"I would also say that we can introduce a light syntax sugar on records to make the pattern easy for developers -- this is what i heard as the main objection to the weakmap solution","msgtype":"m.text"},"ts":1639595187386,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$se62IQXC6EraoSPi9-WLckm1-qUAuDN2aJUPrKrTdO4"},
{"content":{"body":"I tend to agree with yulia here","msgtype":"m.text"},"ts":1639595215203,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$S2-JfnMo43SXwOGwaUIAQDvv9XjnLRpALBtoyEUNRpk"},
{"content":{"body":"i think ObjectPlaceholders are needless complexity and might bite us later","msgtype":"m.text"},"ts":1639595236849,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8nIrgIG_WoDKYXQvhTYrDdX4Hjv7uBIS7Vm9kAJU-zQ"},
{"content":{"body":"for example `x = #{... y: Symbol.tie(\"symName\", objRef) }`","format":"org.matrix.custom.html","formatted_body":"for example <code>x = #{... y: Symbol.tie(&quot;symName&quot;, objRef) }</code>","msgtype":"m.text"},"ts":1639595243099,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE"},
{"content":{"body":"Is the conclusion for R&T that no conclusion was made?","msgtype":"m.text"},"ts":1639595261361,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0-YE29wStqUYubQIYhDJdsYCYtklnW21etRUQyQbngc"},
{"content":{"body":"this also alleviates the issue of the memory leak, as we can specify Symbol.tie as we like","msgtype":"m.text"},"ts":1639595281786,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$DQQGZQf0IMIcyAaMJNVt1obhDT61KYoAjgr6Nq2w-XM"},
{"content":{"body":"cc nicolo-ribaudo Robin Ricard  ^","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>  ^","msgtype":"m.text"},"ts":1639595361133,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$kEetwyPEekLw6TA9phrJ_B3CISY5q6AwIFI0ooTnqrM"},
{"content":{"body":"`Symbol.tie` would be interesting but hits the same realm/membrane invariant","format":"org.matrix.custom.html","formatted_body":"<code>Symbol.tie</code> would be interesting but hits the same realm/membrane invariant","msgtype":"m.text"},"ts":1639595364361,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$peuT46QV45wuu1aXx2JZSKE7JhPgYlWBHmKcVmVyrDQ"},
{"content":{"body":"it would respond the same way as the weakmap","msgtype":"m.text"},"ts":1639595385160,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lwX45oVUC2fhtEg7zTklo5GSE1soGYLgs0GuqeA3Jm8"},
{"content":{"body":"but +1 on all of this, I can sign on to symbols in WM on the argument that it is much simpler","msgtype":"m.text"},"ts":1639595386221,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$lcSwYwpq4nW-XzuA-z15B5I2c4NPuiqz-pVti53XgdA"},
{"content":{"body":"symbol.tie is just sugar for that pattern","msgtype":"m.text"},"ts":1639595392146,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6XBI-C3udJBy3wVK5kYWmNYve7kD0uIsMXsvW27fJCM"},
{"content":{"body":"well, where is the weakmap?","msgtype":"m.text"},"ts":1639595400697,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Wgw7uU3qEZtWnqgfy3_34DWlvZ2U4cy_kJWgbDuAv1k"},
{"content":{"body":"bakkot: so here's an example, admittedly in the es5-shim for bind (first lib i checked), where `new` of a bound function would fail in the presence of a shimmed bind function and a bound constructor that returns an R/T: https://github.com/es-shims/es5-shim/blob/master/es5-shim.js#L254","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so here's an example, admittedly in the es5-shim for bind (first lib i checked), where <code>new</code> of a bound function would fail in the presence of a shimmed bind function and a bound constructor that returns an R/T: https://github.com/es-shims/es5-shim/blob/master/es5-shim.js#L254","msgtype":"m.text"},"ts":1639595425485,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krdi4Xhrtc6W1kmSaa0VNdzFddhnBqnxnMxGf1K8Bik"},
{"content":{"body":"rickbutton: this is something we decide -- i would say it is in the realm that creates it (if i understood the slides -- this is to be in line with the goals of the champions, apologies if i got it wrong)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: this is something we decide -- i would say it is in the realm that creates it (if i understood the slides -- this is to be in line with the goals of the champions, apologies if i got it wrong)","msgtype":"m.text"},"ts":1639595704353,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mpJXJdwh9zfLQlCfVzo1Z8kId0cD_c56IvoZB9sCpoU"},
{"content":{"body":"obviously this needs to be fully fleshed out -- for example the retreival, but this is fundamentally sugar","msgtype":"m.text"},"ts":1639595763818,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-xRc16OiZinVZbNAF-YAwYvdhyhE1rUMNi1mfzUs71s"},
{"content":{"body":"no that makes sense, but my point is that it runs into the exact problem that some folks have with ObjectPlaceholders across realms, the symbol lookup on the other side of a realm needs to have that weakmap, so either it is shared across all realms or per-realm","msgtype":"m.text"},"ts":1639595788632,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$O4tQmXIIEaXQQsEiVyZWSGUCDlNBlbONJsG6RJY6JfY"},
{"content":{"body":"ljharb: right, so that library will not interoperate with new code written with this feature, but no existing pages will break","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: right, so that library will not interoperate with new code written with this feature, but no existing pages will break","msgtype":"m.text"},"ts":1639595805181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d2SQkELCeqJTDlSK9MOE_xEWnJK8n0x8NUtUUorTMKs"},
{"content":{"body":"seems fine","msgtype":"m.text"},"ts":1639595807713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GMAnodxs5s4wT3bIP-0l3Sd411WcEtHOXv2JQG4X2TA"},
{"content":{"body":"ultimately the problem is \"who owns the weakmap\", some don't want the realm itself to own a weakmap per realm","msgtype":"m.text"},"ts":1639595823471,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Y5rj11BOPiK02lk6QF85HqWRONOSqY0Rq-0xpXEqJng"},
{"content":{"body":"rickbutton: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&T should be beholden to","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&amp;T should be beholden to","msgtype":"m.text"},"ts":1639595846910,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg"},
{"content":{"body":"> <@yulia:mozilla.org> rickbutton: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&T should be beholden to\n\nI certainly agree.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: that can be addressed, but the requirements need to be clearer about what the SES group wants. this isn't something that R&amp;T should be beholden to</blockquote></mx-reply>I certainly agree.","m.relates_to":{"m.in_reply_to":{"event_id":"$OZayTamU73eOp8GT1-NdPsEwPP6jkzKy0AHpOdUhJRg"}},"msgtype":"m.text"},"ts":1639595859442,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$KlCMtrZCYhW6sU3qod15brfCnMIPDv04016qsANX5pU"},
{"content":{"body":"bakkot: existing pages would break when they try to use the new types in that manner tho, which is not fine","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: existing pages would break when they try to use the new types in that manner tho, which is not fine","msgtype":"m.text"},"ts":1639596004554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D_vqX00WSDOZwMCYzfOIjYjiEduXepR_iCPMtCcZIxM"},
{"content":{"body":"\"don't break the web\" doesn't just mean \"don't break pages that are never touched\"","msgtype":"m.text"},"ts":1639596045469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AP5Kgt_xW14l-5kQu63GpbUY7WmPznbjLymd4zj6F1s"},
{"content":{"body":"how is that not fine","msgtype":"m.text"},"ts":1639596046521,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O8HmzKf9EFkfKeKy94_PblZaFYa9jmMZIZtsR6jl9ww"},
{"content":{"body":"yes it does","msgtype":"m.text"},"ts":1639596064174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MEMXee-K5DKVI1jm9WO8YbnMD2FsvkhkwU0Pj2SKQ1o"},
{"content":{"body":"that's what that means","msgtype":"m.text"},"ts":1639596066037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dL6W9dOjkM29KBDC9-c5Xjn3eeuzCvmqqtWmuW82_5g"},
{"content":{"body":"\"if your page currently works, it keeps working\", not \"if you start writing new code, it will keep working\"","msgtype":"m.text"},"ts":1639596084972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$esRsmPH36qC4ATB0_Z0msbk-TxeDEHRxpJ00WbOJTys"},
{"content":{"body":"we cannot make that promise","msgtype":"m.text"},"ts":1639596087116,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iU7gv6ibyp5zuwt4OpxHbQed6vMJ116Tu2_0mFiOPcM"},
{"content":{"body":"+5","msgtype":"m.text"},"ts":1639596095172,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dfjgTGKJPyFu5L3VfEb17YurXlsF47zze1ZY5Wqo7yk"},
{"content":{"body":"i do see your argument and largely agree","msgtype":"m.text"},"ts":1639596100606,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bVkGUDNxMRL5ObMNiFodcO6iJpJbNMxy-qYE7V-ryLw"},
{"content":{"body":"SML/NJ is there if you want an ossified language","msgtype":"m.text"},"ts":1639596109764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5Up3M-VjlD-Gez_qCfw7O3vZR0CdSRIlOdX51-Clmoo"},
{"content":{"body":"but i think that pre-existing invariants should not be casually broken","msgtype":"m.text"},"ts":1639596113594,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QJTSciSDaYPfzuyBf62DIxiPceiMjlfQpdN5GfsEb2E"},
{"content":{"body":"and `Object(x) === x` meaning \"is an object\" is an ancient one that tons of code relies on","format":"org.matrix.custom.html","formatted_body":"and <code>Object(x) === x</code> meaning &quot;is an object&quot; is an ancient one that tons of code relies on","msgtype":"m.text"},"ts":1639596130774,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C7Sln2TvWWaWaxP1By9irQTQBm0NOTIZqfP_HMMPirQ"},
{"content":{"body":"especially since ES6, when everything using a list of typeof values for that concept switched to using `Object(x) === x` to avoid future additions breaking them like symbol did (and bigint)","format":"org.matrix.custom.html","formatted_body":"especially since ES6, when everything using a list of typeof values for that concept switched to using <code>Object(x) === x</code> to avoid future additions breaking them like symbol did (and bigint)","msgtype":"m.text"},"ts":1639596157311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$82-rxLyNWyRV1kRYXEVLpudDjYvpXhcX6LCtt4Vkra4"},
{"content":{"body":"I'm not being casual about it","msgtype":"m.text"},"ts":1639596190247,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FLQ-lvlwPArVCCQI6LLiKavQXYyZVTJNHPGyjZELkzQ"},
{"content":{"body":"I just think that tuples are _genuinely_ something between primitives and objects","format":"org.matrix.custom.html","formatted_body":"I just think that tuples are <em>genuinely</em> something between primitives and objects","msgtype":"m.text"},"ts":1639596201122,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OO9O-_aDUHl5qpc8E7Sb4rmP618aPLbfT7PWyXmhGfQ"},
{"content":{"body":"and it's ok for them to behave like primitives in some ways and objects in others","msgtype":"m.text"},"ts":1639596209044,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ht7QRGG9SqDJdG5vbwpdm28SAOkSGIzx0OVPTuvzM04"},
{"content":{"body":"in a general sense i don't agree that that is ok","msgtype":"m.text"},"ts":1639596240768,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_w7XctvCL6V9El9xL2VbLvFqP-PfEW7Ynktcai-UtkQ"},
{"content":{"body":"well, they do: like objects, they contain other values; like primitives, they are forgeable","msgtype":"m.text"},"ts":1639596263441,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A"},
{"content":{"body":"i'm sure there's some specific ways that i'll agree it's fine, but in a general sense, objects need to behave like objects and primitives like primitives, and i don't want that line blurred","msgtype":"m.text"},"ts":1639596266660,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W9Dl4dPevQjIHjOYOsCbueAwt8iBOVuO7vJO2GNY0Gk"},
{"content":{"body":"forgeability isn't a primitive property; non-global symbols aren't.","msgtype":"m.text"},"ts":1639596286186,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dhYMFen0jSQF8vGp_Ta-Z5CtuzafdkYfowvLITMsAdk"},
{"content":{"body":"\"like primitives they can't be used in a map\", then","msgtype":"m.text"},"ts":1639596308376,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jMF1g9_SuEezHsDmBwO0IBqCIv9TLSavBv4UFA_9n94"},
{"content":{"body":"or \"like primitives they compare by value\"","msgtype":"m.text"},"ts":1639596315478,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJ4Q0_3SKFbJyPpsepsxwsRiYAkZyzuAlwyLvyAyIjs"},
{"content":{"body":"or whatever","msgtype":"m.text"},"ts":1639596317327,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BO8OANuTcdzwb2VYNE3uE-dPv4LcdDHbUrH8uzQnMck"},
{"content":{"body":"weakmap, sure","msgtype":"m.text"},"ts":1639596321425,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oxbtcecMpQvDYB6ZkuP9Z4wI-QfrB1m3SzA-qhpnXLo"},
{"content":{"body":"and how do i write my code to branch on whether it'll throw or not? by using Object(x) === x","msgtype":"m.text"},"ts":1639596337268,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kswZpJa1x8dgxBoJh5G4Fv5Nu-DnbIUkz9tswB9vVPg"},
{"content":{"body":"that won't work if we let you put symbols in weakmaps","msgtype":"m.text"},"ts":1639596359705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI"},
{"content":{"body":"and that's _fine_","format":"org.matrix.custom.html","formatted_body":"and that's <em>fine</em>","msgtype":"m.text"},"ts":1639596362712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BzDjLiT_YpJzBnCbAeA_N4154TOn2g7ID8YzclaVFjg"},
{"content":{"body":"> <@bakkot:matrix.org> well, they do: like objects, they contain other values; like primitives, they are forgeable\n\nInsofar that strings can be considered to “contain” other strings, I don’t think that “containing” values is a unique feature of non-primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>well, they do: like objects, they contain other values; like primitives, they are forgeable</blockquote></mx-reply>Insofar that strings can be considered to “contain” other strings, I don’t think that “containing” values is a unique feature of non-primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$q7wIMlp2d_b5VCap8bc3JaXGMzmtVz-Qj95jXrqvA_A"}},"msgtype":"m.text"},"ts":1639596362751,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$CM_9JhPnAetfcphLVqyfIgkocLtmWriOXKkYqXbcaD4"},
{"content":{"body":"give me an actual \"is an object\" or \"is a primitive\" predicate, and time to migrate everything to use it, and i think there'll be a much stronger case to break those invariants","msgtype":"m.text"},"ts":1639596365482,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YC6DmBCbZVTx9hI8nyev4ELF5NJPj8TDy3OMBq8k7h8"},
{"content":{"body":"jschoi I do not regard strings as containing other strings","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> I do not regard strings as containing other strings","msgtype":"m.text"},"ts":1639596377091,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s"},
{"content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI"}}},"ts":1639596379120,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU"},
{"content":{"body":"> <@bakkot:matrix.org> that won't work if we let you put symbols in weakmaps\n\n * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h8OKy8zdCK6ei2Xqb_EytiC_3uZlPj9PoWlX2i3slaI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that won't work if we let you put symbols in weakmaps</blockquote></mx-reply> * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","m.new_content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the Map","msgtype":"m.text"},"m.relates_to":{"event_id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596390336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0HEwvAcdNFe0D1iuS1Z31qY2sY1omxTe_Y_0-wSvoFw"},
{"content":{"body":" * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":" * sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","m.new_content":{"body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","format":"org.matrix.custom.html","formatted_body":"sure it'll work - it'll avoid the throwing. it just won't use the ideal path, and the symbol will go in the fallback Map","msgtype":"m.text"},"m.relates_to":{"event_id":"$7TkD2-hX_0XyFAPAd-iyeYpXFHk8WvH7e_cn6Y1mXpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596393976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hoqG3s84oqLgg9Zk8KGRxrNYnm1iUsakMwX1Nh0ai-E"},
{"content":{"body":"> <@bakkot:matrix.org> jschoi I do not regard strings as containing other strings\n\nI mean like my own mental model is that sometimes you can compose primitives into primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a> I do not regard strings as containing other strings</blockquote></mx-reply>I mean like my own mental model is that sometimes you can compose primitives into primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$kOTMydX8EI3_YS4ecsVcTKQNN13rdPvyRzohbtKyh9s"}},"msgtype":"m.text"},"ts":1639596404814,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_NYOCkhDGptnPFU-YgDLstHeU1V8TLwVydkfW2hjXtk"},
{"content":{"body":"fallback Map?","msgtype":"m.text"},"ts":1639596410127,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$LvH2uUc0K3sPOYL5Iy3ohV-Kq521o6Mnh-y6Qi039Fs"},
{"content":{"body":"rickbutton: in my code where i want to key on any value, and i use a weakmap for objects and a Map for everything else, so i can provide a maximally weak unified collection interface","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: in my code where i want to key on any value, and i use a weakmap for objects and a Map for everything else, so i can provide a maximally weak unified collection interface","msgtype":"m.text"},"ts":1639596437788,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ia3GYju8brEfeNzWj99yo7kyDC8wr0KQgYt8daO3ww8"},
{"content":{"body":"yoru code is now going down the wrong branch. just because it happens to still work doesn't mean `Object(x) === x` is actually the check you wanted.","format":"org.matrix.custom.html","formatted_body":"yoru code is now going down the wrong branch. just because it happens to still work doesn't mean <code>Object(x) === x</code> is actually the check you wanted.","msgtype":"m.text"},"ts":1639596439773,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zFRLJNo58Bh-T0-pcWbwoi7NW8IkPVqdVbiCgwb32Rc"},
{"content":{"body":"it's not wrong - my code still functions properly. it's just putting the symbol in a Map instead of a WeakMap","msgtype":"m.text"},"ts":1639596454016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l9BpfFQBGRJWtaBvCLGzTfui6MJesa7VGGIpPuOfzXM"},
{"content":{"body":"and i agree, that in that case the Object comparison isn't the check i want - but that check doesn't exist yet","msgtype":"m.text"},"ts":1639596467752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I8n-qaRTNmdaudZymjn2g8e_K4GijNSVSDmLwy9wYUo"},
{"content":{"body":"`let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":"<code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","msgtype":"m.text"},"ts":1639596498365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HkCOx3izlvCOo8z7_Zc1UBPAWvcgyQsgkl_NwKt52E0"},
{"content":{"body":"when a semantic lacks a first-class predicate, code will and does abuse an existing property to provide that semantic.","msgtype":"m.text"},"ts":1639596499840,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0dQp2CFc70XjDrFBPVwJ6xiuk9TeJ5xDdkql_f2VedM"},
{"content":{"body":"it's not wrong right now. it just may become wrong in the future.","msgtype":"m.text"},"ts":1639596511580,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T4Ly-JxyiVy6yxsIWdEYtmERgDsnC702OEBd4jLHkT8"},
{"content":{"body":"it will become wrong if we put symbols in weakmaps","msgtype":"m.text"},"ts":1639596520370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xLzaKChBXSd7Gd2DeV79GTbLaUGCH5-Gco8SCFaRk2U"},
{"content":{"body":"and that is ok","msgtype":"m.text"},"ts":1639596522463,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$woga8HL6IOAI6EmqCmKlk7miXSB1nmLIfJ39DKG9AHY"},
{"content":{"body":" * `let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":" * <code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","m.new_content":{"body":"`let canBePlacedInWeakMap = x => object(x) === x` is certainly wrong.","format":"org.matrix.custom.html","formatted_body":"<code>let canBePlacedInWeakMap = x =&gt; object(x) === x</code> is certainly wrong.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HkCOx3izlvCOo8z7_Zc1UBPAWvcgyQsgkl_NwKt52E0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639596533648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Iu49YEBU9LBRgs4Usv28nqj2lYgWLVfc_SlXil6UYns"},
{"content":{"body":"whether it's OK or not depends heavily on the context that predicate is used in","msgtype":"m.text"},"ts":1639596563767,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bee7uChfCNHzlDWfWqon2mT_Fd4PX3eBibpd1JAHxYs"},
{"content":{"body":"as a builtin predicate tho, then it would be updated in sync with the engine, and then it's always OK","msgtype":"m.text"},"ts":1639596577226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gjfbRV33msOn-Xul3WdC7XoPBlhvupSAf40e5EWqc3k"},
{"content":{"body":"it's just unconditionally OK. there is no promise that old code continues to behave identically when provided with new values.","msgtype":"m.text"},"ts":1639596608078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j9naNGyzgcZ9us7020xXgdVCKj5P7o7h_c3W1Et1eko"},
{"content":{"body":"it is a very broad spectrum","msgtype":"m.text"},"ts":1639596646134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kd044SJOnWnijONkaSyooN1wwtkie7nFohjfUpDa-3o"},
{"content":{"body":"will your old code not do the exact same thing in this case? it will put the symbol into a map, the old behavior","msgtype":"m.text"},"ts":1639596649902,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$T9iVgyOW4fG1j6XkI7H0Cgm18HmLOzb_vDKrXbQf7Vo"},
{"content":{"body":"i'm misunderstanding the actual problem here","msgtype":"m.text"},"ts":1639596658238,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$jL7sE-4z5IgkZ9Vrs5oP4RID-Tx9F8YLlQOSioXqT3A"},
{"content":{"body":"rickbutton: yes, this is a use case where it's fine, when i have the fallback map","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rick.button:matrix.org\">rickbutton</a>: yes, this is a use case where it's fine, when i have the fallback map","msgtype":"m.text"},"ts":1639596685340,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R6oYO2XQjC3tUFjnGMvB9KU2cbGEutuMzc2t6rRrHsg"},
{"content":{"body":"the question is whether it is acceptable for `object(x) === x` to hold for tuples","format":"org.matrix.custom.html","formatted_body":"the question is whether it is acceptable for <code>object(x) === x</code> to hold for tuples","msgtype":"m.text"},"ts":1639596699863,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qvN14lyd-3h6ewfgnuBYu-uiVnA_-BJGzEDepjZShIw"},
{"content":{"body":"i'm talking generally about that axiom being relied on in a myriad of ways","msgtype":"m.text"},"ts":1639596700228,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Td0tZiIv9MB7NWiNVf0ZjS405f1bqr7K8yJxySID2QE"},
{"content":{"body":"I think it's fine","msgtype":"m.text"},"ts":1639596707859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SIyyBBy3nkM1VSaUtvdIYIxY7QK_pYmB2ptirebjCVc"},
{"content":{"body":"jordan thinks otherwise","msgtype":"m.text"},"ts":1639596713134,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vSgu4OduNkjm9qtg6lidx2LQiprpOxY3XSMOkphhPT4"},
{"content":{"body":"I have no opinion on this, I think","msgtype":"m.text"},"ts":1639596749287,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$4d4MwbM5LuzbCnlKCoomG8iC6yVefjS5VJlkO4VzeZE"},
{"content":{"body":"(the best opinion :) )","msgtype":"m.text"},"ts":1639596761757,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$VDYb523aTUnu4OjWVtQ-d-jbpsMKLxyTLPFczP9J6Ls"},
{"content":{"body":"wait, is the decorator presenter here?","msgtype":"m.text"},"ts":1639596882950,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZnuknHdhNZc_WoPccDon5X921jMZ1qfEDvGGihsY4v4"},
{"content":{"body":"did i hear right that _static_ field initializers aren't symmetric with _instance_ field initializers?","format":"org.matrix.custom.html","formatted_body":"did i hear right that <em>static</em> field initializers aren't symmetric with <em>instance</em> field initializers?","msgtype":"m.text"},"ts":1639596896031,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A1WkFmf2Lnf5Fr2w5Vpkhu2hIhGgjmVZ9vD_15Ky6Tk"},
{"content":{"body":"static field initializers have `addInitializer` but instance fields can only do replacement?","format":"org.matrix.custom.html","formatted_body":"static field initializers have <code>addInitializer</code> but instance fields can only do replacement?","msgtype":"m.text"},"ts":1639596912928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Rvt4LZlslaCgyKMFcTRwP8IxvrughgovpOa6XtbUFxA"},
{"content":{"body":"(no opinion, just clarifying)","msgtype":"m.text"},"ts":1639596921047,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$btIqsr9kqq6f0eL_NmeoZe7tyq_y7wdyyLT6bpb2Qtk"},
{"content":{"body":"pzuraq: I've been meaning to examine in more detail how the current version of the proposal interacts with how GNOME would like to use decorators. hence the question about static fields. if you plan to go to stage 3 soon I'll make sure I do that in January","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: I've been meaning to examine in more detail how the current version of the proposal interacts with how GNOME would like to use decorators. hence the question about static fields. if you plan to go to stage 3 soon I'll make sure I do that in January","msgtype":"m.text"},"ts":1639596940526,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$-aOPdEQTejzeUpm3CJygJjphcZu_Tq2gA7QsGSpyUoI"},
{"content":{"body":"strong font game on this preso","msgtype":"m.text"},"ts":1639596951552,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$6eQFBzTxIouZz26-ITNBDG96FYq3s4lwHOnVO9JqVVo"},
{"content":{"body":"I see corruption on the top right of the slides. Anyone else?","msgtype":"m.text"},"ts":1639596973144,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$zjd6YH7bkhZtuKe-d8pvq8z5wa6dg19LMbj1uRCn_0E"},
{"content":{"body":"agree, game gotta respect game","msgtype":"m.text"},"ts":1639596977678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ToDdoVnKoGX7vrGkz3GsHW1l27WVGCPAmEhLRVs5dUY"},
{"content":{"body":"best font since shu's presentations","msgtype":"m.text"},"ts":1639597008573,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lng6V1-j9YWuzia9VErxx2r4-B3m5dhTi8Ysos5caOs"},
{"content":{"body":"waldemar: me too","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: me too","msgtype":"m.text"},"ts":1639597013117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ujTKWneHMwHpaKVXAWxbAEkp5fblJFqiKh8B46Kssuo"},
{"content":{"body":"The slide corruption changed…","msgtype":"m.text"},"ts":1639597177165,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Kmp3A4gKGEgdEV4DQ4PXusNdUY08FynS6zuu4Bge3-I"},
{"content":{"body":"> <@yulia:mozilla.org> for example `x = #{... y: Symbol.tie(\"symName\", objRef) }`\n\nHow would you retrieve `objRef` from `y` when consuming the record? If you have an equivalent `Symbol.fromTie(y)`, then what you have is effectively `ObjectPlaceholder`. Or did I miss something ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>for example <code>x = #{... y: Symbol.tie(\"symName\", objRef) }</code></blockquote></mx-reply>How would you retrieve <code>objRef</code> from <code>y</code> when consuming the record? If you have an equivalent <code>Symbol.fromTie(y)</code>, then what you have is effectively <code>ObjectPlaceholder</code>. Or did I miss something ?","m.relates_to":{"m.in_reply_to":{"event_id":"$bH8OMuogYa8aGm0ykn61HfAPPAWu_nJt8ZG9lqHEIWE"}},"msgtype":"m.text"},"ts":1639597179406,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ZOQRA_qXdTnbR5-lYSgE0twHCS8QI3VdEwbPrB5Sjjs"},
{"content":{"body":"Mathieu Hofman: its kind of my point actually","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: its kind of my point actually","msgtype":"m.text"},"ts":1639597210662,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nE_Kwfg6smwYBWAfNDU25GA3MTA1K_JN479N7H7UXto"},
{"content":{"body":"I look forward to never using Kahan's summation again","msgtype":"m.text"},"ts":1639597278271,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$29EDwKlyJaWrPwKJ1rz3vaj5_vkjLF3LFbTp_lA_yTM"},
{"content":{"body":"I once read one of Kahan’s papers on why IEEE floats are designed the way they are. It was illuminating albeit confusing.","msgtype":"m.text"},"ts":1639597305583,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$NTVDKONN55uvQSXCNigetPR52EjqLBdk19KsTxNz7B4"},
{"content":{"body":"jschoi: if you liked that, I highly recommend https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: if you liked that, I highly recommend https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868","msgtype":"m.text"},"ts":1639597395810,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$195S1nBIGefVo4MFyXIekROWt7qY8M5CTxpOH68ncgs"},
{"content":{"body":"What I remember from Kahan: We should have had many distinguishable NaN values. Heh.","msgtype":"m.text"},"ts":1639597473575,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$a8ubLuI0gLuKNNp4VZMjdQ3bLpM0W2fjj2ZCuNGs1oQ"},
{"content":{"body":"This book looks cool.","msgtype":"m.text"},"ts":1639597477495,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_uJw0YRI7Bke0mJQhH9veVQqCl0QnO89aTVjIH96uPk"},
{"content":{"body":"many indistiguishable NaN values is responsible for your iphone's web engine being fast yo","msgtype":"m.text"},"ts":1639597505601,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k"},
{"content":{"body":"jschoi: there's some shorter papers that pretty much sum it up, with lots of great figures, if you want me to dig those links up for you","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: there's some shorter papers that pretty much sum it up, with lots of great figures, if you want me to dig those links up for you","msgtype":"m.text"},"ts":1639597517733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lAqsxiBz3yftUSV766LevHX4kzoObyJtGmwgGvcdMg8"},
{"content":{"body":"Okay, a five minute slide deck for updating on Pattern Matching: https://docs.google.com/presentation/d/1D6rJzRRxf235sQH6JUXeKdJk5QLnYu66_gH5lpvcbwI/edit","msgtype":"m.text"},"ts":1639597527707,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YMENUiMlATMadUn-Oegf5zC6LJ6rYz2f-P9KhVj1HpA"},
{"content":{"body":"instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)","msgtype":"m.text"},"ts":1639597552598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg"},
{"content":{"body":"> <@shuyuguo:matrix.org> many indistiguishable NaN values is responsible for your iphone's web engine being fast yo\n\nI imagine Kahan shedding a tear at this. 🥲","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>many indistiguishable NaN values is responsible for your iphone&#39;s web engine being fast yo</blockquote></mx-reply>I imagine Kahan shedding a tear at this. 🥲","m.relates_to":{"m.in_reply_to":{"event_id":"$Anu9FnYQiuUtS-7vT-r2VFuhnyMp8jnE5JwrTBs9B5k"}},"msgtype":"m.text"},"ts":1639597557411,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nzMysisTaeFp6XFOBq3-e3darbFQARtS5vAKdRAvyoQ"},
{"content":{"body":"> <@bakkot:matrix.org> instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)\n\nOh, I heard about this too. I remember seeing a debate on YouTube between the creator of this and Kahan, in fact…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>instead of the book, start with https://en.wikipedia.org/wiki/Unum_(number_format)</blockquote></mx-reply>Oh, I heard about this too. I remember seeing a debate on YouTube between the creator of this and Kahan, in fact…","m.relates_to":{"m.in_reply_to":{"event_id":"$h1Y66XYN_HaVlsiUA9MQmhEf8ujsRgsJDohWRfko7Zg"}},"msgtype":"m.text"},"ts":1639597592884,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6n8cDbhJE7-05Vox-WsefoRWGx3U4upIM63d5CUJcY0"},
{"content":{"body":"nah, that wikipedia article isn't great","msgtype":"m.text"},"ts":1639597598915,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sgrAlfHDBUA7_hf63DR_RQNeSOqcYJ2qxggz73fj018"},
{"content":{"body":"i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","msgtype":"m.text"},"ts":1639597727672,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7HmrHEbbiZgX_U6l7Yi4x_T_WXZoYJrHCqiS2zksk90"},
{"content":{"body":" * i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","m.new_content":{"body":"i'm confused; is it harder to reason about code using BigInt than integer Numbers, due to the lack of finite precision?","msgtype":"m.text"},"m.relates_to":{"event_id":"$7HmrHEbbiZgX_U6l7Yi4x_T_WXZoYJrHCqiS2zksk90","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639597736244,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qOEajZei-BnVH6JFRiKAS6hTLWp0szOWJmSdbAbafQE"},
{"content":{"body":"or wait, that's bit size, not decimal precision, so maybe that's an unrelated question","msgtype":"m.text"},"ts":1639597761111,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B-qxNQOyfGbaLS-fGUaSzwrX-7wGRuUIKFu3cXkJ5JY"},
{"content":{"body":"well, yes, it is","msgtype":"m.text"},"ts":1639597765654,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P8HHzr8KIj9ikglHGR0_YLnGlloS4rSyGlXxR9mdvMo"},
{"content":{"body":"to be clear, I think there's probably too much buy-in to IEEE-754 to ever replace it with Unums, but I have been convinced they are better in every way, and it would have been a better alternative timeline if we had had them instead","msgtype":"m.text"},"ts":1639597767520,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aQ1ExQzh6GoANd8FiyFYle9O9dN-7hhikxB7zP-mV54"},
{"content":{"body":"Imagine hardware accelerated unums.","msgtype":"m.text"},"ts":1639597789894,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tzdvFwpLaB8L_CcO9WmGfW_U79rxe8fLJkeoYcXrJQ0"},
{"content":{"body":"shu: yes I am completely lost whenever I don't run into overflow/underflow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: yes I am completely lost whenever I don't run into overflow/underflow","msgtype":"m.text"},"ts":1639597801409,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MMRrVbTh3iHId27GFluR5aMXSedxiFFxfGXhZfSwxH8"},
{"content":{"body":"jschoi: people have done it! just not mass produced","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: people have done it! just not mass produced","msgtype":"m.text"},"ts":1639597841048,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FI2lZCYg8wNCLR4TUGIU3X0WKs_agYtVFPQjW2xDGwk"},
{"content":{"body":"Is anyone else having issues with matrix?","msgtype":"m.text"},"ts":1639597867214,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5cK2nKL_aEQSxaJTVA_vE1B1g3so9PYnWiRxMjqZ8VY"},
{"content":{"body":"i mean i think using numbers qua numbers is fairly rare in what i do?","msgtype":"m.text"},"ts":1639597870587,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ARTR5VYXTTmHjt3zCTiD9LBC5SpW9Za5M-uGHo-whtM"},
{"content":{"body":"i'm tagging stuff, composing it with other stuff","msgtype":"m.text"},"ts":1639597884963,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t_HWzuNWXawTb66so87gjwt88mY491GHV1wgNYPVf0Q"},
{"content":{"body":"yulia: no. I suspect it's an issue with the federation with mozilla's homeserver?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: no. I suspect it's an issue with the federation with mozilla's homeserver?","msgtype":"m.text"},"ts":1639597900508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mTQ_KWACCpx8uwFSvVUmwTzlW8fI885KHW9mOrnR2Ng"},
{"content":{"body":"yeah precision blow-up from repeated mults is non-obvious if you're not paying attention.","msgtype":"m.text"},"ts":1639597915834,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rtZigtkIKP4cOBNdDoyAtr0uZL4WtTyBWH9k44rv7sI"},
{"content":{"body":":-( sad to hear that bigints are mostly only used for crypto fraud","msgtype":"m.text"},"ts":1639598005788,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LvA17SYNP_FG3euXvj8L1CfDilcKFPQ-n4lVXbGDCXc"},
{"content":{"body":"unsurprised though","msgtype":"m.text"},"ts":1639598014742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cR7rU1rn73AepLxbW5j6k2FFiVKNjnqtPWPAXlqC-Ew"},
{"content":{"body":"I use BigInts in my work. 🥲\nThough most recently it was with Node’s high-resolution performance API…","msgtype":"m.text"},"ts":1639598037082,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1kRA-uPh6ljnJVE60kwj8x8w05fFVgzXZPpZRd2lD7E"},
{"content":{"body":"but hey, the fact that bigints are mostly used for cryptominers does mean their usage probably went up 10x in the five days or so!","msgtype":"m.text"},"ts":1639598077518,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pR34QWRHfNn43SHFABHdxVklycNLyRxcbxRGV0_2t44"},
{"content":{"body":"i suspect it's just because they need 128bit ints?","msgtype":"m.text"},"ts":1639598085606,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jMxSQakcdgcV4HxGG-jWifBMi9sC7_PA1MjyLvLQiqM"},
{"content":{"body":"Probably. Either way, it needs to be beyond MAX_SAFE_INTEGER.","msgtype":"m.text"},"ts":1639598120910,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RmR_EB8vx1iitZX82g1Xtt_6MyUZSNbgwpO253FAvKE"},
{"content":{"body":"imo the reason bigints suck to use is that they don't interoperate with numbers well, so libraries don't support both, and don't bother to switch wholesale","msgtype":"m.text"},"ts":1639598122379,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lrNzgHwARijNgA_SXOq8oZQwEEMHBUt_2-Lcv4_KNcU"},
{"content":{"body":" * Probably. Either way, it needs to be beyond MAX_SAFE_INTEGER.","m.new_content":{"body":"Probably. Either way, it needs to be beyond MAX_SAFE_INTEGER.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RmR_EB8vx1iitZX82g1Xtt_6MyUZSNbgwpO253FAvKE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639598130592,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$h9jkNk4y60fO9ztgUIWUZ2SAfwtklz8pfuf2OqFO8Fk"},
{"content":{"body":"my hope would be that Decimal would make a better decision there","msgtype":"m.text"},"ts":1639598140964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hr5iuX3nLbAjnlmDlaK_h8PwPYPI8LnhyxfnUUen8UE"},
{"content":{"body":"fwiw I would naively expect bigint usage to vastly exceed decimal usage","msgtype":"m.text"},"ts":1639598148705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F3mG1j2BhXlPo5E5ewaJxrBP1DxAhVPZBMmELM6L7Ow"},
{"content":{"body":" * fwiw I would naively expect bigint usage to vastly exceed decimal usage","m.new_content":{"body":"fwiw I would naively expect bigint usage to vastly exceed decimal usage","msgtype":"m.text"},"m.relates_to":{"event_id":"$F3mG1j2BhXlPo5E5ewaJxrBP1DxAhVPZBMmELM6L7Ow","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639598155516,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ee5SmJhVV_9nqizskqnNwEOYkxUchNCWcrGZY2Ctft0"},
{"content":{"body":"it's true that lots of code needs to deal with money, but that doesn't mean it needs decimal","msgtype":"m.text"},"ts":1639598169445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AzhSd7kcfYJSreM71GJ3oSRUY_hYXCSG0Mm3zDJXWI0"},
{"content":{"body":"code which needs decimal to deal with money is relatively obscure in my experience","msgtype":"m.text"},"ts":1639598181813,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$29s_-X7KQboMMYDc2QVuULDPBmRXitkYosbjHLeD7sE"},
{"content":{"body":"not if web3 takes off! /s","msgtype":"m.text"},"ts":1639598234302,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XJUMGF2NmseAawin9_GQizP5JLoXz3IvcPcsQ2D4rjQ"},
{"content":{"body":"oof","msgtype":"m.text"},"ts":1639598284878,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$t8uKobYRc8QqQ5IhpCToV5TQMa7jJVc8aCAY7MFod1I"},
{"content":{"body":"Justin Ridgewell: you need like 3-6 digits to handle all fiat currencies iirc, you need many more than that to handle crypto","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: you need like 3-6 digits to handle all fiat currencies iirc, you need many more than that to handle crypto","msgtype":"m.text"},"ts":1639598298820,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dvt8iscNlyNvNyg6Rsh-la4VfTZtDNPONAVDny2FPps"},
{"content":{"body":"gonna need infinite precision numbers to track how much money I lose from gambling on a sha of a png","msgtype":"m.text"},"ts":1639598309221,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$osEwXmT1I8gKjzt25j_WoxvFJvCtOCf91iwFoeuDxVU"},
{"content":{"body":"what if we simply lobbied central banks to _un_decimalize their financial system","msgtype":"m.text"},"ts":1639598315020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eVx03X1eg-pDNwF3uQ_riX1TS_QI009HxR4VHNum-pY"},
{"content":{"body":"Twitter Ads used \"microdollars\" (1e-9) everywhere to avoid floating point issues in all global fiat currencies","msgtype":"m.text"},"ts":1639598319238,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GYlQfMW0D2VpKahG7o-Y7y2trpV-042JwHdbzcAUSdI"},
{"content":{"body":" * Twitter Ads used \"microdollars\" (1e-9) everywhere to avoid floating point issues in all global fiat currencies","m.new_content":{"body":"Twitter Ads used \"microdollars\" (1e-9) everywhere to avoid floating point issues in all global fiat currencies","msgtype":"m.text"},"m.relates_to":{"event_id":"$GYlQfMW0D2VpKahG7o-Y7y2trpV-042JwHdbzcAUSdI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639598330132,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6pPkpoMDKaMZnzyoN36JZt3s48fKNf0J7ZWdp_P_Ko4"},
{"content":{"body":"web3 money is specified in floats, not to worry","msgtype":"m.text"},"ts":1639598339971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TgcqbCM65jD9niBqkYl5ezRcDouwP8EoJlb6T6mXcx0"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1639598345996,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f9OYEO5ieoO7yZ1PdnTqHihZwbvi6kfhLUX_ZRl7LN4"},
{"content":{"body":" * lol","m.new_content":{"body":"lol","msgtype":"m.text"},"m.relates_to":{"event_id":"$f9OYEO5ieoO7yZ1PdnTqHihZwbvi6kfhLUX_ZRl7LN4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639598352134,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YXiTMeuZzXpkIntqFGrfQHvSqpDWWtDe2JMF87ggAeg"},
{"content":{"body":"I do believe we are shitposting ? ","format":"org.matrix.custom.html","formatted_body":"I do believe we are shitposting ?","msgtype":"m.text"},"ts":1639598372948,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6bXS7x1rI_UljHeLy2MKqq6lunp8-2zToUskdB0px04"},
{"content":{"body":"Bring web3 back to the gold standard!","msgtype":"m.text"},"ts":1639598375756,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$EGheSQPjOSWFxtYG5p_nugdCz7gyNJWXZPIRCCyXRb0"},
{"content":{"body":"uh might be ","msgtype":"m.text"},"ts":1639598394357,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$28iQZf_cbDP9RiFlky3J23_4iwYbDv434xi3-btt0xM"},
{"content":{"body":"yeah this kinda devolved into #tdz","msgtype":"m.text"},"ts":1639598396053,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gk9k8XggJe-gSzXJJjQcaBzLxgTROoStmYrX5Xd1aOw"},
{"content":{"body":"whoops sorry","msgtype":"m.text"},"ts":1639598401334,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R6snPLwsKFOFyC_wggwUDCLNePsOmB6oL-lpZTu9tMY"},
{"content":{"body":"yulia: sorry I was catching up on all the earlier discussions. My point is that you have the same problems with `Symbol.tie` of a global implicit `WeakMap` and are still subject to primitives-dont-give-you-direct-access-to-objects assumptions by deployed code. From what I understand, the only difference you have with `ObjectPlaceholder` is a different `typeof`. Is there a concern with introducing a different `typeof` primitive? It feels weird to overload even more symbols.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: sorry I was catching up on all the earlier discussions. My point is that you have the same problems with <code>Symbol.tie</code> of a global implicit <code>WeakMap</code> and are still subject to primitives-dont-give-you-direct-access-to-objects assumptions by deployed code. From what I understand, the only difference you have with <code>ObjectPlaceholder</code> is a different <code>typeof</code>. Is there a concern with introducing a different <code>typeof</code> primitive? It feels weird to overload even more symbols.","msgtype":"m.text"},"ts":1639598427667,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OwPUV4IcdFQ9UT5dMGpeQW0QWAk2cBiy3QCNqiSgG1c"},
{"content":{"body":"> <@yulia:mozilla.org> I do believe we are shitposting ?\n\nbtw that's the most Yulia way to moderate a channel","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6bXS7x1rI_UljHeLy2MKqq6lunp8-2zToUskdB0px04?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I do believe we are shitposting ?</blockquote></mx-reply>btw that's the most Yulia way to moderate a channel","m.relates_to":{"m.in_reply_to":{"event_id":"$6bXS7x1rI_UljHeLy2MKqq6lunp8-2zToUskdB0px04"}},"msgtype":"m.text"},"ts":1639598453348,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ldtOLZnId8hTpxAl_OQQqQxb6THxPbSmFoKyDuyoaug"},
{"content":{"body":"It’s true","msgtype":"m.text"},"ts":1639598490583,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wDEoETtgW3H6WDyNDkctQ5IugaGFruU_ELTr0kk4y2s"},
{"content":{"body":"Mathieu Hofman: im on my phone and can’t type fully. But: in terms of what was presented, the concept of objectplaceholder is not independently useful as a primitive. It is functionally a variable name with restrictions. This is nicely represented as a symbol in a weak map relation. We have the building blocks for that, we don’t need to invent a new primitive. It aligns with other independent use cases for symbols in a weak map. A new primitive should be something that justifies the implementation complexity of adding it. ","format":"org.matrix.custom.html","formatted_body":"Mathieu Hofman: im on my phone and can’t type fully. But: in terms of what was presented, the concept of objectplaceholder is not independently useful as a primitive. It is functionally a variable name with restrictions. This is nicely represented as a symbol in a weak map relation. We have the building blocks for that, we don’t need to invent a new primitive. It aligns with other independent use cases for symbols in a weak map. A new primitive should be something that justifies the implementation complexity of adding it.","msgtype":"m.text"},"ts":1639598738689,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$GJapKtjtZoN-x8KGHAoN7ARI0ksS1aFas5eHGPXx_WM"},
{"content":{"body":"I suppose I don't understand where the complexity is, as what I'm basically arguing for is explicitly identifying with a new `typeof` a primitive which can be used in `WeakMap`, and has the same properties of a direct mapping between an Object and values of this new primitive like `Symbol.for` has for a string/number.","format":"org.matrix.custom.html","formatted_body":"I suppose I don't understand where the complexity is, as what I'm basically arguing for is explicitly identifying with a new <code>typeof</code> a primitive which can be used in <code>WeakMap</code>, and has the same properties of a direct mapping between an Object and values of this new primitive like <code>Symbol.for</code> has for a string/number.","msgtype":"m.text"},"ts":1639599137940,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4uNysH6Oc2PPnDVAYXTQW9aGGW3tpXjdih8azgFKkzA"},
{"content":{"body":"new primitives are a lot of complexity even for language users, much less engines","msgtype":"m.text"},"ts":1639599190532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H4xTLOcgeqgBPqQYyDWyQfH113dxlxWK8nXheB9Y5EA"},
{"content":{"body":"I believe that overloading Symbol further is a lot of complexity for user having to wonder which kind of symbol they're holding","msgtype":"m.text"},"ts":1639599236303,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ddBFvGAUb3T82FyICis1fa71Pt9jVoHWrg37KMxlIko"},
{"content":{"body":"is it a forgeable value, a unique value, a value representing some object?","msgtype":"m.text"},"ts":1639599268519,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FCdLssDRtQGgNGjAVA6wAgBVYlicVEgDsneJNDVsNZg"},
{"content":{"body":"I would say that the symbol is a normal symbol. The tie just puts it in a weak map","msgtype":"m.text"},"ts":1639599294913,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yrhtiKHGHyNbzHRg4czwI02G3cjJjpvlFF_sck441w0"},
{"content":{"body":"There is no overloading","msgtype":"m.text"},"ts":1639599299307,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Bjsh33a63-Kmn7GOrVM6pbYhQKjs2yEpYh8zYoQRb2k"},
{"content":{"body":"But the intent of using that symbol is different","msgtype":"m.text"},"ts":1639599340657,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Fn7NdzWGNYNSn39MHHvoQnlzka8PhFJpOe2z8w_dM5I"},
{"content":{"body":"New primitives are a sizable implementation burden ","format":"org.matrix.custom.html","formatted_body":"New primitives are a sizable implementation burden","msgtype":"m.text"},"ts":1639599341597,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qxOcfQRTvJX65fbB7P-ReA384Uv0RjA63hqQgxV11tA"},
{"content":{"body":"Don’t think I agree about the intent","msgtype":"m.text"},"ts":1639599376652,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yaqE8kGfeQNDgS6Pnli4nubxb9R9vgbkj3sXnf25pGU"},
{"content":{"body":"strings can be used as keys and as values, that intent is not expressed in a typeof","msgtype":"m.text"},"ts":1639599444389,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$3TbZ2siSpRY-C-Am3V0MW4P23c7xb9x4WXKCc0b-pVM"},
{"content":{"body":"typeof seems a bit strong on only the \"it expresses additional intent\" argument","msgtype":"m.text"},"ts":1639599469220,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$T2ow1KqCw33S6LtTjhVdHeWVi3ty6nsX3hSW3y5iB7w"},
{"content":{"body":"Thank you for shitposting. It makes me feel good. 😆","msgtype":"m.text"},"ts":1639599557202,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$FyTAwnHARDNDfwSJyXDcMdp0mLoQb9qhH3D6Rz6AAxI"},
{"content":{"body":"Re the earlier `Promise.prototype.finally` discussion, I mixed up `.then` and thenable access.","format":"org.matrix.custom.html","formatted_body":"Re the earlier <code>Promise.prototype.finally</code> discussion, I mixed up <code>.then</code> and thenable access.","msgtype":"m.text"},"ts":1639599702688,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-wMPugr8R81j5y65zS8e-HyZ4VHyE-mC-acjc3iufBE"},
{"content":{"body":"But the same power still holds","msgtype":"m.text"},"ts":1639599706707,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y-o59sIDaNMH-Qrw8xuPl2tULAveDZog7PF1CdHWKTU"},
{"content":{"body":"```\nvar iframe = document.createElement('iframe');\niframe.src = location.href;\ndocument.body.appendChild(iframe)\n\nvar final = iframe.contentWindow.eval('(onThen, onCatch) => { window.data = {onThen, onCatch}; }')\n\nvar thenFinally, catchFinally;\nPromise.prototype.finally.call({\n  then(thenFinally_, catchFinally_) {\n    thenFinally = thenFinally_;\n    catchFinally = catchFinally_;\n  }\n}, final);\n\nconsole.log('thenFinally', thenFinally.constructor === Function);\nconsole.log('catchFinally', catchFinally.constructor === Function);\n\nPromise.resolve({\n  then: final\n});\nPromise.resolve().then(() => {\n  console.log('onThen', iframe.contentWindow.data.onThen.constructor === Function);\n  console.log('onCatch', iframe.contentWindow.data.onCatch.constructor === Function);\n});\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>var iframe = document.createElement('iframe');\niframe.src = location.href;\ndocument.body.appendChild(iframe)\n\nvar final = iframe.contentWindow.eval('(onThen, onCatch) =&gt; { window.data = {onThen, onCatch}; }')\n\nvar thenFinally, catchFinally;\nPromise.prototype.finally.call({\n  then(thenFinally_, catchFinally_) {\n    thenFinally = thenFinally_;\n    catchFinally = catchFinally_;\n  }\n}, final);\n\nconsole.log('thenFinally', thenFinally.constructor === Function);\nconsole.log('catchFinally', catchFinally.constructor === Function);\n\nPromise.resolve({\n  then: final\n});\nPromise.resolve().then(() =&gt; {\n  console.log('onThen', iframe.contentWindow.data.onThen.constructor === Function);\n  console.log('onCatch', iframe.contentWindow.data.onCatch.constructor === Function);\n});\n</code></pre>\n","msgtype":"m.text"},"ts":1639599712759,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4gfhVTOXNG_VJdzDF01J6nxUajKu45LZ0sHBoEzBnf4"},
{"content":{"body":"One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):\n```\nconst eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n```","format":"org.matrix.custom.html","formatted_body":"<p>One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):</p>\n<pre><code>const eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n</code></pre>\n","msgtype":"m.text"},"ts":1639599723467,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ldx_UtORanQ6regsDZyJvsB8zJzpKbkwg39mhV6w-rU"},
{"content":{"body":" * One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):\n```\nconst eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):</p>\n<pre><code>const eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n</code></pre>\n","m.new_content":{"body":"One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):\n```\nconst eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() => {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n```","format":"org.matrix.custom.html","formatted_body":"<p>One thing I didn't get into is how having an explicit intent for an ObjectPlaceholder being an exit from the immutable structure is that it allows predicates that compare the immutable shape of a record/tuple oblivious of the exits, without running into the collision issues that strings have (and for which unique symbols were created in the first place):</p>\n<pre><code>const eventHandlerTag = Symbol('EventHandler');\nconst domElementTag = Symbol('Element');\nconst rec1 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec2 = #{type: eventHandlerTag, ref: ObjectPlaceholder(() =&gt; {})};\nconst rec3 = #{type: domElementTag, ref: ObjectPlaceholder(document)};\nassert(rec1 !== rec2);\nassert(sameShape(rec1, rec2) === true);\nassert(sameShape(rec1, rec3) === false);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$ldx_UtORanQ6regsDZyJvsB8zJzpKbkwg39mhV6w-rU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639599748585,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$s-pOhGFP0knW1kmp7jD5DVoWRDebmLdlQVti37Wuwxs"},
{"content":{"body":"Mathieu Hofman: that is why the proposal is symbols, instead of strings","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: that is why the proposal is symbols, instead of strings","msgtype":"m.text"},"ts":1639599766474,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kxqSkuQAz7Tw7WzVD1T6garz_KP4NFB7MvC2KOWCjww"},
{"content":{"body":"assuming that there was a predicate like `Symbol.isTie` you could do the same","format":"org.matrix.custom.html","formatted_body":"assuming that there was a predicate like <code>Symbol.isTie</code> you could do the same","msgtype":"m.text"},"ts":1639599769657,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$yGrAMlGI_EMJAoKobdJuf10wvuaIOb26iTK50v-krbE"},
{"content":{"body":"or just try to unwrap every symbol","msgtype":"m.text"},"ts":1639599780482,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$dUoX2R6ZHhxV3UYmn_1BRZfoOiaqjNpQejJZ0o7yHo0"},
{"content":{"body":"Unwrapping test wouldn't work in the no-unwrap-if-different realm case","msgtype":"m.text"},"ts":1639599871384,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rJNv_XA2J0BQPqqOhxCXI6odFowcQsM5GMFEuh_j5Yc"},
{"content":{"body":"which is still relevant for both approaches","msgtype":"m.text"},"ts":1639599881522,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dEE86PyKb9dwmeDh2ndKBugzjsqqZk-lYtRg8aWcwwk"},
{"content":{"body":" * Unwrapping test wouldn't work in the no-unwrap-if-different realm case","m.new_content":{"body":"Unwrapping test wouldn't work in the no-unwrap-if-different realm case","msgtype":"m.text"},"m.relates_to":{"event_id":"$rJNv_XA2J0BQPqqOhxCXI6odFowcQsM5GMFEuh_j5Yc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639599895505,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SkVs-J6v6kBLPzbLqKFIf9eqAk44FgD87OiMCuA-csk"},
{"content":{"body":"well sure, but we are ignoring that because symbols in weakmaps doesn't have this problem, that problem would need to be solve if/when Symbol.tie was a thing, or a proposal attempted to add ObjectPlaceholder","msgtype":"m.text"},"ts":1639599943676,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$y-5fUtPPoZS76QQkj0uDBCb0ZLGi0tudbRsJE8pkowU"},
{"content":{"body":"(in this theoretical example of symbols as weakmap keys)","msgtype":"m.text"},"ts":1639599961116,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$5SK9tJMmN8-wq1XSgoTc_agCrGTXbsOG4tfaFaGW_qY"},
{"content":{"body":"I would see this restriction as a benefit. In the absence of use cases that need this, weakmap symbols remove the objection on security grounds","msgtype":"m.text"},"ts":1639600016286,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Xg4k1nBMwfdXNMNhYxyoC1KWKtb35Zk1uLI2AE2b5ZI"},
{"content":{"body":"and I think the general sense after the update is that the worse ergonomics of symbols in weakmaps > the general complexity of objectplaceholders, at least that was voiced by several people","msgtype":"m.text"},"ts":1639600034596,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$b_3ij5Rzkdt7RY9AsKGOixA_HRBV4fdS3OBT6YXmQZs"},
{"content":{"body":"I think we lost the fact that `Symbol.tie` was explicitely mentioned to help user-land solve the re-invent the wheel issue, and to improve debuggability.","format":"org.matrix.custom.html","formatted_body":"I think we lost the fact that <code>Symbol.tie</code> was explicitely mentioned to help user-land solve the re-invent the wheel issue, and to improve debuggability.","msgtype":"m.text"},"ts":1639600036956,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DQ7T49dvJbWgS7ujEmhoddUbW0IylrKD4vScPimhFRQ"},
{"content":{"body":"And object placeholder is unnecessary to achieve the goals of records and Tupfes","msgtype":"m.text"},"ts":1639600042443,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$kzMecK_X8gf1BtZhmwuajjOmoS69ZSEZgAHTUE0HVqg"},
{"content":{"body":"No, we don’t need it for either case","msgtype":"m.text"},"ts":1639600065195,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Jp-y5eEzCqEe_Upt9azuJQZ8fNxdIdaF1tO6kGzkojo"},
{"content":{"body":"I don't think Symbol.tie would be needed for debuggabilitry","msgtype":"m.text"},"ts":1639600069037,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$ALwaDMmzeA7BrScV8X_ui82RRLckm72mXy-iNCb78g8"},
{"content":{"body":"It is a nice shorthand in the language but the same is achievable with a library","msgtype":"m.text"},"ts":1639600085768,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RXvJvELlml-N65Jl6PcsLUhaBfKobKXZ6iNFkC2KCLg"},
{"content":{"body":"> <@yulia:mozilla.org> I would see this restriction as a benefit. In the absence of use cases that need this, weakmap symbols remove the objection on security grounds\n\nI believe this would make the implementation of transparent membrane a lot more complicated","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xg4k1nBMwfdXNMNhYxyoC1KWKtb35Zk1uLI2AE2b5ZI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I would see this restriction as a benefit. In the absence of use cases that need this, weakmap symbols remove the objection on security grounds</blockquote></mx-reply>I believe this would make the implementation of transparent membrane a lot more complicated","m.relates_to":{"m.in_reply_to":{"event_id":"$Xg4k1nBMwfdXNMNhYxyoC1KWKtb35Zk1uLI2AE2b5ZI"}},"msgtype":"m.text"},"ts":1639600125086,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B34rQXzLP1OsvcayBVvD243IecFYgEirHfZP5UTI8gY"},
{"content":{"body":"That is a concern for a membranes proposal","msgtype":"m.text"},"ts":1639600164433,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$givhJwIdbWmK3wjeK62KmHJ2JsbKa9BJBfTWe-go_94"},
{"content":{"body":"how so? symbols as weakmap keys are transparent to the membrane, if you need access to the weakmap on the other side, wrap it with the membranea","msgtype":"m.text"},"ts":1639600172069,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Ny4C1aETI8bNg0weJ1YhXGBJEwbxTS6QUB1r_3GI7TU"},
{"content":{"body":"if anything, zero work needs to be done to fit symbols as weakmap keys into current membranes, it would just work","msgtype":"m.text"},"ts":1639600186993,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$5IbJ_NcjzY9B6ZcppPL8FI0EClf6YP5EGU7ssvXYaoQ"},
{"content":{"body":"> <@yulia:mozilla.org> It is a nice shorthand in the language but the same is achievable with a library\n\nA library that all users of records/tuples have to agree on using","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RXvJvELlml-N65Jl6PcsLUhaBfKobKXZ6iNFkC2KCLg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>It is a nice shorthand in the language but the same is achievable with a library</blockquote></mx-reply>A library that all users of records/tuples have to agree on using","m.relates_to":{"m.in_reply_to":{"event_id":"$RXvJvELlml-N65Jl6PcsLUhaBfKobKXZ6iNFkC2KCLg"}},"msgtype":"m.text"},"ts":1639600192486,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Pirt0tSCdhlpH49oGDqwIdk_7hK-bx7_kk16K7tvul8"},
{"content":{"body":"the lack of a built-in coordination point is certainly a downside sure","msgtype":"m.text"},"ts":1639600253947,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$E1hnG1T9x4oZfT8uXgyeWzP7-C07Ahe-OMiVI4Mvc98"},
{"content":{"body":"but imo not fatal","msgtype":"m.text"},"ts":1639600258752,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$4ozNI4jNmYptlj-BvpFEQ9nM8rUkzYnQv3OVwowYvRI"},
{"content":{"body":"If the weakmap holder is explicit, sure, if it's implicit and hidden within `Symbol.tie` then no","format":"org.matrix.custom.html","formatted_body":"If the weakmap holder is explicit, sure, if it's implicit and hidden within <code>Symbol.tie</code> then no","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$Ny4C1aETI8bNg0weJ1YhXGBJEwbxTS6QUB1r_3GI7TU"}}},"ts":1639600262466,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aRg6ngthr_dkBinfVgJupm_3wk0LAZYb5a_GNOP2lm8"},
{"content":{"body":"> <@rick.button:matrix.org> how so? symbols as weakmap keys are transparent to the membrane, if you need access to the weakmap on the other side, wrap it with the membranea\n\n * If the weakmap holder is explicit, sure, if it's implicit and hidden within `Symbol.tie` then no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ny4C1aETI8bNg0weJ1YhXGBJEwbxTS6QUB1r_3GI7TU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rick.button:matrix.org\">@rick.button:matrix.org</a><br>how so? symbols as weakmap keys are transparent to the membrane, if you need access to the weakmap on the other side, wrap it with the membranea</blockquote></mx-reply> * If the weakmap holder is explicit, sure, if it's implicit and hidden within <code>Symbol.tie</code> then no","m.new_content":{"body":"If the weakmap holder is explicit, sure, if it's implicit and hidden within `Symbol.tie` then no","format":"org.matrix.custom.html","formatted_body":"If the weakmap holder is explicit, sure, if it's implicit and hidden within <code>Symbol.tie</code> then no","msgtype":"m.text"},"m.relates_to":{"event_id":"$aRg6ngthr_dkBinfVgJupm_3wk0LAZYb5a_GNOP2lm8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639600280532,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$S3KXGN5pS2nWS8sCWEgexGKr2A3-HOkql3DpACXUJ0c"},
{"content":{"body":"They don’t need to all agree on using it to be fair","msgtype":"m.text"},"ts":1639600281692,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Y-s4ab7rMNtyGsbkgpNHe1gHHSADkVPE_Yr-uC-tqEo"},
{"content":{"body":"> <@mhofman:matrix.org> If the weakmap holder is explicit, sure, if it's implicit and hidden within `Symbol.tie` then no\n\nany restrictions around implicit maps would need to be handled in that proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aRg6ngthr_dkBinfVgJupm_3wk0LAZYb5a_GNOP2lm8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>If the weakmap holder is explicit, sure, if it's implicit and hidden within <code>Symbol.tie</code> then no</blockquote></mx-reply>any restrictions around implicit maps would need to be handled in that proposal","m.relates_to":{"m.in_reply_to":{"event_id":"$aRg6ngthr_dkBinfVgJupm_3wk0LAZYb5a_GNOP2lm8"}},"msgtype":"m.text"},"ts":1639600282567,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$J9W05cA81zCtFwB6XAzbFaKNvYJwcZpbtZvhYY-msck"},
{"content":{"body":"we aren't suggesting implcit maps as a part of R&T, simply as a strawman for a possible followon proposal","msgtype":"m.text"},"ts":1639600310290,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$1xuGlrN2HXsNi16umirbCBieVQLI1B8xC2fE_lgZgAA"},
{"content":{"body":"%s/we/yulia/gc and feel free to correct me","msgtype":"m.text"},"ts":1639600324817,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$7z6b7RvSFi4KomXPp9YGJeGqSH7CyjIbqdpBDBZ4FSA"},
{"content":{"body":"Yep, you got it right","msgtype":"m.text"},"ts":1639600332542,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$eqXFD10RhKqsebXebDh86nytAM9IU7Be3y1ZeOk8jtk"},
{"content":{"body":"I would say there is much more motivation for a syntax sugar on symbols in weakmap than object placeholder. They are functionally the same. If you like we can even call it the same. ","format":"org.matrix.custom.html","formatted_body":"I would say there is much more motivation for a syntax sugar on symbols in weakmap than object placeholder. They are functionally the same. If you like we can even call it the same.","msgtype":"m.text"},"ts":1639600392218,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$z9vkD8045D8wp_8ud2PgZTIuB6P7PlOjQmWElEKS6eQ"},
{"content":{"body":"Again, I repeat my use case earlier, if you allow all unique symbols as weakmap keys, you can't build a generic predicate that test the shape of a record/tuple for mutable exits while still allowing other unique symbols as unique value, unless that predicate synchronizes with the weakmap","msgtype":"m.text"},"ts":1639600436225,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VJUWXEOTtkrwcx30APjuGXY5y48PmyFDZmgpe7cVT1o"},
{"content":{"body":"making that predicate sync with the weakmap in the case where the map is explicit seems perfect fine to me","msgtype":"m.text"},"ts":1639600470005,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$EArgwOAgzNURPQYDoJ1e_ichw29A6pcUuwk7S2sElrw"},
{"content":{"body":"WeakMap.prototype.has, in fact","msgtype":"m.text"},"ts":1639600478587,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$KXTHa4Od7ITdMj1JILIRWPS7y18w3dr1ufBD_HV5RMU"},
{"content":{"body":"you put the burden of synchronization for a generic concept (mutable data referenced by immutable structure) on the user land","msgtype":"m.text"},"ts":1639600481066,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$n4hcWnwuY5EWKG7DxVVqZCEHZzUdXTS4e-0YYm6p3oM"},
{"content":{"body":"you need the WeakMap to get the values in any case anyway, seems fine to also need the WeakMap to find out which ones are values","msgtype":"m.text"},"ts":1639600504840,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$xRKQwWACO-c043dLwC0XbmxEFSzLg63MyiGDLJLQFZs"},
{"content":{"body":"Can you show me a library on npm with a ton of downloads that does this?","msgtype":"m.text"},"ts":1639600507494,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1oMpZz22idFMieRi1-SXvvj5oe7mi30jah1JskCWx1w"},
{"content":{"body":"I'm deriving this use case from questions that were asked on Discourse and github issues","msgtype":"m.text"},"ts":1639600550526,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TaY7Tyha0SxSJEfMWdgi2AzFTpGmCbMPxPosJrjYXis"},
{"content":{"body":"One of them is https://es.discourse.group/t/tagged-records-and-variants/1058","msgtype":"m.text"},"ts":1639600588770,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rVAkjCcw1dUqy7EF_Ixs37rG49IDGs6apEpLJWfZnLw"},
{"content":{"body":"something else important to note: symbols as weakmap keys does not preclude the future addition of ObjectPlaceholder in a future proposal that has all of these concerns ironed out","msgtype":"m.text"},"ts":1639600615350,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$2sOhVxRkPIwLNdQnI2AHZxhKU49tfjlFRSGcqqYsYss"},
{"content":{"body":"I don’t think this is a good example for objectplaceholder","msgtype":"m.text"},"ts":1639600716025,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ffo5Y9gV-bFls557UMlYL-vsi6ZT_qPsaIxToqIA5jA"},
{"content":{"body":"It is making use of the ability to box objects for something else: brandchecking","msgtype":"m.text"},"ts":1639600730883,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4olwhPFphWBBlva45YQbd3CogvP2SyHulWZYWcuw5Lc"},
{"content":{"body":"There is some of these requests sprinkled around https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796, mostly around the use case of vdom referencing user data","msgtype":"m.text"},"ts":1639600786710,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TjwEwMSjts3zamQ9I-y4WVIjAVUdcpGmNzSU85zKmFU"},
{"content":{"body":"there is already an extremely well developed pattern for branding values, I use WeakMaps all the time for this","msgtype":"m.text"},"ts":1639600830721,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$C3In0BGZLg9rMNV3LtKzC0m1xrBTb7Q2QCKU1e-KRnU"},
{"content":{"body":"I am more and more convinced that expanding on symbols in weakmap is the way to go here","msgtype":"m.text"},"ts":1639600864408,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nhpO_CbVFAbz5Jgnrh9lOHlc790332Nw1NFz24z5iyM"},
{"content":{"body":"I am due to present after the break, but there is a significant amount of noise outside my house at the moment. While I'm not specifically asking to be rescheduled, I apologize in advance if the noise makes it difficult to hear. I have some background noise removal running for my microphone right now which I hope will help.","msgtype":"m.text"},"ts":1639600865607,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ymIG-nMOF9Kle-wD9gmEPbYcA8Gn-1bO8IXOMq-jqSs"},
{"content":{"body":"Like, even for the cases you are presenting now","msgtype":"m.text"},"ts":1639600881244,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jcpavLZVGC2Fzb8e4E-Gde2tv6KpUY927Bf63jm0S2E"},
{"content":{"body":"The idea here is to have the unique brand information be part of the shape test of the record.","msgtype":"m.text"},"ts":1639600892028,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kFZ6nhptq7nPu8j1ESanqRz_DK-WwuH3FPoj8Z7r0fM"},
{"content":{"body":"symbols are unique values that can participate in shape tests.","msgtype":"m.text"},"ts":1639600943864,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OcYb27auQTOJ99Z5rGa8I-3pjdAh9kJbrRuYZPUtY70"},
{"content":{"body":"as an aside v8 continues to have the opinion the vdom use case should not be overindexed on","msgtype":"m.text"},"ts":1639601006880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wL9cBnXHala8ZWWAFxHHRXxl8hiodqMhQSe2OG90imY"},
{"content":{"body":"if symbols are also unique values that can represent an exit, which should be ignored by the shape test, the shape test needs to be coupled to the weakmap that can differentiate the 2","msgtype":"m.text"},"ts":1639601027528,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KNeeykW8J-TcCXFoMhz04J3-NVmk1-m4Ml1oO49QyZ0"},
{"content":{"body":"symbols in weakmaps are literally more expressive than ObjectPlaceholder","msgtype":"m.text"},"ts":1639601029429,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wSYF00VNXPfa1u5bC0DTNUiBJ_kGKIEnLujyTl8OEVI"},
{"content":{"body":"Which hasn’t yet been established as a need that should be integrated into engines as a primitive","msgtype":"m.text"},"ts":1639601030108,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3viDaC_FNR7ruqdZ9ytvPtTijau0uzrftJ4WLVTB42s"},
{"content":{"body":"Regarding debuggability and symbols as weakmap keys vs object placeholder: Some debuggers allow you to control watch window behavior to overcome this. Notably, VS Code has `customDescriptionGenerator` and `customPropertiesGenerator` configuration settings you can specify in `launch.json` that allows you to run custom code to generate your own descriptions and property expansion in watch/locals. Its a bit of extra work for the user, but it does allow you to work around the debug concerns.","format":"org.matrix.custom.html","formatted_body":"Regarding debuggability and symbols as weakmap keys vs object placeholder: Some debuggers allow you to control watch window behavior to overcome this. Notably, VS Code has <code>customDescriptionGenerator</code> and <code>customPropertiesGenerator</code> configuration settings you can specify in <code>launch.json</code> that allows you to run custom code to generate your own descriptions and property expansion in watch/locals. Its a bit of extra work for the user, but it does allow you to work around the debug concerns.","msgtype":"m.text"},"ts":1639601035567,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SBER_g0U1Nt-D0Sh6GG44apmaAHkkKMN0v6KINi_79w"},
{"content":{"body":"what is a \"shape test\" in that context?","msgtype":"m.text"},"ts":1639601087482,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ivNdeyArkKUA-ilAmkoNNBS7SQWYqIXphhTWsc95ws0"},
{"content":{"body":"\"are these two records the same ignoring the object placholders\"","msgtype":"m.text"},"ts":1639601107346,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$V_6_10C6vZo5IGi4hS-oQdlDE8Z-hyRudkJV4xl2O4Y"},
{"content":{"body":"like what is the actual consequence, you have to type a bit more in some use cases?","msgtype":"m.text"},"ts":1639601111890,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h_8cqxu7TCvpn2-QSLwOnYPFfJy6x7BXuSnswMixuiw"},
{"content":{"body":" * \"are these two records the same ignoring the object placholders\"","m.new_content":{"body":"\"are these two records the same ignoring the object placholders\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$V_6_10C6vZo5IGi4hS-oQdlDE8Z-hyRudkJV4xl2O4Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639601124923,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$1IKwcuJgqCe4kkLD6r_4njk4XsZMsoFMPWRUlsWCcHw"},
{"content":{"body":"is what i understand it as","msgtype":"m.text"},"ts":1639601132606,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$fhIMXO9qpAS658p4VewZA4dw8ujmu4aBPsj7AlvRx1E"},
{"content":{"body":" * is what i understand it as","m.new_content":{"body":"is what i understand it as","msgtype":"m.text"},"m.relates_to":{"event_id":"$fhIMXO9qpAS658p4VewZA4dw8ujmu4aBPsj7AlvRx1E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639601136639,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$mKkVzfv8qB-kGt24HLD6pD4uCWDTrnai385vDiQhBP4"},
{"content":{"body":"i mean, seems like a safe simplifying assumption to make that, if you use symbols, that symbols-as-object-placeholders are globally unique. if it ain't, and you have to couple it to a weakmap, that's a choice you can make as a framework too","msgtype":"m.text"},"ts":1639601177384,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fauEJsa-FC9woyRvT25Iw9ezA40aF3OE3RLhW4Waw4s"},
{"content":{"body":" * i mean, seems like a safe simplifying assumption to make that, if you use symbols, that symbols-as-object-placeholders are globally unique. if it ain't, and you have to couple it to a weakmap, that's a choice you can make as a framework too","m.new_content":{"body":"i mean, seems like a safe simplifying assumption to make that, if you use symbols, that symbols-as-object-placeholders are globally unique. if it ain't, and you have to couple it to a weakmap, that's a choice you can make as a framework too","msgtype":"m.text"},"m.relates_to":{"event_id":"$fauEJsa-FC9woyRvT25Iw9ezA40aF3OE3RLhW4Waw4s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639601196795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qEnVwVDBztn3AcWIdKq1IYJVYPmKvxuKzbXd_l7bF-M"},
{"content":{"body":"I think it all boils down to whether the synchronization point is a user library that everyone agrees to use, or if the platform provides this synchronization point in some way","msgtype":"m.text"},"ts":1639601212768,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5xCk0uuW1PwXTdFaw0_FcxZsLv2NNw2DXQug1xhTeJI"},
{"content":{"body":"that comes back to a point raised from the last meeting","msgtype":"m.text"},"ts":1639601239625,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PKdgKsLeLy9AW8u393_Vbg3Z_8uKBqCKaNNNRiprWY4"},
{"content":{"body":"Not everyone uses the same membrane implementation. This seems fine","msgtype":"m.text"},"ts":1639601254629,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yxcF2NVYOiVaL-_F0Qy25Pv7izMLD6Go9-GR2lVEltg"},
{"content":{"body":"well, it would be very simple for the platform to provide the coordination point, except that some don't want that coordination point to be cross realm","msgtype":"m.text"},"ts":1639601254736,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Aa3KWNGqdb_sVdat7NXkghO1ikH6QlYssvB-AC3Ue-k"},
{"content":{"body":"easy to provide a per-realm coordination point if we want that","msgtype":"m.text"},"ts":1639601319014,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gbcz4gclXyRCxTqHR6BmylGS_s3e5Z0bandpLlQ2_Yw"},
{"content":{"body":"yes but others -dont- want that, therein lies the problem","msgtype":"m.text"},"ts":1639601344973,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Q5xztyMIge2zE3qmB9Ia2HELFgkX72gbdv6mcKafeko"},
{"content":{"body":"a per-realm `WeakMap.sharedMap` which is just a `new WeakMap`","format":"org.matrix.custom.html","formatted_body":"a per-realm <code>WeakMap.sharedMap</code> which is just a <code>new WeakMap</code>","msgtype":"m.text"},"ts":1639601345016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uJ5A0KdXDQOJ9sQqTJw-cNEYVwcltwLkqAFfMIj9Bjs"},
{"content":{"body":"e.g.","msgtype":"m.text"},"ts":1639601346694,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X9veOpu-wmx0Zy-thqsl_l8kwzeSuKpqZuSWOwAP8Pg"},
{"content":{"body":"let me zoom out even more. like, what are you hoping to get out of immutable data structures? if it's mutable exit points, the main use case is templates. is it for easier reasoning of templates? if so, just do it in your framework, seems fine to me, not like you can compare templates across frameworks anyway. is it for faster performance of templates? we (V8) still don't think we can use R&T to make that use case fast anyway","msgtype":"m.text"},"ts":1639601413242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cZCRqMgqhJ2fEZ7T9KtfT1ISwlUTzCGBXN8dYaubpWI"},
{"content":{"body":"We also could consider introducing something like a `debugger.meta` meta-property to facilitate debuggability, i.e.:\n```js\n// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) => {\n  if (typeof value === \"symbol\" && placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n```","format":"org.matrix.custom.html","formatted_body":"<p>We also could consider introducing something like a <code>debugger.meta</code> meta-property to facilitate debuggability, i.e.:</p>\n<pre><code class=\"language-js\">// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) =&gt; {\n  if (typeof value === &quot;symbol&quot; &amp;&amp; placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n</code></pre>\n","msgtype":"m.text"},"ts":1639601506161,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WFwboxaGzEsSGi8PdlNqu0LCyCmNSqrio1RFX4iOlQg"},
{"content":{"body":" * We also could consider introducing something like a `debugger.meta` meta-property to facilitate debuggability, i.e.:\n```js\n// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) => {\n  if (typeof value === \"symbol\" && placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n```","format":"org.matrix.custom.html","formatted_body":" * <p>We also could consider introducing something like a <code>debugger.meta</code> meta-property to facilitate debuggability, i.e.:</p>\n<pre><code class=\"language-js\">// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) =&gt; {\n  if (typeof value === &quot;symbol&quot; &amp;&amp; placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n</code></pre>\n","m.new_content":{"body":"We also could consider introducing something like a `debugger.meta` meta-property to facilitate debuggability, i.e.:\n```js\n// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) => {\n  if (typeof value === \"symbol\" && placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n```","format":"org.matrix.custom.html","formatted_body":"<p>We also could consider introducing something like a <code>debugger.meta</code> meta-property to facilitate debuggability, i.e.:</p>\n<pre><code class=\"language-js\">// assumes `debugger.meta` is ECMA262-defined, but a debugger can add their own methods to it\n\nconst placeholders = new WeakMap();\nexport function box(value) {\n  const sym = Symbol();\n  placeholders.set(sym, value);\n  return sym;\n}\ndebugger.meta?.addCustomDescriptionGenerator((value, describe) =&gt; {\n  if (typeof value === &quot;symbol&quot; &amp;&amp; placeholders) {\n    return `Placeholder (${describe(placeholders.get(value))})`;\n  }\n});\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$WFwboxaGzEsSGi8PdlNqu0LCyCmNSqrio1RFX4iOlQg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639601525092,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PldMl5TbSf-G8xQkkwpINRNk3NWPEOqQKkaqhoLRWQc"},
{"content":{"body":"There is a debugger working grou","msgtype":"m.text"},"ts":1639601546495,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ur_ilTilxpOFgs8jb8Qvh0asNkqIBHxkWxHAeRwkNQM"},
{"content":{"body":"is a chair around to say what's up next after lunch? wondering if i have time to actually have lunch","msgtype":"m.text"},"ts":1639601550484,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eiydLBhzSIyZSacGHJgWRw4ZmcsMxM6uhmKCMIVKmkU"},
{"content":{"body":"As part of wasm but the goal was both wasm and js","msgtype":"m.text"},"ts":1639601559913,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hhxxsWNtHmd1tw1MSDfqfyhxLxw1Kv3myfWPHd9B3ag"},
{"content":{"body":"shu: looks like \"regexp modifiers for stage 2\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: looks like &quot;regexp modifiers for stage 2&quot;","msgtype":"m.text"},"ts":1639601622907,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NewEG_1PTpaZjZB1fg9QE4x2uw3hTc0GB1x3ioBedzU"},
{"content":{"body":"perfect. no offense meant to regexp abyss gazers, i've just chosen a different pit","msgtype":"m.text"},"ts":1639601643698,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ky3U4zOLiD46gHRKEG37qwe8orvGnIkoIb9e0gZBXLs"},
{"content":{"body":"we all need something to scare us to sleep at night","msgtype":"m.text"},"ts":1639601763096,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$RDfTc9lFrT2bTn7bPb8I7sn6xYUfdnWysRsiRdUR8Cw"},
{"content":{"body":"some chose regex, others ieee","msgtype":"m.text"},"ts":1639601768963,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$xZ1F7Q83c7C5II84Oz4LhTnWjwp64iWrZmpSSAyRKsg"},
{"content":{"body":"module loading... unicode...","msgtype":"m.text"},"ts":1639601866318,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H-P2dKeGT2KXBqjkpU9iaMBO8ZXjMyZeJ7g5gJUt9-8"},
{"content":{"body":"there are many options here","msgtype":"m.text"},"ts":1639601868769,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uSpUBOKrPxp_mX9Q3k0OVmkpewlt4ZGad9Sdn1rPk0Q"},
{"content":{"body":"prototype pollution, ohno.jpg","msgtype":"m.text"},"ts":1639601916001,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cy1nweYxCMOLqKwwYYLo0hX8Wyq6LISRQP4F95xcVvE"},
{"content":{"body":"Module loading indeed…","msgtype":"m.text"},"ts":1639601988137,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$33s8WX_AFarZHNVnlpQfzQ17oTbrYBgevaW75pmJnY8"},
{"content":{"body":"Promises and proxies","msgtype":"m.text"},"ts":1639602003737,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RFF9ssFd_d-5hWxKr1spdl2XxAzOwO5P88mKLhFoNX4"},
{"content":{"body":"We are starting the meeting!","msgtype":"m.text"},"ts":1639602049867,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$h0tGevmC_9lTeSnogOo5rj_v2ybK2aHg6BjITjZLlko"},
{"content":{"body":"I appreciate that Ron has individually justified each modifier, and I am now convinced that each one in the proposal is useful","msgtype":"m.text"},"ts":1639602387841,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MmlI_4Vs6hXkGQIM7zykjVQWZZM05EVuHJpxY7-sfko"},
{"content":{"body":"ljharb: he is about to answer your question, but see also https://github.com/tc39/proposal-regexp-modifiers/issues/2","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: he is about to answer your question, but see also https://github.com/tc39/proposal-regexp-modifiers/issues/2","msgtype":"m.text"},"ts":1639602437267,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3vVRadOdNYwqxBiUvg6RIUpafQ09DMdbxeaqAIBfYms"},
{"content":{"body":"i read that too and still wasn't sure i understood :-)","msgtype":"m.text"},"ts":1639602455386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OIMM0qdKanUqVoKDwhuDjSj0aaU1y4k0W2AZvSmilBY"},
{"content":{"body":"the justification given is a.) he thinks it's simpler and b.) it's very widely precedented","msgtype":"m.text"},"ts":1639602473733,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y7RYPw_7ET7eEJcn6--kMpj6wXRdW_hduZoUPuEHTbg"},
{"content":{"body":"though I guess I should just wait for the next slide","msgtype":"m.text"},"ts":1639602483935,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$43rCpSr4Mzq3KBXKbuZBxMBbxh7wvo8e1QQRCgiEzyo"},
{"content":{"body":"for regexp proposals, I do not respect precedent very much","msgtype":"m.text"},"ts":1639602660264,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5DC4QmED7Low6-YHpOPEdq4wyX4IyGfDZ6PqVub171c"},
{"content":{"body":"most regexp engines are an insane grab bag of any features someone thought to add","msgtype":"m.text"},"ts":1639602677112,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-sr9PqTQcntwdMwNCaWwOkGCm6LClPDhXzVxXiW4Wps"},
{"content":{"body":"in support of ^, I invite anyone to peruse https://github.com/kkos/oniguruma/blob/master/doc/RE","msgtype":"m.text"},"ts":1639602724158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lGPMwZFUBSrbQZkdq7LdXPiXZ_iHmWL2_HiMyd3R22U"},
{"content":{"body":" * in support of ^, I invite anyone to peruse https://github.com/kkos/oniguruma/blob/master/doc/RE","m.new_content":{"body":"in support of ^, I invite anyone to peruse https://github.com/kkos/oniguruma/blob/master/doc/RE","msgtype":"m.text"},"m.relates_to":{"event_id":"$lGPMwZFUBSrbQZkdq7LdXPiXZ_iHmWL2_HiMyd3R22U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639602759141,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qENAmlfHu0KSkYHRTtonjOV_BSy_K2YkQPeg0dm4JhM"},
{"content":{"body":"oh backrefs are a good question","msgtype":"m.text"},"ts":1639603266880,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8J_HrV7oI4FGt5HC0XEFHobYe1mNb90hjGF836H55mA"},
{"content":{"body":"I agree with rbuckton's intuition though, that it has to be an exact match","msgtype":"m.text"},"ts":1639603285086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YgSGYGXz75pD1EwNeB9552MpPEzFnCLEeDPjPboZtzo"},
{"content":{"body":"re: yulia, ignorecase is definitely the one I expect to use, but given that we're doing that it seems worth adding the other reasonable ones as well","msgtype":"m.text"},"ts":1639603516263,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8QxRsU3MgSBMeh9RkkbtmpphzjoVbLAjjQevGif_mT4"},
{"content":{"body":"Yeah backrefs are abso a match for the exact substring, you never reevaluate the pattern. `/(...)\\1/` doesn't match any random six character, only things like \"foofoo\"","format":"org.matrix.custom.html","formatted_body":"Yeah backrefs are abso a match for the exact substring, you never reevaluate the pattern. <code>/(...)\\1/</code> doesn't match any random six character, only things like &quot;foofoo&quot;","msgtype":"m.text"},"ts":1639603774828,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fGl9_nXPCfiPUMypKKabTv_S0cYlRyjrjHq9_lRJ6yo"},
{"content":{"body":"`/(...)\\1/i.exec('abcABC')` matches","format":"org.matrix.custom.html","formatted_body":"<code>/(...)\\1/i.exec('abcABC')</code> matches","msgtype":"m.text"},"ts":1639603908570,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZytewG2Xk_cC7JaTMdw16VMblbipw30k2OZPdXU20U4"},
{"content":{"body":"It's not exact","msgtype":"m.text"},"ts":1639603915295,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ABijaE4iRqHGnmlYRuhFreu8PJLol1XeQ4cacuPWDVU"},
{"content":{"body":"TIL","msgtype":"m.text"},"ts":1639604039782,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pOrzhS9AAs9Gt9QoFrOZJsy1_CMlQy67cg_9PCT1wQg"},
{"content":{"body":"oh huh, that's weird","msgtype":"m.text"},"ts":1639604063545,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$TeB1nea9DujZu90gpA0RtDdU9thc0Q2tF-YHmH2dF90"},
{"content":{"body":"only allowing x in regex strings is a good idea","msgtype":"m.text"},"ts":1639604075987,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$M86USwsgUeli440uAPGs4nIZr-yeZ7NfX6t9V_DSC9w"},
{"content":{"body":"I would think `/(…)(?i:\\1)/.exec('abcABC')` would also match","format":"org.matrix.custom.html","formatted_body":"I would think <code>/(…)(?i:\\1)/.exec('abcABC')</code> would also match","msgtype":"m.text"},"ts":1639604099909,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SzXu_H2fJSE0xl_b78tMNIF1nLi6wleDnvIdPN5Y5Tw"},
{"content":{"body":" * I would think `/(...)(?i:\\1)/.exec('abcABC')` would also match","format":"org.matrix.custom.html","formatted_body":" * I would think <code>/(...)(?i:\\1)/.exec('abcABC')</code> would also match","m.new_content":{"body":"I would think `/(...)(?i:\\1)/.exec('abcABC')` would also match","format":"org.matrix.custom.html","formatted_body":"I would think <code>/(...)(?i:\\1)/.exec('abcABC')</code> would also match","msgtype":"m.text"},"m.relates_to":{"event_id":"$SzXu_H2fJSE0xl_b78tMNIF1nLi6wleDnvIdPN5Y5Tw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639604107580,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Huoh9Ko8dguA2wPZ72P1kNdWaLEAZccOOgaQ-4d0nEw"},
{"content":{"body":"But `/(?i:(...))\\1/.exec('abcABC')` wouldn't.","format":"org.matrix.custom.html","formatted_body":"But <code>/(?i:(...))\\1/.exec('abcABC')</code> wouldn't.","msgtype":"m.text"},"ts":1639604138684,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$F7TRVWIgK7DsltHdMTozXHhwuz_3_aGZypWUyvSPufw"},
{"content":{"body":"given the above, i guess so sure","msgtype":"m.text"},"ts":1639604145301,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4BN0jt2MhrJW538QwI8AwqkjH5Aav_N7pUksLZgMNss"},
{"content":{"body":"Eg, the backreference controls the case sensitivity, not the match","msgtype":"m.text"},"ts":1639604155886,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vbDekeE7A7-L_DKBy0x88APaK9kGUXWCTJvF8MzN6hc"},
{"content":{"body":"just curious - has anyone actually explored what would happen to the web if we changed non-u-mode regexes so that invalid character escapes threw?","msgtype":"m.text"},"ts":1639604290604,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I4eMmHGzvxG0Mkt0lkkruy8eiqf7yZkidbQguuJ4sQA"},
{"content":{"body":"There are regex escapers which escape _everything_","format":"org.matrix.custom.html","formatted_body":"There are regex escapers which escape <em>everything</em>","msgtype":"m.text"},"ts":1639604323469,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QJL33KJOT6vhJCySoqxlj8uUBRDmko5ITp9DRVozW5M"},
{"content":{"body":"i have written code that would break","msgtype":"m.text"},"ts":1639604323990,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GqoNz1l1kzVcl8baxpY4kxlzTiXtE5A9rkxFAnWbfMI"},
{"content":{"body":"ok","msgtype":"m.text"},"ts":1639604329103,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OFAzo829sDmncsOGLKyjqp7EaBVE5f9jr3fGqQlKM0Y"},
{"content":{"body":"there's been an autofixing eslint rule in most styleguides for many years that removes any invalid escapes' backslash, so i was wondering if there was any chance it'd be viable","msgtype":"m.text"},"ts":1639604357964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OsLzv-_tp5Ai-lGVzues8B8AuQolWW3BrY4Zc0ohotc"},
{"content":{"body":"gotta remember runtime too, though","msgtype":"m.text"},"ts":1639604384520,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2M_0uhmlm5_eCLOUjy-Aa-cvIX8pMib5cPqspa8vAWM"},
{"content":{"body":"true","msgtype":"m.text"},"ts":1639604545160,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LRekOcUFd4cbrWWw4PvrmyF138GSnn7Fwrj9YaHE7rM"},
{"content":{"body":"I wonder what fraction of shipped JS follows one of the top three styleguides","msgtype":"m.text"},"ts":1639604704713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DgX6pV5fj5sd_2rCLpys7W5IC_X5wygT5qfIdZwYIoQ"},
{"content":{"body":"10%, maybe?","msgtype":"m.text"},"ts":1639604714010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1oX3OoozHvq1D_tyitt1mS9B_rnX21YBFTUeC2nE0_c"},
{"content":{"body":"it's probably way lower than i assume, and way higher than anyone expects","msgtype":"m.text"},"ts":1639604724745,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qbU2Lz_UX6L7h5p8H_2wF-DvcMSBRI7zyJcqNMErQOY"},
{"content":{"body":"depends on how you count bundled dependencies, I assume","msgtype":"m.text"},"ts":1639604728507,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wHoI9euEHjvozS5oTFlPbGtyVLO69iZxN7a4s_NOp2o"},
{"content":{"body":"> <@bakkot:matrix.org> I wonder what fraction of shipped JS follows one of the top three styleguides\n\nIt would be interesting to see how it breaks down by project type. I assume \"active corporate JS\" is more like 99%.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DgX6pV5fj5sd_2rCLpys7W5IC_X5wygT5qfIdZwYIoQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I wonder what fraction of shipped JS follows one of the top three styleguides</blockquote></mx-reply>It would be interesting to see how it breaks down by project type. I assume &quot;active corporate JS&quot; is more like 99%.","m.relates_to":{"m.in_reply_to":{"event_id":"$DgX6pV5fj5sd_2rCLpys7W5IC_X5wygT5qfIdZwYIoQ"}},"msgtype":"m.text"},"ts":1639604968426,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$T7627CWKNWf8ho4maAk3Z-Xtx7DKr7dHI31_0y52GiE"},
{"content":{"body":"Academic, 1%.","msgtype":"m.text"},"ts":1639604994570,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$ykGqnP08xMxIrNj3xgOwfneoDjjFKPceV5e4Ultt2jY"},
{"content":{"body":"generative art NFTs ...","msgtype":"m.text"},"ts":1639605002998,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$0ek8KKv6jitYopLe3CpR70LUjRhtVpr2vQVMJ70rQkQ"},
{"content":{"body":"first three days of advent of code before quitting ...","msgtype":"m.text"},"ts":1639605032816,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$aLx9__5hliKefxkbQ2mEFeVhXvNzJRJyxLChHZ99TiI"},
{"content":{"body":"that last one, ouch, true TDZ material","msgtype":"m.text"},"ts":1639605048686,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rbp5611GbFCcuu9ILALgvWQoAcPxGZSFSHHJRpK5oTA"},
{"content":{"body":"`\"use regexp u\"` /s","format":"org.matrix.custom.html","formatted_body":"<code>&quot;use regexp u&quot;</code> /s","msgtype":"m.text"},"ts":1639605192297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mCfp-Og_DNbK5e-nVDBlr8a5Gf9dA0vKF4ri1RH-QrU"},
{"content":{"body":"sarahghp: view-source on amazon.com sometime","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: view-source on amazon.com sometime","msgtype":"m.text"},"ts":1639605248701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qJ__jqiOcMWft6dOJDcKiozgRmaC6a5kkkEDxAxJZn4"},
{"content":{"body":"\"currently-developed enterprise JS\" which follows a style guide is definitely closer to 0% than to 99%","msgtype":"m.text"},"ts":1639605333724,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$v4LjzRpxn_RYMLrHCap937fyaeMvhnG6rmiqPGslujA"},
{"content":{"body":"Hm maybe enterprise goes into the other side of the horseshoe. My previous milieux have all been very strict, but I guess that's mid-size.","msgtype":"m.text"},"ts":1639605540143,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$CX5_9iTc-DhT8Sb0XRusmZpqtAHCS_Q-5iJxNGgNrAM"},
{"content":{"body":"i think those teams which members of tc39 end up on are unusually likely to follow such practices","msgtype":"m.text"},"ts":1639605571805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$shTipMhEYxPmkDDduzUSmMQsHrvM5B7V0AwrAormEsk"},
{"content":{"body":"as part of my actual job I spend a lot of time looking at websites shipped by businesses","msgtype":"m.text"},"ts":1639605611429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VVXnWL-BNzljiS7LoL3AbgsfqjrpSaxE8O6YNY19jVQ"},
{"content":{"body":"things are... not... good","msgtype":"m.text"},"ts":1639605616466,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mlhG13YF62Ehs1VGfsDxDDCdYU4tqk9shdJpt8yS6Lc"},
{"content":{"body":"maybe I'm just too optimstic","msgtype":"m.text"},"ts":1639605621084,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$ovUUyiM-IGzi-J5VYu_TYbRjQcK5hgWla7aLpZlakvo"},
{"content":{"body":":D","msgtype":"m.text"},"ts":1639605622083,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$ZEiRsCOcStvBc6ekOWX6-GaLFONbmK9ZQvmiE8vp43I"},
{"content":{"body":"i missed the shape of Miles's concern, it's about houdini?","msgtype":"m.text"},"ts":1639607200064,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kGNQjPCoB_CGekMvWhoLHBN7uQjxY6uCKMvZVuJamWg"},
{"content":{"body":"> <@shuyuguo:matrix.org> i missed the shape of Miles's concern, it's about houdini?\n\nBasically that people who care about line breaking usually care about text layout in general, which Houdini is already trying to solve.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kGNQjPCoB_CGekMvWhoLHBN7uQjxY6uCKMvZVuJamWg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i missed the shape of Miles&#39;s concern, it&#39;s about houdini?</blockquote></mx-reply>Basically that people who care about line breaking usually care about text layout in general, which Houdini is already trying to solve.","m.relates_to":{"m.in_reply_to":{"event_id":"$kGNQjPCoB_CGekMvWhoLHBN7uQjxY6uCKMvZVuJamWg"}},"msgtype":"m.text"},"ts":1639607240161,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$92MKO0slBWY2HWWj7Ua-9NfxAH4BUbefUiAQTcYuJuM"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1639607251059,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-nWLeKekeGGVeOzLn7C1PCJNfx7_LDA9JP8LXnOAquw"},
{"content":{"body":"I personally think that it is reasonable to put it in Intl, rather than Houdini, because plain-text line breaking without other graphical text layout is a concern of many CLI apps.","msgtype":"m.text"},"ts":1639607266617,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JraafVCXGezazNLo41K32mfLuMiITBLApblH3I9cn2I"},
{"content":{"body":" * I personally think that it is reasonable to put it in Intl because line breaking alone is a concern of many CLI apps.","m.new_content":{"body":"I personally think that it is reasonable to put it in Intl because line breaking alone is a concern of many CLI apps.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JraafVCXGezazNLo41K32mfLuMiITBLApblH3I9cn2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639607277855,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$U6ZpAHt_ZdLXIpeXeywR_2JY9TeUxIdr98baIFhHc6o"},
{"content":{"body":" * I personally think that it is reasonable to put it in Intl because plain-text line breaking without other graphical text layout is a concern of many CLI apps.","m.new_content":{"body":"I personally think that it is reasonable to put it in Intl because plain-text line breaking without other graphical text layout is a concern of many CLI apps.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JraafVCXGezazNLo41K32mfLuMiITBLApblH3I9cn2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639607308376,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$j1t341liO3-EErlFYaRswcFRyP6QTpISZOVR1Un2bto"},
{"content":{"body":" * I personally think that it is reasonable to put it in Intl, rather than Houdini, because plain-text line breaking without other graphical text layout is a concern of many CLI apps.","m.new_content":{"body":"I personally think that it is reasonable to put it in Intl, rather than Houdini, because plain-text line breaking without other graphical text layout is a concern of many CLI apps.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JraafVCXGezazNLo41K32mfLuMiITBLApblH3I9cn2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639607337314,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$onKkjjJAZJXt23lIyYZ7K2TLO2NWavUDrCriD9vWt34"}
]