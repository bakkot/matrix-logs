[
{"content":{"body":"I feel dumb but can somebody tell me what test262 directory a test for `null[{ toString: () => { ... } }]` belongs in?","format":"org.matrix.custom.html","formatted_body":"I feel dumb but can somebody tell me what test262 directory a test for <code>null[{ toString: () =&gt; { ... } }]</code> belongs in?","m.mentions":{},"msgtype":"m.text"},"ts":1713412399757,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$8_00tfbecYSovip_KPjKWJN6eucF4dFeTJvigHMnHqs"},
{"content":{"body":" * I feel dumb but can somebody tell me what test262 directory a test for `null[{ toString() { ... } }]` belongs in?","format":"org.matrix.custom.html","formatted_body":" * I feel dumb but can somebody tell me what test262 directory a test for <code>null[{ toString() { ... } }]</code> belongs in?","m.mentions":{},"m.new_content":{"body":"I feel dumb but can somebody tell me what test262 directory a test for `null[{ toString() { ... } }]` belongs in?","format":"org.matrix.custom.html","formatted_body":"I feel dumb but can somebody tell me what test262 directory a test for <code>null[{ toString() { ... } }]</code> belongs in?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8_00tfbecYSovip_KPjKWJN6eucF4dFeTJvigHMnHqs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713412417707,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yRYqtXSgtjitVwR6nZhnPNc_GHwgHR1bmy9FESpKocc"},
{"content":{"body":"e.g. `language/expressions/property-accessors` seems like it's about _specific_ properties to access and not about the general concept of how \"bracket access\" should operate","format":"org.matrix.custom.html","formatted_body":"e.g. <code>language/expressions/property-accessors</code> seems like it's about <em>specific</em> properties to access and not about the general concept of how \"bracket access\" should operate","m.mentions":{},"msgtype":"m.text"},"ts":1713412932893,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$QAa0tp6s25nJ7x-mYuRmtqmUG3rrPn5SMhef5rha4AQ"},
{"content":{"body":"rkirsling: I don't see an obvious place for it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: I don't see an obvious place for it","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"msgtype":"m.text"},"ts":1713414970285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e_TBwjUt55MPU1KaOtNFu0bsT21r56AGdpzdXNgy4WQ"},
{"content":{"body":"so... make `language/expressions/member-expression`?","format":"org.matrix.custom.html","formatted_body":"so... make <code>language/expressions/member-expression</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1713414989041,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-v0tUrKZMUwIbUQI3rQThI-Tm_1HM2cV5OAJe6rBV4c"},
{"content":{"body":"can do ","msgtype":"m.text"},"ts":1713415184531,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$wxNcubXtY1Qu5yUQlBDQYUospkJueYe2aM4_cx-EXE4"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: I just realized that I had previously suggested a `Function.prototype.try`, and that kind of conflicts with `Promise.try` in that `Promise` inherits from `Function` but `Promise.try` is a different thing than `Function.prototype.try` would be\n\ndoes it have a receiver parameter?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m465QHFF5xwqzs6Ic5H4zK_0ZY-IL3rLUtjNa2im5qg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br /><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I just realized that I had previously suggested a <code>Function.prototype.try</code>, and that kind of conflicts with <code>Promise.try</code> in that <code>Promise</code> inherits from <code>Function</code> but <code>Promise.try</code> is a different thing than <code>Function.prototype.try</code> would be</blockquote></mx-reply>does it have a receiver parameter?","m.relates_to":{"m.in_reply_to":{"event_id":"$m465QHFF5xwqzs6Ic5H4zK_0ZY-IL3rLUtjNa2im5qg"}},"msgtype":"m.text"},"ts":1713442130935,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ASfot7sUX737ggFrdsqmb8RZQ-AdgzYm-5b8e1ex_WI"},
{"content":{"body":"a receiver param for function try is awkward imo","msgtype":"m.text"},"ts":1713445845155,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7IUHMCoh_djmWhHdFO04EQq4Fnje93rrSHTs_AutUoU"},
{"content":{"body":"`fn(...args)!?` and `obj.method(...args)!?` syntax instead of `.try`, so that there is no question problem with the receiver?","format":"org.matrix.custom.html","formatted_body":"<code>fn(...args)!?</code> and <code>obj.method(...args)!?</code> syntax instead of <code>.try</code>, so that there is no question problem with the receiver?","m.mentions":{},"msgtype":"m.text"},"ts":1713446971942,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LqUU72jyJS6zc2JmX40IKcmtcHhWE1Nddy6OSemdnh8"},
{"content":{"body":"Are we talking about Rust? ðŸ˜‰","msgtype":"m.text"},"ts":1713447087680,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$B_FqfcicT_ohIEUpGKrTBvmZvJgSyMe9rLV49e1kETI"},
{"content":{"body":"Part of me feels like it should be a static helper. As this is the year of `Object.groupBy` and `Promise.try` but we don't have a class for what this returns. Or maybe we wait until we do and then it's `Result.try(fn)`","format":"org.matrix.custom.html","formatted_body":"Part of me feels like it should be a static helper. As this is the year of `Object.groupBy` and `Promise.try` but we don't have a class for what this returns. Or maybe we wait until we do and then it's `Result.try(fn)`","msgtype":"m.text"},"ts":1713450497325,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Y_AnlCc5AfUAN5t9F_1JKROjY9rryTXjiMV2zYES4Bw"},
{"content":{"body":"It is not worth having syntax for this","m.mentions":{},"msgtype":"m.text"},"ts":1713464049072,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GKCttSE3DysPMeCVo-IwdbR8S2SZiy_S3kedSDBIxJ8"},
{"content":{"body":"For the specifying the receiver, `Function.prototype.tryCall`","format":"org.matrix.custom.html","formatted_body":"For the specifying the receiver, <code>Function.prototype.tryCall</code>","m.mentions":{},"msgtype":"m.text"},"ts":1713464083568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mYKAu-61TgxTr_P4ApGg4gifl05eV4gqeOvXHsbAflw"},
{"content":{"body":" * For the specifying the receiver, `Function.prototype.tryCall(obj.method, obj, ...args)`","format":"org.matrix.custom.html","formatted_body":" * For the specifying the receiver, <code>Function.prototype.tryCall(obj.method, obj, ...args)</code>","m.mentions":{},"m.new_content":{"body":"For the specifying the receiver, `Function.prototype.tryCall(obj.method, obj, ...args)`","format":"org.matrix.custom.html","formatted_body":"For the specifying the receiver, <code>Function.prototype.tryCall(obj.method, obj, ...args)</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mYKAu-61TgxTr_P4ApGg4gifl05eV4gqeOvXHsbAflw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713464136471,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$89G4enpv6TFfeo9wAlJzMPLVZiEgQez_SVMmJhJ1Cr0"},
{"content":{"body":"i don't think it makes sense to have a receiver argument at all. you can do that yourself with `.bind`. `Function.try` or `Result.try` makes much more sense to me.","format":"org.matrix.custom.html","formatted_body":"i don't think it makes sense to have a receiver argument at all. you can do that yourself with <code>.bind</code>. <code>Function.try</code> or <code>Result.try</code> makes much more sense to me.","m.mentions":{},"msgtype":"m.text"},"ts":1713465474277,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UTOvMEsiJmic_pV3Fd3a8d7g0ix3y0ydpt341otKdr8"},
{"content":{"body":"there's no need for a receiver parameter, you can just do `Function.prototype.call.bind(Function.prototype.call).try(fn, thisValue, ...args)`","format":"org.matrix.custom.html","formatted_body":"there's no need for a receiver parameter, you can just do <code>Function.prototype.call.bind(Function.prototype.call).try(fn, thisValue, ...args)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1713466479406,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mbVoFOZPDZd1RhIg0ewZFjC3FBeS_GtYZklaRiRv1ug"},
{"content":{"body":"uhhhh I would much prefer to write `obj.meth.tryCall(obj, ...args)` instead of that","format":"org.matrix.custom.html","formatted_body":"uhhhh I would much prefer to write <code>obj.meth.tryCall(obj, ...args)</code> instead of that","m.mentions":{},"msgtype":"m.text"},"ts":1713466511643,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fxyZICOHHovsc3osbgO0v2QMdpDmStYZNLmfYI9-VFg"},
{"content":{"body":"I often save this \"call-bound call\" (`Function.prototype.call.bind(Function.prototype.call`) and use it throughout my programs","format":"org.matrix.custom.html","formatted_body":"I often save this \"call-bound call\" (<code>Function.prototype.call.bind(Function.prototype.call</code>) and use it throughout my programs","m.mentions":{},"msgtype":"m.text"},"ts":1713466516362,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yV6-6se8W8Zx5RPgGNFS93SbKs9-e6FcNQriGVrC0lI"},
{"content":{"body":"maybe instead we need to introduce a `Reflect.call` or something that has it pre-defined","format":"org.matrix.custom.html","formatted_body":"maybe instead we need to introduce a <code>Reflect.call</code> or something that has it pre-defined","m.mentions":{},"msgtype":"m.text"},"ts":1713466531605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lM2T9pf6aVizerVmtY-MPLxN50xiSY2Z_S0B71P15Uw"},
{"content":{"body":"https://github.com/js-choi/proposal-function-demethodize","m.mentions":{},"msgtype":"m.text"},"ts":1713466557907,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jdBx_RE1TFBiqPr0WkMndcB9gEatx2_gazhprvHhFbg"},
{"content":{"body":"lol nice: https://www.npmjs.com/package/call-bind","m.mentions":{},"msgtype":"m.text"},"ts":1713466606674,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KXNxX__agP_IzhbFDn51S4gRuomr7mRX54K3NklaVkU"},
{"content":{"body":"https://github.com/tc39/proposal-call-this","m.mentions":{},"msgtype":"m.text"},"ts":1713466612219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$idUcRKPUNsk7dR4JMgQpwBWs5gqUoXvSPMK0VtwaF3Y"},
{"content":{"body":"I am not in favor of new syntax but yes a new method would be good","m.mentions":{},"msgtype":"m.text"},"ts":1713466642770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qmXP2jaEhLYP8E222OcZzbguSRKGs5ALKyLzn4-w4RQ"},
{"content":{"body":"I think some people may be opposed to it being on `Reflect`, but it seems so nice to have `call` sitting next to `apply` there","format":"org.matrix.custom.html","formatted_body":"I think some people may be opposed to it being on <code>Reflect</code>, but it seems so nice to have <code>call</code> sitting next to <code>apply</code> there","m.mentions":{},"msgtype":"m.text"},"ts":1713466687972,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rfaNGhvGHFYDJL7-I4Gxsd1EKxAyD_ajJfsYdcRXgbg"},
{"content":{"body":"I don't know why the current dislike of receiver is so prevalent (cf. [proposal-async-context#80](https://github.com/tc39/proposal-async-context/issues/80) and the aforementioned [proposal-promise-try#15](https://github.com/tc39/proposal-promise-try/issues/15#issuecomment-2045965423)) and assumed to be permanent, but I very much dislike the corresponding fracturing of the language in which new proposals gratuitously diverge from Function.prototype.{apply,call} and Reflect.applyâ€”_especially_ when discussion in plenary has raised opposition to anything that encourages more use of things like `.bind` and arrow wrappers.","format":"org.matrix.custom.html","formatted_body":"I don't know why the current dislike of receiver is so prevalent (cf. <a href=\"https://github.com/tc39/proposal-async-context/issues/80\">proposal-async-context#80</a> and the aforementioned <a href=\"https://github.com/tc39/proposal-promise-try/issues/15#issuecomment-2045965423\">proposal-promise-try#15</a>) and assumed to be permanent, but I very much dislike the corresponding fracturing of the language in which new proposals gratuitously diverge from Function.prototype.{apply,call} and Reflect.applyâ€”<em>especially</em> when discussion in plenary has raised opposition to anything that encourages more use of things like <code>.bind</code> and arrow wrappers.","m.mentions":{},"msgtype":"m.text"},"ts":1713466689145,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$X8h4RGFfT0Oc-PLy75LeAJZwwW8DsJthm_MH0LDHqNA"},
{"content":{"body":"Richard Gibson: maybe because most of the time you don't need to specify receiver, and when you do, you have call-bound call to bail you out?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: maybe because most of the time you don't need to specify receiver, and when you do, you have call-bound call to bail you out?","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1713466761644,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$h_6SuupNW_Gxe0AibR9HD6S5_sYOdLLxVwzB4-HB_DM"},
{"content":{"body":"`Function.prototype.apply/call` and `Reflect.apply` are special helpers, which are very rarely sensible precedent to use for other methods","format":"org.matrix.custom.html","formatted_body":"<code>Function.prototype.apply/call</code> and <code>Reflect.apply</code> are special helpers, which are very rarely sensible precedent to use for other methods","m.mentions":{},"msgtype":"m.text"},"ts":1713466762300,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rVxk2zowelM8B7BeVG0v_rLZTo9xH0IjY5D3FP7V9SA"},
{"content":{"body":"I am happy to have a `Function.prototype.tryCall` sitting next to `Function.prototype.try` for that use case, but I don't want to make the signature of methods like that worse for the common case of no receiver just for parity with `Function.prototype.call` ","format":"org.matrix.custom.html","formatted_body":"I am happy to have a <code>Function.prototype.tryCall</code> sitting next to <code>Function.prototype.try</code> for that use case, but I don't want to make the signature of methods like that worse for the common case of no receiver just for parity with <code>Function.prototype.call</code>","m.mentions":{},"msgtype":"m.text"},"ts":1713466833345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$59JIc3hEZGWws_oDJNCMb6sbaMlLLeaU3cEOKA_bQTU"},
{"content":{"body":"the receiver argument in array methods is terrible and if not for precedent, i'd hope none of the new methods would have had it. bind, or an arrow, is The Way","m.mentions":{},"msgtype":"m.text"},"ts":1713466851804,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Lr4YvNsXShUYavhp3MRgirCYwQYP8apTf4O05vQHWZA"},
{"content":{"body":"> <@bakkot:matrix.org> I am happy to have a `Function.prototype.tryCall` sitting next to `Function.prototype.try` for that use case, but I don't want to make the signature of methods like that worse for the common case of no receiver just for parity with `Function.prototype.call`\n\nwhich is also why \"receiver\" and \"varargs\" is a problem, because having to put `null` when you don't care about the receiver sucks","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$59JIc3hEZGWws_oDJNCMb6sbaMlLLeaU3cEOKA_bQTU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I am happy to have a <code>Function.prototype.tryCall</code> sitting next to <code>Function.prototype.try</code> for that use case, but I don't want to make the signature of methods like that worse for the common case of no receiver just for parity with <code>Function.prototype.call</code></blockquote></mx-reply>which is also why \"receiver\" and \"varargs\" is a problem, because having to put <code>null</code> when you don't care about the receiver sucks","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$59JIc3hEZGWws_oDJNCMb6sbaMlLLeaU3cEOKA_bQTU"}},"msgtype":"m.text"},"ts":1713466877290,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X54bgXE0EOPTSdqXppJSWQjs0EaMOlcEB-17NZABPrw"},
{"content":{"body":"so, we should just omit the receiver","m.mentions":{},"msgtype":"m.text"},"ts":1713466882681,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7ngMi0p5s2zRkAgTS94GahzAPmx14Ca1U61caeN6Mn0"},
{"content":{"body":" * so, we should just omit the receiver. the language has lots of tools to handle that, and there's proposals for the ones it doesn't.","m.mentions":{},"m.new_content":{"body":"so, we should just omit the receiver. the language has lots of tools to handle that, and there's proposals for the ones it doesn't.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7ngMi0p5s2zRkAgTS94GahzAPmx14Ca1U61caeN6Mn0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713466898899,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$27pK-oIsN1Q4rrOArh99FEOqoskg23pLaybCKXmOCeE"},
{"content":{"body":"> bind, or an arrow, is The Way\n\nhave you forgotten that implementers specifically objected to proposals that would encourage their use?\n\n> **most of the time** you don't need to specify receiver\n> worse for the **common case** of no receiver\n\nEmphasis mine. This is presumptive about future language use, but even so I would agree if not for precedent in the existing ways to call functions with arbitrary arguments. To have new signatures leave no room for an argument that is present in all old ones seems like unnecessary complexity. If you want to break with the past and foster arrow functions, then make that be necessary for arguments as well (e.g., `try(() => fn(â€¦))`).","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>bind, or an arrow, is The Way</p>\n</blockquote>\n<p>have you forgotten that implementers specifically objected to proposals that would encourage their use?</p>\n<blockquote>\n<p><strong>most of the time</strong> you don't need to specify receiver<br>worse for the <strong>common case</strong> of no receiver</p>\n</blockquote>\n<p>Emphasis mine. This is presumptive about future language use, but even so I would agree if not for precedent in the existing ways to call functions with arbitrary arguments. To have new signatures leave no room for an argument that is present in all old ones seems like unnecessary complexity. If you want to break with the past and foster arrow functions, then make that be necessary for arguments as well (e.g., <code>try(() =&gt; fn(â€¦))</code>).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1713467338378,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$1aRChaRwTboCRy2U7AysE-U0VId3A4V5u2WTVvxzLJU"},
{"content":{"body":"To have new signatures specifically require the user to think about receivers is unnecessary complexity","m.mentions":{},"msgtype":"m.text"},"ts":1713467383544,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PrVu_zM-BV_rvH5M9ZR9ixybruNELFD7jMSSAN8-ze0"},
{"content":{"body":"> <@gibson042:matrix.org> > bind, or an arrow, is The Way\n> \n> have you forgotten that implementers specifically objected to proposals that would encourage their use?\n> \n> > **most of the time** you don't need to specify receiver\n> > worse for the **common case** of no receiver\n> \n> Emphasis mine. This is presumptive about future language use, but even so I would agree if not for precedent in the existing ways to call functions with arbitrary arguments. To have new signatures leave no room for an argument that is present in all old ones seems like unnecessary complexity. If you want to break with the past and foster arrow functions, then make that be necessary for arguments as well (e.g., `try(() => fn(â€¦))`).\n\nthat wasn't about encouraging their _use_, but their _overuse_","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1aRChaRwTboCRy2U7AysE-U0VId3A4V5u2WTVvxzLJU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><blockquote>\n<p>bind, or an arrow, is The Way</p>\n</blockquote>\n<p>have you forgotten that implementers specifically objected to proposals that would encourage their use?</p>\n<blockquote>\n<p><strong>most of the time</strong> you don't need to specify receiver<br />worse for the <strong>common case</strong> of no receiver</p>\n</blockquote>\n<p>Emphasis mine. This is presumptive about future language use, but even so I would agree if not for precedent in the existing ways to call functions with arbitrary arguments. To have new signatures leave no room for an argument that is present in all old ones seems like unnecessary complexity. If you want to break with the past and foster arrow functions, then make that be necessary for arguments as well (e.g., <code>try(() =&gt; fn(â€¦))</code>).</p>\n</blockquote></mx-reply>that wasn't about encouraging their <em>use</em>, but their <em>overuse</em>","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1aRChaRwTboCRy2U7AysE-U0VId3A4V5u2WTVvxzLJU"}},"msgtype":"m.text"},"ts":1713467568385,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4BfygHZ3tu0LMnkjvdza7i4maC-D8cnNWt-z0w_T_jI"},
{"content":{"body":"as for \"make it necessary for arguments as well\", i agree with that, which is why Promise.try didn't initially have that capacity, but folks wanted it so i added it","m.mentions":{},"msgtype":"m.text"},"ts":1713467608491,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hGPgYH0oPSdTVsZJbIBU0A-ihS-1Qol7eTUClj4WqNk"},
{"content":{"body":"I am happy to have _additional_ methods which allow specifying the receiver, but now that we have spread args there's no reason to use `Function.prototype.call/apply` except when specifying the receiver - specifying the receiver is what they're for. It really, really does not make sense to consider them precedent for other functions","format":"org.matrix.custom.html","formatted_body":"I am happy to have <em>additional</em> methods which allow specifying the receiver, but now that we have spread args there's no reason to use <code>Function.prototype.call/apply</code> except when specifying the receiver - specifying the receiver is what they're for. It really, really does not make sense to consider them precedent for other functions","m.mentions":{},"msgtype":"m.text"},"ts":1713467615463,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P1oR3rG4ge_1WdvIEd_y8_G-iinYHLbnnRSVfl9yR4k"},
{"content":{"body":"either way, \"no recevier, with arguments\" is way way more common than \"with a receiver\"","m.mentions":{},"msgtype":"m.text"},"ts":1713467624051,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NlwfnPXdZDRwTvUTp273ekMKRk30m0-qQdv9QfFH7v8"},
{"content":{"body":" * either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\"","m.mentions":{},"m.new_content":{"body":"either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NlwfnPXdZDRwTvUTp273ekMKRk30m0-qQdv9QfFH7v8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713467638796,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UkPL7FNQhpCuC7Jhs77kl3rInBtaIm9xSAgaR15yQZ4"},
{"content":{"body":" * either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally `obj.method(...args)`","format":"org.matrix.custom.html","formatted_body":" * either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally <code>obj.method(...args)</code>","m.mentions":{},"m.new_content":{"body":"either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally `obj.method(...args)`","format":"org.matrix.custom.html","formatted_body":"either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally <code>obj.method(...args)</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NlwfnPXdZDRwTvUTp273ekMKRk30m0-qQdv9QfFH7v8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713467656016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FCcanjsNFt2oDhzU9GHdK1b3rK8Y00Qmm5sZesHpyIo"},
{"content":{"body":"> <@ljharb:matrix.org> either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally `obj.method(...args)`\n\nby \"more common\" you're referring to authored code, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NlwfnPXdZDRwTvUTp273ekMKRk30m0-qQdv9QfFH7v8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>either way, \"no receiver, with arguments\" is way way more common than \"with a receiver\", at least for any usage that isn't literally <code>obj.method(...args)</code></blockquote></mx-reply>by \"more common\" you're referring to authored code, right?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NlwfnPXdZDRwTvUTp273ekMKRk30m0-qQdv9QfFH7v8"}},"msgtype":"m.text"},"ts":1713467668055,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$WSzzXyEn5sohkLreVgG_hy3QJrUeaQs-Ds9HqjPzlB0"},
{"content":{"body":"yes? if the alternative is \"generated code\", we should not care about what generated code does","m.mentions":{},"msgtype":"m.text"},"ts":1713467695476,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5UrKDoMJoy9euNTpohVFr61pDXD8GU2jJUb_qhAzID8"},
{"content":{"body":" * yes? if the alternative is \"generated code\", we should not care about what generated code does (wrt API design, only wrt breakage)","m.mentions":{},"m.new_content":{"body":"yes? if the alternative is \"generated code\", we should not care about what generated code does (wrt API design, only wrt breakage)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5UrKDoMJoy9euNTpohVFr61pDXD8GU2jJUb_qhAzID8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713467703509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mc_hySBtZlZYFcLuKjKZxXVvkzxoGmULR2UNfe6E8q0"},
{"content":{"body":" * yes? if the alternative is \"generated code\", we should not care about what generated code does (not wrt API design, only wrt breakage)","m.mentions":{},"m.new_content":{"body":"yes? if the alternative is \"generated code\", we should not care about what generated code does (not wrt API design, only wrt breakage)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5UrKDoMJoy9euNTpohVFr61pDXD8GU2jJUb_qhAzID8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713467709550,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SmvjL-GxGEhz50D21DYWRWKYAPaH5KGgDXWrzFz6OyE"},
{"content":{"body":" * yes? if the alternative is \"generated code\", we should not care about what generated code does (not wrt API design, i mean, only wrt breakage)","m.mentions":{},"m.new_content":{"body":"yes? if the alternative is \"generated code\", we should not care about what generated code does (not wrt API design, i mean, only wrt breakage)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5UrKDoMJoy9euNTpohVFr61pDXD8GU2jJUb_qhAzID8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713467741064,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bobPya7-aqJjsVJU_7kFNKXyM2MK70vd-UDp0oC51VQ"},
{"content":{"body":"It is worth caring about generated code, but that should take the form of supplying APIs suitable for generated code, not changing the APIs for human-authored code","m.mentions":{},"msgtype":"m.text"},"ts":1713467906868,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yxP3L77Njl_4201f8qWW_PZRgjS39bvGdhbIvBaohdE"},
{"content":{"body":"... human or llm I guess","m.mentions":{},"msgtype":"m.text"},"ts":1713467911428,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jGo2mCuXE3h4gR6iSQjmpBQ8pKXly1rcHTjNQsoiS1o"},
{"content":{"body":"> <@bakkot:matrix.org> To have new signatures specifically require the user to think about receivers is unnecessary complexity\n\n+1 to this, especially because of language learnability. `this`/receivers aren't things that come early when learning JS, especially because of how they differ from the equivalents in other languages. Even if `Promise.try` and `AsyncContext` are advanced use cases, language learning is non-linear.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PrVu_zM-BV_rvH5M9ZR9ixybruNELFD7jMSSAN8-ze0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>To have new signatures specifically require the user to think about receivers is unnecessary complexity</blockquote></mx-reply>+1 to this, especially because of language learnability. <code>this</code>/receivers aren't things that come early when learning JS, especially because of how they differ from the equivalents in other languages. Even if <code>Promise.try</code> and <code>AsyncContext</code> are advanced use cases, language learning is non-linear.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PrVu_zM-BV_rvH5M9ZR9ixybruNELFD7jMSSAN8-ze0"}},"msgtype":"m.text"},"ts":1713467927648,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6E6WesdynB55ZUvvZ8qb09m6xUgGZc_BlQwk9Zu0LNE"},
{"content":{"body":"fine, I yield","m.mentions":{},"msgtype":"m.text"},"ts":1713468014990,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$PxaQZp3aBxHv8tFjYDQwX_3vch4NopyFcUx0He7_tR0"},
{"content":{"body":"I also think an inline syntactic arrow fn doesnâ€™t have the same performance penalties that dynamic closure-returning helpers and `fn.bind()` would have.","format":"org.matrix.custom.html","formatted_body":"I also think an inline syntactic arrow fn doesnâ€™t have the same performance penalties that dynamic closure-returning helpers and <code data-md=\"`\">fn.bind()</code> would have.","msgtype":"m.text"},"ts":1713468695697,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WTk3Ufsbrrcj91AyZk1keiLqrXjSLF5hMnB-wmNsTaY"},
{"content":{"body":"Richard Gibson: \n> have you forgotten that implementers specifically objected to proposals that would encourage their use?\n\nThinking about \"how many closures is this going to imply are allocated in real use cases\" is different from \"thisArg should be a thing\". Signals try to pass the right `this` value to achieve a similar goal.","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>:</p>\n<blockquote>\n<p>have you forgotten that implementers specifically objected to proposals that would encourage their use?</p>\n</blockquote>\n<p>Thinking about \"how many closures is this going to imply are allocated in real use cases\" is different from \"thisArg should be a thing\". Signals try to pass the right <code>this</code> value to achieve a similar goal.</p>\n","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1713469247552,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NlfwdFEHalafh1zgivZnS3sr2uX07MQdMUpXTzNIlf4"},
{"content":{"body":" * I often save this \"call-bound call\" (`Function.prototype.call.bind(Function.prototype.call)`) and use it throughout my programs","format":"org.matrix.custom.html","formatted_body":" * I often save this \"call-bound call\" (<code>Function.prototype.call.bind(Function.prototype.call)</code>) and use it throughout my programs","m.mentions":{},"m.new_content":{"body":"I often save this \"call-bound call\" (`Function.prototype.call.bind(Function.prototype.call)`) and use it throughout my programs","format":"org.matrix.custom.html","formatted_body":"I often save this \"call-bound call\" (<code>Function.prototype.call.bind(Function.prototype.call)</code>) and use it throughout my programs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yV6-6se8W8Zx5RPgGNFS93SbKs9-e6FcNQriGVrC0lI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713475705364,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$J8lnuGJIM7Bd-nC0WDlyKXoK4R4kLgO1iM9p4W6wz6g"}
]