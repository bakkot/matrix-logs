[
{"content":{"body":"hello, is there any syntax pro? I'm stuck on designing cover grammar","m.mentions":{},"msgtype":"m.text"},"ts":1700322956293,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5wbnIpA5FvBya6Cwjjcu5eu0PfFcax86Zgyz_lSFWU8"},
{"content":{"body":"Grammar:\n\n```\nMatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n```\n\nThis is ambiguous with ExpressionStatement, therefore I need a CoverExpressionStatementAndMatchStatement grammar","format":"org.matrix.custom.html","formatted_body":"<p>Grammar:</p>\n<pre><code>MatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n</code></pre>\n<p>This is ambiguous with ExpressionStatement, therefore I need a CoverExpressionStatementAndMatchStatement grammar</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700323087854,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$BoqUHJqGms3bXHyee2Xhe8XCurZzL6HqA2y_9GRrCCc"},
{"content":{"body":" * Grammar:\n\n```\nMatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n```\n\nThis is ambiguous with ExpressionStatement (cannot decide `match (expr)` until see `{` or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar","format":"org.matrix.custom.html","formatted_body":" * <p>Grammar:</p>\n<pre><code>MatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n</code></pre>\n<p>This is ambiguous with ExpressionStatement (cannot decide <code>match (expr)</code> until see <code>{</code> or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar</p>\n","m.mentions":{},"m.new_content":{"body":"Grammar:\n\n```\nMatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n```\n\nThis is ambiguous with ExpressionStatement (cannot decide `match (expr)` until see `{` or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar","format":"org.matrix.custom.html","formatted_body":"<p>Grammar:</p>\n<pre><code>MatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n</code></pre>\n<p>This is ambiguous with ExpressionStatement (cannot decide <code>match (expr)</code> until see <code>{</code> or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BoqUHJqGms3bXHyee2Xhe8XCurZzL6HqA2y_9GRrCCc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323112718,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$INCXvIUMj0Tma5gJJdtAz9lntvFm2_abf_w2FiVBPns"},
{"content":{"body":" * Grammar:\n\n```\nMatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n```\n\nThis is ambiguous with ExpressionStatement (cannot decide production for `match (expr)` until see `{` or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar","format":"org.matrix.custom.html","formatted_body":" * <p>Grammar:</p>\n<pre><code>MatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n</code></pre>\n<p>This is ambiguous with ExpressionStatement (cannot decide production for <code>match (expr)</code> until see <code>{</code> or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar</p>\n","m.mentions":{},"m.new_content":{"body":"Grammar:\n\n```\nMatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n```\n\nThis is ambiguous with ExpressionStatement (cannot decide production for `match (expr)` until see `{` or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar","format":"org.matrix.custom.html","formatted_body":"<p>Grammar:</p>\n<pre><code>MatchStatement: `match` [nLTh] `(` Expression `) [nLTh] `{ MatchStatementClauses `;` `}`\n</code></pre>\n<p>This is ambiguous with ExpressionStatement (cannot decide production for <code>match (expr)</code> until see <code>{</code> or any other token), therefore I need a CoverExpressionStatementAndMatchStatement grammar</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BoqUHJqGms3bXHyee2Xhe8XCurZzL6HqA2y_9GRrCCc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323120540,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nYn84a8imGyxugjyp4PNptiVULeTjWJgt-W1ktMBkNM"},
{"content":{"body":"Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    match [no LineTerminator here] Arguments \n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":"<p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    match [no LineTerminator here] Arguments \n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700323248809,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$K9NpWwgjaL72IphpOXXjWyu3oq4LL4kgXA6_ft5Z93U"},
{"content":{"body":"```\nMatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n```\n\nThis looks good to me for now","format":"org.matrix.custom.html","formatted_body":"<pre><code>MatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n</code></pre>\n<p>This looks good to me for now</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700323310684,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4nroXrF4M5pVDkamK00h4mZ6Uk6TRTFNeiIDo0cTUyM"},
{"content":{"body":"```\nExpressionStatement[Yield, Await] :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n```\n\nThis one does not. It does not cover everything that can follow a CallExpression, like `match (expr) + 1` or `match(expr).prop`.","format":"org.matrix.custom.html","formatted_body":"<pre><code>ExpressionStatement[Yield, Await] :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n</code></pre>\n<p>This one does not. It does not cover everything that can follow a CallExpression, like <code>match (expr) + 1</code> or <code>match(expr).prop</code>.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700323419384,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$8H8HZxNx-AoxCGkwpxC2vd0_Kd-h9FF7VfAibqKLV8Q"},
{"content":{"body":"It looks like I need to add all expressions to this cover grammar (e.g. it can follow a `++` or `.x` or `[prop]` or `(...args`)) which is unrealistic.","format":"org.matrix.custom.html","formatted_body":"It looks like I need to add all expressions to this cover grammar (e.g. it can follow a <code>++</code> or <code>.x</code> or <code>[prop]</code> or <code>(...args</code>)) which is unrealistic.","m.mentions":{},"msgtype":"m.text"},"ts":1700323505982,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WOaMn7VzS9ao9CzJ33LW4xM4MHxKW7PhK3XFCdEbfcg"},
{"content":{"body":" * Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments \n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":" * <p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments \n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"m.new_content":{"body":"Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments \n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":"<p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments \n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$K9NpWwgjaL72IphpOXXjWyu3oq4LL4kgXA6_ft5Z93U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323555873,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Sx7urRs7XkDKHj5Ssr3SYDNInpQrs1sW7fJpzVDcQSo"},
{"content":{"body":" * ```\nExpressionStatement :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n```\n\nThis one does not. It does not cover everything that can follow a CallExpression, like `match (expr) + 1` or `match(expr).prop`.","format":"org.matrix.custom.html","formatted_body":" * <pre><code>ExpressionStatement :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n</code></pre>\n<p>This one does not. It does not cover everything that can follow a CallExpression, like <code>match (expr) + 1</code> or <code>match(expr).prop</code>.</p>\n","m.mentions":{},"m.new_content":{"body":"```\nExpressionStatement :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n```\n\nThis one does not. It does not cover everything that can follow a CallExpression, like `match (expr) + 1` or `match(expr).prop`.","format":"org.matrix.custom.html","formatted_body":"<pre><code>ExpressionStatement :\n        CoverExpressionStatementAndMatchStatement\n        (current definition)\n</code></pre>\n<p>This one does not. It does not cover everything that can follow a CallExpression, like <code>match (expr) + 1</code> or <code>match(expr).prop</code>.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8H8HZxNx-AoxCGkwpxC2vd0_Kd-h9FF7VfAibqKLV8Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323568019,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$31PdfdGnT4xOBseI4CtpjzpQyMTDKcAwkvVXxgXptts"},
{"content":{"body":" * Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` `(` Expression `)`\n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":" * <p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` `(` Expression `)`\n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"m.new_content":{"body":"Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` `(` Expression `)`\n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":"<p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` `(` Expression `)`\n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$K9NpWwgjaL72IphpOXXjWyu3oq4LL4kgXA6_ft5Z93U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323616624,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3dlaLhKLbHDYhaFR7GW079qGWMJz5Wm7M8EPPaKBmPw"},
{"content":{"body":" * Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":" * <p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"m.new_content":{"body":"Now I have this cover grammar:\n\n```\nCoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n```\n\nThis can cover the match head `match (a, b, c)` (where `,` is comma operator) and a call expression `match (a, b, c)` (where `,` is parameter separator). But I don't know how to use it in ExpressionStatement","format":"org.matrix.custom.html","formatted_body":"<p>Now I have this cover grammar:</p>\n<pre><code>CoverExpressionStatementAndMatchStatement :\n    `match` [no LineTerminator here] Arguments\n</code></pre>\n<p>This can cover the match head <code>match (a, b, c)</code> (where <code>,</code> is comma operator) and a call expression <code>match (a, b, c)</code> (where <code>,</code> is parameter separator). But I don't know how to use it in ExpressionStatement</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$K9NpWwgjaL72IphpOXXjWyu3oq4LL4kgXA6_ft5Z93U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323625208,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$TkO6G_5IIDvD6eT9B-yXU6Bl5hpOPxFp7Vg3wIkPxNI"},
{"content":{"body":" * ```\nMatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n```\n\nThis looks good to me for now","format":"org.matrix.custom.html","formatted_body":" * <pre><code>MatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n</code></pre>\n<p>This looks good to me for now</p>\n","m.mentions":{},"m.new_content":{"body":"```\nMatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n```\n\nThis looks good to me for now","format":"org.matrix.custom.html","formatted_body":"<pre><code>MatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to this in MatchStatement\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n</code></pre>\n<p>This looks good to me for now</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4nroXrF4M5pVDkamK00h4mZ6Uk6TRTFNeiIDo0cTUyM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323658314,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$OHcqLoh5R5QCEM5tuqGjJK8UB6pR_xRd6CyfQxEWwSQ"},
{"content":{"body":" * ```\nMatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n```\n\nThis looks good to me for now","format":"org.matrix.custom.html","formatted_body":" * <pre><code>MatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n</code></pre>\n<p>This looks good to me for now</p>\n","m.mentions":{},"m.new_content":{"body":"```\nMatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n```\n\nThis looks good to me for now","format":"org.matrix.custom.html","formatted_body":"<pre><code>MatchStatement :\n    CoverExpressionStatementAndMatchStatement [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n\n// Refined to\nMatchHead :\n    `match` [no LineTerminator here] `(` Expression `)` [no LineTerminator here] `{ ` MatchStatementClauses `;` `}`\n</code></pre>\n<p>This looks good to me for now</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4nroXrF4M5pVDkamK00h4mZ6Uk6TRTFNeiIDo0cTUyM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700323673205,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JTc7F3YohJrq4fWJXGBjMz1kf4NDgSVF02Y7v4CbFVI"},
{"content":{"body":"Jack Works: for that approach, I think you'll want to use and rename (and probably generalize) [|CoverCallExpressionAndAsyncArrowHead|](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead), e.g.\n```\n<emu-grammar type=\"definition\">\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n</emu-grammar>\n<h2>Supplemental Syntax</h2>\n<p>\n  When processing an instance of the production<br>\n  <emu-grammar>MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`</emu-grammar><br>\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n</p>\n<emu-grammar type=\"definition\">\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n</emu-grammar>\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: for that approach, I think you'll want to use and rename (and probably generalize) <a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead\">|CoverCallExpressionAndAsyncArrowHead|</a>, e.g.</p>\n<pre><code>&lt;emu-grammar type=\"definition\"&gt;\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n&lt;/emu-grammar&gt;\n&lt;h2&gt;Supplemental Syntax&lt;/h2&gt;\n&lt;p&gt;\n  When processing an instance of the production&lt;br&gt;\n  &lt;emu-grammar&gt;MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`&lt;/emu-grammar&gt;&lt;br&gt;\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n&lt;/p&gt;\n&lt;emu-grammar type=\"definition\"&gt;\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n&lt;/emu-grammar&gt;\n</code></pre>\n","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"msgtype":"m.text"},"ts":1700338529445,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ILQwA2cnhBFLlkjzPjh2n-0Kt-9KOtgBW1sUxAt9fVI"},
{"content":{"body":" * Jack Works: for that approach, I think you'll want to use and rename (and probably generalize) [|CoverCallExpressionAndAsyncArrowHead|](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead), e.g.\n\n```\n<emu-grammar type=\"definition\">\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n</emu-grammar>\n<h2>Supplemental Syntax</h2>\n<p>\n  When processing an instance of the production<br>\n  <emu-grammar>MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`</emu-grammar><br>\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n</p>\n<emu-grammar type=\"definition\">\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n</emu-grammar>\n```\n(following the pattern in [Async Arrow Function Definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-arrow-function-definitions))","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: for that approach, I think you'll want to use and rename (and probably generalize) <a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead\">|CoverCallExpressionAndAsyncArrowHead|</a>, e.g.</p>\n<pre><code>&lt;emu-grammar type=\"definition\"&gt;\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n&lt;/emu-grammar&gt;\n&lt;h2&gt;Supplemental Syntax&lt;/h2&gt;\n&lt;p&gt;\n  When processing an instance of the production&lt;br&gt;\n  &lt;emu-grammar&gt;MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`&lt;/emu-grammar&gt;&lt;br&gt;\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n&lt;/p&gt;\n&lt;emu-grammar type=\"definition\"&gt;\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n&lt;/emu-grammar&gt;\n</code></pre>\n<p>(following the pattern in <a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-arrow-function-definitions\">Async Arrow Function Definitions</a>)</p>\n","m.mentions":{},"m.new_content":{"body":"Jack Works: for that approach, I think you'll want to use and rename (and probably generalize) [|CoverCallExpressionAndAsyncArrowHead|](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead), e.g.\n\n```\n<emu-grammar type=\"definition\">\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n</emu-grammar>\n<h2>Supplemental Syntax</h2>\n<p>\n  When processing an instance of the production<br>\n  <emu-grammar>MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`</emu-grammar><br>\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n</p>\n<emu-grammar type=\"definition\">\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n</emu-grammar>\n```\n(following the pattern in [Async Arrow Function Definitions](https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-arrow-function-definitions))","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: for that approach, I think you'll want to use and rename (and probably generalize) <a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#prod-CoverCallExpressionAndAsyncArrowHead\">|CoverCallExpressionAndAsyncArrowHead|</a>, e.g.</p>\n<pre><code>&lt;emu-grammar type=\"definition\"&gt;\n  MatchStatement : \n    CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`\n&lt;/emu-grammar&gt;\n&lt;h2&gt;Supplemental Syntax&lt;/h2&gt;\n&lt;p&gt;\n  When processing an instance of the production&lt;br&gt;\n  &lt;emu-grammar&gt;MatchStatement : CoverCallExpressionAndAsyncArrowHeadAndMatchHead [no LineTerminator here] `{` MatchStatementClauses `;` `}`&lt;/emu-grammar&gt;&lt;br&gt;\n  the interpretation of |CoverCallExpressionAndAsyncArrowHeadAndMatchHead| is refined using the following grammar:\n&lt;/p&gt;\n&lt;emu-grammar type=\"definition\"&gt;\n  MatchHead :\n    `match` [no LineTerminator here] `(` Expression `)\n&lt;/emu-grammar&gt;\n</code></pre>\n<p>(following the pattern in <a href=\"https://tc39.es/ecma262/multipage/ecmascript-language-functions-and-classes.html#sec-async-arrow-function-definitions\">Async Arrow Function Definitions</a>)</p>\n","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ILQwA2cnhBFLlkjzPjh2n-0Kt-9KOtgBW1sUxAt9fVI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700338662165,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Ig5DY8zDFmaVcTYveCfTHkN_frlGlWjWERpah9OPTmQ"}
]