[
{"content":{"body":"they do have a common brand now, itâ€™s what Iterator.from provides","msgtype":"m.text"},"ts":1662255736345,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10QLF2BejFysYIoYCarK_jw56rsN9h0JuHqrfHhNX58"},
{"content":{"body":"and a userland class will be wrapped by a branded object.","msgtype":"m.text"},"ts":1662255760929,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e072KMG2Z_bPEr8up2sWqB95SRxjQvB5acyIntvMEcc"},
{"content":{"body":"Iterator.from checks `instanceof Iterator` and returns the original object if that returns true","format":"org.matrix.custom.html","formatted_body":"Iterator.from checks <code>instanceof Iterator</code> and returns the original object if that returns true","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iterator.from checks `instanceof Iterator` and returns the original object if that returns true","mimetype":"text/plain"},{"body":"Iterator.from checks <code>instanceof Iterator</code> and returns the original object if that returns true","mimetype":"text/html"}]},"ts":1662305799724,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$45XrHddSUQ0uAhQKRFqYSeMAz6fDRvEVLbKijf5JtsY"},
{"content":{"body":"so no, it does not provide a common brand","msgtype":"m.text","org.matrix.msc1767.text":"so no, it does not provide a common brand"},"ts":1662305812231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U2wqX3o8u6m58iDSG7IUWObth7RAo2J6YriJtsHAawA"},
{"content":{"body":" * so no, it does not provide a common brand","m.new_content":{"body":"so no, it does not provide a common brand","msgtype":"m.text","org.matrix.msc1767.text":"so no, it does not provide a common brand"},"m.relates_to":{"event_id":"$U2wqX3o8u6m58iDSG7IUWObth7RAo2J6YriJtsHAawA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so no, it does not provide a common brand"},"ts":1662305821436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7Ds-gdcoge4Rykf6y7fuy-eeQFMpZWT5iX19hlaGhXc"},
{"content":{"body":"without first class protocols the only ways to check if something is an actual iterator is either rely on the prototype or exhaustively interrogate its methods ","msgtype":"m.text"},"ts":1662312836875,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wpRACMjYHkH1sWm3iAQRSegNfplHyjt5jPObzrsUmfk"},
{"content":{"body":"* without first class protocols the only ways to check if something is an actual iterator is either rely on the prototype or exhaustively interrogate its methods ","m.new_content":{"body":"without first class protocols the only ways to check if something is an actual iterator is either rely on the prototype or exhaustively interrogate its methods ","msgtype":"m.text"},"m.relates_to":{"event_id":"$wpRACMjYHkH1sWm3iAQRSegNfplHyjt5jPObzrsUmfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1662312860633,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vWM6nsHnIwX-vTUqnwzGru03rym8q7VbgWKv5jWgkAM"},
{"content":{"body":"This is one reason why I'm still wary of using Iterator rather than an Iterable. ","format":"org.matrix.custom.html","formatted_body":"This is one reason why I'm still wary of using Iterator rather than an Iterable.","msgtype":"m.text"},"ts":1662315436208,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G3KjVnYvUKlNEBTqzIrmLL7X0w5PK8vPxBOjbBwtZ2I"}
]