[
{"content":{"body":"why is `WeakRef.prototype.constructor` normative optional? https://tc39.es/ecma262/#sec-weak-ref.prototype.constructor","format":"org.matrix.custom.html","formatted_body":"why is <code>WeakRef.prototype.constructor</code> normative optional? https://tc39.es/ecma262/#sec-weak-ref.prototype.constructor","msgtype":"m.text"},"ts":1637264141988,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$vnUGEWrUpyd9cinN6uYeI8ENLBu9Q7JckSs1HEhW_Dc"},
{"content":{"body":"SES IIRC?","msgtype":"m.text"},"ts":1637264174396,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6uNWTlkWgLhkTQ7PhUOLbl9PusPDNWpH3ivBNy8ZL5I"},
{"content":{"body":"how so? I could see WeakRef itself being normative optional, but what is the point of shipping a WeakRef whose prototype does not have a `constructor` property?","format":"org.matrix.custom.html","formatted_body":"how so? I could see WeakRef itself being normative optional, but what is the point of shipping a WeakRef whose prototype does not have a <code>constructor</code> property?","msgtype":"m.text"},"ts":1637264599397,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$afMIW8-vzjMgeiGz-9zYM0CJDwFndDkz-p2HYRx36Bk"},
{"content":{"body":"and I don't see discussion at https://github.com/tc39/ecma262/pull/2089 other than \"we're adding inline normative optional spec text\" from yulia in the PR description without further explanation","format":"org.matrix.custom.html","formatted_body":"and I don't see discussion at https://github.com/tc39/ecma262/pull/2089 other than &quot;we're adding inline normative optional spec text&quot; from <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> in the PR description without further explanation","msgtype":"m.text"},"ts":1637264712978,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$xVzGjhAwEm0_v6jnoVSaizM29sGR6HqtXbK7vBosVe4"},
{"content":{"body":"The motivation is that it can be removed so you wouldn't be able to create a new WeakRef from an instance. Aka sharing an instance to observe the liveness of one object doesn't allow you start observing the liveness of any object.","msgtype":"m.text"},"ts":1637264970455,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fCuztAUHyeQAACnMYimpChCgdBk8f2SVTzoEhPnLUMs"},
{"content":{"body":"but why would an implementation ship that rather than requiring code to delete the property?","msgtype":"m.text"},"ts":1637265087778,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$PHrUHfP_vL45Rkjw0oPoupKmt3sioejl0KhV5Ei1zYc"},
{"content":{"body":"it seems bizarrely special-cased from an implementation perspective","msgtype":"m.text"},"ts":1637265171713,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$cyP-Sxr7SPbQ_0Sie6Eijv2nO3goeH1KaCGml-yTRz0"},
{"content":{"body":"same reason an implementation would \"ship\" without any other normative-optional thing","msgtype":"m.text"},"ts":1637265201107,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xrjCHZTJxUeaWm-X36KQwWaJhecHORbVJWzaKqXKpX0"},
{"content":{"body":"The idea is that an environment without access to the contructor through the prototype would still be a compliant JavaScript environment. Aka not introduce code that expects it to be there.","msgtype":"m.text"},"ts":1637265206402,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g-mx3g51J-sHdFuwkAU1YVFNoFSl-fRlLWfCTTIHfqo"},
{"content":{"body":"code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","msgtype":"m.text"},"ts":1637265220139,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UQvDpqpoggPwzuEJOn4Amyr8x7kZ6geYDGavTCd_qGg"},
{"content":{"body":" * code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","m.new_content":{"body":"code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","msgtype":"m.text"},"m.relates_to":{"event_id":"$UQvDpqpoggPwzuEJOn4Amyr8x7kZ6geYDGavTCd_qGg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637265241592,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LOTMkPwgUYLMG9xTa5AvubTRYmq3dto8fVr5n5D7HLw"},
{"content":{"body":"Richard Gibson  Is there any reason you would want it to always be there?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>  Is there any reason you would want it to always be there?","msgtype":"m.text"},"ts":1637265270032,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lTU1eVE6VSk64V6zxOVAI7f5cUYgHTZq0roa4lU8plE"},
{"content":{"body":"besides the \"it's different","msgtype":"m.text"},"ts":1637265295724,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yPu0tGVVlYRte2d33Aw9xQEhZtJWSlSYIjwwCjUYE1Q"}
]