[
{"content":{"body":"why is `WeakRef.prototype.constructor` normative optional? https://tc39.es/ecma262/#sec-weak-ref.prototype.constructor","format":"org.matrix.custom.html","formatted_body":"why is <code>WeakRef.prototype.constructor</code> normative optional? https://tc39.es/ecma262/#sec-weak-ref.prototype.constructor","msgtype":"m.text"},"ts":1637264141988,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$vnUGEWrUpyd9cinN6uYeI8ENLBu9Q7JckSs1HEhW_Dc"},
{"content":{"body":"SES IIRC?","msgtype":"m.text"},"ts":1637264174396,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6uNWTlkWgLhkTQ7PhUOLbl9PusPDNWpH3ivBNy8ZL5I"},
{"content":{"body":"how so? I could see WeakRef itself being normative optional, but what is the point of shipping a WeakRef whose prototype does not have a `constructor` property?","format":"org.matrix.custom.html","formatted_body":"how so? I could see WeakRef itself being normative optional, but what is the point of shipping a WeakRef whose prototype does not have a <code>constructor</code> property?","msgtype":"m.text"},"ts":1637264599397,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$afMIW8-vzjMgeiGz-9zYM0CJDwFndDkz-p2HYRx36Bk"},
{"content":{"body":"and I don't see discussion at https://github.com/tc39/ecma262/pull/2089 other than \"we're adding inline normative optional spec text\" from yulia in the PR description without further explanation","format":"org.matrix.custom.html","formatted_body":"and I don't see discussion at https://github.com/tc39/ecma262/pull/2089 other than &quot;we're adding inline normative optional spec text&quot; from <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> in the PR description without further explanation","msgtype":"m.text"},"ts":1637264712978,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$xVzGjhAwEm0_v6jnoVSaizM29sGR6HqtXbK7vBosVe4"},
{"content":{"body":"The motivation is that it can be removed so you wouldn't be able to create a new WeakRef from an instance. Aka sharing an instance to observe the liveness of one object doesn't allow you start observing the liveness of any object.","msgtype":"m.text"},"ts":1637264970455,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fCuztAUHyeQAACnMYimpChCgdBk8f2SVTzoEhPnLUMs"},
{"content":{"body":"but why would an implementation ship that rather than requiring code to delete the property?","msgtype":"m.text"},"ts":1637265087778,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$PHrUHfP_vL45Rkjw0oPoupKmt3sioejl0KhV5Ei1zYc"},
{"content":{"body":"it seems bizarrely special-cased from an implementation perspective","msgtype":"m.text"},"ts":1637265171713,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$cyP-Sxr7SPbQ_0Sie6Eijv2nO3goeH1KaCGml-yTRz0"},
{"content":{"body":"same reason an implementation would \"ship\" without any other normative-optional thing","msgtype":"m.text"},"ts":1637265201107,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xrjCHZTJxUeaWm-X36KQwWaJhecHORbVJWzaKqXKpX0"},
{"content":{"body":"The idea is that an environment without access to the contructor through the prototype would still be a compliant JavaScript environment. Aka not introduce code that expects it to be there.","msgtype":"m.text"},"ts":1637265206402,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g-mx3g51J-sHdFuwkAU1YVFNoFSl-fRlLWfCTTIHfqo"},
{"content":{"body":"code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","msgtype":"m.text"},"ts":1637265220139,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UQvDpqpoggPwzuEJOn4Amyr8x7kZ6geYDGavTCd_qGg"},
{"content":{"body":" * code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","m.new_content":{"body":"code that requires normative-optional things to exist isn't portable; it's reasonable for an implementation to only support portable code (where \"implementation\" could include \"any environment that's been prepared with first-run JS code\")","msgtype":"m.text"},"m.relates_to":{"event_id":"$UQvDpqpoggPwzuEJOn4Amyr8x7kZ6geYDGavTCd_qGg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1637265241592,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LOTMkPwgUYLMG9xTa5AvubTRYmq3dto8fVr5n5D7HLw"},
{"content":{"body":"Richard Gibson  Is there any reason you would want it to always be there?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>  Is there any reason you would want it to always be there?","msgtype":"m.text"},"ts":1637265270032,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lTU1eVE6VSk64V6zxOVAI7f5cUYgHTZq0roa4lU8plE"},
{"content":{"body":"besides the \"it's different","msgtype":"m.text"},"ts":1637265295724,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yPu0tGVVlYRte2d33Aw9xQEhZtJWSlSYIjwwCjUYE1Q"},
{"content":{"body":"to avoid the cognitive burden of an exception to the rule that every built-in constructor's prototype has a `constructor` property referencing it","format":"org.matrix.custom.html","formatted_body":"to avoid the cognitive burden of an exception to the rule that every built-in constructor's prototype has a <code>constructor</code> property referencing it","msgtype":"m.text"},"ts":1637265328028,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F4PXanhRji85cSQ1YyTvK5rX6q7fvWTnBZ9H7W_5Y5g"},
{"content":{"body":"`delete builtInConstructor.prototype.constructor` is always allowed, but only in this one case is a conforming implementation allowed to ship without the property present at all","format":"org.matrix.custom.html","formatted_body":"<code>delete builtInConstructor.prototype.constructor</code> is always allowed, but only in this one case is a conforming implementation allowed to ship without the property present at all","msgtype":"m.text"},"ts":1637265412288,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$NZWVfJ7r1BtYiJjfN2AIavBSEfUHMKDsw0PtHRLyFf8"},
{"content":{"body":"Do you have a specific use case, or is it conceptual only ?","msgtype":"m.text"},"ts":1637265517884,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gNsIbh20HVc-A8F0zl5W-vTRR7hTZHnCQTyAtoQN8GU"},
{"content":{"body":"the latter","msgtype":"m.text"},"ts":1637265531417,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$yliQAl-h3A7ogZVNqlYjJ8ydSJxtrpFycKrXnyigPrw"},
{"content":{"body":"it's not even like it allows SES or similar to avoid the `delete WeakRef.prototype.constructor` code, because conforming implementations can and do ship with it","format":"org.matrix.custom.html","formatted_body":"it's not even like it allows SES or similar to avoid the <code>delete WeakRef.prototype.constructor</code> code, because conforming implementations can and do ship with it","msgtype":"m.text"},"ts":1637265591331,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$W3ECsSh3dsz9uNUtMJTCZ9tarzDudd5H2FtC4UR4xgc"},
{"content":{"body":"No but it means the environment SES/lockdown creates is still a fully compliant JavaScript environment","msgtype":"m.text"},"ts":1637265664796,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IzXzVhsqbnve78J-Csa97QOefDzf6IbOgn-EQhLbZhw"},
{"content":{"body":"no, that isn't true because of the other mutations","msgtype":"m.text"},"ts":1637265687624,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$fiXyyOmAAYhqLrUWPDScQ8Bsv3BmrfH2QbOx7gZXtFA"},
{"content":{"body":"Function.prototype, Date.now, Math.random, etc.","msgtype":"m.text"},"ts":1637265702865,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$QfTCpzKg_krJNoMwEuoy0elBj3QpPcETcgiQzICHXPo"},
{"content":{"body":"Ok, fair, it's one less difference, and we're working on mitigating the others. E.g. all those you mention are there, but they throw. Doing that on `Function.prototype` is ok because SES has to virtualize `Function` anyway.","format":"org.matrix.custom.html","formatted_body":"Ok, fair, it's one less difference, and we're working on mitigating the others. E.g. all those you mention are there, but they throw. Doing that on <code>Function.prototype</code> is ok because SES has to virtualize <code>Function</code> anyway.","msgtype":"m.text"},"ts":1637265784116,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hUNi3gjXMRlnGJJkNLXQMYYzIDsxwYUBuBjN-VTHLPM"},
{"content":{"body":"an implementation that shipped with a https://tc39.es/ecma262/#sec-math.random that throws exceptions would not be conforming with https://tc39.es/ecma262/#sec-math.random","msgtype":"m.text"},"ts":1637265858003,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ld5Ouc79TIeldJbE9L3j0vL1tweOxJPZiiqw0BF3bZI"},
{"content":{"body":"Having the spec say \"this may not be there\" encourages programs to not rely on it being there.","msgtype":"m.text"},"ts":1637265876343,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$I8ch7XzJOvXj7vu_k3aF6Nd6LMzjIV7OwKbRppJUHNw"},
{"content":{"body":"SES lockdown intentionally restricts the environment in ways that violate the spec; why should there be a special exception for WeakRef.prototype.constructor?","msgtype":"m.text"},"ts":1637266013694,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$WXPiSo-rBcy7su4QcOTnAB5H5hvqEhWOPUFY8b1l69M"},
{"content":{"body":"Right, I think we're trying to compare something that was there from the beginning, and something that is introduced more recently. E.g. for arrays, most original methods seem to skip over holes, but all newer ones don't. It's a difference that avoids repeating previous mistakes in light of new knowledge","msgtype":"m.text"},"ts":1637266029632,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$z6R9E663326cypunUGDD44gjbM3cpDYDP6u2-XE6I-Y"},
{"content":{"body":"if that were the case, then shipping it should be considered a violation. This allows for differences that are rightfully discouraged elsewhere","msgtype":"m.text"},"ts":1637266124612,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$9vcMbwRaroHJtcT_Q1ZdCRk2t1VEvJkfjpbBHENwdAg"},
{"content":{"body":"we don't permit implementations to pass holes to Array.prototype.flatMap callbacks","msgtype":"m.text"},"ts":1637266233206,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$nlj0ehhl6Tl_In6hmMqUzIDm7pvKP-NFbzc6HdEAiQk"},
{"content":{"body":"so I guess I have my answer about why the annotation is there, but the answer doesn't make sense","msgtype":"m.text"},"ts":1637266355036,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$qo72s5Oy7iC9sxLuHPpLcEfRaxLX1U-aS-gvqA_VTVw"},
{"content":{"body":"There is no risk in allowing the WeakRef constructor in a non-SES environment, there is in SES. And SES strives to provide a fully compatible environment. So only SES needs to remove the constructor. I assume removing it always was not an option (I wasn't around when this was decided)","msgtype":"m.text"},"ts":1637266532549,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mRKGD-YnY0g26THQCjjGt89Wx9jKuYAB0t5DV8I3xts"},
{"content":{"body":"in what sense is the SES environment \"fully compatible\" when it intentionally blocks execution of unsafe code that a conforming environment is required to support?","msgtype":"m.text"},"ts":1637266644028,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$klXE5C5Jgx0gMhxk1QGoHhs0b-76oEKbckgQ-jenk3A"},
{"content":{"body":"\"strives to\" is the operating keyword here. The idea is to stop introducing further things that SES would have to willfully break, while working on remediating the ones that currently do (the override mistake is still around)","msgtype":"m.text"},"ts":1637266785261,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IbJqPmqG46Rl0Y2hR3C6WVZVOhAl_6rhxHnBG2omdgE"},
{"content":{"body":"doesn't SES also freeze all builtins, including new ones like WeakRef?","msgtype":"m.text"},"ts":1637266993506,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$swFtyc2JMcUb5Kp2CcRnFyVZIdF9TNaNyX0GmuwyIA4"},
{"content":{"body":"it is important for ES conformance that they be mutable, and important for SES that they not be. There's an explicit divergence there that seems to me like it has exactly the same character as deleting and overriding properties in a way that is allowed by the spec but results in an environment that does not itself conform with the necessary initial state","msgtype":"m.text"},"ts":1637267159221,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$jq1b_7jmo__8ZSdxAEmSo2M6-oDbTlFzZYCE7NOgj4w"},
{"content":{"body":"and worse, anyone who cares about restricting access to liveness information must control the global `WeakRef` anyway, even if the host implementation decided not to include `WeakRef.prototype.constructor`. There's just doesn't seem to be any benefit in shipping without it or in considering such an environment to be a valid initial state","format":"org.matrix.custom.html","formatted_body":"and worse, anyone who cares about restricting access to liveness information must control the global <code>WeakRef</code> anyway, even if the host implementation decided not to include <code>WeakRef.prototype.constructor</code>. There's just doesn't seem to be any benefit in shipping without it or in considering such an environment to be a valid initial state","msgtype":"m.text"},"ts":1637267742355,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$3-_DFhnrw2xBXgwYtw5qjrUFTRrN_FBwTbxBCEKbmiI"},
{"content":{"body":"I would like to see code which assumes `WeakRef` contructor to be present on the global","format":"org.matrix.custom.html","formatted_body":"I would like to see code which assumes <code>WeakRef</code> contructor to be present on the global","msgtype":"m.text"},"ts":1637267840540,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mhcq1yGh9gYaI0JBuKXkQbgkR5IWJxNIUIqD4-xu0eg"}
]