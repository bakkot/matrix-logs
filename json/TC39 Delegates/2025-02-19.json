[
{"content":{"body":"I just stated the reason. The definition of \"informative\" is any text that can be removed without affecting the normative parts of the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1739923207645,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VfmqsnYohOy3bwy4VXtXOPpggZYyMID5wO45pT7k_rU"},
{"content":{"body":"An assert doesn't fall into that category if it can make a spec normatively inconsistent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923234032,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$goO_bSMyul3kk92N3qGZUxPFhTBU_yhcsg6LVt4iZdE"},
{"content":{"body":"Informative text being incorrect seems like it definitionally means the spec is inconsistent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923234749,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RRYCZC338QHgrAjiFezNNR8IAT4PfK31syq9lmzr0dE"},
{"content":{"body":"and assert failure does not make the spec normatively incorrect, it makes it incoherent. incorrect/correct as a category doesn't even arise because it's malformed","m.mentions":{},"msgtype":"m.text"},"ts":1739923252713,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gelN6amwOd0KXuwqtUpAxZD-TwSezFbtMLKS3nZ5_Uw"},
{"content":{"body":"this was very fast advancement for such a significant proposal","m.mentions":{},"msgtype":"m.text"},"ts":1739923274868,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tW_MYUZpB2pdWEtOImmTuUpnl1rvNKiZngxCvf3qTeM"},
{"content":{"body":"An Assertion is a statement that the asserted condition is the only possible state based on how the algorithm is used elsewhere in the specification. It is essentially informative because its absence would have no impact on the spec itself, so long as the spec is coherent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923285136,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J7xqOLx5L5AE2iJVPHi484e2SwCt-9z7hoTSJi8KYzk"},
{"content":{"body":"(I think that's a good thing -- we're able to act efficiently when it's a good idea)","m.mentions":{},"msgtype":"m.text"},"ts":1739923287226,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bgaU7XioYPJtJ30X1MAVzFBejQR-keDD_YkFyR7Ujnw"},
{"content":{"body":"Incorrect = malformed in my comment above.","m.mentions":{},"msgtype":"m.text"},"ts":1739923294438,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$91UT8VPcz3jI-srjGL2L7LM3Knv4pD0H62rccCXUNWw"},
{"content":{"body":"i see, well, its removal still doesn't affect the malformedness","m.mentions":{},"msgtype":"m.text"},"ts":1739923308598,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L4QbIkSITlZLXc7wld-tEXVBzUirxx9kN57e2Tls_6k"},
{"content":{"body":"the spec remains malformed if the only removal is the assert","m.mentions":{},"msgtype":"m.text"},"ts":1739923318280,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9vvzRAXqgxrPbptPxNsyvDmG4y7pGvxsQdkQVl-UZ54"},
{"content":{"body":"Yes, it does, because the spec might become well-formed with removal of asserts.","m.mentions":{},"msgtype":"m.text"},"ts":1739923337078,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$OvW3Ln2NCgeY13foqFOl4XjJqr-AhyP6kibcJUGsiG0"},
{"content":{"body":"interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of assertions in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"msgtype":"m.text"},"ts":1739923377475,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I"},
{"content":{"body":"* interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of contracts in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"m.new_content":{"body":"interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of contracts in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923389689,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gq9bOMprve60UWfgFgQQQU8qO_8ONiCsw8_Ku1WfPrM"},
{"content":{"body":"excited to see immutable arraybuffers advancing. There are definitely a number of web API specs that will need to be updated to account for them. I mentioned Web Crypto crypto.randomValues() but BYOB ReadableStream is the other big one. That will need to be updated to reject immutable buffers on reader.read(buf). ","m.mentions":{},"msgtype":"m.text"},"ts":1739923412467,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"},
{"content":{"body":"I plan to use compiler flags for whether to include spec asserts or not (I have none currently)","m.mentions":{},"m.relates_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I","is_falling_back":true,"m.in_reply_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923425689,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$YusfN0IMbB11okg1HOctfc6EGywVhrPxOTTEU0y_ePo"},
{"content":{"body":"TextEncode encodeInto is another","m.mentions":{},"m.relates_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA","is_falling_back":true,"m.in_reply_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923461912,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$BK6ecL1xpd4EiwEUmQGDkPuCtc_bYHTQ4V0KefL8zrA"},
{"content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention doesn't change, and it turns out the there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"ts":1739923501699,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30"},
{"content":{"body":"* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out the there is a bug in the spec","m.mentions":{},"m.new_content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out the there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923519318,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iWpF_pzL5sp5lq3KdV-LJvLFTBYgTGRU7E3VKrly7bI"},
{"content":{"body":"* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out there is a bug in the spec","m.mentions":{},"m.new_content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923526834,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yxBjhJ-484K6w2yr4fn8kTMEsYSE4ABvgJTyDHPpTz0"},
{"content":{"body":"those fall out to SetValueInBuffer, so probably the fix is to update WebIDL to do something else? or make SetValueInBuffer fallible, though that would be a shame","m.mentions":{"user_ids":["@jasnell:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"}},"msgtype":"m.text"},"ts":1739923571200,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aq9XwW3O0EYdFl8bzaBV9avDu-9TLNWbuXmtl8vLGWA"},
{"content":{"body":"https://webidl.spec.whatwg.org/#arraybuffer-write is the relevant thing I think","m.mentions":{},"msgtype":"m.text"},"ts":1739923577622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q1I5bJvgV4Kcm_jD41mGDpKPOZYVRlUjbm4GIOOv6FA"},
{"content":{"body":"but we definitely need tests as well","m.mentions":{},"msgtype":"m.text"},"ts":1739923589249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Aff7MCX6WeeKBtrzbsGi7lq9EDlLveMbMxuTJ14tHY"},
{"content":{"body":"I hope web integration can look into where immutable arraybuffers can be a benefit in some cases, e.g., by avoiding certain cloning when used.","m.mentions":{},"m.relates_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA","is_falling_back":true,"m.in_reply_to":{"event_id":"$BK6ecL1xpd4EiwEUmQGDkPuCtc_bYHTQ4V0KefL8zrA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923613979,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mBsKNyIMt7mqKBBWuJvQD-mgn7MgcxRMz_9bVDt-raU"},
{"content":{"body":"yes, WebIDL is good to call out to see how they want to go","m.mentions":{},"msgtype":"m.text"},"ts":1739923623513,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CVncOsOp7tS12upe1fusa6VCiaG4EbCi-yHjIR7yqYk"},
{"content":{"body":"maybe they want an attribute to require buffer sources to be immutable","m.mentions":{},"msgtype":"m.text"},"ts":1739923633279,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Oosd0nc2u9rIYRM1fFuH9zvmkX9tMF2JSEKY2SzdW1c"},
{"content":{"body":"also there are places which take a buffer as an argument and they do a defensive copy","m.mentions":{},"msgtype":"m.text"},"ts":1739923659586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2-bWW41jrzyyAglLrUb-pfEPNagh_9BKcdYBHF98DpU"},
{"content":{"body":"and should be updated to not do that","m.mentions":{},"msgtype":"m.text"},"ts":1739923662969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0b8BYJDHYIrV5r_jD_l1HYzBmpMir_TTNK2Dqi_qcyU"},
{"content":{"body":"though that's... mostly fine","m.mentions":{},"msgtype":"m.text"},"ts":1739923696689,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s35ZWu51_FEA1eJJEZjpmuG4VqTpq9Z5xVJbO-vavFA"},
{"content":{"body":"you can just as-if that away","m.mentions":{},"msgtype":"m.text"},"ts":1739923700609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1lC7VRWZ3Hzz1AJcZIObAnENru8xr1iGlpmechcfpys"},
{"content":{"body":"if an immutable arraybuffer can't be detached, copying it can just be not-copying it","m.mentions":{},"msgtype":"m.text"},"ts":1739923703590,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R8eV3WqZVkoj2HASL0DxHejbKTkmnBmIgSuGDVoddlU"},
{"content":{"body":"* if an immutable arraybuffer can't be detached, copying it can just be implemented as not-copying it","m.mentions":{},"m.new_content":{"body":"if an immutable arraybuffer can't be detached, copying it can just be implemented as not-copying it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$R8eV3WqZVkoj2HASL0DxHejbKTkmnBmIgSuGDVoddlU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923708785,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kocH1_f1k0A7rByBplVAn_-XN-U7yxw5NuOdc6qdQ1Y"},
{"content":{"body":"Like I said, Python gets by without this happening explicitly, because it has *args and **kwargs, and it's common practice for decorators to make the wrapper function they return take `(*args, **kwargs)` and then call the inner function with the same. That preserves passed function names, without needing the runtime to actually track function names across decorator boundaries. We'd need to add the same to JS, I think, to do named args.","format":"org.matrix.custom.html","formatted_body":"Like I said, Python gets by without this happening explicitly, because it has *args and **kwargs, and it's common practice for decorators to make the wrapper function they return take <code>(*args, **kwargs)</code> and then call the inner function with the same. That preserves passed function names, without needing the runtime to actually track function names across decorator boundaries. We'd need to add the same to JS, I think, to do named args.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bksAF6m9Cm72CK0dD8LP3op7pvk9ah--Jtt_otfLDfE"}},"msgtype":"m.text"},"ts":1739923718855,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"},
{"content":{"body":"yes, I think this is important. Even if it's formally just an editorial change, calling out in various specs where they can avoid work in the case of immutable ArrayBuffers makes it more likely that browsers will implement the optimization.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0b8BYJDHYIrV5r_jD_l1HYzBmpMir_TTNK2Dqi_qcyU"}},"msgtype":"m.text"},"ts":1739923750211,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LNt7rdkfRmutAPqc11U7GMuWe3t-HU1GveqnfGgwLu8"},
{"content":{"body":"I think probably this consists of finding the places which refer to https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy and updating them","m.mentions":{},"msgtype":"m.text"},"ts":1739923768948,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJyJMknawgXEKbefznWtbEzmJ_eBFE7qWOThb0vPoJs"},
{"content":{"body":"Python also has explicit syntax in the parameter list to denote named vs positional arguments","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"}},"msgtype":"m.text"},"ts":1739923771115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IAuEZfeonbeCKtWFTT9r4N80OMB2djJ1gq2QSzCIwDU"},
{"content":{"body":"also agreed there. the amount of as-if optimizations happening on the web spec side is surprisingly little, compared to JS algorithms","m.mentions":{},"msgtype":"m.text"},"ts":1739923774681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ey0S2dHe4pALdgs_sjOCM2ncFHNuHeElHAhNjxL2xEA"},
{"content":{"body":"right, people are more likely to implement line-by-line there","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ey0S2dHe4pALdgs_sjOCM2ncFHNuHeElHAhNjxL2xEA"}},"msgtype":"m.text"},"ts":1739923798386,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VL416p9lbQofqwN7wEGgi2uB7iOkhFNvtZ5hO9Vl6ug"},
{"content":{"body":"only recently (by default, all args are passable by both index and name), and that doesn't affect the pattern I mentioned anyway","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IAuEZfeonbeCKtWFTT9r4N80OMB2djJ1gq2QSzCIwDU"}},"msgtype":"m.text"},"ts":1739923802691,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WPj43Q3MV830Nmv9jc6xID17Z1Oh5tq8Es7jHV_zx6o"},
{"content":{"body":"(but I do think we could apply Python's lessons and go ahead and add \"index only\" and \"name only\" arglist section, like they do)","m.mentions":{},"msgtype":"m.text"},"ts":1739923833961,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xZQMKHlaHhY5U9j0gUNF3OVqV8A3sh_ElarrGGFzNxM"},
{"content":{"body":"As much as I love this feature of Python when writing Python, I think I would prefer to maintain JavaScript’s rustic aesthetic, rather than rewalk the path to realizing Python needed a delimiter between positional arguments and positional arguments that are eligible to be interpreted as kwargs.","m.mentions":{"user_ids":["@tabatkins:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"}},"msgtype":"m.text"},"ts":1739923848682,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$GUnkOcol0M1DrKqLQWHCLRxJO0J-J3R_AnsNXUEORlU"},
{"content":{"body":"sure, JS having *just* index-only and name-only is a potential future I think woudl be okay, and means there would be a syntax opt-in for named args so minifiers wouldn't need to change by default","format":"org.matrix.custom.html","formatted_body":"sure, JS having <em>just</em> index-only and name-only is a potential future I think woudl be okay, and means there would be a syntax opt-in for named args so minifiers wouldn't need to change by default","m.mentions":{},"msgtype":"m.text"},"ts":1739923919174,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7GtM4Lqza2BvOw5N5lgDjisIbxziPNJEvr4ituIU-2w"},
{"content":{"body":"(you'd have to write `function foo(posarg, **, kwarg1, kwarg2)`)","format":"org.matrix.custom.html","formatted_body":"(you'd have to write <code>function foo(posarg, **, kwarg1, kwarg2)</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1739923940619,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9X12uoGnA--rj08_3vRKMGuoY11eH7nkgyy3rq95C44"},
{"content":{"body":"or similar","m.mentions":{},"msgtype":"m.text"},"ts":1739923944568,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IXE8JCbTVU9Hl1415vzE_WwwBX9K72LZK1SJ28HiDqY"},
{"content":{"body":"I find it clearer to continue `function foo(posarg, {kwarg1, kwarg2} = {})`.","format":"org.matrix.custom.html","formatted_body":"I find it clearer to continue <code>function foo(posarg, {kwarg1, kwarg2} = {})</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1739924036974,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$yn159XpnS9jHxf_nS9fH2OFUP5MYk_91qwCh5LZaJ9k"},
{"content":{"body":"Given the degree of difference in practice.","m.mentions":{},"msgtype":"m.text"},"ts":1739924059192,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$l_N20MGN4FJdwtd9kzuqNJn2TFxJuX8TK1rh6j1OlvY"},
{"content":{"body":"and that's the exact argument that's blocked it in the past ^_^","m.mentions":{},"msgtype":"m.text"},"ts":1739924088333,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DvWkiNtRCw_yWW7JBGGMEC9MHmov4WvymZIKRGBtd-8"},
{"content":{"body":"it's kind of annoying that keyword arguments have to take place at a particular indexed position... makes it harder to add positional arguments over time, but maybe that's OK.","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yn159XpnS9jHxf_nS9fH2OFUP5MYk_91qwCh5LZaJ9k"}},"msgtype":"m.text"},"ts":1739924180359,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ttT6P1Kpr7Z_EUKLAaqn1IWaGIYh7A08wYRHmj3TEDU"},
{"content":{"body":"but I'm not sure whether it'd be worth it to introduce a whole other named argument system","m.mentions":{},"msgtype":"m.text"},"ts":1739924202420,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Lc1SJ50utsXAfxjI9FEL0nW0oRJBBdwv_G4jJLHdCU8"},
{"content":{"body":"just seems like a lot of work","m.mentions":{},"msgtype":"m.text"},"ts":1739924220473,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BWNRRFCOGOrgD3WoE4jgJ7aMXHbYmoiqUndmppov_yw"},
{"content":{"body":"`function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)`","format":"org.matrix.custom.html","formatted_body":"<code>function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739924228918,"senderName":"Jesse (TC39 🇺🇸)","senderId":"@jesse:igalia.com","id":"$siwrihumSsZEoRlJoPvA4m5oJZe3mZb5GjrVrAmz-eg"},
{"content":{"body":"as has been stated, the lack of named arguments is a minor blocker in a number of dimensions, but it's only a very minor improvement in the base case, so it's harder to argue for since the extra stuff can be dismissed more easily.","m.mentions":{},"msgtype":"m.text"},"ts":1739924267037,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$asPf97K0kOO0CYCT7P3DVTY010UKpDMR6EahehvqY-A"},
{"content":{"body":"This is a conspiracy by Big ESLint to add more rules to ESLint","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$siwrihumSsZEoRlJoPvA4m5oJZe3mZb5GjrVrAmz-eg"}},"msgtype":"m.text"},"ts":1739924396891,"senderName":"Erik Marks","senderId":"@rekmarks:matrix.org","id":"$Pgr021rgN9NPZKRysVLyJBdbO8K7_ZnGSEGyueggxO4"},
{"content":{"body":"hey who told you about big eslint","m.mentions":{},"msgtype":"m.text"},"ts":1739924416324,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$raejeDT3wWGHczDSPBJZAKf9eoDnjGnZBanxDV1nj3Q"},
{"content":{"body":"for fans only: look again at those semicolons","m.mentions":{},"msgtype":"m.text"},"ts":1739924463657,"senderName":"Jesse (TC39 🇺🇸)","senderId":"@jesse:igalia.com","id":"$L_fTAj7p38UiUUyFIgGYSh6XGNPUi-bK2MyNBQPHNV0"},
{"content":{"body":"fun fact `for` is a valid function name","format":"org.matrix.custom.html","formatted_body":"fun fact <code>for</code> is a valid function name","m.mentions":{},"msgtype":"m.text"},"ts":1739924492731,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wOuRotGBgCKQhkgkTcBUShGERyZUyqPxReFoT7TDb4s"},
{"content":{"body":"`function for(x; y=y+1; z) {}`","format":"org.matrix.custom.html","formatted_body":"<code>function for(x; y=y+1; z) {}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739924518087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a9nHzH-NQ-YYyZI2Nxjvy7meLLJbzUkIllPtReN6Wso"},
{"content":{"body":"Which JavaScript are you talking about","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a9nHzH-NQ-YYyZI2Nxjvy7meLLJbzUkIllPtReN6Wso"}},"msgtype":"m.text"},"ts":1739924531408,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_CVP-DgF2dxYF8jFmZVcm7WlXfejEbLqs4lKxmJXvVM"},
{"content":{"body":"jesse's thing above","m.mentions":{},"msgtype":"m.text"},"ts":1739924562528,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_kClfo7YwLjb_Mt1ySWTmp9ldqxonuylTStc2QWJ5ng"},
{"content":{"body":"the `function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)` one","format":"org.matrix.custom.html","formatted_body":"the <code>function foo(posarg1 ；{kwarg1, kwarg2} = {} ；posarg2)</code> one","m.mentions":{},"msgtype":"m.text"},"ts":1739924573485,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tDVnTDq6V9AvEuXpiX-_Nn9iZMqbUC-jJuQm-5aio9w"},
{"content":{"body":"`const f = { for() {} }['for'];` :-P but `function for() {}` is a syntax error","format":"org.matrix.custom.html","formatted_body":"<code>const f = { for() {} }['for'];</code> :-P but <code>function for() {}</code> is a syntax error","m.mentions":{},"msgtype":"m.text"},"ts":1739924580368,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f1tqY5Ep6_YC71ewK7k2Zf6AiS_qUX_8qi7ITQhdFT8"},
{"content":{"body":"wrong javascript","m.mentions":{},"msgtype":"m.text"},"ts":1739924610620,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Pil6M-21lecNdsdPp8_r-lsKw_ZZ9xsgK7y7ma-E6-c"},
{"content":{"body":"ugh","m.mentions":{},"msgtype":"m.text"},"ts":1739924613522,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uderPri9rrzDtz0M6d7G4J0uQqay3THmD8AbaMFHYkc"},
{"content":{"body":"yeah it needs to be a method not a declaration","m.mentions":{},"msgtype":"m.text"},"ts":1739924624073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X24hwv3Ab3V5j1VGbbXCou3L2UZOqtszH37A7t5YQyU"},
{"content":{"body":"```\nfor(of of of);\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>for(of of of);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739924626820,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4xZNa-QvMqMrYcCPhBQBvGtoUwnQojj8kS3EPjkTcv8"},
{"content":{"body":"I always get that wrong","m.mentions":{},"msgtype":"m.text"},"ts":1739924627315,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GMjeSnXnBbQJ5bNDBbYQj73KHl3t9bxe0n-dCdDZPzs"},
{"content":{"body":"this is one thing that really bothers me about rust, let me name fields `if` and `return` and such","format":"org.matrix.custom.html","formatted_body":"this is one thing that really bothers me about rust, let me name fields <code>if</code> and <code>return</code> and such","m.mentions":{},"msgtype":"m.text"},"ts":1739924675049,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FrZyMOKmGkxGkI2AChjZnYIVN6qjfYlZD-1h1UYvHtU"},
{"content":{"body":"```\nclass X {\n  for(x; y=y+1; z) {}\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>class X {\n  for(x; y=y+1; z) {}\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739924683754,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SpMtAYy0iXC-fzE_opNCOC2QnKXp8cV4p4lKZ7h8ArY"},
{"content":{"body":"not being able to have a field named `type` is enormously annoying. everyone uses `typ` or `r#type`","format":"org.matrix.custom.html","formatted_body":"not being able to have a field named <code>type</code> is enormously annoying. everyone uses <code>typ</code> or <code>r#type</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739924695427,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GpLmFTkeohFKMrsthpci8Xx82MEOzRhYQe3eCW5CRdk"},
{"content":{"body":"I think that sailed once `await` became an operator which is indistinguishable from property access","format":"org.matrix.custom.html","formatted_body":"I think that sailed once <code>await</code> became an operator which is indistinguishable from property access","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FrZyMOKmGkxGkI2AChjZnYIVN6qjfYlZD-1h1UYvHtU"}},"msgtype":"m.text"},"ts":1739924727949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qTpaf5_PZQIVV9RxgA_VczRyDJMroalusvTPByP-_Qs"},
{"content":{"body":"i love it and i hate it","m.mentions":{},"msgtype":"m.text"},"ts":1739924744507,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XViy-h1IgvdvUEX9kZe_ll0V7b-9scEwmcjYlEevY1g"},
{"content":{"body":"feedback welcome: https://github.com/tc39/proposal-immutable-arraybuffer/pull/44","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6kk9qVXj-hm3tpDVqMaEuyQbNYA6JItQLyf4Q1FYUlM"}},"msgtype":"m.text"},"ts":1739924762206,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$pwkiift8mcGZfLBCNK79JmWtdCAiGapAlRjpLBtspIo"},
{"content":{"body":"it's grown on me","m.mentions":{},"msgtype":"m.text"},"ts":1739924764078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dYa08ElMqRQDLLyUSmD96e11BmQg7fEvreKuQLvcyVI"},
{"content":{"body":"waldemar re: \"ToString is not unique\" the spec does allow the last digit to vary, but I'm not sure if any implementations actually differ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> re: \"ToString is not unique\" the spec does allow the last digit to vary, but I'm not sure if any implementations actually differ","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1739925156750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t_AMKZf8BqE2DJU6M8SQpT-8tjJ0KjzmCzldrLRyRXQ"},
{"content":{"body":"I think we might be able to fully specify it and thereby resolve that specific issue","m.mentions":{},"msgtype":"m.text"},"ts":1739925169225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bf1oWbrtt5Dv5i30e1hDmcEBt7VshPm3yKSmK3LwAdw"},
{"content":{"body":"is the goal here round-tripping a string representation? and the thing that's stopping people from relying on that because we have some leeway technically?","m.mentions":{},"msgtype":"m.text"},"ts":1739925208170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6S8LsEf3EEpUtA2TvN1bkxM0JPAnyd3J6hD0sBUwV0U"},
{"content":{"body":"* is the goal here round-tripping a string representation? and the thing that's stopping people from relying on that is because we have some leeway technically?","m.mentions":{},"m.new_content":{"body":"is the goal here round-tripping a string representation? and the thing that's stopping people from relying on that is because we have some leeway technically?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6S8LsEf3EEpUtA2TvN1bkxM0JPAnyd3J6hD0sBUwV0U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739925216534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CIrXLyLM1tdBaV_79f2AykAps67OaUxV_EBU6jSw0tQ"},
{"content":{"body":"it sounds like the goal is \"can this string be represented as a number\" but semantic misunderstanding or disagreement about what \"can be represented\" means","m.mentions":{},"msgtype":"m.text"},"ts":1739925253943,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$iHd_FZO-RvwbcJ8nlq1K59kFUUFZQKJho7eSSRVU10o"},
{"content":{"body":"The problem here is that it's impossible to define a Number-to-String conversion such that the resulting string satisfies isSafeNumeric","m.mentions":{},"msgtype":"m.text"},"ts":1739925291032,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$P-u7jKuhwmMakIpEkWnLE51foeLj0rsSTjdoRHzpz7Q"},
{"content":{"body":"yeah, if the \"can this be represented\" means mathematical value that is... not useful","m.mentions":{},"msgtype":"m.text"},"ts":1739925294293,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CDLEQnrRCQi4dV-Wj_gaXy_9TbUffSPgOI8Tkr4r64k"},
{"content":{"body":"oh I remember what I wanted to say: it seems inconsistent to say that larger integral values are not \"safe\" for this purpose","msgtype":"m.text"},"ts":1739925336712,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8HUirwBjd0W3KF_YFJDMXX6KfJNz80CJsFtYKOq0LqY"},
{"content":{"body":"doesn't make any sense","msgtype":"m.text"},"ts":1739925345678,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$A_s4GkHZAM0AWS2M5-ThbTEAWsUcDbQ5h7a9O7U7N68"},
{"content":{"body":"these sound like reasons to iterate on the definition (significantly) and maybe add a number-to-string-safe operation, but it feels like the stated motivations hold","m.mentions":{},"msgtype":"m.text"},"ts":1739925397063,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_MM8RrlVyzRgdTojupL1Des--jYqtcmq6v4Ggi8rcrc"},
{"content":{"body":"Is it? I think if our ToString fully specified the last digit it would work. The spec previously had a bad definition of isSafeNumeric but under the `MV(string) = MV(ToString(ToNumber(string))` I think it's coherent? Or at least the obvious examples like 0.1 don't fail.","format":"org.matrix.custom.html","formatted_body":"Is it? I think if our ToString fully specified the last digit it would work. The spec previously had a bad definition of isSafeNumeric but under the <code>MV(string) = MV(ToString(ToNumber(string))</code> I think it's coherent? Or at least the obvious examples like 0.1 don't fail.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$P-u7jKuhwmMakIpEkWnLE51foeLj0rsSTjdoRHzpz7Q"}},"msgtype":"m.text"},"ts":1739925404629,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q6xWIUnu1PVpWamiUQCx9nWRC2btu49bbsS5wO_Q8RY"},
{"content":{"body":"> <@devsnek:matrix.org> it sounds like the goal is \"can this string be represented as a number\" but semantic misunderstanding or disagreement about what \"can be represented\" means\n\nyeah I think a lot of lay-people think \"can be represented\" means \"the float represents this number only\", which... just isn't the case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24iHd_FZO-RvwbcJ8nlq1K59kFUUFZQKJho7eSSRVU10o\">In reply to</a><a href=\"https://matrix.to/#/%40devsnek%3Amatrix.org\">@devsnek:matrix.org</a><br />it sounds like the goal is &quot;can this string be represented as a number&quot; but semantic misunderstanding or disagreement about what &quot;can be represented&quot; means</blockquote></mx-reply>yeah I think a lot of lay-people think &quot;can be represented&quot; means &quot;the float represents this number only&quot;, which... just isn&#39;t the case","m.relates_to":{"m.in_reply_to":{"event_id":"$iHd_FZO-RvwbcJ8nlq1K59kFUUFZQKJho7eSSRVU10o"}},"msgtype":"m.text"},"ts":1739925448946,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$73YsumbLVBpttaYJTotzpRtbBfSEYaLA3ihlQ_Hvc74"},
{"content":{"body":"It is very specific to our specific ToString but afaict that's what they're asking for","m.mentions":{},"msgtype":"m.text"},"ts":1739925452686,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9iPMKq3CAYPc9yU7i0gPFaTNCJMxsbxhWQxpodr-yy8"},
{"content":{"body":"oh! yes, that didn't occur to me","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8HUirwBjd0W3KF_YFJDMXX6KfJNz80CJsFtYKOq0LqY"}},"msgtype":"m.text"},"ts":1739925473497,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5IjOGryAnuXvdRhpjpsShsNK78xdmxNQCOmqbKaXDPw"},
{"content":{"body":"The definition of MAX_SAFE_INTEGER is that it's the largest Number x such that x+1 is representable exactly. But Number(\"0.00000000000000000000000000000025\") + 1 is 1, while \"0.00000000000000000000000000000025\" is considered \"safe\" by this.","m.mentions":{},"msgtype":"m.text"},"ts":1739925484692,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$JmhayNwxtGrKdZSLpEPKN5LroaPdWqsUBkmZRWQdm84"},
{"content":{"body":"> <@littledan:matrix.org> these sound like reasons to iterate on the definition (significantly) and maybe add a number-to-string-safe operation, but it feels like the stated motivations hold\n\nI think the motivations are so confused, it's hard to say whether they hold or not","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_MM8RrlVyzRgdTojupL1Des--jYqtcmq6v4Ggi8rcrc\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />these sound like reasons to iterate on the definition (significantly) and maybe add a number-to-string-safe operation, but it feels like the stated motivations hold</blockquote></mx-reply>I think the motivations are so confused, it&#39;s hard to say whether they hold or not","m.relates_to":{"m.in_reply_to":{"event_id":"$_MM8RrlVyzRgdTojupL1Des--jYqtcmq6v4Ggi8rcrc"}},"msgtype":"m.text"},"ts":1739925491109,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$98wLg6Sl9dw4Oz_WnY5G49l6_Zr7__paPJC8hn48WdQ"},
{"content":{"body":"well, I wonder what we should do about the problem space (floats are confusing with respect to value-preserving conversion to/from string)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$98wLg6Sl9dw4Oz_WnY5G49l6_Zr7__paPJC8hn48WdQ"}},"msgtype":"m.text"},"ts":1739925531752,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kGRJt5E_l4MsXzJm9lf5hinYXSXLKmFftOgj7ZZxqUM"},
{"content":{"body":"I would want this problem to be solved with a bank of functions that apply to specific number domains, e.g., `String.representsSafeInteger`, `String.representsSafeNumber`, `String.representsSafeBigInt`, which is less forgiving that the corresponding constructor or parse functions.","format":"org.matrix.custom.html","formatted_body":"I would want this problem to be solved with a bank of functions that apply to specific number domains, e.g., <code>String.representsSafeInteger</code>, <code>String.representsSafeNumber</code>, <code>String.representsSafeBigInt</code>, which is less forgiving that the corresponding constructor or parse functions.","m.mentions":{},"msgtype":"m.text"},"ts":1739925562075,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$dUgZWNH_2FZVa-9KdqdTJL_4cBhK8ZK-9sp1wFipCtk"},
{"content":{"body":"> <@littledan:matrix.org> well, I wonder what we should do about the problem space (floats are confusing with respect to value-preserving conversion to/from string)\n\nthere's probably interesting things to think about here, but I don't yet see a specific problem being identified","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24kGRJt5E_l4MsXzJm9lf5hinYXSXLKmFftOgj7ZZxqUM\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />well, I wonder what we should do about the problem space (floats are confusing with respect to value-preserving conversion to/from string)</blockquote></mx-reply>there&#39;s probably interesting things to think about here, but I don&#39;t yet see a specific problem being identified","m.relates_to":{"m.in_reply_to":{"event_id":"$kGRJt5E_l4MsXzJm9lf5hinYXSXLKmFftOgj7ZZxqUM"}},"msgtype":"m.text"},"ts":1739925573095,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QEqybiNhW0_cpwQHMj3ouVhEJe284PDO_6kNpv31TuQ"},
{"content":{"body":"oh, yes, I think that conflating this with MAX_SAFE_INTEGER is just incoherent and that part of the proposal should be removed","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JmhayNwxtGrKdZSLpEPKN5LroaPdWqsUBkmZRWQdm84"}},"msgtype":"m.text"},"ts":1739925576160,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LGJ7Az4JXDhuXq_AnbhpXSngWP9Q5BFoMjHK1aB2Y9A"},
{"content":{"body":"An example that fails: 10000000000000000 cannot be converted to any string for which isSafeNumeric, as defined in the presentation, returns true.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q6xWIUnu1PVpWamiUQCx9nWRC2btu49bbsS5wO_Q8RY"}},"msgtype":"m.text"},"ts":1739925586346,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$eVpAYtWyxugpFdvkEkC5pwPql9mVCjZx7cowO0l4OcA"},
{"content":{"body":"programmers definitely don't tend to think about floats as a range of underlying reals, even if that's the most sensible way to understand them. The MV tends to correspond more closely to the intuition, I think","m.mentions":{},"msgtype":"m.text"},"ts":1739925588588,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LJBdq8HtnH02Y4fwjVqqRrIKlc2UMk8SUSpw2IreBm0"},
{"content":{"body":"at least as I understand the proposal it is strictly about round-tripping values, not about doing arithmetic on them","m.mentions":{},"msgtype":"m.text"},"ts":1739925589464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YYd3X-AB8lbNs4uqiJId9aHyzBfnQZeePd4EnmA7VME"},
{"content":{"body":"`+String(10000000000000000) === 10000000000000000` is true, am i missing some zeroes?","format":"org.matrix.custom.html","formatted_body":"<code>+String(10000000000000000) === 10000000000000000</code> is true, am i missing some zeroes?","m.mentions":{"user_ids":["@waldemarh:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eVpAYtWyxugpFdvkEkC5pwPql9mVCjZx7cowO0l4OcA"}},"msgtype":"m.text"},"ts":1739925649586,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VC0vcgmLda4mv9rk2ieTdXKXcRVuW51xv_ZuCEsWsHU"},
{"content":{"body":"i 100% agree that most programmers think about numerical syntax as if they're mathematical values","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LJBdq8HtnH02Y4fwjVqqRrIKlc2UMk8SUSpw2IreBm0"}},"msgtype":"m.text"},"ts":1739925668636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GYJ-KV6oAZLkf_XAIKXVplmDIOkqoQgd1tL3JJaJ948"},
{"content":{"body":"`string === ToString(ToNumber(string))` isn't the same as `MV(string) === MV(ToString(ToNumber(string)))` given that `MV(\"1.0\")` and `MV(\"1.00\")`  are the same mathematical values but different strings?","format":"org.matrix.custom.html","formatted_body":"<code>string === ToString(ToNumber(string))</code> isn't the same as <code>MV(string) === MV(ToString(ToNumber(string)))</code> given that <code>MV(\"1.0\")</code> and <code>MV(\"1.00\")</code>  are the same mathematical values but different strings?","m.mentions":{},"msgtype":"m.text"},"ts":1739925670051,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1FJ8NGfHAnihy9SJa8mL3VNYEGCWbZT1tsyes6tpYd4"},
{"content":{"body":"`10000000000000000 > Number.MAX_SAFE_INTEGER`","format":"org.matrix.custom.html","formatted_body":"<code>10000000000000000 &gt; Number.MAX_SAFE_INTEGER</code>","m.mentions":{"user_ids":["@ljharb:matrix.org","@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VC0vcgmLda4mv9rk2ieTdXKXcRVuW51xv_ZuCEsWsHU"}},"msgtype":"m.text"},"ts":1739925676295,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VzZdrq6aL-wU7JO39UJAAmb5FdTco14l90OD56L9dHs"},
{"content":{"body":"aha, that's a fair point, decimal/trailing zero normalization, as well as leading zeroes, would be different","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1FJ8NGfHAnihy9SJa8mL3VNYEGCWbZT1tsyes6tpYd4"}},"msgtype":"m.text"},"ts":1739925697759,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yklPrTCYRy4qMWt2HVXoAkEXEcMCkdbaDuxW4S72Qz4"},
{"content":{"body":"is that the problem statement here, dealing with those kinds of things?","m.mentions":{},"msgtype":"m.text"},"ts":1739925708839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MtyRGi_V3vjMkd8H46WwNnmwswjEOgxsWv_P-62Cpao"},
{"content":{"body":"I think the `MV` is to handle that normalization.","format":"org.matrix.custom.html","formatted_body":"I think the <code>MV</code> is to handle that normalization.","m.mentions":{},"msgtype":"m.text"},"ts":1739925713022,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$krJ6l3dzvWK8Ihc6DXv5Yk-8mXsfmd797TiHYr7WasI"},
{"content":{"body":"this is likely why they reached for MV, but MV is not exactly that","m.mentions":{},"msgtype":"m.text"},"ts":1739925722210,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IV-jFcqfWbKJzb3BCzpaGIpgBBEWIBaLZUoinTuzKmE"},
{"content":{"body":"I assume the goal of `isSafeNumeric` is to validate that the input string can be accurately represented as a `Number` without loss? It can probably be specified more directly.","format":"org.matrix.custom.html","formatted_body":"I assume the goal of <code>isSafeNumeric</code> is to validate that the input string can be accurately represented as a <code>Number</code> without loss? It can probably be specified more directly.","m.mentions":{},"msgtype":"m.text"},"ts":1739925814236,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3OizxYl8PRLiX76OnNxrBhfWL7CozzWQDwuhb22Cf5U"},
{"content":{"body":"I feel like this is missing a problem statement that differentiates it from https://xkcd.com/927/","m.mentions":{},"msgtype":"m.text"},"ts":1739925829185,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$bw0aNYpdQbbTyJW0VSu5G-Y45FBUHMp4cf_9T9G_ivA"},
{"content":{"body":"we're debating what the champion considers \"without loss\"","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3OizxYl8PRLiX76OnNxrBhfWL7CozzWQDwuhb22Cf5U"}},"msgtype":"m.text"},"ts":1739925832436,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mAwWo3YSAZ_8IJbvNF654vl1UOiCWYBeoZ7PuOww9vo"},
{"content":{"body":"When printing a Number into a string that satisfies isSafeNumeric you also have the issue of what to print for things like 1e40 or 1e-30, since this thing rejects exponential notation.","m.mentions":{},"msgtype":"m.text"},"ts":1739925837738,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$10ds8Qxpxglu3dbKc96rALsIwd5O-UWit-dJhrHWtvY"},
{"content":{"body":"because as strictly read, 0.1 fails (as do 0.2, 0.3 etc)","m.mentions":{},"msgtype":"m.text"},"ts":1739925852146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GA3e3YrJr_Xt6lOc9AKrByeJVW-b5Mzbtck6ZGVJ2VU"},
{"content":{"body":"no longer true","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GA3e3YrJr_Xt6lOc9AKrByeJVW-b5Mzbtck6ZGVJ2VU"}},"msgtype":"m.text"},"ts":1739925865124,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ClcZi2tqXP-Vbqsw9DHoL2XKWoZMwfd-3CEVC9uPwwQ"},
{"content":{"body":"I wonder if the use cases for this proposal are basically covered by decimal, in that one would just use decimals rather than numbers, but guarded (possibly many times) with `Number.isSafeNumeric`","format":"org.matrix.custom.html","formatted_body":"I wonder if the use cases for this proposal are basically covered by decimal, in that one would just use decimals rather than numbers, but guarded (possibly many times) with <code>Number.isSafeNumeric</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739925867552,"senderName":"Jesse (TC39 🇺🇸)","senderId":"@jesse:igalia.com","id":"$8FsZgCvcqT9t21VV3NMYnnvn-fzMCDeXfj3zgm6ybag"},
{"content":{"body":"that was true but they fixed it","m.mentions":{},"msgtype":"m.text"},"ts":1739925868121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FCS5ttGd1ZMM2okObgmKMkVQYkap5ddcsVurGSxXNKw"},
{"content":{"body":"oh how did they fix it?","m.mentions":{},"msgtype":"m.text"},"ts":1739925873409,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$maUeP6btvEcughpt9rfg98N26ZFqj7xLL-5-IHRqXXU"},
{"content":{"body":"it's the thing on the screen","m.mentions":{},"msgtype":"m.text"},"ts":1739925881133,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W_j5paW_GgTDo_vmCHaDK-qiP7O52gay538otB25tS0"},
{"content":{"body":"see the current slide","msgtype":"m.text"},"ts":1739925883373,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Lv9HaZYVzDuBOkJ28BPx-owrCkE1pSvDYI7ZCG1RafE"},
{"content":{"body":"`MV(string) = MV(ToString(ToNumber(string))`","format":"org.matrix.custom.html","formatted_body":"<code>MV(string) = MV(ToString(ToNumber(string))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739925890499,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xFabejib_mTP5UZOazJoAaWFoXtAO5qhCcI34U4FF9A"},
{"content":{"body":"ah","m.mentions":{},"msgtype":"m.text"},"ts":1739925891670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rcoc5-KAzykJH5xbwI2vEW2m8apYrKUCU0HDLEQ9fp4"},
{"content":{"body":"that passes for the string `\"0.1\"`","format":"org.matrix.custom.html","formatted_body":"that passes for the string <code>\"0.1\"</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739925895148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-u2fYP2LvJhsTaww7lwcDnPCOi1lxdKHzUSZ6a4Gz-s"},
{"content":{"body":"yeah then i'm back to jordan's question","m.mentions":{},"msgtype":"m.text"},"ts":1739925913438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h3akEIQ7nlFoBA5nlaCfPdMoQIixttkumfIp6XhTzRg"},
{"content":{"body":"I just don't see what passing that is *useful* for","format":"org.matrix.custom.html","formatted_body":"I just don&#39;t see what passing that is <i data-md=\"*\">useful</i> for","msgtype":"m.text"},"ts":1739925918815,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_dQo7oLY-g1KUnctBYGoS5VZN_afotVUwzxNEFAa2TQ"},
{"content":{"body":"why not do the string roundtripping...?","m.mentions":{},"msgtype":"m.text"},"ts":1739925919716,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d3Lk2US0hEKiwItU1sy0fr-7uUbfHiIlvy71fGT7FlY"},
{"content":{"body":"well, consider the input string \".00000000000000000000001\"","m.mentions":{},"msgtype":"m.text"},"ts":1739925986145,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zq0ABceef60kj3YU5p0SaEVokkfYV-EnW1-fiH92g9I"},
{"content":{"body":"import attributes has been merged into the spec 🎉 (https://github.com/tc39/ecma262/pull/3057)","m.mentions":{},"msgtype":"m.text"},"ts":1739926006809,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$McCVqBWi64QmfZ069b-0lbOhMXD1Yc0tD0t3tN5E9jc"},
{"content":{"body":"its really hard to propose any particular behavior without understanding the intention more","m.mentions":{},"msgtype":"m.text"},"ts":1739926033971,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1hg1hFRzJHJHI9ysec-vN3P8uNExq2M5vcje3RNSU-o"},
{"content":{"body":"true, if you accept inconsistently formatted strings as input, then doing the normalization yourself is hard","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zq0ABceef60kj3YU5p0SaEVokkfYV-EnW1-fiH92g9I"}},"msgtype":"m.text"},"ts":1739926055646,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QQP4w1wkzjS-HXwjf5IUtYqG6teilSdu8YXb_YIf-yE"},
{"content":{"body":"\".00000000000000000000001\" toStrings to `1e-23` so it does not satisfy `string === ToString(ToNumber(string)`","format":"org.matrix.custom.html","formatted_body":"\".00000000000000000000001\" toStrings to <code>1e-23</code> so it does not satisfy <code>string === ToString(ToNumber(string)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1739926056401,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NfpM5nDCAW-m7WqfKa-129FARvaJih4tBMYgHJikgrk"},
{"content":{"body":"* ~true, if you accept inconsistently formatted strings as input, then doing the normalization yourself is hard~ oh you weren't talking about the leading zero, nvm","m.mentions":{},"m.new_content":{"body":"~true, if you accept inconsistently formatted strings as input, then doing the normalization yourself is hard~ oh you weren't talking about the leading zero, nvm","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QQP4w1wkzjS-HXwjf5IUtYqG6teilSdu8YXb_YIf-yE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739926087014,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bAKVXKXkgCG7Yjmc_ry_NM8qjk_24OHTSvUCrEXq4oE"},
{"content":{"body":"i see, thanks","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NfpM5nDCAW-m7WqfKa-129FARvaJih4tBMYgHJikgrk"}},"msgtype":"m.text"},"ts":1739926087479,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LaTmYJ1M-oLNegVdox2jmjZo4GMUp5PxGV4WcEBbXxo"},
{"content":{"body":"that said if you reject `\"1e-23\"` as input I'm not sure how you're supposed to produce values which are accepted by this","format":"org.matrix.custom.html","formatted_body":"that said if you reject <code>\"1e-23\"</code> as input I'm not sure how you're supposed to produce values which are accepted by this","m.mentions":{},"msgtype":"m.text"},"ts":1739926147133,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EVXkDuUwAJY0MkDQP2ftJRE4G2078qdhC039WHsoalI"},
{"content":{"body":"I guess `toFixed`?","format":"org.matrix.custom.html","formatted_body":"I guess <code>toFixed</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1739926150250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tWUTUIxXsSShnPrl4BVyflKzX5UZk6Pyzok-DIPG0lU"},
{"content":{"body":"> <@canadahonk:matrix.org> import attributes has been merged into the spec 🎉 (https://github.com/tc39/ecma262/pull/3057)\n\nJSON modules incoming","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24McCVqBWi64QmfZ069b-0lbOhMXD1Yc0tD0t3tN5E9jc\">In reply to</a><a href=\"https://matrix.to/#/%40canadahonk%3Amatrix.org\">@canadahonk:matrix.org</a><br />import attributes has been merged into the spec 🎉 (https://github.com/tc39/ecma262/pull/3057)</blockquote></mx-reply>JSON modules incoming","m.relates_to":{"m.in_reply_to":{"event_id":"$McCVqBWi64QmfZ069b-0lbOhMXD1Yc0tD0t3tN5E9jc"}},"msgtype":"m.text"},"ts":1739926187810,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fMjohjYrp4cJgkFeZYZwP62Q9BluiquOK_fKQl52blY"},
{"content":{"body":"though it's hard to know how many digits to use","m.mentions":{},"msgtype":"m.text"},"ts":1739926193183,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sLSbDuh5VnZb1oF1u6EHZlxfeVMb5TiYeG22UhBiGUQ"},
{"content":{"body":"so the thing i heard was an app would choose to represent input as a double, or to use a userland library. that seems kinda wild to me","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_dQo7oLY-g1KUnctBYGoS5VZN_afotVUwzxNEFAa2TQ"}},"msgtype":"m.text"},"ts":1739926198522,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qu5CijTwoezBWgU7iQy_Cjj_H3IU5MwC3VfoOaXoSsE"},
{"content":{"body":"to choose representation at runtime like that, given floating point arithmetic","m.mentions":{},"msgtype":"m.text"},"ts":1739926226989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2Zgpf70qA0S-ZUmmH0z9lxZ_K2lQPgVTUnHr5O93u8Q"},
{"content":{"body":"i... don't know how to disentangle that problem statement from \"i wish we didn't have floats\"","m.mentions":{},"msgtype":"m.text"},"ts":1739926408111,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D8t62tD_CUDsUa_D57ATdSHmY_qP0WR8aLssbsZruWE"},
{"content":{"body":"Michael Ficarra: Not when validating input","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: Not when validating input","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1739926415483,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mvnaiCfM40cSsRRtB_JMjIRXlv96VoP1nZc6MkvRYuU"},
{"content":{"body":"did Michael Ficarra press the forbidden button?","format":"org.matrix.custom.html","formatted_body":"did <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> press the forbidden button?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1739926458790,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$XabMwo1b7nVg3m4RWLqBNh_bAo-S1Khi9b7pn8V1lIY"},
{"content":{"body":"He jumped ahead, is that what the forbidden button does?","msgtype":"m.text"},"ts":1739926491274,"senderName":"Michael Saboff","senderId":"@mlsaboff:matrix.org","id":"$sVcr8P8LdOZ7qC3Ef3EV4QXaU8Tm33aNxgcCCOtB4dE"},
{"content":{"body":"`I'm done speaking` is the forbidden button.  otherwise I don't know how the queue jumped","format":"org.matrix.custom.html","formatted_body":"<code>I'm done speaking</code> is the forbidden button.  otherwise I don't know how the queue jumped","m.mentions":{},"msgtype":"m.text"},"ts":1739926518191,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$iuOIeDAtyeFgiwHAJ1rQmBtKyvI-yRt8E9jnBSqa7Tw"},
{"content":{"body":"I think he means as if you did the maths on reals","msgtype":"m.text"},"ts":1739926520733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uhFow820TEHcGLb_LNKnLeQ8xUsbvaigtXLNgAtS574"},
{"content":{"body":"Chris de Almeida: Note that I don’t have the forbidden button on my TCQ page.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: Note that I don’t have the forbidden button on my TCQ page.","msgtype":"m.text"},"ts":1739926597280,"senderName":"Michael Saboff","senderId":"@mlsaboff:matrix.org","id":"$uoeSKtLLs3gkTU1Q0i9USYqppbY826Td2bulduaByNY"},
{"content":{"body":"possible tg5 topic: understanding how ieee754 works","m.mentions":{},"msgtype":"m.text"},"ts":1739926604007,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$q-DXwbt5hX3Z3Nqx6rWRA_we6H2ZzzzJTrrusuAUrPY"},
{"content":{"body":"you do if you're currently the one on the queue","m.mentions":{"user_ids":["@mlsaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uoeSKtLLs3gkTU1Q0i9USYqppbY826Td2bulduaByNY"}},"msgtype":"m.text"},"ts":1739926612240,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$-rLmrWBS_YhpUITnGP8hIUOr1eYLiCLukA1oleqpiGs"},
{"content":{"body":"meaning 'Speaking`","m.mentions":{},"msgtype":"m.text"},"ts":1739926633763,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$IxfQp-YSMmr1N1N2pqoM9AW8_NPz7FUXpWHsFo8RU84"},
{"content":{"body":"* meaning `Speaking\\`","format":"org.matrix.custom.html","formatted_body":"* meaning <code>Speaking\\</code>","m.mentions":{},"m.new_content":{"body":"meaning `Speaking\\`","format":"org.matrix.custom.html","formatted_body":"meaning <code>Speaking\\</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IxfQp-YSMmr1N1N2pqoM9AW8_NPz7FUXpWHsFo8RU84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739926638368,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4ic4MRBDwhAgtBrPVocyS2uxF6PO5eX05Lb7-Kk_5vw"},
{"content":{"body":"* meaning `Speaking`","format":"org.matrix.custom.html","formatted_body":"* meaning <code>Speaking</code>","m.mentions":{},"m.new_content":{"body":"meaning `Speaking`","format":"org.matrix.custom.html","formatted_body":"meaning <code>Speaking</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IxfQp-YSMmr1N1N2pqoM9AW8_NPz7FUXpWHsFo8RU84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739926644269,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$DiFhQNpPQiTyqxgDUQ1Z1aUYQwvFHbiu5r_PCDxJUsA"},
{"content":{"body":"> <@softwarechris:matrix.org> you do if you're currently the one on the queue\n\nShould I press it 😏","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-rLmrWBS_YhpUITnGP8hIUOr1eYLiCLukA1oleqpiGs\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>you do if you're currently the one on the queue</blockquote></mx-reply>Should I press it 😏","m.relates_to":{"m.in_reply_to":{"event_id":"$-rLmrWBS_YhpUITnGP8hIUOr1eYLiCLukA1oleqpiGs"}},"msgtype":"m.text"},"ts":1739926656376,"senderName":"Michael Saboff","senderId":"@mlsaboff:matrix.org","id":"$VCoRFpNrCrfSCAMl0qebw6vZ8TvmsLuEBMVJmsPkCv4"},
{"content":{"body":"Why is the button forbidden?","m.mentions":{},"msgtype":"m.text"},"ts":1739926671875,"senderName":"Erik Marks","senderId":"@rekmarks:matrix.org","id":"$UIMMkKASqsDnOEkuF58_-mUYrOd2uO9ocKUWb4cyMro"},
{"content":{"body":"Slide 4 seems like the clearest example to me. `0.1234567890123456789` cannot be accurately represented in `Number` as it truncates to `0.123456789012345678`. Similarly, `9007199254740993` cannot be represented.","format":"org.matrix.custom.html","formatted_body":"Slide 4 seems like the clearest example to me. <code>0.1234567890123456789</code> cannot be accurately represented in <code>Number</code> as it truncates to <code>0.123456789012345678</code>. Similarly, <code>9007199254740993</code> cannot be represented.","m.mentions":{},"msgtype":"m.text"},"ts":1739926677014,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GoNLwVsmoDrzooRb2FfKV5rhGS_BmirgjTu7Wj6qSqo"},
{"content":{"body":"I'm about to adblock the button","msgtype":"m.text"},"ts":1739926678026,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aILeJeIH9sXAhsh864MzD3f2WXxk_era2lKcZiNo2LM"},
{"content":{"body":"rbuckton: suppose you can accurately represent something. what do you do with that number then?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: suppose you can accurately represent something. what do you do with that number then?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1739926699423,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pa3m9WQlnAfb9xGKFYnZhXRBvtIBfo7Rb2cmBY1nOEc"},
{"content":{"body":"assuming Chrome still permits me to do that","msgtype":"m.text"},"ts":1739926699580,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0QfMgfE6zayPZxhiSx6h3SuRSiSNWgZkDf8vlazSsCA"},
{"content":{"body":"or i suppose, what do you do with that string","m.mentions":{},"msgtype":"m.text"},"ts":1739926710091,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y6YCIo_F-dfEcV7W7DrPZhyTmNwcMa5r9xz88u0QEEU"},
{"content":{"body":"There is a race condition between you pressing it and the chairs pressing it for you. If the speed at which the chair's signal to stop pressing travels from their eyes to their brain is slower than the hand movement, they are going to press it for the person after","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UIMMkKASqsDnOEkuF58_-mUYrOd2uO9ocKUWb4cyMro"}},"msgtype":"m.text"},"ts":1739926727623,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uX4CJdBII5i-nRf9htMy1O6KOJyP7Oeeglnxo0DCbjY"},
{"content":{"body":"> <@rbuckton:matrix.org> Slide 4 seems like the clearest example to me. `0.1234567890123456789` cannot be accurately represented in `Number` as it truncates to `0.123456789012345678`. Similarly, `9007199254740993` cannot be represented.\n\nsee snek's comment above about what \"can be represented\" means","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GoNLwVsmoDrzooRb2FfKV5rhGS_BmirgjTu7Wj6qSqo\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />Slide 4 seems like the clearest example to me. <code>0.1234567890123456789</code> cannot be accurately represented in <code>Number</code> as it truncates to <code>0.123456789012345678</code>. Similarly, <code>9007199254740993</code> cannot be represented.</blockquote></mx-reply>see snek&#39;s comment above about what &quot;can be represented&quot; means","m.relates_to":{"m.in_reply_to":{"event_id":"$GoNLwVsmoDrzooRb2FfKV5rhGS_BmirgjTu7Wj6qSqo"}},"msgtype":"m.text"},"ts":1739926728505,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9TvbIVb8lxFQwVy4rWjL6OxNefqzpP4jSBfiMLyw6Bc"},
{"content":{"body":"For me, if it can be accurately represented, the function returns true. If it can't you inform the user (hence the use case for input validation)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pa3m9WQlnAfb9xGKFYnZhXRBvtIBfo7Rb2cmBY1nOEc"}},"msgtype":"m.text"},"ts":1739926737673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9EKLqYVlWaw_rcSAWiYV3bXRiY3SENfnkYyu4MuUmVU"},
{"content":{"body":"* There is a race condition between you pressing it and the chairs pressing it for you. If the speed at which the chair's neurons signal to stop pressing travels from their eyes to their brain is slower than the hand movement, they are going to press it for the person after","m.mentions":{},"m.new_content":{"body":"There is a race condition between you pressing it and the chairs pressing it for you. If the speed at which the chair's neurons signal to stop pressing travels from their eyes to their brain is slower than the hand movement, they are going to press it for the person after","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uX4CJdBII5i-nRf9htMy1O6KOJyP7Oeeglnxo0DCbjY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739926750995,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Z6WlcpeO9Hv_toRbbrJXKBUZjA0rUDojPui81xL8-So"},
{"content":{"body":"if it returns true, what do you do with the input?","m.mentions":{},"msgtype":"m.text"},"ts":1739926777175,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wY9isK4jJSh9jWZQWYJuToDtBySR-QOIr1jtbRs66tA"},
{"content":{"body":"A better approach, were we to keep the button, would be to just notify the chair that the user is finished.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uX4CJdBII5i-nRf9htMy1O6KOJyP7Oeeglnxo0DCbjY"}},"msgtype":"m.text"},"ts":1739926808276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uqkaViPsDIqL9nNiWIMlPvFKcZRh775NdK0qhRy4O-4"},
{"content":{"body":"Should we do breakout sessions at the end of the meeting? https://github.com/tc39/Reflector/issues/552","m.mentions":{},"msgtype":"m.text"},"ts":1739926819030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$D2ner08o5h_GEglzP-2hzIXD0lHaacFnTE63ZVn4cLU"},
{"content":{"body":"would it be possible to have AV support for each breakout session for remote attendees?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D2ner08o5h_GEglzP-2hzIXD0lHaacFnTE63ZVn4cLU"}},"msgtype":"m.text"},"ts":1739926850604,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bD64EmKZGA-QbOEkNwGOrvDuwQREcG8VtYJEDkRCPSI"},
{"content":{"body":"You use it? Beyond validating the input, its up to the developer to determine if it can then be safely used with other mathematical operations.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wY9isK4jJSh9jWZQWYJuToDtBySR-QOIr1jtbRs66tA"}},"msgtype":"m.text"},"ts":1739926858827,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$70eZzHljalq-18tYDG0afRFWVKcWxNvr1bUQgX3djSg"},
{"content":{"body":"Yeah, we should be able to do that","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bD64EmKZGA-QbOEkNwGOrvDuwQREcG8VtYJEDkRCPSI"}},"msgtype":"m.text"},"ts":1739926866963,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hXmj5pcor-8EFa_tvV9IBMi7p4eaaFpx9HF_30oF7b4"},
{"content":{"body":"i am highly skeptical of that claim","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$70eZzHljalq-18tYDG0afRFWVKcWxNvr1bUQgX3djSg"}},"msgtype":"m.text"},"ts":1739926878817,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n3vYss-sgGRbOvYAu49ZWRPy1Sy8BsNG_RjtKqSCkvc"},
{"content":{"body":"but we'd probably keep note-taking informal","m.mentions":{},"msgtype":"m.text"},"ts":1739926881444,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0NN01CqQcYu43Nw3G9DHV7UmPkKK2O7ajJRz5x4th6o"},
{"content":{"body":"It can be used for relational comparison at the least, and serialized via JSON. ","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n3vYss-sgGRbOvYAu49ZWRPy1Sy8BsNG_RjtKqSCkvc"}},"msgtype":"m.text"},"ts":1739927004609,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tpnpmMuxU6uxBe3iWVnxTQt1mCL0DdR2i0GIQYUAOfQ"},
{"content":{"body":"I think the challenge is that you're stuck in the binary64 world; stuck in that world, things are safe and if you say things aren't safe, you have no recourse to a safe alternative","m.mentions":{},"msgtype":"m.text"},"ts":1739927029207,"senderName":"Jesse (TC39 🇺🇸)","senderId":"@jesse:igalia.com","id":"$0pKVDPYgqVA1dui0TEGlPzGSjWk9wMClX6mK4BHbj_U"},
{"content":{"body":"please everyone take a look at the transcription if you have time","m.mentions":{},"msgtype":"m.text"},"ts":1739927055181,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$qwb3BWQOKQzE1kdW5792ib6p1LMWLOEkBSHxyyXOT5M"},
{"content":{"body":"at some points I was the only one helping with the notes, and I definitely missed a lot of stuff at various points","m.mentions":{},"msgtype":"m.text"},"ts":1739927073655,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Pks2Wzn2A0TVVQd2YLpd8MAsqYn5JeT-FChuPI-eZk8"},
{"content":{"body":"thanks Andreu Botella !","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a> !","m.mentions":{"user_ids":["@abotella:igalia.com"]},"msgtype":"m.text"},"ts":1739927163235,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$r4KXvwyaxn7mZ2rQHGOeknYosEDtjfpnD5l62YbBdYk"},
{"content":{"body":"thank you for your help!  if you ever find that we are not keeping up with the notes properly, please raise a `Point of Order`, so we can pause to rectify 🙏","format":"org.matrix.custom.html","formatted_body":"thank you for your help!  if you ever find that we are not keeping up with the notes properly, please raise a <code>Point of Order</code>, so we can pause to rectify 🙏","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Pks2Wzn2A0TVVQd2YLpd8MAsqYn5JeT-FChuPI-eZk8"}},"msgtype":"m.text"},"ts":1739927267418,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$hT080JptyVEtQR-OpQ_HF8VlQV2jDaEmYtLUStKftRw"},
{"content":{"body":"many thanks to our note takers today 👏👏👏👏👏👏\n\nAndreu Botella\nDaniel Ehrenberg\nJesse Alama\nLinus Groh\nOliver Medhurst\nShane Carr\n","m.mentions":{},"msgtype":"m.text"},"ts":1739928103029,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$d40Rfh0YIBjKeMG-liZilEgSljcOIrfi3C-ADlh87go"},
{"content":{"body":"littledan or whoever else is interested: here's my doc for avoiding allocations in engines for the iterator protocol https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit?tab=t.0","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> or whoever else is interested: here's my doc for avoiding allocations in engines for the iterator protocol https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit?tab=t.0","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1739945833018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FN8cFDgCnMDu-OHjLgOavDlaXRsTk-oDf99CMNZrUeU"},
{"content":{"body":"I missed the isSafeNumeric discussion due to being asleep at the time. If it gets a continuation, it'd be nice if it was earlier rather than later, but that's of course unlikely (mini-rant: For the last few years 4/6 TC39 meetings have been on North American timezones, with 2/6 on Pacific Time. This is not friendly to remote-participation from Europe. It'd be a little bit friendlier if at least the remote PDT meeting was moved to EDT or even further East).\n\nSo posting the comments here that I'd have mentioned out loud had I been there:\n- I'm generally positive on enabling a developer to verify that WYSIWYG applies to their numeric string.\n- I'm not sure that \"safe\" is the right word here, though we do already have `Number.isSafeInteger`. I was thinking that \"precise\" or \"canonical\" could be more apt. The attachment point could also be different, as all of the pre-existing `Number.is*` functions require their input to be a number.\n- This seems to correlate very highly with the goals of Decimal, which, if accepted, would also expand the set of strings for which JS can provide a \"safe\" numerical representation. That proposal is specifically looking to improve the representation of values coming from the real world or elsewhere, which seems like the same domain as this.","format":"org.matrix.custom.html","formatted_body":"<p>I missed the isSafeNumeric discussion due to being asleep at the time. If it gets a continuation, it'd be nice if it was earlier rather than later, but that's of course unlikely (mini-rant: For the last few years 4/6 TC39 meetings have been on North American timezones, with 2/6 on Pacific Time. This is not friendly to remote-participation from Europe. It'd be a little bit friendlier if at least the remote PDT meeting was moved to EDT or even further East).</p>\n<p>So posting the comments here that I'd have mentioned out loud had I been there:</p>\n<ul>\n<li>I'm generally positive on enabling a developer to verify that WYSIWYG applies to their numeric string.</li>\n<li>I'm not sure that \"safe\" is the right word here, though we do already have <code>Number.isSafeInteger</code>. I was thinking that \"precise\" or \"canonical\" could be more apt. The attachment point could also be different, as all of the pre-existing <code>Number.is*</code> functions require their input to be a number.</li>\n<li>This seems to correlate very highly with the goals of Decimal, which, if accepted, would also expand the set of strings for which JS can provide a \"safe\" numerical representation. That proposal is specifically looking to improve the representation of values coming from the real world or elsewhere, which seems like the same domain as this.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739955346169,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ehrRASdJ2zLu7fFckAaVnq3_kb5uWwjI-SHYB45omBM"},
{"content":{"body":"interesting. if it's not good for Europe then it'd literally only work for the Americas","m.mentions":{},"msgtype":"m.text"},"ts":1739955889138,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Z6PODLP1nTllFEqV5iv1TlgikdaP_1PoHn_jPLU84ZU"},
{"content":{"body":"* interesting. if it's not good for Europe then it'd literally only work for the Americas\n(...though I think you just mean that the last couple hours don't work, which is much better than the entire meeting not working)","m.mentions":{},"m.new_content":{"body":"interesting. if it's not good for Europe then it'd literally only work for the Americas\n(...though I think you just mean that the last couple hours don't work, which is much better than the entire meeting not working)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Z6PODLP1nTllFEqV5iv1TlgikdaP_1PoHn_jPLU84ZU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739956047976,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$c2NvDlYjECXiP7lfO_7sB5EJiWIxREpox0XNNUtov3M"},
{"content":{"body":"I'm on Eastern European Time, and this week's meetings start at 20:00 and end at 03:00 for me. I'm used to having plenty of calls with folks on Pacific Time, but those are all scheduled for the morning there; TC39 calls take up the whole day. Comparatively, a meeting on US Eastern Time ends at my midnight, which is still bad but not as horrible.\n\nI do understand the benefits of running the meetings at different times, and the ones in Europe or Asia are about as much fun for North American participants, but it's the regularity of having all of the virtual meetings on North American timezones _and_ having one of them on Pacific Time that seems a bit extra.","format":"org.matrix.custom.html","formatted_body":"<p>I'm on Eastern European Time, and this week's meetings start at 20:00 and end at 03:00 for me. I'm used to having plenty of calls with folks on Pacific Time, but those are all scheduled for the morning there; TC39 calls take up the whole day. Comparatively, a meeting on US Eastern Time ends at my midnight, which is still bad but not as horrible.</p>\n<p>I do understand the benefits of running the meetings at different times, and the ones in Europe or Asia are about as much fun for North American participants, but it's the regularity of having all of the virtual meetings on North American timezones <em>and</em> having one of them on Pacific Time that seems a bit extra.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1739958284742,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Q1FjWyWEEG-mSa_HmbttMVOV8x4TV73qqmQCMhi5c0I"},
{"content":{"body":"(Sorry for late reply just finally getting through backchannel) Sadly, no. In principle I wish they were, but public front end for this has yet to be resourced. We do have -much- public telemetry data (https://glam.telemetry.mozilla.org), but Use Counters specifically don't have a public front end (and I currently have to make my own dashboard for every use counter probe). ","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UAGflaK1aJ_f0p679Hy0CGLr9v3N9fpMhYA30COYuAI"}},"msgtype":"m.text"},"ts":1739977727086,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$JZ54Wv7eIWK4l9UnU95aBbVQPEBTIa_7kyEJ_BSd8tg"},
{"content":{"body":"you know, one way we might be able to resolve the \"safe numeric string\" proposal is for the champion to give us a large list of sample strings and whether they are \"safe\" and we work backwards from there to try to figure out what they mean","msgtype":"m.text"},"ts":1739983153834,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GxfSAcPPglsSPPTYglbmcD7cL36JwJfQfhtwxGgXbUA"}
]