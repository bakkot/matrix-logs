[
{"content":{"body":"I just stated the reason. The definition of \"informative\" is any text that can be removed without affecting the normative parts of the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1739923207645,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VfmqsnYohOy3bwy4VXtXOPpggZYyMID5wO45pT7k_rU"},
{"content":{"body":"An assert doesn't fall into that category if it can make a spec normatively inconsistent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923234032,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$goO_bSMyul3kk92N3qGZUxPFhTBU_yhcsg6LVt4iZdE"},
{"content":{"body":"Informative text being incorrect seems like it definitionally means the spec is inconsistent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923234749,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RRYCZC338QHgrAjiFezNNR8IAT4PfK31syq9lmzr0dE"},
{"content":{"body":"and assert failure does not make the spec normatively incorrect, it makes it incoherent. incorrect/correct as a category doesn't even arise because it's malformed","m.mentions":{},"msgtype":"m.text"},"ts":1739923252713,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gelN6amwOd0KXuwqtUpAxZD-TwSezFbtMLKS3nZ5_Uw"},
{"content":{"body":"this was very fast advancement for such a significant proposal","m.mentions":{},"msgtype":"m.text"},"ts":1739923274868,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tW_MYUZpB2pdWEtOImmTuUpnl1rvNKiZngxCvf3qTeM"},
{"content":{"body":"An Assertion is a statement that the asserted condition is the only possible state based on how the algorithm is used elsewhere in the specification. It is essentially informative because its absence would have no impact on the spec itself, so long as the spec is coherent.","m.mentions":{},"msgtype":"m.text"},"ts":1739923285136,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J7xqOLx5L5AE2iJVPHi484e2SwCt-9z7hoTSJi8KYzk"},
{"content":{"body":"(I think that's a good thing -- we're able to act efficiently when it's a good idea)","m.mentions":{},"msgtype":"m.text"},"ts":1739923287226,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bgaU7XioYPJtJ30X1MAVzFBejQR-keDD_YkFyR7Ujnw"},
{"content":{"body":"Incorrect = malformed in my comment above.","m.mentions":{},"msgtype":"m.text"},"ts":1739923294438,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$91UT8VPcz3jI-srjGL2L7LM3Knv4pD0H62rccCXUNWw"},
{"content":{"body":"i see, well, its removal still doesn't affect the malformedness","m.mentions":{},"msgtype":"m.text"},"ts":1739923308598,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L4QbIkSITlZLXc7wld-tEXVBzUirxx9kN57e2Tls_6k"},
{"content":{"body":"the spec remains malformed if the only removal is the assert","m.mentions":{},"msgtype":"m.text"},"ts":1739923318280,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9vvzRAXqgxrPbptPxNsyvDmG4y7pGvxsQdkQVl-UZ54"},
{"content":{"body":"Yes, it does, because the spec might become well-formed with removal of asserts.","m.mentions":{},"msgtype":"m.text"},"ts":1739923337078,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$OvW3Ln2NCgeY13foqFOl4XjJqr-AhyP6kibcJUGsiG0"},
{"content":{"body":"interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of assertions in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"msgtype":"m.text"},"ts":1739923377475,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I"},
{"content":{"body":"* interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of contracts in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"m.new_content":{"body":"interestingly, the C++ standards committee is currently working through a similar epistemological debate, but at the level of contracts in source code -- should they execute? I heard they decided that the mode is determined by compiler flags (...a very different language philosophy from ours)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923389689,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gq9bOMprve60UWfgFgQQQU8qO_8ONiCsw8_Ku1WfPrM"},
{"content":{"body":"excited to see immutable arraybuffers advancing. There are definitely a number of web API specs that will need to be updated to account for them. I mentioned Web Crypto crypto.randomValues() but BYOB ReadableStream is the other big one. That will need to be updated to reject immutable buffers on reader.read(buf). ","m.mentions":{},"msgtype":"m.text"},"ts":1739923412467,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"},
{"content":{"body":"I plan to use compiler flags for whether to include spec asserts or not (I have none currently)","m.mentions":{},"m.relates_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I","is_falling_back":true,"m.in_reply_to":{"event_id":"$AdQFtVlFZ_UZJqJ6HlCA2c5Tbnp7CL-b9hbcsr8li3I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923425689,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$YusfN0IMbB11okg1HOctfc6EGywVhrPxOTTEU0y_ePo"},
{"content":{"body":"TextEncode encodeInto is another","m.mentions":{},"m.relates_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA","is_falling_back":true,"m.in_reply_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923461912,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$BK6ecL1xpd4EiwEUmQGDkPuCtc_bYHTQ4V0KefL8zrA"},
{"content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention doesn't change, and it turns out the there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"ts":1739923501699,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30"},
{"content":{"body":"* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out the there is a bug in the spec","m.mentions":{},"m.new_content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out the there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923519318,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iWpF_pzL5sp5lq3KdV-LJvLFTBYgTGRU7E3VKrly7bI"},
{"content":{"body":"* i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out there is a bug in the spec","m.mentions":{},"m.new_content":{"body":"i guess the nuance here is the assert tells a story about the intended property of the spec. if it doesn't hold, we say the spec is malformed in the sense that the intention doesn't hold. it could be brought back into well-formedness by changing the intent (which is necessarily not reflectable within the text, only tacit). more often, we don't change the intention, and it turns out there is a bug in the spec","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N4PXr6B4fhxSzQGXkASwN8wTAL0SjW_0x_vcXT3cE30","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923526834,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yxBjhJ-484K6w2yr4fn8kTMEsYSE4ABvgJTyDHPpTz0"},
{"content":{"body":"those fall out to SetValueInBuffer, so probably the fix is to update WebIDL to do something else? or make SetValueInBuffer fallible, though that would be a shame","m.mentions":{"user_ids":["@jasnell:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA"}},"msgtype":"m.text"},"ts":1739923571200,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aq9XwW3O0EYdFl8bzaBV9avDu-9TLNWbuXmtl8vLGWA"},
{"content":{"body":"https://webidl.spec.whatwg.org/#arraybuffer-write is the relevant thing I think","m.mentions":{},"msgtype":"m.text"},"ts":1739923577622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q1I5bJvgV4Kcm_jD41mGDpKPOZYVRlUjbm4GIOOv6FA"},
{"content":{"body":"but we definitely need tests as well","m.mentions":{},"msgtype":"m.text"},"ts":1739923589249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Aff7MCX6WeeKBtrzbsGi7lq9EDlLveMbMxuTJ14tHY"},
{"content":{"body":"I hope web integration can look into where immutable arraybuffers can be a benefit in some cases, e.g., by avoiding certain cloning when used.","m.mentions":{},"m.relates_to":{"event_id":"$KQTL6ZuuVPD91U6CZmGM1ilGL65nj40yM4slKhSdMhA","is_falling_back":true,"m.in_reply_to":{"event_id":"$BK6ecL1xpd4EiwEUmQGDkPuCtc_bYHTQ4V0KefL8zrA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1739923613979,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mBsKNyIMt7mqKBBWuJvQD-mgn7MgcxRMz_9bVDt-raU"},
{"content":{"body":"yes, WebIDL is good to call out to see how they want to go","m.mentions":{},"msgtype":"m.text"},"ts":1739923623513,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CVncOsOp7tS12upe1fusa6VCiaG4EbCi-yHjIR7yqYk"},
{"content":{"body":"maybe they want an attribute to require buffer sources to be immutable","m.mentions":{},"msgtype":"m.text"},"ts":1739923633279,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Oosd0nc2u9rIYRM1fFuH9zvmkX9tMF2JSEKY2SzdW1c"},
{"content":{"body":"also there are places which take a buffer as an argument and they do a defensive copy","m.mentions":{},"msgtype":"m.text"},"ts":1739923659586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2-bWW41jrzyyAglLrUb-pfEPNagh_9BKcdYBHF98DpU"},
{"content":{"body":"and should be updated to not do that","m.mentions":{},"msgtype":"m.text"},"ts":1739923662969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0b8BYJDHYIrV5r_jD_l1HYzBmpMir_TTNK2Dqi_qcyU"},
{"content":{"body":"though that's... mostly fine","m.mentions":{},"msgtype":"m.text"},"ts":1739923696689,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s35ZWu51_FEA1eJJEZjpmuG4VqTpq9Z5xVJbO-vavFA"},
{"content":{"body":"you can just as-if that away","m.mentions":{},"msgtype":"m.text"},"ts":1739923700609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1lC7VRWZ3Hzz1AJcZIObAnENru8xr1iGlpmechcfpys"},
{"content":{"body":"if an immutable arraybuffer can't be detached, copying it can just be not-copying it","m.mentions":{},"msgtype":"m.text"},"ts":1739923703590,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R8eV3WqZVkoj2HASL0DxHejbKTkmnBmIgSuGDVoddlU"},
{"content":{"body":"* if an immutable arraybuffer can't be detached, copying it can just be implemented as not-copying it","m.mentions":{},"m.new_content":{"body":"if an immutable arraybuffer can't be detached, copying it can just be implemented as not-copying it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$R8eV3WqZVkoj2HASL0DxHejbKTkmnBmIgSuGDVoddlU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1739923708785,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kocH1_f1k0A7rByBplVAn_-XN-U7yxw5NuOdc6qdQ1Y"},
{"content":{"body":"Like I said, Python gets by without this happening explicitly, because it has *args and **kwargs, and it's common practice for decorators to make the wrapper function they return take `(*args, **kwargs)` and then call the inner function with the same. That preserves passed function names, without needing the runtime to actually track function names across decorator boundaries. We'd need to add the same to JS, I think, to do named args.","format":"org.matrix.custom.html","formatted_body":"Like I said, Python gets by without this happening explicitly, because it has *args and **kwargs, and it's common practice for decorators to make the wrapper function they return take <code>(*args, **kwargs)</code> and then call the inner function with the same. That preserves passed function names, without needing the runtime to actually track function names across decorator boundaries. We'd need to add the same to JS, I think, to do named args.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bksAF6m9Cm72CK0dD8LP3op7pvk9ah--Jtt_otfLDfE"}},"msgtype":"m.text"},"ts":1739923718855,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"},
{"content":{"body":"yes, I think this is important. Even if it's formally just an editorial change, calling out in various specs where they can avoid work in the case of immutable ArrayBuffers makes it more likely that browsers will implement the optimization.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0b8BYJDHYIrV5r_jD_l1HYzBmpMir_TTNK2Dqi_qcyU"}},"msgtype":"m.text"},"ts":1739923750211,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LNt7rdkfRmutAPqc11U7GMuWe3t-HU1GveqnfGgwLu8"},
{"content":{"body":"I think probably this consists of finding the places which refer to https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy and updating them","m.mentions":{},"msgtype":"m.text"},"ts":1739923768948,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJyJMknawgXEKbefznWtbEzmJ_eBFE7qWOThb0vPoJs"},
{"content":{"body":"Python also has explicit syntax in the parameter list to denote named vs positional arguments","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"}},"msgtype":"m.text"},"ts":1739923771115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IAuEZfeonbeCKtWFTT9r4N80OMB2djJ1gq2QSzCIwDU"},
{"content":{"body":"also agreed there. the amount of as-if optimizations happening on the web spec side is surprisingly little, compared to JS algorithms","m.mentions":{},"msgtype":"m.text"},"ts":1739923774681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ey0S2dHe4pALdgs_sjOCM2ncFHNuHeElHAhNjxL2xEA"},
{"content":{"body":"right, people are more likely to implement line-by-line there","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ey0S2dHe4pALdgs_sjOCM2ncFHNuHeElHAhNjxL2xEA"}},"msgtype":"m.text"},"ts":1739923798386,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VL416p9lbQofqwN7wEGgi2uB7iOkhFNvtZ5hO9Vl6ug"},
{"content":{"body":"only recently (by default, all args are passable by both index and name), and that doesn't affect the pattern I mentioned anyway","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IAuEZfeonbeCKtWFTT9r4N80OMB2djJ1gq2QSzCIwDU"}},"msgtype":"m.text"},"ts":1739923802691,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WPj43Q3MV830Nmv9jc6xID17Z1Oh5tq8Es7jHV_zx6o"},
{"content":{"body":"(but I do think we could apply Python's lessons and go ahead and add \"index only\" and \"name only\" arglist section, like they do)","m.mentions":{},"msgtype":"m.text"},"ts":1739923833961,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xZQMKHlaHhY5U9j0gUNF3OVqV8A3sh_ElarrGGFzNxM"},
{"content":{"body":"As much as I love this feature of Python when writing Python, I think I would prefer to maintain JavaScript’s rustic aesthetic, rather than rewalk the path to realizing Python needed a delimiter between positional arguments and positional arguments that are eligible to be interpreted as kwargs.","m.mentions":{"user_ids":["@tabatkins:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IzojFUK-TAFmo8DA70Kzo18X4WbIR3G7e_pF3BW87pI"}},"msgtype":"m.text"},"ts":1739923848682,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$GUnkOcol0M1DrKqLQWHCLRxJO0J-J3R_AnsNXUEORlU"},
{"content":{"body":"sure, JS having *just* index-only and name-only is a potential future I think woudl be okay, and means there would be a syntax opt-in for named args so minifiers wouldn't need to change by default","format":"org.matrix.custom.html","formatted_body":"sure, JS having <em>just</em> index-only and name-only is a potential future I think woudl be okay, and means there would be a syntax opt-in for named args so minifiers wouldn't need to change by default","m.mentions":{},"msgtype":"m.text"},"ts":1739923919174,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7GtM4Lqza2BvOw5N5lgDjisIbxziPNJEvr4ituIU-2w"},
{"content":{"body":"(you'd have to write `function foo(posarg, **, kwarg1, kwarg2)`)","format":"org.matrix.custom.html","formatted_body":"(you'd have to write <code>function foo(posarg, **, kwarg1, kwarg2)</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1739923940619,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9X12uoGnA--rj08_3vRKMGuoY11eH7nkgyy3rq95C44"},
{"content":{"body":"or similar","m.mentions":{},"msgtype":"m.text"},"ts":1739923944568,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$IXE8JCbTVU9Hl1415vzE_WwwBX9K72LZK1SJ28HiDqY"},
{"content":{"body":"I find it clearer to continue `function foo(posarg, {kwarg1, kwarg2} = {})`.","format":"org.matrix.custom.html","formatted_body":"I find it clearer to continue <code>function foo(posarg, {kwarg1, kwarg2} = {})</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1739924036974,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$yn159XpnS9jHxf_nS9fH2OFUP5MYk_91qwCh5LZaJ9k"},
{"content":{"body":"Given the degree of difference in practice.","m.mentions":{},"msgtype":"m.text"},"ts":1739924059192,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$l_N20MGN4FJdwtd9kzuqNJn2TFxJuX8TK1rh6j1OlvY"},
{"content":{"body":"and that's the exact argument that's blocked it in the past ^_^","m.mentions":{},"msgtype":"m.text"},"ts":1739924088333,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DvWkiNtRCw_yWW7JBGGMEC9MHmov4WvymZIKRGBtd-8"}
]