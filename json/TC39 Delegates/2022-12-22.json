[
{"content":{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make `isWellFormed` constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","format":"org.matrix.custom.html","formatted_body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make <code>isWellFormed</code> constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make `isWellFormed` constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","mimetype":"text/plain"},{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make <code>isWellFormed</code> constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","mimetype":"text/html"}]},"ts":1671744080150,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3RlNgrsjMmoybbv32vO0wCE49arCpvucr26FvQRp3Uw"},
{"content":{"body":"does anyone have any intuitions on the performance expectations and usage patterns?","msgtype":"m.text","org.matrix.msc1767.text":"does anyone have any intuitions on the performance expectations and usage patterns?"},"ts":1671744114325,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RDcu7Yth-vFSYN9JiRIG4tbri8jgaYNjyXZGAeb_eWA"},
{"content":{"body":"for 2-byte strings, that is","msgtype":"m.text","org.matrix.msc1767.text":"for 2-byte strings, that is"},"ts":1671744126993,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pRGO_7oxnNRMJNbYonbz8L-9Fg5jU0RQcNSlUyT4x3M"},
{"content":{"body":"@shu I'm not sure there are any major expectations for an initial implementation, but there certainly were hopes that this is something that could have optimization potential in time so that it could be used as a guard / check without too much perf overhead. How involved is it looking?","msgtype":"m.text","org.matrix.msc1767.text":"@shu I'm not sure there are any major expectations for an initial implementation, but there certainly were hopes that this is something that could have optimization potential in time so that it could be used as a guard / check without too much perf overhead. How involved is it looking?"},"ts":1671744630041,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$08qQSSRicSHGnuLQsdjS6dcOmEfo93jhkLlNtjnBGnI"},
{"content":{"body":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","msgtype":"m.text","org.matrix.msc1767.text":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"ts":1671744826804,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6CBKxdB-ztjXGJClegxvJzWrHDyIxS9bQ-YMfOmkjdY"},
{"content":{"body":" * couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","m.new_content":{"body":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","msgtype":"m.text","org.matrix.msc1767.text":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"m.relates_to":{"event_id":"$6CBKxdB-ztjXGJClegxvJzWrHDyIxS9bQ-YMfOmkjdY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"ts":1671744833477,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7BadSgFVc9CX4u5By-pcsIGyxpzu9CJZwvtARKNb7b0"},
{"content":{"body":"I'd sort of expect that its usage would ramp up over time (if it becomes widely used at all), so the optimizations that shu and Andreu are thinking of could wait","msgtype":"m.text","org.matrix.msc1767.text":"I'd sort of expect that its usage would ramp up over time (if it becomes widely used at all), so the optimizations that shu and Andreu are thinking of could wait"},"ts":1671744894875,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kJJJgm2XKgYMOa-2lowefNEoxdEf-Kjg-geaN0ktzGI"},
{"content":{"body":"The absolute bare minimum might be a boolean flag, acting as a cache of the result, that is invalidated on mutations","msgtype":"m.text","org.matrix.msc1767.text":"The absolute bare minimum might be a boolean flag, acting as a cache of the result, that is invalidated on mutations"},"ts":1671744931744,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$3iYCkyfFGR78Rnfs7W-koQ-_4-mYx1ivzdkOvBRRi0A"},
{"content":{"body":"so that at least there's some internal concept of the check that in theory could be an optimization target in future","msgtype":"m.text","org.matrix.msc1767.text":"so that at least there's some internal concept of the check that in theory could be an optimization target in future"},"ts":1671744952903,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$g9ufZ90sOdMl_lvpy4EOWi3zE8ThWwt0Y7P1T4Js3RE"},
{"content":{"body":"It's hard to predict whether caching/precomputing vs optimizing the actual calculation would be more important","msgtype":"m.text","org.matrix.msc1767.text":"It's hard to predict whether caching/precomputing vs optimizing the actual calculation would be more important"},"ts":1671744956214,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MzFFBMs7AmWfcIOvpkJ4ATGpeNE2FL77LEbHuzlw-To"},
{"content":{"body":"(I imagine Shu is thinking about the latter if it's seen as involved? One could imagine fancy SIMD stuff to search for the forbidden surrogates...)","msgtype":"m.text","org.matrix.msc1767.text":"(I imagine Shu is thinking about the latter if it's seen as involved? One could imagine fancy SIMD stuff to search for the forbidden surrogates...)"},"ts":1671745104551,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MRblhkGGDA-kwY4ySc04bz-Qvlg5QP0JR6kW0noLhnQ"},
{"content":{"body":"i'm thinking of the former, the ladder i agree can definitely wait","msgtype":"m.text","org.matrix.msc1767.text":"i'm thinking of the former, the ladder i agree can definitely wait"},"ts":1671745456536,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d3TIbaCuxb5xfF-JCBCf4hYURfSLFghRbvmHWWNMwOU"},
{"content":{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for `isWellFormed`","format":"org.matrix.custom.html","formatted_body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for <code>isWellFormed</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for `isWellFormed`","mimetype":"text/plain"},{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for <code>isWellFormed</code>","mimetype":"text/html"}]},"ts":1671745474737,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WjzlPwfCZeFtCj7enLLbIKIDDENcJJqz5pds78bw0Zg"},
{"content":{"body":"caching a bit requires space to cache the bit, and that is what's involved","msgtype":"m.text","org.matrix.msc1767.text":"caching a bit requires space to cache the bit, and that is what's involved"},"ts":1671745490644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J64ohq4y02a0dWtHkhDt6GLaO90szn1tLVhGYOtPwZk"},
{"content":{"body":" * i'm thinking of the former, the latter i agree can definitely wait","m.new_content":{"body":"i'm thinking of the former, the latter i agree can definitely wait","msgtype":"m.text","org.matrix.msc1767.text":"i'm thinking of the former, the latter i agree can definitely wait"},"m.relates_to":{"event_id":"$d3TIbaCuxb5xfF-JCBCf4hYURfSLFghRbvmHWWNMwOU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i'm thinking of the former, the latter i agree can definitely wait"},"ts":1671745506478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JkmiA0H9YW8GrgykQa-_Tb772A0fo-xVz1K78B4oMoM"},
{"content":{"body":"no bits to spare...!? or lots of wiring?","msgtype":"m.text","org.matrix.msc1767.text":"no bits to spare...!? or lots of wiring?"},"ts":1671745568826,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QKPjMDy0I12prIl73_mw59v70X0c6-3Z7PCs6rQ6aJE"},
{"content":{"body":"we're in a perpetual state of no bits to spare :)","msgtype":"m.text","org.matrix.msc1767.text":"we're in a perpetual state of no bits to spare :)"},"ts":1671745582240,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wauiw5soyAaAWmQNyHmGIep2CCQWNNGN0pfDROhLVh4"},
{"content":{"body":"but in this case, mainly lots of wiring, yeah","msgtype":"m.text","org.matrix.msc1767.text":"but in this case, mainly lots of wiring, yeah"},"ts":1671745594208,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nPnwVpfmPALJcMX7Fe-wm7k-1cKcroScphtQaOdMp3w"},
{"content":{"body":"web engines today have a 1-bit encoding state: 1-byte or 2-byte","msgtype":"m.text","org.matrix.msc1767.text":"web engines today have a 1-bit encoding state: 1-byte or 2-byte"},"ts":1671745640271,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_aE0gxw0vL5UQt028mDdcB4npFgj3pcQs3F9X6RUujU"},
{"content":{"body":"you now need 2-bits with 4 states: 1-byte, 2-byte-of-unknown-well-formedness, 2-byte-well-formed, 2-byte-ill-formed","msgtype":"m.text","org.matrix.msc1767.text":"you now need 2-bits with 4 states: 1-byte, 2-byte-of-unknown-well-formedness, 2-byte-well-formed, 2-byte-ill-formed"},"ts":1671745670040,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AEcqr_yrds4n2X9slVFKFoUt6AWzOznLHirBzBg4P6E"},
{"content":{"body":"you have something of a combinatorial explosion by propagating that through to every string type (rope/cons, slice/view, etc)","msgtype":"m.text","org.matrix.msc1767.text":"you have something of a combinatorial explosion by propagating that through to every string type (rope/cons, slice/view, etc)"},"ts":1671745696358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gd9EYD_KopempV3d7K5j8x23q78KGDWHHo8Kyu0tw6s"},
{"content":{"body":"you can compute it in sub-linear time for all the non-direct (i.e. don't own their own char buffer) string types, except for slices, which i don't know how to do","msgtype":"m.text","org.matrix.msc1767.text":"you can compute it in sub-linear time for all the non-direct (i.e. don't own their own char buffer) string types, except for slices, which i don't know how to do"},"ts":1671745725282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yUHcioZ4iGl1cXAjuB_kS6wInGPIFWkyyw6Bs9G58MU"},
{"content":{"body":"i think you always have to re-iterate sliced strings in some cases","msgtype":"m.text","org.matrix.msc1767.text":"i think you always have to re-iterate sliced strings in some cases"},"ts":1671745759651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t7mbRMSf-uy_anEdkWFyoh3CMh8-swWIF4odSXCiI98"},
{"content":{"body":"is it not possible to add something as a placeholder that is basically just \"well-formed | unknown\" where the default is \"unknown\", and then it can be ignored by the other types for now?","msgtype":"m.text","org.matrix.msc1767.text":"is it not possible to add something as a placeholder that is basically just \"well-formed | unknown\" where the default is \"unknown\", and then it can be ignored by the other types for now?"},"ts":1671745771864,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ILMMyInYK1PGdgwyNHTF9p9lanDjjgAW2raoeFUN7ow"}
]