[
{"content":{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make `isWellFormed` constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","format":"org.matrix.custom.html","formatted_body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make <code>isWellFormed</code> constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make `isWellFormed` constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","mimetype":"text/plain"},{"body":"so i realized while implementing is/toWellFormed that, while web engines today with 1-byte and 2-byte strings can make <code>isWellFormed</code> constant time trivially for 1-byte strings, optimizing for 2-byte strings is actually fairly involved","mimetype":"text/html"}]},"ts":1671744080150,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3RlNgrsjMmoybbv32vO0wCE49arCpvucr26FvQRp3Uw"},
{"content":{"body":"does anyone have any intuitions on the performance expectations and usage patterns?","msgtype":"m.text","org.matrix.msc1767.text":"does anyone have any intuitions on the performance expectations and usage patterns?"},"ts":1671744114325,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RDcu7Yth-vFSYN9JiRIG4tbri8jgaYNjyXZGAeb_eWA"},
{"content":{"body":"for 2-byte strings, that is","msgtype":"m.text","org.matrix.msc1767.text":"for 2-byte strings, that is"},"ts":1671744126993,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pRGO_7oxnNRMJNbYonbz8L-9Fg5jU0RQcNSlUyT4x3M"},
{"content":{"body":"@shu I'm not sure there are any major expectations for an initial implementation, but there certainly were hopes that this is something that could have optimization potential in time so that it could be used as a guard / check without too much perf overhead. How involved is it looking?","msgtype":"m.text","org.matrix.msc1767.text":"@shu I'm not sure there are any major expectations for an initial implementation, but there certainly were hopes that this is something that could have optimization potential in time so that it could be used as a guard / check without too much perf overhead. How involved is it looking?"},"ts":1671744630041,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$08qQSSRicSHGnuLQsdjS6dcOmEfo93jhkLlNtjnBGnI"},
{"content":{"body":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","msgtype":"m.text","org.matrix.msc1767.text":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"ts":1671744826804,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6CBKxdB-ztjXGJClegxvJzWrHDyIxS9bQ-YMfOmkjdY"},
{"content":{"body":" * couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","m.new_content":{"body":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example","msgtype":"m.text","org.matrix.msc1767.text":"couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"m.relates_to":{"event_id":"$6CBKxdB-ztjXGJClegxvJzWrHDyIxS9bQ-YMfOmkjdY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * couldn't it be optimized opportunistically? ­maybe caching the result, and setting it at first if a string was created from UTF-8, for example"},"ts":1671744833477,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7BadSgFVc9CX4u5By-pcsIGyxpzu9CJZwvtARKNb7b0"},
{"content":{"body":"I'd sort of expect that its usage would ramp up over time (if it becomes widely used at all), so the optimizations that shu and Andreu are thinking of could wait","msgtype":"m.text","org.matrix.msc1767.text":"I'd sort of expect that its usage would ramp up over time (if it becomes widely used at all), so the optimizations that shu and Andreu are thinking of could wait"},"ts":1671744894875,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kJJJgm2XKgYMOa-2lowefNEoxdEf-Kjg-geaN0ktzGI"},
{"content":{"body":"The absolute bare minimum might be a boolean flag, acting as a cache of the result, that is invalidated on mutations","msgtype":"m.text","org.matrix.msc1767.text":"The absolute bare minimum might be a boolean flag, acting as a cache of the result, that is invalidated on mutations"},"ts":1671744931744,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$3iYCkyfFGR78Rnfs7W-koQ-_4-mYx1ivzdkOvBRRi0A"},
{"content":{"body":"so that at least there's some internal concept of the check that in theory could be an optimization target in future","msgtype":"m.text","org.matrix.msc1767.text":"so that at least there's some internal concept of the check that in theory could be an optimization target in future"},"ts":1671744952903,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$g9ufZ90sOdMl_lvpy4EOWi3zE8ThWwt0Y7P1T4Js3RE"},
{"content":{"body":"It's hard to predict whether caching/precomputing vs optimizing the actual calculation would be more important","msgtype":"m.text","org.matrix.msc1767.text":"It's hard to predict whether caching/precomputing vs optimizing the actual calculation would be more important"},"ts":1671744956214,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MzFFBMs7AmWfcIOvpkJ4ATGpeNE2FL77LEbHuzlw-To"},
{"content":{"body":"(I imagine Shu is thinking about the latter if it's seen as involved? One could imagine fancy SIMD stuff to search for the forbidden surrogates...)","msgtype":"m.text","org.matrix.msc1767.text":"(I imagine Shu is thinking about the latter if it's seen as involved? One could imagine fancy SIMD stuff to search for the forbidden surrogates...)"},"ts":1671745104551,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MRblhkGGDA-kwY4ySc04bz-Qvlg5QP0JR6kW0noLhnQ"},
{"content":{"body":"i'm thinking of the former, the ladder i agree can definitely wait","msgtype":"m.text","org.matrix.msc1767.text":"i'm thinking of the former, the ladder i agree can definitely wait"},"ts":1671745456536,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d3TIbaCuxb5xfF-JCBCf4hYURfSLFghRbvmHWWNMwOU"},
{"content":{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for `isWellFormed`","format":"org.matrix.custom.html","formatted_body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for <code>isWellFormed</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for `isWellFormed`","mimetype":"text/plain"},{"body":"i'm mainly thinking about removing the cliff between 1-byte and 2-byte strings for <code>isWellFormed</code>","mimetype":"text/html"}]},"ts":1671745474737,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WjzlPwfCZeFtCj7enLLbIKIDDENcJJqz5pds78bw0Zg"},
{"content":{"body":"caching a bit requires space to cache the bit, and that is what's involved","msgtype":"m.text","org.matrix.msc1767.text":"caching a bit requires space to cache the bit, and that is what's involved"},"ts":1671745490644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J64ohq4y02a0dWtHkhDt6GLaO90szn1tLVhGYOtPwZk"},
{"content":{"body":" * i'm thinking of the former, the latter i agree can definitely wait","m.new_content":{"body":"i'm thinking of the former, the latter i agree can definitely wait","msgtype":"m.text","org.matrix.msc1767.text":"i'm thinking of the former, the latter i agree can definitely wait"},"m.relates_to":{"event_id":"$d3TIbaCuxb5xfF-JCBCf4hYURfSLFghRbvmHWWNMwOU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i'm thinking of the former, the latter i agree can definitely wait"},"ts":1671745506478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JkmiA0H9YW8GrgykQa-_Tb772A0fo-xVz1K78B4oMoM"},
{"content":{"body":"no bits to spare...!? or lots of wiring?","msgtype":"m.text","org.matrix.msc1767.text":"no bits to spare...!? or lots of wiring?"},"ts":1671745568826,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QKPjMDy0I12prIl73_mw59v70X0c6-3Z7PCs6rQ6aJE"},
{"content":{"body":"we're in a perpetual state of no bits to spare :)","msgtype":"m.text","org.matrix.msc1767.text":"we're in a perpetual state of no bits to spare :)"},"ts":1671745582240,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wauiw5soyAaAWmQNyHmGIep2CCQWNNGN0pfDROhLVh4"},
{"content":{"body":"but in this case, mainly lots of wiring, yeah","msgtype":"m.text","org.matrix.msc1767.text":"but in this case, mainly lots of wiring, yeah"},"ts":1671745594208,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nPnwVpfmPALJcMX7Fe-wm7k-1cKcroScphtQaOdMp3w"},
{"content":{"body":"web engines today have a 1-bit encoding state: 1-byte or 2-byte","msgtype":"m.text","org.matrix.msc1767.text":"web engines today have a 1-bit encoding state: 1-byte or 2-byte"},"ts":1671745640271,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_aE0gxw0vL5UQt028mDdcB4npFgj3pcQs3F9X6RUujU"},
{"content":{"body":"you now need 2-bits with 4 states: 1-byte, 2-byte-of-unknown-well-formedness, 2-byte-well-formed, 2-byte-ill-formed","msgtype":"m.text","org.matrix.msc1767.text":"you now need 2-bits with 4 states: 1-byte, 2-byte-of-unknown-well-formedness, 2-byte-well-formed, 2-byte-ill-formed"},"ts":1671745670040,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AEcqr_yrds4n2X9slVFKFoUt6AWzOznLHirBzBg4P6E"},
{"content":{"body":"you have something of a combinatorial explosion by propagating that through to every string type (rope/cons, slice/view, etc)","msgtype":"m.text","org.matrix.msc1767.text":"you have something of a combinatorial explosion by propagating that through to every string type (rope/cons, slice/view, etc)"},"ts":1671745696358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gd9EYD_KopempV3d7K5j8x23q78KGDWHHo8Kyu0tw6s"},
{"content":{"body":"you can compute it in sub-linear time for all the non-direct (i.e. don't own their own char buffer) string types, except for slices, which i don't know how to do","msgtype":"m.text","org.matrix.msc1767.text":"you can compute it in sub-linear time for all the non-direct (i.e. don't own their own char buffer) string types, except for slices, which i don't know how to do"},"ts":1671745725282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yUHcioZ4iGl1cXAjuB_kS6wInGPIFWkyyw6Bs9G58MU"},
{"content":{"body":"i think you always have to re-iterate sliced strings in some cases","msgtype":"m.text","org.matrix.msc1767.text":"i think you always have to re-iterate sliced strings in some cases"},"ts":1671745759651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t7mbRMSf-uy_anEdkWFyoh3CMh8-swWIF4odSXCiI98"},
{"content":{"body":"is it not possible to add something as a placeholder that is basically just \"well-formed | unknown\" where the default is \"unknown\", and then it can be ignored by the other types for now?","msgtype":"m.text","org.matrix.msc1767.text":"is it not possible to add something as a placeholder that is basically just \"well-formed | unknown\" where the default is \"unknown\", and then it can be ignored by the other types for now?"},"ts":1671745771864,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ILMMyInYK1PGdgwyNHTF9p9lanDjjgAW2raoeFUN7ow"},
{"content":{"body":"for slices, I think the thinking was that careful checking of the slice ends could be done for surrogate splits, if you know the string being sliced is valid","msgtype":"m.text","org.matrix.msc1767.text":"for slices, I think the thinking was that careful checking of the slice ends could be done for surrogate splits, if you know the string being sliced is valid"},"ts":1671745826507,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$GI5suS_XPHh56logDO2qV9_AKTFq7kaRgjrVE9nqXzk"},
{"content":{"body":"that is pretty much the same amount of wiring, no?","msgtype":"m.text","org.matrix.msc1767.text":"that is pretty much the same amount of wiring, no?"},"ts":1671745826683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AX9rIg0DkT6is12RIrJLz6VFAPZqjrCc_afe_vNUiuE"},
{"content":{"body":"right, if the underlying of a slice is well-formed, you just need to check the beginning and the end","msgtype":"m.text","org.matrix.msc1767.text":"right, if the underlying of a slice is well-formed, you just need to check the beginning and the end"},"ts":1671745840671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XIGm1_OUH2rQwI3r4kWYCleugYB98wzS0OB0mqE2KTw"},
{"content":{"body":"if the underlying is not well-formed you have to re-iterate afaict","msgtype":"m.text","org.matrix.msc1767.text":"if the underlying is not well-formed you have to re-iterate afaict"},"ts":1671745852368,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YFBL_PZy2QoX4yAYj635FqgZPVBC_hC9qUTWsTLUxZ4"},
{"content":{"body":"well everything could ignore the well-formed bit and just recompute by default without that being wiring?","msgtype":"m.text","org.matrix.msc1767.text":"well everything could ignore the well-formed bit and just recompute by default without that being wiring?"},"ts":1671745885903,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$x9bNmCmQunpBVXgLUqG50xBkG8w8nAYFHDRSHlYP--k"},
{"content":{"body":"or does even just adding the bit add overhead there?","msgtype":"m.text","org.matrix.msc1767.text":"or does even just adding the bit add overhead there?"},"ts":1671745892695,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$7rc1wDm9ul4-kIaTPcRUJ3ZR9-ZkoR3DZihTuNK4auY"},
{"content":{"body":"well, if everything just ignores it why add a bit? reserve it now you mean?","msgtype":"m.text","org.matrix.msc1767.text":"well, if everything just ignores it why add a bit? reserve it now you mean?"},"ts":1671745915099,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9kgVXO9juk7YKSR1FmeZckAvWkE-QAnAPundhdXpGcc"},
{"content":{"body":"for V8 there's also the grossness of external strings, where the embedder can choose to take ownership of the character buffer","msgtype":"m.text","org.matrix.msc1767.text":"for V8 there's also the grossness of external strings, where the embedder can choose to take ownership of the character buffer"},"ts":1671745977398,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VjiQnNpeZla0LcAiqqhLA5X78U-X148JtMGprXd05_I"},
{"content":{"body":"1-byte or 2-byte encodings are exposed for external string data, and well-formedness would need to be as well i guess?","msgtype":"m.text","org.matrix.msc1767.text":"1-byte or 2-byte encodings are exposed for external string data, and well-formedness would need to be as well i guess?"},"ts":1671745995381,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d3wqMeR1CIMjAPlLIuyJ4r4Zm1PWysq2cax2btqzVJw"},
{"content":{"body":"`const s = \"well-formed 😊\"; s.isWellFormed()` could in theory still benefit as some kind of baseline if the initial static string could pass the bit","format":"org.matrix.custom.html","formatted_body":"<code>const s = &quot;well-formed 😊&quot;; s.isWellFormed()</code> could in theory still benefit as some kind of baseline if the initial static string could pass the bit","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`const s = \"well-formed 😊\"; s.isWellFormed()` could in theory still benefit as some kind of baseline if the initial static string could pass the bit","mimetype":"text/plain"},{"body":"<code>const s = &quot;well-formed 😊&quot;; s.isWellFormed()</code> could in theory still benefit as some kind of baseline if the initial static string could pass the bit","mimetype":"text/html"}]},"ts":1671746049640,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$e14wTZrg8_s358fzClXrar-D_UDliEEw4VMByopu4rs"},
{"content":{"body":"how is the initial static string well-formedness computed?","msgtype":"m.text","org.matrix.msc1767.text":"how is the initial static string well-formedness computed?"},"ts":1671746071200,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kfkuXwjUO2bjzWHTgARKeS1MogmvIi5aGBZB3yk04AI"},
{"content":{"body":"yeah this affects webidl as well","msgtype":"m.text","org.matrix.msc1767.text":"yeah this affects webidl as well"},"ts":1671746077332,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$yMXxmt_3_mhozzwHWylNMHFe1hj_TkWPgAGNd05JsQA"},
{"content":{"body":"although again, you're way ahead - the initial expectation was just to keep it simple very much so","msgtype":"m.text","org.matrix.msc1767.text":"although again, you're way ahead - the initial expectation was just to keep it simple very much so"},"ts":1671746096157,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$5KgIHyYWQQ9wdoRCzA1Z-LqLqv1Iw3E-L0oUUlFzMKM"},
{"content":{"body":"yeah this can probably all wait pending real world usage data","msgtype":"m.text","org.matrix.msc1767.text":"yeah this can probably all wait pending real world usage data"},"ts":1671746115971,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YVtmrnihPyri6eBAJz8kv9hDIytL8TUdkiy7awkBPyc"},
{"content":{"body":"when the original encoding pass is taking place?","msgtype":"m.text","org.matrix.msc1767.text":"when the original encoding pass is taking place?"},"ts":1671746116147,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$pVFqeVXTMecGTTao-rpDRW_WNGjuBbQa8TRP9los-Zc"},
{"content":{"body":"ah, yeah, there are places where we would iterate strings anyway and we might be able to piggyback the well-formedness checks","msgtype":"m.text","org.matrix.msc1767.text":"ah, yeah, there are places where we would iterate strings anyway and we might be able to piggyback the well-formedness checks"},"ts":1671746142237,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iBim-Y7srMXcctkFvrc0-9BttWroEhipkkaLCFIVqM0"},
{"content":{"body":"determining 1-byte is one of them, computing hash codes is another","msgtype":"m.text","org.matrix.msc1767.text":"determining 1-byte is one of them, computing hash codes is another"},"ts":1671746166578,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0oh8BOyx_BNt5htsWaNohgyZ7-WL8F5dUl_tSAiEHgE"},
{"content":{"body":"yeah, in theory external strings might want to set this stuff themselves if they can be trusted to provide that information","msgtype":"m.text","org.matrix.msc1767.text":"yeah, in theory external strings might want to set this stuff themselves if they can be trusted to provide that information"},"ts":1671746198009,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$3tn4Tu6v8A0ryUbXAsL2d9cEFBYFt4Q4ZubVme0Y5A0"},
{"content":{"body":"i think this is all to say the \"implementations can make this sub-linear and fast today without much work\" only holds for 1-byte strings, which means we'll ship with a performance cliff","msgtype":"m.text","org.matrix.msc1767.text":"i think this is all to say the \"implementations can make this sub-linear and fast today without much work\" only holds for 1-byte strings, which means we'll ship with a performance cliff"},"ts":1671746220009,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5bpUPa0VfUWx3OUwQFxvQsb9HhUBTOg6G0yxAa5jqHA"},
{"content":{"body":"which is fine (but isn't ideal) and wasn't something i realized","msgtype":"m.text","org.matrix.msc1767.text":"which is fine (but isn't ideal) and wasn't something i realized"},"ts":1671746242120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cHocsjXhj3wneA7M6IoRg1bNbIWTckbh-qUhEnEvQkk"},
{"content":{"body":"sub-linear? aren't 1-byte strings always well-formed?","msgtype":"m.text","org.matrix.msc1767.text":"sub-linear? aren't 1-byte strings always well-formed?"},"ts":1671746261251,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$JpV3Ka0SC7il-MgQbzVuOWmenbPdkWiY6hG1wH-t18g"},
{"content":{"body":"yes, that's what i mean, it's constant time for 1-byte strings","msgtype":"m.text","org.matrix.msc1767.text":"yes, that's what i mean, it's constant time for 1-byte strings"},"ts":1671746272826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NQuOBrGVjz1sE9PI5eeVvQKR6mg-o-Rh34XtFfklLIY"},
{"content":{"body":"but there were vague discussions of its being able to be sublinear for 2-byte as well","msgtype":"m.text","org.matrix.msc1767.text":"but there were vague discussions of its being able to be sublinear for 2-byte as well"},"ts":1671746285160,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LqFg1j62TRTSV5C6HdFSYteBxkXLUNhktoq4pdFLsl0"},
{"content":{"body":"and i kinda thought oh okay that sounds plausible without thinking about it much","msgtype":"m.text","org.matrix.msc1767.text":"and i kinda thought oh okay that sounds plausible without thinking about it much"},"ts":1671746296525,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kjAwNZtUEwevEnCDCo5TN3mZH_ah3b4JfsJ21DWhDAg"},
{"content":{"body":"I guess the only concern is if this gets put as something that is considered a \"cliff\" and no one tackles it...?","msgtype":"m.text","org.matrix.msc1767.text":"I guess the only concern is if this gets put as something that is considered a \"cliff\" and no one tackles it...?"},"ts":1671746458566,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$pSoFoXzkpYp2BHFWmuMzOam4YRaI_i68ZsEz8vRYBhY"},
{"content":{"body":"yeah, and that's a pretty generic concern","msgtype":"m.text","org.matrix.msc1767.text":"yeah, and that's a pretty generic concern"},"ts":1671746477235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KFQ8GIfepXqqUY3R3NL4S9nHY7Bip68kc9Pq4gOTLh8"},
{"content":{"body":"having some idea of what the cliff is and how to approach it in future would certainly help... so it's interesting to hear what you think here","msgtype":"m.text","org.matrix.msc1767.text":"having some idea of what the cliff is and how to approach it in future would certainly help... so it's interesting to hear what you think here"},"ts":1671746480228,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ZkJA73XAdQ0-zSkFMJeuXLpCpyxiJk7MTnxnDGgR6pg"},
{"content":{"body":"(i'm more remarking on the interestingness of the problem space here, do not take what i've said as implementation concerns for shipping)","msgtype":"m.text","org.matrix.msc1767.text":"(i'm more remarking on the interestingness of the problem space here, do not take what i've said as implementation concerns for shipping)"},"ts":1671746524260,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RuFH5mXaoY-Vqu9rVwI-jtfcCztEspjHgyVvPQXS5P8"},
{"content":{"body":"well, the cliff for the naive implementation (constant time for 1-byte, flattening + linear time always for 2-byte) is fairly stark, so for large strings apps can definitely notice","msgtype":"m.text","org.matrix.msc1767.text":"well, the cliff for the naive implementation (constant time for 1-byte, flattening + linear time always for 2-byte) is fairly stark, so for large strings apps can definitely notice"},"ts":1671746623566,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KGv0BOeGDHUSw6qJM4kOZJPsqSc4Jfvv7zAaJtm1V9s"},
{"content":{"body":"as for how to approach, the ideas we've talked about here all sound reasonable to try out","msgtype":"m.text","org.matrix.msc1767.text":"as for how to approach, the ideas we've talked about here all sound reasonable to try out"},"ts":1671746654545,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KiJcR5pNTjOEPqOcyVN_gNHVErp9KaeUt3Yzd4UMwYQ"},
{"content":{"body":"that is, caching bit and piggybacking on other operations that already need to iterate the code units anyway","msgtype":"m.text","org.matrix.msc1767.text":"that is, caching bit and piggybacking on other operations that already need to iterate the code units anyway"},"ts":1671746678882,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E8SfTwqkU6pw6eyHteis9Lgpe3KBoT_Icl07JtXSMLA"},
{"content":{"body":"glad to hear constant time doesn't sound untenable, which wasn't clear when these were purely hypothetical discussions","msgtype":"m.text","org.matrix.msc1767.text":"glad to hear constant time doesn't sound untenable, which wasn't clear when these were purely hypothetical discussions"},"ts":1671746737145,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HgtgDF6_9jbqusY8tMDEUGlX_TEDadb812Tu_TWn5_c"},
{"content":{"body":"amortized constant time?","msgtype":"m.text","org.matrix.msc1767.text":"amortized constant time?"},"ts":1671746761819,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HYvQmMNhLHoAKeGWBRTSHiZJiuFDk6zMA339-EZH36w"},
{"content":{"body":"definitely makes sense to think about the integration points of this","msgtype":"m.text","org.matrix.msc1767.text":"definitely makes sense to think about the integration points of this"},"ts":1671746764086,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$cpK6pSH7tWntWeZoZlXIriGdN8n0kilG6ab9lfkHGqA"},
{"content":{"body":"well i guess even for 1-byte it's amortized constant time","msgtype":"m.text","org.matrix.msc1767.text":"well i guess even for 1-byte it's amortized constant time"},"ts":1671746784962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7g6CFAxGWt1Gb9vjnsVjnvGCI6RMe8Ye0Hkv1UNtj-M"},
{"content":{"body":"Rust <> JS string sharing are cases where these expectations are important","msgtype":"m.text","org.matrix.msc1767.text":"Rust <> JS string sharing are cases where these expectations are important"},"ts":1671746796311,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$1BAfZIkmG9tHc3z2ZXsBu_jn_PF15TiXqubnH7U2fLQ"},
{"content":{"body":"remind me again, rust strings are... wtf8?","msgtype":"m.text","org.matrix.msc1767.text":"remind me again, rust strings are... wtf8?"},"ts":1671746912057,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0"},
{"content":{"body":"oh no, this is the point - they are strictly valid UTF8","msgtype":"m.text","org.matrix.msc1767.text":"oh no, this is the point - they are strictly valid UTF8"},"ts":1671746949046,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$OD1BcOytVTsEoCAysyt7NCsWor66FPyKrlkUkbI5WgQ"},
{"content":{"body":"the more relevant thing is wasm strings, which will be list-of-usv, I believe","msgtype":"m.text","org.matrix.msc1767.text":"the more relevant thing is wasm strings, which will be list-of-usv, I believe"},"ts":1671746956156,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b0OzkXh376p_w7_Fp54NK1Umm8NrbqC4sMMh8eDeW4g"},
{"content":{"body":"list-of-usv implies no unpaired surrogates","msgtype":"m.text","org.matrix.msc1767.text":"list-of-usv implies no unpaired surrogates"},"ts":1671746981069,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E_cM_WkRg5nhYKg3YL__mxBwxB62g4AaDLvWwU62P9g"},
{"content":{"body":"> <@shuyuguo:matrix.org> remind me again, rust strings are... wtf8?\n\nyou might be thinking of `OsString` (for filesystem paths) which in Windows is WTF-8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>remind me again, rust strings are... wtf8?</blockquote></mx-reply>you might be thinking of <code>OsString</code> (for filesystem paths) which in Windows is WTF-8","m.relates_to":{"m.in_reply_to":{"event_id":"$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> remind me again, rust strings are... wtf8?\n\nyou might be thinking of `OsString` (for filesystem paths) which in Windows is WTF-8","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>remind me again, rust strings are... wtf8?</blockquote></mx-reply>you might be thinking of <code>OsString</code> (for filesystem paths) which in Windows is WTF-8","mimetype":"text/html"}]},"ts":1671746998958,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XtRN4xunybuf1l1kjcxu1dSntJ6Me4hRLvWeY916I-I"},
{"content":{"body":"> <@shuyuguo:matrix.org> remind me again, rust strings are... wtf8?\n\n * you might be thinking of `OsString` (for filesystem paths, etc.) which in Windows is WTF-8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>remind me again, rust strings are... wtf8?</blockquote></mx-reply> * you might be thinking of <code>OsString</code> (for filesystem paths, etc.) which in Windows is WTF-8","m.new_content":{"body":"you might be thinking of `OsString` (for filesystem paths, etc.) which in Windows is WTF-8","format":"org.matrix.custom.html","formatted_body":"you might be thinking of <code>OsString</code> (for filesystem paths, etc.) which in Windows is WTF-8","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you might be thinking of `OsString` (for filesystem paths, etc.) which in Windows is WTF-8","mimetype":"text/plain"},{"body":"you might be thinking of <code>OsString</code> (for filesystem paths, etc.) which in Windows is WTF-8","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$XtRN4xunybuf1l1kjcxu1dSntJ6Me4hRLvWeY916I-I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> remind me again, rust strings are... wtf8?\n\n * you might be thinking of `OsString` (for filesystem paths, etc.) which in Windows is WTF-8","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q9FuCKbZoYAMQfxZiuRZVwq7-wNyLgMXgxvwYsciUH0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>remind me again, rust strings are... wtf8?</blockquote></mx-reply> * you might be thinking of <code>OsString</code> (for filesystem paths, etc.) which in Windows is WTF-8","mimetype":"text/html"}]},"ts":1671747019850,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ReNnlTJbvgw9ejtbw1m4UH0_F4Qb6Wf96A7EViwhSyY"},
{"content":{"body":"yes let's see how far stringref gets","msgtype":"m.text","org.matrix.msc1767.text":"yes let's see how far stringref gets"},"ts":1671747053184,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Dg7WEVu_2DiXh2MVtXVv3zsxiygBgVxxFXBdbLKGoIs"},
{"content":{"body":"also note Wasm components will also want this kind of guarantee for strings","msgtype":"m.text","org.matrix.msc1767.text":"also note Wasm components will also want this kind of guarantee for strings"},"ts":1671747103530,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Vg2him5bz8hFK_6jB6LlHtn-uaEmzRu8i3nBgGhlJEw"},
{"content":{"body":"wasm components is the thing I meant yeah","msgtype":"m.text","org.matrix.msc1767.text":"wasm components is the thing I meant yeah"},"ts":1671747115397,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$taXHiE6EPIcsFzzW4OWbFzkoUfjHoOXF_xkiO9pNa_8"},
{"content":{"body":"but in short, we don't need to worry too much about it initially, but it would be nice if there's a clear implementation path to speak to here","msgtype":"m.text","org.matrix.msc1767.text":"but in short, we don't need to worry too much about it initially, but it would be nice if there's a clear implementation path to speak to here"},"ts":1671747181804,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$zDEjsTFix6K2o0Dg18zHxteWfYoS8eUTx6rfDJp_Z6c"},
{"content":{"body":"i believe there is for v8","msgtype":"m.text","org.matrix.msc1767.text":"i believe there is for v8"},"ts":1671747231877,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9F7i4ShevWi2enuMvFjCiKAhAgG3Lgrc5LttqSsDyVY"},
{"content":{"body":"given that it's non-trivial if you care about the performance in the limit, should confirm with others","msgtype":"m.text","org.matrix.msc1767.text":"given that it's non-trivial if you care about the performance in the limit, should confirm with others"},"ts":1671747251044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_em9_CrBzmkZ25ygupBTXasG_F9rmPrwsdZTVI5-Jls"},
{"content":{"body":"I mean there's no reason to be doing non-trivial work before christmas...","msgtype":"m.text","org.matrix.msc1767.text":"I mean there's no reason to be doing non-trivial work before christmas..."},"ts":1671747296918,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$40vkspKKoBTHc0GEGIqCZ1P2dVHkppB2d95jDAu3Xd8"},
{"content":{"body":"but glad to hear that","msgtype":"m.text","org.matrix.msc1767.text":"but glad to hear that"},"ts":1671747305080,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$9G3bSiy3bqVFRb4NILfifVXo5PcTHhXvCE7QOfJHekI"},
{"content":{"body":"I think Wasm strings integration into various toolchains are likely to be a lot more important for performance than this function","msgtype":"m.text","org.matrix.msc1767.text":"I think Wasm strings integration into various toolchains are likely to be a lot more important for performance than this function"},"ts":1671747320231,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EyeFQJbtXnHDFvCA1z2dX6rsCDWf6jCJJCpDl4809aA"},
{"content":{"body":"true enough, i'm not sure how important the JS integration performance is for any performance-critical wasm workloads right now","msgtype":"m.text","org.matrix.msc1767.text":"true enough, i'm not sure how important the JS integration performance is for any performance-critical wasm workloads right now"},"ts":1671747389736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ksWUIWrrlBmegIjMMQBXJr3iqBZMuLJRvI4lsEkYovM"},
{"content":{"body":"in the future i expect this to be important","msgtype":"m.text","org.matrix.msc1767.text":"in the future i expect this to be important"},"ts":1671747400825,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7eV5t6H-nYa9i3BPECvORFhD18_al_sqUpcj9YbZLWo"},
{"content":{"body":" * in the future i expect this to be important","m.new_content":{"body":"in the future i expect this to be important","msgtype":"m.text","org.matrix.msc1767.text":"in the future i expect this to be important"},"m.relates_to":{"event_id":"$7eV5t6H-nYa9i3BPECvORFhD18_al_sqUpcj9YbZLWo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * in the future i expect this to be important"},"ts":1671747408539,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hOCG9TBvAvFhL1xtFf_fJpDJ8_8Rz5a2ls8ebibV5Wo"},
{"content":{"body":"seems plausible that you might end up wanting to keep track of the \"are there surrogates\" bit for wasm integration anyway","msgtype":"m.text","org.matrix.msc1767.text":"seems plausible that you might end up wanting to keep track of the \"are there surrogates\" bit for wasm integration anyway"},"ts":1671748122901,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$htMfp36__gRyOASWXxa8kfsIWlYDOdKOIqhqm9jpEpo"},
{"content":{"body":"I think deeper JS/Wasm integration and Wasm component model are sort of a similar order of magnitude away from being performance-critical issues (that is to say, probably not today)","msgtype":"m.text","org.matrix.msc1767.text":"I think deeper JS/Wasm integration and Wasm component model are sort of a similar order of magnitude away from being performance-critical issues (that is to say, probably not today)"},"ts":1671753100587,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$izPUjQ-PDMY9OL1d4NMrZc_xdPCqTvGL2q3hTMqCiE0"},
{"content":{"body":"but that doesn't mean we shouldn't design towards it","msgtype":"m.text","org.matrix.msc1767.text":"but that doesn't mean we shouldn't design towards it"},"ts":1671753125710,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zCCkJSj065oAIIGlgzIA0Y8oSNIFYR_kcsB6Fzy1EG4"}
]