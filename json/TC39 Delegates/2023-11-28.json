[
{"content":{"body":"üö® üì¢  some things have moved around on the schedule.  please have a look, especially if you are presenting as some items have moved to a different day.  no constraints were impacted","m.mentions":{},"msgtype":"m.text"},"ts":1701129659330,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HJkQhVyacdNF6rphR6N1RfzI-V4DpHVfbtbHZYplb1Q"},
{"content":{"body":"I can't believe im missing one of the hats","m.mentions":{},"m.relates_to":{"event_id":"$z_3eQ_28ZQw_Sv5mJqdVxy_9_fXZEgRFOaTOtJ1V1QI","is_falling_back":true,"m.in_reply_to":{"event_id":"$z_3eQ_28ZQw_Sv5mJqdVxy_9_fXZEgRFOaTOtJ1V1QI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701131160457,"senderName":"yulia | PTO until Dec. 8","senderId":"@yulia:mozilla.org","id":"$Pj6C82XHlCXEmJNOgy1DaWyUrHXn0BSgutO4n3W6bO4"},
{"content":{"body":"Getting a new phone and forgetting to install matrix for a month means a lot of catching up to do.","msgtype":"m.text"},"ts":1701131350012,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$bwkahkdHGlb87e4wRgLLuxRvQQ4FwjErtAzR6SajxNQ"},
{"content":{"body":"IIRC, it runs on a VM in Azure","m.mentions":{},"msgtype":"m.text"},"ts":1701194605859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1o6bmnWy5Ry0FBXVcbmWscbACm4tNI0cnfEteqCMia4"},
{"content":{"body":"I would love to implement some TCQ feature improvements once it's in a developable state","m.mentions":{},"msgtype":"m.text"},"ts":1701195078767,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yz9CL8K61yjeZKOSqUc1xG4NCWLK_0PzjTnmpapsEkw"},
{"content":{"body":"why do we put our names in the notes doc? I find it easier to keep delegates.txt open in a different tab where I can c-f for names","m.mentions":{},"msgtype":"m.text"},"ts":1701195509949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yq7iWAanIIzFPmZwnDrHu7cT7gKt4M5f9eUtLnoRkqs"},
{"content":{"body":"> <@bakkot:matrix.org> why do we put our names in the notes doc? I find it easier to keep delegates.txt open in a different tab where I can c-f for names\n\nfor helping note-takers is one use case.  we also use it to record attendance -- something Ecma cares about.  it also can be helpful to know who was present at the meeting when reviewing notes, as not everyone speaks at every meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yq7iWAanIIzFPmZwnDrHu7cT7gKt4M5f9eUtLnoRkqs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>why do we put our names in the notes doc? I find it easier to keep delegates.txt open in a different tab where I can c-f for names</blockquote></mx-reply>for helping note-takers is one use case.  we also use it to record attendance -- something Ecma cares about.  it also can be helpful to know who was present at the meeting when reviewing notes, as not everyone speaks at every meeting","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yq7iWAanIIzFPmZwnDrHu7cT7gKt4M5f9eUtLnoRkqs"}},"msgtype":"m.text"},"ts":1701195615731,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$yIY0P7M-uqPGAdKNoaPQso1RrPF92Wkkzt7fAakEVak"},
{"content":{"body":"gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1701195638285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oh0GBY7XZdEeG5R50Q3W-CzQKKrWETlLfO3Uz_bltEM"},
{"content":{"body":"Heh, is TCQ stuck again?","m.mentions":{},"msgtype":"m.text"},"ts":1701195815378,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$uNv_wPdkVutFT_x_irXJDmqn8Ya8Sy9YMqwutsWhRmI"},
{"content":{"body":"TCQ advanced","m.mentions":{},"msgtype":"m.text"},"ts":1701195835882,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$ktP5z1tIUkxTNeIXHzd_GYCF0VwE4vDWtan8Dy8L7ZA"},
{"content":{"body":" * Heh, is TCQ stuck again? (apparently not)","m.mentions":{},"m.new_content":{"body":"Heh, is TCQ stuck again? (apparently not)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uNv_wPdkVutFT_x_irXJDmqn8Ya8Sy9YMqwutsWhRmI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701195848839,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$zSKuu7f5ja37JNwHmQNC_vcYWvbBwCx6rMnxVxvNexI"},
{"content":{"body":"> <@softwarechris:matrix.org> for helping note-takers is one use case.  we also use it to record attendance -- something Ecma cares about.  it also can be helpful to know who was present at the meeting when reviewing notes, as not everyone speaks at every meeting\n\nIt never seems better than 50% accurate tho","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yIY0P7M-uqPGAdKNoaPQso1RrPF92Wkkzt7fAakEVak?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>for helping note-takers is one use case.  we also use it to record attendance -- something Ecma cares about.  it also can be helpful to know who was present at the meeting when reviewing notes, as not everyone speaks at every meeting</blockquote></mx-reply>It never seems better than 50% accurate tho","m.mentions":{"user_ids":["@softwarechris:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yIY0P7M-uqPGAdKNoaPQso1RrPF92Wkkzt7fAakEVak"}},"msgtype":"m.text"},"ts":1701195852226,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ubhPJkMnDb3PzG4KqDjiJEYajqpYAw0A2lAh0XcO1Ng"},
{"content":{"body":"42 people on the call.\n18 names on the notes. Not sure how many of those missing 24 are observers.","m.mentions":{},"m.relates_to":{"event_id":"$ubhPJkMnDb3PzG4KqDjiJEYajqpYAw0A2lAh0XcO1Ng","is_falling_back":true,"m.in_reply_to":{"event_id":"$ubhPJkMnDb3PzG4KqDjiJEYajqpYAw0A2lAh0XcO1Ng"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701197043414,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ziIa-mAubYAEm7j0j6q0zmGkRDMKVXolFD2FAG67BKE"},
{"content":{"body":"> <@aclaymore:matrix.org> It never seems better than 50% accurate tho\n\ntrue.  I don't know if this has ever _not_ been the case, and if so, how long ago.  IME it has been voluntary; folks only add themselves and not others\n\nfor Ecma's attendance-keeping it is not the only system of record.  the secretary monitors the online meeting participants (and in-person folks), as well as the sign-in form people complete to get the link for the online meeting\n\nI think it's useful to have the complete attendees in the doc itself for the notes/history but it may be that some people don't want to be listed for some reason","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ubhPJkMnDb3PzG4KqDjiJEYajqpYAw0A2lAh0XcO1Ng?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>It never seems better than 50% accurate tho</blockquote></mx-reply><p>true.  I don't know if this has ever <em>not</em> been the case, and if so, how long ago.  IME it has been voluntary; folks only add themselves and not others</p>\n<p>for Ecma's attendance-keeping it is not the only system of record.  the secretary monitors the online meeting participants (and in-person folks), as well as the sign-in form people complete to get the link for the online meeting</p>\n<p>I think it's useful to have the complete attendees in the doc itself for the notes/history but it may be that some people don't want to be listed for some reason</p>\n","m.mentions":{"user_ids":["@aclaymore:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$ubhPJkMnDb3PzG4KqDjiJEYajqpYAw0A2lAh0XcO1Ng"}},"msgtype":"m.text"},"ts":1701197471554,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$L7ENZceF9BFuP_jW6nhQqsG9Et9_FxI634No3mwWrXA"},
{"content":{"body":"maybe some of the two-letter folks can provide further context","m.mentions":{},"msgtype":"m.text"},"ts":1701197555533,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$dtU2C39DjUtC8-WcthQDLxkQRxHjSOpL8RaR0hMmJUY"},
{"content":{"body":"Prior to remote meetings attendance was kept by having a physical sheet of paper passed around, and I think we used that to populate the list in the published notes","m.mentions":{},"msgtype":"m.text"},"ts":1701197844628,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lDLO86dBYzdkYiryDR-54z1-ed0_2p5mc6uatzlOBXA"},
{"content":{"body":"I think \"no data-driven exceptions\" is a confusing way to phrase this principle","m.mentions":{},"msgtype":"m.text"},"ts":1701197857015,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ehtrrJIqA-P47UchAOvM42kpV2CEps1svRy-EVkpckA"},
{"content":{"body":"the principle appears to be \"don't reject anything which could in principle be valid\", which seems like a totally fine principle","m.mentions":{},"msgtype":"m.text"},"ts":1701197880024,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$033EGePmggYicaL8r_ALADl4w9YS644bzpliz4sm-UY"},
{"content":{"body":"üìù we will need someone to volunteer to help with notes after this item.  please consider helping out üôè","m.mentions":{},"msgtype":"m.text"},"ts":1701197996141,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$SwmjDP9Czz-3wkX6E-RfDUjPKRhH9cTzRgymdGUTNjI"},
{"content":{"body":"29-02 _is_ valid though, it's the combination that isn't valid","format":"org.matrix.custom.html","formatted_body":"29-02 <em>is</em> valid though, it's the combination that isn't valid","m.mentions":{},"msgtype":"m.text"},"ts":1701198031736,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$Fk1vNgdwXxEcHjaGByM_hn5OMhGTaTffH01ZwwtDiVk"},
{"content":{"body":" * `29-02` _is_ valid though, it's the combination that isn't valid","format":"org.matrix.custom.html","formatted_body":" * <code>29-02</code> <em>is</em> valid though, it's the combination that isn't valid","m.mentions":{},"m.new_content":{"body":"`29-02` _is_ valid though, it's the combination that isn't valid","format":"org.matrix.custom.html","formatted_body":"<code>29-02</code> <em>is</em> valid though, it's the combination that isn't valid","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Fk1vNgdwXxEcHjaGByM_hn5OMhGTaTffH01ZwwtDiVk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701198036498,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$YMKi1itVFgCo33XVXOMnNRzj0pMTf7U4ez8kmX0pbOM"},
{"content":{"body":"I think I'm a bit confused by how asking for 2030-02-29 could return 2030-02-28 rather than 2030-03-01.","m.mentions":{},"msgtype":"m.text"},"ts":1701198062653,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$7Ipo892uj7bwoQnsiPL8KtFOOdj3BBhuQhz3-rywnrk"},
{"content":{"body":"what about `04-31`?","format":"org.matrix.custom.html","formatted_body":"what about <code>04-31</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1701198083683,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_mGtxfvxi_17J9u57WeAWRHd1IiTk5GDuTxRQZ0jg4M"},
{"content":{"body":"> <@ljharb:matrix.org> what about `04-31`?\n\n`31-04` should be invalid because it never occurs in the ISO calendar","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_mGtxfvxi_17J9u57WeAWRHd1IiTk5GDuTxRQZ0jg4M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about <code>04-31</code>?</blockquote></mx-reply><code>31-04</code> should be invalid because it never occurs in the ISO calendar","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_mGtxfvxi_17J9u57WeAWRHd1IiTk5GDuTxRQZ0jg4M"}},"msgtype":"m.text"},"ts":1701198130729,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$e2bG13kw4VBpt2WFnT9M11MAX_YkVKZ5Wqnv0thpOmU"},
{"content":{"body":"right but april, and the 31st, are both valid in the same way that february, and the 29th, are both valid","m.mentions":{},"msgtype":"m.text"},"ts":1701198156400,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3u1z1aFyvO5gO7IbIk1Werq8vbJUJeGcvmurXxJa8hE"},
{"content":{"body":"or are you saying 2/29 is special because of leap days","m.mentions":{},"msgtype":"m.text"},"ts":1701198166868,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZO4z_4qhcMsjRVrtkQO0Zm0gASiyumc3rYEkrsc4yEo"},
{"content":{"body":"> <@ljharb:matrix.org> or are you saying 2/29 is special because of leap days\n\nprecisely","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZO4z_4qhcMsjRVrtkQO0Zm0gASiyumc3rYEkrsc4yEo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>or are you saying 2/29 is special because of leap days</blockquote></mx-reply>precisely","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZO4z_4qhcMsjRVrtkQO0Zm0gASiyumc3rYEkrsc4yEo"}},"msgtype":"m.text"},"ts":1701198175224,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$4OdzCoJsDPzfcrvByJE6y1K3-hIpBTZAesJFmexuVdI"},
{"content":{"body":"because it is valid but when added to a year it might not be","m.mentions":{},"msgtype":"m.text"},"ts":1701198190887,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$7SNe-M6VoqfN1aRUT4oDi9OsccTgaF_ks9U7hR0u1Ug"},
{"content":{"body":"philip's answer of \"the shape\", tho, would mean that a month 01 - 12 and a day 01 - 31 are all \"valid\" in that sense","m.mentions":{},"msgtype":"m.text"},"ts":1701198196260,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tgKbBmuqEMEvzD95wywPzpD-ca1D9pBSNlt9Bz53NkI"},
{"content":{"body":"(The one person I know with a February 29 birthday celebrates on March 1.)","m.mentions":{},"msgtype":"m.text"},"ts":1701198206720,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5-1IazZwDkUFzRZ9ghwQ4TeF_8Z6RAXmlqzSwGcE-GM"},
{"content":{"body":"thus april 31st, while obv a day that doesn't exist, each part is still valid","m.mentions":{},"msgtype":"m.text"},"ts":1701198214976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2e3XK_9IdkJB_CGJ9j2qx7Ojw6hwL2Ds4n37irAXvNw"},
{"content":{"body":" * thus april 31st, while obv a day that doesn't exist, each part is still the right \"shape\"","m.mentions":{},"m.new_content":{"body":"thus april 31st, while obv a day that doesn't exist, each part is still the right \"shape\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2e3XK_9IdkJB_CGJ9j2qx7Ojw6hwL2Ds4n37irAXvNw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701198224215,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_VZJwOoriCHHl00duhd8vHdtRE7FVYWy48xD2OWR4kc"},
{"content":{"body":"just like february 29th depending on the year","m.mentions":{},"msgtype":"m.text"},"ts":1701198231917,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RLSVoOPNQsLrw-z2hjsP1uiXWjkMmezk7md1KhbQwQQ"},
{"content":{"body":"Seems to me the reasonable behaviors are `throw`, `truncate` (to 02-28), and `carry` (to 03-01).","format":"org.matrix.custom.html","formatted_body":"Seems to me the reasonable behaviors are <code>throw</code>, <code>truncate</code> (to 02-28), and <code>carry</code> (to 03-01).","m.mentions":{},"msgtype":"m.text"},"ts":1701198285142,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aAfk_Pf6RQfv_zkejP4Cem4KusL9PJovUdXY7qA5_wg"},
{"content":{"body":"```\nnew Date(2030, 1, 29) ‚Üí Date Fri Mar 01 2030 00:00:00\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>new Date(2030, 1, 29) ‚Üí Date Fri Mar 01 2030 00:00:00\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701198373231,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$qC8fcDhWSrlx8bmfOkrLYJFBFWKzd5njJF9RvUaTGDk"},
{"content":{"body":"> <@kriskowal:matrix.org> Seems to me the reasonable behaviors are `throw`, `truncate` (to 02-28), and `carry` (to 03-01).\n\nat the moment we support `constrain` and `reject`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aAfk_Pf6RQfv_zkejP4Cem4KusL9PJovUdXY7qA5_wg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Seems to me the reasonable behaviors are <code>throw</code>, <code>truncate</code> (to 02-28), and <code>carry</code> (to 03-01).</blockquote></mx-reply>at the moment we support <code>constrain</code> and <code>reject</code>","m.mentions":{"user_ids":["@kriskowal:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aAfk_Pf6RQfv_zkejP4Cem4KusL9PJovUdXY7qA5_wg"}},"msgtype":"m.text"},"ts":1701198379983,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$MCvfyQdIYbJMsflIBNI1uM-DKih0BJOgK6FoVamu_IU"},
{"content":{"body":"carrying over is not generally applicable but it could be useful in certain cases as you mentioned","m.mentions":{},"msgtype":"m.text"},"ts":1701198403743,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$zY2UXXeGeXyZPF8WsOsd-Bb8yb28l22fZ4BXlOraK3w"},
{"content":{"body":"I think either `throw` or `carry` can make sense, but `truncate` is _weird_.","format":"org.matrix.custom.html","formatted_body":"I think either <code>throw</code> or <code>carry</code> can make sense, but <code>truncate</code> is <em>weird</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1701198596807,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$BQQ9Z6rOZHjyEGSu8tDVPRRe7OTOKaszXzk7F1iIvQQ"},
{"content":{"body":"They cases are well documented in the Temporal docs","m.mentions":{},"msgtype":"m.text"},"ts":1701198881325,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$yRJqQ5B0_m0oMeopPt3GArnSd1MNfMio61z30CdSTmo"},
{"content":{"body":" * The cases are well documented in the Temporal docs","m.mentions":{},"m.new_content":{"body":"The cases are well documented in the Temporal docs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yRJqQ5B0_m0oMeopPt3GArnSd1MNfMio61z30CdSTmo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701198887747,"senderName":"ryzokuken üáÆüáπ","senderId":"@usharma:igalia.com","id":"$3bjAnNFL3v9A061raZMRopG1EVkGTBtaSt0fOYmmjlg"},
{"content":{"body":"We should have a notion of \"consensus pending one person's offline stamp\"","m.mentions":{},"msgtype":"m.text"},"ts":1701198953718,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IutzssPbjXYlmeGyEBmKtYy-gfRaHIfVFjbEsXgi9Zs"},
{"content":{"body":"so that this can get consensus when waldemar has a chance to review this behavior offline and approves of it, assuming that he does","format":"org.matrix.custom.html","formatted_body":"so that this can get consensus when <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> has a chance to review this behavior offline and approves of it, assuming that he does","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701198990061,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$60G701Yh0FhPCfukn-ke-0gdg0CN5leqbb7hm7vWbfU"},
{"content":{"body":"> <@eemeli:mozilla.org> I think either `throw` or `carry` can make sense, but `truncate` is _weird_.\n\nwe used to have \"carry\" (it was called `{overflow: 'balance'}`) but removed it during stage 2, based on experience from the Moment maintainers that people only wanted it because it was what `new Date()` does.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BQQ9Z6rOZHjyEGSu8tDVPRRe7OTOKaszXzk7F1iIvQQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>I think either <code>throw</code> or <code>carry</code> can make sense, but <code>truncate</code> is <em>weird</em>.</blockquote></mx-reply>we used to have \"carry\" (it was called <code>{overflow: 'balance'}</code>) but removed it during stage 2, based on experience from the Moment maintainers that people only wanted it because it was what <code>new Date()</code> does.","m.relates_to":{"m.in_reply_to":{"event_id":"$BQQ9Z6rOZHjyEGSu8tDVPRRe7OTOKaszXzk7F1iIvQQ"}},"msgtype":"m.text"},"ts":1701199157544,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$YNEZqVDgcEcDBps7HKlx0NF2qeyBHyorlN8aZInRU_Y"},
{"content":{"body":"> <@bakkot:matrix.org> We should have a notion of \"consensus pending one person's offline stamp\"\n\nprovisional advancement is fairly common, no?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IutzssPbjXYlmeGyEBmKtYy-gfRaHIfVFjbEsXgi9Zs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>We should have a notion of &quot;consensus pending one person&#39;s offline stamp&quot;</blockquote></mx-reply>provisional advancement is fairly common, no?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IutzssPbjXYlmeGyEBmKtYy-gfRaHIfVFjbEsXgi9Zs"}},"msgtype":"m.text"},"ts":1701199176907,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$gblGHnykzcE6vDSGhoam-gbvUwfPALWW70gGz3H2Sy8"},
{"content":{"body":"yes but usually it's like \"editor's review\" or something, rarely \"someone approving the normative behavior\"","m.mentions":{},"msgtype":"m.text"},"ts":1701199196519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3yGuCwwNIPJfLONzFOHw_qeIVogdrNA3GSPJAnQIAPQ"},
{"content":{"body":"> <@pchimento:igalia.com> we used to have \"carry\" (it was called `{overflow: 'balance'}`) but removed it during stage 2, based on experience from the Moment maintainers that people only wanted it because it was what `new Date()` does.\n\nAnecdotally, at least one person uses it for her birthday math.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YNEZqVDgcEcDBps7HKlx0NF2qeyBHyorlN8aZInRU_Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>we used to have \"carry\" (it was called <code>{overflow: 'balance'}</code>) but removed it during stage 2, based on experience from the Moment maintainers that people only wanted it because it was what <code>new Date()</code> does.</blockquote></mx-reply>Anecdotally, at least one person uses it for her birthday math.","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$YNEZqVDgcEcDBps7HKlx0NF2qeyBHyorlN8aZInRU_Y"}},"msgtype":"m.text"},"ts":1701199207865,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JFBmJF0w0EcJw1JxYbNjD8acsigfdMEEJ8t_19lYyWw"},
{"content":{"body":"(And I do not have an iron in this fire, just this anecdote.)","m.mentions":{},"msgtype":"m.text"},"ts":1701199269474,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qPWY08xfCLkMIPKVyAiQWzyCgCJmuqdOvBtF16AaZQ0"},
{"content":{"body":"I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.","m.mentions":{},"msgtype":"m.text"},"ts":1701199313746,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$83LwcJ5iedb3wN8KubGVWVo7A4Gv3xc1Gey6n2uLjxo"},
{"content":{"body":"> <@waldemarh:matrix.org> I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\nIf it helps, this is what I understood happens by default based on the type of methods/conversions\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is _individually_ in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$83LwcJ5iedb3wN8KubGVWVo7A4Gv3xc1Gey6n2uLjxo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br />I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</blockquote></mx-reply><p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is <em>individually</em> in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then &quot;rounds towards zero&quot; to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$83LwcJ5iedb3wN8KubGVWVo7A4Gv3xc1Gey6n2uLjxo"}},"msgtype":"m.text"},"ts":1701199609089,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg"},
{"content":{"body":"* In reply to @waldemarh:matrix.org\nI'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\n\nIf it helps, this is what I understood happens by default based on the type of methods/conversions\nString->Temporal validates the strings and throws\n\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore\n","m.new_content":{"body":"> <@waldemarh:matrix.org> I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\nIn reply to @waldemarh:matrix.org\nI'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\n\nIf it helps, this is what I understood happens by default based on the type of methods/conversions\nString->Temporal validates the strings and throws\n\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$83LwcJ5iedb3wN8KubGVWVo7A4Gv3xc1Gey6n2uLjxo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a><br />I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</blockquote></mx-reply><p>In reply to @waldemarh:matrix.org<br />I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</p>\n<p>If it helps, this is what I understood happens by default based on the type of methods/conversions<br />String-&gt;Temporal validates the strings and throws</p>\n<ul>\n<li>\n<p>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then &quot;rounds towards zero&quot; to get a valid date</p>\n</li>\n<li>\n<p>Temporal-&gt;Temporal rounds towards zero to get a valid date</p>\n</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701199638919,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$j1-f85K6r2wVW28gOeX9wsfI7fBBdS1aUvfl6264wQY"},
{"content":{"body":"> <@waldemarh:matrix.org> I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\n * In reply to @waldemarh:matrix.org\nI'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\nIf it helps, this is what I understood happens by default based on the type of methods/conversions\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$83LwcJ5iedb3wN8KubGVWVo7A4Gv3xc1Gey6n2uLjxo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a><br>I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</blockquote></mx-reply> * <p>In reply to @waldemarh:matrix.org<br>I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</p>\n<p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.new_content":{"body":"In reply to @waldemarh:matrix.org\nI'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.\n\nIf it helps, this is what I understood happens by default based on the type of methods/conversions\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":"<p>In reply to @waldemarh:matrix.org<br>I'm not withholding consensus. I (and others) just found the information to be too poorly presented to understand.</p>\n<p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701199663071,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oSpUZRpHUQfr_zVldQs1a-XLtLA8N7tvbviagaseOEs"},
{"content":{"body":" * If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":" * <p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{},"m.new_content":{"body":"If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":"<p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names specific strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701199673373,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$yY9pFZtrqLgpwESeORTwAF3mI8a6H7lrV_YKqapAx6U"},
{"content":{"body":" * If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names some strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":" * <p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names some strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{},"m.new_content":{"body":"If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names some strings, ...) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":"<p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, month names some strings, ...) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701199688446,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GfKaQbagknE55wBZ70pwO3xEYOXgZhlq78LbxTsOgO0"},
{"content":{"body":" * If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, which is all we know about days without looking at other parameters) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":" * <p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, which is all we know about days without looking at other parameters) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{},"m.new_content":{"body":"If it helps, this is what I understood happens by default based on the type of methods/conversions\n\n- String->Temporal validates the strings and throws\n- Plain object->Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, which is all we know about days without looking at other parameters) and then \"rounds towards zero\" to get a valid date\n- Temporal->Temporal rounds towards zero to get a valid date\n\nThere is an exception to that Temporal->Temporal class, which is the method today the champions were proposing to change to not throw anymore","format":"org.matrix.custom.html","formatted_body":"<p>If it helps, this is what I understood happens by default based on the type of methods/conversions</p>\n<ul>\n<li>String-&gt;Temporal validates the strings and throws</li>\n<li>Plain object-&gt;Temporal validates that each parameter is individually in its potential domain (e.g. days are positive integers, which is all we know about days without looking at other parameters) and then \"rounds towards zero\" to get a valid date</li>\n<li>Temporal-&gt;Temporal rounds towards zero to get a valid date</li>\n</ul>\n<p>There is an exception to that Temporal-&gt;Temporal class, which is the method today the champions were proposing to change to not throw anymore</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8w4IKo-dAwlUThnd5L7pwRulg0bO8enYb_C0o2x-iSg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701199714363,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$93Lu4sTB8CBQrJKxoDxUVoXZjAblDugchoDQC92RwJI"},
{"content":{"body":"Or maybe \"rounds down\" and not \"rounds towards zero\"","msgtype":"m.text"},"ts":1701199962110,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FNYUoOwkBD16OvAyxGqrGGAQ9jAFhUV-4haRhLnBNdQ"},
{"content":{"body":"nicolo-ribaudo: from reading the spec I think the \"plain object -> temporal\" and \"temporal -> temporal\" cases were handled the same?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: from reading the spec I think the \"plain object -&gt; temporal\" and \"temporal -&gt; temporal\" cases were handled the same?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1701200006885,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k6XQLNe5d3CdvXdEsurNiFt2yCLYmvfI3qiv7moIVTE"},
{"content":{"body":"could be wrong though, haven't traced through the whole thing","m.mentions":{},"msgtype":"m.text"},"ts":1701200018683,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RaCOx4bZk-hdzPrueCsAorKtDZETQ2QjeMAAOFj5qt0"},
{"content":{"body":"Oh probably yes, given that if the input is a temporal object all the properties are already in the valid domain","msgtype":"m.text"},"ts":1701200076078,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WZip0YleBPFeUOiIx1ETl1dzfcBSwXc_TzD5TXRkKhs"},
{"content":{"body":"yes, what nicolo-ribaudo said is mostly accurate. for String->Temporal conversions, ISO 8601 is clear on what is and isn't a valid ISO string","format":"org.matrix.custom.html","formatted_body":"yes, what <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> said is mostly accurate. for String-&gt;Temporal conversions, ISO 8601 is clear on what is and isn't a valid ISO string","msgtype":"m.text"},"ts":1701200174726,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$w7eupboajKp4XGZJTHX69ciXOD2dEVkrCDwYD1Jx7oE"},
{"content":{"body":"Plain object->Temporal is indeed basically the same as Temporal->Temporal, but Temporal objects are already valid in the domain","msgtype":"m.text"},"ts":1701200201399,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$bczCEKLUiHiAw549FeUUYwPqXuRqn23rT2oGS8YpnfE"},
{"content":{"body":"Plain object->Temporal and Temporal->Temporal methods - the `overflow: 'constrain'` algorithm is a bit more complicated than rounding down: https://tc39.es/proposal-temporal/#sec-temporal-calendardatetoiso","format":"org.matrix.custom.html","formatted_body":"Plain object-&gt;Temporal and Temporal-&gt;Temporal methods - the <code>overflow: 'constrain'</code> algorithm is a bit more complicated than rounding down: https://tc39.es/proposal-temporal/#sec-temporal-calendardatetoiso","msgtype":"m.text"},"ts":1701200322051,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$lyKrXUPTtLAD-JWfjgB2OEL3D8cgGwn7RgEXq9qhFkw"},
{"content":{"body":"but in the ISO and Gregorian calendars, the only place where this is relevant is February 29","msgtype":"m.text"},"ts":1701200345806,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$bAUb547drE9ulCFYHvnN5ayrL1NK2v3aTUnE_VeoyXU"},
{"content":{"body":" * but in the ISO and Gregorian calendars, the only place where this is relevant is February 29 (if you assume valid data)","m.new_content":{"body":"but in the ISO and Gregorian calendars, the only place where this is relevant is February 29 (if you assume valid data)","msgtype":"m.text"},"m.relates_to":{"event_id":"$bAUb547drE9ulCFYHvnN5ayrL1NK2v3aTUnE_VeoyXU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701200396373,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$aLZ3j2XJD1Xv9xdbwtSOucmUb3m7H9xJTAm3BCtMU5U"},
{"content":{"body":" * but in the ISO and Gregorian calendars, the only place where this is relevant is February 29 (if you assume valid data, as you would for a Temporal‚ÜíTemporal conversion)","m.new_content":{"body":"but in the ISO and Gregorian calendars, the only place where this is relevant is February 29 (if you assume valid data, as you would for a Temporal‚ÜíTemporal conversion)","msgtype":"m.text"},"m.relates_to":{"event_id":"$bAUb547drE9ulCFYHvnN5ayrL1NK2v3aTUnE_VeoyXU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701200408170,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$WF_Q_ig-5AWW1YruM_77IZsCfPryW0uvweXrb57cO6o"},
{"content":{"body":"We have experience with Intl in checking in tests amid imprecise specifications, using a specific tag to note that case. We could do this for sum (and transcendental fns) if needed","msgtype":"m.text"},"ts":1701200669028,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iEVoj8dmnMSRT9d0oU4AASmatfeR7BNBmTMq-MbVbBc"},
{"content":{"body":"users will rely on whatever algorithm browsers select and they won't be able to change it in the future anyways","m.mentions":{},"msgtype":"m.text"},"ts":1701200713537,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kSFdUqt8fDKbqsK0HdT9G_uULnp-x5EShxD9w_teIQg"},
{"content":{"body":"a PDF of what waldemar linked in TCQ: https://people.eecs.berkeley.edu/~jrs/papers/robustr.pdf","format":"org.matrix.custom.html","formatted_body":"a PDF of what <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> linked in TCQ: https://people.eecs.berkeley.edu/~jrs/papers/robustr.pdf","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701200782549,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JPCppd6Jt2HxJs97QlM5KbPNFHHXDk8nq7rnRf0t1n4"},
{"content":{"body":"I think ‚Äúbatteries included‚Äù is a decent reason for this, alongside precision‚Äîas Kevin said, this just comes up frequently","msgtype":"m.text"},"ts":1701200865908,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OQ2mNVh_wIGp-bsAtVUbFeXA_1mRtwkz-sUiok85uBE"},
{"content":{"body":"Historically, users have come to depend on answers even if the spec doesn‚Äôt say so. Eg see transcendental fns","msgtype":"m.text"},"ts":1701200981876,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fjxq1rZdnwDpDndId1K0kkM3u-DEpYbL4X4nKeqzmiU"},
{"content":{"body":"well we did manage to make sorting stable, even though it made lots of people angry","m.mentions":{},"msgtype":"m.text"},"ts":1701201017737,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$v6usV8o4w0rjj401lm6IOjfTJa4dUtZ7c6wSGQ9LCgw"},
{"content":{"body":"snek: it being not guaranteed to be stable also made lots of people angry","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: it being not guaranteed to be stable also made lots of people angry","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1701201102016,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JHOpSmMCCuf1flncQ4MQWK3ewCQrwCAqvdxCPW8DsI4"},
{"content":{"body":"it made me angry","m.mentions":{},"msgtype":"m.text"},"ts":1701201115291,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QSzbHQPbkr2YHHTw67Pf-k17AHxEmN8O7zNX38wfK_w"},
{"content":{"body":"the meeting in san diego is confirmed to be happening right?","m.mentions":{},"msgtype":"m.text"},"ts":1701201636963,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VKB0F4UmBQopCGaB4XdsyqRhiuh8OpZ82ar1-42NvL4"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1701201751386,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$OAAKCY2Os-iwiMFP7VthEc7MS6BdoE01nJraZhe5apw"},
{"content":{"body":"Yes, we can‚Äôt wait to have everyone on campus snek ","format":"org.matrix.custom.html","formatted_body":"Yes, we can‚Äôt wait to have everyone on campus <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>","msgtype":"m.text"},"ts":1701201873647,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$CUsh3JuWYzha7-ntwM_LsIayRQ5H36XObYXE9ye6dfI"},
{"content":{"body":"is there a recommended hotel or anything? i recall the building was a little bit far from most stuff ","m.mentions":{},"msgtype":"m.text"},"ts":1701201905869,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mnOSjEOSomtFrokOV0p1a_RwFhHarL9hpBD6uAVnhYY"},
{"content":{"body":"apparently Python's full-precision floating point sum is about 10x slower than a naive summation, and probably about 7x slower than Neumaier","m.mentions":{},"msgtype":"m.text"},"ts":1701202150076,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Of2T3ctLa0Q4cm3q1aHKy-cB0Us8yRDOCYbXJIZsbYo"},
{"content":{"body":"but in JS using `.reduce` is probably at least 10x slower than a native Math.sum anyway, so maybe this is fine?","format":"org.matrix.custom.html","formatted_body":"but in JS using <code>.reduce</code> is probably at least 10x slower than a native Math.sum anyway, so maybe this is fine?","m.mentions":{},"msgtype":"m.text"},"ts":1701202211373,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k1rI2bnZhtXvO-6354zZXTIcob1wVCkN2_tbhySe958"},
{"content":{"body":"http://blog.zachbjornson.com/2019/08/11/fast-float-summation.html","m.mentions":{},"msgtype":"m.text"},"ts":1701202343980,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9zXzXRRdJYC4mODp7zhindiRX7_kgPKg4LhESJR06OI"},
{"content":{"body":"it seems like with avx512 its *faster* to do the neumaier","format":"org.matrix.custom.html","formatted_body":"it seems like with avx512 its <em>faster</em> to do the neumaier","m.mentions":{},"msgtype":"m.text"},"ts":1701202386474,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$E9Kxz6YyWjRxwkH91ZFuRMHRN5Hx_5sDzwbGwmmsjbw"},
{"content":{"body":"if only intel would properly support avx512","m.mentions":{},"msgtype":"m.text"},"ts":1701202427727,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lpvaMKDuNdbL-ceKuqf-cOeqdHU1QDRkz1fNVMS5Inw"},
{"content":{"body":"> <@devsnek:matrix.org> is there a recommended hotel or anything? i recall the building was a little bit far from most stuff\n\nwe are waiting on this information; will share once available","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mnOSjEOSomtFrokOV0p1a_RwFhHarL9hpBD6uAVnhYY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>is there a recommended hotel or anything? i recall the building was a little bit far from most stuff </blockquote></mx-reply>we are waiting on this information; will share once available","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mnOSjEOSomtFrokOV0p1a_RwFhHarL9hpBD6uAVnhYY"}},"msgtype":"m.text"},"ts":1701202545740,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$En3sT9ChtBtNjTXsBtIjtR85tpYn_S90UAMVt_ica8M"},
{"content":{"body":"@snek I don‚Äôt speak officially on this, but we typically stay at a nice Embassy Suites that‚Äôs roughly a 10 minute walk from campus. It across from a large shopping center","msgtype":"m.text"},"ts":1701202960674,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$26nGOU2_5xJDCj3eWoeWvT6G6ntrwdLyAGsW92a92L0"},
{"content":{"body":"I‚Äôd be surprised if a different recommendation was made, but it is possible","msgtype":"m.text"},"ts":1701202992995,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$mEJoxoipcO6I5uTnLFIUTGDwYHCvqDmpX14x8WxGe7w"},
{"content":{"body":"I figured out how to add n IEEE doubles in linear O(n) time and get the correctly rounded exact result in all cases, including avoiding overflow. In practice the running time is similar to Neumaier's but you always get exact results.","m.mentions":{},"msgtype":"m.text"},"ts":1701203370053,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$JkhRnI-2urRblb74ss4-TR1y25VfQZXpNQ4-pezirYM"},
{"content":{"body":"sounds like that's the algorithm we should specify then?","m.mentions":{},"msgtype":"m.text"},"ts":1701203481937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qb4SF9OfSOvxvw4Dq_56iYDo7bSEdDv10Fgfj_5PRxM"},
{"content":{"body":"There are many algorithms that can do this. We should not specify one any more than we should specify JS language parsing by describing what data structures the parser uses and what how the parser updates them when it receives the next character of program text.","m.mentions":{},"msgtype":"m.text"},"ts":1701203583427,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$v8m2BdoQTLg6GFZu_qEGr6iY538lRB-kQXhOe2oLOg8"},
{"content":{"body":" * There are many algorithms that can do this. We should not specify one any more than we should specify JS language parsing by describing what data structures the parser uses and how the parser updates them when it receives the next character of program text.","m.mentions":{},"m.new_content":{"body":"There are many algorithms that can do this. We should not specify one any more than we should specify JS language parsing by describing what data structures the parser uses and how the parser updates them when it receives the next character of program text.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$v8m2BdoQTLg6GFZu_qEGr6iY538lRB-kQXhOe2oLOg8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701203619044,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$6OMgnlO7LBlpXtOIEHsZmlIxmqRLM0wsiPNx4TwtQZw"},
{"content":{"body":"horwat's last theorem ","m.mentions":{},"msgtype":"m.text"},"ts":1701203677808,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MKbwvCNNelGZy8jJOZIBTNhN7FVdDdchfadBxu5ZGLw"},
{"content":{"body":"can you post the algorithms you're aware of on the repo?","m.mentions":{},"msgtype":"m.text"},"ts":1701203690286,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eoqH9RbKhVIS9eyKfZsDCu3gGh8OxAAGZgL3Vfk0d3I"},
{"content":{"body":"The important thing is that the results are completely deterministic.","m.mentions":{},"msgtype":"m.text"},"ts":1701203700962,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$HQbjQ1PF-flTyBwGhH_8SFgcwvaabbCW-o87YtFmGIE"},
{"content":{"body":"the reality tho is that if we don't pick an algorithm, browsers will, and it won't ever be changeable","m.mentions":{},"msgtype":"m.text"},"ts":1701203714854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FRUnI3uPH8hfFeTgWSDZ2HEPAHxtEG99AxmxLzvOxqA"},
{"content":{"body":"certainly if we have an algorithm that can unobservably be replaced then they can do so","m.mentions":{},"msgtype":"m.text"},"ts":1701203733462,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g97u62MdpRRj1nY4tOvG4GKZnWQZajrxdogUnhSBSvQ"},
{"content":{"body":"> <@ljharb:matrix.org> the reality tho is that if we don't pick an algorithm, browsers will, and it won't ever be changeable\n\nIs this claim provable?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FRUnI3uPH8hfFeTgWSDZ2HEPAHxtEG99AxmxLzvOxqA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the reality tho is that if we don&#39;t pick an algorithm, browsers will, and it won&#39;t ever be changeable</blockquote></mx-reply>Is this claim provable?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FRUnI3uPH8hfFeTgWSDZ2HEPAHxtEG99AxmxLzvOxqA"}},"msgtype":"m.text"},"ts":1701203783370,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$MMFJ6L6nzpyZK3mjVSS0NhIuaQBEd-Qr9reV-toS4Pk"},
{"content":{"body":"waldemar: people have started to depend on the precise results of Math.tan and friends, which historically vary across browsers, such that the minority browsers have been updating to match the semantics of the majority ones","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: people have started to depend on the precise results of Math.tan and friends, which historically vary across browsers, such that the minority browsers have been updating to match the semantics of the majority ones","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701203836176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vy1sLq5juyqKiQ5pCdppuRipvu8nVtoLgLbZpmTRcFM"},
{"content":{"body":"This may or may not mean that it is not changeable in practice","m.mentions":{},"msgtype":"m.text"},"ts":1701203847947,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o-JebXjQ04IjmY99bZcbqKQQjHL41kSO1V7Mi3S4p3c"},
{"content":{"body":"> <@waldemarh:matrix.org> Is this claim provable?\n\nof course not, but it doesn't have to be, because that's already been browsers' experience and feedback","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MMFJ6L6nzpyZK3mjVSS0NhIuaQBEd-Qr9reV-toS4Pk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>Is this claim provable?</blockquote></mx-reply>of course not, but it doesn't have to be, because that's already been browsers' experience and feedback","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MMFJ6L6nzpyZK3mjVSS0NhIuaQBEd-Qr9reV-toS4Pk"}},"msgtype":"m.text"},"ts":1701203850837,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0qnRhYQottJCNJZhK8wiR9m85Yl6C-iFnHTtd0JEobU"},
{"content":{"body":"The choice of algorithm is unobservable except by side channels like timing","m.mentions":{},"msgtype":"m.text"},"ts":1701203852114,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VQ4-h_rp79T_9vAXLEP30HldBNA3sHDsb4GyQ4MOqx0"},
{"content":{"body":"of course, if the result is deterministic, then yes the precise choice of algorithm doesn't matter. though Mark Miller wanted us to write down a precise algorithm.","m.mentions":{},"msgtype":"m.text"},"ts":1701203877042,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b-t7SV7tTtnBz_0Dgz2hC4ya06NL65OJ5KiLXcUymK8"},
{"content":{"body":"the exact results is what's observable","m.mentions":{},"msgtype":"m.text"},"ts":1701203877891,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tr_AeUyzk8saitQnCI7JLqQr6CJ56YURCugEhtkrv8U"},
{"content":{"body":"Which I don't really want to do because writing down Shewchuk's will be somewhat lengthy.","m.mentions":{},"msgtype":"m.text"},"ts":1701203901975,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wzRii3XBwEOfcNx-c7F-e0jTkqZsFPvGY69tlbTx0hg"},
{"content":{"body":"here's Python's, for refernece https://github.com/python/cpython/blob/48dfd74a9db9d4aa9c6f23b4a67b461e5d977173/Modules/mathmodule.c#L1359-L1474","m.mentions":{},"msgtype":"m.text"},"ts":1701203923876,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oL54EHyoWSMFn97PsOI4QGeVchtX5dorV16CWJEdrJA"},
{"content":{"body":"The whole point of what I want to do here is to ensure that the result is deterministic by being the exact, correctly rounded answer.","m.mentions":{},"msgtype":"m.text"},"ts":1701203947868,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$X2SAhImYX3GgWg-iRKHnduljnmivE3s34UagddCIyiY"},
{"content":{"body":"Anyway if Mark is OK with not specifying an algorithm I'm quite happy with that.","m.mentions":{},"msgtype":"m.text"},"ts":1701203956284,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fNbxyrroSii_9V16hAaT0ouqnrgV-W8_FcydFQIwegw"},
{"content":{"body":"waldemar: Are you OK with nondeterminism in the case of overflow/underflow? Because specifying those exactly will be hard, I think, without specifying a full algorithm.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: Are you OK with nondeterminism in the case of overflow/underflow? Because specifying those exactly will be hard, I think, without specifying a full algorithm.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701204014976,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UPePzFQTgPsGgvGJMVqdla7DfCdC-dFFTegjUezqU-Y"},
{"content":{"body":"Or overflow at least; not sure about underflow.","m.mentions":{},"msgtype":"m.text"},"ts":1701204054148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zAYyIhEy9o7bD7Yjsn3PEu_W8g3oNVWIWfc3RS-s7Uc"},
{"content":{"body":"if the result is deterministic, then what's the problem with specifying an algorithm? it wouldn't be observable to follow it or not as long as you produced the right results","m.mentions":{},"msgtype":"m.text"},"ts":1701204143765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8r19r2R4GFEXByG9goCTXRlaCt2hAYRL8bZeD18kVr8"},
{"content":{"body":"it means that implementations probably won't innovate, for one thing","m.mentions":{},"msgtype":"m.text"},"ts":1701204221852,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g9BIaHkem_Z9wyjL4Jd_xZ107ijpQ8AM9akLvN9TqH8"},
{"content":{"body":"Python's fsum throws if the intermediate sum overflows, looks like; e.g. `math.fsum([1.6e308, 1.6e308, -1.6e308, -1.6e308])`. I would not want to throw in this case though I'm not sure what a better option would be.","format":"org.matrix.custom.html","formatted_body":"Python's fsum throws if the intermediate sum overflows, looks like; e.g. <code>math.fsum([1.6e308, 1.6e308, -1.6e308, -1.6e308])</code>. I would not want to throw in this case though I'm not sure what a better option would be.","m.mentions":{},"msgtype":"m.text"},"ts":1701204362726,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tfg_dhkRnux607nfIFKXbhZWQrGxrVwSZnMmTzvQs54"},
{"content":{"body":"The algorithm I'm thinking of gives the exact, correctly rounded result in all cases. If that final rounding is ¬±‚àû or NaN, then that's what you get. If the rounding produces a finite double, then that's what you get. No nondeterminism in cases of ¬±‚àû or NaN.","m.mentions":{},"msgtype":"m.text"},"ts":1701204366558,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$NACP4WxXg1BrTYoUKkCTm4mcn0gVe0q6caXDlH9_gns"},
{"content":{"body":"Python's fsum is buggy when it gets intermediate overflows. But there is a simple way to avoid that.","m.mentions":{},"msgtype":"m.text"},"ts":1701204419436,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$H-JWWr2-RGwc_WdC6N3ymttjMY74aLnsKZk92mUGlw0"},
{"content":{"body":"> <@bakkot:matrix.org> it means that implementations probably won't innovate, for one thing\n\nthe alternative is that they‚Äôll all probably copy the first shipper, no?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24g9BIaHkem_Z9wyjL4Jd_xZ107ijpQ8AM9akLvN9TqH8\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it means that implementations probably won't innovate, for one thing</blockquote></mx-reply>the alternative is that they‚Äôll all probably copy the first shipper, no?","m.relates_to":{"m.in_reply_to":{"event_id":"$g9BIaHkem_Z9wyjL4Jd_xZ107ijpQ8AM9akLvN9TqH8"}},"msgtype":"m.text"},"ts":1701204436385,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yOOSwqr-hi8DI1gX90z4xYKiOcKUg7bhiRTOhSjpAUE"},
{"content":{"body":"waldemar: That sounds like a great option, then, though the paper you linked does not handle intermediate overflow from what I can tell","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: That sounds like a great option, then, though the paper you linked does not handle intermediate overflow from what I can tell","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701204467602,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jPuXRqyyb_nyxPxQtbHexqnk9C90xsE-dCGdteOVgdU"},
{"content":{"body":"It doesn't, but the way to solve that is so obvious they probably didn't bother with it.","m.mentions":{},"msgtype":"m.text"},"ts":1701204505998,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$SguhA3UeGcze857-CbKXBAYCbhXTMVtCISXeQd_iHAY"},
{"content":{"body":"can you produce the algorithm you are thinking of","m.mentions":{},"msgtype":"m.text"},"ts":1701204512025,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LiHercAB0oJbCtqsg8aoa3WyJZbDNLtCST-XcjXo2bw"},
{"content":{"body":"just to sate my curiosity ","m.mentions":{},"msgtype":"m.text"},"ts":1701204518231,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$znw0OvVEjIwN1xLjJTiuopNbTz0oQdB6i_C3LSigjt8"},
{"content":{"body":"1. If you have 0, 1, or 2 inputs, the result is trivial.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>If you have 0, 1, or 2 inputs, the result is trivial.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701204708569,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$rtCL9Dlc2ruKnYToc1_gk6Coll2UUb98pNxMfc5W2dM"},
{"content":{"body":"2. If you have 3 or more inputs, use the approach in the paper to compute an exact sum, represented as (p0+p1+‚Ä¶), where each p_i is a double and their exponents differ by at least 53 binary powers ‚Äî in practice you'll likely end up with just one or two such p_i. Then round the sum as in fsum, taking care of the round-to-nearest-breaking-ties-to-even case in fsum.","format":"org.matrix.custom.html","formatted_body":"<ol start=\"2\">\n<li>If you have 3 or more inputs, use the approach in the paper to compute an exact sum, represented as (p0+p1+‚Ä¶), where each p_i is a double and their exponents differ by at least 53 binary powers ‚Äî in practice you'll likely end up with just one or two such p_i. Then round the sum as in fsum, taking care of the round-to-nearest-breaking-ties-to-even case in fsum.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701204724332,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Yj0hovWactw4dKZOttgpBK7n9PDo3PeS5u4O0wmlr8A"},
{"content":{"body":"3. If you get ¬±‚àû or NaN as any of the inputs, the result is always ¬±‚àû or NaN and you can figure it out directly without doing arithmetic.","format":"org.matrix.custom.html","formatted_body":"<ol start=\"3\">\n<li>If you get ¬±‚àû or NaN as any of the inputs, the result is always ¬±‚àû or NaN and you can figure it out directly without doing arithmetic.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701204774043,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$r7fmlSE6TClA6XeYU4llFFLhsIZ5DS8uNcN-dTQLVHA"},
{"content":{"body":"4. Getting ¬±‚àû as an intermediate result is only an issue if you have later cancellation coming that can bring the result back into a finite range. To take care of that case, always try to add in arguments with the opposite sign from your running total first.","format":"org.matrix.custom.html","formatted_body":"<ol start=\"4\">\n<li>Getting ¬±‚àû as an intermediate result is only an issue if you have later cancellation coming that can bring the result back into a finite range. To take care of that case, always try to add in arguments with the opposite sign from your running total first.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701204901992,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$9LL58ENhzaV0HmfD4K8S-HNpGSKVU_2vVPQEitPYe-I"},
{"content":{"body":"presumably -‚àû yields -‚àû, but what does `‚àû + -‚àû` yield?","format":"org.matrix.custom.html","formatted_body":"presumably -‚àû yields -‚àû, but what does <code>‚àû + -‚àû</code> yield?","m.mentions":{},"msgtype":"m.text"},"ts":1701205109331,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zVXlLcX2EVtdWzuqcE97Frtp_WSc5_vN2haVaKPPrI0"},
{"content":{"body":"NaN","m.mentions":{},"msgtype":"m.text"},"ts":1701205130677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TyMaSDINfhWlYNwjCMp0Yy1I0sgp8bzthWICdg24c3U"},
{"content":{"body":"NaN","m.mentions":{},"msgtype":"m.text"},"ts":1701205131394,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$J_TIvdZpfqYNAFNdMtLCNmK7aexq4wxw4PHHqu51-Fg"},
{"content":{"body":"same as normal","m.mentions":{},"msgtype":"m.text"},"ts":1701205133185,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LkK3IOseYLpOxrDIafXawSe8-sPyNQJo8UHlPBX42Ig"},
{"content":{"body":"The claim is that people won‚Äôt use instanceof or toString?","msgtype":"m.text"},"ts":1701205761312,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rql7qr7FaeUZX3dMFNWdfqqBpug2Li48xOVfyJTubSA"},
{"content":{"body":"It seems like accessing these properties and getting the ‚Äúwrong‚Äù value is a risk","msgtype":"m.text"},"ts":1701205796848,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yDYrbR7jd6i2pJ0ANI4KMeR-PEspKl8KwENT7-G83Z0"},
{"content":{"body":"that they won't likely depend on the exact string output of toString, for one - that's been the case in the past when we've added toStringTag to things","m.mentions":{},"msgtype":"m.text"},"ts":1701205799392,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3qz-8pAn76yHvV4hLIiA8fU9637vz5S1HwtiCj-FMQQ"},
{"content":{"body":"and for the constructor, the constructor isn't a global, so i think the likelihood someone will use it is low","m.mentions":{},"msgtype":"m.text"},"ts":1701205813094,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EvKk8CLzJHfmUbTlnmr5wI5VEgkjFi4hhg8d6cPCpX0"},
{"content":{"body":"... yes it is?","m.mentions":{},"msgtype":"m.text"},"ts":1701205836365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SRONV8aVwt_EP2S5V9HF5TSiNKX9m-BZRqFPf_bBUUY"},
{"content":{"body":" * and for the constructor, the constructor isn't a global, so i think the likelihood someone will use it *for iterator helpers* is low","format":"org.matrix.custom.html","formatted_body":" * and for the constructor, the constructor isn't a global, so i think the likelihood someone will use it <em>for iterator helpers</em> is low","m.mentions":{},"m.new_content":{"body":"and for the constructor, the constructor isn't a global, so i think the likelihood someone will use it *for iterator helpers* is low","format":"org.matrix.custom.html","formatted_body":"and for the constructor, the constructor isn't a global, so i think the likelihood someone will use it <em>for iterator helpers</em> is low","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EvKk8CLzJHfmUbTlnmr5wI5VEgkjFi4hhg8d6cPCpX0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701205838183,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$__a-JrwPd1o_J8Xm7lHjvkE3STfKqpT5gnxQY3ClmHw"},
{"content":{"body":"`Iterator` is a global","format":"org.matrix.custom.html","formatted_body":"<code>Iterator</code> is a global","m.mentions":{},"msgtype":"m.text"},"ts":1701205845240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kBfbWxxT2zuvpDOp8Bdip4aSZojk5R5lQtblQu3sXdI"},
{"content":{"body":"in this proposal","m.mentions":{},"msgtype":"m.text"},"ts":1701205848483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MLtNczIa6YdOnIuXzZonwvo6rYTOX2KHip9dhscsePE"},
{"content":{"body":"oh right sorry this is Iterator not IteratorHelpers","m.mentions":{},"msgtype":"m.text"},"ts":1701205849679,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TrBedxTBShZtziqHWP9YW6bl5ku6C4gm1_UKdSkNtOI"},
{"content":{"body":"so I think the likelihood of someone using it is in fact pretty high","m.mentions":{},"msgtype":"m.text"},"ts":1701205867927,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KSzbfh90MRpmqq71dJVuuXEDqZE8ZUJCtZNhy8gp4_U"},
{"content":{"body":"ok so scratch that part, i still don't think people are likely to do `instanceof Iterator` tho","format":"org.matrix.custom.html","formatted_body":"ok so scratch that part, i still don't think people are likely to do <code>instanceof Iterator</code> tho","m.mentions":{},"msgtype":"m.text"},"ts":1701205879271,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QQvDGnVdoWX-_NCy4wjxx4NncZfjlQNwkBL1i4hwrV8"},
{"content":{"body":"I defnitely expect people to do that","m.mentions":{},"msgtype":"m.text"},"ts":1701205887616,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ammkb6mBUt3XOjg36mXFI3hTkWdgFBqq8Fmy58a0de4"},
{"content":{"body":"people use instanceof a lot","m.mentions":{},"msgtype":"m.text"},"ts":1701205893597,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GgZyqgLUu57qi_UVdND0-I-vkhBvyyWkOlkcLFFBVEY"},
{"content":{"body":"you don't, I don't, but other people do","m.mentions":{},"msgtype":"m.text"},"ts":1701205898054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sCTmyDEFPXtW_27mfOxFNXwa6gnTu-8CJ9SPRuD1ydY"},
{"content":{"body":"rather than just throwing it through `Iterator.from`?","format":"org.matrix.custom.html","formatted_body":"rather than just throwing it through <code>Iterator.from</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1701205899832,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$54DWOQtv_Jn6y1jxAAEmaYAInFHBjSMokgBc1KWQis8"},
{"content":{"body":"... uh, definitely yes?","m.mentions":{},"msgtype":"m.text"},"ts":1701205910161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xTL1Q-IJ-gSsGk8MqMcX7_s-H0Cve2ccXfLzC-Slm3g"},
{"content":{"body":"> <@littledan:matrix.org> The claim is that people won‚Äôt use instanceof or toString?\n\nIf there's no constructor, wouldn't `x instanceof Iterator` still be fine? You just wouldn't be able to rely on `x instanceof someOtherIter.constructor`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rql7qr7FaeUZX3dMFNWdfqqBpug2Li48xOVfyJTubSA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The claim is that people won‚Äôt use instanceof or toString?</blockquote></mx-reply>If there's no constructor, wouldn't <code>x instanceof Iterator</code> still be fine? You just wouldn't be able to rely on <code>x instanceof someOtherIter.constructor</code>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rql7qr7FaeUZX3dMFNWdfqqBpug2Li48xOVfyJTubSA"}},"msgtype":"m.text"},"ts":1701205917031,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hqpx5iHxfY3gPr17qFOYSsshLAAuePKKyMGqsaLPlOw"},
{"content":{"body":"ok","m.mentions":{},"msgtype":"m.text"},"ts":1701205923818,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LU4GEHiSFG_U-ZVi4fNPwkxCeQckvBPhlbluriRW0qU"},
{"content":{"body":"`instanceof` doesn't depend on `prototype.constructor`","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> doesn't depend on <code>prototype.constructor</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701205939440,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y8um3IG6d0eX_FyJfPYcB62IeG_RAoa0sFdSPI8IN9o"},
{"content":{"body":"then i think the best thing is to hold off on the proposal until the remaining couple sites are migrated","m.mentions":{},"msgtype":"m.text"},"ts":1701205947234,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$77vA31bKFFJMZYTZWWtLzVIIRGieZmpIFMH_j4nrndU"},
{"content":{"body":"noooooooo","m.mentions":{},"msgtype":"m.text"},"ts":1701205971678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xd-7bpddL6W9VT6NAXS1bkxlPynAc5_8HGvHLLvaNCE"},
{"content":{"body":"ron, can you say that on the queue then?","m.mentions":{},"msgtype":"m.text"},"ts":1701205973858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KR-u0-oEFXGCqr0eP60b99h8xYdU7VEVA0Nh8Azlh58"},
{"content":{"body":"+1 to Kevin ","format":"org.matrix.custom.html","formatted_body":"+1 to Kevin","msgtype":"m.text"},"ts":1701205974830,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Lm1YdJJjzWdzv_zvJ7uXkhDBIs4P-Wi6K2VNDiInVcE"},
{"content":{"body":"`instanceof` depends on `Constructor.prototype`","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> depends on <code>Constructor.prototype</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701205981763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6nD6VK1LxmJjzmAnqU5ujAX1xAzAl_YkZVI-Cn6UTX0"},
{"content":{"body":"Sorry I wasn‚Äôt able to use the queue for a minute","msgtype":"m.text"},"ts":1701205985327,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c50N3lbpy8gXm_42cYIMjpArBCAGCrlLpMOmcJVwWQw"},
{"content":{"body":"what's two more months compared to \"possibly gross forever\"","m.mentions":{},"msgtype":"m.text"},"ts":1701206018096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0ytHuxOHhqmPTjtBC_5vwL_kbo2JVbHFtaIJbFp71Xw"},
{"content":{"body":"> <@littledan:matrix.org> Sorry I wasn‚Äôt able to use the queue for a minute\n\nno big deal üôÇ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c50N3lbpy8gXm_42cYIMjpArBCAGCrlLpMOmcJVwWQw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Sorry I wasn‚Äôt able to use the queue for a minute</blockquote></mx-reply>no big deal üôÇ","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$c50N3lbpy8gXm_42cYIMjpArBCAGCrlLpMOmcJVwWQw"}},"msgtype":"m.text"},"ts":1701206059972,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$2dVs--wlf1ux-otof61MJagYSpVR6DmVmjHh4aR4OWA"},
{"content":{"body":"Apologies for throwing the conversation off by misremembering instanceof semantics ","format":"org.matrix.custom.html","formatted_body":"Apologies for throwing the conversation off by misremembering instanceof semantics","msgtype":"m.text"},"ts":1701206099086,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bl4xCYYYIiaLaxI20MYjcOSd14vUoUpuA3C-pJXXg78"},
{"content":{"body":"`x.constructor === whatever` is almost never a good idea since it's so fragile","format":"org.matrix.custom.html","formatted_body":"<code>x.constructor === whatever</code> is almost never a good idea since it's so fragile","m.mentions":{},"msgtype":"m.text"},"ts":1701206112706,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iZEsMFxjb48kD63WoEMKSTpu7XOcE4g-NPdvphhP0gU"},
{"content":{"body":"I agree but still expect people to write it","m.mentions":{},"msgtype":"m.text"},"ts":1701206137970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$glz76Fw1UjvsMMgpjNk2HwiGtjETD5aH84mcn1cm_b8"},
{"content":{"body":"> <@ljharb:matrix.org> what's two more months compared to \"possibly gross forever\"\n\nThe answer to this question depends on how gross we are talking about and how many iterations on ‚Äútwo more months‚Äù will happen","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240ytHuxOHhqmPTjtBC_5vwL_kbo2JVbHFtaIJbFp71Xw\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what's two more months compared to \"possibly gross forever\"</blockquote></mx-reply>The answer to this question depends on how gross we are talking about and how many iterations on ‚Äútwo more months‚Äù will happen","m.relates_to":{"m.in_reply_to":{"event_id":"$0ytHuxOHhqmPTjtBC_5vwL_kbo2JVbHFtaIJbFp71Xw"}},"msgtype":"m.text"},"ts":1701206151858,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C3c4R0UhZCFKjVEE2KlissH7etZVnz0gngIrrRl2qlo"},
{"content":{"body":"If we had the constraint that we only had to worry about breaking _good_ code, the world would be much nicer","format":"org.matrix.custom.html","formatted_body":"If we had the constraint that we only had to worry about breaking <em>good</em> code, the world would be much nicer","m.mentions":{},"msgtype":"m.text"},"ts":1701206156967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_sMV283J6XxA5Hqg4g5RHYesefuv3XdPfv6dNcTT01I"},
{"content":{"body":"> <@littledan:matrix.org> The answer to this question depends on how gross we are talking about and how many iterations on ‚Äútwo more months‚Äù will happen\n\nthat's true. but \"forever\" is longer than a high number of iterations, and a little grossness accumulates over time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C3c4R0UhZCFKjVEE2KlissH7etZVnz0gngIrrRl2qlo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The answer to this question depends on how gross we are talking about and how many iterations on ‚Äútwo more months‚Äù will happen</blockquote></mx-reply>that's true. but \"forever\" is longer than a high number of iterations, and a little grossness accumulates over time","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$C3c4R0UhZCFKjVEE2KlissH7etZVnz0gngIrrRl2qlo"}},"msgtype":"m.text"},"ts":1701206187907,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$__i1bzoj_iySzSqzjHlrqeC_4jBstLJaV8VSfMOaGhQ"},
{"content":{"body":"Not adding `.constructor` doesn't *break* anything, since `%IteratorPrototype%` never had a constructor prior to this proposal","format":"org.matrix.custom.html","formatted_body":"Not adding <code>.constructor</code> doesn't <em>break</em> anything, since <code>%IteratorPrototype%</code> never had a constructor prior to this proposal","m.mentions":{},"msgtype":"m.text"},"ts":1701206210235,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m7ca-VJAN9UDIvZQroyVwUy8tB48QGRGILhAtzEpiKM"},
{"content":{"body":"It might break an expectation when writing new code, but it wouldn't break existing code.","m.mentions":{},"msgtype":"m.text"},"ts":1701206232795,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_dROzSSROL5Dur-IekwHp0hugaqH-a8tmy9_EhL-A0I"},
{"content":{"body":"At least, no existing code that isn't relying on a proposed feature that hasn't yet reached Stage 4","m.mentions":{},"msgtype":"m.text"},"ts":1701206266986,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gJb2Y1qRo9oSFdKpUqFwUIZ9sWweYQfhJTdsSR7GbaY"},
{"content":{"body":"To be clear I think having .constructor and Object.protototype.toString being ‚Äúwrong‚Äù is grossness and the proposed alternative is ‚Äúless gross‚Äù than omitting things","msgtype":"m.text"},"ts":1701206267646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3eEtrnkQW8U3aheo1v7TwQ9jWLu-C-eqR13TgA0DeLw"},
{"content":{"body":"rbuckton: right, but the concern is that people would come to depend on its absence once `Iterator` becomes a global, which I think is reasonably likely","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: right, but the concern is that people would come to depend on its absence once <code>Iterator</code> becomes a global, which I think is reasonably likely","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701206288311,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WVNfFc6sd_z9M584Ev6GnnncxR87mUNtlJb_2MhtYOY"},
{"content":{"body":"whereas I think there is much less chance of people coming to depend on these properties being accessors, as long as the people in this room agree not to do that ","m.mentions":{},"msgtype":"m.text"},"ts":1701206316070,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sw1L9u-8tsjmpZGDfm0zPgJ7EOfLXX7JBGUGFFs6uYQ"},
{"content":{"body":"wouldn't they depend on it by writing `iterator instanceof Iterator` tho, which wouldn't stop working later?","format":"org.matrix.custom.html","formatted_body":"wouldn't they depend on it by writing <code>iterator instanceof Iterator</code> tho, which wouldn't stop working later?","m.mentions":{},"msgtype":"m.text"},"ts":1701206330265,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iI4Eu7nfy-CzSGkdpB5UtE-BJB7j_2iOdq1LMLTdsaM"},
{"content":{"body":"if someone would write `iterator.constructor === Iterator`, i mean","format":"org.matrix.custom.html","formatted_body":"if someone would write <code>iterator.constructor === Iterator</code>, i mean","m.mentions":{},"msgtype":"m.text"},"ts":1701206341208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gbVIznd1_Bt9nNK_MaJ0fs-KHqgdaVg4KfgD0Czo5Ss"},
{"content":{"body":" * if someone would otherwise write `iterator.constructor === Iterator`, i mean","format":"org.matrix.custom.html","formatted_body":" * if someone would otherwise write <code>iterator.constructor === Iterator</code>, i mean","m.mentions":{},"m.new_content":{"body":"if someone would otherwise write `iterator.constructor === Iterator`, i mean","format":"org.matrix.custom.html","formatted_body":"if someone would otherwise write <code>iterator.constructor === Iterator</code>, i mean","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gbVIznd1_Bt9nNK_MaJ0fs-KHqgdaVg4KfgD0Czo5Ss","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701206344668,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TwDjBYO5NbQqNBJ79rAhLv7Nr_j_XCTgo3qBXjM01S0"},
{"content":{"body":"someone could write `if (val.constructor !== Iterator) val = Iterator.from(val)`, and that would start going down a different code path when `Iterator.constructor` was added, and that could easily break something","format":"org.matrix.custom.html","formatted_body":"someone could write <code>if (val.constructor !== Iterator) val = Iterator.from(val)</code>, and that would start going down a different code path when <code>Iterator.constructor</code> was added, and that could easily break something","m.mentions":{},"msgtype":"m.text"},"ts":1701206388242,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XgaV6Q26cELzkuopQ3QUfacUkoBh1zIHALHSD4iJRm4"},
{"content":{"body":"I agree that people _shouldn't_ write that code but I think it's reasonably likely someone _will_","format":"org.matrix.custom.html","formatted_body":"I agree that people <em>shouldn't</em> write that code but I think it's reasonably likely someone <em>will</em>","m.mentions":{},"msgtype":"m.text"},"ts":1701206402121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LFWPwYyeHVM2wxYOAIDD1dbpThviyu5HUz37Ru2OIiM"},
{"content":{"body":"i'm skeptical it's likely they would think about that optimization","m.mentions":{},"msgtype":"m.text"},"ts":1701206435420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CCuXdoMevhKqcJvJp-Htync0xbpPmwEUDHVh183N_5c"},
{"content":{"body":"people don't do that with `Promise.resolve` now","format":"org.matrix.custom.html","formatted_body":"people don't do that with <code>Promise.resolve</code> now","m.mentions":{},"msgtype":"m.text"},"ts":1701206449595,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ncQ6YWlcUpgu-se9-PPdbQOwBCECEMj8Ufk_yXOuvRI"},
{"content":{"body":"uhhh lots of people do that","m.mentions":{},"msgtype":"m.text"},"ts":1701206460563,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ctIhSswrcaqrmnxQs36rGiiUGm1D_9K-RQj1AradhAk"},
{"content":{"body":"or `if (!Array.isArray(x)) x = Array.from(x)` or whatever","format":"org.matrix.custom.html","formatted_body":"or <code>if (!Array.isArray(x)) x = Array.from(x)</code> or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1701206468620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2ZLThKl5yrd1Rt8WGtzLg66fQOGSWVwx76d_B58-Xj4"},
{"content":{"body":"that is very common","m.mentions":{},"msgtype":"m.text"},"ts":1701206471577,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Go7QM-Zd1Iel1wNvTRSTxJGpF6HjTKMe0TqA33XdGkU"},
{"content":{"body":"for arrays yes","m.mentions":{},"msgtype":"m.text"},"ts":1701206477651,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HkZJ_4Zm_OjMHHvjWFRrxFn6a16cSu8xWv73mmNRQM8"},
{"content":{"body":"but for anything else? arrays are a bit unique imo","m.mentions":{},"msgtype":"m.text"},"ts":1701206484500,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ui9op4NAa0nmKNiXPahGxiMnBLS0QxemHRBuHNHgHFg"},
{"content":{"body":"iterators are more like arrays than promises","m.mentions":{},"msgtype":"m.text"},"ts":1701206492045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8hkbP27bKynpNFdRIwhs3YmhxpcXJeG1hLEu-XMIzn4"},
{"content":{"body":"waldemar: can you elaborate on \"always try to add in arguments with the opposite sign from your running total first\"? at what point during the algorithm do you mean? there's a basic Python implementation given at https://code.activestate.com/recipes/393090/ ; can you suggest the change you're proposing as a diff to this algorithm? (This algorithm is bugged, on the last line, but otherwise correct I believe)\n\n```py\ndef msum(iterable):\n    \"Full precision summation using multiple floats for intermediate values\"\n    # Rounded x+y stored in hi with the round-off stored in lo.  Together\n    # hi+lo are exactly equal to x+y.  The inner loop applies hi/lo summation\n    # to each partial so that the list of partial sums remains exact.\n    # Depends on IEEE-754 arithmetic guarantees.  See proof of correctness at:\n    # www-2.cs.cmu.edu/afs/cs/project/quake/public/papers/robust-arithmetic.ps\n\n    partials = []               # sorted, non-overlapping partial sums\n    for x in iterable:\n        i = 0\n        for y in partials:\n            if abs(x) < abs(y):\n                x, y = y, x\n            hi = x + y\n            lo = y - (hi - x)\n            if lo:\n                partials[i] = lo\n                i += 1\n            x = hi\n        partials[i:] = [x]\n    return sum(partials, 0.0)\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: can you elaborate on \"always try to add in arguments with the opposite sign from your running total first\"? at what point during the algorithm do you mean? there's a basic Python implementation given at https://code.activestate.com/recipes/393090/ ; can you suggest the change you're proposing as a diff to this algorithm? (This algorithm is bugged, on the last line, but otherwise correct I believe)</p>\n<pre><code class=\"language-py\">def msum(iterable):\n    \"Full precision summation using multiple floats for intermediate values\"\n    # Rounded x+y stored in hi with the round-off stored in lo.  Together\n    # hi+lo are exactly equal to x+y.  The inner loop applies hi/lo summation\n    # to each partial so that the list of partial sums remains exact.\n    # Depends on IEEE-754 arithmetic guarantees.  See proof of correctness at:\n    # www-2.cs.cmu.edu/afs/cs/project/quake/public/papers/robust-arithmetic.ps\n\n    partials = []               # sorted, non-overlapping partial sums\n    for x in iterable:\n        i = 0\n        for y in partials:\n            if abs(x) &lt; abs(y):\n                x, y = y, x\n            hi = x + y\n            lo = y - (hi - x)\n            if lo:\n                partials[i] = lo\n                i += 1\n            x = hi\n        partials[i:] = [x]\n    return sum(partials, 0.0)\n</code></pre>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701206704697,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P1o1887p-Q6StCKTYj7ffoUlAEdJWnDiG6yjs3b5Mzg"},
{"content":{"body":"retvrn to associative arrays","m.mentions":{},"msgtype":"m.text"},"ts":1701206859819,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$haACfLp2KT9FnuNWPMzQjetiKL7zbSprRKxsVi167fM"},
{"content":{"body":"Whenever you add the next addend to the running total, prefer to pick an addend with the opposite sign from the running total if one exists. The sign of the running total is the sign of the first partial.","m.mentions":{},"msgtype":"m.text"},"ts":1701207414974,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$AM33fGe9jpcdkbVHIPdVna3o5n85E6GNCzeEtq_27KA"},
{"content":{"body":"do you get to pick any addend except the next one and still call it O(n)?","m.mentions":{},"msgtype":"m.text"},"ts":1701207476555,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rLtBhQ5cX8UKNzYEImtAwzl-RGLy5BjAu8u-2vmgUZI"},
{"content":{"body":"How do you find the next addend? Sort the whole list? That's pretty expensive.","m.mentions":{},"msgtype":"m.text"},"ts":1701207476829,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$afU0xkgK7-VP8_DnKAxiOKkGVGExZA1FDRJCeKYZe48"},
{"content":{"body":" * How do you find such an addend? Sort the whole list? That's pretty expensive.","m.mentions":{},"m.new_content":{"body":"How do you find such an addend? Sort the whole list? That's pretty expensive.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$afU0xkgK7-VP8_DnKAxiOKkGVGExZA1FDRJCeKYZe48","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701207486895,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bcei0G7d3WNKRkf8Nnv67AJQsiZDC9qziIXlvOAc9FQ"},
{"content":{"body":"Addition of IEEE doubles with opposite signs can never produce ¬±‚àû. This way you can only get ¬±‚àû if you've run out of addends of the opposite signs to your running total, in which case you've correctly overflowed to ¬±‚àû.","m.mentions":{},"msgtype":"m.text"},"ts":1701207506454,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$1nCF8woyI4AniHUgLS8G4Dts1LilsZcHohdWxWJ9qxA"},
{"content":{"body":"Dividing it up by sign is sufficient, I guess, and cheaper.","m.mentions":{},"msgtype":"m.text"},"ts":1701207506586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LvsIwwq1HhK-dEpIKBzmxj_iEdup7nLvKsRyjniY7-c"},
{"content":{"body":"Though it does require keeping the whole list in memory, which previously was not required. Keeping the whole list in memory is potentially expensive also.","m.mentions":{},"msgtype":"m.text"},"ts":1701207527231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xRj3STBVTIM_DLx6N-jJqmYxVfaZvCKTiz3vn6iCFJI"},
{"content":{"body":"If you want to do one pass, you can also do the lazy approach and worry about it only if you get ¬±‚àû as an intermediate result, in which case you'd back up by one addend and look for addends of the opposite sign.","m.mentions":{},"msgtype":"m.text"},"ts":1701207604904,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$-bUI4_JvysY7uRkx6xGwvUOB_OnOLHP_ymZdX0r9VfI"},
{"content":{"body":"Not having thought about this deeply, I like the idea of variadic Iterator.from","msgtype":"m.text"},"ts":1701207673274,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mnl_3V3ommlBlVnGi1JdeTwFk-0QddQvZ19MbQ9Cw9o"},
{"content":{"body":"That's similar to the approach of dealing with NaN's or ¬±‚àû as inputs. If you see one of those, you want to *ignore* all finite inputs and only add the ¬±‚àû and NaN's using IEEE double arithmetic. You can either scan for them in a pre-pass or just switch to the mode of ignoring finite values the first time you see a non-finite addend.","format":"org.matrix.custom.html","formatted_body":"That's similar to the approach of dealing with NaN's or ¬±‚àû as inputs. If you see one of those, you want to <em>ignore</em> all finite inputs and only add the ¬±‚àû and NaN's using IEEE double arithmetic. You can either scan for them in a pre-pass or just switch to the mode of ignoring finite values the first time you see a non-finite addend.","m.mentions":{},"msgtype":"m.text"},"ts":1701207702627,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$gI37pNt_UF7I2qStmR4MESt2GHWUEfc1p-D2SPODG7Q"},
{"content":{"body":"I'm writing all of this as an issue on the proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1701207740854,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Y9MXorilQFQd36UYfVxp93K8Ufd-0J5oApSds_buSpI"},
{"content":{"body":"can we have Iterator.from(...) and Iterator#concat","m.mentions":{},"msgtype":"m.text"},"ts":1701207802728,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hBLZ-90RGrSyYW9MfmiOLevZC6XNKA7w1f4jEhpOQFM"},
{"content":{"body":"and flat","m.mentions":{},"msgtype":"m.text"},"ts":1701207808257,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0d6d1uDWcMoBS2K4x8GIA6JzOYkWjnBhU_uaCXYUoJM"},
{"content":{"body":"lets just do everything","m.mentions":{},"msgtype":"m.text"},"ts":1701207812637,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wr_6VSLBJ68x_76lcwkb6k-wMcm3MfGYRRoR53GZfNM"},
{"content":{"body":" * Addition of finite IEEE doubles with opposite signs can never produce ¬±‚àû. This way you can only get ¬±‚àû if you've run out of addends of the opposite signs to your running total, in which case you've correctly overflowed to ¬±‚àû.","m.mentions":{},"m.new_content":{"body":"Addition of finite IEEE doubles with opposite signs can never produce ¬±‚àû. This way you can only get ¬±‚àû if you've run out of addends of the opposite signs to your running total, in which case you've correctly overflowed to ¬±‚àû.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1nCF8woyI4AniHUgLS8G4Dts1LilsZcHohdWxWJ9qxA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701207911632,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$aA7D8PymFfjQHA7c41Ya4anzu-Czy7dh3ifoQXjww1Q"},
{"content":{"body":"waldemar: when you encounter a NaN or ¬±‚àû you can _skip_ intermediate results, whereas when searching for something of the other sign you have to keep all those values. That's fine if you're using summing values from an Array, but not when summing values from an iterable, since those are one-shot.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: when you encounter a NaN or ¬±‚àû you can <em>skip</em> intermediate results, whereas when searching for something of the other sign you have to keep all those values. That's fine if you're using summing values from an Array, but not when summing values from an iterable, since those are one-shot.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701207912716,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q7SWXWvUwqivrVU3lMTsK65df4TQCmdYfnhX_KelRok"},
{"content":{"body":"I'm not saying that's a fatal problem, just that it's more overhead, and might be infeasible with extremely large iterables.","m.mentions":{},"msgtype":"m.text"},"ts":1701207949982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aSffJf-0ge8vuYrJYefAlxuWtufzCy2o01X2qTaxHj4"},
{"content":{"body":"I might be wrong, but you could keep two pointers, one with the next positive value, and one with the next negative, and that would still be O(N) with no extra memory, you'd just do at most two whole iterations over the array","msgtype":"m.text"},"ts":1701208213448,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$QVoSprmve6nI7zNuYssZYsjyYFgopqu92dtDUmh58xs"},
{"content":{"body":"That's quite annoying. Picking operands with the opposite sign is the simplest approach to deal with this. If you *really* want to do this in one pass, you can also scale down the exponent of the most significant partial if you get an overflow by, say, 50 powers of 2. This will work as long as you have no more than 2^50 addends.","format":"org.matrix.custom.html","formatted_body":"That's quite annoying. Picking operands with the opposite sign is the simplest approach to deal with this. If you <em>really</em> want to do this in one pass, you can also scale down the exponent of the most significant partial if you get an overflow by, say, 50 powers of 2. This will work as long as you have no more than 2^50 addends.","m.mentions":{},"msgtype":"m.text"},"ts":1701208235794,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$UP1GlaocIvxw_epo3zRPiMmRY3Epb4hxoC-LzdAuDTk"},
{"content":{"body":"Andreu Botella: the concern I have applies when you're summing a one-shot source, not when you're summing an array","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: the concern I have applies when you're summing a one-shot source, not when you're summing an array","m.mentions":{"user_ids":["@abotella:igalia.com"]},"msgtype":"m.text"},"ts":1701208282778,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tTg3HXvL6s5pXmJuLqAL3_NHMXgNUlc8olaEeKnnr1E"},
{"content":{"body":"waldemar: To confirm my understanding, you're suggesting that when you would otherwise overflow, you instead introduce an additional partial which is specially marked as being scaled? and then if that partial still exists at the end you've actually overflowed in the final sum? I'll have to think about how to handle that partial but I think that makes sense.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: To confirm my understanding, you're suggesting that when you would otherwise overflow, you instead introduce an additional partial which is specially marked as being scaled? and then if that partial still exists at the end you've actually overflowed in the final sum? I'll have to think about how to handle that partial but I think that makes sense.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1701208870964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lgmbbbc_Ybvoz4usW92fMpbtwbhA93869gVmUe5pa6o"},
{"content":{"body":"I'm fine saying that you get a rangeerror if you have more than 2**50 (or whatever) addends, so that this can be precise. I doubt that rangeerror would come up in practice anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1701208917693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NIA0xFP_GpjzyCM-AzjufLlCrngsRiK2dpkj1dfhSHM"},
{"content":{"body":"I'll have to try implementing this before bringing it back.","m.mentions":{},"msgtype":"m.text"},"ts":1701208937831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FEI5zLptxxSB3bq1t059bp3houfrelXGrXh_MDQEi2Y"}
]