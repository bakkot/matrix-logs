[
{"content":{"body":"https://marketplace.visualstudio.com/items?itemName=MagicWorks.ecmarkup\n\necmarkup language extension for vscode.","msgtype":"m.text","org.matrix.msc1767.text":"https://marketplace.visualstudio.com/items?itemName=MagicWorks.ecmarkup\n\necmarkup language extension for vscode."},"ts":1670732584734,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$os5iSmx3_oiJl2vvdwgY3DQj1NfAFjku9_KD5Q7rM4Q"},
{"content":{"body":"emu-* HTML tags definition","msgtype":"m.text","org.matrix.msc1767.text":"emu-* HTML tags definition"},"ts":1670732611697,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SKTY45L6oGJTrEvVZlb9GhWLdeFe2L9pTg75OsfTcSY"},
{"content":{"body":"code snippet for verbose spec clause","msgtype":"m.text","org.matrix.msc1767.text":"code snippet for verbose spec clause"},"ts":1670732658844,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F6NKmbAGlQwe5eP1r1in4Ry0RCBcR3Fn4uovUs3mzUo"},
{"content":{"body":"alg highlight (still improving)","msgtype":"m.text","org.matrix.msc1767.text":"alg highlight (still improving)"},"ts":1670732708405,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$EkCVxkq7G-XPmrx_h93VnkdPzOv_NyCMBaibe9sKNjk"},
{"content":{"body":"type check & lint result from ecmarkup cli","msgtype":"m.text","org.matrix.msc1767.text":"type check & lint result from ecmarkup cli"},"ts":1670732826714,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UMDt1hzmTcRyA7Xy7WFo-gruBEHeW27-DGaFoNjxZ2U"},
{"content":{"body":"Warning: Low performance; May crash; bugs\nI'm going to rewrite it in the future","msgtype":"m.text","org.matrix.msc1767.text":"Warning: Low performance; May crash; bugs\nI'm going to rewrite it in the future"},"ts":1670732943332,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PmaT66IKY5GaIt4yfYKMEDMcE0VSeEi_yKaQe5CMTPI"},
{"content":{"body":"*should* it also be throw?","format":"org.matrix.custom.html","formatted_body":"<em>should</em> it also be throw?","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$wzKVwGo-x2vGOoH0s7dlCMu1TqzTp54NEq6Z2bZUi4g"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"*should* it also be throw?","mimetype":"text/plain"},{"body":"<em>should</em> it also be throw?","mimetype":"text/html"}]},"ts":1670740312242,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aF8ONdRnwrlgFJ_DtYjh6zikwbI_N-iMLWdM_X2aGH4"},
{"content":{"body":"Jack Works: very nice!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: very nice!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: very nice!","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: very nice!","mimetype":"text/html"}]},"ts":1670746406401,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BzkILj_638rTQsfZZSzolUH-qIECziba0tjZg9UJWVw"},
{"content":{"body":"ljharb: we decided no - iterator helpers only forward the _iteration_ parts of the generator protocol, meaning calls to `next` and `return`, and not even the values passed to those things","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: we decided no - iterator helpers only forward the <em>iteration</em> parts of the generator protocol, meaning calls to <code>next</code> and <code>return</code>, and not even the values passed to those things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: we decided no - iterator helpers only forward the _iteration_ parts of the generator protocol, meaning calls to `next` and `return`, and not even the values passed to those things","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: we decided no - iterator helpers only forward the <em>iteration</em> parts of the generator protocol, meaning calls to <code>next</code> and <code>return</code>, and not even the values passed to those things","mimetype":"text/html"}]},"ts":1670746453692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8K57uSPXjDW90Kja_VpolidNFxYuu-wR_4ki4w5GVqc"},
{"content":{"body":"nothing in the language calls `.throw`","format":"org.matrix.custom.html","formatted_body":"nothing in the language calls <code>.throw</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nothing in the language calls `.throw`","mimetype":"text/plain"},{"body":"nothing in the language calls <code>.throw</code>","mimetype":"text/html"}]},"ts":1670746462357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gTbdcggCP5h5j08_kNU-Gfq0XhAf5W6WPah5Ht8qaYM"},
{"content":{"body":"so leaving it out doesn't really affect anything","msgtype":"m.text","org.matrix.msc1767.text":"so leaving it out doesn't really affect anything"},"ts":1670746473197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mKfBwTC52sFjpF_RHHkLm68Eyzqqyf4S6_TkPfTsRGQ"},
{"content":{"body":"as I understand it `.throw` is part of the generator protocol mostly to explain stuff like, if you think of async functions as a fancy kind of generator, well, `await` can throw, so there needs to be something in the protocol which explains that","format":"org.matrix.custom.html","formatted_body":"as I understand it <code>.throw</code> is part of the generator protocol mostly to explain stuff like, if you think of async functions as a fancy kind of generator, well, <code>await</code> can throw, so there needs to be something in the protocol which explains that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"as I understand it `.throw` is part of the generator protocol mostly to explain stuff like, if you think of async functions as a fancy kind of generator, well, `await` can throw, so there needs to be something in the protocol which explains that","mimetype":"text/plain"},{"body":"as I understand it <code>.throw</code> is part of the generator protocol mostly to explain stuff like, if you think of async functions as a fancy kind of generator, well, <code>await</code> can throw, so there needs to be something in the protocol which explains that","mimetype":"text/html"}]},"ts":1670746591168,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z29gpF6VqcQ58ULDXtTBn3JpQtdwejSSvoa4uYALSHc"},
{"content":{"body":"which is cool and all but is not relevant to iterators","msgtype":"m.text","org.matrix.msc1767.text":"which is cool and all but is not relevant to iterators"},"ts":1670746601419,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N6ZAaxOFbjPt8BBQfNpXVL_GtNPRpAhYfm5NoYnvc98"},
{"content":{"body":"Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","format":"org.matrix.custom.html","formatted_body":"Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/plain"},{"body":"Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/html"}]},"ts":1670771883106,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wC365p7MbUY1H2fl6FEaraFQMiG1fv2F38s6pu3kIqI"},
{"content":{"body":" * Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","format":"org.matrix.custom.html","formatted_body":" * Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","m.new_content":{"body":"Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","format":"org.matrix.custom.html","formatted_body":"Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/plain"},{"body":"Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$wC365p7MbUY1H2fl6FEaraFQMiG1fv2F38s6pu3kIqI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, indeed. `Q.async` straddled both the modern and old Firefox generator functions. The `throw` and `return` methods made it possible to shim `async` functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/plain"},{"body":" * Yeah, indeed. <code>Q.async</code> straddled both the modern and old Firefox generator functions. The <code>throw</code> and <code>return</code> methods made it possible to shim <code>async</code> functions elegantly. https://github.com/kriskowal/q/blob/master/q.js#L1253-L1327","mimetype":"text/html"}]},"ts":1670771968919,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qu07Xf5QMaWnnLO81zCZGCiJYxvWghgF3NpkwKFp5cc"}
]