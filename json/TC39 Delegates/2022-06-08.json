[
{"content":{"body":"so are we using the Igalia or the 8x8 Jitsi today? Rob Palmer ryzokuken ","format":"org.matrix.custom.html","formatted_body":"so are we using the Igalia or the 8x8 Jitsi today? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so are we using the Igalia or the 8x8 Jitsi today? Rob Palmer ryzokuken ","mimetype":"text/plain"},{"body":"so are we using the Igalia or the 8x8 Jitsi today? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","mimetype":"text/html"}]},"ts":1654698171442,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rCL7R_kkOtkdsnYMiykAQQWFYBJ6KSAoxpJAT-wrSWc"},
{"content":{"body":"Igalia","msgtype":"m.text","org.matrix.msc1767.text":"Igalia"},"ts":1654698180128,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gB6yGPPov7HyDSRB0XXwxyeyrs3pNxOSnlA1rC4ptoA"},
{"content":{"body":"k please comment on https://github.com/tc39/Reflector/issues/430","msgtype":"m.text","org.matrix.msc1767.text":"k please comment on https://github.com/tc39/Reflector/issues/430"},"ts":1654698200953,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6kVR1PBw6iqOk7EEyy1r3ltQk8h1c8eXMVHvLlVSb2I"},
{"content":{"body":"I suppose I could test if 8x8 has gotten better, but there's no way to load test without wasting everyone's time","msgtype":"m.text","org.matrix.msc1767.text":"I suppose I could test if 8x8 has gotten better, but there's no way to load test without wasting everyone's time"},"ts":1654698214126,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$szV0Foz1VV-V_0GqFQDdINYMl-TpAitFGZg2-PCz9nE"},
{"content":{"body":"Can we have this item first if it is possible?\n\n> `60m | Import Reflection status update & discussion | Guy Bedford & Luca Casonato`","format":"org.matrix.custom.html","formatted_body":"<p>Can we have this item first if it is possible?</p>\n<blockquote>\n<p><code>60m | Import Reflection status update &amp; discussion | Guy Bedford &amp; Luca Casonato</code></p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Can we have this item first if it is possible?\n\n> `60m | Import Reflection status update & discussion | Guy Bedford & Luca Casonato`","mimetype":"text/plain"},{"body":"<p>Can we have this item first if it is possible?</p>\n<blockquote>\n<p><code>60m | Import Reflection status update &amp; discussion | Guy Bedford &amp; Luca Casonato</code></p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1654698447408,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$auePuit5cufZ7qadyrDCpScgrTL2yCmXDAKw35E5E4I"},
{"content":{"body":"Let me check Jack Works ","format":"org.matrix.custom.html","formatted_body":"Let me check <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Let me check Jack Works ","mimetype":"text/plain"},{"body":"Let me check <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","mimetype":"text/html"}]},"ts":1654698467309,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rTO7Nk0Gp0WtYVFrdkhwRL0gExQh9b8nWjJ7BuyKcOc"},
{"content":{"body":"Works for me, but I am not sure if Guy is going to be there yet","msgtype":"m.text"},"ts":1654698525630,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$NeUJZ01D-jEjdOqLhD2NoGiUvXpM5gQQAgXUGJLLeWU"},
{"content":{"body":"And he really needs to be there","msgtype":"m.text"},"ts":1654698542733,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Hyalhc5uPicjnNRnmQiz_zy-79HkZ46-bpS04ywmsts"},
{"content":{"body":"Luca Casonato: could you ask Guy about their availability?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: could you ask Guy about their availability?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: could you ask Guy about their availability?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: could you ask Guy about their availability?","mimetype":"text/html"}]},"ts":1654698607157,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kCpwEmA9zv3AoVwoqTTflAK7jxIdwx2w0skXmNTNF-E"},
{"content":{"body":"I also would like to be there. Accelerating baby feeding. :-)","msgtype":"m.text","org.matrix.msc1767.text":"I also would like to be there. Accelerating baby feeding. :-)"},"ts":1654699684539,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$csWAqkGbbDThFoY-GfzliP0ZMT_FNEpBsNFBxWE8gb4"},
{"content":{"body":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","msgtype":"m.text","org.matrix.msc1767.text":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"ts":1654700111508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kkCqJPPlCmRrBPsFXbPToGV6764iRcWNygEV5b3zcPI"},
{"content":{"body":" * looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","m.new_content":{"body":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","msgtype":"m.text","org.matrix.msc1767.text":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"m.relates_to":{"event_id":"$kkCqJPPlCmRrBPsFXbPToGV6764iRcWNygEV5b3zcPI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"ts":1654700135536,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gROT1--b9PlJ49rKqAPVHMff-ufZvXCjahshVYTmtBU"},
{"content":{"body":"We are starting plenary in 1 minute on the Igalia server","msgtype":"m.text","org.matrix.msc1767.text":"We are starting plenary in 1 minute on the Igalia server"},"ts":1654700396383,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$YQqS0hhDD1o7MjkWvadwhE7wYstiMuCcd2PIARe2Lbo"},
{"content":{"body":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","msgtype":"m.text","org.matrix.msc1767.text":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"ts":1654700832124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yYruSr52pMQByykcmWMGExH1IQWy66s3E2mWxaQ-QtQ"},
{"content":{"body":" * hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","m.new_content":{"body":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","msgtype":"m.text","org.matrix.msc1767.text":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"m.relates_to":{"event_id":"$yYruSr52pMQByykcmWMGExH1IQWy66s3E2mWxaQ-QtQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"ts":1654700879938,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TS1PItgAmSX70xcmHxw00PKdUKySLuGRzQKt9q12-28"},
{"content":{"body":"> <@rbuckton:matrix.org> TS erases the `this` parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing `new F()`).\n\nTS already report error if `F` is declared as `F(this: X)`, so I don't understand how it could conflict with TS...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>TS erases the <code>this</code> parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing <code>new F()</code>).</blockquote></mx-reply>TS already report error if <code>F</code> is declared as <code>F(this: X)</code>, so I don't understand how it could conflict with TS...","m.relates_to":{"m.in_reply_to":{"event_id":"$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> TS erases the `this` parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing `new F()`).\n\nTS already report error if `F` is declared as `F(this: X)`, so I don't understand how it could conflict with TS...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>TS erases the <code>this</code> parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing <code>new F()</code>).</blockquote></mx-reply>TS already report error if <code>F</code> is declared as <code>F(this: X)</code>, so I don't understand how it could conflict with TS...","mimetype":"text/html"}]},"ts":1654701881487,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$OcHlDs50sJxwIBmngPWWac3RN2JYoAGpoIvCAEqq6Yo"},
{"content":{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like `/(a+)*/`. Anyone know a good realistic case?","format":"org.matrix.custom.html","formatted_body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like <code>/(a+)*/</code>. Anyone know a good realistic case?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like `/(a+)*/`. Anyone know a good realistic case?","mimetype":"text/plain"},{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like <code>/(a+)*/</code>. Anyone know a good realistic case?","mimetype":"text/html"}]},"ts":1654701881668,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$HzbPrmUflXnm73xI99qM2yOnUb_qKTM7w71ftvqB4kI"},
{"content":{"body":"My old manager DOS'd all of Google with a catastrophic backtrack","msgtype":"m.text","org.matrix.msc1767.text":"My old manager DOS'd all of Google with a catastrophic backtrack"},"ts":1654701929935,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4-VNe1CJC_3TnQLXdE2IQsfGBm--k5YnHO5tuwKz_24"},
{"content":{"body":"> <@yulia:mozilla.org> oh, static methods with this is a bit weird? to me?\n\nYeah, it's weird, and easy to forget and make mistake. So `static foo(this) {}` at least self-document the weirdness and can protect the users if have proper runtime semantic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>oh, static methods with this is a bit weird? to me? </blockquote></mx-reply>Yeah, it's weird, and easy to forget and make mistake. So <code>static foo(this) {}</code> at least self-document the weirdness and can protect the users if have proper runtime semantic.","m.relates_to":{"m.in_reply_to":{"event_id":"$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> oh, static methods with this is a bit weird? to me?\n\nYeah, it's weird, and easy to forget and make mistake. So `static foo(this) {}` at least self-document the weirdness and can protect the users if have proper runtime semantic.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>oh, static methods with this is a bit weird? to me? </blockquote></mx-reply>Yeah, it's weird, and easy to forget and make mistake. So <code>static foo(this) {}</code> at least self-document the weirdness and can protect the users if have proper runtime semantic.","mimetype":"text/html"}]},"ts":1654702023271,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$elWWdSTP9U1uNfSzMM1tF5bd9gYd2OqnGyN0JsnVXCI"},
{"content":{"body":"I ask more with the idea of making the motivation of the proposal stronger than as an objection.","msgtype":"m.text","org.matrix.msc1767.text":"I ask more with the idea of making the motivation of the proposal stronger than as an objection."},"ts":1654702040458,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$P3z_2cJLk6D84Y0ASJjdXlVze8YQN_I28yNfpcQbgE4"},
{"content":{"body":"cl/27372225","msgtype":"m.text","org.matrix.msc1767.text":"cl/27372225"},"ts":1654702158121,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-eYmoyWesJv6nIFZnTu2JsrV8M4QOEmKnUMP9OOmO7c"},
{"content":{"body":"> <@jackworks:matrix.org> If TS emits `function f(this) {}`, it will fail when there is no `this`\n> But if TS emits `function f() {}`, it require TS to emit different code based on the type\n\nIf we have optional syntax `param?` also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow `f(this = defaultValue)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>If TS emits <code>function f(this) {}</code>, it will fail when there is no <code>this</code><br />But if TS emits <code>function f() {}</code>, it require TS to emit different code based on the type</blockquote></mx-reply>If we have optional syntax <code>param?</code> also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow <code>f(this = defaultValue)</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> If TS emits `function f(this) {}`, it will fail when there is no `this`\n> But if TS emits `function f() {}`, it require TS to emit different code based on the type\n\nIf we have optional syntax `param?` also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow `f(this = defaultValue)`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>If TS emits <code>function f(this) {}</code>, it will fail when there is no <code>this</code><br />But if TS emits <code>function f() {}</code>, it require TS to emit different code based on the type</blockquote></mx-reply>If we have optional syntax <code>param?</code> also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow <code>f(this = defaultValue)</code>.","mimetype":"text/html"}]},"ts":1654702164223,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Ts4Dqw7LBDYCRrrISjI0yYZLd3RCBzsRO8LB3YP_BXo"},
{"content":{"body":"> <@shuyuguo:matrix.org> that seems like circular reasoning. this is clearly *widening* the gap\n\nThat's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that seems like circular reasoning. this is clearly <em>widening</em> the gap</blockquote></mx-reply>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","m.relates_to":{"m.in_reply_to":{"event_id":"$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> that seems like circular reasoning. this is clearly *widening* the gap\n\nThat's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that seems like circular reasoning. this is clearly <em>widening</em> the gap</blockquote></mx-reply>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","mimetype":"text/html"}]},"ts":1654702442070,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ"},
{"content":{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about `\\p` atomicity","format":"org.matrix.custom.html","formatted_body":"I kind of wish we had added support for atomic groups BEFORE making that decision about <code>\\p</code> atomicity","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about `\\p` atomicity","mimetype":"text/plain"},{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about <code>\\p</code> atomicity","mimetype":"text/html"}]},"ts":1654702565786,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$z4Nb-H5CIhXiXddtWBd2oKd4eKlcm6gHm4XaWUf5bs0"},
{"content":{"body":"because if this proposal fails to advance, what do we even do?","msgtype":"m.text","org.matrix.msc1767.text":"because if this proposal fails to advance, what do we even do?"},"ts":1654702585481,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9eMt6mO3Dc5K4s4E1VvwwIl3yRcZGlmrXMRc0CTYq3E"},
{"content":{"body":"Atomic groups aren't necessary for atomic behavior, they just make it more approachable","msgtype":"m.text","org.matrix.msc1767.text":"Atomic groups aren't necessary for atomic behavior, they just make it more approachable"},"ts":1654702634028,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zw0Ilhi-Ni0SfyM6rSWmlG8IDtt95i8sr0eku-8G2A4"},
{"content":{"body":"`/(?=(foo))\\1/` is atomic","format":"org.matrix.custom.html","formatted_body":"<code>/(?=(foo))\\1/</code> is atomic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`/(?=(foo))\\1/` is atomic","mimetype":"text/plain"},{"body":"<code>/(?=(foo))\\1/</code> is atomic","mimetype":"text/html"}]},"ts":1654702672079,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw"},
{"content":{"body":"> <@haxjs:matrix.org> That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.\n\ni'm not convinced atm of how any solution in the space of adding `this` as a parameter in plain JS can narrow the gap","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.</blockquote></mx-reply>i'm not convinced atm of how any solution in the space of adding <code>this</code> as a parameter in plain JS can narrow the gap","m.relates_to":{"m.in_reply_to":{"event_id":"$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.\n\ni'm not convinced atm of how any solution in the space of adding `this` as a parameter in plain JS can narrow the gap","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.</blockquote></mx-reply>i'm not convinced atm of how any solution in the space of adding <code>this</code> as a parameter in plain JS can narrow the gap","mimetype":"text/html"}]},"ts":1654702674588,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2aKrvo2wwZfgeDso94YIaeShbwsoALbcYchTzwxZ3ic"},
{"content":{"body":"https://blog.stevenlevithan.com/archives/mimic-atomic-groups","msgtype":"m.text","org.matrix.msc1767.text":"https://blog.stevenlevithan.com/archives/mimic-atomic-groups"},"ts":1654702773812,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NfpvMOM7DJ_D_WMEPTKra8ZSejv2f1fxwdVUsIYCIas"},
{"content":{"body":"> <@jridgewell:matrix.org> `/(?=(foo))\\1/` is atomic\n\nI have a backup slide in the deck that talks about this as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>/(?=(foo))\\1/</code> is atomic</blockquote></mx-reply>I have a backup slide in the deck that talks about this as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> `/(?=(foo))\\1/` is atomic\n\nI have a backup slide in the deck that talks about this as well.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>/(?=(foo))\\1/</code> is atomic</blockquote></mx-reply>I have a backup slide in the deck that talks about this as well.","mimetype":"text/html"}]},"ts":1654702892679,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$acSplhLRqWeDeK5jIfJDawfdfHmKHGUgGSvo1vG6_Rg"},
{"content":{"body":"> <@waldemarh:matrix.org> rbuckton: I think you misunderstood my point. `(class {})()` fails in the same way. That's ok. What I don't like is a Function (with a regular `call` on its prototype) for which `f()` and `f.call(undefined)` have different behavior.\n\nIt's just one of the option, we could also make it still same behavior, aka. `f.call(undefined)` throw. Though it would need `this=defaultValue` or `this?` syntax to allow `undefined` cases. I don't have the strong opinion on that. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you misunderstood my point. <code>(class {})()</code> fails in the same way. That's ok. What I don't like is a Function (with a regular <code>call</code> on its prototype) for which <code>f()</code> and <code>f.call(undefined)</code> have different behavior.</blockquote></mx-reply>It's just one of the option, we could also make it still same behavior, aka. <code>f.call(undefined)</code> throw. Though it would need <code>this=defaultValue</code> or <code>this?</code> syntax to allow <code>undefined</code> cases. I don't have the strong opinion on that.","m.relates_to":{"m.in_reply_to":{"event_id":"$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> rbuckton: I think you misunderstood my point. `(class {})()` fails in the same way. That's ok. What I don't like is a Function (with a regular `call` on its prototype) for which `f()` and `f.call(undefined)` have different behavior.\n\nIt's just one of the option, we could also make it still same behavior, aka. `f.call(undefined)` throw. Though it would need `this=defaultValue` or `this?` syntax to allow `undefined` cases. I don't have the strong opinion on that. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you misunderstood my point. <code>(class {})()</code> fails in the same way. That's ok. What I don't like is a Function (with a regular <code>call</code> on its prototype) for which <code>f()</code> and <code>f.call(undefined)</code> have different behavior.</blockquote></mx-reply>It's just one of the option, we could also make it still same behavior, aka. <code>f.call(undefined)</code> throw. Though it would need <code>this=defaultValue</code> or <code>this?</code> syntax to allow <code>undefined</code> cases. I don't have the strong opinion on that.","mimetype":"text/html"}]},"ts":1654702927445,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$L3CEx2iNweB2zemZQ3M_6a80-Igdi0v8HZxoPmqNgUk"},
{"content":{"body":"Related thread about parameters to pass to import: https://github.com/whatwg/html/issues/7976","msgtype":"m.text","org.matrix.msc1767.text":"Related thread about parameters to pass to import: https://github.com/whatwg/html/issues/7976"},"ts":1654703365333,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$q2M5PD3CaMrs_5PROYJto65WxjqEvN-UQiZqcAqgSM8"},
{"content":{"body":"I think something like this module reflection would be needed if we want to expose the Wasm component model to JS/the web in a consistent way. But I don't know if it's all worth it; maybe the component model is more of a Wasm-on-the-server-only thing.","msgtype":"m.text","org.matrix.msc1767.text":"I think something like this module reflection would be needed if we want to expose the Wasm component model to JS/the web in a consistent way. But I don't know if it's all worth it; maybe the component model is more of a Wasm-on-the-server-only thing."},"ts":1654703592532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$67ARvNEm9p9G0hUN_MuWFMpAEhjxX5jcGxiWeFRC9Pc"},
{"content":{"body":"littledan: what are you imagining in the hypothetical that component model never materializes? have the \"default\" representation of wasm modules be the WebAssembly.Module instead of an instance?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: what are you imagining in the hypothetical that component model never materializes? have the &quot;default&quot; representation of wasm modules be the WebAssembly.Module instead of an instance?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: what are you imagining in the hypothetical that component model never materializes? have the \"default\" representation of wasm modules be the WebAssembly.Module instead of an instance?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: what are you imagining in the hypothetical that component model never materializes? have the &quot;default&quot; representation of wasm modules be the WebAssembly.Module instead of an instance?","mimetype":"text/html"}]},"ts":1654703684913,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AuO-92qiF0cqwmArWa02-7Gn8YBZU-UfiuZWpFIjYDk"},
{"content":{"body":"I think the default model should be what the Wasm/ESM integration proposal is right now","msgtype":"m.text","org.matrix.msc1767.text":"I think the default model should be what the Wasm/ESM integration proposal is right now"},"ts":1654703706817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BqDSs5SZXVpt1lU05BngVMLyfgc-BNRC6oXvkR_COM0"},
{"content":{"body":"What's the relationship of current presenting SourceTextModule with StaticModuleRecord in the compartment proposal? ","msgtype":"m.text"},"ts":1654703714113,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vspB9QonLOHlZk_WuJpajaNimYVlzI86Ysh9DW5zfUc"},
{"content":{"body":"but I've apparently missed a lot of conversation about this topic and I need to catch up","msgtype":"m.text","org.matrix.msc1767.text":"but I've apparently missed a lot of conversation about this topic and I need to catch up"},"ts":1654703723642,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM"},
{"content":{"body":"littledan: that's an Instance, which is not useful at all","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: that's an Instance, which is not useful at all","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: that's an Instance, which is not useful at all","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: that's an Instance, which is not useful at all","mimetype":"text/html"}]},"ts":1654703729871,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tVA471BkCX6VaQ1CUJ7oI8YZruIgKYoR_XE4AmLu3-A"},
{"content":{"body":"because of the custom imports / type marshalling wrapping currently needed","msgtype":"m.text","org.matrix.msc1767.text":"because of the custom imports / type marshalling wrapping currently needed"},"ts":1654703755835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-YCSnYzcqX28wU7k1HNh4PT1aKuUw4pE2QHPbcaqTvw"},
{"content":{"body":"hmm, could you elaborate on \"not useful at all\"?","msgtype":"m.text","org.matrix.msc1767.text":"hmm, could you elaborate on \"not useful at all\"?"},"ts":1654703757025,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wTRsfEXpSMqmCBYYoQEh3RGqCYcrIvNutRVoQJCLpLk"},
{"content":{"body":"> <@littledan:matrix.org> but I've apparently missed a lot of conversation about this topic and I need to catch up\n\nI was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but I&#39;ve apparently missed a lot of conversation about this topic and I need to catch up</blockquote></mx-reply>I was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","m.relates_to":{"m.in_reply_to":{"event_id":"$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> but I've apparently missed a lot of conversation about this topic and I need to catch up\n\nI was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but I&#39;ve apparently missed a lot of conversation about this topic and I need to catch up</blockquote></mx-reply>I was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","mimetype":"text/html"}]},"ts":1654703827862,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$NYtR4o4aZ1HfANiDRYFUP7q0rakR8VKg_DVXpt5mK00"},
{"content":{"body":"the short of it is that currently, the way wasm modules are instantiated require both 1) exports be wrapped with type-marshalling wrappers for e.g. strings and such and 2) custom imports from the outer global be passed into the wasm module","msgtype":"m.text","org.matrix.msc1767.text":"the short of it is that currently, the way wasm modules are instantiated require both 1) exports be wrapped with type-marshalling wrappers for e.g. strings and such and 2) custom imports from the outer global be passed into the wasm module"},"ts":1654703833775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tv5cI0TuFwMukFRx-fz92neTinTjCooUrdfmyPugOsg"},
{"content":{"body":"I can understand the argument that Wasm/ESM integration should wait for other things to come through, but CSP seems like a somewhat narrow motivation for this whole proposal (especially since, last time I checked, browsers hadn't bothered to agree with each other on how Wasm CSP works at all)","msgtype":"m.text","org.matrix.msc1767.text":"I can understand the argument that Wasm/ESM integration should wait for other things to come through, but CSP seems like a somewhat narrow motivation for this whole proposal (especially since, last time I checked, browsers hadn't bothered to agree with each other on how Wasm CSP works at all)"},"ts":1654703852603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9KxAR1hfPlNQO9RqrGn3bdsMJCumI6wC6SfLGy3EuyM"},
{"content":{"body":"neither of those things are possible to do in the current ESM integration proposal","msgtype":"m.text","org.matrix.msc1767.text":"neither of those things are possible to do in the current ESM integration proposal"},"ts":1654703853494,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z9t2T4U_VUvoXSbPNUpYzlayC5-0YJ6HxTSSM4LIoJg"},
{"content":{"body":"so while you can a WebAssembly.Instance out, it's not \"useful\" in that you have \"raw\" interfaces","msgtype":"m.text","org.matrix.msc1767.text":"so while you can a WebAssembly.Instance out, it's not \"useful\" in that you have \"raw\" interfaces"},"ts":1654703871778,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$36EalWy6q0zFl1J4auwvn9vufRwNpOahM4q4CWnARXk"},
{"content":{"body":"yeah what I'm missing here is what the motivation is for doing any ESM integration; will it actually help current tooling? this is something I need to understand better, but a bit of a tangent from this presentation","msgtype":"m.text","org.matrix.msc1767.text":"yeah what I'm missing here is what the motivation is for doing any ESM integration; will it actually help current tooling? this is something I need to understand better, but a bit of a tangent from this presentation"},"ts":1654703918152,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kIk2bvKLbqcoITh-3n4M1POFXi-2Cu6nhAGMBpjKRCI"},
{"content":{"body":"meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway","msgtype":"m.text","org.matrix.msc1767.text":"meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway"},"ts":1654703919466,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc"},
{"content":{"body":"ah, yeah that's a bit of a tangent","msgtype":"m.text","org.matrix.msc1767.text":"ah, yeah that's a bit of a tangent"},"ts":1654703928946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L3ATdDBDfraJxJiYQVgWiLTaQtZ5-yaEx4nBW73MsV8"},
{"content":{"body":"> <@shuyuguo:matrix.org> meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway\n\nsure, I can understand that argument more easily than \"we need ESM integration that gives uninstantiated modules\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>meaning, the hunch is that the current ESM integration proposal won&#39;t be used at all, and people will continue to do programmatic fetching and instantiation anyway</blockquote></mx-reply>sure, I can understand that argument more easily than &quot;we need ESM integration that gives uninstantiated modules&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway\n\nsure, I can understand that argument more easily than \"we need ESM integration that gives uninstantiated modules\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>meaning, the hunch is that the current ESM integration proposal won&#39;t be used at all, and people will continue to do programmatic fetching and instantiation anyway</blockquote></mx-reply>sure, I can understand that argument more easily than &quot;we need ESM integration that gives uninstantiated modules&quot;","mimetype":"text/html"}]},"ts":1654703944760,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N5sKdz6q8tYLDU0Jag7C5SpHsYYQ5nCs_REI5cuax4s"},
{"content":{"body":"my take on that is just like, the ESM module graph is the mechanic we have to tie an app together, it has nice static analyzability properties, so on and so forth","msgtype":"m.text","org.matrix.msc1767.text":"my take on that is just like, the ESM module graph is the mechanic we have to tie an app together, it has nice static analyzability properties, so on and so forth"},"ts":1654703973266,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DErF03LolOrOhN7GcAFPkS5HeZ26Wpf3iDCyL-CEOCg"},
{"content":{"body":"so it'd be a philosophical good to integrate wasm into it","msgtype":"m.text","org.matrix.msc1767.text":"so it'd be a philosophical good to integrate wasm into it"},"ts":1654703988789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cSL57noX4pDXCUG58n2ueqJOR7TCaO3QX0ClVQp7Mpw"},
{"content":{"body":"i don't know if there's a pressing need anywhere","msgtype":"m.text","org.matrix.msc1767.text":"i don't know if there's a pressing need anywhere"},"ts":1654703994394,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s4NyQ-lEJasHqjgDHnHQqfT_nkUE9CR4m8yp_XE1OLU"},
{"content":{"body":"since, you know, the imperative way obviously works","msgtype":"m.text","org.matrix.msc1767.text":"since, you know, the imperative way obviously works"},"ts":1654703998555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RwewubEz9ub2p2hW6KZBEiY_BNeJOR08KeEeSXcE1Ds"},
{"content":{"body":"but i do think it's important to try to not keep saying \"just keep doing everything imperatively\"?","msgtype":"m.text","org.matrix.msc1767.text":"but i do think it's important to try to not keep saying \"just keep doing everything imperatively\"?"},"ts":1654704012973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1lp0vaE9nWYEWdo21BJlVN5-WXlAy7GPSGx3cBhRr70"},
{"content":{"body":"IMO passing in the imports dictionary manually is still doing everything imperatively","msgtype":"m.text","org.matrix.msc1767.text":"IMO passing in the imports dictionary manually is still doing everything imperatively"},"ts":1654704034134,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$egmVQ4SuDfJpmSyiK9y7k6W3q4anXqaZe3wCyCUAcIU"},
{"content":{"body":"well, at least the static import site itself is visible now?","msgtype":"m.text","org.matrix.msc1767.text":"well, at least the static import site itself is visible now?"},"ts":1654704056407,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gofaxxOAo2a7IH0Bl3BUSuBSrW7FB92SM0TkXFLapng"},
{"content":{"body":"> since, you know, the imperative way obviously works\n\nThe imperative way is painful","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>since, you know, the imperative way obviously works</p>\n</blockquote>\n<p>The imperative way is painful</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> since, you know, the imperative way obviously works\n\nThe imperative way is painful","mimetype":"text/plain"},{"body":"<blockquote>\n<p>since, you know, the imperative way obviously works</p>\n</blockquote>\n<p>The imperative way is painful</p>\n","mimetype":"text/html"}]},"ts":1654704062512,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WMQFvkYn8v6DBUH_fExphvfTx6JYuhxT8sodp3avzvQ"},
{"content":{"body":"How do you interop between browsers and node?","msgtype":"m.text","org.matrix.msc1767.text":"How do you interop between browsers and node?"},"ts":1654704076744,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-ek_Eumz6L4cnwbmBCpnmoMNWJxbR0aaXfFnYQieTxM"},
{"content":{"body":"i agree","msgtype":"m.text","org.matrix.msc1767.text":"i agree"},"ts":1654704088531,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rQwwD5wRkZ0i0YslKF3bkfml2oHsYxDa1eJ-CTpxtzE"},
{"content":{"body":"also a previous mistake here is overindexing on the wasm use case, i think guy will go into the asset stuff later","msgtype":"m.text","org.matrix.msc1767.text":"also a previous mistake here is overindexing on the wasm use case, i think guy will go into the asset stuff later"},"ts":1654704144567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jaKVbXpNSRdK5H23OKT2JgtmMYepA5xlVrRgXtG1HDU"}
]