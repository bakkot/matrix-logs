[
{"content":{"body":"so are we using the Igalia or the 8x8 Jitsi today? Rob Palmer ryzokuken ","format":"org.matrix.custom.html","formatted_body":"so are we using the Igalia or the 8x8 Jitsi today? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so are we using the Igalia or the 8x8 Jitsi today? Rob Palmer ryzokuken ","mimetype":"text/plain"},{"body":"so are we using the Igalia or the 8x8 Jitsi today? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","mimetype":"text/html"}]},"ts":1654698171442,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rCL7R_kkOtkdsnYMiykAQQWFYBJ6KSAoxpJAT-wrSWc"},
{"content":{"body":"Igalia","msgtype":"m.text","org.matrix.msc1767.text":"Igalia"},"ts":1654698180128,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gB6yGPPov7HyDSRB0XXwxyeyrs3pNxOSnlA1rC4ptoA"},
{"content":{"body":"k please comment on https://github.com/tc39/Reflector/issues/430","msgtype":"m.text","org.matrix.msc1767.text":"k please comment on https://github.com/tc39/Reflector/issues/430"},"ts":1654698200953,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6kVR1PBw6iqOk7EEyy1r3ltQk8h1c8eXMVHvLlVSb2I"},
{"content":{"body":"I suppose I could test if 8x8 has gotten better, but there's no way to load test without wasting everyone's time","msgtype":"m.text","org.matrix.msc1767.text":"I suppose I could test if 8x8 has gotten better, but there's no way to load test without wasting everyone's time"},"ts":1654698214126,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$szV0Foz1VV-V_0GqFQDdINYMl-TpAitFGZg2-PCz9nE"},
{"content":{"body":"Can we have this item first if it is possible?\n\n> `60m | Import Reflection status update & discussion | Guy Bedford & Luca Casonato`","format":"org.matrix.custom.html","formatted_body":"<p>Can we have this item first if it is possible?</p>\n<blockquote>\n<p><code>60m | Import Reflection status update &amp; discussion | Guy Bedford &amp; Luca Casonato</code></p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Can we have this item first if it is possible?\n\n> `60m | Import Reflection status update & discussion | Guy Bedford & Luca Casonato`","mimetype":"text/plain"},{"body":"<p>Can we have this item first if it is possible?</p>\n<blockquote>\n<p><code>60m | Import Reflection status update &amp; discussion | Guy Bedford &amp; Luca Casonato</code></p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1654698447408,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$auePuit5cufZ7qadyrDCpScgrTL2yCmXDAKw35E5E4I"},
{"content":{"body":"Let me check Jack Works ","format":"org.matrix.custom.html","formatted_body":"Let me check <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Let me check Jack Works ","mimetype":"text/plain"},{"body":"Let me check <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","mimetype":"text/html"}]},"ts":1654698467309,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rTO7Nk0Gp0WtYVFrdkhwRL0gExQh9b8nWjJ7BuyKcOc"},
{"content":{"body":"Works for me, but I am not sure if Guy is going to be there yet","msgtype":"m.text"},"ts":1654698525630,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$NeUJZ01D-jEjdOqLhD2NoGiUvXpM5gQQAgXUGJLLeWU"},
{"content":{"body":"And he really needs to be there","msgtype":"m.text"},"ts":1654698542733,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Hyalhc5uPicjnNRnmQiz_zy-79HkZ46-bpS04ywmsts"},
{"content":{"body":"Luca Casonato: could you ask Guy about their availability?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: could you ask Guy about their availability?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: could you ask Guy about their availability?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: could you ask Guy about their availability?","mimetype":"text/html"}]},"ts":1654698607157,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kCpwEmA9zv3AoVwoqTTflAK7jxIdwx2w0skXmNTNF-E"},
{"content":{"body":"I also would like to be there. Accelerating baby feeding. :-)","msgtype":"m.text","org.matrix.msc1767.text":"I also would like to be there. Accelerating baby feeding. :-)"},"ts":1654699684539,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$csWAqkGbbDThFoY-GfzliP0ZMT_FNEpBsNFBxWE8gb4"},
{"content":{"body":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","msgtype":"m.text","org.matrix.msc1767.text":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"ts":1654700111508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kkCqJPPlCmRrBPsFXbPToGV6764iRcWNygEV5b3zcPI"},
{"content":{"body":" * looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","m.new_content":{"body":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?","msgtype":"m.text","org.matrix.msc1767.text":"looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"m.relates_to":{"event_id":"$kkCqJPPlCmRrBPsFXbPToGV6764iRcWNygEV5b3zcPI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * looks like it won't let anyone into the igalia jitsi until the \"conference has started\"? can we start that so people can join early?"},"ts":1654700135536,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gROT1--b9PlJ49rKqAPVHMff-ufZvXCjahshVYTmtBU"},
{"content":{"body":"We are starting plenary in 1 minute on the Igalia server","msgtype":"m.text","org.matrix.msc1767.text":"We are starting plenary in 1 minute on the Igalia server"},"ts":1654700396383,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$YQqS0hhDD1o7MjkWvadwhE7wYstiMuCcd2PIARe2Lbo"},
{"content":{"body":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","msgtype":"m.text","org.matrix.msc1767.text":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"ts":1654700832124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yYruSr52pMQByykcmWMGExH1IQWy66s3E2mWxaQ-QtQ"},
{"content":{"body":" * hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","m.new_content":{"body":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in","msgtype":"m.text","org.matrix.msc1767.text":"hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"m.relates_to":{"event_id":"$yYruSr52pMQByykcmWMGExH1IQWy66s3E2mWxaQ-QtQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * hm, jitsi just booted me out; i had to completely disconnect and reconnect before it would let me back in"},"ts":1654700879938,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TS1PItgAmSX70xcmHxw00PKdUKySLuGRzQKt9q12-28"},
{"content":{"body":"> <@rbuckton:matrix.org> TS erases the `this` parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing `new F()`).\n\nTS already report error if `F` is declared as `F(this: X)`, so I don't understand how it could conflict with TS...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>TS erases the <code>this</code> parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing <code>new F()</code>).</blockquote></mx-reply>TS already report error if <code>F</code> is declared as <code>F(this: X)</code>, so I don't understand how it could conflict with TS...","m.relates_to":{"m.in_reply_to":{"event_id":"$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> TS erases the `this` parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing `new F()`).\n\nTS already report error if `F` is declared as `F(this: X)`, so I don't understand how it could conflict with TS...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5wFdtwCBfVns_QHDiRFYhVjPLW2VO6-cZd755I9VYPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>TS erases the <code>this</code> parameter currently. Some of these runtime semantics would actually be in conflict with TS (i.e., potentially disallowing <code>new F()</code>).</blockquote></mx-reply>TS already report error if <code>F</code> is declared as <code>F(this: X)</code>, so I don't understand how it could conflict with TS...","mimetype":"text/html"}]},"ts":1654701881487,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$OcHlDs50sJxwIBmngPWWac3RN2JYoAGpoIvCAEqq6Yo"},
{"content":{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like `/(a+)*/`. Anyone know a good realistic case?","format":"org.matrix.custom.html","formatted_body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like <code>/(a+)*/</code>. Anyone know a good realistic case?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like `/(a+)*/`. Anyone know a good realistic case?","mimetype":"text/plain"},{"body":"It strikes me that all the examples of regex patterns with catastrophic backtracking in this presentation are very contrived, doing things it would be very strange for a human to write, like <code>/(a+)*/</code>. Anyone know a good realistic case?","mimetype":"text/html"}]},"ts":1654701881668,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$HzbPrmUflXnm73xI99qM2yOnUb_qKTM7w71ftvqB4kI"},
{"content":{"body":"My old manager DOS'd all of Google with a catastrophic backtrack","msgtype":"m.text","org.matrix.msc1767.text":"My old manager DOS'd all of Google with a catastrophic backtrack"},"ts":1654701929935,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4-VNe1CJC_3TnQLXdE2IQsfGBm--k5YnHO5tuwKz_24"},
{"content":{"body":"> <@yulia:mozilla.org> oh, static methods with this is a bit weird? to me?\n\nYeah, it's weird, and easy to forget and make mistake. So `static foo(this) {}` at least self-document the weirdness and can protect the users if have proper runtime semantic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>oh, static methods with this is a bit weird? to me? </blockquote></mx-reply>Yeah, it's weird, and easy to forget and make mistake. So <code>static foo(this) {}</code> at least self-document the weirdness and can protect the users if have proper runtime semantic.","m.relates_to":{"m.in_reply_to":{"event_id":"$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> oh, static methods with this is a bit weird? to me?\n\nYeah, it's weird, and easy to forget and make mistake. So `static foo(this) {}` at least self-document the weirdness and can protect the users if have proper runtime semantic.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L-XuBnwj0ISgkp39zqlb8k-p8IB7DJKTaw1tjC1VKHE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>oh, static methods with this is a bit weird? to me? </blockquote></mx-reply>Yeah, it's weird, and easy to forget and make mistake. So <code>static foo(this) {}</code> at least self-document the weirdness and can protect the users if have proper runtime semantic.","mimetype":"text/html"}]},"ts":1654702023271,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$elWWdSTP9U1uNfSzMM1tF5bd9gYd2OqnGyN0JsnVXCI"},
{"content":{"body":"I ask more with the idea of making the motivation of the proposal stronger than as an objection.","msgtype":"m.text","org.matrix.msc1767.text":"I ask more with the idea of making the motivation of the proposal stronger than as an objection."},"ts":1654702040458,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$P3z_2cJLk6D84Y0ASJjdXlVze8YQN_I28yNfpcQbgE4"},
{"content":{"body":"cl/27372225","msgtype":"m.text","org.matrix.msc1767.text":"cl/27372225"},"ts":1654702158121,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-eYmoyWesJv6nIFZnTu2JsrV8M4QOEmKnUMP9OOmO7c"},
{"content":{"body":"> <@jackworks:matrix.org> If TS emits `function f(this) {}`, it will fail when there is no `this`\n> But if TS emits `function f() {}`, it require TS to emit different code based on the type\n\nIf we have optional syntax `param?` also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow `f(this = defaultValue)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>If TS emits <code>function f(this) {}</code>, it will fail when there is no <code>this</code><br />But if TS emits <code>function f() {}</code>, it require TS to emit different code based on the type</blockquote></mx-reply>If we have optional syntax <code>param?</code> also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow <code>f(this = defaultValue)</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> If TS emits `function f(this) {}`, it will fail when there is no `this`\n> But if TS emits `function f() {}`, it require TS to emit different code based on the type\n\nIf we have optional syntax `param?` also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow `f(this = defaultValue)`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Nbd4_HzUZHvltIBWGhzlB6YOAPorkmHcc9ADLFFZqbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>If TS emits <code>function f(this) {}</code>, it will fail when there is no <code>this</code><br />But if TS emits <code>function f() {}</code>, it require TS to emit different code based on the type</blockquote></mx-reply>If we have optional syntax <code>param?</code> also in JS (type annotation proposal has that syntax), we could solve that. Another option is allow <code>f(this = defaultValue)</code>.","mimetype":"text/html"}]},"ts":1654702164223,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Ts4Dqw7LBDYCRrrISjI0yYZLd3RCBzsRO8LB3YP_BXo"},
{"content":{"body":"> <@shuyuguo:matrix.org> that seems like circular reasoning. this is clearly *widening* the gap\n\nThat's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that seems like circular reasoning. this is clearly <em>widening</em> the gap</blockquote></mx-reply>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","m.relates_to":{"m.in_reply_to":{"event_id":"$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> that seems like circular reasoning. this is clearly *widening* the gap\n\nThat's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hjx6H0GQ61EafzN_NC7q5T_N5BZnljlPu8TQphgUmEM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that seems like circular reasoning. this is clearly <em>widening</em> the gap</blockquote></mx-reply>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.","mimetype":"text/html"}]},"ts":1654702442070,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ"},
{"content":{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about `\\p` atomicity","format":"org.matrix.custom.html","formatted_body":"I kind of wish we had added support for atomic groups BEFORE making that decision about <code>\\p</code> atomicity","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about `\\p` atomicity","mimetype":"text/plain"},{"body":"I kind of wish we had added support for atomic groups BEFORE making that decision about <code>\\p</code> atomicity","mimetype":"text/html"}]},"ts":1654702565786,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$z4Nb-H5CIhXiXddtWBd2oKd4eKlcm6gHm4XaWUf5bs0"},
{"content":{"body":"because if this proposal fails to advance, what do we even do?","msgtype":"m.text","org.matrix.msc1767.text":"because if this proposal fails to advance, what do we even do?"},"ts":1654702585481,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9eMt6mO3Dc5K4s4E1VvwwIl3yRcZGlmrXMRc0CTYq3E"},
{"content":{"body":"Atomic groups aren't necessary for atomic behavior, they just make it more approachable","msgtype":"m.text","org.matrix.msc1767.text":"Atomic groups aren't necessary for atomic behavior, they just make it more approachable"},"ts":1654702634028,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zw0Ilhi-Ni0SfyM6rSWmlG8IDtt95i8sr0eku-8G2A4"},
{"content":{"body":"`/(?=(foo))\\1/` is atomic","format":"org.matrix.custom.html","formatted_body":"<code>/(?=(foo))\\1/</code> is atomic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`/(?=(foo))\\1/` is atomic","mimetype":"text/plain"},{"body":"<code>/(?=(foo))\\1/</code> is atomic","mimetype":"text/html"}]},"ts":1654702672079,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw"},
{"content":{"body":"> <@haxjs:matrix.org> That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.\n\ni'm not convinced atm of how any solution in the space of adding `this` as a parameter in plain JS can narrow the gap","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.</blockquote></mx-reply>i'm not convinced atm of how any solution in the space of adding <code>this</code> as a parameter in plain JS can narrow the gap","m.relates_to":{"m.in_reply_to":{"event_id":"$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.\n\ni'm not convinced atm of how any solution in the space of adding `this` as a parameter in plain JS can narrow the gap","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xrv4YuUj4CBZRFdfnILij7Su2mATbiADVBUaPEO1sLQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>That's why we at least need to explore the area (this is what stage 1 means? isn't it?), to figure out how we can narrow the gap. It's not easy, for example, TS and flow use same syntax but may be have different behavior in some edge cases. But we can't know it before we have the chance to put it on the table.</blockquote></mx-reply>i'm not convinced atm of how any solution in the space of adding <code>this</code> as a parameter in plain JS can narrow the gap","mimetype":"text/html"}]},"ts":1654702674588,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2aKrvo2wwZfgeDso94YIaeShbwsoALbcYchTzwxZ3ic"},
{"content":{"body":"https://blog.stevenlevithan.com/archives/mimic-atomic-groups","msgtype":"m.text","org.matrix.msc1767.text":"https://blog.stevenlevithan.com/archives/mimic-atomic-groups"},"ts":1654702773812,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NfpvMOM7DJ_D_WMEPTKra8ZSejv2f1fxwdVUsIYCIas"},
{"content":{"body":"> <@jridgewell:matrix.org> `/(?=(foo))\\1/` is atomic\n\nI have a backup slide in the deck that talks about this as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>/(?=(foo))\\1/</code> is atomic</blockquote></mx-reply>I have a backup slide in the deck that talks about this as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> `/(?=(foo))\\1/` is atomic\n\nI have a backup slide in the deck that talks about this as well.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOkQNHwwrvEDgLC7s4y-hKJGcadooDoM1yIswQp4Xlw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>/(?=(foo))\\1/</code> is atomic</blockquote></mx-reply>I have a backup slide in the deck that talks about this as well.","mimetype":"text/html"}]},"ts":1654702892679,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$acSplhLRqWeDeK5jIfJDawfdfHmKHGUgGSvo1vG6_Rg"},
{"content":{"body":"> <@waldemarh:matrix.org> rbuckton: I think you misunderstood my point. `(class {})()` fails in the same way. That's ok. What I don't like is a Function (with a regular `call` on its prototype) for which `f()` and `f.call(undefined)` have different behavior.\n\nIt's just one of the option, we could also make it still same behavior, aka. `f.call(undefined)` throw. Though it would need `this=defaultValue` or `this?` syntax to allow `undefined` cases. I don't have the strong opinion on that. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you misunderstood my point. <code>(class {})()</code> fails in the same way. That's ok. What I don't like is a Function (with a regular <code>call</code> on its prototype) for which <code>f()</code> and <code>f.call(undefined)</code> have different behavior.</blockquote></mx-reply>It's just one of the option, we could also make it still same behavior, aka. <code>f.call(undefined)</code> throw. Though it would need <code>this=defaultValue</code> or <code>this?</code> syntax to allow <code>undefined</code> cases. I don't have the strong opinion on that.","m.relates_to":{"m.in_reply_to":{"event_id":"$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> rbuckton: I think you misunderstood my point. `(class {})()` fails in the same way. That's ok. What I don't like is a Function (with a regular `call` on its prototype) for which `f()` and `f.call(undefined)` have different behavior.\n\nIt's just one of the option, we could also make it still same behavior, aka. `f.call(undefined)` throw. Though it would need `this=defaultValue` or `this?` syntax to allow `undefined` cases. I don't have the strong opinion on that. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5X8CFJve7Iecp5D52uTjZA5p_m96j938WBUZ25fBKkc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you misunderstood my point. <code>(class {})()</code> fails in the same way. That's ok. What I don't like is a Function (with a regular <code>call</code> on its prototype) for which <code>f()</code> and <code>f.call(undefined)</code> have different behavior.</blockquote></mx-reply>It's just one of the option, we could also make it still same behavior, aka. <code>f.call(undefined)</code> throw. Though it would need <code>this=defaultValue</code> or <code>this?</code> syntax to allow <code>undefined</code> cases. I don't have the strong opinion on that.","mimetype":"text/html"}]},"ts":1654702927445,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$L3CEx2iNweB2zemZQ3M_6a80-Igdi0v8HZxoPmqNgUk"},
{"content":{"body":"Related thread about parameters to pass to import: https://github.com/whatwg/html/issues/7976","msgtype":"m.text","org.matrix.msc1767.text":"Related thread about parameters to pass to import: https://github.com/whatwg/html/issues/7976"},"ts":1654703365333,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$q2M5PD3CaMrs_5PROYJto65WxjqEvN-UQiZqcAqgSM8"},
{"content":{"body":"I think something like this module reflection would be needed if we want to expose the Wasm component model to JS/the web in a consistent way. But I don't know if it's all worth it; maybe the component model is more of a Wasm-on-the-server-only thing.","msgtype":"m.text","org.matrix.msc1767.text":"I think something like this module reflection would be needed if we want to expose the Wasm component model to JS/the web in a consistent way. But I don't know if it's all worth it; maybe the component model is more of a Wasm-on-the-server-only thing."},"ts":1654703592532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$67ARvNEm9p9G0hUN_MuWFMpAEhjxX5jcGxiWeFRC9Pc"},
{"content":{"body":"littledan: what are you imagining in the hypothetical that component model never materializes? have the \"default\" representation of wasm modules be the WebAssembly.Module instead of an instance?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: what are you imagining in the hypothetical that component model never materializes? have the &quot;default&quot; representation of wasm modules be the WebAssembly.Module instead of an instance?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: what are you imagining in the hypothetical that component model never materializes? have the \"default\" representation of wasm modules be the WebAssembly.Module instead of an instance?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: what are you imagining in the hypothetical that component model never materializes? have the &quot;default&quot; representation of wasm modules be the WebAssembly.Module instead of an instance?","mimetype":"text/html"}]},"ts":1654703684913,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AuO-92qiF0cqwmArWa02-7Gn8YBZU-UfiuZWpFIjYDk"},
{"content":{"body":"I think the default model should be what the Wasm/ESM integration proposal is right now","msgtype":"m.text","org.matrix.msc1767.text":"I think the default model should be what the Wasm/ESM integration proposal is right now"},"ts":1654703706817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BqDSs5SZXVpt1lU05BngVMLyfgc-BNRC6oXvkR_COM0"},
{"content":{"body":"What's the relationship of current presenting SourceTextModule with StaticModuleRecord in the compartment proposal? ","msgtype":"m.text"},"ts":1654703714113,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vspB9QonLOHlZk_WuJpajaNimYVlzI86Ysh9DW5zfUc"},
{"content":{"body":"but I've apparently missed a lot of conversation about this topic and I need to catch up","msgtype":"m.text","org.matrix.msc1767.text":"but I've apparently missed a lot of conversation about this topic and I need to catch up"},"ts":1654703723642,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM"},
{"content":{"body":"littledan: that's an Instance, which is not useful at all","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: that's an Instance, which is not useful at all","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: that's an Instance, which is not useful at all","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: that's an Instance, which is not useful at all","mimetype":"text/html"}]},"ts":1654703729871,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tVA471BkCX6VaQ1CUJ7oI8YZruIgKYoR_XE4AmLu3-A"},
{"content":{"body":"because of the custom imports / type marshalling wrapping currently needed","msgtype":"m.text","org.matrix.msc1767.text":"because of the custom imports / type marshalling wrapping currently needed"},"ts":1654703755835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-YCSnYzcqX28wU7k1HNh4PT1aKuUw4pE2QHPbcaqTvw"},
{"content":{"body":"hmm, could you elaborate on \"not useful at all\"?","msgtype":"m.text","org.matrix.msc1767.text":"hmm, could you elaborate on \"not useful at all\"?"},"ts":1654703757025,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wTRsfEXpSMqmCBYYoQEh3RGqCYcrIvNutRVoQJCLpLk"},
{"content":{"body":"> <@littledan:matrix.org> but I've apparently missed a lot of conversation about this topic and I need to catch up\n\nI was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but I&#39;ve apparently missed a lot of conversation about this topic and I need to catch up</blockquote></mx-reply>I was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","m.relates_to":{"m.in_reply_to":{"event_id":"$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> but I've apparently missed a lot of conversation about this topic and I need to catch up\n\nI was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3GOzRUUCka5iNIDmdwV__J4vEeCPzZ-zuk-HtOZrdvM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but I&#39;ve apparently missed a lot of conversation about this topic and I need to catch up</blockquote></mx-reply>I was surprised that some folk wanted the default integration to give the Wasm Module, rather than the evaluated instance.  Still not sure why.","mimetype":"text/html"}]},"ts":1654703827862,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$NYtR4o4aZ1HfANiDRYFUP7q0rakR8VKg_DVXpt5mK00"},
{"content":{"body":"the short of it is that currently, the way wasm modules are instantiated require both 1) exports be wrapped with type-marshalling wrappers for e.g. strings and such and 2) custom imports from the outer global be passed into the wasm module","msgtype":"m.text","org.matrix.msc1767.text":"the short of it is that currently, the way wasm modules are instantiated require both 1) exports be wrapped with type-marshalling wrappers for e.g. strings and such and 2) custom imports from the outer global be passed into the wasm module"},"ts":1654703833775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tv5cI0TuFwMukFRx-fz92neTinTjCooUrdfmyPugOsg"},
{"content":{"body":"I can understand the argument that Wasm/ESM integration should wait for other things to come through, but CSP seems like a somewhat narrow motivation for this whole proposal (especially since, last time I checked, browsers hadn't bothered to agree with each other on how Wasm CSP works at all)","msgtype":"m.text","org.matrix.msc1767.text":"I can understand the argument that Wasm/ESM integration should wait for other things to come through, but CSP seems like a somewhat narrow motivation for this whole proposal (especially since, last time I checked, browsers hadn't bothered to agree with each other on how Wasm CSP works at all)"},"ts":1654703852603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9KxAR1hfPlNQO9RqrGn3bdsMJCumI6wC6SfLGy3EuyM"},
{"content":{"body":"neither of those things are possible to do in the current ESM integration proposal","msgtype":"m.text","org.matrix.msc1767.text":"neither of those things are possible to do in the current ESM integration proposal"},"ts":1654703853494,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z9t2T4U_VUvoXSbPNUpYzlayC5-0YJ6HxTSSM4LIoJg"},
{"content":{"body":"so while you can a WebAssembly.Instance out, it's not \"useful\" in that you have \"raw\" interfaces","msgtype":"m.text","org.matrix.msc1767.text":"so while you can a WebAssembly.Instance out, it's not \"useful\" in that you have \"raw\" interfaces"},"ts":1654703871778,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$36EalWy6q0zFl1J4auwvn9vufRwNpOahM4q4CWnARXk"},
{"content":{"body":"yeah what I'm missing here is what the motivation is for doing any ESM integration; will it actually help current tooling? this is something I need to understand better, but a bit of a tangent from this presentation","msgtype":"m.text","org.matrix.msc1767.text":"yeah what I'm missing here is what the motivation is for doing any ESM integration; will it actually help current tooling? this is something I need to understand better, but a bit of a tangent from this presentation"},"ts":1654703918152,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kIk2bvKLbqcoITh-3n4M1POFXi-2Cu6nhAGMBpjKRCI"},
{"content":{"body":"meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway","msgtype":"m.text","org.matrix.msc1767.text":"meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway"},"ts":1654703919466,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc"},
{"content":{"body":"ah, yeah that's a bit of a tangent","msgtype":"m.text","org.matrix.msc1767.text":"ah, yeah that's a bit of a tangent"},"ts":1654703928946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L3ATdDBDfraJxJiYQVgWiLTaQtZ5-yaEx4nBW73MsV8"},
{"content":{"body":"> <@shuyuguo:matrix.org> meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway\n\nsure, I can understand that argument more easily than \"we need ESM integration that gives uninstantiated modules\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>meaning, the hunch is that the current ESM integration proposal won&#39;t be used at all, and people will continue to do programmatic fetching and instantiation anyway</blockquote></mx-reply>sure, I can understand that argument more easily than &quot;we need ESM integration that gives uninstantiated modules&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> meaning, the hunch is that the current ESM integration proposal won't be used at all, and people will continue to do programmatic fetching and instantiation anyway\n\nsure, I can understand that argument more easily than \"we need ESM integration that gives uninstantiated modules\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fJoY6OzVi9ZtDUAdUdm8gRABELUNuBs_H8N1sgheFgc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>meaning, the hunch is that the current ESM integration proposal won&#39;t be used at all, and people will continue to do programmatic fetching and instantiation anyway</blockquote></mx-reply>sure, I can understand that argument more easily than &quot;we need ESM integration that gives uninstantiated modules&quot;","mimetype":"text/html"}]},"ts":1654703944760,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N5sKdz6q8tYLDU0Jag7C5SpHsYYQ5nCs_REI5cuax4s"},
{"content":{"body":"my take on that is just like, the ESM module graph is the mechanic we have to tie an app together, it has nice static analyzability properties, so on and so forth","msgtype":"m.text","org.matrix.msc1767.text":"my take on that is just like, the ESM module graph is the mechanic we have to tie an app together, it has nice static analyzability properties, so on and so forth"},"ts":1654703973266,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DErF03LolOrOhN7GcAFPkS5HeZ26Wpf3iDCyL-CEOCg"},
{"content":{"body":"so it'd be a philosophical good to integrate wasm into it","msgtype":"m.text","org.matrix.msc1767.text":"so it'd be a philosophical good to integrate wasm into it"},"ts":1654703988789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cSL57noX4pDXCUG58n2ueqJOR7TCaO3QX0ClVQp7Mpw"},
{"content":{"body":"i don't know if there's a pressing need anywhere","msgtype":"m.text","org.matrix.msc1767.text":"i don't know if there's a pressing need anywhere"},"ts":1654703994394,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s4NyQ-lEJasHqjgDHnHQqfT_nkUE9CR4m8yp_XE1OLU"},
{"content":{"body":"since, you know, the imperative way obviously works","msgtype":"m.text","org.matrix.msc1767.text":"since, you know, the imperative way obviously works"},"ts":1654703998555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RwewubEz9ub2p2hW6KZBEiY_BNeJOR08KeEeSXcE1Ds"},
{"content":{"body":"but i do think it's important to try to not keep saying \"just keep doing everything imperatively\"?","msgtype":"m.text","org.matrix.msc1767.text":"but i do think it's important to try to not keep saying \"just keep doing everything imperatively\"?"},"ts":1654704012973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1lp0vaE9nWYEWdo21BJlVN5-WXlAy7GPSGx3cBhRr70"},
{"content":{"body":"IMO passing in the imports dictionary manually is still doing everything imperatively","msgtype":"m.text","org.matrix.msc1767.text":"IMO passing in the imports dictionary manually is still doing everything imperatively"},"ts":1654704034134,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$egmVQ4SuDfJpmSyiK9y7k6W3q4anXqaZe3wCyCUAcIU"},
{"content":{"body":"well, at least the static import site itself is visible now?","msgtype":"m.text","org.matrix.msc1767.text":"well, at least the static import site itself is visible now?"},"ts":1654704056407,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gofaxxOAo2a7IH0Bl3BUSuBSrW7FB92SM0TkXFLapng"},
{"content":{"body":"> since, you know, the imperative way obviously works\n\nThe imperative way is painful","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>since, you know, the imperative way obviously works</p>\n</blockquote>\n<p>The imperative way is painful</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> since, you know, the imperative way obviously works\n\nThe imperative way is painful","mimetype":"text/plain"},{"body":"<blockquote>\n<p>since, you know, the imperative way obviously works</p>\n</blockquote>\n<p>The imperative way is painful</p>\n","mimetype":"text/html"}]},"ts":1654704062512,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WMQFvkYn8v6DBUH_fExphvfTx6JYuhxT8sodp3avzvQ"},
{"content":{"body":"How do you interop between browsers and node?","msgtype":"m.text","org.matrix.msc1767.text":"How do you interop between browsers and node?"},"ts":1654704076744,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-ek_Eumz6L4cnwbmBCpnmoMNWJxbR0aaXfFnYQieTxM"},
{"content":{"body":"i agree","msgtype":"m.text","org.matrix.msc1767.text":"i agree"},"ts":1654704088531,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rQwwD5wRkZ0i0YslKF3bkfml2oHsYxDa1eJ-CTpxtzE"},
{"content":{"body":"also a previous mistake here is overindexing on the wasm use case, i think guy will go into the asset stuff later","msgtype":"m.text","org.matrix.msc1767.text":"also a previous mistake here is overindexing on the wasm use case, i think guy will go into the asset stuff later"},"ts":1654704144567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jaKVbXpNSRdK5H23OKT2JgtmMYepA5xlVrRgXtG1HDU"},
{"content":{"body":"IMO import(reflectedModule) should link it into the main module graph","msgtype":"m.text","org.matrix.msc1767.text":"IMO import(reflectedModule) should link it into the main module graph"},"ts":1654704328455,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fHVU_R8KmcwD_E4YSFg4kpQSLpOalWCQ808ITOlMvfI"},
{"content":{"body":"this is basically how it works with module blocks","msgtype":"m.text","org.matrix.msc1767.text":"this is basically how it works with module blocks"},"ts":1654704378853,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gss_cl5UUwDMIsLryqMH5-ZsfyAT8N_PmA9X1pMsvLA"},
{"content":{"body":"and presumably module blocks are the same thing as reflected modules, right?","msgtype":"m.text","org.matrix.msc1767.text":"and presumably module blocks are the same thing as reflected modules, right?"},"ts":1654704394735,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gqikv_yislmRPz0WRzc91e1YOQOOL6c-54jfdNpnFZM"},
{"content":{"body":"(and these are also the same kind of thing as uninstantiated Wasm modules)","msgtype":"m.text","org.matrix.msc1767.text":"(and these are also the same kind of thing as uninstantiated Wasm modules)"},"ts":1654704409920,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9It5sHujRRyFVAkAYMOYW5QKEFkOMQSCPQghGdDaGSI"},
{"content":{"body":"They all sound like StaticModuleRecord from the Compartment proposal","msgtype":"m.text","org.matrix.msc1767.text":"They all sound like StaticModuleRecord from the Compartment proposal"},"ts":1654704424754,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sAob_x6aSdbxJ70EXtBRk8uhpKq3bG-LP78PKfYnWXY"},
{"content":{"body":"agreed","msgtype":"m.text","org.matrix.msc1767.text":"agreed"},"ts":1654704430187,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0CEgacoQfz9vs1A9YIDk6oXYi93MooKKV-jEA0rprp0"},
{"content":{"body":"i missed the earlier slides about how the `SourceTextModule` and `ModuleInstance` interfaces actually wrap `WebAssembly.Module` and `Instance` (and module blocks)","format":"org.matrix.custom.html","formatted_body":"i missed the earlier slides about how the <code>SourceTextModule</code> and <code>ModuleInstance</code> interfaces actually wrap <code>WebAssembly.Module</code> and <code>Instance</code> (and module blocks)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i missed the earlier slides about how the `SourceTextModule` and `ModuleInstance` interfaces actually wrap `WebAssembly.Module` and `Instance` (and module blocks)","mimetype":"text/plain"},{"body":"i missed the earlier slides about how the <code>SourceTextModule</code> and <code>ModuleInstance</code> interfaces actually wrap <code>WebAssembly.Module</code> and <code>Instance</code> (and module blocks)","mimetype":"text/html"}]},"ts":1654704489100,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6aBf5XfNKAJ3INHMxFoinCAXeKlFYAD72T1eJ1bnkhk"},
{"content":{"body":"I think ModuleInstance is an actual instance, which then you imperatively instantiate","msgtype":"m.text","org.matrix.msc1767.text":"I think ModuleInstance is an actual instance, which then you imperatively instantiate"},"ts":1654704505047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pz9Jm1SI30xt0f7awyGQw_qmXefCIeOsyXC9h1YCJ1Y"},
{"content":{"body":"(if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)","msgtype":"m.text","org.matrix.msc1767.text":"(if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)"},"ts":1654704510339,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xyNOYVPnHBkq3f-Jb3vgzPiSt8PM9pn6ugRcjQ5H1s4"},
{"content":{"body":"I'm a big fan of that PR","msgtype":"m.text","org.matrix.msc1767.text":"I'm a big fan of that PR"},"ts":1654704547785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0IgUEBJ4aej3BAEPue9e3iRaTdjS_T-bXKX84n4zP6k"},
{"content":{"body":"> <@mhofman:matrix.org> They all sound like StaticModuleRecord from the Compartment proposal\n\n+1 to me. but not exactly the same","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sAob_x6aSdbxJ70EXtBRk8uhpKq3bG-LP78PKfYnWXY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>They all sound like StaticModuleRecord from the Compartment proposal</blockquote></mx-reply>+1 to me. but not exactly the same","m.relates_to":{"m.in_reply_to":{"event_id":"$sAob_x6aSdbxJ70EXtBRk8uhpKq3bG-LP78PKfYnWXY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> They all sound like StaticModuleRecord from the Compartment proposal\n\n+1 to me. but not exactly the same","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sAob_x6aSdbxJ70EXtBRk8uhpKq3bG-LP78PKfYnWXY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>They all sound like StaticModuleRecord from the Compartment proposal</blockquote></mx-reply>+1 to me. but not exactly the same","mimetype":"text/html"}]},"ts":1654704552372,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VL-JMSDYuouwGtsFnx6u2KB8Zd1dK7FJR0oAgkuCV14"},
{"content":{"body":"they may be different concrete classes but all of the same spec-internal protocol/contract","msgtype":"m.text","org.matrix.msc1767.text":"they may be different concrete classes but all of the same spec-internal protocol/contract"},"ts":1654704594488,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uSZvTjNaufuq8-HGuHZRtCft9mlZWORep-OK3yF8gsI"},
{"content":{"body":"do you agree Jack Works ?","format":"org.matrix.custom.html","formatted_body":"do you agree <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"do you agree Jack Works ?","mimetype":"text/plain"},{"body":"do you agree <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> ?","mimetype":"text/html"}]},"ts":1654704602869,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dklOyF_nWjJYYCeuKZsGiQQFsYrQ6AL209jbiAKWJaI"},
{"content":{"body":"yeah","msgtype":"m.text","org.matrix.msc1767.text":"yeah"},"ts":1654704618118,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5RRpjvjjIEhppmJh8wE0CsU-bywPTqsFidnyi6s0_QU"},
{"content":{"body":"I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this","msgtype":"m.text","org.matrix.msc1767.text":"I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this"},"ts":1654704651809,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rlKBEdfE5nVfh7cFAo7XvRogudsPj2se31Z7cVT3zGQ"},
{"content":{"body":"asset references seem really important on the web to enable prefetching!","msgtype":"m.text","org.matrix.msc1767.text":"asset references seem really important on the web to enable prefetching!"},"ts":1654704656461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$W18rvB2giyO08jnhKBFTK-VbBWD4awOOiQ8Aw_g8hRs"},
{"content":{"body":" * I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this","m.new_content":{"body":"I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this","msgtype":"m.text","org.matrix.msc1767.text":"I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this"},"m.relates_to":{"event_id":"$rlKBEdfE5nVfh7cFAo7XvRogudsPj2se31Z7cVT3zGQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I'm wondering, current presenting API (manually link module stuff) looks even much lower-level than compartment, what can devs benefits from this"},"ts":1654704684753,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-0Xmg7PhSv6hRKEIES7YmBEtiH5XldQt-qrXVEQ4-_U"},
{"content":{"body":"wait what do stage 2 reviewers do","msgtype":"m.text","org.matrix.msc1767.text":"wait what do stage 2 reviewers do"},"ts":1654704727634,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ufNHrA0FEfZUSacNlVNQhTDmTAhDC9EWFUVsBZvWPH8"},
{"content":{"body":"FYI we're planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals.","msgtype":"m.text","org.matrix.msc1767.text":"FYI we're planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals."},"ts":1654704731724,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$c-EufXi25E5gLNNbUBG5NJfP3-gbKtbBfjZae57OC1M"},
{"content":{"body":"we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff","msgtype":"m.text","org.matrix.msc1767.text":"we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff"},"ts":1654704775594,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY"},
{"content":{"body":"> <@jackworks:matrix.org> we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff\n\nyes and module blocks and WebAssembly.Module","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff</blockquote></mx-reply>yes and module blocks and WebAssembly.Module","m.relates_to":{"m.in_reply_to":{"event_id":"$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff\n\nyes and module blocks and WebAssembly.Module","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff</blockquote></mx-reply>yes and module blocks and WebAssembly.Module","mimetype":"text/html"}]},"ts":1654704793924,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ogceboxyMo9CfoPIMVPW5Z8ZaaRUJuvb_Q29mru0qcY"},
{"content":{"body":"asset references on JS modules can stand for things which may be dynamically imported later, and should maybe be prefetched","msgtype":"m.text","org.matrix.msc1767.text":"asset references on JS modules can stand for things which may be dynamically imported later, and should maybe be prefetched"},"ts":1654704874860,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YlZnxvBiim4FrsZpfYABx8pVey35nwif_p7KOz8PmI8"},
{"content":{"body":"passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do","msgtype":"m.text","org.matrix.msc1767.text":"passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do"},"ts":1654704927950,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I4EWQJFEp1mA9Tkyq-qPywMy2z6hkMbREO87PR7-17w"},
{"content":{"body":" * passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do","m.new_content":{"body":"passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do","msgtype":"m.text","org.matrix.msc1767.text":"passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do"},"m.relates_to":{"event_id":"$I4EWQJFEp1mA9Tkyq-qPywMy2z6hkMbREO87PR7-17w","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * passing in the dictionary of imports is something that both this proposal and compartments and the Wasm JS API have to do"},"ts":1654704939401,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CzvHPnu2x6Zd65rhUI886GlebxIABdz6By1yEtyF6XM"},
{"content":{"body":"> <@jackworks:matrix.org> we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff\n\nWe plan on doing a non-normative refactor of the spec to address that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff</blockquote></mx-reply>We plan on doing a non-normative refactor of the spec to address that","m.relates_to":{"m.in_reply_to":{"event_id":"$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff\n\nWe plan on doing a non-normative refactor of the spec to address that","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mshFu0s8tGulFGPDn3EOtHdEIy0ea3gFl1ZBB7CCajY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>we need a cross-proposal API for StaticModuleRecord/SourceTextModule stuff</blockquote></mx-reply>We plan on doing a non-normative refactor of the spec to address that","mimetype":"text/html"}]},"ts":1654705020960,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5AHWkVvoFUiFWlGqwBXbue7T7AOAPoYWyMyM_vDPV7k"},
{"content":{"body":"I read this comment referring to a JS-exposed API","msgtype":"m.text","org.matrix.msc1767.text":"I read this comment referring to a JS-exposed API"},"ts":1654705079812,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-yj9CaGk8SftVjSrvq7xjpSwZYg3esvSdV4s9PL5tBc"},
{"content":{"body":"Right, but as a first step, we need a definition of what it would be we're exposing. The spec currently conflates the static and instance bits of a module","msgtype":"m.text","org.matrix.msc1767.text":"Right, but as a first step, we need a definition of what it would be we're exposing. The spec currently conflates the static and instance bits of a module"},"ts":1654705121139,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ISlBunn68na5mWDbLhW7I6YOavan-VhSx9ZdE1omd2k"},
{"content":{"body":"> <@mhofman:matrix.org> We plan on doing a non-normative refactor of the spec to address that\n\nIn the ecma262 directly?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5AHWkVvoFUiFWlGqwBXbue7T7AOAPoYWyMyM_vDPV7k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>We plan on doing a non-normative refactor of the spec to address that</blockquote></mx-reply>In the ecma262 directly?","m.relates_to":{"m.in_reply_to":{"event_id":"$5AHWkVvoFUiFWlGqwBXbue7T7AOAPoYWyMyM_vDPV7k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> We plan on doing a non-normative refactor of the spec to address that\n\nIn the ecma262 directly?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5AHWkVvoFUiFWlGqwBXbue7T7AOAPoYWyMyM_vDPV7k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>We plan on doing a non-normative refactor of the spec to address that</blockquote></mx-reply>In the ecma262 directly?","mimetype":"text/html"}]},"ts":1654705125883,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qsiEIDvctpqUctF78aJBn6zjL59XX1cf_bO2VRzTjto"},
{"content":{"body":"> <@mhofman:matrix.org> Right, but as a first step, we need a definition of what it would be we're exposing. The spec currently conflates the static and instance bits of a module\n\nAh, yes, good point, that refactoring would be great","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ISlBunn68na5mWDbLhW7I6YOavan-VhSx9ZdE1omd2k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right, but as a first step, we need a definition of what it would be we&#39;re exposing. The spec currently conflates the static and instance bits of a module</blockquote></mx-reply>Ah, yes, good point, that refactoring would be great","m.relates_to":{"m.in_reply_to":{"event_id":"$ISlBunn68na5mWDbLhW7I6YOavan-VhSx9ZdE1omd2k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Right, but as a first step, we need a definition of what it would be we're exposing. The spec currently conflates the static and instance bits of a module\n\nAh, yes, good point, that refactoring would be great","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ISlBunn68na5mWDbLhW7I6YOavan-VhSx9ZdE1omd2k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right, but as a first step, we need a definition of what it would be we&#39;re exposing. The spec currently conflates the static and instance bits of a module</blockquote></mx-reply>Ah, yes, good point, that refactoring would be great","mimetype":"text/html"}]},"ts":1654705136736,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gsxLBunVHLEZ3aZPnrNTgbg_Q7fLnVhttlaCVI5gu5Y"},
{"content":{"body":"such a messy part of the spec too!","msgtype":"m.text","org.matrix.msc1767.text":"such a messy part of the spec too!"},"ts":1654705144270,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X3SkfTnNRGQQC5sMBJXC3Cw5oWfUg9rbTAC39ICVY9Q"},
{"content":{"body":"it should be much more readable then","msgtype":"m.text","org.matrix.msc1767.text":"it should be much more readable then"},"ts":1654705154972,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9ESYVQ3icFs5dU07gSEcUmSzbg4f4tbAcvX3GGaION4"},
{"content":{"body":"let me rejoin","msgtype":"m.text","org.matrix.msc1767.text":"let me rejoin"},"ts":1654705208390,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XRFGHWXESs7DkNW4WNnNs_KNAOMeUFL1pZbT6BEAuzQ"},
{"content":{"body":"> <@mhofman:matrix.org> (if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)\n\nhttps://github.com/tc39/proposal-compartments/pull/46","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xyNOYVPnHBkq3f-Jb3vgzPiSt8PM9pn6ugRcjQ5H1s4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>(if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)</blockquote></mx-reply>https://github.com/tc39/proposal-compartments/pull/46","m.relates_to":{"m.in_reply_to":{"event_id":"$xyNOYVPnHBkq3f-Jb3vgzPiSt8PM9pn6ugRcjQ5H1s4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> (if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)\n\nhttps://github.com/tc39/proposal-compartments/pull/46","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xyNOYVPnHBkq3f-Jb3vgzPiSt8PM9pn6ugRcjQ5H1s4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>(if anyone looking at the Compartment proposal, there is an open PR to drastically update / simplify it)</blockquote></mx-reply>https://github.com/tc39/proposal-compartments/pull/46","mimetype":"text/html"}]},"ts":1654705301574,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5OJ-y3-OQN8WGpkVySu--1eZ-zoIdvMC82Yaa-Sgess"},
{"content":{"body":"Should we start a discussion group to talk about module loading? Seems like there's a lot going on.","msgtype":"m.text","org.matrix.msc1767.text":"Should we start a discussion group to talk about module loading? Seems like there's a lot going on."},"ts":1654705325279,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OIankB2VtUURk9usElWEoEXIz_zE4OcHJEtlR85qGOo"},
{"content":{"body":"> <@mhofman:matrix.org> FYI we're planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals.\n\nAgenda for June 22 https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c-EufXi25E5gLNNbUBG5NJfP3-gbKtbBfjZae57OC1M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>FYI we&#39;re planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals.</blockquote></mx-reply>Agenda for June 22 https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#","m.relates_to":{"m.in_reply_to":{"event_id":"$c-EufXi25E5gLNNbUBG5NJfP3-gbKtbBfjZae57OC1M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> FYI we're planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals.\n\nAgenda for June 22 https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c-EufXi25E5gLNNbUBG5NJfP3-gbKtbBfjZae57OC1M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>FYI we&#39;re planning to have Luca and Guy over in the SES meeting on 06/22 to chat about overlap between these proposals.</blockquote></mx-reply>Agenda for June 22 https://docs.google.com/document/d/1FZ95-NZIQE9fw3A8Sgcz2BKep6MlC_Kng0dlf1ehabQ/edit#","mimetype":"text/html"}]},"ts":1654705351636,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-TXPCxyNInKart5Yh5e5I1YCPEpoM2ljwQ0QOI2nH9A"},
{"content":{"body":"maybe a good idea to do an incubation call on?","msgtype":"m.text","org.matrix.msc1767.text":"maybe a good idea to do an incubation call on?"},"ts":1654705356559,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ImDKg6w3qO28P4ymYT520uin7AAO-hACkItQlBKUNhI"},
{"content":{"body":"I think we're beyond that and should have like a weekly discussion (maybe this should just be the SES call)","msgtype":"m.text","org.matrix.msc1767.text":"I think we're beyond that and should have like a weekly discussion (maybe this should just be the SES call)"},"ts":1654705377170,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-CXCKu1IzKgCUMVzk71eZIPuTpCWwOSEOSSWypQ45qU"},
{"content":{"body":" * maybe a good idea to do an incubation call on?","m.new_content":{"body":"maybe a good idea to do an incubation call on?","msgtype":"m.text","org.matrix.msc1767.text":"maybe a good idea to do an incubation call on?"},"m.relates_to":{"event_id":"$ImDKg6w3qO28P4ymYT520uin7AAO-hACkItQlBKUNhI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * maybe a good idea to do an incubation call on?"},"ts":1654705379434,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$9PjasM7-I1Uzl5OCgtOZsv7ZyeOvgNf-c8CI_9e19TY"},
{"content":{"body":"ah, fair","msgtype":"m.text","org.matrix.msc1767.text":"ah, fair"},"ts":1654705387467,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$g8M3TePnMXKt34ymwfdLGcgDqClM_4kIXriYANHAPv8"},
{"content":{"body":"I’m reserving the weekly SES Strategy call for module loading topics through July plenary and all interested parties are welcome.","msgtype":"m.text","org.matrix.msc1767.text":"I’m reserving the weekly SES Strategy call for module loading topics through July plenary and all interested parties are welcome."},"ts":1654705510006,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7F5N1pK4SlwM_ees_3efWbH4I0ZQvwGVkNLxReVxSlQ"},
{"content":{"body":"I wondering why yulia and shu give support 👀 I though from the engine perspective, they don't want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side","msgtype":"m.text","org.matrix.msc1767.text":"I wondering why yulia and shu give support 👀 I though from the engine perspective, they don't want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side"},"ts":1654705609354,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XsDeLDqFA2zSJ_tjIWZdCan1POG7m-yUV4QqjQKBWoM"},
{"content":{"body":"was a link to these slides shared at some point?","msgtype":"m.text","org.matrix.msc1767.text":"was a link to these slides shared at some point?"},"ts":1654705643040,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$QUYAyfRv-E1L7uWs0aWctkAmJ_c991zqff78lSgA2c0"},
{"content":{"body":"Still stays TBD in agenda","msgtype":"m.text","org.matrix.msc1767.text":"Still stays TBD in agenda"},"ts":1654705667314,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cL0crF4zxSR3CaQ3TLHVYcldfqoq-VHygtoHtYMqs2w"},
{"content":{"body":"> <@jackworks:matrix.org> I wondering why yulia and shu give support 👀 I though from the engine perspective, they don't want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side\n\nI am supporting because it makes deferred module evaluation much easier, and is also necessary for WASM","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XsDeLDqFA2zSJ_tjIWZdCan1POG7m-yUV4QqjQKBWoM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I wondering why yulia and shu give support 👀 I though from the engine perspective, they don&#39;t want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side</blockquote></mx-reply>I am supporting because it makes deferred module evaluation much easier, and is also necessary for WASM","m.relates_to":{"m.in_reply_to":{"event_id":"$XsDeLDqFA2zSJ_tjIWZdCan1POG7m-yUV4QqjQKBWoM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> I wondering why yulia and shu give support 👀 I though from the engine perspective, they don't want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side\n\nI am supporting because it makes deferred module evaluation much easier, and is also necessary for WASM","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XsDeLDqFA2zSJ_tjIWZdCan1POG7m-yUV4QqjQKBWoM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I wondering why yulia and shu give support 👀 I though from the engine perspective, they don&#39;t want to reify the low level mechanism because it blocks the optimization but why this proposal has support from engine side</blockquote></mx-reply>I am supporting because it makes deferred module evaluation much easier, and is also necessary for WASM","mimetype":"text/html"}]},"ts":1654705677278,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5_vSuIFsf0H5N-vTS-U955aeG-B535RAKrVC1K3my04"},
{"content":{"body":"Jack Works: not sure what optimizations you had in mind there. i'm in support in that the use cases are very important","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: not sure what optimizations you had in mind there. i'm in support in that the use cases are very important","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: not sure what optimizations you had in mind there. i'm in support in that the use cases are very important","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: not sure what optimizations you had in mind there. i'm in support in that the use cases are very important","mimetype":"text/html"}]},"ts":1654705685670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oFDkbBsZWxYtX6hp6kCxHc8elhLjTEGvqXfY4DTvXcw"},
{"content":{"body":"yeah, I just double-checked there. Wondering if they sent it someplace else, but probably not.","msgtype":"m.text","org.matrix.msc1767.text":"yeah, I just double-checked there. Wondering if they sent it someplace else, but probably not."},"ts":1654705688899,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$k8jhSbvyV6qNADE7-XiF0ERDuDKeY_O8Z81zlVocf3U"},
{"content":{"body":"I have some concern, i had a counter proposal to my deferred module evaluation that looked like this","msgtype":"m.text","org.matrix.msc1767.text":"I have some concern, i had a counter proposal to my deferred module evaluation that looked like this"},"ts":1654705694237,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2y0x2KSYOrO8eLjg1yMvtQNK6dBXt-65xbAFzSjAXlk"},
{"content":{"body":"but exposing the module loader API may be error prone","msgtype":"m.text","org.matrix.msc1767.text":"but exposing the module loader API may be error prone"},"ts":1654705704222,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mxDta1pAcGRAQIO2kjchguGtr_TrFAOQQRvB-DqKEWo"},
{"content":{"body":"in general i'm against exposing low-level hooks that can fundamentally change assumptions of how certain mechanisms should work, like loading and linking","msgtype":"m.text","org.matrix.msc1767.text":"in general i'm against exposing low-level hooks that can fundamentally change assumptions of how certain mechanisms should work, like loading and linking"},"ts":1654705717951,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NaUmCDUexIMSfdhP7idMJZTUQk5olKsp8LErWWKT4aM"},
{"content":{"body":"this is what held me back, but its interesting to see this get a positive response from the committee","msgtype":"m.text","org.matrix.msc1767.text":"this is what held me back, but its interesting to see this get a positive response from the committee"},"ts":1654705718047,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RQmHV8-b6SNi_Otrke_H1F_93zbTKPf62G_D8GL3K9I"},
{"content":{"body":"well, apparently the Wasm JS API, which gives you control over imports, was OK","msgtype":"m.text","org.matrix.msc1767.text":"well, apparently the Wasm JS API, which gives you control over imports, was OK"},"ts":1654705791221,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7cAYVTNlFr_NCL-H9EsZDj3wa_9TNaA8uraxxzvHZYE"},
{"content":{"body":"but also yeah, +1 to yulia, it's not that i have no concerns around the API part of this proposal, but guy has repeatedly said their proposal is just about the \"mechanic of reflection\"","msgtype":"m.text","org.matrix.msc1767.text":"but also yeah, +1 to yulia, it's not that i have no concerns around the API part of this proposal, but guy has repeatedly said their proposal is just about the \"mechanic of reflection\""},"ts":1654705802549,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GSC3QnD_j_W38K4_XSUWoDmRJcr6yla1FiuY8ndZZ8k"},
{"content":{"body":"so i took that to mean the API parts are exploratory, needed to be unified with other proposals, etc","msgtype":"m.text","org.matrix.msc1767.text":"so i took that to mean the API parts are exploratory, needed to be unified with other proposals, etc"},"ts":1654705818006,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8a7vLLIJ92fXDcjmxJMSiwG3hI_tLrbL8IeVJSMmdd0"},
{"content":{"body":"The compartments proposal don’t leave `link` or module instance creation to the user and loses no expressivity, for what it’s worth.","format":"org.matrix.custom.html","formatted_body":"The compartments proposal don’t leave <code>link</code> or module instance creation to the user and loses no expressivity, for what it’s worth.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The compartments proposal don’t leave `link` or module instance creation to the user and loses no expressivity, for what it’s worth.","mimetype":"text/plain"},{"body":"The compartments proposal don’t leave <code>link</code> or module instance creation to the user and loses no expressivity, for what it’s worth.","mimetype":"text/html"}]},"ts":1654705847366,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BBVWNeUZmj5u41_iCvGkzd1ron3Mb_dnbJdagJPhj-s"},
{"content":{"body":"sounds like discussions to me, unless you're saying the compartments design is now set in stone?","msgtype":"m.text","org.matrix.msc1767.text":"sounds like discussions to me, unless you're saying the compartments design is now set in stone?"},"ts":1654705892004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p-VZnx6rPE8nL6XAj9oG_DAO9mT02CRXkOroHssrsnk"},
{"content":{"body":"And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module.","msgtype":"m.text","org.matrix.msc1767.text":"And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module."},"ts":1654705909186,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YKcgHz3UXbmVBp4H0lNPZU2e-jP58j0np-rq6N-oiQ4"},
{"content":{"body":"Discussions for sure!","msgtype":"m.text","org.matrix.msc1767.text":"Discussions for sure!"},"ts":1654705920392,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$o1DyC7c12QJMz0fenyR97XCCUWThBAcVkOE9jbIC_mo"},
{"content":{"body":"It’s set in stage 1 which leaves a great deal of mutability.","msgtype":"m.text","org.matrix.msc1767.text":"It’s set in stage 1 which leaves a great deal of mutability."},"ts":1654705951060,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rcn8vVp-qIconJ0_SHq253S4NQZ3-Q3p5J2NRhoMb4k"},
{"content":{"body":" * And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module.","m.new_content":{"body":"And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module.","msgtype":"m.text","org.matrix.msc1767.text":"And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module."},"m.relates_to":{"event_id":"$YKcgHz3UXbmVBp4H0lNPZU2e-jP58j0np-rq6N-oiQ4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * And in turn, answers the question about threading the global environment record and compartment-scoped evaluators, compartment-scoped dynamic import, to the execution of the module."},"ts":1654705982704,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$F-wWHRbXe5Usze-EadUZmq-gPblyhRKTWVNLOkUmv20"},
{"content":{"body":"Justin Ridgewell:  re your queue item, because reflection things aren't assertions about the module, and because there's value in keeping assertions and reflections separate","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>:  re your queue item, because reflection things aren't assertions about the module, and because there's value in keeping assertions and reflections separate","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell:  re your queue item, because reflection things aren't assertions about the module, and because there's value in keeping assertions and reflections separate","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>:  re your queue item, because reflection things aren't assertions about the module, and because there's value in keeping assertions and reflections separate","mimetype":"text/html"}]},"ts":1654706066193,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fEZ8WQbWmno4b1JU7j-_x55FbuQc_fujVGnWTw8meq8"},
{"content":{"body":"I think there's only complication for users.","msgtype":"m.text","org.matrix.msc1767.text":"I think there's only complication for users."},"ts":1654706095319,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WDQlBhiVBeOymlQtbyx9ibrBL-4z-Ml3JL5PmfOKU00"}
]