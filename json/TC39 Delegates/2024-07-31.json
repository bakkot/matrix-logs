[
{"content":{"body":"isn't \"barely used\" an argument against the demand of decimals? i'm confused","m.mentions":{},"msgtype":"m.text"},"ts":1722447270974,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rPAbBH_WlJmD9xYqvAfLrU90D9mOH8DwO9CZr5AJopw"},
{"content":{"body":"the database driver needs to support decimals, but then not all clients use it","m.mentions":{},"msgtype":"m.text"},"ts":1722447302393,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TWwXqu_rk7N6EJ_0YXaWS0W8muEnQkUaL0va0vHyHTk"},
{"content":{"body":"tbf i think in that context it's that the one library barely uses them and has to bear the cost of an impl for everyone","m.mentions":{},"msgtype":"m.text"},"ts":1722447311760,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MJ8n7oOIz1KfLwQgbc00En61C3L0N6mmOHzZFnDii8g"},
{"content":{"body":"who is the one bearing the cost there? the package size?","m.mentions":{},"msgtype":"m.text"},"ts":1722447381042,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$H8B_5OLQuI1YbLuTkGOxCRO_SzHr0_cXhqKXKIyYt6s"},
{"content":{"body":"there's package size, there's friction if you do use decimals and integrate with another library that happened to choose a different decimal type","m.mentions":{},"msgtype":"m.text"},"ts":1722447419517,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eAEM0xHdv0V8Lt3DBSw6A3QCjLbwDIwFOr5VgOmUtuo"},
{"content":{"body":"there's a conservative way through, which is to make your own wrapper around strings that doesn't have any functionality and holds a decimal but makes it so that it doesn't randomly get cast to a number. That doesn't take much package size, but it's even more frustrating to use, and might not be so broadly adopted. We use this strategy in some parts of Bloomberg.","m.mentions":{},"msgtype":"m.text"},"ts":1722447517317,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y5ZfqouxA0J1Gh0XBAZlACAbM4Ow9oIwyxpc6etm-9U"},
{"content":{"body":"string is the best solution for interop today, for sure. and it could be worse: “decimables”.","m.mentions":{},"msgtype":"m.text"},"ts":1722447623851,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Kmk8YWPUC7Kkaqvnat9f_Vu25wbdITtxV6ZJepmrypU"},
{"content":{"body":"or all the decimal libraries could introduce a global symbol protocol to coordinate with.","m.mentions":{},"msgtype":"m.text"},"ts":1722447668652,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZFGZycsLmd2Xsq7_bI0sUgwJeSCiCFxixaRG_ZKLbEs"},
{"content":{"body":"ljharb: I believe \"qunatum\" as a name is spec-internal and not exposed to JS devs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I believe \"qunatum\" as a name is spec-internal and not exposed to JS devs","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1722447671083,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$D3aBAeSSze9k08Yy3wRennBv5VarBvvRwtuBaF0HCc8"},
{"content":{"body":"will we allow decimables on Object.prototype","m.mentions":{},"msgtype":"m.text"},"ts":1722447672830,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FfvCIkPkn-I7q_QYWuTloJzDdhrw05HXeH263a502GM"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> ljharb: I believe \"qunatum\" as a name is spec-internal and not exposed to JS devs\n\nthat's good :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$D3aBAeSSze9k08Yy3wRennBv5VarBvvRwtuBaF0HCc8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I believe \"qunatum\" as a name is spec-internal and not exposed to JS devs</blockquote></mx-reply>that's good :-)","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D3aBAeSSze9k08Yy3wRennBv5VarBvvRwtuBaF0HCc8"}},"msgtype":"m.text"},"ts":1722447682230,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$36CQELDN-owtQHhmoayemD-t_PbmfAGmpAlMXXkKLWA"},
{"content":{"body":"The exposed name is \"precision\"","m.mentions":{},"msgtype":"m.text"},"ts":1722447706755,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DpJfdQyBFNyITeE6deKXb3RqQ3Ka66VKmubRMvuDwXs"},
{"content":{"body":"> <@kriskowal:aelf.land> string is the best solution for interop today, for sure. and it could be worse: “decimables”.\n\nthe problem with string is all the places in the language where it \"just works\" as a Number. It's a dangerous choice, hence the annoying wrapper (if you can get people to use it)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Kmk8YWPUC7Kkaqvnat9f_Vu25wbdITtxV6ZJepmrypU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>string is the best solution for interop today, for sure. and it could be worse: “decimables”.</blockquote></mx-reply>the problem with string is all the places in the language where it \"just works\" as a Number. It's a dangerous choice, hence the annoying wrapper (if you can get people to use it)","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Kmk8YWPUC7Kkaqvnat9f_Vu25wbdITtxV6ZJepmrypU"}},"msgtype":"m.text"},"ts":1722447714610,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q2jO6p1I4MxPyKq2KBWmwCWDimCeoXOmceUrfOHnLfg"},
{"content":{"body":"I'll be stepping out in ~5 minutes, so we may need another person in on the notes","m.mentions":{},"msgtype":"m.text"},"ts":1722448176392,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$_GCblqk7s71zMGZObAMnuq2swVFkY8xnOExhHy4VSm8"},
{"content":{"body":"https://github.com/MikeMcl/big.js/issues/45#issuecomment-104211175","m.mentions":{},"msgtype":"m.text"},"ts":1722448628195,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$brx4PCf0PyGhLwVEVohMLFoeG8x0SqMUkh3d9SXiRqw"},
{"content":{"body":"> <@benallen:igalia.com> I'll be stepping out in ~5 minutes, so we may need another person in on the notes\n\nstepping out!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_GCblqk7s71zMGZObAMnuq2swVFkY8xnOExhHy4VSm8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benallen:igalia.com\">@benallen:igalia.com</a><br>I&#39;ll be stepping out in ~5 minutes, so we may need another person in on the notes</blockquote></mx-reply>stepping out!","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$_GCblqk7s71zMGZObAMnuq2swVFkY8xnOExhHy4VSm8"}},"msgtype":"m.text"},"ts":1722448681616,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$u3VyCNe-nZdxhHkAG7i7TcWZQ_mfywX8LACF7Tr7umE"},
{"content":{"body":"I can help with the notes","m.mentions":{},"msgtype":"m.text"},"ts":1722448704120,"senderName":"Rezvan","senderId":"@rmahdav:matrix.org","id":"$e4p5BI1qRX412xChKYmehDoIBV46eBJjhvkC3og2w0c"},
{"content":{"body":"> <@rmahdav:matrix.org> I can help with the notes\n\nThanks a lot!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e4p5BI1qRX412xChKYmehDoIBV46eBJjhvkC3og2w0c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rmahdav:matrix.org\">@rmahdav:matrix.org</a><br>I can help with the notes</blockquote></mx-reply>Thanks a lot!","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e4p5BI1qRX412xChKYmehDoIBV46eBJjhvkC3og2w0c"}},"msgtype":"m.text"},"ts":1722448714966,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$y4hN_Hko6rGFeWusfB4n60Jc86bDBfjFU3ufgorHxFI"},
{"content":{"body":"there's a lack of decimal in languages?","m.mentions":{},"msgtype":"m.text"},"ts":1722449214626,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$BN4yzgfny78Aij6PT3U0l5wld1ByZgFCfm6vRrsct5M"},
{"content":{"body":" * there's a lack of decimal in many languages?","m.mentions":{},"m.new_content":{"body":"there's a lack of decimal in many languages?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BN4yzgfny78Aij6PT3U0l5wld1ByZgFCfm6vRrsct5M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722449252739,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$0BOy5cZQv2Fu3aJkhjQVk6NDPwY-JSyLgQTr8Fbh7bI"},
{"content":{"body":"i think the only ones that really lack it are ones where its possible to write high performance stand-ins ","m.mentions":{},"msgtype":"m.text"},"ts":1722449399672,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UHYphPl737VcD6qodkw3tVmbD0fyNV8zD4IdMTNqfDA"},
{"content":{"body":"e.g. c and rust, I presume","m.mentions":{},"msgtype":"m.text"},"ts":1722449455190,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$xv3WJ7PuMiqt6-zWr80jMoOEdBlu4FwvdfqdGdJ2kqY"},
{"content":{"body":"php?","m.mentions":{},"msgtype":"m.text"},"ts":1722449491647,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0IKt9dcEhsy1jke5KRJWMOcj-WHp5Nb5uNLW6fxv_wI"},
{"content":{"body":"php has `bcmath`","format":"org.matrix.custom.html","formatted_body":"php has <code>bcmath</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722449543648,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$kl9YE5kjQW787hRsTV9LTdA4jyasWQjXlK0eRgEoNiQ"},
{"content":{"body":"similar to python where it's not technically built in, but has a standard lib","m.mentions":{},"msgtype":"m.text"},"ts":1722449552957,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$RbCbD-Ohys1jKRdXWv9h3XM0Vpj1LIrmcJsQjfnwD4s"},
{"content":{"body":"bcmath is compiled in all the time, right?","m.mentions":{},"msgtype":"m.text"},"ts":1722449606047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$incukjtNK7a8bNdO68zNJZZ8pw8XGFwgwA-5BawJnIA"},
{"content":{"body":"> <@softwarechris:matrix.org> there's a lack of decimal in many languages?\n\na primitive decimal, yes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BN4yzgfny78Aij6PT3U0l5wld1ByZgFCfm6vRrsct5M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>there&#39;s a lack of decimal in many languages?</blockquote></mx-reply>a primitive decimal, yes","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BN4yzgfny78Aij6PT3U0l5wld1ByZgFCfm6vRrsct5M"}},"msgtype":"m.text"},"ts":1722449614963,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yojf1Uazyj31-xi6QE2MT3s5ZaqZLr1pVeVER7pX100"},
{"content":{"body":"I think of PHP and Python as languages with built-in decimal","m.mentions":{},"msgtype":"m.text"},"ts":1722449618107,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ynBDLT_visTn1PrkO39YN0Ug53qf-augS21MxHLh9cA"},
{"content":{"body":"> <@littledan:matrix.org> bcmath is compiled in all the time, right?\n\nyou have to enable the extension.. so.. maybe?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$incukjtNK7a8bNdO68zNJZZ8pw8XGFwgwA-5BawJnIA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>bcmath is compiled in all the time, right?</blockquote></mx-reply>you have to enable the extension.. so.. maybe?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$incukjtNK7a8bNdO68zNJZZ8pw8XGFwgwA-5BawJnIA"}},"msgtype":"m.text"},"ts":1722449629492,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_nSlsouqpl7FjgXxSXfXYbVEC_GeqWc8QviZs0YfYUk"},
{"content":{"body":"standard libraries, less so, but JS doesn't have the same kind of stdlib culture that other languages do","m.mentions":{},"msgtype":"m.text"},"ts":1722449636222,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MLlQWy8Khe4iavBExIG79d93podw0xiEI6sKtvM-PFs"},
{"content":{"body":"> <@shuyuguo:matrix.org> standard libraries, less so, but JS doesn't have the same kind of stdlib culture that other languages do\n\nit's true that we don't have built-in decimal. what does that say about what we *should* do?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MLlQWy8Khe4iavBExIG79d93podw0xiEI6sKtvM-PFs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>standard libraries, less so, but JS doesn&#39;t have the same kind of stdlib culture that other languages do</blockquote></mx-reply>it's true that we don't have built-in decimal. what does that say about what we <em>should</em> do?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MLlQWy8Khe4iavBExIG79d93podw0xiEI6sKtvM-PFs"}},"msgtype":"m.text"},"ts":1722449665678,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IYa9WH24rriT5lrD2X6BHiIEtdsFdG-fiXxSz_jDRdQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> standard libraries, less so, but JS doesn't have the same kind of stdlib culture that other languages do\n\na common criticism, to be fair","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MLlQWy8Khe4iavBExIG79d93podw0xiEI6sKtvM-PFs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>standard libraries, less so, but JS doesn&#39;t have the same kind of stdlib culture that other languages do</blockquote></mx-reply>a common criticism, to be fair","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MLlQWy8Khe4iavBExIG79d93podw0xiEI6sKtvM-PFs"}},"msgtype":"m.text"},"ts":1722449694643,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GwV5SUTrZo-gz4tabsnAGTFSf5L8TRtpgoUAqTmle64"},
{"content":{"body":"yeah, we could take the decision as the committee to not try to build out a standard library, but I think it's quite a useful direction we've been going in, with things like Object.groupBy and Temporal","m.mentions":{},"msgtype":"m.text"},"ts":1722449725298,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YbiTP8RS_fKuXyy8n6twsmCQ8tC0XaIBhmE2t_CwLkQ"},
{"content":{"body":"that says to me that the collective demand of a built-in decimals is not high, given that an interchange format standard (IEEE) exists and libraries can all do that","m.mentions":{},"msgtype":"m.text"},"ts":1722449730232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F8JndlH3KNGbmaK9lZ40X5wYfoEDMTTQGZYLYrJUlBs"},
{"content":{"body":"oh sorry i responded to the wrong thing","m.mentions":{},"msgtype":"m.text"},"ts":1722449761737,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xDe12WJOWkhcwiDQw8EK4ViVpADxYTVBYhvokKTAcB4"},
{"content":{"body":"the lack of a JS stdlib culture like other languages says to me that we are prioritizing stdlib things against core expressivity things, while they are different workstreams, but if i am forced to choose, i am just not going to prioritize stdlib things","m.mentions":{},"msgtype":"m.text"},"ts":1722449817826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6XuyKDetltw39muFCom-trfrWLH0dKrmF8VN1A80-kM"},
{"content":{"body":"ljharb: your position IIRC was that this isn't worth it without syntax or primitives. you've been convinced since then?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: your position IIRC was that this isn't worth it without syntax or primitives. you've been convinced since then?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1722449934873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J6STE0gb6LTGSc5Y0PqTxIm6aC1km6zNboxd126l2I0"},
{"content":{"body":"i have not, no","m.mentions":{},"msgtype":"m.text"},"ts":1722449942565,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hB5-BiYig76hMOK8FD8VKrjug0t0y0VyJ7Ge_RbZz_w"},
{"content":{"body":"ah","m.mentions":{},"msgtype":"m.text"},"ts":1722449957119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fngmp2L2MQD0ec5EIWM-kYoQlgZUpc1Lr7AAc7Ka17E"},
{"content":{"body":"yes let's use the 15 minutes after lunch","m.mentions":{},"msgtype":"m.text"},"ts":1722450515290,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ATGhiNd85h5_NvFMXwFcAtB3EVh32hR2N19RPVJQMy0"},
{"content":{"body":"Does this discussion need to happen in committee?","m.mentions":{},"msgtype":"m.text"},"ts":1722450566618,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$DhjU6m3f7H5xpIB0klyNs1Q0qShER69ce3wFB5kxLH8"},
{"content":{"body":"It sounds like it could happen offline, when more time is available.","m.mentions":{},"msgtype":"m.text"},"ts":1722450585632,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$Sr3QKSgtrOuk4wdAMwhcMkmsdcSb4-hXYA_KxbO_4D8"},
{"content":{"body":"i often butt heads with jordan but i feel like i heard his reasons? you can disagree with the reasons but he stated them -- it's the same door closing one","m.mentions":{},"msgtype":"m.text"},"ts":1722450587247,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RpAFGMARafE1YOklO2FsKNPHAQmP3Bk6RfYFS7zxbdg"},
{"content":{"body":"you have tried to counterargue the door closing concern by showing a _technically_ way to thread the needle","format":"org.matrix.custom.html","formatted_body":"you have tried to counterargue the door closing concern by showing a <em>technically</em> way to thread the needle","m.mentions":{},"msgtype":"m.text"},"ts":1722450621322,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IHTSyZzwz_hydlc_wBlpBckt_datCuYi3TOBapnrlng"},
{"content":{"body":"We have tried to have this conversation over time. Sorry that I didn't reach out before this week, but I think Jesse did try to discuss this week with Jordan","m.mentions":{},"msgtype":"m.text"},"ts":1722450643131,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cUuBgUl3g2uhLYrtOeW_JGyCw0vP8eY3OzestJ72Ct0"},
{"content":{"body":"and while some of that concern is about technical decisions, what jordan said was the ecosystem / adoption patterns / \"sucking the wind out of it\" kind of thing","m.mentions":{},"msgtype":"m.text"},"ts":1722450644308,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$knzYbaVFZ_BrpY6ycBSo-JqoxuBuoQGp2GozBo_pMvU"},
{"content":{"body":"I think Jordan was detailed last time -- I don't know what more you are looking for","m.mentions":{},"msgtype":"m.text"},"ts":1722450654777,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HeFaQKChCC2EFiPOY0wCWbrPzwVf73OeL5Xoz-SC170"},
{"content":{"body":"There were a bunch of particular points that he made which have very general implications for TC39, and I would like to discuss them with the group. For example, Jordan said he'd like a universal numeric type which just works for everything. I think we have concrete reasons why this doesn't make sense and can never happen. Jordan also made a lot of statements about what does and doesn't make sense for our standard library. We should think about how this relates to our work in general.","m.mentions":{},"msgtype":"m.text"},"ts":1722450705000,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fec4fdYhkJGVaIsxvISO6lM4eRBVzkE9XR-eaz2_R4M"},
{"content":{"body":"it's great to consider my, and anyone's general thoughts on the language, like we did with those \"vision talks\"","m.mentions":{},"msgtype":"m.text"},"ts":1722450737034,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LVnZ5j_h0q14cVic3XutW4NcbjM4wL4G_5vhpHjmVOA"},
{"content":{"body":"Overall, it seems like Jordan is doing this in a way of \"negotiating\" with browsers to get operator overloading eventually. If browsers are present, we could engage more directly with that, and characterize what could be possible in the future. We didn't hear from browsers about that.","m.mentions":{},"msgtype":"m.text"},"ts":1722450741085,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1K0hzbn_B29DGqFVxPMe2WrmA7dmUAttUJc90iUAt0g"},
{"content":{"body":"I really think this discussion needs to happen at least partly in plenary, and I don't believe it makes sense for the committee to sign onto the limitations that this block implies","m.mentions":{},"msgtype":"m.text"},"ts":1722450774466,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L47_4Xqj7IG3ihBXKGQwYgRYUuqmFbohR1rN5Bz5bhw"},
{"content":{"body":"I recall at least one browser rep saying that they could be convinced to add a new primitive, but that they were not convinced heretofore","m.mentions":{},"msgtype":"m.text"},"ts":1722450798414,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$h6Ki5LIFNqGbQmLwlBU-jjQLE7w7zWdXvNnCVG7kMbM"},
{"content":{"body":"(i'm not trying to \"negotiate\" but) \"operator overloading\" to me is a term about userland objects; i want decimals as a new primitive (which has operator-specific behavior)","m.mentions":{},"msgtype":"m.text"},"ts":1722450820027,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tAk9TE-KP0eBEmRjhmR4Napv_FD693zHIOQLE8nceFE"},
{"content":{"body":"> <@ljharb:matrix.org> (i'm not trying to \"negotiate\" but) \"operator overloading\" to me is a term about userland objects; i want decimals as a new primitive (which has operator-specific behavior)\n\nsure but this was also blocked","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tAk9TE-KP0eBEmRjhmR4Napv_FD693zHIOQLE8nceFE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(i&#39;m not trying to &quot;negotiate&quot; but) &quot;operator overloading&quot; to me is a term about userland objects; i want decimals as a new primitive (which has operator-specific behavior)</blockquote></mx-reply>sure but this was also blocked","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tAk9TE-KP0eBEmRjhmR4Napv_FD693zHIOQLE8nceFE"}},"msgtype":"m.text"},"ts":1722450836263,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aVF4V_5_LKR6EMgVAqINcrfHG8c_N5o8dqmTtxhfJZ0"},
{"content":{"body":"so far that is true","m.mentions":{},"msgtype":"m.text"},"ts":1722450846726,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MSRR-UwovxBRaD__mCZtuUomBW30kBs7BNg6A4Fcnuo"},
{"content":{"body":"but if a block means we should permanently give up on a direction then a lot of proposals wouldn't exist or have existed","m.mentions":{},"msgtype":"m.text"},"ts":1722450864988,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rYPNS9SjzZGP0Ht2IldWrx1tCEYyTFrdPsgRH_VU6ZY"},
{"content":{"body":"Our perspective is not \"no new primitives\" but that there is a very high bar for adding new primitives, and we are unconvinced that Decimal meets that bar.","m.mentions":{},"msgtype":"m.text"},"ts":1722450873285,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$QMu9vNQN2eYL9Jvps9bIo-XPJCwrxVs68vA0uqLjMu8"},
{"content":{"body":"to restate, i think it's far more important for JS to avoid eternal mistakes than to make progress for progress' sake, and it is *ok* - if not extremely desirable - to have \"nothing\" rather than \"the wrong thing\"","format":"org.matrix.custom.html","formatted_body":"to restate, i think it's far more important for JS to avoid eternal mistakes than to make progress for progress' sake, and it is <em>ok</em> - if not extremely desirable - to have \"nothing\" rather than \"the wrong thing\"","m.mentions":{},"msgtype":"m.text"},"ts":1722450918519,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$51L_q6mX6AmDRgfFqcZJgguA3G5PAIGgen0-YHSnDKs"},
{"content":{"body":"> <@ljharb:matrix.org> but if a block means we should permanently give up on a direction then a lot of proposals wouldn't exist or have existed\n\nyes but we really need to engage with this block in particular and its reasons to make progress. I think it is important for the plenary to analyze those reasons together.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rYPNS9SjzZGP0Ht2IldWrx1tCEYyTFrdPsgRH_VU6ZY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but if a block means we should permanently give up on a direction then a lot of proposals wouldn&#39;t exist or have existed</blockquote></mx-reply>yes but we really need to engage with this block in particular and its reasons to make progress. I think it is important for the plenary to analyze those reasons together.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rYPNS9SjzZGP0Ht2IldWrx1tCEYyTFrdPsgRH_VU6ZY"}},"msgtype":"m.text"},"ts":1722450918874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J7xR5FaJuWhM7RN3vq6K3pCVITITsUIH9eMA_pnn7HM"},
{"content":{"body":"It would be nice if we could find a way to support something like\n```js\nimport Decimal from 'std:decimal/v1'\n```\n\nAs in, a versioned standard library that doesn't necessarily communicate native implementation speeds to all users. With something like that, I at least would find it much easier to positively support e.g. Decimal.","format":"org.matrix.custom.html","formatted_body":"<p>It would be nice if we could find a way to support something like</p>\n<pre><code class=\"language-js\">import Decimal from 'std:decimal/v1'\n</code></pre>\n<p>As in, a versioned standard library that doesn't necessarily communicate native implementation speeds to all users. With something like that, I at least would find it much easier to positively support e.g. Decimal.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722450985297,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$hJHQ36oFtRdYJzQdSG57pGz_2yY69cPsH9Nbt4eP4Ec"},
{"content":{"body":"I need to step away for a second, could someone help with the notes?","m.mentions":{},"msgtype":"m.text"},"ts":1722451011416,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nI9ZsCuCAkh9pU0Ev8F3NJ_JIUj2kJjuMqXN4a4-vJY"},
{"content":{"body":"the builtin modules proposal's years-long discussion imo covers why globals are a better approach than an arbitrary module specifier that Scripts can't access synchronously","m.mentions":{},"m.relates_to":{"event_id":"$hJHQ36oFtRdYJzQdSG57pGz_2yY69cPsH9Nbt4eP4Ec","is_falling_back":true,"m.in_reply_to":{"event_id":"$hJHQ36oFtRdYJzQdSG57pGz_2yY69cPsH9Nbt4eP4Ec"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722451045684,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aN6eabEn1jNd0ucW8EgB07SGkylQmvTpvVPMH1FMSJU"},
{"content":{"body":"it seems like we are asking the same question of Jordan over again because we don't like the answer and are expecting a different answer if we ask enough times.  if we can have a productive discussion and it must happen during plenary, then so be it, but it should not be interrogative ","m.mentions":{},"msgtype":"m.text"},"ts":1722451056565,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$wtJYA_LN8zTZf-YaFob64ie7M57mNd4vjDTwG-0WCsA"},
{"content":{"body":"either way my argument would be the same whether it's a global or not; it's about it being in 262 or not.","m.mentions":{},"m.relates_to":{"event_id":"$hJHQ36oFtRdYJzQdSG57pGz_2yY69cPsH9Nbt4eP4Ec","is_falling_back":true,"m.in_reply_to":{"event_id":"$aN6eabEn1jNd0ucW8EgB07SGkylQmvTpvVPMH1FMSJU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722451074539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CnyNUD6DR5GYfzFY3cltlgRZqIN2f9IBVdH5f0AISVg"},
{"content":{"body":"> <@dminor:mozilla.org> Our perspective is not \"no new primitives\" but that there is a very high bar for adding new primitives, and we are unconvinced that Decimal meets that bar.\n\nchrome's is similar. might be different in the line drawing exercise for the bar, etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QMu9vNQN2eYL9Jvps9bIo-XPJCwrxVs68vA0uqLjMu8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>Our perspective is not &quot;no new primitives&quot; but that there is a very high bar for adding new primitives, and we are unconvinced that Decimal meets that bar.</blockquote></mx-reply>chrome's is similar. might be different in the line drawing exercise for the bar, etc","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QMu9vNQN2eYL9Jvps9bIo-XPJCwrxVs68vA0uqLjMu8"}},"msgtype":"m.text"},"ts":1722451159774,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q2EHnvpWzHMn4E-XwBAI_MfPp7zB70R_3_nAHcLIWGc"},
{"content":{"body":"From my point of view, Jordan has expressed his reasons for blocking clearly, at the last plenary and again this time.","m.mentions":{},"msgtype":"m.text"},"ts":1722451161117,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$mkAtnH4aQ7sY_BoMbzkx_bKqVJeROTUcADeXKin_mUA"},
{"content":{"body":"In the future, I want to discuss (1) what is the future of numerics [which is linked to operators] (2) what are our criteria for adding things to the standard library [independent of operators]. I'll discuss more with ljharb offline first, sorry. Both of those points were pretty core to the objection and I didn't get a chance to understand Jordan's intentions about how this reasoning applies generally.","m.mentions":{},"msgtype":"m.text"},"ts":1722451470924,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v86b7yHnDhBpihYnS3an9as_aJc14P1lm94aJY8CsAI"},
{"content":{"body":"The slide show for the last agenda item of the day is inaccessible.","m.mentions":{},"msgtype":"m.text"},"ts":1722452147594,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$YLXoZCNH2jxJzmYL1s6pSkx5lkhlwBHUgo7Rjt2e2Rk"},
{"content":{"body":"I'd like to see it before the presentation.","m.mentions":{},"msgtype":"m.text"},"ts":1722452159246,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$gtKPbb3_XK_eicWRxio8KQ6TegaUYexjmpHVSYM7GKA"},
{"content":{"body":"huh? seems linked from the agenda https://onedrive.live.com/?authkey=%21ANzaoMgiLDZwOCw&id=5D3264BDC1CB4F5B%216170&cid=5D3264BDC1CB4F5B&parId=root&parQt=sharedby&o=OneUp","m.mentions":{},"msgtype":"m.text"},"ts":1722452228491,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VgH997lWI-pv_dAd9j3H9mzV8Jm_JPKKgCnWkaLNTlA"},
{"content":{"body":"waldemar retry a couple of times maybe","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> retry a couple of times maybe","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1722452247123,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$pGfDeHYwVMgqyLmrQfVT2WrTk21chCgt7t8MpaX89-o"},
{"content":{"body":"yeah I can view it fine","m.mentions":{},"msgtype":"m.text"},"ts":1722452249004,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$vg_R7CkRhEbvKedI4WayjQzs0HrnTvzoLFwvOfUg00Q"},
{"content":{"body":"it took me a few times","m.mentions":{},"msgtype":"m.text"},"ts":1722452257122,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$bNazHFAxTYaYXpV--T5rNwb1kUCsf-y0cbusrJprQlM"},
{"content":{"body":"waldemar: can you double check?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: can you double check?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1722452258158,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$tbN1UYKIjwQFroxqR3MqkkFJkifJ9DGTisVIMRa6SsU"},
{"content":{"body":"Now I can view it. Took a few tries.","m.mentions":{},"msgtype":"m.text"},"ts":1722452283621,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$imNi3Ovf9raWBUY7UOVBj07wxozsYtPu2kebwnaMF6A"},
{"content":{"body":"i don't know what the deal with my webex is","m.mentions":{},"msgtype":"m.text"},"ts":1722452296728,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GQnKWaH1dYKdtEKwVLllktWh_qozqdz6QybPh6XFaVE"},
{"content":{"body":"the audio/video don't lag but the slides do","m.mentions":{},"msgtype":"m.text"},"ts":1722452303088,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lzn9Br1Hyt1Oxiflt6AGD54GrRYZLUk9rvuRoqeNzzk"},
{"content":{"body":"> <@shuyuguo:matrix.org> that says to me that the collective demand of a built-in decimals is not high, given that an interchange format standard (IEEE) exists and libraries can all do that\n\nIEEE isn't a JS interchange format, in the sense that it's not a JS value that can be returned from an API","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F8JndlH3KNGbmaK9lZ40X5wYfoEDMTTQGZYLYrJUlBs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that says to me that the collective demand of a built-in decimals is not high, given that an interchange format standard (IEEE) exists and libraries can all do that</blockquote></mx-reply>IEEE isn't a JS interchange format, in the sense that it's not a JS value that can be returned from an API","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$F8JndlH3KNGbmaK9lZ40X5wYfoEDMTTQGZYLYrJUlBs"}},"msgtype":"m.text"},"ts":1722452326189,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CtNX77ErO4zgkYZ_c7TsHaqckoA6Cw36COwW9lfOSus"},
{"content":{"body":"ryzokuken / Chris de Almeida I don't see on the agenda on TCQ the second half for Chengzhong Wu's topic, since it was split in 15 minutes for presentation + 15 minutes for discussion to be re-scheduled after my topic. Is it intentional?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> / <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a> I don't see on the agenda on TCQ the second half for <a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>'s topic, since it was split in 15 minutes for presentation + 15 minutes for discussion to be re-scheduled after my topic. Is it intentional?","m.mentions":{"user_ids":["@usharma:igalia.com","@softwarechris:matrix.org","@legendecas:matrix.org"]},"msgtype":"m.text"},"ts":1722454816826,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UI6fxqW-olQuQIatHpzM1tM-8oF1E41m-1gy2ELUa9k"},
{"content":{"body":"ok, joining the notes now","m.mentions":{},"msgtype":"m.text"},"ts":1722456526583,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$0PcltsRyTbLHTJyOt43bdga6jvdUUSE_rBZndaDkuCY"},
{"content":{"body":"today's captioner is SO much better than day 1","msgtype":"m.text"},"ts":1722457402368,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$InEeGihf8UrprjjEdcuGId4UGzx63qCGAEcGv5m-9wg"},
{"content":{"body":"nicolo-ribaudo: I missed the timing for the TC39 meeting earlier today. I was looking at your indirect eval proposal and one thing that might be great is the parity with shadowRealms functionality on the import and evaluate methods. IIRC they follow their respective realm origin rather than the script where they are called. You can't really make the new instantiated realm aware of the incubating realm calling it. Your change makes `import()` a bit similar where it respects the origin. \n\n*For clarity, all I'm saying is a mean for feature parity, because you can't really use the indirect eval from another shadowrealm other than a wrapped function or evalute/import methods.*","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I missed the timing for the TC39 meeting earlier today. I was looking at your indirect eval proposal and one thing that might be great is the parity with shadowRealms functionality on the import and evaluate methods. IIRC they follow their respective realm origin rather than the script where they are called. You can't really make the new instantiated realm aware of the incubating realm calling it. Your change makes <code>import()</code> a bit similar where it respects the origin.</p>\n<p><em>For clarity, all I'm saying is a mean for feature parity, because you can't really use the indirect eval from another shadowrealm other than a wrapped function or evalute/import methods.</em></p>\n","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1722457499178,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$lBPrxUzbNEOxFgNyEBGBlNx54pzrt4m0Y4VHYjo3vxo"},
{"content":{"body":"FWIW, I need to remove myself from the shadowrealms proposal, I can't champion it anymore.","m.mentions":{},"msgtype":"m.text"},"ts":1722457568355,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$Eb8-4dSn01WEsaWsQlABcCxckGe4GvgQC0gt9RQYTvE"},
{"content":{"body":"shu: Error.isError is a slot check which is always cross-realm","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Error.isError is a slot check which is always cross-realm","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1722457586224,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jy6N4_PAbRWsS4i5InpN1ZFMCsRuedegeOSC7Vpsjbo"},
{"content":{"body":"that's the mechanism of how it works","m.mentions":{},"msgtype":"m.text"},"ts":1722457600372,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FLRLcDHmgb3vgBKo-gLBrCVO2DhBMkURHKxAYFKtOb0"},
{"content":{"body":"\"same realm\" never comes up but i'm not sure why it did here and not everywhere else","m.mentions":{},"msgtype":"m.text"},"ts":1722457604125,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pCrYxQ2IXx2ms1o4Fg19Abf3IfGSSXQc7w5Vsu5nyKk"},
{"content":{"body":"if mark cares about realm-ness for this, why not also for errors?","m.mentions":{},"msgtype":"m.text"},"ts":1722457607221,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7l24phDNsAHqv6YKVUA3YZFzdmY-QllcDMz9JY58YYo"},
{"content":{"body":"ah k, good question i guess","m.mentions":{},"msgtype":"m.text"},"ts":1722457615948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2cK9f25xBV5K7-gnaG8nE_nvuRh_3nFgskgLrvAOp-o"},
{"content":{"body":"didn't he specifically address that yesterday? though I forget what he said","m.mentions":{},"msgtype":"m.text"},"ts":1722457633880,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oJo_Wyv4p0i604g1cHrICI817YuRms0ZMJ-X4crpFrE"},
{"content":{"body":"aren't reflect methods supposed to mirror MOP ops","m.mentions":{},"msgtype":"m.text"},"ts":1722457637761,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EGPQVeH-lCiCNlzo2sb43aROAfx6scg--kDB1RpQIH0"},
{"content":{"body":"or whichever day isError was","m.mentions":{},"msgtype":"m.text"},"ts":1722457637823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EjiImUHAztd_gO6h7WkM_i2TVy83RccNGo0Z6vv3y-M"},
{"content":{"body":"did he? i also froget","m.mentions":{},"msgtype":"m.text"},"ts":1722457639518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$k-AV6arUYUkvr1NZCcsWhkvKrelNaB0qMZ6EF3F6FQA"},
{"content":{"body":" * did he? i also forget","m.mentions":{},"m.new_content":{"body":"did he? i also forget","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$k-AV6arUYUkvr1NZCcsWhkvKrelNaB0qMZ6EF3F6FQA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722457645544,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$swGUAA7tn_EXGeyGRufvmFkyR-12qCkvmkBSFkyXF9k"},
{"content":{"body":"yesterday he talked about membranes which isn't necessarily cross-realm, but can be","m.mentions":{},"msgtype":"m.text"},"ts":1722457655374,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$htBXzSOXriq3a5-UjHinV3Xg8l3ia7WxWCikt12_H9s"},
{"content":{"body":"the context there was, having a method check slots on an argument means you can't make a fake error that the method will blindly report as an error","m.mentions":{},"msgtype":"m.text"},"ts":1722457686436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oglkjEVQFDu_Bpgk0z0p8FXUmHXkJZvokeb6gD45C-s"},
{"content":{"body":"oh the thing mark said yesterday was, for practical membrane implementations Errors are recreated across the membrane instead of wrapped","m.mentions":{},"msgtype":"m.text"},"ts":1722457738620,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EDYiBNfTCitkKvKW7nm_jOXsNmNL7pZhuZaKlRtfuhg"},
{"content":{"body":"but i don't think \"objects that in practice are copied\" to be a design principle i can work with if that's what governs what needs per-realm or realm-ful brand checks","m.mentions":{},"msgtype":"m.text"},"ts":1722457779602,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$baHXxiuFgHQsDNyRAURVdsStJrer6c0CtfuAOuSOqUM"},
{"content":{"body":" * but i don't think \"objects that in practical membranes are copied\" to be a design principle i can work with if that's what governs what needs per-realm or realm-ful brand checks","m.mentions":{},"m.new_content":{"body":"but i don't think \"objects that in practical membranes are copied\" to be a design principle i can work with if that's what governs what needs per-realm or realm-ful brand checks","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$baHXxiuFgHQsDNyRAURVdsStJrer6c0CtfuAOuSOqUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722457794412,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$56jXfYsF6Ubcp-RIjnHg6NFI3N68XALrXO_n3-7rXNU"},
{"content":{"body":"Why not Object.isTemplateObject ?","m.mentions":{},"msgtype":"m.text"},"ts":1722457864815,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$O7rLL6IG1OflFMhHS-dliaGyFdxOHrFMYVHNpHqlekk"},
{"content":{"body":"same reason as Array i would guess","m.mentions":{},"msgtype":"m.text"},"ts":1722457898877,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SSwx-k51iCsXaEfjCfZwHfRE0bl5Ny4OjT6ALsP0s0I"},
{"content":{"body":"do people actually go looking for stuff on the global? it's already got a bunch of random junk on it","m.mentions":{},"msgtype":"m.text"},"ts":1722457917465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bkPETxvME1Eg-zuIEti6OzRX-VvlY9viyEhRXzhWXX0"},
{"content":{"body":"but moreso","m.mentions":{},"msgtype":"m.text"},"ts":1722457917622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hGVjQB_Y2p2PjwU_-swUXBra3BIK9ksm1Cqzo9p1jO8"},
{"content":{"body":"`personalbar`","format":"org.matrix.custom.html","formatted_body":"<code>personalbar</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722457921942,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yNNvGSlsRiXvWZbZR_wVnif2KRbJRS-dWygzsNuYp4A"},
{"content":{"body":"console.log(global) in a browser is not human readable","m.mentions":{},"msgtype":"m.text"},"ts":1722457934397,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cIShUMOisQL_NJYViDUHzslBmB23WrfqKlms0kpFMzI"},
{"content":{"body":"barely readable in node","m.mentions":{},"msgtype":"m.text"},"ts":1722457942456,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2ENwpR1iU5UDtzNLCldvAc1_wR_bEXO_jtDdGJ5egh4"},
{"content":{"body":"is anyone aware of any use of trusted types outside of Google properties?","m.mentions":{},"msgtype":"m.text"},"ts":1722458052703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oDRbfyf7uRZpROu_7f9PaavLgyMH-hQz9dA3e9rpYoA"},
{"content":{"body":"a lot of CSP stuff is unusable if you are not Google","m.mentions":{},"msgtype":"m.text"},"ts":1722458060043,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tgMZfs1Ud641tgJgQZHSawkhWz5F_Mn8xehz11ctPlM"},
{"content":{"body":"like, because it's badly designed, not that it's actually not available","m.mentions":{},"msgtype":"m.text"},"ts":1722458078371,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K3ONC1cV5MItoSJ7ZqVV44jJX9yFL8vEy6PYl1W5pJM"},
{"content":{"body":"plenty of usage at Salesforce before I left in February, I can't say about the status today.","m.mentions":{},"msgtype":"m.text"},"ts":1722458167314,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$Z3aGEQraO1mb4xzBNe4ecKvtKsf4qGHMkKLz0H5J420"},
{"content":{"body":"i have literally never seen any code use it","m.mentions":{},"msgtype":"m.text"},"ts":1722458194646,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eXbRpX3QHDcx2-pObP9bLTui2pA4pMaRFn07b8PlbyQ"},
{"content":{"body":"i would imagine its usage is heavily in random proprietary stuff like the aforementioned","m.mentions":{},"msgtype":"m.text"},"ts":1722458217601,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CuO40p8gE5yB9Tx-nbeZq9LQcz9n8pBB8mO03-9o1QI"},
{"content":{"body":"I spend a decent amount of my time at my job looking at actual websites (retailers, banks, etc) and have never seen it","m.mentions":{},"msgtype":"m.text"},"ts":1722458265737,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kraK9LYVoy5NdjJ6731jb6bR1swoWsFIOk2UBxzLTmk"},
{"content":{"body":" * i would imagine its usage is pretty much only in random proprietary stuff like the aforementioned","m.mentions":{},"m.new_content":{"body":"i would imagine its usage is pretty much only in random proprietary stuff like the aforementioned","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CuO40p8gE5yB9Tx-nbeZq9LQcz9n8pBB8mO03-9o1QI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722458309002,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XAO6-TDIVkpeUAQuquRCwR0ZsCezj5jhtvINzm2lINM"},
{"content":{"body":"I'd defer to a Salesforce rep to talk more about it, maybe Caridy?","m.mentions":{},"msgtype":"m.text"},"ts":1722458324434,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$uPSOB6fXvlLCOs9yR1pIUo2T9VI-t0N_hwdkdeB0w0M"},
{"content":{"body":"caridy: ^^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@caridy:matrix.org\">caridy</a>: ^^","m.mentions":{"user_ids":["@caridy:matrix.org"]},"msgtype":"m.text"},"ts":1722458331854,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$JD9pB6W3VwS_S90ng-xDjMuvUKtvbc7NPaNNYJqOcXQ"},
{"content":{"body":"Dumb Q: `isTemplateTag(eval(\"foo\\`bar-`\"))` presumably returns true? ","format":"org.matrix.custom.html","formatted_body":"Dumb Q: <code>isTemplateTag(eval(\"foo\\</code>bar-<code>\"))</code> presumably returns true?","m.mentions":{},"msgtype":"m.text"},"ts":1722458363141,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$HhUqbx5Dwk9nXRvyWGvEmyXG3-_VIetvOiBf-Gb5OfI"},
{"content":{"body":"oof. matrix ","m.mentions":{},"msgtype":"m.text"},"ts":1722458373694,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$R5tYU0HZN_qw1HsG1f5xk3QNas6BZh_dkWvXEgO6swU"},
{"content":{"body":"leobalter: we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","m.mentions":{"user_ids":["@leobalter:matrix.org"]},"msgtype":"m.text"},"ts":1722458430068,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WQbD2ljZjZpThM3R26cIe2dTFb_7eWH-0rnv6f54EV0"},
{"content":{"body":" * leobalter: fwiw we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: fwiw we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","m.mentions":{},"m.new_content":{"body":"leobalter: fwiw we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: fwiw we've previously agreed that Reflect is no longer restricted to proxy traps, in the getintrinsic discussions","m.mentions":{"user_ids":["@leobalter:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WQbD2ljZjZpThM3R26cIe2dTFb_7eWH-0rnv6f54EV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722458473785,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ipcOuyozftE_ef2X6sXGHpHl41dIwcYqCe2donO7p6Y"},
{"content":{"body":"Thanks, this may be the precedent I was looking for.","m.mentions":{},"msgtype":"m.text"},"ts":1722458609171,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$L7ULqxgdorjZvIXQ-3XWWK8s1sBoxGjNbb4QECJJaBc"},
{"content":{"body":"> <@mgaudet:mozilla.org> Dumb Q: `isTemplateTag(eval(\"foo\\`bar-`\"))` presumably returns true?\n\nYes, but the idea is that you use this to gate access to eval. If you already have access to eval, then you are already \"compromised\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HhUqbx5Dwk9nXRvyWGvEmyXG3-_VIetvOiBf-Gb5OfI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">@mgaudet:mozilla.org</a><br>Dumb Q: <code>isTemplateTag(eval(\"foo\\</code>bar-<code>\"))</code> presumably returns true?</blockquote></mx-reply>Yes, but the idea is that you use this to gate access to eval. If you already have access to eval, then you are already \"compromised\"","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HhUqbx5Dwk9nXRvyWGvEmyXG3-_VIetvOiBf-Gb5OfI"}},"msgtype":"m.text"},"ts":1722458744241,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$A1EgHuLBryISExwZ15-i5Eg_klaJxH__kjMZGDpNt98"},
{"content":{"body":"leobalter: still ok to prefer the global ofc :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: still ok to prefer the global ofc :-)","m.mentions":{"user_ids":["@leobalter:matrix.org"]},"msgtype":"m.text"},"ts":1722458751260,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6wRWsCHydEYZub53tywTWxJYr5PXZVglCYMrCdOAwjs"},
{"content":{"body":"my preference is over a pet peeve to keep Reflect and Proxies in sync","m.mentions":{},"msgtype":"m.text"},"ts":1722458784182,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$V-E2oUhKYS4KzQX_nHANkEfj0sXS6BEx81lefO6Rzp0"},
{"content":{"body":"that was indeed the constraint, prior, which is why Reflect.enumerate was removed","m.mentions":{},"msgtype":"m.text"},"ts":1722458827651,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GGOjfSof5QWHDoRkSkqHePiuWTQ1L0GicE_SqnRtRdQ"},
{"content":{"body":" * that was indeed the constraint, prior, which is why Reflect.enumerate (sp?) was removed","m.mentions":{},"m.new_content":{"body":"that was indeed the constraint, prior, which is why Reflect.enumerate (sp?) was removed","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GGOjfSof5QWHDoRkSkqHePiuWTQ1L0GicE_SqnRtRdQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722458834091,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cck8fZnFg14SXFofPGsC6P9TD5VR6O-4L083P6CloNw"},
{"content":{"body":"exactly","m.mentions":{},"msgtype":"m.text"},"ts":1722458841760,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$Fsz1_bHgqo0IwFW1AjvKl5jJuW6BDzFT4taaU00L22g"},
{"content":{"body":"I'd expect all Reflect functions to also have equivalents in Proxies. ","m.mentions":{},"msgtype":"m.text"},"ts":1722458925808,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$E5UaBcvNwG903snE5jehcw4S0vEwCRiNDpd5HCVOhl4"},
{"content":{"body":"littledan: when you say \"people\" are doing this thing where they compile all the strings, who are you talking about?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: when you say \"people\" are doing this thing where they compile all the strings, who are you talking about?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1722458978878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KkOJa4R5CMQ_qI9ImMe-Brp5O34DMB6zZ5eKBmllr7A"},
{"content":{"body":"I'm logging off now -- I will still seem online because there is my PC on where I forgot to close the webex tab, but the monitor is not turning on for some reason so I cannot close it and I'm too tired to figure it out. If anybody can, please kick me out :)","m.mentions":{},"msgtype":"m.text"},"ts":1722458979343,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WG6nabnoEZXNsaUCsNo8dTnQPSmGqc6m_ix31cnFQig"},
{"content":{"body":"> <@bakkot:matrix.org> littledan: when you say \"people\" are doing this thing where they compile all the strings, who are you talking about?\n\nyeah I think I hallucinated this (maybe I'm an LLM!). Here's the thread where I proposed using templates for this, where Closure-level checks are explained https://github.com/w3c/trusted-types/issues/96 and here's a thread with a bunch of people attesting to its utility https://github.com/w3c/trusted-types/issues/398","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KkOJa4R5CMQ_qI9ImMe-Brp5O34DMB6zZ5eKBmllr7A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: when you say \"people\" are doing this thing where they compile all the strings, who are you talking about?</blockquote></mx-reply>yeah I think I hallucinated this (maybe I'm an LLM!). Here's the thread where I proposed using templates for this, where Closure-level checks are explained https://github.com/w3c/trusted-types/issues/96 and here's a thread with a bunch of people attesting to its utility https://github.com/w3c/trusted-types/issues/398","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KkOJa4R5CMQ_qI9ImMe-Brp5O34DMB6zZ5eKBmllr7A"}},"msgtype":"m.text"},"ts":1722459744854,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ExWiDuatBDinjSDBWZAVVLWM7qhQ2POsL7hi2zqadYc"},
{"content":{"body":"surprisingly i did not have that question","m.mentions":{},"msgtype":"m.text"},"ts":1722459936865,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rMjTEYvbwIwzc4PT6XIZ9tclH1B_Qb3KKbgDlpMBb30"},
{"content":{"body":"littledan: thanks for the links. from what I can tell that thread is mostly just the one google person; it would be nice to hear about the need for this from other people.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: thanks for the links. from what I can tell that thread is mostly just the one google person; it would be nice to hear about the need for this from other people.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1722460489811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r0S_8xOKshuTZ_uVUrb2BYBardt6qdiLTjO35k6sDwk"},
{"content":{"body":"https://github.com/w3c/trusted-types/issues/398#issuecomment-1910771081","m.mentions":{},"msgtype":"m.text"},"ts":1722460518779,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xgx1N0iSB0q8j-9BEvSS_8kgMY-wCksZJ81ITFou1jI"},
{"content":{"body":"I guess edge is technically not google, yes","m.mentions":{},"msgtype":"m.text"},"ts":1722460556344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KPHjpNUNZehSx98-5aYt_O_ic00Luh59w8x4s-JM268"},
{"content":{"body":"also, do you happen to know offhand if some problem with using just making hashes work for `eval` and friends, instead of this?","format":"org.matrix.custom.html","formatted_body":"also, do you happen to know offhand if some problem with using just making hashes work for <code>eval</code> and friends, instead of this?","m.mentions":{},"msgtype":"m.text"},"ts":1722460584196,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yjk34PB0k_1gRMcCNlD2TXkvwjFbT46-J6wbBCCkCbU"},
{"content":{"body":"I think Salesforce's case is different, with their membrane-based security model, testing for literalness might not be the thing","m.mentions":{},"msgtype":"m.text"},"ts":1722460595112,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_mYT2ZIB3A5VxEdSIqDT77TU5DAlDE0ufIKmNdIJU64"},
{"content":{"body":"> <@bakkot:matrix.org> also, do you happen to know offhand if some problem with using just making hashes work for `eval` and friends, instead of this?\n\nsorry what is the counterproposal?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Yjk34PB0k_1gRMcCNlD2TXkvwjFbT46-J6wbBCCkCbU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>also, do you happen to know offhand if some problem with using just making hashes work for <code>eval</code> and friends, instead of this?</blockquote></mx-reply>sorry what is the counterproposal?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Yjk34PB0k_1gRMcCNlD2TXkvwjFbT46-J6wbBCCkCbU"}},"msgtype":"m.text"},"ts":1722460615722,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0T4X7qJZpQFDwAM8KkXGl0ICf9smD8JD2bkD9v-3Sps"},
{"content":{"body":"CSP allows you to allowlist scripts by a hash of their contents. this does not allow you to `eval` things by a hash of their contents. but it could! does that solve the problem this is setting out to solve? if not, in what way?","format":"org.matrix.custom.html","formatted_body":"CSP allows you to allowlist scripts by a hash of their contents. this does not allow you to <code>eval</code> things by a hash of their contents. but it could! does that solve the problem this is setting out to solve? if not, in what way?","m.mentions":{},"msgtype":"m.text"},"ts":1722460664927,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EhI54VSNI6WWY24h0pOLr0nWoOUCA78RYW-VfuG10OQ"},
{"content":{"body":"hashes do require updating the CSP itself, which is certainly annoying; is that the concern?","m.mentions":{},"msgtype":"m.text"},"ts":1722460679127,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qc9Fr2Eoqnf9OS_vOnApPg4TBlyxrTeMnTm1sHRzLU8"},
{"content":{"body":"well yeah that was the idea behind dynamic-strict right? also this is for stuff like HTML too.","m.mentions":{},"msgtype":"m.text"},"ts":1722460724888,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1-4mkjmNQXZm8PBmBqr1U_GCX8ZKBfg2K4erWVbv6A0"},
{"content":{"body":"but also there might be a lot of these, and you'd need a compile step to bring them all together into the header","m.mentions":{},"msgtype":"m.text"},"ts":1722460770436,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rEt-LPabZY1siW1Tbk8GkAbwHPQCk9DX8RXEvE2kgkM"},
{"content":{"body":"is that the only primary problem with the approach?","m.mentions":{},"msgtype":"m.text"},"ts":1722460847962,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7sBM2q5ZmIt89ZoYMb-0T6QnT4uYE8UXTmhSCEPipTg"},
{"content":{"body":"that it's probably too difficult to deploy? yes, that's what trusted types is getting at in general.","m.mentions":{},"msgtype":"m.text"},"ts":1722460910159,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bt3-LlQUDr_gjtQe6gevRlW-D3HYKAizYZOPWuzGKw8"},
{"content":{"body":"ok, cool. from my experience working with integrating with CSPs at a few dozen customers, I think hashes would be substantially easier to deploy than TTs","m.mentions":{},"msgtype":"m.text"},"ts":1722460954872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t-TRUMlOfu0H_3Rk-qtEgmey6F29YjEw8Y9emhTG73A"},
{"content":{"body":"lmao this is nowhere near a minor editorial point","msgtype":"m.text"},"ts":1722461008503,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zZCWPtAPtS213FLVelYAR1y3lRcz00feC-I10phYY04"},
{"content":{"body":"TTs require updating each script, whereas with hashes you can leave the scripts alone and just add the necessary hash to the CSP","m.mentions":{},"msgtype":"m.text"},"ts":1722461011272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PgftBp9Nen_dK6OzuwZ73Nnt96cN9RQKfHXJK9viZNw"},
{"content":{"body":" * TTs require updating each script, whereas with hashes you can leave the scripts alone and just add their necessary hashes to the CSP","m.mentions":{},"m.new_content":{"body":"TTs require updating each script, whereas with hashes you can leave the scripts alone and just add their necessary hashes to the CSP","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PgftBp9Nen_dK6OzuwZ73Nnt96cN9RQKfHXJK9viZNw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722461021190,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OBVMNTB-l-t83PgOLbgRYR-CE9cTrMG4GIRls-OBqUA"},
{"content":{"body":"spirit and scope are stage 1","msgtype":"m.text"},"ts":1722461100203,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wtmyrauIlzzRHtQr1G08RiCx4JsTkaS3nf1DjB3qDFk"},
{"content":{"body":"I may have to leave strictly at 3","m.mentions":{},"msgtype":"m.text"},"ts":1722461128014,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$WA7BhISmdqIy3OsQIVS1ViRbl03ojyRUYqr3B43AQko"},
{"content":{"body":"apologies for opening this can of worms @danielrosenwasser:matrix.org","format":"org.matrix.custom.html","formatted_body":"apologies for opening this can of worms <a href=\"https://matrix.to/#/%40danielrosenwasser%3Amatrix.org\">@danielrosenwasser</a>","msgtype":"m.text"},"ts":1722461204106,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$T9LylF5WgxEdOfYY33MUxmlShWCcrcG1hP2t8PLCPuY"},
{"content":{"body":"Unobservable worms","m.mentions":{},"msgtype":"m.text"},"ts":1722461251407,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$3TuHikS9xjp-7cEV849s3GbBI03e2JKlXVum3EOrJXE"},
{"content":{"body":"I'm really pleased that TS folk are discussing new TS syntax here in TC39 before landing it in the TS language.  This helps keep JS and TS coordinated and aligned.","m.mentions":{},"msgtype":"m.text"},"ts":1722461339298,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4CoRP7VNVuDcynTLKSAkgiQkR7L71VD8C9IYC2E6PQE"},
{"content":{"body":"There's a lot of expertise here to be leveraged, as well as knowledge of potential future JS syntax growth paths. Obviously there is no procedural requirement for upcoming TS features to be discussed in TC39 first (or at all), so I hope the committee provides valuable/constructive feedback to make it a worthwhile activity to repeat in future.\n","m.mentions":{},"msgtype":"m.text"},"ts":1722461352601,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$cRW6kXPH1rmDgpFh7MZcZtQ5dmSHLWbP4297RF9x-K8"},
{"content":{"body":"I watched original issue in TS repo, happy to see the solution in the meeting. ","m.mentions":{},"msgtype":"m.text"},"ts":1722462271780,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$5ZoEbLeYIs5qVXW89V_aR2HBzr9t1GzzOVSFsEdKhlw"},
{"content":{"body":"Some language also have the modifier/annotation to denote how many times the function will be executed. Not sure TS need such much powerful information...","m.mentions":{},"msgtype":"m.text"},"ts":1722462433180,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$lvP9u8UuFTFJr0T7RTqutNxSdnOyZCy_jeRFHxuK85U"},
{"content":{"body":"full dependent types pls","m.mentions":{},"msgtype":"m.text"},"ts":1722462569412,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Lz3_pDpnmW9zHmJhdvitu16Nti3FipJBdCUXtm5gc8Q"},
{"content":{"body":"Luca Casonato: immediate is a property of the caller, not the callee, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: immediate is a property of the caller, not the callee, right?","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"ts":1722462622654,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Rcd5kwsPQLqXCo4fVWEQvV3waL2bGPxtFcx0ZFiJ8cU"},
{"content":{"body":"(wrt `immediate () => void`)","format":"org.matrix.custom.html","formatted_body":"(wrt <code>immediate () =&gt; void</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1722462670370,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mfv53GUyb372bLPZ4UOcG7r61Y1utcWI7TfkGELaTxo"},
{"content":{"body":"maybe - but i don't think that is necessarily important for most users. it would be a much simpler thing to adopt if we didn't have to add another ts only keyword","m.mentions":{},"msgtype":"m.text"},"ts":1722462703244,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AUI0gb82r-xjyM95DDnE_4TDB7qSbZ7HqAuYYLcWZEA"},
{"content":{"body":"specially it'd be a completely new type modifier position for closures - currently only constructors have this type keyword position","m.mentions":{},"msgtype":"m.text"},"ts":1722462749587,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$aen8Bt6vMtklaLZffxRoGBZ0k7kPbmRtFnZ9_uOYv64"},
{"content":{"body":" * specifically it'd be a completely new type modifier position for closures - currently only constructors have this type keyword position","m.mentions":{},"m.new_content":{"body":"specifically it'd be a completely new type modifier position for closures - currently only constructors have this type keyword position","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aen8Bt6vMtklaLZffxRoGBZ0k7kPbmRtFnZ9_uOYv64","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722462758137,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$aphF0DjR3fuv9nBIkKcnGWxMUGxGkG_fLHgWQuucC4M"},
{"content":{"body":"I think put keyword after colon is bad, it's not the type of the callback.","m.mentions":{},"msgtype":"m.text"},"ts":1722462829830,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$FYbEiuhDF4zGFoewFRa-niLXQcLML6xO5X5Jm9XWggs"},
{"content":{"body":"i have a hard stop at the hour so hopefully we don't run late","m.mentions":{},"msgtype":"m.text"},"ts":1722462918622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qYTcl79zwgp-QIlMqeolPFSDsrB9171SrVK0yM-F9Rc"},
{"content":{"body":"can you write `type x = immediate () => void` :^)","format":"org.matrix.custom.html","formatted_body":"can you write <code>type x = immediate () =&gt; void</code> :^)","m.mentions":{},"msgtype":"m.text"},"ts":1722462952872,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$D-h_thQqTMz0mDz1qqO-hwG0wQTmKpKqtCRImOcugpg"},
{"content":{"body":" * can you write `type x = immediate () => void` 😄","format":"org.matrix.custom.html","formatted_body":" * can you write <code>type x = immediate () =&gt; void</code> 😄","m.mentions":{},"m.new_content":{"body":"can you write `type x = immediate () => void` 😄","format":"org.matrix.custom.html","formatted_body":"can you write <code>type x = immediate () =&gt; void</code> 😄","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$D-h_thQqTMz0mDz1qqO-hwG0wQTmKpKqtCRImOcugpg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722462963014,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HirgFdRN5huHRqEc7051SyV64NOGJ2eSRtuGafB7NNU"},
{"content":{"body":"Consider parameter decorator `@immediate`, it even could wrap the function so if it's not called immediately, just throw.","format":"org.matrix.custom.html","formatted_body":"Consider parameter decorator <code>@immediate</code>, it even could wrap the function so if it's not called immediately, just throw.","m.mentions":{},"msgtype":"m.text"},"ts":1722462995989,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$UtpM8vPErBklW9MMzCF2SZ-Igf_yhgN-fF2AWQSFklo"},
{"content":{"body":"2/2 on unmuted deno delegates","m.mentions":{},"msgtype":"m.text"},"ts":1722463390864,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gRqCG19HXw9o_0uVH_aaHAm9H5jxyd6fyoqFxiNUKyE"},
{"content":{"body":"i'm hearing that we have an entire day to discuss tail calls","m.mentions":{},"msgtype":"m.text"},"ts":1722463437566,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NgIJKc7G8kBh9drHBNkITbnaBxbnR0Jk0f05HgVDKrI"},
{"content":{"body":"or NaN canonicalization maybe","m.mentions":{},"msgtype":"m.text"},"ts":1722463467731,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PTZvQ56sGi53DKjlRrU8FPGkIiwMPV33nElHDmGLQbc"},
{"content":{"body":"that's not that contentious is it","m.mentions":{},"msgtype":"m.text"},"ts":1722463477671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ci3m7eri57ZsHWaZTtRXpO6yKGa0W_cs1TNCFkrsXxE"},
{"content":{"body":"NaN may or may not be canonicalized, ez","m.mentions":{},"msgtype":"m.text"},"ts":1722463495978,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_dM1_GDD4ctSDVW_rgm64Cy_DrVTA6jjyPsuW3x-wdw"},
{"content":{"body":"we designed a joke by committee?","m.mentions":{},"msgtype":"m.text"},"ts":1722463544657,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fXcre-YWjeXdpkyjvquc6sfhQiPEm5CrHgF5eXjH5RM"},
{"content":{"body":"@danielrosenwasser:matrix.org: Do both. If only one is chosen (eg, `immediate`), then I always have to wonder whether unmarked callbacks are really deferred or just haven't been marked as immediate yet.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40danielrosenwasser%3Amatrix.org\">@danielrosenwasser</a>: Do both. If only one is chosen (eg, <code data-md=\"`\">immediate</code>), then I always have to wonder whether unmarked callbacks are really deferred or just haven&#39;t been marked as immediate yet.","msgtype":"m.text"},"ts":1722463600032,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BS5RqJ4QkZnMZegUaFenJd44NnXk7cY5GGTsXfb5ISY"},
{"content":{"body":"danielrosenwasser: mine was, 1) awesome, this is a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: mine was, 1) awesome, this is a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1722463721515,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-GjEeM3qoENpi_TnOQyINfWH5m7ZQ4sdFczA9aU4tuw"},
{"content":{"body":" * danielrosenwasser: mine was, 1) awesome, this solves a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: mine was, 1) awesome, this solves a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","m.mentions":{},"m.new_content":{"body":"danielrosenwasser: mine was, 1) awesome, this solves a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: mine was, 1) awesome, this solves a huge problem for me; 2) please ensure jsdoc support is first-class; 3) please only add new TS syntax inside existing syntax carveouts","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-GjEeM3qoENpi_TnOQyINfWH5m7ZQ4sdFczA9aU4tuw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722463726344,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w_XxNe1feZMP2Fks3e1PqlIn2km1teC6_7mpsdcA0p8"},
{"content":{"body":"ljharb: are the existing syntax carveouts well-defined?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: are the existing syntax carveouts well-defined?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1722463794235,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$-SpOsEi4Q7QKlOmi40iilb7wWr5gKC-A7w-UI_qRsIo"},
{"content":{"body":"the `:` one is, lots of existing TS ones probably aren't, i just don't want to further poison the TC39 proposal syntax space","format":"org.matrix.custom.html","formatted_body":"the <code>:</code> one is, lots of existing TS ones probably aren't, i just don't want to further poison the TC39 proposal syntax space","m.mentions":{},"msgtype":"m.text"},"ts":1722463824764,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SFuMp9_ZfBU956FACHLFBF0iBS-y0v_eMP9wA4WMzo0"},
{"content":{"body":"@danielrosenwasser I think it would be very useful if TS could enforce `immediate` callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:\n\n- User passes immediate function to a function as a parameter where that callback param is not marked as immediate:\n\n```\nfunction x(foo: immediate () => void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () => void) {\n  bar();\n}\n```\n\n- An `immediate` callback is captured by non immediate closure.\n\n```\nfunction x(foo: immediate () => void) {\n  delay(100).then(() => foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n```\n\n- An `immediate` callback is assigned to a variable outside the \"immediate\" body:\n\n```\nlet cb: () => void;\n\nfunction x(foo: immediate () => void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>@danielrosenwasser I think it would be very useful if TS could enforce <code>immediate</code> callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:</p>\n<ul>\n<li>User passes immediate function to a function as a parameter where that callback param is not marked as immediate:</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () =&gt; void) {\n  bar();\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is captured by non immediate closure.</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  delay(100).then(() =&gt; foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is assigned to a variable outside the \"immediate\" body:</li>\n</ul>\n<pre><code>let cb: () =&gt; void;\n\nfunction x(foo: immediate () =&gt; void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722463942952,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$ny1pCLMbFV171b0D6zFzMNg85TGBvDRV8VzHLKBriU0"},
{"content":{"body":" * danielrosenwasser: I think it would be very useful if TS could enforce `immediate` callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:\n\n- User passes immediate function to a function as a parameter where that callback param is not marked as immediate:\n\n```\nfunction x(foo: immediate () => void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () => void) {\n  bar();\n}\n```\n\n- An `immediate` callback is captured by non immediate closure.\n\n```\nfunction x(foo: immediate () => void) {\n  delay(100).then(() => foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n```\n\n- An `immediate` callback is assigned to a variable outside the \"immediate\" body:\n\n```\nlet cb: () => void;\n\nfunction x(foo: immediate () => void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: I think it would be very useful if TS could enforce <code>immediate</code> callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:</p>\n<ul>\n<li>User passes immediate function to a function as a parameter where that callback param is not marked as immediate:</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () =&gt; void) {\n  bar();\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is captured by non immediate closure.</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  delay(100).then(() =&gt; foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is assigned to a variable outside the \"immediate\" body:</li>\n</ul>\n<pre><code>let cb: () =&gt; void;\n\nfunction x(foo: immediate () =&gt; void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n</code></pre>\n","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.new_content":{"body":"danielrosenwasser: I think it would be very useful if TS could enforce `immediate` callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:\n\n- User passes immediate function to a function as a parameter where that callback param is not marked as immediate:\n\n```\nfunction x(foo: immediate () => void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () => void) {\n  bar();\n}\n```\n\n- An `immediate` callback is captured by non immediate closure.\n\n```\nfunction x(foo: immediate () => void) {\n  delay(100).then(() => foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n```\n\n- An `immediate` callback is assigned to a variable outside the \"immediate\" body:\n\n```\nlet cb: () => void;\n\nfunction x(foo: immediate () => void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: I think it would be very useful if TS could enforce <code>immediate</code> callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:</p>\n<ul>\n<li>User passes immediate function to a function as a parameter where that callback param is not marked as immediate:</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () =&gt; void) {\n  bar();\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is captured by non immediate closure.</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  delay(100).then(() =&gt; foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is assigned to a variable outside the \"immediate\" body:</li>\n</ul>\n<pre><code>let cb: () =&gt; void;\n\nfunction x(foo: immediate () =&gt; void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n</code></pre>\n","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ny1pCLMbFV171b0D6zFzMNg85TGBvDRV8VzHLKBriU0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722463957382,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$uOZsbM-A2dhWF9PZkYY8cHd2_cEyCNqWRqSFzymb4d8"},
{"content":{"body":"I think if TypeScript were to do analysis like described above, it would make `immediate` more like a type modifier. And then placing it in type annotation space would maybe be less confusing. I very much agree with Jordan that it'd be great if TS could stick to the existing TS syntax space, rather than carving out new syntax space.","format":"org.matrix.custom.html","formatted_body":"I think if TypeScript were to do analysis like described above, it would make <code>immediate</code> more like a type modifier. And then placing it in type annotation space would maybe be less confusing. I very much agree with Jordan that it'd be great if TS could stick to the existing TS syntax space, rather than carving out new syntax space.","m.mentions":{},"msgtype":"m.text"},"ts":1722464128984,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$0oRiE0cowuFhs1c5HnktC-U6CfIgp9wGpOTvkqxFDxA"},
{"content":{"body":"what about await/async?","m.mentions":{},"msgtype":"m.text"},"ts":1722464133502,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$0_YOBxjWXV0adjLp6_sSbrg-kAaKJ43_xZN8yy72IJE"},
{"content":{"body":"My interpretation of Daniel's explanation of why `deferred` is not a \"type\" is that, from an implementer's perspective they are different things inside the checker.  So I wonder if a user needs to care.  Maybe it would be ok to put it on the right of the `:`.  I don't have strong feelings.","format":"org.matrix.custom.html","formatted_body":"My interpretation of Daniel's explanation of why <code>deferred</code> is not a \"type\" is that, from an implementer's perspective they are different things inside the checker.  So I wonder if a user needs to care.  Maybe it would be ok to put it on the right of the <code>:</code>.  I don't have strong feelings.","m.mentions":{},"msgtype":"m.text"},"ts":1722464256511,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$z9rWRsVbO_hYtnMlUWumGupk6H9Q2jpww2tmqbeUon0"},
{"content":{"body":"imo a \"type\" of X is any type-space information about X. in this case it's part of the type of the caller.","m.mentions":{},"msgtype":"m.text"},"ts":1722464364074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cw0heJTq_CdDAsBlOYBBgQVfq-K9M2npRPwuEIxmWhQ"},
{"content":{"body":"what is type space information","m.mentions":{},"msgtype":"m.text"},"ts":1722464396234,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LPvPF0L9HtxddsUnxx_k-hIsqvmRVi39kxhbEaP1FCc"},
{"content":{"body":"I’m not sure they’re different from the user’s point of view.","msgtype":"m.text"},"ts":1722464452797,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iHVx4V5NSakKGHgWSK-DMQEiYZQ8_ZZWKEiN8B9_xf8"},
{"content":{"body":"> <@lucacasonato:matrix.org> danielrosenwasser: I think it would be very useful if TS could enforce `immediate` callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:\n> \n> - User passes immediate function to a function as a parameter where that callback param is not marked as immediate:\n> \n> ```\n> function x(foo: immediate () => void) {\n>   y(foo); // error here, immediate function escapes from immediate body\n> }\n> \n> function y(bar: () => void) {\n>   bar();\n> }\n> ```\n> \n> - An `immediate` callback is captured by non immediate closure.\n> \n> ```\n> function x(foo: immediate () => void) {\n>   delay(100).then(() => foo()); // error because `immediate` callback is called from a `deferred` callback\n> }\n> ```\n> \n> - An `immediate` callback is assigned to a variable outside the \"immediate\" body:\n> \n> ```\n> let cb: () => void;\n> \n> function x(foo: immediate () => void) {\n>   cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n> }\n> ```\n\nWe should come to an agreement of what \"immediate\" means. Consider the following cases of a function Foo that takes an immediate callback f:\nA. Foo returns without doing anything.\nB. Foo might call f immediately.\nC. Foo always calls f immediately.\nD. Foo might save f to be called later.\nE. Foo might call f immediately and might save f to call later.\nF. Foo always calls f immediately and might save f to call later.\nG. Foo always saves f to call later.\nH. Foo might call f immediately and always saves f to call later.\nI. Foo always calls f immediately and always saves f to call later.\n\nWhich ones of these would be properly annotated with the \"immediate\" keyword?\nBonus question: What if Foo is an async function?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ny1pCLMbFV171b0D6zFzMNg85TGBvDRV8VzHLKBriU0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br><p><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: I think it would be very useful if TS could enforce <code>immediate</code> callbacks are actually called immediately. It would make them even more useful. Specifically TS errors on the following cases:</p>\n<ul>\n<li>User passes immediate function to a function as a parameter where that callback param is not marked as immediate:</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  y(foo); // error here, immediate function escapes from immediate body\n}\n\nfunction y(bar: () =&gt; void) {\n  bar();\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is captured by non immediate closure.</li>\n</ul>\n<pre><code>function x(foo: immediate () =&gt; void) {\n  delay(100).then(() =&gt; foo()); // error because `immediate` callback is called from a `deferred` callback\n}\n</code></pre>\n<ul>\n<li>An <code>immediate</code> callback is assigned to a variable outside the \"immediate\" body:</li>\n</ul>\n<pre><code>let cb: () =&gt; void;\n\nfunction x(foo: immediate () =&gt; void) {\n  cb = foo; // error because `immediate` callback is assigned to a variable outside of the immediate scope\n}\n</code></pre>\n</blockquote></mx-reply><p>We should come to an agreement of what \"immediate\" means. Consider the following cases of a function Foo that takes an immediate callback f:<br>A. Foo returns without doing anything.<br>B. Foo might call f immediately.<br>C. Foo always calls f immediately.<br>D. Foo might save f to be called later.<br>E. Foo might call f immediately and might save f to call later.<br>F. Foo always calls f immediately and might save f to call later.<br>G. Foo always saves f to call later.<br>H. Foo might call f immediately and always saves f to call later.<br>I. Foo always calls f immediately and always saves f to call later.</p>\n<p>Which ones of these would be properly annotated with the \"immediate\" keyword?<br>Bonus question: What if Foo is an async function?</p>\n","m.mentions":{"user_ids":["@lucacasonato:matrix.org","@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ny1pCLMbFV171b0D6zFzMNg85TGBvDRV8VzHLKBriU0"}},"msgtype":"m.text"},"ts":1722465052746,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$PgtgMHmLOJ_nxajb3jVOxM96a21WX_RdVn8ESZDcn4I"}
]