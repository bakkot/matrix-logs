[
{"content":{"body":"enums-as-constants isn't orthogonal to ADT enums.","msgtype":"m.text"},"ts":1643155254073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-0il3lVEjHzmPA5ovYofk4NRsY57IQWPHqTlGKA7Uao"},
{"content":{"body":"https://matrix.to/#/!vofPwuBJgbSdyEilYo:matrix.org?via=matrix.org\nWelcome to join the chat if you have interest in working on this together. ⭐\n\nThis is NOT a tc39 group cause it didn't reach stage 1, it's a public group but not following the ECMA policy (logged and published). I'll create an official group like pattern matching and pipeline after it reaches stage 1.","msgtype":"m.text"},"ts":1643155339976,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ht2iR4fAC2NHfIJwq3cRr2hhE8JxyjRnbmp-UU6zK9M"},
{"content":{"body":"we can probably make it an official group if the chairs choose so","msgtype":"m.text"},"ts":1643155481893,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E"},
{"content":{"body":" * we can probably make it an official group if the chairs decide that","m.new_content":{"body":"we can probably make it an official group if the chairs decide that","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643155507117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2S2FPjVu7ZmZsbP2ITE-pE63eAwAi3k3CKHqDwHXYE0"},
{"content":{"body":"rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases","msgtype":"m.text"},"ts":1643155671168,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases\n\nEven if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases</blockquote></mx-reply>Even if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","m.relates_to":{"m.in_reply_to":{"event_id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"}},"msgtype":"m.text"},"ts":1643155716367,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PPzMiGeMFxFCVCCQCe8bq-Ek_vCtQSSskg8qeeybI3E"},
{"content":{"body":"I think we have the ability to do that though","msgtype":"m.text"},"ts":1643155738605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zyqb6Gz-QvWhkqzfppH_aRP3x-9clPpvcdZw1dzjU6k"},
{"content":{"body":"Rob Palmer, yulia my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>, <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","msgtype":"m.text"},"ts":1643155744781,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$RFJQYpXEDzKCWe5rodek8f-8L-ZIu9Nui6iG96Ws_RU"},
{"content":{"body":"leobalter: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","msgtype":"m.text"},"ts":1643155808157,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$11Aza_VZ_1rhHxpSfaOHdu1jvw2oUu5fMP5hJAf6Cgk"},
{"content":{"body":"Which means we need to do most, if not all, of the work we would need to do for ADT enums to ensure we have consistency across multiple other language features such as pattern matching.","msgtype":"m.text"},"ts":1643155816383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6PbQBRqn-doihkLDsu5UgZYzQ3eR1CmRiukaZUwyNY8"},
{"content":{"body":"Thanks, ljharb! ","format":"org.matrix.custom.html","formatted_body":"Thanks, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>!","msgtype":"m.text"},"ts":1643155841192,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$CsUXzc0CHy9FylEne5TacmsVPoRx0AzHbQb88f66hfc"},
{"content":{"body":"rbuckton: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","msgtype":"m.text"},"ts":1643156099610,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$81VZa15sricB-Jo2Pr4iu_Nw3fDRTE57qcojj09EgFU"},
{"content":{"body":"> <@jridgewell:matrix.org> I do recursion all the time.\n\nTo give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I do recursion all the time.</blockquote></mx-reply>To give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","m.relates_to":{"m.in_reply_to":{"event_id":"$NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM"}},"msgtype":"m.text"},"ts":1643156964062,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3fJqBoBuPhCA9g-aNdkHYbLebPHEwQ3KACyXm-tp328"},
{"content":{"body":"With or without PTC…","msgtype":"m.text"},"ts":1643156981483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-d-CgFGqixG0bLqqYmlEluvnCIuZS6IPX3gQhhM-vPk"},
{"content":{"body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on `node.kind` in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a `.kind`. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for `Node` instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","format":"org.matrix.custom.html","formatted_body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on <code>node.kind</code> in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a <code>.kind</code>. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for <code>Node</code> instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","msgtype":"m.text"},"ts":1643157389949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$94NIfMzkj5dXHSZgP26ftgBLqgvpWceFVgg0rQBaEa8"},
{"content":{"body":"There's a convenience factor for ADT enums coupled with something like Scala's \"Extractor Objects\" and pattern matching that is extremely interesting to me, but that's nowhere near as compelling to me as possible performance benefits.","msgtype":"m.text"},"ts":1643157547313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J8IK7V5tnuKG80C6t4xjPtxO7tI-NI2I0Xy3_dPUSQI"},
{"content":{"body":"rbuckton: a dirty hack proposal... if the `.kind` property is special and you want to avoid the megamorphic de-opt, couldn't you rename it to be index zero?  `node[0]`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: a dirty hack proposal... if the <code>.kind</code> property is special and you want to avoid the megamorphic de-opt, couldn't you rename it to be index zero?  <code>node[0]</code>","msgtype":"m.text"},"ts":1643157645527,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$7gOMmvH92M3kjCchpOFqjq70AZtuluegSjB_MIuzvBA"},
{"content":{"body":"Does that work? I'd happily turn `kind` into a getter that just reads `this[0]` (for API compatibility) and replace all `node.kind` references in the compiler if that would actually improve performance.","format":"org.matrix.custom.html","formatted_body":"Does that work? I'd happily turn <code>kind</code> into a getter that just reads <code>this[0]</code> (for API compatibility) and replace all <code>node.kind</code> references in the compiler if that would actually improve performance.","msgtype":"m.text"},"ts":1643157805040,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZhLn2187vz79nW0BDuJGgmKLmuI8N0z5ed8m_znQvlw"},
{"content":{"body":"I'm not 100% sure but seem to recall the V8 object layout for elements permits direct lookups not based on the map type.  If only we had someone who knew V8 here...","msgtype":"m.text"},"ts":1643157895120,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$zMD3O3nEwOD5YBjkI-JHTevanZc1LtNiwy53N20uvc0"},
{"content":{"body":"by my reading keyed loads like [0] also checks receiver maps","msgtype":"m.text"},"ts":1643158134546,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VV4f0YAbNxwiqET8ca95Lckl4DLCc4xVf-13RNmY4Fg"},
{"content":{"body":"I wonder how off the “# of kinds of nodes in ts” is from the upper limit in v8 for optimization ","format":"org.matrix.custom.html","formatted_body":"I wonder how off the “# of kinds of nodes in ts” is from the upper limit in v8 for optimization","msgtype":"m.text"},"ts":1643158263717,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$5WLl53fbqcrx-sg9pdITYz9yem9XzvL7_i2-q8YV6So"},
{"content":{"body":"alternatively just rewrite it in go","msgtype":"m.text"},"ts":1643158293466,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$clBV0PlFXykvESQOMy56OG0RU_f4zMMI0WkiQq9w-TI"},
{"content":{"body":"(this is a reference to https://kdy1.dev/posts/2022/1/tsc-go, not a serious proposal)","msgtype":"m.text"},"ts":1643158318416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qwXe2VuBuqckht4kP3QjMWwUZTOhI7oqZLej8qU7UGM"},
{"content":{"body":"i think if you want speed what you want is C","msgtype":"m.text"},"ts":1643158348116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9-rMEoYjs6wToaD6B3D5T9VWoQ-UolM2nLfLaOHLhTI"},
{"content":{"body":"you never want c under any circumstances whatsoever","msgtype":"m.text"},"ts":1643158364714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9fGIKyKYChJ6dA4ONAOQrgsm2sPAopiTLoQCMJto08Q"},
{"content":{"body":"except writing aviation code with the very constrained dialect they use plus all of their static analysis tools I suppose","msgtype":"m.text"},"ts":1643158383340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UsJM37tZiXnlBrtNyvf20vkPyyp3HT1eIGh7ugz0IWI"},
{"content":{"body":"and even then it's less \"want\" than \"have no legal alternative\"","msgtype":"m.text"},"ts":1643158398644,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n6LefjxLW4Q8QtNuJ7rfJ8vaqcTlcsFViOt63bc539s"},
{"content":{"body":"it is when we are constrained by the law that we are at our most creative","msgtype":"m.text"},"ts":1643158458600,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wxImg1cpoINNmUr7AqLy7bhD59EsMq3Wxus_qfktCYU"},
{"content":{"body":"doubt","msgtype":"m.text"},"ts":1643158475032,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sC7HiwWEbEXmjUrtz5NhrI3yp5xlncmlW4UWC9QPxi4"},
{"content":{"body":"rbuckton: shu this microbenchmark suggests megamorphic access to index properties is 3x faster than the same for string properties https://esbench.com/bench/61f099d96c89f600a570158a","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> this microbenchmark suggests megamorphic access to index properties is 3x faster than the same for string properties https://esbench.com/bench/61f099d96c89f600a570158a","msgtype":"m.text"},"ts":1643160205342,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xoQf7vnJ4XfXwEzdbDgEsjQRym80TpC5-I3EQ24pbX8"},
{"content":{"body":"oh wow - Axel Rauschmeyer has taken Dean Tribble's Proxy trick and blogged about it within 90mins of learning it...  https://2ality.com/2022/01/symbol-factory.html","msgtype":"m.text"},"ts":1643160495875,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$R4o4RFb0spy33NILZkBszL90NjbngeRgI2IdBqh9sKw"},
{"content":{"body":"We tried to improve perf by ensuring that frequently-used fields like `kind`, `pos`, `end`, and `flags` are all stored in-object:\n```\n000003E4E0E47A91: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 160\n - inobject properties: 17\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 7\n - enum length: invalid\n - stable_map\n - back pointer: 0x03e4e0e47a49 <Map(HOLEY_ELEMENTS)>\n - prototype_validity cell: 0x034eb1241659 <Cell value= 1>\n - instance descriptors (own) #11: 0x012f0b6cfb21 <DescriptorArray[11]>\n - prototype: 0x012f0b6cf441 <Object map = 000003E4E0E47779>\n - constructor: 0x013a75523b41 <JSFunction Node (sfi = 00000353F65D5C41)>\n - dependent code: 0x020140ac1281 <Other heap object (WEAK_FIXED_ARRAY_TYPE)>\n - construction counter: 6\n\n  [0]: 00000378FA033E49: [String] in OldSpace: #pos (const data field 0:s, p: 7, attrs: [WEC]) @ Any\n  [1]: 0000009B539BD2B9: [String] in OldSpace: #end (const data field 1:s, p: 1, attrs: [WEC]) @ Any\n  [2]: 0000028DD0EF42B9: [String] in OldSpace: #kind (const data field 2:s, p: 3, attrs: [WEC]) @ Any\n  [3]: 0000007EABDD4071: [String] in OldSpace: #id (const data field 3:s, p: 9, attrs: [WEC]) @ Any\n  [4]: 0000020140AC45D1: [String] in ReadOnlySpace: #flags (const data field 4:s, p: 8, attrs: [WEC]) @ Any\n  [5]: 0000036E885DE309: [String] in OldSpace: #modifierFlagsCache (const data field 5:s, p: 10, attrs: [WEC]) @ Any\n  [6]: 000001B37FD2DA09: [String] in OldSpace: #transformFlags (const data field 6:s, p: 0, attrs: [WEC]) @ Any\n  [7]: 0000007EABDC4B09: [String] in OldSpace: #parent (const data field 7:h, p: 6, attrs: [WEC]) @ Any\n  [8]: 00000378FA0349F1: [String] in OldSpace: #original (const data field 8:h, p: 5, attrs: [WEC]) @ Any\n  [9]: 000001B37FD2D511: [String] in OldSpace: #decorators (const data field 9:h, p: 4, attrs: [WEC]) @ Any\n  [10]: 000001B37FD24099: [String] in OldSpace: #modifiers (const data field 10:h, p: 2, attrs: [WEC]) @ Any\n```","format":"org.matrix.custom.html","formatted_body":"<p>We tried to improve perf by ensuring that frequently-used fields like <code>kind</code>, <code>pos</code>, <code>end</code>, and <code>flags</code> are all stored in-object:</p>\n<pre><code>000003E4E0E47A91: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 160\n - inobject properties: 17\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 7\n - enum length: invalid\n - stable_map\n - back pointer: 0x03e4e0e47a49 &lt;Map(HOLEY_ELEMENTS)&gt;\n - prototype_validity cell: 0x034eb1241659 &lt;Cell value= 1&gt;\n - instance descriptors (own) #11: 0x012f0b6cfb21 &lt;DescriptorArray[11]&gt;\n - prototype: 0x012f0b6cf441 &lt;Object map = 000003E4E0E47779&gt;\n - constructor: 0x013a75523b41 &lt;JSFunction Node (sfi = 00000353F65D5C41)&gt;\n - dependent code: 0x020140ac1281 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;\n - construction counter: 6\n\n  [0]: 00000378FA033E49: [String] in OldSpace: #pos (const data field 0:s, p: 7, attrs: [WEC]) @ Any\n  [1]: 0000009B539BD2B9: [String] in OldSpace: #end (const data field 1:s, p: 1, attrs: [WEC]) @ Any\n  [2]: 0000028DD0EF42B9: [String] in OldSpace: #kind (const data field 2:s, p: 3, attrs: [WEC]) @ Any\n  [3]: 0000007EABDD4071: [String] in OldSpace: #id (const data field 3:s, p: 9, attrs: [WEC]) @ Any\n  [4]: 0000020140AC45D1: [String] in ReadOnlySpace: #flags (const data field 4:s, p: 8, attrs: [WEC]) @ Any\n  [5]: 0000036E885DE309: [String] in OldSpace: #modifierFlagsCache (const data field 5:s, p: 10, attrs: [WEC]) @ Any\n  [6]: 000001B37FD2DA09: [String] in OldSpace: #transformFlags (const data field 6:s, p: 0, attrs: [WEC]) @ Any\n  [7]: 0000007EABDC4B09: [String] in OldSpace: #parent (const data field 7:h, p: 6, attrs: [WEC]) @ Any\n  [8]: 00000378FA0349F1: [String] in OldSpace: #original (const data field 8:h, p: 5, attrs: [WEC]) @ Any\n  [9]: 000001B37FD2D511: [String] in OldSpace: #decorators (const data field 9:h, p: 4, attrs: [WEC]) @ Any\n  [10]: 000001B37FD24099: [String] in OldSpace: #modifiers (const data field 10:h, p: 2, attrs: [WEC]) @ Any\n</code></pre>\n","msgtype":"m.text"},"ts":1643160500947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LaIARkvQFPAil_ILST4_YyZTOa4BXxvV_TXErVF7_i0"},
{"content":{"body":"that should save you a load, yeah","msgtype":"m.text"},"ts":1643160961747,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LELjxAZ3LFOdT2iqPI6noYFL0DewNgGLNs_IP0CAIAo"},
{"content":{"body":"there's a spam comment on an ecma262 PR, what should I do?","msgtype":"m.text"},"ts":1643162318099,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0kBJjOt9jc_ATucgNdOw03-o1e75Ofl179RH0vQhimo"},
{"content":{"body":"You should take a look at closure compilers AST layout","msgtype":"m.text"},"ts":1643162329574,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hhFUlH8condyN4mQbVeTwDLne8S9udT15m5r1ClMXrY"},
{"content":{"body":"Everything is firstchild lastchild nextchild","msgtype":"m.text"},"ts":1643162358172,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sMvmYTYv6Uzw1v4AucITovnFeZsyhhgdArJlNijkhvM"},
{"content":{"body":"Can’t have megamorphic access if everything has the exact same properties","msgtype":"m.text"},"ts":1643162381215,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$r_uQa3JWGYH6_XDj5z9x6BfqvC9ZdG5piNnO7s1cXPk"},
{"content":{"body":"jschoi: I double checked `Array.fromAsync`, and since the content of the `[[Iterator]]` slot is never revealed to user code, the async iterator wrapper prototype is still spec internal only. It sure would be nice to have a way to explicitly note this, so that these internal only things don't get surprisingly exposed without anyone noticing in the future!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I double checked <code>Array.fromAsync</code>, and since the content of the <code>[[Iterator]]</code> slot is never revealed to user code, the async iterator wrapper prototype is still spec internal only. It sure would be nice to have a way to explicitly note this, so that these internal only things don't get surprisingly exposed without anyone noticing in the future!","msgtype":"m.text"},"ts":1643163528899,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GXfRAWRrJFp_TaHpCfOFFiso4u1kXfWRBf_iRk5kzfU"},
{"content":{"body":"Mathieu Hofman: do you mean like the note at https://tc39.es/ecma262/#sec-createlistiteratorRecord ?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: do you mean like the note at https://tc39.es/ecma262/#sec-createlistiteratorRecord ?","msgtype":"m.text"},"ts":1643165202441,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$zvxp2FUOYOpGklEndKK-ALudUCx7Vqd-_yIc6-RbqfU"},
{"content":{"body":"I suppose, but these things can be lost transitively. First, the `CreateAsyncFromSyncIterator` doesn't have this annotation. Second, really it seems that `GetIterator` creates a record for an iterator (possibly coming from user code, possibly internally built through `CreateAsyncFromSyncIterator`), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","format":"org.matrix.custom.html","formatted_body":"I suppose, but these things can be lost transitively. First, the <code>CreateAsyncFromSyncIterator</code> doesn't have this annotation. Second, really it seems that <code>GetIterator</code> creates a record for an iterator (possibly coming from user code, possibly internally built through <code>CreateAsyncFromSyncIterator</code>), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","msgtype":"m.text"},"ts":1643166508895,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8DaTM045v9vK-XW4PqoLHmGt5Oj2nCO-8-8zKZwj4OE"},
{"content":{"body":" * I suppose, but these things can be lost transitively. First, the `CreateAsyncFromSyncIterator` doesn't have this annotation. Second, really it seems that `GetIterator` creates a record for an iterator (possibly coming from user code, possibly internally built through `CreateAsyncFromSyncIterator`), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","format":"org.matrix.custom.html","formatted_body":" * I suppose, but these things can be lost transitively. First, the <code>CreateAsyncFromSyncIterator</code> doesn't have this annotation. Second, really it seems that <code>GetIterator</code> creates a record for an iterator (possibly coming from user code, possibly internally built through <code>CreateAsyncFromSyncIterator</code>), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","m.new_content":{"body":"I suppose, but these things can be lost transitively. First, the `CreateAsyncFromSyncIterator` doesn't have this annotation. Second, really it seems that `GetIterator` creates a record for an iterator (possibly coming from user code, possibly internally built through `CreateAsyncFromSyncIterator`), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","format":"org.matrix.custom.html","formatted_body":"I suppose, but these things can be lost transitively. First, the <code>CreateAsyncFromSyncIterator</code> doesn't have this annotation. Second, really it seems that <code>GetIterator</code> creates a record for an iterator (possibly coming from user code, possibly internally built through <code>CreateAsyncFromSyncIterator</code>), but while that record transits through a lot of place, the iterator it contains is seemingly never exposed to user code. It's a weird invariant that is not well understood","msgtype":"m.text"},"m.relates_to":{"event_id":"$8DaTM045v9vK-XW4PqoLHmGt5Oj2nCO-8-8zKZwj4OE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643166522191,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CP5nnYtTcnlN-qwu3Gs7hUK0mWulMID5zlziXdH1kbg"},
{"content":{"body":"> <@jridgewell:matrix.org> Can’t have megamorphic access if everything has the exact same properties\n\nI though location of the initial object creation matters too; for some engines where the hidden-class graph is a forest and not a tree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24r_uQa3JWGYH6_XDj5z9x6BfqvC9ZdG5piNnO7s1cXPk\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Can’t have megamorphic access if everything has the exact same properties</blockquote></mx-reply>I though location of the initial object creation matters too; for some engines where the hidden-class graph is a forest and not a tree","m.relates_to":{"m.in_reply_to":{"event_id":"$r_uQa3JWGYH6_XDj5z9x6BfqvC9ZdG5piNnO7s1cXPk"}},"msgtype":"m.text"},"ts":1643177208377,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nwF2C-TIDBxvmbKfeMPSPmvc2eEuq5bqY_yGccCKAgU"},
{"content":{"body":"> <@jridgewell:matrix.org> Can anyone give a demonstration of ADT without using pattern matching?\n\nthat's depends on the semantics of ADT enum but it doesn't have a runtime semantics specified yet so I cannot give an example sorry","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SdmYqMfR8Gk5wS-GAqSLjChkGcKhyLdOsZlW-4LkNJ8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Can anyone give a demonstration of ADT without using pattern matching?</blockquote></mx-reply>that's depends on the semantics of ADT enum but it doesn't have a runtime semantics specified yet so I cannot give an example sorry","m.relates_to":{"m.in_reply_to":{"event_id":"$SdmYqMfR8Gk5wS-GAqSLjChkGcKhyLdOsZlW-4LkNJ8"}},"msgtype":"m.text"},"ts":1643206691121,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$BMOzPOyqG3rnQJ7Z1bpk6jM9JyF1A0aWCGjlm93ohc0"},
{"content":{"body":"jschoi: fair, but i hope you're not suggesting that writing a parser is anywhere remotely near a common use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: fair, but i hope you're not suggesting that writing a parser is anywhere remotely near a common use case","msgtype":"m.text"},"ts":1643216269129,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8iFH9lPhl3t2rjeHEJNSkABoGOMSQbmSBDjxnFNR8aU"},
{"content":{"body":"ljharb: parsers are everywhere","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: parsers are everywhere","msgtype":"m.text"},"ts":1643216547098,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qPaPifNqxy0nDyWGMfnLZ4BGKOOr1kVbmolFJ7DicPQ"},
{"content":{"body":"people are writing parsers all the time, whether they know it or not","msgtype":"m.text"},"ts":1643216569643,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$piNrH9lBgaiyoCoEcvr8o9r6e0FdT1DoK3PKZC9g9pA"},
{"content":{"body":"most are simple and can be expressed as a regexp or a series of regexps","msgtype":"m.text"},"ts":1643216584535,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$F9XbaA23v1d548HdREbwqBhgim4qQ2vhjgQ7NpCT5gs"},
{"content":{"body":"that sounds like either a really bold claim, or one so broad as to dissolve the context","msgtype":"m.text"},"ts":1643216592136,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NapqDoLgqIJpXaqMnaaBU_HJ2o12C-8qDy7iV-1tkk0"},
{"content":{"body":"\"writing a parser where recursion makes sense\" is not a common use case.","msgtype":"m.text"},"ts":1643216610772,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qqoqguJ8pmPxpHdINchGxMx9t3Mz8-NhZZQ6675f0As"},
{"content":{"body":"parsing is turning something less-structured into something more-structured","msgtype":"m.text"},"ts":1643216616144,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wk8S_BhBDp9y54pIKaj0C2bG3627UjC3ie-3M3n345c"},
{"content":{"body":" * \"writing a parser where recursion makes sense\" is not a common use case.","m.new_content":{"body":"\"writing a parser where recursion makes sense\" is not a common use case.","msgtype":"m.text"},"m.relates_to":{"event_id":"$qqoqguJ8pmPxpHdINchGxMx9t3Mz8-NhZZQ6675f0As","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643216626898,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ceWUqPaxMiGCs8Vl7scqoYRyGizAdDWFlqSqbdKY3Kc"},
{"content":{"body":"Yeah. It doesn’t even have to be on text input but any sequence of values. ","format":"org.matrix.custom.html","formatted_body":"Yeah. It doesn’t even have to be on text input but any sequence of values.","msgtype":"m.text"},"ts":1643216657599,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$n5S2r-T6gSJHkxZnXHZQj1cjW7_clZUNGWTx_6p0PN0"},
{"content":{"body":"so parsing is anything that fights the entropy of the universe, gotcha","msgtype":"m.text"},"ts":1643216657740,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uCH3pgULtQV-dAjQXrU3MP49-8AQEpSj6b9jnmv5nUE"},
{"content":{"body":"* Yeah. It doesn’t even have to be on text input but any sequence of values. ","format":"org.matrix.custom.html","formatted_body":"* Yeah. It doesn’t even have to be on text input but any sequence of values.","m.new_content":{"body":"Yeah. It doesn’t even have to be on text input but any sequence of values. ","format":"org.matrix.custom.html","formatted_body":"Yeah. It doesn’t even have to be on text input but any sequence of values.","msgtype":"m.text"},"m.relates_to":{"event_id":"$n5S2r-T6gSJHkxZnXHZQj1cjW7_clZUNGWTx_6p0PN0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643216672665,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bsMOI2WiOg7f_KC8jGU5SUsa9w3m2PsCuXU4C_fs7VQ"},
{"content":{"body":"when i grow hair, i'm parsing?","msgtype":"m.text"},"ts":1643216678679,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fW3hi4UVYkw1Ow_KQ53z63t9xpbGF_m6NKFD41zXkuA"},
{"content":{"body":"in the context we're discussing things, \"writing a parser\" such that you'd reach for recursion is simply not a common use case","msgtype":"m.text"},"ts":1643216706376,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D22ijOaTKjfb9jjz4UmjPsejnMEOma_d8ydYY28lWw8"},
{"content":{"body":"JSON validation is parsing, for example.","msgtype":"m.text"},"ts":1643216718299,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BLKYoEhosT22YnIJXg1_ZbnGZqbdDgL-38aTyTXGLJk"},
{"content":{"body":"i don't need recursion for that tho.","msgtype":"m.text"},"ts":1643216728503,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FY5U88a58GlNqgUtHttLRqHQiZAo9fLhepsdW8t_1MA"},
{"content":{"body":"Hm, is recursion not required to validate many JSON structures? After all, many JSON schemata are recursive.","msgtype":"m.text"},"ts":1643216770449,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nH9GWzJMrAIwAKMCY-bwC7OR6cAKDkHtBMLU9HSv-Ag"},
{"content":{"body":"i'm sure a JSONSchema validator may be recursive, sure. but most people don't write those, they just consume them","msgtype":"m.text"},"ts":1643216802961,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sVCfRJYJu3G4R2e8T5PwhdlIxVwgfi-WOSc7sCR9cB8"},
{"content":{"body":"i'm not trying to claim that parsers don't affect a lot of devs. i'm saying that most devs don't author them.","msgtype":"m.text"},"ts":1643216833604,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YzJxwXHyMTurPkpEYYPr_wL3sTZmppJuIHYSLDgc4u4"},
{"content":{"body":"in the same way as \"get intrinsics\" affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's *not common*)","format":"org.matrix.custom.html","formatted_body":"in the same way as &quot;get intrinsics&quot; affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's <em>not common</em>)","msgtype":"m.text"},"ts":1643216872057,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AIWo26PsgrFXt3T4S9jFQHfGA-YOYoY7QD7_vg0BmQg"},
{"content":{"body":" * in the same way as \"get intrinsics\" affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's *not common*)","format":"org.matrix.custom.html","formatted_body":" * in the same way as &quot;get intrinsics&quot; affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's <em>not common</em>)","m.new_content":{"body":"in the same way as \"get intrinsics\" affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's *not common*)","format":"org.matrix.custom.html","formatted_body":"in the same way as &quot;get intrinsics&quot; affects a lot of devs, but most devs don't need to do that directly. and both are relevant when weighing the importance of including syntactic affordances in the language (which is why i'm not trying to pursue syntax for getting intrinsics - because it's <em>not common</em>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$AIWo26PsgrFXt3T4S9jFQHfGA-YOYoY7QD7_vg0BmQg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643216888686,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5_Q70Ie83wqQ5mnPsU9-oP5H4WCGmW5YiC869EUfaMY"},
{"content":{"body":"Yeah, it may be that because I’m familiar with them, I reach for them more readily than most developers.","msgtype":"m.text"},"ts":1643216910273,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GraVDpAlRb9K76nQkp4BclBzF3e-7H_vPW7jeCx7LYY"},
{"content":{"body":"But I do know I write a lot of ad-hoc parsers to validate stuff.","msgtype":"m.text"},"ts":1643216919839,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-Y74IBvMBoF7lWBiN0LdhU63rdOF8QSuwsrwVStXCfw"},
{"content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the latter).","msgtype":"m.text"},"ts":1643216933822,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk"},
{"content":{"body":"As I can recall from some of my friends, \"it's very hard to find some candidates that understand what is recursion\" ","msgtype":"m.text"},"ts":1643216939370,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kHpWRq4zNJZTPIrTA-noaAS2whBjkI4b5rKdIl9VFRg"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines…and, before that, the Unicode Character Database’s source text files.","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines…and, before that, the Unicode Character Database’s source text files.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643216955032,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$8wwzipgZrRgHYCKDVfP8j0TxRYP84PO1YUeSwoaCIjg"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the latter).","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the latter).","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643216979137,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$03XoxdagXkscGWtw3J-bZuIhhCJYZInslcgJWR6vdgI"},
{"content":{"body":"* But I do know I write a lot of ad-hoc parsers to validate stuff—both textual and non-textual.","m.new_content":{"body":"But I do know I write a lot of ad-hoc parsers to validate stuff—both textual and non-textual.","msgtype":"m.text"},"m.relates_to":{"event_id":"$-Y74IBvMBoF7lWBiN0LdhU63rdOF8QSuwsrwVStXCfw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217025511,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zVTCdhzSDM5tYEobUB9eI824eYCrodOlVdaCkqhQ07Y"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the latter).","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the latter).","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217047343,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aayjaXm2hS29QC1BCfXbVm3gvnCFi04Ndgf_lhygG4c"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217057524,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$OsikW-K18KqYS87FNvwloGJAi8bvbBth4Lk8EtXQS1Q"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).\n\nRegexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.","format":"org.matrix.custom.html","formatted_body":"* <p>Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).</p>\n<p>Regexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.</p>","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).\n\nRegexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.","format":"org.matrix.custom.html","formatted_body":"<p>Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON input from a hospital’s record system…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).</p>\n<p>Regexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217122879,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fbM1teFgZTGXV01_xqdYHrFugMpvH-R75Orj49v4Hj4"},
{"content":{"body":"* Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON data from a hospital’s record system containing entities within entities…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).\n\nRegexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.","format":"org.matrix.custom.html","formatted_body":"* <p>Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON data from a hospital’s record system containing entities within entities…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).</p>\n<p>Regexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.</p>","m.new_content":{"body":"Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON data from a hospital’s record system containing entities within entities…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).\n\nRegexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.","format":"org.matrix.custom.html","formatted_body":"<p>Just the other day, I had to write an ad-hoc parser for some custom-formatted text file’s lines, as well as some JSON data from a hospital’s record system containing entities within entities…and, before that, the Unicode Character Database’s source text files (though recursion wasn’t necessary for the last one).</p>\n<p>Regexes are super common, but I often need more power than regular expressions…and I often need to apply them to non-textual input.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$gY0NRloOqYXWHLU0KsWvFR0tm3sBQ8kqgLwNOzWfCFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217141722,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0LPkEwuLZSrBNtxA8IsYXrG2VmwXOVyCPNEG9MDXSZY"},
{"content":{"body":"i have the opposite experience - i have interviewed _thousands_ of candidates over the years who are incapable of NOT using recursion, since they were indoctrinated with it in university. our hiring panels always reject those, because recursion is often the wrong tool for the job, at least in frontend.","format":"org.matrix.custom.html","formatted_body":"i have the opposite experience - i have interviewed <em>thousands</em> of candidates over the years who are incapable of NOT using recursion, since they were indoctrinated with it in university. our hiring panels always reject those, because recursion is often the wrong tool for the job, at least in frontend.","msgtype":"m.text"},"ts":1643217161006,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YJBvNoC7S0-V00YUEIEtjPxhBlH74UZ7M_hPClsPTHg"},
{"content":{"body":"at any rate, i'm not trying to debate the value of use cases/parsers or techniques/recursion, just that i strongly believe it's an uncommon combination.","msgtype":"m.text"},"ts":1643217201295,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zl4-KZC0L3nUQXl_djNQkW_ZPWMRCX6uW07FeykQul8"},
{"content":{"body":"Yeah. I agree (I think get intrinsics are useful for a very limited set of people including me, but doubt if it worth an API)","msgtype":"m.text"},"ts":1643217342099,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$t8OLocz7bKGwv514YzDOURN2X1iVsRBJhkUcOqyowO4"},
{"content":{"body":"to be clear, i think getting intrinsics is worth an API (hence the proposal), but decidedly not worth syntax.","msgtype":"m.text"},"ts":1643217389429,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WjmBPCzWzn_GpAa2r3qhI-75PkreonPGufhlGIFsJ5o"},
{"content":{"body":" * to be clear, i think getting intrinsics is worth an API (hence the proposal), but decidedly not worth syntax.","m.new_content":{"body":"to be clear, i think getting intrinsics is worth an API (hence the proposal), but decidedly not worth syntax.","msgtype":"m.text"},"m.relates_to":{"event_id":"$WjmBPCzWzn_GpAa2r3qhI-75PkreonPGufhlGIFsJ5o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643217397380,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Py_HbamTboWgASIwkY5omd248javDs9gif3SZ2e2U8c"},
{"content":{"body":"the context from before was about functions having an immutable binding for their own name but lacking a `function.self` metakeyword, or similar - as compared to `class.self` or similar, where i think the use case is much more common.","format":"org.matrix.custom.html","formatted_body":"the context from before was about functions having an immutable binding for their own name but lacking a <code>function.self</code> metakeyword, or similar - as compared to <code>class.self</code> or similar, where i think the use case is much more common.","msgtype":"m.text"},"ts":1643217444010,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xyZX5DN0TE4t2wMm-HubSxJ11gLFyl-BfZnfDUxrZjk"},
{"content":{"body":"(i'd be _fine_ with `function.self` and `class.self` both, ofc, but i think the former would be much more rarely used)","format":"org.matrix.custom.html","formatted_body":"(i'd be <em>fine</em> with <code>function.self</code> and <code>class.self</code> both, ofc, but i think the former would be much more rarely used)","msgtype":"m.text"},"ts":1643217471917,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fbzt_ifoQdC8wW_Kbn9jkoTx6PwExqLHCTYdJEMn4Og"},
{"content":{"body":"Hmm. Inside a named function, is the name mutable? ","msgtype":"m.text"},"ts":1643217569913,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6-8xo4T9-4o00tded8ZepVoKKLSc7zCdQ8dSHdDXSUc"},
{"content":{"body":"Jack Works: If you scroll up, we discussed that. Apparently it is immutable but does not error if you try to assign to it. The assignment just does nothing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: If you scroll up, we discussed that. Apparently it is immutable but does not error if you try to assign to it. The assignment just does nothing.","msgtype":"m.text"},"ts":1643218218950,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$p-hKVB6EiHhXjlCzxm7dahn47qcGoLsYdBoHsW25AiI"},
{"content":{"body":"even in strict mode? (edit: checked, and yes, even in strict mode; that is super weird)","msgtype":"m.text"},"ts":1643218269835,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K6eKeUv7Bb6D9y7gOjB2D4neJ7xrhUH7wFapfJdeBh4"},
{"content":{"body":" * even in strict mode? (edit: checked, and yes, even in strict mode; that is super weird)","m.new_content":{"body":"even in strict mode? (edit: checked, and yes, even in strict mode; that is super weird)","msgtype":"m.text"},"m.relates_to":{"event_id":"$K6eKeUv7Bb6D9y7gOjB2D4neJ7xrhUH7wFapfJdeBh4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643218411457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HOIqlzga-ubvA2O-jF6xAxWDEjytaoD5IXyP9SPPg2M"},
{"content":{"body":"it is an ur-const","msgtype":"m.text"},"ts":1643218464581,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ul59f_ndUS4nkdCpUeMrFsz1b7RNJ6WqVta3CgD5dEA"},
{"content":{"body":"all these years, I just thought it was mutable","msgtype":"m.text"},"ts":1643218565730,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XF7xi8bn3eD1muZy5E7yme6rNinET57gwkVz7YYabU4"}
]