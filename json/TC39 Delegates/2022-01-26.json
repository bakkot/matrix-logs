[
{"content":{"body":"enums-as-constants isn't orthogonal to ADT enums.","msgtype":"m.text"},"ts":1643155254073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-0il3lVEjHzmPA5ovYofk4NRsY57IQWPHqTlGKA7Uao"},
{"content":{"body":"https://matrix.to/#/!vofPwuBJgbSdyEilYo:matrix.org?via=matrix.org\nWelcome to join the chat if you have interest in working on this together. ⭐\n\nThis is NOT a tc39 group cause it didn't reach stage 1, it's a public group but not following the ECMA policy (logged and published). I'll create an official group like pattern matching and pipeline after it reaches stage 1.","msgtype":"m.text"},"ts":1643155339976,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ht2iR4fAC2NHfIJwq3cRr2hhE8JxyjRnbmp-UU6zK9M"},
{"content":{"body":"we can probably make it an official group if the chairs choose so","msgtype":"m.text"},"ts":1643155481893,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E"},
{"content":{"body":" * we can probably make it an official group if the chairs decide that","m.new_content":{"body":"we can probably make it an official group if the chairs decide that","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643155507117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2S2FPjVu7ZmZsbP2ITE-pE63eAwAi3k3CKHqDwHXYE0"},
{"content":{"body":"rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases","msgtype":"m.text"},"ts":1643155671168,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases\n\nEven if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases</blockquote></mx-reply>Even if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","m.relates_to":{"m.in_reply_to":{"event_id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"}},"msgtype":"m.text"},"ts":1643155716367,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PPzMiGeMFxFCVCCQCe8bq-Ek_vCtQSSskg8qeeybI3E"},
{"content":{"body":"I think we have the ability to do that though","msgtype":"m.text"},"ts":1643155738605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zyqb6Gz-QvWhkqzfppH_aRP3x-9clPpvcdZw1dzjU6k"},
{"content":{"body":"Rob Palmer, yulia my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>, <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","msgtype":"m.text"},"ts":1643155744781,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$RFJQYpXEDzKCWe5rodek8f-8L-ZIu9Nui6iG96Ws_RU"},
{"content":{"body":"leobalter: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","msgtype":"m.text"},"ts":1643155808157,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$11Aza_VZ_1rhHxpSfaOHdu1jvw2oUu5fMP5hJAf6Cgk"},
{"content":{"body":"Which means we need to do most, if not all, of the work we would need to do for ADT enums to ensure we have consistency across multiple other language features such as pattern matching.","msgtype":"m.text"},"ts":1643155816383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6PbQBRqn-doihkLDsu5UgZYzQ3eR1CmRiukaZUwyNY8"},
{"content":{"body":"Thanks, ljharb! ","format":"org.matrix.custom.html","formatted_body":"Thanks, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>!","msgtype":"m.text"},"ts":1643155841192,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$CsUXzc0CHy9FylEne5TacmsVPoRx0AzHbQb88f66hfc"},
{"content":{"body":"rbuckton: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","msgtype":"m.text"},"ts":1643156099610,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$81VZa15sricB-Jo2Pr4iu_Nw3fDRTE57qcojj09EgFU"},
{"content":{"body":"> <@jridgewell:matrix.org> I do recursion all the time.\n\nTo give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I do recursion all the time.</blockquote></mx-reply>To give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","m.relates_to":{"m.in_reply_to":{"event_id":"$NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM"}},"msgtype":"m.text"},"ts":1643156964062,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3fJqBoBuPhCA9g-aNdkHYbLebPHEwQ3KACyXm-tp328"},
{"content":{"body":"With or without PTC…","msgtype":"m.text"},"ts":1643156981483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-d-CgFGqixG0bLqqYmlEluvnCIuZS6IPX3gQhhM-vPk"},
{"content":{"body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on `node.kind` in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a `.kind`. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for `Node` instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","format":"org.matrix.custom.html","formatted_body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on <code>node.kind</code> in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a <code>.kind</code>. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for <code>Node</code> instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","msgtype":"m.text"},"ts":1643157389949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$94NIfMzkj5dXHSZgP26ftgBLqgvpWceFVgg0rQBaEa8"},
{"content":{"body":"There's a convenience factor for ADT enums coupled with something like Scala's \"Extractor Objects\" and pattern matching that is extremely interesting to me, but that's nowhere near as compelling to me as possible performance benefits.","msgtype":"m.text"},"ts":1643157547313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J8IK7V5tnuKG80C6t4xjPtxO7tI-NI2I0Xy3_dPUSQI"}
]