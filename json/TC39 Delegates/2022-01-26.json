[
{"content":{"body":"enums-as-constants isn't orthogonal to ADT enums.","msgtype":"m.text"},"ts":1643155254073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-0il3lVEjHzmPA5ovYofk4NRsY57IQWPHqTlGKA7Uao"},
{"content":{"body":"https://matrix.to/#/!vofPwuBJgbSdyEilYo:matrix.org?via=matrix.org\nWelcome to join the chat if you have interest in working on this together. ⭐\n\nThis is NOT a tc39 group cause it didn't reach stage 1, it's a public group but not following the ECMA policy (logged and published). I'll create an official group like pattern matching and pipeline after it reaches stage 1.","msgtype":"m.text"},"ts":1643155339976,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ht2iR4fAC2NHfIJwq3cRr2hhE8JxyjRnbmp-UU6zK9M"},
{"content":{"body":"we can probably make it an official group if the chairs choose so","msgtype":"m.text"},"ts":1643155481893,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E"},
{"content":{"body":" * we can probably make it an official group if the chairs decide that","m.new_content":{"body":"we can probably make it an official group if the chairs decide that","msgtype":"m.text"},"m.relates_to":{"event_id":"$Q4vlijlWujIXtJPU8pFMtVLZz3thF-QXF10kgy4Se3E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643155507117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2S2FPjVu7ZmZsbP2ITE-pE63eAwAi3k3CKHqDwHXYE0"},
{"content":{"body":"rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases","msgtype":"m.text"},"ts":1643155671168,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I agree, but I also think it wouldn't do any harm to pursue it in two phases\n\nEven if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I agree, but I also think it wouldn't do any harm to pursue it in two phases</blockquote></mx-reply>Even if we pursue it in two phases, we need to consider how ADT enums need to function to ensure we don't paint ourselves into a corner with non-ADT enums.","m.relates_to":{"m.in_reply_to":{"event_id":"$3kHeKRHlhy8OvS2cACLsh00Zv0S-PCY_TpSvkrrF3uU"}},"msgtype":"m.text"},"ts":1643155716367,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PPzMiGeMFxFCVCCQCe8bq-Ek_vCtQSSskg8qeeybI3E"},
{"content":{"body":"I think we have the ability to do that though","msgtype":"m.text"},"ts":1643155738605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zyqb6Gz-QvWhkqzfppH_aRP3x-9clPpvcdZw1dzjU6k"},
{"content":{"body":"Rob Palmer, yulia my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>, <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> my coworker Jenna couldn't access the Reflector today to get the meeting info. Can you confirm her github user is ok? https://github.com/tc39/Admin-and-Business/issues/174","msgtype":"m.text"},"ts":1643155744781,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$RFJQYpXEDzKCWe5rodek8f-8L-ZIu9Nui6iG96Ws_RU"},
{"content":{"body":"leobalter: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: i just invited them; invites expire in 7 days so perhaps they didn't accept in time the first go","msgtype":"m.text"},"ts":1643155808157,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$11Aza_VZ_1rhHxpSfaOHdu1jvw2oUu5fMP5hJAf6Cgk"},
{"content":{"body":"Which means we need to do most, if not all, of the work we would need to do for ADT enums to ensure we have consistency across multiple other language features such as pattern matching.","msgtype":"m.text"},"ts":1643155816383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6PbQBRqn-doihkLDsu5UgZYzQ3eR1CmRiukaZUwyNY8"},
{"content":{"body":"Thanks, ljharb! ","format":"org.matrix.custom.html","formatted_body":"Thanks, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>!","msgtype":"m.text"},"ts":1643155841192,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$CsUXzc0CHy9FylEne5TacmsVPoRx0AzHbQb88f66hfc"},
{"content":{"body":"rbuckton: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i'd like a tighter story than that, because the implementation complexity and the design space of the primitive enums vs ADTs are miles apart","msgtype":"m.text"},"ts":1643156099610,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$81VZa15sricB-Jo2Pr4iu_Nw3fDRTE57qcojj09EgFU"},
{"content":{"body":"> <@jridgewell:matrix.org> I do recursion all the time.\n\nTo give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I do recursion all the time.</blockquote></mx-reply>To give a concrete example of this for Jordan, I invariably use recursion when I write parsers. Recursive descent parsers are my favorite type.","m.relates_to":{"m.in_reply_to":{"event_id":"$NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM"}},"msgtype":"m.text"},"ts":1643156964062,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3fJqBoBuPhCA9g-aNdkHYbLebPHEwQ3KACyXm-tp328"},
{"content":{"body":"With or without PTC…","msgtype":"m.text"},"ts":1643156981483,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-d-CgFGqixG0bLqqYmlEluvnCIuZS6IPX3gQhhM-vPk"},
{"content":{"body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on `node.kind` in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a `.kind`. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for `Node` instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","format":"org.matrix.custom.html","formatted_body":"I'm primarily interested in ADT enums for how they could possibly be optimized by engines in ways that regular objects can't (hence my comments about megamorphism earlier). Switching on <code>node.kind</code> in the TS compiler is often a performance cliff due to megamorphism, even if every object/shape seen by a function has a <code>.kind</code>. If V8 were able to optimize this case for regular objects, I'd be ecstatic. If not, and V8 instead was able to optimize for ADT enums in a similar fashion, I would happily rewrite the entire TypeScript compiler to use an ADT for <code>Node</code> instead of regular objects/constructors even if that meant a complete breaking API change for consumers. If there are no performance optimizations that V8 could offer for either case, then ADT enums are at least interesting to me as a data structure but not a necessity.","msgtype":"m.text"},"ts":1643157389949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$94NIfMzkj5dXHSZgP26ftgBLqgvpWceFVgg0rQBaEa8"},
{"content":{"body":"There's a convenience factor for ADT enums coupled with something like Scala's \"Extractor Objects\" and pattern matching that is extremely interesting to me, but that's nowhere near as compelling to me as possible performance benefits.","msgtype":"m.text"},"ts":1643157547313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J8IK7V5tnuKG80C6t4xjPtxO7tI-NI2I0Xy3_dPUSQI"},
{"content":{"body":"rbuckton: a dirty hack proposal... if the `.kind` property is special and you want to avoid the megamorphic de-opt, couldn't you rename it to be index zero?  `node[0]`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: a dirty hack proposal... if the <code>.kind</code> property is special and you want to avoid the megamorphic de-opt, couldn't you rename it to be index zero?  <code>node[0]</code>","msgtype":"m.text"},"ts":1643157645527,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$7gOMmvH92M3kjCchpOFqjq70AZtuluegSjB_MIuzvBA"},
{"content":{"body":"Does that work? I'd happily turn `kind` into a getter that just reads `this[0]` (for API compatibility) and replace all `node.kind` references in the compiler if that would actually improve performance.","format":"org.matrix.custom.html","formatted_body":"Does that work? I'd happily turn <code>kind</code> into a getter that just reads <code>this[0]</code> (for API compatibility) and replace all <code>node.kind</code> references in the compiler if that would actually improve performance.","msgtype":"m.text"},"ts":1643157805040,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZhLn2187vz79nW0BDuJGgmKLmuI8N0z5ed8m_znQvlw"},
{"content":{"body":"I'm not 100% sure but seem to recall the V8 object layout for elements permits direct lookups not based on the map type.  If only we had someone who knew V8 here...","msgtype":"m.text"},"ts":1643157895120,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$zMD3O3nEwOD5YBjkI-JHTevanZc1LtNiwy53N20uvc0"},
{"content":{"body":"by my reading keyed loads like [0] also checks receiver maps","msgtype":"m.text"},"ts":1643158134546,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VV4f0YAbNxwiqET8ca95Lckl4DLCc4xVf-13RNmY4Fg"},
{"content":{"body":"I wonder how off the “# of kinds of nodes in ts” is from the upper limit in v8 for optimization ","format":"org.matrix.custom.html","formatted_body":"I wonder how off the “# of kinds of nodes in ts” is from the upper limit in v8 for optimization","msgtype":"m.text"},"ts":1643158263717,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$5WLl53fbqcrx-sg9pdITYz9yem9XzvL7_i2-q8YV6So"},
{"content":{"body":"alternatively just rewrite it in go","msgtype":"m.text"},"ts":1643158293466,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$clBV0PlFXykvESQOMy56OG0RU_f4zMMI0WkiQq9w-TI"},
{"content":{"body":"(this is a reference to https://kdy1.dev/posts/2022/1/tsc-go, not a serious proposal)","msgtype":"m.text"},"ts":1643158318416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qwXe2VuBuqckht4kP3QjMWwUZTOhI7oqZLej8qU7UGM"},
{"content":{"body":"i think if you want speed what you want is C","msgtype":"m.text"},"ts":1643158348116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9-rMEoYjs6wToaD6B3D5T9VWoQ-UolM2nLfLaOHLhTI"},
{"content":{"body":"you never want c under any circumstances whatsoever","msgtype":"m.text"},"ts":1643158364714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9fGIKyKYChJ6dA4ONAOQrgsm2sPAopiTLoQCMJto08Q"},
{"content":{"body":"except writing aviation code with the very constrained dialect they use plus all of their static analysis tools I suppose","msgtype":"m.text"},"ts":1643158383340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UsJM37tZiXnlBrtNyvf20vkPyyp3HT1eIGh7ugz0IWI"},
{"content":{"body":"and even then it's less \"want\" than \"have no legal alternative\"","msgtype":"m.text"},"ts":1643158398644,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n6LefjxLW4Q8QtNuJ7rfJ8vaqcTlcsFViOt63bc539s"},
{"content":{"body":"it is when we are constrained by the law that we are at our most creative","msgtype":"m.text"},"ts":1643158458600,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wxImg1cpoINNmUr7AqLy7bhD59EsMq3Wxus_qfktCYU"},
{"content":{"body":"doubt","msgtype":"m.text"},"ts":1643158475032,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sC7HiwWEbEXmjUrtz5NhrI3yp5xlncmlW4UWC9QPxi4"},
{"content":{"body":"rbuckton: shu this microbenchmark suggests megamorphic access to index properties is 3x faster than the same for string properties https://esbench.com/bench/61f099d96c89f600a570158a","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> this microbenchmark suggests megamorphic access to index properties is 3x faster than the same for string properties https://esbench.com/bench/61f099d96c89f600a570158a","msgtype":"m.text"},"ts":1643160205342,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xoQf7vnJ4XfXwEzdbDgEsjQRym80TpC5-I3EQ24pbX8"},
{"content":{"body":"oh wow - Axel Rauschmeyer has taken Dean Tribble's Proxy trick and blogged about it within 90mins of learning it...  https://2ality.com/2022/01/symbol-factory.html","msgtype":"m.text"},"ts":1643160495875,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$R4o4RFb0spy33NILZkBszL90NjbngeRgI2IdBqh9sKw"},
{"content":{"body":"We tried to improve perf by ensuring that frequently-used fields like `kind`, `pos`, `end`, and `flags` are all stored in-object:\n```\n000003E4E0E47A91: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 160\n - inobject properties: 17\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 7\n - enum length: invalid\n - stable_map\n - back pointer: 0x03e4e0e47a49 <Map(HOLEY_ELEMENTS)>\n - prototype_validity cell: 0x034eb1241659 <Cell value= 1>\n - instance descriptors (own) #11: 0x012f0b6cfb21 <DescriptorArray[11]>\n - prototype: 0x012f0b6cf441 <Object map = 000003E4E0E47779>\n - constructor: 0x013a75523b41 <JSFunction Node (sfi = 00000353F65D5C41)>\n - dependent code: 0x020140ac1281 <Other heap object (WEAK_FIXED_ARRAY_TYPE)>\n - construction counter: 6\n\n  [0]: 00000378FA033E49: [String] in OldSpace: #pos (const data field 0:s, p: 7, attrs: [WEC]) @ Any\n  [1]: 0000009B539BD2B9: [String] in OldSpace: #end (const data field 1:s, p: 1, attrs: [WEC]) @ Any\n  [2]: 0000028DD0EF42B9: [String] in OldSpace: #kind (const data field 2:s, p: 3, attrs: [WEC]) @ Any\n  [3]: 0000007EABDD4071: [String] in OldSpace: #id (const data field 3:s, p: 9, attrs: [WEC]) @ Any\n  [4]: 0000020140AC45D1: [String] in ReadOnlySpace: #flags (const data field 4:s, p: 8, attrs: [WEC]) @ Any\n  [5]: 0000036E885DE309: [String] in OldSpace: #modifierFlagsCache (const data field 5:s, p: 10, attrs: [WEC]) @ Any\n  [6]: 000001B37FD2DA09: [String] in OldSpace: #transformFlags (const data field 6:s, p: 0, attrs: [WEC]) @ Any\n  [7]: 0000007EABDC4B09: [String] in OldSpace: #parent (const data field 7:h, p: 6, attrs: [WEC]) @ Any\n  [8]: 00000378FA0349F1: [String] in OldSpace: #original (const data field 8:h, p: 5, attrs: [WEC]) @ Any\n  [9]: 000001B37FD2D511: [String] in OldSpace: #decorators (const data field 9:h, p: 4, attrs: [WEC]) @ Any\n  [10]: 000001B37FD24099: [String] in OldSpace: #modifiers (const data field 10:h, p: 2, attrs: [WEC]) @ Any\n```","format":"org.matrix.custom.html","formatted_body":"<p>We tried to improve perf by ensuring that frequently-used fields like <code>kind</code>, <code>pos</code>, <code>end</code>, and <code>flags</code> are all stored in-object:</p>\n<pre><code>000003E4E0E47A91: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 160\n - inobject properties: 17\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 7\n - enum length: invalid\n - stable_map\n - back pointer: 0x03e4e0e47a49 &lt;Map(HOLEY_ELEMENTS)&gt;\n - prototype_validity cell: 0x034eb1241659 &lt;Cell value= 1&gt;\n - instance descriptors (own) #11: 0x012f0b6cfb21 &lt;DescriptorArray[11]&gt;\n - prototype: 0x012f0b6cf441 &lt;Object map = 000003E4E0E47779&gt;\n - constructor: 0x013a75523b41 &lt;JSFunction Node (sfi = 00000353F65D5C41)&gt;\n - dependent code: 0x020140ac1281 &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;\n - construction counter: 6\n\n  [0]: 00000378FA033E49: [String] in OldSpace: #pos (const data field 0:s, p: 7, attrs: [WEC]) @ Any\n  [1]: 0000009B539BD2B9: [String] in OldSpace: #end (const data field 1:s, p: 1, attrs: [WEC]) @ Any\n  [2]: 0000028DD0EF42B9: [String] in OldSpace: #kind (const data field 2:s, p: 3, attrs: [WEC]) @ Any\n  [3]: 0000007EABDD4071: [String] in OldSpace: #id (const data field 3:s, p: 9, attrs: [WEC]) @ Any\n  [4]: 0000020140AC45D1: [String] in ReadOnlySpace: #flags (const data field 4:s, p: 8, attrs: [WEC]) @ Any\n  [5]: 0000036E885DE309: [String] in OldSpace: #modifierFlagsCache (const data field 5:s, p: 10, attrs: [WEC]) @ Any\n  [6]: 000001B37FD2DA09: [String] in OldSpace: #transformFlags (const data field 6:s, p: 0, attrs: [WEC]) @ Any\n  [7]: 0000007EABDC4B09: [String] in OldSpace: #parent (const data field 7:h, p: 6, attrs: [WEC]) @ Any\n  [8]: 00000378FA0349F1: [String] in OldSpace: #original (const data field 8:h, p: 5, attrs: [WEC]) @ Any\n  [9]: 000001B37FD2D511: [String] in OldSpace: #decorators (const data field 9:h, p: 4, attrs: [WEC]) @ Any\n  [10]: 000001B37FD24099: [String] in OldSpace: #modifiers (const data field 10:h, p: 2, attrs: [WEC]) @ Any\n</code></pre>\n","msgtype":"m.text"},"ts":1643160500947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LaIARkvQFPAil_ILST4_YyZTOa4BXxvV_TXErVF7_i0"},
{"content":{"body":"that should save you a load, yeah","msgtype":"m.text"},"ts":1643160961747,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LELjxAZ3LFOdT2iqPI6noYFL0DewNgGLNs_IP0CAIAo"},
{"content":{"body":"there's a spam comment on an ecma262 PR, what should I do?","msgtype":"m.text"},"ts":1643162318099,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0kBJjOt9jc_ATucgNdOw03-o1e75Ofl179RH0vQhimo"},
{"content":{"body":"You should take a look at closure compilers AST layout","msgtype":"m.text"},"ts":1643162329574,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hhFUlH8condyN4mQbVeTwDLne8S9udT15m5r1ClMXrY"},
{"content":{"body":"Everything is firstchild lastchild nextchild","msgtype":"m.text"},"ts":1643162358172,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sMvmYTYv6Uzw1v4AucITovnFeZsyhhgdArJlNijkhvM"},
{"content":{"body":"Can’t have megamorphic access if everything has the exact same properties","msgtype":"m.text"},"ts":1643162381215,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$r_uQa3JWGYH6_XDj5z9x6BfqvC9ZdG5piNnO7s1cXPk"},
{"content":{"body":"jschoi: I double checked `Array.fromAsync`, and since the content of the `[[Iterator]]` slot is never revealed to user code, the async iterator wrapper prototype is still spec internal only. It sure would be nice to have a way to explicitly note this, so that these internal only things don't get surprisingly exposed without anyone noticing in the future!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: I double checked <code>Array.fromAsync</code>, and since the content of the <code>[[Iterator]]</code> slot is never revealed to user code, the async iterator wrapper prototype is still spec internal only. It sure would be nice to have a way to explicitly note this, so that these internal only things don't get surprisingly exposed without anyone noticing in the future!","msgtype":"m.text"},"ts":1643163528899,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GXfRAWRrJFp_TaHpCfOFFiso4u1kXfWRBf_iRk5kzfU"},
{"content":{"body":"Mathieu Hofman: do you mean like the note at https://tc39.es/ecma262/#sec-createlistiteratorRecord ?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: do you mean like the note at https://tc39.es/ecma262/#sec-createlistiteratorRecord ?","msgtype":"m.text"},"ts":1643165202441,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$zvxp2FUOYOpGklEndKK-ALudUCx7Vqd-_yIc6-RbqfU"}
]