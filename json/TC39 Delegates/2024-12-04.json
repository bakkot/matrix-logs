[
{"content":{"body":"as I missed the discussions about **ShadowRealm** yesterday, some async comments post reading the meeting notes.\n\n*For clarity and for the records, I no longer speak as a champion of the proposal, but as a regular delegate.*\n\nIt seems the only real blocker for Stage advancement is getting agreement from DOM vendors, which I agree. I don't think - and I hope I'm right - that stage 2.7 or stage 3 would change how DOM vendors would react or accept the proposal.\n\nThe challenge for DOM vendors to accept is having the design (resolved), tests (resolved), and **capacity for implementation**. \n\nI don't think DOM vendors would be able to prioritize or willing to implement it just for the sake of releasing a new feature. I believe this one is up to the champions finding sponsorship for the implementation. That's something I no longer control or can exercise much leverage.\n\nGiven all the facts and where we are at with ShadowRealm, offering funding for implementation of ShadowRealm is the best chance to get it accepted, and then yes, move it up to stages 3 and 4. This may still require vendors spending some cycles on review, but I think it's doable. \n\ncc ptomato dminor shu Michael Saboff ","format":"org.matrix.custom.html","formatted_body":"<p>as I missed the discussions about <strong>ShadowRealm</strong> yesterday, some async comments post reading the meeting notes.</p>\n<p><em>For clarity and for the records, I no longer speak as a champion of the proposal, but as a regular delegate.</em></p>\n<p>It seems the only real blocker for Stage advancement is getting agreement from DOM vendors, which I agree. I don't think - and I hope I'm right - that stage 2.7 or stage 3 would change how DOM vendors would react or accept the proposal.</p>\n<p>The challenge for DOM vendors to accept is having the design (resolved), tests (resolved), and <strong>capacity for implementation</strong>.</p>\n<p>I don't think DOM vendors would be able to prioritize or willing to implement it just for the sake of releasing a new feature. I believe this one is up to the champions finding sponsorship for the implementation. That's something I no longer control or can exercise much leverage.</p>\n<p>Given all the facts and where we are at with ShadowRealm, offering funding for implementation of ShadowRealm is the best chance to get it accepted, and then yes, move it up to stages 3 and 4. This may still require vendors spending some cycles on review, but I think it's doable.</p>\n<p>cc <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> <a href=\"https://matrix.to/#/@mlsaboff:matrix.org\">Michael Saboff</a></p>\n","m.mentions":{"user_ids":["@pchimento:igalia.com","@dminor:mozilla.org","@shuyuguo:matrix.org","@mlsaboff:matrix.org"]},"msgtype":"m.text"},"ts":1733272049368,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$XUpzzWZMjZrK0hzJEcD8GtKazhxIWvYSMqt0xULSt0Q"},
{"content":{"body":"it doesn’t, only immer’s maintainers","m.relates_to":{"event_id":"$TAdlU6FjI7A9CFX6NsRu1-NhOGsDD3O7Ig_cllTXZ9I","is_falling_back":true,"m.in_reply_to":{"event_id":"$4my-hzI_imscnHo-0llbiANWHmKBj6Iy2KKemqglAhU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733277707529,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MV61HWa1PDF7Qm8srqN_-V2rZd40NnKzbRBSk5OnqwQ"},
{"content":{"body":"I don't think the problem is capacity for implementation but rather that people remain unconvinced that ShadowRealm is a good idea for the web. In that case, even if the implementation of ShadowRealm was externally funded, there's no guarantee that patches would be reviewed and landed.","m.mentions":{},"msgtype":"m.text"},"ts":1733323001420,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$GfMGMlWv5IWY8AMYd9rSv0UyVKPoKB3uAgKDlElizTs"},
{"content":{"body":"i unfortunately am likely gonna miss plenary today and tomorrow 😭\n\nbut something i wanted to just throw out there regarding error stacks\n\nrather than trying to standardize (or at least codify) what already exists, what if we created a new `Error.prototype.get standardizedStack` or something which we can build entirely from scratch (i.e. a uniform format across engines)?\n\nto be clear this wouldn't preclude engines from having their own `stack` that contains whatever details the engine wants to provide\n\ninstead it would give an opportunity for all of us to agree on at least some minimal meaning for \"what does a stack look like?\" and \"how do i get one?\"","format":"org.matrix.custom.html","formatted_body":"<p>i unfortunately am likely gonna miss plenary today and tomorrow 😭</p>\n<p>but something i wanted to just throw out there regarding error stacks</p>\n<p>rather than trying to standardize (or at least codify) what already exists, what if we created a new <code>Error.prototype.get standardizedStack</code> or something which we can build entirely from scratch (i.e. a uniform format across engines)?</p>\n<p>to be clear this wouldn't preclude engines from having their own <code>stack</code> that contains whatever details the engine wants to provide</p>\n<p>instead it would give an opportunity for all of us to agree on at least some minimal meaning for &quot;what does a stack look like?&quot; and &quot;how do i get one?&quot;</p>","msgtype":"m.text"},"ts":1733331524115,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$v5FLx-GM7u5eE-lQw8Ym0eGR_s_e9KLX9b3ElS27dHE"},
{"content":{"body":"is TLA considered harmful at this point","m.mentions":{},"msgtype":"m.text"},"ts":1733332076340,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6Mnayk745-oENDljKFTYMC_0x8F9jzH8FV11ABs4dGQ"},
{"content":{"body":"🌏️🔫🧑‍🚀","m.mentions":{},"msgtype":"m.text"},"ts":1733332123524,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NUpg-v790qli2kUbWC1ynyOZK_clvmnTen9-b5HZrdQ"},
{"content":{"body":"you mean standardized string, or standardized structured dataa?","format":"org.matrix.custom.html","formatted_body":"you mean standardized string, or standardized structured dataa?","m.mentions":{"user_ids":["@dcrousso:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v5FLx-GM7u5eE-lQw8Ym0eGR_s_e9KLX9b3ElS27dHE"}},"msgtype":"m.text"},"ts":1733332176929,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ojfZburpDOIe5Soe-gEFnNm0L3Xq6X9VmCzL1kpgPwA"},
{"content":{"body":"if the former, why?","m.mentions":{},"msgtype":"m.text"},"ts":1733332182571,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$iKAQro2unR7RaLg5zK43nzZoKnhMODV3whErWctyoAQ"},
{"content":{"body":" * you mean standardized string, or standardized structured data?","format":"org.matrix.custom.html","formatted_body":" * you mean standardized string, or standardized structured data?","m.mentions":{},"m.new_content":{"body":"you mean standardized string, or standardized structured data?","format":"org.matrix.custom.html","formatted_body":"you mean standardized string, or standardized structured data?","m.mentions":{"user_ids":["@dcrousso:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ojfZburpDOIe5Soe-gEFnNm0L3Xq6X9VmCzL1kpgPwA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733332191318,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HrUpGEXcMdsGYDvpWYoxzb5C1bgo-EWhK53Z5l_uId0"},
{"content":{"body":"PSA: we will be ending for the day at the break.  no afternoon session today","m.mentions":{},"msgtype":"m.text"},"ts":1733332837873,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$FoHoptgN7HVbc9d6i7i5Wloij2qg4wam8JcmG843dCQ"},
{"content":{"body":"cf. https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3kN3Fbul5yr4xdcqDvHKLhEzv9fQrgow7d_JyqG48_c / https://matrixlogs.bakkot.com/TC39_Delegates/2024-12-03#L118\n> I want standard error stacks just so I can deny (read) access to the call stack in a standardised way","format":"org.matrix.custom.html","formatted_body":"<p>cf. https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3kN3Fbul5yr4xdcqDvHKLhEzv9fQrgow7d_JyqG48_c / https://matrixlogs.bakkot.com/TC39_Delegates/2024-12-03#L118</p>\n<blockquote>\n<p>I want standard error stacks just so I can deny (read) access to the call stack in a standardised way</p>\n</blockquote>\n","m.mentions":{"user_ids":["@dcrousso:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v5FLx-GM7u5eE-lQw8Ym0eGR_s_e9KLX9b3ElS27dHE"}},"msgtype":"m.text"},"ts":1733333340550,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$c6ghEJu_4BfdfuL_yoIjl9Uboo73Iz19keeGP6xrxNw"},
{"content":{"body":"Sorry I missed some of this. Is import.sync + source modules insufficient for Node.js? Or is evaluation not going to permitted in import.sync if you already have the source?","m.mentions":{},"msgtype":"m.text"},"ts":1733333571527,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$OpThjf_55uokU2x_ooTZAcxcz31_pu7vRilQfPgmTO4"},
{"content":{"body":"What's insufficient is if `import.sync(\"./a/file.js\")` throws for a non-already-imported file","format":"org.matrix.custom.html","formatted_body":"What's insufficient is if <code>import.sync(\"./a/file.js\")</code> throws for a non-already-imported file","m.mentions":{},"msgtype":"m.text"},"ts":1733333601348,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$I4RdBp8U_JicCA3u9sR74KTnxuByQKnwMdC9GDCpEM8"},
{"content":{"body":"I understand maintenance is also a concern, but I believe we went through years of cycles on how realm access would be good for the web. \n\nShadowRealm is the form that was proposed using direct feedback from vendors and it still resolves the business proposition.","m.mentions":{},"m.relates_to":{"event_id":"$GfMGMlWv5IWY8AMYd9rSv0UyVKPoKB3uAgKDlElizTs","is_falling_back":true,"m.in_reply_to":{"event_id":"$GfMGMlWv5IWY8AMYd9rSv0UyVKPoKB3uAgKDlElizTs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733333811777,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$IZJ1hxoQ8tvZMWTw5qxcxBguITUMUskxOoGuIX6yqzU"},
{"content":{"body":"we don't need to rediscuss this here, we can agree to disagree. It should be up to the champions to move the proposal forward.","m.mentions":{},"m.relates_to":{"event_id":"$GfMGMlWv5IWY8AMYd9rSv0UyVKPoKB3uAgKDlElizTs","is_falling_back":true,"m.in_reply_to":{"event_id":"$IZJ1hxoQ8tvZMWTw5qxcxBguITUMUskxOoGuIX6yqzU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733333875197,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$6MmpZOFHsUMCOXffNy8Ze0k-lMBq6YsuMSi-eywvTnI"},
{"content":{"body":"For what reason? Because it's not possible to know all the files users want to import? Otherwise the bundling pass could just gather all the imports and replace `import.sync(\"./a.js\");` with a prepass that exposes a bunch of `aSourceModule`s and does `import.sync(aSourceModule)`","format":"org.matrix.custom.html","formatted_body":"For what reason? Because it's not possible to know all the files users want to import? Otherwise the bundling pass could just gather all the imports and replace <code>import.sync(\"./a.js\");</code> with a prepass that exposes a bunch of <code>aSourceModule</code>s and does <code>import.sync(aSourceModule)</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$I4RdBp8U_JicCA3u9sR74KTnxuByQKnwMdC9GDCpEM8"}},"msgtype":"m.text"},"ts":1733333979120,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$d7ZSSpdtu00szCyE8tApkrdDZ8I2gkBeeJU_5VBVnkQ"},
{"content":{"body":"There is no bundling pass in Node.js, it runs modules directly. The use cases for `import.meta.require(\"./a/file.js\")` is synchronous conditional loading, for example to only load a polyfill when running in Node.js and not when running in the browser","format":"org.matrix.custom.html","formatted_body":"There is no bundling pass in Node.js, it runs modules directly. The use cases for <code>import.meta.require(\"./a/file.js\")</code> is synchronous conditional loading, for example to only load a polyfill when running in Node.js and not when running in the browser","m.mentions":{},"msgtype":"m.text"},"ts":1733334129007,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$tcqz0lBTSuE6ory8YSnIF3Wid3P5s_EoABSdiTvecT4"},
{"content":{"body":"some of which could be done with an import map? Though I guess a library can't easily 'ship' an import map that it expects the final app to pull in","m.mentions":{},"msgtype":"m.text"},"ts":1733334600079,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$w07yN-C51VlQ_guT7HTqAYvUhIZJLWyQAALENlGOge4"},
{"content":{"body":"would have to express via package.json","m.mentions":{},"msgtype":"m.text"},"ts":1733334616163,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hjdlZ6Qf0viNebakEFd8qJCJYSVkpIf4lKoEMmERcX0"},
{"content":{"body":"Sure, I guess I was thinking of `package.json` as the \"bundling pass\" ","format":"org.matrix.custom.html","formatted_body":"Sure, I guess I was thinking of <code>package.json</code> as the \"bundling pass\"","m.mentions":{},"msgtype":"m.text"},"ts":1733334652446,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$9aadhcQNDf6W2UJOUP47EYVdoGFmHqVHhwNIWCFzjIY"},
{"content":{"body":"It seems like it wouldn't be crazy or insurmountable to specify all the conditional packages your project uses in `package.json`. Or if you do some sync importing for some other package to require that package to list the ones it uses","format":"org.matrix.custom.html","formatted_body":"It seems like it wouldn't be crazy or insurmountable to specify all the conditional packages your project uses in <code>package.json</code>. Or if you do some sync importing for some other package to require that package to list the ones it uses","m.mentions":{},"msgtype":"m.text"},"ts":1733334737071,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$FXTlGeixWL4YjzKYOm0vqGZiWyOyUTghAmeKvzTp9Bw"},
{"content":{"body":"That would be a good security practice anyway, IMO","m.mentions":{},"msgtype":"m.text"},"ts":1733334753147,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$pZtvOLuW0NyNa53n2ZslWLsG44o7AXleeMTZi80fOI4"},
{"content":{"body":"Perhaps there's some details I'm missing though","m.mentions":{},"msgtype":"m.text"},"ts":1733334840071,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$efDMiULM4YVQ1vYaBUE55aFb0rXyqNH0i7yJ7g2SN7Y"},
{"content":{"body":"So, assuming that they are all in package.json (I was assuming the same), then what happens? Are you assuming that Node.js loads all the dependencies defined in package.json at startup, so they then they are already pre-loaded when you try to sync import them?","m.mentions":{},"msgtype":"m.text"},"ts":1733334880533,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mdAtxZDsI8PgIVuVkPsNDqZOLDj3p53ZvFjXhofqerw"},
{"content":{"body":"Yeah, effectively.","m.mentions":{},"msgtype":"m.text"},"ts":1733334914988,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$bmUckw8EMYb5jyxYMKzSmENdMaB5FLx7V8si0JFckpg"},
{"content":{"body":"If it's just an fopen call that's probably sufficiently equivalent from a spec compliance PoV","m.mentions":{},"msgtype":"m.text"},"ts":1733334950050,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$m_I1djZnMbrDC2mQoPJjgbLM1e46ijTcX0Lo5badmR4"},
{"content":{"body":" * If it's just an fopen call at sync import time that's probably sufficiently equivalent from a spec compliance PoV","m.mentions":{},"m.new_content":{"body":"If it's just an fopen call at sync import time that's probably sufficiently equivalent from a spec compliance PoV","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$m_I1djZnMbrDC2mQoPJjgbLM1e46ijTcX0Lo5badmR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733334959323,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$qH-5uqJKhRnigG4X-F4Ekg7690rMGv1_poLXsdTuh2k"},
{"content":{"body":"Well, it also requires parsing to recourse into the dependencies of the modules you list as dependencies in package.json","m.mentions":{},"msgtype":"m.text"},"ts":1733334990056,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$exgvS4cU3uitg3TMhJ3JPzkcXts3bLU3em79tMxySHA"},
{"content":{"body":"This solution seems fine, but then it's equivalent to \"we allow Node.js to have different behavior from browsers\"","m.mentions":{},"msgtype":"m.text"},"ts":1733335050290,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k3yok104-924RWKXLbn9tCBLZryTqJO4uxvvYcWg2Ww"},
{"content":{"body":"Since browsers don't pre-load the import map","m.mentions":{},"msgtype":"m.text"},"ts":1733335060982,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q32R7MJ3CGoqfmYJmnh5yDzdz6nlVJPcVswvA22yKMs"},
{"content":{"body":"Why would have to parse the source? It seems like that data should be transitively visible from the package.json","m.mentions":{},"msgtype":"m.text"},"ts":1733335072608,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ykm0psIuXgR43P4cX76Xh0tmqlSEkhvG202OnC5GhZQ"},
{"content":{"body":"package.json dependencies point to a \"group of modules\". Only the entrypoints of each library are listed","m.mentions":{},"msgtype":"m.text"},"ts":1733335130634,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2G0OZeWdvAGmLi8tQ8KBQvHsdcB6h-jOu0OZjnlWpXY"},
{"content":{"body":"Not the modules they load within the same package","m.mentions":{},"msgtype":"m.text"},"ts":1733335141119,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$caXkzM6XyeLFX4DDdZMsrYD4t8M1ZTSefG11TDyBuxA"},
{"content":{"body":"Yeah but those entrypoints also have a package.json(?) So that would tell you what modules are needed for that package, recursively","m.mentions":{},"msgtype":"m.text"},"ts":1733335192987,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$a0uvGRwp1FfDGHRMbNM2xKTHOsliL0p0M_Sz1Pdg-W4"},
{"content":{"body":"not necessarily, because package.json doesn't have to list every entrypoint unless it's using `exports`","format":"org.matrix.custom.html","formatted_body":"not necessarily, because package.json doesn't have to list every entrypoint unless it's using <code>exports</code>","m.mentions":{},"msgtype":"m.text"},"ts":1733335208633,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QQVN006GuU-0KGyf84h4wkPHXT29QU7r07KKbnznD7U"},
{"content":{"body":"also, even with using `exports`, each entrypoint could be importing other files that aren't externally accessible","format":"org.matrix.custom.html","formatted_body":"also, even with using <code>exports</code>, each entrypoint could be importing other files that aren't externally accessible","m.mentions":{},"msgtype":"m.text"},"ts":1733335225554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QjkM3ovv_lfCtE2cJmQL9nFOLlDIYZxh_FsipcNOfso"},
{"content":{"body":" * also, even with using `exports`, each entrypoint could be importing other relative files that aren't externally accessible","format":"org.matrix.custom.html","formatted_body":" * also, even with using <code>exports</code>, each entrypoint could be importing other relative files that aren't externally accessible","m.mentions":{},"m.new_content":{"body":"also, even with using `exports`, each entrypoint could be importing other relative files that aren't externally accessible","format":"org.matrix.custom.html","formatted_body":"also, even with using <code>exports</code>, each entrypoint could be importing other relative files that aren't externally accessible","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QjkM3ovv_lfCtE2cJmQL9nFOLlDIYZxh_FsipcNOfso","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335230053,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8nnhr_Lo-_ovnCb4lYvim2nvxP3pNZVlBEF-tJMgNrs"},
{"content":{"body":"> <@ljharb:matrix.org> also, even with using `exports`, each entrypoint could be importing other relative files that aren't externally accessible\n\n^ this is my point","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QjkM3ovv_lfCtE2cJmQL9nFOLlDIYZxh_FsipcNOfso?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>also, even with using <code>exports</code>, each entrypoint could be importing other relative files that aren't externally accessible</blockquote></mx-reply>^ this is my point","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QjkM3ovv_lfCtE2cJmQL9nFOLlDIYZxh_FsipcNOfso"}},"msgtype":"m.text"},"ts":1733335236495,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$K8b9z-kG5XBjs5v8CC67dAw5LJCEOyBwydBudyA-hf0"},
{"content":{"body":"If you have a dependency `my-lib` that has entrypoint `./a.js`, and `./a.js` imports `./b.js` within my-lib, `./b.js` is not listed in the dependencies of `my-lib`","format":"org.matrix.custom.html","formatted_body":"If you have a dependency <code>my-lib</code> that has entrypoint <code>./a.js</code>, and <code>./a.js</code> imports <code>./b.js</code> within my-lib, <code>./b.js</code> is not listed in the dependencies of <code>my-lib</code>","m.mentions":{},"msgtype":"m.text"},"ts":1733335318711,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZRwbkvDTPZVyguqHQ338zZDUGrrVytKqO2RekjgI_n4"},
{"content":{"body":"Because dependencies are _packages_, not individual modules","format":"org.matrix.custom.html","formatted_body":"Because dependencies are <em>packages</em>, not individual modules","m.mentions":{},"msgtype":"m.text"},"ts":1733335328651,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pjogwgyngbeUZyditLKTBwwuA3jdjLdBu0-VYyud234"},
{"content":{"body":"Is that fundamental? Couldn't during their `import.sync` transition they add a new field to `package.json` that's all the private modules?","format":"org.matrix.custom.html","formatted_body":"Is that fundamental? Couldn't during their <code>import.sync</code> transition they add a new field to <code>package.json</code> that's all the private modules?","m.mentions":{},"msgtype":"m.text"},"ts":1733335374568,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$EypCnuIuNxZuZ_zuF0ua1hs0LIFlENhsSbj9I4GiXxo"},
{"content":{"body":"there's no way to mandate that","m.mentions":{},"msgtype":"m.text"},"ts":1733335391986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FJNpwqIs99bKnVm78NWK_8WPUhxfSzZL66EeSxI2LRg"},
{"content":{"body":"Well it could","m.mentions":{},"msgtype":"m.text"},"ts":1733335397985,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$VUMH9dSVePtsc_c0egTHizw9IGpsOicsdojicG2qcf4"},
{"content":{"body":"Sure, import.sync fails","m.mentions":{},"msgtype":"m.text"},"ts":1733335402487,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JAjPi_6D4x_rH3_WV7Ay0NUC3CtUvDYHgkdFYJ1Rlds"},
{"content":{"body":" * Sure, import.sync fails if you don't add the field lol","m.mentions":{},"m.new_content":{"body":"Sure, import.sync fails if you don't add the field lol","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JAjPi_6D4x_rH3_WV7Ay0NUC3CtUvDYHgkdFYJ1Rlds","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335411787,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$0qzUI1c6KtRBg9txY6jaOom9nG37sbRywYtfiLyMF8A"},
{"content":{"body":"it's a language syntax feature","m.mentions":{},"msgtype":"m.text"},"ts":1733335416611,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$onrMqjtjEwhADzpsjOT9yL7NLtcbhELKSZi9VrPweD0"},
{"content":{"body":"node has no ability to make it fail","m.mentions":{},"msgtype":"m.text"},"ts":1733335444226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cgMYu9i7WdsTW3qbctULDeG9_wc32RaF-FyAU9OXvcU"},
{"content":{"body":"but also, the number of people who would want to do that rounds to zero","m.mentions":{},"msgtype":"m.text"},"ts":1733335466301,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ReWNXJZF8w_oXsK-rLpEC2hI9QorHnzMesUyOBXPc4I"},
{"content":{"body":"Well it can fail the same way as it can fail in browsers","m.mentions":{},"msgtype":"m.text"},"ts":1733335469611,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DleM2S_i4DmSjhoOC2WdaKLmuChyKD69aFN7efaBARM"},
{"content":{"body":"Node has the ability to not provide the source module if you don't specify it?","m.mentions":{},"msgtype":"m.text"},"ts":1733335475891,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Mayj58sEyQrUS4mos7hQKOklbbeX3ucQ-mecAuOoC88"},
{"content":{"body":"that requirement would basically guarantee nobody adopts it","m.mentions":{},"msgtype":"m.text"},"ts":1733335482696,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YnkUcdVTZ2d01EEl98nWRFFmMi5B4yjYXvKsQz7s_1c"},
{"content":{"body":"Wild...","m.mentions":{},"msgtype":"m.text"},"ts":1733335499092,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$tWlDXhxGo2JgLX1RcCFO7fZYZIj1Ec2nzBtb-P5qmZA"},
{"content":{"body":"It could be done by node for you even lol","m.mentions":{},"msgtype":"m.text"},"ts":1733335508759,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Lr09EMWhk6uWP9kd_tTC2ydFNAjArvUpVlSyDq7Lmj4"},
{"content":{"body":"I think what keith_miller would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","format":"org.matrix.custom.html","formatted_body":"I think what <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1733335515188,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HmRsbElPGzf46c_ooIp8tIPLeWCO_x_zoxHHIi0jA6A"},
{"content":{"body":"or some other script","m.mentions":{},"msgtype":"m.text"},"ts":1733335515534,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$HL-N_9Ly_Cm4bI_6r2iskiJe6KYzaqDc8Q6FjGoyRiU"},
{"content":{"body":"node definitely should never be touching package.json, and if it's done by a script then i'd have to run that every time i add or remove a file inside the package","m.mentions":{},"msgtype":"m.text"},"ts":1733335533043,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dZMQdRK4X0mI1PGbac-iqQiSruCJCN2gtt9CjreCTfw"},
{"content":{"body":" * I think what keith_miller proposes would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","format":"org.matrix.custom.html","formatted_body":" * I think what <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> proposes would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","m.mentions":{},"m.new_content":{"body":"I think what keith_miller proposes would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","format":"org.matrix.custom.html","formatted_body":"I think what <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> proposes would work, but it's effectively like saying that Node.js and browsers can diverge? Node.js could just say \"we pre-load all the files we find in the folder\"","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HmRsbElPGzf46c_ooIp8tIPLeWCO_x_zoxHHIi0jA6A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335536786,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7Jb2-_OG93WN2s-RuFIOs5_SqMoyFQToGhOgnenViB8"},
{"content":{"body":"I mean Node.js is completely allowed to put whatever source modules it wants into some namespace?","m.mentions":{},"msgtype":"m.text"},"ts":1733335553064,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$RR4-eWj2VBudcmikgu2_zExjpqEhITx7MtLBe2Ui27g"},
{"content":{"body":" * node definitely should never be modifying package.json, and if it's done by a script then i'd have to run that every time i add or remove a file inside the package","m.mentions":{},"m.new_content":{"body":"node definitely should never be modifying package.json, and if it's done by a script then i'd have to run that every time i add or remove a file inside the package","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dZMQdRK4X0mI1PGbac-iqQiSruCJCN2gtt9CjreCTfw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335554389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U-g0shpOO-zjyjzX3ccJd3fLTUsGeIUhjs_y-ChnCtg"},
{"content":{"body":"i'm not sure what you mean by \"allowed\"","m.mentions":{},"msgtype":"m.text"},"ts":1733335565361,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ecE6Pl-NIZR4zm5GJ9A7Bpm8jcdrYtUb15A0qWpThFs"},
{"content":{"body":"node _can_ do anything. what it could do that would be deemed acceptable is a much smaller list","format":"org.matrix.custom.html","formatted_body":"node <em>can</em> do anything. what it could do that would be deemed acceptable is a much smaller list","m.mentions":{},"msgtype":"m.text"},"ts":1733335585753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JbHbeDUPQt6d8EzG7JjOkZJrN5XTXtYZqWER1SpOv9I"},
{"content":{"body":"and forcing me to change package.json every time i make a small refactor to extract something to a file, or rename/move a file, is an insanely onerous ask","m.mentions":{},"msgtype":"m.text"},"ts":1733335628153,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BonEH-imHmZPFFzvdEoaK8i0BaCZKuFhzX2J9hsbRxw"},
{"content":{"body":"even if it's automated, the git diff churn is prohibitive","m.mentions":{},"msgtype":"m.text"},"ts":1733335640096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LZbIlH_z5rwgqyihF9TknYBzKtiKMw4-PZS9iF09ZDY"},
{"content":{"body":"What in the TC-39 spec prevents node from `ls`ing your directory and providing a bunch of variables in your module via `import.meta` or something?","format":"org.matrix.custom.html","formatted_body":"What in the TC-39 spec prevents node from <code>ls</code>ing your directory and providing a bunch of variables in your module via <code>import.meta</code> or something?","m.mentions":{},"msgtype":"m.text"},"ts":1733335649733,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YUtLsPvMmU7dbbVYkofcS58x1dBYVzYzhBLhIL1grEI"},
{"content":{"body":"nothing","m.mentions":{},"msgtype":"m.text"},"ts":1733335661739,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N0i3SW9J0liNC9OoH5_WF61QV6SHZFNWnDMv3Bo0Cvs"},
{"content":{"body":"but node doesn't just have ESM, they also have CJS, and `import.sync` would presumably work in CJS also","format":"org.matrix.custom.html","formatted_body":"but node doesn't just have ESM, they also have CJS, and <code>import.sync</code> would presumably work in CJS also","m.mentions":{},"msgtype":"m.text"},"ts":1733335683481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BNmsBDRY7X09iC9VUkPAafIRsKWexFSjeXhEN3m4JYk"},
{"content":{"body":" * but node doesn't just have ESM, they also have CJS, and `import.sync` would presumably work in CJS (Script) also","format":"org.matrix.custom.html","formatted_body":" * but node doesn't just have ESM, they also have CJS, and <code>import.sync</code> would presumably work in CJS (Script) also","m.mentions":{},"m.new_content":{"body":"but node doesn't just have ESM, they also have CJS, and `import.sync` would presumably work in CJS (Script) also","format":"org.matrix.custom.html","formatted_body":"but node doesn't just have ESM, they also have CJS, and <code>import.sync</code> would presumably work in CJS (Script) also","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BNmsBDRY7X09iC9VUkPAafIRsKWexFSjeXhEN3m4JYk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335688191,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t5fWKvotGqzSlkhMFQsXB7vZ2hDGzCVccc5E0YOIJG4"},
{"content":{"body":" * but node doesn't just have ESM, they also have CJS, and `import.sync` would presumably work in CJS (Script) also, just like `import()` does","format":"org.matrix.custom.html","formatted_body":" * but node doesn't just have ESM, they also have CJS, and <code>import.sync</code> would presumably work in CJS (Script) also, just like <code>import()</code> does","m.mentions":{},"m.new_content":{"body":"but node doesn't just have ESM, they also have CJS, and `import.sync` would presumably work in CJS (Script) also, just like `import()` does","format":"org.matrix.custom.html","formatted_body":"but node doesn't just have ESM, they also have CJS, and <code>import.sync</code> would presumably work in CJS (Script) also, just like <code>import()</code> does","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BNmsBDRY7X09iC9VUkPAafIRsKWexFSjeXhEN3m4JYk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335693947,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MZJ4gzxI2zY0jpD8NhpzGeGi5B7pPvPjutXM_tWnREE"},
{"content":{"body":"Great then it doesn't even need to be in the package.json","m.mentions":{},"msgtype":"m.text"},"ts":1733335694998,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$8lLhnUkp8ujdQwIfVG2XoSAxc2uzd315hPFqxFcbLv0"},
{"content":{"body":"i doubt the performance of that would be something node would ever want to implement, hitting the filesystem is expensive","m.mentions":{},"msgtype":"m.text"},"ts":1733335718419,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OJLA5QYHZpUIxo-BsqBAeCQa19qkcC9TFwf_h-o6U3o"},
{"content":{"body":"put another way, we could have made ESM fully sync, and browser devs would have been required to use a tool to generate a complete list of imported modules up front. would that be acceptable DX to you for browser devs? that's what you're asking for here.","m.mentions":{},"msgtype":"m.text"},"ts":1733335762078,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HkIcNx7IXLIAgigwdnuIbvekyCvNESEdvx0e3poaqR4"},
{"content":{"body":" * put another way, we could have made ESM fully sync, and browser devs would have been required to use a tool to generate a complete list of imported modules up front. would that be acceptable DX to you for browser devs? it seems like that's what you're asking for here.","m.mentions":{},"m.new_content":{"body":"put another way, we could have made ESM fully sync, and browser devs would have been required to use a tool to generate a complete list of imported modules up front. would that be acceptable DX to you for browser devs? it seems like that's what you're asking for here.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HkIcNx7IXLIAgigwdnuIbvekyCvNESEdvx0e3poaqR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335779316,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$21vo7A5o2m-jA53kpomwEEkuAIpA621uznGM_D0VaW0"},
{"content":{"body":"Is it observable wether Node.js does that eagerly upfront or lazily as needed, other than performance?","m.mentions":{},"msgtype":"m.text"},"ts":1733335791983,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OW-5-LizOPJLTDYbGJVkYzJxZ7yzA1CjS5lRnf0okdE"},
{"content":{"body":"I don't think so","m.mentions":{},"msgtype":"m.text"},"ts":1733335802405,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YOf5P2vlm7adeNGl24Bs0e6Tj-S4HBHafQ__IBQ2BY8"},
{"content":{"body":"yes, because the fs isn't static, and the program can make changes to it","m.mentions":{},"msgtype":"m.text"},"ts":1733335809564,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8yi24Y3AVoIYrcA3-ivDOHX-_ZA5FBHb6orcC8bqLKQ"},
{"content":{"body":"Other than for reasons outside of TC-39's control","m.mentions":{},"msgtype":"m.text"},"ts":1733335826262,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$hlVOQfP_gLaD7BQciZ9IdNhHMkU9uKRXIF0A_GAz25A"},
{"content":{"body":" * yes, because the fs isn't static, and the program (and the rest of the machine) can make changes to it","m.mentions":{},"m.new_content":{"body":"yes, because the fs isn't static, and the program (and the rest of the machine) can make changes to it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8yi24Y3AVoIYrcA3-ivDOHX-_ZA5FBHb6orcC8bqLKQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335827326,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CvU4NcS99sw7s79ZDZj-BJGz3-kSd7mlILGtYlEveNQ"},
{"content":{"body":"\"the filesystem\" is a concept that doesn't exist in tc39 :-p","m.mentions":{},"msgtype":"m.text"},"ts":1733335842891,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jOiG0hxcBiW-BFhT6OmMTdb8_KTwDZ5yQi9h_95EqvY"},
{"content":{"body":"This API could just be a window proxy like object that vends you back the source module for the file you specify synchronously?","m.mentions":{},"msgtype":"m.text"},"ts":1733335923099,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$95ErPGSodOtMZjzCinFjatWq9i3W8GCnWOxsK1KZDAw"},
{"content":{"body":"Or just a function","m.mentions":{},"msgtype":"m.text"},"ts":1733335930332,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kaSkttENyT9D3o3dtKmbugvyKStVc-JDONV3e4zDcjI"},
{"content":{"body":"also, that would be effectively a discouragement of having many small files, which would definitely be bringing us back to \"all the code is in one file\"","m.mentions":{},"msgtype":"m.text"},"ts":1733335932809,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yf1pvpF0TKnOyCeB1TiFq5ZyOAWGUhRSIBeAXmUNy3I"},
{"content":{"body":" * also, that would be effectively a discouragement of having many small files, which would definitely be bringing us back to \"all the code is in one file\" (referencing a TDZ discussion)","m.mentions":{},"m.new_content":{"body":"also, that would be effectively a discouragement of having many small files, which would definitely be bringing us back to \"all the code is in one file\" (referencing a TDZ discussion)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yf1pvpF0TKnOyCeB1TiFq5ZyOAWGUhRSIBeAXmUNy3I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733335963271,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5EQZTETxi5XHKo6MyYfABT0mq83gZNUJrgcEc6Cxh7U"},
{"content":{"body":"how does this coalescing work, is relative resolution not preserved in module sources?","m.mentions":{},"msgtype":"m.text"},"ts":1733335970058,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lSvKpqWhDo_4gLNIxS0JerkAL6Et9hi9Ckbh1JyiIWQ"},
{"content":{"body":"So you'd just do `import.sync(nodeJSSpecificThingThatFindsYourSourceModule(\"./a.js\"))`","format":"org.matrix.custom.html","formatted_body":"So you'd just do <code>import.sync(nodeJSSpecificThingThatFindsYourSourceModule(\"./a.js\"))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1733335972277,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$EdI-EFop7MoOVmY-rZMmF3ytLNR4rhslMUq7kAxFA1s"},
{"content":{"body":"like even if there were no technical issues with it, i don't think enumerating files is a viable path","m.mentions":{},"msgtype":"m.text"},"ts":1733335979016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qMkkhvj4Hwt-rV5RB5GYuaOHLBBpogwrnLR-3CtHD5k"},
{"content":{"body":"\"./a.js\" is your source module tho, it's a file path","m.mentions":{},"msgtype":"m.text"},"ts":1733335991815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1lvAkoWXiYB9ZwCofDBSaAc5-ryNlxr6uNrbrCwxnfc"},
{"content":{"body":"oh the specifier is part of the key ok","m.mentions":{},"msgtype":"m.text"},"ts":1733335998673,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pIdjGmuucd16Au0zmM1mqY4BcTFuJPC5UgVYlx1AqKU"},
{"content":{"body":"and since that node-specific thing wouldn't exist in browsers, that wouldn't get us to the goal of being able to write universal code","m.mentions":{},"msgtype":"m.text"},"ts":1733336012418,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dim3Q6NuNLqhQy1vxy1QvUIZWULYP-ocb3fEaSacS0Q"},
{"content":{"body":"(with import maps, file paths work fine in browsers)","m.mentions":{},"msgtype":"m.text"},"ts":1733336025456,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LYt2URldI1-pIEOox3XNT9c1qstK05AYSlSI_DH-QL8"},
{"content":{"body":"Then `nodeJSSpecificThingThatFindsYourSourceModule` could be `nodeJSSpecificThingThatFindsYourSourceModule(a) { return a; }` in browsers?","format":"org.matrix.custom.html","formatted_body":"Then <code>nodeJSSpecificThingThatFindsYourSourceModule</code> could be <code>nodeJSSpecificThingThatFindsYourSourceModule(a) { return a; }</code> in browsers?","m.mentions":{},"msgtype":"m.text"},"ts":1733336060698,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Re7A2jyPryiepODrS2YlhiESXYqob0OacSaxP7US8lM"},
{"content":{"body":"Presumably with a different name lol","m.mentions":{},"msgtype":"m.text"},"ts":1733336095210,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YpgdsWelPNCPTC3YYhDovWp7DE03Rxq-J5_5qvM__V0"},
{"content":{"body":"Can `nodeJSSpecificThingThatFindsYourSourceModule` be called `import.meta.resolve`? 🙏","format":"org.matrix.custom.html","formatted_body":"Can <code>nodeJSSpecificThingThatFindsYourSourceModule</code> be called <code>import.meta.resolve</code>? 🙏","m.mentions":{},"msgtype":"m.text"},"ts":1733336179913,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eog4IyuoUDB4MKfgJ738xkwnLLJjP2wk0c2u2BPLQ_8"},
{"content":{"body":"I'm just saying Node.js has workarounds to specifying everything up front. For browsers 99% of devs do bundling so that seems like it could handle gathering this data for them.","m.mentions":{},"msgtype":"m.text"},"ts":1733336207051,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Rk2IIXM4hajF3JwBc5iioXetf-pGf65zrK83bS4yKfY"},
{"content":{"body":"> <@keith_miller:matrix.org> I'm just saying Node.js has workarounds to specifying everything up front. For browsers 99% of devs do bundling so that seems like it could handle gathering this data for them.\n\nSo you would be ok with an `import.sync` working automatically in Node.js due to Node's magic, but not in browsers without extra user work?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Rk2IIXM4hajF3JwBc5iioXetf-pGf65zrK83bS4yKfY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I&#39;m just saying Node.js has workarounds to specifying everything up front. For browsers 99% of devs do bundling so that seems like it could handle gathering this data for them.</blockquote></mx-reply>So you would be ok with an <code>import.sync</code> working automatically in Node.js due to Node's magic, but not in browsers without extra user work?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rk2IIXM4hajF3JwBc5iioXetf-pGf65zrK83bS4yKfY"}},"msgtype":"m.text"},"ts":1733336241694,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WyJFQtjLvRW1UvvBMeb4SlzE4rRXRUxGazGAGd4hv1E"},
{"content":{"body":"Personally, sure","m.mentions":{},"msgtype":"m.text"},"ts":1733336256148,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$BMuv9HEIUs_HWcNf-p7Y_ky1DgqrgBAmZFZfk2vaB_A"},
{"content":{"body":"lol, a lot of devs on social media got very angry about the implication that 99% of devs use bundlers and that the language should build in that assumption","m.mentions":{},"msgtype":"m.text"},"ts":1733336260572,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dSaN32PLLwhJAu2va1t0pEzXEzRqqx0XDta_mDSRf5k"},
{"content":{"body":"They don't have to use bundlers but then they have to do their own bookkeeping","m.mentions":{},"msgtype":"m.text"},"ts":1733336285412,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$TMKQgkiLUIVlBNx1EPxnC7mGJ55aYy7JGEiuRK92faY"},
{"content":{"body":"if it's onerous without a tool, then a lot of folks will be angry about it","m.mentions":{},"msgtype":"m.text"},"ts":1733336300926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kLt3Uoy4pvQO5js0oHS84ENd-qW3go_DJSbv2_pujMI"},
{"content":{"body":"So we should make everyone's experience bad?","m.mentions":{},"msgtype":"m.text"},"ts":1733336317713,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ij6pQ3MlSPEFDl1ayXjeQUu3Hi06g7o91bJrSqwrjag"},
{"content":{"body":"Should the language build in that we also minify?","m.mentions":{},"msgtype":"m.text"},"ts":1733336318652,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XbTfpub5kzJCGCS0VqFNtuvy4d32oZx7ogkM_jfNfQ0"},
{"content":{"body":"no, we should be designing so tools can work, but not designing assuming users have to use the tools","m.mentions":{},"msgtype":"m.text"},"ts":1733336331688,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9aWUgJ4_stipt2aLjk5y_T0PVDbALC0FuxtTIrFcbFs"},
{"content":{"body":"Then, IMO, we'll likely have nothing","m.mentions":{},"msgtype":"m.text"},"ts":1733336355128,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$UMkJ6x4tq-N1xWioX3AlqDExnwnA1apAJucW0zMo0vU"},
{"content":{"body":"And Node.js will end up doing it's own thing","m.mentions":{},"msgtype":"m.text"},"ts":1733336371193,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$gr-jWddvaMN8xlEh7t2-mHmjKs0tYEzdWcV3dWrPg44"},
{"content":{"body":"that may indeed be the case","m.mentions":{},"msgtype":"m.text"},"ts":1733336428562,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vh7z0bMP_wOzUtX5XJVpPFNqecfLgVrU_w_kCwMu1Zw"},
{"content":{"body":"that's what we'll explore in stage 1","m.mentions":{},"msgtype":"m.text"},"ts":1733336443682,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dk9CZTrATyveGgQ9uxmYsHim3fD0Jr_ar5_QlAdwVYU"},
{"content":{"body":"That seems worse than providing something which works for most folks, IMO","m.mentions":{},"msgtype":"m.text"},"ts":1733336451433,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$jwGNgGatPENrk7wzUoUyKQNQZizgtJWsCLHbRhUDg6I"},
{"content":{"body":"I agree we should aim to provide things that work without tools but I don't think we should let that be the enemy of good","m.mentions":{},"msgtype":"m.text"},"ts":1733336524623,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$3AQuaV_EEZ9nndPKfYMzcvxm0L6TlCWuUbBAEkrjBHY"},
{"content":{"body":"you may be overestimating how many users use bundlers, is all","m.mentions":{},"msgtype":"m.text"},"ts":1733336528134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X3G3Fa4JhZ_IEWUdl7jEmf-f4YPEK7nQtnDHcodU_NM"},
{"content":{"body":"(unless you have actual data on that, which would be very valuable to have publicly but doesn't exist afaik)","m.mentions":{},"msgtype":"m.text"},"ts":1733336548281,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m2dQeWRaogsgAwwE0bSVJpU8-bKcgKYizBtyWSCZXHU"},
{"content":{"body":"Chairs, I would prefer that we disallow saying \"you can jump in in my presentation\", because it's very difficult for me to interact","m.mentions":{},"msgtype":"m.text"},"ts":1733337043907,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7AtPr7vzhy_IhC6Q045E9XC0_3fzLR8_1oOmNogk5uo"},
{"content":{"body":"I either have the choice to jump in all the time too, or addmyself to the queue for after this back-and-forth is done","m.mentions":{},"msgtype":"m.text"},"ts":1733337066628,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XYHjfHHs03y-OkV-oejOhFu4GIeYvOy070KjFHTNszA"},
{"content":{"body":" * Chairs, I would prefer that we disallow saying \"you can jump in in my presentation\", because it's very difficult for others to interact","m.mentions":{},"m.new_content":{"body":"Chairs, I would prefer that we disallow saying \"you can jump in in my presentation\", because it's very difficult for others to interact","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7AtPr7vzhy_IhC6Q045E9XC0_3fzLR8_1oOmNogk5uo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733337109095,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kVAjKUZh5BnRW226Db5RxGVLCasmF10IItEIXemoSfw"},
{"content":{"body":" * I either have the choice to jump in all the time too, or add myself to the queue for after this back-and-forth is done and we are three topics past it","m.mentions":{},"m.new_content":{"body":"I either have the choice to jump in all the time too, or add myself to the queue for after this back-and-forth is done and we are three topics past it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XYHjfHHs03y-OkV-oejOhFu4GIeYvOy070KjFHTNszA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733337121752,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TDfWFrHGjz0XgHPMM-K8NDxNptZxaVWjxZ4Ge5dnehE"},
{"content":{"body":"> <@ljharb:matrix.org> you may be overestimating how many users use bundlers, is all\n\nMy job requires me to read a lot of code for random retailers and etc and I am confident in the claim that almost all production JS on the web is bundled (or has no dependencies)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$X3G3Fa4JhZ_IEWUdl7jEmf-f4YPEK7nQtnDHcodU_NM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />you may be overestimating how many users use bundlers, is all</blockquote></mx-reply>My job requires me to read a lot of code for random retailers and etc and I am confident in the claim that almost all production JS on the web is bundled (or has no dependencies)","m.relates_to":{"m.in_reply_to":{"event_id":"$X3G3Fa4JhZ_IEWUdl7jEmf-f4YPEK7nQtnDHcodU_NM"}},"msgtype":"m.text"},"ts":1733337153734,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dZbm8C8bkjdcc3-C9n8M7EMyfsHH7Nv3v-42FBnr3rw"},
{"content":{"body":"there's something to be said for the importance of timely clarifications -- meaning while we're on the slide, rather than waiting till the end.  so I think it's ok if the presenter wants to do that.  but to your point, it is better if we say to still use `clarifying question` in TCQ, with the understanding that the chairs will interrupt immediately during the presentation in this mode","format":"org.matrix.custom.html","formatted_body":"there's something to be said for the importance of timely clarifications -- meaning while we're on the slide, rather than waiting till the end.  so I think it's ok if the presenter wants to do that.  but to your point, it is better if we say to still use <code>clarifying question</code> in TCQ, with the understanding that the chairs will interrupt immediately during the presentation in this mode","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7AtPr7vzhy_IhC6Q045E9XC0_3fzLR8_1oOmNogk5uo"}},"msgtype":"m.text"},"ts":1733337257485,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HZg1lc4m8_EjjLP3j9NfZbkLa6CYNPMxJQqVm5rUYt4"},
{"content":{"body":"Ok that seems like an ok approach, if chairs would facilitate in that way","m.mentions":{},"msgtype":"m.text"},"ts":1733337340523,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LamWewfVYbXeSHKx6bqielgChuMRpWl3ohj5PsaE_34"},
{"content":{"body":"Ideally we should encourage presenters to keep an eye on the queue while presenting, but I understand that it can be difficult","m.mentions":{},"msgtype":"m.text"},"ts":1733337358017,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0R8rxw3spcqZpnD9xZYgJ_JWtCPecKq16e7Vs6FHTsQ"},
{"content":{"body":"Kris Kowal I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referred module instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referred module instance","m.mentions":{"user_ids":["@kriskowal:matrix.org"]},"msgtype":"m.text"},"ts":1733337640212,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-irqicqWeGp2wxAZZUcbiH7-ACP67wTklQ73C4O2Pa4"},
{"content":{"body":"Effectively, the hook are only defined in the entry point of the graph","m.mentions":{},"msgtype":"m.text"},"ts":1733337653196,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3YUxRE0-XPvviytyF5GvSFqcBO5Zw2_UI_YMpann-z8"},
{"content":{"body":"And they have to receive the referrer instance as an argument to do proper resolution (I liked seeing it unexpectedly in the slides)","m.mentions":{},"msgtype":"m.text"},"ts":1733337680746,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6tLgQiYtBtGu_wjgHDsgwNR702h4PZcSIlhuhiUiUns"},
{"content":{"body":" * Kris Kowal I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referrer module instance","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referrer module instance","m.mentions":{},"m.new_content":{"body":"Kris Kowal I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referrer module instance","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> I think I disagree with the idea that we need to pass hook to the source constructor. Instead, I'd like to have module instances being implicitly created from sources by inheriting the same options bag from the referrer module instance","m.mentions":{"user_ids":["@kriskowal:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-irqicqWeGp2wxAZZUcbiH7-ACP67wTklQ73C4O2Pa4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733337693381,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kf7Jv8tej_o67s-jlIvFVy7s7yY-FlZ2RwiOnKNqZcM"},
{"content":{"body":" * And they have to receive the referrer source (which has metadata, such as the base URL) as an argument to do proper resolution (I liked seeing it unexpectedly in the slides)","m.mentions":{},"m.new_content":{"body":"And they have to receive the referrer source (which has metadata, such as the base URL) as an argument to do proper resolution (I liked seeing it unexpectedly in the slides)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6tLgQiYtBtGu_wjgHDsgwNR702h4PZcSIlhuhiUiUns","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733337922567,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Kifs82KGuyZwiMhAdgJpPsITJ6vpwjzdt9kbEOwnhbM"},
{"content":{"body":" * And they have to receive the referrer source (which has (virtual-)host-specific metadata, such as the base URL) as an argument to do proper resolution (I liked seeing it unexpectedly in the slides)","m.mentions":{},"m.new_content":{"body":"And they have to receive the referrer source (which has (virtual-)host-specific metadata, such as the base URL) as an argument to do proper resolution (I liked seeing it unexpectedly in the slides)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6tLgQiYtBtGu_wjgHDsgwNR702h4PZcSIlhuhiUiUns","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733337939876,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vY-fXS7-WJztqpDjMBf67-04WetuXXjqrdScRZOSpKU"},
{"content":{"body":"did the meeting end or is it lunch? ","m.mentions":{},"msgtype":"m.text"},"ts":1733339068117,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7Ddr4QgS9JyfEfOVDEI9r3hN4nV21-czZZf1YlpffQo"},
{"content":{"body":"oh i see the calendar was just edited, nvm","m.mentions":{},"msgtype":"m.text"},"ts":1733339080677,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A3RB8Rpi2YI4w5NaT4p5OLPF5_keiGPnTCzyISWEH6A"},
{"content":{"body":"end","m.mentions":{},"msgtype":"m.text"},"ts":1733339080732,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zBMaOkE9nNSfRzcUHAVww4tvXfyTRL64tFYr9_JzBig"},
{"content":{"body":"PSA: barring any late additions/requests for continuations, if we don't make up any time tomorrow, we are going to ask that we continue the meeting for 15 minutes into the scheduled lunch break to close out the meeting.  (this avoids taking an hour break only to come back for 15 minutes)","m.mentions":{},"msgtype":"m.text"},"ts":1733351759185,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$-SEnzHCNtZb72zgQ4pwqP44QnXMgAABOqRs5tpkd9Ys"}
]