[
{"content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17’...binary data...’`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17’...binary data...’</code>, denoting 17 bytes of non-utf binary data.","msgtype":"m.text"},"ts":1727051500931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ"},
{"content":{"body":"* How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf binary data.","m.new_content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf binary data.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727051513686,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4FhnMYoxhYSzP17RR582zX2aXv7WtVJ1Q4paghSn-vA"},
{"content":{"body":"* How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf data.","m.new_content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf data.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727051525077,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FqF4s60BpITDTwbG0maZeYGDbJXCmKPwbmB4yAwxdCA"},
{"content":{"body":"I think the spec could be easy enough, but the challenge is making sure browsers don’t run a UTF8 step before letting JS parse.","msgtype":"m.text"},"ts":1727051630637,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$C_zRmCQ5toOkE99U02hJqGitLxgJLF7NKMT8hiy6Irw"},
{"content":{"body":"I don't think engines would go for that, no","m.mentions":{},"msgtype":"m.text"},"ts":1727053789311,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3IUgNgjiKnPGa76T8xpToW8rbT0LBYY0vM9SpwhOho"},
{"content":{"body":"or other tools, for that matter","m.mentions":{},"msgtype":"m.text"},"ts":1727053793397,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BMfV8wx2hEQ10CCm8EaofceTmQ24GsGCqk4d5NmWTYU"},
{"content":{"body":"just do `Uint8Array.fromBase64(/*data*/)`; after gzip this should be basically the same size anyway","format":"org.matrix.custom.html","formatted_body":"just do <code>Uint8Array.fromBase64(/*data*/)</code>; after gzip this should be basically the same size anyway","m.mentions":{},"msgtype":"m.text"},"ts":1727053822526,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$snSFex1XP8tPrWQa4iCvnMkSXIIGDP5p6Ehw1w5iKyo"},
{"content":{"body":"I’m trying to avoid Base64’s byte increase and the time needed to decode it (10ms+ for each of several stings)","msgtype":"m.text"},"ts":1727062387931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6FvpQQy87Z5L14OeQi_2weQ8Y37lkgYbkyNSi-4xZrI"},
{"content":{"body":"I would expect Uint8Array.fromBase64 to be a great deal faster than that.","m.mentions":{},"msgtype":"m.text"},"ts":1727093372474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$waPICSqWWmU3sOGNBug5_j4s-qmdLMRBVYfHkRixTkc"},
{"content":{"body":"If you have a mac with macOS14+, you can download the latest Safari Tech Preview and try it out there","m.mentions":{},"msgtype":"m.text"},"ts":1727093524056,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mIsq-Keb4XxiBiKt0ACYPkALYL7lC0gl7ftYrXM58bs"},
{"content":{"body":"The decide is being done in Chrome’s `data:` URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","format":"org.matrix.custom.html","formatted_body":"The decide is being done in Chrome’s <code>data:</code> URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","msgtype":"m.text"},"ts":1727102680324,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$f5dFLsGQVUz6sKxhn_RZoTs8cabugnlip0lTH5TVb0Q"},
{"content":{"body":"If we can skip Base64, we get both.","msgtype":"m.text"},"ts":1727102700953,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FNd7o5kBCoOc0KLuVxChVxLNnhwYgj4x4jdRhcZJmnM"},
{"content":{"body":"* The decode is being done in Chrome’s data: URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","m.new_content":{"body":"The decode is being done in Chrome’s data: URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","msgtype":"m.text"},"m.relates_to":{"event_id":"$f5dFLsGQVUz6sKxhn_RZoTs8cabugnlip0lTH5TVb0Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727102724281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$V7JcXDhBZ5uncHY4lxX0_kvVWsNsxN-mzWSkqz61Q5U"}
]