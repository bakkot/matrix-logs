[
{"content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17’...binary data...’`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17’...binary data...’</code>, denoting 17 bytes of non-utf binary data.","msgtype":"m.text"},"ts":1727051500931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ"},
{"content":{"body":"* How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf binary data.","m.new_content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf binary data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf binary data.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727051513686,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$4FhnMYoxhYSzP17RR582zX2aXv7WtVJ1Q4paghSn-vA"},
{"content":{"body":"* How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf data.","m.new_content":{"body":"How feasible would it be to embed binary strings inside JS?\nSomething like `const binary = 17'...binary data...'`, denoting 17 bytes of non-utf data.","format":"org.matrix.custom.html","formatted_body":"How feasible would it be to embed binary strings inside JS?<br/>Something like <code data-md=\"`\">const binary = 17&#39;...binary data...&#39;</code>, denoting 17 bytes of non-utf data.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qvs6r0fG_gSed1t6SegOSKbUN5YawxWq7HFy4sStgEQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727051525077,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FqF4s60BpITDTwbG0maZeYGDbJXCmKPwbmB4yAwxdCA"},
{"content":{"body":"I think the spec could be easy enough, but the challenge is making sure browsers don’t run a UTF8 step before letting JS parse.","msgtype":"m.text"},"ts":1727051630637,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$C_zRmCQ5toOkE99U02hJqGitLxgJLF7NKMT8hiy6Irw"},
{"content":{"body":"I don't think engines would go for that, no","m.mentions":{},"msgtype":"m.text"},"ts":1727053789311,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X3IUgNgjiKnPGa76T8xpToW8rbT0LBYY0vM9SpwhOho"},
{"content":{"body":"or other tools, for that matter","m.mentions":{},"msgtype":"m.text"},"ts":1727053793397,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BMfV8wx2hEQ10CCm8EaofceTmQ24GsGCqk4d5NmWTYU"},
{"content":{"body":"just do `Uint8Array.fromBase64(/*data*/)`; after gzip this should be basically the same size anyway","format":"org.matrix.custom.html","formatted_body":"just do <code>Uint8Array.fromBase64(/*data*/)</code>; after gzip this should be basically the same size anyway","m.mentions":{},"msgtype":"m.text"},"ts":1727053822526,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$snSFex1XP8tPrWQa4iCvnMkSXIIGDP5p6Ehw1w5iKyo"},
{"content":{"body":"I’m trying to avoid Base64’s byte increase and the time needed to decode it (10ms+ for each of several stings)","msgtype":"m.text"},"ts":1727062387931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6FvpQQy87Z5L14OeQi_2weQ8Y37lkgYbkyNSi-4xZrI"},
{"content":{"body":"I would expect Uint8Array.fromBase64 to be a great deal faster than that.","m.mentions":{},"msgtype":"m.text"},"ts":1727093372474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$waPICSqWWmU3sOGNBug5_j4s-qmdLMRBVYfHkRixTkc"},
{"content":{"body":"If you have a mac with macOS14+, you can download the latest Safari Tech Preview and try it out there","m.mentions":{},"msgtype":"m.text"},"ts":1727093524056,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mIsq-Keb4XxiBiKt0ACYPkALYL7lC0gl7ftYrXM58bs"},
{"content":{"body":"The decide is being done in Chrome’s `data:` URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","format":"org.matrix.custom.html","formatted_body":"The decide is being done in Chrome’s <code>data:</code> URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","msgtype":"m.text"},"ts":1727102680324,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$f5dFLsGQVUz6sKxhn_RZoTs8cabugnlip0lTH5TVb0Q"},
{"content":{"body":"If we can skip Base64, we get both.","msgtype":"m.text"},"ts":1727102700953,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FNd7o5kBCoOc0KLuVxChVxLNnhwYgj4x4jdRhcZJmnM"},
{"content":{"body":"* The decode is being done in Chrome’s data: URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","m.new_content":{"body":"The decode is being done in Chrome’s data: URI parser, not JS. Search embeds large images as data URIs for… reasons, and is looking to improve both response size and time to image ready.","msgtype":"m.text"},"m.relates_to":{"event_id":"$f5dFLsGQVUz6sKxhn_RZoTs8cabugnlip0lTH5TVb0Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727102724281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$V7JcXDhBZ5uncHY4lxX0_kvVWsNsxN-mzWSkqz61Q5U"},
{"content":{"body":"afaict, the base64 parser for data: URIs is called https://source.chromium.org/chromium/chromium/src/+/main:net/base/data_url.cc;l=150;drc=f522344e45882da4c7f7cb1b3a0a7bd747d654bb which means it's https://source.chromium.org/chromium/chromium/src/+/main:third_party/modp_b64/modp_b64.cc;drc=f522344e45882da4c7f7cb1b3a0a7bd747d654bb;l=118 which is not at all optimized","m.mentions":{},"msgtype":"m.text"},"ts":1727103088977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jqGPwkjS4TjWTu4w41_GPQxq7DXhLauFhu-X0vcEN8E"},
{"content":{"body":"I am hoping Chrome will do what Safari did for base64, which is to use https://github.com/simdutf/simdutf, which uses SIMD and should be able to decode at ~ the speed of memory","m.mentions":{},"msgtype":"m.text"},"ts":1727103136166,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gpRrVVOp_rvSBYaa3AhXwJEvxLynCGQxSvAZnKn4rJ4"},
{"content":{"body":" * I am hoping Chrome will do what Safari did for fromBase64, which is to use https://github.com/simdutf/simdutf, which uses SIMD and should be able to decode at ~ the speed of memory","m.mentions":{},"m.new_content":{"body":"I am hoping Chrome will do what Safari did for fromBase64, which is to use https://github.com/simdutf/simdutf, which uses SIMD and should be able to decode at ~ the speed of memory","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gpRrVVOp_rvSBYaa3AhXwJEvxLynCGQxSvAZnKn4rJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727103148249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lU4eORKBa_akGwapNB5B-oyJuE9zzV5WQqVhtqlG014"},
{"content":{"body":"base64 should only very barely affect response size after gzip so I don't think that should matter","m.mentions":{},"msgtype":"m.text"},"ts":1727103220238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YTWT8Ka7XBnWcCHqcq3RDa9dTfO_tb0IxDAAh-g9mKo"},
{"content":{"body":"for loading images you'd need to turn that into a blob and then make a blob url, but I would expect that to be cheap too ","m.mentions":{},"msgtype":"m.text"},"ts":1727103425148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9av0dKYnPfkuLSqnPTf_nHdudp-LUtyiRXLB2Y2BxUo"},
{"content":{"body":"also you'd need to do that either way since `data:` URIs can't contain arbitrary bytes anyway","format":"org.matrix.custom.html","formatted_body":"also you'd need to do that either way since <code>data:</code> URIs can't contain arbitrary bytes anyway","m.mentions":{},"msgtype":"m.text"},"ts":1727103686789,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GeXnS-J-Q5hNj_gAdYVkPerr0Skk1KvKFkVBINfaa58"},
{"content":{"body":"> which uses SIMD and should be able to decode at ~ the speed of memory \nI’ll see if this is a possibility.\n\n> base64 should only very barely affect response size after gzip so I don't think that should matter\nThe network bytes themselves look fine (7.4kb brotli q3 vs 7.3kb raw bytes), but they’re literally worring about the decompressed size and how it affects the resource prescanner and JS parser.\n\n> also you'd need to do that either way since data: URIs can't contain arbitrary bytes anyway\n`data:` URIs are feed straight to `img.src = '…’`, but if we can get raw bytes literal we would create a blob object, get and object id, and feed that to the src.","format":"org.matrix.custom.html","formatted_body":"<blockquote data-md=\">\">which uses SIMD and should be able to decode at ~ the speed of memory <br/></blockquote>I’ll see if this is a possibility.<br/><br/><blockquote data-md=\">\">base64 should only very barely affect response size after gzip so I don&#39;t think that should matter<br/></blockquote>The network bytes themselves look fine (7.4kb brotli q3 vs 7.3kb raw bytes), but they’re literally worring about the decompressed size and how it affects the resource prescanner and JS parser.<br/><br/><blockquote data-md=\">\">also you&#39;d need to do that either way since data: URIs can&#39;t contain arbitrary bytes anyway<br/></blockquote><code data-md=\"`\">data:</code> URIs are feed straight to <code data-md=\"`\">img.src = &#39;…’</code>, but if we can get raw bytes literal we would create a blob object, get and object id, and feed that to the src.","msgtype":"m.text"},"ts":1727116204024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$W7IrMm0jGO5QAHa1tQ4aUOafRm34Q9H1LSI4ipndFLI"},
{"content":{"body":"Greetings from TPAC. Y'all let me know if you're here or if you want me dropping in on any meetings on behalf of TC39","m.mentions":{},"msgtype":"m.text"},"ts":1727119840343,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$3l0aHTwWzBelnoWg5Hfmujvjuy47gbjcxf_GrOleSNg"}
]