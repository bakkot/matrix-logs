[
{"content":{"body":"leobalter: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"leobalter: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","mimetype":"text/html"}]},"ts":1644449869788,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5TZwt9xj7dwdKIyYG5xF87GyNascF9jGc4EFbAkti8o"},
{"content":{"body":"the question is essentially: do we have these new methods defer (via virtual calls) to the existing methods so that existing subclasses do not break, or do we have the new methods reach into the internal slots directly?","msgtype":"m.text","org.matrix.msc1767.text":"the question is essentially: do we have these new methods defer (via virtual calls) to the existing methods so that existing subclasses do not break, or do we have the new methods reach into the internal slots directly?"},"ts":1644449972585,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4ATWbPmgkEB-YszVNUC8gADoww9Gh9A74A0Q07CdbZQ"}
]