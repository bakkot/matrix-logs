[
{"content":{"body":"leobalter: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"leobalter: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: you will probably remember some earlier discussions around extending built-ins, particularly during the Set.prototype.{union,intersection,difference,etc} proposal","mimetype":"text/html"}]},"ts":1644449869788,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5TZwt9xj7dwdKIyYG5xF87GyNascF9jGc4EFbAkti8o"},
{"content":{"body":"the question is essentially: do we have these new methods defer (via virtual calls) to the existing methods so that existing subclasses do not break, or do we have the new methods reach into the internal slots directly?","msgtype":"m.text","org.matrix.msc1767.text":"the question is essentially: do we have these new methods defer (via virtual calls) to the existing methods so that existing subclasses do not break, or do we have the new methods reach into the internal slots directly?"},"ts":1644449972585,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4ATWbPmgkEB-YszVNUC8gADoww9Gh9A74A0Q07CdbZQ"},
{"content":{"body":"there are possibly also other design strategies, but we need to pick one, and it will have a large impact on how people subclass built-ins in a forward-compatible way (if they can at all)","msgtype":"m.text","org.matrix.msc1767.text":"there are possibly also other design strategies, but we need to pick one, and it will have a large impact on how people subclass built-ins in a forward-compatible way (if they can at all)"},"ts":1644450034992,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$w8v4OX82G3vbE9ZOne9p7jQFWBQVsUDieInJ9IHilns"},
{"content":{"body":"we're hoping we can actually make this decision as a committee and unblock the proposals that are currently blocked on it","msgtype":"m.text","org.matrix.msc1767.text":"we're hoping we can actually make this decision as a committee and unblock the proposals that are currently blocked on it"},"ts":1644450073885,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oImjrXmWsuAi2HfF4EXyDy_kYrmIiIc_omYPPCTXNzU"},
{"content":{"body":"virtual stuff increases security risk, so maybe put it on the security TG's agenda as well?","msgtype":"m.text","org.matrix.msc1767.text":"virtual stuff increases security risk, so maybe put it on the security TG's agenda as well?"},"ts":1644451182201,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tc_u-DXyCOHZNlPnEnZLqV3XV2kfeUIs-uIDDMrZqhI"}
]