[
{"content":{"body":"First I think the main focus here is to build a safe resolve operation for spec and host, and not directly exposed to the programmer.\n\nSecond even if that proxy sensitive operation was directly accessible to programs, we may find it preferable to changing the semantics of thenables.","msgtype":"m.text"},"ts":1754547266989,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4WiGo5qpn9zKZojhP3ao6yAXaZ_NG_iVg77d7pkIDoM"},
{"content":{"body":"Several delegates have expressed the constraint that anything we do here should be implementable in userland; e.g. Node implements a bunch of web APIs in JS","m.mentions":{},"msgtype":"m.text"},"ts":1754547406532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YqX9Cc0BtqarzECKsTOsmVd-5qJs2O3tca5jQjYToyY"},
{"content":{"body":"and I don't think this is changing the semantics of thenables given that it's doable in userland already, unless we handle the frozen objects case, which is not really part of how anyone thinks of thenables afaik","m.mentions":{},"msgtype":"m.text"},"ts":1754547531639,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N8xYx5_xcxCGj6LQO8FZ54LUPrM0lpZkTQ4uEGs-AwY"},
{"content":{"body":"Are AOs first class values? Can I maybe pass an AO name to something that expects an abstract closure?","m.mentions":{},"msgtype":"m.text"},"ts":1754599342888,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Sh3sYFyR_PRj_zKSWIFMmEa980IbvAKs_9cUlq44mYM"},
{"content":{"body":"Oh I guess the answer is \"yes\", like in steps 6-7-8 of https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator. Nice","m.mentions":{},"msgtype":"m.text"},"ts":1754599552893,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$IuDOdws6tKgDiLN-04GMFd6KIj-6dqOVPp_-0LKKH5M"},
{"content":{"body":"I'm not sure I understand what you mean. My concern is that your \"userland solution\" relies on the resolution value to have a non-frozen `then`. It simply fails with frozen values, which I hope we can agree should be totally valid values to use as a resolution.","format":"org.matrix.custom.html","formatted_body":"I'm not sure I understand what you mean. My concern is that your \"userland solution\" relies on the resolution value to have a non-frozen <code>then</code>. It simply fails with frozen values, which I hope we can agree should be totally valid values to use as a resolution.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$N8xYx5_xcxCGj6LQO8FZ54LUPrM0lpZkTQ4uEGs-AwY"}},"msgtype":"m.text"},"ts":1754603654883,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aYHsOS8Cbj3s2bFNnVCAHXkuk7A9lnEGGH005ZKv4xA"},
{"content":{"body":"you cannot specifically pass an AO name to something that expects an abstract closure, those are different operations","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Sh3sYFyR_PRj_zKSWIFMmEa980IbvAKs_9cUlq44mYM"}},"msgtype":"m.text"},"ts":1754603727850,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yz7SOHTBdj39wiUQu1c0OWVm6g-H5egExNJEuzZSRGg"},
{"content":{"body":"* you cannot specifically pass an AO name to something that expects an abstract closure, those are different kinds of thing","m.mentions":{},"m.new_content":{"body":"you cannot specifically pass an AO name to something that expects an abstract closure, those are different kinds of thing","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Yz7SOHTBdj39wiUQu1c0OWVm6g-H5egExNJEuzZSRGg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754603732993,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8aQ6Uu12epOZ1sFl8NFwHY6IWmIjft9ZqzXpj6aRHgw"},
{"content":{"body":"you can do the thing in ApplyStringOrNumericBinaryOperator but it's not a common pattern and I wouldn't recommend it in most cases","m.mentions":{},"msgtype":"m.text"},"ts":1754603755959,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$btW44AUD31anLz49HkKxkit_CPjhL4JMeP3pC9Tl_pY"},
{"content":{"body":"We can definitely consider exposing to userland a safe resolve operation that would let the caller asynchronously discover information about whether the value is a proxy (or has a proxy in its prototype chain).","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YqX9Cc0BtqarzECKsTOsmVd-5qJs2O3tca5jQjYToyY"}},"msgtype":"m.text"},"ts":1754603777064,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wYn3s6LFm78FHEQx1wAd2TGTwktMqRJU_Uo3ljB13pY"},
{"content":{"body":"I currently find that preferable to other alternatives I've heard so far.","m.mentions":{},"msgtype":"m.text"},"ts":1754603833922,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$HzjpkeduNvgXI8VnQLPe0EP5AL8eoJtNbt0HOOTAPWc"},
{"content":{"body":"* We can definitely consider exposing to userland a safe resolve operation, even if that operation would let the caller asynchronously discover information about whether the value is a proxy (or has a proxy in its prototype chain).","m.mentions":{},"m.new_content":{"body":"We can definitely consider exposing to userland a safe resolve operation, even if that operation would let the caller asynchronously discover information about whether the value is a proxy (or has a proxy in its prototype chain).","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wYn3s6LFm78FHEQx1wAd2TGTwktMqRJU_Uo3ljB13pY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754604038287,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SQgvpEHre05UFXXJJDAQQ4yLsCAoZLxxWPUi_9Kh6eU"},
{"content":{"body":"However I haven't heard a request for userland to be able to implement the safe resolve operation itself. Just that whatever hosts can do, that userland can do it just as much (aka a virtualization question)","m.mentions":{},"msgtype":"m.text"},"ts":1754604140942,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xpiT9VqKHVQ81LKskCijDETPunQQaIJlZR1q86xUw44"},
{"content":{"body":"* However I haven't heard a request for userland to be able to implement the safe resolve operation itself. Just that whatever hosts can do, that userland can do it just as much (aka a virtualization constraint, which of course I'm 100% behind)","m.mentions":{},"m.new_content":{"body":"However I haven't heard a request for userland to be able to implement the safe resolve operation itself. Just that whatever hosts can do, that userland can do it just as much (aka a virtualization constraint, which of course I'm 100% behind)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xpiT9VqKHVQ81LKskCijDETPunQQaIJlZR1q86xUw44","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754604175593,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hNyJW6Kse7dIb3Ulfs4xTVgcFCZUjoweRLPRSyyJy4M"},
{"content":{"body":"@nicolo-ribaudo:matrix.org according to our editorial conventions, it should be avoided https://github.com/tc39/ecma262/wiki/Editorial-Conventions","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo</a> according to our editorial conventions, it should be avoided https://github.com/tc39/ecma262/wiki/Editorial-Conventions","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1754604800571,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$17QClRq6VVlQT6iPxvBNgf1TdOTDRHNWblk-psJQ-4A"},
{"content":{"body":"I am primarily concerned about preventing this class of CVEs in browsers, which are about passing spec-defined objects, none of which expect to have a `then` or to be non-extensible. I think updating web specs to use the solution I suggest there, and throwing in case that a user has given the object a `then` or made it non-extensible in the mean time, is totally fine. Since this is already possible it presumably doesn't change the definition of \"thenable\".\n\nWe could, additionally, provide a version which works even if the object has been modified in one of those two ways. I'm neutral on this; it's pretty much irrelevant to the case of web specs because users are not, in practice, going to do either of those things. However, if we did, I don't think it would meaningfully change the definition of \"thenable\" given what's already possible.","format":"org.matrix.custom.html","formatted_body":"<p>I am primarily concerned about preventing this class of CVEs in browsers, which are about passing spec-defined objects, none of which expect to have a <code>then</code> or to be non-extensible. I think updating web specs to use the solution I suggest there, and throwing in case that a user has given the object a <code>then</code> or made it non-extensible in the mean time, is totally fine. Since this is already possible it presumably doesn't change the definition of \"thenable\".</p>\n<p>We could, additionally, provide a version which works even if the object has been modified in one of those two ways. I'm neutral on this; it's pretty much irrelevant to the case of web specs because users are not, in practice, going to do either of those things. However, if we did, I don't think it would meaningfully change the definition of \"thenable\" given what's already possible.</p>\n","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aYHsOS8Cbj3s2bFNnVCAHXkuk7A9lnEGGH005ZKv4xA"}},"msgtype":"m.text"},"ts":1754604845258,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JqTszS3ub8kjntsfyPq0uyND9JJpXSb91XuRXEqAhUk"},
{"content":{"body":"sorry, to be clear, I meant the latter thing yes","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xpiT9VqKHVQ81LKskCijDETPunQQaIJlZR1q86xUw44"}},"msgtype":"m.text"},"ts":1754604862225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CkiHcircb125007qA-hr46ShCcXmUrRX5xArzsOpq3k"},
{"content":{"body":"there's an easy solution here though, which is to define an AC that just forwards its parameters to an AO","format":"org.matrix.custom.html","formatted_body":"there&#39;s an easy solution here though, which is to define an AC that just forwards its parameters to an AO","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Yz7SOHTBdj39wiUQu1c0OWVm6g-H5egExNJEuzZSRGg"}},"msgtype":"m.text"},"ts":1754605046472,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rkWNvc5DwWPcJKT2ZgXrO7F6QigtZxVEL_2-kEBeuMo"},
{"content":{"body":"I'm fine with that too if everyone else is.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HzjpkeduNvgXI8VnQLPe0EP5AL8eoJtNbt0HOOTAPWc"}},"msgtype":"m.text"},"ts":1754605355648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$II5RJFnDDLkep9G23Uivp1jqSFIWvdVcfxkmTz4ZXR4"}
]