[
{"content":{"body":"> <@bakkot:matrix.org> I strongly suspect there's a number of remaining cases where there's a `!` which should be a `?`\n\nmight be a dumb question, but why do we even annotate uses of AOs with `?` and `!`? If the AO is fallible, then probably *every* use of it should be flagged with `?`. Flagging a use of a fallible AO with `!`, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail. If an AO is, on the other hand, infallible, then *every* use of it should be marked with `!`. Marking a use of an infallible AO with `?` would be an editorial mistake, and flagging the use as `!` would be redundant. So the only informative case I can see is (1) fallible AO, (2) used in an infallible way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pYtyozl2zgb4jTE1CSvlZRUuyf_YrB_sFeh1Cyae5C0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I strongly suspect there's a number of remaining cases where there's a <code>!</code> which should be a <code>?</code></blockquote></mx-reply>might be a dumb question, but why do we even annotate uses of AOs with <code>?</code> and <code>!</code>? If the AO is fallible, then probably <em>every</em> use of it should be flagged with <code>?</code>. Flagging a use of a fallible AO with <code>!</code>, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail. If an AO is, on the other hand, infallible, then <em>every</em> use of it should be marked with <code>!</code>. Marking a use of an infallible AO with <code>?</code> would be an editorial mistake, and flagging the use as <code>!</code> would be redundant. So the only informative case I can see is (1) fallible AO, (2) used in an infallible way","m.relates_to":{"m.in_reply_to":{"event_id":"$pYtyozl2zgb4jTE1CSvlZRUuyf_YrB_sFeh1Cyae5C0"}},"msgtype":"m.text"},"ts":1648021474978,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$C3dg3SOBUGDR90-UDMXX5_iiEJJNrAidDo2Ruh2HsCM"},
{"content":{"body":"Historically at least the ? took care of unwrapping the return value, but I'm not really sure what the state of play is these days as there has been some refactoring","msgtype":"m.text","org.matrix.msc1767.text":"Historically at least the ? took care of unwrapping the return value, but I'm not really sure what the state of play is these days as there has been some refactoring"},"ts":1648023400990,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$wYFo0LNFVIIx-i_LjHk2Orirhm_jvGxflXeI9XWihAM"},
{"content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648035124748,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE"},
{"content":{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","m.new_content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648035139233,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hzDhmSdFzHHNAbKrGPhDo2vWEMQowLMnXnAw2_2420c"},
{"content":{"body":"It's not like removing the assertions would magically make it more correct either. 🙂","msgtype":"m.text","org.matrix.msc1767.text":"It's not like removing the assertions would magically make it more correct either. 🙂"},"ts":1648036095477,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$mKTlQnVXiWqx-cryt_ODN0zg7JEQZFBloZSToYCthHk"},
{"content":{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","m.new_content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648040382504,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LN_hI0fsJlhPdK2nlw9Wk5EQaN_V_O8a8IV1XssgWNs"},
{"content":{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","m.new_content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648040406998,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3InrxDc5XJJPEHJjyRf7P2FnUWEZW5amwTlFlS1nK0s"},
{"content":{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","m.new_content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the <del>rigidity</del><ins>safety</ins> of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the <del>rigidity</del>&lt;ins&gt;safety&lt;/ins&gt; of having a proof with each assertion in the spec, that sounds easier said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec I have found it very helpful to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648040449194,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$GxkNpzNkHpZOYqJJlKd5E7EHVFM8LGUL6FXwzTi8QLM"},
{"content":{"body":"Jesse: turns out there are a _lot_ of places where there is a fallible AO used in an infallible way","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a>: turns out there are a <em>lot</em> of places where there is a fallible AO used in an infallible way","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jesse: turns out there are a _lot_ of places where there is a fallible AO used in an infallible way","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a>: turns out there are a <em>lot</em> of places where there is a fallible AO used in an infallible way","mimetype":"text/html"}]},"ts":1648042446820,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$voIj4cqTkSIkvdkKgmmj3vXFC6KV00JT3yuL6jvkAAw"},
{"content":{"body":"that is, in fact, every use of `!` in the spec now","format":"org.matrix.custom.html","formatted_body":"that is, in fact, every use of <code>!</code> in the spec now","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that is, in fact, every use of `!` in the spec now","mimetype":"text/plain"},{"body":"that is, in fact, every use of <code>!</code> in the spec now","mimetype":"text/html"}]},"ts":1648042456989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8ygh0kRFzUywIpPBbZUvlkKoFBFIZjP9iowsSUwVNwo"},
{"content":{"body":"(infallible AOs are not called with either `?` or `!`)","format":"org.matrix.custom.html","formatted_body":"(infallible AOs are not called with either <code>?</code> or <code>!</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(infallible AOs are not called with either `?` or `!`)","mimetype":"text/plain"},{"body":"(infallible AOs are not called with either <code>?</code> or <code>!</code>)","mimetype":"text/html"}]},"ts":1648042470225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uzBwvmMgHnem3yS2TfhTrfMH3jAKUFVm6U8NfflH3X0"},
{"content":{"body":"> <@bakkot:matrix.org> or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be `undefined`\n\nI came back to this today, and the only use of GetSuperBase() (step 3 of MakeSuperPropertyReference) is immediately preceded by an \"_env_.HasSuperBinding() is *true*\" assertion, which confirms that [[HomeObject]] is not undefined (the only location I found where it _could_ be is prevented by step 10.f of PerformEval; all others seem to be prevented by \"… Contains |SuperProperty|\" early errors). So GetSuperBase step 2 can be removed, and there is arbitrary flexibility between it and MakeSuperPropertyReference.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bIiG5pjwX7shcI69Xxk-S1EK0xY3h02FJlV03CGtXL8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be <code>undefined</code></blockquote></mx-reply>I came back to this today, and the only use of GetSuperBase() (step 3 of MakeSuperPropertyReference) is immediately preceded by an &quot;<em>env</em>.HasSuperBinding() is <em>true</em>&quot; assertion, which confirms that [[HomeObject]] is not undefined (the only location I found where it <em>could</em> be is prevented by step 10.f of PerformEval; all others seem to be prevented by &quot;… Contains |SuperProperty|&quot; early errors). So GetSuperBase step 2 can be removed, and there is arbitrary flexibility between it and MakeSuperPropertyReference.","m.relates_to":{"m.in_reply_to":{"event_id":"$bIiG5pjwX7shcI69Xxk-S1EK0xY3h02FJlV03CGtXL8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be `undefined`\n\nI came back to this today, and the only use of GetSuperBase() (step 3 of MakeSuperPropertyReference) is immediately preceded by an \"_env_.HasSuperBinding() is *true*\" assertion, which confirms that [[HomeObject]] is not undefined (the only location I found where it _could_ be is prevented by step 10.f of PerformEval; all others seem to be prevented by \"… Contains |SuperProperty|\" early errors). So GetSuperBase step 2 can be removed, and there is arbitrary flexibility between it and MakeSuperPropertyReference.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bIiG5pjwX7shcI69Xxk-S1EK0xY3h02FJlV03CGtXL8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be <code>undefined</code></blockquote></mx-reply>I came back to this today, and the only use of GetSuperBase() (step 3 of MakeSuperPropertyReference) is immediately preceded by an &quot;<em>env</em>.HasSuperBinding() is <em>true</em>&quot; assertion, which confirms that [[HomeObject]] is not undefined (the only location I found where it <em>could</em> be is prevented by step 10.f of PerformEval; all others seem to be prevented by &quot;… Contains |SuperProperty|&quot; early errors). So GetSuperBase step 2 can be removed, and there is arbitrary flexibility between it and MakeSuperPropertyReference.","mimetype":"text/html"}]},"ts":1648047160397,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$6WIHmJXcBlaygA5UY5kjBsV-FBEJVbD9jl7yrxyKxfs"}
]