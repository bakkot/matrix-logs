[
{"content":{"body":"> <@bakkot:matrix.org> I strongly suspect there's a number of remaining cases where there's a `!` which should be a `?`\n\nmight be a dumb question, but why do we even annotate uses of AOs with `?` and `!`? If the AO is fallible, then probably *every* use of it should be flagged with `?`. Flagging a use of a fallible AO with `!`, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail. If an AO is, on the other hand, infallible, then *every* use of it should be marked with `!`. Marking a use of an infallible AO with `?` would be an editorial mistake, and flagging the use as `!` would be redundant. So the only informative case I can see is (1) fallible AO, (2) used in an infallible way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pYtyozl2zgb4jTE1CSvlZRUuyf_YrB_sFeh1Cyae5C0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I strongly suspect there's a number of remaining cases where there's a <code>!</code> which should be a <code>?</code></blockquote></mx-reply>might be a dumb question, but why do we even annotate uses of AOs with <code>?</code> and <code>!</code>? If the AO is fallible, then probably <em>every</em> use of it should be flagged with <code>?</code>. Flagging a use of a fallible AO with <code>!</code>, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail. If an AO is, on the other hand, infallible, then <em>every</em> use of it should be marked with <code>!</code>. Marking a use of an infallible AO with <code>?</code> would be an editorial mistake, and flagging the use as <code>!</code> would be redundant. So the only informative case I can see is (1) fallible AO, (2) used in an infallible way","m.relates_to":{"m.in_reply_to":{"event_id":"$pYtyozl2zgb4jTE1CSvlZRUuyf_YrB_sFeh1Cyae5C0"}},"msgtype":"m.text"},"ts":1648021474978,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$C3dg3SOBUGDR90-UDMXX5_iiEJJNrAidDo2Ruh2HsCM"},
{"content":{"body":"Historically at least the ? took care of unwrapping the return value, but I'm not really sure what the state of play is these days as there has been some refactoring","msgtype":"m.text","org.matrix.msc1767.text":"Historically at least the ? took care of unwrapping the return value, but I'm not really sure what the state of play is these days as there has been some refactoring"},"ts":1648023400990,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$wYFo0LNFVIIx-i_LjHk2Orirhm_jvGxflXeI9XWihAM"},
{"content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648035124748,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE"},
{"content":{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","m.new_content":{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$WXscdyrKmDPt7hKNQC_oop0rQW238YvH0Mg0QSNXOxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail\n\nWhile I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?\nI do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>Flagging a use of a fallible AO with !, to be meaningful, would require a proof that the use of the AO in that case (or cases) can never fail</p>\n</blockquote>\n<p>While I like the rigidity of having a proof with each assertion in the spec, that sounds easiest said than done. Maybe one day, as the spec becomes more and more machine understandable?<br>I do think there is still value in the assertions, when reading the spec it is very help to immediately see that we believe a certain AO call will not fail. But yes this is done on trust of the spec authors</p>\n","mimetype":"text/html"}]},"ts":1648035139233,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hzDhmSdFzHHNAbKrGPhDo2vWEMQowLMnXnAw2_2420c"}
]