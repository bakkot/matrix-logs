[
{"content":{"body":"There were more frameworks and libraries that used metadata than not in our survey, IIRC","msgtype":"m.text"},"ts":1648512004424,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$58B8AV-jKhhy8DNfTthg4wJDphuj-XKAA13_mu4AkjU"},
{"content":{"body":"let me put another way, if a burden is placed on all the libraries in the JS universe, that still seems okay","msgtype":"m.text","org.matrix.msc1767.text":"let me put another way, if a burden is placed on all the libraries in the JS universe, that still seems okay"},"ts":1648512028307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4IRknnsfXEr4Mdr-LMhxWniaEWW6aHT2-U0b7jTx05M"},
{"content":{"body":"vs, a burden put on a majority of all JS programmers","msgtype":"m.text","org.matrix.msc1767.text":"vs, a burden put on a majority of all JS programmers"},"ts":1648512045302,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KB5RyPNiC6p0QJRopQg0ZtnH_nESxKvUVgBEZGpDVOA"},
{"content":{"body":"Fair enough, this would only be a burden on users of those specific frameworks and libraries ","format":"org.matrix.custom.html","formatted_body":"Fair enough, this would only be a burden on users of those specific frameworks and libraries","msgtype":"m.text"},"ts":1648512085245,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$mXpYaGO9o0FiFojKcwgRVjqMx-22A7TnO5J_4yz51SE"},
{"content":{"body":"my proposed sketch has a (slight) cost to anyone making use of such a library, to be clear, not just to the library itself","msgtype":"m.text","org.matrix.msc1767.text":"my proposed sketch has a (slight) cost to anyone making use of such a library, to be clear, not just to the library itself"},"ts":1648512097792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SATScniwuONl95qcneBOoAg-7BL88oQk6ZG-mC2CFTY"},
{"content":{"body":"good point, i'm trying to weigh that","msgtype":"m.text","org.matrix.msc1767.text":"good point, i'm trying to weigh that"},"ts":1648512105701,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iVpEVIse4NjGhMF9W3VUPmQQTh5pud0uZt_NLdPys2s"},
{"content":{"body":"(it's actually arguably simpler for the library itself)","msgtype":"m.text","org.matrix.msc1767.text":"(it's actually arguably simpler for the library itself)"},"ts":1648512108117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DE5EXuky-5aPA-cI_aUulAMpSgded-iQqgN_YIjzoX4"},
{"content":{"body":"the `let GObject = makeGObject()` thing?","format":"org.matrix.custom.html","formatted_body":"the <code>let GObject = makeGObject()</code> thing?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `let GObject = makeGObject()` thing?","mimetype":"text/plain"},{"body":"the <code>let GObject = makeGObject()</code> thing?","mimetype":"text/html"}]},"ts":1648512113044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cPj8jy-DMlIR-Ta1yj8sEcu_IiWywsJB6x7CM9lZ0B0"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648512117300,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xbnBsuN8elSzQJMdWx1tLPMBo59gWht4h6YQ2GLMGOU"},
{"content":{"body":"and the need to put a decorator on the class itself, in the case that need did not previously exist","msgtype":"m.text","org.matrix.msc1767.text":"and the need to put a decorator on the class itself, in the case that need did not previously exist"},"ts":1648512129034,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hP3uVb6pjUoysfezW73w2ARE6qDo7TKemn4RQ3jju5g"},
{"content":{"body":"my experience, as someone whose day job is not using frameworks, to be clear, is that frameworks involve incantations already","msgtype":"m.text","org.matrix.msc1767.text":"my experience, as someone whose day job is not using frameworks, to be clear, is that frameworks involve incantations already"},"ts":1648512157410,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dmPI-UHqudd5mts47sdmGmKDZy1fNw2AU8xBPJHKiDI"},
{"content":{"body":"this could be a death-by-a-thousand-cuts thing, of course","msgtype":"m.text","org.matrix.msc1767.text":"this could be a death-by-a-thousand-cuts thing, of course"},"ts":1648512167076,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cD_TpMeESpcy0GfbsPtdJbfv_gdYTi7g2p06aKtdEuM"},
{"content":{"body":"Yeah, I wouldn’t think it’d be much of a burden either way tbh","msgtype":"m.text"},"ts":1648512186143,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$XVX9Iw9lRzeapWTRTU60XfpGfizd7nwwOjvdSyrGVT4"},
{"content":{"body":"For decorator authors","msgtype":"m.text"},"ts":1648512190174,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$HL2qgDQg8w6Rlk83iB-LuohpP8p7Eigtxz2q8gJVUHM"},
{"content":{"body":"i'm also not against a simpler metadata sketched solution","msgtype":"m.text","org.matrix.msc1767.text":"i'm also not against a simpler metadata sketched solution"},"ts":1648512190517,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kMZQHeyakZmKRrvL9dZ0Zg3LoiG_V_7TT3E_VVkwDh4"},
{"content":{"body":"v8's main dislike is the intricate hierarchy of the metadata object that's created","msgtype":"m.text","org.matrix.msc1767.text":"v8's main dislike is the intricate hierarchy of the metadata object that's created"},"ts":1648512225997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$asbaoFolZbeJoql32aO0oM3t4XrA9FacbjNbv1n_H7E"},
{"content":{"body":"perhaps Mathieu Hofman can sketch out what he meant by having an object","format":"org.matrix.custom.html","formatted_body":"perhaps <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> can sketch out what he meant by having an object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"perhaps Mathieu Hofman can sketch out what he meant by having an object","mimetype":"text/plain"},{"body":"perhaps <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> can sketch out what he meant by having an object","mimetype":"text/html"}]},"ts":1648512307605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NqMHKBk8ZYmGft-A0T5BufdT5YrkKmR7IPVrwgUBwbg"},
{"content":{"body":"There's an old sketch here: https://github.com/tc39/proposal-decorators/issues/328","msgtype":"m.text","org.matrix.msc1767.text":"There's an old sketch here: https://github.com/tc39/proposal-decorators/issues/328"},"ts":1648512337254,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m6m9m3t_4hagfgok26odkWEx6oiAk5YPdRUzl5PzO6M"},
{"content":{"body":"> <@shuyuguo:matrix.org> i still think the answer to where parameter decorators fit in is that we do not have parameter decorators\n\nThe way TS does parameter decorators today is it passes through a `__param` decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tARo0v_Gf9QiV-Uc7medliZE6UxYdxDxo69Yo3puBEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />i still think the answer to where parameter decorators fit in is that we do not have parameter decorators</blockquote></mx-reply>The way TS does parameter decorators today is it passes through a <code>__param</code> decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class","m.relates_to":{"m.in_reply_to":{"event_id":"$tARo0v_Gf9QiV-Uc7medliZE6UxYdxDxo69Yo3puBEs"}},"msgtype":"m.text"},"ts":1648512341626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw"},
{"content":{"body":"> <@rbuckton:matrix.org> The way TS does parameter decorators today is it passes through a `__param` decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class\n\nThey way we've thought about it is that your decorating the declaration, not the value. Decorating a method parameter means the decoration is associated with the class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />The way TS does parameter decorators today is it passes through a <code>__param</code> decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class</blockquote></mx-reply>They way we've thought about it is that your decorating the declaration, not the value. Decorating a method parameter means the decoration is associated with the class","m.relates_to":{"m.in_reply_to":{"event_id":"$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw"}},"msgtype":"m.text"},"ts":1648512420770,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mffVIB39zb14DJnh8kPEqPyCki4PicFAImrWMW9Bzz8"},
{"content":{"body":"Essentially the object handle version is to replicate the old semantics, where we received the class itself, as close as possible. So to do that, we pass in a target object to the decorator","msgtype":"m.text"},"ts":1648512445744,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$3pw32_myn9FCrjADsMXFZvJNoIY5-vOxxVKZXlBoe9o"},
{"content":{"body":"And then we associate that with the class on `Symbol.metadata`","format":"org.matrix.custom.html","formatted_body":"And then we associate that with the class on <code>Symbol.metadata</code>","msgtype":"m.text"},"ts":1648512465812,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$BNoY5z3Z44DthREJpwIeyd7ccP6IiYkdosndVHkstz8"},
{"content":{"body":"The object can be used as a WeakMap key to the decorator’s metadata","msgtype":"m.text"},"ts":1648512495591,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$sMNzC14JSAcMbB47oFZpov_cbqtf7g9miNwg6VOMgTE"},
{"content":{"body":"rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?","mimetype":"text/html"}]},"ts":1648512504054,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc"},
{"content":{"body":"That’d be simplest possible API here, though it’s a bit odd","msgtype":"m.text"},"ts":1648512521665,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs"},
{"content":{"body":"I would feel better about it if Symbols could be used as weakmap keys, and then we can just pass in a symbol, call it `metadataKey`","format":"org.matrix.custom.html","formatted_body":"I would feel better about it if Symbols could be used as weakmap keys, and then we can just pass in a symbol, call it <code>metadataKey</code>","msgtype":"m.text"},"ts":1648512561367,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$abYZXn0lXtNvAHStNIDqeTjEdeMWVtjJNjFFvhfndvA"},
{"content":{"body":"But a frozen object also works","msgtype":"m.text"},"ts":1648512573374,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$oaP8rd7lBqLhlAQkyGPYwPDsCiXRyPGFrFNHvzAZ724"},
{"content":{"body":"or rather, until fairly strong opposition to the mere idea of parameter decorators fade away, not necessarily we all decide it's a good idea","msgtype":"m.text","org.matrix.msc1767.text":"or rather, until fairly strong opposition to the mere idea of parameter decorators fade away, not necessarily we all decide it's a good idea"},"ts":1648512597400,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$suWF6C7-OkpiACadfM69ch17NwtaSsNYu5A0Z1FhGU4"},
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?\n\nThere are more than a few large projects using TS parameter decorators, so there is definite interest","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br /><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?</blockquote></mx-reply>There are more than a few large projects using TS parameter decorators, so there is definite interest","m.relates_to":{"m.in_reply_to":{"event_id":"$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc"}},"msgtype":"m.text"},"ts":1648512612257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EkaCXDlVs2bFLEtXSmO8oIMKJ_tZJCW8yjUQNaTwl_k"},
{"content":{"body":"VS Code is one of them","msgtype":"m.text"},"ts":1648512638613,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GmR4-qnyCc5cIrEuTxg_8MPw5dctPjVD7fzWMsQZe_E"},
{"content":{"body":"\"people use this feature in another language\" is not very compelling, on its own? there's a lot of C programs doing raw pointer arithmetic but we sure aren't gonna add that to JS","msgtype":"m.text","org.matrix.msc1767.text":"\"people use this feature in another language\" is not very compelling, on its own? there's a lot of C programs doing raw pointer arithmetic but we sure aren't gonna add that to JS"},"ts":1648512694537,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R3q3df7Kk_tmwE7lpRBWuWfHjPZohsfy7eTaG6FlUNA"},
{"content":{"body":"agree","msgtype":"m.text","org.matrix.msc1767.text":"agree"},"ts":1648512702159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9zxSUi7BQu6lpt4PGULOCcL3vasKv58nlmPJ_cefYKA"},
{"content":{"body":"though i do want pointer arithmetic","msgtype":"m.text","org.matrix.msc1767.text":"though i do want pointer arithmetic"},"ts":1648512705941,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5jpndgIB1kdl-g2ML7xif0zSJUxs12Y-huLPkh9bkgA"},
{"content":{"body":"VSCode is a TS project?","msgtype":"m.text"},"ts":1648512715984,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE"},
{"content":{"body":"> <@pzura:matrix.org> That’d be simplest possible API here, though it’s a bit odd\n\nI think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br>That’d be simplest possible API here, though it’s a bit odd</blockquote></mx-reply>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","m.relates_to":{"m.in_reply_to":{"event_id":"$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pzura:matrix.org> That’d be simplest possible API here, though it’s a bit odd\n\nI think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br>That’d be simplest possible API here, though it’s a bit odd</blockquote></mx-reply>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","mimetype":"text/html"}]},"ts":1648512744045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"},
{"content":{"body":"> <@pzura:matrix.org> VSCode is a TS project?\n\nYes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br />VSCode is a TS project?</blockquote></mx-reply>Yes","m.relates_to":{"m.in_reply_to":{"event_id":"$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE"}},"msgtype":"m.text"},"ts":1648512745783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k5YWrF0sDHMvoQQ_Dyvyb9CAjsS4fZ2Xo5z94V7E2Lc"},
{"content":{"body":"Sorry, I meant in response to the assertion about other languages","msgtype":"m.text"},"ts":1648512766456,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$yyv89J1gP4JKzzlM1tdaY_Wp7z5NZo4pKuoGHqMxxk0"},
{"content":{"body":"Like, these are JS/TS examples","msgtype":"m.text"},"ts":1648512782539,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$CEZQWO_1Nwm2BRQg86ECAG8O9z31Yecao92GkGRJgpA"},
{"content":{"body":"That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?","msgtype":"m.text","org.matrix.msc1767.text":"That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?"},"ts":1648512783638,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4"},
{"content":{"body":"Unless I missed something","msgtype":"m.text"},"ts":1648512796661,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Exu1cjwc5Z2XzYQ6NIDCZ1UazeNLdR-mb0Un_pDHVhU"},
{"content":{"body":"> <@kriskowal:matrix.org> That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?\n\nThe same, very large company. Not the same lab. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?</blockquote></mx-reply>The same, very large company. Not the same lab.","m.relates_to":{"m.in_reply_to":{"event_id":"$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4"}},"msgtype":"m.text"},"ts":1648512802714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_GZyB_1JpxiZUElo_YH2ymQDt2L9wsRDbQJO5k1WlxQ"},
{"content":{"body":"Ah.","msgtype":"m.text","org.matrix.msc1767.text":"Ah."},"ts":1648512810617,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rq2Rl8rKYTteKuNOZ_F6vURklFX1JPcVnW0sACk6HAw"},
{"content":{"body":"TS with decorators is a different language from JS","msgtype":"m.text","org.matrix.msc1767.text":"TS with decorators is a different language from JS"},"ts":1648512819711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kP0jqymLgM-I3J0OuYv4x1uApnPqR9D2K4SgTL73rXg"},
{"content":{"body":"since there's nontrivial runtime stuff going on","msgtype":"m.text","org.matrix.msc1767.text":"since there's nontrivial runtime stuff going on"},"ts":1648512850054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YX9Caqd8mFqglWyQjQwfT1eQYsehZFMxOkfQXZUWCLA"},
{"content":{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\nI meant the simplest API in which decorators don’t need to invent their own sidechannels, and which prevents excessive burden on a decent subset of JS devs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>I meant the simplest API in which decorators don’t need to invent their own sidechannels, and which prevents excessive burden on a decent subset of JS devs","m.relates_to":{"m.in_reply_to":{"event_id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"}},"msgtype":"m.text"},"ts":1648512861318,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$WaBsy-6XItaxB7A6KcNqDaWTAFvE5XYZPJ6ST4OfC34"},
{"content":{"body":"we have pretty divergent personal understandings of \"decent subset\" i think","msgtype":"m.text","org.matrix.msc1767.text":"we have pretty divergent personal understandings of \"decent subset\" i think"},"ts":1648512901887,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8"},
{"content":{"body":"I'm not sure what you mean by \"invent their own sidechannels\"?","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure what you mean by \"invent their own sidechannels\"?"},"ts":1648512925554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_NMHsRNyoEZCEz5x1tyjk1d4YTe6STctgHkdE7H7DqM"},
{"content":{"body":"and the \"excessive burden\" is just the need to use a class-level decorator, I think?","msgtype":"m.text","org.matrix.msc1767.text":"and the \"excessive burden\" is just the need to use a class-level decorator, I think?"},"ts":1648512941191,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uVrrI1l9meziEcivDh90veVqbW9MqNv1EvUc7sAAVCA"},
{"content":{"body":"not even the `GObject = makeGObject()` bit, with that design","format":"org.matrix.custom.html","formatted_body":"not even the <code>GObject = makeGObject()</code> bit, with that design","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"not even the `GObject = makeGObject()` bit, with that design","mimetype":"text/plain"},{"body":"not even the <code>GObject = makeGObject()</code> bit, with that design","mimetype":"text/html"}]},"ts":1648512959903,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s"},
{"content":{"body":"i would be fine with the \"stand-in associated object\" design, at first blush","msgtype":"m.text","org.matrix.msc1767.text":"i would be fine with the \"stand-in associated object\" design, at first blush"},"ts":1648513018011,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h5TvHfHZFd9vj2XPpxGo9razBkIYXCOEdcCbTJWaZLc"},
{"content":{"body":"> <@shuyuguo:matrix.org> we have pretty divergent personal understandings of \"decent subset\" i think\n\nI would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we have pretty divergent personal understandings of &quot;decent subset&quot; i think</blockquote></mx-reply>I would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","m.relates_to":{"m.in_reply_to":{"event_id":"$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> we have pretty divergent personal understandings of \"decent subset\" i think\n\nI would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we have pretty divergent personal understandings of &quot;decent subset&quot; i think</blockquote></mx-reply>I would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","mimetype":"text/html"}]},"ts":1648513081361,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$IfYbfEF1-g-RZVwBjx5gFn4LmcES6jo-c6VxkAtflPo"},
{"content":{"body":"also, a meta-comment about using large projects as existence proofs for the desirability of a new feature. my opinion here is that if that feature is about new expressivity, i.e. making something impossible today possible, i then find that existence proof very compelling. if that feature is instead about ergonomics, then i don't find that existence proof very compelling","msgtype":"m.text","org.matrix.msc1767.text":"also, a meta-comment about using large projects as existence proofs for the desirability of a new feature. my opinion here is that if that feature is about new expressivity, i.e. making something impossible today possible, i then find that existence proof very compelling. if that feature is instead about ergonomics, then i don't find that existence proof very compelling"},"ts":1648513111669,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$crLTM-OlrtKQUbpijJCTMcK1Exa8ho5EvtI48wZCFfs"},
{"content":{"body":"there's of course a lot of nuance","msgtype":"m.text","org.matrix.msc1767.text":"there's of course a lot of nuance"},"ts":1648513139110,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7mx_gKZOu3USbmJ1W7e8k7sclvCbBqFRUAHzuV-HpqE"},
{"content":{"body":"where some things are so difficult and so unergonomic it borders on impossible, like e.g. shipping ICU data to do localization","msgtype":"m.text","org.matrix.msc1767.text":"where some things are so difficult and so unergonomic it borders on impossible, like e.g. shipping ICU data to do localization"},"ts":1648513152282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nt_bFSA6nPo3TGk3vPC0GzpleqonwLjdiWeNjaOpSuk"},
{"content":{"body":"> <@bakkot:matrix.org> not even the `GObject = makeGObject()` bit, with that design\n\nMost decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not even the <code>GObject = makeGObject()</code> bit, with that design</blockquote></mx-reply>Most decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","m.relates_to":{"m.in_reply_to":{"event_id":"$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> not even the `GObject = makeGObject()` bit, with that design\n\nMost decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not even the <code>GObject = makeGObject()</code> bit, with that design</blockquote></mx-reply>Most decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","mimetype":"text/html"}]},"ts":1648513168129,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$ZgN-_kFhhOyCFzVZ5jarQaz9CkTJ-mhZ4qobljPSaL4"},
{"content":{"body":"would be nice if you could somehow have that be part of the import statement. Maybe you could do it with top level await?","msgtype":"m.text","org.matrix.msc1767.text":"would be nice if you could somehow have that be part of the import statement. Maybe you could do it with top level await?"},"ts":1648513187434,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$jriT011kz_1pDveTIkv14w0a_MKDAWvL9FmfD8DU5ac"},
{"content":{"body":"well what kevin was saying the stand-in object design wouldn't even require that","msgtype":"m.text","org.matrix.msc1767.text":"well what kevin was saying the stand-in object design wouldn't even require that"},"ts":1648513188097,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R_7bZMzNbi2dZI2SYOrT5-QjfTodAQ5L4hlc1R34ILI"},
{"content":{"body":"so there's no burden there","msgtype":"m.text","org.matrix.msc1767.text":"so there's no burden there"},"ts":1648513190279,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EAULuBoO_Y-7DRoMz5izALigZwPMfQw1qOVh1UVC_00"},
{"content":{"body":"stand-in-object design? Did I miss that somewhere?","msgtype":"m.text","org.matrix.msc1767.text":"stand-in-object design? Did I miss that somewhere?"},"ts":1648513241356,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$pb2LJhvUhgi_459UcS33OMWv1WQz1lfMZdvSHYr3s0w"},
{"content":{"body":"that's what i'm calling this:","msgtype":"m.text","org.matrix.msc1767.text":"that's what i'm calling this:"},"ts":1648513289316,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K_jxPAV8AtRrnMEuUNyYUlh5dgW_0IFKLkrtSoeJVoQ"},
{"content":{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\n^","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>^","mimetype":"text/html"}]},"ts":1648513298199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A2cgldUEmfd_ZycTPrpZQS3doKRnNS2x2raBVVQVP_I"},
{"content":{"body":"gotta run for today, see you all tomorrow","msgtype":"m.text","org.matrix.msc1767.text":"gotta run for today, see you all tomorrow"},"ts":1648513325556,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c8mpNP3Lzk9lDjUHuKaO7bOZ253j6jlB5EthduMWf90"},
{"content":{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's `Symbol.metadata` field","format":"org.matrix.custom.html","formatted_body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's <code>Symbol.metadata</code> field","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's `Symbol.metadata` field","mimetype":"text/plain"},{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's <code>Symbol.metadata</code> field","mimetype":"text/html"}]},"ts":1648513345636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ua4Ey3UDGCFGFE6Trbv-zE2WtI0n2K0vrVWy-eplENY"},
{"content":{"body":"I am mostly just spitballing with that, to be clear","msgtype":"m.text","org.matrix.msc1767.text":"I am mostly just spitballing with that, to be clear"},"ts":1648513357437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yU8usFWvFKqB0jkMwn0ad-oTYtxGtsUyfnHV23HwIu4"},
{"content":{"body":"I'm sorry, I did the thing where I didn't read the whole thing before responding 🤦‍♂️","msgtype":"m.text","org.matrix.msc1767.text":"I'm sorry, I did the thing where I didn't read the whole thing before responding 🤦‍♂️"},"ts":1648513370524,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$jZtgLuYSXGrVvSKfVdD0z8eIWnO6dFuicM3P0emezLE"},
{"content":{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on `Symbol.metadata`","format":"org.matrix.custom.html","formatted_body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on <code>Symbol.metadata</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on `Symbol.metadata`","mimetype":"text/plain"},{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on <code>Symbol.metadata</code>","mimetype":"text/html"}]},"ts":1648513412190,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kiQLiuxbkppyf655CziiCCwCfi-Ox66mv3EQ2zT5Yl4"},
{"content":{"body":"that's roughly as simple, really","msgtype":"m.text","org.matrix.msc1767.text":"that's roughly as simple, really"},"ts":1648513422715,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k969dmACFLhcEHgl5A3xmdLZMTgTrWhmKRdFEjQJqKA"},
{"content":{"body":"and arguably better, if the associated object is frozen and so only usable as a weakmap key","msgtype":"m.text","org.matrix.msc1767.text":"and arguably better, if the associated object is frozen and so only usable as a weakmap key"},"ts":1648513479877,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rbdg2-G30F7INyleTKk_hdMMzZCtgOfIhuo2FPuL1Iw"},
{"content":{"body":"I do think that would be better than `GObject = makeGObject()`, that's what I meant by inventing their own sidechannels","format":"org.matrix.custom.html","formatted_body":"I do think that would be better than <code>GObject = makeGObject()</code>, that's what I meant by inventing their own sidechannels","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do think that would be better than `GObject = makeGObject()`, that's what I meant by inventing their own sidechannels","mimetype":"text/plain"},{"body":"I do think that would be better than <code>GObject = makeGObject()</code>, that's what I meant by inventing their own sidechannels","mimetype":"text/html"}]},"ts":1648513523459,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$wluNWn9waIgsQ2d5BBYLnMZQSiDLVgLPNR_Ixf49Q7I"},
{"content":{"body":"(because weakmaps don't have the problem where decorators from different libraries might contend for the string-key space on the associated object)","msgtype":"m.text","org.matrix.msc1767.text":"(because weakmaps don't have the problem where decorators from different libraries might contend for the string-key space on the associated object)"},"ts":1648513525989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9NLLmYdRfhWtcsJtvrtuFDC2_AtRrxTx_sCdMX0odCA"},
{"content":{"body":"same","msgtype":"m.text","org.matrix.msc1767.text":"same"},"ts":1648513535478,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$N0GUWEsIm05Fqeez70NbrFG5JmbHBkFqo51cGTbsoSI"},
{"content":{"body":"that was always something that didn't sit completely right with me about the Symbol-key-based metadata design","msgtype":"m.text","org.matrix.msc1767.text":"that was always something that didn't sit completely right with me about the Symbol-key-based metadata design"},"ts":1648513598999,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$gJw5KhpNP4PTCOW4joQuWwaOIEjjj6d6Ux_T5hYxxUo"},
{"content":{"body":"what was?","msgtype":"m.text","org.matrix.msc1767.text":"what was?"},"ts":1648513614337,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QjfBJtjkceQWLE5nORfjjINmnAuMqOdjt0qGFCzgVZs"},
{"content":{"body":"that symbols were used to key/associate metadata. It avoided the collision problem, but it just felt not as nice as using weakmaps","msgtype":"m.text","org.matrix.msc1767.text":"that symbols were used to key/associate metadata. It avoided the collision problem, but it just felt not as nice as using weakmaps"},"ts":1648513665142,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$54p2Spp8a74QSHLoPhedtYx_u8iouh00NUmSPof5pH8"},
{"content":{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"ts":1648513675722,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$z_9ZzqzMph6VPeCuMIgSvMQDUQlbOZy0Ooi8WNZFWus"},
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1648513679808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wxi28sK5MWq-hscAtZf0M3TYASH_1LGIPytTUrJWxnk"},
{"content":{"body":" * habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":" * habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","m.new_content":{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$z_9ZzqzMph6VPeCuMIgSvMQDUQlbOZy0Ooi8WNZFWus","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":" * habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"ts":1648513680761,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$tYvWx05vAIAtH30pVzyEenBFXYmxZ3QU5XAI2iv2AOw"},
{"content":{"body":"I actually like symbols better personally","msgtype":"m.text","org.matrix.msc1767.text":"I actually like symbols better personally"},"ts":1648513684833,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxO-UjCXMWWbozeqaeYlMBGpt_kFJVB0tRn5pxLRJnA"},
{"content":{"body":"but it does make it very strange that other decorators get to see your data by default","msgtype":"m.text","org.matrix.msc1767.text":"but it does make it very strange that other decorators get to see your data by default"},"ts":1648513741984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V-_DyPCLsUKslMAuqnRedSiYoxCCbtDjEOKPaghAOCk"},
{"content":{"body":"like, that's just weird","msgtype":"m.text","org.matrix.msc1767.text":"like, that's just weird"},"ts":1648513746547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6gN45w4PrB5LPi359lecw2GrfGWHwoc4q9MI8ILrZNg"},
{"content":{"body":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","msgtype":"m.text","org.matrix.msc1767.text":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"ts":1648513766302,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DPaYauHRR-P3u11lKaRhbSu4UevUmvzluWHtnKY2TVo"},
{"content":{"body":"and you have to work hard to make it not-public","msgtype":"m.text","org.matrix.msc1767.text":"and you have to work hard to make it not-public"},"ts":1648513781976,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bYYLa3RnwK2czeirWUNFHnHCorB3iwiiuKdvocQ0_r4"},
{"content":{"body":" * if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","m.new_content":{"body":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","msgtype":"m.text","org.matrix.msc1767.text":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"m.relates_to":{"event_id":"$DPaYauHRR-P3u11lKaRhbSu4UevUmvzluWHtnKY2TVo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"ts":1648513796742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZnUudXuAnNPAoFPXEtspRKgt1Sc45pBEXn1iEELb3yo"},
{"content":{"body":"That was my problem with the current metadata approach, you had to jump through hoops to communicate with yourself privately","msgtype":"m.text","org.matrix.msc1767.text":"That was my problem with the current metadata approach, you had to jump through hoops to communicate with yourself privately"},"ts":1648513817598,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2nVceYO7cZmZiVLc7tXgCwgpYuEUvNjwCpEGuIiKCvw"},
{"content":{"body":"sidebar: this is yet another place where the fact that `class A extends B` creates a prototype relation between `A` and `B`, not just `A.prototype` and `B.prototype`, is going to bite us","format":"org.matrix.custom.html","formatted_body":"sidebar: this is yet another place where the fact that <code>class A extends B</code> creates a prototype relation between <code>A</code> and <code>B</code>, not just <code>A.prototype</code> and <code>B.prototype</code>, is going to bite us","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sidebar: this is yet another place where the fact that `class A extends B` creates a prototype relation between `A` and `B`, not just `A.prototype` and `B.prototype`, is going to bite us","mimetype":"text/plain"},{"body":"sidebar: this is yet another place where the fact that <code>class A extends B</code> creates a prototype relation between <code>A</code> and <code>B</code>, not just <code>A.prototype</code> and <code>B.prototype</code>, is going to bite us","mimetype":"text/html"}]},"ts":1648513894217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kwaJflYxDtIKfU9SyY7gnW9OW-VCq1b5OYeAgu0GXH4"},
{"content":{"body":"because `A[Symbol.metadata]` gives you _B_'s metadata, unless A overwrites it","format":"org.matrix.custom.html","formatted_body":"because <code>A[Symbol.metadata]</code> gives you <em>B</em>'s metadata, unless A overwrites it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because `A[Symbol.metadata]` gives you _B_'s metadata, unless A overwrites it","mimetype":"text/plain"},{"body":"because <code>A[Symbol.metadata]</code> gives you <em>B</em>'s metadata, unless A overwrites it","mimetype":"text/html"}]},"ts":1648513921592,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F9UFvcdoLZ4UvW9GoSNBAqCo31S7mTO_QhmDdRn5luA"},
{"content":{"body":"I guess if we create Symbol.metadata on every class, even those without decorators, that's not a problem","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we create Symbol.metadata on every class, even those without decorators, that's not a problem"},"ts":1648513936483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3d36bv6yZHmGqpLDoDK4pLJ2_Wu65wFN1sNTmLcNVaA"},
{"content":{"body":"that's a feature IMO, you generally want metadata to be inherited","msgtype":"m.text","org.matrix.msc1767.text":"that's a feature IMO, you generally want metadata to be inherited"},"ts":1648513984999,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Agdy8U6Yi8Yvq4sUZnOWAgm2z5e5e47te3WCMsO9AmE"},
{"content":{"body":"most metadata is applied to the instance, and you don't really care whether or not it was on a specific parent class","msgtype":"m.text","org.matrix.msc1767.text":"most metadata is applied to the instance, and you don't really care whether or not it was on a specific parent class"},"ts":1648514006586,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$ZHM556bfYolLSBTFQN5ZZAk948VlSlIwiJzmBsPo2NI"},
{"content":{"body":"One of the benefits of Metadata is discoverability, as it helps with library interoperability. If you don't want the Metadata to be discoverable, you can create your own empty object key to store the Metadata for the class and use a WeakMap internally. ","format":"org.matrix.custom.html","formatted_body":"One of the benefits of Metadata is discoverability, as it helps with library interoperability. If you don't want the Metadata to be discoverable, you can create your own empty object key to store the Metadata for the class and use a WeakMap internally.","msgtype":"m.text"},"ts":1648514024095,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SfkQ46-oZH9us-MYRFEn3nPwAV8VCB5kaXh5HNwf5gM"},
{"content":{"body":"pzuraq: even for static fields?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: even for static fields?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?","mimetype":"text/html"}]},"ts":1648514038723,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ"},
{"content":{"body":"Which was something we discussed in the champion/stakeholder calls","msgtype":"m.text"},"ts":1648514043242,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O7J7Ac-ysAwcmhIywjFZZGHG70R4YnS-S1CqKCb4VVI"},
{"content":{"body":"encapsulation should be the _default_, not opt-in","format":"org.matrix.custom.html","formatted_body":"encapsulation should be the <em>default</em>, not opt-in","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"encapsulation should be the _default_, not opt-in","mimetype":"text/plain"},{"body":"encapsulation should be the <em>default</em>, not opt-in","mimetype":"text/html"}]},"ts":1648514063490,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E"},
{"content":{"body":"if you want to create a public API, you should do that on purpose","msgtype":"m.text","org.matrix.msc1767.text":"if you want to create a public API, you should do that on purpose"},"ts":1648514080735,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kgay40JAfbr_VkUDhAUXb0Mm29z5wzSJQQwcxeUsUCg"},
{"content":{"body":"it shouldn't happen by accident","msgtype":"m.text","org.matrix.msc1767.text":"it shouldn't happen by accident"},"ts":1648514083650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wuFZLou9qWgxgy2LjebB7ZH9f4d5qLPfk9VCPcvLpqU"},
{"content":{"body":"> <@bakkot:matrix.org> encapsulation should be the _default_, not opt-in\n\nEncapsulation is not inheretence. Almost all Metadata use cases have leveraged inheretence (even reflect-metadata leverages it) ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />encapsulation should be the <em>default</em>, not opt-in</blockquote></mx-reply>Encapsulation is not inheretence. Almost all Metadata use cases have leveraged inheretence (even reflect-metadata leverages it)","m.relates_to":{"m.in_reply_to":{"event_id":"$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E"}},"msgtype":"m.text"},"ts":1648514144337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gGpjBg9hFPhi3Xvmd71Js7LrCbwQwZBzcFD6iNGcTQI"},
{"content":{"body":"sorry, I'm talking about two different things here","msgtype":"m.text","org.matrix.msc1767.text":"sorry, I'm talking about two different things here"},"ts":1648514159429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xAQUDUaAS7uDfOKDTiHFMouCBweSfYY-ri88FoUXbBY"},
{"content":{"body":"the first is, communicating with yourself, which should be encapsulated by default","msgtype":"m.text","org.matrix.msc1767.text":"the first is, communicating with yourself, which should be encapsulated by default"},"ts":1648514179606,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aXb4tvhRFMRzoNa0y8SL5JeyQgbIAfEZkS9-JQOmDSU"},
{"content":{"body":"the second is, how does inheritance work","msgtype":"m.text","org.matrix.msc1767.text":"the second is, how does inheritance work"},"ts":1648514184541,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BAIJuz7hmn_1Vcqik0n-7TnDSX-uHAdWiX6lmS879zw"},
{"content":{"body":"> <@bakkot:matrix.org> pzuraq: even for static fields?\n\nhmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?</blockquote></mx-reply>hmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","m.relates_to":{"m.in_reply_to":{"event_id":"$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> pzuraq: even for static fields?\n\nhmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?</blockquote></mx-reply>hmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","mimetype":"text/html"}]},"ts":1648514189075,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$eX8P2cCJASqB6zCnRYXgAxT0Hx7FmdZcQSUXuFZ1Ozo"},
{"content":{"body":"for when you want it to be public","msgtype":"m.text","org.matrix.msc1767.text":"for when you want it to be public"},"ts":1648514192878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7EfECPEGW0cMkjoVK0rDIjtwIFsUiAlNPWoISY1Zah8"},
{"content":{"body":"there are other use cases where you would still want it though","msgtype":"m.text","org.matrix.msc1767.text":"there are other use cases where you would still want it though"},"ts":1648514195435,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$7jyD-_KAo-0LpxiXJIUM4z5Gbrndf6EPnDc9Xtv1Y2E"},
{"content":{"body":"e.g. validation","msgtype":"m.text","org.matrix.msc1767.text":"e.g. validation"},"ts":1648514198401,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$sN7sLVfH_UdPXueQCvp47-DVg8TGyQ5CZf81MpZWFu0"},
{"content":{"body":"hm.","msgtype":"m.text","org.matrix.msc1767.text":"hm."},"ts":1648514213658,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FUEhibodO0k0wkPQpCbkaDuI4uPKMWhDE47FFENfvYg"},
{"content":{"body":"I can see why you would want that, yeah","msgtype":"m.text","org.matrix.msc1767.text":"I can see why you would want that, yeah"},"ts":1648514244946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$voKUabOm2lF0qdU3KNgWm37iGOtO6OS7PlxFqSmZT9A"},
{"content":{"body":"with the frozen-associated-key-object design, the decorator author would have to remember to walk up the prototype chain to see if anything in the chain had WeakMap associated data","msgtype":"m.text","org.matrix.msc1767.text":"with the frozen-associated-key-object design, the decorator author would have to remember to walk up the prototype chain to see if anything in the chain had WeakMap associated data"},"ts":1648514347576,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RAgrKg63DZrjkF5wSbm83QafkE_VQ8Qyt6_2_8sbjOE"},
{"content":{"body":"but that is maybe not so bad","msgtype":"m.text","org.matrix.msc1767.text":"but that is maybe not so bad"},"ts":1648514350215,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LJHyaPsKGzOW1hJrgGm_T41sYsVYVwmteO5oHnRf26g"},
{"content":{"body":"and is not a cost to users of the decorator","msgtype":"m.text","org.matrix.msc1767.text":"and is not a cost to users of the decorator"},"ts":1648514351375,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ElYpbC1o-3koTJdXOkZQTTcom4Psff4bXWN32989NPM"},
{"content":{"body":"What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?","msgtype":"m.text","org.matrix.msc1767.text":"What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?"},"ts":1648514353504,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg"},
{"content":{"body":"yes, that's something the current design tried to avoid","msgtype":"m.text","org.matrix.msc1767.text":"yes, that's something the current design tried to avoid"},"ts":1648514366779,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Pi7OmytuvmbrURSioIah8M--H6OJrnm8qhWdq0Zqv0M"},
{"content":{"body":"but that's where the complexity starts to come in 🙃","msgtype":"m.text","org.matrix.msc1767.text":"but that's where the complexity starts to come in 🙃"},"ts":1648514375843,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$s6c7Aw1arvwp0B6WW2D9R-7rUaQmdonh-YYJDTreIKQ"},
{"content":{"body":"inheritance is basically 90% of the complexity","msgtype":"m.text","org.matrix.msc1767.text":"inheritance is basically 90% of the complexity"},"ts":1648514398341,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$4dpwOS3OkQTvHeNlGty9nBdhVz9x07FtqFKJ8uGGXzw"},
{"content":{"body":"crawling the prototype chain is something that framework authors though are familiar with in my experience","msgtype":"m.text","org.matrix.msc1767.text":"crawling the prototype chain is something that framework authors though are familiar with in my experience"},"ts":1648514450773,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$leTiMPJWP38LN5or42CTRn73PbnYx-A3oBt8NyVtTDs"},
{"content":{"body":"I guess if the object is frozen you don't necessarily need it to be a _prototype_ chain","format":"org.matrix.custom.html","formatted_body":"I guess if the object is frozen you don't necessarily need it to be a <em>prototype</em> chain","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess if the object is frozen you don't necessarily need it to be a _prototype_ chain","mimetype":"text/plain"},{"body":"I guess if the object is frozen you don't necessarily need it to be a <em>prototype</em> chain","mimetype":"text/html"}]},"ts":1648514456859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q05aO50W4c2E4OluAuTTqHbNIwwd8SnRI3aNv9a2GJE"},
{"content":{"body":"you can just have the key be like `Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })`","format":"org.matrix.custom.html","formatted_body":"you can just have the key be like <code>Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can just have the key be like `Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })`","mimetype":"text/plain"},{"body":"you can just have the key be like <code>Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })</code>","mimetype":"text/html"}]},"ts":1648514494057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kaNOPNdms4gdM0ici5aHHTj6HPmn0wYXAzY_vZRZ3Ds"},
{"content":{"body":"not really any advantage in a prototype relation for frozen empty objects, really","msgtype":"m.text","org.matrix.msc1767.text":"not really any advantage in a prototype relation for frozen empty objects, really"},"ts":1648514513986,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RV35hgw_xkYfUaX5g9hXadfAkEs43ig4pRozuw8VJ8Y"},
{"content":{"body":"hmmm, yes","msgtype":"m.text","org.matrix.msc1767.text":"hmmm, yes"},"ts":1648514527004,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$D304tUioatQyGJHTyruUvEx-bFWrKQhBlJtHOgtqYNY"},
{"content":{"body":"could allow you to get parent metadata during decoration too","msgtype":"m.text","org.matrix.msc1767.text":"could allow you to get parent metadata during decoration too"},"ts":1648514544948,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$8ueNUlokpn7KFAWnrjeTei0SeM4XXpHavlJFcYFAt9I"},
{"content":{"body":"> <@mhofman:matrix.org> What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?\n\nwhich internal state exactly?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What are the validation use cases where the validator piece wouldn&#39;t have access to the internal state of the decorator?</blockquote></mx-reply>which internal state exactly?","m.relates_to":{"m.in_reply_to":{"event_id":"$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?\n\nwhich internal state exactly?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What are the validation use cases where the validator piece wouldn&#39;t have access to the internal state of the decorator?</blockquote></mx-reply>which internal state exactly?","mimetype":"text/html"}]},"ts":1648514651962,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$bHAG87aHGIkjl4BH9RmCtENdwoYkzyVOiCATMPzZNM0"},
{"content":{"body":"Maybe I misunderstood, but it seemed above it was suggested that validation use cases benefit from public metadata, but I didn't see how","msgtype":"m.text","org.matrix.msc1767.text":"Maybe I misunderstood, but it seemed above it was suggested that validation use cases benefit from public metadata, but I didn't see how"},"ts":1648514711605,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$w3RyG6d_83sUksTpB_2NH0r87lM3xIgymJ8wkuzl47w"},
{"content":{"body":"or maybe I mixed up 2 different things ?","msgtype":"m.text","org.matrix.msc1767.text":"or maybe I mixed up 2 different things ?"},"ts":1648514747846,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WBnYBncLlX1WR63loevSP2zPBmaS-HuM6CLff27gnPE"},
{"content":{"body":"a typical validation library looks like `import { string, number, object, validate } from 'validator-lib'`","format":"org.matrix.custom.html","formatted_body":"a typical validation library looks like <code>import { string, number, object, validate } from 'validator-lib'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a typical validation library looks like `import { string, number, object, validate } from 'validator-lib'`","mimetype":"text/plain"},{"body":"a typical validation library looks like <code>import { string, number, object, validate } from 'validator-lib'</code>","mimetype":"text/html"}]},"ts":1648514765748,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$iG32z8zsrU7eamL86V5OMTdRqje2AUiyAmeYkQ9qo4c"},
{"content":{"body":"you then apply the type decorators to a field or other element","msgtype":"m.text","org.matrix.msc1767.text":"you then apply the type decorators to a field or other element"},"ts":1648514778226,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$fEGHKwpQCbrm-5oBAv-WWxIDrAWBlWukhAkrSRCyt5A"},
{"content":{"body":"and then call `validate()` later on on the object","format":"org.matrix.custom.html","formatted_body":"and then call <code>validate()</code> later on on the object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and then call `validate()` later on on the object","mimetype":"text/plain"},{"body":"and then call <code>validate()</code> later on on the object","mimetype":"text/html"}]},"ts":1648514784681,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$vTGjUykLqV4EMSw49UUET5EnGkL2jOl4LWLePA_zikI"},
{"content":{"body":"without a way to get which decorators were applied to the object being validated, you can't really validate","msgtype":"m.text","org.matrix.msc1767.text":"without a way to get which decorators were applied to the object being validated, you can't really validate"},"ts":1648514821238,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$nBcfiXtwJ6kFnIMAZYWGkH8mfRqns4EHLfEbHBw6FNE"},
{"content":{"body":"well if `@string`, `@number` etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit `@validated` decorator to the thing to be validated?","format":"org.matrix.custom.html","formatted_body":"well if <code>@string</code>, <code>@number</code> etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit <code>@validated</code> decorator to the thing to be validated?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"well if `@string`, `@number` etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit `@validated` decorator to the thing to be validated?","mimetype":"text/plain"},{"body":"well if <code>@string</code>, <code>@number</code> etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit <code>@validated</code> decorator to the thing to be validated?","mimetype":"text/html"}]},"ts":1648515012195,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Wb63lD6KnE4vIcC5y0g8H5J2hkMCVYY38lk6xOJQrGY"},
{"content":{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a `[Symbol.metadata]` prop","format":"org.matrix.custom.html","formatted_body":"or as mentioned, automatically add that standin-object to the thing being decorated as a <code>[Symbol.metadata]</code> prop","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a `[Symbol.metadata]` prop","mimetype":"text/plain"},{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a <code>[Symbol.metadata]</code> prop","mimetype":"text/html"}]},"ts":1648515078977,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$R_uu4BAYBZ8Ac8vW_KTdKwu11Eaop58D7EguhHXzgVE"},
{"content":{"body":"correct, both of those solutions would work","msgtype":"m.text","org.matrix.msc1767.text":"correct, both of those solutions would work"},"ts":1648515115203,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Y0lCN0gt1lnGvmEumzDcrs6gdg1RBck7iqMsPZM34JU"}
]