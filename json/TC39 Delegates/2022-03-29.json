[
{"content":{"body":"There were more frameworks and libraries that used metadata than not in our survey, IIRC","msgtype":"m.text"},"ts":1648512004424,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$58B8AV-jKhhy8DNfTthg4wJDphuj-XKAA13_mu4AkjU"},
{"content":{"body":"let me put another way, if a burden is placed on all the libraries in the JS universe, that still seems okay","msgtype":"m.text","org.matrix.msc1767.text":"let me put another way, if a burden is placed on all the libraries in the JS universe, that still seems okay"},"ts":1648512028307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4IRknnsfXEr4Mdr-LMhxWniaEWW6aHT2-U0b7jTx05M"},
{"content":{"body":"vs, a burden put on a majority of all JS programmers","msgtype":"m.text","org.matrix.msc1767.text":"vs, a burden put on a majority of all JS programmers"},"ts":1648512045302,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KB5RyPNiC6p0QJRopQg0ZtnH_nESxKvUVgBEZGpDVOA"},
{"content":{"body":"Fair enough, this would only be a burden on users of those specific frameworks and libraries ","format":"org.matrix.custom.html","formatted_body":"Fair enough, this would only be a burden on users of those specific frameworks and libraries","msgtype":"m.text"},"ts":1648512085245,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$mXpYaGO9o0FiFojKcwgRVjqMx-22A7TnO5J_4yz51SE"},
{"content":{"body":"my proposed sketch has a (slight) cost to anyone making use of such a library, to be clear, not just to the library itself","msgtype":"m.text","org.matrix.msc1767.text":"my proposed sketch has a (slight) cost to anyone making use of such a library, to be clear, not just to the library itself"},"ts":1648512097792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SATScniwuONl95qcneBOoAg-7BL88oQk6ZG-mC2CFTY"},
{"content":{"body":"good point, i'm trying to weigh that","msgtype":"m.text","org.matrix.msc1767.text":"good point, i'm trying to weigh that"},"ts":1648512105701,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iVpEVIse4NjGhMF9W3VUPmQQTh5pud0uZt_NLdPys2s"},
{"content":{"body":"(it's actually arguably simpler for the library itself)","msgtype":"m.text","org.matrix.msc1767.text":"(it's actually arguably simpler for the library itself)"},"ts":1648512108117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DE5EXuky-5aPA-cI_aUulAMpSgded-iQqgN_YIjzoX4"},
{"content":{"body":"the `let GObject = makeGObject()` thing?","format":"org.matrix.custom.html","formatted_body":"the <code>let GObject = makeGObject()</code> thing?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `let GObject = makeGObject()` thing?","mimetype":"text/plain"},{"body":"the <code>let GObject = makeGObject()</code> thing?","mimetype":"text/html"}]},"ts":1648512113044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cPj8jy-DMlIR-Ta1yj8sEcu_IiWywsJB6x7CM9lZ0B0"},
{"content":{"body":"yup","msgtype":"m.text","org.matrix.msc1767.text":"yup"},"ts":1648512117300,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xbnBsuN8elSzQJMdWx1tLPMBo59gWht4h6YQ2GLMGOU"},
{"content":{"body":"and the need to put a decorator on the class itself, in the case that need did not previously exist","msgtype":"m.text","org.matrix.msc1767.text":"and the need to put a decorator on the class itself, in the case that need did not previously exist"},"ts":1648512129034,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hP3uVb6pjUoysfezW73w2ARE6qDo7TKemn4RQ3jju5g"},
{"content":{"body":"my experience, as someone whose day job is not using frameworks, to be clear, is that frameworks involve incantations already","msgtype":"m.text","org.matrix.msc1767.text":"my experience, as someone whose day job is not using frameworks, to be clear, is that frameworks involve incantations already"},"ts":1648512157410,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dmPI-UHqudd5mts47sdmGmKDZy1fNw2AU8xBPJHKiDI"},
{"content":{"body":"this could be a death-by-a-thousand-cuts thing, of course","msgtype":"m.text","org.matrix.msc1767.text":"this could be a death-by-a-thousand-cuts thing, of course"},"ts":1648512167076,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cD_TpMeESpcy0GfbsPtdJbfv_gdYTi7g2p06aKtdEuM"},
{"content":{"body":"Yeah, I wouldn’t think it’d be much of a burden either way tbh","msgtype":"m.text"},"ts":1648512186143,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$XVX9Iw9lRzeapWTRTU60XfpGfizd7nwwOjvdSyrGVT4"},
{"content":{"body":"For decorator authors","msgtype":"m.text"},"ts":1648512190174,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$HL2qgDQg8w6Rlk83iB-LuohpP8p7Eigtxz2q8gJVUHM"},
{"content":{"body":"i'm also not against a simpler metadata sketched solution","msgtype":"m.text","org.matrix.msc1767.text":"i'm also not against a simpler metadata sketched solution"},"ts":1648512190517,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kMZQHeyakZmKRrvL9dZ0Zg3LoiG_V_7TT3E_VVkwDh4"},
{"content":{"body":"v8's main dislike is the intricate hierarchy of the metadata object that's created","msgtype":"m.text","org.matrix.msc1767.text":"v8's main dislike is the intricate hierarchy of the metadata object that's created"},"ts":1648512225997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$asbaoFolZbeJoql32aO0oM3t4XrA9FacbjNbv1n_H7E"},
{"content":{"body":"perhaps Mathieu Hofman can sketch out what he meant by having an object","format":"org.matrix.custom.html","formatted_body":"perhaps <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> can sketch out what he meant by having an object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"perhaps Mathieu Hofman can sketch out what he meant by having an object","mimetype":"text/plain"},{"body":"perhaps <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> can sketch out what he meant by having an object","mimetype":"text/html"}]},"ts":1648512307605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NqMHKBk8ZYmGft-A0T5BufdT5YrkKmR7IPVrwgUBwbg"},
{"content":{"body":"There's an old sketch here: https://github.com/tc39/proposal-decorators/issues/328","msgtype":"m.text","org.matrix.msc1767.text":"There's an old sketch here: https://github.com/tc39/proposal-decorators/issues/328"},"ts":1648512337254,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m6m9m3t_4hagfgok26odkWEx6oiAk5YPdRUzl5PzO6M"},
{"content":{"body":"> <@shuyuguo:matrix.org> i still think the answer to where parameter decorators fit in is that we do not have parameter decorators\n\nThe way TS does parameter decorators today is it passes through a `__param` decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tARo0v_Gf9QiV-Uc7medliZE6UxYdxDxo69Yo3puBEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />i still think the answer to where parameter decorators fit in is that we do not have parameter decorators</blockquote></mx-reply>The way TS does parameter decorators today is it passes through a <code>__param</code> decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class","m.relates_to":{"m.in_reply_to":{"event_id":"$tARo0v_Gf9QiV-Uc7medliZE6UxYdxDxo69Yo3puBEs"}},"msgtype":"m.text"},"ts":1648512341626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw"},
{"content":{"body":"> <@rbuckton:matrix.org> The way TS does parameter decorators today is it passes through a `__param` decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class\n\nThey way we've thought about it is that your decorating the declaration, not the value. Decorating a method parameter means the decoration is associated with the class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />The way TS does parameter decorators today is it passes through a <code>__param</code> decorator on the method that essentially adapts it to a method decorator, so Metadata is still associated with the class</blockquote></mx-reply>They way we've thought about it is that your decorating the declaration, not the value. Decorating a method parameter means the decoration is associated with the class","m.relates_to":{"m.in_reply_to":{"event_id":"$kHljkwJSZb_EXzIcLx1vSZA2fFsCfxTA55bGAESxTKw"}},"msgtype":"m.text"},"ts":1648512420770,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mffVIB39zb14DJnh8kPEqPyCki4PicFAImrWMW9Bzz8"},
{"content":{"body":"Essentially the object handle version is to replicate the old semantics, where we received the class itself, as close as possible. So to do that, we pass in a target object to the decorator","msgtype":"m.text"},"ts":1648512445744,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$3pw32_myn9FCrjADsMXFZvJNoIY5-vOxxVKZXlBoe9o"},
{"content":{"body":"And then we associate that with the class on `Symbol.metadata`","format":"org.matrix.custom.html","formatted_body":"And then we associate that with the class on <code>Symbol.metadata</code>","msgtype":"m.text"},"ts":1648512465812,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$BNoY5z3Z44DthREJpwIeyd7ccP6IiYkdosndVHkstz8"},
{"content":{"body":"The object can be used as a WeakMap key to the decorator’s metadata","msgtype":"m.text"},"ts":1648512495591,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$sMNzC14JSAcMbB47oFZpov_cbqtf7g9miNwg6VOMgTE"},
{"content":{"body":"rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?","mimetype":"text/html"}]},"ts":1648512504054,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc"},
{"content":{"body":"That’d be simplest possible API here, though it’s a bit odd","msgtype":"m.text"},"ts":1648512521665,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs"},
{"content":{"body":"I would feel better about it if Symbols could be used as weakmap keys, and then we can just pass in a symbol, call it `metadataKey`","format":"org.matrix.custom.html","formatted_body":"I would feel better about it if Symbols could be used as weakmap keys, and then we can just pass in a symbol, call it <code>metadataKey</code>","msgtype":"m.text"},"ts":1648512561367,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$abYZXn0lXtNvAHStNIDqeTjEdeMWVtjJNjFFvhfndvA"},
{"content":{"body":"But a frozen object also works","msgtype":"m.text"},"ts":1648512573374,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$oaP8rd7lBqLhlAQkyGPYwPDsCiXRyPGFrFNHvzAZ724"},
{"content":{"body":"or rather, until fairly strong opposition to the mere idea of parameter decorators fade away, not necessarily we all decide it's a good idea","msgtype":"m.text","org.matrix.msc1767.text":"or rather, until fairly strong opposition to the mere idea of parameter decorators fade away, not necessarily we all decide it's a good idea"},"ts":1648512597400,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$suWF6C7-OkpiACadfM69ch17NwtaSsNYu5A0Z1FhGU4"},
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: i am not interested in the mechanics of it until we decide it's actually a good idea?\n\nThere are more than a few large projects using TS parameter decorators, so there is definite interest","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br /><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i am not interested in the mechanics of it until we decide it's actually a good idea?</blockquote></mx-reply>There are more than a few large projects using TS parameter decorators, so there is definite interest","m.relates_to":{"m.in_reply_to":{"event_id":"$HiZ1b0siA1Hs7N34lY4podzB38HjqsxUlCWVqy_zEKc"}},"msgtype":"m.text"},"ts":1648512612257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EkaCXDlVs2bFLEtXSmO8oIMKJ_tZJCW8yjUQNaTwl_k"},
{"content":{"body":"VS Code is one of them","msgtype":"m.text"},"ts":1648512638613,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GmR4-qnyCc5cIrEuTxg_8MPw5dctPjVD7fzWMsQZe_E"},
{"content":{"body":"\"people use this feature in another language\" is not very compelling, on its own? there's a lot of C programs doing raw pointer arithmetic but we sure aren't gonna add that to JS","msgtype":"m.text","org.matrix.msc1767.text":"\"people use this feature in another language\" is not very compelling, on its own? there's a lot of C programs doing raw pointer arithmetic but we sure aren't gonna add that to JS"},"ts":1648512694537,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R3q3df7Kk_tmwE7lpRBWuWfHjPZohsfy7eTaG6FlUNA"},
{"content":{"body":"agree","msgtype":"m.text","org.matrix.msc1767.text":"agree"},"ts":1648512702159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9zxSUi7BQu6lpt4PGULOCcL3vasKv58nlmPJ_cefYKA"},
{"content":{"body":"though i do want pointer arithmetic","msgtype":"m.text","org.matrix.msc1767.text":"though i do want pointer arithmetic"},"ts":1648512705941,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5jpndgIB1kdl-g2ML7xif0zSJUxs12Y-huLPkh9bkgA"},
{"content":{"body":"VSCode is a TS project?","msgtype":"m.text"},"ts":1648512715984,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE"},
{"content":{"body":"> <@pzura:matrix.org> That’d be simplest possible API here, though it’s a bit odd\n\nI think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br>That’d be simplest possible API here, though it’s a bit odd</blockquote></mx-reply>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","m.relates_to":{"m.in_reply_to":{"event_id":"$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pzura:matrix.org> That’d be simplest possible API here, though it’s a bit odd\n\nI think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9nXBpsYw7CFR-7VEisp61WRd7OdbBi5VQNU-ITB0Cvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br>That’d be simplest possible API here, though it’s a bit odd</blockquote></mx-reply>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.","mimetype":"text/html"}]},"ts":1648512744045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"},
{"content":{"body":"> <@pzura:matrix.org> VSCode is a TS project?\n\nYes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pzura:matrix.org\">@pzura:matrix.org</a><br />VSCode is a TS project?</blockquote></mx-reply>Yes","m.relates_to":{"m.in_reply_to":{"event_id":"$RGhxiLTvap7tbtN98VUXMCyJUMnIsz8_60bAahJcgPE"}},"msgtype":"m.text"},"ts":1648512745783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k5YWrF0sDHMvoQQ_Dyvyb9CAjsS4fZ2Xo5z94V7E2Lc"},
{"content":{"body":"Sorry, I meant in response to the assertion about other languages","msgtype":"m.text"},"ts":1648512766456,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$yyv89J1gP4JKzzlM1tdaY_Wp7z5NZo4pKuoGHqMxxk0"},
{"content":{"body":"Like, these are JS/TS examples","msgtype":"m.text"},"ts":1648512782539,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$CEZQWO_1Nwm2BRQg86ECAG8O9z31Yecao92GkGRJgpA"},
{"content":{"body":"That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?","msgtype":"m.text","org.matrix.msc1767.text":"That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?"},"ts":1648512783638,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4"},
{"content":{"body":"Unless I missed something","msgtype":"m.text"},"ts":1648512796661,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Exu1cjwc5Z2XzYQ6NIDCZ1UazeNLdR-mb0Un_pDHVhU"},
{"content":{"body":"> <@kriskowal:matrix.org> That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?\n\nThe same, very large company. Not the same lab. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />That’s something of an understatement, is it not, since TS and VS Code both originate in the same lab?</blockquote></mx-reply>The same, very large company. Not the same lab.","m.relates_to":{"m.in_reply_to":{"event_id":"$2IpThqM2wPI4pT0W4GNHWSKF6ad_hehclOxILMrBCX4"}},"msgtype":"m.text"},"ts":1648512802714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_GZyB_1JpxiZUElo_YH2ymQDt2L9wsRDbQJO5k1WlxQ"},
{"content":{"body":"Ah.","msgtype":"m.text","org.matrix.msc1767.text":"Ah."},"ts":1648512810617,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rq2Rl8rKYTteKuNOZ_F6vURklFX1JPcVnW0sACk6HAw"},
{"content":{"body":"TS with decorators is a different language from JS","msgtype":"m.text","org.matrix.msc1767.text":"TS with decorators is a different language from JS"},"ts":1648512819711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kP0jqymLgM-I3J0OuYv4x1uApnPqR9D2K4SgTL73rXg"},
{"content":{"body":"since there's nontrivial runtime stuff going on","msgtype":"m.text","org.matrix.msc1767.text":"since there's nontrivial runtime stuff going on"},"ts":1648512850054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YX9Caqd8mFqglWyQjQwfT1eQYsehZFMxOkfQXZUWCLA"},
{"content":{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\nI meant the simplest API in which decorators don’t need to invent their own sidechannels, and which prevents excessive burden on a decent subset of JS devs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>I meant the simplest API in which decorators don’t need to invent their own sidechannels, and which prevents excessive burden on a decent subset of JS devs","m.relates_to":{"m.in_reply_to":{"event_id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"}},"msgtype":"m.text"},"ts":1648512861318,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$WaBsy-6XItaxB7A6KcNqDaWTAFvE5XYZPJ6ST4OfC34"},
{"content":{"body":"we have pretty divergent personal understandings of \"decent subset\" i think","msgtype":"m.text","org.matrix.msc1767.text":"we have pretty divergent personal understandings of \"decent subset\" i think"},"ts":1648512901887,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8"},
{"content":{"body":"I'm not sure what you mean by \"invent their own sidechannels\"?","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure what you mean by \"invent their own sidechannels\"?"},"ts":1648512925554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_NMHsRNyoEZCEz5x1tyjk1d4YTe6STctgHkdE7H7DqM"},
{"content":{"body":"and the \"excessive burden\" is just the need to use a class-level decorator, I think?","msgtype":"m.text","org.matrix.msc1767.text":"and the \"excessive burden\" is just the need to use a class-level decorator, I think?"},"ts":1648512941191,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uVrrI1l9meziEcivDh90veVqbW9MqNv1EvUc7sAAVCA"},
{"content":{"body":"not even the `GObject = makeGObject()` bit, with that design","format":"org.matrix.custom.html","formatted_body":"not even the <code>GObject = makeGObject()</code> bit, with that design","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"not even the `GObject = makeGObject()` bit, with that design","mimetype":"text/plain"},{"body":"not even the <code>GObject = makeGObject()</code> bit, with that design","mimetype":"text/html"}]},"ts":1648512959903,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s"},
{"content":{"body":"i would be fine with the \"stand-in associated object\" design, at first blush","msgtype":"m.text","org.matrix.msc1767.text":"i would be fine with the \"stand-in associated object\" design, at first blush"},"ts":1648513018011,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h5TvHfHZFd9vj2XPpxGo9razBkIYXCOEdcCbTJWaZLc"},
{"content":{"body":"> <@shuyuguo:matrix.org> we have pretty divergent personal understandings of \"decent subset\" i think\n\nI would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we have pretty divergent personal understandings of &quot;decent subset&quot; i think</blockquote></mx-reply>I would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","m.relates_to":{"m.in_reply_to":{"event_id":"$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> we have pretty divergent personal understandings of \"decent subset\" i think\n\nI would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QghsAYw7LId6qNJxf4En8xItqzPIDGeYoFsX3qDyjB8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we have pretty divergent personal understandings of &quot;decent subset&quot; i think</blockquote></mx-reply>I would defer to you there, I think I have less experience with the ecosystem as a whole. Also FWIW I'm no longer using or working on a framework that relies on decorators directly, so I have somewhat less insight these days","mimetype":"text/html"}]},"ts":1648513081361,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$IfYbfEF1-g-RZVwBjx5gFn4LmcES6jo-c6VxkAtflPo"},
{"content":{"body":"also, a meta-comment about using large projects as existence proofs for the desirability of a new feature. my opinion here is that if that feature is about new expressivity, i.e. making something impossible today possible, i then find that existence proof very compelling. if that feature is instead about ergonomics, then i don't find that existence proof very compelling","msgtype":"m.text","org.matrix.msc1767.text":"also, a meta-comment about using large projects as existence proofs for the desirability of a new feature. my opinion here is that if that feature is about new expressivity, i.e. making something impossible today possible, i then find that existence proof very compelling. if that feature is instead about ergonomics, then i don't find that existence proof very compelling"},"ts":1648513111669,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$crLTM-OlrtKQUbpijJCTMcK1Exa8ho5EvtI48wZCFfs"},
{"content":{"body":"there's of course a lot of nuance","msgtype":"m.text","org.matrix.msc1767.text":"there's of course a lot of nuance"},"ts":1648513139110,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7mx_gKZOu3USbmJ1W7e8k7sclvCbBqFRUAHzuV-HpqE"},
{"content":{"body":"where some things are so difficult and so unergonomic it borders on impossible, like e.g. shipping ICU data to do localization","msgtype":"m.text","org.matrix.msc1767.text":"where some things are so difficult and so unergonomic it borders on impossible, like e.g. shipping ICU data to do localization"},"ts":1648513152282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nt_bFSA6nPo3TGk3vPC0GzpleqonwLjdiWeNjaOpSuk"},
{"content":{"body":"> <@bakkot:matrix.org> not even the `GObject = makeGObject()` bit, with that design\n\nMost decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not even the <code>GObject = makeGObject()</code> bit, with that design</blockquote></mx-reply>Most decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","m.relates_to":{"m.in_reply_to":{"event_id":"$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> not even the `GObject = makeGObject()` bit, with that design\n\nMost decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IzLvqIiw1nV4mGz7YZVcmO0mmwLZ7g_LHqDrRIwCz-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not even the <code>GObject = makeGObject()</code> bit, with that design</blockquote></mx-reply>Most decorator libraries don't have you create a decorator inline like that, so that would be part of the extra burden","mimetype":"text/html"}]},"ts":1648513168129,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$ZgN-_kFhhOyCFzVZ5jarQaz9CkTJ-mhZ4qobljPSaL4"},
{"content":{"body":"would be nice if you could somehow have that be part of the import statement. Maybe you could do it with top level await?","msgtype":"m.text","org.matrix.msc1767.text":"would be nice if you could somehow have that be part of the import statement. Maybe you could do it with top level await?"},"ts":1648513187434,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$jriT011kz_1pDveTIkv14w0a_MKDAWvL9FmfD8DU5ac"},
{"content":{"body":"well what kevin was saying the stand-in object design wouldn't even require that","msgtype":"m.text","org.matrix.msc1767.text":"well what kevin was saying the stand-in object design wouldn't even require that"},"ts":1648513188097,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R_7bZMzNbi2dZI2SYOrT5-QjfTodAQ5L4hlc1R34ILI"},
{"content":{"body":"so there's no burden there","msgtype":"m.text","org.matrix.msc1767.text":"so there's no burden there"},"ts":1648513190279,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EAULuBoO_Y-7DRoMz5izALigZwPMfQw1qOVh1UVC_00"},
{"content":{"body":"stand-in-object design? Did I miss that somewhere?","msgtype":"m.text","org.matrix.msc1767.text":"stand-in-object design? Did I miss that somewhere?"},"ts":1648513241356,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$pb2LJhvUhgi_459UcS33OMWv1WQz1lfMZdvSHYr3s0w"},
{"content":{"body":"that's what i'm calling this:","msgtype":"m.text","org.matrix.msc1767.text":"that's what i'm calling this:"},"ts":1648513289316,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K_jxPAV8AtRrnMEuUNyYUlh5dgW_0IFKLkrtSoeJVoQ"},
{"content":{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> I think the _simplest_ API for metadata is to have an associated object which lives on the `context`, which is created per class definition, and which is passed to every decorator within the class. if a decorator _wants_ to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.\n\n^","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c6WpNx1IIBVm7GYCQgNaC_75JQ6pJ1ivSAavEDhNdNI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the <em>simplest</em> API for metadata is to have an associated object which lives on the <code>context</code>, which is created per class definition, and which is passed to every decorator within the class. if a decorator <em>wants</em> to expose the metadata to the class, a class-level decorator add a symbol to the class which exposes the context object.</blockquote></mx-reply>^","mimetype":"text/html"}]},"ts":1648513298199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A2cgldUEmfd_ZycTPrpZQS3doKRnNS2x2raBVVQVP_I"},
{"content":{"body":"gotta run for today, see you all tomorrow","msgtype":"m.text","org.matrix.msc1767.text":"gotta run for today, see you all tomorrow"},"ts":1648513325556,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c8mpNP3Lzk9lDjUHuKaO7bOZ253j6jlB5EthduMWf90"},
{"content":{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's `Symbol.metadata` field","format":"org.matrix.custom.html","formatted_body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's <code>Symbol.metadata</code> field","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's `Symbol.metadata` field","mimetype":"text/plain"},{"body":"that design is only a slight tweak from the design where the associated object is automatically placed on the class's <code>Symbol.metadata</code> field","mimetype":"text/html"}]},"ts":1648513345636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ua4Ey3UDGCFGFE6Trbv-zE2WtI0n2K0vrVWy-eplENY"},
{"content":{"body":"I am mostly just spitballing with that, to be clear","msgtype":"m.text","org.matrix.msc1767.text":"I am mostly just spitballing with that, to be clear"},"ts":1648513357437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yU8usFWvFKqB0jkMwn0ad-oTYtxGtsUyfnHV23HwIu4"},
{"content":{"body":"I'm sorry, I did the thing where I didn't read the whole thing before responding 🤦‍♂️","msgtype":"m.text","org.matrix.msc1767.text":"I'm sorry, I did the thing where I didn't read the whole thing before responding 🤦‍♂️"},"ts":1648513370524,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$jZtgLuYSXGrVvSKfVdD0z8eIWnO6dFuicM3P0emezLE"},
{"content":{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on `Symbol.metadata`","format":"org.matrix.custom.html","formatted_body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on <code>Symbol.metadata</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on `Symbol.metadata`","mimetype":"text/plain"},{"body":"I guess I don't have a fundamental objection to the design where you automatically stick the associated object on <code>Symbol.metadata</code>","mimetype":"text/html"}]},"ts":1648513412190,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kiQLiuxbkppyf655CziiCCwCfi-Ox66mv3EQ2zT5Yl4"},
{"content":{"body":"that's roughly as simple, really","msgtype":"m.text","org.matrix.msc1767.text":"that's roughly as simple, really"},"ts":1648513422715,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k969dmACFLhcEHgl5A3xmdLZMTgTrWhmKRdFEjQJqKA"},
{"content":{"body":"and arguably better, if the associated object is frozen and so only usable as a weakmap key","msgtype":"m.text","org.matrix.msc1767.text":"and arguably better, if the associated object is frozen and so only usable as a weakmap key"},"ts":1648513479877,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rbdg2-G30F7INyleTKk_hdMMzZCtgOfIhuo2FPuL1Iw"},
{"content":{"body":"I do think that would be better than `GObject = makeGObject()`, that's what I meant by inventing their own sidechannels","format":"org.matrix.custom.html","formatted_body":"I do think that would be better than <code>GObject = makeGObject()</code>, that's what I meant by inventing their own sidechannels","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do think that would be better than `GObject = makeGObject()`, that's what I meant by inventing their own sidechannels","mimetype":"text/plain"},{"body":"I do think that would be better than <code>GObject = makeGObject()</code>, that's what I meant by inventing their own sidechannels","mimetype":"text/html"}]},"ts":1648513523459,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$wluNWn9waIgsQ2d5BBYLnMZQSiDLVgLPNR_Ixf49Q7I"},
{"content":{"body":"(because weakmaps don't have the problem where decorators from different libraries might contend for the string-key space on the associated object)","msgtype":"m.text","org.matrix.msc1767.text":"(because weakmaps don't have the problem where decorators from different libraries might contend for the string-key space on the associated object)"},"ts":1648513525989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9NLLmYdRfhWtcsJtvrtuFDC2_AtRrxTx_sCdMX0odCA"},
{"content":{"body":"same","msgtype":"m.text","org.matrix.msc1767.text":"same"},"ts":1648513535478,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$N0GUWEsIm05Fqeez70NbrFG5JmbHBkFqo51cGTbsoSI"},
{"content":{"body":"that was always something that didn't sit completely right with me about the Symbol-key-based metadata design","msgtype":"m.text","org.matrix.msc1767.text":"that was always something that didn't sit completely right with me about the Symbol-key-based metadata design"},"ts":1648513598999,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$gJw5KhpNP4PTCOW4joQuWwaOIEjjj6d6Ux_T5hYxxUo"},
{"content":{"body":"what was?","msgtype":"m.text","org.matrix.msc1767.text":"what was?"},"ts":1648513614337,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QjfBJtjkceQWLE5nORfjjINmnAuMqOdjt0qGFCzgVZs"},
{"content":{"body":"that symbols were used to key/associate metadata. It avoided the collision problem, but it just felt not as nice as using weakmaps","msgtype":"m.text","org.matrix.msc1767.text":"that symbols were used to key/associate metadata. It avoided the collision problem, but it just felt not as nice as using weakmaps"},"ts":1648513665142,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$54p2Spp8a74QSHLoPhedtYx_u8iouh00NUmSPof5pH8"},
{"content":{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"ts":1648513675722,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$z_9ZzqzMph6VPeCuMIgSvMQDUQlbOZy0Ooi8WNZFWus"},
{"content":{"body":"ah","msgtype":"m.text","org.matrix.msc1767.text":"ah"},"ts":1648513679808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wxi28sK5MWq-hscAtZf0M3TYASH_1LGIPytTUrJWxnk"},
{"content":{"body":" * habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":" * habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","m.new_content":{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","format":"org.matrix.custom.html","formatted_body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":"habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$z_9ZzqzMph6VPeCuMIgSvMQDUQlbOZy0Ooi8WNZFWus","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * habits I guess, I use weakmaps a _lot_ in framework/library dev","mimetype":"text/plain"},{"body":" * habits I guess, I use weakmaps a <em>lot</em> in framework/library dev","mimetype":"text/html"}]},"ts":1648513680761,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$tYvWx05vAIAtH30pVzyEenBFXYmxZ3QU5XAI2iv2AOw"},
{"content":{"body":"I actually like symbols better personally","msgtype":"m.text","org.matrix.msc1767.text":"I actually like symbols better personally"},"ts":1648513684833,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxO-UjCXMWWbozeqaeYlMBGpt_kFJVB0tRn5pxLRJnA"},
{"content":{"body":"but it does make it very strange that other decorators get to see your data by default","msgtype":"m.text","org.matrix.msc1767.text":"but it does make it very strange that other decorators get to see your data by default"},"ts":1648513741984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V-_DyPCLsUKslMAuqnRedSiYoxCCbtDjEOKPaghAOCk"},
{"content":{"body":"like, that's just weird","msgtype":"m.text","org.matrix.msc1767.text":"like, that's just weird"},"ts":1648513746547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6gN45w4PrB5LPi359lecw2GrfGWHwoc4q9MI8ILrZNg"},
{"content":{"body":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","msgtype":"m.text","org.matrix.msc1767.text":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"ts":1648513766302,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DPaYauHRR-P3u11lKaRhbSu4UevUmvzluWHtnKY2TVo"},
{"content":{"body":"and you have to work hard to make it not-public","msgtype":"m.text","org.matrix.msc1767.text":"and you have to work hard to make it not-public"},"ts":1648513781976,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bYYLa3RnwK2czeirWUNFHnHCorB3iwiiuKdvocQ0_r4"},
{"content":{"body":" * if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","m.new_content":{"body":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident","msgtype":"m.text","org.matrix.msc1767.text":"if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"m.relates_to":{"event_id":"$DPaYauHRR-P3u11lKaRhbSu4UevUmvzluWHtnKY2TVo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * if you [a decorator author] are using metadata to coordinate with yourself, you are probably not also intending to create a public API, but you inherently are, by accident"},"ts":1648513796742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZnUudXuAnNPAoFPXEtspRKgt1Sc45pBEXn1iEELb3yo"},
{"content":{"body":"That was my problem with the current metadata approach, you had to jump through hoops to communicate with yourself privately","msgtype":"m.text","org.matrix.msc1767.text":"That was my problem with the current metadata approach, you had to jump through hoops to communicate with yourself privately"},"ts":1648513817598,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2nVceYO7cZmZiVLc7tXgCwgpYuEUvNjwCpEGuIiKCvw"},
{"content":{"body":"sidebar: this is yet another place where the fact that `class A extends B` creates a prototype relation between `A` and `B`, not just `A.prototype` and `B.prototype`, is going to bite us","format":"org.matrix.custom.html","formatted_body":"sidebar: this is yet another place where the fact that <code>class A extends B</code> creates a prototype relation between <code>A</code> and <code>B</code>, not just <code>A.prototype</code> and <code>B.prototype</code>, is going to bite us","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sidebar: this is yet another place where the fact that `class A extends B` creates a prototype relation between `A` and `B`, not just `A.prototype` and `B.prototype`, is going to bite us","mimetype":"text/plain"},{"body":"sidebar: this is yet another place where the fact that <code>class A extends B</code> creates a prototype relation between <code>A</code> and <code>B</code>, not just <code>A.prototype</code> and <code>B.prototype</code>, is going to bite us","mimetype":"text/html"}]},"ts":1648513894217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kwaJflYxDtIKfU9SyY7gnW9OW-VCq1b5OYeAgu0GXH4"},
{"content":{"body":"because `A[Symbol.metadata]` gives you _B_'s metadata, unless A overwrites it","format":"org.matrix.custom.html","formatted_body":"because <code>A[Symbol.metadata]</code> gives you <em>B</em>'s metadata, unless A overwrites it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because `A[Symbol.metadata]` gives you _B_'s metadata, unless A overwrites it","mimetype":"text/plain"},{"body":"because <code>A[Symbol.metadata]</code> gives you <em>B</em>'s metadata, unless A overwrites it","mimetype":"text/html"}]},"ts":1648513921592,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F9UFvcdoLZ4UvW9GoSNBAqCo31S7mTO_QhmDdRn5luA"},
{"content":{"body":"I guess if we create Symbol.metadata on every class, even those without decorators, that's not a problem","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we create Symbol.metadata on every class, even those without decorators, that's not a problem"},"ts":1648513936483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3d36bv6yZHmGqpLDoDK4pLJ2_Wu65wFN1sNTmLcNVaA"},
{"content":{"body":"that's a feature IMO, you generally want metadata to be inherited","msgtype":"m.text","org.matrix.msc1767.text":"that's a feature IMO, you generally want metadata to be inherited"},"ts":1648513984999,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Agdy8U6Yi8Yvq4sUZnOWAgm2z5e5e47te3WCMsO9AmE"},
{"content":{"body":"most metadata is applied to the instance, and you don't really care whether or not it was on a specific parent class","msgtype":"m.text","org.matrix.msc1767.text":"most metadata is applied to the instance, and you don't really care whether or not it was on a specific parent class"},"ts":1648514006586,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$ZHM556bfYolLSBTFQN5ZZAk948VlSlIwiJzmBsPo2NI"},
{"content":{"body":"One of the benefits of Metadata is discoverability, as it helps with library interoperability. If you don't want the Metadata to be discoverable, you can create your own empty object key to store the Metadata for the class and use a WeakMap internally. ","format":"org.matrix.custom.html","formatted_body":"One of the benefits of Metadata is discoverability, as it helps with library interoperability. If you don't want the Metadata to be discoverable, you can create your own empty object key to store the Metadata for the class and use a WeakMap internally.","msgtype":"m.text"},"ts":1648514024095,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SfkQ46-oZH9us-MYRFEn3nPwAV8VCB5kaXh5HNwf5gM"},
{"content":{"body":"pzuraq: even for static fields?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: even for static fields?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?","mimetype":"text/html"}]},"ts":1648514038723,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ"},
{"content":{"body":"Which was something we discussed in the champion/stakeholder calls","msgtype":"m.text"},"ts":1648514043242,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O7J7Ac-ysAwcmhIywjFZZGHG70R4YnS-S1CqKCb4VVI"},
{"content":{"body":"encapsulation should be the _default_, not opt-in","format":"org.matrix.custom.html","formatted_body":"encapsulation should be the <em>default</em>, not opt-in","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"encapsulation should be the _default_, not opt-in","mimetype":"text/plain"},{"body":"encapsulation should be the <em>default</em>, not opt-in","mimetype":"text/html"}]},"ts":1648514063490,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E"},
{"content":{"body":"if you want to create a public API, you should do that on purpose","msgtype":"m.text","org.matrix.msc1767.text":"if you want to create a public API, you should do that on purpose"},"ts":1648514080735,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kgay40JAfbr_VkUDhAUXb0Mm29z5wzSJQQwcxeUsUCg"},
{"content":{"body":"it shouldn't happen by accident","msgtype":"m.text","org.matrix.msc1767.text":"it shouldn't happen by accident"},"ts":1648514083650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wuFZLou9qWgxgy2LjebB7ZH9f4d5qLPfk9VCPcvLpqU"},
{"content":{"body":"> <@bakkot:matrix.org> encapsulation should be the _default_, not opt-in\n\nEncapsulation is not inheretence. Almost all Metadata use cases have leveraged inheretence (even reflect-metadata leverages it) ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />encapsulation should be the <em>default</em>, not opt-in</blockquote></mx-reply>Encapsulation is not inheretence. Almost all Metadata use cases have leveraged inheretence (even reflect-metadata leverages it)","m.relates_to":{"m.in_reply_to":{"event_id":"$VfKB_ji-39Ca3LB_rRbNAlDiTIv3XdlnG_-3G3pjf2E"}},"msgtype":"m.text"},"ts":1648514144337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gGpjBg9hFPhi3Xvmd71Js7LrCbwQwZBzcFD6iNGcTQI"},
{"content":{"body":"sorry, I'm talking about two different things here","msgtype":"m.text","org.matrix.msc1767.text":"sorry, I'm talking about two different things here"},"ts":1648514159429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xAQUDUaAS7uDfOKDTiHFMouCBweSfYY-ri88FoUXbBY"},
{"content":{"body":"the first is, communicating with yourself, which should be encapsulated by default","msgtype":"m.text","org.matrix.msc1767.text":"the first is, communicating with yourself, which should be encapsulated by default"},"ts":1648514179606,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aXb4tvhRFMRzoNa0y8SL5JeyQgbIAfEZkS9-JQOmDSU"},
{"content":{"body":"the second is, how does inheritance work","msgtype":"m.text","org.matrix.msc1767.text":"the second is, how does inheritance work"},"ts":1648514184541,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BAIJuz7hmn_1Vcqik0n-7TnDSX-uHAdWiX6lmS879zw"},
{"content":{"body":"> <@bakkot:matrix.org> pzuraq: even for static fields?\n\nhmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?</blockquote></mx-reply>hmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","m.relates_to":{"m.in_reply_to":{"event_id":"$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> pzuraq: even for static fields?\n\nhmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GmC5Qa7jsAUQtf_mIhUw2mqzVALUi5vKAaRKAKlbuTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: even for static fields?</blockquote></mx-reply>hmm, that's a fair point for some use cases. Easy enough to get around (check for own property when applying metadata for static fields) but could be a footgun","mimetype":"text/html"}]},"ts":1648514189075,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$eX8P2cCJASqB6zCnRYXgAxT0Hx7FmdZcQSUXuFZ1Ozo"},
{"content":{"body":"for when you want it to be public","msgtype":"m.text","org.matrix.msc1767.text":"for when you want it to be public"},"ts":1648514192878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7EfECPEGW0cMkjoVK0rDIjtwIFsUiAlNPWoISY1Zah8"},
{"content":{"body":"there are other use cases where you would still want it though","msgtype":"m.text","org.matrix.msc1767.text":"there are other use cases where you would still want it though"},"ts":1648514195435,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$7jyD-_KAo-0LpxiXJIUM4z5Gbrndf6EPnDc9Xtv1Y2E"},
{"content":{"body":"e.g. validation","msgtype":"m.text","org.matrix.msc1767.text":"e.g. validation"},"ts":1648514198401,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$sN7sLVfH_UdPXueQCvp47-DVg8TGyQ5CZf81MpZWFu0"},
{"content":{"body":"hm.","msgtype":"m.text","org.matrix.msc1767.text":"hm."},"ts":1648514213658,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FUEhibodO0k0wkPQpCbkaDuI4uPKMWhDE47FFENfvYg"},
{"content":{"body":"I can see why you would want that, yeah","msgtype":"m.text","org.matrix.msc1767.text":"I can see why you would want that, yeah"},"ts":1648514244946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$voKUabOm2lF0qdU3KNgWm37iGOtO6OS7PlxFqSmZT9A"},
{"content":{"body":"with the frozen-associated-key-object design, the decorator author would have to remember to walk up the prototype chain to see if anything in the chain had WeakMap associated data","msgtype":"m.text","org.matrix.msc1767.text":"with the frozen-associated-key-object design, the decorator author would have to remember to walk up the prototype chain to see if anything in the chain had WeakMap associated data"},"ts":1648514347576,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RAgrKg63DZrjkF5wSbm83QafkE_VQ8Qyt6_2_8sbjOE"},
{"content":{"body":"but that is maybe not so bad","msgtype":"m.text","org.matrix.msc1767.text":"but that is maybe not so bad"},"ts":1648514350215,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LJHyaPsKGzOW1hJrgGm_T41sYsVYVwmteO5oHnRf26g"},
{"content":{"body":"and is not a cost to users of the decorator","msgtype":"m.text","org.matrix.msc1767.text":"and is not a cost to users of the decorator"},"ts":1648514351375,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ElYpbC1o-3koTJdXOkZQTTcom4Psff4bXWN32989NPM"},
{"content":{"body":"What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?","msgtype":"m.text","org.matrix.msc1767.text":"What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?"},"ts":1648514353504,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg"},
{"content":{"body":"yes, that's something the current design tried to avoid","msgtype":"m.text","org.matrix.msc1767.text":"yes, that's something the current design tried to avoid"},"ts":1648514366779,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Pi7OmytuvmbrURSioIah8M--H6OJrnm8qhWdq0Zqv0M"},
{"content":{"body":"but that's where the complexity starts to come in 🙃","msgtype":"m.text","org.matrix.msc1767.text":"but that's where the complexity starts to come in 🙃"},"ts":1648514375843,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$s6c7Aw1arvwp0B6WW2D9R-7rUaQmdonh-YYJDTreIKQ"},
{"content":{"body":"inheritance is basically 90% of the complexity","msgtype":"m.text","org.matrix.msc1767.text":"inheritance is basically 90% of the complexity"},"ts":1648514398341,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$4dpwOS3OkQTvHeNlGty9nBdhVz9x07FtqFKJ8uGGXzw"},
{"content":{"body":"crawling the prototype chain is something that framework authors though are familiar with in my experience","msgtype":"m.text","org.matrix.msc1767.text":"crawling the prototype chain is something that framework authors though are familiar with in my experience"},"ts":1648514450773,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$leTiMPJWP38LN5or42CTRn73PbnYx-A3oBt8NyVtTDs"},
{"content":{"body":"I guess if the object is frozen you don't necessarily need it to be a _prototype_ chain","format":"org.matrix.custom.html","formatted_body":"I guess if the object is frozen you don't necessarily need it to be a <em>prototype</em> chain","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess if the object is frozen you don't necessarily need it to be a _prototype_ chain","mimetype":"text/plain"},{"body":"I guess if the object is frozen you don't necessarily need it to be a <em>prototype</em> chain","mimetype":"text/html"}]},"ts":1648514456859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q05aO50W4c2E4OluAuTTqHbNIwwd8SnRI3aNv9a2GJE"},
{"content":{"body":"you can just have the key be like `Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })`","format":"org.matrix.custom.html","formatted_body":"you can just have the key be like <code>Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can just have the key be like `Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })`","mimetype":"text/plain"},{"body":"you can just have the key be like <code>Object.freeze({ __proto__: null, parent: (the superclass's Symbol.metadata property ) })</code>","mimetype":"text/html"}]},"ts":1648514494057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kaNOPNdms4gdM0ici5aHHTj6HPmn0wYXAzY_vZRZ3Ds"},
{"content":{"body":"not really any advantage in a prototype relation for frozen empty objects, really","msgtype":"m.text","org.matrix.msc1767.text":"not really any advantage in a prototype relation for frozen empty objects, really"},"ts":1648514513986,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RV35hgw_xkYfUaX5g9hXadfAkEs43ig4pRozuw8VJ8Y"},
{"content":{"body":"hmmm, yes","msgtype":"m.text","org.matrix.msc1767.text":"hmmm, yes"},"ts":1648514527004,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$D304tUioatQyGJHTyruUvEx-bFWrKQhBlJtHOgtqYNY"},
{"content":{"body":"could allow you to get parent metadata during decoration too","msgtype":"m.text","org.matrix.msc1767.text":"could allow you to get parent metadata during decoration too"},"ts":1648514544948,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$8ueNUlokpn7KFAWnrjeTei0SeM4XXpHavlJFcYFAt9I"},
{"content":{"body":"> <@mhofman:matrix.org> What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?\n\nwhich internal state exactly?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What are the validation use cases where the validator piece wouldn&#39;t have access to the internal state of the decorator?</blockquote></mx-reply>which internal state exactly?","m.relates_to":{"m.in_reply_to":{"event_id":"$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> What are the validation use cases where the validator piece wouldn't have access to the internal state of the decorator?\n\nwhich internal state exactly?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AKlYk2rIsNNMl5zAL0nGZVlvyyGZp2UFWLchte4CQgg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What are the validation use cases where the validator piece wouldn&#39;t have access to the internal state of the decorator?</blockquote></mx-reply>which internal state exactly?","mimetype":"text/html"}]},"ts":1648514651962,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$bHAG87aHGIkjl4BH9RmCtENdwoYkzyVOiCATMPzZNM0"},
{"content":{"body":"Maybe I misunderstood, but it seemed above it was suggested that validation use cases benefit from public metadata, but I didn't see how","msgtype":"m.text","org.matrix.msc1767.text":"Maybe I misunderstood, but it seemed above it was suggested that validation use cases benefit from public metadata, but I didn't see how"},"ts":1648514711605,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$w3RyG6d_83sUksTpB_2NH0r87lM3xIgymJ8wkuzl47w"},
{"content":{"body":"or maybe I mixed up 2 different things ?","msgtype":"m.text","org.matrix.msc1767.text":"or maybe I mixed up 2 different things ?"},"ts":1648514747846,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WBnYBncLlX1WR63loevSP2zPBmaS-HuM6CLff27gnPE"},
{"content":{"body":"a typical validation library looks like `import { string, number, object, validate } from 'validator-lib'`","format":"org.matrix.custom.html","formatted_body":"a typical validation library looks like <code>import { string, number, object, validate } from 'validator-lib'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a typical validation library looks like `import { string, number, object, validate } from 'validator-lib'`","mimetype":"text/plain"},{"body":"a typical validation library looks like <code>import { string, number, object, validate } from 'validator-lib'</code>","mimetype":"text/html"}]},"ts":1648514765748,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$iG32z8zsrU7eamL86V5OMTdRqje2AUiyAmeYkQ9qo4c"},
{"content":{"body":"you then apply the type decorators to a field or other element","msgtype":"m.text","org.matrix.msc1767.text":"you then apply the type decorators to a field or other element"},"ts":1648514778226,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$fEGHKwpQCbrm-5oBAv-WWxIDrAWBlWukhAkrSRCyt5A"},
{"content":{"body":"and then call `validate()` later on on the object","format":"org.matrix.custom.html","formatted_body":"and then call <code>validate()</code> later on on the object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and then call `validate()` later on on the object","mimetype":"text/plain"},{"body":"and then call <code>validate()</code> later on on the object","mimetype":"text/html"}]},"ts":1648514784681,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$vTGjUykLqV4EMSw49UUET5EnGkL2jOl4LWLePA_zikI"},
{"content":{"body":"without a way to get which decorators were applied to the object being validated, you can't really validate","msgtype":"m.text","org.matrix.msc1767.text":"without a way to get which decorators were applied to the object being validated, you can't really validate"},"ts":1648514821238,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$nBcfiXtwJ6kFnIMAZYWGkH8mfRqns4EHLfEbHBw6FNE"},
{"content":{"body":"well if `@string`, `@number` etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit `@validated` decorator to the thing to be validated?","format":"org.matrix.custom.html","formatted_body":"well if <code>@string</code>, <code>@number</code> etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit <code>@validated</code> decorator to the thing to be validated?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"well if `@string`, `@number` etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit `@validated` decorator to the thing to be validated?","mimetype":"text/plain"},{"body":"well if <code>@string</code>, <code>@number</code> etc. receive a stand-in object for the thing being decorated, then the main issue is linking the thing being decorated to the stand-in object, which can be done by adding an explicit <code>@validated</code> decorator to the thing to be validated?","mimetype":"text/html"}]},"ts":1648515012195,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Wb63lD6KnE4vIcC5y0g8H5J2hkMCVYY38lk6xOJQrGY"},
{"content":{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a `[Symbol.metadata]` prop","format":"org.matrix.custom.html","formatted_body":"or as mentioned, automatically add that standin-object to the thing being decorated as a <code>[Symbol.metadata]</code> prop","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a `[Symbol.metadata]` prop","mimetype":"text/plain"},{"body":"or as mentioned, automatically add that standin-object to the thing being decorated as a <code>[Symbol.metadata]</code> prop","mimetype":"text/html"}]},"ts":1648515078977,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$R_uu4BAYBZ8Ac8vW_KTdKwu11Eaop58D7EguhHXzgVE"},
{"content":{"body":"correct, both of those solutions would work","msgtype":"m.text","org.matrix.msc1767.text":"correct, both of those solutions would work"},"ts":1648515115203,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$Y0lCN0gt1lnGvmEumzDcrs6gdg1RBck7iqMsPZM34JU"},
{"content":{"body":"opened an issue to record the associated-object design: https://github.com/tc39/proposal-decorators/issues/457","msgtype":"m.text","org.matrix.msc1767.text":"opened an issue to record the associated-object design: https://github.com/tc39/proposal-decorators/issues/457"},"ts":1648516340421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UOUuqvc4zu7wfOJnGwnO8QZKvGaz_58XiwuK_T2E7Ds"},
{"content":{"body":"Metadata use cases:\nDI, plugin/extensibility, ORM, WSDL/ws*, REST discovery/routing, FFI/Marshaling (esp parameters), serialization control (binary, JSON, XML), validation/contracts, RTTI, debugging (watch/locals window control, stepping behavior), proxy/membrane permeability,... ","format":"org.matrix.custom.html","formatted_body":"Metadata use cases:<br />DI, plugin/extensibility, ORM, WSDL/ws*, REST discovery/routing, FFI/Marshaling (esp parameters), serialization control (binary, JSON, XML), validation/contracts, RTTI, debugging (watch/locals window control, stepping behavior), proxy/membrane permeability,...","msgtype":"m.text"},"ts":1648516344915,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s0Qi_o0gcMKsNO2aQ0uC_lffc8SYCB9JSkWVodztwpM"},
{"content":{"body":"shu: what's the result example you're referring to here https://github.com/tc39/proposal-pattern-matching/issues/253","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: what's the result example you're referring to here https://github.com/tc39/proposal-pattern-matching/issues/253","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: what's the result example you're referring to here https://github.com/tc39/proposal-pattern-matching/issues/253","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: what's the result example you're referring to here https://github.com/tc39/proposal-pattern-matching/issues/253","mimetype":"text/html"}]},"ts":1648517551389,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$4axQ2GEI3G_yaKBGy7KilV-I0sg3eFb_OSKeUi6RzoU"},
{"content":{"body":"> <@rbuckton:matrix.org> Metadata use cases:\n> DI, plugin/extensibility, ORM, WSDL/ws*, REST discovery/routing, FFI/Marshaling (esp parameters), serialization control (binary, JSON, XML), validation/contracts, RTTI, debugging (watch/locals window control, stepping behavior), proxy/membrane permeability,... \n\nMany of these can't be accomplished by method replacement. Class decorators could do the job, but then the decorator isn't located near the thing it is ostensibly decorating. If using a `@register` approach, any more than one or two uses starts to seem wasteful, and I could definitely see overlap in an API that used REST routing and WS routing for the same endpoint and DI for composition. Then add debugging extensions (like \"step over this function\") and we're up to 4 \"registers\". It becomes unwieldy quickly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$s0Qi_o0gcMKsNO2aQ0uC_lffc8SYCB9JSkWVodztwpM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />Metadata use cases:<br />DI, plugin/extensibility, ORM, WSDL/ws*, REST discovery/routing, FFI/Marshaling (esp parameters), serialization control (binary, JSON, XML), validation/contracts, RTTI, debugging (watch/locals window control, stepping behavior), proxy/membrane permeability,...</blockquote></mx-reply>Many of these can't be accomplished by method replacement. Class decorators could do the job, but then the decorator isn't located near the thing it is ostensibly decorating. If using a <code>@register</code> approach, any more than one or two uses starts to seem wasteful, and I could definitely see overlap in an API that used REST routing and WS routing for the same endpoint and DI for composition. Then add debugging extensions (like &quot;step over this function&quot;) and we're up to 4 &quot;registers&quot;. It becomes unwieldy quickly","m.relates_to":{"m.in_reply_to":{"event_id":"$s0Qi_o0gcMKsNO2aQ0uC_lffc8SYCB9JSkWVodztwpM"}},"msgtype":"m.text"},"ts":1648518258517,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$07boPtfLIJooBn8G4joZiZqD5gFvsB2KQYfoq5ndPwk"},
{"content":{"body":"I contend that a class which is making use of decorators from four different libraries is already unwieldy.","msgtype":"m.text","org.matrix.msc1767.text":"I contend that a class which is making use of decorators from four different libraries is already unwieldy."},"ts":1648518314866,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HLZEwxPy55tPijwAo7w9iqGIp9wJ_V9kKOVinAqi0js"},
{"content":{"body":"The alternative is duplicating code or 4 different adapters to the same code, which increases maintenance","msgtype":"m.text"},"ts":1648518359360,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Two9gANmrwxgtpwkcyJ279eAkD7gUFpTnvh7Iif5OOQ"},
{"content":{"body":"It may be a rare occurrence to see more than two, but requiring entangled decorators makes things dramatically worse","msgtype":"m.text"},"ts":1648518488834,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2hOOwH2squ3RnxO-DW8jJHeeDkqZUCOxUbAl78KtkaM"},
{"content":{"body":"Also, you essentially need to create an entangled decorator pair per class declaration, you can't rely on execution order to handle association. ","format":"org.matrix.custom.html","formatted_body":"Also, you essentially need to create an entangled decorator pair per class declaration, you can't rely on execution order to handle association.","msgtype":"m.text"},"ts":1648518752156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YamkZ6icCr59rK10Zl-1LZKTvxH24TFHzm9hPl0r6no"},
{"content":{"body":"```\nconst { register, meta } = makeMeta();\n\n@register\nclass A {\n  @meta x;\n  static B = @register class B {} // oops\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>const { register, meta } = makeMeta();\n\n@register\nclass A {\n  @meta x;\n  static B = @register class B {} // oops\n}\n</code></pre>","msgtype":"m.text"},"ts":1648518884280,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sA9pmfGzdBxXX_hwbHNitwttDkFpR3MoKY1RBRRzYIM"},
{"content":{"body":"devsnek: the one from the slide deck: https://docs.google.com/presentation/d/1sJoXU1ysK6eZn04pjnQ-1z6EetsVf9VfHeU0Ht8hiFQ/edit#slide=id.g112a5d188b1_0_231","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: the one from the slide deck: https://docs.google.com/presentation/d/1sJoXU1ysK6eZn04pjnQ-1z6EetsVf9VfHeU0Ht8hiFQ/edit#slide=id.g112a5d188b1_0_231","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"devsnek: the one from the slide deck: https://docs.google.com/presentation/d/1sJoXU1ysK6eZn04pjnQ-1z6EetsVf9VfHeU0Ht8hiFQ/edit#slide=id.g112a5d188b1_0_231","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: the one from the slide deck: https://docs.google.com/presentation/d/1sJoXU1ysK6eZn04pjnQ-1z6EetsVf9VfHeU0Ht8hiFQ/edit#slide=id.g112a5d188b1_0_231","mimetype":"text/html"}]},"ts":1648518940245,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ED8S1xfMJ01HbBCkO4QMoadKVzRN39dknVrM025te-U"},
{"content":{"body":"So if you have more than one class per file you need multiple calls to `makeMeta`, which again can quickly become untenable ","format":"org.matrix.custom.html","formatted_body":"So if you have more than one class per file you need multiple calls to <code>makeMeta</code>, which again can quickly become untenable","msgtype":"m.text"},"ts":1648518944089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cKPS7pOCVxTBqjpkNlnnBbkQBZNVUQSpQv2jpBQZ9n0"},
{"content":{"body":"\"untenable\" is, I think, not how I would describe that, but I agree that's what it would look like","msgtype":"m.text","org.matrix.msc1767.text":"\"untenable\" is, I think, not how I would describe that, but I agree that's what it would look like"},"ts":1648519075113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VIOZSUK-OkTCPeai6vMgpWvIJ5l5ITg3k-XeOaSEeSE"},
{"content":{"body":"man we have pretty different definitions of \"untenable\", rbuckton ","format":"org.matrix.custom.html","formatted_body":"man we have pretty different definitions of &quot;untenable&quot;, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"man we have pretty different definitions of \"untenable\", rbuckton ","mimetype":"text/plain"},{"body":"man we have pretty different definitions of &quot;untenable&quot;, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>","mimetype":"text/html"}]},"ts":1648519084529,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BVDyW9N2zeZXVcz29oF-KAsu6jLaG2pC38zNpyZEguo"},
{"content":{"body":"ah i see","msgtype":"m.text","org.matrix.msc1767.text":"ah i see"},"ts":1648519713278,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WyRgOXYdgvEkusnKGHqJDYlprP72AHSxJC6jLcKd6Dw"},
{"content":{"body":"yeah matches:bool is not fantastic","msgtype":"m.text","org.matrix.msc1767.text":"yeah matches:bool is not fantastic"},"ts":1648519722914,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$5LpWm9sswEJUgCUKUOOQeZSCr3xJZJg5TL0wMljeyUU"},
{"content":{"body":"it would be nice if there was a way to teach match syntax about custom discriminated unions","msgtype":"m.text","org.matrix.msc1767.text":"it would be nice if there was a way to teach match syntax about custom discriminated unions"},"ts":1648519919760,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$FMMleWjSVpX6OkPYVwwwI6f70Fi4oCXhj9lnn7mmX7o"},
{"content":{"body":"> <@shuyuguo:matrix.org> man we have pretty different definitions of \"untenable\", rbuckton \n\nI'd rather not have\n```\nconst meta1=..., meta2=..., meta3=...,...\n\n@meta1.register\nclass A {\n  @meta1.dec\n  x;\n  ...\n}\n\n@meta2.register\n...\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDyW9N2zeZXVcz29oF-KAsu6jLaG2pC38zNpyZEguo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />man we have pretty different definitions of &quot;untenable&quot;, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a></blockquote></mx-reply><p>I'd rather not have</p>\n<pre><code>const meta1=..., meta2=..., meta3=...,...\n\n@meta1.register\nclass A {\n  @meta1.dec\n  x;\n  ...\n}\n\n@meta2.register\n...\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$BVDyW9N2zeZXVcz29oF-KAsu6jLaG2pC38zNpyZEguo"}},"msgtype":"m.text"},"ts":1648519938725,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XTxhie6p7suOe0EXG34swyhHNBg31tGhsVurgb0WpeM"},
{"content":{"body":"i have a feeling a lot of custom matchers are actually just fancy discriminated unions","msgtype":"m.text","org.matrix.msc1767.text":"i have a feeling a lot of custom matchers are actually just fancy discriminated unions"},"ts":1648519946293,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jc8slqwcN55GaBJQSYo6Ur7LVeeqryfSAPKYUWqAQyU"},
{"content":{"body":"> <@shuyuguo:matrix.org> man we have pretty different definitions of \"untenable\", rbuckton \n\nI'm using the \"not able to be maintained\" definition. This approach is a maintenance nightmare, coming from someone who has used Metadata decorators extensively. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BVDyW9N2zeZXVcz29oF-KAsu6jLaG2pC38zNpyZEguo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />man we have pretty different definitions of &quot;untenable&quot;, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a></blockquote></mx-reply>I'm using the &quot;not able to be maintained&quot; definition. This approach is a maintenance nightmare, coming from someone who has used Metadata decorators extensively.","m.relates_to":{"m.in_reply_to":{"event_id":"$BVDyW9N2zeZXVcz29oF-KAsu6jLaG2pC38zNpyZEguo"}},"msgtype":"m.text"},"ts":1648520016656,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KhbqU4iv1-Xklbcaatl0rg-lHjbCkefmTVm_TIk5x04"},
{"content":{"body":"class fields are already pretty nuts, this doesn't seem too much worse by comparison ","msgtype":"m.text","org.matrix.msc1767.text":"class fields are already pretty nuts, this doesn't seem too much worse by comparison "},"ts":1648520052781,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$yUj6IzQeDEUssj49uuwO8gQYoPcERvPSjthqUrGqusw"},
{"content":{"body":"Entangled decorators can work well in isolated cases (and I've used a similar approach in those cases), but the pattern does not extend well to a general practice. ","format":"org.matrix.custom.html","formatted_body":"Entangled decorators can work well in isolated cases (and I've used a similar approach in those cases), but the pattern does not extend well to a general practice.","msgtype":"m.text"},"ts":1648520176925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XkTGV3VUlZ6p5btqWsqjsQDQCxcLUnwfzBRRBAjMq1E"},
{"content":{"body":"oh, we never addressed https://github.com/tc39/proposal-decorators/issues/417 :(","msgtype":"m.text","org.matrix.msc1767.text":"oh, we never addressed https://github.com/tc39/proposal-decorators/issues/417 :("},"ts":1648520217181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lUfaLbfL41pjXA0JTq8nk75ihRDHjNa-E-G1AsjjEmM"},
{"content":{"body":"I completely forgot about that one","msgtype":"m.text","org.matrix.msc1767.text":"I completely forgot about that one"},"ts":1648520220120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kHtncDvlAiPvfCq95aGkDvYlhcLCpx6Lt8Bvj85RGyk"},
{"content":{"body":"IIRC, we chose `isStatic` over just `static` because `static` is a keyword and doesn't work well with destructuring. ","format":"org.matrix.custom.html","formatted_body":"IIRC, we chose <code>isStatic</code> over just <code>static</code> because <code>static</code> is a keyword and doesn't work well with destructuring.","msgtype":"m.text"},"ts":1648520307720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kp4kHnR4Ld8zAf4OzPTORq9B2npktHLC2W1IYjZymcE"},
{"content":{"body":"That was several years ago when Yehuda was championing the proposal, though so there may be other context I'm unaware of. ","format":"org.matrix.custom.html","formatted_body":"That was several years ago when Yehuda was championing the proposal, though so there may be other context I'm unaware of.","msgtype":"m.text"},"ts":1648520347577,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WCfNkYTntt_bqkW0QVURaKhlV4nMyDp_HYRv7X8Tpeg"},
{"content":{"body":"`{ static: isStatic }` seems fine to me","format":"org.matrix.custom.html","formatted_body":"<code>{ static: isStatic }</code> seems fine to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`{ static: isStatic }` seems fine to me","mimetype":"text/plain"},{"body":"<code>{ static: isStatic }</code> seems fine to me","mimetype":"text/html"}]},"ts":1648520357768,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$YJY-6OJxjnMayNu64Lidc__hTb3jdwKihkJGD6jr0FU"},
{"content":{"body":"* That was several years ago when Yehuda was championing the proposal, though so there may be other context I'm unaware of. ","m.new_content":{"body":"That was several years ago when Yehuda was championing the proposal, though so there may be other context I'm unaware of. ","format":"org.matrix.custom.html","formatted_body":"That was several years ago when Yehuda was championing the proposal, though so there may be other context I'm unaware of.","msgtype":"m.text"},"m.relates_to":{"event_id":"$WCfNkYTntt_bqkW0QVURaKhlV4nMyDp_HYRv7X8Tpeg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648520362634,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1A_4NY8rUz8AyftJ2BAIYcMIj4XLfIVassCfJqWwYxQ"},
{"content":{"body":"But why force that on end users? ","msgtype":"m.text"},"ts":1648520405397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mWoMmQWxwUmHDOnsJzoZS9Xu8NmXs_G5rXcaHvWxIEc"},
{"content":{"body":"(by that I mean decorator authors)","msgtype":"m.text"},"ts":1648520444434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HM2NOsRzlcqv-KjubSIvxvxx2RwvKBy0aDiQlsUFHo0"},
{"content":{"body":"https://w3ctag.github.io/design-principles/#naming-booleans","msgtype":"m.text","org.matrix.msc1767.text":"https://w3ctag.github.io/design-principles/#naming-booleans"},"ts":1648520450208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yGaU1x9mJAAPUl9N9AjRJAwEM-htIlawXJHE-nu-65A"},
{"content":{"body":"I don't have a strong preference either way","msgtype":"m.text"},"ts":1648520453006,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HuGr39k1RmvoMLmA7qMQmhfdJot3yWkf5CRGzjm5NH8"},
{"content":{"body":"I was under the impression switching from`static` to `isStatic` was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure. ","format":"org.matrix.custom.html","formatted_body":"I was under the impression switching from<code>static</code> to <code>isStatic</code> was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure.","msgtype":"m.text"},"ts":1648520607727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BfGdKMzeVD4dEMGone9hnQExso4rsN97_DAgtLd6jTw"},
{"content":{"body":"I also don’t have a strong preference","msgtype":"m.text"},"ts":1648520745577,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$3pY0PojSs0XFHA3-8qQmTZFpZiTpTCefoW44Xt4CNp4"},
{"content":{"body":"if we have an extra five minutes this meeting I'd like to revisit that specific question, before anyone ships it","msgtype":"m.text","org.matrix.msc1767.text":"if we have an extra five minutes this meeting I'd like to revisit that specific question, before anyone ships it"},"ts":1648520811113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hx0jDEQKXb3vLihqFd-5oqblYZ8q90y6qzqTPC12oeQ"},
{"content":{"body":"I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","format":"org.matrix.custom.html","formatted_body":"I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/plain"},{"body":"I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$BfGdKMzeVD4dEMGone9hnQExso4rsN97_DAgtLd6jTw"}}},"ts":1648520921303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nj-WHIc51MyRQTi53wggY5s0Qsuf2eGJbYOWtmMt4K4"},
{"content":{"body":"> <@rbuckton:matrix.org> I was under the impression switching from`static` to `isStatic` was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure.\n\n * I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BfGdKMzeVD4dEMGone9hnQExso4rsN97_DAgtLd6jTw?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I was under the impression switching from<code>static</code> to <code>isStatic</code> was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure.</blockquote></mx-reply> * I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","m.new_content":{"body":"I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","format":"org.matrix.custom.html","formatted_body":"I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/plain"},{"body":"I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nj-WHIc51MyRQTi53wggY5s0Qsuf2eGJbYOWtmMt4K4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I was under the impression switching from`static` to `isStatic` was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure.\n\n * I can't find either \"isStatic\" or \"isPrivate\" in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BfGdKMzeVD4dEMGone9hnQExso4rsN97_DAgtLd6jTw?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I was under the impression switching from<code>static</code> to <code>isStatic</code> was at the committee's request during an update several years ago. I'd have to dig through the meeting notes to be sure.</blockquote></mx-reply> * I can't find either &quot;isStatic&quot; or &quot;isPrivate&quot; in the notes, but it's possible the notes didn't capture it (under those names)","mimetype":"text/html"}]},"ts":1648520928002,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eVTUKcIw7Vf56ajf0i6zQ_HPYCJKFvxD6GNKltjf_os"},
{"content":{"body":"Yeah sounds good, ideally we should address it now","msgtype":"m.text"},"ts":1648520936762,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$O6mN3NsHvmHijtMckPXM1Jp_ZUafFm7axFphbfUJQao"},
{"content":{"body":"we have to address it now","msgtype":"m.text","org.matrix.msc1767.text":"we have to address it now"},"ts":1648520947377,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yhcefSgY7O5-njrMBIEhvsT-8Ud4eHRg7rsCfnJ5IDA"},
{"content":{"body":"or wait to the next meeting","msgtype":"m.text","org.matrix.msc1767.text":"or wait to the next meeting"},"ts":1648520950349,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R9oW73RnsIfcaFYBW_allS31JMdoedvrKiIuQAPyoh8"},
{"content":{"body":"normative changes can only happen by consensus at this point","msgtype":"m.text","org.matrix.msc1767.text":"normative changes can only happen by consensus at this point"},"ts":1648520955516,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lj9ZfIvJ5SHMiWL1HeULN_J2GGXLyPv6y-WHDhLXVvQ"},
{"content":{"body":"This was several versions and several champions ago, so again I'm not 100% sure of the context","msgtype":"m.text"},"ts":1648520970461,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OInARP9e7Qax51ZyIA3NTtUDZAo9iZ2P-JalM8h7tRg"},
{"content":{"body":"i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still argue about it","msgtype":"m.text","org.matrix.msc1767.text":"i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still argue about it"},"ts":1648520987751,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$SGF3LgbLIvtZ2P5cq5G1675twFU9kUopHsVE3jmEwsU"},
{"content":{"body":" * i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still debate it","m.new_content":{"body":"i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still debate it","msgtype":"m.text","org.matrix.msc1767.text":"i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still debate it"},"m.relates_to":{"event_id":"$SGF3LgbLIvtZ2P5cq5G1675twFU9kUopHsVE3jmEwsU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i hope we just go with whatever the design principles say, sucks to have that kind of thing around and still debate it"},"ts":1648521009840,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$7BRxbJRzz0nhrwgBT1gqVx1cNBMsKzKXBMQSxpHGkFs"},
{"content":{"body":"I honestly think I may have just chosen the name based on what I thought made sense at the time, I didn’t have the context of the naming standards in the language","msgtype":"m.text"},"ts":1648521040461,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$5__mX2UMAsMw-FIOELYeE2dRu_Rrk3UjLZRiu2Zo9n4"},
{"content":{"body":"And the only reason we didn’t update was because, as others pointed out, these are keywords","msgtype":"m.text"},"ts":1648521057447,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$gvkqMAnRlZRHo0XX0_GoUoaKv6Udaf1VNOqaqyAH8t4"},
{"content":{"body":"we do not always consider ourselves bound by the web platform's design principles, for better or worse. there are some rare cases where I think it makes sense to deviate (mainly where the language is doing something language-y), but this I think is not one of them.","msgtype":"m.text","org.matrix.msc1767.text":"we do not always consider ourselves bound by the web platform's design principles, for better or worse. there are some rare cases where I think it makes sense to deviate (mainly where the language is doing something language-y), but this I think is not one of them."},"ts":1648521064797,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZlETq6JjmiPM7CAnYU4z40h0Eq4vtgWa9vHuIsP6HKo"},
{"content":{"body":"I suppose it's not a disaster if we have to wait 'till next meeting for that change; it's not like anyone's going to ship a feature of this size unflagged before then, and it's a small change in implementations","msgtype":"m.text","org.matrix.msc1767.text":"I suppose it's not a disaster if we have to wait 'till next meeting for that change; it's not like anyone's going to ship a feature of this size unflagged before then, and it's a small change in implementations"},"ts":1648521139365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YvQvYBh4ocRacIFdnhewq2RoEjdg1uzgKrYpu_CnpoM"},
{"content":{"body":"still, would be real nice to address now","msgtype":"m.text","org.matrix.msc1767.text":"still, would be real nice to address now"},"ts":1648521144282,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZiQRVRbV7ZsSj6Og4Z9EaMDLFPzkCrR0CoH74eboo7k"},
{"content":{"body":"Yeah, sounds fine to me. If we can work it in let’s do it. I’m not available for the first part of tomorrow, but if you end up finding time to address then my position is “whatever the committee thinks is best”","msgtype":"m.text"},"ts":1648521169204,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$YF5gFjFaGaKmS_ifyP6rmtrYRaQP9hm3AnHUI0jWrpM"},
{"content":{"body":"√","msgtype":"m.text","org.matrix.msc1767.text":"√"},"ts":1648521176423,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Revydszh-rguKqoK_k59fOgiz-RnFVUSwKuGkbGepqw"},
{"content":{"body":"And any other time I can hop on, though I may be in and out due to meetings","msgtype":"m.text"},"ts":1648521200795,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$D1uwkx1f2Rvh2HmwTO7TNQRJ79I7vkDWQV_MGhSnW0o"},
{"content":{"body":"Ah, at one point it was `placement: \"static\"`","format":"org.matrix.custom.html","formatted_body":"Ah, at one point it was <code>placement: &quot;static&quot;</code>","msgtype":"m.text"},"ts":1648521291650,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UYbdHmNQrWybnQt36DcnPiGsJGJQK5q6d0xqppPMUzs"},
{"content":{"body":"you may have been thinking of https://github.com/tc39/proposal-decorators/issues/421, also","msgtype":"m.text","org.matrix.msc1767.text":"you may have been thinking of https://github.com/tc39/proposal-decorators/issues/421, also"},"ts":1648521320724,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1fy6v7jqP9SP5uwHgc-Y3TmWdBAl7d3qQV3sNJhpGlY"},
{"content":{"body":"`placement: 'private-static'`","format":"org.matrix.custom.html","formatted_body":"<code>placement: 'private-static'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`placement: 'private-static'`","mimetype":"text/plain"},{"body":"<code>placement: 'private-static'</code>","mimetype":"text/html"}]},"ts":1648521325232,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$qeGB87xrYLPL7nf844W6YjYR06PdoAoB3kKzA0gEY4Y"},
{"content":{"body":"or maybe `static-private` 😉","format":"org.matrix.custom.html","formatted_body":"or maybe <code>static-private</code> 😉","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"or maybe `static-private` 😉","mimetype":"text/plain"},{"body":"or maybe <code>static-private</code> 😉","mimetype":"text/html"}]},"ts":1648521339067,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$seD-UDBdGDOdRA0CDNBYIM34h_d2Z9aOREHV275vLUw"},
{"content":{"body":"Please no, I don't want to have to parse strings","msgtype":"m.text"},"ts":1648521342419,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LetKYAXCHbyKiVwmXAx_k3LxHiovzYJ31w-mFgCxGgs"},
{"content":{"body":"implementation defined order","msgtype":"m.text","org.matrix.msc1767.text":"implementation defined order"},"ts":1648521357691,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XPe6ji1cm7WO15IIQh4pQkL5diw61AZRsgNeTMhp2l8"},
{"content":{"body":"Because that list could grow ","msgtype":"m.text"},"ts":1648521375920,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qFzjaoNkRjYSx-p4jcbDr-C2HY7UpF0Ezi5o-Zq9JgM"},
{"content":{"body":"`placement: 'the abyss'`","format":"org.matrix.custom.html","formatted_body":"<code>placement: 'the abyss'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`placement: 'the abyss'`","mimetype":"text/plain"},{"body":"<code>placement: 'the abyss'</code>","mimetype":"text/html"}]},"ts":1648521395209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kaGP5dtoz3d0sKkHTTfrBOhlr2KjbsAnuweYyccUqds"},
{"content":{"body":"`placement: 'binary blob of a png of the source code with a red square around the declaration'`","format":"org.matrix.custom.html","formatted_body":"<code>placement: 'binary blob of a png of the source code with a red square around the declaration'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`placement: 'binary blob of a png of the source code with a red square around the declaration'`","mimetype":"text/plain"},{"body":"<code>placement: 'binary blob of a png of the source code with a red square around the declaration'</code>","mimetype":"text/html"}]},"ts":1648521432431,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$whfKv-m4h9qAgQApgiZzPewvdlaAaTpPgLgh1L8GdU0"},
{"content":{"body":"At least 6 years ago it was `static: true`, according to a gist I wrote to investigate type definitions for the decorator context object","format":"org.matrix.custom.html","formatted_body":"At least 6 years ago it was <code>static: true</code>, according to a gist I wrote to investigate type definitions for the decorator context object","msgtype":"m.text"},"ts":1648521446811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7I4gsoM2utBeiCqNce3JeHRwE-XlQBXa3jktpASVumQ"},
{"content":{"body":"did es4 have decorators","msgtype":"m.text","org.matrix.msc1767.text":"did es4 have decorators"},"ts":1648521464556,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BLrQgGO7iGvSHMkkEYTiw59npFjrQOmzK4DzQVXX_04"},
{"content":{"body":"Dated June 15, 2016","msgtype":"m.text"},"ts":1648521468183,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CdtSyvi5HnisRSwDYao0yFbjVYNT-tevn4pUSW8ZPCY"},
{"content":{"body":"Not that I recall","msgtype":"m.text"},"ts":1648521477415,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TzzK9peMgLOIhGJCcCC2-hiVkkMzY5LVsGKSdp3V-pQ"},
{"content":{"body":"My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also modify the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also modify the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","msgtype":"m.text"},"ts":1648524714210,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Nh77XAh_ZdcbrNPN0uA0fMwe2O0U5JDqZEdOJhe1oJE"},
{"content":{"body":"* My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also ~modify~ access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also ~modify~ access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","m.new_content":{"body":"My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also ~modify~ access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also ~modify~ access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nh77XAh_ZdcbrNPN0uA0fMwe2O0U5JDqZEdOJhe1oJE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648524949788,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$EgJ0GEw9lF0vlYKunW1mhLwlnALNHB96TZQA5E4bxr0"},
{"content":{"body":"* My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also <del>modify</del> access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also <!-- raw HTML omitted -->modify<!-- raw HTML omitted --> access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","m.new_content":{"body":"My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also <del>modify</del> access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also <!-- raw HTML omitted -->modify<!-- raw HTML omitted --> access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nh77XAh_ZdcbrNPN0uA0fMwe2O0U5JDqZEdOJhe1oJE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648524982019,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hPwyzqL2NDIavtYyfJ0_xZdy7VCI1x_TG7dY8n_UwfU"},
{"content":{"body":"* My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","m.new_content":{"body":"My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also access the class? So there was a small, but local, opt-in cost to the extra complexity.\n\n```\nclass C {\n  init @inject(Service)\n  #f\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My memory might be off, but at some point wasn’t there additional syntax for field decorators that wanted to also access the class? So there was a small, but local, opt-in cost to the extra complexity.</p>\n<pre><code>class C {\n  init @inject(Service)\n  #f\n}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nh77XAh_ZdcbrNPN0uA0fMwe2O0U5JDqZEdOJhe1oJE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648525006739,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$31RKXKzBn-ZRF7rqqtsBzanxciYXqjsyWDTc5mJh2AE"},
{"content":{"body":"I was miss remembering `@init` for methods to add logic to the instance.","format":"org.matrix.custom.html","formatted_body":"I was miss remembering <code>@init</code> for methods to add logic to the instance.","msgtype":"m.text"},"ts":1648525628662,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6Tl8z2VZBHttfwKxybJ9tYROi-PxLu9mhkLuuYhc-_s"},
{"content":{"body":"ok, the spec text and README for the proposal have been updated","msgtype":"m.text","org.matrix.msc1767.text":"ok, the spec text and README for the proposal have been updated"},"ts":1648557773493,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$eAAA1Yvg4t48309drivaC9XmubTqbU_dKmvribGJjVo"},
{"content":{"body":"so it should be ready for stage 3 with the agreed upon changes :D","msgtype":"m.text","org.matrix.msc1767.text":"so it should be ready for stage 3 with the agreed upon changes :D"},"ts":1648557800284,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$zNhI4y59KW5PKbq1C0BsmcwGji7ReOwfmyPu9pBVY6c"},
{"content":{"body":"Daniel Ehrenberg 👋","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">Daniel Ehrenberg</a> 👋","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Daniel Ehrenberg 👋","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">Daniel Ehrenberg</a> 👋","mimetype":"text/html"}]},"ts":1648559839436,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$EYIkQrk_5vKNXLcPFilMCIBRMdaayKGO9gwxhkT_6RM"},
{"content":{"body":"Rob Palmer and Keepers of the Schedule: https://github.com/tc39/agendas/pull/1153","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and Keepers of the Schedule: https://github.com/tc39/agendas/pull/1153","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer and Keepers of the Schedule: https://github.com/tc39/agendas/pull/1153","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and Keepers of the Schedule: https://github.com/tc39/agendas/pull/1153","mimetype":"text/html"}]},"ts":1648560757701,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$adQG2jBEXlucbRGwuoltqzz4YK-VngR3RNtAGYWJvqQ"},
{"content":{"body":"Rob Palmer: ^ see above for https://github.com/tc39/proposal-decorators/issues/417, is there a 5-15minute timeslot somewhere?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: ^ see above for https://github.com/tc39/proposal-decorators/issues/417, is there a 5-15minute timeslot somewhere?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: ^ see above for https://github.com/tc39/proposal-decorators/issues/417, is there a 5-15minute timeslot somewhere?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: ^ see above for https://github.com/tc39/proposal-decorators/issues/417, is there a 5-15minute timeslot somewhere?","mimetype":"text/html"}]},"ts":1648562375508,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E1D7-DmFnHAmNmMWQDkt2zaiCkuvKp7BkYltUdTC82k"},
{"content":{"body":"bot's up","msgtype":"m.text","org.matrix.msc1767.text":"bot's up"},"ts":1648562449776,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jv2bsgz4ydsks5ht2YAWyl5StgLpgBSz9sdWhdhM54w"},
{"content":{"body":"show time","msgtype":"m.text","org.matrix.msc1767.text":"show time"},"ts":1648562461608,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gmj2IukI4GCdUnd2FsZ78m1ul1MCe-7bMFtNHg4Pf6Q"},
{"content":{"body":"this proposal is less about memoisation and more about making procedures idempotent","msgtype":"m.text","org.matrix.msc1767.text":"this proposal is less about memoisation and more about making procedures idempotent"},"ts":1648563234182,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NOJfpNAumfrobF_mX2ua4Ggv2fr_BE_A8e9I0vqoXcg"},
{"content":{"body":"the memoisation-y parts are just because we have to do *something* about a return value","format":"org.matrix.custom.html","formatted_body":"the memoisation-y parts are just because we have to do <em>something</em> about a return value","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the memoisation-y parts are just because we have to do *something* about a return value","mimetype":"text/plain"},{"body":"the memoisation-y parts are just because we have to do <em>something</em> about a return value","mimetype":"text/html"}]},"ts":1648563259071,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$g68KwvgP7u6XhP8T2OaqXcfCTJ8Xp_xzNiEr29s5z3I"},
{"content":{"body":"I fail to see what the utility of returning undefined is. What would that actually be useful for?","msgtype":"m.text","org.matrix.msc1767.text":"I fail to see what the utility of returning undefined is. What would that actually be useful for?"},"ts":1648563463075,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$H4YlJXJDay3YqrY8WNoEeMkSISlmjMzXH65hPmOFXB0"},
{"content":{"body":"callbacks","msgtype":"m.text","org.matrix.msc1767.text":"callbacks"},"ts":1648563479709,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$19ydD6ZULm2oTZkuyLAlaF3__klezfkFlro0yCTfxP4"},
{"content":{"body":"we don't expect return values from callbacks like eventemitter/eventlisteners","msgtype":"m.text","org.matrix.msc1767.text":"we don't expect return values from callbacks like eventemitter/eventlisteners"},"ts":1648563501310,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$QiWtI66Y21l7iLPD-X7zsmKT8WZzzct9Ol9GeOAcNms"},
{"content":{"body":"virtually every use case i have for \"once\" is either as an async callback, where the return value doesn't matter, or where i'm trying to sync log a warning (like node does, for deprecation warnings) and i don't use the return value.","msgtype":"m.text","org.matrix.msc1767.text":"virtually every use case i have for \"once\" is either as an async callback, where the return value doesn't matter, or where i'm trying to sync log a warning (like node does, for deprecation warnings) and i don't use the return value."},"ts":1648563562674,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VCTM9jLvSFNfySVB156X-R0HI5V3VPatda5cHbu-6Qw"},
{"content":{"body":"this capability doesn't seem to be common in other languages; I see https://doc.rust-lang.org/std/ops/trait.FnOnce.html in Rust but can't find an analog in Python, Ruby, or Go","msgtype":"m.text","org.matrix.msc1767.text":"this capability doesn't seem to be common in other languages; I see https://doc.rust-lang.org/std/ops/trait.FnOnce.html in Rust but can't find an analog in Python, Ruby, or Go"},"ts":1648563576144,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$e84qNjrsa0JLOVd_C9Qv9_8PJO1fs50M00ud5OeNdv4"},
{"content":{"body":"(iow node's own `emitWarning` thing would likely use this)","format":"org.matrix.custom.html","formatted_body":"(iow node's own <code>emitWarning</code> thing would likely use this)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(iow node's own `emitWarning` thing would likely use this)","mimetype":"text/plain"},{"body":"(iow node's own <code>emitWarning</code> thing would likely use this)","mimetype":"text/html"}]},"ts":1648563576519,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ME3yAO1XdliUTEplfpa8M2vWWSzh4lVY_JWmZrSzfa4"},
{"content":{"body":"We've used the return value constantly","msgtype":"m.text","org.matrix.msc1767.text":"We've used the return value constantly"},"ts":1648563599549,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UQpG5zWaVgy7EJGWyPriLRprelm9DcKxq4baE0rvTtA"},
{"content":{"body":"Eg, to guard creation of an expensive object","msgtype":"m.text","org.matrix.msc1767.text":"Eg, to guard creation of an expensive object"},"ts":1648563609273,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6WF3F3sPvZJhzqhH65XR0Lm74yeTOOaBioIV-a5EUoY"},
{"content":{"body":"that's a good example","msgtype":"m.text","org.matrix.msc1767.text":"that's a good example"},"ts":1648563627967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M20z0B4x9JKkiy307Rj3caH8jg4ggKdQsJpITkczyVc"},
{"content":{"body":"hm, that is a good example","msgtype":"m.text","org.matrix.msc1767.text":"hm, that is a good example"},"ts":1648563645310,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YkIeIthfJmUBixxUHPO2cPFuLRycWJh38YpyB1tq-8g"},
{"content":{"body":"but that seems like a \"memoize\" helper not a \"once\" helper","msgtype":"m.text","org.matrix.msc1767.text":"but that seems like a \"memoize\" helper not a \"once\" helper"},"ts":1648563650939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cWmFOSEq4czl35IG60DCIKvPQo4WZ0xITbu0w5L-hzI"},
{"content":{"body":"since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about","msgtype":"m.text","org.matrix.msc1767.text":"since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about"},"ts":1648563653154,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6uLcb4erddl4M3EeKsTYyw2Rj97dHJSuLA76s76nnL4"},
{"content":{"body":"Justin Ridgewell: that's just a special case of a memoisation function with no arguments","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: that's just a special case of a memoisation function with no arguments","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: that's just a special case of a memoisation function with no arguments","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: that's just a special case of a memoisation function with no arguments","mimetype":"text/html"}]},"ts":1648563658903,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qW0amC1ApF8_HUmqCqAZonIFzQNqTa9GRqo4xeN3Q_o"},
{"content":{"body":"i think it'd be far better to solve those problems separately","msgtype":"m.text","org.matrix.msc1767.text":"i think it'd be far better to solve those problems separately"},"ts":1648563663072,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hVtQwJwN_-8FIZdDAQBDr3iAvYSCihkpdJ-rbOm5joc"},
{"content":{"body":" * since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about","m.new_content":{"body":"since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about","msgtype":"m.text","org.matrix.msc1767.text":"since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about"},"m.relates_to":{"event_id":"$6uLcb4erddl4M3EeKsTYyw2Rj97dHJSuLA76s76nnL4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * since you'd want it to vary based on input, esp to avoid the confusion waldemar talked about"},"ts":1648563683742,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FyUxUR-YWcCb5j6akupBdkYoz_4j29ehkvAEZfqEAWU"},
{"content":{"body":"Yes, but once is a mini memoization function as used in the ecosystem","msgtype":"m.text","org.matrix.msc1767.text":"Yes, but once is a mini memoization function as used in the ecosystem"},"ts":1648563685403,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vtgPQkw4zpTLWUtni2KG5GPWIdM7HLl68SIuWTB61Hs"},
{"content":{"body":"and in general probably wouldn't want a \"once\" helper to encapsulate a strong reference","msgtype":"m.text","org.matrix.msc1767.text":"and in general probably wouldn't want a \"once\" helper to encapsulate a strong reference"},"ts":1648563686314,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$t6HJSCS_5krLeRMVHjNhIjd4HwdO82DIBOICsSYoYD0"},
{"content":{"body":"then I guess I'm leaning toward caching the return value but ignoring passed arguments","msgtype":"m.text","org.matrix.msc1767.text":"then I guess I'm leaning toward caching the return value but ignoring passed arguments"},"ts":1648563738288,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nVA20CrbOUnWQ9DkaBL9eTGmh_K82exuZ0W-F4wNSlo"},
{"content":{"body":"not in JS, but I've used \"once\" functions many times in C and C++ to initialize a static variable, which is morally equivalent to wanting a return value out of it","msgtype":"m.text"},"ts":1648563761208,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$3rcg1OSUJNEHT9HRE18dlEum9XTw-ESytjdI8JlXmP4"},
{"content":{"body":"the oddity waldemar brought up is compelling to me","msgtype":"m.text","org.matrix.msc1767.text":"the oddity waldemar brought up is compelling to me"},"ts":1648563764973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sh9xnACN4--aAhwB1xCgQjmT8CQEdKTe8frehqRcQ-Q"},
{"content":{"body":"> <@michaelficarra:matrix.org> then I guess I'm leaning toward caching the return value but ignoring passed arguments\n\nthat seems like a footgun","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nVA20CrbOUnWQ9DkaBL9eTGmh_K82exuZ0W-F4wNSlo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>then I guess I&#39;m leaning toward caching the return value but ignoring passed arguments</blockquote></mx-reply>that seems like a footgun","m.relates_to":{"m.in_reply_to":{"event_id":"$nVA20CrbOUnWQ9DkaBL9eTGmh_K82exuZ0W-F4wNSlo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> then I guess I'm leaning toward caching the return value but ignoring passed arguments\n\nthat seems like a footgun","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nVA20CrbOUnWQ9DkaBL9eTGmh_K82exuZ0W-F4wNSlo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>then I guess I&#39;m leaning toward caching the return value but ignoring passed arguments</blockquote></mx-reply>that seems like a footgun","mimetype":"text/html"}]},"ts":1648563766979,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$c_x4uqWbALGWT0YZ7JYAN8IU0kEsMq11lEi-r2VLuGk"},
{"content":{"body":"ljharb: a little bit, yeah","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: a little bit, yeah","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: a little bit, yeah","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: a little bit, yeah","mimetype":"text/html"}]},"ts":1648563778969,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GB666-vDvLaFTzYsUDAsRFPPrdWnwQ9Q6qISOHiTSdk"},
{"content":{"body":"throwing if you pass it arguments, maybe","msgtype":"m.text","org.matrix.msc1767.text":"throwing if you pass it arguments, maybe"},"ts":1648563780283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lli0Y0RbBVW9iD6J1LNOgbFXYFZmaa626ZHPnf5NYdw"},
{"content":{"body":"oh unless you mean, never passing anything through the once function to the wrapped one?","msgtype":"m.text","org.matrix.msc1767.text":"oh unless you mean, never passing anything through the once function to the wrapped one?"},"ts":1648563786020,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JNhnp3F4INEK8nBJsG7HhxQ7lUonyJDGiQN1H0fjxyY"},
{"content":{"body":"I don't understand why we would break with precedent","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand why we would break with precedent"},"ts":1648563807000,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Sn47sKW5yXYeg1geTRivb3-TkQ8i8u1MG14aP5WTi-w"},
{"content":{"body":"*that* seems totally fine to me, it's like `() => (called ? () => {} : original)()`","format":"org.matrix.custom.html","formatted_body":"<em>that</em> seems totally fine to me, it's like <code>() =&gt; (called ? () =&gt; {} : original)()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"*that* seems totally fine to me, it's like `() => (called ? () => {} : original)()`","mimetype":"text/plain"},{"body":"<em>that</em> seems totally fine to me, it's like <code>() =&gt; (called ? () =&gt; {} : original)()</code>","mimetype":"text/html"}]},"ts":1648563813614,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$prIALZAADB_Ji8o5em36W3546zqQTJ4cn1AynvJhUgA"},
{"content":{"body":"bakkot: the reason I didn't say throwing is because you might pass it to a function you don't control which will call with arguments you don't want","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the reason I didn't say throwing is because you might pass it to a function you don't control which will call with arguments you don't want","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: the reason I didn't say throwing is because you might pass it to a function you don't control which will call with arguments you don't want","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the reason I didn't say throwing is because you might pass it to a function you don't control which will call with arguments you don't want","mimetype":"text/html"}]},"ts":1648563814874,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E73X59zvtO2c5uNlbzMx7dsHVvbW-LN7GgZ-0AXE09s"},
{"content":{"body":"Michael Ficarra: in that scenario it would also break if you passed the raw (pre-once'd) version, no?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: in that scenario it would also break if you passed the raw (pre-once'd) version, no?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: in that scenario it would also break if you passed the raw (pre-once'd) version, no?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: in that scenario it would also break if you passed the raw (pre-once'd) version, no?","mimetype":"text/html"}]},"ts":1648563842144,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yHgZnRSPCz4HGyIAQo4pDARftBAHX4sTjecGM-YgeG4"},
{"content":{"body":"> <@jridgewell:matrix.org> I don't understand why we would break with precedent\n\ni would be very shocked if it was widely known that `once` caches its return value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Sn47sKW5yXYeg1geTRivb3-TkQ8i8u1MG14aP5WTi-w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don&#39;t understand why we would break with precedent</blockquote></mx-reply>i would be very shocked if it was widely known that <code>once</code> caches its return value","m.relates_to":{"m.in_reply_to":{"event_id":"$Sn47sKW5yXYeg1geTRivb3-TkQ8i8u1MG14aP5WTi-w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> I don't understand why we would break with precedent\n\ni would be very shocked if it was widely known that `once` caches its return value","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Sn47sKW5yXYeg1geTRivb3-TkQ8i8u1MG14aP5WTi-w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don&#39;t understand why we would break with precedent</blockquote></mx-reply>i would be very shocked if it was widely known that <code>once</code> caches its return value","mimetype":"text/html"}]},"ts":1648563852336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PICBK3Eko72hzIHSVUeA4n2ekUUrtKae4hvcsVEBukU"},
{"content":{"body":"how?","msgtype":"m.text","org.matrix.msc1767.text":"how?"},"ts":1648563854222,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NtyFuE1oHkl9debn4a91jcy2RP2yI1A04vKk8-07xSY"},
{"content":{"body":"> which will call with arguments you don't want","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>which will call with arguments you don't want</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> which will call with arguments you don't want","mimetype":"text/plain"},{"body":"<blockquote>\n<p>which will call with arguments you don't want</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1648563865516,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P34VaCZTz8G3gMmvmBAQ9WrogM1RD20k7IS0UsYO_Is"},
{"content":{"body":"oh, you just mean, your function ignores its arguments","msgtype":"m.text","org.matrix.msc1767.text":"oh, you just mean, your function ignores its arguments"},"ts":1648563874149,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aWC_oY8M79d-xxpABcec7GbZFW_nePfimmKxX9N7Uo4"},
{"content":{"body":"ok, yeah","msgtype":"m.text","org.matrix.msc1767.text":"ok, yeah"},"ts":1648563875661,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1badaFbJY13gAaalvkEUKf8HOQnAmM4MbBkcLyY8Am0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1648563877469,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lj7wzuAmzKP58StUu8go3x3XGrkmR4O-eYorJIaRmLk"},
{"content":{"body":"> Repeat calls to the function return the value of the first invocation. — https://lodash.com/docs/4.17.15#once","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Repeat calls to the function return the value of the first invocation. — https://lodash.com/docs/4.17.15#once</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> Repeat calls to the function return the value of the first invocation. — https://lodash.com/docs/4.17.15#once","mimetype":"text/plain"},{"body":"<blockquote>\n<p>Repeat calls to the function return the value of the first invocation. — https://lodash.com/docs/4.17.15#once</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1648563942004,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_76KfuiXV4ZeJyM0DlA7yHfENm7-_LPrSB6ASPhZtrQ"},
{"content":{"body":"i hope you're not implying that people actually read documentation :-p","msgtype":"m.text","org.matrix.msc1767.text":"i hope you're not implying that people actually read documentation :-p"},"ts":1648563975690,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0bJavkKdqY_g7KJpazqP0bSiI2SsL0twi0OWS1h8O6g"},
{"content":{"body":"i looked; the example code in both underscore and lodash only uses it for side effects, and that's what i bet people will notice","msgtype":"m.text","org.matrix.msc1767.text":"i looked; the example code in both underscore and lodash only uses it for side effects, and that's what i bet people will notice"},"ts":1648563994077,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fRU9zgq4Mtuw0EsPcWFNClKBBbX5VSS74bpm96R-jLI"},
{"content":{"body":"We use something like `once` for lazy-init in the TS code base quite often. In my own projects I just call it `lazy` (and it errors on circular init) ","format":"org.matrix.custom.html","formatted_body":"We use something like <code>once</code> for lazy-init in the TS code base quite often. In my own projects I just call it <code>lazy</code> (and it errors on circular init)","msgtype":"m.text"},"ts":1648564458140,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j9UJRUzvY-VQqLvsv-0uMGkJ9cFufXFbJ1EtJOwudIA"},
{"content":{"body":"i'm already sold on the use cases for `memo` + `once`. what i'm not on board with is conflating the two in a way which i think would be surprising to those not already aware of that behavior in the ecosystem.","format":"org.matrix.custom.html","formatted_body":"i'm already sold on the use cases for <code>memo</code> + <code>once</code>. what i'm not on board with is conflating the two in a way which i think would be surprising to those not already aware of that behavior in the ecosystem.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i'm already sold on the use cases for `memo` + `once`. what i'm not on board with is conflating the two in a way which i think would be surprising to those not already aware of that behavior in the ecosystem.","mimetype":"text/plain"},{"body":"i'm already sold on the use cases for <code>memo</code> + <code>once</code>. what i'm not on board with is conflating the two in a way which i think would be surprising to those not already aware of that behavior in the ecosystem.","mimetype":"text/html"}]},"ts":1648564571532,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$75aw_QmTpdWVo0ZcyR23Mo5eBM5jx6nUWOqz81aPvbM"},
{"content":{"body":"For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","format":"org.matrix.custom.html","formatted_body":"For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","mimetype":"text/plain"},{"body":"For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","mimetype":"text/html"}]},"ts":1648564686763,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LmXIyHkWPMltXqCCPv6tdv-WEqR8giadGt9icpTIj3A"},
{"content":{"body":" * For what it’s worth, I am willing and plan to champion a `memoize` (`memo`?) helper function, based on the support for it I saw today.","format":"org.matrix.custom.html","formatted_body":" * For what it’s worth, I am willing and plan to champion a <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","m.new_content":{"body":"For what it’s worth, I am willing and plan to champion a `memoize` (`memo`?) helper function, based on the support for it I saw today.","format":"org.matrix.custom.html","formatted_body":"For what it’s worth, I am willing and plan to champion a <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what it’s worth, I am willing and plan to champion a `memoize` (`memo`?) helper function, based on the support for it I saw today.","mimetype":"text/plain"},{"body":"For what it’s worth, I am willing and plan to champion a <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LmXIyHkWPMltXqCCPv6tdv-WEqR8giadGt9icpTIj3A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For what it’s worth, I am willing and plan to champion a `memoize` (`memo`?) helper function, based on the support for it I saw today.","mimetype":"text/plain"},{"body":" * For what it’s worth, I am willing and plan to champion a <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","mimetype":"text/html"}]},"ts":1648564696816,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GRKwC2MJZ9tzRSvttjEBAJF7Y-g6Tz7yCb805zwYQ24"},
{"content":{"body":" * For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","format":"org.matrix.custom.html","formatted_body":" * For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","m.new_content":{"body":"For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","format":"org.matrix.custom.html","formatted_body":"For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","mimetype":"text/plain"},{"body":"For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LmXIyHkWPMltXqCCPv6tdv-WEqR8giadGt9icpTIj3A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For what it’s worth, I am willing and plan to champion a configurable `memoize` (`memo`?) helper function, based on the support for it I saw today.","mimetype":"text/plain"},{"body":" * For what it’s worth, I am willing and plan to champion a configurable <code>memoize</code> (<code>memo</code>?) helper function, based on the support for it I saw today.","mimetype":"text/html"}]},"ts":1648564707831,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$JeUT-aRMqgq82KnU256LMpECSf8Bf39iDK0AjvnnDmA"},
{"content":{"body":"good luck","msgtype":"m.text","org.matrix.msc1767.text":"good luck"},"ts":1648564740565,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HYzFxxjwsP0IoSFZtA5agpXlTtjwQOi6Z7UcWwyMcQE"},
{"content":{"body":"lotta weird corners in that design space","msgtype":"m.text","org.matrix.msc1767.text":"lotta weird corners in that design space"},"ts":1648564751967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3RLdZCLA9ZlM-Ih9p_UXeFDlKXNQNi6tKOzcptADnIg"},
{"content":{"body":"We’ll just min–max a MVP design. Nothing can go wrong…","msgtype":"m.text","org.matrix.msc1767.text":"We’ll just min–max a MVP design. Nothing can go wrong…"},"ts":1648564782152,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XmKRXwU8ho37vVKD2Vt3DYncF90b2O_ocAs3TlAtXd8"},
{"content":{"body":"yeah, you might want to do some research on the designs of that function in underscore/lodash first","msgtype":"m.text","org.matrix.msc1767.text":"yeah, you might want to do some research on the designs of that function in underscore/lodash first"},"ts":1648564784027,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$818x2vJWHFPEdINoC2wXPAR-FLxPI-pnZc64S6u7JJ4"},
{"content":{"body":"The problem with n-argument `memo` is that it has to hold the arguments for repeated calls. 0-arg `memo` is easier, but then it isn't really a memorize function ","format":"org.matrix.custom.html","formatted_body":"The problem with n-argument <code>memo</code> is that it has to hold the arguments for repeated calls. 0-arg <code>memo</code> is easier, but then it isn't really a memorize function","msgtype":"m.text"},"ts":1648564793006,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kCgvzEwsIFTngFqt0G-G2q87T7cGsC4bhHtQOPXH2UQ"},
{"content":{"body":"those are some of the longest threads I've participated in","msgtype":"m.text","org.matrix.msc1767.text":"those are some of the longest threads I've participated in"},"ts":1648564799632,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s"},
{"content":{"body":"> <@michaelficarra:matrix.org> those are some of the longest threads I've participated in\n\nI get the same vibe from this as I do when I look at the talk page of a Wikipedia article and see that it’s dozens of pages long…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>those are some of the longest threads I&#39;ve participated in</blockquote></mx-reply>I get the same vibe from this as I do when I look at the talk page of a Wikipedia article and see that it’s dozens of pages long…","m.relates_to":{"m.in_reply_to":{"event_id":"$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> those are some of the longest threads I've participated in\n\nI get the same vibe from this as I do when I look at the talk page of a Wikipedia article and see that it’s dozens of pages long…","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>those are some of the longest threads I&#39;ve participated in</blockquote></mx-reply>I get the same vibe from this as I do when I look at the talk page of a Wikipedia article and see that it’s dozens of pages long…","mimetype":"text/html"}]},"ts":1648564858588,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$UfrfL0IZBil-aRCK0uLR7BAMDsK7pkJ3BrT6U7wWzHg"},
{"content":{"body":"I am filled with foreboding. ","msgtype":"m.text","org.matrix.msc1767.text":"I am filled with foreboding. "},"ts":1648564873335,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fDc9ogQ-E_BPmn6cZ0-yJXhjNJLaf_B_kmRnKzA--nA"},
{"content":{"body":"> <@rbuckton:matrix.org> The problem with n-argument `memo` is that it has to hold the arguments for repeated calls. 0-arg `memo` is easier, but then it isn't really a memorize function\n\n0-arg `memo` would be a core use case of `memo`, I figure.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kCgvzEwsIFTngFqt0G-G2q87T7cGsC4bhHtQOPXH2UQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The problem with n-argument <code>memo</code> is that it has to hold the arguments for repeated calls. 0-arg <code>memo</code> is easier, but then it isn't really a memorize function</blockquote></mx-reply>0-arg <code>memo</code> would be a core use case of <code>memo</code>, I figure.","m.relates_to":{"m.in_reply_to":{"event_id":"$kCgvzEwsIFTngFqt0G-G2q87T7cGsC4bhHtQOPXH2UQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> The problem with n-argument `memo` is that it has to hold the arguments for repeated calls. 0-arg `memo` is easier, but then it isn't really a memorize function\n\n0-arg `memo` would be a core use case of `memo`, I figure.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kCgvzEwsIFTngFqt0G-G2q87T7cGsC4bhHtQOPXH2UQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The problem with n-argument <code>memo</code> is that it has to hold the arguments for repeated calls. 0-arg <code>memo</code> is easier, but then it isn't really a memorize function</blockquote></mx-reply>0-arg <code>memo</code> would be a core use case of <code>memo</code>, I figure.","mimetype":"text/html"}]},"ts":1648564919750,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38"},
{"content":{"body":"yeah there's an inherent difficulty in anything that tries to make a universal definition of \"equivalence\"","msgtype":"m.text","org.matrix.msc1767.text":"yeah there's an inherent difficulty in anything that tries to make a universal definition of \"equivalence\""},"ts":1648564932433,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O9oQbFvLkgxFvLPwAg7uqnvWOjp-1qgpb2TpfT-KjuQ"},
{"content":{"body":"> <@jschoi:matrix.org> 0-arg `memo` would be a core use case of `memo`, I figure.\n\nBut it would be a misnomer in the FP space. 0-argument `memo` is just `lazy` (for lazy init). ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br />0-arg <code>memo</code> would be a core use case of <code>memo</code>, I figure.</blockquote></mx-reply>But it would be a misnomer in the FP space. 0-argument <code>memo</code> is just <code>lazy</code> (for lazy init).","m.relates_to":{"m.in_reply_to":{"event_id":"$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38"}},"msgtype":"m.text"},"ts":1648565038703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6QIWUHTpDTXUQ1hndaUrAf0Choq8FnpP9EH8A09-39U"},
{"content":{"body":"we already have at least 4 definitions in the spec as-is","msgtype":"m.text","org.matrix.msc1767.text":"we already have at least 4 definitions in the spec as-is"},"ts":1648565041523,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vjMQK52FAyUIXyHl3-ldq_7M3IT5U5W5gHBHkSm2gjc"},
{"content":{"body":"rbuckton: I don't know what this `lazy` function you're talking about is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't know what this <code>lazy</code> function you're talking about is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I don't know what this `lazy` function you're talking about is","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't know what this <code>lazy</code> function you're talking about is","mimetype":"text/html"}]},"ts":1648565104826,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Gx6yrUVzUAR1MjESrJaR1o2In8-gMZJa9WOx22okbNY"},
{"content":{"body":"> <@jschoi:matrix.org> 0-arg `memo` would be a core use case of `memo`, I figure.\n\nThis is the inverse of my experience for using memoization","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>0-arg <code>memo</code> would be a core use case of <code>memo</code>, I figure.</blockquote></mx-reply>This is the inverse of my experience for using memoization","m.relates_to":{"m.in_reply_to":{"event_id":"$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> 0-arg `memo` would be a core use case of `memo`, I figure.\n\nThis is the inverse of my experience for using memoization","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cpBNxZ-Rccrnl1POHP3oiYqA75Bepp2NHSZeoUkcX38?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>0-arg <code>memo</code> would be a core use case of <code>memo</code>, I figure.</blockquote></mx-reply>This is the inverse of my experience for using memoization","mimetype":"text/html"}]},"ts":1648565116022,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$p2waGIrovLBr7V4BYuQYxQ6ijvJh-axQ7Mf859d0_HE"},
{"content":{"body":"😀","msgtype":"m.text","org.matrix.msc1767.text":"😀"},"ts":1648565132631,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$yEyLITcxQ_OrROv2MflY57Kg9s-ZJOUR4Hcw8toICog"},
{"content":{"body":"> <@rbuckton:matrix.org> But it would be a misnomer in the FP space. 0-argument `memo` is just `lazy` (for lazy init).\n\nI guess I’m used to memoization from Clojure, in which there’s just one `memoize` function and you can do `((memoize f))` if you want and it’s idiomatic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6QIWUHTpDTXUQ1hndaUrAf0Choq8FnpP9EH8A09-39U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But it would be a misnomer in the FP space. 0-argument <code>memo</code> is just <code>lazy</code> (for lazy init).</blockquote></mx-reply>I guess I’m used to memoization from Clojure, in which there’s just one <code>memoize</code> function and you can do <code>((memoize f))</code> if you want and it’s idiomatic.","m.relates_to":{"m.in_reply_to":{"event_id":"$6QIWUHTpDTXUQ1hndaUrAf0Choq8FnpP9EH8A09-39U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> But it would be a misnomer in the FP space. 0-argument `memo` is just `lazy` (for lazy init).\n\nI guess I’m used to memoization from Clojure, in which there’s just one `memoize` function and you can do `((memoize f))` if you want and it’s idiomatic.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6QIWUHTpDTXUQ1hndaUrAf0Choq8FnpP9EH8A09-39U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But it would be a misnomer in the FP space. 0-argument <code>memo</code> is just <code>lazy</code> (for lazy init).</blockquote></mx-reply>I guess I’m used to memoization from Clojure, in which there’s just one <code>memoize</code> function and you can do <code>((memoize f))</code> if you want and it’s idiomatic.","mimetype":"text/html"}]},"ts":1648565136207,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ad8Yn6vWARuUw2-eUSEAtvlQWwKczuHqXfwgP2tnHdY"},
{"content":{"body":"By misnomer I mean that `memoize` in the FP space can accept functions that take n arguments, even if it's commonly only used with 0 argument functions. A memoize that only can take 0 argument functions isn't a true memoize. ","format":"org.matrix.custom.html","formatted_body":"By misnomer I mean that <code>memoize</code> in the FP space can accept functions that take n arguments, even if it's commonly only used with 0 argument functions. A memoize that only can take 0 argument functions isn't a true memoize.","msgtype":"m.text"},"ts":1648565290411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wQkCus201B9oW1HxmkSxIt6qZHdicddgA5KzbbX8N04"},
{"content":{"body":"So it could be confusing/frustrating. ","format":"org.matrix.custom.html","formatted_body":"So it could be confusing/frustrating.","msgtype":"m.text"},"ts":1648565317553,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JaCalVNm9RQa3WA3gf2iVbAFYaab_jbRdvNrNhA1U5s"},
{"content":{"body":"I don't think anyone has suggested that a hypothetical `memoise` function would only accept nullary functions","format":"org.matrix.custom.html","formatted_body":"I don't think anyone has suggested that a hypothetical <code>memoise</code> function would only accept nullary functions","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think anyone has suggested that a hypothetical `memoise` function would only accept nullary functions","mimetype":"text/plain"},{"body":"I don't think anyone has suggested that a hypothetical <code>memoise</code> function would only accept nullary functions","mimetype":"text/html"}]},"ts":1648565366504,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CchaSF_TPObi2S-EjmHlh7V_YlU-TrQAMhJ6ICfNFmY"},
{"content":{"body":"Yes, `memoize`’s functions definitely would not take only zero arguments. They could take zero arguments, but they could take many too.","format":"org.matrix.custom.html","formatted_body":"Yes, <code>memoize</code>’s functions definitely would not take only zero arguments. They could take zero arguments, but they could take many too.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, `memoize`’s functions definitely would not take only zero arguments. They could take zero arguments, but they could take many too.","mimetype":"text/plain"},{"body":"Yes, <code>memoize</code>’s functions definitely would not take only zero arguments. They could take zero arguments, but they could take many too.","mimetype":"text/html"}]},"ts":1648565377954,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9FSQxMSLKZ6KMG_MSAcTWEtHrLzlPN63n2Ag1-T8aBc"},
{"content":{"body":"It falls out of what memoize is. Zero arguments is just a special case.","msgtype":"m.text","org.matrix.msc1767.text":"It falls out of what memoize is. Zero arguments is just a special case."},"ts":1648565389019,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SrESvJ2mta21ekyhwkKxJWLYmbjOPF6fbHiHTuP0VN8"},
{"content":{"body":" * It falls out of what memoize is. Zero arguments is just a special case.","m.new_content":{"body":"It falls out of what memoize is. Zero arguments is just a special case.","msgtype":"m.text","org.matrix.msc1767.text":"It falls out of what memoize is. Zero arguments is just a special case."},"m.relates_to":{"event_id":"$SrESvJ2mta21ekyhwkKxJWLYmbjOPF6fbHiHTuP0VN8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It falls out of what memoize is. Zero arguments is just a special case."},"ts":1648565392734,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$VGW-6mkTycYdQ8an3XL_EtnrbJ8MjRHr2P0eeuwB7YU"},
{"content":{"body":"It's the N-ary version of memoize that gets complicated wrt GC","msgtype":"m.text"},"ts":1648565418846,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S_vEJEpG03vnFmJ3Z8w1tOrt7gz93UbOCj_xsgByx40"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I don't know what this `lazy` function you're talking about is\n\nC#/F# has `Lazy<T>` (and F# has the concept of \"lazy expressions\" which evaluate to `Lazy<T>`) ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Gx6yrUVzUAR1MjESrJaR1o2In8-gMZJa9WOx22okbNY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br /><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't know what this <code>lazy</code> function you're talking about is</blockquote></mx-reply>C#/F# has <code>Lazy&lt;T&gt;</code> (and F# has the concept of &quot;lazy expressions&quot; which evaluate to <code>Lazy&lt;T&gt;</code>)","m.relates_to":{"m.in_reply_to":{"event_id":"$Gx6yrUVzUAR1MjESrJaR1o2In8-gMZJa9WOx22okbNY"}},"msgtype":"m.text"},"ts":1648565492929,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xFjWKbISdbTBK8MJI0cudeeKMlp4bkk-kgYxfuKM58g"},
{"content":{"body":"okay but that does that mean?","msgtype":"m.text","org.matrix.msc1767.text":"okay but that does that mean?"},"ts":1648565512009,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IkkyC_AwkdtTJdxMcZFtcH7HfvfWsFoWCwiBbaSJk_Q"},
{"content":{"body":"It's a result whose value is lazy-initialized when it is requested. ","format":"org.matrix.custom.html","formatted_body":"It's a result whose value is lazy-initialized when it is requested.","msgtype":"m.text"},"ts":1648565535944,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$01Hh8IQzsltxiH_4uTzAPyMiGW3MBFFGVIHnnRG8B1c"},
{"content":{"body":"... that's the same as `T`","format":"org.matrix.custom.html","formatted_body":"... that's the same as <code>T</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"... that's the same as `T`","mimetype":"text/plain"},{"body":"... that's the same as <code>T</code>","mimetype":"text/html"}]},"ts":1648565564413,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oxHzf0ncjPMrf96dfbSdRNxark5_5eeBWQACGHq0bXU"},
{"content":{"body":"Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","format":"org.matrix.custom.html","formatted_body":"Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/plain"},{"body":"Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s"}}},"ts":1648565624302,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-_-0Z7MjiLJF5ellpuh6uYkbQXNdlpnpI_Q5ulnUs-0"},
{"content":{"body":"> <@michaelficarra:matrix.org> those are some of the longest threads I've participated in\n\n * Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>those are some of the longest threads I've participated in</blockquote></mx-reply> * Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","m.new_content":{"body":"Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","format":"org.matrix.custom.html","formatted_body":"Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/plain"},{"body":"Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$-_-0Z7MjiLJF5ellpuh6uYkbQXNdlpnpI_Q5ulnUs-0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> those are some of the longest threads I've participated in\n\n * Incidentally, please direct-message links to any of those threads that you remember! \n(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7-hZT0E3ZFYEsrbTYTC76X34xZfW_1ATVi3uti7bJ8s?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>those are some of the longest threads I've participated in</blockquote></mx-reply> * Incidentally, please direct-message links to any of those threads that you remember!<br>(I’m finding https://github.com/lodash/lodash/issues/2115 and https://github.com/jashkenas/underscore/issues/1862.)","mimetype":"text/html"}]},"ts":1648565698335,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3FaG3JaM_HKjG3rmTSiRS9jqy6iiZuVSwjJRCX3AgPg"},
{"content":{"body":"> <@michaelficarra:matrix.org> ... that's the same as `T`\n\nNo, it's different. A `Lazy<T>` has a \"value\" property that evaluates the expression at most once when first requested. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oxHzf0ncjPMrf96dfbSdRNxark5_5eeBWQACGHq0bXU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br />... that's the same as <code>T</code></blockquote></mx-reply>No, it's different. A <code>Lazy&lt;T&gt;</code> has a &quot;value&quot; property that evaluates the expression at most once when first requested.","m.relates_to":{"m.in_reply_to":{"event_id":"$oxHzf0ncjPMrf96dfbSdRNxark5_5eeBWQACGHq0bXU"}},"msgtype":"m.text"},"ts":1648565707764,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p_lBbXPcrRgg3qyZF9qA3UY71BL3PcxwoVJVmRsCZNM"},
{"content":{"body":"rbuckton: I guess I'm used to lazy-by-default and forcing strictness where necessary, instead of the other way around","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I guess I'm used to lazy-by-default and forcing strictness where necessary, instead of the other way around","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I guess I'm used to lazy-by-default and forcing strictness where necessary, instead of the other way around","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I guess I'm used to lazy-by-default and forcing strictness where necessary, instead of the other way around","mimetype":"text/html"}]},"ts":1648565797112,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GeqNLZX-VbOLp4BWakjp7FFmuoy2KqSQNDlCsezXMtA"},
{"content":{"body":"I'm not sure what you mean by \"lazy by default\" in this case. ","format":"org.matrix.custom.html","formatted_body":"I'm not sure what you mean by &quot;lazy by default&quot; in this case.","msgtype":"m.text"},"ts":1648565977004,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DQXxDakKE35CNo9UAtzgo0UeTrVlshduhzGXGldewZ0"},
{"content":{"body":"rbuckton: imagine every `T` is instead a `Lazy<T>`, implicitly, everywhere","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: imagine every <code>T</code> is instead a <code>Lazy&lt;T&gt;</code>, implicitly, everywhere","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: imagine every `T` is instead a `Lazy<T>`, implicitly, everywhere","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: imagine every <code>T</code> is instead a <code>Lazy&lt;T&gt;</code>, implicitly, everywhere","mimetype":"text/html"}]},"ts":1648566298272,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$D-DkDI-msAAoovoP2CJHTh6jDlwDFIEoDbgoEbPumf4"},
{"content":{"body":"I'm not sure we're talking about the same things. ","format":"org.matrix.custom.html","formatted_body":"I'm not sure we're talking about the same things.","msgtype":"m.text"},"ts":1648566370618,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F7QbRpr0Sv-_jSuz7trLUyzSTPKGg-qwAE7pWM5Z-gc"},
{"content":{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","mimetype":"text/html"}]},"ts":1648566471210,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$hCpt1MaLkKWkH69bpnb-oz_RKyblTZpWYsujVADUcXM"},
{"content":{"body":" * rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","m.new_content":{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$hCpt1MaLkKWkH69bpnb-oz_RKyblTZpWYsujVADUcXM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF()); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","mimetype":"text/html"}]},"ts":1648566479534,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$nGagExKwGmLqKPuU4KuC9_2O41sd-77r2hZMNrubDqQ"},
{"content":{"body":" * rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","m.new_content":{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$hCpt1MaLkKWkH69bpnb-oz_RKyblTZpWYsujVADUcXM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * rbuckton: Just to confirm, `const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();` works for the lazy use case, doesn’t it?","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Just to confirm, <code>const lazyF = Function.memoize(expensiveF); lazyF(); lazyF();</code> works for the lazy use case, doesn’t it?","mimetype":"text/html"}]},"ts":1648566485141,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ECLqHg_mt8ovTJ2BlDlFW67uiGEbKk_grl3mw5ZroK8"},
{"content":{"body":"Yeah, it works just fine. ","format":"org.matrix.custom.html","formatted_body":"Yeah, it works just fine.","msgtype":"m.text"},"ts":1648566500489,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OcxJTVU9At9IN9Oho2J_znRibKLw4p3dcIO0YcPQcAc"},
{"content":{"body":"so, PSA everybody: i'm organizing the github teams on the tc39 org. as a result, you may get notifications that you're added to a \"Member: Something\" team, and removed from the \"Delegates\" team - your \"member\" team will be a child team of Delegates, so no permissions should change. Please let me know if:\na) you run into any github permission issues\nb) i've gotten your affiliation wrong\nc) you have multiple affiliations and i've forgotten some of them\n\nThanks!","msgtype":"m.text","org.matrix.msc1767.text":"so, PSA everybody: i'm organizing the github teams on the tc39 org. as a result, you may get notifications that you're added to a \"Member: Something\" team, and removed from the \"Delegates\" team - your \"member\" team will be a child team of Delegates, so no permissions should change. Please let me know if:\na) you run into any github permission issues\nb) i've gotten your affiliation wrong\nc) you have multiple affiliations and i've forgotten some of them\n\nThanks!"},"ts":1648566613323,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qaDYVljoQO2iG0kW3fltpvxxLyKK4oi51kViN-FVWNY"},
{"content":{"body":"My only concern with `memoize` is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once \"for each unique sequence of arguments\", and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true \"memoize\" implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version. ","format":"org.matrix.custom.html","formatted_body":"My only concern with <code>memoize</code> is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once &quot;for each unique sequence of arguments&quot;, and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true &quot;memoize&quot; implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version.","msgtype":"m.text"},"ts":1648566884975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N1DxCDYNNJT7Vzk_q3ZEXKITB_8-2ZJTLCXLDLuY7Xw"},
{"content":{"body":"(and yes, TS has a function called `memo` internally that only supports 0-arg, and I wrote it, but it's internal only so 🤷) ","format":"org.matrix.custom.html","formatted_body":"(and yes, TS has a function called <code>memo</code> internally that only supports 0-arg, and I wrote it, but it's internal only so 🤷)","msgtype":"m.text"},"ts":1648566985536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4aeD9Ib1gNLPtxHYLl2jdQnl-8NmEpme-L-sIF06n1M"},
{"content":{"body":"> <@rbuckton:matrix.org> My only concern with `memoize` is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once \"for each unique sequence of arguments\", and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true \"memoize\" implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version.\n\nIs the GC concern that memoized functions permanently cache their arguments?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N1DxCDYNNJT7Vzk_q3ZEXKITB_8-2ZJTLCXLDLuY7Xw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My only concern with <code>memoize</code> is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once \"for each unique sequence of arguments\", and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true \"memoize\" implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version.</blockquote></mx-reply>Is the GC concern that memoized functions permanently cache their arguments?","m.relates_to":{"m.in_reply_to":{"event_id":"$N1DxCDYNNJT7Vzk_q3ZEXKITB_8-2ZJTLCXLDLuY7Xw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> My only concern with `memoize` is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once \"for each unique sequence of arguments\", and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true \"memoize\" implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version.\n\nIs the GC concern that memoized functions permanently cache their arguments?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N1DxCDYNNJT7Vzk_q3ZEXKITB_8-2ZJTLCXLDLuY7Xw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My only concern with <code>memoize</code> is that it's not a true memoize unless it can take functions that accept multiple arguments and only evaluates once \"for each unique sequence of arguments\", and that has GC implications. It's not a blocking concern, but may be a source of confusion for anyone coming from an FP language or library that does have a true \"memoize\" implementation. I'm wary of borrowing something from FP but have a implementation that doesn't match the FP version.</blockquote></mx-reply>Is the GC concern that memoized functions permanently cache their arguments?","mimetype":"text/html"}]},"ts":1648567045420,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1Hb7r1HaDC4zxUxmUDtegJ2M3IvmhuP6Sdu-1nSbrQU"},
{"content":{"body":"python has lru_cache for this","msgtype":"m.text","org.matrix.msc1767.text":"python has lru_cache for this"},"ts":1648567167016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wlKeRYCUgyWrrX2B3fIZ_EMp25blGnQkY3NbGR62scc"},
{"content":{"body":"which I like a lot","msgtype":"m.text","org.matrix.msc1767.text":"which I like a lot"},"ts":1648567170613,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9-iJJ7R2AB1jAnm_ZpveXlsR1QM8ZIR2M8w2wJdqyn8"},
{"content":{"body":"> <@jschoi:matrix.org> Is the GC concern that memoized functions permanently cache their arguments?\n\nYes, though you could potentially use a weakref for objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1Hb7r1HaDC4zxUxmUDtegJ2M3IvmhuP6Sdu-1nSbrQU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br />Is the GC concern that memoized functions permanently cache their arguments?</blockquote></mx-reply>Yes, though you could potentially use a weakref for objects","m.relates_to":{"m.in_reply_to":{"event_id":"$1Hb7r1HaDC4zxUxmUDtegJ2M3IvmhuP6Sdu-1nSbrQU"}},"msgtype":"m.text"},"ts":1648567211617,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wh1xz-x0VyAt5cF7d082oNxm5mtqX0_hCmdVEyWV14w"},
{"content":{"body":"rbuckton: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage","mimetype":"text/html"}]},"ts":1648567226119,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QZV4dO4oCyNeAT2d4rujh_pTW6U4SPxcZx-nd0dPH8U"},
{"content":{"body":"only if the arguments are objects","msgtype":"m.text","org.matrix.msc1767.text":"only if the arguments are objects"},"ts":1648567244503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$av8l_-N1OoqLbJh1D5icj9Jk2yN2ZRt8XURqLqg445M"},
{"content":{"body":"it'd be easier if we could shove anything into WeakMaps though...","msgtype":"m.text","org.matrix.msc1767.text":"it'd be easier if we could shove anything into WeakMaps though..."},"ts":1648567256552,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y34xuOYZWTBZlGCYac8PB-DNMd8eUA1wfYfh6yN27sE"},
{"content":{"body":"if the arguments are all primitive and the return value is not, now you have no gc","msgtype":"m.text","org.matrix.msc1767.text":"if the arguments are all primitive and the return value is not, now you have no gc"},"ts":1648567257341,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kUFDUAhsPGV3HwEZi_khIDethbmUOEcMPaYc82Sgr2I"},
{"content":{"body":"> <@bakkot:matrix.org> python has lru_cache for this\n\nRe LRU/LFU, IBM’s patent on ARC lapses in just a few more years :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wlKeRYCUgyWrrX2B3fIZ_EMp25blGnQkY3NbGR62scc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>python has lru_cache for this</blockquote></mx-reply>Re LRU/LFU, IBM’s patent on ARC lapses in just a few more years :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$wlKeRYCUgyWrrX2B3fIZ_EMp25blGnQkY3NbGR62scc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> python has lru_cache for this\n\nRe LRU/LFU, IBM’s patent on ARC lapses in just a few more years :-)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wlKeRYCUgyWrrX2B3fIZ_EMp25blGnQkY3NbGR62scc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>python has lru_cache for this</blockquote></mx-reply>Re LRU/LFU, IBM’s patent on ARC lapses in just a few more years :-)","mimetype":"text/html"}]},"ts":1648567264106,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$q4Y0eQMBT9c74qwgR5mI5mYQOWX1gBF6V3eXzZ3kiIc"},
{"content":{"body":"bakkot: you know where I stand on that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: you know where I stand on that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: you know where I stand on that","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: you know where I stand on that","mimetype":"text/html"}]},"ts":1648567267476,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Pqf2ZkZ7e3oO1VsUq6gYZePhCxAC2_AuYUzUE_NIpIw"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage\n\nAgreed, but I think this is the reason why `memoize` for n-arg could be potentially difficult to standardize ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QZV4dO4oCyNeAT2d4rujh_pTW6U4SPxcZx-nd0dPH8U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br /><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think you can solve the GC issues by using a tree of WeakMaps for the argument storage</blockquote></mx-reply>Agreed, but I think this is the reason why <code>memoize</code> for n-arg could be potentially difficult to standardize","m.relates_to":{"m.in_reply_to":{"event_id":"$QZV4dO4oCyNeAT2d4rujh_pTW6U4SPxcZx-nd0dPH8U"}},"msgtype":"m.text"},"ts":1648567277091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s_aY1TnR4sdkhx6AZM__5bqSxagiGebsrWxCjuw4MR8"},
{"content":{"body":"Michael Ficarra: I only know things after 9am","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: I only know things after 9am","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: I only know things after 9am","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: I only know things after 9am","mimetype":"text/html"}]},"ts":1648567324455,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$45zmjXNmwsPQouEJAvQHjW9LklonWWruE4VkR-ybrug"},
{"content":{"body":"so, remind me?","msgtype":"m.text","org.matrix.msc1767.text":"so, remind me?"},"ts":1648567330536,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cGTAgA8JsULKwm6jzjsIm9jQD8Ln1cPr202o8uJDMfM"},
{"content":{"body":"https://github.com/tc39/proposal-symbols-as-weakmap-keys/issues/21#issuecomment-1016934180","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/proposal-symbols-as-weakmap-keys/issues/21#issuecomment-1016934180"},"ts":1648567372910,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$b9SGK-X7Ftvzh0ASRf97JUH64a2O8j3V4C1wjg1RrC4"},
{"content":{"body":"That item on the queue for a stage between 3/4 for shipping flagged vs. unflagged is something I would be interested in discussing one of these days","msgtype":"m.text","org.matrix.msc1767.text":"That item on the queue for a stage between 3/4 for shipping flagged vs. unflagged is something I would be interested in discussing one of these days"},"ts":1648567561700,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$QFTdiWyLwB62foTXRVGtqixmm3xeAIJmNSLXd_EuSw4"},
{"content":{"body":"(hey, I'm not the one who opened the can of worms :D )","msgtype":"m.text","org.matrix.msc1767.text":"(hey, I'm not the one who opened the can of worms :D )"},"ts":1648567642232,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$9fuGKbrNBvBbdk2eR8LfGN9suKbRndA22IrtR01cPS0"},
{"content":{"body":"guess it depends on what that means","msgtype":"m.text","org.matrix.msc1767.text":"guess it depends on what that means"},"ts":1648567893205,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_7opaZocpNZNhRlk7XuhYtSlgk8lwMbHA6QhWm11X5Y"},
{"content":{"body":"I am often writing code that is trying to be defensive against a malicious `Function.prototype.call` exfiltrating my function, and yet I don't feel it's inconvenient to create a helper `const call = Date.call.bind(Date.call);`","format":"org.matrix.custom.html","formatted_body":"I am often writing code that is trying to be defensive against a malicious <code>Function.prototype.call</code> exfiltrating my function, and yet I don't feel it's inconvenient to create a helper <code>const call = Date.call.bind(Date.call);</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am often writing code that is trying to be defensive against a malicious `Function.prototype.call` exfiltrating my function, and yet I don't feel it's inconvenient to create a helper `const call = Date.call.bind(Date.call);`","mimetype":"text/plain"},{"body":"I am often writing code that is trying to be defensive against a malicious <code>Function.prototype.call</code> exfiltrating my function, and yet I don't feel it's inconvenient to create a helper <code>const call = Date.call.bind(Date.call);</code>","mimetype":"text/html"}]},"ts":1648567899782,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YnPQG2QxihgfxrKeceqnJXpY73R8nhsUVE5Y6hFDdbo"},
{"content":{"body":"danielrosenwasser: i wouldn't find slowing down feature release cadence to be as slow as TC39's own schedule to be acceptable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: i wouldn't find slowing down feature release cadence to be as slow as TC39's own schedule to be acceptable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"danielrosenwasser: i wouldn't find slowing down feature release cadence to be as slow as TC39's own schedule to be acceptable","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: i wouldn't find slowing down feature release cadence to be as slow as TC39's own schedule to be acceptable","mimetype":"text/html"}]},"ts":1648567942471,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$15Th1aKOs67ONWMCqbEZMV3fiOTpYVDDMeld1LnweFk"},
{"content":{"body":"post stage 3, that is","msgtype":"m.text","org.matrix.msc1767.text":"post stage 3, that is"},"ts":1648567952896,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$npeud9nT6m6m5SxMG6cbx8JGgmbfuqf8p5-5zHjhhW8"},
{"content":{"body":"I'd guess that not all proposals would benefit from such a stage","msgtype":"m.text"},"ts":1648568027700,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$_7_vFmA8PXyhry_5Xkqgj6gMLbxP3WKvlMojelMCxzc"},
{"content":{"body":"also big +1","msgtype":"m.text","org.matrix.msc1767.text":"also big +1"},"ts":1648568071154,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$98VNA6_FxVkf4CHbMfjJZ6ESZvm2zkih4C-HiP9yMU0"},
{"content":{"body":"if we codify an optional stage for proposals that need it","msgtype":"m.text","org.matrix.msc1767.text":"if we codify an optional stage for proposals that need it"},"ts":1648568079448,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ur6Lc9XrheXL2Pk2OBUQdxIWxZGLQd-chGCQXlRFxFE"},
{"content":{"body":"that seems pretty good! details tbd ofc","msgtype":"m.text","org.matrix.msc1767.text":"that seems pretty good! details tbd ofc"},"ts":1648568088413,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4iGvnK62InGFTlKWEYEiyALk_DYHcqxUh8lU5bgA0Uk"},
{"content":{"body":"right, definitely only a subset of proposals","msgtype":"m.text","org.matrix.msc1767.text":"right, definitely only a subset of proposals"},"ts":1648568163711,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3MLhoLIUpOD27sKkoeb7_D1OgnbFHMs3voRU1GT1Sa8"},
{"content":{"body":"i remind again of my \"risk factors\" process doc PR, one of which could be this :-p","msgtype":"m.text","org.matrix.msc1767.text":"i remind again of my \"risk factors\" process doc PR, one of which could be this :-p"},"ts":1648568177622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FeqJ2RhaAbIZXyJUlKJuSOJDTGBza7l4S9XMNzEXyU0"},
{"content":{"body":"if anyone has avenues to reach Pzuraq, please check if they can present Decorators sometime in the next 30mins (the overflow item)","msgtype":"m.text","org.matrix.msc1767.text":"if anyone has avenues to reach Pzuraq, please check if they can present Decorators sometime in the next 30mins (the overflow item)"},"ts":1648568200734,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$sWHQaD5urMjLJUAEEt77F1X_yKiwWregBYI-RLhvkvw"},
{"content":{"body":"I have tried Matrix and Twitter DM.","msgtype":"m.text","org.matrix.msc1767.text":"I have tried Matrix and Twitter DM."},"ts":1648568218203,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$fxf5eHF-c78gPoZnDFYzMJWXTe38dqxXnf3LOgWGwOw"},
{"content":{"body":"Rob Palmer: they said last night they were not around this morning in particular but were OK with whatever the committee wants","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: they said last night they were not around this morning in particular but were OK with whatever the committee wants","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: they said last night they were not around this morning in particular but were OK with whatever the committee wants","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: they said last night they were not around this morning in particular but were OK with whatever the committee wants","mimetype":"text/html"}]},"ts":1648568331162,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RnyvwkX12rZI7I-ZMGsCVSFy-H_gcKfOuKiMkBHTxks"},
{"content":{"body":"assuming this is the `isPrivate` thing","format":"org.matrix.custom.html","formatted_body":"assuming this is the <code>isPrivate</code> thing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"assuming this is the `isPrivate` thing","mimetype":"text/plain"},{"body":"assuming this is the <code>isPrivate</code> thing","mimetype":"text/html"}]},"ts":1648568335796,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5LmXc4ZiKJ8octqU0wAT2qt6a4TeA4uKHTK6iP3wK68"},
{"content":{"body":"I can present that issue, if pzuraq cannot be located in time","format":"org.matrix.custom.html","formatted_body":"I can present that issue, if <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> cannot be located in time","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can present that issue, if pzuraq cannot be located in time","mimetype":"text/plain"},{"body":"I can present that issue, if <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> cannot be located in time","mimetype":"text/html"}]},"ts":1648568344409,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CGFI8ys_mC5C9VroDwYH-0you6Im-9BPRse8q3bDZg4"},
{"content":{"body":"https://matrixlogs.bakkot.com/TC39_Delegates/2022-03-29#L171","msgtype":"m.text","org.matrix.msc1767.text":"https://matrixlogs.bakkot.com/TC39_Delegates/2022-03-29#L171"},"ts":1648568384507,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xWDlj8MhnKlS0seY5iG9xsm4__p3Un5WrPI14AVnRCU"},
{"content":{"body":"we can always do it Thursday - there is no time pressure, (and maybe no time at all) if it's better for pzuraq","msgtype":"m.text","org.matrix.msc1767.text":"we can always do it Thursday - there is no time pressure, (and maybe no time at all) if it's better for pzuraq"},"ts":1648568399274,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$knIaPPG9VrgQlGcu0HE3CWOzThEgoqfMWfxcNpcu7aQ"},
{"content":{"body":"i say no time pressure - i mean, it fits, so long as NO ONE OVERRUNS","msgtype":"m.text","org.matrix.msc1767.text":"i say no time pressure - i mean, it fits, so long as NO ONE OVERRUNS"},"ts":1648568428971,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$S96zUbVdPrfiRSTpuLbtQwgusYJRph3YRD0Mqp6jgnQ"},
{"content":{"body":"pzuraqalso said he dosen't feel strongly and is comfortable with whatever consensus committee reaches","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>also said he dosen't feel strongly and is comfortable with whatever consensus committee reaches","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraqalso said he dosen't feel strongly and is comfortable with whatever consensus committee reaches","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>also said he dosen't feel strongly and is comfortable with whatever consensus committee reaches","mimetype":"text/html"}]},"ts":1648568450020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SjvJMNkWEK9Waqiki8KCBX3e2gT1KVMjOt2OJQ5mtzg"},
{"content":{"body":"would rather we don't risk not discussing this imo","msgtype":"m.text","org.matrix.msc1767.text":"would rather we don't risk not discussing this imo"},"ts":1648568457297,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cAEiAFkIPQ_kWvGhizgxLFug2d-HP43gIVzt-CL2iIg"},
{"content":{"body":"I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts.","msgtype":"m.text","org.matrix.msc1767.text":"I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts."},"ts":1648568480225,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LjCtDlfv-l6v7C0fCEKEEbHrOtqeY-z4wdE3F-cLNec"},
{"content":{"body":"> <@kriskowal:matrix.org> I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts.\n\ncan you elaborate on that? my belief is the opposite, that it increases understandability","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LjCtDlfv-l6v7C0fCEKEEbHrOtqeY-z4wdE3F-cLNec?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts.</blockquote></mx-reply>can you elaborate on that? my belief is the opposite, that it increases understandability","m.relates_to":{"m.in_reply_to":{"event_id":"$LjCtDlfv-l6v7C0fCEKEEbHrOtqeY-z4wdE3F-cLNec"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts.\n\ncan you elaborate on that? my belief is the opposite, that it increases understandability","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LjCtDlfv-l6v7C0fCEKEEbHrOtqeY-z4wdE3F-cLNec?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I want to register, informally, that “call this” is a net negative for the precious understandability of the language. I do not think it’s useful to sweep “call” and “bind” under the syntax of the language. “call” and “apply” are perhaps warts, but they’re instructive warts.</blockquote></mx-reply>can you elaborate on that? my belief is the opposite, that it increases understandability","mimetype":"text/html"}]},"ts":1648568524048,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n_ADFAMQ8IwWcXLhXNWHruklgEaWc20QAKnNsPnOt5g"},
{"content":{"body":"it is quite difficult to search syntax","msgtype":"m.text","org.matrix.msc1767.text":"it is quite difficult to search syntax"},"ts":1648568544258,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZP95_n4zEu72BxaBLNS2QPxqHDN8bo2UxStrmgSbbTQ"},
{"content":{"body":"what if we shipped editor macro for every popular editor that expands `~.` or whatever syntax the user chooses to `.call`","format":"org.matrix.custom.html","formatted_body":"what if we shipped editor macro for every popular editor that expands <code>~.</code> or whatever syntax the user chooses to <code>.call</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what if we shipped editor macro for every popular editor that expands `~.` or whatever syntax the user chooses to `.call`","mimetype":"text/plain"},{"body":"what if we shipped editor macro for every popular editor that expands <code>~.</code> or whatever syntax the user chooses to <code>.call</code>","mimetype":"text/html"}]},"ts":1648568621254,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nsAEq8iPPE0E-Ly5pd9vtHVY6h-QSR9fmgzWKsIBW0I"},
{"content":{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","format":"org.matrix.custom.html","formatted_body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","mimetype":"text/plain"},{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","mimetype":"text/html"}]},"ts":1648568624001,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UrjAZTIGl5MgYGNlvIORSz87WdPo7pY6VyTKl9FB_Uc"},
{"content":{"body":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive","m.new_content":{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive","msgtype":"m.text","org.matrix.msc1767.text":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive"},"m.relates_to":{"event_id":"$UrjAZTIGl5MgYGNlvIORSz87WdPo7pY6VyTKl9FB_Uc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive"},"ts":1648568629614,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s3RKY7qJA2VxqKjtr-nvr6kTRDoKAvS5NyvoXyHjV_Y"},
{"content":{"body":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","format":"org.matrix.custom.html","formatted_body":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","m.new_content":{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","format":"org.matrix.custom.html","formatted_body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","mimetype":"text/plain"},{"body":"sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$UrjAZTIGl5MgYGNlvIORSz87WdPo7pY6VyTKl9FB_Uc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about `this`","mimetype":"text/plain"},{"body":" * sure, that's fair. but i believe most wouldn't need to search it, because it's pretty intuitive once you know about <code>this</code>","mimetype":"text/html"}]},"ts":1648568632893,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$19fO1aIRtcU98GKT9GaG61EWY4A4AwJYYhdkL-qbSdc"},
{"content":{"body":"also auto-converters for code viewers and searches i guess","msgtype":"m.text","org.matrix.msc1767.text":"also auto-converters for code viewers and searches i guess"},"ts":1648568634793,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Leh31TI2jGDwknxDPuMlpNdVWR5K_GleDv6anBNS-fc"},
{"content":{"body":"Rob Palmer: shu As noted above, I’m ok with whatever consensus the committee reaches on the static/isStatic naming issue","msgtype":"m.text"},"ts":1648568650687,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$lD6NpmKOxG1FK0bfCMf_hpbPkWY8R-Mh-PsZ39m_-jM"},
{"content":{"body":"You can discuss without me, I’m not available until 1:30pm ET","msgtype":"m.text"},"ts":1648568714516,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$xyhlO5RJUYeIJ-ZVxgoXurIgn16qSsqahBNH3GsErxw"},
{"content":{"body":"pzuraq: thank you.  we will do it in the first spare time we have.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: thank you.  we will do it in the first spare time we have.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"pzuraq: thank you.  we will do it in the first spare time we have.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: thank you.  we will do it in the first spare time we have.","mimetype":"text/html"}]},"ts":1648568725131,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Ibzfpz5PRXphfJwZRE4sIVjZWwB6iFPVRljxX229SXg"},
{"content":{"body":"shu: i think it will fit in this meeting.  we have some time profit.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: i think it will fit in this meeting.  we have some time profit.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: i think it will fit in this meeting.  we have some time profit.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: i think it will fit in this meeting.  we have some time profit.","mimetype":"text/html"}]},"ts":1648568751219,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Gwy9kLgVfX1CnVhPYvBR_-BEnevTWwafyKo3Poa-0CI"},
{"content":{"body":"I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","format":"org.matrix.custom.html","formatted_body":"I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/plain"},{"body":"I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/html"}]},"ts":1648568753308,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pflifox6QPk04ihwBO8FxeAy42wbIhkIz2KHRCAX08U"},
{"content":{"body":" * I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","format":"org.matrix.custom.html","formatted_body":" * I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","m.new_content":{"body":"I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","format":"org.matrix.custom.html","formatted_body":"I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/plain"},{"body":"I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pflifox6QPk04ihwBO8FxeAy42wbIhkIz2KHRCAX08U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I also have some hope that we will reserve `~` (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/plain"},{"body":" * I also have some hope that we will reserve <code>~</code> (tilde) for eventual send, since it has the obvious in retrospect “stream” mnemonic.","mimetype":"text/html"}]},"ts":1648568767155,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ei9sjL2L_Jp1LU7Iua_HkVgzyMJUpQMIUygXsoAzU2Y"},
{"content":{"body":"> <@ljharb:matrix.org> can you elaborate on that? my belief is the opposite, that it increases understandability\n\nSyntax does not obviate the need to know about `this` binding and does not replace having to understand `.call`, `.apply`, and `.bind`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n_ADFAMQ8IwWcXLhXNWHruklgEaWc20QAKnNsPnOt5g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>can you elaborate on that? my belief is the opposite, that it increases understandability</blockquote></mx-reply>Syntax does not obviate the need to know about <code>this</code> binding and does not replace having to understand <code>.call</code>, <code>.apply</code>, and <code>.bind</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$n_ADFAMQ8IwWcXLhXNWHruklgEaWc20QAKnNsPnOt5g"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> can you elaborate on that? my belief is the opposite, that it increases understandability\n\nSyntax does not obviate the need to know about `this` binding and does not replace having to understand `.call`, `.apply`, and `.bind`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n_ADFAMQ8IwWcXLhXNWHruklgEaWc20QAKnNsPnOt5g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>can you elaborate on that? my belief is the opposite, that it increases understandability</blockquote></mx-reply>Syntax does not obviate the need to know about <code>this</code> binding and does not replace having to understand <code>.call</code>, <code>.apply</code>, and <code>.bind</code>.","mimetype":"text/html"}]},"ts":1648568855840,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OIMb4Ae4MuMHsa1CzxkHbAMxYBimfUWM8rlHET3R14w"},
{"content":{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better.","msgtype":"m.text","org.matrix.msc1767.text":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better."},"ts":1648568884720,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$K7VC85d28AeYCUVTDHt9pQodVMHcodHj2oPuCIJLgSU"},
{"content":{"body":"thought i was free","msgtype":"m.text","org.matrix.msc1767.text":"thought i was free"},"ts":1648568902742,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2SUzP-f8_nFVCxkLD0-C1yUln59FDtNdfM-_gO79CVE"},
{"content":{"body":"So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.","format":"org.matrix.custom.html","formatted_body":"So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.","mimetype":"text/plain"},{"body":"So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.","mimetype":"text/html"}]},"ts":1648568918097,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI"},
{"content":{"body":"> <@shuyuguo:matrix.org> thought i was free\n\ntbh we thought it was a coup","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2SUzP-f8_nFVCxkLD0-C1yUln59FDtNdfM-_gO79CVE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>thought i was free</blockquote></mx-reply>tbh we thought it was a coup","m.relates_to":{"m.in_reply_to":{"event_id":"$2SUzP-f8_nFVCxkLD0-C1yUln59FDtNdfM-_gO79CVE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> thought i was free\n\ntbh we thought it was a coup","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2SUzP-f8_nFVCxkLD0-C1yUln59FDtNdfM-_gO79CVE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>thought i was free</blockquote></mx-reply>tbh we thought it was a coup","mimetype":"text/html"}]},"ts":1648568941536,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$M53fLFJ5ALpg82z-EC_1hJTIi2W1KCYPRwebM8AYsY8"},
{"content":{"body":"> <@kriskowal:matrix.org> So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.\n\nyes, this is more of an expert feature. However, we have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though. I do think there is something to fix but i don't know how, and this might do it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.</blockquote></mx-reply>yes, this is more of an expert feature. However, we have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though. I do think there is something to fix but i don't know how, and this might do it?","m.relates_to":{"m.in_reply_to":{"event_id":"$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.\n\nyes, this is more of an expert feature. However, we have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though. I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.</blockquote></mx-reply>yes, this is more of an expert feature. However, we have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though. I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/html"}]},"ts":1648569006406,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$9XqdjU9H_1IH6tKb7mWM_bW0BM916IxNVxwhQeJmR7c"},
{"content":{"body":"> <@kriskowal:matrix.org> So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.\n\n * yes, this is more of an expert feature. We have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.</blockquote></mx-reply> * yes, this is more of an expert feature. We have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","m.new_content":{"body":"yes, this is more of an expert feature. We have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","format":"org.matrix.custom.html","formatted_body":"yes, this is more of an expert feature. We have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes, this is more of an expert feature. We have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/plain"},{"body":"yes, this is more of an expert feature. We have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$9XqdjU9H_1IH6tKb7mWM_bW0BM916IxNVxwhQeJmR7c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> So, as a reader of the language, you need to know more, not less, and `call` and `apply` are a more searchable teaching moment, to Yulia’s point.\n\n * yes, this is more of an expert feature. We have done similar moves with `=>`. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around `this` than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JTqpEcmyowRGaQ4TqNdqVi792xi3CDuUbAEgos_nKrI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, as a reader of the language, you need to know more, not less, and <code>call</code> and <code>apply</code> are a more searchable teaching moment, to Yulia’s point.</blockquote></mx-reply> * yes, this is more of an expert feature. We have done similar moves with <code>=&gt;</code>. There is something wrong, users struggle with .bind and .call. It's more about ambiguity around <code>this</code> than word order though (so, i disagree with the thesis). I do think there is something to fix but i don't know how, and this might do it?","mimetype":"text/html"}]},"ts":1648569019700,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$d_Jugit6FFGRpdoCXavO_-ZO0Y0X8oeaNLpoBE9TQUg"},
{"content":{"body":"I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers.","msgtype":"m.text","org.matrix.msc1767.text":"I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers."},"ts":1648569167112,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$b5-eIUWmvXvPdCHSbX7KjcOoCfzPlQeJLopoffe2Fm8"},
{"content":{"body":" * I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers.","m.new_content":{"body":"I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers.","msgtype":"m.text","org.matrix.msc1767.text":"I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers."},"m.relates_to":{"event_id":"$b5-eIUWmvXvPdCHSbX7KjcOoCfzPlQeJLopoffe2Fm8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I’m personally happy with arrow functions, but anecdotally, I’ve been told by people who assume me a JavaScript partisan, that arrow functions marked the moment JavaScript ceased to be friendly to newcomers."},"ts":1648569176243,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tzWmGbzdiioeY2JK-EqhfQVRHoHLwuyDvLec-bQqSqo"},
{"content":{"body":"like the case i keep thinking about is `obj.method.{call,bind}(obj, val)` -- this is a bit weird","format":"org.matrix.custom.html","formatted_body":"like the case i keep thinking about is <code>obj.method.{call,bind}(obj, val)</code> -- this is a bit weird","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like the case i keep thinking about is `obj.method.{call,bind}(obj, val)` -- this is a bit weird","mimetype":"text/plain"},{"body":"like the case i keep thinking about is <code>obj.method.{call,bind}(obj, val)</code> -- this is a bit weird","mimetype":"text/html"}]},"ts":1648569182053,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$swLmW1stwFhTHEjmaOIrQJk3TL9w24UChYMg5RQdQnI"},
{"content":{"body":"im not so concerned about `obj.method.{call,bind}(anotherObj,val)` that seems valid. ","format":"org.matrix.custom.html","formatted_body":"im not so concerned about <code>obj.method.{call,bind}(anotherObj,val)</code> that seems valid.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"im not so concerned about `obj.method.{call,bind}(anotherObj,val)` that seems valid. ","mimetype":"text/plain"},{"body":"im not so concerned about <code>obj.method.{call,bind}(anotherObj,val)</code> that seems valid.","mimetype":"text/html"}]},"ts":1648569207648,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wtJu7u5WFmc0JLZuUxfN8-hGzDLi-dsIlx6cl4AfWAA"},
{"content":{"body":"my more common use cases are `const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~>method()`","format":"org.matrix.custom.html","formatted_body":"my more common use cases are <code>const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~&gt;method()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"my more common use cases are `const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~>method()`","mimetype":"text/plain"},{"body":"my more common use cases are <code>const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~&gt;method()</code>","mimetype":"text/html"}]},"ts":1648569254497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XMFLPwCpvXC1cXaCKXIy8aiAYn-kd_ZkVczfDgW3C3U"},
{"content":{"body":"it feels like that isn't so bad","msgtype":"m.text","org.matrix.msc1767.text":"it feels like that isn't so bad"},"ts":1648569279379,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$onIDphvy9mGLGoltoMADALQeSqFUbChejWdPSE2bwi8"},
{"content":{"body":"\"bitwise XOR is not very common\"","msgtype":"m.text","org.matrix.msc1767.text":"\"bitwise XOR is not very common\""},"ts":1648569282044,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$HDNpf39luR0Dx2BrAxk8zzJzaVfWnccHICfNgKfMyzA"},
{"content":{"body":"> <@yulia:mozilla.org> it feels like that isn't so bad\n\ni mean it's \"fine\", but the reversed word order makes readability and writability suffer","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$onIDphvy9mGLGoltoMADALQeSqFUbChejWdPSE2bwi8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>it feels like that isn&#39;t so bad</blockquote></mx-reply>i mean it's &quot;fine&quot;, but the reversed word order makes readability and writability suffer","m.relates_to":{"m.in_reply_to":{"event_id":"$onIDphvy9mGLGoltoMADALQeSqFUbChejWdPSE2bwi8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> it feels like that isn't so bad\n\ni mean it's \"fine\", but the reversed word order makes readability and writability suffer","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$onIDphvy9mGLGoltoMADALQeSqFUbChejWdPSE2bwi8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>it feels like that isn&#39;t so bad</blockquote></mx-reply>i mean it's &quot;fine&quot;, but the reversed word order makes readability and writability suffer","mimetype":"text/html"}]},"ts":1648569300283,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L3Kt6U2U0ahI7RXbL_V17P0F7E22D60HQRPyRdw7OmA"},
{"content":{"body":"> <@yulia:mozilla.org> like the case i keep thinking about is `obj.method.{call,bind}(obj, val)` -- this is a bit weird\n\nwhen does one need to write this. It used to be the case with `apply` before spread","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$swLmW1stwFhTHEjmaOIrQJk3TL9w24UChYMg5RQdQnI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>like the case i keep thinking about is <code>obj.method.{call,bind}(obj, val)</code> -- this is a bit weird</blockquote></mx-reply>when does one need to write this. It used to be the case with <code>apply</code> before spread","m.relates_to":{"m.in_reply_to":{"event_id":"$swLmW1stwFhTHEjmaOIrQJk3TL9w24UChYMg5RQdQnI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> like the case i keep thinking about is `obj.method.{call,bind}(obj, val)` -- this is a bit weird\n\nwhen does one need to write this. It used to be the case with `apply` before spread","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$swLmW1stwFhTHEjmaOIrQJk3TL9w24UChYMg5RQdQnI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>like the case i keep thinking about is <code>obj.method.{call,bind}(obj, val)</code> -- this is a bit weird</blockquote></mx-reply>when does one need to write this. It used to be the case with <code>apply</code> before spread","mimetype":"text/html"}]},"ts":1648569323327,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e53it0AhmIUywcZEyFg6V9DiHM6KQtlUlU_haJKLZuc"},
{"content":{"body":"Rick Waldron: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rick Waldron: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority","mimetype":"text/html"}]},"ts":1648569327911,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$khrT_PhyoSho3aKm9usQcIfpNw3tjTlLN8cCvWFa2Vk"},
{"content":{"body":"> <@ljharb:matrix.org> my more common use cases are `const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~>method()`\n\nfwiw I do not see code which does that basically ever, except for code which is being defensive ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XMFLPwCpvXC1cXaCKXIy8aiAYn-kd_ZkVczfDgW3C3U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>my more common use cases are <code>const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~&gt;method()</code></blockquote></mx-reply>fwiw I do not see code which does that basically ever, except for code which is being defensive","m.relates_to":{"m.in_reply_to":{"event_id":"$XMFLPwCpvXC1cXaCKXIy8aiAYn-kd_ZkVczfDgW3C3U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> my more common use cases are `const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~>method()`\n\nfwiw I do not see code which does that basically ever, except for code which is being defensive ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XMFLPwCpvXC1cXaCKXIy8aiAYn-kd_ZkVczfDgW3C3U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>my more common use cases are <code>const method = obj.method; /* much much later */ method.call(otherObj) /* vs */ otherObj~&gt;method()</code></blockquote></mx-reply>fwiw I do not see code which does that basically ever, except for code which is being defensive","mimetype":"text/html"}]},"ts":1648569346201,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xIxa4ZjrrjJTN3kdT4kDVMqb3BLlovcp3UQqOk9nKbs"},
{"content":{"body":"used to be a lot more common before spread, because you had to work with `arguments` objects","format":"org.matrix.custom.html","formatted_body":"used to be a lot more common before spread, because you had to work with <code>arguments</code> objects","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"used to be a lot more common before spread, because you had to work with `arguments` objects","mimetype":"text/plain"},{"body":"used to be a lot more common before spread, because you had to work with <code>arguments</code> objects","mimetype":"text/html"}]},"ts":1648569356043,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BsAJZp57wCt2XgDs28NZJOszAUYJNQ-8gdRnFMQhlok"},
{"content":{"body":"> <@mhofman:matrix.org> when does one need to write this. It used to be the case with `apply` before spread\n\nreact. like, all the time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e53it0AhmIUywcZEyFg6V9DiHM6KQtlUlU_haJKLZuc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>when does one need to write this. It used to be the case with <code>apply</code> before spread</blockquote></mx-reply>react. like, all the time","m.relates_to":{"m.in_reply_to":{"event_id":"$e53it0AhmIUywcZEyFg6V9DiHM6KQtlUlU_haJKLZuc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> when does one need to write this. It used to be the case with `apply` before spread\n\nreact. like, all the time","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e53it0AhmIUywcZEyFg6V9DiHM6KQtlUlU_haJKLZuc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>when does one need to write this. It used to be the case with <code>apply</code> before spread</blockquote></mx-reply>react. like, all the time","mimetype":"text/html"}]},"ts":1648569358601,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qqk9B1lAPLEQ32bZrGNB9CpvbBIQXgN6uOLA6kQw_WU"},
{"content":{"body":"but now? not really ever.","msgtype":"m.text","org.matrix.msc1767.text":"but now? not really ever."},"ts":1648569359558,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NZBWc_T7qvVyoygyj_5TLSdMEqxCsNViqxqc9BUeHuM"},
{"content":{"body":"yes, i agree, but \"code which is being defensive\" is quite common for me","msgtype":"m.text","org.matrix.msc1767.text":"yes, i agree, but \"code which is being defensive\" is quite common for me"},"ts":1648569368747,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qe0Lk5FAjT76l9VtTOfRvXFxuKmw22u-ZT0rBnL0LmM"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1648569372189,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BCtX-QBXn5SyjfIbRxvSCN2pvXoI6hHB3FSfrVrH3F0"},
{"content":{"body":"mm","msgtype":"m.text","org.matrix.msc1767.text":"mm"},"ts":1648569377807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$psuFsDCVfWk9en2KJrYFDqDfGuohb7Q-h2Ts2wwXsKI"},
{"content":{"body":"and for node core","msgtype":"m.text","org.matrix.msc1767.text":"and for node core"},"ts":1648569381013,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PR8PHbogk7GM3jZtCFt33ZhQJU2c6gh_UyosjTq9wWw"},
{"content":{"body":"I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language","msgtype":"m.text","org.matrix.msc1767.text":"I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language"},"ts":1648569392319,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OgQDTv6nW7AErBZex74OBwrShViiPKk2XurrRHxovmI"},
{"content":{"body":"and thus it's important for all the users of all that code, at a minimum","msgtype":"m.text","org.matrix.msc1767.text":"and thus it's important for all the users of all that code, at a minimum"},"ts":1648569396060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7v2-EqYoQfD5v8N0iAzUi2Vw17IRJyoiABOeMqu-bhQ"},
{"content":{"body":"ljharb: same, but we can be expected to go through the minor inconvenience of saving off a call-bound call","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: same, but we can be expected to go through the minor inconvenience of saving off a call-bound call","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: same, but we can be expected to go through the minor inconvenience of saving off a call-bound call","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: same, but we can be expected to go through the minor inconvenience of saving off a call-bound call","mimetype":"text/html"}]},"ts":1648569408905,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dpcjmOgYP3GbTrqiCqWWwFhMqZPefyaYBRmEawaq91o"},
{"content":{"body":"i totally agree that no one person's needs should justify addition of anything","msgtype":"m.text","org.matrix.msc1767.text":"i totally agree that no one person's needs should justify addition of anything"},"ts":1648569410631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o_x2I5bLpbZbDj_gRGN2t1lD5W2_dFdkSigvrocfNRo"},
{"content":{"body":"but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness","msgtype":"m.text","org.matrix.msc1767.text":"but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness"},"ts":1648569435862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4cjzVTw28rJ5gjmfRZb5YlPrDsTDnozvzGu6R7wat90"},
{"content":{"body":"ljharb: how is that even a debate in node core?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: how is that even a debate in node core?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: how is that even a debate in node core?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: how is that even a debate in node core?","mimetype":"text/html"}]},"ts":1648569460737,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$skU8unzQkN_ybU-qR5zmGZ5ipcWepP71tWAT04M3v_w"},
{"content":{"body":" * but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness","m.new_content":{"body":"but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness","msgtype":"m.text","org.matrix.msc1767.text":"but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness"},"m.relates_to":{"event_id":"$4cjzVTw28rJ5gjmfRZb5YlPrDsTDnozvzGu6R7wat90","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * but in node core, in particular, this syntax would (mostly) resolve a long-standing debate about the tradeoffs of readability vs robustness"},"ts":1648569461065,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I_cX0dLBH9HTyXvVBRQug9rcUS9dpp_0u5ZuQIX-u7I"},
{"content":{"body":"that seems like a node core problem to me...","msgtype":"m.text","org.matrix.msc1767.text":"that seems like a node core problem to me..."},"ts":1648569467327,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m1Il6h4T3IKZHfCrJN4PQm0-S7GhszNNPP8-quZpxVw"},
{"content":{"body":"Michael Ficarra: good question, yet it is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: good question, yet it is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: good question, yet it is","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: good question, yet it is","mimetype":"text/html"}]},"ts":1648569476713,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EyOofGxKISxrpAAzr6Z31i1Gfq_-YCuxKeo6NoGX-ew"},
{"content":{"body":"the debate itself is a node core problem","msgtype":"m.text","org.matrix.msc1767.text":"the debate itself is a node core problem"},"ts":1648569486502,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yVScWtGYS45nO2AdEGVRgNf1s8bYDeriBL2FTXM8dS0"},
{"content":{"body":"but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one","msgtype":"m.text","org.matrix.msc1767.text":"but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one"},"ts":1648569507765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UYWsG0BodS7yFkVRVhu82o5WyUiFv86JDt4KGm7W6uw"},
{"content":{"body":"> <@michaelficarra:matrix.org> Rick Waldron: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority\n\nEvery time there's discussion about making new operators/adding syntax, there is inevitably a contingent that either never knew that bitwise operators existed, or think they are so uncommonly used that they could just be re-used again for something else. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$khrT_PhyoSho3aKm9usQcIfpNw3tjTlLN8cCvWFa2Vk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority</blockquote></mx-reply>Every time there's discussion about making new operators/adding syntax, there is inevitably a contingent that either never knew that bitwise operators existed, or think they are so uncommonly used that they could just be re-used again for something else.","m.relates_to":{"m.in_reply_to":{"event_id":"$khrT_PhyoSho3aKm9usQcIfpNw3tjTlLN8cCvWFa2Vk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Rick Waldron: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority\n\nEvery time there's discussion about making new operators/adding syntax, there is inevitably a contingent that either never knew that bitwise operators existed, or think they are so uncommonly used that they could just be re-used again for something else. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$khrT_PhyoSho3aKm9usQcIfpNw3tjTlLN8cCvWFa2Vk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: yes I'm sure there are entire programs that are nothing but xor, but that's not representative of the majority</blockquote></mx-reply>Every time there's discussion about making new operators/adding syntax, there is inevitably a contingent that either never knew that bitwise operators existed, or think they are so uncommonly used that they could just be re-used again for something else.","mimetype":"text/html"}]},"ts":1648569526036,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$q16KgV4DJS2VK-a04DFSxY7UZgW9--NuFC1ONYZmTOQ"},
{"content":{"body":"ooo remapping, can we use apl syntax :D","msgtype":"m.text","org.matrix.msc1767.text":"ooo remapping, can we use apl syntax :D"},"ts":1648569528024,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_6CWPVftyy74beBGpxpTdxGZ5PZ7xtm4BW9VLQetLMU"},
{"content":{"body":"can we just... introduce apl actually ","msgtype":"m.text","org.matrix.msc1767.text":"can we just... introduce apl actually "},"ts":1648569538799,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$s6osS0WloT_uviuTVTl9r3n6-b1tHhL1a_kjl3kKvf4"},
{"content":{"body":"i have 2 days. shit why didn't i add this to the agenda","msgtype":"m.text","org.matrix.msc1767.text":"i have 2 days. shit why didn't i add this to the agenda"},"ts":1648569551543,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$HQTRFp8MJ78kfjFWXjJU2rgIsIMxLnVzP7xjlszs2CU"},
{"content":{"body":"jschoi: please give folks on the queue a chance to speak for themselves unless the item says no need to speak","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: please give folks on the queue a chance to speak for themselves unless the item says no need to speak","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: please give folks on the queue a chance to speak for themselves unless the item says no need to speak","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: please give folks on the queue a chance to speak for themselves unless the item says no need to speak","mimetype":"text/html"}]},"ts":1648569651343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2tXlaGlWbxRsEP4RirvHntjw3XATzEpfw7Esee4LWDg"},
{"content":{"body":"shu: Will do, sorry.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Will do, sorry.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: Will do, sorry.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Will do, sorry.","mimetype":"text/html"}]},"ts":1648569665683,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rhoiV6H7Q3RnC0INdRmrvqoCCaZRVCp9sRUpv4a9hFg"},
{"content":{"body":"> <@ljharb:matrix.org> but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one\n\ngenerally speaking, I am opposed to adding new syntax unless it is either a.) making a very common case more readable [e.g. arrows] or b.) making an effectively-impossible case possible [e.g. bigint]","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UYWsG0BodS7yFkVRVhu82o5WyUiFv86JDt4KGm7W6uw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one</blockquote></mx-reply>generally speaking, I am opposed to adding new syntax unless it is either a.) making a very common case more readable [e.g. arrows] or b.) making an effectively-impossible case possible [e.g. bigint]","m.relates_to":{"m.in_reply_to":{"event_id":"$UYWsG0BodS7yFkVRVhu82o5WyUiFv86JDt4KGm7W6uw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one\n\ngenerally speaking, I am opposed to adding new syntax unless it is either a.) making a very common case more readable [e.g. arrows] or b.) making an effectively-impossible case possible [e.g. bigint]","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UYWsG0BodS7yFkVRVhu82o5WyUiFv86JDt4KGm7W6uw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but the readability harm of the status quo, that call syntax would address, is a general problem - just not a universal one</blockquote></mx-reply>generally speaking, I am opposed to adding new syntax unless it is either a.) making a very common case more readable [e.g. arrows] or b.) making an effectively-impossible case possible [e.g. bigint]","mimetype":"text/html"}]},"ts":1648569679831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Zm4cOZi1pBEDKgp2wSvwz0uT6AFUOrpXi_8fffWFHE"},
{"content":{"body":"\"cases where node is using `.call`\" does not meet either bar, being neither very common nor effectively impossible","format":"org.matrix.custom.html","formatted_body":"&quot;cases where node is using <code>.call</code>&quot; does not meet either bar, being neither very common nor effectively impossible","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"cases where node is using `.call`\" does not meet either bar, being neither very common nor effectively impossible","mimetype":"text/plain"},{"body":"&quot;cases where node is using <code>.call</code>&quot; does not meet either bar, being neither very common nor effectively impossible","mimetype":"text/html"}]},"ts":1648569715227,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3ken77EB6wxtTXjgt4Ql6HyZ4i2XqoxiUr6XN8jodS4"},
{"content":{"body":"sure, fair","msgtype":"m.text","org.matrix.msc1767.text":"sure, fair"},"ts":1648569737666,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cY_abAr7z_EpRAiWZwEqQDZWYd-B4S_UEGhbFogt05c"},
{"content":{"body":"https://github.com/tc39/process-document/pull/35","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/process-document/pull/35"},"ts":1648569945323,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kLUIl9ZHQua6Zahi1mfFDzxvkjYwRLaTlhqNSgvN91k"},
{"content":{"body":"bakkot: I might have missed it earlier, but were you still going to bring up decorators and `.static` vs. `.isStatic`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I might have missed it earlier, but were you still going to bring up decorators and <code>.static</code> vs. <code>.isStatic</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: I might have missed it earlier, but were you still going to bring up decorators and `.static` vs. `.isStatic`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I might have missed it earlier, but were you still going to bring up decorators and <code>.static</code> vs. <code>.isStatic</code>?","mimetype":"text/html"}]},"ts":1648570001791,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QyKAiki9IieDF9dQLoqNlSJgIgwRhjPyMU_SnIv5iK0"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1648570008008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lz1vAjn_1qN9O1bjN_nbn7v207xGUButOagyYh2hlA0"},
{"content":{"body":"whenever we have time to put it in","msgtype":"m.text","org.matrix.msc1767.text":"whenever we have time to put it in"},"ts":1648570020875,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ohyHQnswlViDtahtc9lW1ZXzocrCcUwA3nqg9VwVKBE"},
{"content":{"body":"Rob Palmer: fwiw you're still not muted despite it showing you muted","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: fwiw you're still not muted despite it showing you muted","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: fwiw you're still not muted despite it showing you muted","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: fwiw you're still not muted despite it showing you muted","mimetype":"text/html"}]},"ts":1648570031654,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$kp3-F5GAgoVyXJfT6n9fBt6IRM3vqru-GT2Xfx8h3_4"},
{"content":{"body":"seems like you've fixed it :P","msgtype":"m.text","org.matrix.msc1767.text":"seems like you've fixed it :P"},"ts":1648570053444,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$ImbWStXMol1D6Zzly1K4cKqGqpFlvc1FIfu_RjiDi-A"},
{"content":{"body":"errr....","msgtype":"m.text","org.matrix.msc1767.text":"errr...."},"ts":1648570063257,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$TotprS2DVJUL322MJR0bZXdw3UqbaX3uLsZTplSflEQ"},
{"content":{"body":"the fragility of software mute...","msgtype":"m.text","org.matrix.msc1767.text":"the fragility of software mute..."},"ts":1648570088263,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$UB9vOY6Zy5m_w2GpaNZrvhz8S6lYjeS2naO22CdLLnM"},
{"content":{"body":"> <@yulia:mozilla.org> i have 2 days. shit why didn't i add this to the agenda\n\nAPL needs an EMOJI reboot.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HQTRFp8MJ78kfjFWXjJU2rgIsIMxLnVzP7xjlszs2CU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i have 2 days. shit why didn&#39;t i add this to the agenda</blockquote></mx-reply>APL needs an EMOJI reboot.","m.relates_to":{"m.in_reply_to":{"event_id":"$HQTRFp8MJ78kfjFWXjJU2rgIsIMxLnVzP7xjlszs2CU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> i have 2 days. shit why didn't i add this to the agenda\n\nAPL needs an EMOJI reboot.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HQTRFp8MJ78kfjFWXjJU2rgIsIMxLnVzP7xjlszs2CU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i have 2 days. shit why didn&#39;t i add this to the agenda</blockquote></mx-reply>APL needs an EMOJI reboot.","mimetype":"text/html"}]},"ts":1648570106722,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$V4g496CmPFWA_Fz-Rci7JUE3P1v5HlqSiHRiFD_f_tk"},
{"content":{"body":"i have a friend who wants to introduce an emoji combinatorics proposal for tc39","msgtype":"m.text","org.matrix.msc1767.text":"i have a friend who wants to introduce an emoji combinatorics proposal for tc39"},"ts":1648570123290,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$U-1XV2e_RtKQBHJUi6ZIQ2b3uEja0oRVcqX7Cg_sG0A"},
{"content":{"body":"fn📢method","msgtype":"m.text","org.matrix.msc1767.text":"fn📢method"},"ts":1648570147287,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6LBKwa7qKudLLOKssyxQx6SNVaFe4CrV174B4nlEtj8"},
{"content":{"body":"> <@kriskowal:matrix.org> APL needs an EMOJI reboot.\n\nWe should make a Unicode proposal to make emoji variants of every APL symbol.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V4g496CmPFWA_Fz-Rci7JUE3P1v5HlqSiHRiFD_f_tk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>APL needs an EMOJI reboot.</blockquote></mx-reply>We should make a Unicode proposal to make emoji variants of every APL symbol.","m.relates_to":{"m.in_reply_to":{"event_id":"$V4g496CmPFWA_Fz-Rci7JUE3P1v5HlqSiHRiFD_f_tk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> APL needs an EMOJI reboot.\n\nWe should make a Unicode proposal to make emoji variants of every APL symbol.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V4g496CmPFWA_Fz-Rci7JUE3P1v5HlqSiHRiFD_f_tk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>APL needs an EMOJI reboot.</blockquote></mx-reply>We should make a Unicode proposal to make emoji variants of every APL symbol.","mimetype":"text/html"}]},"ts":1648570161711,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W93KNIC4s0gWOABF1xwM-v_ztu53UJLQ8Iuz8_ZZLbg"},
{"content":{"body":"jschoi: just use variation selector 16","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: just use variation selector 16","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: just use variation selector 16","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: just use variation selector 16","mimetype":"text/html"}]},"ts":1648570186804,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ASq3uc4Z7O64oAi_rfcSPSfwVqYoDT81Ax041ZHjjz0"},
{"content":{"body":"... why do I know about VS16","msgtype":"m.text","org.matrix.msc1767.text":"... why do I know about VS16"},"ts":1648570224772,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$S08i25vqZhhpY4do-jVunorFTt3LtMYzzWZazrjSbfc"},
{"content":{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","format":"org.matrix.custom.html","formatted_body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/plain"},{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$ASq3uc4Z7O64oAi_rfcSPSfwVqYoDT81Ax041ZHjjz0"}}},"ts":1648570258188,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZN6_twfz9SId8LNy2UKUwjM0RtUnfxlKUdwX0sf1d0o"},
{"content":{"body":"> <@michaelficarra:matrix.org> jschoi: just use variation selector 16\n\n * Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ASq3uc4Z7O64oAi_rfcSPSfwVqYoDT81Ax041ZHjjz0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: just use variation selector 16</blockquote></mx-reply> * Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","m.new_content":{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","format":"org.matrix.custom.html","formatted_body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/plain"},{"body":"Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZN6_twfz9SId8LNy2UKUwjM0RtUnfxlKUdwX0sf1d0o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> jschoi: just use variation selector 16\n\n * Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ASq3uc4Z7O64oAi_rfcSPSfwVqYoDT81Ax041ZHjjz0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: just use variation selector 16</blockquote></mx-reply> * Yes, but they still don’t have the Emoji property! Imagine…opening your emoji picker and seeing your old APL friends in cartoony, colorful emoji glory.","mimetype":"text/html"}]},"ts":1648570270099,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$A1GG6p1WdF4wudYkM6BFTZuoKmjMzoC3FnGILAZawKc"},
{"content":{"body":"> <@michaelficarra:matrix.org> ... why do I know about VS16\n\nMy excuse is working on Emoji Quest and OpenMoji in the “spare time”.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S08i25vqZhhpY4do-jVunorFTt3LtMYzzWZazrjSbfc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>... why do I know about VS16</blockquote></mx-reply>My excuse is working on Emoji Quest and OpenMoji in the “spare time”.","m.relates_to":{"m.in_reply_to":{"event_id":"$S08i25vqZhhpY4do-jVunorFTt3LtMYzzWZazrjSbfc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> ... why do I know about VS16\n\nMy excuse is working on Emoji Quest and OpenMoji in the “spare time”.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S08i25vqZhhpY4do-jVunorFTt3LtMYzzWZazrjSbfc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>... why do I know about VS16</blockquote></mx-reply>My excuse is working on Emoji Quest and OpenMoji in the “spare time”.","mimetype":"text/html"}]},"ts":1648570299011,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$g1YriMcOsHtVfonccIsSMWyshxOxu2X40FIfbnCrTI0"},
{"content":{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","format":"org.matrix.custom.html","formatted_body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/plain"},{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$OgQDTv6nW7AErBZex74OBwrShViiPKk2XurrRHxovmI"}}},"ts":1648570377205,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9AFMWYSheQZiPA-hBKPOXP3ZlF4-5HPa1naa5ccdxAw"},
{"content":{"body":"> <@kriskowal:matrix.org> fn📢method\n\nthis but unironically","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6LBKwa7qKudLLOKssyxQx6SNVaFe4CrV174B4nlEtj8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>fn📢method</blockquote></mx-reply>this but unironically","m.relates_to":{"m.in_reply_to":{"event_id":"$6LBKwa7qKudLLOKssyxQx6SNVaFe4CrV174B4nlEtj8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> fn📢method\n\nthis but unironically","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6LBKwa7qKudLLOKssyxQx6SNVaFe4CrV174B4nlEtj8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>fn📢method</blockquote></mx-reply>this but unironically","mimetype":"text/html"}]},"ts":1648570379641,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$k1rPH8kOE5HrlwmVXjpwn22HEmF6zJCM2WNyGAGPzf4"},
{"content":{"body":"> <@bakkot:matrix.org> I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language\n\n * I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OgQDTv6nW7AErBZex74OBwrShViiPKk2XurrRHxovmI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language</blockquote></mx-reply> * I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","m.new_content":{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","format":"org.matrix.custom.html","formatted_body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/plain"},{"body":"I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$9AFMWYSheQZiPA-hBKPOXP3ZlF4-5HPa1naa5ccdxAw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language\n\n * I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OgQDTv6nW7AErBZex74OBwrShViiPKk2XurrRHxovmI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I do not think \"this code is common for jordan, in particular\", is a good reason to syntax to the language</blockquote></mx-reply> * I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.","mimetype":"text/html"}]},"ts":1648570492006,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$i1DIbAvKrXGcX6EQK2eE4dp9NkOgbBeqFnY49SiqDiU"},
{"content":{"body":"> <@jschoi:matrix.org> I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.\n\nI like the argument, but it’s more like common * clunky = value, value / cost > 1 == worth optimizing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9AFMWYSheQZiPA-hBKPOXP3ZlF4-5HPa1naa5ccdxAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.</blockquote></mx-reply>I like the argument, but it’s more like common * clunky = value, value / cost &gt; 1 == worth optimizing.","m.relates_to":{"m.in_reply_to":{"event_id":"$9AFMWYSheQZiPA-hBKPOXP3ZlF4-5HPa1naa5ccdxAw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that `.call` is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.\n\nI like the argument, but it’s more like common * clunky = value, value / cost > 1 == worth optimizing.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9AFMWYSheQZiPA-hBKPOXP3ZlF4-5HPa1naa5ccdxAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>I have been careful not to mention stuff like Node core with call-this—in the end, it’s about the fact that <code>.call</code> is one of the most common operations in the language (cf. the corpus analysis), and common × clunky → worth optimizing.</blockquote></mx-reply>I like the argument, but it’s more like common * clunky = value, value / cost &gt; 1 == worth optimizing.","mimetype":"text/html"}]},"ts":1648570572462,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$cPcvMCcdHYw-HDviA80P7RPB58QsUuI7EBocSiJHJw4"},
{"content":{"body":"And when every objective argument runs to ground, there’s still a value judgement to be made.","msgtype":"m.text","org.matrix.msc1767.text":"And when every objective argument runs to ground, there’s still a value judgement to be made."},"ts":1648570627058,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6xZqUGCcYhDGxf7t-xEo2_ozTb6cTCvVnnbbQ_jl24A"},
{"content":{"body":" * And when every objective argument runs to ground, there’s still a value judgement to be made.","m.new_content":{"body":"And when every objective argument runs to ground, there’s still a value judgement to be made.","msgtype":"m.text","org.matrix.msc1767.text":"And when every objective argument runs to ground, there’s still a value judgement to be made."},"m.relates_to":{"event_id":"$6xZqUGCcYhDGxf7t-xEo2_ozTb6cTCvVnnbbQ_jl24A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * And when every objective argument runs to ground, there’s still a value judgement to be made."},"ts":1648570632468,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EOKR46U5dSqd9uX5A0ovGzLlPCn07oA1r-j6XYpTy5g"},
{"content":{"body":"I think I could be swayed by an argument of the form “this obviates the need for uncurryThis”, but I don’t have the spoons to make that argument.","msgtype":"m.text","org.matrix.msc1767.text":"I think I could be swayed by an argument of the form “this obviates the need for uncurryThis”, but I don’t have the spoons to make that argument."},"ts":1648570705282,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mcNM_SNciSQNniuUI4z-tma-IdLxH-cC0_Ili1deE1M"},
{"content":{"body":"As for syntax, there’s also a very high opportunity cost.","msgtype":"m.text","org.matrix.msc1767.text":"As for syntax, there’s also a very high opportunity cost."},"ts":1648570743206,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XK6Ep-JvreO8dGc8k4NWB5fawK_Bi-SikZCLfhh1Uo0"},
{"content":{"body":"Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","format":"org.matrix.custom.html","formatted_body":"Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/plain"},{"body":"Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$cPcvMCcdHYw-HDviA80P7RPB58QsUuI7EBocSiJHJw4"}}},"ts":1648570816739,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$HmUVL0GCfGfpHWSZCzgw-q_vVEvmDOKlTwO7Y9ICu98"},
{"content":{"body":"> <@kriskowal:matrix.org> I like the argument, but it’s more like common * clunky = value, value / cost > 1 == worth optimizing.\n\n * Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cPcvMCcdHYw-HDviA80P7RPB58QsUuI7EBocSiJHJw4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I like the argument, but it’s more like common * clunky = value, value / cost &gt; 1 == worth optimizing.</blockquote></mx-reply> * Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","m.new_content":{"body":"Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","format":"org.matrix.custom.html","formatted_body":"Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/plain"},{"body":"Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$HmUVL0GCfGfpHWSZCzgw-q_vVEvmDOKlTwO7Y9ICu98","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I like the argument, but it’s more like common * clunky = value, value / cost > 1 == worth optimizing.\n\n * Yeah, it’s true, we do have to consider cost. \nI wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cPcvMCcdHYw-HDviA80P7RPB58QsUuI7EBocSiJHJw4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I like the argument, but it’s more like common * clunky = value, value / cost &gt; 1 == worth optimizing.</blockquote></mx-reply> * Yeah, it’s true, we do have to consider cost.<br>I wonder if there are truly any significant concrete costs to call-this—enough to come close to outweighing the improvement in common × clunky.","mimetype":"text/html"}]},"ts":1648570837339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1wN3Fl18TnjiXR9wg5QywacPnzJ0r43ir8w6b60PAjA"},
{"content":{"body":"e.g., https://github.com/tc39/proposal-eventual-send#completing-the-proxy-analogy proposes some uses of tilde that would establish a precedent for tilde indicating an async operator.","msgtype":"m.text","org.matrix.msc1767.text":"e.g., https://github.com/tc39/proposal-eventual-send#completing-the-proxy-analogy proposes some uses of tilde that would establish a precedent for tilde indicating an async operator."},"ts":1648570877594,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hYFHn9TCcA_2f4hIuU-mxqnVVoiTjRnL22Zev_GTD1Y"},
{"content":{"body":"There’s also the matter that common is not necessarily bad.","msgtype":"m.text","org.matrix.msc1767.text":"There’s also the matter that common is not necessarily bad."},"ts":1648570950868,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6fH68ped-dejYyn_C9e178SBpB-dLWQacjoh_YIRf6s"},
{"content":{"body":"Yeah, commonality is just a multiplier. In this case we’re multiplying the commonality by something that is bad (the clunkiness of `.call`).\nAs for eventual-send syntax, we certainly can try to be careful to bikeshed both proposals to not conceptually conflict with each other. \nIt’s true that introducing new syntax makes it slightly harder to introduce newer syntax in the future. ","format":"org.matrix.custom.html","formatted_body":"Yeah, commonality is just a multiplier. In this case we’re multiplying the commonality by something that is bad (the clunkiness of <code>.call</code>).<br>As for eventual-send syntax, we certainly can try to be careful to bikeshed both proposals to not conceptually conflict with each other.<br>It’s true that introducing new syntax makes it slightly harder to introduce newer syntax in the future.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, commonality is just a multiplier. In this case we’re multiplying the commonality by something that is bad (the clunkiness of `.call`).\nAs for eventual-send syntax, we certainly can try to be careful to bikeshed both proposals to not conceptually conflict with each other. \nIt’s true that introducing new syntax makes it slightly harder to introduce newer syntax in the future. ","mimetype":"text/plain"},{"body":"Yeah, commonality is just a multiplier. In this case we’re multiplying the commonality by something that is bad (the clunkiness of <code>.call</code>).<br>As for eventual-send syntax, we certainly can try to be careful to bikeshed both proposals to not conceptually conflict with each other.<br>It’s true that introducing new syntax makes it slightly harder to introduce newer syntax in the future.","mimetype":"text/html"}]},"ts":1648571046390,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$IlJlCNqIBhmvQOopveh6PfbaPPmTvha2I1InWuznxe0"},
{"content":{"body":"But, this is an olive branch 🕊, I’m already strongly in support of eliminating uncurryThis.","msgtype":"m.text","org.matrix.msc1767.text":"But, this is an olive branch 🕊, I’m already strongly in support of eliminating uncurryThis."},"ts":1648571048228,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yyHQtSr4Sq6lYJLcoUNVDe9qA6mFQwZP4aa_pw9pFt0"},
{"content":{"body":"I am rooting for eventual send. Even if Reading about E and Cap’n Proto still stretches my brain.","msgtype":"m.text","org.matrix.msc1767.text":"I am rooting for eventual send. Even if Reading about E and Cap’n Proto still stretches my brain."},"ts":1648571106663,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9FwWVhvxJKTwhiwj0yNFt6tOV4Qb7OjoDwUUuQn1ufo"},
{"content":{"body":" * I am rooting for eventual send. Even if reading about E and Cap’n Proto still stretches my brain.","m.new_content":{"body":"I am rooting for eventual send. Even if reading about E and Cap’n Proto still stretches my brain.","msgtype":"m.text","org.matrix.msc1767.text":"I am rooting for eventual send. Even if reading about E and Cap’n Proto still stretches my brain."},"m.relates_to":{"event_id":"$9FwWVhvxJKTwhiwj0yNFt6tOV4Qb7OjoDwUUuQn1ufo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I am rooting for eventual send. Even if reading about E and Cap’n Proto still stretches my brain."},"ts":1648571109420,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Wr4wMsNwl3Q-S3m56fbXWnuuCPVRkzyuPzAWTBdOUZQ"},
{"content":{"body":"I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development.","msgtype":"m.text","org.matrix.msc1767.text":"I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development."},"ts":1648571137099,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5EigLH9kSMlo5wjMH0kgqIivmyqP4RXEytwoxKppIxk"},
{"content":{"body":"Did you know Q had eventual send support? :-)","msgtype":"m.text","org.matrix.msc1767.text":"Did you know Q had eventual send support? :-)"},"ts":1648571177643,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OIKfXQbgDowvXw5o6lFhM7p60-eAI2QVT_W3KawyX5A"},
{"content":{"body":"> <@kriskowal:matrix.org> I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development.\n\nNext time I present call-this, I will devote time to a slide titled “This Is Not For Node Core”, haha.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5EigLH9kSMlo5wjMH0kgqIivmyqP4RXEytwoxKppIxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development.</blockquote></mx-reply>Next time I present call-this, I will devote time to a slide titled “This Is Not For Node Core”, haha.","m.relates_to":{"m.in_reply_to":{"event_id":"$5EigLH9kSMlo5wjMH0kgqIivmyqP4RXEytwoxKppIxk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development.\n\nNext time I present call-this, I will devote time to a slide titled “This Is Not For Node Core”, haha.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5EigLH9kSMlo5wjMH0kgqIivmyqP4RXEytwoxKppIxk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I could be convinced that syntax is a good solution to uncurryThis even if its usage is limited to Node.js core development.</blockquote></mx-reply>Next time I present call-this, I will devote time to a slide titled “This Is Not For Node Core”, haha.","mimetype":"text/html"}]},"ts":1648571234834,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RQmxQ2ezZQMUY15Y6SycInNPjR8CBKsTthg2865v29E"},
{"content":{"body":"I won't be able to do note taking for the upcoming 2 hour block, so it'd be great if someone else could help out there.","msgtype":"m.text","org.matrix.msc1767.text":"I won't be able to do note taking for the upcoming 2 hour block, so it'd be great if someone else could help out there."},"ts":1648572912663,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$GouPC0P2NxNBMqbBYmGtjXlw4qqUgiPKpymHdZFcCVU"},
{"content":{"body":"thanks for all your help so far Luca Casonato !","format":"org.matrix.custom.html","formatted_body":"thanks for all your help so far <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> !","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"thanks for all your help so far Luca Casonato !","mimetype":"text/plain"},{"body":"thanks for all your help so far <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> !","mimetype":"text/html"}]},"ts":1648572957346,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wod0aNn6dY-6DFSJ7mAmRv3-nek3Z65zu54axIn_1_M"},
{"content":{"body":"thanks, Luca","msgtype":"m.text","org.matrix.msc1767.text":"thanks, Luca"},"ts":1648573000194,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$u8VPefwCfhTlU_0bICO7CGcdTXEhmoCuWF_n6IA03s8"},
{"content":{"body":"Yulia will be chairing Types as Comments today.  I'll be recusing as chair because I'm invested in the proposal.  I will also try to convey this through the medium of light.  A blue background means I'm on types.  Yellow means I'm on chairing.","msgtype":"m.text","org.matrix.msc1767.text":"Yulia will be chairing Types as Comments today.  I'll be recusing as chair because I'm invested in the proposal.  I will also try to convey this through the medium of light.  A blue background means I'm on types.  Yellow means I'm on chairing."},"ts":1648573010619,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1wNHdwl0DZu6Xz0c-pybfybCnPT_HDVcDW2aGttws7o"},
{"content":{"body":"I can do some notetaking but I'm nodding off occasionally, so will need at least one other person","msgtype":"m.text","org.matrix.msc1767.text":"I can do some notetaking but I'm nodding off occasionally, so will need at least one other person"},"ts":1648573267344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PmTgHlegbnGXzZWYSHfcd0-4QKwfKbUY8-KBlVrxwgw"},
{"content":{"body":"I can help with notes for a while","msgtype":"m.text"},"ts":1648573707004,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J9N0xSd4VzQabX9phfCDeeQtjlEVqnVWDe4_Lf208z0"},
{"content":{"body":"what the hell","msgtype":"m.text","org.matrix.msc1767.text":"what the hell"},"ts":1648574119374,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$l5CIIToPW5Ab_4nJeRQ8lpe_px9cQoHl1_lRSLaFN4M"},
{"content":{"body":"> You’ve been removed from the \"Delegates\" team on the \"Ecma TC39\" organization.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>You’ve been removed from the &quot;Delegates&quot; team on the &quot;Ecma TC39&quot; organization.</p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> You’ve been removed from the \"Delegates\" team on the \"Ecma TC39\" organization.","mimetype":"text/plain"},{"body":"<blockquote>\n<p>You’ve been removed from the &quot;Delegates&quot; team on the &quot;Ecma TC39&quot; organization.</p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1648574121560,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UBJC4XjxKJe0nK7WcjqFr0iDVYY0wlQ63NSH7-XjVwc"},
{"content":{"body":"rkirsling: https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qaDYVljoQO2iG0kW3fltpvxxLyKK4oi51kViN-FVWNY?via=matrix.org&via=mozilla.org&via=igalia.com","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qaDYVljoQO2iG0kW3fltpvxxLyKK4oi51kViN-FVWNY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rkirsling: https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qaDYVljoQO2iG0kW3fltpvxxLyKK4oi51kViN-FVWNY?via=matrix.org&via=mozilla.org&via=igalia.com","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qaDYVljoQO2iG0kW3fltpvxxLyKK4oi51kViN-FVWNY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com","mimetype":"text/html"}]},"ts":1648574148212,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vja9CmnNdvLSaTIN7OMUCUADpC8tbQRzK6OzvNzcO7Q"},
{"content":{"body":"ah cool","msgtype":"m.text","org.matrix.msc1767.text":"ah cool"},"ts":1648574167167,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$esU7XAgMFIP5RJmDysWrrWYsFOoOTxT_zB8YuCu47ZY"},
{"content":{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","format":"org.matrix.custom.html","formatted_body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","mimetype":"text/plain"},{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","mimetype":"text/html"}]},"ts":1648574168888,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$NBI2wYdrGK_Xly5XDyKA-zOfkUeoL2hRaaUBARtyjEg"},
{"content":{"body":"rkirsling: also, check your DMs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: also, check your DMs","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rkirsling: also, check your DMs","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: also, check your DMs","mimetype":"text/html"}]},"ts":1648574180456,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K4mdHxi_DxrOAV94PreugSLnIwGB2ec2nLwoG4uKCeQ"},
{"content":{"body":" * All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","format":"org.matrix.custom.html","formatted_body":" * All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","m.new_content":{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","format":"org.matrix.custom.html","formatted_body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","mimetype":"text/plain"},{"body":"All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$NBI2wYdrGK_Xly5XDyKA-zOfkUeoL2hRaaUBARtyjEg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)","mimetype":"text/plain"},{"body":" * All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)","mimetype":"text/html"}]},"ts":1648574201235,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$9dqkae9HBhSw2c5ZDci--AKTamTi6BkHXvotwU-kPFA"},
{"content":{"body":"thanks 🙇","msgtype":"m.text","org.matrix.msc1767.text":"thanks 🙇"},"ts":1648574243024,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$taMBCbq82wMhvVL49vc_I8amg5H3nOhd2ObU38_g8xw"},
{"content":{"body":"should've also noticed the Admin-and-Business notifications, whoops","msgtype":"m.text","org.matrix.msc1767.text":"should've also noticed the Admin-and-Business notifications, whoops"},"ts":1648574280440,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$WWXfIYLXnuk0MqZCvqa2TFLtDlnc-9d5E-WJ9B-y2t8"},
{"content":{"body":"np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop","msgtype":"m.text","org.matrix.msc1767.text":"np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop"},"ts":1648574321923,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X_11a0CyKWTYZFrDR-yHzKFBL2-oHEDsoTa181E3HQg"},
{"content":{"body":"oh weird","msgtype":"m.text","org.matrix.msc1767.text":"oh weird"},"ts":1648574385578,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$cESDkcycogkNcTjHCyPyqjb8SbAXX1lk_U9cyMp4JIM"},
{"content":{"body":" * np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop (in this case. in the general case, it might not be, so i understand this choice)","m.new_content":{"body":"np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop (in this case. in the general case, it might not be, so i understand this choice)","msgtype":"m.text","org.matrix.msc1767.text":"np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop (in this case. in the general case, it might not be, so i understand this choice)"},"m.relates_to":{"event_id":"$X_11a0CyKWTYZFrDR-yHzKFBL2-oHEDsoTa181E3HQg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * np, it's a scary warning from github :-( sadly they don't notice that removal from the delegates team while leaving you on a child team of delegates is a noop (in this case. in the general case, it might not be, so i understand this choice)"},"ts":1648574427728,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MEUyshGIvYFgxjtjBrg4p5egzRXPDoptPnfp6Yiob24"},
{"content":{"body":"> <@lucacasonato:matrix.org> All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)\n\nalso got this and immediately DM'ed Brian lol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NBI2wYdrGK_Xly5XDyKA-zOfkUeoL2hRaaUBARtyjEg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)</blockquote></mx-reply>also got this and immediately DM'ed Brian lol","m.relates_to":{"m.in_reply_to":{"event_id":"$NBI2wYdrGK_Xly5XDyKA-zOfkUeoL2hRaaUBARtyjEg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from Rob Palmer further up)\n\nalso got this and immediately DM'ed Brian lol","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NBI2wYdrGK_Xly5XDyKA-zOfkUeoL2hRaaUBARtyjEg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>All, if you get a mail saying Jordan has removed you as a member of TC39 Delegates on Github, fear not, you are still part of the Delegates team.  Jordan is creating Github sub-teams per-member to help us track membership better. (from <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> further up)</blockquote></mx-reply>also got this and immediately DM'ed Brian lol","mimetype":"text/html"}]},"ts":1648574766448,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$jujylledNomTlZF3nhaFsTAcKsrIMGLkvwmQ3eYiq6Y"},
{"content":{"body":"lol","msgtype":"m.text","org.matrix.msc1767.text":"lol"},"ts":1648574995986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZJ_1QAPVuEq3x_DNWvvQoX-NIjNmVJGieSHMbG6D2XU"},
{"content":{"body":"i wish i could include an explanatory message in that notification","msgtype":"m.text","org.matrix.msc1767.text":"i wish i could include an explanatory message in that notification"},"ts":1648575009028,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FL4CxCDC9tuBcNmi69warEE54tMidkwr5vCPEaGL1RA"},
{"content":{"body":"sorry sorry I just restarted it","msgtype":"m.text","org.matrix.msc1767.text":"sorry sorry I just restarted it"},"ts":1648575097168,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PlQTrTnob9euhUi2M-K7GB47vsaBMtMmz4mPrqbnbUo"},
{"content":{"body":"but yes we probably don't need to capture this part","msgtype":"m.text","org.matrix.msc1767.text":"but yes we probably don't need to capture this part"},"ts":1648575104801,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K0N_hJImVNaJXFcBm7s9QxdZov39mlN-mTDjjUsce4w"},
{"content":{"body":"wish these slides did not use the maximally verbose form of comments here","msgtype":"m.text","org.matrix.msc1767.text":"wish these slides did not use the maximally verbose form of comments here"},"ts":1648575318087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uuqBY-45R01VvStUGPzzX7o3yHJb65dlHO_w3UBQjek"},
{"content":{"body":"it feels like a strawman","msgtype":"m.text","org.matrix.msc1767.text":"it feels like a strawman"},"ts":1648575343798,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pJwTy3asLZjHFIfs-PZItFJjy_np6mt54jf8DeuKU9Y"},
{"content":{"body":"can you show the normal, terser form?","msgtype":"m.text","org.matrix.msc1767.text":"can you show the normal, terser form?"},"ts":1648575397725,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cH_2myMdECVxTgWEFt2Hm-Kpe6Goz4AHzHUx11pPSBA"},
{"content":{"body":"flow's are the concise version which exists today, but you could also imagine plenty of other forms, e.g.\n\n```\n//: (number, number) => number\nfunction (a, b) {\n  return a + b\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>flow's are the concise version which exists today, but you could also imagine plenty of other forms, e.g.</p>\n<pre><code>//: (number, number) =&gt; number\nfunction (a, b) {\n  return a + b\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"flow's are the concise version which exists today, but you could also imagine plenty of other forms, e.g.\n\n```\n//: (number, number) => number\nfunction (a, b) {\n  return a + b\n}\n```","mimetype":"text/plain"},{"body":"<p>flow's are the concise version which exists today, but you could also imagine plenty of other forms, e.g.</p>\n<pre><code>//: (number, number) =&gt; number\nfunction (a, b) {\n  return a + b\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1648575530026,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w12VF5VGFESf1quQZv53KyKGArBvunBc9aFiclx30GE"},
{"content":{"body":"cool, thanks","msgtype":"m.text","org.matrix.msc1767.text":"cool, thanks"},"ts":1648575569725,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1d0Ziydqcv0Oo5T5AJqvB1bkGJviJlnS9F8bekvrRnA"},
{"content":{"body":"the closest thing they had to that was\n\n```\n/*\n * @type { (a: number, b: number) => number }\n *\n*/\n```\nor something like that","format":"org.matrix.custom.html","formatted_body":"<p>the closest thing they had to that was</p>\n<pre><code>/*\n * @type { (a: number, b: number) =&gt; number }\n *\n*/\n</code></pre>\n<p>or something like that</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the closest thing they had to that was\n\n```\n/*\n * @type { (a: number, b: number) => number }\n *\n*/\n```\nor something like that","mimetype":"text/plain"},{"body":"<p>the closest thing they had to that was</p>\n<pre><code>/*\n * @type { (a: number, b: number) =&gt; number }\n *\n*/\n</code></pre>\n<p>or something like that</p>\n","mimetype":"text/html"}]},"ts":1648575573244,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RPWEK6h2U8NM2LFGK2jYYbBsT3Hgto785xnOdxntCeA"},
{"content":{"body":"note that this form is not available in typescript","msgtype":"m.text","org.matrix.msc1767.text":"note that this form is not available in typescript"},"ts":1648575578302,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$7Dv3G1gtCnASPxoYuyxKyoJwyuC6BMbtZjJ2nD4cA2U"},
{"content":{"body":"isn't, but could be","msgtype":"m.text","org.matrix.msc1767.text":"isn't, but could be"},"ts":1648575586869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bgMRhgxOOkD95No8cyDzOsUVBPpcJygRhtbCXYZImyI"},
{"content":{"body":"well, that's TS's decision","msgtype":"m.text","org.matrix.msc1767.text":"well, that's TS's decision"},"ts":1648575590326,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GFchjVy0wzAFjiSyfJ5c5NXNZ28yi5-dqyoreOqKxMQ"},
{"content":{"body":"yea the second example ts can do today","msgtype":"m.text","org.matrix.msc1767.text":"yea the second example ts can do today"},"ts":1648575595813,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$NE9fpw8vI2phd85QTS7bGNc3A5AyuwXq50jBmIpv3aQ"},
{"content":{"body":"yea that is true, just clarifying","msgtype":"m.text","org.matrix.msc1767.text":"yea that is true, just clarifying"},"ts":1648575624942,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$fyRo3gyDSIfsJSblvPPd4FnSc2LRn8ze7yvu_b2LT2o"},
{"content":{"body":"are we just trying to make it so people can run their code without first running a program that strips the signatures?","msgtype":"m.text","org.matrix.msc1767.text":"are we just trying to make it so people can run their code without first running a program that strips the signatures?"},"ts":1648575701867,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0Mz6zEPUAGRCM_-AnyUiwA-Z-SFBM84hNA2Qmgkwegw"},
{"content":{"body":"that program would complete nearly instantly","msgtype":"m.text","org.matrix.msc1767.text":"that program would complete nearly instantly"},"ts":1648575710148,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vW6Ic8zPOY4FKXWPoRuJ8xU-3qzrMnpGJ-VENrHjupc"},
{"content":{"body":"that is the thing we are trying to do, yes","msgtype":"m.text","org.matrix.msc1767.text":"that is the thing we are trying to do, yes"},"ts":1648575741105,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_DpSGoltJc01uJFCg6Pph7ZZ6ttZ34_LY-DefwZqpTM"},
{"content":{"body":"the only value I can see in this proposal is formalising some comment attachment rules","msgtype":"m.text","org.matrix.msc1767.text":"the only value I can see in this proposal is formalising some comment attachment rules"},"ts":1648575764571,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e_EC6xRxCC8KJ2fZhpo3HI_nr74MZfXtl2_ag63GGqg"},
{"content":{"body":"the goal is not just to strip ts to be clear, it is mostly to reserve syntax space for a new kind of comments","msgtype":"m.text","org.matrix.msc1767.text":"the goal is not just to strip ts to be clear, it is mostly to reserve syntax space for a new kind of comments"},"ts":1648575771048,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$pYLncRjicbh22GZxH2xN7Kr_gK7LME83gE-wUo_CEQ4"},
{"content":{"body":"this would happen to match types","msgtype":"m.text","org.matrix.msc1767.text":"this would happen to match types"},"ts":1648575785999,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$w9J9wRo-VRlPF-5FtBmo_WcFYBw0mr7hnSaD7sr5LWM"},
{"content":{"body":"Robin Ricard: the syntax space is already reserved though?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: the syntax space is already reserved though?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: the syntax space is already reserved though?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: the syntax space is already reserved though?","mimetype":"text/html"}]},"ts":1648575801089,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6EvI1RozTK7KoNSAPD0YT8INSQy1ivVJ2htozUSLmvk"},
{"content":{"body":"also we can do that without making it a valid program","msgtype":"m.text","org.matrix.msc1767.text":"also we can do that without making it a valid program"},"ts":1648575819705,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YQp5HEaF_FAs0ioB14jzmOoyO6TQSHj_jC3YFF1SSJM"},
{"content":{"body":"well, `:` is reserved, `interface` just isn't used yet","format":"org.matrix.custom.html","formatted_body":"well, <code>:</code> is reserved, <code>interface</code> just isn't used yet","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"well, `:` is reserved, `interface` just isn't used yet","mimetype":"text/plain"},{"body":"well, <code>:</code> is reserved, <code>interface</code> just isn't used yet","mimetype":"text/html"}]},"ts":1648575844013,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AYdTUS0wVLkWN2i0KW88F3IQl57CqglYhSYpRSk8XhU"},
{"content":{"body":"> <@michaelficarra:matrix.org> Robin Ricard: the syntax space is already reserved though?\n\nyou mean `: something` ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6EvI1RozTK7KoNSAPD0YT8INSQy1ivVJ2htozUSLmvk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: the syntax space is already reserved though?</blockquote></mx-reply>you mean <code>: something</code> ?","m.relates_to":{"m.in_reply_to":{"event_id":"$6EvI1RozTK7KoNSAPD0YT8INSQy1ivVJ2htozUSLmvk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Robin Ricard: the syntax space is already reserved though?\n\nyou mean `: something` ?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6EvI1RozTK7KoNSAPD0YT8INSQy1ivVJ2htozUSLmvk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: the syntax space is already reserved though?</blockquote></mx-reply>you mean <code>: something</code> ?","mimetype":"text/html"}]},"ts":1648575850035,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$mn9Qgc_j3I8G6OuZOBqQGnyxqoVyKeoiBBm9t0eefTk"},
{"content":{"body":"Robin Ricard: yep","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yep","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: yep","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yep","mimetype":"text/html"}]},"ts":1648575865545,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tHs7fWKhHeMhdiAz3Fa1G42Ej1vHrEZ1yRpNm3FmjTc"},
{"content":{"body":"Many things need to be reserved, for example, class elements modifiers.","msgtype":"m.text","org.matrix.msc1767.text":"Many things need to be reserved, for example, class elements modifiers."},"ts":1648575875551,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$i3EVgU4kNK8RbryK8rS2gGhUianzRwSweKe44IozUt4"},
{"content":{"body":"I have to go in 10 mins, we will need another note taker","msgtype":"m.text"},"ts":1648575904592,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$043992B0y4iM-dDNM4eDXiQ97bSqZQKQP4AoKDgVprM"},
{"content":{"body":"(my agenda item is going to say \"what if we just reserve '`:` followed by anything with balanced-brackets' in a few spots\")","format":"org.matrix.custom.html","formatted_body":"(my agenda item is going to say &quot;what if we just reserve '<code>:</code> followed by anything with balanced-brackets' in a few spots&quot;)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(my agenda item is going to say \"what if we just reserve '`:` followed by anything with balanced-brackets' in a few spots\")","mimetype":"text/plain"},{"body":"(my agenda item is going to say &quot;what if we just reserve '<code>:</code> followed by anything with balanced-brackets' in a few spots&quot;)","mimetype":"text/html"}]},"ts":1648575905439,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MXx5D3oxKLt-my8vZ_fA0bg8y9wgCSytGLsvT-j5MVo"},
{"content":{"body":"nicolo-ribaudo: I'll pick it up again","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I'll pick it up again","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: I'll pick it up again","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I'll pick it up again","mimetype":"text/html"}]},"ts":1648575913711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$592f_jfKp8T2X_jhoMcCGuwHCaQ6irqmnQS4VMnPHjE"},
{"content":{"body":"there is still a difference between reserving and tolerating it","msgtype":"m.text","org.matrix.msc1767.text":"there is still a difference between reserving and tolerating it"},"ts":1648575938832,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$GPh5J8WBxkV5kpKWaBC10Sj0bKGgfGCpCDbI9z57qIM"},
{"content":{"body":"should i request more note takers?","msgtype":"m.text","org.matrix.msc1767.text":"should i request more note takers?"},"ts":1648575952667,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$tP6QUOJdcYnRFFCYDMNczJcxbMZX-49zTKA8_9_sPJU"},
{"content":{"body":"> <@yulia:mozilla.org> should i request more note takers?\n\n No, we are enough now","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tP6QUOJdcYnRFFCYDMNczJcxbMZX-49zTKA8_9_sPJU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />should i request more note takers?</blockquote></mx-reply>No, we are enough now","m.relates_to":{"m.in_reply_to":{"event_id":"$tP6QUOJdcYnRFFCYDMNczJcxbMZX-49zTKA8_9_sPJU"}},"msgtype":"m.text"},"ts":1648575984055,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$x4rWOWEKGKFxnZyx8gi0z40NhKe7a8ni6E38Bvi6NgI"},
{"content":{"body":"> <@rricard:mozilla.org> there is still a difference between reserving and tolerating it\n\nwhat's the diff? From the tooling perspective it seems same...?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GPh5J8WBxkV5kpKWaBC10Sj0bKGgfGCpCDbI9z57qIM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>there is still a difference between reserving and tolerating it</blockquote></mx-reply>what's the diff? From the tooling perspective it seems same...?","m.relates_to":{"m.in_reply_to":{"event_id":"$GPh5J8WBxkV5kpKWaBC10Sj0bKGgfGCpCDbI9z57qIM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rricard:mozilla.org> there is still a difference between reserving and tolerating it\n\nwhat's the diff? From the tooling perspective it seems same...?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GPh5J8WBxkV5kpKWaBC10Sj0bKGgfGCpCDbI9z57qIM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>there is still a difference between reserving and tolerating it</blockquote></mx-reply>what's the diff? From the tooling perspective it seems same...?","mimetype":"text/html"}]},"ts":1648575992772,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$aWDSmj70LiJwbE2Y0Wln7X6ARP6bvbQy9qhmshhj30M"},
{"content":{"body":"Robin Ricard: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?","mimetype":"text/html"}]},"ts":1648575998246,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qRiAieMPrLj-196wTBwDT7FWs2blnZp2oIhtdJweH-Q"},
{"content":{"body":"reserving means the engine will syntaxerror","msgtype":"m.text","org.matrix.msc1767.text":"reserving means the engine will syntaxerror"},"ts":1648576007395,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$8aG-AYvZJXibVL9eqORv1c-ix_bo7QUUMSBYJ4rgFro"},
{"content":{"body":"> <@rricard:mozilla.org> reserving means the engine will syntaxerror\n\nalready ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8aG-AYvZJXibVL9eqORv1c-ix_bo7QUUMSBYJ4rgFro?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>reserving means the engine will syntaxerror</blockquote></mx-reply>already ?","m.relates_to":{"m.in_reply_to":{"event_id":"$8aG-AYvZJXibVL9eqORv1c-ix_bo7QUUMSBYJ4rgFro"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rricard:mozilla.org> reserving means the engine will syntaxerror\n\nalready ?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8aG-AYvZJXibVL9eqORv1c-ix_bo7QUUMSBYJ4rgFro?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>reserving means the engine will syntaxerror</blockquote></mx-reply>already ?","mimetype":"text/html"}]},"ts":1648576027299,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$4puL2c0tb8XLr970W1rijrDLhnKWXH5BB8Bba35giSM"},
{"content":{"body":"ok I have a dumb example","msgtype":"m.text","org.matrix.msc1767.text":"ok I have a dumb example"},"ts":1648576028901,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$Y_uiFIlG_Ekg_9Kp-o8ub7ne1FKCDAvm8B-6TFICC_U"},
{"content":{"body":"I need to test out some code in a repl","msgtype":"m.text","org.matrix.msc1767.text":"I need to test out some code in a repl"},"ts":1648576039502,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$SQ5IUPhGLlRO7fXeQ6rR2J55yzqXQOhr_lJIJ92OPik"},
{"content":{"body":"I need to copy, run the typestripper and then paste in my inspector","msgtype":"m.text","org.matrix.msc1767.text":"I need to copy, run the typestripper and then paste in my inspector"},"ts":1648576060186,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$UEOANJIo-sCADExV7LOpOjXj-VanZyZwEAOSbsbwQ04"},
{"content":{"body":"> <@michaelficarra:matrix.org> Robin Ricard: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?\n\nYes, but this \"just\" is much much more painful than it initially sounds. Having the engine do this natively would be a huge win for very very many people.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qRiAieMPrLj-196wTBwDT7FWs2blnZp2oIhtdJweH-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?</blockquote></mx-reply>Yes, but this &quot;just&quot; is much much more painful than it initially sounds. Having the engine do this natively would be a huge win for very very many people.","m.relates_to":{"m.in_reply_to":{"event_id":"$qRiAieMPrLj-196wTBwDT7FWs2blnZp2oIhtdJweH-Q"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Robin Ricard: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?\n\nYes, but this \"just\" is much much more painful than it initially sounds. Having the engine do this natively would be a huge win for very very many people.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qRiAieMPrLj-196wTBwDT7FWs2blnZp2oIhtdJweH-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: yeah and again, the value of allowing it is just that you don't have to run some incredibly simple annotation stripper?</blockquote></mx-reply>Yes, but this &quot;just&quot; is much much more painful than it initially sounds. Having the engine do this natively would be a huge win for very very many people.","mimetype":"text/html"}]},"ts":1648576062935,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$EJ69JzzsgTvMXUNXNKskFmHqyl0Bisx_7fVeUuyBMBM"},
{"content":{"body":"shu: I love your TCQ topic","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I love your TCQ topic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: I love your TCQ topic","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I love your TCQ topic","mimetype":"text/html"}]},"ts":1648576075202,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TygwHF3hBe9yWV6-qY0P2rzIZhajvggaBMwfZ64UKtc"},
{"content":{"body":"for instance, with deno, I can just throw it in the repl","msgtype":"m.text","org.matrix.msc1767.text":"for instance, with deno, I can just throw it in the repl"},"ts":1648576087676,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$pVQDbZOn58jFAeMZ7rymdQGPyuVR6JG3qyVbhz3rcms"},
{"content":{"body":"are you reading a value judgment into it Michael Ficarra ?","format":"org.matrix.custom.html","formatted_body":"are you reading a value judgment into it <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"are you reading a value judgment into it Michael Ficarra ?","mimetype":"text/plain"},{"body":"are you reading a value judgment into it <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> ?","mimetype":"text/html"}]},"ts":1648576093740,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I_NLt58zbznx5lO-w4mLKq0CK4dcy94x18jFmo6jIu8"},
{"content":{"body":"Luca Casonato: can you back that up somehow?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: can you back that up somehow?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: can you back that up somehow?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: can you back that up somehow?","mimetype":"text/html"}]},"ts":1648576094639,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Xac7xn7OV8zUnbPf2kqFUroVlH7tSy0N62dam7BJJDA"},
{"content":{"body":"> <@rricard:mozilla.org> for instance, with deno, I can just throw it in the repl\n\nalso with `npx ts-node`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pVQDbZOn58jFAeMZ7rymdQGPyuVR6JG3qyVbhz3rcms?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>for instance, with deno, I can just throw it in the repl</blockquote></mx-reply>also with <code>npx ts-node</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$pVQDbZOn58jFAeMZ7rymdQGPyuVR6JG3qyVbhz3rcms"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rricard:mozilla.org> for instance, with deno, I can just throw it in the repl\n\nalso with `npx ts-node`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pVQDbZOn58jFAeMZ7rymdQGPyuVR6JG3qyVbhz3rcms?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br>for instance, with deno, I can just throw it in the repl</blockquote></mx-reply>also with <code>npx ts-node</code>","mimetype":"text/html"}]},"ts":1648576099781,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UfT6Nh8buIT-ujhjRfkJoYxwRfTG9udygEPNthvCmgA"},
{"content":{"body":"which is ok, I would like to do it in my browser if possible","msgtype":"m.text","org.matrix.msc1767.text":"which is ok, I would like to do it in my browser if possible"},"ts":1648576125150,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$5PXP1V7vCJ-nxr4KVQ3X15BBsbtqJePg3P_wxY_U-8U"},
{"content":{"body":"browser console could do this if it wanted","msgtype":"m.text","org.matrix.msc1767.text":"browser console could do this if it wanted"},"ts":1648576142346,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$749o5yqfOraci5MK4atgc_GulhBlrzqZyV8J5Pc8BCI"},
{"content":{"body":"I might be narrowing the motivation here, it is just an example","msgtype":"m.text","org.matrix.msc1767.text":"I might be narrowing the motivation here, it is just an example"},"ts":1648576153881,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$iYtaaDmR8vdtYKjEIhqWfmODAfHV949M6PfstimKZWA"},
{"content":{"body":"it already allows you to write `{ [x]: foo() }` which is not valid JS (on its own)","format":"org.matrix.custom.html","formatted_body":"it already allows you to write <code>{ [x]: foo() }</code> which is not valid JS (on its own)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it already allows you to write `{ [x]: foo() }` which is not valid JS (on its own)","mimetype":"text/plain"},{"body":"it already allows you to write <code>{ [x]: foo() }</code> which is not valid JS (on its own)","mimetype":"text/html"}]},"ts":1648576162939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ST1UWk2tOLHGU2IA1MEwiizRt0ADm15-hD6KJji8vy4"},
{"content":{"body":"I will organize the queue according to topic, FYI","msgtype":"m.text","org.matrix.msc1767.text":"I will organize the queue according to topic, FYI"},"ts":1648576166776,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$DTz-Xgbr80uvqSycWOhmjeXYflQeMgI_C-V-FSjshP8"},
{"content":{"body":"> <@michaelficarra:matrix.org> Luca Casonato: can you back that up somehow?\n\nYes. Deno does this and folks are incredibly happy about it compared to the current situation in browsers and Node. Deno effectively does TS type stripping during module loading, before loading it into the engine, fully transparently.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xac7xn7OV8zUnbPf2kqFUroVlH7tSy0N62dam7BJJDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: can you back that up somehow?</blockquote></mx-reply>Yes. Deno does this and folks are incredibly happy about it compared to the current situation in browsers and Node. Deno effectively does TS type stripping during module loading, before loading it into the engine, fully transparently.","m.relates_to":{"m.in_reply_to":{"event_id":"$Xac7xn7OV8zUnbPf2kqFUroVlH7tSy0N62dam7BJJDA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Luca Casonato: can you back that up somehow?\n\nYes. Deno does this and folks are incredibly happy about it compared to the current situation in browsers and Node. Deno effectively does TS type stripping during module loading, before loading it into the engine, fully transparently.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xac7xn7OV8zUnbPf2kqFUroVlH7tSy0N62dam7BJJDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: can you back that up somehow?</blockquote></mx-reply>Yes. Deno does this and folks are incredibly happy about it compared to the current situation in browsers and Node. Deno effectively does TS type stripping during module loading, before loading it into the engine, fully transparently.","mimetype":"text/html"}]},"ts":1648576168872,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$p9vyAjMrICWIBUV_e6dtY-j3YiBx4cF-gw-dvqUNU3U"},
{"content":{"body":"Please make it clear what specifically your topic is about, first set will be around syntax","msgtype":"m.text","org.matrix.msc1767.text":"Please make it clear what specifically your topic is about, first set will be around syntax"},"ts":1648576191265,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$uGYj-RWCEVIlOgeerxlokDA88ThrirkxSoygFsoiIfM"},
{"content":{"body":"Luca Casonato: a node REPL wrapper like `ts-node` can also make it just as easy to do","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: a node REPL wrapper like <code>ts-node</code> can also make it just as easy to do","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: a node REPL wrapper like `ts-node` can also make it just as easy to do","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: a node REPL wrapper like <code>ts-node</code> can also make it just as easy to do","mimetype":"text/html"}]},"ts":1648576219567,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DbCOagvEEORl4LoEFGovDcBvBgarsNrJ3aPBidGFjmY"},
{"content":{"body":"Next round is on the goal","msgtype":"m.text","org.matrix.msc1767.text":"Next round is on the goal"},"ts":1648576276408,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$KJiGjl1qne0fR3ZIj89Fl8ybwRjEs_eq9QYFhlAhUuk"},
{"content":{"body":"You can see with the proliferation of tooling like `esbuild` and `swc` that folks want to make the \"inner loop\" much faster. The amount of investment in the space shows that this is a real problem that many people run into. I think that alone should qualify the topic as something we should consider in some form. ","format":"org.matrix.custom.html","formatted_body":"You can see with the proliferation of tooling like <code>esbuild</code> and <code>swc</code> that folks want to make the &quot;inner loop&quot; much faster. The amount of investment in the space shows that this is a real problem that many people run into. I think that alone should qualify the topic as something we should consider in some form.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You can see with the proliferation of tooling like `esbuild` and `swc` that folks want to make the \"inner loop\" much faster. The amount of investment in the space shows that this is a real problem that many people run into. I think that alone should qualify the topic as something we should consider in some form. ","mimetype":"text/plain"},{"body":"You can see with the proliferation of tooling like <code>esbuild</code> and <code>swc</code> that folks want to make the &quot;inner loop&quot; much faster. The amount of investment in the space shows that this is a real problem that many people run into. I think that alone should qualify the topic as something we should consider in some form.","mimetype":"text/html"}]},"ts":1648576284015,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$w8_oYX8s9mdLVX9WQJPujy_JiRTLc3N5QToilU1IObI"},
{"content":{"body":"biiiiig difference between a .1s tool and a 20s tool","msgtype":"m.text","org.matrix.msc1767.text":"biiiiig difference between a .1s tool and a 20s tool"},"ts":1648576323179,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0QsOdudvCCjYwlUbNNPNsmUn9wsoYfyBu5Hk_6j9WKw"},
{"content":{"body":"Luca Casonato: if this \"inner loop\" is build time, I am sure that just stripping types will not take long","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: if this &quot;inner loop&quot; is build time, I am sure that just stripping types will not take long","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: if this \"inner loop\" is build time, I am sure that just stripping types will not take long","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: if this &quot;inner loop&quot; is build time, I am sure that just stripping types will not take long","mimetype":"text/html"}]},"ts":1648576328239,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PtP8MzPfGrskMSUPOYsbpfskEs8jJEGUqeQpzM7Rbrw"},
{"content":{"body":"which is my experience of esbuild vs webpack or whatever","msgtype":"m.text","org.matrix.msc1767.text":"which is my experience of esbuild vs webpack or whatever"},"ts":1648576329709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$acSn3uG9gtz-4lDJAb9_9cIIFlpiGklkfFwytaqxud8"},
{"content":{"body":"Also, reminder -- this is going for stage 1: we want to answer \"is this problem space worth exploring\"","msgtype":"m.text","org.matrix.msc1767.text":"Also, reminder -- this is going for stage 1: we want to answer \"is this problem space worth exploring\""},"ts":1648576345759,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$on3bAwdUGPtHLFCjuFqfqUJHTXhWjQkZWCvKUmjQy60"},
{"content":{"body":"> <@michaelficarra:matrix.org> Luca Casonato: a node REPL wrapper like `ts-node` can also make it just as easy to do\n\nts node is not very friendly to es modules ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DbCOagvEEORl4LoEFGovDcBvBgarsNrJ3aPBidGFjmY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: a node REPL wrapper like <code>ts-node</code> can also make it just as easy to do</blockquote></mx-reply>ts node is not very friendly to es modules","m.relates_to":{"m.in_reply_to":{"event_id":"$DbCOagvEEORl4LoEFGovDcBvBgarsNrJ3aPBidGFjmY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Luca Casonato: a node REPL wrapper like `ts-node` can also make it just as easy to do\n\nts node is not very friendly to es modules ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DbCOagvEEORl4LoEFGovDcBvBgarsNrJ3aPBidGFjmY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: a node REPL wrapper like <code>ts-node</code> can also make it just as easy to do</blockquote></mx-reply>ts node is not very friendly to es modules","mimetype":"text/html"}]},"ts":1648576350424,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DscgtSH1z-cM2724KautwJQKztpovJk6JsSVzq6PZVE"},
{"content":{"body":"not so obvious there is similar big difference between no tool and .1s tool","msgtype":"m.text","org.matrix.msc1767.text":"not so obvious there is similar big difference between no tool and .1s tool"},"ts":1648576355274,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aWGgNj7OxQjpDqDhk3_Tm9UFI7I7xh75FUzjEUfkZAg"},
{"content":{"body":"it's also your own dx when starting a new project","msgtype":"m.text","org.matrix.msc1767.text":"it's also your own dx when starting a new project"},"ts":1648576356348,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$t7L4sswA5pioxi88of06rdpkMwGw9fROmCfhz2qSQGg"},
{"content":{"body":"> <@bakkot:matrix.org> which is my experience of esbuild vs webpack or whatever\n\nhanding that off to the browser though may not be better, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$acSn3uG9gtz-4lDJAb9_9cIIFlpiGklkfFwytaqxud8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>which is my experience of esbuild vs webpack or whatever</blockquote></mx-reply>handing that off to the browser though may not be better, right?","m.relates_to":{"m.in_reply_to":{"event_id":"$acSn3uG9gtz-4lDJAb9_9cIIFlpiGklkfFwytaqxud8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> which is my experience of esbuild vs webpack or whatever\n\nhanding that off to the browser though may not be better, right?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$acSn3uG9gtz-4lDJAb9_9cIIFlpiGklkfFwytaqxud8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>which is my experience of esbuild vs webpack or whatever</blockquote></mx-reply>handing that off to the browser though may not be better, right?","mimetype":"text/html"}]},"ts":1648576357705,"senderName":"Josh Blaney","senderId":"@joshbdev:matrix.org","id":"$II-Z3N3RgGNqXxb-8MenUdD2yR1aNvOWAV7x_FEAMxA"},
{"content":{"body":"I actually make use a lot of the comments syntax for that reason, I just don't want to set up any tooling","msgtype":"m.text","org.matrix.msc1767.text":"I actually make use a lot of the comments syntax for that reason, I just don't want to set up any tooling"},"ts":1648576377052,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$MhrpzkOoYiSO8ONgPOq9dUBeGBeaOjlwgb8CX1njQ7U"},
{"content":{"body":"Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/html"}]},"ts":1648576383390,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$ZXJPaLbSK0YDFGRAo3gkn1T4Fa6wIQ42r29ZT_7-M9U"},
{"content":{"body":" * Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","m.new_content":{"body":"Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZXJPaLbSK0YDFGRAo3gkn1T4Fa6wIQ42r29ZT_7-M9U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Michael Ficarra: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: It's not just time, it's also project complexity. Many smaller projects that currently have build steps would not require any build steps if types would not have to be stripped.","mimetype":"text/html"}]},"ts":1648576390452,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$-o6LKK43ov4ajQrhnk3-xIxU4fCXB1q_IQ_OmPEw3RM"},
{"content":{"body":"comments are just very clunky as my project grows","msgtype":"m.text","org.matrix.msc1767.text":"comments are just very clunky as my project grows"},"ts":1648576400544,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$sb1sPcCHtruad4Dl_8q5y2wV1ZTqiFbnicvNtpPK0_0"},
{"content":{"body":"I admit the flow syntax from earlier is looking good still ","msgtype":"m.text","org.matrix.msc1767.text":"I admit the flow syntax from earlier is looking good still "},"ts":1648576446289,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$vTY0ynv5OSvEHflyrDq15ZO2rhXjzKIuUSQh6ZOZv-g"},
{"content":{"body":"14 items on the queue, that might be a record","msgtype":"m.text","org.matrix.msc1767.text":"14 items on the queue, that might be a record"},"ts":1648576520905,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qAGKHTExYHEBRgVLXoCV1lQeFgdXUcjWP1zJkMUUF4Y"},
{"content":{"body":"I still think the only problem shown here is a need to associate comments with particular portions of the program","msgtype":"m.text","org.matrix.msc1767.text":"I still think the only problem shown here is a need to associate comments with particular portions of the program"},"ts":1648576531314,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zz_dj7Yvtbdx0OgByYGsIMonY_RdNRNFE-oApXK16rg"},
{"content":{"body":"that is not even shown here","msgtype":"m.text","org.matrix.msc1767.text":"that is not even shown here"},"ts":1648576542768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-Cfts084sqgVhf98SUTnEr_VhkjUMmOrfN3Rn867lNg"},
{"content":{"body":"on-brand for types: lots of context for the same output :P","msgtype":"m.text","org.matrix.msc1767.text":"on-brand for types: lots of context for the same output :P"},"ts":1648576546155,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$06yXvmrJP2hpRAHCpUxgW4DvtPpidX6OP7C6Bea5d7Q"},
{"content":{"body":"different tools can have different rules, that's fine","msgtype":"m.text","org.matrix.msc1767.text":"different tools can have different rules, that's fine"},"ts":1648576548184,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-b1pDcuiRqZrWNjxe7D4NnFwAVxctOXW-FVwVBHWU9I"},
{"content":{"body":"bakkot: you have to read between the lines","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: you have to read between the lines","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: you have to read between the lines","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: you have to read between the lines","mimetype":"text/html"}]},"ts":1648576558200,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sPMjiCQQgZYSZJ3wIcTxGkUK3oKmHxTjc2MCfjCNiVM"},
{"content":{"body":"waldemar If you want a specific exaple for one of your topics, `a ? (b): c => (d): e => f` is fully ambiguous (it has two possible parser results)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>If you want a specific exaple for one of your topics, `a ? (b): c => (d): e => f` is fully ambiguous (it has two possible parser results)","msgtype":"m.text"},"ts":1648576578065,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nrjY-HZLg7UhrmFOXNzMPU1SNlJe9SBo8MaY7cYUQv4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> waldemar If you want a specific exaple for one of your topics, `a ? (b): c => (d): e => f` is fully ambiguous (it has two possible parser results)\n\nBut this is probably not a discussion for stage 1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nrjY-HZLg7UhrmFOXNzMPU1SNlJe9SBo8MaY7cYUQv4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br /><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>If you want a specific exaple for one of your topics, `a ? (b): c => (d): e => f` is fully ambiguous (it has two possible parser results)</blockquote></mx-reply>But this is probably not a discussion for stage 1","m.relates_to":{"m.in_reply_to":{"event_id":"$nrjY-HZLg7UhrmFOXNzMPU1SNlJe9SBo8MaY7cYUQv4"}},"msgtype":"m.text"},"ts":1648576668886,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RKXRl136DQwH8eQvdEQogo-zG47S_1ATkHUJeTcZmvg"},
{"content":{"body":"Each person with concerns each should all try to be clear if they are blocking Stage 1.","msgtype":"m.text"},"ts":1648576866451,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sBhOsuj6aGOQ1Leqbx5BY8lZW3HhkrCuxqPAMg4xhtg"},
{"content":{"body":"* Each person with concerns each should all try to be clear if they are blocking Stage 1.","m.new_content":{"body":"Each person with concerns each should all try to be clear if they are blocking Stage 1.","msgtype":"m.text"},"m.relates_to":{"event_id":"$sBhOsuj6aGOQ1Leqbx5BY8lZW3HhkrCuxqPAMg4xhtg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648576896673,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FO1ScRoqW1dfte9ILLqMKHRxdQMcLRTOtFTh3YbIlKY"},
{"content":{"body":"jschoi: \"blocking stage 1\" is more likely to be \"unconvinced that a problem worth solving has been clearly identified\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;blocking stage 1&quot; is more likely to be &quot;unconvinced that a problem worth solving has been clearly identified&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: \"blocking stage 1\" is more likely to be \"unconvinced that a problem worth solving has been clearly identified\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;blocking stage 1&quot; is more likely to be &quot;unconvinced that a problem worth solving has been clearly identified&quot;","mimetype":"text/html"}]},"ts":1648576967456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-ArTWFhsl3OKtfWt9cW6eqdafPuQbO1q_9Bykjt1eUU"},
{"content":{"body":"\"blocking\" is usually a thing that happens when a particular design decision has been made that is unacceptable, but pre-stage-1 proposals have nothing like that set in stone","msgtype":"m.text","org.matrix.msc1767.text":"\"blocking\" is usually a thing that happens when a particular design decision has been made that is unacceptable, but pre-stage-1 proposals have nothing like that set in stone"},"ts":1648577002612,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$85pTLDa8RLZYAlHdAfS1CO3ZP3JOiNbuuDzzJ_rtGHs"},
{"content":{"body":"HE Shi-Jun: since the types are ignored, we don't really need a type definition -- that can be done in comments","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: since the types are ignored, we don't really need a type definition -- that can be done in comments","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun: since the types are ignored, we don't really need a type definition -- that can be done in comments","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: since the types are ignored, we don't really need a type definition -- that can be done in comments","mimetype":"text/html"}]},"ts":1648577100009,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$LdQt-qbmD__mbNTkWKV3K2hgbj1CDXcjU2jep5W05QE"},
{"content":{"body":"for example, as an iterative approach","msgtype":"m.text","org.matrix.msc1767.text":"for example, as an iterative approach"},"ts":1648577104322,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$G4nnX8LwvNMIQtBXfI8EgHeNztYkrGXIS9SFkxJKJ2w"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I have to go in 10 mins, we will need another note taker\n\nI'm going now, one more note taker will be really appreciated!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$043992B0y4iM-dDNM4eDXiQ97bSqZQKQP4AoKDgVprM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br />I have to go in 10 mins, we will need another note taker</blockquote></mx-reply>I'm going now, one more note taker will be really appreciated!","m.relates_to":{"m.in_reply_to":{"event_id":"$043992B0y4iM-dDNM4eDXiQ97bSqZQKQP4AoKDgVprM"}},"msgtype":"m.text"},"ts":1648577118191,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$A0BbnhvB29nN8Wasz_VfJfakcdgyBO6ThlblZF6QVmQ"},
{"content":{"body":"should i pause and ask?","msgtype":"m.text","org.matrix.msc1767.text":"should i pause and ask?"},"ts":1648577127396,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7DktSmsRoYELku-bfS37CQcF1gmf3rtcodUebdkFvzE"},
{"content":{"body":"> <@jschoi:matrix.org> Each person with concerns each should all try to be clear if they are blocking Stage 1.\n\nI don't think this is a good framework in which to think about it. I would prefer that we assume people are giving constructive feedback, identifying concerns, and discussing opinions on the tradeoffs the proposal authors have made. This way of thinking about it seems needlessly adversarial to me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sBhOsuj6aGOQ1Leqbx5BY8lZW3HhkrCuxqPAMg4xhtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Each person with concerns each should all try to be clear if they are blocking Stage 1.</blockquote></mx-reply>I don't think this is a good framework in which to think about it. I would prefer that we assume people are giving constructive feedback, identifying concerns, and discussing opinions on the tradeoffs the proposal authors have made. This way of thinking about it seems needlessly adversarial to me","m.relates_to":{"m.in_reply_to":{"event_id":"$sBhOsuj6aGOQ1Leqbx5BY8lZW3HhkrCuxqPAMg4xhtg"}},"msgtype":"m.text"},"ts":1648577129199,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$oiGvd7PbHgL2NitYI9gH3UmOYO-MafcLOv9ps6g_7UE"},
{"content":{"body":"do we have anyone?","msgtype":"m.text","org.matrix.msc1767.text":"do we have anyone?"},"ts":1648577131245,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$G9gGm6hkpIzIzWlfDf1GTTGdJfMqyXbIdBA7TWw7nr8"},
{"content":{"body":"There is a single person","msgtype":"m.text"},"ts":1648577141546,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_BleGelCiYGrTEcHFL591Dg6P0sTmf09pOGiOII0me8"},
{"content":{"body":"so, my point is that `:` is already the main way you use types","format":"org.matrix.custom.html","formatted_body":"so, my point is that <code>:</code> is already the main way you use types","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, my point is that `:` is already the main way you use types","mimetype":"text/plain"},{"body":"so, my point is that <code>:</code> is already the main way you use types","mimetype":"text/html"}]},"ts":1648577141548,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3xLhJ72_nKOJTQgpurQPBXG5eYdWxyqH7nHEFZNJ2os"},
{"content":{"body":"and incentivises paying more attention to people who claim that they will block stage 1","msgtype":"m.text"},"ts":1648577141985,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$kZzy0Lk3fqx_uI9Bsz2lUz1TfQsmrOCXbYC9ZB7-BjY"},
{"content":{"body":"I can help with notes","msgtype":"m.text","org.matrix.msc1767.text":"I can help with notes"},"ts":1648577147691,"senderName":"Pieter Ouwerkerk","senderId":"@pouwerkerk:matrix.org","id":"$BPU9HHPKDwZWCKtCu7JC6wZZHZ_oYlPZ_jQIwA_8qis"},
{"content":{"body":"the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","format":"org.matrix.custom.html","formatted_body":"<p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","mimetype":"text/plain"},{"body":"<p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1648577152215,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$4Nez1UP7RdfAV9bLFfmRQLtp_kdEJYf0YJN9he2mEis"},
{"content":{"body":"`function (a: number, b: number): number {}` would be legal with my proposal","format":"org.matrix.custom.html","formatted_body":"<code>function (a: number, b: number): number {}</code> would be legal with my proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`function (a: number, b: number): number {}` would be legal with my proposal","mimetype":"text/plain"},{"body":"<code>function (a: number, b: number): number {}</code> would be legal with my proposal","mimetype":"text/html"}]},"ts":1648577156184,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rZmnqp0LdjmObjY27vwxQ5qWE-4USQVRPtH-14F_kJQ"},
{"content":{"body":"Thanks yulia!!","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>!","msgtype":"m.text"},"ts":1648577161714,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$88MQpmHSxMCxuzBzZrcVgcKEKqcdLwUxN_iDi_vmQLo"},
{"content":{"body":"it's only the `interface {}` stuff which would not","format":"org.matrix.custom.html","formatted_body":"it's only the <code>interface {}</code> stuff which would not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's only the `interface {}` stuff which would not","mimetype":"text/plain"},{"body":"it's only the <code>interface {}</code> stuff which would not","mimetype":"text/html"}]},"ts":1648577169034,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m6GBL9Nb2EtnPENJ-jSjyWGQecqRQPCZ_HEEZB7OMms"},
{"content":{"body":"> <@pchimento:igalia.com> and incentivises paying more attention to people who claim that they will block stage 1\n\nThis is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24kZzy0Lk3fqx_uI9Bsz2lUz1TfQsmrOCXbYC9ZB7-BjY\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>and incentivises paying more attention to people who claim that they will block stage 1</blockquote></mx-reply>This is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.","m.relates_to":{"m.in_reply_to":{"event_id":"$kZzy0Lk3fqx_uI9Bsz2lUz1TfQsmrOCXbYC9ZB7-BjY"}},"msgtype":"m.text"},"ts":1648577189339,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$lny-k4OBGIptBh8jBRyJyGQs-TGO3l7HqrcG6esvzBg"},
{"content":{"body":"you'd have to write `:interface {}` or something","format":"org.matrix.custom.html","formatted_body":"you'd have to write <code>:interface {}</code> or something","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you'd have to write `:interface {}` or something","mimetype":"text/plain"},{"body":"you'd have to write <code>:interface {}</code> or something","mimetype":"text/html"}]},"ts":1648577190653,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ETNXlSSD89o0wWNsPd43T15nmSV_5TxO-Y389Vwl5uE"},
{"content":{"body":" * the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","format":"org.matrix.custom.html","formatted_body":" * <p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","m.new_content":{"body":"the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","format":"org.matrix.custom.html","formatted_body":"<p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","mimetype":"text/plain"},{"body":"<p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$4Nez1UP7RdfAV9bLFfmRQLtp_kdEJYf0YJN9he2mEis","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * the motivation to me targets 2 populations:\n\n- end users setting up projects\n- tooling developers\n\nfor end users:\n\n- I can setup a typed project without ever downloading something from npm for instance, npm to me is not js\n- copy-pasting in a repl is very cool\n\ntooling developers:\n\n- if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts","mimetype":"text/plain"},{"body":" * <p>the motivation to me targets 2 populations:</p>\n<ul>\n<li>end users setting up projects</li>\n<li>tooling developers</li>\n</ul>\n<p>for end users:</p>\n<ul>\n<li>I can setup a typed project without ever downloading something from npm for instance, npm to me is not js</li>\n<li>copy-pasting in a repl is very cool</li>\n</ul>\n<p>tooling developers:</p>\n<ul>\n<li>if the syntax carve out is clearly defined, I can just implement ecma262 syntax and forget about ts - for instance today eslint ecosystem is split, you have to use a special parser for ts</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1648577200752,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$GfdKdL5k0jBJydIVXRysgGxmkyWEhdjNi9u8l8V3utY"},
{"content":{"body":"> <@jschoi:matrix.org> This is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.\n\nit's \"is this actually a problem space we want to spend more committee time on\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lny-k4OBGIptBh8jBRyJyGQs-TGO3l7HqrcG6esvzBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>This is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.</blockquote></mx-reply>it's &quot;is this actually a problem space we want to spend more committee time on&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$lny-k4OBGIptBh8jBRyJyGQs-TGO3l7HqrcG6esvzBg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> This is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.\n\nit's \"is this actually a problem space we want to spend more committee time on\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lny-k4OBGIptBh8jBRyJyGQs-TGO3l7HqrcG6esvzBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>This is reasonable. It makes me wonder what the purpose of discussion before Stage 1 ought to be, then.</blockquote></mx-reply>it's &quot;is this actually a problem space we want to spend more committee time on&quot;","mimetype":"text/html"}]},"ts":1648577215658,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_CSZN4y0ue9RbCkSKdQ4oRqeTvlapghXdZp7Hlh4_c8"},
{"content":{"body":"> <@ljharb:matrix.org> it's \"is this actually a problem space we want to spend more committee time on\"\n\nYes, which then makes me wonder: should we discourage bikeshedding questions before Stage 1? Because I think there are a lot of bikeshedding questions in the queue. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_CSZN4y0ue9RbCkSKdQ4oRqeTvlapghXdZp7Hlh4_c8\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it's &quot;is this actually a problem space we want to spend more committee time on&quot;</blockquote></mx-reply>Yes, which then makes me wonder: should we discourage bikeshedding questions before Stage 1? Because I think there are a lot of bikeshedding questions in the queue.","m.relates_to":{"m.in_reply_to":{"event_id":"$_CSZN4y0ue9RbCkSKdQ4oRqeTvlapghXdZp7Hlh4_c8"}},"msgtype":"m.text"},"ts":1648577259772,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$zFNjSyj1TfkSblGl4n460pxGIziBOcSUdjSAsUn39aM"},
{"content":{"body":"yes, we should and often do","msgtype":"m.text","org.matrix.msc1767.text":"yes, we should and often do"},"ts":1648577294058,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WP1cT1ZCzEM3TMJTEey3ktX55vxtubeADfDjN7yKAUg"},
{"content":{"body":"this proposal's a bit tricky tho since it's got a pretty large and fleshed out solution space","msgtype":"m.text","org.matrix.msc1767.text":"this proposal's a bit tricky tho since it's got a pretty large and fleshed out solution space"},"ts":1648577317708,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EZ3CRuuvKO-UylbyoOWDVn0ceXCkECX2dmegKEE9J4c"},
{"content":{"body":"we should definitely discourage bikeshedding before stage 1","msgtype":"m.text","org.matrix.msc1767.text":"we should definitely discourage bikeshedding before stage 1"},"ts":1648577343304,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8yYt9ji3xFW6rjCVz230DyyGiSCD3I6oPi6jbW2qhMM"},
{"content":{"body":"we often fall into the trap of pre-stage-1 bikeshedding when the proposal contains an example solution that is unnecessarily fleshed out","msgtype":"m.text","org.matrix.msc1767.text":"we often fall into the trap of pre-stage-1 bikeshedding when the proposal contains an example solution that is unnecessarily fleshed out"},"ts":1648577373267,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8oATig9h7l3Fyp3k9LGCTEaaqQyJqho1Heas6-j0__w"},
{"content":{"body":"this proposal sure does have a lot of flesh in","msgtype":"m.text","org.matrix.msc1767.text":"this proposal sure does have a lot of flesh in"},"ts":1648577388774,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HQ22BFJdtHivGIBQwdLrRBmvXroqpT_fxXYHZyUDJFM"},
{"content":{"body":"I agree, these syntax questions are really not that important yet","msgtype":"m.text","org.matrix.msc1767.text":"I agree, these syntax questions are really not that important yet"},"ts":1648577395244,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$N_iiRCXeiRzxNLPZX3fWci5RC3OodLeMHugUtS4mENM"},
{"content":{"body":"yes, sometimes that is necessary, but most of the time it is not","msgtype":"m.text","org.matrix.msc1767.text":"yes, sometimes that is necessary, but most of the time it is not"},"ts":1648577402082,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TzU5Ky4X0HJ-6fnrnuNHwpJAjVNVMe2wt7PkaFRKVKY"},
{"content":{"body":"I'm strong on bakkot's side here, of keeping this much more generic rather than including all these grammars. For example, I'm *actively hampered* regularly by Python's type annotations being meaningless-but-interpreted, because it tries to resolve names at runtime and affects how I have to write the rest of my code. The more uninterpreted we can make this, the better.","format":"org.matrix.custom.html","formatted_body":"I'm strong on bakkot's side here, of keeping this much more generic rather than including all these grammars. For example, I'm <em>actively hampered</em> regularly by Python's type annotations being meaningless-but-interpreted, because it tries to resolve names at runtime and affects how I have to write the rest of my code. The more uninterpreted we can make this, the better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm strong on bakkot's side here, of keeping this much more generic rather than including all these grammars. For example, I'm *actively hampered* regularly by Python's type annotations being meaningless-but-interpreted, because it tries to resolve names at runtime and affects how I have to write the rest of my code. The more uninterpreted we can make this, the better.","mimetype":"text/plain"},{"body":"I'm strong on bakkot's side here, of keeping this much more generic rather than including all these grammars. For example, I'm <em>actively hampered</em> regularly by Python's type annotations being meaningless-but-interpreted, because it tries to resolve names at runtime and affects how I have to write the rest of my code. The more uninterpreted we can make this, the better.","mimetype":"text/html"}]},"ts":1648577409652,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$al7gLtXFBr_4uENxQ-l2iXlw15ei_VwCrmPy8F1qYK4"},
{"content":{"body":"re: wanting a more pleasant syntax than jsdoc: just make ts accept more pleasant comment syntax than jsdoc","msgtype":"m.text","org.matrix.msc1767.text":"re: wanting a more pleasant syntax than jsdoc: just make ts accept more pleasant comment syntax than jsdoc"},"ts":1648577473528,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RUBUb7v1HlyE5yBbhGOZQLmOr_rJK9LifSrzxqLpf1M"},
{"content":{"body":"jsdoc is awful","msgtype":"m.text","org.matrix.msc1767.text":"jsdoc is awful"},"ts":1648577475320,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TukaWRxPAT6LdoPXtyp6MBMcTnArja42uADVY_5GtYY"},
{"content":{"body":"`//: (number, number) => number` would be fine","format":"org.matrix.custom.html","formatted_body":"<code>//: (number, number) =&gt; number</code> would be fine","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`//: (number, number) => number` would be fine","mimetype":"text/plain"},{"body":"<code>//: (number, number) =&gt; number</code> would be fine","mimetype":"text/html"}]},"ts":1648577488421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tnlUwp1Dg0bjSW0Vis2nblL9TuM1kDzm7VUS8fFhUt8"},
{"content":{"body":"\"doctor, it hurts when i copy Java\"","msgtype":"m.text","org.matrix.msc1767.text":"\"doctor, it hurts when i copy Java\""},"ts":1648577523261,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7yEAYRmP2VHKAeulLcBjAg5RZWuY6kRzKihC_q5RJXc"},
{"content":{"body":"see: date","msgtype":"m.text","org.matrix.msc1767.text":"see: date"},"ts":1648577530805,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lhLY74eMvjcJPgDgR4Q2EkmWxTsG9UcE5HGsCVAkhUs"},
{"content":{"body":"bakkot: `Number -> Number -> Number` please","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: <code>Number -&gt; Number -&gt; Number</code> please","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: `Number -> Number -> Number` please","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: <code>Number -&gt; Number -&gt; Number</code> please","mimetype":"text/html"}]},"ts":1648577536417,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dWe_445juL4i2c1yBu-2RjuFu3RiC2CqUqCYy1q-irc"},
{"content":{"body":"no","msgtype":"m.text","org.matrix.msc1767.text":"no"},"ts":1648577543126,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nCeOTUqeN5atRhqRyrtlEufTF1fLFn6qEfubl_I-gGM"},
{"content":{"body":"no no nono","msgtype":"m.text","org.matrix.msc1767.text":"no no nono"},"ts":1648577544161,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LiNniKlBKCxzhQkS8exaXENEkmUGjsWOuSHjI3pi1Vo"},
{"content":{"body":"to what Rob said, I'd really like to never have to use TypeScript and just get shouted at by ESLint when my code doesn't match my type comments","msgtype":"m.text","org.matrix.msc1767.text":"to what Rob said, I'd really like to never have to use TypeScript and just get shouted at by ESLint when my code doesn't match my type comments"},"ts":1648577554915,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$jehw4ALStQkVetB7XdnFpOCa2dH8lY2RaohpI2mJJng"},
{"content":{"body":"Curried functions strike back…","msgtype":"m.text"},"ts":1648577560327,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rSGYks486ebG7pqDcjJ6S4ka7-W2asBHLc1YP98Ax1c"},
{"content":{"body":"A clearly defined generic carve out based on : would be very good progress I think","msgtype":"m.text","org.matrix.msc1767.text":"A clearly defined generic carve out based on : would be very good progress I think"},"ts":1648577570900,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$VPp1mo1t04ealoinJKMAtDlV6Zc6ccl02vniQYoxvZc"},
{"content":{"body":"Michael Ficarra: even haskell lets you write it either way, we can be a bit forgiving ^_^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: even haskell lets you write it either way, we can be a bit forgiving ^_^","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: even haskell lets you write it either way, we can be a bit forgiving ^_^","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: even haskell lets you write it either way, we can be a bit forgiving ^_^","mimetype":"text/html"}]},"ts":1648577591275,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rT8SMeWlWREyuoZk4aIa5agwjhC9z72L4mRgt7lHTqM"},
{"content":{"body":"before you all murder me, it was a joke!","msgtype":"m.text","org.matrix.msc1767.text":"before you all murder me, it was a joke!"},"ts":1648577612176,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$a84-2AxfA6fXLkOb2_fRk0yvnpYsF-yg03--2QIupjk"},
{"content":{"body":"> <@bakkot:matrix.org> `//: (number, number) => number` would be fine\n\nI could see a potential special comment syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tnlUwp1Dg0bjSW0Vis2nblL9TuM1kDzm7VUS8fFhUt8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>//: (number, number) =&gt; number</code> would be fine</blockquote></mx-reply>I could see a potential special comment syntax","m.relates_to":{"m.in_reply_to":{"event_id":"$tnlUwp1Dg0bjSW0Vis2nblL9TuM1kDzm7VUS8fFhUt8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> `//: (number, number) => number` would be fine\n\nI could see a potential special comment syntax","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tnlUwp1Dg0bjSW0Vis2nblL9TuM1kDzm7VUS8fFhUt8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>//: (number, number) =&gt; number</code> would be fine</blockquote></mx-reply>I could see a potential special comment syntax","mimetype":"text/html"}]},"ts":1648577614736,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jRu4DkiBeo_kaNR3zVGXtpf_9SkuIhokrXx10y_ta_w"},
{"content":{"body":"Michael Ficarra: that's a different thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: that's a different thing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: that's a different thing","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: that's a different thing","mimetype":"text/html"}]},"ts":1648577618514,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ah9k2jhthUX2rsLvhBaGdgdb4UPPCAlWhKWBmWZFhtw"},
{"content":{"body":"we have `x => y => z` and `(x, y) => z`","format":"org.matrix.custom.html","formatted_body":"we have <code>x =&gt; y =&gt; z</code> and <code>(x, y) =&gt; z</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we have `x => y => z` and `(x, y) => z`","mimetype":"text/plain"},{"body":"we have <code>x =&gt; y =&gt; z</code> and <code>(x, y) =&gt; z</code>","mimetype":"text/html"}]},"ts":1648577632045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8rCJlDx2cYS6V95ZW7TYlsNiJbLuY9xmR9I4U_SQlxk"},
{"content":{"body":"like `: (number, number) => numer` maybe that would help?","format":"org.matrix.custom.html","formatted_body":"like <code>: (number, number) =&gt; numer</code> maybe that would help?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like `: (number, number) => numer` maybe that would help?","mimetype":"text/plain"},{"body":"like <code>: (number, number) =&gt; numer</code> maybe that would help?","mimetype":"text/html"}]},"ts":1648577633838,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PMWlJxw_jdYwsdMkS7WSbPeTDyVlXFp-5uw-PLoKvpE"},
{"content":{"body":"gotta be able to type both","msgtype":"m.text","org.matrix.msc1767.text":"gotta be able to type both"},"ts":1648577637458,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mtNrnDr5NyDWzV0Bo2FFMODaZv2pXlg8qvDK9gSi7yM"},
{"content":{"body":"yes yes I know","msgtype":"m.text","org.matrix.msc1767.text":"yes yes I know"},"ts":1648577644060,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Oa116SyQlAeKwezgqhSB76JEGuCDsEhCVSOzRoNRz6c"},
{"content":{"body":"yulia: yeah that was my concrete proposal for new syntax","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: yeah that was my concrete proposal for new syntax","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: yeah that was my concrete proposal for new syntax","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: yeah that was my concrete proposal for new syntax","mimetype":"text/html"}]},"ts":1648577644923,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1GKTrM0GnHAjT6KX-uPwV59kARmogf_7w7I95_-i0-0"},
{"content":{"body":"that we say `:` is a new comment form","format":"org.matrix.custom.html","formatted_body":"that we say <code>:</code> is a new comment form","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that we say `:` is a new comment form","mimetype":"text/plain"},{"body":"that we say <code>:</code> is a new comment form","mimetype":"text/html"}]},"ts":1648577651939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AesNRuJF9kBDJvNz3ECoTDPwlD-fUgR3UCsaGDKjLXk"},
{"content":{"body":"look for my next proposal, removing higher-order functions","msgtype":"m.text","org.matrix.msc1767.text":"look for my next proposal, removing higher-order functions"},"ts":1648577658351,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$T-O5vpwBjEDBOU0gFFvP1QCq1MCWjLpsfq__qxcM9hE"},
{"content":{"body":"ooh yes yeah that sounds kind of cool","msgtype":"m.text","org.matrix.msc1767.text":"ooh yes yeah that sounds kind of cool"},"ts":1648577663090,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$s3PK8WI58P-axUPOfiGAKBuFpDabLoQlfPb3iERqDCw"},
{"content":{"body":"and would allow, e.g., an identifier or a paren-balanced thing after it","msgtype":"m.text","org.matrix.msc1767.text":"and would allow, e.g., an identifier or a paren-balanced thing after it"},"ts":1648577667726,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-iYDdER6glwJBR90KMzZ6AWsilyrMIlpLihU-_PmG3I"},
{"content":{"body":"I'm sad that's the perception because the way I read the minisite was that it was trying to specifically provide a root tool that can be used by Flow, TypeScript, and other types tools.","msgtype":"m.text","org.matrix.msc1767.text":"I'm sad that's the perception because the way I read the minisite was that it was trying to specifically provide a root tool that can be used by Flow, TypeScript, and other types tools."},"ts":1648577667729,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$uDdE4qrZOtZN91M-dakiagXhfiDiN80x_U7TgCuNSOc"},
{"content":{"body":"> <@bakkot:matrix.org> that we say `:` is a new comment form\n\nWould it still resolve names in the core language?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AesNRuJF9kBDJvNz3ECoTDPwlD-fUgR3UCsaGDKjLXk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that we say <code>:</code> is a new comment form</blockquote></mx-reply>Would it still resolve names in the core language?","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$AesNRuJF9kBDJvNz3ECoTDPwlD-fUgR3UCsaGDKjLXk"}}},"ts":1648577679415,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LxAYNNFo8y4jp0qMAgiRmOWmzEJ7E5QTf8qeTawUt-w"},
{"content":{"body":"* > <@bakkot:matrix.org> that we say `:` is a new comment form\n\nWould it still resolve names in the core language?","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AesNRuJF9kBDJvNz3ECoTDPwlD-fUgR3UCsaGDKjLXk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that we say <code>:</code> is a new comment form</blockquote></mx-reply>Would it still resolve names in the core language?","m.new_content":{"body":"> <@bakkot:matrix.org> that we say `:` is a new comment form\n\nWould it still resolve names in the core language?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AesNRuJF9kBDJvNz3ECoTDPwlD-fUgR3UCsaGDKjLXk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that we say <code>:</code> is a new comment form</blockquote></mx-reply>Would it still resolve names in the core language?","msgtype":"m.text"},"m.relates_to":{"event_id":"$LxAYNNFo8y4jp0qMAgiRmOWmzEJ7E5QTf8qeTawUt-w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1648577690938,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Irkx1Q89clDTgHKp1L9_uYHf-Y8m1-Qf6HwF6GOkpTA"},
{"content":{"body":"DEF STATEMENT IS_SHU_SERIOUS(INT TIMES_SHU_SHITPOSTED_TODAY_SO_FAR) { RETURN TRUE }","msgtype":"m.text","org.matrix.msc1767.text":"DEF STATEMENT IS_SHU_SERIOUS(INT TIMES_SHU_SHITPOSTED_TODAY_SO_FAR) { RETURN TRUE }"},"ts":1648577695203,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WBBNp5hzkGeMH0VM5buJCMKt6kABwA_1OEuU_cfjL3k"},
{"content":{"body":"TabAtkins: better make it a bigint, just to be safe","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: better make it a bigint, just to be safe","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"TabAtkins: better make it a bigint, just to be safe","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: better make it a bigint, just to be safe","mimetype":"text/html"}]},"ts":1648577741608,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jEreKxIrXPhbAVTOYnkACgqAdlLjDL8omgfOzTt8OGs"},
{"content":{"body":"-> go to TDZ","msgtype":"m.text","org.matrix.msc1767.text":"-> go to TDZ"},"ts":1648577754509,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-6T9dJmusfQK6mVZgkuDo7VZoyaml6fRJQ1tZS2RwaU"},
{"content":{"body":"apologies yulia ","format":"org.matrix.custom.html","formatted_body":"apologies <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"apologies yulia ","mimetype":"text/plain"},{"body":"apologies <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>","mimetype":"text/html"}]},"ts":1648577764209,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$caXFkGZZybK1r-YO3LPEoZomawz4Fr2CcCbboS2zHqI"},
{"content":{"body":"Back to serious: yeah I'm 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they're parseable.","msgtype":"m.text","org.matrix.msc1767.text":"Back to serious: yeah I'm 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they're parseable."},"ts":1648577921377,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NK28NL-ZQ54X0ZeNYboA4ru4kc4DDTj8glZFN7MyqL4"},
{"content":{"body":"need to step away from note taking for like 2 minutes","msgtype":"m.text"},"ts":1648577938525,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$9-hZ_5tBvZjdFlAnnYD0ZT4pvl0wRFi0T23vq0KDr_I"},
{"content":{"body":"So we can do the \"build script, but also runnable immediately\" thing that was mentioned by one of the presenters.","msgtype":"m.text","org.matrix.msc1767.text":"So we can do the \"build script, but also runnable immediately\" thing that was mentioned by one of the presenters."},"ts":1648577949586,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vNKzNilRgO-AwWecOtZ9OCFAHWmk9ufsC9O_kIma3sI"},
{"content":{"body":"> <@tabatkins:matrix.org> Back to serious: yeah I'm 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they're parseable.\n\nLooking at your comment about Python, you would be against any checking by ordinary JS compilers in those comments for whether identifiers are in scope, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NK28NL-ZQ54X0ZeNYboA4ru4kc4DDTj8glZFN7MyqL4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Back to serious: yeah I&#39;m 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they&#39;re parseable.</blockquote></mx-reply>Looking at your comment about Python, you would be against any checking by ordinary JS compilers in those comments for whether identifiers are in scope, right?","m.relates_to":{"m.in_reply_to":{"event_id":"$NK28NL-ZQ54X0ZeNYboA4ru4kc4DDTj8glZFN7MyqL4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@tabatkins:matrix.org> Back to serious: yeah I'm 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they're parseable.\n\nLooking at your comment about Python, you would be against any checking by ordinary JS compilers in those comments for whether identifiers are in scope, right?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NK28NL-ZQ54X0ZeNYboA4ru4kc4DDTj8glZFN7MyqL4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Back to serious: yeah I&#39;m 100% for being able to drop in more comment syntaxes that let us comment-annotate at a fairly tight granularity (functions, args, etc), with only the minimum amount of grammar restriction to ensure they&#39;re parseable.</blockquote></mx-reply>Looking at your comment about Python, you would be against any checking by ordinary JS compilers in those comments for whether identifiers are in scope, right?","mimetype":"text/html"}]},"ts":1648578001904,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XKFMhxe79nwvdoHc2_3SQr8174_Be8rxYyfMEN4u1qo"},
{"content":{"body":"yes, god yes, that's really bad unless your language is designed up-front to have scoping/importing rules that are designed to mesh well with types","msgtype":"m.text","org.matrix.msc1767.text":"yes, god yes, that's really bad unless your language is designed up-front to have scoping/importing rules that are designed to mesh well with types"},"ts":1648578046261,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$y5awLXbJyrarblub7IVcGICADbqUVxegjBjplyban8k"},
{"content":{"body":"like, Python's treatment of circular imports makes it *godawful* for this. mypy has a terrible hack around this (it sets a TYPE_CHECKING global, wherein you can import things that would cause a circular import error if done at runtime)","format":"org.matrix.custom.html","formatted_body":"like, Python's treatment of circular imports makes it <em>godawful</em> for this. mypy has a terrible hack around this (it sets a TYPE_CHECKING global, wherein you can import things that would cause a circular import error if done at runtime)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like, Python's treatment of circular imports makes it *godawful* for this. mypy has a terrible hack around this (it sets a TYPE_CHECKING global, wherein you can import things that would cause a circular import error if done at runtime)","mimetype":"text/plain"},{"body":"like, Python's treatment of circular imports makes it <em>godawful</em> for this. mypy has a terrible hack around this (it sets a TYPE_CHECKING global, wherein you can import things that would cause a circular import error if done at runtime)","mimetype":"text/html"}]},"ts":1648578099054,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oO6j5WwqHC3EDBcFdgscSYPtKXJHuzXwfytVU9U6XL8"},
{"content":{"body":"Rust works good as far as I understand, for instance, and was designed from the get-go for it.","msgtype":"m.text","org.matrix.msc1767.text":"Rust works good as far as I understand, for instance, and was designed from the get-go for it."},"ts":1648578123100,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$-zdod4fPpbKy6dRUKdQ4DbecuivdKSng8_i7EGiu3Oo"},
{"content":{"body":"any objections to me moving this forward?","msgtype":"m.text","org.matrix.msc1767.text":"any objections to me moving this forward?"},"ts":1648578125542,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zkgBd9hIWDBflgw-AgkEbu6d_ppFsRQhtqEqq5pgSJQ"},
{"content":{"body":"I think it's still productive","msgtype":"m.text","org.matrix.msc1767.text":"I think it's still productive"},"ts":1648578139514,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ygN9XT8S4PVQ0XEU11_hpwVXAsX-8MPuabom_vJXmkQ"},
{"content":{"body":"I especially appreciate hearing from Flow devs on this","msgtype":"m.text","org.matrix.msc1767.text":"I especially appreciate hearing from Flow devs on this"},"ts":1648578171221,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WSkaUPKZx1wVLZhWLE_oXJu4XmerRWfZtHtmCosGmzo"},
{"content":{"body":"am I missing something, I feel like this boils down to `adding new ways to add comments`, since most of this will be handled by IDE's, and it was said that these are handled as comments?","format":"org.matrix.custom.html","formatted_body":"am I missing something, I feel like this boils down to <code>adding new ways to add comments</code>, since most of this will be handled by IDE's, and it was said that these are handled as comments?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"am I missing something, I feel like this boils down to `adding new ways to add comments`, since most of this will be handled by IDE's, and it was said that these are handled as comments?","mimetype":"text/plain"},{"body":"am I missing something, I feel like this boils down to <code>adding new ways to add comments</code>, since most of this will be handled by IDE's, and it was said that these are handled as comments?","mimetype":"text/html"}]},"ts":1648578180829,"senderName":"Josh Blaney","senderId":"@joshbdev:matrix.org","id":"$LPjuu_BxVP6ebJJqSyvtsqlq3bMajo49wnO9abYSZmQ"},
{"content":{"body":"> <@yulia:mozilla.org> any objections to me moving this forward?\n\nI think it not worth to add this to the language","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zkgBd9hIWDBflgw-AgkEbu6d_ppFsRQhtqEqq5pgSJQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>any objections to me moving this forward?</blockquote></mx-reply>I think it not worth to add this to the language","m.relates_to":{"m.in_reply_to":{"event_id":"$zkgBd9hIWDBflgw-AgkEbu6d_ppFsRQhtqEqq5pgSJQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> any objections to me moving this forward?\n\nI think it not worth to add this to the language","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zkgBd9hIWDBflgw-AgkEbu6d_ppFsRQhtqEqq5pgSJQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>any objections to me moving this forward?</blockquote></mx-reply>I think it not worth to add this to the language","mimetype":"text/html"}]},"ts":1648578197792,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Sk5vH_Zz8h_eBPZkpkjeXwkA9EXRtHEYCALts-Vz3Rs"},
{"content":{"body":"if you want not to focus on the syntax, don't propose a bunch of syntax","msgtype":"m.text","org.matrix.msc1767.text":"if you want not to focus on the syntax, don't propose a bunch of syntax"},"ts":1648578213506,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N1EmCrPQVVNpJXOePQ7c7YuQ1kuUulN9QQxYV7_kQRw"},
{"content":{"body":"bakkot: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax","mimetype":"text/html"}]},"ts":1648578269447,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$SVl-0eHW2uobcA32Sgqym_oku1MT2CXiRogFsBoVnPg"},
{"content":{"body":"yeah but","msgtype":"m.text","org.matrix.msc1767.text":"yeah but"},"ts":1648578329522,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x-ZM4rnfjzF6jEXxLKrcw_UpaKoPk_X74dtiCh6uX7s"},
{"content":{"body":"don't merge it, if you don't want to talk about it","msgtype":"m.text","org.matrix.msc1767.text":"don't merge it, if you don't want to talk about it"},"ts":1648578335966,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-XlZbj7CYqKWHRsOWCVPP7xE2iEbxiAuygRXOKzNju4"},
{"content":{"body":"yes it is maybe clumsy","msgtype":"m.text","org.matrix.msc1767.text":"yes it is maybe clumsy"},"ts":1648578341726,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$vPc9yjHX1FxaAcBgXMNjtUlX3XCZmNKNB5Kp57cJDrg"},
{"content":{"body":"jschoi:  is your topic about typecheckers outreach covered?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi:  is your topic about typecheckers outreach covered?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","mimetype":"text/html"}]},"ts":1648578348437,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g"},
{"content":{"body":" * jschoi:  is your topic about outreach covered?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?","m.new_content":{"body":"jschoi:  is your topic about outreach covered?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi:  is your topic about outreach covered?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * jschoi:  is your topic about outreach covered?","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?","mimetype":"text/html"}]},"ts":1648578351869,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2OjkZy7xCrb5PEmpR0CLnqoWXJ_Z6BrCL8nDYrBh7mk"},
{"content":{"body":"> <@yulia:mozilla.org> jschoi:  is your topic about outreach covered?\n\nYes, thank you, I will delete.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?</blockquote></mx-reply>Yes, thank you, I will delete.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> jschoi:  is your topic about outreach covered?\n\nYes, thank you, I will delete.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about outreach covered?</blockquote></mx-reply>Yes, thank you, I will delete.","mimetype":"text/html"}]},"ts":1648578367306,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fC-InyyDJFMP4H-5gKKopPSI88iwDhmZVeYG0A7lOGE"},
{"content":{"body":" * jschoi:  is your topic about typecheckers outreach covered?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","m.new_content":{"body":"jschoi:  is your topic about typecheckers outreach covered?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi:  is your topic about typecheckers outreach covered?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZVXElzgVzhOvklsBeK5hm-OITgWQNbreUdBFXNZFT0g","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * jschoi:  is your topic about typecheckers outreach covered?","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>:  is your topic about typecheckers outreach covered?","mimetype":"text/html"}]},"ts":1648578367998,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ksc45ZPBagfb9X_9saQ6FL6xFnivq5OCGmJS1IaaYUs"},
{"content":{"body":"I think the repo does not come from ts people","msgtype":"m.text","org.matrix.msc1767.text":"I think the repo does not come from ts people"},"ts":1648578373251,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$pYx6L7J6G1W_sfHu_LxkX_XECMwmc256QOYSAt3bOAY"},
{"content":{"body":"originally","msgtype":"m.text","org.matrix.msc1767.text":"originally"},"ts":1648578377592,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$7aGqSTrENEENBKOGUp9r-bgD6GTieJ44Ho7khZ1gC80"},
{"content":{"body":"Jack Works: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways","mimetype":"text/html"}]},"ts":1648578403822,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9ZSYXqcTSqhTbD59--LUqiL9x-yMcTmBGBM9hYz5qeo"},
{"content":{"body":"Incidentally, I think the champions should consider adopting a GitHub Action that throttles new comments, like how the pipe-operator repository uses https://github.com/js-choi/github-comment-floodgate. I could not keep up with its comment traffic and had to unsubscribe.","msgtype":"m.text","org.matrix.msc1767.text":"Incidentally, I think the champions should consider adopting a GitHub Action that throttles new comments, like how the pipe-operator repository uses https://github.com/js-choi/github-comment-floodgate. I could not keep up with its comment traffic and had to unsubscribe."},"ts":1648578413033,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$pQ7Yy4qEI62TWKlHcCp4kQw_5TVrEZh6CW3Jf1Srj2Q"},
{"content":{"body":"in a worse way, arguably, with actual program logic","msgtype":"m.text","org.matrix.msc1767.text":"in a worse way, arguably, with actual program logic"},"ts":1648578413404,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o2HyTZqksob-291jVezoTC3ODbZLEyL0GrG02UgwkyM"},
{"content":{"body":"> <@rricard:mozilla.org> bakkot: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax\n\nThe grammar was added by Daniel? https://github.com/giltayar/proposal-types-as-comments/commit/9dc597e69674e13098cdb830b1569f1e7d47e55c","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SVl-0eHW2uobcA32Sgqym_oku1MT2CXiRogFsBoVnPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax</blockquote></mx-reply>The grammar was added by Daniel? https://github.com/giltayar/proposal-types-as-comments/commit/9dc597e69674e13098cdb830b1569f1e7d47e55c","m.relates_to":{"m.in_reply_to":{"event_id":"$SVl-0eHW2uobcA32Sgqym_oku1MT2CXiRogFsBoVnPg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rricard:mozilla.org> bakkot: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax\n\nThe grammar was added by Daniel? https://github.com/giltayar/proposal-types-as-comments/commit/9dc597e69674e13098cdb830b1569f1e7d47e55c","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SVl-0eHW2uobcA32Sgqym_oku1MT2CXiRogFsBoVnPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rricard:mozilla.org\">@rricard:mozilla.org</a><br><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: as daniel said, the syntax has been written by an enthusiastic community member, the champions are in favor of discussing syntax</blockquote></mx-reply>The grammar was added by Daniel? https://github.com/giltayar/proposal-types-as-comments/commit/9dc597e69674e13098cdb830b1569f1e7d47e55c","mimetype":"text/html"}]},"ts":1648578421915,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$Mqi_HHqclz3loOsOOeoPnqdwpEcWsYdZ6b6UtpWoigQ"},
{"content":{"body":"sure, then sorry about the confusion","msgtype":"m.text","org.matrix.msc1767.text":"sure, then sorry about the confusion"},"ts":1648578454021,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$X3PNb95FAhvmMSr2g3OiO-q3VmvI3A7Bd5-vHZEHXvA"},
{"content":{"body":"I thought it was from gil","msgtype":"m.text","org.matrix.msc1767.text":"I thought it was from gil"},"ts":1648578507676,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$zZR6UiozfX4QIaG1-S_hehWc2hqoBx9GM2xh36VyVVI"},
{"content":{"body":"having been in the community meetings it did not seem they wanted to impose a syntax today","msgtype":"m.text","org.matrix.msc1767.text":"having been in the community meetings it did not seem they wanted to impose a syntax today"},"ts":1648578549358,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$07ozKBsIdofNkybOsYBgtKH_YB8Va3qsNvOCYk-ldkE"},
{"content":{"body":"just the idea, as all stage 0 proposals should be","msgtype":"m.text","org.matrix.msc1767.text":"just the idea, as all stage 0 proposals should be"},"ts":1648578608172,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$fRCqkW6Lf6cov2SUbS3KV-rJSteCIWMqC_Gy1YJHicw"},
{"content":{"body":"aren't those hints basically guards shu ?","format":"org.matrix.custom.html","formatted_body":"aren't those hints basically guards <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"aren't those hints basically guards shu ?","mimetype":"text/plain"},{"body":"aren't those hints basically guards <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> ?","mimetype":"text/html"}]},"ts":1648578807576,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_fmPHtkcSrHFtvsLB-Kjmr1jY180XHKtWSxedPpt8LU"},
{"content":{"body":"yulia: all sorts of tools rely on comment attachment: linters, templating tools, etc","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: all sorts of tools rely on comment attachment: linters, templating tools, etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: all sorts of tools rely on comment attachment: linters, templating tools, etc","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: all sorts of tools rely on comment attachment: linters, templating tools, etc","mimetype":"text/html"}]},"ts":1648578863199,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZGt24Qcwul-f_4WFStz_LvcVxNmyCnEC7s8Apfw6l60"},
{"content":{"body":"yulia: no, not guards, actually hints","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: no, not guards, actually hints","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: no, not guards, actually hints","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: no, not guards, actually hints","mimetype":"text/html"}]},"ts":1648578870597,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XVoOs90N-JnRBSPYFRUJgIZUw6SgZMQhF1KVWRz9ufU"},
{"content":{"body":"i see","msgtype":"m.text","org.matrix.msc1767.text":"i see"},"ts":1648578874357,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$XNyn76BSRwpID_-NTIJy6qjt4gk1FD7XgB8KpKasKI4"},
{"content":{"body":"imagine `UNLIKELY_BRANCH()`","format":"org.matrix.custom.html","formatted_body":"imagine <code>UNLIKELY_BRANCH()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"imagine `UNLIKELY_BRANCH()`","mimetype":"text/plain"},{"body":"imagine <code>UNLIKELY_BRANCH()</code>","mimetype":"text/html"}]},"ts":1648578881077,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rSWqCUt8yg4TRS-wWs9CTVdCYFV_HmGKxNQs28VJHRQ"},
{"content":{"body":"stuff like that","msgtype":"m.text","org.matrix.msc1767.text":"stuff like that"},"ts":1648578884303,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lgGK2RgVD5qdTPmV6TnpopRYdOgYXk_Z3ceO0AN0OJc"},
{"content":{"body":"or `: this is hot`","format":"org.matrix.custom.html","formatted_body":"or <code>: this is hot</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"or `: this is hot`","mimetype":"text/plain"},{"body":"or <code>: this is hot</code>","mimetype":"text/html"}]},"ts":1648578889708,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KGs0NqXNV-J2mmaF_bJzhg-BFdAnpPJP-4ulfkgOQos"},
{"content":{"body":"oh i see","msgtype":"m.text","org.matrix.msc1767.text":"oh i see"},"ts":1648578897374,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$IEQ-n2h1l_vLzSuLyttwrxjA4pt-ZwxicJiqbZ3EKAI"},
{"content":{"body":"wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127","msgtype":"m.text","org.matrix.msc1767.text":"wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127"},"ts":1648579049713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M3gi3sE-ZS3tZNVtfm1lFBaSjsm5vT3YzxCZU4RB7S4"},
{"content":{"body":"Jack Works: I think shu meant that for the hint guided optimization, the comment space would be used for a different syntax (think asm.js), not regular TS / flow syntax","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I think <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> meant that for the hint guided optimization, the comment space would be used for a different syntax (think asm.js), not regular TS / flow syntax","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: I think shu meant that for the hint guided optimization, the comment space would be used for a different syntax (think asm.js), not regular TS / flow syntax","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I think <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> meant that for the hint guided optimization, the comment space would be used for a different syntax (think asm.js), not regular TS / flow syntax","mimetype":"text/html"}]},"ts":1648579121089,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$A6xq1-3QRXNyCAsPhlm5uCWsOppWP8KA0YBycpb2FgQ"},
{"content":{"body":"yes, completely separate from the current types usage","msgtype":"m.text","org.matrix.msc1767.text":"yes, completely separate from the current types usage"},"ts":1648579143071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n0PSu0Xpzd5PnbhuVXZGdp8vXNC9hRXlVNPNPRn5KcE"},
{"content":{"body":"imagine each expression getting a 0-1.0 weight of hotness determined by some profiling, etc","msgtype":"m.text","org.matrix.msc1767.text":"imagine each expression getting a 0-1.0 weight of hotness determined by some profiling, etc"},"ts":1648579163765,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ys70e3FONVjrqHmCR2ZTLw5CWzs9jrZbZOa2zN5Zpi8"},
{"content":{"body":"> <@bakkot:matrix.org> wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127\n\nit's interesting, I just have one question: how do you delimit the end of that comment?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M3gi3sE-ZS3tZNVtfm1lFBaSjsm5vT3YzxCZU4RB7S4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127</blockquote></mx-reply>it's interesting, I just have one question: how do you delimit the end of that comment?","m.relates_to":{"m.in_reply_to":{"event_id":"$M3gi3sE-ZS3tZNVtfm1lFBaSjsm5vT3YzxCZU4RB7S4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127\n\nit's interesting, I just have one question: how do you delimit the end of that comment?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M3gi3sE-ZS3tZNVtfm1lFBaSjsm5vT3YzxCZU4RB7S4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>wrote up the colon thing in a little more detail: https://github.com/giltayar/proposal-types-as-comments/issues/127</blockquote></mx-reply>it's interesting, I just have one question: how do you delimit the end of that comment?","mimetype":"text/html"}]},"ts":1648579193738,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$RutL8VsXWr6VZ3w1i5PegMZYl6zXdvL8KND1HoEQZiQ"},
{"content":{"body":"\" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\"","msgtype":"m.text","org.matrix.msc1767.text":"\" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\""},"ts":1648579206969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xcmqQZk5OKezf9AyUXGlhudBGbyq3C6lChyhnasSGqo"},
{"content":{"body":" * \" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\"","m.new_content":{"body":"\" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\"","msgtype":"m.text","org.matrix.msc1767.text":"\" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\""},"m.relates_to":{"event_id":"$xcmqQZk5OKezf9AyUXGlhudBGbyq3C6lChyhnasSGqo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * \" a colon followed by an identifier, possibly with a following no-lineterminator-separated balanced-braces block\""},"ts":1648579231186,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nlJT1VnOEM526rtfGTZ_RBu4mPUP6tRG1O5lLYL4nQo"},
{"content":{"body":"all braces right?","msgtype":"m.text","org.matrix.msc1767.text":"all braces right?"},"ts":1648579244276,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$YTMOzw7hVhRg94q7kCk8Pc1N0io9KBXnjSbM4S93dIk"},
{"content":{"body":"yeah","msgtype":"m.text","org.matrix.msc1767.text":"yeah"},"ts":1648579250148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$thH0Rn4y4_JW9NE8Z67krVR8xxDYqI2Z2q1tFP4eL3E"},
{"content":{"body":"or, for some definition thereof","msgtype":"m.text","org.matrix.msc1767.text":"or, for some definition thereof"},"ts":1648579254893,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CZ4f770hzE_ysciL8qEFvAS63qlwX6I6EYVF7Fz9wPc"},
{"content":{"body":"I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔","msgtype":"m.text","org.matrix.msc1767.text":"I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔"},"ts":1648579260908,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$kciW6qCsrWZXdbEGyMG6ZNXSV9kdN5lA4XpguT1MQ3Q"},
{"content":{"body":" * I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔","m.new_content":{"body":"I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔","msgtype":"m.text","org.matrix.msc1767.text":"I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔"},"m.relates_to":{"event_id":"$kciW6qCsrWZXdbEGyMG6ZNXSV9kdN5lA4XpguT1MQ3Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I imagine Svelte and other languages that want to extend/modify the language in interesting ways wouldn't mind that proposal 🤔"},"ts":1648579270782,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$IwrqjRl495-_aap_hxv1i4Im7uAwSGJZUGFf-mCnfho"},
{"content":{"body":"again, very much looking forward to not having to use TypeScript for types and just get free type checking from ESLint :P","msgtype":"m.text","org.matrix.msc1767.text":"again, very much looking forward to not having to use TypeScript for types and just get free type checking from ESLint :P"},"ts":1648579276358,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$0bgG6zCnyfhXRWbPcP2LWpIQYWqXATUDKpCzc4LRCsc"},
{"content":{"body":"yes exactly that is a huge use case for this (replying to pzuraq )","format":"org.matrix.custom.html","formatted_body":"yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes exactly that is a huge use case for this (replying to pzuraq )","mimetype":"text/plain"},{"body":"yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","mimetype":"text/html"}]},"ts":1648579278123,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$Ux2Q26qbsaaQu-8bZ_QfxWfAXbH5oikYiCm82IpNqRg"},
{"content":{"body":"probably not quotey brackets","msgtype":"m.text","org.matrix.msc1767.text":"probably not quotey brackets"},"ts":1648579293721,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OXJWq2fViNj0H8s0oKdWUGkjqS_UUfmv9w6wpyu34ug"},
{"content":{"body":" * yes exactly that is a huge use case for this (replying to pzuraq )","format":"org.matrix.custom.html","formatted_body":" * yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","m.new_content":{"body":"yes exactly that is a huge use case for this (replying to pzuraq )","format":"org.matrix.custom.html","formatted_body":"yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yes exactly that is a huge use case for this (replying to pzuraq )","mimetype":"text/plain"},{"body":"yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Ux2Q26qbsaaQu-8bZ_QfxWfAXbH5oikYiCm82IpNqRg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * yes exactly that is a huge use case for this (replying to pzuraq )","mimetype":"text/plain"},{"body":" * yes exactly that is a huge use case for this (replying to <a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a> )","mimetype":"text/html"}]},"ts":1648579294540,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$WFAy3Nx5U1-9FuG88EDRlkJBLWAyMBc22gJ7zfi-HqE"},
{"content":{"body":"reorged the queue to allow support statements at the end","msgtype":"m.text","org.matrix.msc1767.text":"reorged the queue to allow support statements at the end"},"ts":1648579317857,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$I758tOCCD7Llnt8Qb9jclvEsRNUWv1hXlHHrxn4oXCU"},
{"content":{"body":"and all topics to be covered before","msgtype":"m.text","org.matrix.msc1767.text":"and all topics to be covered before"},"ts":1648579324916,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EdK6o4HHb4U-r_6YR7DDhdih68q6CQVt-_h_60LMjDU"},
{"content":{"body":"we have 18 minutes, so please add your items to the queue so that any new topics can be covered before the end of the time box","msgtype":"m.text","org.matrix.msc1767.text":"we have 18 minutes, so please add your items to the queue so that any new topics can be covered before the end of the time box"},"ts":1648579348656,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$uUNR7Cd_l6w0QsOzFllmsmsbIfmU4r2qIECBmuNXmfg"},
{"content":{"body":"I imagine Node.js could also have \"validate types\" as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is.","msgtype":"m.text","org.matrix.msc1767.text":"I imagine Node.js could also have \"validate types\" as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is."},"ts":1648579356765,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$dmeCwg5vOuvyGpHGjTNvWA313dufn8Wvl2QmqmuyNsc"},
{"content":{"body":"Robin Ricard: specifically bakkot 's proposal, with leading `:` on statements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: specifically <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> 's proposal, with leading <code>:</code> on statements","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: specifically bakkot 's proposal, with leading `:` on statements","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: specifically <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> 's proposal, with leading <code>:</code> on statements","mimetype":"text/html"}]},"ts":1648579368308,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$A19Ad6wOKTm9-yomLj1NL-pRGxASmLeb4TwUvmya26M"},
{"content":{"body":"looks a lot like the way they use labels","msgtype":"m.text","org.matrix.msc1767.text":"looks a lot like the way they use labels"},"ts":1648579386214,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$iIMVzvCtbhOYhrGYZA8EZvF5WG5ZjYORk4GfWrmEC04"},
{"content":{"body":"> <@shuyuguo:matrix.org> Jack Works: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways\n\nmalicious type comments are more deceptive than the normal comment","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9ZSYXqcTSqhTbD59--LUqiL9x-yMcTmBGBM9hYz5qeo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways</blockquote></mx-reply>malicious type comments are more deceptive than the normal comment","m.relates_to":{"m.in_reply_to":{"event_id":"$9ZSYXqcTSqhTbD59--LUqiL9x-yMcTmBGBM9hYz5qeo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> Jack Works: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways\n\nmalicious type comments are more deceptive than the normal comment","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9ZSYXqcTSqhTbD59--LUqiL9x-yMcTmBGBM9hYz5qeo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: i didn't quite understand the malicious misleading comment. surely malicious actors can do that today in many devious ways</blockquote></mx-reply>malicious type comments are more deceptive than the normal comment","mimetype":"text/html"}]},"ts":1648579393094,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$E82B3NRFYS1GxKLn-NelmOCxU3jup37ym01ZsImKLOY"},
{"content":{"body":"I did mean in general but bakkot 's idea achaieves that goal","format":"org.matrix.custom.html","formatted_body":"I did mean in general but <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> 's idea achaieves that goal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I did mean in general but bakkot 's idea achaieves that goal","mimetype":"text/plain"},{"body":"I did mean in general but <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> 's idea achaieves that goal","mimetype":"text/html"}]},"ts":1648579400097,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$dqLsPoKptiBAFCYMQVmi2nna2IExmaZFsHmgiC2AQAw"},
{"content":{"body":"> <@bitandbang:matrix.org> I imagine Node.js could also have \"validate types\" as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is.\n\nThis would require standardizing the type system itself though, wouldn't it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dmeCwg5vOuvyGpHGjTNvWA313dufn8Wvl2QmqmuyNsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>I imagine Node.js could also have &quot;validate types&quot; as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is.</blockquote></mx-reply>This would require standardizing the type system itself though, wouldn't it?","m.relates_to":{"m.in_reply_to":{"event_id":"$dmeCwg5vOuvyGpHGjTNvWA313dufn8Wvl2QmqmuyNsc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bitandbang:matrix.org> I imagine Node.js could also have \"validate types\" as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is.\n\nThis would require standardizing the type system itself though, wouldn't it?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dmeCwg5vOuvyGpHGjTNvWA313dufn8Wvl2QmqmuyNsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>I imagine Node.js could also have &quot;validate types&quot; as a runtime option and eject if types fail, again without TypeScript or Flow or whatever the next cool types tooling is.</blockquote></mx-reply>This would require standardizing the type system itself though, wouldn't it?","mimetype":"text/html"}]},"ts":1648579402630,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$HCrCc5eU7V9QaxFrCOG16VRp1qpakbIWeB-1P9TSNYg"},
{"content":{"body":"I still feel like this proposal is \"what could we do with different types of more granular comments?\" which is an interesting question but just doesn't qualify as a problem statement for stage 1","msgtype":"m.text","org.matrix.msc1767.text":"I still feel like this proposal is \"what could we do with different types of more granular comments?\" which is an interesting question but just doesn't qualify as a problem statement for stage 1"},"ts":1648579410286,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-6ORdK90QccR0VgL4ggxKusv-IwsQOH-lx65I5bfcgw"},
{"content":{"body":"the problem to be solved is \"I want to write type annotations and not strip them before running code on a real engine\"","msgtype":"m.text","org.matrix.msc1767.text":"the problem to be solved is \"I want to write type annotations and not strip them before running code on a real engine\""},"ts":1648579435328,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$snMVPFqjm90wSiUiuXugh9CmpExr8LFgwrGKBfO4A0s"},
{"content":{"body":"you have a different problem in mind than the champions","msgtype":"m.text","org.matrix.msc1767.text":"you have a different problem in mind than the champions"},"ts":1648579443437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0VkXg_SEsptAHcrzwNbHKJ4A8DFYr0opP8QonaRKMwo"},
{"content":{"body":"but they've been fairly clear about what the problem they're interested in is","msgtype":"m.text","org.matrix.msc1767.text":"but they've been fairly clear about what the problem they're interested in is"},"ts":1648579451273,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J0MfXuN7EoeRIxMTS5xDmmc5KeEzZlAdeeoCUCxzObg"},
{"content":{"body":"yes, i think the replies to my question made that clear that the thing i noticed is really an unintended consequence","msgtype":"m.text","org.matrix.msc1767.text":"yes, i think the replies to my question made that clear that the thing i noticed is really an unintended consequence"},"ts":1648579475128,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fdh5hzTrQY1gnQ-nWwvp02jmGdObE0YLDxr0KEUGuoU"},
{"content":{"body":"their response to Shu was \"yeah maybe we could do that too\"","msgtype":"m.text","org.matrix.msc1767.text":"their response to Shu was \"yeah maybe we could do that too\""},"ts":1648579475338,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$z5Yo2wKio1yA478zTp1d_1wBRsndSOKInin2BdFdypQ"},
{"content":{"body":"> <@lucacasonato:matrix.org> This would require standardizing the type system itself though, wouldn't it?\n\nWould it? Given the most basic definition in this specification, _if_ Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HCrCc5eU7V9QaxFrCOG16VRp1qpakbIWeB-1P9TSNYg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>This would require standardizing the type system itself though, wouldn't it?</blockquote></mx-reply>Would it? Given the most basic definition in this specification, <em>if</em> Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.","m.relates_to":{"m.in_reply_to":{"event_id":"$HCrCc5eU7V9QaxFrCOG16VRp1qpakbIWeB-1P9TSNYg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> This would require standardizing the type system itself though, wouldn't it?\n\nWould it? Given the most basic definition in this specification, _if_ Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HCrCc5eU7V9QaxFrCOG16VRp1qpakbIWeB-1P9TSNYg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>This would require standardizing the type system itself though, wouldn't it?</blockquote></mx-reply>Would it? Given the most basic definition in this specification, <em>if</em> Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.","mimetype":"text/html"}]},"ts":1648579478993,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$COtdeL0C1TJulakS9lN2_KKYPwj-KXShXuqrOG9nCpM"},
{"content":{"body":"> <@bakkot:matrix.org> the problem to be solved is \"I want to write type annotations and not strip them before running code on a real engine\"\n\nand solving this opens up a bunch of possibilities for both end users and tools developers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$snMVPFqjm90wSiUiuXugh9CmpExr8LFgwrGKBfO4A0s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the problem to be solved is &quot;I want to write type annotations and not strip them before running code on a real engine&quot;</blockquote></mx-reply>and solving this opens up a bunch of possibilities for both end users and tools developers","m.relates_to":{"m.in_reply_to":{"event_id":"$snMVPFqjm90wSiUiuXugh9CmpExr8LFgwrGKBfO4A0s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> the problem to be solved is \"I want to write type annotations and not strip them before running code on a real engine\"\n\nand solving this opens up a bunch of possibilities for both end users and tools developers","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$snMVPFqjm90wSiUiuXugh9CmpExr8LFgwrGKBfO4A0s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the problem to be solved is &quot;I want to write type annotations and not strip them before running code on a real engine&quot;</blockquote></mx-reply>and solving this opens up a bunch of possibilities for both end users and tools developers","mimetype":"text/html"}]},"ts":1648579483053,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$rSzF_d9bPyuSTZDHv1NJE8wrVyu5NzGVCtcYaC23_18"},
{"content":{"body":"> <@bitandbang:matrix.org> Would it? Given the most basic definition in this specification, _if_ Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.\n\nI guess it depends on what \"validate\" means. Does validate == type check?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$COtdeL0C1TJulakS9lN2_KKYPwj-KXShXuqrOG9nCpM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>Would it? Given the most basic definition in this specification, <em>if</em> Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.</blockquote></mx-reply>I guess it depends on what &quot;validate&quot; means. Does validate == type check?","m.relates_to":{"m.in_reply_to":{"event_id":"$COtdeL0C1TJulakS9lN2_KKYPwj-KXShXuqrOG9nCpM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bitandbang:matrix.org> Would it? Given the most basic definition in this specification, _if_ Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.\n\nI guess it depends on what \"validate\" means. Does validate == type check?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$COtdeL0C1TJulakS9lN2_KKYPwj-KXShXuqrOG9nCpM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>Would it? Given the most basic definition in this specification, <em>if</em> Node.js parsed the comments and validated them, I don't know if it would. I could absolutely be wrong, though.</blockquote></mx-reply>I guess it depends on what &quot;validate&quot; means. Does validate == type check?","mimetype":"text/html"}]},"ts":1648579499712,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$ojwTTjJR1pn7ZOOeqYpV8wYPsEEra2LXFb7BDLNQKn0"},
{"content":{"body":"also I'd like to understand WHY they want to write the types inline, if they have no effect, and they're not fully compatible with TypeScript types","msgtype":"m.text","org.matrix.msc1767.text":"also I'd like to understand WHY they want to write the types inline, if they have no effect, and they're not fully compatible with TypeScript types"},"ts":1648579524068,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4BMNZKedIKxJIIbldDu93p6QYVPB83lM0sLeDu75J9M"},
{"content":{"body":"> <@lucacasonato:matrix.org> I guess it depends on what \"validate\" means. Does validate == type check?\n\n\"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ojwTTjJR1pn7ZOOeqYpV8wYPsEEra2LXFb7BDLNQKn0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>I guess it depends on what \"validate\" means. Does validate == type check?</blockquote></mx-reply>&quot;eject on mismatch between reality and type comment&quot; is what I mean and also could probably be defined as type checking","m.relates_to":{"m.in_reply_to":{"event_id":"$ojwTTjJR1pn7ZOOeqYpV8wYPsEEra2LXFb7BDLNQKn0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> I guess it depends on what \"validate\" means. Does validate == type check?\n\n\"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ojwTTjJR1pn7ZOOeqYpV8wYPsEEra2LXFb7BDLNQKn0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>I guess it depends on what \"validate\" means. Does validate == type check?</blockquote></mx-reply>&quot;eject on mismatch between reality and type comment&quot; is what I mean and also could probably be defined as type checking","mimetype":"text/html"}]},"ts":1648579568049,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$xKDgfSGcDt19NiI80CdqAW7l2IZHfhoWtm38Lr9mTG4"},
{"content":{"body":"> <@bitandbang:matrix.org> \"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking\n\nOk, I don't think that would be possible with the current scope of the proposal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xKDgfSGcDt19NiI80CdqAW7l2IZHfhoWtm38Lr9mTG4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>\"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking</blockquote></mx-reply>Ok, I don't think that would be possible with the current scope of the proposal.","m.relates_to":{"m.in_reply_to":{"event_id":"$xKDgfSGcDt19NiI80CdqAW7l2IZHfhoWtm38Lr9mTG4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bitandbang:matrix.org> \"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking\n\nOk, I don't think that would be possible with the current scope of the proposal.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xKDgfSGcDt19NiI80CdqAW7l2IZHfhoWtm38Lr9mTG4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>\"eject on mismatch between reality and type comment\" is what I mean and also could probably be defined as type checking</blockquote></mx-reply>Ok, I don't think that would be possible with the current scope of the proposal.","mimetype":"text/html"}]},"ts":1648579611774,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$FJ2uRuIUR_HpmJVIxJs6GEBlO9YF0bq4VusCLsrVCeE"},
{"content":{"body":"> <@lucacasonato:matrix.org> Ok, I don't think that would be possible with the current scope of the proposal.\n\nfair enough :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FJ2uRuIUR_HpmJVIxJs6GEBlO9YF0bq4VusCLsrVCeE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Ok, I don't think that would be possible with the current scope of the proposal.</blockquote></mx-reply>fair enough :)","m.relates_to":{"m.in_reply_to":{"event_id":"$FJ2uRuIUR_HpmJVIxJs6GEBlO9YF0bq4VusCLsrVCeE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> Ok, I don't think that would be possible with the current scope of the proposal.\n\nfair enough :)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FJ2uRuIUR_HpmJVIxJs6GEBlO9YF0bq4VusCLsrVCeE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Ok, I don't think that would be possible with the current scope of the proposal.</blockquote></mx-reply>fair enough :)","mimetype":"text/html"}]},"ts":1648579621832,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$MI0TySFkd6WMyN5DHTXDQNKfqgW3zTcuZsM6o1gCH8I"},
{"content":{"body":"yulia: before we ask for stage 1 advancement, I'd like the champions to explicitly restate the problem that we've identified","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: before we ask for stage 1 advancement, I'd like the champions to explicitly restate the problem that we've identified","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: before we ask for stage 1 advancement, I'd like the champions to explicitly restate the problem that we've identified","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: before we ask for stage 1 advancement, I'd like the champions to explicitly restate the problem that we've identified","mimetype":"text/html"}]},"ts":1648579633933,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cICz4cgvZAUNNyaQ4K0I77ZDThTVBECj00clOll-PTk"},
{"content":{"body":"I will raise it before we go to stage advancement discussion","msgtype":"m.text","org.matrix.msc1767.text":"I will raise it before we go to stage advancement discussion"},"ts":1648579656368,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ueGCJ5UdWqUxU5uPGCFyE6bGVTSNaRrAS_GB7d5dfGg"},
{"content":{"body":"thank you","msgtype":"m.text","org.matrix.msc1767.text":"thank you"},"ts":1648579662255,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ikCw2285cCxkKl_jCoCaZCrr3QsRFZyEhT_c5QsRwTE"},
{"content":{"body":"> <@michaelficarra:matrix.org> also I'd like to understand WHY they want to write the types inline, if they have no effect, and they're not fully compatible with TypeScript types\n\nthey said that too: it makes the build loop smaller, particularly for small projects and newbies","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4BMNZKedIKxJIIbldDu93p6QYVPB83lM0sLeDu75J9M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>also I&#39;d like to understand WHY they want to write the types inline, if they have no effect, and they&#39;re not fully compatible with TypeScript types</blockquote></mx-reply>they said that too: it makes the build loop smaller, particularly for small projects and newbies","m.relates_to":{"m.in_reply_to":{"event_id":"$4BMNZKedIKxJIIbldDu93p6QYVPB83lM0sLeDu75J9M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> also I'd like to understand WHY they want to write the types inline, if they have no effect, and they're not fully compatible with TypeScript types\n\nthey said that too: it makes the build loop smaller, particularly for small projects and newbies","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4BMNZKedIKxJIIbldDu93p6QYVPB83lM0sLeDu75J9M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>also I&#39;d like to understand WHY they want to write the types inline, if they have no effect, and they&#39;re not fully compatible with TypeScript types</blockquote></mx-reply>they said that too: it makes the build loop smaller, particularly for small projects and newbies","mimetype":"text/html"}]},"ts":1648579704735,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j2ft9Lc2TRobD9NdBv0kJYYM50ovEsbh--HnXGJvSHE"},
{"content":{"body":"bakkot: build loop of what? what have they written?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: build loop of what? what have they written?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: build loop of what? what have they written?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: build loop of what? what have they written?","mimetype":"text/html"}]},"ts":1648579760889,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$75YO7JMLBAn3bxQWLtj1Ey0za5HC0M2K3O6Enz6oTXA"},
{"content":{"body":"of... programs...","msgtype":"m.text","org.matrix.msc1767.text":"of... programs..."},"ts":1648579877904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GgWsp48YPBtCHvj3Pw2JGko1bE7_JVdF-auJtfXgPhc"},
{"content":{"body":"I can't find my earlier comment on that, but what if you could open your editor, write some typescript code and run it in your browser","msgtype":"m.text","org.matrix.msc1767.text":"I can't find my earlier comment on that, but what if you could open your editor, write some typescript code and run it in your browser"},"ts":1648579881075,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$B0wseDsv4fzgEJwQqs5tt9YDASr7cF15l2zLPCwofYc"},
{"content":{"body":"without touching stuff like npm","msgtype":"m.text","org.matrix.msc1767.text":"without touching stuff like npm"},"ts":1648579886563,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$xpt9bXEMWe0-rYG52jn9APZNgwrQXABYhgO3shDM4F4"},
{"content":{"body":"I will move the support comments quickly","msgtype":"m.text","org.matrix.msc1767.text":"I will move the support comments quickly"},"ts":1648579898173,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lATw8LYB5WyBx1sI7Jr0LZRFKkigOUZEGWDu6r_wiUQ"},
{"content":{"body":"please keep them short!","msgtype":"m.text","org.matrix.msc1767.text":"please keep them short!"},"ts":1648579901365,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$keu-dYyysfia6q_xx8-vusABRSfzJKHihQWeAAEUN-k"},
{"content":{"body":"The \"inner loop\" is the \"write code, then run code\" - if you're writing TS itself there's a third step of \"transpile code\" inbetween those two, which this proposal lets the authors avoid until they actually want to check their types","msgtype":"m.text","org.matrix.msc1767.text":"The \"inner loop\" is the \"write code, then run code\" - if you're writing TS itself there's a third step of \"transpile code\" inbetween those two, which this proposal lets the authors avoid until they actually want to check their types"},"ts":1648579958571,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XMR12u9kIX2TikmOrkZbERyOxqQe7eQnCLX60t2FHhw"},
{"content":{"body":"as a data point, I've seen people actually avoid using TS syntax despite wanting strong types/IDE support specifically because they prefer the ability to copy/paste JS into a repl","msgtype":"m.text","org.matrix.msc1767.text":"as a data point, I've seen people actually avoid using TS syntax despite wanting strong types/IDE support specifically because they prefer the ability to copy/paste JS into a repl"},"ts":1648579975169,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$5ic8ckzzUYgp_nhvFGj2M54V7wx3PBhMJ75KVIsXUWI"},
{"content":{"body":"Robin Ricard: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case","mimetype":"text/html"}]},"ts":1648579976772,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ll1zHqU07eGh9tGgBpth_PCvh64_FwyeYzNmpf3uMjI"},
{"content":{"body":"they try to use JSDoc comments, but it's not great","msgtype":"m.text","org.matrix.msc1767.text":"they try to use JSDoc comments, but it's not great"},"ts":1648579987642,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$dRH4MJQIap4Q0Ua9lQpMcvgdbhHN4adCZFw-J8Zcs38"},
{"content":{"body":"Ashley Claymore: I'm +1 to your +1 comment in the queue: this proposal set good rulers for the syntax that will support TC39 and superset frameworks such as TypeScript to expand syntax capabilities.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I'm +1 to your +1 comment in the queue: this proposal set good rulers for the syntax that will support TC39 and superset frameworks such as TypeScript to expand syntax capabilities.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: I'm +1 to your +1 comment in the queue: this proposal set good rulers for the syntax that will support TC39 and superset frameworks such as TypeScript to expand syntax capabilities.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I'm +1 to your +1 comment in the queue: this proposal set good rulers for the syntax that will support TC39 and superset frameworks such as TypeScript to expand syntax capabilities.","mimetype":"text/html"}]},"ts":1648579987668,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$ext3Jya8Iv9H8xE3m_ACC_FKxec5BLoHbcmR1mymgx0"},
{"content":{"body":"> <@michaelficarra:matrix.org> Robin Ricard: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case\n\nok I meant subset of ts code","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ll1zHqU07eGh9tGgBpth_PCvh64_FwyeYzNmpf3uMjI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case</blockquote></mx-reply>ok I meant subset of ts code","m.relates_to":{"m.in_reply_to":{"event_id":"$ll1zHqU07eGh9tGgBpth_PCvh64_FwyeYzNmpf3uMjI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Robin Ricard: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case\n\nok I meant subset of ts code","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ll1zHqU07eGh9tGgBpth_PCvh64_FwyeYzNmpf3uMjI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: many delegates have said that they would oppose adding he full typescript syntax here, so that is not a covered use case</blockquote></mx-reply>ok I meant subset of ts code","mimetype":"text/html"}]},"ts":1648579999928,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$tWRaHE6RGPiAbnKFVeacMLC5dhw23sJxCFNHaR2DOcc"},
{"content":{"body":"so I think the DX improvements of having these inline comments would actually be meaningful","msgtype":"m.text","org.matrix.msc1767.text":"so I think the DX improvements of having these inline comments would actually be meaningful"},"ts":1648580004695,"senderName":"pzuraq","senderId":"@pzura:matrix.org","id":"$oTCtYrHL6b7bhD237rAA9kB3eNiAQejFZQQb8QeHU3c"},
{"content":{"body":"that happens to match this proposal","msgtype":"m.text","org.matrix.msc1767.text":"that happens to match this proposal"},"ts":1648580009274,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$CuYa24-19Ho1xLDUWB0tMfTN3Ief19gINPpQw8xgPgI"},
{"content":{"body":"And yeah, avoiding that required transpile step in my inner loop is precisely why *I* don't use TS right now.","format":"org.matrix.custom.html","formatted_body":"And yeah, avoiding that required transpile step in my inner loop is precisely why <em>I</em> don't use TS right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And yeah, avoiding that required transpile step in my inner loop is precisely why *I* don't use TS right now.","mimetype":"text/plain"},{"body":"And yeah, avoiding that required transpile step in my inner loop is precisely why <em>I</em> don't use TS right now.","mimetype":"text/html"}]},"ts":1648580012568,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$s1pMBPkjuaV-hL7uFhR1PAQE0QK94QC1ktcHDFPQmPg"},
{"content":{"body":"I actually meant writing ts in those comments","msgtype":"m.text","org.matrix.msc1767.text":"I actually meant writing ts in those comments"},"ts":1648580027176,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$6ozMfNqJw7SIsyGP9ESP2B0WIZXvxbR3bBeh9hLFFPg"},
{"content":{"body":"then I refer back to Waldemar's comment about creating some weird hybrid between TS and JS","msgtype":"m.text","org.matrix.msc1767.text":"then I refer back to Waldemar's comment about creating some weird hybrid between TS and JS"},"ts":1648580063470,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5QiPcPjq9KOuwg8t6va9Y73QbPbYLGSEhxXHZvrOG7U"},
{"content":{"body":"yeah you couldn't use actual typescript with this proposal, they'd have to change TS syntax","msgtype":"m.text","org.matrix.msc1767.text":"yeah you couldn't use actual typescript with this proposal, they'd have to change TS syntax"},"ts":1648580064113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wP-TXAugPo7LKRQxN4yFQthW_zi1TU-N83_KMTX8Pc4"},
{"content":{"body":"at which point... https://github.com/giltayar/proposal-types-as-comments/issues/127","msgtype":"m.text","org.matrix.msc1767.text":"at which point... https://github.com/giltayar/proposal-types-as-comments/issues/127"},"ts":1648580081583,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U0s66qa6u7EIOF6SUVYNu4vK13VxHUQNq_hOGS6aAHQ"},
{"content":{"body":"yep sorry I confused things here","msgtype":"m.text","org.matrix.msc1767.text":"yep sorry I confused things here"},"ts":1648580084674,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$Gzlgr7jm-9ud1Pmlqr9qLt9K9XVqV5pi7Fi9e8gpEL8"},
{"content":{"body":"I'd be more interested in advancing this after TS/Flow devs expressed interest in making the proposed syntax valid in their languages","msgtype":"m.text","org.matrix.msc1767.text":"I'd be more interested in advancing this after TS/Flow devs expressed interest in making the proposed syntax valid in their languages"},"ts":1648580096079,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ophuzIJdTTeMD1Uxf4tHxp06TmrAhCQjukoTkAf530Y"},
{"content":{"body":"Michael Ficarra: perhaps a good reply to current topic?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: perhaps a good reply to current topic?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: perhaps a good reply to current topic?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: perhaps a good reply to current topic?","mimetype":"text/html"}]},"ts":1648580124385,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$Cc18rLunIKtr7xCPDGBt1b0vflkbxR_BXL1zAIBFLSA"},
{"content":{"body":"that actually is the current question","msgtype":"m.text","org.matrix.msc1767.text":"that actually is the current question"},"ts":1648580127738,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$ljGnXV8BoShP28zl0EPZNzSlcfeqZ6VYE-TELztddsA"},
{"content":{"body":"Jack Works: since we are low on time, can we move on to summarization?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: since we are low on time, can we move on to summarization?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: since we are low on time, can we move on to summarization?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: since we are low on time, can we move on to summarization?","mimetype":"text/html"}]},"ts":1648580189107,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BmPk7kIpkQsHgsGlV6q8SkHiy-7q4qtVb2vcoBP8ZyA"},
{"content":{"body":"HTML inline comments can be considered a precedent for this proposal. Not a joke.","msgtype":"m.text","org.matrix.msc1767.text":"HTML inline comments can be considered a precedent for this proposal. Not a joke."},"ts":1648580193544,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$2MCbqTELKd1MNPmNFd4UVfV6OOjTlwLzSMongAzLq08"},
{"content":{"body":"ok we have two such comments","msgtype":"m.text","org.matrix.msc1767.text":"ok we have two such comments"},"ts":1648580207785,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$0z5NrYgTEULcNneVM5wS8iHPr_CyJQ6uSQtnjEfs-Z0"},
{"content":{"body":"yep that is fine","msgtype":"m.text","org.matrix.msc1767.text":"yep that is fine"},"ts":1648580222124,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$Edx_HD3Zs-qMl9U7hG-Y_g5Iu-2Uz9iSEJfyp9pOmAI"},
{"content":{"body":"jsut wanted to make sure this got visible on the queue","msgtype":"m.text","org.matrix.msc1767.text":"jsut wanted to make sure this got visible on the queue"},"ts":1648580240120,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$NpzrSwFBFaH63geuU6BBaSABSwj_CziretmWZs0XTnQ"},
{"content":{"body":"HE Shi-Jun: sorry, we are out of time so I am cutting the queue now","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: sorry, we are out of time so I am cutting the queue now","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"HE Shi-Jun: sorry, we are out of time so I am cutting the queue now","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: sorry, we are out of time so I am cutting the queue now","mimetype":"text/html"}]},"ts":1648580278064,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$g_1GHWmH3kUJ6zuJRwvKTHEaPSbvtqReyL1kiIe7Hdg"},
{"content":{"body":"please feel free to bring this up in the issue tracker","msgtype":"m.text","org.matrix.msc1767.text":"please feel free to bring this up in the issue tracker"},"ts":1648580283730,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RSxVxvWWX-BkVQkl_HkaY1P5IkzFUEEmaM722mUD2EE"},
{"content":{"body":"I am people","msgtype":"m.text","org.matrix.msc1767.text":"I am people"},"ts":1648580291594,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$zr0jIW3mzppC4hvkCalrW9JyGkQ6hrl-ztu7c3HZ-OY"},
{"content":{"body":"I am people too","msgtype":"m.text","org.matrix.msc1767.text":"I am people too"},"ts":1648580302891,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$MvSqIW1eV4kppBEWXWIuF-BQaKCiN8L4SY1V7c4mJDY"},
{"content":{"body":"problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of","msgtype":"m.text","org.matrix.msc1767.text":"problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of"},"ts":1648580310885,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gMojLf_UZM2A4-n-TlLh21UQ7W4UiXJKK2ACPmlYUuQ"},
{"content":{"body":" * problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of","m.new_content":{"body":"problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of","msgtype":"m.text","org.matrix.msc1767.text":"problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of"},"m.relates_to":{"event_id":"$gMojLf_UZM2A4-n-TlLh21UQ7W4UiXJKK2ACPmlYUuQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * problem statement needs to include \"and there is no way to do this with existing comment syntax\", which I am still not convinced of"},"ts":1648580336213,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uokMvjy6CeJRSJFFikY1tFUnTe-W_HF5oyo6qvRroTI"},
{"content":{"body":"fwiw i still think \"does TC39 care about long-term unforking of vastly popular JS forks\" is a pretty important problem for the ecosystem","msgtype":"m.text","org.matrix.msc1767.text":"fwiw i still think \"does TC39 care about long-term unforking of vastly popular JS forks\" is a pretty important problem for the ecosystem"},"ts":1648580380719,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CkUMlwN0EfmHVL3I_BOCLuG-jMZImVYdauj2QVKKS40"},
{"content":{"body":"just not one our composition is well suited for discussion","msgtype":"m.text","org.matrix.msc1767.text":"just not one our composition is well suited for discussion"},"ts":1648580395221,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9brgYxsCyI_EQiVYeuL37_RPWBzJU6AQ06BqgcVBQMY"},
{"content":{"body":"shu: we can have a longer/open-ended discussion topic for it one day","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: we can have a longer/open-ended discussion topic for it one day","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: we can have a longer/open-ended discussion topic for it one day","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: we can have a longer/open-ended discussion topic for it one day","mimetype":"text/html"}]},"ts":1648580415981,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Wfiu-iU0FdW1X_TxshhEJ5jC4pICP2VtJ_GM41nyg20"},
{"content":{"body":"+1","msgtype":"m.text","org.matrix.msc1767.text":"+1"},"ts":1648580420153,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5sxZLzbSg07ys83z72O13PRlKsbJD465twlLMrK030w"},
{"content":{"body":"> <@bitandbang:matrix.org> I am people\n\nI agree, we should narrow the gap between js/ts ,  at least we should clearly reserve some syntax for that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zr0jIW3mzppC4hvkCalrW9JyGkQ6hrl-ztu7c3HZ-OY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>I am people</blockquote></mx-reply>I agree, we should narrow the gap between js/ts ,  at least we should clearly reserve some syntax for that.","m.relates_to":{"m.in_reply_to":{"event_id":"$zr0jIW3mzppC4hvkCalrW9JyGkQ6hrl-ztu7c3HZ-OY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bitandbang:matrix.org> I am people\n\nI agree, we should narrow the gap between js/ts ,  at least we should clearly reserve some syntax for that.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zr0jIW3mzppC4hvkCalrW9JyGkQ6hrl-ztu7c3HZ-OY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">@bitandbang:matrix.org</a><br>I am people</blockquote></mx-reply>I agree, we should narrow the gap between js/ts ,  at least we should clearly reserve some syntax for that.","mimetype":"text/html"}]},"ts":1648580439021,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$2axaZ-R5tDqltf6M9bdOFzPVCz90ZUrz5snt17uzEro"},
{"content":{"body":"I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow","msgtype":"m.text","org.matrix.msc1767.text":"I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow"},"ts":1648580477757,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ythtJgIBHsv5fOz_yIP_5SDxePQOxxe7ulNyJFA0aGg"},
{"content":{"body":"is anyone uncomfortable with the presented developer experience? ","msgtype":"m.text","org.matrix.msc1767.text":"is anyone uncomfortable with the presented developer experience? "},"ts":1648580479317,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$b1SmEXBPn2SB67GsuuwgLPjyvuoqq_wED5oGeuo8TPw"},
{"content":{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","format":"org.matrix.custom.html","formatted_body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/plain"},{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$ythtJgIBHsv5fOz_yIP_5SDxePQOxxe7ulNyJFA0aGg"}}},"ts":1648580540701,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$RQNdGAFBy-s0cOOLvh3ZAJ-TvxvkEHgi9AaBNBCvdL4"},
{"content":{"body":"We can't separate TypeScript from the Ecosystem. ","msgtype":"m.text","org.matrix.msc1767.text":"We can't separate TypeScript from the Ecosystem. "},"ts":1648580540849,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$T9paVdqrOi4dR1EfiSbnAQ5UMrzzjQhRyjkrXS_bWGw"},
{"content":{"body":"it's not all the JS Ecosystem, but a very relevant part of it.","msgtype":"m.text","org.matrix.msc1767.text":"it's not all the JS Ecosystem, but a very relevant part of it."},"ts":1648580548714,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$cUNiXvrfDmEJ94N2dyz224mK5s2NlriSRzeI7Pl1DQ0"},
{"content":{"body":"> <@michaelficarra:matrix.org> I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow\n\n * ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ythtJgIBHsv5fOz_yIP_5SDxePQOxxe7ulNyJFA0aGg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow</blockquote></mx-reply> * ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","m.new_content":{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","format":"org.matrix.custom.html","formatted_body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/plain"},{"body":"ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$RQNdGAFBy-s0cOOLvh3ZAJ-TvxvkEHgi9AaBNBCvdL4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow\n\n * ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ythtJgIBHsv5fOz_yIP_5SDxePQOxxe7ulNyJFA0aGg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I guess I can get behind stage 1 for making it more ergonomic to represent metadata in comments, but I don't see it working out well without major changes in TS/Flow</blockquote></mx-reply> * ts/flow would probably need to run stuff by tc39 in this thoeorical unforked future before adding things","mimetype":"text/html"}]},"ts":1648580556575,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$TU9BPwOdABPcKeD_RhlV3-HDsAPnGdu15lRhOZmvvA0"},
{"content":{"body":"Extremely -1 on a typescript mode","msgtype":"m.text","org.matrix.msc1767.text":"Extremely -1 on a typescript mode"},"ts":1648580568171,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$H1CToyXjWtLDd4hv9JPdQVDxOASzNUQZfzyu-DRPD_8"},
{"content":{"body":"Robin Ricard: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what bakkot suggested, and they will need to adapt","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> suggested, and they will need to adapt","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Robin Ricard: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what bakkot suggested, and they will need to adapt","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> suggested, and they will need to adapt","mimetype":"text/html"}]},"ts":1648580598704,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5lbTG7-KGvLaJjFBBlY39lMJ78kKbNuw559jLMyr6ag"},
{"content":{"body":"I like shu's suggestion of adding a more general feature of comments that are directly tied to syntax objects. Such comments could be use for multiple purposes, as he pointed out. I feel like people got distracted by his suggested other purposes and didn't understand what he was actually proposing.","msgtype":"m.text","org.matrix.msc1767.text":"I like shu's suggestion of adding a more general feature of comments that are directly tied to syntax objects. Such comments could be use for multiple purposes, as he pointed out. I feel like people got distracted by his suggested other purposes and didn't understand what he was actually proposing."},"ts":1648580623165,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$X6UOh_PcPje6TGhm0C8poMNWO3PmMKRNE8xNefL25lU"},
{"content":{"body":"I feel the ecosystem is already JS/TS , at least 50% JS devs are actually writing TS every day 😅","msgtype":"m.text","org.matrix.msc1767.text":"I feel the ecosystem is already JS/TS , at least 50% JS devs are actually writing TS every day 😅"},"ts":1648580627644,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$5ZVCNMvXelb7MVQuBNUE8csEIpfQ5sCTNCd4RPwjbX8"},
{"content":{"body":"SoftwareChris: we had a clarification regarding the problem statement, should it be restated?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">SoftwareChris</a>: we had a clarification regarding the problem statement, should it be restated?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"SoftwareChris: we had a clarification regarding the problem statement, should it be restated?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">SoftwareChris</a>: we had a clarification regarding the problem statement, should it be restated?","mimetype":"text/html"}]},"ts":1648580639830,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$LPC8nVLDIC1jTf0KRBi5IL4s65PIqmPCRcG-bsIkMfY"},
{"content":{"body":"can't we conclude that the remainder of the TS features are aimed at \"power users\" and thus behind the compile wall?","msgtype":"m.text","org.matrix.msc1767.text":"can't we conclude that the remainder of the TS features are aimed at \"power users\" and thus behind the compile wall?"},"ts":1648580660802,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$sZrNGCIistaroU00gmTON1B_5XwEWJM-Hn_ExTZDs9c"},
{"content":{"body":"> <@michaelficarra:matrix.org> Robin Ricard: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what bakkot suggested, and they will need to adapt\n\nI am not a ts team member so I can't speak for them but yea that should probably be considered","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5lbTG7-KGvLaJjFBBlY39lMJ78kKbNuw559jLMyr6ag?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> suggested, and they will need to adapt</blockquote></mx-reply>I am not a ts team member so I can't speak for them but yea that should probably be considered","m.relates_to":{"m.in_reply_to":{"event_id":"$5lbTG7-KGvLaJjFBBlY39lMJ78kKbNuw559jLMyr6ag"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> Robin Ricard: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what bakkot suggested, and they will need to adapt\n\nI am not a ts team member so I can't speak for them but yea that should probably be considered","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5lbTG7-KGvLaJjFBBlY39lMJ78kKbNuw559jLMyr6ag?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: we would probably only be willing to carve out a narrow (but infinite) syntax space for them, like what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> suggested, and they will need to adapt</blockquote></mx-reply>I am not a ts team member so I can't speak for them but yea that should probably be considered","mimetype":"text/html"}]},"ts":1648580673497,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$WvTjI9NY2XKSRa5lJDriFP1KCwXyjx9Y6gG9NsbssMA"},
{"content":{"body":"there are two parts: 1) ergonomic types as comments that run in the browser 2) consolidating popular js forks is a problem, and ts is very popular","msgtype":"m.text","org.matrix.msc1767.text":"there are two parts: 1) ergonomic types as comments that run in the browser 2) consolidating popular js forks is a problem, and ts is very popular"},"ts":1648580674361,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$WIBbEy_qn3IhO1sE3BmRk5fx8FmddBpgPkkklLHCvTw"},
{"content":{"body":"and that we only need the small common denominator of features instead","msgtype":"m.text","org.matrix.msc1767.text":"and that we only need the small common denominator of features instead"},"ts":1648580677295,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$q0U720C6zF69xxpc-TpehmhEOKr9_lbgJazDeq41p-Y"},
{"content":{"body":"> <@usharma:igalia.com> can't we conclude that the remainder of the TS features are aimed at \"power users\" and thus behind the compile wall?\n\nI like that phrasing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sZrNGCIistaroU00gmTON1B_5XwEWJM-Hn_ExTZDs9c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>can&#39;t we conclude that the remainder of the TS features are aimed at &quot;power users&quot; and thus behind the compile wall?</blockquote></mx-reply>I like that phrasing","m.relates_to":{"m.in_reply_to":{"event_id":"$sZrNGCIistaroU00gmTON1B_5XwEWJM-Hn_ExTZDs9c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@usharma:igalia.com> can't we conclude that the remainder of the TS features are aimed at \"power users\" and thus behind the compile wall?\n\nI like that phrasing","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sZrNGCIistaroU00gmTON1B_5XwEWJM-Hn_ExTZDs9c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>can&#39;t we conclude that the remainder of the TS features are aimed at &quot;power users&quot; and thus behind the compile wall?</blockquote></mx-reply>I like that phrasing","mimetype":"text/html"}]},"ts":1648580692082,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$3S3pANUQ8jYu-32lcg3BQFbCUzfAC0WdP4mYYk3KmtY"},
{"content":{"body":"I think the problem spaces could be \"narrowing the gap between JS and TS/flowtype/any other type checkers ...","msgtype":"m.text","org.matrix.msc1767.text":"I think the problem spaces could be \"narrowing the gap between JS and TS/flowtype/any other type checkers ..."},"ts":1648580697253,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$D9dTmUuU7RhHgqC29lF-XMroo3q5uY-FOffP9kIUCQg"},
{"content":{"body":"ryzokuken: sure yeah, but then we've created a hybrid/in-between language that people need to know","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>: sure yeah, but then we've created a hybrid/in-between language that people need to know","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ryzokuken: sure yeah, but then we've created a hybrid/in-between language that people need to know","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>: sure yeah, but then we've created a hybrid/in-between language that people need to know","mimetype":"text/html"}]},"ts":1648580697609,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Tjf0L91H0oXvhnsBMX_e9Z5Dn9J_vqlBMlMmyTAS4O0"}
]