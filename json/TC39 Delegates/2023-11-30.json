[
{"content":{"body":"I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's in to \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":"I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's in to \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"msgtype":"m.text"},"ts":1701302470763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VjvlXZ-AmZpeKIW3QQEC93ObgtoRreHmPsaDrIHpUmI"},
{"content":{"body":" * I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's into \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":" * I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's into \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"m.new_content":{"body":"I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's into \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":"I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's into \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VjvlXZ-AmZpeKIW3QQEC93ObgtoRreHmPsaDrIHpUmI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701302840754,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gnAsWsUDaEpevrSuL3Aap4YEdWVxI80RdEcNyXc1Fj4"},
{"content":{"body":" * `%` may be out as well. We'd considered it for the topic variable in pipeline, but IIRC `%` is hard to type on a number of international keyboard layouts.","format":"org.matrix.custom.html","formatted_body":" * <code>%</code> may be out as well. We'd considered it for the topic variable in pipeline, but IIRC <code>%</code> is hard to type on a number of international keyboard layouts.","m.mentions":{},"m.new_content":{"body":"`%` may be out as well. We'd considered it for the topic variable in pipeline, but IIRC `%` is hard to type on a number of international keyboard layouts.","format":"org.matrix.custom.html","formatted_body":"<code>%</code> may be out as well. We'd considered it for the topic variable in pipeline, but IIRC <code>%</code> is hard to type on a number of international keyboard layouts.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ro9le5gbX_AXfSPhd-jGwJohAVVVjr0M-dx7yAH2p94","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701302859533,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_KmaLEQn1cN_jBbifDvDE3xqRMG9xb4vW_G3NBguS9I"},
{"content":{"body":"We at Agoric are also hoping to use `remote~.method()` for async method invocation on a promise/placeholder for a remote object, `remoteFunction~()` for async function application, and `promise~.propertyName` for async get.","format":"org.matrix.custom.html","formatted_body":"We at Agoric are also hoping to use <code>remote~.method()</code> for async method invocation on a promise/placeholder for a remote object, <code>remoteFunction~()</code> for async function application, and <code>promise~.propertyName</code> for async get.","m.mentions":{},"msgtype":"m.text"},"ts":1701302925357,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$p7lzRAs_KqIFKewsC8BT2HnnEHvnTIlhf3QfxqC9GTo"},
{"content":{"body":"(On the mnemonic that `~` resembles a stream and each of these would be used to stream operations to remote objects.)","format":"org.matrix.custom.html","formatted_body":"(On the mnemonic that <code>~</code> resembles a stream and each of these would be used to stream operations to remote objects.)","m.mentions":{},"msgtype":"m.text"},"ts":1701302981304,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hrSS_v3lWRJLFeGSxAh-8tIzbUWeLbiGqcXkl6IF0Nw"},
{"content":{"body":"If `f~()` gets used for that, then I don't think there's any syntax that would ever work for partial application.","format":"org.matrix.custom.html","formatted_body":"If <code>f~()</code> gets used for that, then I don't think there's any syntax that would ever work for partial application.","m.mentions":{},"msgtype":"m.text"},"ts":1701303006103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VM34sN9m9jXqcsRNAG-p6exmksF-yln9JXy1YHeOkr8"},
{"content":{"body":"If you used`f~.()` it would be consistent with `f?.()` at least, though I imagine `f~.~()` would end up being a bridge too far.","format":"org.matrix.custom.html","formatted_body":"If you used<code>f~.()</code> it would be consistent with <code>f?.()</code> at least, though I imagine <code>f~.~()</code> would end up being a bridge too far.","m.mentions":{},"msgtype":"m.text"},"ts":1701303063440,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PmqECvZlyfwvDkzMIXbXPlQ_ckfnEqbAFfHIMu_WtCA"},
{"content":{"body":"I still hold out hope for partial application, which is why I haven't withdrawn it, but where I left it one of the things it needed was a prefix token for the argument list. For a number of reasons I've discussed on the issue tracker, the token can't come *before* the method/function name since it has the wrong precedence for binding, and for partial application to be practically useful it can't have an arduous syntax.","format":"org.matrix.custom.html","formatted_body":"I still hold out hope for partial application, which is why I haven't withdrawn it, but where I left it one of the things it needed was a prefix token for the argument list. For a number of reasons I've discussed on the issue tracker, the token can't come <em>before</em> the method/function name since it has the wrong precedence for binding, and for partial application to be practically useful it can't have an arduous syntax.","m.mentions":{},"msgtype":"m.text"},"ts":1701303202033,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pKbjpewCSHptQ4uGRRyFQKMb7MgtIuFU2EyFQlhvsEc"},
{"content":{"body":"One of the things that the original `f(?)` syntax for partial app lacked was the ability to indicate a partial 0-arity invocation, i.e. `obj.method()` isn't partial, and there's no way to defer its invocation, while `object.method~()` allows for 0-arity partial application.","format":"org.matrix.custom.html","formatted_body":"One of the things that the original <code>f(?)</code> syntax for partial app lacked was the ability to indicate a partial 0-arity invocation, i.e. <code>obj.method()</code> isn't partial, and there's no way to defer its invocation, while <code>object.method~()</code> allows for 0-arity partial application.","m.mentions":{},"msgtype":"m.text"},"ts":1701303288936,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AI_xVQO_iXPPPfd9KdGf2S2LMY5OD05bD5XesH0Rykw"},
{"content":{"body":"The other upshot of using `~.` for async invocation, is that you're not limited to `~` as there are a number of other symbols that are currently illegal before `.` in that position.","format":"org.matrix.custom.html","formatted_body":"The other upshot of using <code>~.</code> for async invocation, is that you're not limited to <code>~</code> as there are a number of other symbols that are currently illegal before <code>.</code> in that position.","m.mentions":{},"msgtype":"m.text"},"ts":1701303407945,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T4_vHDRxXnYfGyoU_FKLfYT7lz4bOYJzPWgYlAy-gBg"},
{"content":{"body":"This is also why I'm not a fan of using up our syntax budget on `a[@x]` when we primarily want to support a narrow case for a small set of objects (`Slice`, `Index`, maybe `WeakMap` or a set of user-defined objects like `Pick`, etc.) that could easily be accomplished with `a[x]`.","format":"org.matrix.custom.html","formatted_body":"This is also why I'm not a fan of using up our syntax budget on <code>a[@x]</code> when we primarily want to support a narrow case for a small set of objects (<code>Slice</code>, <code>Index</code>, maybe <code>WeakMap</code> or a set of user-defined objects like <code>Pick</code>, etc.) that could easily be accomplished with <code>a[x]</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1701303674634,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JpdfeiFaTGHcX4JOk77daKpJaCJf-qdt96Hbchom30M"},
{"content":{"body":"Whatever we used for that would impact what's available for future proposals. i.e., any symbol in the place of `@` in `a[@x]` means that symbol can never be used in a prefix position of an AssignmentExpression. A symbol before `[` doesn't have that issue, but we have an even smaller number of symbols we can legally put before `[` and still have it be somewhat ergonomic to type.","format":"org.matrix.custom.html","formatted_body":"Whatever we used for that would impact what's available for future proposals. i.e., any symbol in the place of <code>@</code> in <code>a[@x]</code> means that symbol can never be used in a prefix position of an AssignmentExpression. A symbol before <code>[</code> doesn't have that issue, but we have an even smaller number of symbols we can legally put before <code>[</code> and still have it be somewhat ergonomic to type.","m.mentions":{},"msgtype":"m.text"},"ts":1701303820002,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fIPkeSN08jEwNzYCix0FdBk1ZViuSbkCOEToxR674jU"},
{"content":{"body":"I'd love to be able to hook `a[x]` for _numeric_ indexes, since that also gives us a way to make things like Array and TypedArray into regular objects instead of exotic objects. It also opens the door for user-defined numeric-indexed collection classes that work like `Array`, which can only be implemented via a `Proxy` today.","format":"org.matrix.custom.html","formatted_body":"I'd love to be able to hook <code>a[x]</code> for <em>numeric</em> indexes, since that also gives us a way to make things like Array and TypedArray into regular objects instead of exotic objects. It also opens the door for user-defined numeric-indexed collection classes that work like <code>Array</code>, which can only be implemented via a <code>Proxy</code> today.","m.mentions":{},"msgtype":"m.text"},"ts":1701304024244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w0bCbsNknKhyWVAXi7rBeVUyzVLGFL8y7_MQcORqntQ"}
]