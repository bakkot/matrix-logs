[
{"content":{"body":"I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's in to \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":"I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's in to \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"msgtype":"m.text"},"ts":1701302470763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VjvlXZ-AmZpeKIW3QQEC93ObgtoRreHmPsaDrIHpUmI"},
{"content":{"body":" * I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's into \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":" * I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's into \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"m.new_content":{"body":"I've considered using an infix `~` as an indicator for partial application, i.e. `obj.method~(a, ?)`, so `obj~[key]` might be reasonable. Thin-arrow is possible as well (i.e., `obj->[key]`), though that sequence of tokens get's into \"`obj.get` is easier to write\" territory","format":"org.matrix.custom.html","formatted_body":"I've considered using an infix <code>~</code> as an indicator for partial application, i.e. <code>obj.method~(a, ?)</code>, so <code>obj~[key]</code> might be reasonable. Thin-arrow is possible as well (i.e., <code>obj-&gt;[key]</code>), though that sequence of tokens get's into \"<code>obj.get</code> is easier to write\" territory","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VjvlXZ-AmZpeKIW3QQEC93ObgtoRreHmPsaDrIHpUmI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701302840754,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gnAsWsUDaEpevrSuL3Aap4YEdWVxI80RdEcNyXc1Fj4"},
{"content":{"body":" * `%` may be out as well. We'd considered it for the topic variable in pipeline, but IIRC `%` is hard to type on a number of international keyboard layouts.","format":"org.matrix.custom.html","formatted_body":" * <code>%</code> may be out as well. We'd considered it for the topic variable in pipeline, but IIRC <code>%</code> is hard to type on a number of international keyboard layouts.","m.mentions":{},"m.new_content":{"body":"`%` may be out as well. We'd considered it for the topic variable in pipeline, but IIRC `%` is hard to type on a number of international keyboard layouts.","format":"org.matrix.custom.html","formatted_body":"<code>%</code> may be out as well. We'd considered it for the topic variable in pipeline, but IIRC <code>%</code> is hard to type on a number of international keyboard layouts.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ro9le5gbX_AXfSPhd-jGwJohAVVVjr0M-dx7yAH2p94","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701302859533,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_KmaLEQn1cN_jBbifDvDE3xqRMG9xb4vW_G3NBguS9I"},
{"content":{"body":"We at Agoric are also hoping to use `remote~.method()` for async method invocation on a promise/placeholder for a remote object, `remoteFunction~()` for async function application, and `promise~.propertyName` for async get.","format":"org.matrix.custom.html","formatted_body":"We at Agoric are also hoping to use <code>remote~.method()</code> for async method invocation on a promise/placeholder for a remote object, <code>remoteFunction~()</code> for async function application, and <code>promise~.propertyName</code> for async get.","m.mentions":{},"msgtype":"m.text"},"ts":1701302925357,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$p7lzRAs_KqIFKewsC8BT2HnnEHvnTIlhf3QfxqC9GTo"},
{"content":{"body":"(On the mnemonic that `~` resembles a stream and each of these would be used to stream operations to remote objects.)","format":"org.matrix.custom.html","formatted_body":"(On the mnemonic that <code>~</code> resembles a stream and each of these would be used to stream operations to remote objects.)","m.mentions":{},"msgtype":"m.text"},"ts":1701302981304,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hrSS_v3lWRJLFeGSxAh-8tIzbUWeLbiGqcXkl6IF0Nw"},
{"content":{"body":"If `f~()` gets used for that, then I don't think there's any syntax that would ever work for partial application.","format":"org.matrix.custom.html","formatted_body":"If <code>f~()</code> gets used for that, then I don't think there's any syntax that would ever work for partial application.","m.mentions":{},"msgtype":"m.text"},"ts":1701303006103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VM34sN9m9jXqcsRNAG-p6exmksF-yln9JXy1YHeOkr8"}
]