[
{"content":{"body":"> A single underscore character is the lightest reasonable syntax for signifying the absence of a name. It is commonly used in other languages, such as Scala and Python, for this purpose. A single underscore was, originally, a valid identifier in Java 1.0, but we later reclaimed it for unnamed variables and patterns","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>A single underscore character is the lightest reasonable syntax for signifying the absence of a name. It is commonly used in other languages, such as Scala and Python, for this purpose. A single underscore was, originally, a valid identifier in Java 1.0, but we later reclaimed it for unnamed variables and patterns</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710896907256,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$H9-4lgoAhjVsJi5eLaQjmtjnCsKyUcBJKOvvyZbTlSw"},
{"content":{"body":"I very much prefer we use `_`, I think refactoring hazards are pretty simple to fix since it's a lexically scoped name.","format":"org.matrix.custom.html","formatted_body":"I very much prefer we use <code>_</code>, I think refactoring hazards are pretty simple to fix since it's a lexically scoped name.","m.mentions":{},"msgtype":"m.text"},"ts":1710896981181,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wbPTJk1DTkOspBIR-M-34enIt4KRlUAitAaMM2GZ1Ns"},
{"content":{"body":"> <@bakkot:matrix.org> java is using `_` for void bindings: https://openjdk.org/jeps/456\n\nEverybody uses `_` for void bindings. I'd prefer we use it too, but unless ljharb relaxes his position, it's not an option. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i4QS8CSz-wa3pG0oGOvdGhKlvz_0oUbGZUtZJoKTIO8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />java is using <code>_</code> for void bindings: https://openjdk.org/jeps/456</blockquote></mx-reply>Everybody uses <code>_</code> for void bindings. I'd prefer we use it too, but unless <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> relaxes his position, it's not an option.","m.relates_to":{"m.in_reply_to":{"event_id":"$i4QS8CSz-wa3pG0oGOvdGhKlvz_0oUbGZUtZJoKTIO8"}},"msgtype":"m.text"},"ts":1710907386421,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zQ_pk0cAE7JlfnIyNBq5cWsFaP3bMC2CIIeTqG33SqU"},
{"content":{"body":"> <@jridgewell:matrix.org> I very much prefer we use `_`, I think refactoring hazards are pretty simple to fix since it's a lexically scoped name.\n\nAgreed, I also wish we could use it for pipeline. We could have even used it for both, since they wouldn't conflict","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wbPTJk1DTkOspBIR-M-34enIt4KRlUAitAaMM2GZ1Ns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br />I very much prefer we use <code>_</code>, I think refactoring hazards are pretty simple to fix since it's a lexically scoped name.</blockquote></mx-reply>Agreed, I also wish we could use it for pipeline. We could have even used it for both, since they wouldn't conflict","m.relates_to":{"m.in_reply_to":{"event_id":"$wbPTJk1DTkOspBIR-M-34enIt4KRlUAitAaMM2GZ1Ns"}},"msgtype":"m.text"},"ts":1710907474271,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aaOn_VVaHzo2OtctFaJieA8PPsv-MBf5DYtOH91bwE0"},
{"content":{"body":"while I'm typically opposed to chaos, this would _the_ chaotic move that I'd support","format":"org.matrix.custom.html","formatted_body":"while I'm typically opposed to chaos, this would <em>the</em> chaotic move that I'd support","m.mentions":{},"msgtype":"m.text"},"ts":1710907585456,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$pFZmbm9D__GUfPRS0tXn9O1NGPcBCpjLiGGfSvi6VDI"},
{"content":{"body":" * while I'm typically opposed to chaos, this would be _the_ chaotic move that I'd support","format":"org.matrix.custom.html","formatted_body":" * while I'm typically opposed to chaos, this would be <em>the</em> chaotic move that I'd support","m.mentions":{},"m.new_content":{"body":"while I'm typically opposed to chaos, this would be _the_ chaotic move that I'd support","format":"org.matrix.custom.html","formatted_body":"while I'm typically opposed to chaos, this would be <em>the</em> chaotic move that I'd support","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pFZmbm9D__GUfPRS0tXn9O1NGPcBCpjLiGGfSvi6VDI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710907589783,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$zCMoLeKXqk2pCwwfKv3LP8Ttz6YP48nhJvvMl8FAPMY"},
{"content":{"body":"i'm pretty sure i'm not the only one who objects to violating TCP","m.mentions":{},"msgtype":"m.text"},"ts":1710916356671,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IvZarQ-4DNpYyhvZDuOGdORG7M6lAggtgNucHHKqwF0"},
{"content":{"body":"https://fanf.livejournal.com/118421.html and https://esdiscuss.org/topic/regarding-tennent-s-language-design-based-on-semantic-principles are good reading on the topic","m.mentions":{},"msgtype":"m.text"},"ts":1710916475054,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wztEgFquTuzX9aN4RWOlARygiEZZouoXNY0oHr7WMCE"},
{"content":{"body":"I think you might be the only one who objects in this case","m.mentions":{},"msgtype":"m.text"},"ts":1710916652609,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D5UxQ8JC2sokukTL-n9L4Xe1SwSC5K5Ryia8Q6BS2qY"},
{"content":{"body":"sometimes one person objecting means other objectors don't speak up. not violating TCP came up a *ton* around ES6 and i'd be surprised if in fact nobody else cares about preserving that property.","format":"org.matrix.custom.html","formatted_body":"sometimes one person objecting means other objectors don't speak up. not violating TCP came up a <em>ton</em> around ES6 and i'd be surprised if in fact nobody else cares about preserving that property.","m.mentions":{},"msgtype":"m.text"},"ts":1710916831976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JJ1F451KglR3Gys7BychR6jsZyZo2zT8uQnnN--p5Bg"},
{"content":{"body":"I do not immediately see how using `_` for void bindings would violate TCP","format":"org.matrix.custom.html","formatted_body":"I do not immediately see how using <code>_</code> for void bindings would violate TCP","m.mentions":{},"msgtype":"m.text"},"ts":1710916882809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ByI5jOgNEezrs7QAnxoZEWxdprTNH1WtEd4QjdKQrgI"},
{"content":{"body":"tbf for TCP i was thinking about pipeline. it's possible that doesn't apply for void bindings, i'll have to take another look","m.mentions":{},"msgtype":"m.text"},"ts":1710916943088,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$39v-48L4nK4o409ML_MWV7iEAwM2CoHs85dRj0lnvIw"},
{"content":{"body":"so would `const { _ } = whatever` be a discarded binding but `const _ = whatever._` wouldn't?","format":"org.matrix.custom.html","formatted_body":"so would <code>const { _ } = whatever</code> be a discarded binding but <code>const _ = whatever._</code> wouldn't?","m.mentions":{},"msgtype":"m.text"},"ts":1710917017530,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2lCZA4o34jDNIi-PbL2MfJCYcCU_IR1gmfFsk_FG7UY"},
{"content":{"body":"for example, https://www.npmjs.com/package/minimist (57M weekly downloads) produces an object with a `_` property, would you still be able to destructure it as you can now?","format":"org.matrix.custom.html","formatted_body":"for example, https://www.npmjs.com/package/minimist (57M weekly downloads) produces an object with a <code>_</code> property, would you still be able to destructure it as you can now?","m.mentions":{},"msgtype":"m.text"},"ts":1710917066453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iTC2vunRYZTYrT7wYwwvgRN0errirspsMPPjBkiwHfc"},
{"content":{"body":" * so would `const { _, ...kept } = whatever` make `_` be a discarded binding but `const _ = whatever._` wouldn't?","format":"org.matrix.custom.html","formatted_body":" * so would <code>const { _, ...kept } = whatever</code> make <code>_</code> be a discarded binding but <code>const _ = whatever._</code> wouldn't?","m.mentions":{},"m.new_content":{"body":"so would `const { _, ...kept } = whatever` make `_` be a discarded binding but `const _ = whatever._` wouldn't?","format":"org.matrix.custom.html","formatted_body":"so would <code>const { _, ...kept } = whatever</code> make <code>_</code> be a discarded binding but <code>const _ = whatever._</code> wouldn't?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2lCZA4o34jDNIi-PbL2MfJCYcCU_IR1gmfFsk_FG7UY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710917164603,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pQApgzd0xbWciFMp9SlWUTcWlA85m6aLpuZCVmY0bCM"},
{"content":{"body":"so there are a variety of ways this could work. the simplest backwards-compatible way would be, no changes to any current programs, but it becomes legal to re-declare `_` in the same scope; if you do, any references to `_` within that scope are an error (possibly at parse time).","format":"org.matrix.custom.html","formatted_body":"so there are a variety of ways this could work. the simplest backwards-compatible way would be, no changes to any current programs, but it becomes legal to re-declare <code>_</code> in the same scope; if you do, any references to <code>_</code> within that scope are an error (possibly at parse time).","m.mentions":{},"msgtype":"m.text"},"ts":1710917254883,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GfaNvV__wPUwdEl0ChT2fsIZQAwuBdsKlf64ofCmVuU"},
{"content":{"body":"this would not distinguish between `const { _, ...kept } = whatever` and `const _ = whatever._` in any way","format":"org.matrix.custom.html","formatted_body":"this would not distinguish between <code>const { _, ...kept } = whatever</code> and <code>const _ = whatever._</code> in any way","m.mentions":{},"msgtype":"m.text"},"ts":1710917305459,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IdJYiRipCdJvGExvaoY_oaYM0bXjcKkEd7Cm1QJoNlE"},
{"content":{"body":"ok so like, `const { _ } = whatever; console.log(_)` would continue to work, and if i added `const { x: _ } = foo`, it would discard the binding but also poison use of `_` after that?","format":"org.matrix.custom.html","formatted_body":"ok so like, <code>const { _ } = whatever; console.log(_)</code> would continue to work, and if i added <code>const { x: _ } = foo</code>, it would discard the binding but also poison use of <code>_</code> after that?","m.mentions":{},"msgtype":"m.text"},"ts":1710917340307,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kLKF-SvLQu3ScbtO3GNLftJUnAsJLSOxfzv1X-RqHtY"},
{"content":{"body":" * ok so like, `const { _ } = whatever; console.log(_)` would continue to work, and if i added `const { x: _ } = foo` after it, it would discard the binding but also poison use of `_` after that?","format":"org.matrix.custom.html","formatted_body":" * ok so like, <code>const { _ } = whatever; console.log(_)</code> would continue to work, and if i added <code>const { x: _ } = foo</code> after it, it would discard the binding but also poison use of <code>_</code> after that?","m.mentions":{},"m.new_content":{"body":"ok so like, `const { _ } = whatever; console.log(_)` would continue to work, and if i added `const { x: _ } = foo` after it, it would discard the binding but also poison use of `_` after that?","format":"org.matrix.custom.html","formatted_body":"ok so like, <code>const { _ } = whatever; console.log(_)</code> would continue to work, and if i added <code>const { x: _ } = foo</code> after it, it would discard the binding but also poison use of <code>_</code> after that?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kLKF-SvLQu3ScbtO3GNLftJUnAsJLSOxfzv1X-RqHtY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710917350615,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q2hHpntmehsVqPeBoY_-AjbgmG7ZRcabZpR5Prz1cKY"},
{"content":{"body":" * ok so like, `const { _ } = whatever; console.log(_)` would continue to work, and if i added `const { x: _ } = foo` after it, it would discard the new binding but also poison use of `_` after that?","format":"org.matrix.custom.html","formatted_body":" * ok so like, <code>const { _ } = whatever; console.log(_)</code> would continue to work, and if i added <code>const { x: _ } = foo</code> after it, it would discard the new binding but also poison use of <code>_</code> after that?","m.mentions":{},"m.new_content":{"body":"ok so like, `const { _ } = whatever; console.log(_)` would continue to work, and if i added `const { x: _ } = foo` after it, it would discard the new binding but also poison use of `_` after that?","format":"org.matrix.custom.html","formatted_body":"ok so like, <code>const { _ } = whatever; console.log(_)</code> would continue to work, and if i added <code>const { x: _ } = foo</code> after it, it would discard the new binding but also poison use of <code>_</code> after that?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kLKF-SvLQu3ScbtO3GNLftJUnAsJLSOxfzv1X-RqHtY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710917354394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lFZdMG_UNkoom4Gq_vUwVYwdUme07fDX8cbnDFzm3Ds"},
{"content":{"body":"so if i wanted to discard a binding i'd have to rename my existing binding?","m.mentions":{},"msgtype":"m.text"},"ts":1710917371313,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2d2rOHevFbEP5mPQ7Hajcn_kQsz6WNOW4lEzcvxpJv8"},
{"content":{"body":"I would want it to poison all uses anywhere in the scope. so you could write\n\n```\nconst { _ } = whatever;\nconsole.log(_)\n```\nand\n```\nconst { _ } = whatever;\nconst { x: _ } = foo;\n```\nbut not\n```\nconst { _ } = whatever;\nconsole.log(_)\nconst { x: _ } = foo;\n```","format":"org.matrix.custom.html","formatted_body":"<p>I would want it to poison all uses anywhere in the scope. so you could write</p>\n<pre><code>const { _ } = whatever;\nconsole.log(_)\n</code></pre>\n<p>and</p>\n<pre><code>const { _ } = whatever;\nconst { x: _ } = foo;\n</code></pre>\n<p>but not</p>\n<pre><code>const { _ } = whatever;\nconsole.log(_)\nconst { x: _ } = foo;\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710917408915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qSgHCwr5hrAkEewXXiASAM02-7xhreLRes0FE-w0MJE"},
{"content":{"body":"and yes, it would mean that if you want to use discard bindings, you would need to not name a thing `_` in that scope","format":"org.matrix.custom.html","formatted_body":"and yes, it would mean that if you want to use discard bindings, you would need to not name a thing <code>_</code> in that scope","m.mentions":{},"msgtype":"m.text"},"ts":1710917428059,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kNEo353tvUI1_XLEd8h5v0KlzWLe_buR_cZTPOVW21c"},
{"content":{"body":"ok so in that last example, adding line 3 would create an error where it previously worked","m.mentions":{},"msgtype":"m.text"},"ts":1710917434779,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WNv9Y1i-tGyqKqvZolnwhNa3Is3XNay84TJashe2Bes"},
{"content":{"body":"correct","m.mentions":{},"msgtype":"m.text"},"ts":1710917441177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pkSsDSfbZqmceo01dfd07kOkEI3sWMBFwchwDZBiG7Q"},
{"content":{"body":"and why is that better than `const { x: void } = foo` which doesn't have that downside?","format":"org.matrix.custom.html","formatted_body":"and why is that better than <code>const { x: void } = foo</code> which doesn't have that downside?","m.mentions":{},"msgtype":"m.text"},"ts":1710917454866,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XP6ti5BY30iL_2yaeOXXzHfcY9w3OKzAfgsY8COWpEc"},
{"content":{"body":"because `void` is so many more characters, and means a different thing","format":"org.matrix.custom.html","formatted_body":"because <code>void</code> is so many more characters, and means a different thing","m.mentions":{},"msgtype":"m.text"},"ts":1710917482105,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9y3br47LEEkkSOrvVfanoStujHwxHXr6_UY1a5cVKAw"},
{"content":{"body":"whereas `_` is the convention across many programming languages","format":"org.matrix.custom.html","formatted_body":"whereas <code>_</code> is the convention across many programming languages","m.mentions":{},"msgtype":"m.text"},"ts":1710917493630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QHwEkhY3_u9_xfamrzxIBTLbM7VxKXvrGYaX9g--nCo"},
{"content":{"body":"ok, but most JS devs won't have ever used another language.","m.mentions":{},"msgtype":"m.text"},"ts":1710917504772,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4AYT3eGzRHyTsC4Lk-WEzJvT1KjDYwo6DHdDcrOLH3s"},
{"content":{"body":"and 4 chars isn't that many more than 1, but sure, technically 4 > 1","m.mentions":{},"msgtype":"m.text"},"ts":1710917517557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gTDE0bBfK0NQflkc4HaAzVDlPlvJol__nJ-2vxsEmk4"},
{"content":{"body":"I dispute that claim and also I think we should still care about consistency with other languages even if it were true","m.mentions":{},"msgtype":"m.text"},"ts":1710917525139,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XvjRJ_UuuO5zocerFyWOtqVKznZ6XGldHbb2fFDw_U8"},
{"content":{"body":"and `void` already means \"ignore this thing\"","format":"org.matrix.custom.html","formatted_body":"and <code>void</code> already means \"ignore this thing\"","m.mentions":{},"msgtype":"m.text"},"ts":1710917531282,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$thZISn45riKxW1SpIV_rbPX9Bvsfjf_4TdFxe3r7wnQ"},
{"content":{"body":" * and `void` already means \"ignore this thing\". it's just that existing uses in JS also mean \"… and produce `undefined`\". in TS it literally means \"you can't use this thing\".","format":"org.matrix.custom.html","formatted_body":" * and <code>void</code> already means \"ignore this thing\". it's just that existing uses in JS also mean \"… and produce <code>undefined</code>\". in TS it literally means \"you can't use this thing\".","m.mentions":{},"m.new_content":{"body":"and `void` already means \"ignore this thing\". it's just that existing uses in JS also mean \"… and produce `undefined`\". in TS it literally means \"you can't use this thing\".","format":"org.matrix.custom.html","formatted_body":"and <code>void</code> already means \"ignore this thing\". it's just that existing uses in JS also mean \"… and produce <code>undefined</code>\". in TS it literally means \"you can't use this thing\".","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$thZISn45riKxW1SpIV_rbPX9Bvsfjf_4TdFxe3r7wnQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710917577185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tWGJb4bEi1dA_0Gn9CqF1WsfvKzt5OatOIbMV6EMC2Q"},
{"content":{"body":"iow i totally accept the argument of \"_ is what most other langs use\", that's empirical; as is \"4 chars is less than 1\". but i find the latter a weightless argument, and the former an argument only when looking at similar alternatives.","m.mentions":{},"msgtype":"m.text"},"ts":1710917651247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1hH1M2rsBOogyA2tcBWLTngekoQ9sGr_uRlllZN4bDo"},
{"content":{"body":" * iow i totally accept the argument of \"\\_ is what most other langs use\", that's empirical; as is \"4 chars is more than 1\". but i find the latter a weightless argument, and the former an argument only when looking at similar alternatives.","format":"org.matrix.custom.html","formatted_body":" * iow i totally accept the argument of &quot;_ is what most other langs use&quot;, that's empirical; as is &quot;4 chars is more than 1&quot;. but i find the latter a weightless argument, and the former an argument only when looking at similar alternatives.","m.mentions":{},"m.new_content":{"body":"iow i totally accept the argument of \"\\_ is what most other langs use\", that's empirical; as is \"4 chars is more than 1\". but i find the latter a weightless argument, and the former an argument only when looking at similar alternatives.","format":"org.matrix.custom.html","formatted_body":"iow i totally accept the argument of &quot;_ is what most other langs use&quot;, that's empirical; as is &quot;4 chars is more than 1&quot;. but i find the latter a weightless argument, and the former an argument only when looking at similar alternatives.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1hH1M2rsBOogyA2tcBWLTngekoQ9sGr_uRlllZN4bDo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710917672474,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$amMk3yJmZDQyzHnqk-8aaTRJ0_oQq2Pt4x4DamLwbQM"},
{"content":{"body":"I don't think the average JS app developer is using `void 0` so I would say any JS devs who have an association with `void` as a keyword would be thinking of it as a return type","format":"org.matrix.custom.html","formatted_body":"I don't think the average JS app developer is using <code>void 0</code> so I would say any JS devs who have an association with <code>void</code> as a keyword would be thinking of it as a return type","m.mentions":{},"msgtype":"m.text"},"ts":1710917714789,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$0jsSWh4s6cewoxbjmpLcGOIeadZ7b36h6dSauF5WuRU"},
{"content":{"body":"`_` is a perfectly reasonable thing to use in a language where it's not a valid identifier, to be clear - precisely because it's short and connotes \"nothing\"","format":"org.matrix.custom.html","formatted_body":"<code>_</code> is a perfectly reasonable thing to use in a language where it's not a valid identifier, to be clear - precisely because it's short and connotes \"nothing\"","m.mentions":{},"msgtype":"m.text"},"ts":1710917719355,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$emtnCmfyddbeYUZdNB5TDYUC_H2LobCqPpQksQbWqJs"},
{"content":{"body":"> <@rkirsling:matrix.org> I don't think the average JS app developer is using `void 0` so I would say any JS devs who have an association with `void` as a keyword would be thinking of it as a return type\n\ni agree! in which case (for TS) it means \"ignore this thing\", and fits even better than the JS usage.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0jsSWh4s6cewoxbjmpLcGOIeadZ7b36h6dSauF5WuRU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>I don't think the average JS app developer is using <code>void 0</code> so I would say any JS devs who have an association with <code>void</code> as a keyword would be thinking of it as a return type</blockquote></mx-reply>i agree! in which case (for TS) it means \"ignore this thing\", and fits even better than the JS usage.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0jsSWh4s6cewoxbjmpLcGOIeadZ7b36h6dSauF5WuRU"}},"msgtype":"m.text"},"ts":1710917740096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$34Xs20_isJyPyOpC4O9-IQJTYP_p_8wD8AiRFYekUOQ"},
{"content":{"body":"> <@ljharb:matrix.org> `_` is a perfectly reasonable thing to use in a language where it's not a valid identifier, to be clear - precisely because it's short and connotes \"nothing\"\n\nIn almost every language that added discards, `_` was already a legal identifier. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$emtnCmfyddbeYUZdNB5TDYUC_H2LobCqPpQksQbWqJs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br /><code>_</code> is a perfectly reasonable thing to use in a language where it's not a valid identifier, to be clear - precisely because it's short and connotes \"nothing\"</blockquote></mx-reply>In almost every language that added discards, <code>_</code> was already a legal identifier.","m.relates_to":{"m.in_reply_to":{"event_id":"$emtnCmfyddbeYUZdNB5TDYUC_H2LobCqPpQksQbWqJs"}},"msgtype":"m.text"},"ts":1710918600224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NdLtpUiCVFkoHLdbnIzMAPSIG-3bmmC-JTB9CA4AZXA"},
{"content":{"body":"my experience with scala tells me that conflating what \"_\" means, specifically, is a bad idea - i think there's 18 meanings of it depending on context?","m.mentions":{},"msgtype":"m.text"},"ts":1710918680028,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rc2C7BWP3RS3-oh17zz2_QAlF8EW3mAGW1Am1DjZ9u0"},
{"content":{"body":" * my experience with scala tells me that conflating what \"\\_\" means, specifically, is a bad idea - i think there's 18 meanings of it depending on context? (update: https://stackoverflow.com/a/8001065/632724 has 16)","format":"org.matrix.custom.html","formatted_body":" * my experience with scala tells me that conflating what &quot;_&quot; means, specifically, is a bad idea - i think there's 18 meanings of it depending on context? (update: https://stackoverflow.com/a/8001065/632724 has 16)","m.mentions":{},"m.new_content":{"body":"my experience with scala tells me that conflating what \"\\_\" means, specifically, is a bad idea - i think there's 18 meanings of it depending on context? (update: https://stackoverflow.com/a/8001065/632724 has 16)","format":"org.matrix.custom.html","formatted_body":"my experience with scala tells me that conflating what &quot;_&quot; means, specifically, is a bad idea - i think there's 18 meanings of it depending on context? (update: https://stackoverflow.com/a/8001065/632724 has 16)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Rc2C7BWP3RS3-oh17zz2_QAlF8EW3mAGW1Am1DjZ9u0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710918747484,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3TTJcaoqOH1L6FEVoCezh5I8MJH23G1jALEpt9K5r7Y"},
{"content":{"body":"If we held the \"don't repurpose identifiers\" position back in es2015, we would not have `yield` or `await`. Those are valid because you had to opt in to the new syntax. Every case where we've proposed coopting `_` has also been new syntax. ","format":"org.matrix.custom.html","formatted_body":"If we held the &quot;don't repurpose identifiers&quot; position back in es2015, we would not have <code>yield</code> or <code>await</code>. Those are valid because you had to opt in to the new syntax. Every case where we've proposed coopting <code>_</code> has also been new syntax.","msgtype":"m.text"},"ts":1710918771125,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zFpbrVP2xtye6BPuZhp313sUwCdXHsD4Nq575FuvBcI"},
{"content":{"body":"i think for those it was because the entire containing function had to use new syntax. this is just adding a line.","m.mentions":{},"msgtype":"m.text"},"ts":1710918810336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G2_z8O82qUw0GQwyn52V1CigF6tSMjEeVeBVEYmywwA"},
{"content":{"body":"For pipeline, it's fairly obvious that the boundary is the `|>` expression. For discards, it's a little less clear, but we could even go so far as to issue early errors if you reference a `_` declared in a scope with more than one declaration of `_`. It would be immediately obvious and indicate a need to refactor instead of silently picking a `_` declared in an outer scope.","format":"org.matrix.custom.html","formatted_body":"For pipeline, it's fairly obvious that the boundary is the <code>|&gt;</code> expression. For discards, it's a little less clear, but we could even go so far as to issue early errors if you reference a <code>_</code> declared in a scope with more than one declaration of <code>_</code>. It would be immediately obvious and indicate a need to refactor instead of silently picking a <code>_</code> declared in an outer scope.","m.mentions":{},"msgtype":"m.text"},"ts":1710919114396,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Gt2FMM3VAUuzqePdNK-9t0veVeQypIrIfblkBR0sUD0"},
{"content":{"body":"> <@bakkot:matrix.org> I would want it to poison all uses anywhere in the scope. so you could write\n> \n> ```\n> const { _ } = whatever;\n> console.log(_)\n> ```\n> and\n> ```\n> const { _ } = whatever;\n> const { x: _ } = foo;\n> ```\n> but not\n> ```\n> const { _ } = whatever;\n> console.log(_)\n> const { x: _ } = foo;\n> ```\n\nAlso note that already today adding the third line here makes the code an error, it's not something new","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qSgHCwr5hrAkEewXXiASAM02-7xhreLRes0FE-w0MJE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br /><p>I would want it to poison all uses anywhere in the scope. so you could write</p>\n<pre><code>const { _ } = whatever;\nconsole.log(_)\n</code></pre>\n<p>and</p>\n<pre><code>const { _ } = whatever;\nconst { x: _ } = foo;\n</code></pre>\n<p>but not</p>\n<pre><code>const { _ } = whatever;\nconsole.log(_)\nconst { x: _ } = foo;\n</code></pre>\n</blockquote></mx-reply>Also note that already today adding the third line here makes the code an error, it's not something new","m.relates_to":{"m.in_reply_to":{"event_id":"$qSgHCwr5hrAkEewXXiASAM02-7xhreLRes0FE-w0MJE"}},"msgtype":"m.text"},"ts":1710923714242,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$54XVt6sLJBnkBoS6ZrHmdTXvh_pIkWiggZPmlLZZe9s"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Also note that already today adding the third line here makes the code an error, it's not something new\n\nNot when you use `var`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$54XVt6sLJBnkBoS6ZrHmdTXvh_pIkWiggZPmlLZZe9s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br />Also note that already today adding the third line here makes the code an error, it's not something new</blockquote></mx-reply>Not when you use <code>var</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$54XVt6sLJBnkBoS6ZrHmdTXvh_pIkWiggZPmlLZZe9s"}},"msgtype":"m.text"},"ts":1710931301648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yszE4bXjZgEZkioZlPbxaE3Qwpvyt68dKdJFLcKMk3Q"},
{"content":{"body":"I would assume we don't change the behaviour of var","msgtype":"m.text"},"ts":1710935203737,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q944Jw5dFOIXMa5aVTpOcfjEGA3uQ0_KZ8CVQUdxTnM"},
{"content":{"body":"var already allows assigning to `_` as much as I want","format":"org.matrix.custom.html","formatted_body":"var already allows assigning to <code>_</code> as much as I want","msgtype":"m.text"},"ts":1710935214887,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$t9Rk3_UVUr6MopuNiRtVT2iHLlovT9wPY23G2kzdKs0"},
{"content":{"body":"The problems are let/const and strict function parameters","msgtype":"m.text"},"ts":1710935229389,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ijVrdkI60YoyOnV5rcXQ4JEC2wc2y7ChRrvdfCPTABs"},
{"content":{"body":"Using `_` as a discard in `var` would not be a discard. It would not have the safety guarantees we're discussing. If you have existing code that uses a `var _` and a reference to `_`, adding new code with `_` as a discard would not result in an early error and would cause that code to reference the wrong value. ","format":"org.matrix.custom.html","formatted_body":"Using <code>_</code> as a discard in <code>var</code> would not be a discard. It would not have the safety guarantees we're discussing. If you have existing code that uses a <code>var _</code> and a reference to <code>_</code>, adding new code with <code>_</code> as a discard would not result in an early error and would cause that code to reference the wrong value.","msgtype":"m.text"},"ts":1710938598764,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gGPdx-3XxtVuVO8mpXD4BPate-9k65z4l1RIZqkq5PA"},
{"content":{"body":"https://arxiv.org/pdf/2403.11919.pdf","m.mentions":{},"msgtype":"m.text"},"ts":1710945640166,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GeHLYTOu3KxiLZJrpNFu9QOVeWDd4gVD4ceU9u4G6DU"},
{"content":{"body":"From the Java proposal:\n> We assume that little if any actively-maintained code uses underscore as a variable name.\n\nlol that doesn't apply to JS","format":"org.matrix.custom.html","formatted_body":"<p>From the Java proposal:</p>\n<blockquote>\n<p>We assume that little if any actively-maintained code uses underscore as a variable name.</p>\n</blockquote>\n<p>lol that doesn't apply to JS</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710951109067,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$7I5ce5IryvH6iBv53fYDabRNZHC75SEr0zf10M1-LWw"},
{"content":{"body":"＿ should be safe","m.mentions":{},"msgtype":"m.text"},"ts":1710951301350,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc"},
{"content":{"body":"How is _ safe in a page that uses underscore.js?","m.mentions":{},"msgtype":"m.text"},"ts":1710951414328,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$OvRU1_zilumnaYIPh6XzrRZeeoBuT4ekSWlz1rbylHY"},
{"content":{"body":"and lodash, for anyone unfamiliar with underscore","m.mentions":{},"msgtype":"m.text"},"ts":1710952034785,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HLLUWEtR-BW_qktaCbJTxKjC9dZ-yYoDcnZQbeggRfs"},
{"content":{"body":"Ah, and it looks like Java has done the Work to make it safe - Java 8 issued warnings for using _ as an identifier, and 9 made it an error. So the pain is just people who had previously compiled only on Java 7 trying to upgrade to a modern Java.","m.mentions":{},"msgtype":"m.text"},"ts":1710952034906,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$KMTDkR8D9hSm4ynpbgn-_K8Ak4ASlHJuqWo0BSlOAY4"},
{"content":{"body":"Well Java introduced it through a breaking change — we wouldn't change the meaning of existing valid code, but just relax some errors ","msgtype":"m.text"},"ts":1710952181631,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vGI6BJvlYBAqAH1XrYMyxEjZ__k0iwBqOMAjUzCYJBA"},
{"content":{"body":"> <@jesse:igalia.com> ＿ should be safe\n\nIMO, `__` is worse than `void`. `_` makes sense as it's a single character and has precedence in many languages. `__` feels way more arbitrary","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jesse:igalia.com\">@jesse:igalia.com</a><br />＿ should be safe</blockquote></mx-reply>IMO, <code>__</code> is worse than <code>void</code>. <code>_</code> makes sense as it's a single character and has precedence in many languages. <code>__</code> feels way more arbitrary","m.relates_to":{"m.in_reply_to":{"event_id":"$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc"}},"msgtype":"m.text"},"ts":1710952962404,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Iuf-T7Ur-y6cKisJI9ZeqJtzLGYdkqg1i2Qar9kf1FI"},
{"content":{"body":"I'm pretty sure `__` was joking...","format":"org.matrix.custom.html","formatted_body":"I'm pretty sure <code>__</code> was joking...","m.mentions":{},"msgtype":"m.text"},"ts":1710952980102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v3f8DR9axftf7Mfm6Rf5Z1VZXuxhnj4Ulu_4oeF7iqA"},
{"content":{"body":"* IMO, ` __ ` is worse than `void`. `_` makes sense as it's a single character and has precedence in many languages.  feels way more arbitrary","m.new_content":{"body":"> <@jesse:igalia.com> ＿ should be safe\n\nIMO, ` __ ` is worse than `void`. `_` makes sense as it's a single character and has precedence in many languages.  feels way more arbitrary","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a><br />＿ should be safe</blockquote></mx-reply>IMO, <code>__</code> is worse than <code>void</code>. <code>_</code> makes sense as it's a single character and has precedence in many languages.  feels way more arbitrary","msgtype":"m.text"},"m.relates_to":{"event_id":"$Iuf-T7Ur-y6cKisJI9ZeqJtzLGYdkqg1i2Qar9kf1FI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710952993241,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5qpASr-3VR8_f4e6hvovO67ke4Z9Cx0Awo9SvrwSYE4"},
{"content":{"body":"it's a single non-ASCII character","m.mentions":{},"msgtype":"m.text"},"ts":1710953408319,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$wIkK8pYGhK61Qdb50ssRAz79aCIsM7d5HG_6dHI_yeA"},
{"content":{"body":"`…`","format":"org.matrix.custom.html","formatted_body":"<code>…</code>","m.mentions":{},"msgtype":"m.text"},"ts":1710953497391,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$5l5_is4VSkGc4t3RaR7llIST5f3lcysOhcf65MBqmok"},
{"content":{"body":"> <@tabatkins:matrix.org> How is _ safe in a page that uses underscore.js?\n\nBecause existing code would still work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24OvRU1_zilumnaYIPh6XzrRZeeoBuT4ekSWlz1rbylHY\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>How is _ safe in a page that uses underscore.js?</blockquote></mx-reply>Because existing code would still work.","m.relates_to":{"m.in_reply_to":{"event_id":"$OvRU1_zilumnaYIPh6XzrRZeeoBuT4ekSWlz1rbylHY"}},"msgtype":"m.text"},"ts":1710953668957,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$26tLOQZWiiwiGqcdo0_PG4mAOZK337W7C68dnbkw5Yk"},
{"content":{"body":"We don’t need to make `_` invalid, we just need to allow reassignments in _new code_.","format":"org.matrix.custom.html","formatted_body":"We don’t need to make <code>_</code> invalid, we just need to allow reassignments in <em>new code</em>.","msgtype":"m.text"},"ts":1710953704034,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qRuTqZfpoj8Pgnsdc1QLKb7OzfT-PIG4IVdjANY9s80"},
{"content":{"body":"sure, I guess the principle is that new features should work nicely, when mixed together with existing code","m.mentions":{},"msgtype":"m.text"},"ts":1710953732087,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vUi6-jiR1y3mLjwBXTwbhPcbGB1LHa0o3YWOISTAcSI"},
{"content":{"body":"(when possible)","m.mentions":{},"msgtype":"m.text"},"ts":1710953741940,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x3R21B2TO7leUDShMAkj1066NBmzAjSYtC5rAxrtyCY"},
{"content":{"body":"We can allow reassigning to all identifiers, moving existing redeclaration errors to errors on reference access","msgtype":"m.text"},"ts":1710953786176,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Rdkam3WyFuISmVuT5PPJ_aX3b1OoUAfuvDzx0saX89M"},
{"content":{"body":"And underscore.js users can use $","msgtype":"m.text"},"ts":1710953806056,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2UK4Ozo-jrov3ZwSUo5_V7a6fsLHldIYACdrTb2A0PE"},
{"content":{"body":"And jQuery+underscore can use _$_$_$","format":"org.matrix.custom.html","formatted_body":"And jQuery+underscore can use <em>$</em><span data-mx-maths=\"_\"><code>_</code></span>","msgtype":"m.text"},"ts":1710953815413,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$lUc9BkE_qvajDfk02-fXpae8m_UD_FKUqLvPhfMyEWc"},
{"content":{"body":"@bakkot’s idea would work for that. And in cases where it doesn’t renaming a local, lexically-scoped variable is trivial and automatable.","msgtype":"m.text"},"ts":1710953820744,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bYcwdUYXsVZkUQGVXHxsPeKnk0ie9_ktimyrrTwYj9s"},
{"content":{"body":"* @bakkot’s idea would work for that. And in cases where it causes a conflict, renaming a local, lexically-scoped variable is trivial and automatable.","m.new_content":{"body":"@bakkot’s idea would work for that. And in cases where it causes a conflict, renaming a local, lexically-scoped variable is trivial and automatable.","msgtype":"m.text"},"m.relates_to":{"event_id":"$bYcwdUYXsVZkUQGVXHxsPeKnk0ie9_ktimyrrTwYj9s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710953869819,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7f-pYrpX0i311OJQO593Z0TrYLzzNunESKQzOzHIks8"},
{"content":{"body":"Why not something novel like *?  I’m sure there’s a good reason ","format":"org.matrix.custom.html","formatted_body":"Why not something novel like *?  I’m sure there’s a good reason","msgtype":"m.text"},"ts":1710953946200,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$ADA1jxLN7WdDtlo5kv_AZRpkEFE-9RiB0sVQsep67fY"},
{"content":{"body":"> <@bakkot:matrix.org> so there are a variety of ways this could work. the simplest backwards-compatible way would be, no changes to any current programs, but it becomes legal to re-declare `_` in the same scope; if you do, any references to `_` within that scope are an error (possibly at parse time).\n\nI believe this is what nicolo-ribaudo has been advocating for","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GfaNvV__wPUwdEl0ChT2fsIZQAwuBdsKlf64ofCmVuU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>so there are a variety of ways this could work. the simplest backwards-compatible way would be, no changes to any current programs, but it becomes legal to re-declare <code>_</code> in the same scope; if you do, any references to <code>_</code> within that scope are an error (possibly at parse time).</blockquote></mx-reply>I believe this is what <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> has been advocating for","m.mentions":{"user_ids":["@bakkot:matrix.org","@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GfaNvV__wPUwdEl0ChT2fsIZQAwuBdsKlf64ofCmVuU"}},"msgtype":"m.text"},"ts":1710953960730,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YbyAO7VWiLabwRpQ-sEHD78yLPAQWjhf-tSp7Yd6So8"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1710953973501,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8O0hByBHFcDzp_tRaWNti59Jzl8bgWTWjURHHoiYKc0"},
{"content":{"body":"I mean `*`","format":"org.matrix.custom.html","formatted_body":"I mean <code>*</code>","msgtype":"m.text"},"ts":1710953982492,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$GG6y-HHeTg42jS0ioQYLC74o2uxseHS_KdfZBEtwkr8"},
{"content":{"body":"let *= a is already valid","msgtype":"m.text"},"ts":1710953999043,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HGr7NPbCsQZPYHyAPin1ACQaUlYo5Usld8UPbzOoNR4"},
{"content":{"body":"nicolo-ribaudo: ?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: ?","msgtype":"m.text"},"ts":1710954014636,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$pZb1SN9zDoq4eGgWE9Cx5T3agZ7LHVfGv6mUzy8bsoo"},
{"content":{"body":"You are multiplying the `let` variable by `a`","format":"org.matrix.custom.html","formatted_body":"You are multiplying the <code>let</code> variable by <code>a</code>","msgtype":"m.text"},"ts":1710954037151,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$a2as6bC0POeVMYnLx_cKoYffeqThZcY3nc2rIVmpdDI"},
{"content":{"body":"Let is a keyword","msgtype":"m.text"},"ts":1710954059704,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$0dvyNah3bmjn6OTow5vzpTU-bFn6xQeQYpdmF7VypKo"},
{"content":{"body":"Am I missing something obvious?","msgtype":"m.text"},"ts":1710954136361,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$TbujWW1TUO-bI2J5AUMl0UfE5-x55i0oNf_i6eIBKW4"},
{"content":{"body":"Let is only reserved in strict mode","m.mentions":{},"msgtype":"m.text"},"ts":1710954152233,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$TQviWLMIJclj42s_b80tpCWPMYFgKVOpCcmPltYLi8o"},
{"content":{"body":"sloppy mode","m.mentions":{},"msgtype":"m.text"},"ts":1710954152657,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jRqTFU90AJ_CvMzq5vv0I6E3OnpkmuIBH2m9Q-oakOk"},
{"content":{"body":"let didn't used to be a keyword; you can still use it as a variable sometimes","m.mentions":{},"msgtype":"m.text"},"ts":1710954164879,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zvpmywyGYXLY89lFLqfOVBJLbdTUbcoyRX4rvHNlKY0"},
{"content":{"body":"you can switch into this mode with `eval()`","format":"org.matrix.custom.html","formatted_body":"you can switch into this mode with <code>eval()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1710954181433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1pIhPIQRhZif8YOnZECJ2OVjY7gOJ1UXfW8h_CcAng8"},
{"content":{"body":"I really don’t love void bindings in bare assignments, ie not destructuring ","format":"org.matrix.custom.html","formatted_body":"I really don’t love void bindings in bare assignments, ie not destructuring","msgtype":"m.text"},"ts":1710954363184,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$zkcZqB2MiWJut6aPSYN10PnbMerMcf8NCnspbCAZmrI"},
{"content":{"body":"wouldn't it be weird to distinguish them, though?","m.mentions":{},"msgtype":"m.text"},"ts":1710954376825,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$euyEBtuUZ4YmmLgyVlZt2OXvK3K5-lhUZ4ejXJW2SWo"},
{"content":{"body":"Yes but a throwaway binding is meant to throw something away that you have to reference but don’t want to bind in the scope.","msgtype":"m.text"},"ts":1710954432839,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Balupc9-AVy55oOVHz9pgLbHa0zedEFo6uXIK8h3o5w"},
{"content":{"body":"But I’ll concede it’s messy","msgtype":"m.text"},"ts":1710954460510,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$FoAmlKR5HJ8_LjHLQF95IuNeR3xmsfSWaT8LYiJtxLY"},
{"content":{"body":"> <@jesse:igalia.com> ＿ should be safe\n\nMan you really gotta make it obvious when you're doing unicode shenanigans (U+ff3f FULLWIDTH LOW LINE, not ASCII underscore) ^_^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jesse:igalia.com\">@jesse:igalia.com</a><br>＿ should be safe</blockquote></mx-reply>Man you really gotta make it obvious when you're doing unicode shenanigans (U+ff3f FULLWIDTH LOW LINE, not ASCII underscore) ^_^","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fE4uagK3PjJqPAy6ehWDmK0GJnqUiI1soeYPTNIhEsc"}},"msgtype":"m.text"},"ts":1710954527687,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$v8GJhRFwajO21zyWEpYt2AMBpMJNzXeaTE6XfZo_scI"},
{"content":{"body":"> <@tabatkins:matrix.org> Man you really gotta make it obvious when you're doing unicode shenanigans (U+ff3f FULLWIDTH LOW LINE, not ASCII underscore) ^_^\n\nJavaScript now will begin its APL arc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24v8GJhRFwajO21zyWEpYt2AMBpMJNzXeaTE6XfZo_scI\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Man you really gotta make it obvious when you're doing unicode shenanigans (U+ff3f FULLWIDTH LOW LINE, not ASCII underscore) ^_^</blockquote></mx-reply>JavaScript now will begin its APL arc","m.relates_to":{"m.in_reply_to":{"event_id":"$v8GJhRFwajO21zyWEpYt2AMBpMJNzXeaTE6XfZo_scI"}},"msgtype":"m.text"},"ts":1710954648584,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$bBaQrMR4Hq3j-Ysi3q4bUz76tLLvRQVczyb8yB6dk8M"},
{"content":{"body":"This is why CSS took a (technically non-binding) resolution on itself to limit its built-in syntax to the ASCII range, like a decade ago.","m.mentions":{},"msgtype":"m.text"},"ts":1710954748533,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$6wcVdK2uFw8IGGhX7a1mtATZqhyGJ_Sn2yeENxFKyrU"},
{"content":{"body":"(Non-binding because we can always reverse our own resolutions.)","m.mentions":{},"msgtype":"m.text"},"ts":1710954762970,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$c3l5kuFGDq1-tf_pFj-HXUa8mRY1FlTLl9HFVsx9WrA"},
{"content":{"body":"Honest question:  would it be change the binding rules for an existing (and widely used) identifier, or using a new piece of syntax for this that only works in strict mode?  Is there any precedent for the latter?","msgtype":"m.text"},"ts":1710955061879,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$E5uqkHPctT2pGH2W0rHGgxBZYg69kfujyjEihl3r11k"},
{"content":{"body":"* Honest question: would it be better to change the binding rules for an existing (and widely used) identifier, or using a new piece of syntax for this that only works in strict mode? Is there any precedent for the latter?","m.new_content":{"body":"Honest question: would it be better to change the binding rules for an existing (and widely used) identifier, or using a new piece of syntax for this that only works in strict mode? Is there any precedent for the latter?","msgtype":"m.text"},"m.relates_to":{"event_id":"$E5uqkHPctT2pGH2W0rHGgxBZYg69kfujyjEihl3r11k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710955118891,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$t3M9NzqXeXEgiFw6zSqgngLdI5yR9Oke2xP8DJafQkI"},
{"content":{"body":"My preference is still to use a new piece of syntax. `void` satisfies that and works in sloppy mode too. there's certainly precedent for strict-only syntax as well.","format":"org.matrix.custom.html","formatted_body":"My preference is still to use a new piece of syntax. <code>void</code> satisfies that and works in sloppy mode too. there's certainly precedent for strict-only syntax as well.","m.mentions":{},"msgtype":"m.text"},"ts":1710955678970,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UVUbhreh-dz9-EM62JUSmUpIKJInvjaLywBc0Fm_6EU"},
{"content":{"body":"> <@anthonybullard:matrix.org> Honest question: would it be better to change the binding rules for an existing (and widely used) identifier, or using a new piece of syntax for this that only works in strict mode? Is there any precedent for the latter?\n\nthat's a matter of opinion, but given that the former would allow us to be consistent what ~every other language does, it seems like the better option by far","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E5uqkHPctT2pGH2W0rHGgxBZYg69kfujyjEihl3r11k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Honest question: would it be better to change the binding rules for an existing (and widely used) identifier, or using a new piece of syntax for this that only works in strict mode? Is there any precedent for the latter?</blockquote></mx-reply>that's a matter of opinion, but given that the former would allow us to be consistent what ~every other language does, it seems like the better option by far","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E5uqkHPctT2pGH2W0rHGgxBZYg69kfujyjEihl3r11k"}},"msgtype":"m.text"},"ts":1710955748020,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IcfCLX7DqGT6e2xu-hi98mmT7SYPyFspBKe0D3w-u5c"},
{"content":{"body":"> <@bakkot:matrix.org> that's a matter of opinion, but given that the former would allow us to be consistent what ~every other language does, it seems like the better option by far\n\nI agree with you, and with ljharb as well, somehow at the same time. I think it depends on what our values here are. Consistency with other languages or minimal impact to existing language semantics","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24IcfCLX7DqGT6e2xu-hi98mmT7SYPyFspBKe0D3w-u5c\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that's a matter of opinion, but given that the former would allow us to be consistent what ~every other language does, it seems like the better option by far</blockquote></mx-reply>I agree with you, and with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> as well, somehow at the same time. I think it depends on what our values here are. Consistency with other languages or minimal impact to existing language semantics","m.relates_to":{"m.in_reply_to":{"event_id":"$IcfCLX7DqGT6e2xu-hi98mmT7SYPyFspBKe0D3w-u5c"}},"msgtype":"m.text"},"ts":1710955976548,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Foo4-EYkrmH5dGGTXcag6ZfVTsJ1j42ATFD9T7YLahU"},
{"content":{"body":"I suppose `_` has some awkward interactions when used in assignment position","format":"org.matrix.custom.html","formatted_body":"I suppose <code>_</code> has some awkward interactions when used in assignment position","m.mentions":{},"msgtype":"m.text"},"ts":1710957242963,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fb0kbeRJjbsYO3nhooh3Fd3IopoHa32-M9LmchShQG0"},
{"content":{"body":"I don’t love the keyword void, but that’s just aesthetic mostly. I’d love to have some piece of syntax that could be used with no ambiguity in strict mode","msgtype":"m.text"},"ts":1710957370518,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$kyCNSwR0_agKbAKTbbubINsJktN90txB6f9VOSoJH5Y"},
{"content":{"body":"Even in strict mode, `*` (or other operators) don't work in using declarations","format":"org.matrix.custom.html","formatted_body":"Even in strict mode, <code>*</code> (or other operators) don't work in using declarations","m.mentions":{},"msgtype":"m.text"},"ts":1710957640079,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YqwtH3MymHAFIcsgkastonfqBYm9PGmGyazHTtrqzR0"},
{"content":{"body":"`using *= x`","format":"org.matrix.custom.html","formatted_body":"<code>using *= x</code>","m.mentions":{},"msgtype":"m.text"},"ts":1710957646713,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qtpnptLdlsYJLlPR7cHdQUYFKroQVG5Q1Y4JDGKSxdo"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Even in strict mode, `*` (or other operators) don't work in using declarations\n\nDamn you’re right. Is there any symbol that would work?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24YqwtH3MymHAFIcsgkastonfqBYm9PGmGyazHTtrqzR0\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Even in strict mode, <code>*</code> (or other operators) don't work in using declarations</blockquote></mx-reply>Damn you’re right. Is there any symbol that would work?","m.relates_to":{"m.in_reply_to":{"event_id":"$YqwtH3MymHAFIcsgkastonfqBYm9PGmGyazHTtrqzR0"}},"msgtype":"m.text"},"ts":1710957924200,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$lCqUK0Ze2UBjibGIkJpoY-_D3UqmnKpmztAOBAjqW4s"},
{"content":{"body":"> <@anthonybullard:matrix.org> Damn you’re right. Is there any symbol that would work?\n\nNot really. `@` and `#` have alternative semantic meanings (decorators and private names) that make them a bad fit, plus `@` and `#` have already been considered for infix operations in the past, and I'd rather not close off that syntax space just for discards.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lCqUK0Ze2UBjibGIkJpoY-_D3UqmnKpmztAOBAjqW4s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Damn you’re right. Is there any symbol that would work?</blockquote></mx-reply>Not really. <code>@</code> and <code>#</code> have alternative semantic meanings (decorators and private names) that make them a bad fit, plus <code>@</code> and <code>#</code> have already been considered for infix operations in the past, and I'd rather not close off that syntax space just for discards.","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lCqUK0Ze2UBjibGIkJpoY-_D3UqmnKpmztAOBAjqW4s"}},"msgtype":"m.text"},"ts":1710958180896,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9XRTYzhz3NhU8a4UC-9cbrttfsGUfVMqZCje67o4m4E"},
{"content":{"body":"What about ?","msgtype":"m.text"},"ts":1710958217544,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Rer0UKW7PrYuNXY0MCATekxRtkTQ8DuNsDNzezV4NWo"},
{"content":{"body":"`?` is proposed as a special token for partial application, and had already had feedback bout \"too much `?`\" considering conditionals, optional chaining, null coalesce, and null coalesce assignment.","format":"org.matrix.custom.html","formatted_body":"<code>?</code> is proposed as a special token for partial application, and had already had feedback bout \"too much <code>?</code>\" considering conditionals, optional chaining, null coalesce, and null coalesce assignment.","m.mentions":{},"msgtype":"m.text"},"ts":1710958282869,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0drCkdBAvDAdN80ubOsQWPnjmWcwNydwPMojY71DtZg"},
{"content":{"body":"It’s use in partial application is what made my think of it","msgtype":"m.text"},"ts":1710958321963,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Bz4Y6m412-XQ-rj35iK6ekjbdOD76INaGGvMItUnv7Y"},
{"content":{"body":"I've also proposed using `~` as part of partial application since one of the other concerns was the need for a token to opt-in to the behavior, so `foo~(1, ?, 2)` as a partial application of `foo` that supplies the first and third argument with a placeholder for the 2nd argument.","format":"org.matrix.custom.html","formatted_body":"I've also proposed using <code>~</code> as part of partial application since one of the other concerns was the need for a token to opt-in to the behavior, so <code>foo~(1, ?, 2)</code> as a partial application of <code>foo</code> that supplies the first and third argument with a placeholder for the 2nd argument.","m.mentions":{},"msgtype":"m.text"},"ts":1710958377820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N71nJQ16nkN-xwPEkmw1Vt_5e2qxxoHvKhU8T2iuO6s"},
{"content":{"body":"> <@rbuckton:matrix.org> I've also proposed using `~` as part of partial application since one of the other concerns was the need for a token to opt-in to the behavior, so `foo~(1, ?, 2)` as a partial application of `foo` that supplies the first and third argument with a placeholder for the 2nd argument.\n\nThis example showed me maybe partial application is a bad idea in JS, as much as I love it in FP languages","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24N71nJQ16nkN-xwPEkmw1Vt_5e2qxxoHvKhU8T2iuO6s\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I've also proposed using <code>~</code> as part of partial application since one of the other concerns was the need for a token to opt-in to the behavior, so <code>foo~(1, ?, 2)</code> as a partial application of <code>foo</code> that supplies the first and third argument with a placeholder for the 2nd argument.</blockquote></mx-reply>This example showed me maybe partial application is a bad idea in JS, as much as I love it in FP languages","m.relates_to":{"m.in_reply_to":{"event_id":"$N71nJQ16nkN-xwPEkmw1Vt_5e2qxxoHvKhU8T2iuO6s"}},"msgtype":"m.text"},"ts":1710958453974,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$o8TNZ2PGnB22K-oao__rey17E1jhzEmcHJr8OnV8iVE"},
{"content":{"body":"I don't think any other ASCII symbols that are generally available on most keyboards match the semantic behavior of a discard.","m.mentions":{},"msgtype":"m.text"},"ts":1710958458567,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ceDS5gkqUGmfqNdRGNcUTe80FTRSDWWHSIGiyTxnO-o"},
{"content":{"body":"> <@anthonybullard:matrix.org> This example showed me maybe partial application is a bad idea in JS, as much as I love it in FP languages\n\nThat's a fairly weak example. Considering how often it's used in Ramda and other FP libraries, I think its extremely valuable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8TNZ2PGnB22K-oao__rey17E1jhzEmcHJr8OnV8iVE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>This example showed me maybe partial application is a bad idea in JS, as much as I love it in FP languages</blockquote></mx-reply>That's a fairly weak example. Considering how often it's used in Ramda and other FP libraries, I think its extremely valuable.","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o8TNZ2PGnB22K-oao__rey17E1jhzEmcHJr8OnV8iVE"}},"msgtype":"m.text"},"ts":1710958508672,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z95tnGrITOOi-m3FLuNjLdd1litKwU9nTYstT9wNgmU"},
{"content":{"body":"We are just running out of concise syntax ","format":"org.matrix.custom.html","formatted_body":"We are just running out of concise syntax","msgtype":"m.text"},"ts":1710958510820,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$EpEBTlqmrj-yo4gk5jmjse7D3iPFoXEeI4ooUR-iXNo"},
{"content":{"body":"We've already run out of concise syntax. One of the blockers for pipeline has been picking a topic token.","m.mentions":{},"msgtype":"m.text"},"ts":1710958542674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sl_qYVBqlKtCTsJt8XxpLRS7FXsz0bo4Yt-cZpNVB_Q"},
{"content":{"body":"> <@rbuckton:matrix.org> We've already run out of concise syntax. One of the blockers for pipeline has been picking a topic token.\n\nPipeline works best when a language grows around the semantics of either data first or data last matching the operator semantics","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24sl_qYVBqlKtCTsJt8XxpLRS7FXsz0bo4Yt-cZpNVB_Q\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We've already run out of concise syntax. One of the blockers for pipeline has been picking a topic token.</blockquote></mx-reply>Pipeline works best when a language grows around the semantics of either data first or data last matching the operator semantics","m.relates_to":{"m.in_reply_to":{"event_id":"$sl_qYVBqlKtCTsJt8XxpLRS7FXsz0bo4Yt-cZpNVB_Q"}},"msgtype":"m.text"},"ts":1710958600134,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$__ay7xB8ziJBPX9a3YRh33MP9OOYmT-68HPy36Ol5XE"},
{"content":{"body":"I'll admit, I'm still partial to F#-style pipes and papp without the `~`, regardless the direction the pipeline proposal took.","format":"org.matrix.custom.html","formatted_body":"I'll admit, I'm still partial to F#-style pipes and papp without the <code>~</code>, regardless the direction the pipeline proposal took.","m.mentions":{},"msgtype":"m.text"},"ts":1710958604244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7BzvS7AjEJZpmkyYHA90-iesQYBxIm_WCDwKErUM4ZQ"},
{"content":{"body":"? Being a operator that in an expression context meaning “something referred to but not bound” is somewhat elegant on its own","msgtype":"m.text"},"ts":1710958696713,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$lF-LDQIWUNIejuucIY4GzFwEfmwrMdbNtZ2BmiXEHF8"},
{"content":{"body":"Two of biggest FP-ish libraries use opposite positions (lodash and underscore are data-first, Ramda is data-last). The benefit of papp was that you didn't have to \"pick a winner\"","m.mentions":{},"msgtype":"m.text"},"ts":1710958697905,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RZaFkkGrxBd0t9JGyRbX7Fe-_1oRRk1qVVeO2uLvOac"},
{"content":{"body":"Not operator, but syntactic construct","msgtype":"m.text"},"ts":1710958732170,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$MELgjM5gdUyW-Si8g9442zl6g9eIEqNM4bmVoIW5vGc"},
{"content":{"body":"You can't have `?` stand on its own in a given expression without some kind of boundary. For papp, I wanted that boundary to be _Arguments_","format":"org.matrix.custom.html","formatted_body":"You can't have <code>?</code> stand on its own in a given expression without some kind of boundary. For papp, I wanted that boundary to be <em>Arguments</em>","m.mentions":{},"msgtype":"m.text"},"ts":1710958750609,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uwkAEPFOHgx2xl0FMXLj0W6joOlmA8tOU_WQeBpUBo0"},
{"content":{"body":"So, `add(1, ?)` would have been fine, but `add(1, { option: ? })` would not, because it goes from being an _Argument placeholder t","format":"org.matrix.custom.html","formatted_body":"So, <code>add(1, ?)</code> would have been fine, but <code>add(1, { option: ? })</code> would not, because it goes from being an _Argument placeholder t","m.mentions":{},"msgtype":"m.text"},"ts":1710958805673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iHsBaTMH6Bh3Gqb6sC6uOTqtHnxe1XoFqWL_3u0zzK8"},
{"content":{"body":" * So, `add(1, ?)` would have been fine, but `add(1, { option: ? })` would not, because it goes from being an _Argument_ placeholder to being an arbitrary expression.","format":"org.matrix.custom.html","formatted_body":" * So, <code>add(1, ?)</code> would have been fine, but <code>add(1, { option: ? })</code> would not, because it goes from being an <em>Argument</em> placeholder to being an arbitrary expression.","m.mentions":{},"m.new_content":{"body":"So, `add(1, ?)` would have been fine, but `add(1, { option: ? })` would not, because it goes from being an _Argument_ placeholder to being an arbitrary expression.","format":"org.matrix.custom.html","formatted_body":"So, <code>add(1, ?)</code> would have been fine, but <code>add(1, { option: ? })</code> would not, because it goes from being an <em>Argument</em> placeholder to being an arbitrary expression.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iHsBaTMH6Bh3Gqb6sC6uOTqtHnxe1XoFqWL_3u0zzK8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710958818317,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NsqOZ9Prfnpgic7Ua-MiqA6D-yEsWhwi7W4EYOgArBo"},
{"content":{"body":"The boundaries could be:\n- assignment\n- array element in destructuring \n- object value in destructuring \n- arguments in Papp","format":"org.matrix.custom.html","formatted_body":"<p>The boundaries could be:</p>\n<ul>\n<li>assignment</li>\n<li>array element in destructuring</li>\n<li>object value in destructuring</li>\n<li>arguments in Papp</li>\n</ul>","msgtype":"m.text"},"ts":1710958845027,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$0PWrqy-MWYWhDbu_wI0YBV9uY3mezQ4p4ELrHVRN6NM"},
{"content":{"body":"I'm not sure I understand what you mean by the first three.","m.mentions":{},"msgtype":"m.text"},"ts":1710958868999,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jEDc6G6BbynHvMuU0YNTGLwZOZGNTHNkCCWSSRgr9PI"},
{"content":{"body":"Lhs","msgtype":"m.text"},"ts":1710958875707,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$no-7M4yroENZM7iMJ7lPvWXnnvQ7geX6oJdxRnCMdZU"},
{"content":{"body":"I mean, what would `? = x` even mean?","format":"org.matrix.custom.html","formatted_body":"I mean, what would <code>? = x</code> even mean?","m.mentions":{},"msgtype":"m.text"},"ts":1710958891211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VhwOhwmO-8x9eFLxJwleY80043QflLnFbbojOXvQjhc"},
{"content":{"body":"I’m not sure, but above it was communicated that there is a desire to have a discard token be the same in destructuring and bare assignment ","format":"org.matrix.custom.html","formatted_body":"I’m not sure, but above it was communicated that there is a desire to have a discard token be the same in destructuring and bare assignment","msgtype":"m.text"},"ts":1710958936024,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$XW0MfXuo8u2PB40RxwTQl621RipA3-lvCuLb1VQHP6k"},
{"content":{"body":"The use case for the latter is unclear to me","msgtype":"m.text"},"ts":1710958967198,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$RnyxS2co9-USFZX9luRNKqwhpst2jj1CLok4UTglk2U"},
{"content":{"body":"For discards, `void = x` is currently disallowed because it is meaningless.","format":"org.matrix.custom.html","formatted_body":"For discards, <code>void = x</code> is currently disallowed because it is meaningless.","m.mentions":{},"msgtype":"m.text"},"ts":1710959044459,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K8ysxjXvVQtr0g58CBydAV9ZZRJXtfnSXsmwqqT8pf0"},
{"content":{"body":"`let ? = X` is weird for sure","format":"org.matrix.custom.html","formatted_body":"<code>let ? = X</code> is weird for sure","msgtype":"m.text"},"ts":1710959062312,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$KrhkwwZewQVGDVOriaLC_TAeOFtoZO1sMbyg_B5F1gM"},
{"content":{"body":"So drop that","msgtype":"m.text"},"ts":1710959073620,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$27RJZMTYO3Pu4hEJuzk2RUlom20fPNH0lXF6jZ8wBCk"},
{"content":{"body":"And leave it to array and object destructuring and Papp arguments","msgtype":"m.text"},"ts":1710959100089,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$gJF8Wc7Z8pu765U0sXs2JNDuYTWdsi4JTQjpyUD_Hx0"},
{"content":{"body":"Maybe I should be having this discussion in public on the proposal?","msgtype":"m.text"},"ts":1710959153478,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$-8OkS3s_AkLx3snkcpTKCcekmbqgRZkAzxcCQZCrSDM"},
{"content":{"body":"Also true. In the proposal it is only present for two reasons:\n1. consistency with `using`\n2. avoiding comma expressions in cases like `const a = x(), b = (y(), z())` (more of a benefit for transpilers than developers)\n\nBoth are very weak reasons.","format":"org.matrix.custom.html","formatted_body":"<p>Also true. In the proposal it is only present for two reasons:</p>\n<ol>\n<li>consistency with <code>using</code></li>\n<li>avoiding comma expressions in cases like <code>const a = x(), b = (y(), z())</code> (more of a benefit for transpilers than developers)</li>\n</ol>\n<p>Both are very weak reasons.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710959175228,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L1jknUWiNR9ZOshIfsjpvDbd3STl523F-d21TN4udM8"},
{"content":{"body":"This was discussed in the last plenary.","m.mentions":{},"msgtype":"m.text"},"ts":1710959180067,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AgRunuixILxxOExNrzw_47DFxcGuywnyGFRqlY9Vl44"},
{"content":{"body":"I just haven't had time to update the proposal explainer with those outcomes yet.","m.mentions":{},"msgtype":"m.text"},"ts":1710959197795,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$57GT7mNnx1K-cqFPEaX0dVW6vK_qVhdomhVYD6us78w"},
{"content":{"body":"It's also already mentioned here: https://github.com/tc39/proposal-discard-binding/issues/1","m.mentions":{},"msgtype":"m.text"},"ts":1710959229224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fRVlS15ERBj9IAV2TZuKU4gqtM-PVUay7ycQ9P3XdK4"},
{"content":{"body":"> <@rbuckton:matrix.org> This was discussed in the last plenary.\n\nUnfortunately, despite my company hosting it I didn’t have budget to make the last plenary so I’m a little behind ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AgRunuixILxxOExNrzw_47DFxcGuywnyGFRqlY9Vl44\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This was discussed in the last plenary.</blockquote></mx-reply>Unfortunately, despite my company hosting it I didn’t have budget to make the last plenary so I’m a little behind","m.relates_to":{"m.in_reply_to":{"event_id":"$AgRunuixILxxOExNrzw_47DFxcGuywnyGFRqlY9Vl44"}},"msgtype":"m.text"},"ts":1710959242501,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$LESnyC6GMftwTLjduUc5QqWUzv4Db4vpFMVQD4wZOMM"},
{"content":{"body":"some language repurpose identifiers as special things. that's good, but I don't think we have that tradition in js.\nby \"repurpose identifiers as special things\" I mean new things are using slightly different visual feelings in the common use cases. e.g. \"var yield = f()\" and \"yield x + y\" don't feel the same. (I know there are cases that are valid in both interpretations like yield[expr] so it's up to syntax parameters)\n\nrepurposing _ is not what we do to the yield and await. The new use case of _ looks very similar to the old one (old \"_.add()\" new \"_ = x\") so I don't think it's a good addition ","msgtype":"m.text"},"ts":1710959637432,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RhaEgsta3-Ib2tKOqUrqp6-QPUbssiP0ehlvgzcfcxs"},
{"content":{"body":"On the papp/pipeline side, I still think F# pipes and papp would have been far more likely to get to stage 2 as they were general purpose capabilities that dovetailed. F#'s style biggest drawbacks were how to handle `yield` and `await`, and a push to allow you to do general operations against the topic (i.e., `x |> _ + _`). For F#-style `await` was solvable, and I don't think `yield` was all that important (i.e., you could still write `(yield x |> F) |> G`). I also think the overwhelming majority case for pipelining was writing expressions in arrow functions, not immediately on the right side of the pipe:\n```\n// most likely use\nar |> filter(?, x => x > 1)\n   |> map(?, x => x * 2)\n```\nI just don't see `y = x |> _ + _` as all that valuable, especially since you can already use `,` for that today with no new syntax.\n```js\nvar _;\ny = (_ = x,\n    _ = _ + _);\n```","format":"org.matrix.custom.html","formatted_body":"<p>On the papp/pipeline side, I still think F# pipes and papp would have been far more likely to get to stage 2 as they were general purpose capabilities that dovetailed. F#'s style biggest drawbacks were how to handle <code>yield</code> and <code>await</code>, and a push to allow you to do general operations against the topic (i.e., <code>x |&gt; _ + _</code>). For F#-style <code>await</code> was solvable, and I don't think <code>yield</code> was all that important (i.e., you could still write <code>(yield x |&gt; F) |&gt; G</code>). I also think the overwhelming majority case for pipelining was writing expressions in arrow functions, not immediately on the right side of the pipe:</p>\n<pre><code>// most likely use\nar |&gt; filter(?, x =&gt; x &gt; 1)\n   |&gt; map(?, x =&gt; x * 2)\n</code></pre>\n<p>I just don't see <code>y = x |&gt; _ + _</code> as all that valuable, especially since you can already use <code>,</code> for that today with no new syntax.</p>\n<pre><code class=\"language-js\">var _;\ny = (_ = x,\n    _ = _ + _);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710959774097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ovsoEeaym9EreqmSY32BaMxJ4DLsZ-3TyQ6Lg9rk_GI"},
{"content":{"body":"Definitely, but if we can find a symbol that’s not used in identifiers that in a context would be unambiguous and could be used for discard AND Papp topic token that would be a win in my eyes","msgtype":"m.text"},"ts":1710959788212,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$_QamTCaieR5gj0nfcIpIZltgFBVpKzKIdV-vUJcHIt4"},
{"content":{"body":"> <@rbuckton:matrix.org> On the papp/pipeline side, I still think F# pipes and papp would have been far more likely to get to stage 2 as they were general purpose capabilities that dovetailed. F#'s style biggest drawbacks were how to handle `yield` and `await`, and a push to allow you to do general operations against the topic (i.e., `x |> _ + _`). For F#-style `await` was solvable, and I don't think `yield` was all that important (i.e., you could still write `(yield x |> F) |> G`). I also think the overwhelming majority case for pipelining was writing expressions in arrow functions, not immediately on the right side of the pipe:\n> ```\n> // most likely use\n> ar |> filter(?, x => x > 1)\n>    |> map(?, x => x * 2)\n> ```\n> I just don't see `y = x |> _ + _` as all that valuable, especially since you can already use `,` for that today with no new syntax.\n> ```js\n> var _;\n> y = (_ = x,\n>     _ = _ + _);\n> ```\n\nYou have not encountered enough point free F# people 😂","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ovsoEeaym9EreqmSY32BaMxJ4DLsZ-3TyQ6Lg9rk_GI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>On the papp/pipeline side, I still think F# pipes and papp would have been far more likely to get to stage 2 as they were general purpose capabilities that dovetailed. F#'s style biggest drawbacks were how to handle <code>yield</code> and <code>await</code>, and a push to allow you to do general operations against the topic (i.e., <code>x |&gt; _ + _</code>). For F#-style <code>await</code> was solvable, and I don't think <code>yield</code> was all that important (i.e., you could still write <code>(yield x |&gt; F) |&gt; G</code>). I also think the overwhelming majority case for pipelining was writing expressions in arrow functions, not immediately on the right side of the pipe:</p>\n<pre><code>// most likely use\nar |&gt; filter(?, x =&gt; x &gt; 1)\n   |&gt; map(?, x =&gt; x * 2)\n</code></pre>\n<p>I just don't see <code>y = x |&gt; _ + _</code> as all that valuable, especially since you can already use <code>,</code> for that today with no new syntax.</p>\n<pre><code class=\"language-js\">var _;\ny = (_ = x,\n    _ = _ + _);\n</code></pre>\n</blockquote></mx-reply>You have not encountered enough point free F# people 😂","m.relates_to":{"m.in_reply_to":{"event_id":"$ovsoEeaym9EreqmSY32BaMxJ4DLsZ-3TyQ6Lg9rk_GI"}},"msgtype":"m.text"},"ts":1710959861303,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$EMUe9t0wB3raRlO8S53Tmuy1twIV-cHZJOapi0J8BM0"},
{"content":{"body":"Though they also are creating their own operators too","msgtype":"m.text"},"ts":1710959925301,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$2ccJds1hmuKSlOjRvA2LJBGb1wFKtgSy8mw1KqB-GD8"},
{"content":{"body":"I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:\n\n```\nmatch (x) {\n  when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n}\n```\nas a way to synthesize an extractor in-place as opposed to\n```\nconst identifierMatcher = _ => NodeMatcher(SyntaxKind.Identifier, _);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:</p>\n<pre><code>match (x) {\n  when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n}\n</code></pre>\n<p>as a way to synthesize an extractor in-place as opposed to</p>\n<pre><code>const identifierMatcher = _ =&gt; NodeMatcher(SyntaxKind.Identifier, _);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1710960009694,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UzqXZ2LRy6rj7N9QkXGHM2quu1EVt-NU5_IkYVmw-FU"},
{"content":{"body":"> <@anthonybullard:matrix.org> You have not encountered enough point free F# people 😂\n\nThere was a tremendous amount of very vocal frustration in the RxJS community that pipeline did not use F# style.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EMUe9t0wB3raRlO8S53Tmuy1twIV-cHZJOapi0J8BM0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>You have not encountered enough point free F# people 😂</blockquote></mx-reply>There was a tremendous amount of very vocal frustration in the RxJS community that pipeline did not use F# style.","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EMUe9t0wB3raRlO8S53Tmuy1twIV-cHZJOapi0J8BM0"}},"msgtype":"m.text"},"ts":1710960093149,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GOi3tsqXztdRA-xr1JwqIM3_6Qe_BLmIm2zuDlJpKUw"},
{"content":{"body":"> <@rbuckton:matrix.org> I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:\n> \n> ```\n> match (x) {\n>   when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n> }\n> ```\n> as a way to synthesize an extractor in-place as opposed to\n> ```\n> const identifierMatcher = _ => NodeMatcher(SyntaxKind.Identifier, _);\n> match x {\n>   when identifierMatcher({ let pos, let end }): ... ;\n> }\n> ```\n\nYes, it's not pretty, but I'm still thinking about how they would work together.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UzqXZ2LRy6rj7N9QkXGHM2quu1EVt-NU5_IkYVmw-FU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:</p>\n<pre><code>match (x) {\n  when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n}\n</code></pre>\n<p>as a way to synthesize an extractor in-place as opposed to</p>\n<pre><code>const identifierMatcher = _ =&gt; NodeMatcher(SyntaxKind.Identifier, _);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n</code></pre>\n</blockquote></mx-reply>Yes, it's not pretty, but I'm still thinking about how they would work together.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$UzqXZ2LRy6rj7N9QkXGHM2quu1EVt-NU5_IkYVmw-FU"}},"msgtype":"m.text"},"ts":1710960133470,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bSK9VcNVTdLmBPHJpmGszA6RzTZho5J9_bfShRGNnPE"},
{"content":{"body":"> <@rbuckton:matrix.org> There was a tremendous amount of very vocal frustration in the RxJS community that pipeline did not use F# style.\n\nToday I learned that RxJS community still exists.  No shade, just didn't realize that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GOi3tsqXztdRA-xr1JwqIM3_6Qe_BLmIm2zuDlJpKUw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There was a tremendous amount of very vocal frustration in the RxJS community that pipeline did not use F# style.</blockquote></mx-reply>Today I learned that RxJS community still exists.  No shade, just didn't realize that","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GOi3tsqXztdRA-xr1JwqIM3_6Qe_BLmIm2zuDlJpKUw"}},"msgtype":"m.text"},"ts":1710960146194,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$o986wPq57vsh7KQSXwP5ClhCV9-jSu3TskiYS39rS1E"},
{"content":{"body":"It's still very popular and heavily used in React projects. Rx's Observable has already been a proposal to TC39 (which stalled), and is now a proposal in WHATWG","m.mentions":{},"msgtype":"m.text"},"ts":1710960219422,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MaRsg1QbozhL-ry_d2na5grr7m_QagT6x8GwYbXqnNc"},
{"content":{"body":"(though the WHATWG one is substantially pared down, which is good)","m.mentions":{},"msgtype":"m.text"},"ts":1710960259726,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EL5PUADoFS9mOgqmPlGzyo7KeuoT0daBz2BmaENnriI"},
{"content":{"body":"> <@rbuckton:matrix.org> I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:\n> \n> ```\n> match (x) {\n>   when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n> }\n> ```\n> as a way to synthesize an extractor in-place as opposed to\n> ```\n> const identifierMatcher = _ => NodeMatcher(SyntaxKind.Identifier, _);\n> match x {\n>   when identifierMatcher({ let pos, let end }): ... ;\n> }\n> ```\n\nThese are done different, so I don't know if this is a good comparison.  I really don't see the difference :\n\n```\nconst identifierMatcher = _ => NodeMatcher(SyntaxKind.Identifier, ?);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UzqXZ2LRy6rj7N9QkXGHM2quu1EVt-NU5_IkYVmw-FU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I don't think using the same token for discard and papp is a good idea. In the pattern matching space, I've been considering how partial application could allow you to supply arguments to a custom matcher:</p>\n<pre><code>match (x) {\n  when NodeMatcher~(SyntaxKind.Identifier, ?)({ let pos, let end }): ...;\n}\n</code></pre>\n<p>as a way to synthesize an extractor in-place as opposed to</p>\n<pre><code>const identifierMatcher = _ =&gt; NodeMatcher(SyntaxKind.Identifier, _);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n</code></pre>\n</blockquote></mx-reply><p>These are done different, so I don't know if this is a good comparison.  I really don't see the difference :</p>\n<pre><code>const identifierMatcher = _ =&gt; NodeMatcher(SyntaxKind.Identifier, ?);\nmatch x {\n  when identifierMatcher({ let pos, let end }): ... ;\n}\n</code></pre>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UzqXZ2LRy6rj7N9QkXGHM2quu1EVt-NU5_IkYVmw-FU"}},"msgtype":"m.text"},"ts":1710960271335,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$eDjo5Rwy6ATOMWwILK3xy7OJ4WAboQ41X5m-gMQVhCE"},
{"content":{"body":"That would have been `const identifierMatcher = NodeMatcher(SyntaxKind.Identifier, ?)`","format":"org.matrix.custom.html","formatted_body":"That would have been <code>const identifierMatcher = NodeMatcher(SyntaxKind.Identifier, ?)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1710960300215,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hcxT3rk1CtHYWMJH83J8h08JHWKNarjPetsDbPoHf_Q"},
{"content":{"body":"> <@rbuckton:matrix.org> It's still very popular and heavily used in React projects. Rx's Observable has already been a proposal to TC39 (which stalled), and is now a proposal in WHATWG\n\nGive me a standard library before Observables.  I'm actually going to start saying that in reference to every new API at this point","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MaRsg1QbozhL-ry_d2na5grr7m_QagT6x8GwYbXqnNc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It&#39;s still very popular and heavily used in React projects. Rx&#39;s Observable has already been a proposal to TC39 (which stalled), and is now a proposal in WHATWG</blockquote></mx-reply>Give me a standard library before Observables.  I'm actually going to start saying that in reference to every new API at this point","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MaRsg1QbozhL-ry_d2na5grr7m_QagT6x8GwYbXqnNc"}},"msgtype":"m.text"},"ts":1710960329087,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$mDwRDlow2-1cFez017pWiuHNd-4jJmenwZrWW3mruBY"},
{"content":{"body":"the issue is that if `?` is both a placeholder and a discard, parsing `when F(?)` isn't obvious to either the spec or the reader of code.","format":"org.matrix.custom.html","formatted_body":"the issue is that if <code>?</code> is both a placeholder and a discard, parsing <code>when F(?)</code> isn't obvious to either the spec or the reader of code.","m.mentions":{},"msgtype":"m.text"},"ts":1710960344673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrMnfLx_ra_a2JRHIUr-errOUsLN2-ApivsgIdNxjaM"},
{"content":{"body":"> <@rbuckton:matrix.org> That would have been `const identifierMatcher = NodeMatcher(SyntaxKind.Identifier, ?)`\n\nOh yeah, sure","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hcxT3rk1CtHYWMJH83J8h08JHWKNarjPetsDbPoHf_Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That would have been <code>const identifierMatcher = NodeMatcher(SyntaxKind.Identifier, ?)</code></blockquote></mx-reply>Oh yeah, sure","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hcxT3rk1CtHYWMJH83J8h08JHWKNarjPetsDbPoHf_Q"}},"msgtype":"m.text"},"ts":1710960350953,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$y_jWB4a2-6_QGvnuT8qfntLFOp2e8wjSLi2HNIE8ktA"},
{"content":{"body":"`when F(?)(?):` would be a partial application to a destructured void binding. But you don't need to destructure a match, so `when F(?)` is now ambiguous as to whether I'm matching the subject against a partial application of `F` or against `F`'s custom matcher.","format":"org.matrix.custom.html","formatted_body":"<code>when F(?)(?):</code> would be a partial application to a destructured void binding. But you don't need to destructure a match, so <code>when F(?)</code> is now ambiguous as to whether I'm matching the subject against a partial application of <code>F</code> or against <code>F</code>'s custom matcher.","m.mentions":{},"msgtype":"m.text"},"ts":1710960420493,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aGGR6h11YP23Izo5kF5j-6mSG2Gx1ecTaCa7uwvb5ts"},
{"content":{"body":"Yeah, with the expanded destructuring proposals, it does have problems","m.mentions":{},"msgtype":"m.text"},"ts":1710960449627,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$ntQ5meaHx8cKq0Zobrf7wccHFfqDhyuYzrXRuiCz7mQ"},
{"content":{"body":"So discards and papp cannot share a sigil","m.mentions":{},"msgtype":"m.text"},"ts":1710960469487,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DFnuHTo6u8nshCVygTltSya_mUr2uNAUDedmoPBu7E8"},
{"content":{"body":"And papp cannot use _ right, since that is a valid identifier","m.mentions":{},"msgtype":"m.text"},"ts":1710960510699,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$eL62UcuSxHjWofkKKH3NBuAFQ7QPlDU7UhfBWU-AvU4"},
{"content":{"body":"Yes. Papp definitely can't use `_`.","format":"org.matrix.custom.html","formatted_body":"Yes. Papp definitely can't use <code>_</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1710960523030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mq8StITjZU3TjSazUYSU3_esVH_JRYe0XHNOMecOE4s"},
{"content":{"body":"In case I want to supply lodash to my partially applied function","m.mentions":{},"msgtype":"m.text"},"ts":1710960527716,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$nVSKFZhf5DsnhUlF043RJW1P-sr5iSNl98oGbgfo9is"},
{"content":{"body":"`a(_)` is legal JS, we can't change it's meaning.","format":"org.matrix.custom.html","formatted_body":"<code>a(_)</code> is legal JS, we can't change it's meaning.","m.mentions":{},"msgtype":"m.text"},"ts":1710960535633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1Ki0LDkMJnK2MAdGf5AkxwlU4bv3L-msELt5LSM66fU"},
{"content":{"body":"whereas `const [_, _, x] = ar` is not legal thus we are not changing its meaning. ","format":"org.matrix.custom.html","formatted_body":"whereas <code>const [_, _, x] = ar</code> is not legal thus we are not changing its meaning.","m.mentions":{},"msgtype":"m.text"},"ts":1710960601828,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lxqWY_Gpc0oOg84_kFH3nZmAeE9X2f-hmfo4EXC4F0E"},
{"content":{"body":"The only place using `_` as a discard would change the meaning of legal JS is if it is used with `var`. ","format":"org.matrix.custom.html","formatted_body":"The only place using <code>_</code> as a discard would change the meaning of legal JS is if it is used with <code>var</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1710960796008,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Li3o41NxLPcgYnYLIjNrJqYTd6-EPdgSxw_A3DoThjU"},
{"content":{"body":"So just to recap this long convo, is ? as a replacement for void in your proposal (and that alone) a live option?\n","m.mentions":{},"msgtype":"m.text"},"ts":1710960821105,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$-BYmwidHAe2Tni_38FeuygnBHtmCCOIqlGSnA5-OUzI"},
{"content":{"body":"No, I don't believe it is.","m.mentions":{},"msgtype":"m.text"},"ts":1710960832145,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PSSCeFBVBKfvIy7_whhO19cwFeSB40oYrvu70KvjzdU"},
{"content":{"body":"> <@rbuckton:matrix.org> No, I don't believe it is.\n\nIn the sense of it hasn't been formally proposed, it won't work, or you don't like it ;-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PSSCeFBVBKfvIy7_whhO19cwFeSB40oYrvu70KvjzdU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, I don&#39;t believe it is.</blockquote></mx-reply>In the sense of it hasn't been formally proposed, it won't work, or you don't like it ;-)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PSSCeFBVBKfvIy7_whhO19cwFeSB40oYrvu70KvjzdU"}},"msgtype":"m.text"},"ts":1710960858237,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$9HcUpATKqJ49JD8RjGF5eDhs6-D7k8v9bl2yfFfjT6o"},
{"content":{"body":"I also don't believe `@`, `#`, or `~` are viable options a well.","format":"org.matrix.custom.html","formatted_body":"I also don't believe <code>@</code>, <code>#</code>, or <code>~</code> are viable options a well.","m.mentions":{},"msgtype":"m.text"},"ts":1710960864400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z4BVDhc6dOQBfWSc63zUQ2J8jV7LW2BAIOu0808IIWs"},
{"content":{"body":"It would seriously conflict with an existing proposal at stage 1 and leave that proposal with no viable way forward, whereas we could choose to continue with `void` or find a way to make `_` work and not conflict.","format":"org.matrix.custom.html","formatted_body":"It would seriously conflict with an existing proposal at stage 1 and leave that proposal with no viable way forward, whereas we could choose to continue with <code>void</code> or find a way to make <code>_</code> work and not conflict.","m.mentions":{},"msgtype":"m.text"},"ts":1710960925863,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sPuuTl3zxAt_g9lD6ovjURtxxkDckhRuKqKZKeMPLp4"},
{"content":{"body":"Sorry, what proposal?","m.mentions":{},"msgtype":"m.text"},"ts":1710960950346,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$QEowokHU0smmy04Uf5Pg11aDFxStxATh38PILy4iTyc"},
{"content":{"body":"Partial application.","m.mentions":{},"msgtype":"m.text"},"ts":1710960957367,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oKyjBL4vOzivyXwNUIJM-lKQzI0nX8KcP8XEyBiwYPE"},
{"content":{"body":"I am still planning to come back to partial application, it has just been far down on my list of priorities.","m.mentions":{},"msgtype":"m.text"},"ts":1710960977277,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$52kuNATuDsJU-eYo8f0beduMacfeB9ef1f_nGpiM2LQ"},
{"content":{"body":"I also don't think `?` has a semantic meaning of \"discarding something\". It generally has a semantic meaning of \"asking something\": \"what do I do if `x` is truthy?\" (conditional), \"is this value null or undefined?\" (optional chaining, null coalesce), or \"what else do you need to tell me?\" (partial application)","format":"org.matrix.custom.html","formatted_body":"I also don't think <code>?</code> has a semantic meaning of \"discarding something\". It generally has a semantic meaning of \"asking something\": \"what do I do if <code>x</code> is truthy?\" (conditional), \"is this value null or undefined?\" (optional chaining, null coalesce), or \"what else do you need to tell me?\" (partial application)","m.mentions":{},"msgtype":"m.text"},"ts":1710961105084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GMCeCJWDMFufNJY18s9jKtC9koF3XN2IpY36sMv08Zg"},
{"content":{"body":"> <@anthonybullard:matrix.org> Give me a standard library before Observables.  I'm actually going to start saying that in reference to every new API at this point\n\nI don't know what this means. Observables would be part of a standard library.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mDwRDlow2-1cFez017pWiuHNd-4jJmenwZrWW3mruBY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Give me a standard library before Observables.  I'm actually going to start saying that in reference to every new API at this point</blockquote></mx-reply>I don't know what this means. Observables would be part of a standard library.","m.mentions":{"user_ids":["@anthonybullard:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mDwRDlow2-1cFez017pWiuHNd-4jJmenwZrWW3mruBY"}},"msgtype":"m.text"},"ts":1710961129090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i9ib8XnazerMO_TF0ZKCQIKTbY1idYyGAnLibrILRsM"},
{"content":{"body":"Discarding things in JS is either through `void` (as a syntactic feature of the language), or through `_` (on its own or as a prefix, by convention).","format":"org.matrix.custom.html","formatted_body":"Discarding things in JS is either through <code>void</code> (as a syntactic feature of the language), or through <code>_</code> (on its own or as a prefix, by convention).","m.mentions":{},"msgtype":"m.text"},"ts":1710961144856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mC9BMrEOTCbbSGUIDNK4LEzIEQNkjCDjCjq_K8EEMXs"},
{"content":{"body":"Observables and cancellation really should have stayed in TC39. They're core language capabilities that are not specific to the web platform, and it's unfortunate the ecosystem had to adopt whole chunks of the DOM into non-DOM runtimes just to support code sharing and interop.","m.mentions":{},"msgtype":"m.text"},"ts":1710961320716,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nelFpOs5LJ1Ks-gg8tyFStYj0_7YHFtq-Ro6kWPNucw"},
{"content":{"body":"Observables/signals/events/etc. JS could really use a standardized event subscription mechanism, and the closest we got was `Promise`.","format":"org.matrix.custom.html","formatted_body":"Observables/signals/events/etc. JS could really use a standardized event subscription mechanism, and the closest we got was <code>Promise</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1710961410105,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nW9zw3nrOxFiW2cQH8Gor5OUXJTU-Qgl9QG8ssQnpcE"},
{"content":{"body":"> <@rbuckton:matrix.org> Discarding things in JS is either through `void` (as a syntactic feature of the language), or through `_` (on its own or as a prefix, by convention).\n\nCool, thanks for the conversation.  I learned a lot","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mC9BMrEOTCbbSGUIDNK4LEzIEQNkjCDjCjq_K8EEMXs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Discarding things in JS is either through <code>void</code> (as a syntactic feature of the language), or through <code>_</code> (on its own or as a prefix, by convention).</blockquote></mx-reply>Cool, thanks for the conversation.  I learned a lot","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mC9BMrEOTCbbSGUIDNK4LEzIEQNkjCDjCjq_K8EEMXs"}},"msgtype":"m.text"},"ts":1710961450391,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$KDO9oCRAMBWrXqKFGcDuLmTUjl49EesPxBKCtVk-0Ic"},
{"content":{"body":"And we were quick enough to adopt it before the DOM moved ahead with `Future`, otherwise we would not have anywhere near the flexibility of `async`/`await` in the language.","format":"org.matrix.custom.html","formatted_body":"And we were quick enough to adopt it before the DOM moved ahead with <code>Future</code>, otherwise we would not have anywhere near the flexibility of <code>async</code>/<code>await</code> in the language.","m.mentions":{},"msgtype":"m.text"},"ts":1710961457806,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RXTjUhOW-_XgAZhLIVAKMoUE8MwWGFSXYT2V1sfzhPs"},
{"content":{"body":" * And we were quick enough to adopt it before WHATWG moved ahead with `Future`, otherwise we would not have anywhere near the flexibility of `async`/`await` in the language.","format":"org.matrix.custom.html","formatted_body":" * And we were quick enough to adopt it before WHATWG moved ahead with <code>Future</code>, otherwise we would not have anywhere near the flexibility of <code>async</code>/<code>await</code> in the language.","m.mentions":{},"m.new_content":{"body":"And we were quick enough to adopt it before WHATWG moved ahead with `Future`, otherwise we would not have anywhere near the flexibility of `async`/`await` in the language.","format":"org.matrix.custom.html","formatted_body":"And we were quick enough to adopt it before WHATWG moved ahead with <code>Future</code>, otherwise we would not have anywhere near the flexibility of <code>async</code>/<code>await</code> in the language.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RXTjUhOW-_XgAZhLIVAKMoUE8MwWGFSXYT2V1sfzhPs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1710961473697,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IU1K1fSosCg4HGf-JpOWqdYUPnZgYZwhrVBN5v6Z-10"}
]