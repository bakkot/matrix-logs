[
{"content":{"body":"hasn't this dude already been banned from other repos or something","msgtype":"m.text"},"ts":1639811053718,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TP-lwDnwUhmE5xwYJcX9spmlYDe2HVVy4pJ1nrVg9Hc"},
{"content":{"body":"not that i know of. altho bear in mind this is public and they do read these logs.","msgtype":"m.text"},"ts":1639811576375,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1eBEb1wftHr4nwpg2MURctz58oSo85D3FJvkTTf0los"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1639811868872,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$u_m2_qpB000x2vKTTQSDtxRuPRLU4DqZPp-o9yNu7Zg"},
{"content":{"body":"Oh wow, that's quite a thread. ","format":"org.matrix.custom.html","formatted_body":"Oh wow, that's quite a thread.","msgtype":"m.text"},"ts":1639812471819,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$9Svi2LaB0N4SnMDOWhTJlg43I8_upVAdLQZRnGQ8tT8"},
{"content":{"body":"anyone who prefers not to engage in that thread, but has concrete suggestions, is more than welcome to DM them to me and i'll update the PR","msgtype":"m.text"},"ts":1639814081484,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ItLabZh_HygLSKcXozU6q_yjUvpwR5AIROLSyrgTEb4"},
{"content":{"body":"I agree with the intention of that PR, but I don't think it will accomplish much. As far as I know, core-js is the only polyfill that has ever been mentioned in \"this will break the web\" discussions (because it's super popular?), and zloirock is free to ignore the \"only stage 3\" recommendation.","msgtype":"m.text"},"ts":1639818886254,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ipMgEPictncTJNO78NEQTOTLc9lbABDik7EFJv0t3mo"},
{"content":{"body":"Maybe something better would be to suggest \"early stage polyfills should never rely on feature detection, and unconditionally install the polyfilled version\": this highly reduces the chances of \"breaking the web\" because changes to the environment don't affect how the polyfill behaves ","msgtype":"m.text"},"ts":1639818999650,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cyZeZS-WU5If9tpvCh3-0EMMdq84bCGFdu89CwQ_mR0"},
{"content":{"body":"It would become similar to transpilers, that cause way less problems because they unconditionally transform the code regardless of what's supported at runtime.\n(But transpilers are on a whole other level anyway, because they work ahead of time)","msgtype":"m.text"},"ts":1639819078134,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oLv9vj7WJ0Ts-jlQM4hUhWQ2jTOiI_ZqdBXBkbgyj5c"},
{"content":{"body":"es5-shim and es6-shim have come up in those discussions too, but not for this reason, true","msgtype":"m.text"},"ts":1639843698317,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7XDhuZvFa20zgP6CwkTT1CotppHNtvBMH6bWnHCmJi8"},
{"content":{"body":"everyone is free to ignore the recommendation, thats why it’s a recommendation - but he used the process doc as a justification for publishing polyfills for stage 1 features. I don’t want anyone else thinking it’s ok in the future, even if it has no impact on his choices.","msgtype":"m.text"},"ts":1639843775000,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gXlPQvfNkqvT5DYXepg6YE98UXgJN9_1XWiqdXnHqsU"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Maybe something better would be to suggest \"early stage polyfills should never rely on feature detection, and unconditionally install the polyfilled version\": this highly reduces the chances of \"breaking the web\" because changes to the environment don't affect how the polyfill behaves\n\nI think the point about conditional mutation based on feature detection is a good point. Maybe even the crucial point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cyZeZS-WU5If9tpvCh3-0EMMdq84bCGFdu89CwQ_mR0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Maybe something better would be to suggest &quot;early stage polyfills should never rely on feature detection, and unconditionally install the polyfilled version&quot;: this highly reduces the chances of &quot;breaking the web&quot; because changes to the environment don&#39;t affect how the polyfill behaves </blockquote></mx-reply>I think the point about conditional mutation based on feature detection is a good point. Maybe even the crucial point.","m.relates_to":{"m.in_reply_to":{"event_id":"$cyZeZS-WU5If9tpvCh3-0EMMdq84bCGFdu89CwQ_mR0"}},"msgtype":"m.text"},"ts":1639850063826,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LW0befF-gt6Ys30bEH46YhZVRvqSOFEjwW7zE0Enmx8"},
{"content":{"body":"Even production code can safely mutate globals however they want, _as long as it is not conditional on feature detection_.","format":"org.matrix.custom.html","formatted_body":"Even production code can safely mutate globals however they want, <em>as long as it is not conditional on feature detection</em>.","msgtype":"m.text"},"ts":1639850092551,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fuwxukxu0dvMfHmi5RYxhMVlaGAy1gqSKB1bZetY3Qo"},
{"content":{"body":" * Even production code can safely mutate globals however they want, _as long as it is not conditional on feature detection_.","format":"org.matrix.custom.html","formatted_body":" * Even production code can safely mutate globals however they want, <em>as long as it is not conditional on feature detection</em>.","m.new_content":{"body":"Even production code can safely mutate globals however they want, _as long as it is not conditional on feature detection_.","format":"org.matrix.custom.html","formatted_body":"Even production code can safely mutate globals however they want, <em>as long as it is not conditional on feature detection</em>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fuwxukxu0dvMfHmi5RYxhMVlaGAy1gqSKB1bZetY3Qo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639850103948,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$EafVFWtouXyLDX_ZBUnrZ1G2D77FvXItQuOwqABf3Xk"},
{"content":{"body":" * Even production code can safely mutate globals however it wants, _as long as the mutation is not conditional on feature detection_.","format":"org.matrix.custom.html","formatted_body":" * Even production code can safely mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>.","m.new_content":{"body":"Even production code can safely mutate globals however it wants, _as long as the mutation is not conditional on feature detection_.","format":"org.matrix.custom.html","formatted_body":"Even production code can safely mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fuwxukxu0dvMfHmi5RYxhMVlaGAy1gqSKB1bZetY3Qo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639850117636,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KLoKwmB3AOI6GtiobtZRH-D9e4N6m6HRKrupk-6iUB4"},
{"content":{"body":"I submitted some code-review suggestions to that effect.","msgtype":"m.text"},"ts":1639850137781,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XrbAUSpBzjDh_ctMu93sUriMXeFo8e1IOC1ma8TjNn0"},
{"content":{"body":" * Even production code can safely mutate globals however it wants, _as long as the mutation is not conditional on feature detection_. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","format":"org.matrix.custom.html","formatted_body":" * Even production code can safely mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","m.new_content":{"body":"Even production code can safely mutate globals however it wants, _as long as the mutation is not conditional on feature detection_. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","format":"org.matrix.custom.html","formatted_body":"Even production code can safely mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","msgtype":"m.text"},"m.relates_to":{"event_id":"$fuwxukxu0dvMfHmi5RYxhMVlaGAy1gqSKB1bZetY3Qo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639850255820,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$LXsi5JIfYYiHzMCGsGP-XWX42Nds7Fqrd8EVMDrs-EM"},
{"content":{"body":"One thing we did (and are still doing) with Temporal was to emit a console log warning when the polyfill was loaded to remind folks not to use it in production.   Not sure if this makes sense to be a general recommendation, but IMHO it's a helpful signal that's highly visible without preventing usage. Should something like this also be recommended in the doc, esp. for early-stage polyfills?\n","msgtype":"m.text"},"ts":1639850517673,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$xAu6FhBLBuX5Ib4nlAIRsLOedBjF87o1OH-4C5bcCmE"},
{"content":{"body":" * Even production code can safely (safe = doesn’t break if a proposal changes) mutate globals however it wants, _as long as the mutation is not conditional on feature detection_. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","format":"org.matrix.custom.html","formatted_body":" * Even production code can safely (safe = doesn’t break if a proposal changes) mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","m.new_content":{"body":"Even production code can safely (safe = doesn’t break if a proposal changes) mutate globals however it wants, _as long as the mutation is not conditional on feature detection_. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","format":"org.matrix.custom.html","formatted_body":"Even production code can safely (safe = doesn’t break if a proposal changes) mutate globals however it wants, <em>as long as the mutation is not conditional on feature detection</em>. The library-publication thing might be a non sequitur, in that production code that conditionally mutates globals (even without relying on a library) is unsafe, and libraries that mutate globals unconditionally without relying on feature detection are safe (as far as I can tell).","msgtype":"m.text"},"m.relates_to":{"event_id":"$fuwxukxu0dvMfHmi5RYxhMVlaGAy1gqSKB1bZetY3Qo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639850538183,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kZbXCBPA0ZC6D1dCr-M-mTWRbIvULr4CL1ggKMZJTno"},
{"content":{"body":"I wasn't suggesting a warning is an alternative to whatever's being argued about in that thread; it's orthogonal. ","msgtype":"m.text"},"ts":1639850590836,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$fyUo9Fy9nTSMmaUFCVyHjXZF19DIu3-o2QYQzHGQuok"},
{"content":{"body":"Jack Works mentioned doing that too for their Number.range implementation in https://github.com/tc39/process-document/pull/33#issuecomment-997147848.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> mentioned doing that too for their Number.range implementation in https://github.com/tc39/process-document/pull/33#issuecomment-997147848.","msgtype":"m.text"},"ts":1639850660853,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6ZrPma1OiNIQGuzaEd6ruHF1MNwkGXJFVuMes2TjWjA"},
{"content":{"body":"The problem with unconditionally mutating or using a global is that it has to be pervasive. Imagine the following scenario: a feature has reached stage 3-4 with significant changes from stage 1-2, a large code base uses a stage 1-2 version of a feature and unconditionally mutates the global. A dependency uses the same feature, but has been updated to leverage the stage 3-4 so it conditionally uses the feature if available or fallsback to a bundled non global modifying shim. Unless the feature detection is thorough (not simple presence test), the dependency will break. Arguably this is only a problem when you explicitly update your dependency without updating your application code base, or the dependency is dynamically updating. This kind of issues somewhat happened with promises.","msgtype":"m.text"},"ts":1639851027659,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TBTdpmnmbW8SXwoZLN5nus6y9_M5nmJXelJ__AH1QVw"},
{"content":{"body":"That is true. Interoperability with community precedent was a large inertial force there, although it shaped the feature since its early stages of planning.","msgtype":"m.text"},"ts":1639851094522,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$C2EsgsqiX0QUiOhCozgIzG4ajUgbktZU_XTJ7eyNWSY"},
{"content":{"body":" * That is true. Interoperability with community precedent was a large inertial force there, although it shaped the feature since its early stages.","m.new_content":{"body":"That is true. Interoperability with community precedent was a large inertial force there, although it shaped the feature since its early stages.","msgtype":"m.text"},"m.relates_to":{"event_id":"$C2EsgsqiX0QUiOhCozgIzG4ajUgbktZU_XTJ7eyNWSY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639851097207,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Vv92tTNH8rTAFrvW689UY4lXo4cD8iCPPPY0jbQTBlo"},
{"content":{"body":" * That is true. Interoperability with community precedent was a large inertial force there, although it shaped the feature since its early stages of planning.","m.new_content":{"body":"That is true. Interoperability with community precedent was a large inertial force there, although it shaped the feature since its early stages of planning.","msgtype":"m.text"},"m.relates_to":{"event_id":"$C2EsgsqiX0QUiOhCozgIzG4ajUgbktZU_XTJ7eyNWSY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639851100913,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$S0ILFrdr4PCYMNoGbybUcL4JmQbIaOLbb3B89axcGQo"},
{"content":{"body":"That said, I agree we should be recommending against conditional global mutation or usage before stage 3.","msgtype":"m.text"},"ts":1639851181412,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y9vCLWbzdMNWvlr5UI8GcbCfdKsrMi-XG7UtWPKWuJ4"}
]