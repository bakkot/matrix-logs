[
{"content":{"body":"Sorry all for being late to reply to Temporal-related posts above. Was so relieved to be done with my 15 mins of fame this morning that I forgot to check the delegates channel afterwards. ðŸ˜„ I'll add a few notes and replies now.\n\n ","msgtype":"m.text"},"ts":1635379360400,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$2a9TWGhXpz3FZxVSNgph4trV5mWWPAg8uXlDXEOWkEY"},
{"content":{"body":"> <@pchimento:igalia.com> bterlson: is the remaining point for Temporal already on the list of overflow topics for tomorrow or should I request that somewhere in particular?\n\nI didn't see a response to this so I went ahead and added Temporal to the overflow section in the HackMD page. If this was wrong, please feel free to revert and let us know about the correct process. Thanks!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GEgMcKlJjVgEEzwYDSsZUp4aFnNsftyW_l8y_SyZCGI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br><a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: is the remaining point for Temporal already on the list of overflow topics for tomorrow or should I request that somewhere in particular?</blockquote></mx-reply>I didn't see a response to this so I went ahead and added Temporal to the overflow section in the HackMD page. If this was wrong, please feel free to revert and let us know about the correct process. Thanks!","m.relates_to":{"m.in_reply_to":{"event_id":"$GEgMcKlJjVgEEzwYDSsZUp4aFnNsftyW_l8y_SyZCGI"}},"msgtype":"m.text"},"ts":1635379572316,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$oAePZPSKPOPvVQGv43i9NdoLa-3cqDPbm0wmk5tf6pQ"},
{"content":{"body":"> <@ljharb:matrix.org> and nobody disputes that temporal's problem space is a hellish nightmare\n\nFinally, we've found an invariant we can all agree with! ðŸ˜„","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NnV3Mm3XeNL_XEeruiwGBIJSvec8iEvTw_Et3P_w9Aw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and nobody disputes that temporal&#39;s problem space is a hellish nightmare</blockquote></mx-reply>Finally, we've found an invariant we can all agree with! ðŸ˜„","m.relates_to":{"m.in_reply_to":{"event_id":"$NnV3Mm3XeNL_XEeruiwGBIJSvec8iEvTw_Et3P_w9Aw"}},"msgtype":"m.text"},"ts":1635379884153,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$zkDopF9BKUv-wy8oPFlzxByETwSzYilIQWhU-3C-mOc"},
{"content":{"body":"> <@ljharb:matrix.org> it can be very hard to figure out what one did wrong with APIs like this, at any experience level. good error messages help but aren't always sufficient.\n\nSpeaking of error messages, one suggestion I'd have for the committee: a standardized way for the spec to provide hints to implementers about error messages, and guidelines for proposal authors for when to provide those hints in the spec. Proposal authors (especially if the proposal's polyfill gets a lot of use) have a lot of tribal knowledge about the requirements for error messages, but AFAIK there's not really an \"official\" way to convey that knowledge to implementers. Nor is there a requirement that proposal authors think through the \"how are users likely to misuse this API and what should the error message say to help them?\" problem.  I don't think that implementers should be required to use any particular error message, but IMO having more clarity and consistency in error messages across implementations seems like a good idea, both to help users and to avoid inevitable churn from bug reports asking to improve error messages after the implementation ships. Also, implementers may not have insight into the kinds of bugs that users will run into, so they may not be in the best position to write the most helpful error message text without getting those bug reports.\n\nI'm not proposing any specific solution, but did want to highlight the problem and see if there was any existing prior art on the committee around this issue. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P8n9S8D_FWz5x0USQbr5LM5KSbwojvFFxKs2cMSJuOM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it can be very hard to figure out what one did wrong with APIs like this, at any experience level. good error messages help but aren&#39;t always sufficient.</blockquote></mx-reply><p>Speaking of error messages, one suggestion I'd have for the committee: a standardized way for the spec to provide hints to implementers about error messages, and guidelines for proposal authors for when to provide those hints in the spec. Proposal authors (especially if the proposal's polyfill gets a lot of use) have a lot of tribal knowledge about the requirements for error messages, but AFAIK there's not really an &quot;official&quot; way to convey that knowledge to implementers. Nor is there a requirement that proposal authors think through the &quot;how are users likely to misuse this API and what should the error message say to help them?&quot; problem.  I don't think that implementers should be required to use any particular error message, but IMO having more clarity and consistency in error messages across implementations seems like a good idea, both to help users and to avoid inevitable churn from bug reports asking to improve error messages after the implementation ships. Also, implementers may not have insight into the kinds of bugs that users will run into, so they may not be in the best position to write the most helpful error message text without getting those bug reports.</p>\n<p>I'm not proposing any specific solution, but did want to highlight the problem and see if there was any existing prior art on the committee around this issue.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$P8n9S8D_FWz5x0USQbr5LM5KSbwojvFFxKs2cMSJuOM"}},"msgtype":"m.text"},"ts":1635380414162,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$t5hr-6iloaV4CESQSakCnG857_Sbdgvt9bZgUl2-3r8"},
{"content":{"body":"> <@waldemarh:matrix.org> I'm not saying that the options bag should be optional. But if you pass an options bag without a smallestUnit, then round should be the identity.\n\nWe'll plan to spend our overflow time tomorrow focusing on this question. Reading the replies above, I believe that there are three possible solutions:\n\n1. `.round({})` is allowed (and does nothing), but `.round()` throws.\n2. Both are accepted and do nothing.\n3. Both throw.\n\nThe current Temporal Stage 3 proposal uses (3). There were two reasons the champions selected (3): first, because it's a no-op and likely a programmer bug, and second for defense against typos in the property name like `.round({smalestUnit: 'second'})` which would be treated the same as `.round({})`.  (Sadly there's no typo defense for optional property names without breaking extensibility, but our opinion was that preventing at least some bugs was better than preventing no bugs.)\n\nOne request I'll relay from ptomato: this proposal is already in Stage 3, so we'd ask for there to be a really persuasive case to change the existing plan of record. The default should be that we stick with what's already been approved, because we really want to get this API shipped soon!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tWwDvs38e33EnV93jzBNcjungw3mZM7OfN5E6Dj8Bsk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I&#39;m not saying that the options bag should be optional. But if you pass an options bag without a smallestUnit, then round should be the identity.</blockquote></mx-reply><p>We'll plan to spend our overflow time tomorrow focusing on this question. Reading the replies above, I believe that there are three possible solutions:</p>\n<ol>\n<li><code>.round({})</code> is allowed (and does nothing), but <code>.round()</code> throws.</li>\n<li>Both are accepted and do nothing.</li>\n<li>Both throw.</li>\n</ol>\n<p>The current Temporal Stage 3 proposal uses (3). There were two reasons the champions selected (3): first, because it's a no-op and likely a programmer bug, and second for defense against typos in the property name like <code>.round({smalestUnit: 'second'})</code> which would be treated the same as <code>.round({})</code>.  (Sadly there's no typo defense for optional property names without breaking extensibility, but our opinion was that preventing at least some bugs was better than preventing no bugs.)</p>\n<p>One request I'll relay from <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: this proposal is already in Stage 3, so we'd ask for there to be a really persuasive case to change the existing plan of record. The default should be that we stick with what's already been approved, because we really want to get this API shipped soon!</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$tWwDvs38e33EnV93jzBNcjungw3mZM7OfN5E6Dj8Bsk"}},"msgtype":"m.text"},"ts":1635381370484,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$ibI7_EYlpjIO3_56d_LLPVVlFruGLYhN_ENTCDs7gec"},
{"content":{"body":"> > shu : is ftang in the loop for all these normative changes and bug fixes?\n> ptomato: yes, he found most of them, but I am pretty sure he read the slides as well. I'll double check at the next Temporal meeting\n\nWe also implemented the following process: \n* PRs that affect the spec text are marked with a `spec-text` label in GH https://github.com/tc39/proposal-temporal/pulls?q=is%3Apr+label%3Aspec-text\n* PRs that don't affect the spec (e.g. changes to docs, polyfill, tests, build tools hell, etc.) are marked `no-spec-text`\n* PR authors who forget to put the right label on (prime suspect: me, usually!) will be publicly embarrassed and a maintainer will quickly add the right label.\n\nI'll leave it to Frank and other implementers to say whether it's actually been helpful in cutting down the noise, but anecdotally I've been hearing fewer complaints since we started doing this so ðŸ¤·.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<blockquote>\n<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> : is ftang in the loop for all these normative changes and bug fixes?<br><a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>: yes, he found most of them, but I am pretty sure he read the slides as well. I'll double check at the next Temporal meeting</p>\n</blockquote>\n</blockquote>\n<p>We also implemented the following process:</p>\n<ul>\n<li>PRs that affect the spec text are marked with a <code>spec-text</code> label in GH https://github.com/tc39/proposal-temporal/pulls?q=is%3Apr+label%3Aspec-text</li>\n<li>PRs that don't affect the spec (e.g. changes to docs, polyfill, tests, build tools hell, etc.) are marked <code>no-spec-text</code></li>\n<li>PR authors who forget to put the right label on (prime suspect: me, usually!) will be publicly embarrassed and a maintainer will quickly add the right label.</li>\n</ul>\n<p>I'll leave it to Frank and other implementers to say whether it's actually been helpful in cutting down the noise, but anecdotally I've been hearing fewer complaints since we started doing this so ðŸ¤·.</p>\n","msgtype":"m.text"},"ts":1635382045854,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$ex1KFd9XmrFDFLzOVfjSMOY8_YvnbjbDDKCD9eEF6Tk"},
{"content":{"body":"spec 13.5.1.2 RS: delete operation","msgtype":"m.text"},"ts":1635391950688,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Lf2mjAhDULANU1_mwhPNulag3tT3s9t7u_QqX7TI0Hc"},
{"content":{"body":"what does it mean by delete binding?","msgtype":"m.text"},"ts":1635391962885,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wHfQ-6l6gBuIC553zEeS24GnOrkb-pN4N-hOcRunPj8"},
{"content":{"body":"```js\nvar a = '1'\ndelete a;\nfunction z() { 'use strict'; a }\nz()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">var a = '1'\ndelete a;\nfunction z() { 'use strict'; a }\nz()\n</code></pre>\n","msgtype":"m.text"},"ts":1635391975387,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$K68-vp67c5srq_Pa4fczheWInoPHs44e7GxcD0oO4KY"},
{"content":{"body":"I tried this but `z` didn't throw","format":"org.matrix.custom.html","formatted_body":"I tried this but <code>z</code> didn't throw","msgtype":"m.text"},"ts":1635391986121,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$2QEHWsl5izLB4f4PPZnWdHEZF4vL0iTsM0OLsST72AI"},
{"content":{"body":"IIUC var declaration is not deletable (except in eval mode), so a is actually still reachable in z.","msgtype":"m.text"},"ts":1635393828494,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$pkQr8aEusd7qfr4dGwKD3u2w6A3yNYX4Ky9LMUk58Cw"},
{"content":{"body":"https://tc39.es/ecma262/#sec-globaldeclarationinstantiation 16.1.7 step 17, defined as `Perform ? env.CreateGlobalVarBinding(vn, false).`. the second parameter of `CreateGlobalVarBinding` defines if the binding is deletable.","format":"org.matrix.custom.html","formatted_body":"https://tc39.es/ecma262/#sec-globaldeclarationinstantiation 16.1.7 step 17, defined as <code>Perform ? env.CreateGlobalVarBinding(vn, false).</code>. the second parameter of <code>CreateGlobalVarBinding</code> defines if the binding is deletable.","msgtype":"m.text"},"ts":1635393943096,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$CxMn_Ey-tcfM1lZce34oK4WN0wAoBYQqmcEzTElh5nU"},
{"content":{"body":"I got it. \n\n```js\na = '1'\ndelete a;\nfunction z() { 'use strict'; a }\nz()\n```","format":"org.matrix.custom.html","formatted_body":"<p>I got it.</p>\n<pre><code class=\"language-js\">a = '1'\ndelete a;\nfunction z() { 'use strict'; a }\nz()\n</code></pre>\n","msgtype":"m.text"},"ts":1635394102059,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UHw1qxx-YJkMbmG5591oJgvU3gqbbNAyuGeYtiK9RZQ"},
{"content":{"body":"this will throw","msgtype":"m.text"},"ts":1635394104247,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$c9p3kIgMq5KMOuAnGuYhwZkqIdmXlqmgjb4Zs7ZJkcg"},
{"content":{"body":"plenary will start in... 12 mins","msgtype":"m.text"},"ts":1635410896269,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xf0VHLmtLMNrZGXdRU0w_TAEJHmQG99JFn5tmtbd8mY"},
{"content":{"body":"can someone remind me what the motivation for boxes is","msgtype":"m.text"},"ts":1635412120334,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X8PulT7XlLzfTfHmW_dJfrtGxpXdvIKUDBJf0VXGnec"},
{"content":{"body":"allow to keep mutable object in record/tuple","msgtype":"m.text"},"ts":1635412139857,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$B581Hq9Z4GG14fx_qSBA3-qQtgXSb2LZdOy6dxhQmXc"},
{"content":{"body":"I guess","msgtype":"m.text"},"ts":1635412148617,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$vJPNRzFuVTyNCtojWfsotAVAngljMPGEW99ksOujzVA"},
{"content":{"body":"not just mutable, but also objects like functions","msgtype":"m.text"},"ts":1635412156967,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$f0AgT-eM_8ViPDAcBTXyCzXDHrY-wNNpaHCUOEPn2R4"},
{"content":{"body":"if you can put a box in a record, you have already given up on the \"records are deeply immutable\" goal, so what benefit does the box have?","msgtype":"m.text"},"ts":1635412204962,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1BGjSLz_0GT3LvieEoFoQ1DsVxWPCM84Qe89CFxx2ew"},
{"content":{"body":"Boxes are imutable. They are similar to having a Symbol","msgtype":"m.text"},"ts":1635412267692,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mPfzemeHKQkP20DJxsHEmFVVDQ5aUPIC-HG9ZsvizVE"},
{"content":{"body":"and that symbol can be used to look up an object","msgtype":"m.text"},"ts":1635412276891,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$F1qaAdsA4YKpzbLcg0EmfLOtAumomw7_OS9qRwA1Z_I"},
{"content":{"body":"that seems to be a technical point","msgtype":"m.text"},"ts":1635412288484,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NyyDADk_e4Xsn1PzrnMD48d_KHRg3BuY1Ny2dAPld9k"},
{"content":{"body":"conceptually it's to link the immutable to a mutable thing, right?","msgtype":"m.text"},"ts":1635412299494,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SFYLpRGWCLKjRxWJY6TFixyGLpsqNxprIRv3ejKh0Ag"},
{"content":{"body":"they can be used to look up an object without any other facilities","msgtype":"m.text"},"ts":1635412309437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$judi4jDUm0rSGIpsNKR6nKGPeIacAJYOiEwTg-u3qIk"},
{"content":{"body":"that sure does not sound like they are immutable to me","msgtype":"m.text"},"ts":1635412318890,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GLJltjfryyXDfDBck0Y-ItReng4EHPGCHCdFx0f_9rw"},
{"content":{"body":"like, they give access to mutability","msgtype":"m.text"},"ts":1635412328792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-4_UiZJ6z4jkpm6zIg_HJLzzFpgYCp4ZnTH8nTG8yHQ"},
{"content":{"body":"they're immutable in the sense that `const` is constant","format":"org.matrix.custom.html","formatted_body":"they're immutable in the sense that <code>const</code> is constant","msgtype":"m.text"},"ts":1635412368852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m9xsQ4lmOelswnK0HXFCZnAtZkztiBcFf4HWacXt20U"},
{"content":{"body":"There are a lot of use case that require expressing an immutable structure with mutable exit points","msgtype":"m.text"},"ts":1635412457291,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0K3dpCtBEAEGtpX1DqqfE6QdbzF55OBxhl-hn9sAa6M"},
{"content":{"body":"They give an explicit signal when leaving the immutable part of the \"graph\"","msgtype":"m.text"},"ts":1635412460005,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$86T2UcGJqz1KKS08hdrE2CddRRh_Zud-6POywl2A3gM"},
{"content":{"body":"Mathieu Hofman: right, but just putting an object in the record is already an immutable structure with mutable exit points","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: right, but just putting an object in the record is already an immutable structure with mutable exit points","msgtype":"m.text"},"ts":1635412480038,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zHNPKRyndZOE9jGGllGOjrbwyYiFU9UDkxqarV90NsM"},
{"content":{"body":"how is \"and then this value is not a primitive\" not already an explicit signal?","msgtype":"m.text"},"ts":1635412495063,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9NVeb1lfD1Fhnj3ubcJ-W5BZi59JqgzKIRtx9GLtCgk"},
{"content":{"body":"like, that is currently already how you distinguish between the mutable and the immutable stuff","msgtype":"m.text"},"ts":1635412520712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mtn8eRWCwAjqrZzySt_DreXZVwHnMxGQiWUTd_rQxMw"},
{"content":{"body":" Is there a reason this can't be solved using `Symbol` and `Map`?","format":"org.matrix.custom.html","formatted_body":"Is there a reason this can't be solved using <code>Symbol</code> and <code>Map</code>?","msgtype":"m.text"},"ts":1635412529601,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dOyte7YHQ3HIdEy9Zech3Lmh5tqUiebGW8UkkNCFVQc"},
{"content":{"body":"well, weakmaps i guess","msgtype":"m.text"},"ts":1635412547957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$El3FLA2Kai_OgIHXgp8m0alL1U8d6hjxSjwkTNbqyWY"},
{"content":{"body":"but i thought the R&T champions have gone back and forth on Box vs that approach","msgtype":"m.text"},"ts":1635412563054,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$v1vVD8caIKOGP1d-zkQSOZLuzcNv1bh7VHDk7BAMvTU"},
{"content":{"body":"> <@bakkot:matrix.org> how is \"and then this value is not a primitive\" not already an explicit signal?\n\nbecause you can't put non primitives inside records and tuples.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9NVeb1lfD1Fhnj3ubcJ-W5BZi59JqgzKIRtx9GLtCgk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>how is &quot;and then this value is not a primitive&quot; not already an explicit signal?</blockquote></mx-reply>because you can't put non primitives inside records and tuples.","m.relates_to":{"m.in_reply_to":{"event_id":"$9NVeb1lfD1Fhnj3ubcJ-W5BZi59JqgzKIRtx9GLtCgk"}},"msgtype":"m.text"},"ts":1635412564167,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$HXWSmhZVkJ8U-_ofdTaXeqlWMwULFWZTZj_jzwCTcvI"},
{"content":{"body":"i forget the outcome","msgtype":"m.text"},"ts":1635412568510,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K6UgxRJyI1-5ZBTNWtt0hs7tWWcHDhjSnG2TDlCloto"},
{"content":{"body":"Mathieu Hofman: yes, but that's a design choice they made, which they now seek to introduce a new exit point for via a new primitive whose sole purpose is to wrap an Object","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: yes, but that's a design choice they made, which they now seek to introduce a new exit point for via a new primitive whose sole purpose is to wrap an Object","msgtype":"m.text"},"ts":1635412590457,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3VDhBhMLS9-1eMtEbq4K2Cg2KyAGoVOw8HtwmTsy-9U"},
{"content":{"body":"seems... unnecessary, is how i read bakkot's point","format":"org.matrix.custom.html","formatted_body":"seems... unnecessary, is how i read <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s point","msgtype":"m.text"},"ts":1635412598678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q4DHaSiP7Bsc3z3mkmjWgNa3skFYiaEY6H9n-O47rAo"},
{"content":{"body":"There is a long discussion on why implicitly allowing objects inside records/tuples is not feasible","msgtype":"m.text"},"ts":1635412622178,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TowEyMiQDJcdoNhj2kXN-t5k_f0m4Ndzy-796TxI_Us"},
{"content":{"body":"main one being it's a footgun","msgtype":"m.text"},"ts":1635412640488,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sXXmtXYMZzT0EFZ9NcDUP0FESQOMz0T37S2_fto3xfM"},
{"content":{"body":"why is this less a footgun?","msgtype":"m.text"},"ts":1635412659299,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BEfG_55uxZOg-sUWhDE4iJXhJMLnlUiy0RmcXDaSHyU"},
{"content":{"body":"because you need to explicitly wrap the object","msgtype":"m.text"},"ts":1635412680814,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0THBj3e6I-dEdl289H4ZIHDJGGAOdC6vgvoDRL4MOV0"},
{"content":{"body":"you can't mistakenly put something mutable in your immutable structure","msgtype":"m.text"},"ts":1635412705474,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$C4CXHHnk5LOt3BwfoPpN695U86cYU6A04ht2UojRf5w"},
{"content":{"body":"but unless you're constructing all values inline, you could get a box already via a variable, no?","msgtype":"m.text"},"ts":1635412727093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PniNg4fKJ5mAhWXTtrG5kf1uYpoYcBXdf__gzSa0F14"},
{"content":{"body":"`const tuple = #[getFoo()]`","format":"org.matrix.custom.html","formatted_body":"<code>const tuple = #[getFoo()]</code>","msgtype":"m.text"},"ts":1635412739271,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7WHMRHipEzQK9Cw2I5XvAtJ_nNNRutlHpmzxNUXz8Ng"},
{"content":{"body":"`getFoo()` can return boxes, no?","format":"org.matrix.custom.html","formatted_body":"<code>getFoo()</code> can return boxes, no?","msgtype":"m.text"},"ts":1635412753428,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4WkEKTwd1frvDAA3wOOQlT417KpKBkxzURY1J3fZKlU"},
{"content":{"body":"it can, but you may not always know what it returns","msgtype":"m.text"},"ts":1635412772383,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qC3cvHqIKA2mF6McT2miEfktXWT-ILmhBxBzHAphLrQ"},
{"content":{"body":"well yes, that's the point","msgtype":"m.text"},"ts":1635412779759,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RkiY-uDWNcCpDLwqAOXLCv-mBAQWQXTqlFYDE2kKWE0"},
{"content":{"body":"if it returns boxes, then `#[getFoo()]` is conceptually not deeply immutable","format":"org.matrix.custom.html","formatted_body":"if it returns boxes, then <code>#[getFoo()]</code> is conceptually not deeply immutable","msgtype":"m.text"},"ts":1635412793866,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cWyZ42tOoIBH3qptGM0by_Tj5bVm-l66XSxPssCzY28"},
{"content":{"body":"but you don't know if `getFoo()` returns boxes or not","format":"org.matrix.custom.html","formatted_body":"but you don't know if <code>getFoo()</code> returns boxes or not","msgtype":"m.text"},"ts":1635412802927,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ihm9uXOAaUNDk0iGHv-mzVvKPtGrMXwFaDE-0apZf8U"},
{"content":{"body":"so you don't know if `#[getFoo()]` is really deeply immutable without exit points or not","format":"org.matrix.custom.html","formatted_body":"so you don't know if <code>#[getFoo()]</code> is really deeply immutable without exit points or not","msgtype":"m.text"},"ts":1635412816544,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h4HlZ4aD8KqEaRyMG0_30otcsHRrdGqZaWHBj8XZFc8"},
{"content":{"body":"The only way you get immutability is via a function call, like `ObjectPlaceholder.unwrap(myBox)`: it's a function call that returns a mutable thing","format":"org.matrix.custom.html","formatted_body":"The only way you get immutability is via a function call, like <code>ObjectPlaceholder.unwrap(myBox)</code>: it's a function call that returns a mutable thing","msgtype":"m.text"},"ts":1635412829902,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$yEke8ovWvJB32n0n8UN_gV5RAg5KeZ-eofUvk8TgIOU"},
{"content":{"body":"Exactly as if you would have a symbol representing an object, white a side symbol->Object map","msgtype":"m.text"},"ts":1635412842859,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$anL8jfKSlw2pFNhvNjQYaPZ-PBmKETQpVY5GgXyC7sg"},
{"content":{"body":" * Exactly as if you would have a symbol representing an object, white a side symbol->Object map","m.new_content":{"body":"Exactly as if you would have a symbol representing an object, white a side symbol->Object map","msgtype":"m.text"},"m.relates_to":{"event_id":"$anL8jfKSlw2pFNhvNjQYaPZ-PBmKETQpVY5GgXyC7sg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635412852896,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bqwRrFlAchEbEqDVpXTU8ldJAN64nY9HwWDM70akDqQ"},
{"content":{"body":"> <@mhofman:matrix.org> it can, but you may not always know what it returns\n\nwe cannot always know a function returning any type of thing, in that sense?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qC3cvHqIKA2mF6McT2miEfktXWT-ILmhBxBzHAphLrQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>it can, but you may not always know what it returns</blockquote></mx-reply>we cannot always know a function returning any type of thing, in that sense?","m.relates_to":{"m.in_reply_to":{"event_id":"$qC3cvHqIKA2mF6McT2miEfktXWT-ILmhBxBzHAphLrQ"}},"msgtype":"m.text"},"ts":1635412877925,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$7Q-taILuCS_Cgte_BXyNSEJ81zbHgIfdOa_T1dkY1cg"},
{"content":{"body":"boxes do not seem like a good fit for the thing justin is discussing? it seems like you would just want a` #[type: 'user data', data: whatever]`","format":"org.matrix.custom.html","formatted_body":"boxes do not seem like a good fit for the thing justin is discussing? it seems like you would just want a<code> #[type: 'user data', data: whatever]</code>","msgtype":"m.text"},"ts":1635412980404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z06voy694r_0bas-GMx1hC7hC7gRZHUCa8z7LKc5VdE"},
{"content":{"body":"i missed the use case","msgtype":"m.text"},"ts":1635413012139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$02dzNq3ROe348A9iDw8O1csgySramHJvsrgBKKpHVZ8"},
{"content":{"body":"is it like taint tracking?","msgtype":"m.text"},"ts":1635413017224,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FWkFmXgNCyN0tFzQ281u9lj34bw3UNRY9EskI28-pH4"},
{"content":{"body":"> <@bakkot:matrix.org> boxes do not seem like a good fit for the thing justin is discussing? it seems like you would just want a` #[type: 'user data', data: whatever]`\n\nThey can be leveraged to build that thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Z06voy694r_0bas-GMx1hC7hC7gRZHUCa8z7LKc5VdE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>boxes do not seem like a good fit for the thing justin is discussing? it seems like you would just want a<code> #[type: 'user data', data: whatever]</code></blockquote></mx-reply>They can be leveraged to build that thing","m.relates_to":{"m.in_reply_to":{"event_id":"$Z06voy694r_0bas-GMx1hC7hC7gRZHUCa8z7LKc5VdE"}},"msgtype":"m.text"},"ts":1635413097594,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B_u_BLkxaUbm25Z8v5E415VH-g0IyxpmBxWeTRzC_8M"}
]