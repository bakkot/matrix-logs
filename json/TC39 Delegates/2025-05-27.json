[
{"content":{"body":"what are people's opinons on changing the `Map` and `Set` constructor to not call `Symbol.iterator` on the passed value if the passed value brand checks as a Map/Set? So `new Map(new Map())` would not call `Map.prototype[Symbol.iterator] ` anymore","format":"org.matrix.custom.html","formatted_body":"what are people's opinons on changing the <code>Map</code> and <code>Set</code> constructor to not call <code>Symbol.iterator</code> on the passed value if the passed value brand checks as a Map/Set? So <code>new Map(new Map())</code> would not call <code>Map.prototype[Symbol.iterator] </code> anymore","msgtype":"m.text"},"ts":1748340293133,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$y7qh7Lpn4zkj34tdIwiScpgvU-uCwGvi25yMW6no7TI"},
{"content":{"body":"We didn't do this for `Set.prototype.union` and co","format":"org.matrix.custom.html","formatted_body":"We didn't do this for `Set.prototype.union` and co","msgtype":"m.text"},"ts":1748342694506,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lev__jRizUwu28ZaTUqyY7vhhR990BlpVPHmKVDOdhg"},
{"content":{"body":"Do any engines have a faster path for this already, the value is a real Map and the iterator hasn't been modified ","format":"org.matrix.custom.html","formatted_body":"Do any engines have a faster path for this already, the value is a real Map and the iterator hasn't been modifiedÂ ","msgtype":"m.text"},"ts":1748343117744,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BexT8j2B68xEjIp_pMfcsA9mbLN1LpFOipxPnsMnl6s"},
{"content":{"body":"I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array","format":"org.matrix.custom.html","formatted_body":"I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array","msgtype":"m.text"},"ts":1748343258046,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BrnUVrlWrF7HyeLAC8uG-mTBtlVZHDxuZcnYC-R35EQ"},
{"content":{"body":"Is the draft schedule up yet?","m.mentions":{},"msgtype":"m.text"},"ts":1748349927041,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Es3bSQ7P1Bk4Zxle9a9CZUscOjZOfkaJvNWjTzQSVp4"},
{"content":{"body":"nearlyu","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Es3bSQ7P1Bk4Zxle9a9CZUscOjZOfkaJvNWjTzQSVp4"}},"msgtype":"m.text"},"ts":1748353683600,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$jmXoq711Z50Rd9ixdFA9i4qbdtRiCn1zttxrdCFyWhs"},
{"content":{"body":"* nearly","m.mentions":{},"m.new_content":{"body":"nearly","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jmXoq711Z50Rd9ixdFA9i4qbdtRiCn1zttxrdCFyWhs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748353685653,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$d5ykSj1hkPwY8C31heV_OSgtrdJE1wKRJNTOQ1JDU2s"},
{"content":{"body":"draft schedule now available via reflector issue:  https://github.com/tc39/Reflector/issues/558","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Es3bSQ7P1Bk4Zxle9a9CZUscOjZOfkaJvNWjTzQSVp4"}},"msgtype":"m.text"},"ts":1748355186908,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GG7daD1T1fIU0cNi39XKwlL_abBG1acRCGTL1vijZ4w"},
{"content":{"body":"> <@aclaymore:matrix.org> I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array\n\nYes this was the next thing I was going to ask","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BrnUVrlWrF7HyeLAC8uG-mTBtlVZHDxuZcnYC-R35EQ\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I am interested how much benefit there would be if we can modify array destructuring to avoid the iterator when destructuring an array</blockquote></mx-reply>Yes this was the next thing I was going to ask","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BrnUVrlWrF7HyeLAC8uG-mTBtlVZHDxuZcnYC-R35EQ"}},"msgtype":"m.text"},"ts":1748359249233,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$uIXxSIyFmdXrTGTfyuhJKtTBSJdtKgIjaPtkeDeNFQk"},
{"content":{"body":"engines can already do that unobservably when they know the map/set isn't modified","m.mentions":{},"msgtype":"m.text"},"ts":1748359361447,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TP3bpQdDmwjg3Ur_zzn1_mCV4WApawoP24flSIWN0Kg"},
{"content":{"body":"I don't think any engine does it for these, it's very annoying to track","msgtype":"m.text"},"ts":1748360290263,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$H59j70POXlmL0lL-uZJDrWr9o6r564-CHUVq6pzYYAU"},
{"content":{"body":"having the spec change would definitely help","msgtype":"m.text"},"ts":1748360300662,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$19fY5ThZYy4AofP3EMclapPHviY_Fcm5KAgHNBsnVDk"},
{"content":{"body":"Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics re needed is appreciated ","m.mentions":{},"msgtype":"m.text"},"ts":1748360505955,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$dVPsOK3fq7lP_l_dSZUF8Vl6X19nkGrrowyLMvgtu50"},
{"content":{"body":"* Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics are needed is appreciated ","m.mentions":{},"m.new_content":{"body":"Agreed with snek; while heroics are possible and sometimes happen, any place we can specify that no heroics are needed is appreciated ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dVPsOK3fq7lP_l_dSZUF8Vl6X19nkGrrowyLMvgtu50","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748360510322,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$bxf1e1SxbXEwYbNchn5cbfYHtGlf5DJluEQ3lxkAWrI"},
{"content":{"body":"We actually [already optimize this path](https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#789-800)","format":"org.matrix.custom.html","formatted_body":"We actually <a href=\"https://searchfox.org/mozilla-central/source/js/src/builtin/MapObject.cpp#789-800\">already optimize this path</a>","m.mentions":{},"msgtype":"m.text"},"ts":1748362368478,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$JrZIJar0ETwLvb4Mogm8JuBdjks0J6edR-U8aOJRuUw"},
{"content":{"body":"Although it would be nice if we didn't have to do all the careful plumbing to make sure it's a valid transformation","m.mentions":{},"msgtype":"m.text"},"ts":1748362421966,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$9u31SqvjvwSDU2zDFLYF6WoEPzvPNBCBBV7wa0_n3nc"},
{"content":{"body":"(tbc i'm fully on board with having explicit fast paths for things that pass brand-checks)","m.mentions":{},"msgtype":"m.text"},"ts":1748362473868,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lhIjJp9B2XldZ23Vd7lTCu2RDtail5AEBQ69mQs4feQ"},
{"content":{"body":"at least the map iterator isn't side-effecting","m.mentions":{},"msgtype":"m.text"},"ts":1748363103839,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$26_FeT-EUdvhA6_JP5t3_ggryILqHwJrdjTXjVMJbvg"},
{"content":{"body":"array iteration is probably the most common case and the iterator has side effects all over the place","m.mentions":{},"msgtype":"m.text"},"ts":1748363116169,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LCOckHCsxuRNjqF8NLh--B4ksXjwiWQG0eWRHgqLBYM"},
{"content":{"body":"Array iterstor side-effecting in that it triggers MOP methods?","format":"org.matrix.custom.html","formatted_body":"Array iterstor side-effecting in that it triggers MOP methods?","msgtype":"m.text"},"ts":1748363763086,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$D5fYBtzl1_Kl95lt_f99wcNBQwWhe6GT6-sNjOT44qw"},
{"content":{"body":"* Array iterator side-effecting in that it triggers MOP methods?","format":"org.matrix.custom.html","formatted_body":"* Array iterator side-effecting in that it triggers MOP methods?","m.new_content":{"body":"Array iterator side-effecting in that it triggers MOP methods?","format":"org.matrix.custom.html","formatted_body":"Array iterator side-effecting in that it triggers MOP methods?","msgtype":"m.text"},"m.relates_to":{"event_id":"$D5fYBtzl1_Kl95lt_f99wcNBQwWhe6GT6-sNjOT44qw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748363785195,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$-OZzokZRykg7_pyyohxFVCl6sr1wZpKGc32HEe13Zqs"},
{"content":{"body":"sure and also getters","m.mentions":{},"msgtype":"m.text"},"ts":1748364056155,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SA2lXszdxtYVk9L4DcPNYvux-EvIuJmC_IWp07aQocc"},
{"content":{"body":"also this is a good place for me to beat my drum of \"iterating built ins does not need allocations\" https://docs.google.com/document/d/1M5S-u3N3vQkVBGFCoaYt_ABPGl0EW16QQrvDBaY2FiE/edit","m.mentions":{},"msgtype":"m.text"},"ts":1748364167087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e2oC4yMby743VF__CPKXR3MkvXhzk-FQwZz1q6SXzcw"},
{"content":{"body":"Rob Palmer Chris de Almeida please accommodate https://github.com/tc39/agendas/pull/1889 if possible. i know that AsyncContext is held up on web integration stuff, and Scott represents the web side of it for Chrome, so i think it's important to get his input during plenary","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a> please accommodate https://github.com/tc39/agendas/pull/1889 if possible. i know that AsyncContext is held up on web integration stuff, and Scott represents the web side of it for Chrome, so i think it's important to get his input during plenary","m.mentions":{"user_ids":["@robpalme:matrix.org","@softwarechris:matrix.org"]},"msgtype":"m.text"},"ts":1748373085760,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PDUJikvmizvAi8pzgpVBlMT1tK40XOcMll6lLFIA7yQ"},
{"content":{"body":"could a chair please ping me if the constraint could (or not) be accommodated?","m.mentions":{},"msgtype":"m.text"},"ts":1748373187617,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9JYRgD-lyojpYiFDG8sUp_PhaM7NQdG-H5IUCeglysY"},
{"content":{"body":"(in case of not, would try to find a secondary)","m.mentions":{},"msgtype":"m.text"},"ts":1748373206037,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s0zFKW_3FswhJ7Ntz7B1EFGXMBEzg3QkczXbPtcdk8M"},
{"content":{"body":"Hey all... had some feedback come up with regards to Explicit Resource Management today that I wanted to surface and get some input on. The question specifically is, \"I think explicit resource management is missing a really important feature: The ability to transfer ownership. I need a way to \"release\" a variable I declared with using, especially to return it.\" ... essentially treating the ERM/using as similar to an RAII that can be moved away.\n\n```\nfunction foo() {\n  using foo = new Foo();\n  using bar = new Bar();\n  // I only want foo or bar disposed if they are not returned\n  if (someCondition()) return bar; \n  else return foo;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Hey all... had some feedback come up with regards to Explicit Resource Management today that I wanted to surface and get some input on. The question specifically is, \"I think explicit resource management is missing a really important feature: The ability to transfer ownership. I need a way to \"release\" a variable I declared with using, especially to return it.\" ... essentially treating the ERM/using as similar to an RAII that can be moved away.</p>\n<pre><code>function foo() {\n  using foo = new Foo();\n  using bar = new Bar();\n  // I only want foo or bar disposed if they are not returned\n  if (someCondition()) return bar; \n  else return foo;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1748381637288,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6LGHDabz-TLY2k4QlYv30UUbG4ChOzugmNgIpXftSvY"},
{"content":{"body":"Unfortunately, since both are declared with `using`, both are going to be disposed when the function returns. The ask from the feedback is whether it would make sense to have some generalized \"release\" or \"move\" capability.. like `return move bar`, etc","format":"org.matrix.custom.html","formatted_body":"Unfortunately, since both are declared with <code>using</code>, both are going to be disposed when the function returns. The ask from the feedback is whether it would make sense to have some generalized \"release\" or \"move\" capability.. like <code>return move bar</code>, etc","m.mentions":{},"msgtype":"m.text"},"ts":1748381715819,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$4CrPSXcogm5NxThXpOYBcAFfXWjJ1aOBRii0eV3A9_Y"},
{"content":{"body":"obviously we can follow a pattern similar to `DisposableStack` and have the disposable object itself declare a `move()` method but that means allocating a new object or having to keep track of the moved state manually","format":"org.matrix.custom.html","formatted_body":"obviously we can follow a pattern similar to <code>DisposableStack</code> and have the disposable object itself declare a <code>move()</code> method but that means allocating a new object or having to keep track of the moved state manually","m.mentions":{},"msgtype":"m.text"},"ts":1748381853207,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$mEX-ESS7WVMx8-w3Bg09UAX3kD80xQkQVCKH_DfDTbs"},
{"content":{"body":"So I think one of the good things about explicit resource management is its simplicity, there isn't much of an ownership or lifetime model to think about or to get wrong.","m.mentions":{},"msgtype":"m.text"},"ts":1748381874500,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$26ZfQKK-2G4AmJoxKtHvNc-92BSY7C5CrmgnQjEw1QQ"},
{"content":{"body":"we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky","m.mentions":{},"msgtype":"m.text"},"ts":1748381881726,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$9HO5nmV2Y0zaoczx2I8I49YWzlLUHVGmbGvGolcQmAs"},
{"content":{"body":"100% agree","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$26ZfQKK-2G4AmJoxKtHvNc-92BSY7C5CrmgnQjEw1QQ"}},"msgtype":"m.text"},"ts":1748381898541,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$gaPhYaWh2ehqWcdyGAKjxL8MdALSSKM-XYyx-YpLYLw"},
{"content":{"body":"I think I'd prefer seeing people declaring `move()` themselves rather than trying to design something in the language.","format":"org.matrix.custom.html","formatted_body":"I think I'd prefer seeing people declaring <code>move()</code> themselves rather than trying to design something in the language.","m.mentions":{},"msgtype":"m.text"},"ts":1748381921455,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$wwj2SShlfWClWQ13ztFQEA9Yk3qJxpUisrhrF4ZrdoI"},
{"content":{"body":"But now I'm curious if typescript could layer a full borrow checker on top and do this automatically. :-)","m.mentions":{},"msgtype":"m.text"},"ts":1748381989340,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$Njce1cwU3gOSyp59I2dvmHHeGtn46-BMK_I5q90TKrE"},
{"content":{"body":"* we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky .... actually, nevermind, I don't think this works","m.mentions":{},"m.new_content":{"body":"we can also null/undefined out the original decl and assign it to a regular scoped variable but that's also a bit wonky .... actually, nevermind, I don't think this works","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9HO5nmV2Y0zaoczx2I8I49YWzlLUHVGmbGvGolcQmAs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748382006676,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6psmDWQKcEUw8neg-y4ySo-zK8JGEggjJDzFE3nTpWE"},
{"content":{"body":"Making every disposable object declare a `move()` is a bit ... difficult.  From the conversation I'm having in another channel on this, \"It has to allocate a new instance of itself and move all the contents over to it. This is a lot of work to write for every type. And if anything else in the world holds a (presumably non-owning) reference to the object, those references are now invalid, so it might not even be possible to implement move() correctly, at least without adding a layer of indirection.\"","format":"org.matrix.custom.html","formatted_body":"Making every disposable object declare a <code>move()</code> is a bit ... difficult.  From the conversation I'm having in another channel on this, \"It has to allocate a new instance of itself and move all the contents over to it. This is a lot of work to write for every type. And if anything else in the world holds a (presumably non-owning) reference to the object, those references are now invalid, so it might not even be possible to implement move() correctly, at least without adding a layer of indirection.\"","m.mentions":{},"msgtype":"m.text"},"ts":1748382744608,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$m6bsMfEkRSKSy_PVV4DVFhrFoB41UAQX91adB1QpjmY"},
{"content":{"body":"I think I need to sleep on it. I've started writing an reply about 5 times, and deleted them 5 times. My essential concern is that both the 'other non-owning references becoming invalid' and the return of the resource suggest that it is leaking in ways that probably aren't good for an explicit allocated and released resource (the former because we seem to have lost ownership during the method's lifetime, and the latter because we can't require the result is allocated to a variable declared with `using`).","format":"org.matrix.custom.html","formatted_body":"I think I need to sleep on it. I've started writing an reply about 5 times, and deleted them 5 times. My essential concern is that both the 'other non-owning references becoming invalid' and the return of the resource suggest that it is leaking in ways that probably aren't good for an explicit allocated and released resource (the former because we seem to have lost ownership during the method's lifetime, and the latter because we can't require the result is allocated to a variable declared with <code>using</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1748384163682,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$fdsUXzHS1ChFsTRR2n0SSSdSe2ZN4Xs6xXbKbgw8MNQ"},
{"content":{"body":"yeah, it's a tricky one","m.mentions":{},"msgtype":"m.text"},"ts":1748384394155,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$ehMHReMK64SELodW7mYVJ35K3PWjo0Hig8cNYfYhPDQ"},
{"content":{"body":"I prefer the simplicity of ERM as it is but compared to the typical RAII pattern in c++, etc it's a bit *over* simplified... and that's there the questions here are coming from. We have a code base that is quite heavy in RAII mechanisms and the c++ level with no equivalent at the JS level","format":"org.matrix.custom.html","formatted_body":"I prefer the simplicity of ERM as it is but compared to the typical RAII pattern in c++, etc it's a bit <em>over</em> simplified... and that's there the questions here are coming from. We have a code base that is quite heavy in RAII mechanisms and the c++ level with no equivalent at the JS level","m.mentions":{},"msgtype":"m.text"},"ts":1748384464175,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$SE2WyVWGpRSx3IKxStVZzP0LRSP53lCqO7s2YNQb1ao"},
{"content":{"body":"If we get Symbol.enter/exit, then you'd be able to declare a function `movable` that you'd use as `using x = movable(foo)`","msgtype":"m.text"},"ts":1748384569638,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hfEHUiwrsmEnj47TOZMO-l1BMQXfDXgu5BAXJDWxIAw"},
{"content":{"body":"Another example to stew on... \n```\nfunction foo() {\n  using bar = new MyDisposable();\n  if (someCondition()) throw new Error('boom'); // I want bar disposed in this case\n  return bar;  // I don't want it disposed in this case\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Another example to stew on...</p>\n<pre><code>function foo() {\n  using bar = new MyDisposable();\n  if (someCondition()) throw new Error('boom'); // I want bar disposed in this case\n  return bar;  // I don't want it disposed in this case\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1748384583858,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$qbmZs0ZEll1iPOB9KuF5ozQabr1S0b3E0z2bN35qWpQ"},
{"content":{"body":"Is there an open proposal for this?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hfEHUiwrsmEnj47TOZMO-l1BMQXfDXgu5BAXJDWxIAw"}},"msgtype":"m.text"},"ts":1748384620794,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$KAYoMQkTKGFevoldOv1CmdxEgzPZJVtHxUdY8EQsffQ"},
{"content":{"body":"and is it functions only?","m.mentions":{},"msgtype":"m.text"},"ts":1748384629896,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Ak1f6FV0vZA7NAH8IMkp79KteFqqgNTSdLHYSXHip7c"},
{"content":{"body":"Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)\n\nInstead of\n```\nusing foo = getObj()\n```\nyou can do\n```\nconst foo = getObj();\nusing move = movable(foo)\n\n...\n\nmove()\n```\n\nWhere movable returns a function move that returns foo and has its own dispose method, deactivated by move.","msgtype":"m.text"},"ts":1748384724444,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ujxNsXQwWmNaLxXBRLz0Dt4ld7UMmo1iM3pT1kSR0GM"},
{"content":{"body":"* Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)\n\nInstead of\n```\nusing foo = getObj()\n```\nyou can do\n```\nconst foo = getObj();\nusing move = movable(foo)\n\n...\n\nmove()\n```\n\nWhere movable returns a function move that returns foo and has its own dispose method forwarded to foo, deactivated by move.","m.new_content":{"body":"Actually maybe you don't need .enter? (Sorry my element client is refusing to format markdown)\n\nInstead of\n```\nusing foo = getObj()\n```\nyou can do\n```\nconst foo = getObj();\nusing move = movable(foo)\n\n...\n\nmove()\n```\n\nWhere movable returns a function move that returns foo and has its own dispose method forwarded to foo, deactivated by move.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ujxNsXQwWmNaLxXBRLz0Dt4ld7UMmo1iM3pT1kSR0GM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748384749068,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1vitGEyNQXXgsbKQ9WdNY73xqEDseGGOZbmTb_oedLE"},
{"content":{"body":"ah, ok, so it's essentially like declaring a disposable boxed type similar to `DisposableStack`","format":"org.matrix.custom.html","formatted_body":"ah, ok, so it's essentially like declaring a disposable boxed type similar to <code>DisposableStack</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748384798190,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$NeTd4R9e6SbMoSskQ5duQIFFh-UEpkuoUrTI0S6QzEs"},
{"content":{"body":"> <@jasnell:matrix.org> Is there an open proposal for this?\n\nWe have https://github.com/tc39/proposal-explicit-resource-management/issues/195","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KAYoMQkTKGFevoldOv1CmdxEgzPZJVtHxUdY8EQsffQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br />Is there an open proposal for this?</blockquote></mx-reply>We have https://github.com/tc39/proposal-explicit-resource-management/issues/195","m.relates_to":{"m.in_reply_to":{"event_id":"$KAYoMQkTKGFevoldOv1CmdxEgzPZJVtHxUdY8EQsffQ"}},"msgtype":"m.text"},"ts":1748384800467,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_Gto7FTlPp0O8MzWsZLItCn38QQGkwT-PXj7923dCOM"},
{"content":{"body":"It was also discussed in the context of async context, maybe Chengzhong Wu knows if we actually have a proposal","format":"org.matrix.custom.html","formatted_body":"It was also discussed in the context of async context, maybe <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a> knows if we actually have a proposal","msgtype":"m.text"},"ts":1748384819782,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TLg-UTQCLR5sRZIstnAvhxn5BMfup8UpPTjNm53sDgc"},
{"content":{"body":"Interesting ok","m.mentions":{},"msgtype":"m.text"},"ts":1748384868287,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Z4sSOYpX4VabLlTiknGpj-MgvRM8mCyLzTvyF7R7gj0"},
{"content":{"body":"https://github.com/tc39/proposal-using-enforcement for Symbol.enter","m.mentions":{},"msgtype":"m.text"},"ts":1748385955830,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$HvmnhtdEETk1v8Bc6GjX4S6xJe1HhZVxFtuJfyeqm5I"},
{"content":{"body":"```js\nfunction movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n    },\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">function movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n    },\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1748388769546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$StezwCYKkFv0Mniog4bo-WjbVLSUcd8ta67uoIwHxac"},
{"content":{"body":"```js\n// usage:\nfunction makeDisposable() {\n  return {\n    [Symbol.dispose]() {\n      console.log('disposed');\n    },\n  };\n}\n{\n  using movableFoo = movable(makeDisposable());\n  const { resource: foo } = movableFoo;\n  console.log('normal exit');\n  // disposed\n}\n{\n  using movableFoo = movable(makeDisposable());\n  const { resource: foo } = movableFoo;\n  movableFoo.move();\n  console.log('moved before exit');\n  // not disposed\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">// usage:\nfunction makeDisposable() {\n  return {\n    [Symbol.dispose]() {\n      console.log('disposed');\n    },\n  };\n}\n{\n  using movableFoo = movable(makeDisposable());\n  const { resource: foo } = movableFoo;\n  console.log('normal exit');\n  // disposed\n}\n{\n  using movableFoo = movable(makeDisposable());\n  const { resource: foo } = movableFoo;\n  movableFoo.move();\n  console.log('moved before exit');\n  // not disposed\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1748388786219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7agYXFG9QBRvPSd9jvmWpEuhwyUhifSkbLmZQDQAqB4"},
{"content":{"body":"this seems like it's fine to leave to userland","m.mentions":{},"msgtype":"m.text"},"ts":1748388802913,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pka9ZaeUKwlenqbW3r7DOmm4MJMQwW1OocMMKQQ7jU0"},
{"content":{"body":"it's a little boilerplate I guess","m.mentions":{},"msgtype":"m.text"},"ts":1748388829125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y0PdYYCAHz6g2YZ2GQc7Hs7yTGKp1WQy988Sm-5SSUg"},
{"content":{"body":"Could make .move return a new movable in the same way DisposableStack.p.move returns a new Stack","format":"org.matrix.custom.html","formatted_body":"Could make .move return a new movable in the same way DisposableStack.p.move returns a new Stack","msgtype":"m.text"},"ts":1748389767664,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$7LxvRtsNR0v23OZmZsj7czFjUO1JZpgeZYt6ao0n7yg"},
{"content":{"body":"or maybe just return the resource after nulling it out ","format":"org.matrix.custom.html","formatted_body":"or maybe just return the resource after nulling it outÂ ","msgtype":"m.text"},"ts":1748389829127,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UyKX33_RXLHOCL7Vm7U5-NqrXhkfr-EO_hzWN1103CY"},
{"content":{"body":"though need to be careful moving in a _tearable_ hand over ","format":"org.matrix.custom.html","formatted_body":"though need to be careful moving in a _tearable_ hand overÂ ","msgtype":"m.text"},"ts":1748389971103,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$FzezsCLWTJTXiphiQsVjqpgCqebKurFC9MXUzQnZ1us"},
{"content":{"body":"* ```js\nfunction movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n      return foo;\n    },\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <pre><code class=\"language-js\">function movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n      return foo;\n    },\n  }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nfunction movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n      return foo;\n    },\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">function movable(foo) {\n  let dispose = foo[Symbol.dispose];\n  if (typeof dispose !== 'function') throw new Error('not disposable');\n  return {\n    resource: foo,\n    moved: false,\n    [Symbol.dispose]() {\n      if (this.moved) return;\n      dispose.call(foo);\n    },\n    move() {\n      this.moved = true;\n      return foo;\n    },\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$StezwCYKkFv0Mniog4bo-WjbVLSUcd8ta67uoIwHxac","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748390103859,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$A0mUorx-JZUbQvhy5pF125mkz5C7UDwLHqwTpv5Mh90"},
{"content":{"body":"I think just returning the resource is better for the cases described above; presumably the caller is not expecting this wrapped thing and _a priori_ there is no reason to expect them to want to move it again","format":"org.matrix.custom.html","formatted_body":"I think just returning the resource is better for the cases described above; presumably the caller is not expecting this wrapped thing and <em>a priori</em> there is no reason to expect them to want to move it again","m.mentions":{},"msgtype":"m.text"},"ts":1748390143900,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zUI6gI5PW2_F2JxgU-U3FN_B0nKUFwSe9Njc7HCyz-0"},
{"content":{"body":"```\nreturn {\n  p: moveable.move(),\n  q: mightThrow()\n}\n```\n\n","format":"org.matrix.custom.html","formatted_body":"```<br />return {<br />Â Â p: moveable.move(),<br />Â Â q: mightThrow()<br />}<br />```<br /><br />","msgtype":"m.text"},"ts":1748390162094,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KKF03ha2mWMG-brpGOSyD-f5Z6PxaWgyAgscmT7Simk"},
{"content":{"body":"but good idea, returning the resource is a nice convenience, updated","m.mentions":{},"msgtype":"m.text"},"ts":1748390174635,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VpD4S41Xaz9eL-MubITScC6g8OYtSO0XuVtjoU5kqJI"},
{"content":{"body":"yeah it's easy to hold this wrong","m.mentions":{},"msgtype":"m.text"},"ts":1748390181550,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mau5oosQWzIAr018Eeg_t5-IsPMOWhkzOTlbUmz6nyc"},
{"content":{"body":"although this is also true of `disposableStack.move()`","format":"org.matrix.custom.html","formatted_body":"although this is also true of <code>disposableStack.move()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748390191827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ErD8mA0w7yk5Y_JSdGpu-vOUoxWtBo9aSlsVJ-coQFc"},
{"content":{"body":"boundaries are always tricky","m.mentions":{},"msgtype":"m.text"},"ts":1748390209493,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uTxGPoJynKtdFeiELRv3M7cH_-j3F1436bSHD-WtbSY"},
{"content":{"body":"not much to be done about that though without linear types","m.mentions":{},"msgtype":"m.text"},"ts":1748390219144,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CrbcJqFvQ6anPsYL2Fq5_Uh44-5kDo3zzCmKg0QjKgw"},
{"content":{"body":"Yeah, the point of stack.move is that it should be the very last expression ","format":"org.matrix.custom.html","formatted_body":"Yeah, the point of stack.move is that it should be the very last expressionÂ ","msgtype":"m.text"},"ts":1748390225321,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cUr6JKgJ27pe-EUQKtD36v8RhFESPvbnMFyhKdaK4Ss"},
{"content":{"body":"to ensure the time to move has truly arrived ","format":"org.matrix.custom.html","formatted_body":"to ensure the time to move has truly arrivedÂ ","msgtype":"m.text"},"ts":1748390242752,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CCNQYSLufncp1IC-HWekVZi-s342eHCReGIU_4nT9Aw"},
{"content":{"body":"if you return the resource and not a new movable, isn't that more like release()","m.mentions":{},"msgtype":"m.text"},"ts":1748390282659,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ViVuSd_0u7MoAr6yahqvNt0BSkbo5N9bAlDiAkrMGpE"},
{"content":{"body":"I guess but I liked the symmetry with `disposableStack.move()`","format":"org.matrix.custom.html","formatted_body":"I guess but I liked the symmetry with <code>disposableStack.move()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748390303318,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IHWKKPZTJYDtpL7B1zL1EIfEH7FGSrhZ9qqzcR0ENR8"},
{"content":{"body":"but DS does return a new movable DS","m.mentions":{},"msgtype":"m.text"},"ts":1748390319469,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kqnOTF1YI4eVMbk3jax4Jrn0zAH9dg3qgx1iHddJPlM"},
{"content":{"body":"one difference is that the resource is itself a disposable, so it can be _used_ by the caller","format":"org.matrix.custom.html","formatted_body":"one difference is that the resource is itself a disposable, so it can be _used_ by the caller","msgtype":"m.text"},"ts":1748390384420,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LsoTHFKaYg21NJwu5_YMUzLHFDIddCiQB9I6UGZR6jg"}
]