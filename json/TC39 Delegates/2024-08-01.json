[
{"content":{"body":"> <@jridgewell:matrix.org> Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.\n\nof course there are; `import type` vs `import`, \"what gets stripped\" vs \"what doesn't\", etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iHVx4V5NSakKGHgWSK-DMQEiYZQ8_ZZWKEiN8B9_xf8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.</blockquote></mx-reply>of course there are; <code>import type</code> vs <code>import</code>, \"what gets stripped\" vs \"what doesn't\", etc","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iHVx4V5NSakKGHgWSK-DMQEiYZQ8_ZZWKEiN8B9_xf8"}},"msgtype":"m.text"},"ts":1722482692465,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lCcF2wHs-u5mckQ9RQCWEqTCQ6iQgNPE1S8BHnPwhGo"},
{"content":{"body":"> <@jridgewell:matrix.org> Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.\n\n * of course they are; `import type` vs `import`, \"what gets stripped\" vs \"what doesn't\", etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iHVx4V5NSakKGHgWSK-DMQEiYZQ8_ZZWKEiN8B9_xf8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Iâ€™m not sure theyâ€™re different from the userâ€™s point of view.</blockquote></mx-reply> * of course they are; <code>import type</code> vs <code>import</code>, \"what gets stripped\" vs \"what doesn't\", etc","m.mentions":{},"m.new_content":{"body":"of course they are; `import type` vs `import`, \"what gets stripped\" vs \"what doesn't\", etc","format":"org.matrix.custom.html","formatted_body":"of course they are; <code>import type</code> vs <code>import</code>, \"what gets stripped\" vs \"what doesn't\", etc","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lCcF2wHs-u5mckQ9RQCWEqTCQ6iQgNPE1S8BHnPwhGo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722482695420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1iCl-DBFcZ176S8NNG6CBA-kVCMMT5qZzji7vdglTaA"},
{"content":{"body":"i would be surprised if any user actually didn't understand that typescript wasn't what runs in the actual application","m.mentions":{},"msgtype":"m.text"},"ts":1722482721311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0TU1U4NpUkiSs0D1GhzQN1Sn4WL0KPYJ5uSX4k2BwYk"},
{"content":{"body":"About Decimal and primitives, littledan's logic makes a lot of sense to me. If we were to have decimals as a primitive, they would need to be normalized (no quantum). However, the champions have presented rationale for why decimals should retain their quantum. Therefore, Decimals should be objects, not primitives.\n\nThis logic flows completely independently from any argument about whether or not engines may eventually change their position on decimals being a new primitive.","format":"org.matrix.custom.html","formatted_body":"<p>About Decimal and primitives, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>'s logic makes a lot of sense to me. If we were to have decimals as a primitive, they would need to be normalized (no quantum). However, the champions have presented rationale for why decimals should retain their quantum. Therefore, Decimals should be objects, not primitives.</p>\n<p>This logic flows completely independently from any argument about whether or not engines may eventually change their position on decimals being a new primitive.</p>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1722491243604,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$pVWxNp_N0HxKzvu1pCqFfr50wpfHO-LSNGruoV3f0hE"},
{"content":{"body":"> <@ljharb:matrix.org> i would be surprised if any user actually didn't understand that typescript wasn't what runs in the actual application\n\nYouâ€™d be surprised ðŸ˜ƒ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0TU1U4NpUkiSs0D1GhzQN1Sn4WL0KPYJ5uSX4k2BwYk\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i would be surprised if any user actually didn't understand that typescript wasn't what runs in the actual application</blockquote></mx-reply>Youâ€™d be surprised ðŸ˜ƒ","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0TU1U4NpUkiSs0D1GhzQN1Sn4WL0KPYJ5uSX4k2BwYk"}},"msgtype":"m.text"},"ts":1722498936635,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$QQDij1SJmW0v7dkVrHcoUUCx8uJp428SHxzvZTe3a4o"},
{"content":{"body":"In the old days, folk learned JS before they learned TS, so had a strong mental model of the difference.\n\nNowadays many people learn TS first (or at least, it's not sequenced).\n\nAnd we have runtimes with built-in support, further hiding the difference.","format":"org.matrix.custom.html","formatted_body":"<p>In the old days, folk learned JS before they learned TS, so had a strong mental model of the difference.</p>\n<p>Nowadays many people learn TS first (or at least, it's not sequenced).</p>\n<p>And we have runtimes with built-in support, further hiding the difference.</p>","msgtype":"m.text"},"ts":1722500071235,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$2F4tag733_BCERSZzVZWGOKwdTmCULVZIEquh3cad7M"},
{"content":{"body":"are most of those newcomers using those alternative runtimes tho?","m.mentions":{},"msgtype":"m.text"},"ts":1722534124754,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vk7OSJmas7JgSf5cwfRI8BxTEBKgfhI86l3pZXYP-3s"},
{"content":{"body":"Definitely not. Most still use the browser - though through transpilers - or node(same).","msgtype":"m.text"},"ts":1722534797347,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$5c6-T8ZmMR2A2dwWGWEyxdDGuwI4v6Wh0Fd63RA_puQ"},
{"content":{"body":"that matches my intuition - anyone who's using \"not browsers or unflagged node\" is not a newcomer and knows the difference.","m.mentions":{},"msgtype":"m.text"},"ts":1722535149824,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jdUSEMkdI8zu3aezULLFqRarHOvg355dHtfjjolQzVA"},
{"content":{"body":"> <@ljharb:matrix.org> of course they are; `import type` vs `import`, \"what gets stripped\" vs \"what doesn't\", etc\n\nI donâ€™t understand your point. To users writing functions, `deferred`/`immediate` seems very similar to `readonly` in `readonly number[]` which tells the user they canâ€™t don `foo[0] = 1`. `derred () => void` means they canâ€™t call that function within their function body, only pass it off to another deferring function or store it for later.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24lCcF2wHs-u5mckQ9RQCWEqTCQ6iQgNPE1S8BHnPwhGo\">In reply to</a><a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb:matrix.org</a><br />of course they are; <code>import type</code> vs <code>import</code>, \"what gets stripped\" vs \"what doesn't\", etc</blockquote></mx-reply>I donâ€™t understand your point. To users writing functions, <code data-md=\"`\">deferred</code>/<code data-md=\"`\">immediate</code> seems very similar to <code data-md=\"`\">readonly</code> in <code data-md=\"`\">readonly number[]</code> which tells the user they canâ€™t don <code data-md=\"`\">foo[0] = 1</code>. <code data-md=\"`\">derred () =&gt; void</code> means they canâ€™t call that function within their function body, only pass it off to another deferring function or store it for later.","m.relates_to":{"m.in_reply_to":{"event_id":"$lCcF2wHs-u5mckQ9RQCWEqTCQ6iQgNPE1S8BHnPwhGo"}},"msgtype":"m.text"},"ts":1722536757387,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y9wJNMAmzM1fplQuZrsGiJVFqiR9fNLwXx90w7Mam64"},
{"content":{"body":"`: readonly number[]` tho. it's part of the type.","format":"org.matrix.custom.html","formatted_body":"<code>: readonly number[]</code> tho. it's part of the type.","m.mentions":{},"msgtype":"m.text"},"ts":1722541206296,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ajq-VeptqmCCKPGz6muAgQgCS6USxZ3DMXYmbRQ9F3E"},
{"content":{"body":"Yes, and `: deferred () => void` is part of the type, too.","format":"org.matrix.custom.html","formatted_body":"Yes, and <code data-md=\"`\">: deferred () =&gt; void</code> is part of the type, too.","msgtype":"m.text"},"ts":1722545224378,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AjZU67HGSnZNADY7Mn4SAuH4VF0G9A5ic8-KtwJKh10"},
{"content":{"body":"The type system should error if you call a defferred callback sync, the same way it will if you mutate a readonly array.","msgtype":"m.text"},"ts":1722545300219,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wdQSuvtIte69Fr0w4UoUKZB2C95G2bKsoDLf71cVjFA"},
{"content":{"body":"is the only way to observe number of ticks via user code `then` handlers?\n\nif i have some spec doing the following:\n\n```\nlet p1 = new %Promise%;\nlet p2 = new %Promise%;\nPerformPromiseThen(p2, () => p1, () => {});\nreturn p2;\n```\n\nwhere `p1` and `p2` are built-in promises, and `p1` never escapes to user code, are the two ticks unobservable? is that equivalent to returning `p1` directly?","format":"org.matrix.custom.html","formatted_body":"<p>is the only way to observe number of ticks via user code <code>then</code> handlers?</p>\n<p>if i have some spec doing the following:</p>\n<pre><code>let p1 = new %Promise%;\nlet p2 = new %Promise%;\nPerformPromiseThen(p2, () =&gt; p1, () =&gt; {});\nreturn p2;\n</code></pre>\n<p>where <code>p1</code> and <code>p2</code> are built-in promises, and <code>p1</code> never escapes to user code, are the two ticks unobservable? is that equivalent to returning <code>p1</code> directly?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722552964325,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kd00hegUQo-ENHcC06rJvTJLzuXwTtL96VDX3b8i-KI"},
{"content":{"body":"shu: do you meant to have `let p3 = PerformPromiseThen(p2, () => p1, () => {}); return p3`? Or are you really intending to return the original `p2`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: do you meant to have <code>let p3 = PerformPromiseThen(p2, () =&gt; p1, () =&gt; {}); return p3</code>? Or are you really intending to return the original <code>p2</code>?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1722553602483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WnLaDMjQHdB3jSEFS_nZGlrBo3cy_pDO_up5JoBuxRI"},
{"content":{"body":"i am intending to return original `p2`, that's a PerformPromiseThen as in our AO, not p2.then","format":"org.matrix.custom.html","formatted_body":"i am intending to return original <code>p2</code>, that's a PerformPromiseThen as in our AO, not p2.then","m.mentions":{},"msgtype":"m.text"},"ts":1722553726701,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XKwmCa0xE8dASXE7DlMIqtJuPTOBvtCqCSiN0lZ9yOM"},
{"content":{"body":"like p2 does nothing except inherit p1's eventual state","m.mentions":{},"msgtype":"m.text"},"ts":1722553739641,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RhjtI8z5kAtiwV6J7DpzrosssUFKrlx4EwA1vuIJJzc"},
{"content":{"body":"wait i think that pseudocode is just borked","m.mentions":{},"msgtype":"m.text"},"ts":1722553781950,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O7vSsIRASCA83Dj-QwIc53UeJjERwzEaFXWotbr3FQw"},
{"content":{"body":"it's like `PerformPromiseThen(p1, () => Resolve(p2))`","format":"org.matrix.custom.html","formatted_body":"it's like <code>PerformPromiseThen(p1, () =&gt; Resolve(p2))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722553826341,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3W4WLryLogLb_ABgvf2xrStr9Tp_XT7N4wc6pnUuS-g"},
{"content":{"body":"in this example p1 never resolves so it is perforce not observable","m.mentions":{},"msgtype":"m.text"},"ts":1722554212203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ym51aOnQVa7xAvtrPvV52wwIzhzM-bXq1jQHCu2s5k4"},
{"content":{"body":"perhaps you intend p1 to start out resolved?","m.mentions":{},"msgtype":"m.text"},"ts":1722554218542,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QczkmE2Nn1XIyHSCXu4TwTE7GSjHQHkzrHH32mewqBM"},
{"content":{"body":"yes, i think starting out resolved is equivalent to what's actually happening","m.mentions":{},"msgtype":"m.text"},"ts":1722554293695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KdlTK3EiPf9O01BAgOFdpz_seY0pGK0th3ZernIibFE"},
{"content":{"body":"in which case, the difference is observable iff someone is keeping track of ticks while this all is going on, I believe? which they could be","m.mentions":{},"msgtype":"m.text"},"ts":1722554408057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Eh0YZuaw5ncZpBCnSa-WSJjymB2AFpg7cLFXtmNW0z0"},
{"content":{"body":"```\n(async () => {\n  for (let i = 0; i < 20; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  p1.then(() => { console.log('done 1'); });\n})();\n\n// vs:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res => { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() => { console.log('done 2'); });\n})();\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>(async () =&gt; {\n  for (let i = 0; i &lt; 20; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  p1.then(() =&gt; { console.log('done 1'); });\n})();\n\n// vs:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res =&gt; { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() =&gt; { console.log('done 2'); });\n})();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722554427168,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MjA9sx3OmzTT7aTCadB8csCzJKnQsDf91ySGecXMz_o"},
{"content":{"body":" * ```\n(async () => {\n  for (let i = 0; i < 4; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  p1.then(() => { console.log('done 1'); });\n})();\n\n// vs:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res => { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() => { console.log('done 2'); });\n})();\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code>(async () =&gt; {\n  for (let i = 0; i &lt; 4; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  p1.then(() =&gt; { console.log('done 1'); });\n})();\n\n// vs:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res =&gt; { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() =&gt; { console.log('done 2'); });\n})();\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```\n(async () => {\n  for (let i = 0; i < 4; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  p1.then(() => { console.log('done 1'); });\n})();\n\n// vs:\n(async () => {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res => { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() => { console.log('done 2'); });\n})();\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>(async () =&gt; {\n  for (let i = 0; i &lt; 4; ++i) {\n    console.log(i);\n    await 0;\n  }\n})();\n\n// compare:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  p1.then(() =&gt; { console.log('done 1'); });\n})();\n\n// vs:\n(async () =&gt; {\n  let p1 = Promise.resolve();\n  \n  let resolveP2;\n  let p2 = new Promise(res =&gt; { resolveP2 = res; });\n  \n  p1.then(resolveP2);\n  \n  p2.then(() =&gt; { console.log('done 2'); });\n})();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MjA9sx3OmzTT7aTCadB8csCzJKnQsDf91ySGecXMz_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722554463396,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4I9qIyTx5xh1GzHNQdaQX0wE0RCg7GdOy-F6MeGMc5M"},
{"content":{"body":"ah, of course, thanks for the example","m.mentions":{},"msgtype":"m.text"},"ts":1722554661776,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LQPai3hEP8nWlpe5lXVkd7efaUzKq005oJknTc1pRo8"},
{"content":{"body":"cursed global queue","m.mentions":{},"msgtype":"m.text"},"ts":1722554668087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YJ2Gth9iLJhKIKDnO-zqLEvr4ld-xBdxqQ2_kj6j2_k"}
]