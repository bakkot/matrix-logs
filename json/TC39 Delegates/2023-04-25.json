[
{"content":{"body":"I tried new decorator and very surprised that it does not have the semantics I expected (sorry I though it too naturally and didn't find the proposal made a different thing).","msgtype":"m.text"},"ts":1682412223512,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$o5YGqnjjrgPaQMa0mKWgS2PqBTjUHkvnXgtbv21vKQ8"},
{"content":{"body":"since native implementation is not available in Chrome, I uses TS 5.0 transpile","msgtype":"m.text"},"ts":1682412343721,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$p_t4Lz1HYrYPRWXHbvBvyaUBAxMvvsjP69hPvEmud5Q"},
{"content":{"body":"I found I cannot make an intuitive @lazy decorator","msgtype":"m.text"},"ts":1682412359473,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$T0dcZGF8N7X3bvUQWeh11o71z0XFyAOZJoB39n51-Aw"},
{"content":{"body":"I received the evaluated value, but I thought it will be a `() => initial_expression` function so I can defer the evaluation of the field.","format":"org.matrix.custom.html","formatted_body":"I received the evaluated value, but I thought it will be a <code>() =&gt; initial_expression</code> function so I can defer the evaluation of the field.","msgtype":"m.text"},"ts":1682412406009,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$znXfYxKjnLh7IQolX7toqmUykg0i_NWH-ksgiwQNQJ8"},
{"content":{"body":"note: I know I can write `@lazy x = () => expr` but that's a non starter for me since TypeScript currently cannot change the type of the field. (which means `T.x` will have type `() => X` instead of `X`)","format":"org.matrix.custom.html","formatted_body":"note: I know I can write <code>@lazy x = () =&gt; expr</code> but that's a non starter for me since TypeScript currently cannot change the type of the field. (which means <code>T.x</code> will have type <code>() =&gt; X</code> instead of <code>X</code>)","msgtype":"m.text"},"ts":1682412543045,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI"},
{"content":{"body":"I found some discussion in the decorator repo, basically `@lazy` is considered as no real use cases. I'm confused about this decision\n\nhttps://github.com/tc39/proposal-decorators/issues/403\n\n> this is not possible in this proposal due to performance constraints\n\n>  but there weren’t any compelling use cases in the ecosystem","format":"org.matrix.custom.html","formatted_body":"<p>I found some discussion in the decorator repo, basically <code>@lazy</code> is considered as no real use cases. I'm confused about this decision</p>\n<p>https://github.com/tc39/proposal-decorators/issues/403</p>\n<blockquote>\n<p>this is not possible in this proposal due to performance constraints</p>\n</blockquote>\n<blockquote>\n<p>but there weren’t any compelling use cases in the ecosystem</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1682413336316,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$BbLv6kDeU64C8eYJI4My9bCssAZeyl1JvJHLz3hIZJg"}
]