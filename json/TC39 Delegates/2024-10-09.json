[
{"content":{"body":"please add yourself to the attendees list at the top of today's notes doc.  (and yesterday's if you missed).  thank you üôè","m.mentions":{},"msgtype":"m.text"},"ts":1728435915486,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$IGG_Gsmk-fXHoXSanlCUElcWnlOz_WYh3-d7H9DfuXE"},
{"content":{"body":"I captured the queue","m.mentions":{},"msgtype":"m.text"},"ts":1728437241285,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$ahunJt64pibJaH9CpEM1k1iFsfos8FpXtUmzk7NU_SA"},
{"content":{"body":"7 years","m.mentions":{},"msgtype":"m.text"},"ts":1728437426266,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$qfVUmlTv1dKkvqdrjFob0WfcouvSPY5PRgBMTlK_uaE"},
{"content":{"body":" * 7 years, wow","m.mentions":{},"m.new_content":{"body":"7 years, wow","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qfVUmlTv1dKkvqdrjFob0WfcouvSPY5PRgBMTlK_uaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728437434498,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$1cWFKBExn2LDX0nfdTJlPWZEzFrlHEp6wdh4pq90qbA"},
{"content":{"body":"Fun co-incidence. The 'toSorted' spec bug was caught by a Japanese developer","m.mentions":{},"msgtype":"m.text"},"ts":1728437954452,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ou0aDOn_hE7WkG2l6Igdr0jBX2vGhCNg2n-bdWMQh6g"},
{"content":{"body":"\"Summing a list is a very common operation and is one of the few remaining use cases for Array.prototype.reduce.\"","msgtype":"m.text"},"ts":1728438095359,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$YVcR9LpW7XgdrD8QFxctBhwSi0rk67LxUnB4fXTy5F0"},
{"content":{"body":"are we going to discouraging use of [].reduce?","msgtype":"m.text"},"ts":1728438106660,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Htilf_cdws2pnz9RWlv7UApWM1mwO3KIq2-4aeVvX9I"},
{"content":{"body":"no, because you don't necessarily want the new behavior","m.mentions":{},"msgtype":"m.text"},"ts":1728438181545,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Ix7b9zKwMIPsNRCSzpZ91-wbDKbV32MLNOAqKqYWHyo"},
{"content":{"body":"The reduce will be faster still, right?","m.mentions":{},"msgtype":"m.text"},"ts":1728438202117,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$5cv03rKIWv8dLTGFo_6eNfoOEV5eh5UZgLdQgywNocM"},
{"content":{"body":"@jkup:matrix.org an equivalent loop will, at least","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jkup:matrix.org\">@jkup</a> an equivalent loop will, at least","msgtype":"m.text"},"ts":1728438250006,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$29ta0xAJT5_LYPzMM27kzgVD7EOagJGJwqWBa6tthLE"},
{"content":{"body":"but you REALLY don't want to do that","msgtype":"m.text"},"ts":1728438259156,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_sxRWg4Z3U4emkPjnuow9hZZvpy_B60gzioG5GA8Iio"},
{"content":{"body":"your result can accumulate a ton of error","msgtype":"m.text"},"ts":1728438281910,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-to-eB9mjEHF9s6s_HtNCoqzygNQ9j6jrYxHx8mHjTI"},
{"content":{"body":"the wording sounds like reduce is a bad thing (actually yes in most cases it _reduce_ the code readability)","format":"org.matrix.custom.html","formatted_body":"the wording sounds like reduce is a bad thing (actually yes in most cases it <em>reduce</em> the code readability)","msgtype":"m.text"},"ts":1728438283897,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$J-UGQ0aTmmrAuYiTQMiPxuuMZpfIcyuOq-iD5cPaQ7c"},
{"content":{"body":"but I'm not expecting that we should have a proposal to solve \"the few remaining use cases of reduce\", other motivations are ok thou","msgtype":"m.text"},"ts":1728438348139,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JJSW3EJIUAxa1EUjqoaHwFE_Uzkck7EGo5XOhwo2Arw"},
{"content":{"body":"> <@michaelficarra:matrix.org> but you REALLY don't want to do that\n\nI mean, in a specific case you might know that you're just adding e.g. a couple dozen single-digit ints or something though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_sxRWg4Z3U4emkPjnuow9hZZvpy_B60gzioG5GA8Iio?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>but you REALLY don&#39;t want to do that</blockquote></mx-reply>I mean, in a specific case you might know that you're just adding e.g. a couple dozen single-digit ints or something though","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_sxRWg4Z3U4emkPjnuow9hZZvpy_B60gzioG5GA8Iio"}},"msgtype":"m.text"},"ts":1728438387840,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GFoxALPfAZeOOaUtHYUC9k7_TobsSZFgyxbCD3IkKao"},
{"content":{"body":"just depends on the guarantees you're working with","m.mentions":{},"msgtype":"m.text"},"ts":1728438402829,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Lk9mzmA3u49OF-WwoKUBUhRe3RmJJSwESMSd6CuR91o"},
{"content":{"body":"did you know reduce is pronounced re-doo-che","m.mentions":{},"msgtype":"m.text"},"ts":1728438427181,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YLXe1kR2IA8WV7FRFwG9s5_GF3dnIzhSMTLfQcc1XU4"},
{"content":{"body":"@rkirsling:matrix.org if the number of values you're summing is small enough, the difference in perf between compensated and uncompensated is negligible anyway","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling</a> if the number of values you&#39;re summing is small enough, the difference in perf between compensated and uncompensated is negligible anyway","msgtype":"m.text"},"ts":1728438447354,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UQe8wb7ZbBagJ-bWJ0pgTv9LP6mBB-647fDEANSPRkE"},
{"content":{"body":"touch√©!","m.mentions":{},"msgtype":"m.text"},"ts":1728438458628,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$tGrGa_LWoVsyRfm1Oo1y6NP3S8zBH-MsYRCI7uRxcFE"},
{"content":{"body":"and once it gets large enough to care about perf, you should also care about error accumulation","msgtype":"m.text"},"ts":1728438477336,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3hbCAmpZyzC9UwXqQUmYlFREcCnXo06fSpGrOtR_SBQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> did you know reduce is pronounced re-doo-che\n\nnot re-diu-s, or it's a ghoti joke?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YLXe1kR2IA8WV7FRFwG9s5_GF3dnIzhSMTLfQcc1XU4\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>did you know reduce is pronounced re-doo-che</blockquote></mx-reply>not re-diu-s, or it&#39;s a ghoti joke?","m.relates_to":{"m.in_reply_to":{"event_id":"$YLXe1kR2IA8WV7FRFwG9s5_GF3dnIzhSMTLfQcc1XU4"}},"msgtype":"m.text"},"ts":1728438479652,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jyA3j35SsWVSe4anTGkfR424Xen96xtaVlSgU7pgB-4"},
{"content":{"body":"it is neither, it's just a \"let's pronounce this word in a silly way\" joke","m.mentions":{},"msgtype":"m.text"},"ts":1728438529009,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$virZfSg2xR3sDRs-pNbmZOaxgRhtPxF5yvEe-WVeXB4"},
{"content":{"body":"...the silly way in this case being like Italian, presumably :D","m.mentions":{},"msgtype":"m.text"},"ts":1728438572084,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-QSIFuEzO423WSigeNE6BDapR3dnMgdjLYSfgO5lrnw"},
{"content":{"body":"the contents of the schedule may have shifted in flight.  presenters please review and let us know if any issues","m.mentions":{},"msgtype":"m.text"},"ts":1728438816241,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$J5p4iJDyiUc-RINoYGFSPIosd8CdZwpl5MOBzHxTNbA"},
{"content":{"body":"> <@jkup:matrix.org> The reduce will be faster still, right?\n\nI would guess this will actually be faster because the reduce has to do callbacks. at least in the case where the engine knows it's a list of numbers already, `sumPrecise` can avoid a lot of work, which may make up for the difference","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5cv03rKIWv8dLTGFo_6eNfoOEV5eh5UZgLdQgywNocM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jkup:matrix.org\">@jkup:matrix.org</a><br>The reduce will be faster still, right?</blockquote></mx-reply>I would guess this will actually be faster because the reduce has to do callbacks. at least in the case where the engine knows it's a list of numbers already, <code>sumPrecise</code> can avoid a lot of work, which may make up for the difference","m.mentions":{"user_ids":["@jkup:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5cv03rKIWv8dLTGFo_6eNfoOEV5eh5UZgLdQgywNocM"}},"msgtype":"m.text"},"ts":1728438889766,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$avjmGZx4sKBHLAT9hJTjl3vIE-EPPR5MELWr9PzTpko"},
{"content":{"body":"I feel `setdefault` is ok. Not sure why people prefer callback...","format":"org.matrix.custom.html","formatted_body":"I feel <code>setdefault</code> is ok. Not sure why people prefer callback...","m.mentions":{},"msgtype":"m.text"},"ts":1728439081480,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$t4xcXpKhkdRv-ICraSJsDAB35qd18oSHLn6fgqX32lk"},
{"content":{"body":"because sometimes the default is expensive to compute.","m.mentions":{},"msgtype":"m.text"},"ts":1728439095771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ls8ow2aY-BRP9G9Jiiywl-TTJjB6v9X0GqTfvWqaxxo"},
{"content":{"body":"the callback can be lifted outside a loop, I'm not too worried about it","msgtype":"m.text"},"ts":1728439098901,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JDTHnL9Z9RvjaIR3qO2NClliGyWN5pxOrpge_Ws3zWY"},
{"content":{"body":"`getOrSet`","format":"org.matrix.custom.html","formatted_body":"<code>getOrSet</code>","msgtype":"m.text"},"ts":1728439099174,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-27EkZZTafQpBhsnUpOw8NrdNQBhfuH0bhvCZY6MMAE"},
{"content":{"body":"it's true that people _can_ avoid re-creating the callback, but they're not going to","format":"org.matrix.custom.html","formatted_body":"it's true that people <em>can</em> avoid re-creating the callback, but they're not going to","m.mentions":{},"msgtype":"m.text"},"ts":1728439135236,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZUxzKx90QXuMB-vEEuri-9OmkLJ9ehZAVqMdIlkU3H8"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1728439139587,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cSuzHqMtFshRw0TzNk7v7IwlcBpxZdsi4jE0Hqb91Wc"},
{"content":{"body":"i am also skeptical that prepending `() =>` would have a noticeable perf hit, but have no way to argue that","format":"org.matrix.custom.html","formatted_body":"i am also skeptical that prepending <code>() =&gt;</code> would have a noticeable perf hit, but have no way to argue that","m.mentions":{},"msgtype":"m.text"},"ts":1728439140294,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9i1mGMOIwaITK1FaoLDZsLabiYULrnuJZdIZaWYEeFE"},
{"content":{"body":"allocating throwaway closures is a lot more expensive than `0`","format":"org.matrix.custom.html","formatted_body":"allocating throwaway closures is a lot more expensive than <code>0</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728439154145,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U11iDrjkoH86rZf1uX7kKiHw-0y5PqBPK8qx1MPfoI0"},
{"content":{"body":"it will have a noticeable perf hit in a hot loop for sure?","m.mentions":{},"msgtype":"m.text"},"ts":1728439156914,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IHaqetOcbanC-mTRzqSU_H5BYMoVHxGPZ2g7b-9QmQM"},
{"content":{"body":"allocation + call","m.mentions":{},"msgtype":"m.text"},"ts":1728439160233,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WJG8oOfT6jH7ktEfLJgB4-PgZciLF0Vguyw9X1ozQs0"},
{"content":{"body":"> <@bakkot:matrix.org> allocating throwaway closures is a lot more expensive than `0`\n\n```\nfunction returnZero() { return 0; }\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$U11iDrjkoH86rZf1uX7kKiHw-0y5PqBPK8qx1MPfoI0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>allocating throwaway closures is a lot more expensive than <code>0</code></blockquote></mx-reply><pre><code>function returnZero() { return 0; }\n</code></pre>\n","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$U11iDrjkoH86rZf1uX7kKiHw-0y5PqBPK8qx1MPfoI0"}},"msgtype":"m.text"},"ts":1728439174563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NnNVhrf9_ZMJ-cuvxWJauSk3a0fMHQ6swMRWM8kr7tM"},
{"content":{"body":"yeah people aren't gonna do that, i agree with kevin there","m.mentions":{},"msgtype":"m.text"},"ts":1728439185730,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vWqECPSxcqAGhXXP8Pbz7DKQmHacBAs-YndB5C42bFw"},
{"content":{"body":"people will write ()=>0","m.mentions":{},"msgtype":"m.text"},"ts":1728439188968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V8p2LB52jNXKm2aoO7XJzdRfZMr47XL5-KWUABscBKQ"},
{"content":{"body":"100% of the time","m.mentions":{},"msgtype":"m.text"},"ts":1728439193527,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y00R1ljno6PXMG1HYgM_guUONdwhiWPec7Ux4sIJnxQ"},
{"content":{"body":"@shuyuguo:matrix.org @bakkot:matrix.org when it's `[]`, you're creating tons of thrown-away arrays instead of just not calling a callback","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> when it&#39;s <code data-md=\"`\">[]</code>, you&#39;re creating tons of thrown-away arrays instead of just not calling a callback","msgtype":"m.text"},"ts":1728439196937,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tRLhiAOmoEVewfIIP4olguXzqLpqDzWZcIofNWfTrd8"},
{"content":{"body":"when what is []?","m.mentions":{},"msgtype":"m.text"},"ts":1728439208752,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nKUmLG5uTQeylR9wEsivbKbt-Nidxjmqh0yl2cgNN4A"},
{"content":{"body":"but at least you don't have to call anything","m.mentions":{},"msgtype":"m.text"},"ts":1728439208878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eSF7im5MR8P1socGaM469pqSivXe0Abg9R5gH9iPSns"},
{"content":{"body":"in Iterator.concat the throwaway arrays were supposed to be nbd","m.mentions":{},"msgtype":"m.text"},"ts":1728439219680,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5kNuV0i19GCn-B3JOcuV-cXx_tzJoH4iKwsUo1l24Zg"},
{"content":{"body":"> <@shuyuguo:matrix.org> when what is []?\n\nwhen that's the default value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nKUmLG5uTQeylR9wEsivbKbt-Nidxjmqh0yl2cgNN4A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>when what is []?</blockquote></mx-reply>when that's the default value","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nKUmLG5uTQeylR9wEsivbKbt-Nidxjmqh0yl2cgNN4A"}},"msgtype":"m.text"},"ts":1728439220117,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8Xc6em-uUwOb0EN1X2JIVYtOuBwPiN3Ey75bGYYq2Fk"},
{"content":{"body":"people who care about perf already know to lift regexps outside of loops for example, this is the same thing","msgtype":"m.text"},"ts":1728439224435,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iVBVs3qjkV5puZVMDOaeWE1N5URyVcx1Gf5RDe3uAMc"},
{"content":{"body":"> <@ljharb:matrix.org> because sometimes the default is expensive to compute.\n\nBut current `map.set` has similar issue?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ls8ow2aY-BRP9G9Jiiywl-TTJjB6v9X0GqTfvWqaxxo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>because sometimes the default is expensive to compute.</blockquote></mx-reply>But current <code>map.set</code> has similar issue?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ls8ow2aY-BRP9G9Jiiywl-TTJjB6v9X0GqTfvWqaxxo"}},"msgtype":"m.text"},"ts":1728439227647,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$J9PocCx8oAmQ_idsRbwhLTAdjhgaOOp5UGTRO8EZE6Q"},
{"content":{"body":"if the default value is [], presumably you want a different empty array?","m.mentions":{},"msgtype":"m.text"},"ts":1728439229954,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E_0LYSjyk9MT4HQiP2WXlJZ113qqnB7RaHpxmyXY7xQ"},
{"content":{"body":"> <@haxjs:matrix.org> But current `map.set` has similar issue?\n\ncurrently you'd have to do your own has/get/set, and the set would be conditionally evaluated, so it'd always be the same as a callback (or better)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J9PocCx8oAmQ_idsRbwhLTAdjhgaOOp5UGTRO8EZE6Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>But current <code>map.set</code> has similar issue?</blockquote></mx-reply>currently you'd have to do your own has/get/set, and the set would be conditionally evaluated, so it'd always be the same as a callback (or better)","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J9PocCx8oAmQ_idsRbwhLTAdjhgaOOp5UGTRO8EZE6Q"}},"msgtype":"m.text"},"ts":1728439255533,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cyt3LOoIEXzTTyAk1oUkz3ytmWiKqi345TF7bttk0DU"},
{"content":{"body":"> <@ljharb:matrix.org> in Iterator.concat the throwaway arrays were supposed to be nbd\n\nwe're talking about vastly different numbers of throwaway arrays here","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%245kNuV0i19GCn-B3JOcuV-cXx_tzJoH4iKwsUo1l24Zg\">In reply to</a><a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb:matrix.org</a><br />in Iterator.concat the throwaway arrays were supposed to be nbd</blockquote></mx-reply>we&#39;re talking about vastly different numbers of throwaway arrays here","m.relates_to":{"m.in_reply_to":{"event_id":"$5kNuV0i19GCn-B3JOcuV-cXx_tzJoH4iKwsUo1l24Zg"}},"msgtype":"m.text"},"ts":1728439261725,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$EVn-18SZqbgFrtkwm-TLP-l2YhUnoxpkVKojNmFLSUI"},
{"content":{"body":"> <@shuyuguo:matrix.org> if the default value is [], presumably you want a different empty array?\n\nmap.setdefault(key, []) already give u a diff empty array?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E_0LYSjyk9MT4HQiP2WXlJZ113qqnB7RaHpxmyXY7xQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if the default value is [], presumably you want a different empty array?</blockquote></mx-reply>map.setdefault(key, []) already give u a diff empty array?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E_0LYSjyk9MT4HQiP2WXlJZ113qqnB7RaHpxmyXY7xQ"}},"msgtype":"m.text"},"ts":1728439267954,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$bm_EAXFRildUzqIzMMg0Ogr_FnYhSqoE8ko7kEk6nZw"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1728439279518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3o42345OWAXL0bIQwDdS7C1geB1em9h1qElq-sFs8qc"},
{"content":{"body":"that's why i don't understand michael's point","m.mentions":{},"msgtype":"m.text"},"ts":1728439288161,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zJzQNFXRGfBfQ6izSe53UuAzs5LAc6SflYrh_JAcVjQ"},
{"content":{"body":"insert should be the value and use a getter for the function use case in emplace imo","m.mentions":{},"msgtype":"m.text"},"ts":1728439288726,"senderName":"Eli Grey","senderId":"@eli-grey:matrix.org","id":"$1ktYKWlZ13pOZhMkOArFvjzJf2ZSeV9af_Z12c1jXH8"},
{"content":{"body":"you _can't_ have a single [] be the default","format":"org.matrix.custom.html","formatted_body":"you <em>can't</em> have a single [] be the default","m.mentions":{},"msgtype":"m.text"},"ts":1728439295897,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mjvv84KZDUmtiOvfaITBnrrWJm8I7Avv-PAIBbaWr4I"},
{"content":{"body":"unless you have copy-on-write []","m.mentions":{},"msgtype":"m.text"},"ts":1728439299783,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ie5EXri-8iKSjmT3PttBT1w4SZmz4TjySAUqtH6-k20"},
{"content":{"body":"@shuyuguo:matrix.org I'm talking about doing this operation in a loop","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> I&#39;m talking about doing this operation in a loop","msgtype":"m.text"},"ts":1728439319833,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$duuMcFwQx1p07uhjV_-L6eCpXETFJzDvXXgMufpvDuU"},
{"content":{"body":"how can you lift out a default [] out of a loop?","m.mentions":{},"msgtype":"m.text"},"ts":1728439334748,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dGrDsBVEqpBQfNDB-PjVpoFciGho1PkHBo0ac5uTMaM"},
{"content":{"body":"you want all the default empty arrays to be the literal same array object, which can be mutated?","m.mentions":{},"msgtype":"m.text"},"ts":1728439345222,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TLbt4ZdBVdaoDVEF5ZjBp7Lwohk4_zSK84cMjHqnQ7w"},
{"content":{"body":"@shuyuguo:matrix.org you can't, that's the point, you make it a callback and lift that out","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> you can&#39;t, that&#39;s the point, you make it a callback and lift that out","msgtype":"m.text"},"ts":1728439355768,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PPGeF13-A8yfiI3BmbZ0ebtx0yOni2KRTpuXnsDgCIY"},
{"content":{"body":"wat","m.mentions":{},"msgtype":"m.text"},"ts":1728439363875,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8oZI6Ztm6xm7x_CYayX-M3p2T5XygjzpK0ahVYPr1MI"},
{"content":{"body":"why would you make a callback at all","m.mentions":{},"msgtype":"m.text"},"ts":1728439368806,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7U7OYhfmTocSIHrorNaf9WA7R9mlV6Q6fUmnNJBKPeY"},
{"content":{"body":"setdefault(k, []) does the right thing?","m.mentions":{},"msgtype":"m.text"},"ts":1728439375846,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eZW0vuI_804oZaW5E8mTlsoNQ-bVhsmHhL38sWtX8Rk"},
{"content":{"body":"@shuyuguo:matrix.org it would be more performant","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> it would be more performant","msgtype":"m.text"},"ts":1728439407696,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SWu5wCAfqtnerPNkX7Ke4J08G-Zph-9C1jGr2pAVNd4"},
{"content":{"body":"_what_","format":"org.matrix.custom.html","formatted_body":"<em>what</em>","m.mentions":{},"msgtype":"m.text"},"ts":1728439414289,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wDO8sWQLq70SazcHqrJCCaCIFZ_YlUa4vp8DleVSshQ"},
{"content":{"body":"(joke) I guess we have to materialize ParseNode.\n\n```\n.emplace(key, complexExpression)\nfunction emplace(key, value) { if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n```","format":"org.matrix.custom.html","formatted_body":"<p>(joke) I guess we have to materialize ParseNode.</p><pre><code>.emplace(key, complexExpression)\nfunction emplace(key, value) { if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n</code></pre>","msgtype":"m.text"},"ts":1728439428999,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$uC54OWg2oUp9prADwC5NlsgBOmslfYwZP-EgmveN4E8"},
{"content":{"body":"are you saying doing a call on a const function that returns [] is faster than directly passing in []?","m.mentions":{},"msgtype":"m.text"},"ts":1728439432005,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KVoymhX1h9QhcnQy87l9bUBt6PfTxjCqyDadlXuoKx0"},
{"content":{"body":"a shared callback that is almost never called is more performant than tons of empty arrays that end up getting GC'd","msgtype":"m.text"},"ts":1728439435959,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0VMyLQsrVSAxmwsWFRxHDoGeVZGilR53uog0clWKQak"},
{"content":{"body":"* (joke) I guess we have to materialize ParseNode.\n\n```\n.emplace(key, complexExpression)\nfunction emplace(key, value) {if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n```","format":"org.matrix.custom.html","formatted_body":"* <p>(joke) I guess we have to materialize ParseNode.</p><pre><code>.emplace(key, complexExpression)\nfunction emplace(key, value) {if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n</code></pre>","m.new_content":{"body":"(joke) I guess we have to materialize ParseNode.\n\n```\n.emplace(key, complexExpression)\nfunction emplace(key, value) {if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n```","format":"org.matrix.custom.html","formatted_body":"<p>(joke) I guess we have to materialize ParseNode.</p><pre><code>.emplace(key, complexExpression)\nfunction emplace(key, value) {if (!this.has(key)) this.set(key, eval value); return this.get(key) }\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$uC54OWg2oUp9prADwC5NlsgBOmslfYwZP-EgmveN4E8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728439439080,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4ayaeFXsLei3915V4dAxpX2bCl_dF3-_NY7XNQDjd0M"},
{"content":{"body":"* (joke) I guess we have to materialize ParseNode.\n\n```js\n.emplace(key, complexExpression)\nfunction emplace(key, value) {\n    if (!this.has(key)) this.set(key, eval value);\n    return this.get(key)\n}\n```","format":"org.matrix.custom.html","formatted_body":"* <p>(joke) I guess we have to materialize ParseNode.</p><pre><code class=\"language-js\">.emplace(key, complexExpression)\nfunction emplace(key, value) {\n    if (!this.has(key)) this.set(key, eval value);\n    return this.get(key)\n}\n</code></pre>","m.new_content":{"body":"(joke) I guess we have to materialize ParseNode.\n\n```js\n.emplace(key, complexExpression)\nfunction emplace(key, value) {\n    if (!this.has(key)) this.set(key, eval value);\n    return this.get(key)\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>(joke) I guess we have to materialize ParseNode.</p><pre><code class=\"language-js\">.emplace(key, complexExpression)\nfunction emplace(key, value) {\n    if (!this.has(key)) this.set(key, eval value);\n    return this.get(key)\n}\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$uC54OWg2oUp9prADwC5NlsgBOmslfYwZP-EgmveN4E8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728439452345,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eoZM0j4dqZpMt9G7BkqLmEP8id9tARiCVjgnfAOY_80"},
{"content":{"body":"oh, i see, i missed the assumption that it's rarely a hit","m.mentions":{},"msgtype":"m.text"},"ts":1728439453505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HmICNU0nSTNUfoXOfZKjN-kZ3SYBFTbzwRwgc2ZK_po"},
{"content":{"body":"or, rarely a miss","m.mentions":{},"msgtype":"m.text"},"ts":1728439460704,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZULVcj5ZQzdvKprDEeFcDO0DLgfvNsgVLuIxr_DEBSo"},
{"content":{"body":"that depends on whether your loop mostly hits or mostly misses, right?","m.mentions":{},"msgtype":"m.text"},"ts":1728439480852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$olXGHonrzGn_Qg4gPZ0yTtUTHo7MQIP-f6uMxcnoCgo"},
{"content":{"body":"that's the benefit of using a callback in the API as well; that the default fn would almost never be called, for when it's expensive","m.mentions":{},"msgtype":"m.text"},"ts":1728439487042,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4ob_J_cv-2UhjbHGBiVMjpqv0J_s7Blp2YiLAWqpLMs"},
{"content":{"body":"correct @shuyuguo:matrix.org","format":"org.matrix.custom.html","formatted_body":"correct <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a>","msgtype":"m.text"},"ts":1728439491436,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4f1_S5slI3_B4eUROEdiysEZN1Xvp9-3uiTebLcVQ80"},
{"content":{"body":"but a callback version would be more expensive when it is mostly misses","m.mentions":{},"msgtype":"m.text"},"ts":1728439504947,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZHabza0gn7exqXxkHH8dau24ZoRwcV6Vbv3MDBKptes"},
{"content":{"body":"so it 'just depends'","m.mentions":{},"msgtype":"m.text"},"ts":1728439509412,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r-Eg4aL1LPGodztplGKGSzrjZNeUy02RzP2K-fKpv-o"},
{"content":{"body":"well, what react do is good, but bad","msgtype":"m.text"},"ts":1728439509948,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Lk28EHOqQf9V6OsU5Eivw0T9U6u5A2gZWXLuqJRpJH8"},
{"content":{"body":"they call it when it is a function","msgtype":"m.text"},"ts":1728439522248,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$IEXgwQ8uU1EB42TSSk8dKq4db2kW7J1KsPZOizRiUfw"},
{"content":{"body":"Is it not possible to do both? ","format":"org.matrix.custom.html","formatted_body":"Is it not possible to do both?","msgtype":"m.text"},"ts":1728439523218,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$DqvAn6w0sAzcLjC-KNyUqMis55y_H-QvEjnNImW-XM0"},
{"content":{"body":"@ljharb:matrix.org they're worried that people will write the callback inline so instead we'll be creating tons of fresh functions that need to get GC'd","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb</a> they&#39;re worried that people will write the callback inline so instead we&#39;ll be creating tons of fresh functions that need to get GC&#39;d","msgtype":"m.text"},"ts":1728439529259,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ddGA0of7eaSTwV2gbJn782qYoXzDM6MNv9caKhX5SDI"},
{"content":{"body":"> <@anthonybullard:matrix.org> Is it not possible to do both? \n\nlike react do to `useState`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DqvAn6w0sAzcLjC-KNyUqMis55y_H-QvEjnNImW-XM0\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Is it not possible to do both?</blockquote></mx-reply>like react do to <code>useState</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$DqvAn6w0sAzcLjC-KNyUqMis55y_H-QvEjnNImW-XM0"}},"msgtype":"m.text"},"ts":1728439536503,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jepRuhQ3ss124gwYH64KG7gCZ3rpJziZwXF8Qe9sz6U"},
{"content":{"body":"both is good","m.mentions":{},"msgtype":"m.text"},"ts":1728439544502,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5C88jwmAOu0PnDnpmUX987vF_R3sp7mw3bW_08nDNlU"},
{"content":{"body":"most cases it's good, some cases it's footgun","msgtype":"m.text"},"ts":1728439546722,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w-sYnJTa4aDuMR8X9NOPzhk_ZMAVdYNjKnyHIVaEALM"},
{"content":{"body":"yeah i'm fine with both","m.mentions":{},"msgtype":"m.text"},"ts":1728439550612,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fcybkd0qGvZrS7BXMexUSKJeJOmm9ClacTbCAtOHa_0"},
{"content":{"body":"I can‚Äôt attend tonight, just following chat","msgtype":"m.text"},"ts":1728439552032,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$wWEWyd_0svpVb9OVQf5JhheXNUSZEQbOqD9KWXZyNCI"},
{"content":{"body":"I'm fine with both","msgtype":"m.text"},"ts":1728439559539,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$moxUQm7kHhAVXAy5nu0yIg4Ua4UBVOC395pA-WfQNFo"},
{"content":{"body":"both is fine too","m.mentions":{},"msgtype":"m.text"},"ts":1728439560985,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mc1t_hNna9VA6cFFwOorX50Jyvkckxp8fmY-xy0qlAo"},
{"content":{"body":"I guess I should say allow either","msgtype":"m.text"},"ts":1728439561835,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$jkvyfc9P8ZPFUFyHEqP98Za1pYVjE4lf-BB6t5p8kr8"},
{"content":{"body":"computeIfAbsentViaThisCallbackHere","m.mentions":{},"msgtype":"m.text"},"ts":1728439569945,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AVS9T2S18cy0rROAe78yJK6u_7bS5eMdv1dTBcb7_ks"},
{"content":{"body":"i've called it `getOrSetIfAbsent` before but that name is horrible","format":"org.matrix.custom.html","formatted_body":"i've called it <code>getOrSetIfAbsent</code> before but that name is horrible","m.mentions":{},"msgtype":"m.text"},"ts":1728439587181,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RQGFa6WAyt_nc8xo10iKkfWss1lbT9lcRlanEF_lY6I"},
{"content":{"body":"is that in Java‚Ñ¢Ô∏è 23?","msgtype":"m.text"},"ts":1728439605368,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QZSOcpYcIlVgAa4jmDhJnN6UigmLEH-7xAjSRjZvhg0"},
{"content":{"body":"I like `getOrInit` or `getOrInsert`","format":"org.matrix.custom.html","formatted_body":"I like <code>getOrInit</code> or <code>getOrInsert</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728439608106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$67Ytxe-50TbkRJ-3DcKloYV9qbI-80d_cskR0RyGDYc"},
{"content":{"body":"maybe getOrSetIfAbsentOrPresent","m.mentions":{},"msgtype":"m.text"},"ts":1728439612828,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6gxMQVLvZK1bM4-jFCDRxP7f500LrNin02PW4vigxBM"},
{"content":{"body":"the computed one is `computeIfAbsent` in java, which... works...","format":"org.matrix.custom.html","formatted_body":"the computed one is <code>computeIfAbsent</code> in java, which... works...","m.mentions":{},"msgtype":"m.text"},"ts":1728439622305,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$my8KEh1lJz7Sef6PM9n6_UJq46U5-NoyLA0iIwJ9wJE"},
{"content":{"body":" * the callback one is `computeIfAbsent` in java, which... works...","format":"org.matrix.custom.html","formatted_body":" * the callback one is <code>computeIfAbsent</code> in java, which... works...","m.mentions":{},"m.new_content":{"body":"the callback one is `computeIfAbsent` in java, which... works...","format":"org.matrix.custom.html","formatted_body":"the callback one is <code>computeIfAbsent</code> in java, which... works...","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$my8KEh1lJz7Sef6PM9n6_UJq46U5-NoyLA0iIwJ9wJE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728439627001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZhJen8VVRmJR2rPqkktVSUHU65-XglS2CjEjF8HXWco"},
{"content":{"body":"`getWhenHasOrSetFromCallbackAndFinallyGetAgain`","format":"org.matrix.custom.html","formatted_body":"<code>getWhenHasOrSetFromCallbackAndFinallyGetAgain</code>","msgtype":"m.text"},"ts":1728439639281,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$fxgBaVW7qp8fJoiBPn2t7bZp-0WgKqCbvmM3CNgQxRE"},
{"content":{"body":"I just meant the arg can be either a value or a function to return the value","msgtype":"m.text"},"ts":1728439657579,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$xp6GFrf9xn6kcxiVmLJNoFdNjxBaU9HLLZGuoirvSIk"},
{"content":{"body":"Obviously an issue if the value you want is a function","msgtype":"m.text"},"ts":1728439675870,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$I77hxugPLUxFegLA8rKGYgrNxx26bP8B0jT9GUYJXmA"},
{"content":{"body":"> <@anthonybullard:matrix.org> I just meant the arg can be either a value or a function to return the value\n\nyes, react do this and sometimes it's a footgun","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xp6GFrf9xn6kcxiVmLJNoFdNjxBaU9HLLZGuoirvSIk\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>I just meant the arg can be either a value or a function to return the value</blockquote></mx-reply>yes, react do this and sometimes it&#39;s a footgun","m.relates_to":{"m.in_reply_to":{"event_id":"$xp6GFrf9xn6kcxiVmLJNoFdNjxBaU9HLLZGuoirvSIk"}},"msgtype":"m.text"},"ts":1728439681273,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$BG_RxlGxE-3jH74UMwjOIq3U_UI633D-_A_rZedj4ZM"},
{"content":{"body":"oh, absolutely not that","m.mentions":{},"msgtype":"m.text"},"ts":1728439689784,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JdcjSLfDFoAFtcfVdMrrYM3YXogAVB1DKjxK04NTATs"},
{"content":{"body":"functions are valid values to store in a map","m.mentions":{},"msgtype":"m.text"},"ts":1728439696249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yacx4mcZcQ-3Re_QXRe-b-x0iWThvq28ftwSuTCyNY0"},
{"content":{"body":"java have both:`putIfAbsent` ( = python setdefault), `computeIfAbsent` is callback version.","format":"org.matrix.custom.html","formatted_body":"java have both:<code>putIfAbsent</code> ( = python setdefault), <code>computeIfAbsent</code> is callback version.","m.mentions":{},"msgtype":"m.text"},"ts":1728439699525,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$XVN41gllrb4-zzh2Q5nDqUKfQ4_STZjTPyCXIhZ9D4s"},
{"content":{"body":"But yeah emplace and emplaceWith","msgtype":"m.text"},"ts":1728439709482,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$69mp1T5CfBJtcgAWg54-nEkEhdzXCm2aRB1ooHoky1I"},
{"content":{"body":"Is better","msgtype":"m.text"},"ts":1728439713802,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$KqjNhyo2W08Kn3O3_aqR-M1vXNaloH9FQiAaRApSc_w"},
{"content":{"body":"> <@bakkot:matrix.org> functions are valid values to store in a map\n\nhIGh oRDeR functions obviously ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Yacx4mcZcQ-3Re_QXRe-b-x0iWThvq28ftwSuTCyNY0\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>functions are valid values to store in a map</blockquote></mx-reply>hIGh oRDeR functions obviously","m.relates_to":{"m.in_reply_to":{"event_id":"$Yacx4mcZcQ-3Re_QXRe-b-x0iWThvq28ftwSuTCyNY0"}},"msgtype":"m.text"},"ts":1728439718383,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aXXUfO8unJjoQGrbJEkdBPgJTTnIURwwZm_zhyXQ6Ys"},
{"content":{"body":"> <@anthonybullard:matrix.org> I just meant the arg can be either a value or a function to return the value\n\nWHY DO PEOPLE KEEP DOING THIS TO THEMSELVES?!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24xp6GFrf9xn6kcxiVmLJNoFdNjxBaU9HLLZGuoirvSIk\">In reply to</a><a href=\"https://matrix.to/#/%40anthonybullard%3Amatrix.org\">@anthonybullard:matrix.org</a><br />I just meant the arg can be either a value or a function to return the value</blockquote></mx-reply>WHY DO PEOPLE KEEP DOING THIS TO THEMSELVES?!","m.relates_to":{"m.in_reply_to":{"event_id":"$xp6GFrf9xn6kcxiVmLJNoFdNjxBaU9HLLZGuoirvSIk"}},"msgtype":"m.text"},"ts":1728439722264,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GtTiWOFrN8SHx0_IrXRDgbhNcuzKXl8bu1Xd_CdqLYA"},
{"content":{"body":"> <@michaelficarra:matrix.org> WHY DO PEOPLE KEEP DOING THIS TO THEMSELVES?!\n\nYeah I thought of this after the fact","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GtTiWOFrN8SHx0_IrXRDgbhNcuzKXl8bu1Xd_CdqLYA\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>WHY DO PEOPLE KEEP DOING THIS TO THEMSELVES?!</blockquote></mx-reply>Yeah I thought of this after the fact","m.relates_to":{"m.in_reply_to":{"event_id":"$GtTiWOFrN8SHx0_IrXRDgbhNcuzKXl8bu1Xd_CdqLYA"}},"msgtype":"m.text"},"ts":1728439743492,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Te-1Wb6SpZnNlGP5RnOA1JimYOEnfxffXk5cQct8I_Q"},
{"content":{"body":"when you're in react and `useState` value might be a function, you do `useState(() => fn)`","format":"org.matrix.custom.html","formatted_body":"when you're in react and <code>useState</code> value might be a function, you do <code>useState(() =&gt; fn)</code>","msgtype":"m.text"},"ts":1728439762423,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$O5O4A5fXIcqMBzN7MPuYidFbEtaMbTWwjs4TCN2ler4"},
{"content":{"body":"But other languages aren‚Äôt afraid of having separate methods/functions for value args and function args","msgtype":"m.text"},"ts":1728439795165,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$nswnefDrwTZjfhA5pv4VgCl7dBBHj1dohT3JRLLxtDM"},
{"content":{"body":"how do you like extractors","msgtype":"m.text"},"ts":1728439814588,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$tgIcKdd6IQCXhAzJejyyfYRd4nDVOa0trmmJO4qOIu8"},
{"content":{"body":"> <@haxjs:matrix.org> java have both:`putIfAbsent` ( = python setdefault), `computeIfAbsent` is callback version.\n\nI don't like `putIfAbsent` because it doesn't suggest that it gives you the current value in the case that it's present","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XVN41gllrb4-zzh2Q5nDqUKfQ4_STZjTPyCXIhZ9D4s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>java have both:<code>putIfAbsent</code> ( = python setdefault), <code>computeIfAbsent</code> is callback version.</blockquote></mx-reply>I don't like <code>putIfAbsent</code> because it doesn't suggest that it gives you the current value in the case that it's present","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XVN41gllrb4-zzh2Q5nDqUKfQ4_STZjTPyCXIhZ9D4s"}},"msgtype":"m.text"},"ts":1728439820506,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PpA04rjWz1raUDcuIM22YZ-9j9HQVUtOet_44zVxTc4"},
{"content":{"body":"`computeIfAbsent` doesn't really either but I guess it's more obviously going to return _something_ because \"compute\" suggests returning something","format":"org.matrix.custom.html","formatted_body":"<code>computeIfAbsent</code> doesn't really either but I guess it's more obviously going to return <em>something</em> because \"compute\" suggests returning something","m.mentions":{},"msgtype":"m.text"},"ts":1728439849987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FoqsdFuuqUgnK_gcYv4G7DgJE2Rsa6ZtocS9ABASZvU"},
{"content":{"body":"Go for instance has many doSomething(arg1, value) doSomethingFunc(arg1, fn) pairs","msgtype":"m.text"},"ts":1728439857670,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$f-Ojka9Gp8Xqy3u-q7jTa827NGKi_wQnY8-b93J6Iro"},
{"content":{"body":"in ruby i think you'd have it take a block vs take a function, but most langs don't have blocks like that iirc","m.mentions":{},"msgtype":"m.text"},"ts":1728439894772,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uTu7q_x9mgd6TO-HuICPjPeWQQGQVM1gP2XFBuIlmW4"},
{"content":{"body":"The naming doesn‚Äôt align obviously with ES style, but the pairing is fine and easy to grok","msgtype":"m.text"},"ts":1728439896708,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$LpK4kwmW9_m9UONAj3AS7cbAncusuETuiw_LppS2-Rw"},
{"content":{"body":"well naming is that hard, let's call it `Map.prototype['007ae09e-b0e5-4939-b6f0-210e46f70538']`","format":"org.matrix.custom.html","formatted_body":"well naming is that hard, let's call it <code>Map.prototype['007ae09e-b0e5-4939-b6f0-210e46f70538']</code>","msgtype":"m.text"},"ts":1728439920271,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QSoNpU0Fynq1Xmc2kRziKsy8Jo0duvdP_a16frawCiY"},
{"content":{"body":"getters are good","m.mentions":{},"msgtype":"m.text"},"ts":1728439950465,"senderName":"Eli Grey","senderId":"@eli-grey:matrix.org","id":"$BPl2EmjXswSOpcLdZ9irR1KqG437P-aYRQWhoojdXTc"},
{"content":{"body":"setDefault and setDefaultWith","msgtype":"m.text"},"ts":1728439963017,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$lSCKWg1TuvdIhH6lxInmrieULDok55LfPVGfru8UciY"},
{"content":{"body":" * getters are good for this imo","m.mentions":{},"m.new_content":{"body":"getters are good for this imo","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BPl2EmjXswSOpcLdZ9irR1KqG437P-aYRQWhoojdXTc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728439977326,"senderName":"Eli Grey","senderId":"@eli-grey:matrix.org","id":"$Z2hPlEpvkweAJdkBEDP_C0MCeKG-wcvuEUmMAkzeJIE"},
{"content":{"body":" * getters are good for this","m.mentions":{},"m.new_content":{"body":"getters are good for this","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BPl2EmjXswSOpcLdZ9irR1KqG437P-aYRQWhoojdXTc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728439979114,"senderName":"Eli Grey","senderId":"@eli-grey:matrix.org","id":"$T1DyqZN5qMiLCMtrm_y6axVrT05xj_rY4dTKoLxGQSE"},
{"content":{"body":"> <@jackworks:matrix.org> well naming is that hard, let's call it `Map.prototype['007ae09e-b0e5-4939-b6f0-210e46f70538']`\n\nadvantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QSoNpU0Fynq1Xmc2kRziKsy8Jo0duvdP_a16frawCiY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>well naming is that hard, let's call it <code>Map.prototype['007ae09e-b0e5-4939-b6f0-210e46f70538']</code></blockquote></mx-reply>advantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QSoNpU0Fynq1Xmc2kRziKsy8Jo0duvdP_a16frawCiY"}},"msgtype":"m.text"},"ts":1728439983081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dODCEpcF67yFjxRnDDnoTKYRk7o5gT7sK3Z3hM5GtCA"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1728439995253,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BgSHJeMl1mLdYIao7H-S9lDvDzvNwxmR9-b8Gj6lrf0"},
{"content":{"body":"> <@bakkot:matrix.org> advantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using\n\nPave the cow paths indeed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24dODCEpcF67yFjxRnDDnoTKYRk7o5gT7sK3Z3hM5GtCA\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>advantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using</blockquote></mx-reply>Pave the cow paths indeed","m.relates_to":{"m.in_reply_to":{"event_id":"$dODCEpcF67yFjxRnDDnoTKYRk7o5gT7sK3Z3hM5GtCA"}},"msgtype":"m.text"},"ts":1728440001354,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$8WH532r5KHv7OvMQO6-kSPApruU5uqoMe_b5pdletKE"},
{"content":{"body":"\"delegated bikeshedding\"","m.mentions":{},"msgtype":"m.text"},"ts":1728440005651,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$qP8zj3hnNnsPbf8fgHiV0yu_Qu9dFwEo_YvItDCVQPc"},
{"content":{"body":"\"the masses have spoken\"","m.mentions":{},"msgtype":"m.text"},"ts":1728440021090,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$h62w-RJ8xEhptPuBG7XlVp_icPkljjLI6TTsBj8hOOU"},
{"content":{"body":"I think we have a new standard for APIs we can‚Äôt name","msgtype":"m.text"},"ts":1728440036529,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Ak0oe4tIb2QamKK3QUZwvjP02k3XrhOY5CDNlnG5SRE"},
{"content":{"body":"> <@bakkot:matrix.org> advantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using\n\nthis reminds me, does delegate investigated similar utilities on npm?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dODCEpcF67yFjxRnDDnoTKYRk7o5gT7sK3Z3hM5GtCA\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>advantage of this is that people will inevitably alias that string to something useful, and then we can just look at whatever name people are actually using</blockquote></mx-reply>this reminds me, does delegate investigated similar utilities on npm?","m.relates_to":{"m.in_reply_to":{"event_id":"$dODCEpcF67yFjxRnDDnoTKYRk7o5gT7sK3Z3hM5GtCA"}},"msgtype":"m.text"},"ts":1728440038215,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VjNYVk0nfx7DeuLIURjHxey9NAkxdStzkuPEIP2a-yM"},
{"content":{"body":"Someone will still be mad about the UUID we chose","msgtype":"m.text"},"ts":1728440053860,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$cos4ipZpgHW0qYjbUpKcV6ExNce09NqZg5fxhr-Nhxg"},
{"content":{"body":"> <@bakkot:matrix.org> `computeIfAbsent` doesn't really either but I guess it's more obviously going to return _something_ because \"compute\" suggests returning something\n\nSo it's just naming issue? To be honest, in many cases I always expect `Map.set` would return the value instead of the map itself ü§® ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FoqsdFuuqUgnK_gcYv4G7DgJE2Rsa6ZtocS9ABASZvU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>computeIfAbsent</code> doesn't really either but I guess it's more obviously going to return <em>something</em> because \"compute\" suggests returning something</blockquote></mx-reply>So it's just naming issue? To be honest, in many cases I always expect <code>Map.set</code> would return the value instead of the map itself ü§®","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FoqsdFuuqUgnK_gcYv4G7DgJE2Rsa6ZtocS9ABASZvU"}},"msgtype":"m.text"},"ts":1728440091637,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$sWJ5-vcqxZYD8bf9cBbatJCKyuR-rCvKkdnb3xbC0Cg"},
{"content":{"body":"> <@jackworks:matrix.org> this reminds me, does delegate investigated similar utilities on npm?\n\nI think people mostly just do this pattern inline rather than rely on an npm package for it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24VjNYVk0nfx7DeuLIURjHxey9NAkxdStzkuPEIP2a-yM\">In reply to</a><a href=\"https://matrix.to/#/%40jackworks%3Amatrix.org\">@jackworks:matrix.org</a><br />this reminds me, does delegate investigated similar utilities on npm?</blockquote></mx-reply>I think people mostly just do this pattern inline rather than rely on an npm package for it","m.relates_to":{"m.in_reply_to":{"event_id":"$VjNYVk0nfx7DeuLIURjHxey9NAkxdStzkuPEIP2a-yM"}},"msgtype":"m.text"},"ts":1728440115840,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6z5Mf8QKcmUYZtA8Je_PEDdxOfvMBBcHRlsxa_wGn1w"},
{"content":{"body":"> <@anthonybullard:matrix.org> Someone will still be mad about the UUID we chose\n\nmap['2024-10-09T02:14:57.500Z'](key, value)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cos4ipZpgHW0qYjbUpKcV6ExNce09NqZg5fxhr-Nhxg\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Someone will still be mad about the UUID we chose</blockquote></mx-reply>map[&#39;2024-10-09T02:14:57.500Z&#39;](key, value)","m.relates_to":{"m.in_reply_to":{"event_id":"$cos4ipZpgHW0qYjbUpKcV6ExNce09NqZg5fxhr-Nhxg"}},"msgtype":"m.text"},"ts":1728440134996,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3Gl4VMGXshEGkh2UEmeDUKk37BQklND_wRKh1pxOEaI"},
{"content":{"body":"> <@michaelficarra:matrix.org> I think people mostly just do this pattern inline rather than rely on an npm package for it\n\nyes I write this inline, but we have `is-odd` on npm so definitely we'll have emplace on npm","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6z5Mf8QKcmUYZtA8Je_PEDdxOfvMBBcHRlsxa_wGn1w\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I think people mostly just do this pattern inline rather than rely on an npm package for it</blockquote></mx-reply>yes I write this inline, but we have <code>is-odd</code> on npm so definitely we'll have emplace on npm","m.relates_to":{"m.in_reply_to":{"event_id":"$6z5Mf8QKcmUYZtA8Je_PEDdxOfvMBBcHRlsxa_wGn1w"}},"msgtype":"m.text"},"ts":1728440159512,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NHb90PnyYU2eJlQP8z0kalzWzvNg6faXwv8lYAaVnWY"},
{"content":{"body":"> <@ljharb:matrix.org> in ruby i think you'd have it take a block vs take a function, but most langs don't have blocks like that iirc\n\nReally hope JS can have block. Does \"Block param\" proposal still alive?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uTu7q_x9mgd6TO-HuICPjPeWQQGQVM1gP2XFBuIlmW4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>in ruby i think you&#39;d have it take a block vs take a function, but most langs don&#39;t have blocks like that iirc</blockquote></mx-reply>Really hope JS can have block. Does \"Block param\" proposal still alive?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uTu7q_x9mgd6TO-HuICPjPeWQQGQVM1gP2XFBuIlmW4"}},"msgtype":"m.text"},"ts":1728440167794,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$7NzN0PZe4Nap8dyMDPCySSf3FnCEo47GkYg1BqmQh3E"},
{"content":{"body":"not that i know of","m.mentions":{},"msgtype":"m.text"},"ts":1728440176708,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kAnCJ8MkCpdlTIAtmkLSJPFZcJwIjMHbJxcrzsp2Sug"},
{"content":{"body":"> <@haxjs:matrix.org> Really hope JS can have block. Does \"Block param\" proposal still alive?\n\nrealize a block is also a kind of \"function\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7NzN0PZe4Nap8dyMDPCySSf3FnCEo47GkYg1BqmQh3E\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Really hope JS can have block. Does \"Block param\" proposal still alive?</blockquote></mx-reply>realize a block is also a kind of &quot;function&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$7NzN0PZe4Nap8dyMDPCySSf3FnCEo47GkYg1BqmQh3E"}},"msgtype":"m.text"},"ts":1728440203865,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aA3imsMFdlcDMiTqc125R8bmfC_b7VDxDMFgnAV8ZDI"},
{"content":{"body":"it contains context and can be executed right?","msgtype":"m.text"},"ts":1728440216164,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F9QX21SgBZduqa5JQQVXyjYdzcXKmKqMi1uZdS4kWKc"},
{"content":{"body":"> <@haxjs:matrix.org> Really hope JS can have block. Does \"Block param\" proposal still alive?\n\nNeither a ruby or smalltalk guy, what‚Äôs the advantage of blocks?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%247NzN0PZe4Nap8dyMDPCySSf3FnCEo47GkYg1BqmQh3E\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Really hope JS can have block. Does \"Block param\" proposal still alive?</blockquote></mx-reply>Neither a ruby or smalltalk guy, what‚Äôs the advantage of blocks?","m.relates_to":{"m.in_reply_to":{"event_id":"$7NzN0PZe4Nap8dyMDPCySSf3FnCEo47GkYg1BqmQh3E"}},"msgtype":"m.text"},"ts":1728440221313,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$-xsro1p_b-PyhBc-PMdU6FEYvyWH6zwKJUSOlDChQPQ"},
{"content":{"body":"> <@anthonybullard:matrix.org> Neither a ruby or smalltalk guy, what‚Äôs the advantage of blocks?\n\nIMO mostly syntax sugar, may look like\n\n```js\nx.map { it + 1 }\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-xsro1p_b-PyhBc-PMdU6FEYvyWH6zwKJUSOlDChQPQ\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Neither a ruby or smalltalk guy, what‚Äôs the advantage of blocks?</blockquote></mx-reply><p>IMO mostly syntax sugar, may look like</p><pre><code class=\"language-js\">x.map { it + 1 }\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$-xsro1p_b-PyhBc-PMdU6FEYvyWH6zwKJUSOlDChQPQ"}},"msgtype":"m.text"},"ts":1728440286912,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wVBLL3xpfJhxcyFbXfOKZocIF2Upr7sBBxC5GOD9UXU"},
{"content":{"body":"> <@jackworks:matrix.org> IMO mostly syntax sugar, may look like\n> \n> ```js\n> x.map { it + 1 }\n> ```\n\nAh shorthand a la Kotlin, Scala, etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24wVBLL3xpfJhxcyFbXfOKZocIF2Upr7sBBxC5GOD9UXU\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>IMO mostly syntax sugar, may look like</p><pre><code class=\"language-js\">x.map { it + 1 }\n</code></pre></blockquote></mx-reply>Ah shorthand a la Kotlin, Scala, etc","m.relates_to":{"m.in_reply_to":{"event_id":"$wVBLL3xpfJhxcyFbXfOKZocIF2Upr7sBBxC5GOD9UXU"}},"msgtype":"m.text"},"ts":1728440323413,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$-YhxB3dQOXo4dMDQzbVZg_js2bJUjBv53Z6ERQzJwQw"},
{"content":{"body":"but it doesn't have a function stack frame/overhead","m.mentions":{},"msgtype":"m.text"},"ts":1728440477396,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HlYkTRvnkWq5ynX2XsoF-MjKrlBge0EQsvxHZnMWia8"},
{"content":{"body":" * but it doesn't have a function stack frame/overhead, ideally","m.mentions":{},"m.new_content":{"body":"but it doesn't have a function stack frame/overhead, ideally","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HlYkTRvnkWq5ynX2XsoF-MjKrlBge0EQsvxHZnMWia8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728440481266,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K0pFSgrRZ_oE19yHW3WTA2C7hs-ZSspwASPsG-pIePg"},
{"content":{"body":"The difference between the arrow function and real block may be the real block might support non-local jump (I believe block param proposal has the issue to discuss that, also do expression proposal)","m.mentions":{},"msgtype":"m.text"},"ts":1728440484575,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$18Cukt47FRtAZk79_cLRiGbc9NvRatuFj6RMD34G7gA"},
{"content":{"body":"> <@ljharb:matrix.org> but it doesn't have a function stack frame/overhead, ideally\n\nHow do you close over then?  Or can it not?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24HlYkTRvnkWq5ynX2XsoF-MjKrlBge0EQsvxHZnMWia8\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but it doesn't have a function stack frame/overhead, ideally</blockquote></mx-reply>How do you close over then?  Or can it not?","m.relates_to":{"m.in_reply_to":{"event_id":"$HlYkTRvnkWq5ynX2XsoF-MjKrlBge0EQsvxHZnMWia8"}},"msgtype":"m.text"},"ts":1728440565106,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$lQRN_H-2FCAhLhn_0Jkl1GJQle3RhN8jyyPlDh8iu3c"},
{"content":{"body":"it does close over things, true","m.mentions":{},"msgtype":"m.text"},"ts":1728440582273,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GZXvJ6FewLXHNpPzh-URHrDGBdzsTY4TLkf02H1a2oA"},
{"content":{"body":"> <@haxjs:matrix.org> The difference between the arrow function and real block may be the real block might support non-local jump (I believe block param proposal has the issue to discuss that, also do expression proposal)\n\nnon-local jump sound worse","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$18Cukt47FRtAZk79_cLRiGbc9NvRatuFj6RMD34G7gA\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>The difference between the arrow function and real block may be the real block might support non-local jump (I believe block param proposal has the issue to discuss that, also do expression proposal)</blockquote></mx-reply>non-local jump sound worse","m.relates_to":{"m.in_reply_to":{"event_id":"$18Cukt47FRtAZk79_cLRiGbc9NvRatuFj6RMD34G7gA"}},"msgtype":"m.text"},"ts":1728440605066,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QftZoKl_D6zM_uomT60plwlLna3OwGMRONsNkL-Aus4"},
{"content":{"body":"In Kotlin { it + 1 } just desugars to (X) -> X + 1","format":"org.matrix.custom.html","formatted_body":"In Kotlin { it + 1 } just desugars to (X) -&gt; X + 1","msgtype":"m.text"},"ts":1728440643935,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$VydTdRsjJ3sAdr8LKizMGb5V9-mk2DeSSmrRSOe_Dm4"},
{"content":{"body":"> <@jackworks:matrix.org> non-local jump sound worse\n\ntell that to the people who want do expressions to have it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QftZoKl_D6zM_uomT60plwlLna3OwGMRONsNkL-Aus4\">In reply to</a><a href=\"https://matrix.to/#/%40jackworks%3Amatrix.org\">@jackworks:matrix.org</a><br />non-local jump sound worse</blockquote></mx-reply>tell that to the people who want do expressions to have it","m.relates_to":{"m.in_reply_to":{"event_id":"$QftZoKl_D6zM_uomT60plwlLna3OwGMRONsNkL-Aus4"}},"msgtype":"m.text"},"ts":1728440681029,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fQ20tfemVeckSILzNVejonyh16FKGEJIivKqLFuny_U"},
{"content":{"body":"huh apparently safari tech preview is already shipping Math.sumPrecise, nice","m.mentions":{},"msgtype":"m.text"},"ts":1728440711887,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rA_tPQfcNknpzhgzWnQyOvgUHhWLn7NpeIpLfYzR_gs"},
{"content":{"body":"unfortunately a port of my dumb polyfill to C++ instead of something faster","m.mentions":{},"msgtype":"m.text"},"ts":1728440721387,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$97cb4XHdZW0ECtos-QLDioIpSSAsSHhvRFLLzs_Bfyk"},
{"content":{"body":"> <@michaelficarra:matrix.org> tell that to the people who want do expressions to have it\n\nI also against do expression with `return/break/continue`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fQ20tfemVeckSILzNVejonyh16FKGEJIivKqLFuny_U\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>tell that to the people who want do expressions to have it</blockquote></mx-reply>I also against do expression with <code>return/break/continue</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$fQ20tfemVeckSILzNVejonyh16FKGEJIivKqLFuny_U"}},"msgtype":"m.text"},"ts":1728440748247,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$_PSsmiuR939Q7x0wuzKprabg5DSiGK0SIGWEJvTVwFM"},
{"content":{"body":"> <@jackworks:matrix.org> non-local jump sound worse\n\nmaybe i am wrong about that. I mean something like `a.map {  if (it != null) compute(it); else break }`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QftZoKl_D6zM_uomT60plwlLna3OwGMRONsNkL-Aus4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>non-local jump sound worse</blockquote></mx-reply>maybe i am wrong about that. I mean something like <code>a.map {  if (it != null) compute(it); else break }</code>","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QftZoKl_D6zM_uomT60plwlLna3OwGMRONsNkL-Aus4"}},"msgtype":"m.text"},"ts":1728440759605,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$-7OE0NdJYoMU0SCLay1p473zK14nxEYx8viJZqh_Ea0"},
{"content":{"body":"> <@jackworks:matrix.org> I also against do expression with `return/break/continue`\n\nBut it's useful in many cases.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_PSsmiuR939Q7x0wuzKprabg5DSiGK0SIGWEJvTVwFM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I also against do expression with <code>return/break/continue</code></blockquote></mx-reply>But it's useful in many cases.","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_PSsmiuR939Q7x0wuzKprabg5DSiGK0SIGWEJvTVwFM"}},"msgtype":"m.text"},"ts":1728440776080,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$rOjxfEMNG3fBiQxCDMFl5LDm2_9PDFzeOTMKZGENUf8"},
{"content":{"body":"> <@bakkot:matrix.org> unfortunately a port of my dumb polyfill to C++ instead of something faster\n\n(apparently the library I linked fails some of my tests; I'll need to try it and see if it can be fixed)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$97cb4XHdZW0ECtos-QLDioIpSSAsSHhvRFLLzs_Bfyk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>unfortunately a port of my dumb polyfill to C++ instead of something faster</blockquote></mx-reply>(apparently the library I linked fails some of my tests; I'll need to try it and see if it can be fixed)","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$97cb4XHdZW0ECtos-QLDioIpSSAsSHhvRFLLzs_Bfyk"}},"msgtype":"m.text"},"ts":1728440781545,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m_uS3L6zp3g5PCLxO78E88cyAXyoh8GSLX35AhrT9Xs"},
{"content":{"body":"> <@jackworks:matrix.org> I also against do expression with `return/break/continue`\n\nyes but unfortunately there's people who are adamant that it allow them","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_PSsmiuR939Q7x0wuzKprabg5DSiGK0SIGWEJvTVwFM\">In reply to</a><a href=\"https://matrix.to/#/%40jackworks%3Amatrix.org\">@jackworks:matrix.org</a><br />I also against do expression with <code>return/break/continue</code></blockquote></mx-reply>yes but unfortunately there&#39;s people who are adamant that it allow them","m.relates_to":{"m.in_reply_to":{"event_id":"$_PSsmiuR939Q7x0wuzKprabg5DSiGK0SIGWEJvTVwFM"}},"msgtype":"m.text"},"ts":1728440783453,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$66a_bi7Jbi_5tFJh_y0ih3rwNOmoPO4-dBJPtPzW1Fg"},
{"content":{"body":"also they don't have a fast-path for \"array of all numbers\" which, I don't know if JSC has a concept of \"array of all numbers\"","m.mentions":{},"msgtype":"m.text"},"ts":1728440795779,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f66HBn2lTDCd5R0X6CAFbe4_oi9HZ6Mih5Qp0FnCcrM"},
{"content":{"body":"> <@haxjs:matrix.org> maybe i am wrong about that. I mean something like `a.map {  if (it != null) compute(it); else break }`\n\nSo you want a loop, but make it feel functional?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-7OE0NdJYoMU0SCLay1p473zK14nxEYx8viJZqh_Ea0\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>maybe i am wrong about that. I mean something like <code>a.map {  if (it != null) compute(it); else break }</code></blockquote></mx-reply>So you want a loop, but make it feel functional?","m.relates_to":{"m.in_reply_to":{"event_id":"$-7OE0NdJYoMU0SCLay1p473zK14nxEYx8viJZqh_Ea0"}},"msgtype":"m.text"},"ts":1728440819642,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$ZSQ4o1ZzMqc2smE7SzEk4YJw7iGNC-5_3NfFeq1lYnw"},
{"content":{"body":"(the proposal was designed to avoid any user code in the hot loop specifically so that you could have that optimization)","m.mentions":{},"msgtype":"m.text"},"ts":1728440825422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f6KKkhKr30RwR_mVVkAPh6rrfwxpHfmIvbMje-mKLGY"},
{"content":{"body":" * (sumPrecise was designed to avoid any user code in the hot loop specifically so that you could have that optimization)","m.mentions":{},"m.new_content":{"body":"(sumPrecise was designed to avoid any user code in the hot loop specifically so that you could have that optimization)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f6KKkhKr30RwR_mVVkAPh6rrfwxpHfmIvbMje-mKLGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728440837245,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XnerJHMZNMPOomNG1pqrPDcsIC1-0HuNj5hom0f4xqA"},
{"content":{"body":"this is a very good question and a very good answer","m.mentions":{},"msgtype":"m.text"},"ts":1728440842078,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2x8_R4nCJJipXF7Ea9hsIDDpX7kQl9Rq2XaQ2waj7jY"},
{"content":{"body":"> <@anthonybullard:matrix.org> So you want a loop, but make it feel functional?\n\nmore like \"you want reduce but you want to call it map\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ZSQ4o1ZzMqc2smE7SzEk4YJw7iGNC-5_3NfFeq1lYnw\">In reply to</a><a href=\"https://matrix.to/#/%40anthonybullard%3Amatrix.org\">@anthonybullard:matrix.org</a><br />So you want a loop, but make it feel functional?</blockquote></mx-reply>more like &quot;you want reduce but you want to call it map&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$ZSQ4o1ZzMqc2smE7SzEk4YJw7iGNC-5_3NfFeq1lYnw"}},"msgtype":"m.text"},"ts":1728440921227,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YIxOH1sa83yIJsOCKKBGD2JRqnnalcbkt7ulHplE2dc"},
{"content":{"body":"> <@anthonybullard:matrix.org> So you want a loop, but make it feel functional?\n\nAs I understand, block param proposal has the motivation to make JS more DSL friendly. As such motivate, I say yes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZSQ4o1ZzMqc2smE7SzEk4YJw7iGNC-5_3NfFeq1lYnw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>So you want a loop, but make it feel functional?</blockquote></mx-reply>As I understand, block param proposal has the motivation to make JS more DSL friendly. As such motivate, I say yes.","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZSQ4o1ZzMqc2smE7SzEk4YJw7iGNC-5_3NfFeq1lYnw"}},"msgtype":"m.text"},"ts":1728440971912,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$R9RLB0nN8o-u-kOkLlYNhNMG9_bjQLwMQcQqNfSs4Ng"},
{"content":{"body":"```js\nconst { id: Number(id) } = JSON.parse(str)\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const { id: Number(id) } = JSON.parse(str)\n</code></pre>","msgtype":"m.text"},"ts":1728441001554,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$4XaLAhzCeM_BuHZ_-O-0nTtcyGWZXD4kV8dkWf70RcQ"},
{"content":{"body":"ljharb: help me understand better stack trace there?  that sounds harder to debug","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: help me understand better stack trace there?  that sounds harder to debug","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1728441022936,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$JjqhqImE8o_YEXKuoJCUj1SodzvISGE8xkFAP2C1rc4"},
{"content":{"body":"currently it gives a stack trace that points to the validation function, and then below that, the validator callsite. there's a possibility for a clearer error imo that points to the function signature and references extractors in the messag","m.mentions":{},"msgtype":"m.text"},"ts":1728441066287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G7ty0X7IO8LLzuDfN_GIspzqrUUpZ4_7AERq06RzyqY"},
{"content":{"body":" * currently it gives a stack trace that points to the validation function, and then below that, the validator callsite. there's a possibility for a clearer error imo that points to the function signature and references extractors in the message","m.mentions":{},"m.new_content":{"body":"currently it gives a stack trace that points to the validation function, and then below that, the validator callsite. there's a possibility for a clearer error imo that points to the function signature and references extractors in the message","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$G7ty0X7IO8LLzuDfN_GIspzqrUUpZ4_7AERq06RzyqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728441067744,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gB6-rUj9_JTm-ZiEv2cyx7CoI480kVUNTsBdcmN7CLQ"},
{"content":{"body":"hmm","m.mentions":{},"msgtype":"m.text"},"ts":1728441081983,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$9ux7-G7HvFH_QXbsfITELP8DNVIFx3O3Ss2Sqk8zvaI"},
{"content":{"body":"> <@haxjs:matrix.org> As I understand, block param proposal has the motivation to make JS more DSL friendly. As such motivate, I say yes.\n\nI‚Äôm all for desugaring syntax, but I don‚Äôt want to get to F# computed expressions levels of complexity ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24R9RLB0nN8o-u-kOkLlYNhNMG9_bjQLwMQcQqNfSs4Ng\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>As I understand, block param proposal has the motivation to make JS more DSL friendly. As such motivate, I say yes.</blockquote></mx-reply>I‚Äôm all for desugaring syntax, but I don‚Äôt want to get to F# computed expressions levels of complexity","m.relates_to":{"m.in_reply_to":{"event_id":"$R9RLB0nN8o-u-kOkLlYNhNMG9_bjQLwMQcQqNfSs4Ng"}},"msgtype":"m.text"},"ts":1728441085372,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$wZV7_UyGOf0BNFndti3DInHgi0yjLpmGsVyNIaIiD6g"},
{"content":{"body":"> <@michaelficarra:matrix.org> more like \"you want reduce but you want to call it map\"\n\nIf only name issue, let's change `map` to something else , eg. `collect`? üòÇ ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YIxOH1sa83yIJsOCKKBGD2JRqnnalcbkt7ulHplE2dc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>more like \"you want reduce but you want to call it map\"</blockquote></mx-reply>If only name issue, let's change <code>map</code> to something else , eg. <code>collect</code>? üòÇ","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YIxOH1sa83yIJsOCKKBGD2JRqnnalcbkt7ulHplE2dc"}},"msgtype":"m.text"},"ts":1728441187791,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$xLnMOeh9h-ARJNymxmcc5SsZCchrF3wZr1tQlUC-iAE"},
{"content":{"body":"Is it just me (not on the call), but when the chat dies out suddenly, do you wonder if Matrix just tipped over or was there a break?","msgtype":"m.text"},"ts":1728441553378,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$cPROrwup3Eaf-YUbxmwvD_kyAyOzY02Qza7fthPT13Q"},
{"content":{"body":"or everyone is paying real close attention to the slides...","m.mentions":{},"msgtype":"m.text"},"ts":1728441675942,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$GncHMxzHAUI0XHIojByt_13u9woHRWjQXpj6W5Am3TE"},
{"content":{"body":"Syntactically correct TypeScript will emit JS even if the type checks fail.  (And sometimes it will emit JS even if the syntax is invalid.)","m.mentions":{},"msgtype":"m.text"},"ts":1728441688595,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$E61FR1xQhSrp-iQb2dBlXkfRtfy1X34Uw6cusya-4Uo"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1728441766019,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-Y2QNJJ8ErPk_uaD3hvihMB-6phPZ4r_GbjXdUGD26k"},
{"content":{"body":"but that doesn't conflict with what i'm asking","m.mentions":{},"msgtype":"m.text"},"ts":1728441774609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L2FTkbRz5kq1kKnHpoCYdh7n6FD2xo5r0EBhtdZFuew"},
{"content":{"body":"> <@robpalme:matrix.org> Syntactically correct TypeScript will emit JS even if the type checks fail.  (And sometimes it will emit JS even if the syntax is invalid.)\n\nyeah , last week someone tell me it's surprise to see `import {x} \"path\"` (missing `from`) still work in ts...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E61FR1xQhSrp-iQb2dBlXkfRtfy1X34Uw6cusya-4Uo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Syntactically correct TypeScript will emit JS even if the type checks fail.  (And sometimes it will emit JS even if the syntax is invalid.)</blockquote></mx-reply>yeah , last week someone tell me it's surprise to see <code>import {x} \"path\"</code> (missing <code>from</code>) still work in ts...","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E61FR1xQhSrp-iQb2dBlXkfRtfy1X34Uw6cusya-4Uo"}},"msgtype":"m.text"},"ts":1728442006493,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$ABVqkWHsqOLDp4rQayr_efXc-Ynpz2bhM_M0I673yFo"},
{"content":{"body":"My favourite is automatic brace insertion in ts.","m.mentions":{},"msgtype":"m.text"},"ts":1728442042347,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$lcUIkX6q1VnWePB-zkqPfsQom2T0upTmV9q0zc5ik10"},
{"content":{"body":"> <@robpalme:matrix.org> My favourite is automatic brace insertion in ts.\n\nwhat","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lcUIkX6q1VnWePB-zkqPfsQom2T0upTmV9q0zc5ik10?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>My favourite is automatic brace insertion in ts.</blockquote></mx-reply>what","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lcUIkX6q1VnWePB-zkqPfsQom2T0upTmV9q0zc5ik10"}},"msgtype":"m.text"},"ts":1728442056227,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$jMDZnWJT1nLKwNlo3HHGmeGvN7k8Yvfe8mGVvKhtS8U"},
{"content":{"body":"(sorry this is a distraction from current topic - it should be in TDZ)","m.mentions":{},"msgtype":"m.text"},"ts":1728442090092,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$cVxIiC9oSejuE2E21T3SRsVYdJGhjY3t2yYdTDl7iWU"},
{"content":{"body":"if you write\n\n```\nif (x) {\n//forgot a brace here\n```\n\nTypeScript gracefully parses, tells you you forgot a brace, and just re-prints it the right way\n\n```\nif (x) {\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>if you write</p>\n<pre><code>if (x) {\n//forgot a brace here\n</code></pre>\n<p>TypeScript gracefully parses, tells you you forgot a brace, and just re-prints it the right way</p>\n<pre><code>if (x) {\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728442094708,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$rkspT66Oj7esyESXhkGTNyVgt0JTp1Q2_UBELp10Fu8"},
{"content":{"body":"> <@robpalme:matrix.org> My favourite is automatic brace insertion in ts.\n\nNot the ABI we are looking for","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24lcUIkX6q1VnWePB-zkqPfsQom2T0upTmV9q0zc5ik10\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>My favourite is automatic brace insertion in ts.</blockquote></mx-reply>Not the ABI we are looking for","m.relates_to":{"m.in_reply_to":{"event_id":"$lcUIkX6q1VnWePB-zkqPfsQom2T0upTmV9q0zc5ik10"}},"msgtype":"m.text"},"ts":1728442104825,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$j7rAXKb4MqDfaTdzgPS5AlgqHiBjZ6YpyXmmRjIHXIQ"},
{"content":{"body":" * if you write\n\n```\nif (x) {\n//forgot a brace here\n```\n\nTypeScript gracefully recovers parsing, tells you you forgot a brace, and just re-prints it the right way\n\n```\nif (x) {\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>if you write</p>\n<pre><code>if (x) {\n//forgot a brace here\n</code></pre>\n<p>TypeScript gracefully recovers parsing, tells you you forgot a brace, and just re-prints it the right way</p>\n<pre><code>if (x) {\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"if you write\n\n```\nif (x) {\n//forgot a brace here\n```\n\nTypeScript gracefully recovers parsing, tells you you forgot a brace, and just re-prints it the right way\n\n```\nif (x) {\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>if you write</p>\n<pre><code>if (x) {\n//forgot a brace here\n</code></pre>\n<p>TypeScript gracefully recovers parsing, tells you you forgot a brace, and just re-prints it the right way</p>\n<pre><code>if (x) {\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rkspT66Oj7esyESXhkGTNyVgt0JTp1Q2_UBELp10Fu8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728442119029,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$60Lw7dcDeqpg1vtK0C0rAvwFcz78Z5TDj6FeiPeH7zg"},
{"content":{"body":"Found this one recently. TS supports Python scoping\n\n```\nfunction f() {\n    if (true)\n        type s = string;\n        console.log(\"s\" as s);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Found this one recently. TS supports Python scoping</p>\n<pre><code>function f() {\n    if (true)\n        type s = string;\n        console.log(\"s\" as s);\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728442666298,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6g6oJtF2x2TXjD9D7bALnckjyyhq-1OUDmFRawEIbxQ"},
{"content":{"body":"> <@aclaymore:matrix.org> Found this one recently. TS supports Python scoping\n> \n> ```\n> function f() {\n>     if (true)\n>         type s = string;\n>         console.log(\"s\" as s);\n> }\n> ```\n\nCan you file a bug?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6g6oJtF2x2TXjD9D7bALnckjyyhq-1OUDmFRawEIbxQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><p>Found this one recently. TS supports Python scoping</p>\n<pre><code>function f() {\n    if (true)\n        type s = string;\n        console.log(\"s\" as s);\n}\n</code></pre>\n</blockquote></mx-reply>Can you file a bug?","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6g6oJtF2x2TXjD9D7bALnckjyyhq-1OUDmFRawEIbxQ"}},"msgtype":"m.text"},"ts":1728442729583,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$mQuuLfvVcwiLzMqfpcRN2UEheRo6oCPaIkQefV6hV3Y"},
{"content":{"body":"Or I'll file a bug if I can","m.mentions":{},"msgtype":"m.text"},"ts":1728442764144,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$6ElupBx_2uOGfHR4tY4vnl9F8F1f71XJyr7vbR0_rE8"},
{"content":{"body":"Either way nice find!","m.mentions":{},"msgtype":"m.text"},"ts":1728442771697,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$AkL1RCAVEUljlKSQNL6WjLdZoBCl2NyldRbXQg3kc8M"},
{"content":{"body":"will do!","m.mentions":{},"msgtype":"m.text"},"ts":1728442837342,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IUE3KNx4VfKl6YA_Zd7QBx786y1_jasJKf4d7_6hFYM"},
{"content":{"body":".... what do you even do about that case","m.mentions":{},"msgtype":"m.text"},"ts":1728442883648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6ecUSqdmxqwHaZ4jEVG_EicTywkUOOjdP-8NA_08y_U"},
{"content":{"body":"parse error, I guess?","m.mentions":{},"msgtype":"m.text"},"ts":1728442897446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$toJMIGjDxnQvib2Sf2kniprUcUfsx2kea4c-aeXZCVo"},
{"content":{"body":"possibly","m.mentions":{},"msgtype":"m.text"},"ts":1728442933843,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$s14zArd4zE-CqmDa74PUrDxJRSqoAa54JXlZJaQjvOw"},
{"content":{"body":"it's a graceful parser","m.mentions":{},"msgtype":"m.text"},"ts":1728442962152,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Wf7Y3bT-QNFYUhUMyweK3NAI0Tyt8EX5CUC0MdKAyPA"},
{"content":{"body":"Seems like we should have more discussions in TC39 about the architectures of various implementations, both tools and native","msgtype":"m.text"},"ts":1728442970460,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ARlVE0TB0xl6nMW1bRKuaOmwJN5OoT3_EYB2tf0mEw0"},
{"content":{"body":" * possibly - we'd probably do it at checking, it gets treated more like an early error","m.mentions":{},"m.new_content":{"body":"possibly - we'd probably do it at checking, it gets treated more like an early error","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$s14zArd4zE-CqmDa74PUrDxJRSqoAa54JXlZJaQjvOw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728442992988,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$R3T44O7MU3pSDttAUfk3spjnwQ7YMI-sYKkCfW2XshU"},
{"content":{"body":"Like presentations explaining this","msgtype":"m.text"},"ts":1728442993567,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XCjdlDK0-aU7VI0oKwfSTtGtlvwx0VuHQmTQwGIdcSs"},
{"content":{"body":"@danielrosenwasser:matrix.org allow it, add a grammar alternative like `Statement : TypeDeclaration Statement`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser</a> allow it, add a grammar alternative like <code data-md=\"`\">Statement : TypeDeclaration Statement</code>","msgtype":"m.text"},"ts":1728443049483,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vu_KcRg-IjCTp3cjYMT8EdDnz0rTQoklvg9_hugOZxM"},
{"content":{"body":"lmao","m.mentions":{},"msgtype":"m.text"},"ts":1728443066423,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$5Hvm7rN-HClDK8awuVxSgSvtJBNcY7HC9Ht3RtBaO6w"},
{"content":{"body":"üòêÔ∏è this is my serious face","msgtype":"m.text"},"ts":1728443079568,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HeAUJD6FcEX4TgIUJjvrgbpmh1KY_tHPBpT14O8p5QE"},
{"content":{"body":"Statement ::\n  Statement Statement","m.mentions":{},"msgtype":"m.text"},"ts":1728443095840,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$De9z6LxFNy1r9gF_7i_vDc1TvfXD0PzqnvX44kOG7g4"},
{"content":{"body":"Likewise, I think it could be helpful to see concretely what the performance concerns are, why certain optimizations are difficult for engine implementers, etc.","m.mentions":{},"msgtype":"m.text"},"ts":1728443160195,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$0ITg9S1j9Eqq__XXOjmwg5v2UQ7pB9SdXL_JxBnDNPQ"},
{"content":{"body":"Yeah this feature is as expensive as a method call + array destructuring; I understand the concern about array destructuring being expensive but I don‚Äôt know what else engines are imagining that tools would do","msgtype":"m.text"},"ts":1728443213117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V8KCtCalAI8Uft_ED7wB7Hr7xNrVb2Cz5VQX_jKWxU0"},
{"content":{"body":"I dont think we should block all features where people have posited impractical optimizations. We certainly would not have done iterator helpers if that were a requirement ","format":"org.matrix.custom.html","formatted_body":"I dont think we should block all features where people have posited impractical optimizations. We certainly would not have done iterator helpers if that were a requirement","msgtype":"m.text"},"ts":1728443258016,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HVyNgqOfUnkJ2OvfWFXTJokPy1kA8xkaxHnTqtlFm6U"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> Can you file a bug?\n\nhttps://github.com/microsoft/TypeScript/issues/60175","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mQuuLfvVcwiLzMqfpcRN2UEheRo6oCPaIkQefV6hV3Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>Can you file a bug?</blockquote></mx-reply>https://github.com/microsoft/TypeScript/issues/60175","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mQuuLfvVcwiLzMqfpcRN2UEheRo6oCPaIkQefV6hV3Y"}},"msgtype":"m.text"},"ts":1728443293312,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wEKImtlmzo4rFB_jvajspjESoBeiFAtZPjdorf7kaMs"},
{"content":{"body":"But I think there's a legitimate \"pit of despair\" concern. Like imagine you are writing a tool that you want to be reasonably fast and you posit that pattern matching should be as fast as a `switch` on the class or something like that","format":"org.matrix.custom.html","formatted_body":"But I think there's a legitimate \"pit of despair\" concern. Like imagine you are writing a tool that you want to be reasonably fast and you posit that pattern matching should be as fast as a <code>switch</code> on the class or something like that","m.mentions":{},"msgtype":"m.text"},"ts":1728443403994,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$d5sdw62nbOzOacLf17a976he3mZ8_BekZuv_WPHkXY8"},
{"content":{"body":"I think the concern here is that we're (potentially) offering a very clean but expensive abstraction/idiom that people are trained from other languages to be zero-cost.","m.mentions":{},"msgtype":"m.text"},"ts":1728444053520,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$oK9iEBuRzCIGuh-VJzQjIpMA8lxpiA6MEeXMyejLvjk"},
{"content":{"body":"If this idiom is no worse than what people would do otherwise then I'm not concerned","m.mentions":{},"msgtype":"m.text"},"ts":1728444088833,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$3No83Q7jcWyYsSOWmqhNJpBDm9opi44tuTLewoFeNIk"},
{"content":{"body":" * If this idiom is no worse in terms of performance than what people would do otherwise then I'm not concerned","m.mentions":{},"m.new_content":{"body":"If this idiom is no worse in terms of performance than what people would do otherwise then I'm not concerned","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3No83Q7jcWyYsSOWmqhNJpBDm9opi44tuTLewoFeNIk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728444102293,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$QJfdhIEp0xZVfw28PUA_IIh7hI41pU54YpOdupiSlPo"},
{"content":{"body":"But I think adding or encouraging idioms that have known to be bad performance isn't in browser user's interest and that's what I'm trying to reflect.","m.mentions":{},"msgtype":"m.text"},"ts":1728444174500,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Tfqk7XM636yoheU9v2GSUxFhlAzGXLeUC05kLNBMvVc"},
{"content":{"body":"Summary has been added.","m.mentions":{},"msgtype":"m.text"},"ts":1728444187327,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ggNa78tKeODVJ_yTHNEofraFbUuYH123qu6EIAJbgjc"},
{"content":{"body":"> <@keith_miller:matrix.org> If this idiom is no worse in terms of performance than what people would do otherwise then I'm not concerned\n\nThe expectation is that `const Point(x, y) = p` is no more expensive than `const [x, y] = Point[Symbol.customMatcher](p, \"list\")`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3No83Q7jcWyYsSOWmqhNJpBDm9opi44tuTLewoFeNIk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>If this idiom is no worse in terms of performance than what people would do otherwise then I&#39;m not concerned</blockquote></mx-reply>The expectation is that <code>const Point(x, y) = p</code> is no more expensive than <code>const [x, y] = Point[Symbol.customMatcher](p, \"list\")</code>","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3No83Q7jcWyYsSOWmqhNJpBDm9opi44tuTLewoFeNIk"}},"msgtype":"m.text"},"ts":1728444257987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_6q2H9k34raWEAADYHi2zUaaPcYz36Sbfao_yI8iEsE"},
{"content":{"body":"though if we end up not finding a solution to iterator destructuring performance and end up going with array-as-object destructuring, `const Point(x, y) = p` is potentially *faster*","format":"org.matrix.custom.html","formatted_body":"though if we end up not finding a solution to iterator destructuring performance and end up going with array-as-object destructuring, <code>const Point(x, y) = p</code> is potentially <em>faster</em>","m.mentions":{},"msgtype":"m.text"},"ts":1728444306519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$npcrgWM9tWbBYltZNjQUXN_MnaXiS4UC66lkrYzdCIQ"},
{"content":{"body":"But it might be more expensive than: `if (p instanceof Point) { let x = p.x; let y = p.y ...}`","format":"org.matrix.custom.html","formatted_body":"But it might be more expensive than: <code>if (p instanceof Point) { let x = p.x; let y = p.y ...}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728444318170,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$z0FOMMmFx-_6jPp4OxnN0TgMMTa5d08zAsW1jnA5Gec"},
{"content":{"body":"So that's the bar to compare against","m.mentions":{},"msgtype":"m.text"},"ts":1728444343403,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Gr1ZjHQ4zroY-wHVISt0yToVt3w09QDjh8-AILGezsI"},
{"content":{"body":"And devs just might structure their code differently without this, potentially in a way that's more performant. I'm saying that I want to be convinced they're not.","m.mentions":{},"msgtype":"m.text"},"ts":1728444430977,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$wwDAi-oVyauuf8mQYWPREyea6lRgslqTEqg4DKXvAEk"},
{"content":{"body":"That doesn't have the expressivity we're seeking. The motivations include custom validation.","m.mentions":{},"msgtype":"m.text"},"ts":1728444441762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-q1gzJAEhICI0JqdHvsvOmsd6Opoc00vHVlcHQIGBc0"},
{"content":{"body":"The `Point` example from my slides used brand checking via private names","format":"org.matrix.custom.html","formatted_body":"The <code>Point</code> example from my slides used brand checking via private names","m.mentions":{},"msgtype":"m.text"},"ts":1728444474814,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QATnv1ty7twwuXSGZfHHHRNWxgvRJdWi89iazCAbFK8"},
{"content":{"body":"That's a bummer and I would like to have that validation too but not really my concern, unfortunately.","m.mentions":{},"msgtype":"m.text"},"ts":1728444484314,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$kNiXU44ABNm7FMWVq5Npll_6oPKXbIVfBabkCC964rg"},
{"content":{"body":"I understand the performance concern ‚Äúthis will encourage people to use more array destructuring‚Äù. There are a number of possible remedies to that","msgtype":"m.text"},"ts":1728444522322,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GoI7iiXLT3jkpS8c1LXLC-8W2D87oeqNfoWzKF_yXao"},
{"content":{"body":"One is using this alternative Array-like destructuring semantics, as Rob mentioned. If we want to avoid the allocation altogether, we could also limit extractors to a single argument, and then any nested array destructuring would be explicit.","msgtype":"m.text"},"ts":1728444603567,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9jQSOwUs_GOcvdgj6tVhqGhUuPurw6eVLCaPJs-SFHc"},
{"content":{"body":"* One is using this alternative Array-like destructuring semantics, as Ron mentioned. If we want to avoid the allocation altogether, we could also limit extractors to a single argument, and then any nested array destructuring would be explicit.","m.new_content":{"body":"One is using this alternative Array-like destructuring semantics, as Ron mentioned. If we want to avoid the allocation altogether, we could also limit extractors to a single argument, and then any nested array destructuring would be explicit.","msgtype":"m.text"},"m.relates_to":{"event_id":"$9jQSOwUs_GOcvdgj6tVhqGhUuPurw6eVLCaPJs-SFHc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728444609623,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1_Xk35u7yddnTQnn4Gq6aj6r9muxptkLQ2NTTtDGHZU"},
{"content":{"body":"It's not just the array destructuring although that's part of the concern. It's if the idiom makes sense as a whole.","m.mentions":{},"msgtype":"m.text"},"ts":1728444634285,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$9bqolrweRJHfR2i4COzTG-Lt2jNwDYAlX60ZDA0zPTo"},
{"content":{"body":"The discussion got a bit abstract as to which performance concerns people had. What other ones were there apart from array destructuring cost?","msgtype":"m.text"},"ts":1728444649673,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HXxVFfnx1qjvoEYK7IUoQ7mK8ROh7jdtzrERmcYIh78"},
{"content":{"body":"Or whether the idiom makes sense‚Ä¶ it is really common across languages and I have found it useful, so I am wondering if people can make their concerns more concrete.","msgtype":"m.text"},"ts":1728444694316,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GmD9qSQYuolt5TC1UidJvSlJdvU1Gt_cYrGsoeH3R5k"},
{"content":{"body":"What other dynamic languages have this?","m.mentions":{},"msgtype":"m.text"},"ts":1728444722922,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$83cT1T4KSr1MMMTzUrftNSPHZWYpWm9x_z9CeH6Dnf4"},
{"content":{"body":"Pattern matching/extractors are definitely not linked to static typing. Python and Racket have versions ","format":"org.matrix.custom.html","formatted_body":"Pattern matching/extractors are definitely not linked to static typing. Python and Racket have versions","msgtype":"m.text"},"ts":1728444735870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kxSYazqtjsVGlVmTk6mWcnLoJcgObVh8ffa6mHO7J6w"},
{"content":{"body":"Python, though they do something slightly different that the pattern matching champions group does not agree with.","m.mentions":{},"msgtype":"m.text"},"ts":1728444745863,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x2pEr6NyfChKYCVZzLvgWreaaCG33BzpNzAfogVX2FI"},
{"content":{"body":"It is just random cultural history that they are linked to functional/statically typed languages ","format":"org.matrix.custom.html","formatted_body":"It is just random cultural history that they are linked to functional/statically typed languages","msgtype":"m.text"},"ts":1728444757590,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7qDZ7p5duSac3EhUmzKuMZ51W-UyyZHNGxC2xx0SpsY"},
{"content":{"body":"Erlang is dynamically typed and does tons of pattern matching","msgtype":"m.text"},"ts":1728444783603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Avm64TY3wO53ISCMFtDpqFEXe7Xc4uQyoqVrO2Q-030"},
{"content":{"body":"Prolog for that matter, untyped and the ancestor of a lot of these ideas ","format":"org.matrix.custom.html","formatted_body":"Prolog for that matter, untyped and the ancestor of a lot of these ideas","msgtype":"m.text"},"ts":1728444818168,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aat-ZcZaUGKm3Vk2eAmE0CLyX26eWYFjIia-BFpWWnA"},
{"content":{"body":"Elixir https://hexdocs.pm/elixir/pattern-matching.html#the-match-operator","msgtype":"m.text"},"ts":1728444910853,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZdZ-F-0USdc2hD0RvN6DHT5c5qA7irlSKkpRu-pwDqE"},
{"content":{"body":"But are those idioms performant in those languages? Or are they just a cost people are willing to pay for convenience? ","m.mentions":{},"msgtype":"m.text"},"ts":1728444931874,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$OhsRjt-f85J-vKyTJ7W7kNlF1ndcVzjQHCbwQCr26RQ"},
{"content":{"body":"Its not really a static vs dynamic language feature. C# uses `Deconstruct()` for custom extraction, and static type information to do overload disambiguation and argument matching, but compared to this the main difference is that C# uses `out` parameters, which we don't have, rather than something like iterator destructuring.","format":"org.matrix.custom.html","formatted_body":"Its not really a static vs dynamic language feature. C# uses <code>Deconstruct()</code> for custom extraction, and static type information to do overload disambiguation and argument matching, but compared to this the main difference is that C# uses <code>out</code> parameters, which we don't have, rather than something like iterator destructuring.","m.mentions":{},"msgtype":"m.text"},"ts":1728444959657,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wc5GyYQdAwQlRUUa_grbGvyosIqVreb8Upb1-Zgw5Bg"},
{"content":{"body":"I'm not debating the convenience of the idiom. Only its potential performance impact with use.","m.mentions":{},"msgtype":"m.text"},"ts":1728445023257,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JmIBfhC4f5KTjRBODzcw6sYisuVJar3D8FIQilxHCTI"},
{"content":{"body":"I haven‚Äôt heard anyone talk about pattern matching as an expensive feature outside of the array destructuring issue in any other language. Some functional statically typed languages do fancy things optimizing trees of conditionals for pattern matching but others don‚Äôt.","msgtype":"m.text"},"ts":1728445093570,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IAWM5wcbsACprFGgCkSp6b6toMcUbFRGErU00KbuDKY"},
{"content":{"body":"The pattern matching proposal has some interesting mechanisms it plans to employ related to caching that have the side benefit of improving performance in a disjunction or multiple match-legs.","m.mentions":{},"msgtype":"m.text"},"ts":1728445124218,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mRlAc5R-XwYAJCVqi9JbyfXYkSjxc6YM1AvFoCTbeVg"},
{"content":{"body":"Then that should make proving it's performant easy!","m.mentions":{},"msgtype":"m.text"},"ts":1728445157176,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$VLIOZVnSVKONaUweKvHrXVqzj0ac7uzC2KoFy-FWb_A"},
{"content":{"body":"I'm not saying it's not performant only that I'd like to see real world use cases benchmarked.","m.mentions":{},"msgtype":"m.text"},"ts":1728445188784,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ShGiYzMuO50KuvNVZb1trMxMCdtVwMh-AH-9PG_6jLg"},
{"content":{"body":"So in pattern matching something like :\n```js\nmatch (x) {\n  Point(0, 0): ...,\n  Point(>0, 0): ...,\n}\n```\ncould potentially only evaluates the custom matcher once and reuse the extracted elements on both match legs.","format":"org.matrix.custom.html","formatted_body":"<p>So in pattern matching something like :</p>\n<pre><code class=\"language-js\">match (x) {\n  Point(0, 0): ...,\n  Point(&gt;0, 0): ...,\n}\n</code></pre>\n<p>could potentially only evaluates the custom matcher once and reuse the extracted elements on both match legs.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728445190576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6x-xWVc1GduTxh7lmnDTFkyA1R481chuZx87hEwmsts"},
{"content":{"body":" * So in pattern matching something like :\n\n```js\nmatch (x) {\n  Point(0, 0): ...,\n  Point(>0, 0): ...,\n}\n```\n\ncould potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.","format":"org.matrix.custom.html","formatted_body":" * <p>So in pattern matching something like :</p>\n<pre><code class=\"language-js\">match (x) {\n  Point(0, 0): ...,\n  Point(&gt;0, 0): ...,\n}\n</code></pre>\n<p>could potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.</p>\n","m.mentions":{},"m.new_content":{"body":"So in pattern matching something like :\n\n```js\nmatch (x) {\n  Point(0, 0): ...,\n  Point(>0, 0): ...,\n}\n```\n\ncould potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.","format":"org.matrix.custom.html","formatted_body":"<p>So in pattern matching something like :</p>\n<pre><code class=\"language-js\">match (x) {\n  Point(0, 0): ...,\n  Point(&gt;0, 0): ...,\n}\n</code></pre>\n<p>could potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6x-xWVc1GduTxh7lmnDTFkyA1R481chuZx87hEwmsts","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728445202778,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JE0EgfPDMvjv3_HNXT0qFYsLFelHVSGFs7kSZhqtY0c"},
{"content":{"body":" * I'm not saying it's not performant only that I'd like to see non-trivial real world use cases benchmarked.","m.mentions":{},"m.new_content":{"body":"I'm not saying it's not performant only that I'd like to see non-trivial real world use cases benchmarked.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ShGiYzMuO50KuvNVZb1trMxMCdtVwMh-AH-9PG_6jLg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728445212840,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$EuLuGIeyz919bWZVSMyxkOyp8I7x5YJh3iIUOvd-UwQ"},
{"content":{"body":"Ruby pattern matching: https://docs.ruby-lang.org/en/master/syntax/pattern_matching_rdoc.html","msgtype":"m.text"},"ts":1728445235237,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$t4atbRUcZA24AIeL-Lv2meKC-s-yTmOTkcRWFxWwUXg"},
{"content":{"body":"> <@keith_miller:matrix.org> I'm not saying it's not performant only that I'd like to see non-trivial real world use cases benchmarked.\n\nYeah this is a reasonable and good request but to be able to do it, it would help to understand what people think could go wrong. Ron has posited some possible complex optimizations but those cases could be optimized or made slower with or without pattern matching.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ShGiYzMuO50KuvNVZb1trMxMCdtVwMh-AH-9PG_6jLg\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I'm not saying it's not performant only that I'd like to see non-trivial real world use cases benchmarked.</blockquote></mx-reply>Yeah this is a reasonable and good request but to be able to do it, it would help to understand what people think could go wrong. Ron has posited some possible complex optimizations but those cases could be optimized or made slower with or without pattern matching.","m.relates_to":{"m.in_reply_to":{"event_id":"$ShGiYzMuO50KuvNVZb1trMxMCdtVwMh-AH-9PG_6jLg"}},"msgtype":"m.text"},"ts":1728445343005,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dF8vcpq7JuIj6nC98HVrQhCMwbIa2DnVb6hIWaUP-nE"},
{"content":{"body":"Pattern matching caching is something I'm *not* looking forward to desugaring mostly due to the emit size of the desugaring. I'm hoping I can stash a lot of it in emit helpers in `tslib` to cut down on bundle size.","format":"org.matrix.custom.html","formatted_body":"Pattern matching caching is something I'm <em>not</em> looking forward to desugaring mostly due to the emit size of the desugaring. I'm hoping I can stash a lot of it in emit helpers in <code>tslib</code> to cut down on bundle size.","m.mentions":{},"msgtype":"m.text"},"ts":1728445345413,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nnjrnVW7U_9gXg6LMk1Gn-uCCbS_QvlJ9_l4DxBraXM"},
{"content":{"body":"> <@rbuckton:matrix.org> So in pattern matching something like :\n> \n> ```js\n> match (x) {\n>   Point(0, 0): ...,\n>   Point(>0, 0): ...,\n> }\n> ```\n> \n> could potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.\n\nI guess this is something we will debate in the broader pattern matching proposal. I was hoping we wouldn‚Äôt do the kind of complex caching that some versions of pattern matching had‚Äîthis might add more cost than value, given that it has to be deterministic and consistent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%246x-xWVc1GduTxh7lmnDTFkyA1R481chuZx87hEwmsts\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>So in pattern matching something like :</p>\n<pre><code class=\"language-js\">match (x) {\n  Point(0, 0): ...,\n  Point(&gt;0, 0): ...,\n}\n</code></pre>\n<p>could potentially only evaluate the custom matcher once and reuse the extracted elements on both match legs.</p>\n</blockquote></mx-reply>I guess this is something we will debate in the broader pattern matching proposal. I was hoping we wouldn‚Äôt do the kind of complex caching that some versions of pattern matching had‚Äîthis might add more cost than value, given that it has to be deterministic and consistent","m.relates_to":{"m.in_reply_to":{"event_id":"$6x-xWVc1GduTxh7lmnDTFkyA1R481chuZx87hEwmsts"}},"msgtype":"m.text"},"ts":1728445452121,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MKKkenvL4g8wPrVSYrRtDY5WZ5GEmvqlXMRXjdiRmY0"},
{"content":{"body":"And the >0 syntax is a whole other topic!","format":"org.matrix.custom.html","formatted_body":"And the &gt;0 syntax is a whole other topic!","msgtype":"m.text"},"ts":1728445483537,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1_wx-0KiqL4bG8gs5REUMlhDyIpVZZi2vOrcIz_hQLk"},
{"content":{"body":"It's not part of the core proposal, to be clear. Its something I'd like to see but we're saving it for a follow-on.","m.mentions":{},"msgtype":"m.text"},"ts":1728445502158,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cQEyqSoFswGexk2H2JmqP2o8fUflWMkCOx2LvacerG4"},
{"content":{"body":"It's extremely useful in C#","m.mentions":{},"msgtype":"m.text"},"ts":1728445516782,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1jp5n0fXI-JKka-rj4Jd6E8uDs-9C2b46hG9AT3kWjc"},
{"content":{"body":" * It's not part of the core proposal, to be clear. Its something I'd like to see but we're pushing it to a follow-on.","m.mentions":{},"m.new_content":{"body":"It's not part of the core proposal, to be clear. Its something I'd like to see but we're pushing it to a follow-on.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cQEyqSoFswGexk2H2JmqP2o8fUflWMkCOx2LvacerG4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728445544440,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jr-HxG98MGkviF49ZltPrwg5L-nkEZVS2qSQ1Cnh7vY"},
{"content":{"body":"If array destructuring is expensive and impractical to optimize, should we in TC39 be discouraging its use? For example, by encouraging transpilers to transform it into object destructuring (treating it as array-like)?","msgtype":"m.text"},"ts":1728445832872,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LyxXJsxBHDo7u0xiwqQ7PWE4ugfF_OnTYonrbDqeRKw"},
{"content":{"body":"I don‚Äôt like this idea personally but if this is such a big problem that we can‚Äôt build other features on it‚Ä¶","msgtype":"m.text"},"ts":1728445878240,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cGqe7vmAffJNGaAds8l2iU2YumcWQfYIGXS4GcYMaRQ"},
{"content":{"body":"yes, code which cares about performance does specifically write `{ 0: foo, 1: bar }` instead of `[foo, bar]`","format":"org.matrix.custom.html","formatted_body":"yes, code which cares about performance does specifically write <code>{ 0: foo, 1: bar }</code> instead of <code>[foo, bar]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728446421643,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kMUa6Fnd_OP8Bh64Z0Sv_os1HYqdZWjQuBu5qXofUzw"},
{"content":{"body":"transpilers can't do this without type information","m.mentions":{},"msgtype":"m.text"},"ts":1728446431048,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lB4CPn-EypYSSDaXqPaCzasuuz4mTU930PZuLxsLsfM"},
{"content":{"body":" * yes, code which cares about performance does specifically write `{ 0: foo, 1: bar } =` instead of `[foo, bar] =`","format":"org.matrix.custom.html","formatted_body":" * yes, code which cares about performance does specifically write <code>{ 0: foo, 1: bar } =</code> instead of <code>[foo, bar] =</code>","m.mentions":{},"m.new_content":{"body":"yes, code which cares about performance does specifically write `{ 0: foo, 1: bar } =` instead of `[foo, bar] =`","format":"org.matrix.custom.html","formatted_body":"yes, code which cares about performance does specifically write <code>{ 0: foo, 1: bar } =</code> instead of <code>[foo, bar] =</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kMUa6Fnd_OP8Bh64Z0Sv_os1HYqdZWjQuBu5qXofUzw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728446447388,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$maRoHL93ctl597OWBWmiO76EuxgRCNhCkEs0rdnBMPU"},
{"content":{"body":"I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes `Array.isArray` ? i.e. assume the array's iterator will be the default one","format":"org.matrix.custom.html","formatted_body":"I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes <code>Array.isArray</code> ? i.e. assume the array's iterator will be the default one","m.mentions":{},"msgtype":"m.text"},"ts":1728446460518,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4"},
{"content":{"body":"It's significantly faster to do `const { 0: x, 1: setX } = useState()` in React, but its rare to see that done.","format":"org.matrix.custom.html","formatted_body":"It's significantly faster to do <code>const { 0: x, 1: setX } = useState()</code> in React, but its rare to see that done.","m.mentions":{},"msgtype":"m.text"},"ts":1728446505709,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nb_3SdZi56OSdzRN7ztP1Q-szhLH2YwrfxrHeBfXHF8"},
{"content":{"body":"That's an interesting idea! No idea if it's compatible though.","m.mentions":{},"msgtype":"m.text"},"ts":1728446528119,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$6txtpWCYAirVNLJfzvNQwWMdxp_jQA4UbjenvJzGRDo"},
{"content":{"body":"> <@aclaymore:matrix.org> I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes `Array.isArray` ? i.e. assume the array's iterator will be the default one\n\n... tempting... and I would guess probably compatible?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes <code>Array.isArray</code> ? i.e. assume the array's iterator will be the default one</blockquote></mx-reply>... tempting... and I would guess probably compatible?","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4"}},"msgtype":"m.text"},"ts":1728446538660,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1Q2NSYo_R49XP4Y5glkFLBiNt3zT7hkmC_90tJNJUnc"},
{"content":{"body":"though it might need to be \"`isArray` and also not a proxy\", potentially","format":"org.matrix.custom.html","formatted_body":"though it might need to be \"<code>isArray</code> and also not a proxy\", potentially","m.mentions":{},"msgtype":"m.text"},"ts":1728446564655,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fd9tEFUwUJs_7d7cTdpbNIHUnIKm3VUo-6_AzKu-8p0"},
{"content":{"body":"proxies :(","m.mentions":{},"msgtype":"m.text"},"ts":1728446570004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$poFEMWE_k69NLKEuVWye5_DljoHsFrWMb1Kf1mLYk7A"},
{"content":{"body":"> <@aclaymore:matrix.org> I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes `Array.isArray` ? i.e. assume the array's iterator will be the default one\n\nI do this internally (sorry spec)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes <code>Array.isArray</code> ? i.e. assume the array's iterator will be the default one</blockquote></mx-reply>I do this internally (sorry spec)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4"}},"msgtype":"m.text"},"ts":1728446580502,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$zRTEwZEMLDTU0Gf0vda_66T7DxjTm0INxbunnGpxsGg"},
{"content":{"body":"> <@aclaymore:matrix.org> I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes `Array.isArray` ? i.e. assume the array's iterator will be the default one\n\n * I do basically this internally (sorry spec)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q0PWaTJHzxYajRjFCqJ0WXD03bU0oAvS3fJLjinnDV4?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I wonder if it be web-compat, and also more performant, to change iterator destructuring to be specced as property access if the RHS passes <code>Array.isArray</code> ? i.e. assume the array's iterator will be the default one</blockquote></mx-reply> * I do basically this internally (sorry spec)","m.mentions":{},"m.new_content":{"body":"I do basically this internally (sorry spec)","format":"org.matrix.custom.html","formatted_body":"I do basically this internally (sorry spec)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zRTEwZEMLDTU0Gf0vda_66T7DxjTm0INxbunnGpxsGg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728446616881,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$t2cnO7CAKCyf1QR56m1G5dJi2hBIU-dVKxxLNgebCbA"},
{"content":{"body":"it definitely fails some test262 tests though","m.mentions":{},"msgtype":"m.text"},"ts":1728446642649,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$boGerLzNyOx2CAqhD1dhhJUvrvWeQkgnjE8nuy7P5T4"},
{"content":{"body":"How many people use `for..of` over arrays today? I assume that still isn't optimized for Array vs other iterators.","format":"org.matrix.custom.html","formatted_body":"How many people use <code>for..of</code> over arrays today? I assume that still isn't optimized for Array vs other iterators.","m.mentions":{},"msgtype":"m.text"},"ts":1728446674336,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZtsZHeZRUumuTpEQ8x8Fb5IcNxSRN3hiTNvkezDRRmY"},
{"content":{"body":"I am almost certain that's optimized in JSC, at least","m.mentions":{},"msgtype":"m.text"},"ts":1728446734254,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o8JRJ9hGXUttanDcMTPYUBSUp-pVuSU2E-YmXaRrrxY"},
{"content":{"body":"and would kind of expect it to be in V8 but it's been a while since I looked","m.mentions":{},"msgtype":"m.text"},"ts":1728446749102,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpODFVHbSUr4dIMlMvDdHVBexOA5AJ_4TJRsvUuGe4Q"},
{"content":{"body":"we suck at it still i think","m.mentions":{},"msgtype":"m.text"},"ts":1728446757353,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jk-AbweO9OpD89QKI74drWCgaOfewmyqf3WCsHk8oAs"},
{"content":{"body":"If you can optimize `for..of` why not `const [x, y]`?","format":"org.matrix.custom.html","formatted_body":"If you can optimize <code>for..of</code> why not <code>const [x, y]</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1728446782490,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HUlBkGoNVQL7Kg5kVQO4j5t_t7e389PkojGtwCH40TA"},
{"content":{"body":" * If you can optimize `for..of` why not `const [x, y] =`?","format":"org.matrix.custom.html","formatted_body":" * If you can optimize <code>for..of</code> why not <code>const [x, y] =</code>?","m.mentions":{},"m.new_content":{"body":"If you can optimize `for..of` why not `const [x, y] =`?","format":"org.matrix.custom.html","formatted_body":"If you can optimize <code>for..of</code> why not <code>const [x, y] =</code>?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HUlBkGoNVQL7Kg5kVQO4j5t_t7e389PkojGtwCH40TA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728446788896,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tnnyrPCuLu6WTgruhpWrop0ffvlO1uQ9EVpFec9u_dI"},
{"content":{"body":"why can do _something_ for `const [x,y]` probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths","format":"org.matrix.custom.html","formatted_body":"why can do <em>something</em> for <code>const [x,y]</code> probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths","m.mentions":{},"msgtype":"m.text"},"ts":1728446863894,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PWCBDHibYUasZhn0sGZdzTo_nCjMHo2LwT6k40DfCeQ"},
{"content":{"body":"there're a lot of undesirables hidden behind \"why not optimize this other pattern\"","m.mentions":{},"msgtype":"m.text"},"ts":1728446876896,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4keS1cHHK03zrC8W10nGjWqpDEYl62iW7pKMoC-UNfE"},
{"content":{"body":" * why can do _something_ for `const [x,y]` probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","format":"org.matrix.custom.html","formatted_body":" * why can do <em>something</em> for <code>const [x,y]</code> probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","m.mentions":{},"m.new_content":{"body":"why can do _something_ for `const [x,y]` probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","format":"org.matrix.custom.html","formatted_body":"why can do <em>something</em> for <code>const [x,y]</code> probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PWCBDHibYUasZhn0sGZdzTo_nCjMHo2LwT6k40DfCeQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728446900386,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ylh5NmuSJffcM-29n1t1yC93msAUDk7i1DmjQxvaNCE"},
{"content":{"body":" * we can do _something_ for `const [x,y]` probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","format":"org.matrix.custom.html","formatted_body":" * we can do <em>something</em> for <code>const [x,y]</code> probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","m.mentions":{},"m.new_content":{"body":"we can do _something_ for `const [x,y]` probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","format":"org.matrix.custom.html","formatted_body":"we can do <em>something</em> for <code>const [x,y]</code> probably, but it's not going to be parity with object destructuring, will have a perf cliff for non-Arrays and a bunch of other bailout paths (which is also a increased attack surface)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PWCBDHibYUasZhn0sGZdzTo_nCjMHo2LwT6k40DfCeQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728446920553,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wiOJhISnF6_-it--c3v6NwcOoByHS0cbtpdzaM71P0s"},
{"content":{"body":"I expect most destructuring is array to array, but I don't have metrics to back that up.","m.mentions":{},"msgtype":"m.text"},"ts":1728446965863,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ut_gahFZDDElrpwMV9zdEH1siHqtiPhZttkuma0s4pg"},
{"content":{"body":"I'd be perfectly happy with Array being fast and other iterators being slower, since the alternative is both are slower.","m.mentions":{},"msgtype":"m.text"},"ts":1728446994290,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fv4tJsvq7PPOcITLufqFHf67DfyUYYa1JP29SENgtxM"},
{"content":{"body":"yeah i agree it's worth optimizing that?","m.mentions":{},"msgtype":"m.text"},"ts":1728447043238,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vpcld7DArDVEsPHimMqd_O1yxDgxq_ZwdL_3CrTyBxo"},
{"content":{"body":"React alone should be enough of a reason to optimize array to array destructuring, but I'm working on some benchmarking to get and understanding of the actual effect it has.","m.mentions":{},"msgtype":"m.text"},"ts":1728447048839,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lMocrNm94BLI3GOF4nn7gFcgt2hCvM1CYSX4e3N1ZgY"},
{"content":{"body":" * React alone should be enough of a reason to optimize array to array destructuring, but I'm working on some benchmarking to get an understanding of the actual effect it has.","m.mentions":{},"m.new_content":{"body":"React alone should be enough of a reason to optimize array to array destructuring, but I'm working on some benchmarking to get an understanding of the actual effect it has.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lMocrNm94BLI3GOF4nn7gFcgt2hCvM1CYSX4e3N1ZgY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728447055789,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$30n0yl_D88VZ1IRlHxsHk9kNwy1zejy6EnuA2JLd1o8"},
{"content":{"body":"It is very optimized in JSC (modulo the iterator object itself being allocated)","m.mentions":{},"m.relates_to":{"event_id":"$o8JRJ9hGXUttanDcMTPYUBSUp-pVuSU2E-YmXaRrrxY","is_falling_back":true,"m.in_reply_to":{"event_id":"$o8JRJ9hGXUttanDcMTPYUBSUp-pVuSU2E-YmXaRrrxY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728447062800,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JRezuO1PyLG5VSNCRxZmjzlZIBU6JkC8yCf9aoMt0pA"},
{"content":{"body":"I thought V8 had already done that","m.mentions":{},"msgtype":"m.text"},"ts":1728447085197,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$b_0UDHK2K_OkBdVEqDaJXSB4zD6yo5k-WpyeNDVtB3M"},
{"content":{"body":"> <@rkirsling:matrix.org> 7 years, wow\n\nYou think it's wow from the outside, imagine feeling those years from the inside!  Although I only joined the Temporal champion 4.5 years ago so I'm still a fresh n00b. üòÄ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qfVUmlTv1dKkvqdrjFob0WfcouvSPY5PRgBMTlK_uaE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>7 years, wow</blockquote></mx-reply>You think it's wow from the outside, imagine feeling those years from the inside!  Although I only joined the Temporal champion 4.5 years ago so I'm still a fresh n00b. üòÄ","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qfVUmlTv1dKkvqdrjFob0WfcouvSPY5PRgBMTlK_uaE"}},"msgtype":"m.text"},"ts":1728447100031,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$RUg9OaUirkxNKwRVMuRMylwevFIsWDdcRyLTsTcio9M"},
{"content":{"body":"i don't actually know, lemme see","m.mentions":{},"msgtype":"m.text"},"ts":1728447103117,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hVPC8EQgmVgNgrgUmxdDHerCgRVZNt0DQJ15aweCeKw"},
{"content":{"body":"> <@bakkot:matrix.org> transpilers can't do this without type information\n\nYes they can‚Äîtsc does it in some emit modes unconditionally!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24lB4CPn-EypYSSDaXqPaCzasuuz4mTU930PZuLxsLsfM\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>transpilers can't do this without type information</blockquote></mx-reply>Yes they can‚Äîtsc does it in some emit modes unconditionally!","m.relates_to":{"m.in_reply_to":{"event_id":"$lB4CPn-EypYSSDaXqPaCzasuuz4mTU930PZuLxsLsfM"}},"msgtype":"m.text"},"ts":1728447104522,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KUIqhAXDMtkGt9DEyIXaYUNkOeXoQ-rPlqWQNxV4HzY"},
{"content":{"body":"sorry, without also breaking some other code","m.mentions":{},"msgtype":"m.text"},"ts":1728447123357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EDIg3Yan3KLNkl-bmIqPW8DBDxIkI0pd2nB5yMK1MN8"},
{"content":{"body":"> <@rbuckton:matrix.org> How many people use `for..of` over arrays today? I assume that still isn't optimized for Array vs other iterators.\n\nalmost all of my code is `for..of` even it might be slow. readibility > performance when the code is not in a hot path","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZtsZHeZRUumuTpEQ8x8Fb5IcNxSRN3hiTNvkezDRRmY\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>How many people use <code>for..of</code> over arrays today? I assume that still isn't optimized for Array vs other iterators.</blockquote></mx-reply>almost all of my code is <code>for..of</code> even it might be slow. readibility &gt; performance when the code is not in a hot path","m.relates_to":{"m.in_reply_to":{"event_id":"$ZtsZHeZRUumuTpEQ8x8Fb5IcNxSRN3hiTNvkezDRRmY"}},"msgtype":"m.text"},"ts":1728447127113,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$DpiiIJ5oewyRxF51mmLYWXAjtek1MSst4IjLbaFgiBY"},
{"content":{"body":"https://docs.google.com/document/d/1hWb-lQW4NSG9yRpyyiAA_9Ktytd5lypLnVLhPX9vamE/edit?tab=t.0#heading=h.9ss45aibqpw2","m.mentions":{},"msgtype":"m.text"},"ts":1728447131255,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PqkLinHn23uPCQnrmVAqHIFjWFOiPs9ewU5nckTzdgo"},
{"content":{"body":"TSC only does that for `--target ES5` where there is no expectation of `Symbol.iterator`.","format":"org.matrix.custom.html","formatted_body":"TSC only does that for <code>--target ES5</code> where there is no expectation of <code>Symbol.iterator</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1728447136065,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-f68FzolMsjPLC2c9Q6K_trJ7Rfk6IpWNoFTwebD6WQ"},
{"content":{"body":"> <@bakkot:matrix.org> sorry, without also breaking some other code\n\nIf you care about breaking other code, then you might need runtime support to check that no one messed with Array.prototype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24EDIg3Yan3KLNkl-bmIqPW8DBDxIkI0pd2nB5yMK1MN8\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sorry, without also breaking some other code</blockquote></mx-reply>If you care about breaking other code, then you might need runtime support to check that no one messed with Array.prototype","m.relates_to":{"m.in_reply_to":{"event_id":"$EDIg3Yan3KLNkl-bmIqPW8DBDxIkI0pd2nB5yMK1MN8"}},"msgtype":"m.text"},"ts":1728447157013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VBD2yqL1jsXNMZ1rlZbtvIchZuJOdFcLDV-eGemOuM8"},
{"content":{"body":"And we have `--downevelIteration` to emulate actual ES2015+ semantics.","format":"org.matrix.custom.html","formatted_body":"And we have <code>--downevelIteration</code> to emulate actual ES2015+ semantics.","m.mentions":{},"msgtype":"m.text"},"ts":1728447159579,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_xnQahhTMhfS5Yv_zJRg2XTzjQHVsuqv7EmflWMyii4"},
{"content":{"body":"> <@bakkot:matrix.org> transpilers can't do this without type information\n\n * Yes they can‚Äîtsc does it in some emit modes unconditionally! (When emitting es5)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24lB4CPn-EypYSSDaXqPaCzasuuz4mTU930PZuLxsLsfM\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>transpilers can't do this without type information</blockquote></mx-reply> * Yes they can‚Äîtsc does it in some emit modes unconditionally! (When emitting es5)","m.new_content":{"body":"Yes they can‚Äîtsc does it in some emit modes unconditionally! (When emitting es5)","msgtype":"m.text"},"m.relates_to":{"event_id":"$KUIqhAXDMtkGt9DEyIXaYUNkOeXoQ-rPlqWQNxV4HzY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728447183479,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$StBu_k8bwGwhsltxryCQ_Etwmc16c11tLhaM7FyxE6I"},
{"content":{"body":"Yes sorry that wasn‚Äôt meant as a tsc critique","msgtype":"m.text"},"ts":1728447202545,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QjsjEb8Ov_Urf07JUTq-wpyOvPKnGxdQNljgH3812Mc"},
{"content":{"body":"But generally: if we want transpilers to do unsound things (like around TDZ) that is something we as a committee can say","msgtype":"m.text"},"ts":1728447239873,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9VEUJFbJLAEJbufmmNOeHbuS_O_FthggHmucBgsUlvA"},
{"content":{"body":"Even in the `--downlevelIteration` case we use a runtime helper to emulate an iterator over an array, rather than bake that into the actual loop.","format":"org.matrix.custom.html","formatted_body":"Even in the <code>--downlevelIteration</code> case we use a runtime helper to emulate an iterator over an array, rather than bake that into the actual loop.","m.mentions":{},"msgtype":"m.text"},"ts":1728447254651,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fGG9SBqPK5SdFL9ThQoyN-jKYLIQX7ZtBf9T7KE88W4"},
{"content":{"body":"so the emit remains the same regardless as to the type of the iterated object","m.mentions":{},"msgtype":"m.text"},"ts":1728447270357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L6af8dXnHzQMxWvdkW6kLLDUZf_jO1HsiJ_w5-0V2kk"},
{"content":{"body":"> <@aclaymore:matrix.org> https://docs.google.com/document/d/1hWb-lQW4NSG9yRpyyiAA_9Ktytd5lypLnVLhPX9vamE/edit?tab=t.0#heading=h.9ss45aibqpw2\n\noh cool. looks like we didn't actually land any of the talked about solutions though? the bytecode still looks pretty bad to me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PqkLinHn23uPCQnrmVAqHIFjWFOiPs9ewU5nckTzdgo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>https://docs.google.com/document/d/1hWb-lQW4NSG9yRpyyiAA_9Ktytd5lypLnVLhPX9vamE/edit?tab=t.0#heading=h.9ss45aibqpw2</blockquote></mx-reply>oh cool. looks like we didn't actually land any of the talked about solutions though? the bytecode still looks pretty bad to me","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PqkLinHn23uPCQnrmVAqHIFjWFOiPs9ewU5nckTzdgo"}},"msgtype":"m.text"},"ts":1728447281441,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J9BnDwONguMnNZYih2ZIeCBSA_aWOda4an53VcilLi0"},
{"content":{"body":"I dunno if we should do such unsound downlevelings but I don‚Äôt know what else would actually meet what the browsers seem to be expecting","msgtype":"m.text"},"ts":1728447288418,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YRBNPOufj2-QnLtgUfBrlV63SJwyiCAazy8K1mw580I"},
{"content":{"body":"the quickest way to make sure that happens is to make it show up in speedometer or the new jetstream","m.mentions":{},"msgtype":"m.text"},"ts":1728447299685,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fc2AIDP2j-fmc06TPCgwfCFtavBSbnByVDFGer5vMa4"},
{"content":{"body":"is it a really bad idea to have a 3rd form of destructuring for array-like?\n\n```\nconst |a, b, c| = multiReturnFunction(); // probably a better token is available\n// is\nconst { 0: a, 1: b, 2: c } = multiReturnFunction();\n```","format":"org.matrix.custom.html","formatted_body":"<p>is it a really bad idea to have a 3rd form of destructuring for array-like?</p>\n<pre><code>const |a, b, c| = multiReturnFunction(); // probably a better token is available\n// is\nconst { 0: a, 1: b, 2: c } = multiReturnFunction();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728447312034,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$V_iYo2WLYYeVnV2QRx6jWE7NnqTt3C6H4u2p9OOThAE"},
{"content":{"body":"> <@rbuckton:matrix.org> The expectation is that `const Point(x, y) = p` is no more expensive than `const [x, y] = Point[Symbol.customMatcher](p, \"list\")`\n\nSorry getting back to this but while yes `const Point(x, y) = p` isn't more expensive than that `const Optional.Some(Point.2D(x, y)) = o` would likely decode to 20-30 byte codes in JSC","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_6q2H9k34raWEAADYHi2zUaaPcYz36Sbfao_yI8iEsE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The expectation is that <code>const Point(x, y) = p</code> is no more expensive than <code>const [x, y] = Point[Symbol.customMatcher](p, \"list\")</code></blockquote></mx-reply>Sorry getting back to this but while yes <code>const Point(x, y) = p</code> isn't more expensive than that <code>const Optional.Some(Point.2D(x, y)) = o</code> would likely decode to 20-30 byte codes in JSC","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_6q2H9k34raWEAADYHi2zUaaPcYz36Sbfao_yI8iEsE"}},"msgtype":"m.text"},"ts":1728447388025,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$FlCg-hcPhM01QAW3zKQr32-EBkcq7vl_fUam6JH7k38"},
{"content":{"body":"`let |a, ` is ambiguous","format":"org.matrix.custom.html","formatted_body":"<code>let |a, </code> is ambiguous","m.mentions":{},"msgtype":"m.text"},"ts":1728447393353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b2Z9zQILZjAyCFPaHewPltI6Wae7z9WxzBIs7zeKNzc"},
{"content":{"body":"one R&T design was `[| a, b, c |]`, maybe could be more like that?","format":"org.matrix.custom.html","formatted_body":"one R&amp;T design was <code>[| a, b, c |]</code>, maybe could be more like that?","m.mentions":{},"msgtype":"m.text"},"ts":1728447427352,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CixAETrQ43fsP-YSKfsUaWQxVz0nEKPI3hBLoLIRxK4"},
{"content":{"body":"> <@keith_miller:matrix.org> Sorry getting back to this but while yes `const Point(x, y) = p` isn't more expensive than that `const Optional.Some(Point.2D(x, y)) = o` would likely decode to 20-30 byte codes in JSC\n\nwhy not to `const [x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FlCg-hcPhM01QAW3zKQr32-EBkcq7vl_fUam6JH7k38?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Sorry getting back to this but while yes <code>const Point(x, y) = p</code> isn't more expensive than that <code>const Optional.Some(Point.2D(x, y)) = o</code> would likely decode to 20-30 byte codes in JSC</blockquote></mx-reply>why not to <code>const [x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');</code>?","m.mentions":{"user_ids":["@keith_miller:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FlCg-hcPhM01QAW3zKQr32-EBkcq7vl_fUam6JH7k38"}},"msgtype":"m.text"},"ts":1728447485097,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE"},
{"content":{"body":"i'll be somewhat blunt: i continue to see the line of argument from extractor-proponents to be \"for these technical reasons it's unrealistic to do this in tools\"\n\nthat's fine! but that doesn't imply \"engines will do it\"","m.mentions":{},"msgtype":"m.text"},"ts":1728447510064,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RHd7lO8wsRNQUp2Qt2la2hIhyTq0Cp1-eggLgVslRcA"},
{"content":{"body":"i think the counterfactual that \"people will write things that are even slower\" is also just not true in this case, because pattern matching and extractors don't exist?","m.mentions":{},"msgtype":"m.text"},"ts":1728447535593,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YhC8l-fqLxshCeAQ64WvRVNhnbVjMpariqWaprAtO28"},
{"content":{"body":"the things those will be used for are already done, just in other ways","m.mentions":{},"msgtype":"m.text"},"ts":1728447548834,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2xEKsFfb_1BccYU_Xs5y7WSyVq5N0-fUK-rXYNK7npc"},
{"content":{"body":"and if they don't want to write that verbose example that jordan posted above, that's good! the grossness of the example correlates with the slowness","m.mentions":{},"msgtype":"m.text"},"ts":1728447559083,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dxWGymng6mwzdWTf9OQOkbIA9YVbaq0dRoNLwDHQd8E"},
{"content":{"body":"pattern matching is done with function calls and if/else and/or switch, extractors with separate function calls","m.mentions":{},"msgtype":"m.text"},"ts":1728447571546,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z7NFv3p0n2wJNDfEUCKx9cKVQ8D7HQZYWFp75zQsb-E"},
{"content":{"body":"that seems good to me","m.mentions":{},"msgtype":"m.text"},"ts":1728447579580,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SSxvLGDLfQa9UVV1hVXiM8qeRLB2IPOnsgS-xBUq6h4"},
{"content":{"body":"their verbosity gives a hint to the work they're doing","m.mentions":{},"msgtype":"m.text"},"ts":1728447587317,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vUQv7bmtYbTnbZguNNet9FiwbErLga6B3cRyS7_cAoA"},
{"content":{"body":"i'm not sure the point of programming languages is to have verbosity correlate to cost?","m.mentions":{},"msgtype":"m.text"},"ts":1728447615108,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_iuyO9dKN0rzNpr-WIdaVT6hZRmxmIKJLyanasV4mt4"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'll be somewhat blunt: i continue to see the line of argument from extractor-proponents to be \"for these technical reasons it's unrealistic to do this in tools\"\n> \n> that's fine! but that doesn't imply \"engines will do it\"\n\nExtractors are actually something that would be easy to do in Babel, just not fast/small","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RHd7lO8wsRNQUp2Qt2la2hIhyTq0Cp1-eggLgVslRcA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i&#39;ll be somewhat blunt: i continue to see the line of argument from extractor-proponents to be &quot;for these technical reasons it&#39;s unrealistic to do this in tools&quot;<br/><br/>that&#39;s fine! but that doesn&#39;t imply &quot;engines will do it&quot;</blockquote></mx-reply>Extractors are actually something that would be easy to do in Babel, just not fast/small","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RHd7lO8wsRNQUp2Qt2la2hIhyTq0Cp1-eggLgVslRcA"}},"msgtype":"m.text"},"ts":1728447618272,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J1H-b5rPwvxLAcRbJb4bXC8RhPF1do2BRTcUG8i59e4"},
{"content":{"body":"Pattern matching results in far more readable code than the current approach.","m.mentions":{},"msgtype":"m.text"},"ts":1728447622451,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KjPlRLRsn1VU52p8x-Funt0f_fN8sByfjs0uyPZObso"},
{"content":{"body":"if a terser and more readable thing can be a near zero-cost abstraction, that's great","m.mentions":{},"msgtype":"m.text"},"ts":1728447633782,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ufTLafH5QDpYzXU8Rd5qf876MZtiBZmdaas0TusZCD4"},
{"content":{"body":"The verbosity makes it harder to reason over.","m.mentions":{},"msgtype":"m.text"},"ts":1728447639889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sZLeNKT465kSZCycldvZ8_i-zmdeXG-L51kvUdrxB2k"},
{"content":{"body":"if it can't be, we gave our position yesterday on the cost to users","m.mentions":{},"msgtype":"m.text"},"ts":1728447645582,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ygdICToq0X04l-xXdLjsSKuO6_sBtEey6elPrlFo5Ow"},
{"content":{"body":"My concern with Extractors is that they seem overly clever to me. They hide what's happening from the developer too much, leading them to incorrect ideas about how expensive they are.","m.mentions":{},"msgtype":"m.text"},"ts":1728447680108,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$rjeURXliAMvliZcYvHo9UxHhQuVajUGX6qceH402WTc"},
{"content":{"body":"> <@ljharb:matrix.org> i'm not sure the point of programming languages is to have verbosity correlate to cost?\n\nthe point of programming languages is to write applications that have some value to users of the applications","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_iuyO9dKN0rzNpr-WIdaVT6hZRmxmIKJLyanasV4mt4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i&#39;m not sure the point of programming languages is to have verbosity correlate to cost?</blockquote></mx-reply>the point of programming languages is to write applications that have some value to users of the applications","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_iuyO9dKN0rzNpr-WIdaVT6hZRmxmIKJLyanasV4mt4"}},"msgtype":"m.text"},"ts":1728447689115,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qp1kSlZsA5_ss5z4waD_jPgTIzVpYF6U_-vjEEei2G8"},
{"content":{"body":"indeed","m.mentions":{},"msgtype":"m.text"},"ts":1728447693908,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l7A7-ZdfF12CtUXRo7g0n-he58TCuTSzjuAfirssFmk"},
{"content":{"body":"pattern matching can be more efficient than the alternative if we have sufficient caching and reuse across multiple branches of the pattern.","m.mentions":{},"msgtype":"m.text"},"ts":1728447698196,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AD6Knx6gOZ02PejzpuupI6IDRc7rVS5tZDv4sgFi2a4"},
{"content":{"body":"Sure but that's still 48 byte codes in JSC today:\n```\n[x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');\n<global>#BS5CtO:[0x130538130->0x10e071188, NoneGlobal, 265]: 48 instructions (0 16-bit instructions, 0 32-bit instructions, 27 instructions with metadata); 361 bytes (96 metadata bytes); 1 parameter(s); 20 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: [ ]\n[   0] enter\n[   1] mov                dst:loc5, src:Undefined(const0)\n[   4] resolve_scope      dst:loc7, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n[  11] get_from_scope     dst:loc8, scope:loc7, var:0, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:1\n[  20] get_by_id          dst:loc6, base:loc8, property:1, valueProfile:2\n[  26] resolve_scope      dst:loc8, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[  33] get_from_scope     dst:loc9, scope:loc8, var:2, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:3\n[  42] get_by_id          dst:loc7, base:loc9, property:3, valueProfile:4\n[  48] get_by_val         dst:loc5, base:loc6, property:loc7, valueProfile:5\n[  54] mov                dst:loc10, src:loc6\n[  57] resolve_scope      dst:loc11, scope:loc4, var:4, resolveType:GlobalProperty, localScopeDepth:0\n[  64] get_from_scope     dst:loc11, scope:loc11, var:4, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:6\n[  73] resolve_scope      dst:loc13, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[  80] get_from_scope     dst:loc14, scope:loc13, var:2, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:7\n[  89] get_by_id          dst:loc12, base:loc14, property:3, valueProfile:8\n[  95] get_by_val         dst:loc9, base:loc11, property:loc12, valueProfile:9\n[ 101] mov                dst:loc14, src:loc11\n[ 104] resolve_scope      dst:loc13, scope:loc4, var:5, resolveType:GlobalProperty, localScopeDepth:0\n[ 111] get_from_scope     dst:loc13, scope:loc13, var:5, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:10\n[ 120] mov                dst:loc12, src:String (atomic),8Bit:(1),length:(4): list, StructureID: 16976(const1)\n[ 123] call               dst:loc9, callee:loc9, argc:3, argv:20, valueProfile:11\n[ 130] mov                dst:loc8, src:String (atomic),8Bit:(1),length:(4): list, StructureID: 16976(const1)\n[ 133] call               dst:loc5, callee:loc5, argc:3, argv:16, valueProfile:12\n[ 140] get_by_id          dst:loc8, base:loc5, property:6, valueProfile:13\n[ 146] mov                dst:loc10, src:loc5\n[ 149] iterator_open      iterator:loc6, next:loc7, symbolIterator:loc8, iterable:loc10, stackOffset:16, iterableValueProfile:14, iteratorValueProfile:15, nextValueProfile:16\n[ 159] mov                dst:loc10, src:loc6\n[ 162] iterator_next      done:loc8, value:loc9, iterable:loc5, next:loc7, iterator:loc10, stackOffset:16, nextResultValueProfile:17, doneValueProfile:18, valueValueProfile:19\n[ 173] jfalse             condition:loc8, targetLabel:6(->179)\nSuccessors: [ #3 #2 ]\n\nbb#2\nPredecessors: [ #1 ]\n[ 176] mov                dst:loc9, src:Undefined(const0)\nSuccessors: [ #3 ]\n\nbb#3\nPredecessors: [ #1 #2 ]\n[ 179] resolve_scope      dst:loc10, scope:loc4, var:7, resolveType:GlobalProperty, localScopeDepth:0\n[ 186] put_to_scope       scope:loc10, var:7, value:loc9, getPutInfo:1050624<DoNotThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 194] jtrue              condition:loc8, targetLabel:20(->214)\nSuccessors: [ #5 #4 ]\n\nbb#4\nPredecessors: [ #3 ]\n[ 197] mov                dst:loc10, src:loc6\n[ 200] iterator_next      done:loc8, value:loc9, iterable:loc5, next:loc7, iterator:loc10, stackOffset:16, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n[ 211] jfalse             condition:loc8, targetLabel:6(->217)\nSuccessors: [ #6 #5 ]\n\nbb#5\nPredecessors: [ #3 #4 ]\n[ 214] mov                dst:loc9, src:Undefined(const0)\nSuccessors: [ #6 ]\n\nbb#6\nPredecessors: [ #4 #5 ]\n[ 217] resolve_scope      dst:loc10, scope:loc4, var:8, resolveType:GlobalProperty, localScopeDepth:0\n[ 224] put_to_scope       scope:loc10, var:8, value:loc9, getPutInfo:1050624<DoNotThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 232] jtrue              condition:loc8, targetLabel:31(->263)\nSuccessors: [ #10 #7 ]\n\nbb#7\nPredecessors: [ #6 ]\n[ 235] get_by_id          dst:loc9, base:loc6, property:9, valueProfile:23\n[ 241] jundefined_or_null value:loc9, targetLabel:22(->263)\nSuccessors: [ #10 #8 ]\n\nbb#8\nPredecessors: [ #7 ]\n[ 244] mov                dst:loc12, src:loc6\n[ 247] call               dst:loc10, callee:loc9, argc:1, argv:18, valueProfile:24\n[ 254] is_object          dst:loc13, operand:loc10\n[ 257] jtrue              condition:loc13, targetLabel:6(->263)\nSuccessors: [ #10 #9 ]\n\nbb#9\nPredecessors: [ #8 ]\n[ 260] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const2), errorType:TypeError\nSuccessors: [ ]\n\nbb#10\nPredecessors: [ #6 #7 #8 ]\n[ 263] end                value:loc5\nSuccessors: [ ]\n\n\nIdentifiers:\n  id0 = Optional\n  id1 = some\n  id2 = Symbol\n  id3 = customMatcher\n  id4 = Point\n  id5 = p\n  id6 = Symbol.iterator\n  id7 = x\n  id8 = y\n  id9 = return\n\nConstants:\n   k0 = Undefined\n   k1 = String (atomic),8Bit:(1),length:(4): list, StructureID: 16976\n   k2 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976\n```","format":"org.matrix.custom.html","formatted_body":"<p>Sure but that's still 48 byte codes in JSC today:</p>\n<pre><code>[x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');\n&lt;global&gt;#BS5CtO:[0x130538130-&gt;0x10e071188, NoneGlobal, 265]: 48 instructions (0 16-bit instructions, 0 32-bit instructions, 27 instructions with metadata); 361 bytes (96 metadata bytes); 1 parameter(s); 20 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: [ ]\n[   0] enter\n[   1] mov                dst:loc5, src:Undefined(const0)\n[   4] resolve_scope      dst:loc7, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n[  11] get_from_scope     dst:loc8, scope:loc7, var:0, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:1\n[  20] get_by_id          dst:loc6, base:loc8, property:1, valueProfile:2\n[  26] resolve_scope      dst:loc8, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[  33] get_from_scope     dst:loc9, scope:loc8, var:2, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:3\n[  42] get_by_id          dst:loc7, base:loc9, property:3, valueProfile:4\n[  48] get_by_val         dst:loc5, base:loc6, property:loc7, valueProfile:5\n[  54] mov                dst:loc10, src:loc6\n[  57] resolve_scope      dst:loc11, scope:loc4, var:4, resolveType:GlobalProperty, localScopeDepth:0\n[  64] get_from_scope     dst:loc11, scope:loc11, var:4, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:6\n[  73] resolve_scope      dst:loc13, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[  80] get_from_scope     dst:loc14, scope:loc13, var:2, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:7\n[  89] get_by_id          dst:loc12, base:loc14, property:3, valueProfile:8\n[  95] get_by_val         dst:loc9, base:loc11, property:loc12, valueProfile:9\n[ 101] mov                dst:loc14, src:loc11\n[ 104] resolve_scope      dst:loc13, scope:loc4, var:5, resolveType:GlobalProperty, localScopeDepth:0\n[ 111] get_from_scope     dst:loc13, scope:loc13, var:5, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:10\n[ 120] mov                dst:loc12, src:String (atomic),8Bit:(1),length:(4): list, StructureID: 16976(const1)\n[ 123] call               dst:loc9, callee:loc9, argc:3, argv:20, valueProfile:11\n[ 130] mov                dst:loc8, src:String (atomic),8Bit:(1),length:(4): list, StructureID: 16976(const1)\n[ 133] call               dst:loc5, callee:loc5, argc:3, argv:16, valueProfile:12\n[ 140] get_by_id          dst:loc8, base:loc5, property:6, valueProfile:13\n[ 146] mov                dst:loc10, src:loc5\n[ 149] iterator_open      iterator:loc6, next:loc7, symbolIterator:loc8, iterable:loc10, stackOffset:16, iterableValueProfile:14, iteratorValueProfile:15, nextValueProfile:16\n[ 159] mov                dst:loc10, src:loc6\n[ 162] iterator_next      done:loc8, value:loc9, iterable:loc5, next:loc7, iterator:loc10, stackOffset:16, nextResultValueProfile:17, doneValueProfile:18, valueValueProfile:19\n[ 173] jfalse             condition:loc8, targetLabel:6(-&gt;179)\nSuccessors: [ #3 #2 ]\n\nbb#2\nPredecessors: [ #1 ]\n[ 176] mov                dst:loc9, src:Undefined(const0)\nSuccessors: [ #3 ]\n\nbb#3\nPredecessors: [ #1 #2 ]\n[ 179] resolve_scope      dst:loc10, scope:loc4, var:7, resolveType:GlobalProperty, localScopeDepth:0\n[ 186] put_to_scope       scope:loc10, var:7, value:loc9, getPutInfo:1050624&lt;DoNotThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0\n[ 194] jtrue              condition:loc8, targetLabel:20(-&gt;214)\nSuccessors: [ #5 #4 ]\n\nbb#4\nPredecessors: [ #3 ]\n[ 197] mov                dst:loc10, src:loc6\n[ 200] iterator_next      done:loc8, value:loc9, iterable:loc5, next:loc7, iterator:loc10, stackOffset:16, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n[ 211] jfalse             condition:loc8, targetLabel:6(-&gt;217)\nSuccessors: [ #6 #5 ]\n\nbb#5\nPredecessors: [ #3 #4 ]\n[ 214] mov                dst:loc9, src:Undefined(const0)\nSuccessors: [ #6 ]\n\nbb#6\nPredecessors: [ #4 #5 ]\n[ 217] resolve_scope      dst:loc10, scope:loc4, var:8, resolveType:GlobalProperty, localScopeDepth:0\n[ 224] put_to_scope       scope:loc10, var:8, value:loc9, getPutInfo:1050624&lt;DoNotThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0\n[ 232] jtrue              condition:loc8, targetLabel:31(-&gt;263)\nSuccessors: [ #10 #7 ]\n\nbb#7\nPredecessors: [ #6 ]\n[ 235] get_by_id          dst:loc9, base:loc6, property:9, valueProfile:23\n[ 241] jundefined_or_null value:loc9, targetLabel:22(-&gt;263)\nSuccessors: [ #10 #8 ]\n\nbb#8\nPredecessors: [ #7 ]\n[ 244] mov                dst:loc12, src:loc6\n[ 247] call               dst:loc10, callee:loc9, argc:1, argv:18, valueProfile:24\n[ 254] is_object          dst:loc13, operand:loc10\n[ 257] jtrue              condition:loc13, targetLabel:6(-&gt;263)\nSuccessors: [ #10 #9 ]\n\nbb#9\nPredecessors: [ #8 ]\n[ 260] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const2), errorType:TypeError\nSuccessors: [ ]\n\nbb#10\nPredecessors: [ #6 #7 #8 ]\n[ 263] end                value:loc5\nSuccessors: [ ]\n\n\nIdentifiers:\n  id0 = Optional\n  id1 = some\n  id2 = Symbol\n  id3 = customMatcher\n  id4 = Point\n  id5 = p\n  id6 = Symbol.iterator\n  id7 = x\n  id8 = y\n  id9 = return\n\nConstants:\n   k0 = Undefined\n   k1 = String (atomic),8Bit:(1),length:(4): list, StructureID: 16976\n   k2 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE","is_falling_back":true,"m.in_reply_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728447699266,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$hpJo70mwyH_2IOvDsYA1S6YTkaaB2cRorMn5Mev9Ci8"},
{"content":{"body":"and readable code correlates to that value, imo often more highly than the performance of that application","m.mentions":{},"msgtype":"m.text"},"ts":1728447710798,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_5NL1faG7TQKnJtNMSkN0l-3iVdT4b06G4oHZwIGqmw"},
{"content":{"body":"i disagree _so_ strongly on that point","format":"org.matrix.custom.html","formatted_body":"i disagree <em>so</em> strongly on that point","m.mentions":{},"msgtype":"m.text"},"ts":1728447719292,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UYofM75z5viIxPoKqtuDSwqv125JTXVI4DcCZl3vm5w"},
{"content":{"body":"that is clear :-)","m.mentions":{},"msgtype":"m.text"},"ts":1728447724261,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d2HEy3ESlcl5LBiGgOrKFfYlOdOQm96ObMR9UWoXpYs"},
{"content":{"body":"I might believe that claim in C, which is hard to write correctly and where bugs can do arbitrarily bad things, but I certainly do not agree with that claim for web apps written in JS","m.mentions":{},"msgtype":"m.text"},"ts":1728447789305,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dqz-a2OE_mplUeXKKE0Cs9IC8xXxC8jDnggQxYjUQ9E"},
{"content":{"body":"> <@bakkot:matrix.org> I might believe that claim in C, which is hard to write correctly and where bugs can do arbitrarily bad things, but I certainly do not agree with that claim for web apps written in JS\n\nAre you agreeing with Jordan or Shu? lol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dqz-a2OE_mplUeXKKE0Cs9IC8xXxC8jDnggQxYjUQ9E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I might believe that claim in C, which is hard to write correctly and where bugs can do arbitrarily bad things, but I certainly do not agree with that claim for web apps written in JS</blockquote></mx-reply>Are you agreeing with Jordan or Shu? lol","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dqz-a2OE_mplUeXKKE0Cs9IC8xXxC8jDnggQxYjUQ9E"}},"msgtype":"m.text"},"ts":1728447844529,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$pYoaKtOQSjQtSd2X2SEjotBZKBvOLoN93-uvhHiFqpU"},
{"content":{"body":"it's not a claim that it's always the case, to be clear, and obv _some_ threshold of slowness will always cancel out the other benefits,","format":"org.matrix.custom.html","formatted_body":"it's not a claim that it's always the case, to be clear, and obv <em>some</em> threshold of slowness will always cancel out the other benefits,","m.mentions":{},"msgtype":"m.text"},"ts":1728447847033,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aIrQtiiTcxA3oKVCcKunGJhoX1YdoIh1nE0B_0yxKxw"},
{"content":{"body":" * it's not a claim that it's always the case, to be clear, and obv _some_ threshold of slowness will always cancel out the other benefits.","format":"org.matrix.custom.html","formatted_body":" * it's not a claim that it's always the case, to be clear, and obv <em>some</em> threshold of slowness will always cancel out the other benefits.","m.mentions":{},"m.new_content":{"body":"it's not a claim that it's always the case, to be clear, and obv _some_ threshold of slowness will always cancel out the other benefits.","format":"org.matrix.custom.html","formatted_body":"it's not a claim that it's always the case, to be clear, and obv <em>some</em> threshold of slowness will always cancel out the other benefits.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aIrQtiiTcxA3oKVCcKunGJhoX1YdoIh1nE0B_0yxKxw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728447851830,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$odyNPfittPyCU0Z2Wf-a3sfmjMwUc6ux0YXmoDJmrjE"},
{"content":{"body":"Which is a *lot* by JSC standards ","format":"org.matrix.custom.html","formatted_body":"Which is a <em>lot</em> by JSC standards","m.mentions":{},"m.relates_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE","is_falling_back":true,"m.in_reply_to":{"event_id":"$hpJo70mwyH_2IOvDsYA1S6YTkaaB2cRorMn5Mev9Ci8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728447877036,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$hFKusC3lXb9XTdMNJp_3t6wnXjaFq1cDYIAB7OQj-SA"},
{"content":{"body":"This function would be invalid for inlining from one binding alone","m.mentions":{},"m.relates_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE","is_falling_back":true,"m.in_reply_to":{"event_id":"$hFKusC3lXb9XTdMNJp_3t6wnXjaFq1cDYIAB7OQj-SA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728447892696,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$rFXBFFhB0zxhkn7oqY67xG4AacktmDcGTg8OBx_8NK8"},
{"content":{"body":"I am agreeing with shu","m.mentions":{},"msgtype":"m.text"},"ts":1728447927789,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c9-dK_GC4-GcZC_xDmlR9ZXy-RtiWOZs7IRHu2ER0Nk"},
{"content":{"body":"I think that webapps being slow is the cause of much more pain than webapps being unclear to their maintainers","m.mentions":{},"msgtype":"m.text"},"ts":1728447976405,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PL6f-YslMuaHXUKfIe7KFp3axom8Pv3xsW3Ks3QHz2g"},
{"content":{"body":"> <@ljharb:matrix.org> why not to `const [x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');`?\n\nPulling this into the main channel. This would be sufficiently complex (48 byte codes) that this would be no longer considered for inlining under JSC's current heuristic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>why not to <code>const [x, y] = Optional.some[Symbol.customMatcher](Point[Symbol.customMatcher](p, 'list'), 'list');</code>?</blockquote></mx-reply>Pulling this into the main channel. This would be sufficiently complex (48 byte codes) that this would be no longer considered for inlining under JSC's current heuristic.","m.mentions":{"user_ids":["@ljharb:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE"}},"msgtype":"m.text"},"ts":1728448010677,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$vqV2aq5AG8mN8PNcZevA1xtgKWflSLru7j16zF8Mw5s"},
{"content":{"body":"From one statement","m.mentions":{},"msgtype":"m.text"},"ts":1728448023046,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$LHlsjoS1JkbAARNMt0YwqSqjFzSsB-pWNEm1B-TqveI"},
{"content":{"body":"Which I *don't* think devs would expect","format":"org.matrix.custom.html","formatted_body":"Which I <em>don't</em> think devs would expect","m.mentions":{},"msgtype":"m.text"},"ts":1728448070889,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$mn1URiv2qXw58Cl6cRmGzd51r24FxYx0ScIAVTnbsVo"},
{"content":{"body":"JSC inlining is limited to the statement level?","m.mentions":{},"msgtype":"m.text"},"ts":1728448100583,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7qpLrR0ekJRxtNWBalbXs_6ERrWjxxiBWKS1dgjLES0"},
{"content":{"body":"It's limited by the number of bytes in the instruction stream","m.mentions":{},"msgtype":"m.text"},"ts":1728448118581,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$IRqgkI48-sV7TTI5EZfDFjepJi5gu1ZNdTJNxGhLK8A"},
{"content":{"body":"IIRC, it's 170 bytes","m.mentions":{},"msgtype":"m.text"},"ts":1728448138404,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$f89LjpDyAfJvt1Jdev9XGHM9ecorxJ_brxKFEIN9b7k"},
{"content":{"body":"> <@aclaymore:matrix.org> is it a really bad idea to have a 3rd form of destructuring for array-like?\n> \n> ```\n> const |a, b, c| = multiReturnFunction(); // probably a better token is available\n> // is\n> const { 0: a, 1: b, 2: c } = multiReturnFunction();\n> ```\n\n`const Array(a, b, c) = ...`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24V_iYo2WLYYeVnV2QRx6jWE7NnqTt3C6H4u2p9OOThAE\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br /><p>is it a really bad idea to have a 3rd form of destructuring for array-like?</p>\n<pre><code>const |a, b, c| = multiReturnFunction(); // probably a better token is available\n// is\nconst { 0: a, 1: b, 2: c } = multiReturnFunction();\n</code></pre>\n</blockquote></mx-reply><code data-md=\"`\">const Array(a, b, c) = ...</code>?","m.relates_to":{"m.in_reply_to":{"event_id":"$V_iYo2WLYYeVnV2QRx6jWE7NnqTt3C6H4u2p9OOThAE"}},"msgtype":"m.text"},"ts":1728448232165,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E5MOXtqQ7Fym8RE4h_nJprUzYkzGqqL9p0GFgu3E9Yc"},
{"content":{"body":"If extractors ends up needing to use array-as-object destructuring, then yeah, that's a possibility.","m.mentions":{},"msgtype":"m.text"},"ts":1728448269955,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZSI1xLlmYpFC6n0r20kju4dTdreyYi_kfWDKvH5dac"},
{"content":{"body":" * If extractors end up needing to use array-as-object destructuring, then yeah, that's a possibility.","m.mentions":{},"m.new_content":{"body":"If extractors end up needing to use array-as-object destructuring, then yeah, that's a possibility.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rZSI1xLlmYpFC6n0r20kju4dTdreyYi_kfWDKvH5dac","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728448277155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3_9cj5kiWFKNecHmf36MlyB9Wngf7kEtlkyCQIyPLzc"},
{"content":{"body":"A lot of that is resolving the various properties needed though not the array destructuring","m.mentions":{},"msgtype":"m.text"},"ts":1728448381345,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WE2XMFpbjH2DM3yd_Qe_N8bSn2cFZbkMAVRIKuGphKk"},
{"content":{"body":"I encourage you to look at that bytecode sequence and *really* think about all the subtle work that has to happen to resolve that binding.","format":"org.matrix.custom.html","formatted_body":"I encourage you to look at that bytecode sequence and <em>really</em> think about all the subtle work that has to happen to resolve that binding.","m.mentions":{},"msgtype":"m.text"},"ts":1728448455866,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zp8nXLPuQYVTtk_EIZwLhz7OA4rn4FK4hgzY6V0tgrY"},
{"content":{"body":"i feel like folks haven't really internalized the \"complexity is moved, not removed\" point we tried to make yet","m.mentions":{},"msgtype":"m.text"},"ts":1728448524583,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fAER2Pb4M9IIqkr6l1mYiKXiNNboTzaIX4046DqPM5I"},
{"content":{"body":"And the bytecode for `const [[[x, y]]] = foo` given it results in three lookups to `Symbol.iterator`? I understand extractors do that as well, I'm just curious.","format":"org.matrix.custom.html","formatted_body":"And the bytecode for <code>const [[[x, y]]] = foo</code> given it results in three lookups to <code>Symbol.iterator</code>? I understand extractors do that as well, I'm just curious.","m.mentions":{},"msgtype":"m.text"},"ts":1728448578508,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lERjc7gco2ZoYbjrI2DHIAqDpCD3fuXpMObUAxitfHQ"},
{"content":{"body":"@shuyuguo:matrix.org this could literally be a special form that *does* remove the complexity, different from `const window.Array(a, b, c) = ...`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> this could literally be a special form that <i data-md=\"*\">does</i> remove the complexity, different from <code data-md=\"`\">const window.Array(a, b, c) = ...</code>","msgtype":"m.text"},"ts":1728448596702,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1AtYw6LBLoV_BZtH1LmV1NFEMX0wVKaPwVZhYYxmNbw"},
{"content":{"body":"```","format":"org.matrix.custom.html","formatted_body":"<pre><code></code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$lERjc7gco2ZoYbjrI2DHIAqDpCD3fuXpMObUAxitfHQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$lERjc7gco2ZoYbjrI2DHIAqDpCD3fuXpMObUAxitfHQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728448622068,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$dV3qRInk_6M-wUcQy6JmM35UFj4Y2Opun8qe84zo_bo"},
{"content":{"body":" * >>> const [[[x, y]]] = foo\n<global>#CzC5ob:[0x130538220->0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: [ ]\n[   0] enter\n[   1] mov                dst:loc5, src:Undefined(const0)\n[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:1\n[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2\n[  26] mov                dst:loc10, src:loc6\n[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5\n[  39] mov                dst:loc12, src:loc7\n[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8\n[  53] jfalse             condition:loc9, targetLabel:6(->59)\nSuccessors: [ #3 #2 ]\n\nbb#2\nPredecessors: [ #1 ]\n[  56] mov                dst:loc10, src:Undefined(const0)\nSuccessors: [ #3 ]\n\nbb#3\nPredecessors: [ #1 #2 ]\n[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9\n[  65] mov                dst:loc14, src:loc10\n[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12\n[  78] mov                dst:loc16, src:loc11\n[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15\n[  92] jfalse             condition:loc13, targetLabel:6(->98)\nSuccessors: [ #5 #4 ]\n\nbb#4\nPredecessors: [ #3 ]\n[  95] mov                dst:loc14, src:Undefined(const0)\nSuccessors: [ #5 ]\n\nbb#5\nPredecessors: [ #3 #4 ]\n[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16\n[ 104] mov                dst:loc18, src:loc14\n[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19\n[ 117] mov                dst:loc20, src:loc15\n[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n[ 131] jfalse             condition:loc17, targetLabel:6(->137)\nSuccessors: [ #7 #6 ]\n\nbb#6\nPredecessors: [ #5 ]\n[ 134] mov                dst:loc18, src:Undefined(const0)\nSuccessors: [ #7 ]\n\nbb#7\nPredecessors: [ #5 #6 ]\n[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 152] jtrue              condition:loc17, targetLabel:20(->172)\nSuccessors: [ #9 #8 ]\n\nbb#8\nPredecessors: [ #7 ]\n[ 155] mov                dst:loc20, src:loc15\n[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25\n[ 169] jfalse             condition:loc17, targetLabel:6(->175)\nSuccessors: [ #10 #9 ]\n\nbb#9\nPredecessors: [ #7 #8 ]\n[ 172] mov                dst:loc18, src:Undefined(const0)\nSuccessors: [ #10 ]\n\nbb#10\nPredecessors: [ #8 #9 ]\n[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0\n[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 190] jtrue              condition:loc17, targetLabel:31(->221)\nSuccessors: [ #14 #11 ]\n\nbb#11\nPredecessors: [ #10 ]\n[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26\n[ 199] jundefined_or_null value:loc18, targetLabel:22(->221)\nSuccessors: [ #14 #12 ]\n\nbb#12\nPredecessors: [ #11 ]\n[ 202] mov                dst:loc20, src:loc15\n[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27\n[ 212] is_object          dst:loc21, operand:loc19\n[ 215] jtrue              condition:loc21, targetLabel:6(->221)\nSuccessors: [ #14 #13 ]\n\nbb#13\nPredecessors: [ #12 ]\n[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#14\nPredecessors: [ #10 #11 #12 ]\n[ 221] jtrue              condition:loc13, targetLabel:31(->252)\nSuccessors: [ #18 #15 ]\n\nbb#15\nPredecessors: [ #14 ]\n[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28\n[ 230] jundefined_or_null value:loc14, targetLabel:22(->252)\nSuccessors: [ #18 #16 ]\n\nbb#16\nPredecessors: [ #15 ]\n[ 233] mov                dst:loc16, src:loc11\n[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29\n[ 243] is_object          dst:loc17, operand:loc15\n[ 246] jtrue              condition:loc17, targetLabel:6(->252)\nSuccessors: [ #18 #17 ]\n\nbb#17\nPredecessors: [ #16 ]\n[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#18\nPredecessors: [ #14 #15 #16 ]\n[ 252] jtrue              condition:loc9, targetLabel:31(->283)\nSuccessors: [ #22 #19 ]\n\nbb#19\nPredecessors: [ #18 ]\n[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30\n[ 261] jundefined_or_null value:loc10, targetLabel:22(->283)\nSuccessors: [ #22 #20 ]\n\nbb#20\nPredecessors: [ #19 ]\n[ 264] mov                dst:loc12, src:loc7\n[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31\n[ 274] is_object          dst:loc13, operand:loc11\n[ 277] jtrue              condition:loc13, targetLabel:6(->283)\nSuccessors: [ #22 #21 ]\n\nbb#21\nPredecessors: [ #20 ]\n[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#22\nPredecessors: [ #18 #19 #20 ]\n[ 283] end                value:loc5\nSuccessors: [ ]\n\n\nIdentifiers:\n  id0 = foo\n  id1 = Symbol.iterator\n  id2 = x\n  id3 = y\n  id4 = return\n\nConstants:\n   k0 = Undefined\n   k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976\n","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<blockquote>\n<blockquote>\n<p>const [[[x, y]]] = foo<br>&lt;global&gt;#CzC5ob:[0x130538220-&gt;0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>bb#1<br>Predecessors: [ ]<br>[   0] enter<br>[   1] mov                dst:loc5, src:Undefined(const0)<br>[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0<br>[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:1<br>[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2<br>[  26] mov                dst:loc10, src:loc6<br>[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5<br>[  39] mov                dst:loc12, src:loc7<br>[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8<br>[  53] jfalse             condition:loc9, targetLabel:6(-&gt;59)<br>Successors: [ #3 #2 ]</p>\n<p>bb#2<br>Predecessors: [ #1 ]<br>[  56] mov                dst:loc10, src:Undefined(const0)<br>Successors: [ #3 ]</p>\n<p>bb#3<br>Predecessors: [ #1 #2 ]<br>[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9<br>[  65] mov                dst:loc14, src:loc10<br>[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12<br>[  78] mov                dst:loc16, src:loc11<br>[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15<br>[  92] jfalse             condition:loc13, targetLabel:6(-&gt;98)<br>Successors: [ #5 #4 ]</p>\n<p>bb#4<br>Predecessors: [ #3 ]<br>[  95] mov                dst:loc14, src:Undefined(const0)<br>Successors: [ #5 ]</p>\n<p>bb#5<br>Predecessors: [ #3 #4 ]<br>[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16<br>[ 104] mov                dst:loc18, src:loc14<br>[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19<br>[ 117] mov                dst:loc20, src:loc15<br>[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22<br>[ 131] jfalse             condition:loc17, targetLabel:6(-&gt;137)<br>Successors: [ #7 #6 ]</p>\n<p>bb#6<br>Predecessors: [ #5 ]<br>[ 134] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #7 ]</p>\n<p>bb#7<br>Predecessors: [ #5 #6 ]<br>[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0<br>[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 152] jtrue              condition:loc17, targetLabel:20(-&gt;172)<br>Successors: [ #9 #8 ]</p>\n<p>bb#8<br>Predecessors: [ #7 ]<br>[ 155] mov                dst:loc20, src:loc15<br>[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25<br>[ 169] jfalse             condition:loc17, targetLabel:6(-&gt;175)<br>Successors: [ #10 #9 ]</p>\n<p>bb#9<br>Predecessors: [ #7 #8 ]<br>[ 172] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #10 ]</p>\n<p>bb#10<br>Predecessors: [ #8 #9 ]<br>[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0<br>[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 190] jtrue              condition:loc17, targetLabel:31(-&gt;221)<br>Successors: [ #14 #11 ]</p>\n<p>bb#11<br>Predecessors: [ #10 ]<br>[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26<br>[ 199] jundefined_or_null value:loc18, targetLabel:22(-&gt;221)<br>Successors: [ #14 #12 ]</p>\n<p>bb#12<br>Predecessors: [ #11 ]<br>[ 202] mov                dst:loc20, src:loc15<br>[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27<br>[ 212] is_object          dst:loc21, operand:loc19<br>[ 215] jtrue              condition:loc21, targetLabel:6(-&gt;221)<br>Successors: [ #14 #13 ]</p>\n<p>bb#13<br>Predecessors: [ #12 ]<br>[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#14<br>Predecessors: [ #10 #11 #12 ]<br>[ 221] jtrue              condition:loc13, targetLabel:31(-&gt;252)<br>Successors: [ #18 #15 ]</p>\n<p>bb#15<br>Predecessors: [ #14 ]<br>[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28<br>[ 230] jundefined_or_null value:loc14, targetLabel:22(-&gt;252)<br>Successors: [ #18 #16 ]</p>\n<p>bb#16<br>Predecessors: [ #15 ]<br>[ 233] mov                dst:loc16, src:loc11<br>[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29<br>[ 243] is_object          dst:loc17, operand:loc15<br>[ 246] jtrue              condition:loc17, targetLabel:6(-&gt;252)<br>Successors: [ #18 #17 ]</p>\n<p>bb#17<br>Predecessors: [ #16 ]<br>[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#18<br>Predecessors: [ #14 #15 #16 ]<br>[ 252] jtrue              condition:loc9, targetLabel:31(-&gt;283)<br>Successors: [ #22 #19 ]</p>\n<p>bb#19<br>Predecessors: [ #18 ]<br>[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30<br>[ 261] jundefined_or_null value:loc10, targetLabel:22(-&gt;283)<br>Successors: [ #22 #20 ]</p>\n<p>bb#20<br>Predecessors: [ #19 ]<br>[ 264] mov                dst:loc12, src:loc7<br>[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31<br>[ 274] is_object          dst:loc13, operand:loc11<br>[ 277] jtrue              condition:loc13, targetLabel:6(-&gt;283)<br>Successors: [ #22 #21 ]</p>\n<p>bb#21<br>Predecessors: [ #20 ]<br>[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#22<br>Predecessors: [ #18 #19 #20 ]<br>[ 283] end                value:loc5<br>Successors: [ ]</p>\n<p>Identifiers:<br>id0 = foo<br>id1 = Symbol.iterator<br>id2 = x<br>id3 = y<br>id4 = return</p>\n<p>Constants:<br>k0 = Undefined<br>k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.new_content":{"body":">>> const [[[x, y]]] = foo\n<global>#CzC5ob:[0x130538220->0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: [ ]\n[   0] enter\n[   1] mov                dst:loc5, src:Undefined(const0)\n[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:1\n[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2\n[  26] mov                dst:loc10, src:loc6\n[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5\n[  39] mov                dst:loc12, src:loc7\n[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8\n[  53] jfalse             condition:loc9, targetLabel:6(->59)\nSuccessors: [ #3 #2 ]\n\nbb#2\nPredecessors: [ #1 ]\n[  56] mov                dst:loc10, src:Undefined(const0)\nSuccessors: [ #3 ]\n\nbb#3\nPredecessors: [ #1 #2 ]\n[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9\n[  65] mov                dst:loc14, src:loc10\n[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12\n[  78] mov                dst:loc16, src:loc11\n[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15\n[  92] jfalse             condition:loc13, targetLabel:6(->98)\nSuccessors: [ #5 #4 ]\n\nbb#4\nPredecessors: [ #3 ]\n[  95] mov                dst:loc14, src:Undefined(const0)\nSuccessors: [ #5 ]\n\nbb#5\nPredecessors: [ #3 #4 ]\n[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16\n[ 104] mov                dst:loc18, src:loc14\n[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19\n[ 117] mov                dst:loc20, src:loc15\n[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n[ 131] jfalse             condition:loc17, targetLabel:6(->137)\nSuccessors: [ #7 #6 ]\n\nbb#6\nPredecessors: [ #5 ]\n[ 134] mov                dst:loc18, src:Undefined(const0)\nSuccessors: [ #7 ]\n\nbb#7\nPredecessors: [ #5 #6 ]\n[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 152] jtrue              condition:loc17, targetLabel:20(->172)\nSuccessors: [ #9 #8 ]\n\nbb#8\nPredecessors: [ #7 ]\n[ 155] mov                dst:loc20, src:loc15\n[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25\n[ 169] jfalse             condition:loc17, targetLabel:6(->175)\nSuccessors: [ #10 #9 ]\n\nbb#9\nPredecessors: [ #7 #8 ]\n[ 172] mov                dst:loc18, src:Undefined(const0)\nSuccessors: [ #10 ]\n\nbb#10\nPredecessors: [ #8 #9 ]\n[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0\n[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n[ 190] jtrue              condition:loc17, targetLabel:31(->221)\nSuccessors: [ #14 #11 ]\n\nbb#11\nPredecessors: [ #10 ]\n[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26\n[ 199] jundefined_or_null value:loc18, targetLabel:22(->221)\nSuccessors: [ #14 #12 ]\n\nbb#12\nPredecessors: [ #11 ]\n[ 202] mov                dst:loc20, src:loc15\n[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27\n[ 212] is_object          dst:loc21, operand:loc19\n[ 215] jtrue              condition:loc21, targetLabel:6(->221)\nSuccessors: [ #14 #13 ]\n\nbb#13\nPredecessors: [ #12 ]\n[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#14\nPredecessors: [ #10 #11 #12 ]\n[ 221] jtrue              condition:loc13, targetLabel:31(->252)\nSuccessors: [ #18 #15 ]\n\nbb#15\nPredecessors: [ #14 ]\n[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28\n[ 230] jundefined_or_null value:loc14, targetLabel:22(->252)\nSuccessors: [ #18 #16 ]\n\nbb#16\nPredecessors: [ #15 ]\n[ 233] mov                dst:loc16, src:loc11\n[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29\n[ 243] is_object          dst:loc17, operand:loc15\n[ 246] jtrue              condition:loc17, targetLabel:6(->252)\nSuccessors: [ #18 #17 ]\n\nbb#17\nPredecessors: [ #16 ]\n[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#18\nPredecessors: [ #14 #15 #16 ]\n[ 252] jtrue              condition:loc9, targetLabel:31(->283)\nSuccessors: [ #22 #19 ]\n\nbb#19\nPredecessors: [ #18 ]\n[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30\n[ 261] jundefined_or_null value:loc10, targetLabel:22(->283)\nSuccessors: [ #22 #20 ]\n\nbb#20\nPredecessors: [ #19 ]\n[ 264] mov                dst:loc12, src:loc7\n[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31\n[ 274] is_object          dst:loc13, operand:loc11\n[ 277] jtrue              condition:loc13, targetLabel:6(->283)\nSuccessors: [ #22 #21 ]\n\nbb#21\nPredecessors: [ #20 ]\n[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: [ ]\n\nbb#22\nPredecessors: [ #18 #19 #20 ]\n[ 283] end                value:loc5\nSuccessors: [ ]\n\n\nIdentifiers:\n  id0 = foo\n  id1 = Symbol.iterator\n  id2 = x\n  id3 = y\n  id4 = return\n\nConstants:\n   k0 = Undefined\n   k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<blockquote>\n<blockquote>\n<p>const [[[x, y]]] = foo<br>&lt;global&gt;#CzC5ob:[0x130538220-&gt;0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>bb#1<br>Predecessors: [ ]<br>[   0] enter<br>[   1] mov                dst:loc5, src:Undefined(const0)<br>[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0<br>[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:1<br>[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2<br>[  26] mov                dst:loc10, src:loc6<br>[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5<br>[  39] mov                dst:loc12, src:loc7<br>[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8<br>[  53] jfalse             condition:loc9, targetLabel:6(-&gt;59)<br>Successors: [ #3 #2 ]</p>\n<p>bb#2<br>Predecessors: [ #1 ]<br>[  56] mov                dst:loc10, src:Undefined(const0)<br>Successors: [ #3 ]</p>\n<p>bb#3<br>Predecessors: [ #1 #2 ]<br>[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9<br>[  65] mov                dst:loc14, src:loc10<br>[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12<br>[  78] mov                dst:loc16, src:loc11<br>[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15<br>[  92] jfalse             condition:loc13, targetLabel:6(-&gt;98)<br>Successors: [ #5 #4 ]</p>\n<p>bb#4<br>Predecessors: [ #3 ]<br>[  95] mov                dst:loc14, src:Undefined(const0)<br>Successors: [ #5 ]</p>\n<p>bb#5<br>Predecessors: [ #3 #4 ]<br>[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16<br>[ 104] mov                dst:loc18, src:loc14<br>[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19<br>[ 117] mov                dst:loc20, src:loc15<br>[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22<br>[ 131] jfalse             condition:loc17, targetLabel:6(-&gt;137)<br>Successors: [ #7 #6 ]</p>\n<p>bb#6<br>Predecessors: [ #5 ]<br>[ 134] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #7 ]</p>\n<p>bb#7<br>Predecessors: [ #5 #6 ]<br>[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0<br>[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 152] jtrue              condition:loc17, targetLabel:20(-&gt;172)<br>Successors: [ #9 #8 ]</p>\n<p>bb#8<br>Predecessors: [ #7 ]<br>[ 155] mov                dst:loc20, src:loc15<br>[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25<br>[ 169] jfalse             condition:loc17, targetLabel:6(-&gt;175)<br>Successors: [ #10 #9 ]</p>\n<p>bb#9<br>Predecessors: [ #7 #8 ]<br>[ 172] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #10 ]</p>\n<p>bb#10<br>Predecessors: [ #8 #9 ]<br>[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0<br>[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 190] jtrue              condition:loc17, targetLabel:31(-&gt;221)<br>Successors: [ #14 #11 ]</p>\n<p>bb#11<br>Predecessors: [ #10 ]<br>[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26<br>[ 199] jundefined_or_null value:loc18, targetLabel:22(-&gt;221)<br>Successors: [ #14 #12 ]</p>\n<p>bb#12<br>Predecessors: [ #11 ]<br>[ 202] mov                dst:loc20, src:loc15<br>[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27<br>[ 212] is_object          dst:loc21, operand:loc19<br>[ 215] jtrue              condition:loc21, targetLabel:6(-&gt;221)<br>Successors: [ #14 #13 ]</p>\n<p>bb#13<br>Predecessors: [ #12 ]<br>[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#14<br>Predecessors: [ #10 #11 #12 ]<br>[ 221] jtrue              condition:loc13, targetLabel:31(-&gt;252)<br>Successors: [ #18 #15 ]</p>\n<p>bb#15<br>Predecessors: [ #14 ]<br>[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28<br>[ 230] jundefined_or_null value:loc14, targetLabel:22(-&gt;252)<br>Successors: [ #18 #16 ]</p>\n<p>bb#16<br>Predecessors: [ #15 ]<br>[ 233] mov                dst:loc16, src:loc11<br>[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29<br>[ 243] is_object          dst:loc17, operand:loc15<br>[ 246] jtrue              condition:loc17, targetLabel:6(-&gt;252)<br>Successors: [ #18 #17 ]</p>\n<p>bb#17<br>Predecessors: [ #16 ]<br>[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#18<br>Predecessors: [ #14 #15 #16 ]<br>[ 252] jtrue              condition:loc9, targetLabel:31(-&gt;283)<br>Successors: [ #22 #19 ]</p>\n<p>bb#19<br>Predecessors: [ #18 ]<br>[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30<br>[ 261] jundefined_or_null value:loc10, targetLabel:22(-&gt;283)<br>Successors: [ #22 #20 ]</p>\n<p>bb#20<br>Predecessors: [ #19 ]<br>[ 264] mov                dst:loc12, src:loc7<br>[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31<br>[ 274] is_object          dst:loc13, operand:loc11<br>[ 277] jtrue              condition:loc13, targetLabel:6(-&gt;283)<br>Successors: [ #22 #21 ]</p>\n<p>bb#21<br>Predecessors: [ #20 ]<br>[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#22<br>Predecessors: [ #18 #19 #20 ]<br>[ 283] end                value:loc5<br>Successors: [ ]</p>\n<p>Identifiers:<br>id0 = foo<br>id1 = Symbol.iterator<br>id2 = x<br>id3 = y<br>id4 = return</p>\n<p>Constants:<br>k0 = Undefined<br>k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dV3qRInk_6M-wUcQy6JmM35UFj4Y2Opun8qe84zo_bo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728448628249,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$yfSez1amzpSE7JkoMSOBxRHTDxdxc8cHYSMcKeEEpe8"},
{"content":{"body":" *  const \\[\\[\\[x, y\\]\\]\\] = foo\n\\<global>#CzC5ob:\\[0x130538220->0x10e071488, NoneGlobal, 285\\]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: \\[ \\]\n\\[   0\\] enter\n\\[   1\\] mov                dst:loc5, src:Undefined(const0)\n\\[   4\\] resolve\\_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n\\[  11\\] get\\_from\\_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048\\<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:1\n\\[  20\\] get\\_by\\_id          dst:loc9, base:loc6, property:1, valueProfile:2\n\\[  26\\] mov                dst:loc10, src:loc6\n\\[  29\\] iterator\\_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5\n\\[  39\\] mov                dst:loc12, src:loc7\n\\[  42\\] iterator\\_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8\n\\[  53\\] jfalse             condition:loc9, targetLabel:6(->59)\nSuccessors: \\[ #3 #2 \\]\n\nbb#2\nPredecessors: \\[ #1 \\]\n\\[  56\\] mov                dst:loc10, src:Undefined(const0)\nSuccessors: \\[ #3 \\]\n\nbb#3\nPredecessors: \\[ #1 #2 \\]\n\\[  59\\] get\\_by\\_id          dst:loc13, base:loc10, property:1, valueProfile:9\n\\[  65\\] mov                dst:loc14, src:loc10\n\\[  68\\] iterator\\_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12\n\\[  78\\] mov                dst:loc16, src:loc11\n\\[  81\\] iterator\\_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15\n\\[  92\\] jfalse             condition:loc13, targetLabel:6(->98)\nSuccessors: \\[ #5 #4 \\]\n\nbb#4\nPredecessors: \\[ #3 \\]\n\\[  95\\] mov                dst:loc14, src:Undefined(const0)\nSuccessors: \\[ #5 \\]\n\nbb#5\nPredecessors: \\[ #3 #4 \\]\n\\[  98\\] get\\_by\\_id          dst:loc17, base:loc14, property:1, valueProfile:16\n\\[ 104\\] mov                dst:loc18, src:loc14\n\\[ 107\\] iterator\\_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19\n\\[ 117\\] mov                dst:loc20, src:loc15\n\\[ 120\\] iterator\\_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n\\[ 131\\] jfalse             condition:loc17, targetLabel:6(->137)\nSuccessors: \\[ #7 #6 \\]\n\nbb#6\nPredecessors: \\[ #5 \\]\n\\[ 134\\] mov                dst:loc18, src:Undefined(const0)\nSuccessors: \\[ #7 \\]\n\nbb#7\nPredecessors: \\[ #5 #6 \\]\n\\[ 137\\] resolve\\_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n\\[ 144\\] put\\_to\\_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600\\<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n\\[ 152\\] jtrue              condition:loc17, targetLabel:20(->172)\nSuccessors: \\[ #9 #8 \\]\n\nbb#8\nPredecessors: \\[ #7 \\]\n\\[ 155\\] mov                dst:loc20, src:loc15\n\\[ 158\\] iterator\\_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25\n\\[ 169\\] jfalse             condition:loc17, targetLabel:6(->175)\nSuccessors: \\[ #10 #9 \\]\n\nbb#9\nPredecessors: \\[ #7 #8 \\]\n\\[ 172\\] mov                dst:loc18, src:Undefined(const0)\nSuccessors: \\[ #10 \\]\n\nbb#10\nPredecessors: \\[ #8 #9 \\]\n\\[ 175\\] resolve\\_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0\n\\[ 182\\] put\\_to\\_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600\\<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n\\[ 190\\] jtrue              condition:loc17, targetLabel:31(->221)\nSuccessors: \\[ #14 #11 \\]\n\nbb#11\nPredecessors: \\[ #10 \\]\n\\[ 193\\] get\\_by\\_id          dst:loc18, base:loc15, property:4, valueProfile:26\n\\[ 199\\] jundefined\\_or\\_null value:loc18, targetLabel:22(->221)\nSuccessors: \\[ #14 #12 \\]\n\nbb#12\nPredecessors: \\[ #11 \\]\n\\[ 202\\] mov                dst:loc20, src:loc15\n\\[ 205\\] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27\n\\[ 212\\] is\\_object          dst:loc21, operand:loc19\n\\[ 215\\] jtrue              condition:loc21, targetLabel:6(->221)\nSuccessors: \\[ #14 #13 \\]\n\nbb#13\nPredecessors: \\[ #12 \\]\n\\[ 218\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#14\nPredecessors: \\[ #10 #11 #12 \\]\n\\[ 221\\] jtrue              condition:loc13, targetLabel:31(->252)\nSuccessors: \\[ #18 #15 \\]\n\nbb#15\nPredecessors: \\[ #14 \\]\n\\[ 224\\] get\\_by\\_id          dst:loc14, base:loc11, property:4, valueProfile:28\n\\[ 230\\] jundefined\\_or\\_null value:loc14, targetLabel:22(->252)\nSuccessors: \\[ #18 #16 \\]\n\nbb#16\nPredecessors: \\[ #15 \\]\n\\[ 233\\] mov                dst:loc16, src:loc11\n\\[ 236\\] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29\n\\[ 243\\] is\\_object          dst:loc17, operand:loc15\n\\[ 246\\] jtrue              condition:loc17, targetLabel:6(->252)\nSuccessors: \\[ #18 #17 \\]\n\nbb#17\nPredecessors: \\[ #16 \\]\n\\[ 249\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#18\nPredecessors: \\[ #14 #15 #16 \\]\n\\[ 252\\] jtrue              condition:loc9, targetLabel:31(->283)\nSuccessors: \\[ #22 #19 \\]\n\nbb#19\nPredecessors: \\[ #18 \\]\n\\[ 255\\] get\\_by\\_id          dst:loc10, base:loc7, property:4, valueProfile:30\n\\[ 261\\] jundefined\\_or\\_null value:loc10, targetLabel:22(->283)\nSuccessors: \\[ #22 #20 \\]\n\nbb#20\nPredecessors: \\[ #19 \\]\n\\[ 264\\] mov                dst:loc12, src:loc7\n\\[ 267\\] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31\n\\[ 274\\] is\\_object          dst:loc13, operand:loc11\n\\[ 277\\] jtrue              condition:loc13, targetLabel:6(->283)\nSuccessors: \\[ #22 #21 \\]\n\nbb#21\nPredecessors: \\[ #20 \\]\n\\[ 280\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#22\nPredecessors: \\[ #18 #19 #20 \\]\n\\[ 283\\] end                value:loc5\nSuccessors: \\[ \\]\n\nIdentifiers:\nid0 = foo\nid1 = Symbol.iterator\nid2 = x\nid3 = y\nid4 = return\n\nConstants:\nk0 = Undefined\nk1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976","format":"org.matrix.custom.html","formatted_body":" * <p>const [[[x, y]]] = foo<br>&lt;global&gt;#CzC5ob:[0x130538220-&gt;0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4</p>\n<p>bb#1<br>Predecessors: [ ]<br>[   0] enter<br>[   1] mov                dst:loc5, src:Undefined(const0)<br>[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0<br>[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:1<br>[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2<br>[  26] mov                dst:loc10, src:loc6<br>[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5<br>[  39] mov                dst:loc12, src:loc7<br>[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8<br>[  53] jfalse             condition:loc9, targetLabel:6(-&gt;59)<br>Successors: [ #3 #2 ]</p>\n<p>bb#2<br>Predecessors: [ #1 ]<br>[  56] mov                dst:loc10, src:Undefined(const0)<br>Successors: [ #3 ]</p>\n<p>bb#3<br>Predecessors: [ #1 #2 ]<br>[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9<br>[  65] mov                dst:loc14, src:loc10<br>[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12<br>[  78] mov                dst:loc16, src:loc11<br>[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15<br>[  92] jfalse             condition:loc13, targetLabel:6(-&gt;98)<br>Successors: [ #5 #4 ]</p>\n<p>bb#4<br>Predecessors: [ #3 ]<br>[  95] mov                dst:loc14, src:Undefined(const0)<br>Successors: [ #5 ]</p>\n<p>bb#5<br>Predecessors: [ #3 #4 ]<br>[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16<br>[ 104] mov                dst:loc18, src:loc14<br>[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19<br>[ 117] mov                dst:loc20, src:loc15<br>[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22<br>[ 131] jfalse             condition:loc17, targetLabel:6(-&gt;137)<br>Successors: [ #7 #6 ]</p>\n<p>bb#6<br>Predecessors: [ #5 ]<br>[ 134] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #7 ]</p>\n<p>bb#7<br>Predecessors: [ #5 #6 ]<br>[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0<br>[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 152] jtrue              condition:loc17, targetLabel:20(-&gt;172)<br>Successors: [ #9 #8 ]</p>\n<p>bb#8<br>Predecessors: [ #7 ]<br>[ 155] mov                dst:loc20, src:loc15<br>[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25<br>[ 169] jfalse             condition:loc17, targetLabel:6(-&gt;175)<br>Successors: [ #10 #9 ]</p>\n<p>bb#9<br>Predecessors: [ #7 #8 ]<br>[ 172] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #10 ]</p>\n<p>bb#10<br>Predecessors: [ #8 #9 ]<br>[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0<br>[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 190] jtrue              condition:loc17, targetLabel:31(-&gt;221)<br>Successors: [ #14 #11 ]</p>\n<p>bb#11<br>Predecessors: [ #10 ]<br>[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26<br>[ 199] jundefined_or_null value:loc18, targetLabel:22(-&gt;221)<br>Successors: [ #14 #12 ]</p>\n<p>bb#12<br>Predecessors: [ #11 ]<br>[ 202] mov                dst:loc20, src:loc15<br>[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27<br>[ 212] is_object          dst:loc21, operand:loc19<br>[ 215] jtrue              condition:loc21, targetLabel:6(-&gt;221)<br>Successors: [ #14 #13 ]</p>\n<p>bb#13<br>Predecessors: [ #12 ]<br>[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#14<br>Predecessors: [ #10 #11 #12 ]<br>[ 221] jtrue              condition:loc13, targetLabel:31(-&gt;252)<br>Successors: [ #18 #15 ]</p>\n<p>bb#15<br>Predecessors: [ #14 ]<br>[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28<br>[ 230] jundefined_or_null value:loc14, targetLabel:22(-&gt;252)<br>Successors: [ #18 #16 ]</p>\n<p>bb#16<br>Predecessors: [ #15 ]<br>[ 233] mov                dst:loc16, src:loc11<br>[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29<br>[ 243] is_object          dst:loc17, operand:loc15<br>[ 246] jtrue              condition:loc17, targetLabel:6(-&gt;252)<br>Successors: [ #18 #17 ]</p>\n<p>bb#17<br>Predecessors: [ #16 ]<br>[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#18<br>Predecessors: [ #14 #15 #16 ]<br>[ 252] jtrue              condition:loc9, targetLabel:31(-&gt;283)<br>Successors: [ #22 #19 ]</p>\n<p>bb#19<br>Predecessors: [ #18 ]<br>[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30<br>[ 261] jundefined_or_null value:loc10, targetLabel:22(-&gt;283)<br>Successors: [ #22 #20 ]</p>\n<p>bb#20<br>Predecessors: [ #19 ]<br>[ 264] mov                dst:loc12, src:loc7<br>[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31<br>[ 274] is_object          dst:loc13, operand:loc11<br>[ 277] jtrue              condition:loc13, targetLabel:6(-&gt;283)<br>Successors: [ #22 #21 ]</p>\n<p>bb#21<br>Predecessors: [ #20 ]<br>[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#22<br>Predecessors: [ #18 #19 #20 ]<br>[ 283] end                value:loc5<br>Successors: [ ]</p>\n<p>Identifiers:<br>id0 = foo<br>id1 = Symbol.iterator<br>id2 = x<br>id3 = y<br>id4 = return</p>\n<p>Constants:<br>k0 = Undefined<br>k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976</p>\n","m.mentions":{},"m.new_content":{"body":" const \\[\\[\\[x, y\\]\\]\\] = foo\n\\<global>#CzC5ob:\\[0x130538220->0x10e071488, NoneGlobal, 285\\]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4\n\nbb#1\nPredecessors: \\[ \\]\n\\[   0\\] enter\n\\[   1\\] mov                dst:loc5, src:Undefined(const0)\n\\[   4\\] resolve\\_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0\n\\[  11\\] get\\_from\\_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048\\<ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode>, localScopeDepth:0, offset:0, valueProfile:1\n\\[  20\\] get\\_by\\_id          dst:loc9, base:loc6, property:1, valueProfile:2\n\\[  26\\] mov                dst:loc10, src:loc6\n\\[  29\\] iterator\\_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5\n\\[  39\\] mov                dst:loc12, src:loc7\n\\[  42\\] iterator\\_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8\n\\[  53\\] jfalse             condition:loc9, targetLabel:6(->59)\nSuccessors: \\[ #3 #2 \\]\n\nbb#2\nPredecessors: \\[ #1 \\]\n\\[  56\\] mov                dst:loc10, src:Undefined(const0)\nSuccessors: \\[ #3 \\]\n\nbb#3\nPredecessors: \\[ #1 #2 \\]\n\\[  59\\] get\\_by\\_id          dst:loc13, base:loc10, property:1, valueProfile:9\n\\[  65\\] mov                dst:loc14, src:loc10\n\\[  68\\] iterator\\_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12\n\\[  78\\] mov                dst:loc16, src:loc11\n\\[  81\\] iterator\\_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15\n\\[  92\\] jfalse             condition:loc13, targetLabel:6(->98)\nSuccessors: \\[ #5 #4 \\]\n\nbb#4\nPredecessors: \\[ #3 \\]\n\\[  95\\] mov                dst:loc14, src:Undefined(const0)\nSuccessors: \\[ #5 \\]\n\nbb#5\nPredecessors: \\[ #3 #4 \\]\n\\[  98\\] get\\_by\\_id          dst:loc17, base:loc14, property:1, valueProfile:16\n\\[ 104\\] mov                dst:loc18, src:loc14\n\\[ 107\\] iterator\\_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19\n\\[ 117\\] mov                dst:loc20, src:loc15\n\\[ 120\\] iterator\\_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22\n\\[ 131\\] jfalse             condition:loc17, targetLabel:6(->137)\nSuccessors: \\[ #7 #6 \\]\n\nbb#6\nPredecessors: \\[ #5 \\]\n\\[ 134\\] mov                dst:loc18, src:Undefined(const0)\nSuccessors: \\[ #7 \\]\n\nbb#7\nPredecessors: \\[ #5 #6 \\]\n\\[ 137\\] resolve\\_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0\n\\[ 144\\] put\\_to\\_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600\\<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n\\[ 152\\] jtrue              condition:loc17, targetLabel:20(->172)\nSuccessors: \\[ #9 #8 \\]\n\nbb#8\nPredecessors: \\[ #7 \\]\n\\[ 155\\] mov                dst:loc20, src:loc15\n\\[ 158\\] iterator\\_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25\n\\[ 169\\] jfalse             condition:loc17, targetLabel:6(->175)\nSuccessors: \\[ #10 #9 \\]\n\nbb#9\nPredecessors: \\[ #7 #8 \\]\n\\[ 172\\] mov                dst:loc18, src:Undefined(const0)\nSuccessors: \\[ #10 \\]\n\nbb#10\nPredecessors: \\[ #8 #9 \\]\n\\[ 175\\] resolve\\_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0\n\\[ 182\\] put\\_to\\_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600\\<DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode>, symbolTableOrScopeDepth:0, offset:0\n\\[ 190\\] jtrue              condition:loc17, targetLabel:31(->221)\nSuccessors: \\[ #14 #11 \\]\n\nbb#11\nPredecessors: \\[ #10 \\]\n\\[ 193\\] get\\_by\\_id          dst:loc18, base:loc15, property:4, valueProfile:26\n\\[ 199\\] jundefined\\_or\\_null value:loc18, targetLabel:22(->221)\nSuccessors: \\[ #14 #12 \\]\n\nbb#12\nPredecessors: \\[ #11 \\]\n\\[ 202\\] mov                dst:loc20, src:loc15\n\\[ 205\\] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27\n\\[ 212\\] is\\_object          dst:loc21, operand:loc19\n\\[ 215\\] jtrue              condition:loc21, targetLabel:6(->221)\nSuccessors: \\[ #14 #13 \\]\n\nbb#13\nPredecessors: \\[ #12 \\]\n\\[ 218\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#14\nPredecessors: \\[ #10 #11 #12 \\]\n\\[ 221\\] jtrue              condition:loc13, targetLabel:31(->252)\nSuccessors: \\[ #18 #15 \\]\n\nbb#15\nPredecessors: \\[ #14 \\]\n\\[ 224\\] get\\_by\\_id          dst:loc14, base:loc11, property:4, valueProfile:28\n\\[ 230\\] jundefined\\_or\\_null value:loc14, targetLabel:22(->252)\nSuccessors: \\[ #18 #16 \\]\n\nbb#16\nPredecessors: \\[ #15 \\]\n\\[ 233\\] mov                dst:loc16, src:loc11\n\\[ 236\\] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29\n\\[ 243\\] is\\_object          dst:loc17, operand:loc15\n\\[ 246\\] jtrue              condition:loc17, targetLabel:6(->252)\nSuccessors: \\[ #18 #17 \\]\n\nbb#17\nPredecessors: \\[ #16 \\]\n\\[ 249\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#18\nPredecessors: \\[ #14 #15 #16 \\]\n\\[ 252\\] jtrue              condition:loc9, targetLabel:31(->283)\nSuccessors: \\[ #22 #19 \\]\n\nbb#19\nPredecessors: \\[ #18 \\]\n\\[ 255\\] get\\_by\\_id          dst:loc10, base:loc7, property:4, valueProfile:30\n\\[ 261\\] jundefined\\_or\\_null value:loc10, targetLabel:22(->283)\nSuccessors: \\[ #22 #20 \\]\n\nbb#20\nPredecessors: \\[ #19 \\]\n\\[ 264\\] mov                dst:loc12, src:loc7\n\\[ 267\\] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31\n\\[ 274\\] is\\_object          dst:loc13, operand:loc11\n\\[ 277\\] jtrue              condition:loc13, targetLabel:6(->283)\nSuccessors: \\[ #22 #21 \\]\n\nbb#21\nPredecessors: \\[ #20 \\]\n\\[ 280\\] throw\\_static\\_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError\nSuccessors: \\[ \\]\n\nbb#22\nPredecessors: \\[ #18 #19 #20 \\]\n\\[ 283\\] end                value:loc5\nSuccessors: \\[ \\]\n\nIdentifiers:\nid0 = foo\nid1 = Symbol.iterator\nid2 = x\nid3 = y\nid4 = return\n\nConstants:\nk0 = Undefined\nk1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976","format":"org.matrix.custom.html","formatted_body":"<p>const [[[x, y]]] = foo<br>&lt;global&gt;#CzC5ob:[0x130538220-&gt;0x10e071488, NoneGlobal, 285]: 59 instructions (0 16-bit instructions, 0 32-bit instructions, 22 instructions with metadata); 381 bytes (96 metadata bytes); 1 parameter(s); 26 callee register(s); 5 variable(s); scope at loc4</p>\n<p>bb#1<br>Predecessors: [ ]<br>[   0] enter<br>[   1] mov                dst:loc5, src:Undefined(const0)<br>[   4] resolve_scope      dst:loc6, scope:loc4, var:0, resolveType:GlobalProperty, localScopeDepth:0<br>[  11] get_from_scope     dst:loc6, scope:loc6, var:0, getPutInfo:2048&lt;ThrowIfNotFound|GlobalProperty|NotInitialization|NotStrictMode&gt;, localScopeDepth:0, offset:0, valueProfile:1<br>[  20] get_by_id          dst:loc9, base:loc6, property:1, valueProfile:2<br>[  26] mov                dst:loc10, src:loc6<br>[  29] iterator_open      iterator:loc7, next:loc8, symbolIterator:loc9, iterable:loc10, stackOffset:16, iterableValueProfile:3, iteratorValueProfile:4, nextValueProfile:5<br>[  39] mov                dst:loc12, src:loc7<br>[  42] iterator_next      done:loc9, value:loc10, iterable:loc6, next:loc8, iterator:loc12, stackOffset:18, nextResultValueProfile:6, doneValueProfile:7, valueValueProfile:8<br>[  53] jfalse             condition:loc9, targetLabel:6(-&gt;59)<br>Successors: [ #3 #2 ]</p>\n<p>bb#2<br>Predecessors: [ #1 ]<br>[  56] mov                dst:loc10, src:Undefined(const0)<br>Successors: [ #3 ]</p>\n<p>bb#3<br>Predecessors: [ #1 #2 ]<br>[  59] get_by_id          dst:loc13, base:loc10, property:1, valueProfile:9<br>[  65] mov                dst:loc14, src:loc10<br>[  68] iterator_open      iterator:loc11, next:loc12, symbolIterator:loc13, iterable:loc14, stackOffset:20, iterableValueProfile:10, iteratorValueProfile:11, nextValueProfile:12<br>[  78] mov                dst:loc16, src:loc11<br>[  81] iterator_next      done:loc13, value:loc14, iterable:loc10, next:loc12, iterator:loc16, stackOffset:22, nextResultValueProfile:13, doneValueProfile:14, valueValueProfile:15<br>[  92] jfalse             condition:loc13, targetLabel:6(-&gt;98)<br>Successors: [ #5 #4 ]</p>\n<p>bb#4<br>Predecessors: [ #3 ]<br>[  95] mov                dst:loc14, src:Undefined(const0)<br>Successors: [ #5 ]</p>\n<p>bb#5<br>Predecessors: [ #3 #4 ]<br>[  98] get_by_id          dst:loc17, base:loc14, property:1, valueProfile:16<br>[ 104] mov                dst:loc18, src:loc14<br>[ 107] iterator_open      iterator:loc15, next:loc16, symbolIterator:loc17, iterable:loc18, stackOffset:24, iterableValueProfile:17, iteratorValueProfile:18, nextValueProfile:19<br>[ 117] mov                dst:loc20, src:loc15<br>[ 120] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:20, doneValueProfile:21, valueValueProfile:22<br>[ 131] jfalse             condition:loc17, targetLabel:6(-&gt;137)<br>Successors: [ #7 #6 ]</p>\n<p>bb#6<br>Predecessors: [ #5 ]<br>[ 134] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #7 ]</p>\n<p>bb#7<br>Predecessors: [ #5 #6 ]<br>[ 137] resolve_scope      dst:loc19, scope:loc4, var:2, resolveType:GlobalProperty, localScopeDepth:0<br>[ 144] put_to_scope       scope:loc19, var:2, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 152] jtrue              condition:loc17, targetLabel:20(-&gt;172)<br>Successors: [ #9 #8 ]</p>\n<p>bb#8<br>Predecessors: [ #7 ]<br>[ 155] mov                dst:loc20, src:loc15<br>[ 158] iterator_next      done:loc17, value:loc18, iterable:loc14, next:loc16, iterator:loc20, stackOffset:26, nextResultValueProfile:23, doneValueProfile:24, valueValueProfile:25<br>[ 169] jfalse             condition:loc17, targetLabel:6(-&gt;175)<br>Successors: [ #10 #9 ]</p>\n<p>bb#9<br>Predecessors: [ #7 #8 ]<br>[ 172] mov                dst:loc18, src:Undefined(const0)<br>Successors: [ #10 ]</p>\n<p>bb#10<br>Predecessors: [ #8 #9 ]<br>[ 175] resolve_scope      dst:loc19, scope:loc4, var:3, resolveType:GlobalProperty, localScopeDepth:0<br>[ 182] put_to_scope       scope:loc19, var:3, value:loc18, getPutInfo:1049600&lt;DoNotThrowIfNotFound|GlobalProperty|ConstInitialization|NotStrictMode&gt;, symbolTableOrScopeDepth:0, offset:0<br>[ 190] jtrue              condition:loc17, targetLabel:31(-&gt;221)<br>Successors: [ #14 #11 ]</p>\n<p>bb#11<br>Predecessors: [ #10 ]<br>[ 193] get_by_id          dst:loc18, base:loc15, property:4, valueProfile:26<br>[ 199] jundefined_or_null value:loc18, targetLabel:22(-&gt;221)<br>Successors: [ #14 #12 ]</p>\n<p>bb#12<br>Predecessors: [ #11 ]<br>[ 202] mov                dst:loc20, src:loc15<br>[ 205] call               dst:loc19, callee:loc18, argc:1, argv:26, valueProfile:27<br>[ 212] is_object          dst:loc21, operand:loc19<br>[ 215] jtrue              condition:loc21, targetLabel:6(-&gt;221)<br>Successors: [ #14 #13 ]</p>\n<p>bb#13<br>Predecessors: [ #12 ]<br>[ 218] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#14<br>Predecessors: [ #10 #11 #12 ]<br>[ 221] jtrue              condition:loc13, targetLabel:31(-&gt;252)<br>Successors: [ #18 #15 ]</p>\n<p>bb#15<br>Predecessors: [ #14 ]<br>[ 224] get_by_id          dst:loc14, base:loc11, property:4, valueProfile:28<br>[ 230] jundefined_or_null value:loc14, targetLabel:22(-&gt;252)<br>Successors: [ #18 #16 ]</p>\n<p>bb#16<br>Predecessors: [ #15 ]<br>[ 233] mov                dst:loc16, src:loc11<br>[ 236] call               dst:loc15, callee:loc14, argc:1, argv:22, valueProfile:29<br>[ 243] is_object          dst:loc17, operand:loc15<br>[ 246] jtrue              condition:loc17, targetLabel:6(-&gt;252)<br>Successors: [ #18 #17 ]</p>\n<p>bb#17<br>Predecessors: [ #16 ]<br>[ 249] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#18<br>Predecessors: [ #14 #15 #16 ]<br>[ 252] jtrue              condition:loc9, targetLabel:31(-&gt;283)<br>Successors: [ #22 #19 ]</p>\n<p>bb#19<br>Predecessors: [ #18 ]<br>[ 255] get_by_id          dst:loc10, base:loc7, property:4, valueProfile:30<br>[ 261] jundefined_or_null value:loc10, targetLabel:22(-&gt;283)<br>Successors: [ #22 #20 ]</p>\n<p>bb#20<br>Predecessors: [ #19 ]<br>[ 264] mov                dst:loc12, src:loc7<br>[ 267] call               dst:loc11, callee:loc10, argc:1, argv:18, valueProfile:31<br>[ 274] is_object          dst:loc13, operand:loc11<br>[ 277] jtrue              condition:loc13, targetLabel:6(-&gt;283)<br>Successors: [ #22 #21 ]</p>\n<p>bb#21<br>Predecessors: [ #20 ]<br>[ 280] throw_static_error message:String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976(const1), errorType:TypeError<br>Successors: [ ]</p>\n<p>bb#22<br>Predecessors: [ #18 #19 #20 ]<br>[ 283] end                value:loc5<br>Successors: [ ]</p>\n<p>Identifiers:<br>id0 = foo<br>id1 = Symbol.iterator<br>id2 = x<br>id3 = y<br>id4 = return</p>\n<p>Constants:<br>k0 = Undefined<br>k1 = String (atomic),8Bit:(1),length:(43): Iterator result interface is not an object., StructureID: 16976</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dV3qRInk_6M-wUcQy6JmM35UFj4Y2Opun8qe84zo_bo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728448643489,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$PrwJz-722KfNwUCvsFeLktabrz__EBxsAFQyz6o6eJU"},
{"content":{"body":"please don't dump walls of text into Matrix, make a gist or something","msgtype":"m.text"},"ts":1728448663672,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SzZ-XQbWAHJnMB9VuiazL6mQD8CT3tu6BwnV87QHtEM"},
{"content":{"body":"I put it in a thread for that reason?","m.mentions":{},"msgtype":"m.text"},"ts":1728448724059,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$uD12M-PqTQwzKbm9uqHMQWujdIIpjwEBGVDMHdjHkfQ"},
{"content":{"body":"Does the bytecode for the `Optional.some[Symbol.customMatcher]` include the cost of looking up `customMatcher` on Symbol? A native implementation would be able to avoid that because it would be using a known symbol.","format":"org.matrix.custom.html","formatted_body":"Does the bytecode for the <code>Optional.some[Symbol.customMatcher]</code> include the cost of looking up <code>customMatcher</code> on Symbol? A native implementation would be able to avoid that because it would be using a known symbol.","m.mentions":{},"m.relates_to":{"event_id":"$lERjc7gco2ZoYbjrI2DHIAqDpCD3fuXpMObUAxitfHQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$dV3qRInk_6M-wUcQy6JmM35UFj4Y2Opun8qe84zo_bo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728448770308,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1FT0Om7fWcFUX3GHOUxFi4axN4wV9jJBP_mSMckIhaE"},
{"content":{"body":"> <@keith_miller:matrix.org> I put it in a thread for that reason?\n\noh I think my client doesn't do threads","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24uD12M-PqTQwzKbm9uqHMQWujdIIpjwEBGVDMHdjHkfQ\">In reply to</a><a href=\"https://matrix.to/#/%40keith_miller%3Amatrix.org\">@keith_miller:matrix.org</a><br />I put it in a thread for that reason?</blockquote></mx-reply>oh I think my client doesn&#39;t do threads","m.relates_to":{"m.in_reply_to":{"event_id":"$uD12M-PqTQwzKbm9uqHMQWujdIIpjwEBGVDMHdjHkfQ"}},"msgtype":"m.text"},"ts":1728448796742,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ySf8MdCjoeFoTa2-Us16A3pcrInwN5XDwaSXg0eJC7s"},
{"content":{"body":"> <@michaelficarra:matrix.org> oh I think my client doesn't do threads\n\nAh fair, sorry. I assumed that was the standard.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ySf8MdCjoeFoTa2-Us16A3pcrInwN5XDwaSXg0eJC7s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oh I think my client doesn't do threads</blockquote></mx-reply>Ah fair, sorry. I assumed that was the standard.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ySf8MdCjoeFoTa2-Us16A3pcrInwN5XDwaSXg0eJC7s"}},"msgtype":"m.text"},"ts":1728448833188,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$wog52xZcUfE0J6w-eoITzIq_NB8A0ieSvhLcYG9Qc3s"},
{"content":{"body":"> <@ljharb:matrix.org> and readable code correlates to that value, imo often more highly than the performance of that application\n\nI agree with Jordan, extractor give u a simple abstraction and shorter code. such feature will improve the code quality generally (not only perf, but also many other aspects). ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_5NL1faG7TQKnJtNMSkN0l-3iVdT4b06G4oHZwIGqmw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and readable code correlates to that value, imo often more highly than the performance of that application</blockquote></mx-reply>I agree with Jordan, extractor give u a simple abstraction and shorter code. such feature will improve the code quality generally (not only perf, but also many other aspects).","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_5NL1faG7TQKnJtNMSkN0l-3iVdT4b06G4oHZwIGqmw"}},"msgtype":"m.text"},"ts":1728448843342,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$20J2jg9Fmk0NL2QVf_jJCnuHZYYKLVCcDX5K3pgnHtw"},
{"content":{"body":"> <@rbuckton:matrix.org> Does the bytecode for the `Optional.some[Symbol.customMatcher]` include the cost of looking up `customMatcher` on Symbol? A native implementation would be able to avoid that because it would be using a known symbol.\n\nthat's just 1~3 steps i guess","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1FT0Om7fWcFUX3GHOUxFi4axN4wV9jJBP_mSMckIhaE\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Does the bytecode for the <code>Optional.some[Symbol.customMatcher]</code> include the cost of looking up <code>customMatcher</code> on Symbol? A native implementation would be able to avoid that because it would be using a known symbol.</blockquote></mx-reply>that&#39;s just 1~3 steps i guess","m.relates_to":{"m.in_reply_to":{"event_id":"$1FT0Om7fWcFUX3GHOUxFi4axN4wV9jJBP_mSMckIhaE"}},"msgtype":"m.text"},"ts":1728448847967,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$d9ibujLI4D0OECUUb2TFBUtyXXbRDUwcv6aOqp2FqB0"},
{"content":{"body":"Sure, that would be avoided but that's not too much of the code generated","m.mentions":{},"m.relates_to":{"event_id":"$lERjc7gco2ZoYbjrI2DHIAqDpCD3fuXpMObUAxitfHQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$1FT0Om7fWcFUX3GHOUxFi4axN4wV9jJBP_mSMckIhaE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728448851654,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$r4TXjtzRGhV4yeabSFjXvxajxYiVwgZG6d3djQAOC1s"},
{"content":{"body":"I think the browser vendors are pushing back on the idea that it gives you perf","m.mentions":{},"msgtype":"m.text"},"ts":1728449161029,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$erjmZJ69LXJf9yUaNn070XPXXD_C3uNMnJ63MsWlRA4"},
{"content":{"body":"It's not a magic box that things become faster because you want it to","m.mentions":{},"msgtype":"m.text"},"ts":1728449179908,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$KZ2zmyXUbCwM1r9_B0o2JF0iR8H1hMuI3vOoviAjg90"},
{"content":{"body":" * It's not a magic box where things become faster because you want it to","m.mentions":{},"m.new_content":{"body":"It's not a magic box where things become faster because you want it to","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KZ2zmyXUbCwM1r9_B0o2JF0iR8H1hMuI3vOoviAjg90","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449194223,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$epyVVcxI880kR7qWF1ag1wmLJlHdLoG1WfSTPEiKpp8"},
{"content":{"body":"At least extractors are not a hidden cost you stumble into, unlike getters/setters or let/const TDZ. You don't pay the cost if you don't use extractors, and so long as developers are aware of the cost (and that cost is not absurdly high), developers can balance the pros and cons and fall back to existing behaviors for high performance scenarios. I think the part of concern is that developers might blindly adopt extractors without considering the cost?","m.mentions":{},"msgtype":"m.text"},"ts":1728449204536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_IpV-cztwuPxuICyAcOvs7pfrRalm-n8HIClEYOEdiM"},
{"content":{"body":"> <@michaelficarra:matrix.org> oh I think my client doesn't do threads\n\nCinny shows ‚Äúthreaded reply‚Äù under the username","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ySf8MdCjoeFoTa2-Us16A3pcrInwN5XDwaSXg0eJC7s\">In reply to</a><a href=\"https://matrix.to/#/%40michaelficarra%3Amatrix.org\">@michaelficarra:matrix.org</a><br />oh I think my client doesn&#39;t do threads</blockquote></mx-reply>Cinny shows ‚Äúthreaded reply‚Äù under the username","m.relates_to":{"m.in_reply_to":{"event_id":"$ySf8MdCjoeFoTa2-Us16A3pcrInwN5XDwaSXg0eJC7s"}},"msgtype":"m.text"},"ts":1728449205925,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9BaQVseWaWNECIc5xv9zFb-c__vatdgjlP9DUD3pUHM"},
{"content":{"body":"i think extractors are _totally_ a hidden cost","format":"org.matrix.custom.html","formatted_body":"i think extractors are <em>totally</em> a hidden cost","m.mentions":{},"msgtype":"m.text"},"ts":1728449219493,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ja2PVs0cbTcdPOQa1BVCPL4-rJrTZ3NqelMR5PG4D8M"},
{"content":{"body":" * At least extractors are not a hidden cost you stumble into, unlike getters/setters or let/const TDZ. You don't pay the cost if you don't use extractors, and so long as developers are aware of the cost (and that cost is not absurdly high), developers can balance the pros and cons and fall back to existing behaviors for high performance scenarios. I think part of concern is that developers might blindly adopt extractors without considering the cost?","m.mentions":{},"m.new_content":{"body":"At least extractors are not a hidden cost you stumble into, unlike getters/setters or let/const TDZ. You don't pay the cost if you don't use extractors, and so long as developers are aware of the cost (and that cost is not absurdly high), developers can balance the pros and cons and fall back to existing behaviors for high performance scenarios. I think part of concern is that developers might blindly adopt extractors without considering the cost?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_IpV-cztwuPxuICyAcOvs7pfrRalm-n8HIClEYOEdiM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449221489,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MDrzO-UKTvXIoVkAORDH0SzVha5FieSp4jpt4pU5RJI"},
{"content":{"body":"> <@rbuckton:matrix.org> At least extractors are not a hidden cost you stumble into, unlike getters/setters or let/const TDZ. You don't pay the cost if you don't use extractors, and so long as developers are aware of the cost (and that cost is not absurdly high), developers can balance the pros and cons and fall back to existing behaviors for high performance scenarios. I think part of concern is that developers might blindly adopt extractors without considering the cost?\n\nextractors are quite similar to let/const, they hide the cost of the operation behind what looks like light weight syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_IpV-cztwuPxuICyAcOvs7pfrRalm-n8HIClEYOEdiM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>At least extractors are not a hidden cost you stumble into, unlike getters/setters or let/const TDZ. You don&#39;t pay the cost if you don&#39;t use extractors, and so long as developers are aware of the cost (and that cost is not absurdly high), developers can balance the pros and cons and fall back to existing behaviors for high performance scenarios. I think part of concern is that developers might blindly adopt extractors without considering the cost?</blockquote></mx-reply>extractors are quite similar to let/const, they hide the cost of the operation behind what looks like light weight syntax","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_IpV-cztwuPxuICyAcOvs7pfrRalm-n8HIClEYOEdiM"}},"msgtype":"m.text"},"ts":1728449244568,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VwOUOsZjnDhryMyt_Yk5XnvQMA4-VxXzjXx3KlGsAj4"},
{"content":{"body":"here's a really simple, clean looking code (multiple delegates have said as such, **i** also think it looks very clean and nice) that hides a pretty expensive operation that doesn't exist in other languages that inspired this feature!","format":"org.matrix.custom.html","formatted_body":"here's a really simple, clean looking code (multiple delegates have said as such, <strong>i</strong> also think it looks very clean and nice) that hides a pretty expensive operation that doesn't exist in other languages that inspired this feature!","m.mentions":{},"msgtype":"m.text"},"ts":1728449263435,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d4vT8M9EK38aMnBN9kR3AmTIWytxBZDglON58yJ8Wp8"},
{"content":{"body":"@yulia:mozilla.org no more so than positional destructuring","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia</a> no more so than positional destructuring","msgtype":"m.text"},"ts":1728449275513,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e4Rxcho1cplO87-50DRyhwNP0DQvn71J49muMJHVdpk"},
{"content":{"body":"Yeah the syntax is üíØ hiding the cost! That's exactly what I was trying to show!","m.mentions":{},"msgtype":"m.text"},"ts":1728449276466,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ZukNG5XJhofVMvRl0SNTOOelKpfQr5uI78Tny9Ylb5w"},
{"content":{"body":"The syntax looks like a function call, part of the benefit of that is that the expectation is that it will have the cost of a function call.","m.mentions":{},"msgtype":"m.text"},"ts":1728449279471,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hiDVe3w9RjEBHB9mw6c1fyw6ffn5mBrd4QEPLlgKGOs"},
{"content":{"body":"do you think a rust or haskell programmer look at pattern matching and think that's a function call?","m.mentions":{},"msgtype":"m.text"},"ts":1728449300915,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$46fygXHWi--c64wAvo7oC9l2LHG6hvQCaaDA0iP2DCE"},
{"content":{"body":"couldn't the same be said with array destructuring?","m.mentions":{},"msgtype":"m.text"},"ts":1728449314464,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$lDeV1m85RTULN2-8IPtav9CAreXDBQtqP1F2j4LImOU"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1728449319553,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$terojNR704tShIrmwMe1CFxFy-wA1pC24JMiqeKmTzw"},
{"content":{"body":"yeah?","m.mentions":{},"msgtype":"m.text"},"ts":1728449320926,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c6sjXMnVz5j7vi7nsSuOz6sYHrcSc4uPLueE7xeR3pU"},
{"content":{"body":"yes, ","m.mentions":{},"msgtype":"m.text"},"ts":1728449321702,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$GmXe32SKTnjOhO3clwmHXJpZjQNKurMygbv-u4ci1tE"},
{"content":{"body":"array destructuring is terrible","m.mentions":{},"msgtype":"m.text"},"ts":1728449323736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XIOyrZjJIigpDAtU5uCD9I6zjV6f2DP_B6z5a19hbQk"},
{"content":{"body":"welp","m.mentions":{},"msgtype":"m.text"},"ts":1728449324592,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$7HE3LB3yuAYbOmNQs_KHD7rKY3gJLT3doiscj0qmalM"},
{"content":{"body":"> <@michaelficarra:matrix.org> @yulia:mozilla.org no more so than positional destructuring\n\nSure and I think engines would consider that was a mistake","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e4Rxcho1cplO87-50DRyhwNP0DQvn71J49muMJHVdpk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia</a> no more so than positional destructuring</blockquote></mx-reply>Sure and I think engines would consider that was a mistake","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e4Rxcho1cplO87-50DRyhwNP0DQvn71J49muMJHVdpk"}},"msgtype":"m.text"},"ts":1728449330030,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$h5VmwLC2MfzD9GEttX2uvfz30QyWEVJbyuCn4m-1OIk"},
{"content":{"body":"A function calling is also a very simple syntax (and can hide cost). I don't see there is any diff.","m.mentions":{},"msgtype":"m.text"},"ts":1728449331546,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$B3CPD1Zl4OPRjVUyprbbhsrQLH2QdXgH1UlYf0Joino"},
{"content":{"body":"In every language a function call is a significant cost","m.mentions":{},"msgtype":"m.text"},"ts":1728449379891,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$aTsWkNbU8dK2L3d_YwHBjfVetZ2BnI-wGUEZF13hqiI"},
{"content":{"body":"Maybe if you're clever you can get the compiler to remove a lot of that but IMO devs know that's on them","m.mentions":{},"msgtype":"m.text"},"ts":1728449406200,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$n54x8Hcd1kivJ_m8uRn58uPVMO1dm3zhU2mcWCKV268"},
{"content":{"body":" * Maybe if you're clever you can get the compiler to remove a lot of that but IMO devs know that's on them to verify","m.mentions":{},"m.new_content":{"body":"Maybe if you're clever you can get the compiler to remove a lot of that but IMO devs know that's on them to verify","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n54x8Hcd1kivJ_m8uRn58uPVMO1dm3zhU2mcWCKV268","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449413488,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$neZ1Q35PvFtxF6obK8T2WDj_rKaK31vj5W2YxizRr3Y"},
{"content":{"body":"\"other parts of the web platform\" /me perks nup","m.mentions":{},"msgtype":"m.text"},"ts":1728449421512,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$h4a_HI5tWBZTuK3axAKo-i2vdDTKio14inyRgKr53bI"},
{"content":{"body":" * \"other parts of the web platform\" /me perks up","m.mentions":{},"m.new_content":{"body":"\"other parts of the web platform\" /me perks up","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h4a_HI5tWBZTuK3axAKo-i2vdDTKio14inyRgKr53bI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449423574,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$Q4IMChd1OmJex0jf6Tl624o3FkL8UnqzRyvMF8NOLDc"},
{"content":{"body":"the good parts or... ?","m.mentions":{},"msgtype":"m.text"},"ts":1728449439483,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$bF0BmUMv82aFpIUuIRcNWBcSbcuGhmKM9tZki21_kO4"},
{"content":{"body":"function calls and things like array destructing / extractors are also completely different levels of fundamental; can't really imagine a modern language without functions, but the other 2 are much more optional","m.mentions":{},"msgtype":"m.text"},"ts":1728449472590,"senderName":"Marja H√∂ltt√§","senderId":"@marjakh:matrix.org","id":"$OkQ71Uvh9mCyZcpnRHw2Yhz6yyS6NGlwSghySHBVMM0"},
{"content":{"body":"amusing overload of \"javascript core\" lol","m.mentions":{},"msgtype":"m.text"},"ts":1728449486275,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$0FtAKM1Hq6-i5hKbY0BdAhtFlqUc0fADVamevhO00Ns"},
{"content":{"body":"(yes it was clear in context hehe)","m.mentions":{},"msgtype":"m.text"},"ts":1728449494201,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YD4uhxMuDizROCiAThFGKppj1DrfiT--mOcqF-7xj2E"},
{"content":{"body":"Yeah, I got really confused for a sec lol","m.mentions":{},"msgtype":"m.text"},"ts":1728449498600,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$mVq3ieLCxTN8zPuEXwZlnQz5KnxQnV7hBbOOqUizhKY"},
{"content":{"body":"sooorrryyyy my brain is so dead","m.mentions":{},"msgtype":"m.text"},"ts":1728449499498,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-V6XOwuc87Wy1UE-6X5LEcNPYFfIX7ZR82HxNlaoK4E"},
{"content":{"body":"> <@keith_miller:matrix.org> Maybe if you're clever you can get the compiler to remove a lot of that but IMO devs know that's on them to verify\n\nIf they're expected to know that `const p = Point(x, y)` has a cost, they won't be expected to know that `const Point(x, y) = p` does as well?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n54x8Hcd1kivJ_m8uRn58uPVMO1dm3zhU2mcWCKV268?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Maybe if you&#39;re clever you can get the compiler to remove a lot of that but IMO devs know that&#39;s on them to verify</blockquote></mx-reply>If they're expected to know that <code>const p = Point(x, y)</code> has a cost, they won't be expected to know that <code>const Point(x, y) = p</code> does as well?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n54x8Hcd1kivJ_m8uRn58uPVMO1dm3zhU2mcWCKV268"}},"msgtype":"m.text"},"ts":1728449505453,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WOGyMOEaI-2g41ZrcvdXD2eg94J9u5DKHlcsCUt4mtM"},
{"content":{"body":"Also, there is no restriction in the Extractors proposal on just how expensive that function may be. It could do anything. The examples assume they will always \"undo\" a constructor call, but there's no reason to believe it would stay restricted to that in practice.","m.mentions":{},"msgtype":"m.text"},"ts":1728449508020,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$nbWQ2P6IXZyBBB-vmFPWhLxw79MtqrZgwUYgtjryrlA"},
{"content":{"body":"That's part of the reason for the duality of the syntax. Extraction mirrors applilcation","m.mentions":{},"msgtype":"m.text"},"ts":1728449534581,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8cxE4uTZtJx3iSARWOQivj-wFTb1Jl-DZo0ZsLfXcBQ"},
{"content":{"body":" * That's part of the reason for the duality of the syntax. Extraction mirrors application.","m.mentions":{},"m.new_content":{"body":"That's part of the reason for the duality of the syntax. Extraction mirrors application.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8cxE4uTZtJx3iSARWOQivj-wFTb1Jl-DZo0ZsLfXcBQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449555567,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WEaGwf0mw3O5pqYdhDMMuSesf-PuGnPSRg9HqSw0G_g"},
{"content":{"body":"only by convention, though. It's not enforceable.","m.mentions":{},"msgtype":"m.text"},"ts":1728449564526,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$wJbJtb4USdKyNEjX53300D_5JxaMqaSyUDyaRkQljqk"},
{"content":{"body":"application can be arbitrarily expensive because its user code. Extraction can be arbitrarily expensive because its user code.","m.mentions":{},"msgtype":"m.text"},"ts":1728449577013,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_nvAK8AXlZ0EDIEPjAgs0ITIICipzuHEL_rkq5PxkI0"},
{"content":{"body":"> <@rbuckton:matrix.org> If they're expected to know that `const p = Point(x, y)` has a cost, they won't be expected to know that `const Point(x, y) = p` does as well?\n\nNo because no other binding in the language has a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WOGyMOEaI-2g41ZrcvdXD2eg94J9u5DKHlcsCUt4mtM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If they're expected to know that <code>const p = Point(x, y)</code> has a cost, they won't be expected to know that <code>const Point(x, y) = p</code> does as well?</blockquote></mx-reply>No because no other binding in the language has a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WOGyMOEaI-2g41ZrcvdXD2eg94J9u5DKHlcsCUt4mtM"}},"msgtype":"m.text"},"ts":1728449601471,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$qfKIMGp2UHmStf53adXozmIUvb29G2nHeFl4cm53gc8"},
{"content":{"body":"> <@rbuckton:matrix.org> If they're expected to know that `const p = Point(x, y)` has a cost, they won't be expected to know that `const Point(x, y) = p` does as well?\n\n * No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WOGyMOEaI-2g41ZrcvdXD2eg94J9u5DKHlcsCUt4mtM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If they're expected to know that <code>const p = Point(x, y)</code> has a cost, they won't be expected to know that <code>const Point(x, y) = p</code> does as well?</blockquote></mx-reply> * No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","m.mentions":{},"m.new_content":{"body":"No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","format":"org.matrix.custom.html","formatted_body":"No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qfKIMGp2UHmStf53adXozmIUvb29G2nHeFl4cm53gc8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449622101,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_2kDNb-Vieag0OKmXo9SxVo9dtvCaF9et_Zp0TXANDE"},
{"content":{"body":"If a specific extracting logic is complex and cost , then it always there, people just write it in some other form, and generally speaking, average programmers normally write much slower code repeatly and every place. On the other side, extractor allow senior programmer factor the logic and do optimization in single place and provide other an easy to adoption syntax. ","m.mentions":{},"msgtype":"m.text"},"ts":1728449625928,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$w-hp9Bymp1ztg68fGFlRTTwrgjlciACqfpWvNOdnHPI"},
{"content":{"body":"My point is, part of the assumption of improved readability is assuming that the feature will be used in a particular way. I expect it would be abused to make code \"magically\" shorter.","m.mentions":{},"msgtype":"m.text"},"ts":1728449639074,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$NcPRiz1528N8ceyicLjGVam6G-UEwHu1PVc2jjH7ysg"},
{"content":{"body":"ngl if I'm in JS author mode, my brain wants to view destructuring as zero-cost","m.mentions":{},"msgtype":"m.text"},"ts":1728449641044,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$S3ZOxA16f5z2X39YJEx99zApnM8y8FcTvyBspOQ5AG0"},
{"content":{"body":"> <@keith_miller:matrix.org> No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.\n\nYes they do, `const [x, y]` has a cost. Extractors have an obvious cost because they are explicitly designed to run user code, that's the whole point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qfKIMGp2UHmStf53adXozmIUvb29G2nHeFl4cm53gc8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>No because other bindings in the language don't have a cost. let/const is a great example of this in the sense that people didn't expect there would be a cost there.</blockquote></mx-reply>Yes they do, <code>const [x, y]</code> has a cost. Extractors have an obvious cost because they are explicitly designed to run user code, that's the whole point.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qfKIMGp2UHmStf53adXozmIUvb29G2nHeFl4cm53gc8"}},"msgtype":"m.text"},"ts":1728449664486,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ovd9UeueDpM4aE_Zq470MVFTclGxRP-OLuLgU2u3P0g"},
{"content":{"body":"I think it's non-obvious. Maybe this would be worth a developer study?","m.mentions":{},"msgtype":"m.text"},"ts":1728449713581,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$XK1LT0lgmnOvPB9cykU4nWb9K9N12rp2G1T8sdSWdlo"},
{"content":{"body":"Most developers don't think about iteration cost when they use `const [x, y]` because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS./","format":"org.matrix.custom.html","formatted_body":"Most developers don't think about iteration cost when they use <code>const [x, y]</code> because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS./","m.mentions":{},"msgtype":"m.text"},"ts":1728449750845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$joaK_LnbR-MVDwlzO9kgtTZoM17p8jLcOURtfBjRmtE"},
{"content":{"body":" * Most developers don't think about iteration cost when they use `const [x, y]` because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS.","format":"org.matrix.custom.html","formatted_body":" * Most developers don't think about iteration cost when they use <code>const [x, y]</code> because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS.","m.mentions":{},"m.new_content":{"body":"Most developers don't think about iteration cost when they use `const [x, y]` because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS.","format":"org.matrix.custom.html","formatted_body":"Most developers don't think about iteration cost when they use <code>const [x, y]</code> because the possibility of iteration being expensive is hidden on the RHS, not the LHS. Extractors put that cost in your face by being on the LHS.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$joaK_LnbR-MVDwlzO9kgtTZoM17p8jLcOURtfBjRmtE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449752196,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$euLq0wHfdpFAZlkmBkCxt4c1hcpBchdReQSu9AP4_Xs"},
{"content":{"body":"> <@rkirsling:matrix.org> ngl if I'm in JS author mode, my brain wants to view destructuring as zero-cost\n\nI only expect builtin syntax like object destructuing and array destructing to be fast enough. But extractor means custom matcher and it just like function, and I don't expect it is zero cost.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S3ZOxA16f5z2X39YJEx99zApnM8y8FcTvyBspOQ5AG0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>ngl if I&#39;m in JS author mode, my brain wants to view destructuring as zero-cost</blockquote></mx-reply>I only expect builtin syntax like object destructuing and array destructing to be fast enough. But extractor means custom matcher and it just like function, and I don't expect it is zero cost.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$S3ZOxA16f5z2X39YJEx99zApnM8y8FcTvyBspOQ5AG0"}},"msgtype":"m.text"},"ts":1728449757436,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$k137wy2cp22a474FYTsz4HubRHHXw-7njf2eiq-GuNY"},
{"content":{"body":"IIRC, Mozilla (not asking them to do it again) did this in the past and it revealed a lot of reasonable insights.","m.mentions":{},"msgtype":"m.text"},"ts":1728449759221,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$g3LoWoQlF6Rpo59Gdp73Tcrhdhw69BA_MZQ8OwZxVyI"},
{"content":{"body":" * IIRC, Mozilla (not asking them to do it again) did this in the past and it revealed a lot of interensting insights.","m.mentions":{},"m.new_content":{"body":"IIRC, Mozilla (not asking them to do it again) did this in the past and it revealed a lot of interensting insights.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3LoWoQlF6Rpo59Gdp73Tcrhdhw69BA_MZQ8OwZxVyI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449793034,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$frWMPW2s3_53mtYQs0YoVKCtcfwHzX3WW-ZI_POufpI"},
{"content":{"body":" * IIRC, Mozilla (not asking them to do it again) did this in the past and it revealed a lot of interesting insights.","m.mentions":{},"m.new_content":{"body":"IIRC, Mozilla (not asking them to do it again) did this in the past and it revealed a lot of interesting insights.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3LoWoQlF6Rpo59Gdp73Tcrhdhw69BA_MZQ8OwZxVyI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728449801571,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_-F-3ORKgjPQwX8lf0-D-_sPdSC-M7tq8VwBfufmWys"},
{"content":{"body":"(we did what now?)","m.mentions":{},"msgtype":"m.text"},"ts":1728449859536,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nYFFrFiA342bhJ2hoQzzibYlkKc_XAenRitmARmTAY0"},
{"content":{"body":"... user study? yeah thats something we have a whole TG for please get in touch!","m.mentions":{},"msgtype":"m.text"},"ts":1728449888690,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lgoDdrCTrYcKsXu3aA110JCV9Wk-oq2nTcY-jbouvic"},
{"content":{"body":"user study for this hidden cost question","m.mentions":{},"msgtype":"m.text"},"ts":1728449897429,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Eiv162LkeGB8LLDG5axk3ZJLz6zQ8WkpKyYikkqCFfA"},
{"content":{"body":"we can get students to do it","m.mentions":{},"msgtype":"m.text"},"ts":1728449900469,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RurP9f34hjk4pRrH5Y_1cvV0zhG0ezQy5yk6LmM2ZRQ"},
{"content":{"body":"(im not doing it, no time these days, but there are eager folks)","m.mentions":{},"msgtype":"m.text"},"ts":1728449914495,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ujbZIG_exUlj8C8AP0HCIZrky3_CymFkFUYggW69s8I"},
{"content":{"body":"That could be very helpful, though I'm not sure how to get that process started.","m.mentions":{},"msgtype":"m.text"},"ts":1728449952018,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tzQDBlL7b0zj-Vxg37Xr00rcw91qDEbYtir-MJdePCU"},
{"content":{"body":"you can make an issue in https://github.com/tc39/tg5/issues or add it here: https://github.com/tc39/tg5/issues/29","m.mentions":{},"msgtype":"m.text"},"ts":1728449985005,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$TsBBS_7BAdgqIMhQmumq474zL3cA332NVf65GD8bR2k"},
{"content":{"body":"then at our next meeting we will bring it up as a request for help from the committee, and we will see if one of the universities wants to take it up","m.mentions":{},"msgtype":"m.text"},"ts":1728450006144,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rtS753aQzsxlqY7V8-4_IqoTsqwlYQ6_4mC_A9ZH0TQ"},
{"content":{"body":"Thanks, I'll look into this after plenary.","m.mentions":{},"msgtype":"m.text"},"ts":1728450149500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lzlRIOl0xwb8ybvL3Hu9fOu0kGPUmMk-lHi9tUQyJwE"},
{"content":{"body":"hot take: I'm kinda okay with engine divergence on stupid stuff that nobody should ever be observing","msgtype":"m.text"},"ts":1728450442386,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dDNHcbZ0oqTO3VBmXnkwGqXD_tWx6vaLsaBCHasRXW8"},
{"content":{"body":"maybe that's a lukewarm take, I dunno","msgtype":"m.text"},"ts":1728450448820,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1QYhiEFToORL8d9rf6avUXh1LnKAZvFD9u8WQFqrvJ4"},
{"content":{"body":"it's like natural fuzz testing of apps","m.mentions":{},"msgtype":"m.text"},"ts":1728450508634,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$-SKm8_psllnkRLUBtt_fPR_n06wCwHEuIGp4R5CoJjU"},
{"content":{"body":"i think this is a ArrayBuffer-specific thing","m.mentions":{},"msgtype":"m.text"},"ts":1728450865110,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5Ocv5kvZsvcLeGB4vuuPliPNBUhjJJ741vMtYUltVGw"},
{"content":{"body":"like in general deviance is particularly bad for AB and TAs because of the whole Khronos thing","m.mentions":{},"msgtype":"m.text"},"ts":1728450876012,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iQK-aIg9tmUhm4B7oTmyi1YbjJKMH2sLiTWUWYd2ySc"}
]