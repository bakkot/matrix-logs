[
{"content":{"body":"ljharb: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: you've been vocal in the past about coercing arguments in the order in which they appear. is there code that you've seen that actually depends on that ordering?","mimetype":"text/html"}]},"ts":1668649992244,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w59i87mnvpl7t6TWAPCn1kEOC2M8SGMqzte2sxmG1VA"},
{"content":{"body":"i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like `Atomics.store(ta, idx, val)` to coerce idx, val, *then* validate the TA","format":"org.matrix.custom.html","formatted_body":"i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like <code>Atomics.store(ta, idx, val)</code> to coerce idx, val, <em>then</em> validate the TA","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like `Atomics.store(ta, idx, val)` to coerce idx, val, *then* validate the TA","mimetype":"text/plain"},{"body":"i'm thinking of proposing a breaking change to the order of coercion for Atomics methods like <code>Atomics.store(ta, idx, val)</code> to coerce idx, val, <em>then</em> validate the TA","mimetype":"text/html"}]},"ts":1668650036053,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JNx2OXxdVX01aMN0PzBWig-2WRnS8udwHJzw8Lcqd-w"},
{"content":{"body":"with resizable buffers, having to recheck detached/out-of-boundness and reloading the length after each argument coercion is really unfortunate","msgtype":"m.text","org.matrix.msc1767.text":"with resizable buffers, having to recheck detached/out-of-boundness and reloading the length after each argument coercion is really unfortunate"},"ts":1668650061473,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gV4uyH0CK1aEg3JnV63A8pXHh5OnXq0hY2X08DSMGMc"},
{"content":{"body":"it's kind of a bugfarm (sometimes security bugs)","msgtype":"m.text","org.matrix.msc1767.text":"it's kind of a bugfarm (sometimes security bugs)"},"ts":1668650118726,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UoEWY6r5Zye8cGmrqZHoY-QWIQbBVuLFYtHWc5FP96s"},
{"content":{"body":"no code i think the committee would respect, I’d guess. why is it a bug farm?","msgtype":"m.text"},"ts":1668652283879,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pfu-wvtdW-88mFFIYYAoOM1G6MGqeCWSwnXS5A8e2Ko"},
{"content":{"body":"I’m confused about the problem it’d be solving","msgtype":"m.text"},"ts":1668652299838,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V6FKGeTcS0FpXtAMoPmCb8tpJ7lqHEH0CHqG1NNEW8o"},
{"content":{"body":"Agree with shu. Don't think coerce order will break anything ","msgtype":"m.text"},"ts":1668652548758,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZBTfsiKaA8y88MqL4YWP19uplHUxdLFIhWG8_9kbOBI"},
{"content":{"body":"it's a bug farm because it's easy to forget that coercing `idx` and `val` can detach `ta`","format":"org.matrix.custom.html","formatted_body":"it's a bug farm because it's easy to forget that coercing <code>idx</code> and <code>val</code> can detach <code>ta</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's a bug farm because it's easy to forget that coercing `idx` and `val` can detach `ta`","mimetype":"text/plain"},{"body":"it's a bug farm because it's easy to forget that coercing <code>idx</code> and <code>val</code> can detach <code>ta</code>","mimetype":"text/html"}]},"ts":1668653103984,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NVqRABKQq1MCTzv58nb8UL48iNeKlgR5umlqFGZ_UKk"},
{"content":{"body":"(and with resizable buffers, can resize `ta`)","format":"org.matrix.custom.html","formatted_body":"(and with resizable buffers, can resize <code>ta</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(and with resizable buffers, can resize `ta`)","mimetype":"text/plain"},{"body":"(and with resizable buffers, can resize <code>ta</code>)","mimetype":"text/html"}]},"ts":1668653115655,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Iuq9-xurHg3lmraFbFoIS8qttYyZkTRx6Rv7VBi4d1A"},
{"content":{"body":"TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation","msgtype":"m.text","org.matrix.msc1767.text":"TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation"},"ts":1668653163551,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mOxig-DLXsQPtrpMyvaNGqGXWcXLWJKSryCytYDe-t4"},
{"content":{"body":" * TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation","m.new_content":{"body":"TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation","msgtype":"m.text","org.matrix.msc1767.text":"TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation"},"m.relates_to":{"event_id":"$mOxig-DLXsQPtrpMyvaNGqGXWcXLWJKSryCytYDe-t4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * TA detachment and resizing is a qualitatively worse kind of user code than other arbitrary user code, because code that forget to recheck for detachedness after each argument coercion can end up reading out-of-bounds into the buffer, depending on the implementation"},"ts":1668653172006,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R4zaNTts0byM_MuBV-sjJJJJ-XXrVnKdNMA67CTyzcA"},
{"content":{"body":"\"easy to forget\" do you mean when v8 is optimizing code? ","msgtype":"m.text"},"ts":1668653180487,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$KuCf43oZveHAKkAi10cFzS71lvqxj_-1MLF_DAlb9Tg"},
{"content":{"body":"that, and i also mean engineers or spec authors actually forgetting even when implementing the slow path","msgtype":"m.text","org.matrix.msc1767.text":"that, and i also mean engineers or spec authors actually forgetting even when implementing the slow path"},"ts":1668653201711,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3uXanfyJD2_nQ46o8nJAc5KNgFVXXd6o9LvhMqD36uM"},
{"content":{"body":"i personally missed a bunch of these in the resizable buffers spec draft","msgtype":"m.text","org.matrix.msc1767.text":"i personally missed a bunch of these in the resizable buffers spec draft"},"ts":1668653215241,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8EvFsIFK4ETIEFOLXWx3_9LhiAeu6X4OU6X6s5Dowck"},
{"content":{"body":"TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit","msgtype":"m.text","org.matrix.msc1767.text":"TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit"},"ts":1668653306482,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_aEpPpWSL8pmB-MDnNThwcCC1XDeryDbuLcX8vD0KqI"},
{"content":{"body":" * TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit","m.new_content":{"body":"TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit","msgtype":"m.text","org.matrix.msc1767.text":"TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit"},"m.relates_to":{"event_id":"$_aEpPpWSL8pmB-MDnNThwcCC1XDeryDbuLcX8vD0KqI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * TA and Atomics methods depend on the TA being in a valid state, life will just be a lot easier if we can rework these methods to 1) validate once instead of multiple times and 2) after validation, check that no user code can ever be called again until method exit"},"ts":1668653339753,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_csAI-ZqjflaiVHLd4zawjM6rADPvWC45-grkfQVgzw"},
{"content":{"body":"> <@ljharb:matrix.org> I’m confused about the problem it’d be solving\n\nwhat i'm solving for is \"increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V6FKGeTcS0FpXtAMoPmCb8tpJ7lqHEH0CHqG1NNEW8o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>I’m confused about the problem it’d be solving</blockquote></mx-reply>what i'm solving for is &quot;increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$V6FKGeTcS0FpXtAMoPmCb8tpJ7lqHEH0CHqG1NNEW8o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> I’m confused about the problem it’d be solving\n\nwhat i'm solving for is \"increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V6FKGeTcS0FpXtAMoPmCb8tpJ7lqHEH0CHqG1NNEW8o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>I’m confused about the problem it’d be solving</blockquote></mx-reply>what i'm solving for is &quot;increasing likelihood of correct implementation, where incorrect implementation is often a security bug and not just misbehavior&quot;","mimetype":"text/html"}]},"ts":1668653400631,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QWMo4LN32KbJUBC5-wIUU-d1EHJGNgN77mcNejUkyYo"},
{"content":{"body":"to be clear, user code re-entrancy is a general problem. i'm singling out TAs because TA bugs result in more, and more serious, security bugs","msgtype":"m.text","org.matrix.msc1767.text":"to be clear, user code re-entrancy is a general problem. i'm singling out TAs because TA bugs result in more, and more serious, security bugs"},"ts":1668653512837,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q9DZ-6qkxL_73vVAIeYW197zhnkhUx7GzuEVbxdZPBI"},
{"content":{"body":"So the ideal order is: idx check, val check, (no user code now), TA check, Atomics.store, (user code again)?","msgtype":"m.text"},"ts":1668653647978,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NmpvXc0w6qJ-vfLwOWSuDJrxHsY-I8ASXXObcKDIDX0"},
{"content":{"body":"it's a little trickier than that unfortunately, because `val` coercion depends on looking at whether `ta` is a BigInt TA or a non-BigInt TA","format":"org.matrix.custom.html","formatted_body":"it's a little trickier than that unfortunately, because <code>val</code> coercion depends on looking at whether <code>ta</code> is a BigInt TA or a non-BigInt TA","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's a little trickier than that unfortunately, because `val` coercion depends on looking at whether `ta` is a BigInt TA or a non-BigInt TA","mimetype":"text/plain"},{"body":"it's a little trickier than that unfortunately, because <code>val</code> coercion depends on looking at whether <code>ta</code> is a BigInt TA or a non-BigInt TA","mimetype":"text/html"}]},"ts":1668653677225,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cg2l_bzo-HdkXhNtcZ5tedtHS7r2ckLONRnieLzWhiM"},
{"content":{"body":"so i think the ideal order is: coerce *but not validate* left-to-right, then validate left-to-right","format":"org.matrix.custom.html","formatted_body":"so i think the ideal order is: coerce <em>but not validate</em> left-to-right, then validate left-to-right","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so i think the ideal order is: coerce *but not validate* left-to-right, then validate left-to-right","mimetype":"text/plain"},{"body":"so i think the ideal order is: coerce <em>but not validate</em> left-to-right, then validate left-to-right","mimetype":"text/html"}]},"ts":1668653702921,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6CvcURxhEnyMNAk8S072j_JhUf1X1XGZvwz2ACIXvZQ"}
]