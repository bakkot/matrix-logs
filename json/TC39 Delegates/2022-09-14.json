[
{"content":{"body":"Sorry, off-topic, but could we do a quick test if showing my slides works?","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, off-topic, but could we do a quick test if showing my slides works?"},"ts":1663116720408,"senderName":"Axel Rauschmayer (self-employed)","senderId":"@rauschma:matrix.org","id":"$AvYiYy4RLZ91NaVi43HvDA5_1ln020bX4QlGhtWRBPo"},
{"content":{"body":"Is the video conference live?","msgtype":"m.text","org.matrix.msc1767.text":"Is the video conference live?"},"ts":1663116948880,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$bkTWMagiyV379Hc0S-zBtEwL0UjnwyoNcRRsutTNkN0"},
{"content":{"body":"I see waiting for host","msgtype":"m.text","org.matrix.msc1767.text":"I see waiting for host"},"ts":1663116960815,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$6HOrfv1N2u3u8RhH3kG4wspdc_sI5LmL85dqKgxPJ3k"},
{"content":{"body":"it is not started yet","msgtype":"m.text","org.matrix.msc1767.text":"it is not started yet"},"ts":1663116967453,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$nXJ4xl_jfTh3kpdkRlqiyUBmJv2hdYxqHOh0MCYE1vs"},
{"content":{"body":"Me too. We need a host, yes.","msgtype":"m.text","org.matrix.msc1767.text":"Me too. We need a host, yes."},"ts":1663116968860,"senderName":"Axel Rauschmayer (self-employed)","senderId":"@rauschma:matrix.org","id":"$SckTCqM7geybdUPwnlKM41Q4INfeI4B0lIJAietwfm8"},
{"content":{"body":"waiting for an igalian to do so :)","msgtype":"m.text","org.matrix.msc1767.text":"waiting for an igalian to do so :)"},"ts":1663116973793,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$kppxGmMtLs_PpGehJQzIENpjQRkL7hTQRYoA0oj0oMA"},
{"content":{"body":"ok thanks Brian","msgtype":"m.text","org.matrix.msc1767.text":"ok thanks Brian"},"ts":1663116975185,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$d6ePgdnEJJoreXd1X7UOPdlrNi4_y6uNnHFRklpwn2E"},
{"content":{"body":"Hehe","msgtype":"m.text","org.matrix.msc1767.text":"Hehe"},"ts":1663116985301,"senderName":"Axel Rauschmayer (self-employed)","senderId":"@rauschma:matrix.org","id":"$vKQm8qgDyhDgTACLOj_D1uQsjOA4Wvs7cFU73yP1ukI"},
{"content":{"body":"> <@rauschma:matrix.org> Sorry, off-topic, but could we do a quick test if showing my slides works?\n\nvery on-topic! :D top tip: sometimes have to restart the browser if only just given permission to share screen for the first time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AvYiYy4RLZ91NaVi43HvDA5_1ln020bX4QlGhtWRBPo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rauschma:matrix.org\">@rauschma:matrix.org</a><br>Sorry, off-topic, but could we do a quick test if showing my slides works?</blockquote></mx-reply>very on-topic! :D top tip: sometimes have to restart the browser if only just given permission to share screen for the first time","m.relates_to":{"m.in_reply_to":{"event_id":"$AvYiYy4RLZ91NaVi43HvDA5_1ln020bX4QlGhtWRBPo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rauschma:matrix.org> Sorry, off-topic, but could we do a quick test if showing my slides works?\n\nvery on-topic! :D top tip: sometimes have to restart the browser if only just given permission to share screen for the first time","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AvYiYy4RLZ91NaVi43HvDA5_1ln020bX4QlGhtWRBPo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rauschma:matrix.org\">@rauschma:matrix.org</a><br>Sorry, off-topic, but could we do a quick test if showing my slides works?</blockquote></mx-reply>very on-topic! :D top tip: sometimes have to restart the browser if only just given permission to share screen for the first time","mimetype":"text/html"}]},"ts":1663117156969,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0Cus1acFqdWhiB5AGeWhSvO6Bf9C9LLs103nzdvjbRg"},
{"content":{"body":"Yeah, already did that (the screen sharing background helps with testing).","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, already did that (the screen sharing background helps with testing)."},"ts":1663117194648,"senderName":"Axel Rauschmayer (self-employed)","senderId":"@rauschma:matrix.org","id":"$hlKJcVJl4KlldcNlwWN06QM9AVqWz2OBANrz2hwDHyE"},
{"content":{"body":"I guess you can try screen sharing now?","msgtype":"m.text"},"ts":1663117299974,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n1zVSPKELHGvhoSha2CMUvX8v3Uco0nH6uXznD15LYU"},
{"content":{"body":"Are we ready to get started?","msgtype":"m.text"},"ts":1663117775378,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3EtZbQo_6MUtH1lylHCiL9AO4I8g178PZHYbswBptbY"},
{"content":{"body":"haven't we already started?","msgtype":"m.text","org.matrix.msc1767.text":"haven't we already started?"},"ts":1663117793949,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8dk7Ial0POYkKg2-6PuAiEyaIDFG-xffQ3PnRqhvJXc"},
{"content":{"body":"we have in fact already started","msgtype":"m.text","org.matrix.msc1767.text":"we have in fact already started"},"ts":1663117812621,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jRNEjIvH3aTQp1-kch_ulB7Ut2zK8Q1Vm8RemIIRMwo"},
{"content":{"body":"axel has been presenting for like 5 minutes","msgtype":"m.text","org.matrix.msc1767.text":"axel has been presenting for like 5 minutes"},"ts":1663117814245,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LOp1IxY3SjuafVF1HaShth7u1iofO3pK7HgfSVEtYwU"},
{"content":{"body":"Oh! A problem on my end","msgtype":"m.text"},"ts":1663118050513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QMk_l9fZPrXs-w-gCErTjiu5jhsEUREGOY_NMGt8ul8"},
{"content":{"body":"what is meant by \"a wrapping API\" here?","msgtype":"m.text","org.matrix.msc1767.text":"what is meant by \"a wrapping API\" here?"},"ts":1663118141141,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iBB5AnDOq0vhp_7CvmCl77FthQeT-d48-yPU7PNv-Qw"},
{"content":{"body":"isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","format":"org.matrix.custom.html","formatted_body":"isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/plain"},{"body":"isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/html"}]},"ts":1663118189962,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v_VJHHNpdsyR2_LUGUtdueGQzI2a0J3x4ypWk8nyCxE"},
{"content":{"body":"something like Jquery","msgtype":"m.text","org.matrix.msc1767.text":"something like Jquery"},"ts":1663118190022,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sxegiA-sTy798tlFnY10h3HkXeKDWfj3oVfPGSRWpfw"},
{"content":{"body":" * isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","format":"org.matrix.custom.html","formatted_body":" * isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","m.new_content":{"body":"isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","format":"org.matrix.custom.html","formatted_body":"isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/plain"},{"body":"isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$v_VJHHNpdsyR2_LUGUtdueGQzI2a0J3x4ypWk8nyCxE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * isn't `Iterable.from()` already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/plain"},{"body":" * isn't <code>Iterable.from()</code> already a wrapping API? it's just that most builtin iterators are/will be pre-wrapped","mimetype":"text/html"}]},"ts":1663118205948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AItZbVD2Ckn90TFsAwqCmzivc3wwgJrrvEQD29U8uiE"},
{"content":{"body":"where you do `$(document.querySelectorAll(...))` and then get a new thing that has a bunch of helper functions","format":"org.matrix.custom.html","formatted_body":"where you do <code>$(document.querySelectorAll(...))</code> and then get a new thing that has a bunch of helper functions","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"where you do `$(document.querySelectorAll(...))` and then get a new thing that has a bunch of helper functions","mimetype":"text/plain"},{"body":"where you do <code>$(document.querySelectorAll(...))</code> and then get a new thing that has a bunch of helper functions","mimetype":"text/html"}]},"ts":1663118215701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Nr1OldnyTeijepdyuLJ9onMjENeP9avNixlyUARl4UY"},
{"content":{"body":"how is that different than what we do?","msgtype":"m.text","org.matrix.msc1767.text":"how is that different than what we do?"},"ts":1663118256034,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GmDFy_qOHOTMGPJNwjK90VOau4F1rQbvKeQxqbymIso"},
{"content":{"body":"you don't need to wrap most of the time","msgtype":"m.text","org.matrix.msc1767.text":"you don't need to wrap most of the time"},"ts":1663118270536,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3nwQSvKxs1cXCglU67AfTPoEdlDOJpNOzP92mdaokTI"},
{"content":{"body":"A real example of \"wrapping API\"","msgtype":"m.text","org.matrix.msc1767.text":"A real example of \"wrapping API\""},"ts":1663118271132,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$bhRThqdoQfCKl_8IwvgZdG3eJVswC8RnfqsFFxKmfp0"},
{"content":{"body":"Emitter proposal","msgtype":"m.text","org.matrix.msc1767.text":"Emitter proposal"},"ts":1663118277528,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$TA2uARKPu07p_8-p07qdDZtEYykdqho9qz5yPEC5bOg"},
{"content":{"body":"https://github.com/tc39/proposal-emitter","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/proposal-emitter"},"ts":1663118286464,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$PqHKbs3IhOhpm-mdXdkFjz11a6uMTyRPfzPlhRr7afg"},
{"content":{"body":"like if you do `map.values().filter()` there's no explicit wrapper","format":"org.matrix.custom.html","formatted_body":"like if you do <code>map.values().filter()</code> there's no explicit wrapper","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if you do `map.values().filter()` there's no explicit wrapper","mimetype":"text/plain"},{"body":"like if you do <code>map.values().filter()</code> there's no explicit wrapper","mimetype":"text/html"}]},"ts":1663118287751,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BD6NzkFlXIVOXgqUkTb8TJ6cRGOgLALmWij0uhX9pvo"},
{"content":{"body":"right, builtins are \"pre-wrapped\"","msgtype":"m.text","org.matrix.msc1767.text":"right, builtins are \"pre-wrapped\""},"ts":1663118296238,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jmzS0rTugu9FuaL09Muly5q_C2zUp2vQ3QotvTpFmZ8"},
{"content":{"body":"(or some better way to describe it)","msgtype":"m.text","org.matrix.msc1767.text":"(or some better way to describe it)"},"ts":1663118301717,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iZPEGTvgWlVKLNB3H0l0JHCPZ9p3lT7HaLcAAoDcyYQ"},
{"content":{"body":"yeah, that's kinda my mental model","msgtype":"m.text","org.matrix.msc1767.text":"yeah, that's kinda my mental model"},"ts":1663118306372,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_B3TKsAeqMQljbobXaSPzyDTiOR_ULqattN0ZqpT8iM"},
{"content":{"body":"Emitter proposal also use function style.","msgtype":"m.text","org.matrix.msc1767.text":"Emitter proposal also use function style."},"ts":1663118342724,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$NIilqzg_gP1zdmHhQiQ5zZnTqWo2T9ecUJTIDo22U1c"},
{"content":{"body":"```js\nconst { on, map, filter, run } = Emitter\n\nrun(\n  on(document, 'click')\n, filter(ev => ev.target.tagName === 'BUTTON')\n, map(ev => ({ x: ev.clientX, y: ev.clientY }))\n, coords => console.log(coords)\n)\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const { on, map, filter, run } = Emitter\n\nrun(\n  on(document, 'click')\n, filter(ev =&gt; ev.target.tagName === 'BUTTON')\n, map(ev =&gt; ({ x: ev.clientX, y: ev.clientY }))\n, coords =&gt; console.log(coords)\n)\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\nconst { on, map, filter, run } = Emitter\n\nrun(\n  on(document, 'click')\n, filter(ev => ev.target.tagName === 'BUTTON')\n, map(ev => ({ x: ev.clientX, y: ev.clientY }))\n, coords => console.log(coords)\n)\n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">const { on, map, filter, run } = Emitter\n\nrun(\n  on(document, 'click')\n, filter(ev =&gt; ev.target.tagName === 'BUTTON')\n, map(ev =&gt; ({ x: ev.clientX, y: ev.clientY }))\n, coords =&gt; console.log(coords)\n)\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663118386254,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$In-UxLrzLUjWgsuUHEXC6j9b-Wk7IJ_LTQaFhHh6Sd8"},
{"content":{"body":"that's applicative style, no?","msgtype":"m.text","org.matrix.msc1767.text":"that's applicative style, no?"},"ts":1663118400822,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lGkhzQvHSX_Ogq9vE3BuzgxfX2ladxW6E4m0JmOOcS8"},
{"content":{"body":"Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/html"}]},"ts":1663118504112,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9kBktQ21qkGRso0BVTUUFSmJ6rLXXfbgorhlYkN8v9E"},
{"content":{"body":" * Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","m.new_content":{"body":"Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$9kBktQ21qkGRso0BVTUUFSmJ6rLXXfbgorhlYkN8v9E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Axel Rauschmayer (self-employed): re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: re builtin modules, pending that proposal advancing, short answer is no, not in the cards (shu's queue item covers this also)","mimetype":"text/html"}]},"ts":1663118520434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ai5yygwqpqShLw000l5LZcqfYMaZr3ExBijfeI2E-rE"},
{"content":{"body":"it's iterable ONCE, which is the important point","msgtype":"m.text","org.matrix.msc1767.text":"it's iterable ONCE, which is the important point"},"ts":1663118604999,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$o5qHnnzWOcON9jkah_0y2WDa5fDyq1w-MONuYxMP-u8"},
{"content":{"body":"iterators are kind of lying by implementing Symbol.iterator","msgtype":"m.text","org.matrix.msc1767.text":"iterators are kind of lying by implementing Symbol.iterator"},"ts":1663118668590,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$91sB9D-ANcjAevegPU2FuYVrwOchnVHtaH72jypxmCU"},
{"content":{"body":"snek: wait, you are in favor of using iterable helper functions as Axel proposed?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: wait, you are in favor of using iterable helper functions as Axel proposed?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: wait, you are in favor of using iterable helper functions as Axel proposed?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: wait, you are in favor of using iterable helper functions as Axel proposed?","mimetype":"text/html"}]},"ts":1663118725274,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SgqMLsqcS2jcqIFw1jIdho4mxnrIHvjLaiWM7PgAvqg"},
{"content":{"body":"shu: no I think they were saying iterator helpers as functions (conditional on pipe operator)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: no I think they were saying iterator helpers as functions (conditional on pipe operator)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: no I think they were saying iterator helpers as functions (conditional on pipe operator)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: no I think they were saying iterator helpers as functions (conditional on pipe operator)","mimetype":"text/html"}]},"ts":1663118768988,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IlHDQXYN0lSiQqNeZjgxkFzI3DSOORFjvyObrz4-bYg"},
{"content":{"body":"we need a better word than \"functions\" here","msgtype":"m.text","org.matrix.msc1767.text":"we need a better word than \"functions\" here"},"ts":1663118786246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6C0M0t8NDXe84T8WELlqDPP7yyyBnGedKSRq4elfZeo"},
{"content":{"body":"non-this-value-users","msgtype":"m.text","org.matrix.msc1767.text":"non-this-value-users"},"ts":1663118806547,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XNsz_R_eOmmaVHwrkPPpoxPvb7Z0gRvaVbpMzubgbrk"},
{"content":{"body":"\"standalone functions\" vs \"methods\" imo","msgtype":"m.text","org.matrix.msc1767.text":"\"standalone functions\" vs \"methods\" imo"},"ts":1663118829894,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qcHVxHpkXyGJskeVNW3v0jajXZ2veI6VPp0N_vc21iI"},
{"content":{"body":"yes that's good","msgtype":"m.text","org.matrix.msc1767.text":"yes that's good"},"ts":1663118961016,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TuJOuh8G6eaosHsKYh1GdZqlOvc-a2YEI3VPJCEsjVI"},
{"content":{"body":"Axel Rauschmayer (self-employed): for clarity; consensus typically means \"some explicit yes's and no explicit no's\" and does not imply or require universal enthusiasm :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: for clarity; consensus typically means &quot;some explicit yes's and no explicit no's&quot; and does not imply or require universal enthusiasm :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Axel Rauschmayer (self-employed): for clarity; consensus typically means \"some explicit yes's and no explicit no's\" and does not imply or require universal enthusiasm :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a>: for clarity; consensus typically means &quot;some explicit yes's and no explicit no's&quot; and does not imply or require universal enthusiasm :-)","mimetype":"text/html"}]},"ts":1663119065767,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LkknzBMbtDb4fHCAjQHdTXtMdytyTU5jDHnW3Klrqw8"},
{"content":{"body":"I'm primarily in favor of the standalone function approach because its more flexible and is composable with third-party packages without the need for prototype patching (which is obviously bad). Yes that puts more of a dependency on pipeline, but I think pipeline can advance once the topic variable issue is addressed.","msgtype":"m.text","org.matrix.msc1767.text":"I'm primarily in favor of the standalone function approach because its more flexible and is composable with third-party packages without the need for prototype patching (which is obviously bad). Yes that puts more of a dependency on pipeline, but I think pipeline can advance once the topic variable issue is addressed."},"ts":1663119132296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$o1jkJ7fREvQZ2f3OL6zO6mFNp5Zo_K6mqPkM4AdtoBo"},
{"content":{"body":"to be clear i was concerned about wasting work on consensus, not work on spec text ","msgtype":"m.text","org.matrix.msc1767.text":"to be clear i was concerned about wasting work on consensus, not work on spec text "},"ts":1663119273333,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MmnwK8k-J6MV0ZdPoCQP-X_uMDhiQqnXb9fiFBznqqc"},
{"content":{"body":"oh god, a superclass of all collection types would be as bad an idea as Object.prototype already is","msgtype":"m.text","org.matrix.msc1767.text":"oh god, a superclass of all collection types would be as bad an idea as Object.prototype already is"},"ts":1663119359961,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WqE4f3cc0Bgyj4mGJU-ZS4F9ICc4a7tbfwvKvlyIcws"},
{"content":{"body":"haha oh no please no","msgtype":"m.text","org.matrix.msc1767.text":"haha oh no please no"},"ts":1663119392117,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fQ_mjT3b_s1bopdSUWjsFPhktj48iECcCqcpTjO9hKg"},
{"content":{"body":"`class TCPConnection extends Collection`","format":"org.matrix.custom.html","formatted_body":"<code>class TCPConnection extends Collection</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`class TCPConnection extends Collection`","mimetype":"text/plain"},{"body":"<code>class TCPConnection extends Collection</code>","mimetype":"text/html"}]},"ts":1663119397721,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PEs9_RHgBwG_hoVJXrEnOlFLWP5uS5EzWDkcMp2B_8c"},
{"content":{"body":"we could just call it `FragileBaseClass`","format":"org.matrix.custom.html","formatted_body":"we could just call it <code>FragileBaseClass</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we could just call it `FragileBaseClass`","mimetype":"text/plain"},{"body":"we could just call it <code>FragileBaseClass</code>","mimetype":"text/html"}]},"ts":1663119409655,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Uo3DIHMCqfEbzUtEU8Zp2xCVOyvkIDUeduoq-WoSvYY"},
{"content":{"body":"oh wait sorry wrong channel","msgtype":"m.text","org.matrix.msc1767.text":"oh wait sorry wrong channel"},"ts":1663119412134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f-Rz94oGV8LWjQQkyYa5aEdSJInhL7ukDj54VIV42Rw"},
{"content":{"body":"why do so many people have this same bad idea?","msgtype":"m.text","org.matrix.msc1767.text":"why do so many people have this same bad idea?"},"ts":1663119418591,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fDNpiIUNAB4jsWkBaYTUyR8jNwYHDZ9uKXwIyZafhGE"},
{"content":{"body":"ecosystem can/does have chaining-style via wrapping. And given the limited number of helper methods I'm still more likely to reach for 3rd-party.","msgtype":"m.text","org.matrix.msc1767.text":"ecosystem can/does have chaining-style via wrapping. And given the limited number of helper methods I'm still more likely to reach for 3rd-party."},"ts":1663119440824,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BbfIlnHFETZ7G2iwfGbXngsm_qi8n1XCRIxkPz44BoY"},
{"content":{"body":"rbuckton: we have plans to add a lot more","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: we have plans to add a lot more","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: we have plans to add a lot more","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: we have plans to add a lot more","mimetype":"text/html"}]},"ts":1663119525171,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xXKKIyHvLwG-AftS_EeAyXzq19irLm3g7RMqCyYLJrQ"},
{"content":{"body":"remember the current proposal is what we consider \"minimal\"","msgtype":"m.text","org.matrix.msc1767.text":"remember the current proposal is what we consider \"minimal\""},"ts":1663119534091,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uqtUR82SXDHL4MryHGkwOisTXYB7496AI43qAd3vLr0"},
{"content":{"body":"so many more","msgtype":"m.text","org.matrix.msc1767.text":"so many more"},"ts":1663119549708,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MDctoPrgvIERJo0xdc-jnavM9ytezQ9TpEOqDzX0Mac"},
{"content":{"body":"okay not *that* many","format":"org.matrix.custom.html","formatted_body":"okay not <em>that</em> many","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"okay not *that* many","mimetype":"text/plain"},{"body":"okay not <em>that</em> many","mimetype":"text/html"}]},"ts":1663119559966,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$P2XJs21qPrczF6UvrAY_ond-NFlrBHGbVw-hIEKHwk8"},
{"content":{"body":"i closed a lot of issues/prs for more methods","msgtype":"m.text","org.matrix.msc1767.text":"i closed a lot of issues/prs for more methods"},"ts":1663119562349,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lNsadKWXbgRJhyM1O1TYc3oRHRqvzewuOroxJqaIy5o"},
{"content":{"body":"like a dozen?","msgtype":"m.text","org.matrix.msc1767.text":"like a dozen?"},"ts":1663119562885,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mjeKbMmAZnOuNX8vqFtiYQG77Z7Sh12GG-_J0TUL8Bk"},
{"content":{"body":" * i closed a lot of issues/prs for more methods","m.new_content":{"body":"i closed a lot of issues/prs for more methods","msgtype":"m.text","org.matrix.msc1767.text":"i closed a lot of issues/prs for more methods"},"m.relates_to":{"event_id":"$lNsadKWXbgRJhyM1O1TYc3oRHRqvzewuOroxJqaIy5o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i closed a lot of issues/prs for more methods"},"ts":1663119571645,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$c_Q_aMpa7ZwOlYWaPLi3tpL3vX_rzNu79LdArxbpWC0"},
{"content":{"body":"https://github.com/tc39/proposal-iterator-helpers/issues?q=is%3Aissue+is%3Aclosed+label%3A%22good+follow-on+proposal%22","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/proposal-iterator-helpers/issues?q=is%3Aissue+is%3Aclosed+label%3A%22good+follow-on+proposal%22"},"ts":1663119620064,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U2s8QpX5tHAjRGI7HTXTBvDkDVK0G7JPeekJk4EqWH8"},
{"content":{"body":"But until you do, and as long as there is an iterator helper I need that isn't in that list, I'm still bouncing between methods and functions. _Until we have pipeline_, but if we have pipeline I'd still rather have functions.","format":"org.matrix.custom.html","formatted_body":"But until you do, and as long as there is an iterator helper I need that isn't in that list, I'm still bouncing between methods and functions. <em>Until we have pipeline</em>, but if we have pipeline I'd still rather have functions.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But until you do, and as long as there is an iterator helper I need that isn't in that list, I'm still bouncing between methods and functions. _Until we have pipeline_, but if we have pipeline I'd still rather have functions.","mimetype":"text/plain"},{"body":"But until you do, and as long as there is an iterator helper I need that isn't in that list, I'm still bouncing between methods and functions. <em>Until we have pipeline</em>, but if we have pipeline I'd still rather have functions.","mimetype":"text/html"}]},"ts":1663119632669,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TH_8e3lO2t0q70_Q6j7bcemO8Kpj9jKYwHpt7WRrNcQ"},
{"content":{"body":"we have 15 min underflow during this session, we might want to just let this topic go over by 15 min?","msgtype":"m.text","org.matrix.msc1767.text":"we have 15 min underflow during this session, we might want to just let this topic go over by 15 min?"},"ts":1663119758160,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$McvutAMFUA1RpRquDUDggD_-SDmCEfECJbMMpd48nxk"},
{"content":{"body":"especially given that this presenter is an invited expert, it would be nice to be more lenient with the timebox","msgtype":"m.text","org.matrix.msc1767.text":"especially given that this presenter is an invited expert, it would be nice to be more lenient with the timebox"},"ts":1663119788051,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rUd-ph2LVGxCJT0EDIj4SeZn1bqZ3BMzaZR0JYCrjrI"},
{"content":{"body":"I don't think these functions would be global, correct Axel Rauschmayer (self-employed) ?","format":"org.matrix.custom.html","formatted_body":"I don't think these functions would be global, correct <a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a> ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think these functions would be global, correct Axel Rauschmayer (self-employed) ?","mimetype":"text/plain"},{"body":"I don't think these functions would be global, correct <a href=\"https://matrix.to/#/@rauschma:matrix.org\">Axel Rauschmayer (self-employed)</a> ?","mimetype":"text/html"}]},"ts":1663119810136,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$cvf5-pe3ii3hHIfLYYheoInjFOb4g8ERvioHDl66b-0"},
{"content":{"body":"I'm assuming they would be in a global namespace, like Math","msgtype":"m.text","org.matrix.msc1767.text":"I'm assuming they would be in a global namespace, like Math"},"ts":1663119821854,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$pfTlLUqSsk-AjBIgWvmXW-LD2qpdFs_6xbSo-EdKG08"},
{"content":{"body":"what would we call it tho - \"Iterable\" isn't a \"thing\", it's a trait","msgtype":"m.text","org.matrix.msc1767.text":"what would we call it tho - \"Iterable\" isn't a \"thing\", it's a trait"},"ts":1663119839089,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l4PSRoCYlBElpIwCbyXY64-OILQ5zRYWYdTUbqifztg"},
{"content":{"body":"I have all of these as functions (`@esfx/iter-fn` and `@esfx/async-iter-fn`), and wrapping via a `Query` class (`@esfx/iter-query` and `@esfx/async-iter-query`). All of these are iterable (multi-shot if source returns a new itererator each time, single shot if the source returns the same iterator each time).","format":"org.matrix.custom.html","formatted_body":"I have all of these as functions (<code>@esfx/iter-fn</code> and <code>@esfx/async-iter-fn</code>), and wrapping via a <code>Query</code> class (<code>@esfx/iter-query</code> and <code>@esfx/async-iter-query</code>). All of these are iterable (multi-shot if source returns a new itererator each time, single shot if the source returns the same iterator each time).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have all of these as functions (`@esfx/iter-fn` and `@esfx/async-iter-fn`), and wrapping via a `Query` class (`@esfx/iter-query` and `@esfx/async-iter-query`). All of these are iterable (multi-shot if source returns a new itererator each time, single shot if the source returns the same iterator each time).","mimetype":"text/plain"},{"body":"I have all of these as functions (<code>@esfx/iter-fn</code> and <code>@esfx/async-iter-fn</code>), and wrapping via a <code>Query</code> class (<code>@esfx/iter-query</code> and <code>@esfx/async-iter-query</code>). All of these are iterable (multi-shot if source returns a new itererator each time, single shot if the source returns the same iterator each time).","mimetype":"text/html"}]},"ts":1663119875280,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A2G1KCEaUF2PY3oLcBdIAnopnS0fZjkHIv41JcE5AG8"},
{"content":{"body":"to be fair, iterators aren't a thing either, but the helpers proposal makes a *wrapped* iterator A Thing, via `Iterator.from`","format":"org.matrix.custom.html","formatted_body":"to be fair, iterators aren't a thing either, but the helpers proposal makes a <em>wrapped</em> iterator A Thing, via <code>Iterator.from</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"to be fair, iterators aren't a thing either, but the helpers proposal makes a *wrapped* iterator A Thing, via `Iterator.from`","mimetype":"text/plain"},{"body":"to be fair, iterators aren't a thing either, but the helpers proposal makes a <em>wrapped</em> iterator A Thing, via <code>Iterator.from</code>","mimetype":"text/html"}]},"ts":1663119877135,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f_mwUOI1nMkfNWH-SOM4otMUXqU6wVV7P0nfFNSU-QE"},
{"content":{"body":"That's a great point, but is there a concern with there being a global for the trait?","msgtype":"m.text","org.matrix.msc1767.text":"That's a great point, but is there a concern with there being a global for the trait?"},"ts":1663119885237,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$A_ErNphxIEdVXPm525ijF-CAzYCY2cC38SAnvEi_pxc"},
{"content":{"body":"it's just weird","msgtype":"m.text","org.matrix.msc1767.text":"it's just weird"},"ts":1663119894448,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$74bDyQ9oZejLUcNp461ysObGaD5HrejHQ1B9AnfZCGg"},
{"content":{"body":"because wrapping iterators makes sense; wrapping iterables i'm not sure does","msgtype":"m.text","org.matrix.msc1767.text":"because wrapping iterators makes sense; wrapping iterables i'm not sure does"},"ts":1663119905113,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1yov-UCHCCDo5pyIAAJDIRsLCeaG8FFd3eaRK_UORkA"},
{"content":{"body":"`Iterable.from(set)` wouldn't be a Set, for example","format":"org.matrix.custom.html","formatted_body":"<code>Iterable.from(set)</code> wouldn't be a Set, for example","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Iterable.from(set)` wouldn't be a Set, for example","mimetype":"text/plain"},{"body":"<code>Iterable.from(set)</code> wouldn't be a Set, for example","mimetype":"text/html"}]},"ts":1663119915832,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uAzsuZk49DQPl5ewKKsd7TsLHJJ2FG5Nr5HH-4GnZ2M"},
{"content":{"body":" * `Iterable.from(set)` wouldn't be a Set, for example","format":"org.matrix.custom.html","formatted_body":" * <code>Iterable.from(set)</code> wouldn't be a Set, for example","m.new_content":{"body":"`Iterable.from(set)` wouldn't be a Set, for example","format":"org.matrix.custom.html","formatted_body":"<code>Iterable.from(set)</code> wouldn't be a Set, for example","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Iterable.from(set)` wouldn't be a Set, for example","mimetype":"text/plain"},{"body":"<code>Iterable.from(set)</code> wouldn't be a Set, for example","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uAzsuZk49DQPl5ewKKsd7TsLHJJ2FG5Nr5HH-4GnZ2M","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `Iterable.from(set)` wouldn't be a Set, for example","mimetype":"text/plain"},{"body":" * <code>Iterable.from(set)</code> wouldn't be a Set, for example","mimetype":"text/html"}]},"ts":1663119918602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sldHlOy83BxZAHEkFPX9THZt7LBrPptACTbVMtXFzvw"},
{"content":{"body":"And if you do `Iterator.from(x).map()`, `Query.from(x).map()` is pretty much the same.","format":"org.matrix.custom.html","formatted_body":"And if you do <code>Iterator.from(x).map()</code>, <code>Query.from(x).map()</code> is pretty much the same.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And if you do `Iterator.from(x).map()`, `Query.from(x).map()` is pretty much the same.","mimetype":"text/plain"},{"body":"And if you do <code>Iterator.from(x).map()</code>, <code>Query.from(x).map()</code> is pretty much the same.","mimetype":"text/html"}]},"ts":1663119920752,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AK6AgaCUVpcbR1ywF9kSe5UMtAeyBwj644IhkUaMsWY"},
{"content":{"body":"I agree, but that is kind of the way that Rust traits get compiled down","msgtype":"m.text","org.matrix.msc1767.text":"I agree, but that is kind of the way that Rust traits get compiled down"},"ts":1663119927677,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$aF6927ABkdM9z_fv8ytKiqzq_Gs1YF6tRw8BHuEtOF8"},
{"content":{"body":"C#'s IEnumerable is reusable (I believe), but that has super weird performance implications","msgtype":"m.text","org.matrix.msc1767.text":"C#'s IEnumerable is reusable (I believe), but that has super weird performance implications"},"ts":1663119981104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qaH1qHQDqfTWcoI3SDde5uswLWq5uww9VIcbgg0wFJ4"},
{"content":{"body":" * C#'s IEnumerable is reusable (I believe), but that has super weird performance implications","m.new_content":{"body":"C#'s IEnumerable is reusable (I believe), but that has super weird performance implications","msgtype":"m.text","org.matrix.msc1767.text":"C#'s IEnumerable is reusable (I believe), but that has super weird performance implications"},"m.relates_to":{"event_id":"$qaH1qHQDqfTWcoI3SDde5uswLWq5uww9VIcbgg0wFJ4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * C#'s IEnumerable is reusable (I believe), but that has super weird performance implications"},"ts":1663119990756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WnJdIGIUmuPSRmwHyU4YTx8h-5lxgHPmohUowzQKFBU"},
{"content":{"body":"No, it's an Iterable, like the name of the namespace - not that class or type, but a type that implements that trait","msgtype":"m.text","org.matrix.msc1767.text":"No, it's an Iterable, like the name of the namespace - not that class or type, but a type that implements that trait"},"ts":1663119992913,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$T0LheEemu3kUbW_uXjINXTIjjTxilLAAb44nPM7RhAM"},
{"content":{"body":"JS doesn't have a type system like that tho","msgtype":"m.text","org.matrix.msc1767.text":"JS doesn't have a type system like that tho"},"ts":1663120013363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BbIR6nTVXsIsVmEFsGjiMTAViHOq-jbFLj_lY7Et4Vs"},
{"content":{"body":"It would be strange for functions in Iterable namespace to return a Set","msgtype":"m.text","org.matrix.msc1767.text":"It would be strange for functions in Iterable namespace to return a Set"},"ts":1663120023613,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$daiTspu2UTU0m-RJP4ARXPFDlBLLah_EKpBlHv_77Ro"},
{"content":{"body":"i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make `for..of` reusable, you wrap it in a function that you call multiple times.","format":"org.matrix.custom.html","formatted_body":"i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make <code>for..of</code> reusable, you wrap it in a function that you call multiple times.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make `for..of` reusable, you wrap it in a function that you call multiple times.","mimetype":"text/plain"},{"body":"i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make <code>for..of</code> reusable, you wrap it in a function that you call multiple times.","mimetype":"text/html"}]},"ts":1663120030928,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$JaP9zIR-zZllkXwoWK3dIZupx_cfZCJIHTCtjyTOVy0"},
{"content":{"body":"it would also be strange for them to return things that are not reusable","msgtype":"m.text","org.matrix.msc1767.text":"it would also be strange for them to return things that are not reusable"},"ts":1663120037612,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rLek7Zfrm5SolOh8TXPz6Solci6IRGSZND6nSYZDSCk"},
{"content":{"body":"I wish this proposal hadn't conflated using the function style with the change to iterables; using functions is a reasonable request, but operating on iterables is not","msgtype":"m.text","org.matrix.msc1767.text":"I wish this proposal hadn't conflated using the function style with the change to iterables; using functions is a reasonable request, but operating on iterables is not"},"ts":1663120041983,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-wSAdJqbHy5c7hc0v2V6iqs9TbcQh58Q3AxMfrP4tFc"},
{"content":{"body":"> <@devsnek:matrix.org> i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make `for..of` reusable, you wrap it in a function that you call multiple times.\n\nnow the `for..of` is not relevant itself, you could be manually consuming an iterator or you could be using a generator or whatever, you just end up with a nice abstraction boundary of a function. this was also a big point with `Number.range` if anyone remembers that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JaP9zIR-zZllkXwoWK3dIZupx_cfZCJIHTCtjyTOVy0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make <code>for..of</code> reusable, you wrap it in a function that you call multiple times.</blockquote></mx-reply>now the <code>for..of</code> is not relevant itself, you could be manually consuming an iterator or you could be using a generator or whatever, you just end up with a nice abstraction boundary of a function. this was also a big point with <code>Number.range</code> if anyone remembers that.","m.relates_to":{"m.in_reply_to":{"event_id":"$JaP9zIR-zZllkXwoWK3dIZupx_cfZCJIHTCtjyTOVy0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make `for..of` reusable, you wrap it in a function that you call multiple times.\n\nnow the `for..of` is not relevant itself, you could be manually consuming an iterator or you could be using a generator or whatever, you just end up with a nice abstraction boundary of a function. this was also a big point with `Number.range` if anyone remembers that.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JaP9zIR-zZllkXwoWK3dIZupx_cfZCJIHTCtjyTOVy0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i was going to mention this on the queue but how we explained reusability in the past is via functions. for example how do you make <code>for..of</code> reusable, you wrap it in a function that you call multiple times.</blockquote></mx-reply>now the <code>for..of</code> is not relevant itself, you could be manually consuming an iterator or you could be using a generator or whatever, you just end up with a nice abstraction boundary of a function. this was also a big point with <code>Number.range</code> if anyone remembers that.","mimetype":"text/html"}]},"ts":1663120093207,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7MBKtunf_2QkhuOScmIPkMSXBNxBLY0xJPysWL4Uu8w"},
{"content":{"body":"you could extend iterator.prototype and have `FancyIterator.from(thing).fancyMethod()` etc","format":"org.matrix.custom.html","formatted_body":"you could extend iterator.prototype and have <code>FancyIterator.from(thing).fancyMethod()</code> etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you could extend iterator.prototype and have `FancyIterator.from(thing).fancyMethod()` etc","mimetype":"text/plain"},{"body":"you could extend iterator.prototype and have <code>FancyIterator.from(thing).fancyMethod()</code> etc","mimetype":"text/html"}]},"ts":1663120093510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TAVVaZxl54lg7kgu0VoMOBZU2WqCIowVna2JAIRM110"},
{"content":{"body":"seems fine","msgtype":"m.text","org.matrix.msc1767.text":"seems fine"},"ts":1663120094750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5XZm0cGpqSTf7TBFkjurzXbRFdOV5za8B_KzXQbAkRg"},
{"content":{"body":"re shu 's queue item - `function filter(iterable, filterer) { return Iterator.from(iterable[Symbol.iterator]()).filter(filterer); }` i think?","format":"org.matrix.custom.html","formatted_body":"re <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> 's queue item - <code>function filter(iterable, filterer) { return Iterator.from(iterable[Symbol.iterator]()).filter(filterer); }</code> i think?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"re shu 's queue item - `function filter(iterable, filterer) { return Iterator.from(iterable[Symbol.iterator]()).filter(filterer); }` i think?","mimetype":"text/plain"},{"body":"re <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> 's queue item - <code>function filter(iterable, filterer) { return Iterator.from(iterable[Symbol.iterator]()).filter(filterer); }</code> i think?","mimetype":"text/html"}]},"ts":1663120101723,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y-xS40woVIeJ88EKg6syQ-LJ40iw25l7iej82wcvbWo"},
{"content":{"body":"I agree with that Michael Ficarra .  I wish static methods or namespaced sets of functions are a better approach - and much better when we get pipes","format":"org.matrix.custom.html","formatted_body":"I agree with that <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> .  I wish static methods or namespaced sets of functions are a better approach - and much better when we get pipes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree with that Michael Ficarra .  I wish static methods or namespaced sets of functions are a better approach - and much better when we get pipes","mimetype":"text/plain"},{"body":"I agree with that <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> .  I wish static methods or namespaced sets of functions are a better approach - and much better when we get pipes","mimetype":"text/html"}]},"ts":1663120113434,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$R3fZyU-VpV7xSwMJvnxCVsqZq2Fw747BTQ2WiZwpyks"},
{"content":{"body":"I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use(groupBy, join, groupJoin);\nMyQuery.from(ar).groupBy() // join(), etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use(groupBy, join, groupJoin);\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use(groupBy, join, groupJoin);\nMyQuery.from(ar).groupBy() // join(), etc.\n```","mimetype":"text/plain"},{"body":"<p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use(groupBy, join, groupJoin);\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663120124729,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DK5hqRhD2c0OnMoGYfFhOYer4yLJe-qiKtqMHUxr1Lg"},
{"content":{"body":"but also, the language has had built-in `Array.prototype.map` forever while underscore had `_.groupBy` or whatever, and that was fine; the ecosystem things don't necessarily need to look like built-in things","format":"org.matrix.custom.html","formatted_body":"but also, the language has had built-in <code>Array.prototype.map</code> forever while underscore had <code>_.groupBy</code> or whatever, and that was fine; the ecosystem things don't necessarily need to look like built-in things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but also, the language has had built-in `Array.prototype.map` forever while underscore had `_.groupBy` or whatever, and that was fine; the ecosystem things don't necessarily need to look like built-in things","mimetype":"text/plain"},{"body":"but also, the language has had built-in <code>Array.prototype.map</code> forever while underscore had <code>_.groupBy</code> or whatever, and that was fine; the ecosystem things don't necessarily need to look like built-in things","mimetype":"text/html"}]},"ts":1663120146016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fis-63V4mU3OHdixQyIPWifETdvx68WrX48Bv3E6IPY"},
{"content":{"body":"(to shu's point)","msgtype":"m.text","org.matrix.msc1767.text":"(to shu's point)"},"ts":1663120149102,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N-hq27TCKtVSQ5OGtY3U-NbKfwEtc2u8C6gBy5Oq0QU"},
{"content":{"body":" * I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n```","format":"org.matrix.custom.html","formatted_body":" * <p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","m.new_content":{"body":"I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n```","mimetype":"text/plain"},{"body":"<p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DK5hqRhD2c0OnMoGYfFhOYer4yLJe-qiKtqMHUxr1Lg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I could imagine a `Query.use(...fns)` that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:\n\n```js\n// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n```","mimetype":"text/plain"},{"body":" * <p>I could imagine a <code>Query.use(...fns)</code> that returns something that mixes in a bunch of functions as methods that can then be used for chaining, i.e.:</p>\n<pre><code class=\"language-js\">// built-in \nQuery.from(ar).map()// filter(), etc.\n\nconst MyQuery = Query.use({ groupBy, join, groupJoin }); // subclass Query, patching in functions as methods\nMyQuery.from(ar).groupBy() // join(), etc.\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663120208583,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$shQBHwoyhUhV4PSHPwGIxm3xTzNeVVvFZQA0s3dF2FU"},
{"content":{"body":"also the language _will always_ have `Array.prototype.map`, so it's not like we can avoid having method-based things in the stdlib at this point","format":"org.matrix.custom.html","formatted_body":"also the language <em>will always</em> have <code>Array.prototype.map</code>, so it's not like we can avoid having method-based things in the stdlib at this point","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also the language _will always_ have `Array.prototype.map`, so it's not like we can avoid having method-based things in the stdlib at this point","mimetype":"text/plain"},{"body":"also the language <em>will always</em> have <code>Array.prototype.map</code>, so it's not like we can avoid having method-based things in the stdlib at this point","mimetype":"text/html"}]},"ts":1663120284508,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j4c5SxBeoGexZTzoIVijNu2ZkslNZW_Euh0hK58Kses"},
{"content":{"body":"The `.use` concept could work with `Iterator`, though (i.e., subclass `Iterator`, mix in and wrap the provided methods).","format":"org.matrix.custom.html","formatted_body":"The <code>.use</code> concept could work with <code>Iterator</code>, though (i.e., subclass <code>Iterator</code>, mix in and wrap the provided methods).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `.use` concept could work with `Iterator`, though (i.e., subclass `Iterator`, mix in and wrap the provided methods).","mimetype":"text/plain"},{"body":"The <code>.use</code> concept could work with <code>Iterator</code>, though (i.e., subclass <code>Iterator</code>, mix in and wrap the provided methods).","mimetype":"text/html"}]},"ts":1663120287313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pgvcbA5oOpKJrz0w0LHL0mmk_-xQqiXYlUajjLWEo6o"},
{"content":{"body":"i think as a way of choosing defaults for the standard library, i see no compelling reason aside from taste to deviate from what we have been doing since the language's inception with prototype methods","msgtype":"m.text","org.matrix.msc1767.text":"i think as a way of choosing defaults for the standard library, i see no compelling reason aside from taste to deviate from what we have been doing since the language's inception with prototype methods"},"ts":1663120304478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p_PnsVoKIN4Kd1T4rI1_UByr7jYg5va0cHJyvH10k6Q"},
{"content":{"body":"the functional style is easily polyfilled","msgtype":"m.text","org.matrix.msc1767.text":"the functional style is easily polyfilled"},"ts":1663120310481,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_I1gItJdFaVchUtSV7mBBR3V2c-NU3FtNf9x1fv8gsg"},
{"content":{"body":"let those adherents import a library, that seems sufficient?","msgtype":"m.text","org.matrix.msc1767.text":"let those adherents import a library, that seems sufficient?"},"ts":1663120318832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SuITsYQOMrxncZ6V8d6EgK6_rva86NQ9SO1xRa4AzvQ"},
{"content":{"body":"if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that.","msgtype":"m.text","org.matrix.msc1767.text":"if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that."},"ts":1663120384490,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$A_aOAC43Qy-6ReOqCMaV5umYA9TTRKzS-JWKtUwrgpE"},
{"content":{"body":"s/after/if/","msgtype":"m.text","org.matrix.msc1767.text":"s/after/if/"},"ts":1663120395779,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FlER1g43vGwbr-rTfxGacT71uBMK0-83N7umCgdzI8w"},
{"content":{"body":" * if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that.","m.new_content":{"body":"if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that.","msgtype":"m.text","org.matrix.msc1767.text":"if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that."},"m.relates_to":{"event_id":"$A_aOAC43Qy-6ReOqCMaV5umYA9TTRKzS-JWKtUwrgpE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that."},"ts":1663120400582,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3y_Ku7vVAHXsCB6k4i9Mb23KVER9AaSEc5AngnWsy3Y"},
{"content":{"body":"yes thanks, edited","msgtype":"m.text","org.matrix.msc1767.text":"yes thanks, edited"},"ts":1663120407981,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o39ZpUcipK_JHFC1XpRZTxlboPOPQouPK2eeH-IJ8jA"},
{"content":{"body":"> <@shuyuguo:matrix.org> let those adherents import a library, that seems sufficient?\n\nMy concern is having to mix functions from a 3rd party with methods on `Iterator.prototype`, makes for hard to read  code.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SuITsYQOMrxncZ6V8d6EgK6_rva86NQ9SO1xRa4AzvQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>let those adherents import a library, that seems sufficient?</blockquote></mx-reply>My concern is having to mix functions from a 3rd party with methods on <code>Iterator.prototype</code>, makes for hard to read  code.","m.relates_to":{"m.in_reply_to":{"event_id":"$SuITsYQOMrxncZ6V8d6EgK6_rva86NQ9SO1xRa4AzvQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> let those adherents import a library, that seems sufficient?\n\nMy concern is having to mix functions from a 3rd party with methods on `Iterator.prototype`, makes for hard to read  code.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SuITsYQOMrxncZ6V8d6EgK6_rva86NQ9SO1xRa4AzvQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>let those adherents import a library, that seems sufficient?</blockquote></mx-reply>My concern is having to mix functions from a 3rd party with methods on <code>Iterator.prototype</code>, makes for hard to read  code.","mimetype":"text/html"}]},"ts":1663120421586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gexnMiEG112NmKZzdRWzeaUZIm2LjhQGDA_yToA821A"},
{"content":{"body":"it wouldn't be hard to read with pipeline tho :-)","msgtype":"m.text","org.matrix.msc1767.text":"it wouldn't be hard to read with pipeline tho :-)"},"ts":1663120432270,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QYKpdSmbdeopv9UFBfB4m3vKDnM3OwkFdEAid43OBq4"},
{"content":{"body":"ljharb: just like we shouldn't have to wait for a way to list all intrinsics, right? 😉","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: just like we shouldn't have to wait for a way to list all intrinsics, right? 😉","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: just like we shouldn't have to wait for a way to list all intrinsics, right? 😉","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: just like we shouldn't have to wait for a way to list all intrinsics, right? 😉","mimetype":"text/html"}]},"ts":1663120438194,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Er4aSCj5R0CiAkySjus5WVECvPM7IC3EyCGGLGybVhc"},
{"content":{"body":"rbuckton: that seems unavoidable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: that seems unavoidable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: that seems unavoidable","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: that seems unavoidable","mimetype":"text/html"}]},"ts":1663120439632,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YGoDqW6iwGp1JHu366yXfwGi6RwsIY-pqYfSFU7CSVg"},
{"content":{"body":"JS is not a functional style language","msgtype":"m.text","org.matrix.msc1767.text":"JS is not a functional style language"},"ts":1663120444445,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1w0hNdBj_g0Nn0vlwBzywLTf5UOu1MGCXGfeS6DDUKM"},
{"content":{"body":"it has some combinators here and there","msgtype":"m.text","org.matrix.msc1767.text":"it has some combinators here and there"},"ts":1663120452838,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$URyYBhtzZUNFDCoGX8nDp9xyGEZuluInHWY_3qKULaE"},
{"content":{"body":"> <@ljharb:matrix.org> if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that.\n\nIs there anything pipeline is waiting on aside from picking the topic?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A_aOAC43Qy-6ReOqCMaV5umYA9TTRKzS-JWKtUwrgpE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn&#39;t. and i don&#39;t think proposals should wait for that.</blockquote></mx-reply>Is there anything pipeline is waiting on aside from picking the topic?","m.relates_to":{"m.in_reply_to":{"event_id":"$A_aOAC43Qy-6ReOqCMaV5umYA9TTRKzS-JWKtUwrgpE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn't. and i don't think proposals should wait for that.\n\nIs there anything pipeline is waiting on aside from picking the topic?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A_aOAC43Qy-6ReOqCMaV5umYA9TTRKzS-JWKtUwrgpE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if/after pipeline has landed, i think there will be compelling reasons. but until then, i agree that there isn&#39;t. and i don&#39;t think proposals should wait for that.</blockquote></mx-reply>Is there anything pipeline is waiting on aside from picking the topic?","mimetype":"text/html"}]},"ts":1663120455078,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D9-zgVkbRjcD0LLppxbuQpqottuZbbH3u-aYEHsolzo"},
{"content":{"body":"yep! i'm on your side for that one, altho ofc we still need that \"way\"","format":"org.matrix.custom.html","formatted_body":"yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yep! i'm on your side for that one, altho ofc we still need that \"way\"","mimetype":"text/plain"},{"body":"yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","mimetype":"text/html"}],"m.relates_to":{"event_id":"$Er4aSCj5R0CiAkySjus5WVECvPM7IC3EyCGGLGybVhc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Er4aSCj5R0CiAkySjus5WVECvPM7IC3EyCGGLGybVhc"},"rel_type":"m.thread"}},"ts":1663120456878,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8-msPLispjnY836TYHMmKthPm6g2G_CzeNqfa4Cf6p8"},
{"content":{"body":" * yep! i'm on your side for that one, altho ofc we still need that \"way\"","format":"org.matrix.custom.html","formatted_body":" * yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","m.new_content":{"body":"yep! i'm on your side for that one, altho ofc we still need that \"way\"","format":"org.matrix.custom.html","formatted_body":"yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yep! i'm on your side for that one, altho ofc we still need that \"way\"","mimetype":"text/plain"},{"body":"yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$8-msPLispjnY836TYHMmKthPm6g2G_CzeNqfa4Cf6p8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * yep! i'm on your side for that one, altho ofc we still need that \"way\"","mimetype":"text/plain"},{"body":" * yep! i'm on your side for that one, altho ofc we still need that &quot;way&quot;","mimetype":"text/html"}]},"ts":1663120474112,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$odb8ZOGYX08vcDJ7S2w7TpzM84NOWf5n6yZWx6nW3Io"},
{"content":{"body":"ljharb: I hope to hear your support for that later then 🙂","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I hope to hear your support for that later then 🙂","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: I hope to hear your support for that later then 🙂","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I hope to hear your support for that later then 🙂","mimetype":"text/html"}]},"ts":1663120490068,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sPOE2rpLBoDKPvDXz1pNDiJ0-1dtaObCaIQSNsaGj9E"},
{"content":{"body":"if you want to use more things in a method-based style, you can write a thing extending `Iterator.prototype` and put more methods on it","format":"org.matrix.custom.html","formatted_body":"if you want to use more things in a method-based style, you can write a thing extending <code>Iterator.prototype</code> and put more methods on it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you want to use more things in a method-based style, you can write a thing extending `Iterator.prototype` and put more methods on it","mimetype":"text/plain"},{"body":"if you want to use more things in a method-based style, you can write a thing extending <code>Iterator.prototype</code> and put more methods on it","mimetype":"text/html"}]},"ts":1663120515543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n-l58WfPdW7e7_GCmw5hkbj3SzJ6q-ZbAC5r4PczKjw"},
{"content":{"body":"that works fine","msgtype":"m.text","org.matrix.msc1767.text":"that works fine"},"ts":1663120518689,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5Kk0bWiIuBP0FXC_zwzIsJ7XzPi68sykZFjYoDNCDR0"},
{"content":{"body":"`Iterator` has no slots","format":"org.matrix.custom.html","formatted_body":"<code>Iterator</code> has no slots","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Iterator` has no slots","mimetype":"text/plain"},{"body":"<code>Iterator</code> has no slots","mimetype":"text/html"}]},"ts":1663120523359,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pn2JFsygdgay7tlDyEguKKn0YRI5VDIz8g9oVEjliN4"},
{"content":{"body":"and will never have slots","msgtype":"m.text","org.matrix.msc1767.text":"and will never have slots"},"ts":1663120529967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1qQzu8s_0A1PUeIOsIRSqCquqV_6TbWKxOiKcB4qBwk"},
{"content":{"body":"even if it did, extending `Iterator` would give you them","format":"org.matrix.custom.html","formatted_body":"even if it did, extending <code>Iterator</code> would give you them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"even if it did, extending `Iterator` would give you them","mimetype":"text/plain"},{"body":"even if it did, extending <code>Iterator</code> would give you them","mimetype":"text/html"}]},"ts":1663120539693,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qEDfSfTukXs_lUMYPQwPAOMJ8yVhxfpzeAPzHe79zKc"},
{"content":{"body":"Bradford Smith: re your queue topic, you don't have to implement a bunch of stuff, you just `__proto__: Iterator.prototype`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">Bradford Smith</a>: re your queue topic, you don't have to implement a bunch of stuff, you just <code>__proto__: Iterator.prototype</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Bradford Smith: re your queue topic, you don't have to implement a bunch of stuff, you just `__proto__: Iterator.prototype`","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">Bradford Smith</a>: re your queue topic, you don't have to implement a bunch of stuff, you just <code>__proto__: Iterator.prototype</code>","mimetype":"text/html"}]},"ts":1663120604715,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0GEjjDuRiTd_SRNSpY8DJW_rI57iS6K7b_SavDb55N8"},
{"content":{"body":"to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline","msgtype":"m.text","org.matrix.msc1767.text":"to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline"},"ts":1663120644178,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$COTf7SF9s9LrqD0MTSrZGe3AoX3k4NVkC05jz6v96h8"},
{"content":{"body":"I do not think pipeline meaningfully changes this conversation","msgtype":"m.text","org.matrix.msc1767.text":"I do not think pipeline meaningfully changes this conversation"},"ts":1663120650368,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vdIBNVDeIIhIz7nTGC9EW3xtAnnD1qyf9jckb7BArb8"},
{"content":{"body":"> <@bakkot:matrix.org> to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline\n\nIs there any special reason ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$COTf7SF9s9LrqD0MTSrZGe3AoX3k4NVkC05jz6v96h8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline</blockquote></mx-reply>Is there any special reason ?","m.relates_to":{"m.in_reply_to":{"event_id":"$COTf7SF9s9LrqD0MTSrZGe3AoX3k4NVkC05jz6v96h8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline\n\nIs there any special reason ?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$COTf7SF9s9LrqD0MTSrZGe3AoX3k4NVkC05jz6v96h8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>to be clear, I am very, very opposed to function-based style even in a world in which we have pipeline</blockquote></mx-reply>Is there any special reason ?","mimetype":"text/html"}]},"ts":1663120715862,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$h13l_JRI2HLD06se5G55QOwEaQegQxYA2Sy8JRQbR1s"},
{"content":{"body":"`Array.prototype.map` already exists, and will always exist","format":"org.matrix.custom.html","formatted_body":"<code>Array.prototype.map</code> already exists, and will always exist","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Array.prototype.map` already exists, and will always exist","mimetype":"text/plain"},{"body":"<code>Array.prototype.map</code> already exists, and will always exist","mimetype":"text/html"}]},"ts":1663120720788,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CQnMTN2DX_cHuTGbBqlgwz7oSUcfu8nJqq5sI6AH3Zc"},
{"content":{"body":"mapping over iterators should work like mapping over arrays","msgtype":"m.text","org.matrix.msc1767.text":"mapping over iterators should work like mapping over arrays"},"ts":1663120734183,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oRsvzkJABZdedbfitpvhP9_v6YgcmLkmC91VWXVkjvs"},
{"content":{"body":"not with completely different style and completely different syntax","msgtype":"m.text","org.matrix.msc1767.text":"not with completely different style and completely different syntax"},"ts":1663120741216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V2tr7I2zXT6sORqEvPAF9cpOwgEttgNWlUsSoVaWI4I"},
{"content":{"body":"the \"consistency\" arguments presented so far are very myopic IMO","msgtype":"m.text","org.matrix.msc1767.text":"the \"consistency\" arguments presented so far are very myopic IMO"},"ts":1663120744786,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TUjExLoWa-jycYyL_FC8zKYkkbV_gP9Y0jKoQjqOaD4"},
{"content":{"body":"> <@bakkot:matrix.org> if you want to use more things in a method-based style, you can write a thing extending `Iterator.prototype` and put more methods on it\n\nand then we need multiple inheritance to mixing them together `Library1Iterator.prototype` and `Library2Iterator.prototype`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n-l58WfPdW7e7_GCmw5hkbj3SzJ6q-ZbAC5r4PczKjw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if you want to use more things in a method-based style, you can write a thing extending <code>Iterator.prototype</code> and put more methods on it</blockquote></mx-reply>and then we need multiple inheritance to mixing them together <code>Library1Iterator.prototype</code> and <code>Library2Iterator.prototype</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$n-l58WfPdW7e7_GCmw5hkbj3SzJ6q-ZbAC5r4PczKjw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> if you want to use more things in a method-based style, you can write a thing extending `Iterator.prototype` and put more methods on it\n\nand then we need multiple inheritance to mixing them together `Library1Iterator.prototype` and `Library2Iterator.prototype`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n-l58WfPdW7e7_GCmw5hkbj3SzJ6q-ZbAC5r4PczKjw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if you want to use more things in a method-based style, you can write a thing extending <code>Iterator.prototype</code> and put more methods on it</blockquote></mx-reply>and then we need multiple inheritance to mixing them together <code>Library1Iterator.prototype</code> and <code>Library2Iterator.prototype</code>","mimetype":"text/html"}]},"ts":1663120767794,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WdlWcvEDvi1aKjVb7UD7D8smh-oYDlX52fCv9inFcmg"},
{"content":{"body":"ISTM to boil down to \"my code is already functional style, it'd be nice if i didn't need a 3p library to keep that style\"","msgtype":"m.text","org.matrix.msc1767.text":"ISTM to boil down to \"my code is already functional style, it'd be nice if i didn't need a 3p library to keep that style\""},"ts":1663120774933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5otaSaMYUsPhcqyCS9Rf_hxWB5MHH4T3x8YPnkTzC68"},
{"content":{"body":"i daresay that's a minority?","msgtype":"m.text","org.matrix.msc1767.text":"i daresay that's a minority?"},"ts":1663120781528,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RkSScu2JAZpbq6EWy7KtHR8nXZyKeHz4-gBFVJLiGVg"},
{"content":{"body":"you must see this https://github.com/fantasyland/fantasy-land 😂","msgtype":"m.text","org.matrix.msc1767.text":"you must see this https://github.com/fantasyland/fantasy-land 😂"},"ts":1663120882266,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VYSvqPYsUVfYRm1nGOI9xAK72_G3NCUb1CTPQDyP8ck"},
{"content":{"body":"both clauses of that are a minority","msgtype":"m.text","org.matrix.msc1767.text":"both clauses of that are a minority"},"ts":1663120886732,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t30G6Gh1SuTdWXFL2Cvp_cs-qRwGmrZfmVlXBkKqdf8"},
{"content":{"body":"people who avoid third party libs, and codebases that are predominantly functional","msgtype":"m.text","org.matrix.msc1767.text":"people who avoid third party libs, and codebases that are predominantly functional"},"ts":1663120895974,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lMFGYlHDOfsDy8_9o4d87CLpV3J98R1wWyeb4Tw8RuE"},
{"content":{"body":"> <@jackworks:matrix.org> you must see this https://github.com/fantasyland/fantasy-land 😂\n\nthe current iterator helpers champion is a contributor to that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VYSvqPYsUVfYRm1nGOI9xAK72_G3NCUb1CTPQDyP8ck?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>you must see this https://github.com/fantasyland/fantasy-land 😂</blockquote></mx-reply>the current iterator helpers champion is a contributor to that","m.relates_to":{"m.in_reply_to":{"event_id":"$VYSvqPYsUVfYRm1nGOI9xAK72_G3NCUb1CTPQDyP8ck"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> you must see this https://github.com/fantasyland/fantasy-land 😂\n\nthe current iterator helpers champion is a contributor to that","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VYSvqPYsUVfYRm1nGOI9xAK72_G3NCUb1CTPQDyP8ck?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>you must see this https://github.com/fantasyland/fantasy-land 😂</blockquote></mx-reply>the current iterator helpers champion is a contributor to that","mimetype":"text/html"}]},"ts":1663120909130,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pihdUiYzP8lwhcbuMrJKJeSufLoQ0MBPW-VYtSjQTpw"},
{"content":{"body":"Michael Ficarra in particular","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> in particular","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra in particular","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> in particular","mimetype":"text/html"}]},"ts":1663120922813,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-nthOA-qdNe30pcGtUOxMzhkwRWAFUUbbw6KQWvvswE"},
{"content":{"body":"if not pipeline, the `::` call syntax would also alleviate some of this burden of swapping styles","format":"org.matrix.custom.html","formatted_body":"if not pipeline, the <code>::</code> call syntax would also alleviate some of this burden of swapping styles","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if not pipeline, the `::` call syntax would also alleviate some of this burden of swapping styles","mimetype":"text/plain"},{"body":"if not pipeline, the <code>::</code> call syntax would also alleviate some of this burden of swapping styles","mimetype":"text/html"}]},"ts":1663121123527,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Mzu7qAxGbIAXipL4ZelFMGeBpOgK4WSahYmA2X_IPiM"},
{"content":{"body":"don't remember what the feeling on this at the time was tho","msgtype":"m.text","org.matrix.msc1767.text":"don't remember what the feeling on this at the time was tho"},"ts":1663121131300,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$D3wa6DejIrsN-VF0_NcyPnYriPv4sFuZZ23gtEDLQ7o"},
{"content":{"body":"A bigger problem than style is semantics. See the problem that Kevin and I raised.","msgtype":"m.text","org.matrix.msc1767.text":"A bigger problem than style is semantics. See the problem that Kevin and I raised."},"ts":1663121201502,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$3JQz9SQpUc-6-kw-UZVLZrzMNun7OUvWT4VEhOETOaQ"},
{"content":{"body":"If talking about semantics , I also have the concern, should we extend Iterator too much? IMO, iterator should be simple and only use as underlying mechanism,  why not use a separate concept for data transformation? Like Java Stream, or Emitter proposal?","msgtype":"m.text","org.matrix.msc1767.text":"If talking about semantics , I also have the concern, should we extend Iterator too much? IMO, iterator should be simple and only use as underlying mechanism,  why not use a separate concept for data transformation? Like Java Stream, or Emitter proposal?"},"ts":1663121471475,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$2DbwJPYMhjdtNtSaJ5FTnrk1uTYHCW7f86J_d6HsGKQ"},
{"content":{"body":"java streams would have been on iterator if they could have","msgtype":"m.text","org.matrix.msc1767.text":"java streams would have been on iterator if they could have"},"ts":1663121606630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5aN45ApEj4Uol4PvzHvWe4SyN7jP6wVrziIO3o0GpYE"},
{"content":{"body":"but the existing iterator interface, in Java, has `.remove` and stuff","format":"org.matrix.custom.html","formatted_body":"but the existing iterator interface, in Java, has <code>.remove</code> and stuff","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but the existing iterator interface, in Java, has `.remove` and stuff","mimetype":"text/plain"},{"body":"but the existing iterator interface, in Java, has <code>.remove</code> and stuff","mimetype":"text/html"}]},"ts":1663121615583,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kVs365XkEyz7wP2aqNnmswIBUdm1czQsU_80Y3oPc6U"},
{"content":{"body":"and has distinct `hasNext` and `next` methods","format":"org.matrix.custom.html","formatted_body":"and has distinct <code>hasNext</code> and <code>next</code> methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and has distinct `hasNext` and `next` methods","mimetype":"text/plain"},{"body":"and has distinct <code>hasNext</code> and <code>next</code> methods","mimetype":"text/html"}]},"ts":1663121626519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IrG_FrJkdQJmShvU84QeYui24KicKNF49Vyw6clNcHk"},
{"content":{"body":"which are awkward with helpers","msgtype":"m.text","org.matrix.msc1767.text":"which are awkward with helpers"},"ts":1663121630077,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wrgQrysb9f1eVsiMxZGGT59-3g-hVSEwwgxFy1u8rHQ"},
{"content":{"body":"those facts are the only reason Stream exists","msgtype":"m.text","org.matrix.msc1767.text":"those facts are the only reason Stream exists"},"ts":1663121633830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3py7hw7tMpcILvbQbO4qxccRxUipuIDkDHCm3j-0OJ4"},
{"content":{"body":"I can try to track down the mailing list discussions from when Stream was introduced","msgtype":"m.text","org.matrix.msc1767.text":"I can try to track down the mailing list discussions from when Stream was introduced"},"ts":1663121646931,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YF1ve45Yq6VppDzQ3eIKoWLrQx5hsjQRpZmZjKx6xiY"},
{"content":{"body":"but we don't have those problems, so we don't need to introduce a new thing","msgtype":"m.text","org.matrix.msc1767.text":"but we don't have those problems, so we don't need to introduce a new thing"},"ts":1663121666611,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xGkiig6Z9cic8kEE6daFZQ9mbjvt-l8q84xcMVFPVTM"},
{"content":{"body":"which is nice","msgtype":"m.text","org.matrix.msc1767.text":"which is nice"},"ts":1663121667744,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TSYIr70VsDJmcsY_QAjhHBnprVqtTWPRM4PaWfvQ8RI"},
{"content":{"body":"But we have other problems like Iterator interface. There are confusions on what Iterator means in the ecosystem. For example, Iterator helpers actually require TS to change the definition of Iterator. ","msgtype":"m.text","org.matrix.msc1767.text":"But we have other problems like Iterator interface. There are confusions on what Iterator means in the ecosystem. For example, Iterator helpers actually require TS to change the definition of Iterator. "},"ts":1663121780179,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$7hpMlqEmTiDg1-vnXRSUpTzNxU16u4tVoL25WuZyrE4"},
{"content":{"body":"That seems like an extremely minor problem, given that we're designing a language which will be in use for decades","msgtype":"m.text","org.matrix.msc1767.text":"That seems like an extremely minor problem, given that we're designing a language which will be in use for decades"},"ts":1663121822470,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9utznppsG5I3rm3q1j4hdv6FJzWAERbUUi-YOiqCPeU"},
{"content":{"body":"I don't think it's a \"extremely minor problem\". ","msgtype":"m.text","org.matrix.msc1767.text":"I don't think it's a \"extremely minor problem\". "},"ts":1663121856793,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$LQa9LQBAfd1fKxO0tJXOjL4kpYFPcFCQa9JyJMywSCs"},
{"content":{"body":"TS will rename Iterator to IteratorLike","msgtype":"m.text","org.matrix.msc1767.text":"TS will rename Iterator to IteratorLike"},"ts":1663121867617,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_tQKqEZpRYlCPaA8iSx7baYpsNdM-A1Ob-lILNpKL8Y"},
{"content":{"body":"it will be fine","msgtype":"m.text","org.matrix.msc1767.text":"it will be fine"},"ts":1663121868893,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3NiISI04QNa9zkfGBv5tv1JFa29KwfTjy6AQwsqMffY"},
{"content":{"body":"it will be a ecosystem breaking change","msgtype":"m.text","org.matrix.msc1767.text":"it will be a ecosystem breaking change"},"ts":1663121954903,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Goq_7nUBXu_IO3RV7wtnNy3CxNYUvTPOayyWXhq9ib4"},
{"content":{"body":"Yeah, TS always have the way to do incompatible change, but obviously it have cost ,not only TS itself, but also the whole ecosystem","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, TS always have the way to do incompatible change, but obviously it have cost ,not only TS itself, but also the whole ecosystem"},"ts":1663121962273,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$WM2WMus9TeMyZTDHDnOEtlJj50_hPtwTcISEwnYrT98"},
{"content":{"body":"sure. but that's kind of an unavoidable cost when building on top of a standard, outside that standard, no?","msgtype":"m.text","org.matrix.msc1767.text":"sure. but that's kind of an unavoidable cost when building on top of a standard, outside that standard, no?"},"ts":1663121987926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uq5HkB0TcaWBUIebhpcH_6YK7s8ZLdBB2vZ5VnE1kXU"},
{"content":{"body":"I suspect there are relatively few things which use the `Iterator` type, and it is a very easy migration to do","format":"org.matrix.custom.html","formatted_body":"I suspect there are relatively few things which use the <code>Iterator</code> type, and it is a very easy migration to do","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I suspect there are relatively few things which use the `Iterator` type, and it is a very easy migration to do","mimetype":"text/plain"},{"body":"I suspect there are relatively few things which use the <code>Iterator</code> type, and it is a very easy migration to do","mimetype":"text/html"}]},"ts":1663121997519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7lzwobhF-ToOV2NOFVD10EM4waAtrSquyxfhh3FQaYc"},
{"content":{"body":"use Iterator as IteratorLike, and ABikeSheddingNameIterator as Iterator is good IMO","msgtype":"m.text","org.matrix.msc1767.text":"use Iterator as IteratorLike, and ABikeSheddingNameIterator as Iterator is good IMO"},"ts":1663122007508,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UBYzSAPBUNFQgWjJsIzyKPhuNA4FsGeSN2nP0r3eMK4"},
{"content":{"body":"relative to the design of the language for the next several decades, the cost of that particular breaking change is small","msgtype":"m.text","org.matrix.msc1767.text":"relative to the design of the language for the next several decades, the cost of that particular breaking change is small"},"ts":1663122027605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wxmiEiwEoKIRZrqOjniJLboSVWXVjb1CcqUiepJlKBc"},
{"content":{"body":"Again, it's not only TS problem, we also change the Iterator in the spec from a Interface(protocol) to concrete class (prototype). ","msgtype":"m.text","org.matrix.msc1767.text":"Again, it's not only TS problem, we also change the Iterator in the spec from a Interface(protocol) to concrete class (prototype). "},"ts":1663122029987,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$8X8MJLUMW3jmlNVVZ3o_hforfFkKQfUoN56GpbXU9sc"},
{"content":{"body":"in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it.","msgtype":"m.text","org.matrix.msc1767.text":"in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it."},"ts":1663122040274,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$50PC3Dndm5_QRyFmYoz9rYyEAl6tTBCgeMn6Feldm4E"},
{"content":{"body":" * in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it.","m.new_content":{"body":"in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it.","msgtype":"m.text","org.matrix.msc1767.text":"in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it."},"m.relates_to":{"event_id":"$50PC3Dndm5_QRyFmYoz9rYyEAl6tTBCgeMn6Feldm4E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * in the spec it'd be both. it's already both, it's just that the concrete class isn't really exposed to users, and this proposal would expose it."},"ts":1663122057382,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Yfd7GTa-qt5lf5v9p2LLBGrGUeDFam0X8CN8y6qaU9M"},
{"content":{"body":"speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority","msgtype":"m.text","org.matrix.msc1767.text":"speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority"},"ts":1663122058939,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e7SUaF89oqFxZWTFx0_bMI-KSL3_D1cObjB3QKvhiTc"},
{"content":{"body":"> <@bakkot:matrix.org> relative to the design of the language for the next several decades, the cost of that particular breaking change is small\n\n(ESM & CJS co-op: 👀)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wxmiEiwEoKIRZrqOjniJLboSVWXVjb1CcqUiepJlKBc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>relative to the design of the language for the next several decades, the cost of that particular breaking change is small</blockquote></mx-reply>(ESM &amp; CJS co-op: 👀)","m.relates_to":{"m.in_reply_to":{"event_id":"$wxmiEiwEoKIRZrqOjniJLboSVWXVjb1CcqUiepJlKBc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> relative to the design of the language for the next several decades, the cost of that particular breaking change is small\n\n(ESM & CJS co-op: 👀)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wxmiEiwEoKIRZrqOjniJLboSVWXVjb1CcqUiepJlKBc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>relative to the design of the language for the next several decades, the cost of that particular breaking change is small</blockquote></mx-reply>(ESM &amp; CJS co-op: 👀)","mimetype":"text/html"}]},"ts":1663122063458,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$00ytcfm2bIQpFo-XHcwS7vzgsIIq22esCBFLaZ_SWbk"},
{"content":{"body":" * speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority","m.new_content":{"body":"speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority","msgtype":"m.text","org.matrix.msc1767.text":"speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority"},"m.relates_to":{"event_id":"$e7SUaF89oqFxZWTFx0_bMI-KSL3_D1cObjB3QKvhiTc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority"},"ts":1663122065698,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-eAHDeZzU5dbTfr2OOY75jedcGxDVBP7eQdyZWfaAE0"},
{"content":{"body":"Jack Works","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>","mimetype":"text/html"}]},"ts":1663122075774,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3EXIFAzuZFaflMGdxyxn4kEnfakHbaCI6ln8nu6yM6c"},
{"content":{"body":"that particular breaking change was _much_ more serious","format":"org.matrix.custom.html","formatted_body":"that particular breaking change was <em>much</em> more serious","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that particular breaking change was _much_ more serious","mimetype":"text/plain"},{"body":"that particular breaking change was <em>much</em> more serious","mimetype":"text/html"}]},"ts":1663122088088,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ma4pRjlKaft4sQVAY1i5Dtkcyv7Yn19dgTZoPIaISUg"},
{"content":{"body":"> <@bakkot:matrix.org> I suspect there are relatively few things which use the `Iterator` type, and it is a very easy migration to do\n\nIn TypeScript? Actually there are a fair amount of folks using `Iterator` directly, changing that would be breaking, but the interface `Iterator` doesn't have to align with the value `Iterator`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7lzwobhF-ToOV2NOFVD10EM4waAtrSquyxfhh3FQaYc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I suspect there are relatively few things which use the <code>Iterator</code> type, and it is a very easy migration to do</blockquote></mx-reply>In TypeScript? Actually there are a fair amount of folks using <code>Iterator</code> directly, changing that would be breaking, but the interface <code>Iterator</code> doesn't have to align with the value <code>Iterator</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$7lzwobhF-ToOV2NOFVD10EM4waAtrSquyxfhh3FQaYc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> I suspect there are relatively few things which use the `Iterator` type, and it is a very easy migration to do\n\nIn TypeScript? Actually there are a fair amount of folks using `Iterator` directly, changing that would be breaking, but the interface `Iterator` doesn't have to align with the value `Iterator`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7lzwobhF-ToOV2NOFVD10EM4waAtrSquyxfhh3FQaYc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I suspect there are relatively few things which use the <code>Iterator</code> type, and it is a very easy migration to do</blockquote></mx-reply>In TypeScript? Actually there are a fair amount of folks using <code>Iterator</code> directly, changing that would be breaking, but the interface <code>Iterator</code> doesn't have to align with the value <code>Iterator</code>.","mimetype":"text/html"}]},"ts":1663122093646,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$21V6gdeDpL2AkvEBirrXRGd4aPbydWhoOEuPqIzfigI"},
{"content":{"body":"> <@bakkot:matrix.org> speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority\n\nI don't mean the cost of spec editors, but the cost of changing concept which js programmers/educators already have.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e7SUaF89oqFxZWTFx0_bMI-KSL3_D1cObjB3QKvhiTc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority</blockquote></mx-reply>I don't mean the cost of spec editors, but the cost of changing concept which js programmers/educators already have.","m.relates_to":{"m.in_reply_to":{"event_id":"$e7SUaF89oqFxZWTFx0_bMI-KSL3_D1cObjB3QKvhiTc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority\n\nI don't mean the cost of spec editors, but the cost of changing concept which js programmers/educators already have.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e7SUaF89oqFxZWTFx0_bMI-KSL3_D1cObjB3QKvhiTc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>speaking as editor of the specification, the name of the interface in the spec is basically the lowest possible priority</blockquote></mx-reply>I don't mean the cost of spec editors, but the cost of changing concept which js programmers/educators already have.","mimetype":"text/html"}]},"ts":1663122109102,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$sqDeldEhuD3k-N-c3HAjKZespQRQZYaBCcaHhauQX_w"},
{"content":{"body":"> <@rbuckton:matrix.org> In TypeScript? Actually there are a fair amount of folks using `Iterator` directly, changing that would be breaking, but the interface `Iterator` doesn't have to align with the value `Iterator`.\n\nWhich is also why I've been fairly confident in saying \"not every Iterator has a [Symbol.iterator] method\" and \"not every Iterator inherits from %IteratorPrototype%\", because it's come up often enough over the last few years.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$21V6gdeDpL2AkvEBirrXRGd4aPbydWhoOEuPqIzfigI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In TypeScript? Actually there are a fair amount of folks using <code>Iterator</code> directly, changing that would be breaking, but the interface <code>Iterator</code> doesn't have to align with the value <code>Iterator</code>.</blockquote></mx-reply>Which is also why I've been fairly confident in saying &quot;not every Iterator has a [Symbol.iterator] method&quot; and &quot;not every Iterator inherits from %IteratorPrototype%&quot;, because it's come up often enough over the last few years.","m.relates_to":{"m.in_reply_to":{"event_id":"$21V6gdeDpL2AkvEBirrXRGd4aPbydWhoOEuPqIzfigI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> In TypeScript? Actually there are a fair amount of folks using `Iterator` directly, changing that would be breaking, but the interface `Iterator` doesn't have to align with the value `Iterator`.\n\nWhich is also why I've been fairly confident in saying \"not every Iterator has a [Symbol.iterator] method\" and \"not every Iterator inherits from %IteratorPrototype%\", because it's come up often enough over the last few years.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$21V6gdeDpL2AkvEBirrXRGd4aPbydWhoOEuPqIzfigI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In TypeScript? Actually there are a fair amount of folks using <code>Iterator</code> directly, changing that would be breaking, but the interface <code>Iterator</code> doesn't have to align with the value <code>Iterator</code>.</blockquote></mx-reply>Which is also why I've been fairly confident in saying &quot;not every Iterator has a [Symbol.iterator] method&quot; and &quot;not every Iterator inherits from %IteratorPrototype%&quot;, because it's come up often enough over the last few years.","mimetype":"text/html"}]},"ts":1663122214631,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1QzWYTHqtKqGK23CxFYfIrg5lmXlEdWKIs4bJ0MBDOk"},
{"content":{"body":"sure, but that's what `Iterator.from` is for - and iterator helpers would push all the authors of those iterator-likes to in fact make them have both of those things","format":"org.matrix.custom.html","formatted_body":"sure, but that's what <code>Iterator.from</code> is for - and iterator helpers would push all the authors of those iterator-likes to in fact make them have both of those things","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"sure, but that's what `Iterator.from` is for - and iterator helpers would push all the authors of those iterator-likes to in fact make them have both of those things","mimetype":"text/plain"},{"body":"sure, but that's what <code>Iterator.from</code> is for - and iterator helpers would push all the authors of those iterator-likes to in fact make them have both of those things","mimetype":"text/html"}]},"ts":1663122256297,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9GTJ9XQELWEN9OokjAanR-iEXd73liXunkHW3M56Wtc"},
{"content":{"body":"I have myself written iterators which don't inherit from Iterator.prototype, but writing iterators manually is a pretty unusual thing to do, and having to add `__proto__: Iterator.prototype` to such things in the future is not such a large cost, I think.","format":"org.matrix.custom.html","formatted_body":"I have myself written iterators which don't inherit from Iterator.prototype, but writing iterators manually is a pretty unusual thing to do, and having to add <code>__proto__: Iterator.prototype</code> to such things in the future is not such a large cost, I think.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have myself written iterators which don't inherit from Iterator.prototype, but writing iterators manually is a pretty unusual thing to do, and having to add `__proto__: Iterator.prototype` to such things in the future is not such a large cost, I think.","mimetype":"text/plain"},{"body":"I have myself written iterators which don't inherit from Iterator.prototype, but writing iterators manually is a pretty unusual thing to do, and having to add <code>__proto__: Iterator.prototype</code> to such things in the future is not such a large cost, I think.","mimetype":"text/html"}]},"ts":1663122288028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fAWHmLKChHLJBPgpSYzZN6yQXvgjv52XXe2whbcKR6I"},
{"content":{"body":"I guess \"{__proto__: Iterator.prototype}\" doesn't work in some runtime (deno?)","format":"org.matrix.custom.html","formatted_body":"I guess &quot;{<strong>proto</strong>: Iterator.prototype}&quot; doesn't work in some runtime (deno?)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess \"{__proto__: Iterator.prototype}\" doesn't work in some runtime (deno?)","mimetype":"text/plain"},{"body":"I guess &quot;{<strong>proto</strong>: Iterator.prototype}&quot; doesn't work in some runtime (deno?)","mimetype":"text/html"}]},"ts":1663122423684,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$2CB2ayxlBFZrx7zAhUkgN5TYUn3W66V6tgcDXb0EK7M"},
{"content":{"body":"it does","msgtype":"m.text","org.matrix.msc1767.text":"it does"},"ts":1663122427971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N-o77Cj9afdU3YneWu1sjHhM42R8tnZUY57x9lBz9RM"},
{"content":{"body":"deno deletes the Object.prototype accessors","msgtype":"m.text","org.matrix.msc1767.text":"deno deletes the Object.prototype accessors"},"ts":1663122434099,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i4P2biIfLQPB9j-EnTKFuGE_BpqwL_p7XPyEoRRAR7Y"},
{"content":{"body":"not the syntax","msgtype":"m.text","org.matrix.msc1767.text":"not the syntax"},"ts":1663122435405,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Oc81U8QP5Du5Teyd1R4vZqlyM4FkSJZ9qO4Suyd5rw0"},
{"content":{"body":"it's a required part of the spec","msgtype":"m.text","org.matrix.msc1767.text":"it's a required part of the spec"},"ts":1663122443320,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GxpkHZ_V-DRSQdxk0sUt2WnoTPI8AjcAKYgjOM8_mIs"},
{"content":{"body":"syntax works everywhere","msgtype":"m.text","org.matrix.msc1767.text":"syntax works everywhere"},"ts":1663122444021,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XJereuPMfqqePquZTUSYeaaASx3mAsOLl9LMDCeVzTc"},
{"content":{"body":"ljharb: re: your comment in the queue. With the exception of `yield* \"abc\"`, `for(const x of \"abc\")`, and `...\"abc ` (i.e., very explicit actions on a supplied iterable), I really do think any new API that accepts an `Iterable` should restrict it to Object iterables.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: re: your comment in the queue. With the exception of <code>yield* &quot;abc&quot;</code>, <code>for(const x of &quot;abc&quot;)</code>, and <code>...&quot;abc </code> (i.e., very explicit actions on a supplied iterable), I really do think any new API that accepts an <code>Iterable</code> should restrict it to Object iterables.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: re: your comment in the queue. With the exception of `yield* \"abc\"`, `for(const x of \"abc\")`, and `...\"abc ` (i.e., very explicit actions on a supplied iterable), I really do think any new API that accepts an `Iterable` should restrict it to Object iterables.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: re: your comment in the queue. With the exception of <code>yield* &quot;abc&quot;</code>, <code>for(const x of &quot;abc&quot;)</code>, and <code>...&quot;abc </code> (i.e., very explicit actions on a supplied iterable), I really do think any new API that accepts an <code>Iterable</code> should restrict it to Object iterables.","mimetype":"text/html"}]},"ts":1663122452099,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cX0zVZlNL2FRKXu7VzaUV4XZvMGv1LPP82zcP2HXeVU"},
{"content":{"body":"Pretty much every other use case where you end up spreading a string is probably a bug (except `Array.from`). I'd argue that if you wrote `new Set(value)` and `value` was a string, its most likely a bug. If a new API accepted an iterable argument, I'd push hard for requiring you to do `[...\"abc\"]` if you really wanted to pass in code points.","format":"org.matrix.custom.html","formatted_body":"Pretty much every other use case where you end up spreading a string is probably a bug (except <code>Array.from</code>). I'd argue that if you wrote <code>new Set(value)</code> and <code>value</code> was a string, its most likely a bug. If a new API accepted an iterable argument, I'd push hard for requiring you to do <code>[...&quot;abc&quot;]</code> if you really wanted to pass in code points.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pretty much every other use case where you end up spreading a string is probably a bug (except `Array.from`). I'd argue that if you wrote `new Set(value)` and `value` was a string, its most likely a bug. If a new API accepted an iterable argument, I'd push hard for requiring you to do `[...\"abc\"]` if you really wanted to pass in code points.","mimetype":"text/plain"},{"body":"Pretty much every other use case where you end up spreading a string is probably a bug (except <code>Array.from</code>). I'd argue that if you wrote <code>new Set(value)</code> and <code>value</code> was a string, its most likely a bug. If a new API accepted an iterable argument, I'd push hard for requiring you to do <code>[...&quot;abc&quot;]</code> if you really wanted to pass in code points.","mimetype":"text/html"}]},"ts":1663122596711,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A8LNRcKKteMuuPWKVWihK-1DqVlDN6rvtKF21qeIRlo"},
{"content":{"body":"`forEach` shouldn't be in the middle of a chain","format":"org.matrix.custom.html","formatted_body":"<code>forEach</code> shouldn't be in the middle of a chain","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`forEach` shouldn't be in the middle of a chain","mimetype":"text/plain"},{"body":"<code>forEach</code> shouldn't be in the middle of a chain","mimetype":"text/html"}]},"ts":1663122693393,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ln5aVmx47rQ9f8LAtphFVk8DIv_-SIbyT_YxTyRo_hs"},
{"content":{"body":"that would be something like `.tap`.","format":"org.matrix.custom.html","formatted_body":"that would be something like <code>.tap</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that would be something like `.tap`.","mimetype":"text/plain"},{"body":"that would be something like <code>.tap</code>.","mimetype":"text/html"}]},"ts":1663122708336,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fu4cwllzYo3rS6P1hyx4alxT9sQZACqOWtsqhMtuEAs"},
{"content":{"body":"for `tap`, see this thread, particularly my last comment: https://github.com/tc39/proposal-iterator-helpers/issues/13#issuecomment-1210164187","format":"org.matrix.custom.html","formatted_body":"for <code>tap</code>, see this thread, particularly my last comment: https://github.com/tc39/proposal-iterator-helpers/issues/13#issuecomment-1210164187","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for `tap`, see this thread, particularly my last comment: https://github.com/tc39/proposal-iterator-helpers/issues/13#issuecomment-1210164187","mimetype":"text/plain"},{"body":"for <code>tap</code>, see this thread, particularly my last comment: https://github.com/tc39/proposal-iterator-helpers/issues/13#issuecomment-1210164187","mimetype":"text/html"}]},"ts":1663122742599,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yNOjLZrZfsH7g4khnDP9UMOHnxwAYhFVR-YWpozZyDE"},
{"content":{"body":"Justin Ridgewell: what is your abbreviation?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: what is your abbreviation?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: what is your abbreviation?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: what is your abbreviation?","mimetype":"text/html"}]},"ts":1663122753304,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$Hwe24KrklELPPZcLVSfcnMFeBvDTVeOiyW_DuckuCqM"},
{"content":{"body":"The `undefined` return value is my my hated part of `Array.p.forEach`.","format":"org.matrix.custom.html","formatted_body":"The <code>undefined</code> return value is my my hated part of <code>Array.p.forEach</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `undefined` return value is my my hated part of `Array.p.forEach`.","mimetype":"text/plain"},{"body":"The <code>undefined</code> return value is my my hated part of <code>Array.p.forEach</code>.","mimetype":"text/html"}]},"ts":1663122760305,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$b1cpBS3fqs-Dam7RN_-5kMyGkN-koJ1o3FioTeHtOiE"},
{"content":{"body":"JRL","msgtype":"m.text","org.matrix.msc1767.text":"JRL"},"ts":1663122763610,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$l8s83Ej3_3sJ6nyYLb0aMLrgqyuveUBnOIQ6IdwtMBo"},
{"content":{"body":"https://github.com/tc39/notes/blob/6f7e075341e435f22777b07a3ee5141442d2d8a7/delegates.txt#L231","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/tc39/notes/blob/6f7e075341e435f22777b07a3ee5141442d2d8a7/delegates.txt#L231"},"ts":1663122783068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6Mwn4m-nv3tWKnvmBIuMd5UgC_ammt3ZeB5sor1L20U"},
{"content":{"body":"I disagree, I feel `indexed()` is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and *not* the source as a 3rd arg like we do for Array is indicative enough that its not an index.","format":"org.matrix.custom.html","formatted_body":"I disagree, I feel <code>indexed()</code> is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and <em>not</em> the source as a 3rd arg like we do for Array is indicative enough that its not an index.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I disagree, I feel `indexed()` is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and *not* the source as a 3rd arg like we do for Array is indicative enough that its not an index.","mimetype":"text/plain"},{"body":"I disagree, I feel <code>indexed()</code> is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and <em>not</em> the source as a 3rd arg like we do for Array is indicative enough that its not an index.","mimetype":"text/html"}]},"ts":1663122938782,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t5Yk_AwiBnEt1VH0yvvwAYoGRT--Wg_ajoRT2ZH8v84"},
{"content":{"body":"erights: so i'm looking, and now i can't find the file i remember looking at - certainly you'll have https://github.com/ljharb/get-intrinsic/blob/main/index.js, but in test262 it's all single lines of code in individual test files, like https://github.com/tc39/test262/blob/6e61dd7754e7c94ebcf3ee679cb8db3c54a37b50/test/built-ins/ThrowTypeError/length.js#L16-L19 - which isn't a single location, but at least means there's a canonical way to \"get at\" the intrinsic","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: so i'm looking, and now i can't find the file i remember looking at - certainly you'll have https://github.com/ljharb/get-intrinsic/blob/main/index.js, but in test262 it's all single lines of code in individual test files, like https://github.com/tc39/test262/blob/6e61dd7754e7c94ebcf3ee679cb8db3c54a37b50/test/built-ins/ThrowTypeError/length.js#L16-L19 - which isn't a single location, but at least means there's a canonical way to &quot;get at&quot; the intrinsic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"erights: so i'm looking, and now i can't find the file i remember looking at - certainly you'll have https://github.com/ljharb/get-intrinsic/blob/main/index.js, but in test262 it's all single lines of code in individual test files, like https://github.com/tc39/test262/blob/6e61dd7754e7c94ebcf3ee679cb8db3c54a37b50/test/built-ins/ThrowTypeError/length.js#L16-L19 - which isn't a single location, but at least means there's a canonical way to \"get at\" the intrinsic","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: so i'm looking, and now i can't find the file i remember looking at - certainly you'll have https://github.com/ljharb/get-intrinsic/blob/main/index.js, but in test262 it's all single lines of code in individual test files, like https://github.com/tc39/test262/blob/6e61dd7754e7c94ebcf3ee679cb8db3c54a37b50/test/built-ins/ThrowTypeError/length.js#L16-L19 - which isn't a single location, but at least means there's a canonical way to &quot;get at&quot; the intrinsic","mimetype":"text/html"}]},"ts":1663122975737,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U5QiO8WRGPIR5LjYZsG0Jsws9xVT8U2MTEOypkuOiks"},
{"content":{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","format":"org.matrix.custom.html","formatted_body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/plain"},{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$t5Yk_AwiBnEt1VH0yvvwAYoGRT--Wg_ajoRT2ZH8v84"}}},"ts":1663123011696,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l-8gHhcWibQ3bYSGwaHcdapl8jMjY7nuJhCtd7-hn10"},
{"content":{"body":"> <@rbuckton:matrix.org> I disagree, I feel `indexed()` is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and *not* the source as a 3rd arg like we do for Array is indicative enough that its not an index.\n\n * we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$t5Yk_AwiBnEt1VH0yvvwAYoGRT--Wg_ajoRT2ZH8v84?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I disagree, I feel <code>indexed()</code> is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and <em>not</em> the source as a 3rd arg like we do for Array is indicative enough that its not an index.</blockquote></mx-reply> * we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","m.new_content":{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","format":"org.matrix.custom.html","formatted_body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/plain"},{"body":"we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$l-8gHhcWibQ3bYSGwaHcdapl8jMjY7nuJhCtd7-hn10","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I disagree, I feel `indexed()` is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and *not* the source as a 3rd arg like we do for Array is indicative enough that its not an index.\n\n * we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$t5Yk_AwiBnEt1VH0yvvwAYoGRT--Wg_ajoRT2ZH8v84?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I disagree, I feel <code>indexed()</code> is over complicated, and passing in a counter is much easier to reason over and better for refactoring. The fact that we pass a counter and <em>not</em> the source as a 3rd arg like we do for Array is indicative enough that its not an index.</blockquote></mx-reply> * we don't provide the source on array reduce/reduceRight, either, and that argument is rarely used anyways, so i don't think that indicates anything","mimetype":"text/html"}]},"ts":1663123018767,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XaGZyeZiCwqlJZKIgEeFAfoujTI8jB8exJGZjiXscYo"},
{"content":{"body":"I've taken to think of the \"iterator helpers\" as \"one shot iterable helpers that happen to be on Iterator.prototype and can be accessed by any iterable using Iterator.from()\"","msgtype":"m.text","org.matrix.msc1767.text":"I've taken to think of the \"iterator helpers\" as \"one shot iterable helpers that happen to be on Iterator.prototype and can be accessed by any iterable using Iterator.from()\""},"ts":1663123022154,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gM29-zkgiFCXZ5FK4-B2aMKycxAym4IrbuwsKokkQD4"},
{"content":{"body":"i agree with that mental model, but i don't think that speaks for or against \"counter\"?","msgtype":"m.text","org.matrix.msc1767.text":"i agree with that mental model, but i don't think that speaks for or against \"counter\"?"},"ts":1663123050347,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_9Ta2q8ClV0Es1DbKjr1_zb2_rYU-MQ3Yqmw-GoZ81k"},
{"content":{"body":"> <@ljharb:matrix.org> i agree with that mental model, but i don't think that speaks for or against \"counter\"?\n\nSorry, that comment wasn't related to the \"counter\" discussion.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_9Ta2q8ClV0Es1DbKjr1_zb2_rYU-MQ3Yqmw-GoZ81k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i agree with that mental model, but i don&#39;t think that speaks for or against &quot;counter&quot;?</blockquote></mx-reply>Sorry, that comment wasn't related to the &quot;counter&quot; discussion.","m.relates_to":{"m.in_reply_to":{"event_id":"$_9Ta2q8ClV0Es1DbKjr1_zb2_rYU-MQ3Yqmw-GoZ81k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i agree with that mental model, but i don't think that speaks for or against \"counter\"?\n\nSorry, that comment wasn't related to the \"counter\" discussion.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_9Ta2q8ClV0Es1DbKjr1_zb2_rYU-MQ3Yqmw-GoZ81k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i agree with that mental model, but i don&#39;t think that speaks for or against &quot;counter&quot;?</blockquote></mx-reply>Sorry, that comment wasn't related to the &quot;counter&quot; discussion.","mimetype":"text/html"}]},"ts":1663123092441,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_V3vKgRHWsjzI0SqmBIhL0hZmFWJvcGGjE8_4MGO2V4"},
{"content":{"body":"rbuckton: I expect to do a fair amount of `document.querySelectorAll(...).values().map().find()` etc","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I expect to do a fair amount of <code>document.querySelectorAll(...).values().map().find()</code> etc","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I expect to do a fair amount of `document.querySelectorAll(...).values().map().find()` etc","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I expect to do a fair amount of <code>document.querySelectorAll(...).values().map().find()</code> etc","mimetype":"text/html"}]},"ts":1663123224505,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VLLHnguZbd9hRYS4Corm2CGE3xj3dZTJ9DGiakVPeTk"},
{"content":{"body":"There's a difference in intention. `.reduce` is an aggregation operation producing a scalar value. It's perfectly reasonable to expect `.map` and `.filter` to care about a counter. `.map` with a counter can be used to map into even/odd rows. `.filter` with a counter could reasonably be used to skip every other value. Those cases exist with Array `.map` and `.filter` today, and being able to refactor to iterator helpers seems like a good thing.","format":"org.matrix.custom.html","formatted_body":"There's a difference in intention. <code>.reduce</code> is an aggregation operation producing a scalar value. It's perfectly reasonable to expect <code>.map</code> and <code>.filter</code> to care about a counter. <code>.map</code> with a counter can be used to map into even/odd rows. <code>.filter</code> with a counter could reasonably be used to skip every other value. Those cases exist with Array <code>.map</code> and <code>.filter</code> today, and being able to refactor to iterator helpers seems like a good thing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"There's a difference in intention. `.reduce` is an aggregation operation producing a scalar value. It's perfectly reasonable to expect `.map` and `.filter` to care about a counter. `.map` with a counter can be used to map into even/odd rows. `.filter` with a counter could reasonably be used to skip every other value. Those cases exist with Array `.map` and `.filter` today, and being able to refactor to iterator helpers seems like a good thing.","mimetype":"text/plain"},{"body":"There's a difference in intention. <code>.reduce</code> is an aggregation operation producing a scalar value. It's perfectly reasonable to expect <code>.map</code> and <code>.filter</code> to care about a counter. <code>.map</code> with a counter can be used to map into even/odd rows. <code>.filter</code> with a counter could reasonably be used to skip every other value. Those cases exist with Array <code>.map</code> and <code>.filter</code> today, and being able to refactor to iterator helpers seems like a good thing.","mimetype":"text/html"}]},"ts":1663123229897,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EjFUjSOwN8gT1xNN39FZJbCphIBrDf2Ha0EWfsTHt-E"},
{"content":{"body":"re strings, i guess we could have an AO like `IsContainer` or something, that returns true for Object, and eventually Record and Tuple, and require that in the helpers - and then Strings would never be iterated by default","format":"org.matrix.custom.html","formatted_body":"re strings, i guess we could have an AO like <code>IsContainer</code> or something, that returns true for Object, and eventually Record and Tuple, and require that in the helpers - and then Strings would never be iterated by default","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"re strings, i guess we could have an AO like `IsContainer` or something, that returns true for Object, and eventually Record and Tuple, and require that in the helpers - and then Strings would never be iterated by default","mimetype":"text/plain"},{"body":"re strings, i guess we could have an AO like <code>IsContainer</code> or something, that returns true for Object, and eventually Record and Tuple, and require that in the helpers - and then Strings would never be iterated by default","mimetype":"text/html"}]},"ts":1663123253678,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$whlLCV7dKedZDu7descvFF1IpAWDmktyjFc5H_1D3ik"},
{"content":{"body":"Are tuples concat spreadable?","msgtype":"m.text","org.matrix.msc1767.text":"Are tuples concat spreadable?"},"ts":1663123351653,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pxd6zRen0mx3c58WX3rJo2XjYAZLnd7YzutOKaxIRWY"},
{"content":{"body":"Apparently.","msgtype":"m.text","org.matrix.msc1767.text":"Apparently."},"ts":1663123373904,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MknuBdMMDbCW4Wpn8On4jBXSYZ9JaPqn83WKKpUMepI"}
]