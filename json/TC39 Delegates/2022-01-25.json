[
{"content":{"body":"sure, i can unarchive it if you want to comment it yourself? just lmk","format":"org.matrix.custom.html","formatted_body":"sure, i can unarchive it if you want to comment it yourself? just lmk","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$JvGk6-GVSvZacJRgJGAAB3k8S77ErmncKxdiF2CeSWY"}}},"ts":1643071608084,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C9u2r09ltjRomUVYsBjWkGveH2cOhULHYCJPwl_br9k"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: can you use your admin powers to drop a link to https://github.com/bakkot/proposal-duplicate-named-capturing-groups on https://github.com/tc39/proposal-regexp-named-groups/issues/44 ?\n\n * sure, i can unarchive it if you want to comment it yourself? just lmk","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JvGk6-GVSvZacJRgJGAAB3k8S77ErmncKxdiF2CeSWY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: can you use your admin powers to drop a link to https://github.com/bakkot/proposal-duplicate-named-capturing-groups on https://github.com/tc39/proposal-regexp-named-groups/issues/44 ?</blockquote></mx-reply> * sure, i can unarchive it if you want to comment it yourself? just lmk","m.new_content":{"body":"sure, i can unarchive it if you want to comment it yourself? just lmk","format":"org.matrix.custom.html","formatted_body":"sure, i can unarchive it if you want to comment it yourself? just lmk","msgtype":"m.text"},"m.relates_to":{"event_id":"$C9u2r09ltjRomUVYsBjWkGveH2cOhULHYCJPwl_br9k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643071645974,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oGi3mFKPb5y0S7uYh2VGWyIzcdyokAZk43SSYRvl6jc"},
{"content":{"body":"also, what happened with the \"set method argument internal slot\" discussion? i had to drop off","msgtype":"m.text"},"ts":1643071670717,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zOsmeS5Vq-u_zhv1Of6hBEibax3KdsUoAu_QNZLzfS8"},
{"content":{"body":" * sure, i can unarchive it if you want to comment it yourself? just lmk, or if we can't coordinate, i can","format":"org.matrix.custom.html","formatted_body":" * sure, i can unarchive it if you want to comment it yourself? just lmk, or if we can't coordinate, i can","m.new_content":{"body":"sure, i can unarchive it if you want to comment it yourself? just lmk, or if we can't coordinate, i can","format":"org.matrix.custom.html","formatted_body":"sure, i can unarchive it if you want to comment it yourself? just lmk, or if we can't coordinate, i can","msgtype":"m.text"},"m.relates_to":{"event_id":"$C9u2r09ltjRomUVYsBjWkGveH2cOhULHYCJPwl_br9k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643072290293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xD4_gdolcCygrl3Su33zhQ5CWQwnUWpzyP7TifICo64"},
{"content":{"body":"ljharb: if you want to unarchive tonight and ping me I'll link it, or you should feel free to do so on my behalf","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: if you want to unarchive tonight and ping me I'll link it, or you should feel free to do so on my behalf","msgtype":"m.text"},"ts":1643081566276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YRx58w9LE3E4XViFEWHrfoGVUQFVZ7XWPlIy0SOy4Y0"},
{"content":{"body":"> <@ljharb:matrix.org> also, what happened with the \"set method argument internal slot\" discussion? i had to drop off\n\ntl;dr was, for the argument to `Set.prototype.union`, MM does not like the idea of _only_ reaching in to the [[SetData]] internal slot, but would potentially be OK with reaching in to that slot if present and otherwise falling back to the publicly exposed methods (`has`, etc), even though this would technically be a violation of proxy transparency (because for most cases it would still Just Work)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zOsmeS5Vq-u_zhv1Of6hBEibax3KdsUoAu_QNZLzfS8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>also, what happened with the &quot;set method argument internal slot&quot; discussion? i had to drop off</blockquote></mx-reply>tl;dr was, for the argument to <code>Set.prototype.union</code>, MM does not like the idea of <em>only</em> reaching in to the [[SetData]] internal slot, but would potentially be OK with reaching in to that slot if present and otherwise falling back to the publicly exposed methods (<code>has</code>, etc), even though this would technically be a violation of proxy transparency (because for most cases it would still Just Work)","m.relates_to":{"m.in_reply_to":{"event_id":"$zOsmeS5Vq-u_zhv1Of6hBEibax3KdsUoAu_QNZLzfS8"}},"msgtype":"m.text"},"ts":1643081591253,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$05jo7TVStPF2PxGo-MDN50CCzo7EHpww7yvnXBT3-wY"},
{"content":{"body":"bakkot: done now, go nuts","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: done now, go nuts","msgtype":"m.text"},"ts":1643081592903,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1LYeyv4nuOSn8gx5ZoJaTgVW-rvhi-yLix5rtfZ-0gs"},
{"content":{"body":"bakkot: but the receiver would still have slot access only, yes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: but the receiver would still have slot access only, yes?","msgtype":"m.text"},"ts":1643081664206,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oh8b37d2ba-uc9axxlGRRKVFE7X6qnwhffnRF8NGNmc"},
{"content":{"body":"yeah, receiver is fine","msgtype":"m.text"},"ts":1643081672427,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OCKLT-_X7ab9KBGfIwjubPGuhPoKd0h722xYcpluxXY"},
{"content":{"body":"that's already how it works","msgtype":"m.text"},"ts":1643081677817,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XUj4Nadp4h4Rl7-aKxnr-Jb5htnO8MiD26dMssYV72Y"},
{"content":{"body":"awesome","msgtype":"m.text"},"ts":1643081686767,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rCM9MkEi6zzLIa6QUc7mIdxqFROI5-xvCcpqE7DFUXc"},
{"content":{"body":"that is, it is already common to access the internal slot of the receiver","msgtype":"m.text"},"ts":1643081689100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n3VYcYEiYWs6tl7EVPmpRddYLdfk_LG8VUFb8i-1KFI"},
{"content":{"body":"(re-archived the repo, after your comment; lmk if you need anything else)","msgtype":"m.text"},"ts":1643081695507,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kYTnsfGU6yEKS6zbvqvwFqdX0AewYx4DHJWdBSD9R7Y"},
{"content":{"body":"nope, that was all, thanks","msgtype":"m.text"},"ts":1643081703674,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o21O7wu23w5R7blKoWEEWixf7ZspIVx2aELzjC2nLZA"},
{"content":{"body":"though in both the argument case and the receiver case we need to figure out what affordances, if any, we're going to make for subclasses","msgtype":"m.text"},"ts":1643081717532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$359K5d0giCQyW6SdpZ0j-uMPPIuXYa2oSfqx_K-c7_k"},
{"content":{"body":"hi I've read the meeting logs yesterday. I'm interested in reviewing structured clone algr. (cc syg )","format":"org.matrix.custom.html","formatted_body":"hi I've read the meeting logs yesterday. I'm interested in reviewing structured clone algr. (cc <a href=\"https://matrix.to/#/@syg:mozilla.org\">syg</a> )","msgtype":"m.text"},"ts":1643128733172,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XG0xyyV3SRNaQvs_NuXU1K58LYVYLJaykNn73GD6MaM"},
{"content":{"body":"Jack Works: sure, will request your review when the draft is ready","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: sure, will request your review when the draft is ready","msgtype":"m.text"},"ts":1643128854146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1FiG8lqAWA6_4d9koaZYowFLLPzvszhVATCJJzdWzh8"},
{"content":{"body":"👀 I set an alarm on 14:00 PST and not be able to present enum before 14:00 cause I'm sleeping.","msgtype":"m.text"},"ts":1643129360372,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$R6z9fTPm-3jxdDcVlufL1-apvEStNOCFsqBufSUp2dk"},
{"content":{"body":"Jack Works: we'll schedule you as late as possible today to help you sleep - so in between 14:00-15:00 PST","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: we'll schedule you as late as possible today to help you sleep - so in between 14:00-15:00 PST","msgtype":"m.text"},"ts":1643129570339,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dmlwxNeu0v8PN4__N8OlME-SsMKHfUgGSttiG4VbV_Y"},
{"content":{"body":"This is your 4 minute warning: Plenary starts soon","msgtype":"m.text"},"ts":1643133421660,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$V_Zw5xGK6l2wgBZHafl2fMcgQrCau_GXAB2sReUnkKc"},
{"content":{"body":"I can't do notes right away, but I can in a bit","msgtype":"m.text"},"ts":1643133738016,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$opnFRFTCAqH-_rlVCK_EsqAK2jf-m9sbSwmz38wDac0"},
{"content":{"body":"thanks ptomato ","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a>","msgtype":"m.text"},"ts":1643133795269,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$hCi0HODxsIzMVhz0_2RYZP6jW_nYWhSWbVOwol6G66k"},
{"content":{"body":"Mathieu Hofman: can you confirm the conclusion we have captured in the notes is correct","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: can you confirm the conclusion we have captured in the notes is correct","msgtype":"m.text"},"ts":1643135223089,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hssI2VQLpkZfmBE_XfOgzk5oLw3meKkBT5D08ePfsIM"},
{"content":{"body":"I think so but best to confirm","msgtype":"m.text"},"ts":1643135230574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fhg6FktLHcPQB-4rNsfP4RQWVnav9MzB4XWP2Nf-xVY"},
{"content":{"body":"never GCing is always legal, so XS's implementation would still be conformant","msgtype":"m.text"},"ts":1643136297848,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8bL8Fvrn6gxpy76_ZI3cCVuTslodekp7yzHqaKUGuBs"},
{"content":{"body":"+1, that was a mistake","msgtype":"m.text"},"ts":1643137225095,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uCHPN1wO6ossUuAch3gnZBkEYhY4kPs_a9TBTK5OBdw"},
{"content":{"body":"(but i also think registered symbols themselves are a mistake)","msgtype":"m.text"},"ts":1643137247907,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g_dPwR98FUcFYA0zcOOi-Z4mr-Z58TZx6bWsMuYpXDs"},
{"content":{"body":"what was the original use case for them anyway","msgtype":"m.text"},"ts":1643137486899,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8uopvfWM7I5Aj72AMzVxbBbaXDg7lgNDfCIMXewtb5Q"},
{"content":{"body":"for registered symbols?","msgtype":"m.text"},"ts":1643137501486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c8v1sYH6KWp9zwQ8fL9G_2AEPytKLfIPpZpcA2pXgBo"},
{"content":{"body":"it lets you do the same thing as well-known symbols for libraries","msgtype":"m.text"},"ts":1643137507532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sE04SxVEvafNXxIN1geIuUXvj5CBudjCOU5ZI_u4QzY"},
{"content":{"body":"so a library can interop with itself across realms","msgtype":"m.text"},"ts":1643137512515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vPc-xXwiIQCdjr4yudxw5BbhqfzPAuYturUF-aAU6AU"},
{"content":{"body":"but... what realms","msgtype":"m.text"},"ts":1643137522245,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Awpba1bSzyCInDbW7Kf4QhybZMN7y4fNHvQKWYb8GYI"},
{"content":{"body":"we didn't have sync realms","msgtype":"m.text"},"ts":1643137524963,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-o2Ys12nny39wf0Im8B1QrhceEp8neQ9tFqYH37X1dI"},
{"content":{"body":"iframes","msgtype":"m.text"},"ts":1643137540866,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Thg8wGF8FgNW9XMI5EPVK0b9r1gHXm2zdZp0KmK2G84"},
{"content":{"body":"we have always had iframes","msgtype":"m.text"},"ts":1643137548655,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6NTg9hFwy2qCGgUy4NQLGRRjMBzVsDoZlpgyCc3GQ7U"},
{"content":{"body":"oh, i guess sync iframes","msgtype":"m.text"},"ts":1643137548791,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$joxHv-buqLu_VNEq7qToU_mghuJt7WMwRuwY4OczIBw"},
{"content":{"body":"but also, not necessarily across realms","msgtype":"m.text"},"ts":1643137554917,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mHvWA8Kr9sx3A_9nkht6BJFLr2KSkhecRSlT208MLmA"},
{"content":{"body":"i have a hard time believing that was a use case tc39 cared about back then?","msgtype":"m.text"},"ts":1643137559345,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AxgbEU4ROYpp7TWJwncdNa-ks-OOA6POfUVq-aRrK_k"},
{"content":{"body":"just multiple version of the library within the same realm","msgtype":"m.text"},"ts":1643137559886,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DFcw_wjge3e_mppKNMiMKajzhPWQ5rddn9AYFwIN6MM"},
{"content":{"body":" * but also, not necessarily across realms","m.new_content":{"body":"but also, not necessarily across realms","msgtype":"m.text"},"m.relates_to":{"event_id":"$mHvWA8Kr9sx3A_9nkht6BJFLr2KSkhecRSlT208MLmA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643137566082,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MbTbw8JGVytsEFTYP8wOnWp_qMeTtj3CCzlEBAaYO_4"},
{"content":{"body":"Ashley Claymore: can you share with me the test case you used to identify SM gc behavior?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: can you share with me the test case you used to identify SM gc behavior?","msgtype":"m.text"},"ts":1643137569908,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$YhhlGelthWXbh3XvW2dwpPaHbO1S8Gln55wOdJz_D3c"},
{"content":{"body":"yes, right, coordination without having the library do the heavy lifting","msgtype":"m.text"},"ts":1643137583620,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OwgWGtbAFp1-S2e52_wMYny7ciW4eIzy8ZcxDEOuQzE"},
{"content":{"body":"> <@yulia:mozilla.org> Ashley Claymore: can you share with me the test case you used to identify SM gc behavior?\n\nwill do :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YhhlGelthWXbh3XvW2dwpPaHbO1S8Gln55wOdJz_D3c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: can you share with me the test case you used to identify SM gc behavior?</blockquote></mx-reply>will do :)","m.relates_to":{"m.in_reply_to":{"event_id":"$YhhlGelthWXbh3XvW2dwpPaHbO1S8Gln55wOdJz_D3c"}},"msgtype":"m.text"},"ts":1643137630666,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ejTOpm2gw0WHpet2kVPYtbmtUZmYuQ1PrqpnvBxE_No"},
{"content":{"body":"well, also lets consumers of a library coordinate with it without having a direct reference to it","msgtype":"m.text"},"ts":1643137646284,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gjRX2sNXH-7ESjKfNQY8ahY73-xspj6qyzwwGHEb7xo"},
{"content":{"body":"like you can have a library which defines a protocol, and have someone else implement that protocol without reference to the library","msgtype":"m.text"},"ts":1643137666826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yfb_UNBJrIURLSaaD2jOk6XWx057nZHjHTXfiSGyEU4"},
{"content":{"body":"shu: as much as i claim that the existence of iframes means browsers can't pretend realms don't exist, i completely agree with you that it's unlikely that was the motivation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: as much as i claim that the existence of iframes means browsers can't pretend realms don't exist, i completely agree with you that it's unlikely that was the motivation","msgtype":"m.text"},"ts":1643137742097,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T9_okhiHqjohHSr2kmD3hgQUK2gToE5TkmVkgffbetE"},
{"content":{"body":"making the symbol registry realm-specific would have supported the library use case just fine, i think","msgtype":"m.text"},"ts":1643137763522,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qqHsNCvY2AyDyTRcxU0ymYQKq7gELau-90RHsf3UlPE"},
{"content":{"body":"forget I said realms; \"multiple versions of a library\" is the right thing to think about, whether that's cross-realm or not","msgtype":"m.text"},"ts":1643137773217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PQawaHsp8_WFuLm9irutI41pcFB-95b7wohsmn9zBbg"},
{"content":{"body":"and consumers of a library which aren't including it directly","msgtype":"m.text"},"ts":1643137783714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2_18nO1BujgxqjzHoqb4QHmF_Ada9BW2kXAA-jI0oP0"},
{"content":{"body":"erights: what if i had a WeakMap of a symbol to an object, and then a WeakRef of the same object, and no other refs to the object. couldn't i observe the collection of the symbol via the collection of the object?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: what if i had a WeakMap of a symbol to an object, and then a WeakRef of the same object, and no other refs to the object. couldn't i observe the collection of the symbol via the collection of the object?","msgtype":"m.text"},"ts":1643137858030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pAsqLtGaAYyfroykCiInJ0U57CnUW_WfljBZfW88vmI"},
{"content":{"body":"subclassing doesn't work anyway, because of e.g. `BaseClass[method].call(subclassInstance, …)` directly interacting with internal slots","format":"org.matrix.custom.html","formatted_body":"subclassing doesn't work anyway, because of e.g. <code>BaseClass[method].call(subclassInstance, …)</code> directly interacting with internal slots","msgtype":"m.text"},"ts":1643138392376,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$brGyr4KAWAnZbitGH7RyTiTZjUzXK6ipA0nJHtP2vZU"},
{"content":{"body":"ljharb: fwiw I don't think \"registered symbols\" and \"unique symbols\" are actually the same kind of thing for users","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: fwiw I don't think &quot;registered symbols&quot; and &quot;unique symbols&quot; are actually the same kind of thing for users","msgtype":"m.text"},"ts":1643138406385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sE6TzQS0wh2fvPRsUDNWhOh6epmkQWLOcf5Mp6kGb80"},
{"content":{"body":"they have the same type but they really do not come up in the same cases","msgtype":"m.text"},"ts":1643138415533,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r5EaVjenUbVIu0Z1yOKSZ8KwJ3gCU7k9b4UAMHO_2zo"},
{"content":{"body":"Aren't registered Symbols often used for safely branding objects, in case you have more the one copy of a library (so instanceof is risky)?","msgtype":"m.text"},"ts":1643138472896,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$XXMArafZrzk-kacsXmjMTyxDXBRzdC8ZnlEdvsikCU4"},
{"content":{"body":"Ben Newman (Apollo, @benjamn on GH): yes, but that's not like a regular symbol","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@benjamn:matrix.org\">Ben Newman (Apollo, @benjamn on GH)</a>: yes, but that's not like a regular symbol","msgtype":"m.text"},"ts":1643138504065,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iMy9P__7DW7ApL4Ei7UVp2k7ULdrPTXgwrk1A4qNNok"},
{"content":{"body":"I was responding to the question about whether anyone actually uses registered Symbols","msgtype":"m.text"},"ts":1643138525123,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$SWQzO0k2muX6J4UHpAwQvOHnMVMm4pUlLaJ6EXYrDsA"},
{"content":{"body":"ah, sure","msgtype":"m.text"},"ts":1643138537572,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NpBBo6-Qwvw_elace3GbA5NUJ0vc2aGmYgCPJMOPktc"},
{"content":{"body":"that's the common _appropriate_ use case, yeah","format":"org.matrix.custom.html","formatted_body":"that's the common <em>appropriate</em> use case, yeah","msgtype":"m.text"},"ts":1643138553692,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5go9kTjwBukMMKOq8fwE_OfeSpE1Ur2pRwt-U2R4pW8"},
{"content":{"body":"\"eternal\" seems to mean/imply \"recoverable after all references are lost\" (fair?)","msgtype":"m.text"},"ts":1643138671958,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$NOclLoscDPFOpWZgY2Cywcg1DSBm6Aey9pMgF6fH_ns"},
{"content":{"body":"Ben Newman (Apollo, @benjamn on GH): my claim is that there is no good reason to want to put such a brand in a WeakMap","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@benjamn:matrix.org\">Ben Newman (Apollo, @benjamn on GH)</a>: my claim is that there is no good reason to want to put such a brand in a WeakMap","msgtype":"m.text"},"ts":1643138672226,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GnqZ5l4ff3U0SlzHGBxt8pMQR7iF3SGxbSxvMwh_Wfw"},
{"content":{"body":"at least not that i can think of offhand","msgtype":"m.text"},"ts":1643138686148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X7YCJ2gVba_INOrsV0NiBwub4ltqqPjY1r8Xdei5hAc"},
{"content":{"body":"I'm uncomfortable with throwing \"good\" around like that","msgtype":"m.text"},"ts":1643138751419,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$sPIAsP9TRjruwNAkEb84yWFLnRXNEffSvbCpVzJ-zb8"},
{"content":{"body":"hm, i just got kicked off the call","msgtype":"m.text"},"ts":1643138753436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FBdZdMwGtY1kLKcfiZ755wzlKmdPf_mvQjZcNYNRTK0"},
{"content":{"body":"Me too","msgtype":"m.text"},"ts":1643138757150,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$t4RpxIL-xsyecseGTvvImSci71DvqCGAuRRjKQyY-6c"},
{"content":{"body":"what did i miss?","msgtype":"m.text"},"ts":1643138759313,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QDV27abgi2cDGi3saR1ihpccu5eKLPp8Jqxx5YW9lQs"},
{"content":{"body":"ah k","msgtype":"m.text"},"ts":1643138765067,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Aj3Pc4DfCH-TaTSXjnPgIf9SWSOvwj6xj8UwUxpdY-U"},
{"content":{"body":"did the call just die?","msgtype":"m.text"},"ts":1643138779827,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$YWB0GFRjfnYJwXW6H2k4wAnfZJZbz_N31HPEZUWh7DY"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1643138807133,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ZY-5J36hV6CMLhnzcnJOg0-l6dqxjQbbv9o8dWba6_w"},
{"content":{"body":"(it's back if you reconnect)","msgtype":"m.text"},"ts":1643138808892,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$hkrGGVl6umw3Uc9GtBWNILjDiJMfP2tJLY7aaAPisFg"},
{"content":{"body":" * Oh again","m.new_content":{"body":"Oh again","msgtype":"m.text"},"m.relates_to":{"event_id":"$D0sVIjXnEj1RogWvhCx63bezQBzrp_b7tbIKmXGJZ0c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643138837386,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_02I61bMDkLgdRjbcb4pAb-vc4j2GcVLgiWa81mKTf8"},
{"content":{"body":"let me put it a different way: the reason to want a registered symbol is that you want something which lives forever, for e.g. coordination across instances/consumers of a library. the reason you want to put symbols in a weakmap is that you want to hold something weakly - you have a symbol which is ephemeral, and you want to hold something else ephemerally. (Otherwise you could just use a Map.) these uses are directly opposed.","msgtype":"m.text"},"ts":1643139003364,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1kzAAHdXCUX2TzqtqAJ4z-HGHrPIbhaaUBlL89Xf3Qc"},
{"content":{"body":"I'm fine with never collecting registered symbols, as are V8 and Mozilla's engine, it sounds like","msgtype":"m.text"},"ts":1643139076912,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$2KpqWdGtNfsDUojfn6Qb40BUkxqTQf5lqhUioZb8zgA"},
{"content":{"body":"they are, quite literally, always reachable once registered, even if you've lost all references","msgtype":"m.text"},"ts":1643139092290,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$z1QP5LWrqhvCdeVP6PVggY_veuX38JcOsC9YSHyf3is"},
{"content":{"body":"bakkot: But you can also intentionally craft an object that should live forever and also place it in a weakmap. If you *want* to track a symbol in a way that is \"preferrably\" weak, you would have to write a lot of defensive code and have both a WeakMap and a Map.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: But you can also intentionally craft an object that should live forever and also place it in a weakmap. If you <em>want</em> to track a symbol in a way that is &quot;preferrably&quot; weak, you would have to write a lot of defensive code and have both a WeakMap and a Map.","msgtype":"m.text"},"ts":1643139164274,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DA-htoV-mQM4JZIAsGT5w9tN3ofWynjl-WjKJwIGzGo"},
{"content":{"body":"the \"optimization\" of collecting registered symbols anyway and then later returning a new reference if someone asks for them again with Symbol.for is simply unsound, IMO","msgtype":"m.text"},"ts":1643139183821,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Hf6smTphrhE76fNdK6Bqyt3CdP1BngwvXrBgHmVtwsc"},
{"content":{"body":"it would be nice to hear about a JS engine that actually does that","msgtype":"m.text"},"ts":1643139195209,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$zj_-eSiClUwAMfP1UBQXUSvDkWZLF2XCexujrjHH3vU"},
{"content":{"body":"is someone from Apple on the call? msaboff ? does Safari actually collect registered symbols?","format":"org.matrix.custom.html","formatted_body":"is someone from Apple on the call? <a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a> ? does Safari actually collect registered symbols?","msgtype":"m.text"},"ts":1643139271126,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$8q_MPjXz3IHqzjeEFQEkmfPUJke4YVHU7AIDdImf3XE"},
{"content":{"body":"rbuckton: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to _support_ it without needing to make it trivial","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to <em>support</em> it without needing to make it trivial","msgtype":"m.text"},"ts":1643139274296,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r4WflN3_3UQOqEGIyWuCPkZ-9XM39c0Fdm8u0_lnkH4"},
{"content":{"body":" * rbuckton: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to _support_ it without needing to make it trivial","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to <em>support</em> it without needing to make it trivial","m.new_content":{"body":"rbuckton: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to _support_ it without needing to make it trivial","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: my position is that the desire to weakly hold symbols which may or may not be registered is niche enough that it's sufficient for the language to <em>support</em> it without needing to make it trivial","msgtype":"m.text"},"m.relates_to":{"event_id":"$r4WflN3_3UQOqEGIyWuCPkZ-9XM39c0Fdm8u0_lnkH4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643139279087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o7nuLD793T-D25DnVQTJOAT7l-sGppre2qmLKmCP-J8"},
{"content":{"body":"Robin Ricard: can you add \"no preference, general support\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>: can you add &quot;no preference, general support&quot;?","msgtype":"m.text"},"ts":1643139293878,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Hy1aoHyHPnCHlBBs4y713we5xR2M8s0FoUrbQBf8t0I"},
{"content":{"body":"XS does not collect any symbols (just stated by Peter H on the call)","msgtype":"m.text"},"ts":1643139316120,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$KX7pl6-NnrZQdqSiY1op__-yBEonRW6yCSeZplwXMtc"},
{"content":{"body":"i mean, i care, i like it","msgtype":"m.text"},"ts":1643139319642,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yN8qT-rS54yGwhtW5Za1SL-bH7HRK6IuKPTdsP_PLio"},
{"content":{"body":"yulia: \"indifferent\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: &quot;indifferent&quot;","msgtype":"m.text"},"ts":1643139328731,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$pqhrOgFuD45MgG55-nfD57fq7R8jAHkYWYa9zj53BHY"},
{"content":{"body":"Ben Newman (Apollo, @benjamn on GH): why is that unsound?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@benjamn:matrix.org\">Ben Newman (Apollo, @benjamn on GH)</a>: why is that unsound?","msgtype":"m.text"},"ts":1643139331423,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LAP746QqgtMdZo0ruuPXPKxHIn00JXgSQzljfjccEew"},
{"content":{"body":"changed wording","msgtype":"m.text"},"ts":1643139335620,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$ovD3Gb137ebirDYpe7Jy5GsesF9EznU1ItaRZaAK-Cg"},
{"content":{"body":"it happens with strings all the time","msgtype":"m.text"},"ts":1643139342844,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XbXNV7jGdTDgyCGTe1lPrjq0gJcQklezrNF4YeGMd6E"},
{"content":{"body":"and doubles, actually, in V8","msgtype":"m.text"},"ts":1643139356475,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Uadr1FWx5AEqZj--pGhx8X77sG4G-pBvz1xZMqs9yUw"},
{"content":{"body":"@shu because the reference shouldn't change in any semantically observable way, and the WeakMap question provides observability","msgtype":"m.text"},"ts":1643139372511,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6S4rARGNCFwMVdac2FpKJxOWbd2g2nUYpGwt_lgWw5I"},
{"content":{"body":"strings aren't stored in [weak]maps/sets by reference though","msgtype":"m.text"},"ts":1643139387384,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$KBhjsO4t2-YkKSRMy-MHteie5UYSJ0SgeiYZjeEwloE"},
{"content":{"body":"they're stored by value","msgtype":"m.text"},"ts":1643139391822,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$-3qoeM3EmqjxAw_RpwKbfkub8PtnJh_8qNehRmCTeL8"},
{"content":{"body":"it's only unsound if WeakMaps can hold registered symbols","msgtype":"m.text"},"ts":1643139401236,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1rIgjQz3InLHlAkm-tROl64na10FfZTENEv-hZGe4hM"},
{"content":{"body":"strings can't be put into weak collections at all","msgtype":"m.text"},"ts":1643139402724,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GLqERtWxNhk1TzSNyBHSNnFe-Mw7A7pGAfRn6_POVPs"},
{"content":{"body":" * strings can't be put into weak collections at all","m.new_content":{"body":"strings can't be put into weak collections at all","msgtype":"m.text"},"m.relates_to":{"event_id":"$GLqERtWxNhk1TzSNyBHSNnFe-Mw7A7pGAfRn6_POVPs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643139412344,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e1HjrSsd0d6mA2GTF5iMs3_UkUR1Jn3m_Naf5WPpFpM"},
{"content":{"body":"(and doing so does not prevent GC of the symbol)","msgtype":"m.text"},"ts":1643139413453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3JXIEjCni7JM4ywZsUHUzxgJQSvFb-7oExla9wXeOSA"},
{"content":{"body":"correct","msgtype":"m.text"},"ts":1643139419344,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WM_uCbcunK4e1k5gUr71lSg8Oy6Bo5waMpEA75hlqu4"},
{"content":{"body":"I'm saying it's unsound anyway, and this is just the first gotcha we've encountered","msgtype":"m.text"},"ts":1643139426287,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$A-s3jnkqHiG33kQERFDegW6th51F7eHMtI9cdjDLMkQ"},
{"content":{"body":"it's... not unsound anyway","msgtype":"m.text"},"ts":1643139433496,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6j9O2hRB2cfv_AipMMdCcS_j0Hw0EmCqdpta4VW1udc"},
{"content":{"body":"it's sound by accident, currently","msgtype":"m.text"},"ts":1643139441418,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$sSYLzVCnglrSlskV8d5Pdc63W1A0n8RiLAJEutavjmU"},
{"content":{"body":"wasn't an accident","msgtype":"m.text"},"ts":1643139454454,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EFSY3IciYmHGyN-CxxmhXyPLdaXFgs1iRRVGIzBuEjY"},
{"content":{"body":"that was definitely an intentional part of the design of the symbol registry","msgtype":"m.text"},"ts":1643139470982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kX5N4fnW8IhkQYVpvWG8inXs1__heGiE_hQgzVe04kc"},
{"content":{"body":"yes, they *were* accidentally eternal before, when it was keyed by something else, like parse nodes or something?","format":"org.matrix.custom.html","formatted_body":"yes, they <em>were</em> accidentally eternal before, when it was keyed by something else, like parse nodes or something?","msgtype":"m.text"},"ts":1643139492146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VD-jh_M0-x4Oq2YAIa15a5lVrE5Wp9LMyxS3FRvVN_0"},
{"content":{"body":"i have the screenshots if anyone needs them","msgtype":"m.text"},"ts":1643139514137,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$sydT5mNpvhqfu8rGKE1lox2yWev6jnQkoZb75q8nUJ8"},
{"content":{"body":"you're thinking of template tags","msgtype":"m.text"},"ts":1643139523211,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qbqaQO7TI33EBPGc2cxF6CZvhi1ZXG9hOOVc9Rw-R4c"},
{"content":{"body":"cc Robin Ricard ","format":"org.matrix.custom.html","formatted_body":"cc <a href=\"https://matrix.to/#/@rricard:mozilla.org\">Robin Ricard</a>","msgtype":"m.text"},"ts":1643139523548,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AhXP5yKjyWmi7VhLkPo7UGD_U02ZzpmOGNVzLVfwKGQ"},
{"content":{"body":"oh, i am, bakkot correct","format":"org.matrix.custom.html","formatted_body":"oh, i am, <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> correct","msgtype":"m.text"},"ts":1643139533369,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vT5O4as8GJo-GM7T-eDQyv8EdBwS-5d0GvftNJYuIaQ"},
{"content":{"body":"thanks yulia, nicolo took them as well so we are good","msgtype":"m.text"},"ts":1643139715776,"senderName":"Robin Ricard","senderId":"@rricard:mozilla.org","id":"$G9wg7NCAR67vRSyWURTI5ykaO5uBbg9x0FCvHYy3218"},
{"content":{"body":"catch the positive names?","msgtype":"m.text"},"ts":1643139810902,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$kAqBOertH-O9hbSO8n7IRVhoaotziT_vNcLl8kAQVQw"},
{"content":{"body":" * catch the positive names?","m.new_content":{"body":"catch the positive names?","msgtype":"m.text"},"m.relates_to":{"event_id":"$kAqBOertH-O9hbSO8n7IRVhoaotziT_vNcLl8kAQVQw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643139816243,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$HHfLoOSMe8-D7RYx6Cn4Mwt4EOgwcc70D7i1XXGskwM"},
{"content":{"body":"shu: \"We should do the same as others\" isn't quite the point, \"everyone else is doing something useful that we aren't\" is.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: &quot;We should do the same as others&quot; isn't quite the point, &quot;everyone else is doing something useful that we aren't&quot; is.","msgtype":"m.text"},"ts":1643140254430,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3nmouavv1e9GVWVEVIOztmfe-rgtZ27P5VhbjBvjjtk"},
{"content":{"body":"TabAtkins: can i cast your own spell on you? isn't that a fully general argument for stdlib differences?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: can i cast your own spell on you? isn't that a fully general argument for stdlib differences?","msgtype":"m.text"},"ts":1643140356161,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y4frRP8MOBwdnVWMLtzNgW9U6fLzzhtF7c7vU8vW-vw"},
{"content":{"body":"No, it's just pointing out that the argument wasn't just \"we should be following the bandwagon\".","msgtype":"m.text"},"ts":1643140392783,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yWJ-FGQSfu5zTQi2hD5Gmqd0sGy3tPlXLKyRQL1h-R8"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1643140401438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a6jhS0o9K8e5OntDZjNG3xD_b0dbUWCT3x2ukGzcFy0"},
{"content":{"body":"i was responding to the narrower motivating story of \"even surma got tripped up\"","msgtype":"m.text"},"ts":1643140414342,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6v17zHbcddXvsvx7y2GNMnqceDbZxuBV64PWuFVVrvo"},
{"content":{"body":"The other lang's version of split() is just genuinely better, which is definitely part of why JS's version is so confusing. ^_^","msgtype":"m.text"},"ts":1643140442314,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iUtQDtpTLIP5CxcKqBd6qOfbFiQQ9yOAGsdfZpI5hQk"},
{"content":{"body":"which isn't the same as \"i wish we had this other behavior but we don't\", it's \"i thought our behavior was X but it wasn't\"","msgtype":"m.text"},"ts":1643140447150,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$adx2iwJbbjhmJtCEgNioZa9jmHHMvleaPy-fMMkPoV8"},
{"content":{"body":"I will try to remember to ask my dad about the history of this next time I talk to him","msgtype":"m.text"},"ts":1643140494605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0VPkMK8nQ-mINVstnBgnJfwnpX1X3ZjQ7kWEHVFnb6A"},
{"content":{"body":"Insofar as Surma would have been confused by Python (off-by-one versus the other langs), sure. But it's not clear from his particular complaint whether it was *just* familiarity or \"i'm confused this works differently entirely\"","format":"org.matrix.custom.html","formatted_body":"Insofar as Surma would have been confused by Python (off-by-one versus the other langs), sure. But it's not clear from his particular complaint whether it was <em>just</em> familiarity or &quot;i'm confused this works differently entirely&quot;","msgtype":"m.text"},"ts":1643140516455,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VW7qSv4vWuiaoEkVjK1db6i0BkUm4G1_s9l0ZFdy5bw"},
{"content":{"body":"I'd like if we rename this splitn to `String.prototype.part` (or parts)","format":"org.matrix.custom.html","formatted_body":"I'd like if we rename this splitn to <code>String.prototype.part</code> (or parts)","msgtype":"m.text"},"ts":1643140546341,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$nsQWutvdx5nuQLSCjvTkbIInHFvjeP-mW1grlCYj4MU"},
{"content":{"body":" * I'd like if we rename this splitn to `String.prototype.part` (or parts)","format":"org.matrix.custom.html","formatted_body":" * I'd like if we rename this splitn to <code>String.prototype.part</code> (or parts)","m.new_content":{"body":"I'd like if we rename this splitn to `String.prototype.part` (or parts)","format":"org.matrix.custom.html","formatted_body":"I'd like if we rename this splitn to <code>String.prototype.part</code> (or parts)","msgtype":"m.text"},"m.relates_to":{"event_id":"$nsQWutvdx5nuQLSCjvTkbIInHFvjeP-mW1grlCYj4MU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643140554537,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$j5dkqUPGvYZ8FestBk1VhUYBZqILCLh81QTB8NZJI2Y"},
{"content":{"body":"Going for the `{remainder: true}` part and taking on Python's numbering semantics would defuse these complains, I think.","format":"org.matrix.custom.html","formatted_body":"Going for the <code>{remainder: true}</code> part and taking on Python's numbering semantics would defuse these complains, I think.","msgtype":"m.text"},"ts":1643140841913,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$i-HIdV6Gq8NcXv6aM6i6InJ53YS2NeioziPpStj_AFM"},
{"content":{"body":"I have an open issue about the possible confusion that Chip is talking about: https://github.com/lucacasonato/proposal-reversible-string-split/issues/6","msgtype":"m.text"},"ts":1643140859717,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3JysawWveKcqzDGK2WYvoyg1w6hdQbKzr41GTEhADLg"},
{"content":{"body":"So `.split(..., 2, ...)` always returns 2 bits between separators, you just get a *third* item with the remainder if you pass the flag. ","format":"org.matrix.custom.html","formatted_body":"So <code>.split(..., 2, ...)</code> always returns 2 bits between separators, you just get a <em>third</em> item with the remainder if you pass the flag.","msgtype":"m.text"},"ts":1643140884638,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8ruGHVgk8vdnQoe0pdY4HQ03esWnVALjPM0_9d9sWwk"},
{"content":{"body":"> taking on Python's numbering semantics would defuse these complains, I think","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>taking on Python's numbering semantics would defuse these complains, I think</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643140930052,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sFo4_tfYdDyl4GYDZW-0Ua8laRjfxtBmm07_XMjhZnM"},
{"content":{"body":"say more about what that means?","msgtype":"m.text"},"ts":1643140937143,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8xh6GWzWmt5i1Mpzam890WPW2wUfeXq9NwBG8wokPgA"},
{"content":{"body":"Luca Casonato: i invited you to tc39-transfer on github, so you can bounce your proposal repo there","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: i invited you to tc39-transfer on github, so you can bounce your proposal repo there","msgtype":"m.text"},"ts":1643141122203,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FiH9Cj_n8a5MAZpKs5LR1HW3G1dS3kZIUjfi0E8Ccgo"},
{"content":{"body":"bakkot: Well there was an \"and\" there that was pretty important.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Well there was an &quot;and&quot; there that was pretty important.","msgtype":"m.text"},"ts":1643141174846,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I2IQ5xL80edRkOxP9e6wnWvzHlYWWgy63_M6TJXUDxI"},
{"content":{"body":"The part after the \"and\" that you quoted was more of an \"(and, in effect, ...)\"","msgtype":"m.text"},"ts":1643141193611,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$wyyB7FPWZ8WY4kkjeXPUdIwY-poET8Jn73C1BUj2jz8"},
{"content":{"body":"> <@leobalter:matrix.org> I'd like if we rename this splitn to `String.prototype.part` (or parts)\n\nCould you add that to this issue? https://github.com/lucacasonato/proposal-reversible-string-split/issues/6","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nsQWutvdx5nuQLSCjvTkbIInHFvjeP-mW1grlCYj4MU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@leobalter:matrix.org\">@leobalter:matrix.org</a><br>I'd like if we rename this splitn to <code>String.prototype.part</code> (or parts)</blockquote></mx-reply>Could you add that to this issue? https://github.com/lucacasonato/proposal-reversible-string-split/issues/6","m.relates_to":{"m.in_reply_to":{"event_id":"$nsQWutvdx5nuQLSCjvTkbIInHFvjeP-mW1grlCYj4MU"}},"msgtype":"m.text"},"ts":1643141259703,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$66jBmYXcI062s4R8efCOt3NUZx86ACF3YvbuDGmLu3g"},
{"content":{"body":"But basically, if we use a flag argument in .split(), I don't think we should significantly change the existing semantics/behavior of the proposal. `.split(..., 2)` should still always trigger (up to) 2 splits, with the option just controlling whether we get the remainder or not included in the array.","format":"org.matrix.custom.html","formatted_body":"But basically, if we use a flag argument in .split(), I don't think we should significantly change the existing semantics/behavior of the proposal. <code>.split(..., 2)</code> should still always trigger (up to) 2 splits, with the option just controlling whether we get the remainder or not included in the array.","msgtype":"m.text"},"ts":1643141312194,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8VHCAAfzpg_4wlduckQ6yKPil-aOTYH7vu8z1tfVBeM"},
{"content":{"body":"That also avoids all the regex questions, since the answer remains \"act exactly as normal, just include the remainder as a final item\"","msgtype":"m.text"},"ts":1643141338745,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SShwpJ1URhudqlOB68AEg5afKmFUYICtzmqrimFed1c"},
{"content":{"body":"(sounds like Luca Casonato got stage 1? :D)","format":"org.matrix.custom.html","formatted_body":"(sounds like <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> got stage 1? :D)","msgtype":"m.text"},"ts":1643141463745,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$h6YS1HN6V37KzEJ9NRiF_-e4pc7kI2vKyFR67f8a_gw"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1643141477136,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tdv7cTc9QRzSUvBI2v5lbEvF3maKWyyjRbWl3AAqZFI"},
{"content":{"body":"> <@surma:matrix.org> (sounds like Luca Casonato got stage 1? :D)\n\nindeed! :D","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h6YS1HN6V37KzEJ9NRiF_-e4pc7kI2vKyFR67f8a_gw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@surma:matrix.org\">@surma:matrix.org</a><br>(sounds like <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> got stage 1? :D)</blockquote></mx-reply>indeed! :D","m.relates_to":{"m.in_reply_to":{"event_id":"$h6YS1HN6V37KzEJ9NRiF_-e4pc7kI2vKyFR67f8a_gw"}},"msgtype":"m.text"},"ts":1643141543540,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$NbdvA5JBRTkcha0yxUWHHnGEAk2kF9n4g5tDlpzttZw"},
{"content":{"body":"> <@lucacasonato:matrix.org> Could you add that to this issue? https://github.com/lucacasonato/proposal-reversible-string-split/issues/6\n\nDone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%2466jBmYXcI062s4R8efCOt3NUZx86ACF3YvbuDGmLu3g\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Could you add that to this issue? https://github.com/lucacasonato/proposal-reversible-string-split/issues/6</blockquote></mx-reply>Done","m.relates_to":{"m.in_reply_to":{"event_id":"$66jBmYXcI062s4R8efCOt3NUZx86ACF3YvbuDGmLu3g"}},"msgtype":"m.text"},"ts":1643141556668,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$KfqVORsiHWWcfZAg8-9GUlmqp0CuClB3ljrynnIRVKk"},
{"content":{"body":"> <@tabatkins:matrix.org> But basically, if we use a flag argument in .split(), I don't think we should significantly change the existing semantics/behavior of the proposal. `.split(..., 2)` should still always trigger (up to) 2 splits, with the option just controlling whether we get the remainder or not included in the array.\n\nDon't generally disagree with this, I just worry about discoverability here. If people already don't know about the second argument, how will they find a third argument?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8VHCAAfzpg_4wlduckQ6yKPil-aOTYH7vu8z1tfVBeM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>But basically, if we use a flag argument in .split(), I don't think we should significantly change the existing semantics/behavior of the proposal. <code>.split(..., 2)</code> should still always trigger (up to) 2 splits, with the option just controlling whether we get the remainder or not included in the array.</blockquote></mx-reply>Don't generally disagree with this, I just worry about discoverability here. If people already don't know about the second argument, how will they find a third argument?","m.relates_to":{"m.in_reply_to":{"event_id":"$8VHCAAfzpg_4wlduckQ6yKPil-aOTYH7vu8z1tfVBeM"}},"msgtype":"m.text"},"ts":1643141596435,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$TdHWfE8oPR_iXNz56OoQL1kDM_9r1xDNiKaDxU4Phvk"},
{"content":{"body":"If people already don't know about the second argument, how will they find a completely separate method?","msgtype":"m.text"},"ts":1643141620604,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rF7qBXqFyu3a2nzUJHcOavW3AaebC0s31xWSKHKR2i0"},
{"content":{"body":"> <@tabatkins:matrix.org> If people already don't know about the second argument, how will they find a completely separate method?\n\nEditor autocompletions :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rF7qBXqFyu3a2nzUJHcOavW3AaebC0s31xWSKHKR2i0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>If people already don&#39;t know about the second argument, how will they find a completely separate method?</blockquote></mx-reply>Editor autocompletions :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$rF7qBXqFyu3a2nzUJHcOavW3AaebC0s31xWSKHKR2i0"}},"msgtype":"m.text"},"ts":1643141634099,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$UdOghkvjeHO__oUCaOy69z0q3lA0Z3LfvZR0EigXKTA"},
{"content":{"body":"Editors often offer signature suggestions too ^_^","msgtype":"m.text"},"ts":1643141653618,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$zkrdVUto60pbxf8vX9b73MH3T5qhsExCMVK28uixn7Y"},
{"content":{"body":"> <@tabatkins:matrix.org> That also avoids all the regex questions, since the answer remains \"act exactly as normal, just include the remainder as a final item\"\n\nThis brings up the question of what our actual definition of N is - is it number of splits, or number of return values? If we continue expanding regexps capturing groups into the return values array when \"remainder\" is included, then we must use number of return values (non python behaviour). I'd argue that if we overload, then the overload should not support regexp separators.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SShwpJ1URhudqlOB68AEg5afKmFUYICtzmqrimFed1c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>That also avoids all the regex questions, since the answer remains &quot;act exactly as normal, just include the remainder as a final item&quot;</blockquote></mx-reply>This brings up the question of what our actual definition of N is - is it number of splits, or number of return values? If we continue expanding regexps capturing groups into the return values array when &quot;remainder&quot; is included, then we must use number of return values (non python behaviour). I'd argue that if we overload, then the overload should not support regexp separators.","m.relates_to":{"m.in_reply_to":{"event_id":"$SShwpJ1URhudqlOB68AEg5afKmFUYICtzmqrimFed1c"}},"msgtype":"m.text"},"ts":1643141781181,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$7LAU75pnk_Xf012L_xVtzgmIgoTKhoNwCbwk5Z3XIxo"},
{"content":{"body":" * \"eternal\" seems to mean/imply \"recoverable after all references are lost\"","m.new_content":{"body":"\"eternal\" seems to mean/imply \"recoverable after all references are lost\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$NOclLoscDPFOpWZgY2Cywcg1DSBm6Aey9pMgF6fH_ns","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643141815023,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$jh7cysWqAIHG7GGre-qvJR-mpz3jKFos2YUQGCJB4rk"},
{"content":{"body":"Really, I dislike this capturing group expansion into the return value array behaviour. It significantly increases complexity","msgtype":"m.text"},"ts":1643141869289,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$kXhCSiihYdYB98xff6zRh6h2cKkmNhxaPUQ7uzoNNlY"},
{"content":{"body":"Ugggggh I didn't realize the N is *literally* \"length of the returned array\" even when regex capture groups are used, that's *worthless*.","format":"org.matrix.custom.html","formatted_body":"Ugggggh I didn't realize the N is <em>literally</em> &quot;length of the returned array&quot; even when regex capture groups are used, that's <em>worthless</em>.","msgtype":"m.text"},"ts":1643141941675,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0O2llsxdWSzqbIjSS4s2D9G8hTJ2yiAQpR34aUYYDXo"},
{"content":{"body":"does anyone know who https://github.com/phohensee is, in relation to tc39?","msgtype":"m.text"},"ts":1643141967735,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gj9X7ypUcCvY37fztmI2EV52ug_GHDEfQYszUu9NenA"},
{"content":{"body":"> <@tabatkins:matrix.org> Ugggggh I didn't realize the N is *literally* \"length of the returned array\" even when regex capture groups are used, that's *worthless*.\n\nYou understand my frustration now? xD","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0O2llsxdWSzqbIjSS4s2D9G8hTJ2yiAQpR34aUYYDXo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Ugggggh I didn't realize the N is <em>literally</em> \"length of the returned array\" even when regex capture groups are used, that's <em>worthless</em>.</blockquote></mx-reply>You understand my frustration now? xD","m.relates_to":{"m.in_reply_to":{"event_id":"$0O2llsxdWSzqbIjSS4s2D9G8hTJ2yiAQpR34aUYYDXo"}},"msgtype":"m.text"},"ts":1643142169095,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$V5WaX3yvkGnqHjIreLwQ1voCCblkZjOhACFgRBl-TQk"},
{"content":{"body":"Yeah the currrent split behavior is just useless ","msgtype":"m.text"},"ts":1643142212844,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$3ULuiauZTAjTpT_GYov8sARJvRc7cVc4TeeqoRvilQg"},
{"content":{"body":"`\"\".split(sep, n)` === `\"\".split(sep).slice(0, n)` ","format":"org.matrix.custom.html","formatted_body":"<code>&quot;&quot;.split(sep, n)</code> === <code>&quot;&quot;.split(sep).slice(0, n)</code>","msgtype":"m.text"},"ts":1643142219601,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$D2yx92-q8VWGlKA8YmjdtZFIG0Xt7thdTbLAAdbEZZQ"},
{"content":{"body":"for n >= 0, i presume","msgtype":"m.text"},"ts":1643142270793,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d2czJQkEI-I2dD9eEuypHT3DcQQ8nIZDNknzfFVxozM"},
{"content":{"body":" * for n >= 0, i presume","m.new_content":{"body":"for n >= 0, i presume","msgtype":"m.text"},"m.relates_to":{"event_id":"$d2czJQkEI-I2dD9eEuypHT3DcQQ8nIZDNknzfFVxozM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643142273986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PFhyX5nGrQ_nCbxNiz58rHCBlfIzZjzpCq4HAOiqq8A"},
{"content":{"body":"I think we'd better follow rust, splitN(n, s) seems very clear and won't confused with the old one.","msgtype":"m.text"},"ts":1643142312135,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$SCxpxVMOBAXybtS-g7FQEqcKKAxNSYq3PXZizKN0Rxk"},
{"content":{"body":"> <@ljharb:matrix.org> for n >= 0, i presume\n\n```\n> \"a|b|c|d|e\".split(\"|\", -1)\n[ \"a\", \"b\", \"c\", \"d\", \"e\" ]\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$d2czJQkEI-I2dD9eEuypHT3DcQQ8nIZDNknzfFVxozM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>for n &gt;= 0, i presume</blockquote></mx-reply><pre><code>&gt; &quot;a|b|c|d|e&quot;.split(&quot;|&quot;, -1)\n[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$d2czJQkEI-I2dD9eEuypHT3DcQQ8nIZDNknzfFVxozM"}},"msgtype":"m.text"},"ts":1643142321293,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$A3OMwbKl-2hzHVkjhdJrpVYS3KO9dQvClQKCp7Rl00s"},
{"content":{"body":"🎉 we just got consensus at the UTC meeting for my proposal to stabilise the spelling of property names/values/aliases! https://www.unicode.org/L2/L2022/22029-canonical-prop-spelling.pdf","msgtype":"m.text"},"ts":1643142620807,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pwvAt7ZTCGUdt3KqnVMj26QgafS8PK6Ht815YxXBXJ4"},
{"content":{"body":"we'll be able to delete tables 67 and 68 now","msgtype":"m.text"},"ts":1643142710083,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8obibcuBDkvzzYdS9JBRZ7Rw9lGIq4KXBa9zLZ3RSEo"},
{"content":{"body":" * table 69 is breathing a sigh of relief right now","m.new_content":{"body":"table 69 is breathing a sigh of relief right now","msgtype":"m.text"},"m.relates_to":{"event_id":"$Pv9JnIUFzcKgJjI29rTOVgUqDe5qkpUisqYCZCMYJsw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643143277502,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6Xh1QvHFY5SUeWX8Bgq6WoizuEILBFVOXGvyLBGSEsI"},
{"content":{"body":"the meeting resumes in 60 seconds","msgtype":"m.text"},"ts":1643144340237,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$O4eRya9vewGdSz7EORrhgJOR2Of74HsO3kOEUsmCTOw"},
{"content":{"body":"Michael Ficarra: did you ask them why they recommended loose matching in the first place?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: did you ask them why they recommended loose matching in the first place?","msgtype":"m.text"},"ts":1643144592813,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2kcOniRfBrlWfH7paZXkoYMWdBSKROdy9qkcvvxvlHc"},
{"content":{"body":"no, though it sounded like it's just kind of their default position","msgtype":"m.text"},"ts":1643144619384,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lb4y5e8PAE9CVloEnVV_tiFOsDFcBoWYAQtYkdBZkVc"},
{"content":{"body":"weird","msgtype":"m.text"},"ts":1643144630575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DA8B4NpnCy2SyLR2VbF7EEacFvsvL1Awnz9uIZ_OvXs"},
{"content":{"body":"someone was like \"can't we just make it stable but not add it to our stability policy?\" and I was like \"uuuhhhh that's not gonna work\" lol","msgtype":"m.text"},"ts":1643144692957,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qiXXjNmyAU1F7RZqceDaWjf9RUFxlAhHGw7hrni_2b4"},
{"content":{"body":"imo the only reason they would want that is if they planned to break it","msgtype":"m.text"},"ts":1643144727486,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sRUkcfom-UzMILV37OKpX_42DVrfqZVYNJnJe_zpBV4"},
{"content":{"body":"why do we allow this form in any position other than the target of a call? do we really want it being passed around?","msgtype":"m.text"},"ts":1643144874926,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iZzL9w75YmiWrJltOGmMOUStmKXIG2iHXd8inxk3tr0"},
{"content":{"body":"which form?","msgtype":"m.text"},"ts":1643144893957,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RcSBMSk70V2HEPyo7YPMdpt3pQC1kDTQNmf8Ldmo98E"},
{"content":{"body":"class.hasInstance","msgtype":"m.text"},"ts":1643144904188,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hJcpjncE_4rFuNsi_KRsWX6tu491ACdw3xkLLC-YZyQ"},
{"content":{"body":"i assume `class.hasInstance()` would work just like `super()` and `import()`, in that it's not a real function and can't be passed around","format":"org.matrix.custom.html","formatted_body":"i assume <code>class.hasInstance()</code> would work just like <code>super()</code> and <code>import()</code>, in that it's not a real function and can't be passed around","msgtype":"m.text"},"ts":1643144919587,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IbgOhCdK93B2xW3ZFJ2EGLL1CdnkjYbq3CU24sOIIeY"},
{"content":{"body":"exactly, that's what I'm suggesting","msgtype":"m.text"},"ts":1643144934245,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3HgwCzkFsqHL9_64VWnGy7K_tZcnkfUueJxtN2Ze-lk"},
{"content":{"body":"oh, is this proposal currently suggesting something different?","msgtype":"m.text"},"ts":1643144946277,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_mc1ckFty2LKlMSreyW5MTeZ26uj51mIu_Iigppkyzw"},
{"content":{"body":"that's how I understood the presenter, maybe not?","msgtype":"m.text"},"ts":1643144971859,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ioY0k4RUBIPeSCliYJaQSMsTu275R1Swej_RiaEv3Lw"},
{"content":{"body":"I didn't look at spec text for this proposal","msgtype":"m.text"},"ts":1643144994365,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aQBT3iJxfJR9opoUkz0XTdEOV5-vQFGwjxTJhlfgaTU"},
{"content":{"body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\\\\\_(ツ)\\_/¯","format":"org.matrix.custom.html","formatted_body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1643145004086,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eev13L_3aWGQZqPkvLAy3EVhFkt1KJ3rqgcRwZgmBas"},
{"content":{"body":"oh no your arm","msgtype":"m.text"},"ts":1643145020146,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YfYPy5H9u02LeLkwXaMCm67lienXFZ6vZIwzCLCx0C8"},
{"content":{"body":" * for stage 2 i'd definitely insist alongside you that that's how it work ¯\\\\_(ツ)_/¯","format":"org.matrix.custom.html","formatted_body":" * for stage 2 i'd definitely insist alongside you that that's how it work ¯\\<em>(ツ)</em>/¯","m.new_content":{"body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\\\_(ツ)_/¯","format":"org.matrix.custom.html","formatted_body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\<em>(ツ)</em>/¯","msgtype":"m.text"},"m.relates_to":{"event_id":"$eev13L_3aWGQZqPkvLAy3EVhFkt1KJ3rqgcRwZgmBas","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643145033194,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$94wEj8mNcTrJonS-RVA2WtDQKNtjmbN3tLSBNukfM1U"},
{"content":{"body":" * for stage 2 i'd definitely insist alongside you that that's how it work ¯\\\\\\_(ツ)\\_/¯","format":"org.matrix.custom.html","formatted_body":" * for stage 2 i'd definitely insist alongside you that that's how it work ¯\\_(ツ)_/¯","m.new_content":{"body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\\\\\_(ツ)\\_/¯","format":"org.matrix.custom.html","formatted_body":"for stage 2 i'd definitely insist alongside you that that's how it work ¯\\_(ツ)_/¯","msgtype":"m.text"},"m.relates_to":{"event_id":"$eev13L_3aWGQZqPkvLAy3EVhFkt1KJ3rqgcRwZgmBas","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643145036757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2A2YCBKxZb3mLh0mlkSC7MqVZlIh9mCc1vxHu32blQ8"},
{"content":{"body":"lol matrix is even worse than github with the markdown escaping (－‸ლ) ","msgtype":"m.text"},"ts":1643145048948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mPHspvgvqaBVxIDr3Q-4Mq1QcK-SIfjK_cK4fgTJ3t8"},
{"content":{"body":"i thought it was a meta property call syntax, yeah","msgtype":"m.text"},"ts":1643145166645,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qriOdEbrRBJ9Zf433MMvRdZa4eaks_Fyz7FIP3iHKb8"},
{"content":{"body":"how do you even pass it around","msgtype":"m.text"},"ts":1643145170199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2K9S6Tu_pdNJCbsZDNm6ippkJBgq9VKwMHAGH1N--Ek"},
{"content":{"body":"if it were a real function you could `foo(class.hasInstance)` but obv that'd be subpar","format":"org.matrix.custom.html","formatted_body":"if it were a real function you could <code>foo(class.hasInstance)</code> but obv that'd be subpar","msgtype":"m.text"},"ts":1643145207371,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9a4ZQYMkVQhD5sm-fOIGdYgCsImgtOS_J624A40XMn8"},
{"content":{"body":"well right, but i didn't think it was a real function","msgtype":"m.text"},"ts":1643145232087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$91ldnACAfuH3kAk9-MuQHKK5GbYLwVNdkCclJ44IOxk"},
{"content":{"body":"someone want to ask the clarifying question? I'm kinda in the middle of my lunch","msgtype":"m.text"},"ts":1643145334638,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wBQV-n9JnPenhjp3Vqjmod_ml_5wcuZzWsD3dRr_4HM"},
{"content":{"body":"i am not so convinced by the \"you might end up with a partially constructed instance\" problem. you have to work pretty hard to still end up with a reference to the instance when a field initializer throws; it's not something you're going to end up passing around natuarlly","msgtype":"m.text"},"ts":1643145344121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vwJWImppSLrhIegkcYvqQf8k6hPLP-leATt3C1J1As4"},
{"content":{"body":"i am not understanding what is being proposed for the synthetic brand he wants `class.hasInstance` to make","format":"org.matrix.custom.html","formatted_body":"i am not understanding what is being proposed for the synthetic brand he wants <code>class.hasInstance</code> to make","msgtype":"m.text"},"ts":1643145370826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UPfPl3olDP4k5ffv3sZecybZOoIO6XffPF5XTZB-kGk"},
{"content":{"body":"at the start or at the end?","msgtype":"m.text"},"ts":1643145373422,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2E1fkiOKv8OZDN7QwjC33Gq4pfYdrO3okFVDOagpn-A"},
{"content":{"body":"oh here's the slide","msgtype":"m.text"},"ts":1643145387153,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nv01lAxktAXChCL9gfsjkb1aqpNxfNa05Iw4FanuKjU"},
{"content":{"body":"\"after the constructor returns\" does seem like the right answer to this question to me yeah","msgtype":"m.text"},"ts":1643145440367,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KO_b-PdDCpht0Yo4e51zPt8tQMkqgWIc3lFrxC38D78"},
{"content":{"body":"oh THAT'S what he meant by function-like","msgtype":"m.text"},"ts":1643145494238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iN3l4f9b8RGwX-DefoJd86SjSHO4wlWNTCUA5kJ9PXw"},
{"content":{"body":"does `import()` work inside eval?","format":"org.matrix.custom.html","formatted_body":"does <code>import()</code> work inside eval?","msgtype":"m.text"},"ts":1643145549108,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rVi7e6JYAprHO2ye4u4gOad8XGG4J0-4RifjpYRORv4"},
{"content":{"body":"i am guessing yes, so I would say this should also work","msgtype":"m.text"},"ts":1643145557202,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Nt378Z3X4cADK9-PvZtr7_RIl9geSTup_XCIYtZi2Vc"},
{"content":{"body":"\"if there is a direct eval you have to do a lot more work\" is not a new thing","msgtype":"m.text"},"ts":1643145576044,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BwytwMXmiXthAqDzVJRCI3nsEucC6K4YOjPXoVotcRc"},
{"content":{"body":"super does","msgtype":"m.text"},"ts":1643145628553,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dDTaDfNBPbJtzJy5xucHUqtBv1CsHF84pdbZ3qWSE5Q"},
{"content":{"body":"and super already causes extra allocation for home objects","msgtype":"m.text"},"ts":1643145639543,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HR-czmBc7bq_iWsQuwBPj0KLdIhQRnyZYDNAm8NHQWQ"},
{"content":{"body":"so eval also causes that","msgtype":"m.text"},"ts":1643145644773,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SZ75huIntGRSmOVyffqicQO0RhCTsl47XwalASEHQvM"},
{"content":{"body":"it's no worse than the status quo, which remains \"don't use eval\"","msgtype":"m.text"},"ts":1643145653370,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9TT4uHFFz1RF_USRM8_QQ8ReR0C4lNfui6JO2zU1BHI"},
{"content":{"body":"private fields don't tho, i think","msgtype":"m.text"},"ts":1643145668312,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YvsCqgcffA6BZqaS8Au2KVgwGd23CUjpK58qDk3W_sQ"},
{"content":{"body":"really?","msgtype":"m.text"},"ts":1643145679199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AmNSZV4uKfQroqJLwkNi3CRIFbspihQzFR7ssveEsCg"},
{"content":{"body":"~hm, let me confirm~ no nvm, they do work","msgtype":"m.text"},"ts":1643145685016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wrA47KL2t0av72BQdKPhNuhyoO-qrfBwysObphxIfy0"},
{"content":{"body":"I need to draft an update on class access expressions. Assuming it will ever move forward, I think I need to move it to a meta property like `class.static` or something.","format":"org.matrix.custom.html","formatted_body":"I need to draft an update on class access expressions. Assuming it will ever move forward, I think I need to move it to a meta property like <code>class.static</code> or something.","msgtype":"m.text"},"ts":1643145702909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FfMRIs36zX8dQG00as9gidC7bK6EYs1ctELRjSqZ4GI"},
{"content":{"body":"or `class.constructor` maybe.","format":"org.matrix.custom.html","formatted_body":"or <code>class.constructor</code> maybe.","msgtype":"m.text"},"ts":1643145722474,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ho5_Jw9tXSS8L_NUbE0JonR0DPWcYGBiOuZWHMk4loY"},
{"content":{"body":" * ~hm, let me confirm~ no nvm, they do work","m.new_content":{"body":"~hm, let me confirm~ no nvm, they do work","msgtype":"m.text"},"m.relates_to":{"event_id":"$wrA47KL2t0av72BQdKPhNuhyoO-qrfBwysObphxIfy0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643145727501,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sgUbuW8wU6QlRKMPEoOad6eFHXisJ7h2ddXUOgP7RhQ"},
{"content":{"body":" * ~~hm, let me confirm~~ no nvm, they do work","m.new_content":{"body":"~~hm, let me confirm~~ no nvm, they do work","msgtype":"m.text"},"m.relates_to":{"event_id":"$wrA47KL2t0av72BQdKPhNuhyoO-qrfBwysObphxIfy0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643145731488,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G1VP7cHpULVUzDEnrJsM19zQYxQqrbZfN4Pi67R0LyY"},
{"content":{"body":" * ~hm, let me confirm~ no nvm, they do work","m.new_content":{"body":"~hm, let me confirm~ no nvm, they do work","msgtype":"m.text"},"m.relates_to":{"event_id":"$wrA47KL2t0av72BQdKPhNuhyoO-qrfBwysObphxIfy0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643145737473,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O3q3K0iTyWHXZ-axUWXlJzijfGLhbE3_ZwXN2gpyYLo"},
{"content":{"body":"I think we're managing just adequately with the notes, so no need to interrupt the presentation to ask for more, but if someone wants to help out I'd nonetheless appreciate it","msgtype":"m.text"},"ts":1643145753094,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$jFnrf0JEI-4OPQKwKQOQhoNyMDX9TCbrjepNHIoinkU"},
{"content":{"body":"rbuckton: for anonymous classes or something?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: for anonymous classes or something?","msgtype":"m.text"},"ts":1643145827392,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$asIrw9zEIQJ0H9rr1DCnJs-sXpcsg2DywVDp4vgZ9aQ"},
{"content":{"body":"Its original intent was to handle multiple things: anonymous classes and giving a consistent name to access statics to avoid the `this.#foo` footgun in static methods","format":"org.matrix.custom.html","formatted_body":"Its original intent was to handle multiple things: anonymous classes and giving a consistent name to access statics to avoid the <code>this.#foo</code> footgun in static methods","msgtype":"m.text"},"ts":1643145917679,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YwOGz-SFFDSu2jdcGb5QO5dJnUVLiFbN05UeCUUEkvQ"},
{"content":{"body":"it's also nice to avoid repeating the class name - gives you only one thing to change if you want to rename a class declaration","msgtype":"m.text"},"ts":1643146012314,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SwsfeRerNnde-BJq5mJH0EGK20pqPNy9jDDz3SqNk6w"},
{"content":{"body":"so `hasInstance()` true implies the object was fully constructed without throwing","format":"org.matrix.custom.html","formatted_body":"so <code>hasInstance()</code> true implies the object was fully constructed without throwing","msgtype":"m.text"},"ts":1643146014588,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$QFJE56W57KJknNjAXHmkO5jYYhvbRnWLBRLdR9r4zSc"},
{"content":{"body":" * it's also nice to avoid repeating the class name - gives you only one thing to change if you want to rename a class declaration","m.new_content":{"body":"it's also nice to avoid repeating the class name - gives you only one thing to change if you want to rename a class declaration","msgtype":"m.text"},"m.relates_to":{"event_id":"$SwsfeRerNnde-BJq5mJH0EGK20pqPNy9jDDz3SqNk6w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643146018722,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Yppj71ypGDGvCZvP-3n_8EakLPsV0E3ymAqAFDej0rA"},
{"content":{"body":"all non-throwing cases can be, yes","msgtype":"m.text"},"ts":1643146059742,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Fhv7YqqUwj6lZUViuyL2AgAo0i7GYEn-q8yWqEV8XUs"},
{"content":{"body":"then why did we even expose an immutable binding inside the class? I'm unconvinced","msgtype":"m.text"},"ts":1643146062785,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zt6D4GPiE3KOAdTVGB7ywD51Ig2T_LKqru97dDfkvQM"},
{"content":{"body":"~~~recursion~~~~~~","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-recursion~~~~~~\"></code></pre>\n","msgtype":"m.text"},"ts":1643146073517,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xoetU9R6eRXEEoEfQAPYapTIguksihZDwG15MhvTMWg"},
{"content":{"body":"what the hell","msgtype":"m.text"},"ts":1643146080139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1hILjt2LoxVX_1gOQW6rxf7Z7y5ZKGkIrHSMha3ZJXU"},
{"content":{"body":"i typed `~~~~recursion~~~~~~`","format":"org.matrix.custom.html","formatted_body":"i typed <code>~~~~recursion~~~~~~</code>","msgtype":"m.text"},"ts":1643146093654,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AckeLIKMOzuQhBzM0dFFPl1-Rpd9qM43xITaek8NMmE"},
{"content":{"body":"yulia: i do agree that `class.hasInstance` is always equivalent to a private field at the end of the class body, that's assigned to `sentinel` at the end of the constructor, and doing `#field in o && o.#field === sentinel`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i do agree that <code>class.hasInstance</code> is always equivalent to a private field at the end of the class body, that's assigned to <code>sentinel</code> at the end of the constructor, and doing <code>#field in o &amp;&amp; o.#field === sentinel</code>","msgtype":"m.text"},"ts":1643146095158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_30eu__NtKOm4XPZ2F71v3gQ4Za9RgOny3coZ-ytZ-U"},
{"content":{"body":"it's not equivalent to private field at the end, is it?","msgtype":"m.text"},"ts":1643146108925,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ky9KNuiALYwjndI9HBh3QCDKBcSND5XOLo_L8dTIREI"},
{"content":{"body":"to replicate this feature with ergonomic brand checks, i think the user would have to assign to the brand field at each return point in the constructor","msgtype":"m.text"},"ts":1643146109024,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$ZpE4TUnSGphSeRlPoI-lc716jwkXfh7SXt2oFmX3C40"},
{"content":{"body":"yeah, it's like that, but that's also why i'm kinda not super convinced","msgtype":"m.text"},"ts":1643146129415,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bxxq3_ccm6qebS9U6ebqd-UAjuTO09VLeC4YYl9LugU"},
{"content":{"body":"Michael Ficarra good question. i don't find that binding immutability particularly useful, and would have preferred a class access expression","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> good question. i don't find that binding immutability particularly useful, and would have preferred a class access expression","msgtype":"m.text"},"ts":1643146131891,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AESloWfwtKxyumdUTil3LwwjeS9VXM6Ds8EJq9eTss8"},
{"content":{"body":"but i'll ask during my queue item","msgtype":"m.text"},"ts":1643146136804,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Mtsm35b5RRmZvA2jQd1gfJdR7vI-dGNV2hgFdAHZAm8"},
{"content":{"body":"> <@michaelficarra:matrix.org> then why did we even expose an immutable binding inside the class? I'm unconvinced\n\nThe immutable binding in the class has been a problem for decorators and is constantly surprising to some","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Zt6D4GPiE3KOAdTVGB7ywD51Ig2T_LKqru97dDfkvQM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>then why did we even expose an immutable binding inside the class? I&#39;m unconvinced</blockquote></mx-reply>The immutable binding in the class has been a problem for decorators and is constantly surprising to some","m.relates_to":{"m.in_reply_to":{"event_id":"$Zt6D4GPiE3KOAdTVGB7ywD51Ig2T_LKqru97dDfkvQM"}},"msgtype":"m.text"},"ts":1643146168737,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fEaRTeU_FeE9VxJsh1vwmeK_N36_0cvt4JCPQIEpPkA"},
{"content":{"body":"ljharb: I think it speaks to the intentions of the delegates who designed the class proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I think it speaks to the intentions of the delegates who designed the class proposal","msgtype":"m.text"},"ts":1643146177688,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xMpcZya2FtP-g0Hi3w5ugXCO1ghmfVGduPClKoaLRGY"},
{"content":{"body":"> <@robpalme:matrix.org> to replicate this feature with ergonomic brand checks, i think the user would have to assign to the brand field at each return point in the constructor\n\nonly because someone might get a hold of `this` during the constructor even if the constructor throws, right? if you assume the ctor/initializers don't throw it's equivalent?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZpE4TUnSGphSeRlPoI-lc716jwkXfh7SXt2oFmX3C40?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>to replicate this feature with ergonomic brand checks, i think the user would have to assign to the brand field at each return point in the constructor</blockquote></mx-reply>only because someone might get a hold of <code>this</code> during the constructor even if the constructor throws, right? if you assume the ctor/initializers don't throw it's equivalent?","m.relates_to":{"m.in_reply_to":{"event_id":"$ZpE4TUnSGphSeRlPoI-lc716jwkXfh7SXt2oFmX3C40"}},"msgtype":"m.text"},"ts":1643146198317,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dV-Q01snC9eA6Qsl3B7kxEl__wtAB-9zReJ3X5qL1E0"},
{"content":{"body":"https://github.com/tc39/proposal-class-brand-check/issues/6#issuecomment-1015303592","msgtype":"m.text"},"ts":1643146198777,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YDbhw5ke2MOzJTHNHHK_S6B6DuWSS9dLdRbgFEZgVoA"},
{"content":{"body":"Michael Ficarra: it might be just copying the function scope","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: it might be just copying the function scope","msgtype":"m.text"},"ts":1643146203891,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sUacVS8DKT9X0ODTjWsYfbIPtlYslEhExy76Tyz3n9k"},
{"content":{"body":"named function expressions also have that constant lambda scope","msgtype":"m.text"},"ts":1643146213828,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vbyf9gFscvBy0AubRLdpfREQKIcGTfvUo71vHn4IJ18"},
{"content":{"body":"Michael Ficarra: since some of them are here, it'd be nice to hear their intentions spoken instead of inferring them","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: since some of them are here, it'd be nice to hear their intentions spoken instead of inferring them","msgtype":"m.text"},"ts":1643146214866,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vHAXOrI_5wXxejsAtuI8tJqxZFEV34fr2IaGnWlceGI"},
{"content":{"body":"but yes, it's the same way functions work","msgtype":"m.text"},"ts":1643146219350,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EvFEFbQgd5ZQpgVcHwNTNQJXWXbDlaCLCgTw9phWhJ4"},
{"content":{"body":"if so, as I said above, i am not so convinced by the \"you might end up with a partially constructed instance\" problem","msgtype":"m.text"},"ts":1643146220639,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lrCXKtXEH_efSxB7LbhtPYSUZKeAgUWwb7V2UkoM2O0"},
{"content":{"body":"shu: they have their own name scope, but it's mutable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: they have their own name scope, but it's mutable","msgtype":"m.text"},"ts":1643146229374,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pZFBqER_GVQifA1ToqiiiGnaWu4RA3xNluWllcgPptA"},
{"content":{"body":"which fwiw is also subpar, it's just that self-recursion is much rarer than accessing the constructor's statics","msgtype":"m.text"},"ts":1643146235417,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uOeckcC6R0D7rmSuFqoJTQ1S_MngJq8tkXkmLpil-ak"},
{"content":{"body":"what","msgtype":"m.text"},"ts":1643146237663,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kBNTkcrCMe70QnqRUQWuq_5Pr5Wglo8c6c7gWg3uRVU"},
{"content":{"body":"the lambda scope is not mutable","msgtype":"m.text"},"ts":1643146241681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TI0klp4h5S_Lj76vmD69w_YP9WvY4hY8C4tIdcUKWu4"},
{"content":{"body":"uhh I thought it was, let me check","msgtype":"m.text"},"ts":1643146252566,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MxKRX1VboHZPXdMfHvqQO0RwlnFMo4yJOw7-cnswmTM"},
{"content":{"body":"nope","msgtype":"m.text"},"ts":1643146260304,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qpt4Txu-GlcFE5j3Xq2L8NyCIA7JMi_2SygRKY_dBz0"},
{"content":{"body":"you can assign to it but it's immutable","msgtype":"m.text"},"ts":1643146264085,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ACYZaEAi0-ZqZh0p9vvrVkOYbuIQCerc49QEG5fqWLg"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1643146268563,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$osQH_C6yhUECQq22iQjxBaw-O-U-PXxaiApZVPfq4IM"},
{"content":{"body":"it's a unique kind of const among bindings in JS","msgtype":"m.text"},"ts":1643146271058,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P43F2Ku2GBLMJSHpIQb2gXs0m9DexchB-sC2xe7C2o4"},
{"content":{"body":"it's not the same semantics as const but it's immutable","msgtype":"m.text"},"ts":1643146274522,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Hg__CCTvDJbcDzD1rPvwLiAAl_X2cEZM1dINUSmHho0"},
{"content":{"body":"so good","msgtype":"m.text"},"ts":1643146275318,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u0tlErMLmWTIdGgBYe0_XBLPYxQXrnFODNluiQEldTw"},
{"content":{"body":"ugh weird","msgtype":"m.text"},"ts":1643146282668,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rrUR3hGHesyDzmoeJvNi0uah2HbU0rsBcOlvvQQgQxE"},
{"content":{"body":" * it's a unique kind of const among bindings in JS","m.new_content":{"body":"it's a unique kind of const among bindings in JS","msgtype":"m.text"},"m.relates_to":{"event_id":"$P43F2Ku2GBLMJSHpIQb2gXs0m9DexchB-sC2xe7C2o4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643146291266,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EGvm3Xxql4jOM3eq0Fi_fcB5R2kyRqfqChKOq1V-Wv0"},
{"content":{"body":"> <@ljharb:matrix.org> which fwiw is also subpar, it's just that self-recursion is much rarer than accessing the constructor's statics\n\ndoubt","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uOeckcC6R0D7rmSuFqoJTQ1S_MngJq8tkXkmLpil-ak?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>which fwiw is also subpar, it&#39;s just that self-recursion is much rarer than accessing the constructor&#39;s statics</blockquote></mx-reply>doubt","m.relates_to":{"m.in_reply_to":{"event_id":"$uOeckcC6R0D7rmSuFqoJTQ1S_MngJq8tkXkmLpil-ak"}},"msgtype":"m.text"},"ts":1643146313416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_FY_CVKdjkYfY0imtluBSLyZrWsBoG91IIKWDO0Is2E"},
{"content":{"body":"doubt which, the rarity?","msgtype":"m.text"},"ts":1643146323568,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BZiBDkp3ZQwIBErDfnB1Xf-1KJ1e7yobmVUrGEo6Xds"},
{"content":{"body":"> <@bakkot:matrix.org> only because someone might get a hold of `this` during the constructor even if the constructor throws, right? if you assume the ctor/initializers don't throw it's equivalent?\n\nyes.  maybe the constructor passes `this` to a static function that contains `hasInstance` from the same class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dV-Q01snC9eA6Qsl3B7kxEl__wtAB-9zReJ3X5qL1E0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>only because someone might get a hold of <code>this</code> during the constructor even if the constructor throws, right? if you assume the ctor/initializers don't throw it's equivalent?</blockquote></mx-reply>yes.  maybe the constructor passes <code>this</code> to a static function that contains <code>hasInstance</code> from the same class","m.relates_to":{"m.in_reply_to":{"event_id":"$dV-Q01snC9eA6Qsl3B7kxEl__wtAB-9zReJ3X5qL1E0"}},"msgtype":"m.text"},"ts":1643146326782,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$YC25WMY9BQGdqz5RN_jLcYk-SUWqgW3SPRJSIaDsKqc"},
{"content":{"body":"> <@michaelficarra:matrix.org> ugh weird\n\nsickos.jpg","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rrUR3hGHesyDzmoeJvNi0uah2HbU0rsBcOlvvQQgQxE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>ugh weird</blockquote></mx-reply>sickos.jpg","m.relates_to":{"m.in_reply_to":{"event_id":"$rrUR3hGHesyDzmoeJvNi0uah2HbU0rsBcOlvvQQgQxE"}},"msgtype":"m.text"},"ts":1643146331314,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tR_3D60w0D8V0j4MQyKvq_YyZ0YBjzv1WN-NkMA6Fqc"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1643146332435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uE10U8VoXGKIArR7cMvKepzc50xF0Xak8NMXNR1iR6g"},
{"content":{"body":"bakkot: recursion at all is rare in JS due to a lack of PTC","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: recursion at all is rare in JS due to a lack of PTC","msgtype":"m.text"},"ts":1643146341904,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a__SZKfGbrBpqvRTccMaOFD1ZZL8GT41DwQObdvshRE"},
{"content":{"body":"it's certainly all over the place, but way rarer than it would be otherwise","msgtype":"m.text"},"ts":1643146349836,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-PE12mhX6xeOCoYJyPPBiu3Zb3BvE48t6RBgQTtZZto"},
{"content":{"body":"...false?","msgtype":"m.text"},"ts":1643146350757,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xvxd5fVcWUEEVpqcXZ3brmtzRQamPiSd9siHdqDtslw"},
{"content":{"body":"this has not been my experience","msgtype":"m.text"},"ts":1643146352765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jKCF6GUj346eg58qRYJ0HFYZVMpw9r_xve1DqkItE4A"},
{"content":{"body":"perhaps we look at very different kinds of codebases","msgtype":"m.text"},"ts":1643146364007,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eQRpwYz_x4sxOWud4I-h_eiTuilELBhKExp7oAygt6U"},
{"content":{"body":"most useful recursion i argue is in fact not tail recursion","msgtype":"m.text"},"ts":1643146370188,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9EMvxMIHOPdDoEJLUx6gd4Pam9f-9XtdmiuLVgyGwDg"},
{"content":{"body":"everything is tail recursion","msgtype":"m.text"},"ts":1643146392647,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Nr3VGdCcx05GBDNxeP_kQQovpXrOSdPBTb1DyR0FWxI"},
{"content":{"body":"How does Contains work with respect to a class? If you're evaluating Contains on Expr which contains a class expression C, does Contains peek into C's computed property names?","msgtype":"m.text"},"ts":1643146395883,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$DAIyyX5AzIwwMc38hjwk8KYRfVlaaJggANDjyAZmors"},
{"content":{"body":"I do recursion all the time.","msgtype":"m.text"},"ts":1643146417606,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NscDUmgVqpzggRYYJYzKLa8XROW5CFBi7C5jEU3C9tM"},
{"content":{"body":"waldemar: there is a special ComputedPropertyContains which, yes, descends into the computed property names, but not into method bodies or initializers","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: there is a special ComputedPropertyContains which, yes, descends into the computed property names, but not into method bodies or initializers","msgtype":"m.text"},"ts":1643146427884,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qxCR4WLjUXC1ulocT3JHqRDjOQYyDCOXWUOCcMtlXdU"},
{"content":{"body":"And if you're doing Contains on C itself, does it peek into its own property names?","msgtype":"m.text"},"ts":1643146433465,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$MQuOw5O5uxCcrFk3xVozUXEYYjq0PPKCvTk1v2EzL0o"},
{"content":{"body":"That one I'm not sure of offhand","msgtype":"m.text"},"ts":1643146453414,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IrvXNFN9jgh9eYp7VIV9mnr9vvGrlOvVUxJW5pHUpyo"},
{"content":{"body":"looks like, yes, it peeks into its names but not into method bodies, same as if you called Contains on a parent of C","msgtype":"m.text"},"ts":1643146486227,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$diAsViim9qmuB9aTsnQZpfDA-bt_eSNlzapUqJtjgkQ"},
{"content":{"body":"It seems that both do, which is weird. Things in computed property names are both in the class and not in the class?","msgtype":"m.text"},"ts":1643146489948,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$aG23ZRtLYQwus9rNVV8f-2gbAK8Dm1d5OW6py234P34"},
{"content":{"body":"This is a problem for things which are class-scoped like the proposal just presented.","msgtype":"m.text"},"ts":1643146513360,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$AkE6Hm26Q_QYGzz0zkgOcHO5AyeOimukaBJ0tHnKbSo"},
{"content":{"body":"We'd need to use a different operation than Contains, yes","msgtype":"m.text"},"ts":1643146536804,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Fra3kPj7YjYfCbCbo2M_uG1gd08XwwuEOXpVo805Ng"},
{"content":{"body":"Contains normally stops at function boundaries - which you can read to mean \"places where `yield` might start meaning a different thing\", to be precise - which is why it looks into computed property names but not method bodies","format":"org.matrix.custom.html","formatted_body":"Contains normally stops at function boundaries - which you can read to mean &quot;places where <code>yield</code> might start meaning a different thing&quot;, to be precise - which is why it looks into computed property names but not method bodies","msgtype":"m.text"},"ts":1643146614212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$65JMcatdUM1zDhUYsPXTPuu3_zIPiR4rZjcZAjORubA"},
{"content":{"body":"Hax's proposal makes it pierce function boundaries","msgtype":"m.text"},"ts":1643146640583,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$cielf8w6MSfnGR-ywZDGUbE1P11F2b26LpxpoiY3NNA"},
{"content":{"body":"Methinks Contains is getting too overloaded and confusing","msgtype":"m.text"},"ts":1643146660626,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$4NG55LrDHfvjiPtDO7feUP3O4FtcR46ypTUoPf_j0k0"},
{"content":{"body":"I would suggest introducing a different operation, yes","msgtype":"m.text"},"ts":1643146676891,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P1V2bxTKbngwBb1bqfaaIHvICYAAaVRu0YfWzSAHzxo"},
{"content":{"body":"we've done that before - e.g. we have ContainsArguments for looking for `arguments` in field initializers, which is like Contains but with some details different (it descends into arrows, in particular)","format":"org.matrix.custom.html","formatted_body":"we've done that before - e.g. we have ContainsArguments for looking for <code>arguments</code> in field initializers, which is like Contains but with some details different (it descends into arrows, in particular)","msgtype":"m.text"},"ts":1643146708286,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tnQPezFkYPtS0eUpfYwMN5Xrtjk3SVmmTfQsDBqhPQk"},
{"content":{"body":"adding a similar new ContainsClassHasInstance is probably the way to go","msgtype":"m.text"},"ts":1643146726104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gDYK1mXWCQyLYBSp4o6WMtTpKI4olXfmb1sArxDCZqs"},
{"content":{"body":"Currently we use ContainsClassHasInstance to check whether a class scope include any class.hasInstance. Maybe we don't need modify Contains... Speccing such things is too hard for me or TianYang 😂","msgtype":"m.text"},"ts":1643147314883,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$jrHtz-MguStAGJ-gji-dvAc9Ep3RHqp6heqVRYWxNkY"},
{"content":{"body":"Actually we already rewrite the spec text at least three times.","msgtype":"m.text"},"ts":1643147360158,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$krYbXB2smnSHIb7ryXn2gwFqFnsfIsRLEpLNJHan1aM"},
{"content":{"body":"> <@waldemarh:matrix.org> It seems that both do, which is weird. Things in computed property names are both in the class and not in the class?\n\nWe (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aG23ZRtLYQwus9rNVV8f-2gbAK8Dm1d5OW6py234P34?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>It seems that both do, which is weird. Things in computed property names are both in the class and not in the class?</blockquote></mx-reply>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.","m.relates_to":{"m.in_reply_to":{"event_id":"$aG23ZRtLYQwus9rNVV8f-2gbAK8Dm1d5OW6py234P34"}},"msgtype":"m.text"},"ts":1643147548837,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$STECiQliJvmFCsNoBrOi-vX0iIyT0BlREaUVbqEHxH4"},
{"content":{"body":"> <@waldemarh:matrix.org> Hax's proposal makes it pierce function boundaries\n\nYeah, this part make me headache...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cielf8w6MSfnGR-ywZDGUbE1P11F2b26LpxpoiY3NNA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>Hax&#39;s proposal makes it pierce function boundaries</blockquote></mx-reply>Yeah, this part make me headache...","m.relates_to":{"m.in_reply_to":{"event_id":"$cielf8w6MSfnGR-ywZDGUbE1P11F2b26LpxpoiY3NNA"}},"msgtype":"m.text"},"ts":1643147617035,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$U4qtV3vWMVog45o1FlqAGvGD703MXMTW4P7FyfVQ9Uw"},
{"content":{"body":"If you figure out exactly what the semantics you want I'm happy to help with writing the spec text before stage 3","msgtype":"m.text"},"ts":1643147640617,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vkr4hgiTpg_BLB3HpBGlaos5HVsI58npZEB7-lbT-1k"},
{"content":{"body":"at least in terms of telling what is probably the simplest way to write the thing you want","msgtype":"m.text"},"ts":1643147667128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uxdA9cj36LvaLPVAHjcy9odIa-2rQ-n5EfR1g9IcgT4"},
{"content":{"body":"important part is figuring out the semantics you want","msgtype":"m.text"},"ts":1643147694565,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MaSHa8Fikz8a5rk2Ie4t6PQFKmczXq6xGZzDT2yLeB4"},
{"content":{"body":"rbuckton: I just realized that I'm going to miss the Enum proposal because I have to go get my kid from school.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I just realized that I'm going to miss the Enum proposal because I have to go get my kid from school.","msgtype":"m.text"},"ts":1643147987660,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$G8i3qbEmjFhHB3hVW80Srbq6woktOZCDKq62va7vTq8"},
{"content":{"body":"waldemar: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","msgtype":"m.text"},"ts":1643148034682,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PGTmjf8SVdKO_LXVttdBrxo1Eksp6bGjIxXgpykJPcM"},
{"content":{"body":"which seems like a good approach to me","msgtype":"m.text"},"ts":1643148039167,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$o6R7uGj6tiidviWRl3r9YyH857SS38UqdEwKcY8t1SI"},
{"content":{"body":"> <@rwaldron:matrix.org> rbuckton: I just realized that I'm going to miss the Enum proposal because I have to go get my kid from school.\n\nIs there anything you need me to cover?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$G8i3qbEmjFhHB3hVW80Srbq6woktOZCDKq62va7vTq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rwaldron:matrix.org\">@rwaldron:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I just realized that I'm going to miss the Enum proposal because I have to go get my kid from school.</blockquote></mx-reply>Is there anything you need me to cover?","m.relates_to":{"m.in_reply_to":{"event_id":"$G8i3qbEmjFhHB3hVW80Srbq6woktOZCDKq62va7vTq8"}},"msgtype":"m.text"},"ts":1643148046081,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0FUZEfJ08ujWWfickOrNWlSurYoqjmkfA9j_pmnp3q0"},
{"content":{"body":" * waldemar: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","m.new_content":{"body":"waldemar: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: if it's a syntax error [in computed names] then it doesn't refer to either the inner or outer class, because it's unutterable","msgtype":"m.text"},"m.relates_to":{"event_id":"$PGTmjf8SVdKO_LXVttdBrxo1Eksp6bGjIxXgpykJPcM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643148050566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VDn1o6-30rUg4kzQ_GVJWrSLcST3F73Vl_RPG3l8gbk"},
{"content":{"body":"sorry i lose the connection","msgtype":"m.text"},"ts":1643148104663,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$-Ddi5dKY4q8BA3Nx_wzXvbnvrDue1KoO5Jv5s2hzlag"},
{"content":{"body":"~Do we have a link to the slides?~ nevermind, the agenda was updated","msgtype":"m.text"},"ts":1643148313261,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1jhBCFgdvunuiHDq9uTjnFvwmWHcXhRXp5TktBOdUu8"},
{"content":{"body":" * ~Do we have a link to the slides?~ nevermind, the agenda was updated","m.new_content":{"body":"~Do we have a link to the slides?~ nevermind, the agenda was updated","msgtype":"m.text"},"m.relates_to":{"event_id":"$1jhBCFgdvunuiHDq9uTjnFvwmWHcXhRXp5TktBOdUu8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643148330809,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GMfUShK9tHUZsC_uMn7iN-PiucCGy10NN9cuGc6FCsQ"},
{"content":{"body":"> <@bakkot:matrix.org> Mathieu Hofman: can you confirm the conclusion we have captured in the notes is correct\n\nLooks right to me. And PR has been updated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hssI2VQLpkZfmBE_XfOgzk5oLw3meKkBT5D08ePfsIM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: can you confirm the conclusion we have captured in the notes is correct</blockquote></mx-reply>Looks right to me. And PR has been updated.","m.relates_to":{"m.in_reply_to":{"event_id":"$hssI2VQLpkZfmBE_XfOgzk5oLw3meKkBT5D08ePfsIM"}},"msgtype":"m.text"},"ts":1643148656694,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$10rolW1_iEC734tPHFHTnQhLGnQycxE3eGd-Rshe_PU"},
{"content":{"body":"I wonder if we could have a more general construct for 'run this on successful return' . `catch` for errors, `finally` for all exits and something else for `completed without error`","format":"org.matrix.custom.html","formatted_body":"I wonder if we could have a more general construct for 'run this on successful return' . <code>catch</code> for errors, <code>finally</code> for all exits and something else for <code>completed without error</code>","msgtype":"m.text"},"ts":1643148674759,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$au5ak4ff7i_yBuhXWQU8_Uz_5HrpPWjTXvug2fd3LW8"},
{"content":{"body":"`</half-baked-idea>`","format":"org.matrix.custom.html","formatted_body":"<code>&lt;/half-baked-idea&gt;</code>","msgtype":"m.text"},"ts":1643148691708,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$tT3QSLnq0CZVX_9k8ttlMQEQXbFrrHvjM946JuPrWWM"},
{"content":{"body":"> <@mhofman:matrix.org> Looks right to me. And PR has been updated.\n\n(pr will need another update; see comment)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$10rolW1_iEC734tPHFHTnQhLGnQycxE3eGd-Rshe_PU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Looks right to me. And PR has been updated.</blockquote></mx-reply>(pr will need another update; see comment)","m.relates_to":{"m.in_reply_to":{"event_id":"$10rolW1_iEC734tPHFHTnQhLGnQycxE3eGd-Rshe_PU"}},"msgtype":"m.text"},"ts":1643148710196,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c669GMbKLU2rPe0jzsCpWj3TAudUh50PIRyR9dYCZtI"},
{"content":{"body":"Ashley Claymore: there's been proposals for like a `catch.error` meta-property you could use in `finally` which would tell you what the error is in that case","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: there's been proposals for like a <code>catch.error</code> meta-property you could use in <code>finally</code> which would tell you what the error is in that case","msgtype":"m.text"},"ts":1643148748246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tiIYidP0CVBncVtpD56XApVq3gT8Is8KyFAAQ5Oo834"},
{"content":{"body":"Ashley Claymore: isn't that just \"add a statement at the end of the `try`\" tho","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: isn't that just &quot;add a statement at the end of the <code>try</code>&quot; tho","msgtype":"m.text"},"ts":1643148756454,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$A5pzi7hvivPmaOp9QdTFPI_MIhOYHyqpvGDYH4BBMew"},
{"content":{"body":"which lets you just check in your `finally` if you are in the `completed without error` case","format":"org.matrix.custom.html","formatted_body":"which lets you just check in your <code>finally</code> if you are in the <code>completed without error</code> case","msgtype":"m.text"},"ts":1643148761590,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RiX71vLmFV_Bj9xl-G8G-amFs6xsC2RGnDyPNaozzpk"},
{"content":{"body":"ljharb: end of the `try` isn't necessarily reached if there's a `return`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: end of the <code>try</code> isn't necessarily reached if there's a <code>return</code>","msgtype":"m.text"},"ts":1643148775018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1A-g_qT9VNpNdxvK14jCBNg52mDXkO8kmFK35wW0AJY"},
{"content":{"body":"(to add that now we'd have to solve it both for syntactic and Promise `finally`)","format":"org.matrix.custom.html","formatted_body":"(to add that now we'd have to solve it both for syntactic and Promise <code>finally</code>)","msgtype":"m.text"},"ts":1643148781411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$u9cLY7A_lypZFDFActzKHi1sudyT6lH-v7LHHb7u0WU"},
{"content":{"body":"oh true","msgtype":"m.text"},"ts":1643148783480,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FWkTapDKEnsGgoDqB0ZlrOO-fPjICCm9ZGUGLsG_B5I"},
{"content":{"body":"strong disagree with the claim that any functionality available in syntactic finally must also be available in `Promise.finally`","format":"org.matrix.custom.html","formatted_body":"strong disagree with the claim that any functionality available in syntactic finally must also be available in <code>Promise.finally</code>","msgtype":"m.text"},"ts":1643148808709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7xRb2E5_ViM31CSlYvHGU7Jl2ksqkAVwry94R7FPSQw"},
{"content":{"body":"if that was the claim","msgtype":"m.text"},"ts":1643148813108,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yjn92SA93Vems0aEJ6G5pGx9ienfB9C93tUJGuk1cHk"},
{"content":{"body":"> <@ljharb:matrix.org> Ashley Claymore: isn't that just \"add a statement at the end of the `try`\" tho\n\nI set a flag in a catch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A5pzi7hvivPmaOp9QdTFPI_MIhOYHyqpvGDYH4BBMew?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: isn't that just \"add a statement at the end of the <code>try</code>\" tho</blockquote></mx-reply>I set a flag in a catch","m.relates_to":{"m.in_reply_to":{"event_id":"$A5pzi7hvivPmaOp9QdTFPI_MIhOYHyqpvGDYH4BBMew"}},"msgtype":"m.text"},"ts":1643148821273,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$xXTS0AQ8AU3gXg007oCQa2U9R49bJTOA1RZQ1EgkxOQ"},
{"content":{"body":"it was, because in the past that was one of the stated blockers for three-state promises - iow, that claim has precedent.","msgtype":"m.text"},"ts":1643148824003,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jJscZM0nbMvBvrlYefBf9hV0ZIS1wR_UT6-6yfmOUNo"},
{"content":{"body":" * it was, because in the past that was the stated blocker for three-state promises - iow, that claim has precedent.","m.new_content":{"body":"it was, because in the past that was the stated blocker for three-state promises - iow, that claim has precedent.","msgtype":"m.text"},"m.relates_to":{"event_id":"$jJscZM0nbMvBvrlYefBf9hV0ZIS1wR_UT6-6yfmOUNo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643148835920,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Juk2t57Z8mCWoWaEsgGVEfs1pmnkhObR5zmKfI_bXTo"},
{"content":{"body":" * it was, because in the past that was one of the stated blockers for three-state promises - iow, that claim has precedent.","m.new_content":{"body":"it was, because in the past that was one of the stated blockers for three-state promises - iow, that claim has precedent.","msgtype":"m.text"},"m.relates_to":{"event_id":"$jJscZM0nbMvBvrlYefBf9hV0ZIS1wR_UT6-6yfmOUNo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643148842195,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KSQ41qWUIRsuYG3qyK7JmeRJexqP96B3TYLNwWwE4uU"},
{"content":{"body":"eg the whole `catchCancel` thing","format":"org.matrix.custom.html","formatted_body":"eg the whole <code>catchCancel</code> thing","msgtype":"m.text"},"ts":1643148857753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k-4qW4yaL-Xzh2gfc4ebvR9BBtpTGxf8xsgJxO6qtac"},
{"content":{"body":"ehhhhhhhhhhhhhhhhhhhhh","msgtype":"m.text"},"ts":1643148866292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F1Z9CJZbAjubwlYeIGbiSFUhTbkR_jHN-qrMG-Eixj0"},
{"content":{"body":"don't really agree with that on multiple levels","msgtype":"m.text"},"ts":1643148880884,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7FZk9mI7xoUnd5Qkfg_KHfQxGa1016N7ymz2ImnDeF8"},
{"content":{"body":"none the less, that parity was a huge part of the design of Promise, and it constrained me on Promise `finally` as well","format":"org.matrix.custom.html","formatted_body":"none the less, that parity was a huge part of the design of Promise, and it constrained me on Promise <code>finally</code> as well","msgtype":"m.text"},"ts":1643148897725,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GKPwex22Nnj7zRodc6Hrn-obGz9Ie4BfEl9q0ruu9Cs"},
{"content":{"body":"any motivating use case for `catch.error` would exist in promise finally, so i'm not sure i understand why it'd be ok to do just one","format":"org.matrix.custom.html","formatted_body":"any motivating use case for <code>catch.error</code> would exist in promise finally, so i'm not sure i understand why it'd be ok to do just one","msgtype":"m.text"},"ts":1643148936543,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cqmNwdmCvmJSlGjZYf8xNAwPbq4P632pYKnNyWAk57E"},
{"content":{"body":"you can achieve the same thing with `.then` and `.catch` if you really want to","format":"org.matrix.custom.html","formatted_body":"you can achieve the same thing with <code>.then</code> and <code>.catch</code> if you really want to","msgtype":"m.text"},"ts":1643148948571,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$697TRJCeaYr4-OPK4t6tfx7wJPohMnj6eAwwmHPN3x0"},
{"content":{"body":"you can achieve it with a boolean flag in .catch too.","msgtype":"m.text"},"ts":1643148977859,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CB5LV3sbwBWqnFiEheizSHFjeFwy7iDSIDM5e0Z2MrY"},
{"content":{"body":"yeah but it's gross","msgtype":"m.text"},"ts":1643148985446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2IqgmE37-DQbLPrWHGE5KCEAkiDX5sONG22SyBDPU4w"},
{"content":{"body":"> so i'm not sure i understand why it'd be ok to do just one\n\nyou can add a meta-property to solve it in syntax, and you cannot do that to add it in `Promise.finally`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so i'm not sure i understand why it'd be ok to do just one</p>\n</blockquote>\n<p>you can add a meta-property to solve it in syntax, and you cannot do that to add it in <code>Promise.finally</code></p>\n","msgtype":"m.text"},"ts":1643148994954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hm0nNmJXvVA7adsVM73hr3rsWBvT9ep0P7ub2pNjuag"},
{"content":{"body":"right, it'd have to be an argument to the finally callback somehow","msgtype":"m.text"},"ts":1643149006591,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3mKBxPkICFj8C9bKLbfl1A2BDqCWkV1NnH2eWK4EP-w"},
{"content":{"body":"\"there is a good way to do this in one case, and not in this other\" is a fine reason to provide an affordance in one case and not the other","msgtype":"m.text"},"ts":1643149010661,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dQ1RK7BLv1FwBln87r0W9GysT7k7TnAICfICoWqal9g"},
{"content":{"body":"> <@bakkot:matrix.org> Ashley Claymore: there's been proposals for like a `catch.error` meta-property you could use in `finally` which would tell you what the error is in that case\n\nI have on my list of wishes to add an optional error argument to the `finally` block:\n```\ntry {\n // something that throws\n} finally (err) {\n  if (err) {\n    // something\n  } else {\n    //something else\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tiIYidP0CVBncVtpD56XApVq3gT8Is8KyFAAQ5Oo834?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: there's been proposals for like a <code>catch.error</code> meta-property you could use in <code>finally</code> which would tell you what the error is in that case</blockquote></mx-reply><p>I have on my list of wishes to add an optional error argument to the <code>finally</code> block:</p>\n<pre><code>try {\n // something that throws\n} finally (err) {\n  if (err) {\n    // something\n  } else {\n    //something else\n  }\n}\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$tiIYidP0CVBncVtpD56XApVq3gT8Is8KyFAAQ5Oo834"}},"msgtype":"m.text"},"ts":1643149019566,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$w5WBvfntUweCOq-mdn1XDIgF2xL2b13xxzIvXq4UWUs"},
{"content":{"body":"what if someone throws falsey","msgtype":"m.text"},"ts":1643149043642,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4D2XP5PSPDJr0CJo8REVD030B1cGP4Rpl9TyZfD0Uis"},
{"content":{"body":"Mathieu Hofman: you can throw and reject with `undefined`, so it'd have to be a container","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: you can throw and reject with <code>undefined</code>, so it'd have to be a container","msgtype":"m.text"},"ts":1643149046101,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m1spG25tOP4GH16SRHPwXY3ut4nE0yKNur-NTsrjuwA"},
{"content":{"body":"you can implement this with private fields though, so it is a usecase that is possible with it -- is it being used for that?","msgtype":"m.text"},"ts":1643149050057,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$bBjzV-XfklpJwX1d6lfiAjSpROITewB2ZsFuEEoh6Iw"},
{"content":{"body":"> We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n\nIt's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.</p>\n</blockquote>\n<p>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n","msgtype":"m.text"},"ts":1643149052074,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4"},
{"content":{"body":" * > We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\nIt's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.<br>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n</blockquote>\n","m.new_content":{"body":"> We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\nIt's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.<br>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149072047,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$cehCwZUpEtub9rqFVVFQh8ankii_qHHsZZoI4w4ELR4"},
{"content":{"body":"and allow spread so you can do `finally (...errs) { if (errs.length); }` to handle the `err === undefined` case","format":"org.matrix.custom.html","formatted_body":"and allow spread so you can do <code>finally (...errs) { if (errs.length); }</code> to handle the <code>err === undefined</code> case","msgtype":"m.text"},"ts":1643149073628,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KVQJPXXCCf_kuk30R5NCKXKefb_xgeNxRGIdD0CN9Uc"},
{"content":{"body":" * > We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n> It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.<br>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n</blockquote>\n","m.new_content":{"body":"> We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n> It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.<br>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149082331,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$QpBqpvTUAFrsqB_XPaDXGRlVd5FiON36n1FJ1kHxLjs"},
{"content":{"body":" * > We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n\nIt's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.</p>\n</blockquote>\n<p>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n","m.new_content":{"body":"> We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n\nIt's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.</p>\n</blockquote>\n<p>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149093166,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$d9rbzfFmygpOqsTfB75lVuN2SakFwrSq9ZWTlWb6Jz8"},
{"content":{"body":"i suppose that'd work in `.finally` with `arguments.length`","format":"org.matrix.custom.html","formatted_body":"i suppose that'd work in <code>.finally</code> with <code>arguments.length</code>","msgtype":"m.text"},"ts":1643149100964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-tT8SuvgLo_Y3Zh1w7tPUaH_1xhKXquRTjKsbzYzHW8"},
{"content":{"body":"And similar for `Promise.p.finally`","format":"org.matrix.custom.html","formatted_body":"And similar for <code>Promise.p.finally</code>","msgtype":"m.text"},"ts":1643149110380,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hM272V-oQf8wSzva4rft4G8k_ayx02RFcAXZleHHqu8"},
{"content":{"body":"Also there's not a way to only freeze prototype right, though I think there is a proposal for that right?","msgtype":"m.text"},"ts":1643149123299,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lYpMjCbSP6JZYWUEMMnOGBnf4QZAxCQD7izYqktK3_E"},
{"content":{"body":" * And similar for `Promise.p.finally`","format":"org.matrix.custom.html","formatted_body":" * And similar for <code>Promise.p.finally</code>","m.new_content":{"body":"And similar for `Promise.p.finally`","format":"org.matrix.custom.html","formatted_body":"And similar for <code>Promise.p.finally</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$hM272V-oQf8wSzva4rft4G8k_ayx02RFcAXZleHHqu8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149124533,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BXiMzeVZ5owmc99Mddx_gDeibqXD2h08pptFHTczYT8"},
{"content":{"body":"anyway maybe it would prove possible to add an argument to the `Promise.finally` callback, which would be fine; but if not I don't think that needs to block the syntax","format":"org.matrix.custom.html","formatted_body":"anyway maybe it would prove possible to add an argument to the <code>Promise.finally</code> callback, which would be fine; but if not I don't think that needs to block the syntax","msgtype":"m.text"},"ts":1643149127101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5C_2VVsdVk8CF-ZhQORtmQIYQpiLEBvjqoO1yyZMlGg"},
{"content":{"body":"> <@aclaymore:matrix.org> Also there's not a way to only freeze prototype right, though I think there is a proposal for that right?\n\nyeah, though I haven't been working on that one lately","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lYpMjCbSP6JZYWUEMMnOGBnf4QZAxCQD7izYqktK3_E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Also there&#39;s not a way to only freeze prototype right, though I think there is a proposal for that right?</blockquote></mx-reply>yeah, though I haven't been working on that one lately","m.relates_to":{"m.in_reply_to":{"event_id":"$lYpMjCbSP6JZYWUEMMnOGBnf4QZAxCQD7izYqktK3_E"}},"msgtype":"m.text"},"ts":1643149150887,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d6qjopIK8IlwT9fPSvwQGxhQRaE831DQzk0sxU5OdOI"},
{"content":{"body":"need to revisit and figure out how to work with the rest of the traps, like [[IsExtensible]]","msgtype":"m.text"},"ts":1643149178291,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T7O60hhWfUheQkbw8gXsHNvd5bf-QKgvdcdC6xzeKX8"},
{"content":{"body":"i'd love to see that freeze proto one advance","msgtype":"m.text"},"ts":1643149204545,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cHB22Piqzl_8nvZXI8uBJyYRhOuOpmVz-tbdaOoyaPU"},
{"content":{"body":"override mistake be damned?","msgtype":"m.text"},"ts":1643149228646,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ebAq8LbBjQNFnCWoIWRaGLQJ-l_xAlcW7SwuZ7aHb0E"},
{"content":{"body":"? how does it conflict with that?","msgtype":"m.text"},"ts":1643149256805,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VlkyzsDPvv9X-Y_9IXO6S19P0mrQBkC72c8ssDXcIT8"},
{"content":{"body":"oh, maybe i misunderstood what the freeze proto proposal does","msgtype":"m.text"},"ts":1643149292619,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XqcvJpb3VipAJVQZfi2KBvCJC3jjnJ89y5GjTK8TW0o"},
{"content":{"body":"iiuc it'd make Object.prototype not be exotic, because it'd make \"a fully mutable object with a frozen [[Prototype]]\" a normally achievable thing","msgtype":"m.text"},"ts":1643149307452,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5Glz0l8TYT9jhauN2R7vP1T6NN-YuLVngIqG0WbMvSo"},
{"content":{"body":" * iiuc it'd make Object.prototype not be exotic","m.new_content":{"body":"iiuc it'd make Object.prototype not be exotic","msgtype":"m.text"},"m.relates_to":{"event_id":"$5Glz0l8TYT9jhauN2R7vP1T6NN-YuLVngIqG0WbMvSo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149312531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VqysM3wAYsi0MSg0SWBuzule3no23503jOvBWyeiQ8w"},
{"content":{"body":" * iiuc it'd make Object.prototype not be exotic, because it'd make \"a fully mutable object with a frozen prototype\" a normally achievable thing","m.new_content":{"body":"iiuc it'd make Object.prototype not be exotic, because it'd make \"a fully mutable object with a frozen prototype\" a normally achievable thing","msgtype":"m.text"},"m.relates_to":{"event_id":"$5Glz0l8TYT9jhauN2R7vP1T6NN-YuLVngIqG0WbMvSo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149325394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T70Hj7sirS0tkR0b6GTI6bPpqMFpXM7RV54SqiQ3sco"},
{"content":{"body":"yeah i completely misunderstood, please ignore","msgtype":"m.text"},"ts":1643149328608,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KBYVWkJOCI8idib398e7q9cI0O-cUdtptq6BVVGMQVc"},
{"content":{"body":"yeah, just freezes the prototype slot itself, not the prototype object","msgtype":"m.text"},"ts":1643149330310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1IJTmGsceqw6c17Vj11nSD0X312y7WWdZ-dsDx2XZ-0"},
{"content":{"body":" * iiuc it'd make Object.prototype not be exotic, because it'd make \"a fully mutable object with a frozen [[Prototype]]\" a normally achievable thing","m.new_content":{"body":"iiuc it'd make Object.prototype not be exotic, because it'd make \"a fully mutable object with a frozen [[Prototype]]\" a normally achievable thing","msgtype":"m.text"},"m.relates_to":{"event_id":"$5Glz0l8TYT9jhauN2R7vP1T6NN-YuLVngIqG0WbMvSo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643149334548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HGcKLyzW0-RqcWTypWQBJa6aT2CsK-0pa6FhNy9f2G4"},
{"content":{"body":"> <@shuyuguo:matrix.org> override mistake be damned?\n\nstill on board with this though :P","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ebAq8LbBjQNFnCWoIWRaGLQJ-l_xAlcW7SwuZ7aHb0E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>override mistake be damned?</blockquote></mx-reply>still on board with this though :P","m.relates_to":{"m.in_reply_to":{"event_id":"$ebAq8LbBjQNFnCWoIWRaGLQJ-l_xAlcW7SwuZ7aHb0E"}},"msgtype":"m.text"},"ts":1643149344349,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6ReghD-rX3X0uJNU2D2VbEFLEfj0_efcfHhvemZKvIw"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1643149356352,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NuhE3PH3kxML8uiDaz8M4YXR7lqfD_jQ9QNGf1eL4ko"},
{"content":{"body":"if you can get someone else to own the breakage fallout bugs on v8, sure","msgtype":"m.text"},"ts":1643149371748,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n7Qxsfc2Lma8JxyXl8rRxkDFJBP_Oj-0fGDiSEeoIzI"},
{"content":{"body":"really it's more \"be damned\" in the sense of \"damn it\"","msgtype":"m.text"},"ts":1643149424970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bv1GekAnwv1kg-aXmbJAFD773bEKYEP3qz-la-szrGw"},
{"content":{"body":"HE Shi-Jun: posted https://github.com/tc39/proposal-class-brand-check/issues/15","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: posted https://github.com/tc39/proposal-class-brand-check/issues/15","msgtype":"m.text"},"ts":1643149575159,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-9yO7Git4wJBBcT_Fu4fXlhhjvK3QcQ8wCmauiwhrjM"},
{"content":{"body":"ljharb: ok, so, syntactic `finally` is already unlike `Promise.prototype.finally`, in that syntactic `finally` can _override_ the return value, and `Promise.prototype.finally` cannot","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: ok, so, syntactic <code>finally</code> is already unlike <code>Promise.prototype.finally</code>, in that syntactic <code>finally</code> can <em>override</em> the return value, and <code>Promise.prototype.finally</code> cannot","msgtype":"m.text"},"ts":1643149628277,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OY8hz7jPVw2TzSc8orLoEZuxFLoX2Jt5z1TzuPCzvag"},
{"content":{"body":"so how does that not already break the equivalence?","msgtype":"m.text"},"ts":1643149633839,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eONesUenvOvEWLACWizmcWVqSWuLOBywsjmyWurz5D4"},
{"content":{"body":"> <@waldemarh:matrix.org> > We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make `class.hasInstance` in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.\n> \n> It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.\n\nYou are correct! so maybe we could keep current behavior 😅 ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><blockquote>\n<p>We (three champion) haven't has meeting for that, but we chatted about it  yesterday and we tend to make <code>class.hasInstance</code> in computed property syntax error. Though as current spec text, (if I really figure out all things) i believe it's allowed but always give u false, because at that time, no one have the class so no instance of it.</p>\n</blockquote>\n<p>It's not always false. You can define a function inside a computed property name expression, squirrel it away somewhere, and call it later.</p>\n</blockquote></mx-reply>You are correct! so maybe we could keep current behavior 😅","m.relates_to":{"m.in_reply_to":{"event_id":"$jwbTNpCMlndfOvHMmLNDZlYFtdg6PeZxslkYyL7uZY4"}},"msgtype":"m.text"},"ts":1643149702040,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Dw_QqgzYj0DCkbBwhfHX8I09D0xcpzui9sia9LkBjsg"},
{"content":{"body":"I like syntax error, syntax error is good - there is no reason to want to write this code","msgtype":"m.text"},"ts":1643149855424,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2wjNigO2Dt6KvgJnn2LQErgBAf4EH6akXm3KVQqcdmc"},
{"content":{"body":"bakkot: you're right, that is the one way it's unlike; and given that it's impossible via the callback, we all decided to accept that difference. but that doesn't mean further avoidable deviation is a good idea","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: you're right, that is the one way it's unlike; and given that it's impossible via the callback, we all decided to accept that difference. but that doesn't mean further avoidable deviation is a good idea","msgtype":"m.text"},"ts":1643149902728,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E6KlITdaV2h05kSG3DiW5B7zI_mOR5RYHzE1C2TbIUo"},
{"content":{"body":"sure. depends on how avoidable it is.","msgtype":"m.text"},"ts":1643149928987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KU9L-lfyMIgXaKwmtc1RBYJpdPbeOJvXZqczD3Imks0"},
{"content":{"body":"I am so incredibly opposed to auto-increment, I cannot find the words to describe it","msgtype":"m.text"},"ts":1643149930675,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aZK_VN92H0-dZmi6MqwZdkqSgVSrHTdXFi9nnCcT1LI"},
{"content":{"body":"so for the enum proposal - this is a ton of discussion about semantics, which are more of a stage 1+ concern. is it worth a 💩 to talk about problem space/motivation?","msgtype":"m.text"},"ts":1643150049082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$itsODDWGHSL4Lj9XU_KkiurmXDDobyMeBmEy3rtTXoQ"},
{"content":{"body":"sorry that's a \"point of order\" initialism; my autocorrect took over","msgtype":"m.text"},"ts":1643150058173,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1yQCREqYd39gAg1SW-SqHbYaI_Wz8kd-1dHdHreGOks"},
{"content":{"body":" * sorry that's a \"point of order\" initialism; my autocorrect took over","m.new_content":{"body":"sorry that's a \"point of order\" initialism; my autocorrect took over","msgtype":"m.text"},"m.relates_to":{"event_id":"$1yQCREqYd39gAg1SW-SqHbYaI_Wz8kd-1dHdHreGOks","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643150064477,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v7r0TG6y9Po_b_0inN8T8MY-BbBjvJxgJBbG2sWkMW8"},
{"content":{"body":"ljharb: agreed, was thinking the same thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: agreed, was thinking the same thing","msgtype":"m.text"},"ts":1643150069074,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$S_6i_ah2YLM7nSl7jSl3nD5YXWzE6JacjX0icrHT9EU"},
{"content":{"body":"this is cool and all, but the more important bit is to convince us that there's a problem worth solving here","msgtype":"m.text"},"ts":1643150086724,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bXH0uGUZYgY9JYeTMorM2bq-exRsiRRmE7e9QyAqgrA"},
{"content":{"body":"Lessons from protobuf are that anything other than explicitly id'd values are a big footgun for cross-module apps","msgtype":"m.text"},"ts":1643150092091,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EH891QNNutgCIzfEHaxsacjvSSJkwoo4fVLIcCB-g-8"},
{"content":{"body":"auto-increment gives a meaningful value for enums whose base primitive is `number`.","format":"org.matrix.custom.html","formatted_body":"auto-increment gives a meaningful value for enums whose base primitive is <code>number</code>.","msgtype":"m.text"},"ts":1643150095386,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A2TrfRkhMioSf0lai0ZW9Q5ERK_YLFJQqXmvDzOT8C8"},
{"content":{"body":"> <@aclaymore:matrix.org> Also there's not a way to only freeze prototype right, though I think there is a proposal for that right?\n\nYeah unfortunately setImmutablePrototype is tied to preventExtensions right now. I wish it was available","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lYpMjCbSP6JZYWUEMMnOGBnf4QZAxCQD7izYqktK3_E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Also there&#39;s not a way to only freeze prototype right, though I think there is a proposal for that right?</blockquote></mx-reply>Yeah unfortunately setImmutablePrototype is tied to preventExtensions right now. I wish it was available","m.relates_to":{"m.in_reply_to":{"event_id":"$lYpMjCbSP6JZYWUEMMnOGBnf4QZAxCQD7izYqktK3_E"}},"msgtype":"m.text"},"ts":1643150112999,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vUIKi1A5AMlemE36AcynAtyEwkBQEkacFuksqXnQeus"},
{"content":{"body":"https://github.com/tc39/proposal-freeze-prototype","msgtype":"m.text"},"ts":1643150144027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$477AB3IYocPFbt7rjrcxNL-uDDoyEY2IPDkx23O9c2g"},
{"content":{"body":"(very stale, as mentioned, just the place to follow along or pick up if you want to make it happen)","msgtype":"m.text"},"ts":1643150195567,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pvhhL8Z2AuNEARbugTwgHOjwxkNYt1ezH4-R0jYgLAc"},
{"content":{"body":"If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\"` and `Color.Red.description === \"Color.Red\"`.\nIf you have `enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":"If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot;</code> and <code>Color.Red.description === &quot;Color.Red&quot;</code>.<br>If you have <code>enum Color of Number { Red, Green, Blue }</code>, what would you expect <code>Color.Red</code> to be?","msgtype":"m.text"},"ts":1643150222745,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fW4DZxPWmlYZQHusbUfwOmpgQzxRW5Xk5RUkO3fBvlA"},
{"content":{"body":" * If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\" and `Color.Red.description === \"Color.Red\"`.\nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":" * If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot; and </code>Color.Red.description === &quot;Color.Red&quot;<code>. If you have</code>enum Color of Number { Red, Green, Blue }<code>, what would you expect </code>Color.Red` to be?","m.new_content":{"body":"If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\" and `Color.Red.description === \"Color.Red\"`.\nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":"If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot; and </code>Color.Red.description === &quot;Color.Red&quot;<code>. If you have</code>enum Color of Number { Red, Green, Blue }<code>, what would you expect </code>Color.Red` to be?","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4DZxPWmlYZQHusbUfwOmpgQzxRW5Xk5RUkO3fBvlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643150232052,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H3PKhFoduOP5RieuNXgMLjxzy2c-mgCHTYy-_K78TlY"},
{"content":{"body":"> <@shuyuguo:matrix.org> if you can get someone else to own the breakage fallout bugs on v8, sure\n\nI have ideas to tame the override mistake beast, but I need to familiarize myself with previous attempts first","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n7Qxsfc2Lma8JxyXl8rRxkDFJBP_Oj-0fGDiSEeoIzI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if you can get someone else to own the breakage fallout bugs on v8, sure</blockquote></mx-reply>I have ideas to tame the override mistake beast, but I need to familiarize myself with previous attempts first","m.relates_to":{"m.in_reply_to":{"event_id":"$n7Qxsfc2Lma8JxyXl8rRxkDFJBP_Oj-0fGDiSEeoIzI"}},"msgtype":"m.text"},"ts":1643150232309,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$b8BsYVMy_9EFtsx_Z46KEe6xA4Kvk_lOg77PwPTWTZ4"},
{"content":{"body":" * If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\" and `Color.Red.description === \"Color.Red\"`.  \nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":" * If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot; and </code>Color.Red.description === &quot;Color.Red&quot;<code>.   If you have</code>enum Color of Number { Red, Green, Blue }<code>, what would you expect </code>Color.Red` to be?","m.new_content":{"body":"If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\" and `Color.Red.description === \"Color.Red\"`.  \nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":"If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot; and </code>Color.Red.description === &quot;Color.Red&quot;<code>.   If you have</code>enum Color of Number { Red, Green, Blue }<code>, what would you expect </code>Color.Red` to be?","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4DZxPWmlYZQHusbUfwOmpgQzxRW5Xk5RUkO3fBvlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643150243321,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jX7Y0PQogQIaj_YKqaZxOCEEQO-rki5WEv_E_Vb80cM"},
{"content":{"body":"good luck","msgtype":"m.text"},"ts":1643150248780,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wG0kidhnCXtnISY--QyF5GyWtAdbNi_xi6tOlQdvJus"},
{"content":{"body":" * If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\"` and `Color.Red.description === \"Color.Red\"`.\nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":" * If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot;</code> and <code>Color.Red.description === &quot;Color.Red&quot;</code>.<br>If you have<code>enum Color of Number { Red, Green, Blue }</code>, what would you expect <code>Color.Red</code> to be?","m.new_content":{"body":"If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\"` and `Color.Red.description === \"Color.Red\"`.\nIf you have`enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":"If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot;</code> and <code>Color.Red.description === &quot;Color.Red&quot;</code>.<br>If you have<code>enum Color of Number { Red, Green, Blue }</code>, what would you expect <code>Color.Red</code> to be?","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4DZxPWmlYZQHusbUfwOmpgQzxRW5Xk5RUkO3fBvlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643150254899,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qsnl-ZnN1gQJTZh5wVWrw6o7LB5WTgQUyw1Jk90RIj8"},
{"content":{"body":" * If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\"` and `Color.Red.description === \"Color.Red\"`.\nIf you have `enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":" * If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot;</code> and <code>Color.Red.description === &quot;Color.Red&quot;</code>.<br>If you have <code>enum Color of Number { Red, Green, Blue }</code>, what would you expect <code>Color.Red</code> to be?","m.new_content":{"body":"If you have `enum Color of String { Red, Green, Blue }`, it can be clear that `Color.Red === \"Red\"`.\nIf you have `enum Color of Symbol { Red, Green, Blue }`, it can be clear that `typeof Color.Red === \"symbol\"` and `Color.Red.description === \"Color.Red\"`.\nIf you have `enum Color of Number { Red, Green, Blue }`, what would you expect `Color.Red` to be?","format":"org.matrix.custom.html","formatted_body":"If you have <code>enum Color of String { Red, Green, Blue }</code>, it can be clear that <code>Color.Red === &quot;Red&quot;</code>.<br>If you have <code>enum Color of Symbol { Red, Green, Blue }</code>, it can be clear that <code>typeof Color.Red === &quot;symbol&quot;</code> and <code>Color.Red.description === &quot;Color.Red&quot;</code>.<br>If you have <code>enum Color of Number { Red, Green, Blue }</code>, what would you expect <code>Color.Red</code> to be?","msgtype":"m.text"},"m.relates_to":{"event_id":"$fW4DZxPWmlYZQHusbUfwOmpgQzxRW5Xk5RUkO3fBvlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643150285244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0DNI9_3rJV8F86u8v-HO8O_jjc4tRrKSWQKUoKgabG0"},
{"content":{"body":"note takers?","msgtype":"m.text"},"ts":1643150377768,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$c6uE9-8yAiVxLwypTxyD8iLkda1mhP3GAifuCIH0PKY"}
]