[
{"content":{"body":"looking for someone to help with notes please!  üôè","m.mentions":{},"msgtype":"m.text"},"ts":1758553825008,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$a7lyx-fjPb0dIAGlhS8e4tVYMXnG-VLzIm3ARo6aNEI"},
{"content":{"body":"Helping out with notes is so much more low-key than it used to be","m.mentions":{},"msgtype":"m.text"},"ts":1758553839424,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$iWhlotKl1ryf3IjVn4eiDSYWQx8KkKYwxiEBQskEsVA"},
{"content":{"body":"way easier","m.mentions":{},"msgtype":"m.text"},"ts":1758553844870,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$EB9m3wVswA_y8PR5bRAn0fcWhWBqBGMBQMoaSvihh7Y"},
{"content":{"body":"just sayin","m.mentions":{},"msgtype":"m.text"},"ts":1758553853527,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$v5hg-b3xyo0BY-7X1c_itEHgedcJEYJbSEAyZ_LTVXA"},
{"content":{"body":"(yay for CLE)","m.mentions":{},"msgtype":"m.text"},"ts":1758553952128,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SMjshzh-S0VwjrHj-TVhliSuOup6SZiEESIzatalkUk"},
{"content":{"body":"https://fosdem.org/2026/news/2025-09-18-fosdem-2026/","m.mentions":{},"msgtype":"m.text"},"ts":1758554311638,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$-m7kQtPEZAaEZvsnGx8WWwayVgA9HMM3GRB3hgVHRJA"},
{"content":{"body":"The dates are now published: Jan 31, Feb 1","m.mentions":{},"msgtype":"m.text"},"ts":1758554313995,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OLElkAjVSdvScYDnXnydeVXQ24WygMcoWhVYSGfWBic"},
{"content":{"body":"YAY","m.mentions":{},"msgtype":"m.text"},"ts":1758554322082,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$JSkQjRqpb15y8YIefaSgVqWIBW48e48cJht7uap23mM"},
{"content":{"body":"finally","m.mentions":{},"msgtype":"m.text"},"ts":1758554326999,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$8yv4n69PoMWqeLEJVCYltO_eINCBGS8sxk2H2G9edbc"},
{"content":{"body":"Regarding Invited Expert status, there's an open issue in Admin-and-Business to transition me back to delegate status that is awaiting action.","m.mentions":{},"msgtype":"m.text"},"ts":1758554500957,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ngg2VVGpM0wNvUCmSPSu3Lrpqf9Pc0cfD27QbcQ5hgg"},
{"content":{"body":"sorry for the delay on that; i've been out of the country","m.mentions":{},"msgtype":"m.text"},"ts":1758555125185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bHY6ZMIRVWc7ILbzuB3x_5P4Xx2WwFFz0VkUH82zLhU"},
{"content":{"body":"last call for comments on https://github.com/tc39/how-we-work/pull/164","m.mentions":{},"msgtype":"m.text"},"ts":1758555729327,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eATMWW3v5msavOyU7uqD4sgsuOGNL8UdmV4GF4JomxY"},
{"content":{"body":"Seems like we've lost the transcriptionist","m.mentions":{},"msgtype":"m.text"},"ts":1758556991569,"senderName":"Ben Allen","senderId":"@benallen:igalia.com","id":"$ydajWNWdd5JUjn84RHWjAbJxiBOOnuIcc5IEHoxmq8k"},
{"content":{"body":"we have not.  refresh?","m.mentions":{"user_ids":["@benallen:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ydajWNWdd5JUjn84RHWjAbJxiBOOnuIcc5IEHoxmq8k"}},"msgtype":"m.text"},"ts":1758557090600,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$JaR3Axs7u2gscJqEfVNdk03nz9Nx8BWFCV0FDdiSyFo"},
{"content":{"body":"people should not be doing anything with string enums other than `===`","format":"org.matrix.custom.html","formatted_body":"people should not be doing anything with string enums other than <code data-md=\"`\">===</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758557155970,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IMEED-vU3rD0U9m0vjV9ClHU-aoZj8UlcBzjWSKqVBI"},
{"content":{"body":"I've now filled out the missing parts of my comment.","m.mentions":{"user_ids":["@benallen:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ydajWNWdd5JUjn84RHWjAbJxiBOOnuIcc5IEHoxmq8k"}},"msgtype":"m.text"},"ts":1758557196979,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$4UgVKMXDwFN-E8uj8nF3bpZLpRU68dHpZ6XbU0RtngI"},
{"content":{"body":"while I'm not a fan of the idea of ignoring case on input for string enums, imo kebab case is better for readability if we do. that said ignoring input case has a number of concerns, including performance and readability (inputs could be all uppercase or all lowercase and can make words run together).","m.mentions":{},"msgtype":"m.text"},"ts":1758557251362,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YiFyqWXjfShLqJg9sbXLGdIhGcLhX8DQrxy-sxuwp9E"},
{"content":{"body":"out of curiosity, where are we on time?","m.mentions":{},"msgtype":"m.text"},"ts":1758557402498,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rD6my0yc-F8x61Gt08XGg9W3pEZ1uHUz9J1RLh0OpPo"},
{"content":{"body":"few mins remain","m.mentions":{},"msgtype":"m.text"},"ts":1758557410518,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$RWn2FMRg_hcosKRlJhNsfuSXvmQnErGoR6uk8yLvuf0"},
{"content":{"body":"(this is a feature I wish was part of TCQ)","m.mentions":{},"msgtype":"m.text"},"ts":1758557412117,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6bqOgacKwxe9TvhBYBHSbk2dNCJz91PLFpSPHqzuEgA"},
{"content":{"body":"we can start posting the end times ITC if people want","m.mentions":{},"msgtype":"m.text"},"ts":1758557425570,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$UwDrRCqFozhFBl63XWfWOC7wGsFRIuQkiaxZz0YmRc8"},
{"content":{"body":"I want to make sure we have enough time at the end to clearly state a coherent proposal that we can accept/decline","m.mentions":{},"msgtype":"m.text"},"ts":1758557467452,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5GsizMWI1dUS_Ba05RcIf6Sws5EF3NWKVNXLgUxv1MY"},
{"content":{"body":"might need a continuation","m.mentions":{},"msgtype":"m.text"},"ts":1758557481509,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$t9-u-gYM062OdJljpGVBOvhLJrKjKoDdVIdlKJg1MZg"},
{"content":{"body":"I'm hoping we are not not cancelling the last day for continuing this ü§û","m.mentions":{},"msgtype":"m.text"},"ts":1758557522983,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$b_BwkQwdLYPXZfu5bW6ggxZnVvZnyOxjnUkrzLgTTTw"},
{"content":{"body":"that said, string enums based on existing names (i.e., identifiers, well-known OS-specific constant names from C++ headers, etc.) are a reasonable exception","m.mentions":{},"msgtype":"m.text"},"ts":1758557541354,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w_2BBhrPZFG4Txs1z5PadCcOQ8TZgP0o2GEJXvpGgKM"},
{"content":{"body":"* that said, string enums based on existing names (i.e., identifiers, well-known OS-specific constant names from C++ headers, etc.) are a reasonable exception, mostly to take advantage of prior knowledge and make discovery easier","m.mentions":{},"m.new_content":{"body":"that said, string enums based on existing names (i.e., identifiers, well-known OS-specific constant names from C++ headers, etc.) are a reasonable exception, mostly to take advantage of prior knowledge and make discovery easier","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$w_2BBhrPZFG4Txs1z5PadCcOQ8TZgP0o2GEJXvpGgKM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758557582172,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OO-XrQvpjBtzGFIDONDheYK0FttxjwUPH6urISGyFzo"},
{"content":{"body":"I'm hoping this remaining an open issue doesn't block iterator chunking","format":"org.matrix.custom.html","formatted_body":"I&#39;m hoping this remaining an open issue doesn&#39;t block iterator chunking","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$b_BwkQwdLYPXZfu5bW6ggxZnVvZnyOxjnUkrzLgTTTw"}},"msgtype":"m.text"},"ts":1758557601966,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6oQZ6wNnwY7BeTTobkYd9tdrPpn__HPZWJ2Bv2FkVrA"},
{"content":{"body":"Getting myself off the queue to not waste time, but just for context: the thing about Mark mentioned comes from Unicode, that defines some base units and then combines them with modifiers like `-per-`. Amount didn't design it, it does not actually enforce it (but unit-conversion methods will, in a separate proposal, will)","format":"org.matrix.custom.html","formatted_body":"Getting myself off the queue to not waste time, but just for context: the thing about Mark mentioned comes from Unicode, that defines some base units and then combines them with modifiers like <code>-per-</code>. Amount didn't design it, it does not actually enforce it (but unit-conversion methods will, in a separate proposal, will)","m.mentions":{},"msgtype":"m.text"},"ts":1758557615746,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dmAiEV1M22whXKTNAjQLZBMW6om3KeT-jWrZi-bUO2o"},
{"content":{"body":"I captured the queue before everyone removed items","m.mentions":{},"msgtype":"m.text"},"ts":1758557628717,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$aUkjlfa6zPrO4QRD5RyQ_KbxTRT9cOADOpewcHJU8T8"},
{"content":{"body":"if we're fine going forward with kebab case and possibly adding an accept-both across a large swath of APIs at a later time, I'm good","m.mentions":{},"msgtype":"m.text"},"ts":1758557647427,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jmTAIfpUu4MdnehGaQQ7179ylpIa6xX2gCxgIzyDM-M"},
{"content":{"body":"Enum _members_ are generally expected to be camel/pascal-cased, though it _is_ possible to use any string as a member name. Avoiding non-identifier characters in an enum member name makes auto-complete easier. Enum member _values_, however, have no such requirement. So `enum E { FooBar = \"foo-bar\" }` is perfectly reasonable, while `enum E { \"foo-bar\" = \"foo-bar\" }` is possible but discouraged.","format":"org.matrix.custom.html","formatted_body":"Enum <em>members</em> are generally expected to be camel/pascal-cased, though it <em>is</em> possible to use any string as a member name. Avoiding non-identifier characters in an enum member name makes auto-complete easier. Enum member <em>values</em>, however, have no such requirement. So <code>enum E { FooBar = \"foo-bar\" }</code> is perfectly reasonable, while <code>enum E { \"foo-bar\" = \"foo-bar\" }</code> is possible but discouraged.","m.mentions":{},"msgtype":"m.text"},"ts":1758557829593,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YeDOUfFY2fUJ39GJvdDjC5Y56FiHhNBT83s8CWPA_Jc"},
{"content":{"body":"is this about millions in Spanish?","m.mentions":{},"msgtype":"m.text"},"ts":1758557913970,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$igQUa-rzjVlTGZuLe2dcYSa5zUMZcV5StkKjmS760k0"},
{"content":{"body":"In italian too, I _think_. 1M kebab vs 1 millione di kebab","format":"org.matrix.custom.html","formatted_body":"In italian too, I <em>think</em>. 1M kebab vs 1 millione di kebab","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$igQUa-rzjVlTGZuLe2dcYSa5zUMZcV5StkKjmS760k0"}},"msgtype":"m.text"},"ts":1758557993906,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QfvnsuV3w3fI_D9JxI3ORZxfn0L-AS0o8dHBIFo8IU4"},
{"content":{"body":"Or at least that's how I'd write it","m.mentions":{},"msgtype":"m.text"},"ts":1758557999610,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aMsJ4h838dY_doE3B9JQQ8uyflbn90ic-h6Wxii1GVk"},
{"content":{"body":"* In italian too, I _think_. 1M kebab vs 1 millione **di** kebab","format":"org.matrix.custom.html","formatted_body":"* In italian too, I <em>think</em>. 1M kebab vs 1 millione <strong>di</strong> kebab","m.mentions":{},"m.new_content":{"body":"In italian too, I _think_. 1M kebab vs 1 millione **di** kebab","format":"org.matrix.custom.html","formatted_body":"In italian too, I <em>think</em>. 1M kebab vs 1 millione <strong>di</strong> kebab","m.mentions":{"user_ids":["@abotella:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QfvnsuV3w3fI_D9JxI3ORZxfn0L-AS0o8dHBIFo8IU4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758558006112,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TUIeMRNErsGAH1wvfILRAVu_FjdG0RuCGRv2fzX5nIA"},
{"content":{"body":"Ok, that makes sense.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QfvnsuV3w3fI_D9JxI3ORZxfn0L-AS0o8dHBIFo8IU4"}},"msgtype":"m.text"},"ts":1758558069956,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$DKa46qaNlgaesMZVlhw8RfpZ9VDnqQ97T0VQudx5hes"},
{"content":{"body":"In Intl we have this:\n```\nnew Intl.NumberFormat('en', { minimumSignificantDigits: 3, maximumSignificantDigits: 3 }).format(0)\n// \"0.00\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>In Intl we have this:</p>\n<pre><code>new Intl.NumberFormat('en', { minimumSignificantDigits: 3, maximumSignificantDigits: 3 }).format(0)\n// \"0.00\"\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758559898752,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$7-iKw3ksFebJVa5ODxwnQOvOGIUCk-Kjwd-JLHInopI"},
{"content":{"body":"I did not understand dminor if that was intended to be a comment","format":"org.matrix.custom.html","formatted_body":"I did not understand <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a> if that was intended to be a comment","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1758560067080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$64IfLyH98CXMtcrt4aHRabMOiBLCnv_rzxe_f35Jhyw"},
{"content":{"body":"Sorry, I was asking for the next speaker.","m.mentions":{},"msgtype":"m.text"},"ts":1758560077567,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$ZZZiAG78VYt8TKvui94SMEjqKEkmGSeiG6YcjCTj14g"},
{"content":{"body":"My dog is causing a lot of noise due to a delivery.","m.mentions":{},"msgtype":"m.text"},"ts":1758560089487,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$F6pB6-WrZW30z3j9MOjS_yqgM2malEQbn7olsPMgRF8"},
{"content":{"body":"You were not legible now and previously. ","msgtype":"m.text"},"ts":1758560118044,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$cQnBN850p4geULpLbyt0mQuaEPcYmnZcLhAps0M8Hb0"},
{"content":{"body":"Do a mic check before you speak next ","msgtype":"m.text"},"ts":1758560141837,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$YL6U22Qh7XTWuzvz98UxBxb3mDJcuu21PGWNNlYTacU"},
{"content":{"body":"Sounded distorted, might be configured too loud or googlmeet needs a second to stabilize","msgtype":"m.text"},"ts":1758560499864,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$iTBzxdWr0xpNsbeL4dasg0jaQZ4ulMfFBim6jQ0pezY"},
{"content":{"body":"Just did an os update right before the call :( Hopefully it will be better after a restart.","m.mentions":{},"msgtype":"m.text"},"ts":1758560578958,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$H8dzlP-d_69qQx3qB9ydLWp-czm0N7SEq6zIFXC8vf0"},
{"content":{"body":"`new Intl.NumberFormat('en', { minimumSignificantDigits: 3, maximumSignificantDigits: 3 }).format(0.03)\n// \"0.0300\"`","format":"org.matrix.custom.html","formatted_body":"<code>new Intl.NumberFormat('en', { minimumSignificantDigits: 3, maximumSignificantDigits: 3 }).format(0.03) // \"0.0300\"</code>","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7-iKw3ksFebJVa5ODxwnQOvOGIUCk-Kjwd-JLHInopI"}},"msgtype":"m.text"},"ts":1758560686579,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$qDFOMK6vLFeSBENyztw2C7ijWPIY76YlKCtbJ0I7H9g"},
{"content":{"body":"It's not \"0.03\"","m.mentions":{},"msgtype":"m.text"},"ts":1758560707880,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$L6Hg8AJgpZtjvcNhGPL8KZA6tWCW3jKUphxVXk51oW0"},
{"content":{"body":"Just tried the example I gave at the meeting. `new Intl.NumberFormat('en', { minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(0.03)` produces the value I'd expect: `\"0.030\"`. It's not `\"0.0\"`.","format":"org.matrix.custom.html","formatted_body":"Just tried the example I gave at the meeting. <code>new Intl.NumberFormat('en', { minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(0.03)</code> produces the value I'd expect: <code>\"0.030\"</code>. It's not <code>\"0.0\"</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1758561080682,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$e2dptnIb3EcA5mbCBeMtSRk_Dj5lK6PrJe71X-Vd7MQ"},
{"content":{"body":"right, I have never heard leading zeroes counted as significant digits, except in 0 itself","m.mentions":{},"msgtype":"m.text"},"ts":1758561649093,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$eANA93vNO0gX9GRDw7S742jnj7uMAVCwd-Iuun8Sal4"},
{"content":{"body":"Huh, you're right, I should've checked this more thoroughly. My position here is that the understanding of \"significant digits\" in Amount should match the existing understanding that's in Intl.NumberFormat and in Number.p.toPrecision(), whatever that might be.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e2dptnIb3EcA5mbCBeMtSRk_Dj5lK6PrJe71X-Vd7MQ"}},"msgtype":"m.text"},"ts":1758562217871,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$N9WyvqmknukAC6a9k-uqQYSJZ0SWn24Zl-CjAtqXvyk"},
{"content":{"body":"I belive that is inconsistent, e.g. `(450).toPrecision(2)` is \"4.5e+2\" while `new Intl.NumberFormat('en', { minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(450)` is \"450\"","format":"org.matrix.custom.html","formatted_body":"I belive that is inconsistent, e.g. <code>(450).toPrecision(2)</code> is \"4.5e+2\" while <code>new Intl.NumberFormat('en', { minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(450)</code> is \"450\"","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$N9WyvqmknukAC6a9k-uqQYSJZ0SWn24Zl-CjAtqXvyk"}},"msgtype":"m.text"},"ts":1758563665408,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UZwhpmhHsqxych1Pl8igYz8p1fLmMENfBNOx5Y23G_A"},
{"content":{"body":"Remember, notetaking way chill now","m.mentions":{},"msgtype":"m.text"},"ts":1758564022189,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$gpwD90desBjkfm_abAeKgVF5PHd1uvYkGMqRfAoPivk"},
{"content":{"body":"you just have to make corrections","m.mentions":{},"msgtype":"m.text"},"ts":1758564026917,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$JWriOdf5e4cnQW5qSPMYHjr4OUIb8aiic-H7ArQRkAI"},
{"content":{"body":"üôè please take notes, I have to catch a flight!","m.mentions":{},"msgtype":"m.text"},"ts":1758564141412,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JEKdG4yHPGD0fbrh9n0zwtXdUR6WnyjF9o2ujNStKjM"},
{"content":{"body":"Joke joke joke!","m.mentions":{},"msgtype":"m.text"},"ts":1758564208307,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$gFZsbdOUHpb5BEtqd7VkAi8XstJx9Z_Yz2bk-t4ijsY"},
{"content":{"body":"Rob Palmer: I see TCQ on \"lunch\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I see TCQ on \"lunch\"","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1758564271088,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$L8iv5MB_EyByrvZP1l0ukFREXXUamqmHHvWM-VE2l8U"},
{"content":{"body":"There was a setTimeout on the joke. The offer expired.  It may return at a future call for notetakers.","m.mentions":{},"msgtype":"m.text"},"ts":1758564308003,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$O4Eakcs4LzMug0T37TUx60_uWr48z6lc1W8dzo2CYv4"},
{"content":{"body":"I don't see an inconsistency here, as Intl.NumberFormat only formats with exponential notation if you ask for it:\n```\nnew Intl.NumberFormat('en', { notation: 'scientific', minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(450)\n// \"4.5E2\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>I don't see an inconsistency here, as Intl.NumberFormat only formats with exponential notation if you ask for it:</p>\n<pre><code>new Intl.NumberFormat('en', { notation: 'scientific', minimumSignificantDigits: 2, maximumSignificantDigits: 2 }).format(450)\n// \"4.5E2\"\n</code></pre>\n","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UZwhpmhHsqxych1Pl8igYz8p1fLmMENfBNOx5Y23G_A"}},"msgtype":"m.text"},"ts":1758564380623,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$6byA2cBbKf7arolwtXSqwu7l9hN6KrRNRM6_5lS8jCM"},
{"content":{"body":"Lol I thought MF picked space case just to cause controversy, while waiting for us to decide on the only two possible reasonable options","m.mentions":{},"msgtype":"m.text"},"ts":1758564404493,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mQ6uNxwEWj5UKzp7odU_H__XNTnQITfwoYYtCuqf6yQ"},
{"content":{"body":"kebab-case outbreak?","m.mentions":{},"msgtype":"m.text"},"ts":1758564426630,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$xCtXaA6IBbibE37MPipqoHKM7a8ld98l8sB60kpNmOo"},
{"content":{"body":"use cases include running/continuous computations, pairwise comparisons, carousels, ...","m.mentions":{},"msgtype":"m.text"},"ts":1758564762138,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TpCCH05OIyDj3yJP0WbvscyJW1xd5cq0OrOQBUvQor8"},
{"content":{"body":"carousels want undersized but the others mostly want only-full","m.mentions":{},"msgtype":"m.text"},"ts":1758564808424,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HA83A2RkDyoKTpoN8w2Z9m9NQ2jkYQIGQFKaGl5LUL0"},
{"content":{"body":"and a \"real\" carousel is usually infinite so it ends up not mattering","m.mentions":{},"msgtype":"m.text"},"ts":1758564829917,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pbqSbe_uiBSOmFp4U7_YLtsOUSW8N0uW4WwBZQA8mA8"},
{"content":{"body":"also reminder to everyone to fill out summary / conclusion","m.mentions":{},"msgtype":"m.text"},"ts":1758564846311,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nV2zK7BL78dV2NUtQ8OnhYHZxqsvOCbt__kWysIUmqk"},
{"content":{"body":"also also good job Michael Ficarra doing that fast despite attempts at more bikeshedding","format":"org.matrix.custom.html","formatted_body":"also also good job <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> doing that fast despite attempts at more bikeshedding","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1758564859315,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cZtPmFy48Pa7YxoWa6sKKs60nDAf30kKXbop_HJHSr8"},
{"content":{"body":".concat? ","msgtype":"m.text"},"ts":1758565020288,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$9RUXNUXUbqkFXozilkahspahUnW5mLI7-TVaNMOHte4"},
{"content":{"body":"concat always gives you a new array though","m.mentions":{},"msgtype":"m.text"},"ts":1758565033484,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UY6ddqlAVkbYSG14zqF1wT-cMn56066Fof84tRbLZQ0"},
{"content":{"body":"Sometimes I want to mutate (often)","m.mentions":{},"msgtype":"m.text"},"ts":1758565040359,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$URozp23CwtIJ-Iq3CyTW0SG_rtR0xA_p88xOT1Dzjkw"},
{"content":{"body":"I suspect the quadratic behavior is not actually plausible; every impl I have seen doubles the size when it hits capacity which keeps overhead at most log (or constant I forget)","m.mentions":{},"msgtype":"m.text"},"ts":1758565081759,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cUzl-qZwy05L3gy_Hq41dboecov_pL1QN8Y_c6bc_t4"},
{"content":{"body":"let + .concat is what I used to do","msgtype":"m.text"},"ts":1758565101859,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$BC-tOiWP95zVIwpC6j7ZqWH74WJ1qkb7-mnE6NT5Z4U"},
{"content":{"body":"It is horribly easy to forget to reassign tho","msgtype":"m.text"},"ts":1758565163133,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$x8DWQEQrG9CBuLgX-PKwgFcdwVEWqweeN2QXHkEUiH8"},
{"content":{"body":"* I suspect the quadratic behavior is not actually plausible; every impl I have seen doubles the size when it hits capacity which keeps overhead at most ~~log~~ constant","m.mentions":{},"m.new_content":{"body":"I suspect the quadratic behavior is not actually plausible; every impl I have seen doubles the size when it hits capacity which keeps overhead at most ~~log~~ constant","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cUzl-qZwy05L3gy_Hq41dboecov_pL1QN8Y_c6bc_t4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758565169957,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$78WpkcNbp_LUxDDCWoTC64UOhbgh5q9dL0sNWkZ3xIc"},
{"content":{"body":"* I suspect the quadratic behavior is not actually plausible; every impl I have seen doubles the size when it hits capacity which keeps overhead at most ~log~ constant","m.mentions":{},"m.new_content":{"body":"I suspect the quadratic behavior is not actually plausible; every impl I have seen doubles the size when it hits capacity which keeps overhead at most ~log~ constant","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cUzl-qZwy05L3gy_Hq41dboecov_pL1QN8Y_c6bc_t4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758565173752,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4yE606E6jQUowPYW27hhw7FAbVI1qulxRY5IeqNJnPU"},
{"content":{"body":"\"it runs fine in JSC\" -> speaks to the criticality of it, right? You can run your tests in one runtime and then crash in a user browser","m.mentions":{},"msgtype":"m.text"},"ts":1758565302260,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$D0JsxdLn3uE-EFJH06vn7p2kNuHw5cO6-ZVvGgB5pUI"},
{"content":{"body":"Re Jordan, not all data processing occurs over a network","m.mentions":{},"msgtype":"m.text"},"ts":1758565335544,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$QJFC9-IcgqbowyRUBc3_qi7RFFxNmRAzeXDBleu-VSA"},
{"content":{"body":"\"I am skeptical that large arrays are common\" is... a claim","m.mentions":{},"msgtype":"m.text"},"ts":1758565339809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TUJD0Enr81BixENxCVBARNYfcsslFYTGEnOIEN3dJjI"},
{"content":{"body":"ljharb this also came up in jQuery DOM manipulation, in which there is no \"wire\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> this also came up in jQuery DOM manipulation, in which there is no \"wire\"","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1758565428969,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Y6ShyajXJJ55Rb9QjXLAmv5rbdcf_9BXyAmoDdIoXIM"},
{"content":{"body":"At one point in the array slice notation proposal, I'd suggested a slice mechanism as well, i.e.: \n```js\nar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>At one point in the array slice notation proposal, I'd suggested a slice mechanism as well, i.e.:</p>\n<pre><code class=\"language-js\">ar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758565448054,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FZ67d3jlz2P3YIk0GQDAaTfaud2H6jIWZZ4mYGPtAxY"},
{"content":{"body":"* At one point in the array slice notation proposal, I'd suggested a splice mechanism as well, i.e.:\n\n```js\nar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"* <p>At one point in the array slice notation proposal, I'd suggested a splice mechanism as well, i.e.:</p>\n<pre><code class=\"language-js\">ar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"At one point in the array slice notation proposal, I'd suggested a splice mechanism as well, i.e.:\n\n```js\nar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>At one point in the array slice notation proposal, I'd suggested a splice mechanism as well, i.e.:</p>\n<pre><code class=\"language-js\">ar[^1] = x; // set at ar.length-1\nar[^0] = x; // set at ar.length (i.e., push)\nar[^1:]; // get slice from ar.length-1 to end\nar[^0:]; // get slice from ar.length to end (e.g., empty)\n\nar[^0:] = ar2; // splice ar2 into ar at ar.length\nar[^1:] = ar2; // splice ar2 into ar at ar.length - 1\n// etc.\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FZ67d3jlz2P3YIk0GQDAaTfaud2H6jIWZZ4mYGPtAxY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758565460791,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$82Dj1C6ah3BdRyLX7PWRrVD6caXydN0u9yWq0Hj_uXo"},
{"content":{"body":"I like .splice üò¨","m.mentions":{},"msgtype":"m.text"},"ts":1758565483941,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KrMpBgq1m_lfar06nzX4t99ffxr6noMIE2EcXkpWWUs"},
{"content":{"body":"(but yeah we don't need the other ones)","m.mentions":{},"msgtype":"m.text"},"ts":1758565493699,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$f7JFEnVC1lMFjHuUWiynGnCjj32NferBMoahJaIDCnE"},
{"content":{"body":"it's awkward to use but it does a specific thing which needs to be done","m.mentions":{},"msgtype":"m.text"},"ts":1758565497950,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u0VO8dWV6k4bnnccHT_kTTNJvl3_2tQrIzVPBCCX2-M"},
{"content":{"body":"it's true that if we have `spliceFrom` then we don't need `pushFrom`","format":"org.matrix.custom.html","formatted_body":"it's true that if we have <code>spliceFrom</code> then we don't need <code>pushFrom</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758565511621,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0HfaeVNOt4QTrpc1TxcAiAxN_h6XQxdj1HDEr4bVlpc"},
{"content":{"body":"It‚Äôs true that `spliceFrom` is the only mutative method an array ever needs. Everything else is for ergonomics.","format":"org.matrix.custom.html","formatted_body":"It‚Äôs true that <code>spliceFrom</code> is the only mutative method an array ever needs. Everything else is for ergonomics.","m.mentions":{},"msgtype":"m.text"},"ts":1758565570250,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$QlMKl4R57VkD-QfQgKls5JUpEAZiNIlkqx8aVdI9rT8"},
{"content":{"body":"sure, but i'd say the same applies with a filesystem or IPC wrt sharding. are there others i'm unaware of?","m.mentions":{"user_ids":["@searyanc:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QJFC9-IcgqbowyRUBc3_qi7RFFxNmRAzeXDBleu-VSA"}},"msgtype":"m.text"},"ts":1758565589594,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9UpUgiRaPuIge0iy6-Nc-5WBVd-I8C7ZlvJh-FmfmOQ"},
{"content":{"body":"Not being add prototype methods to array is constantly frustrating. Maybe we need a new `List` type we can use in place of `Array` ","format":"org.matrix.custom.html","formatted_body":"Not being add prototype methods to array is constantly frustrating. Maybe we need a new <code>List</code> type we can use in place of <code>Array</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758565616804,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uOdF15mJXBQgWCiMrGYE-pSiPklWp7RzxCUCZkdDSLY"},
{"content":{"body":"* sure, but i'd say the same applies with a filesystem or IPC wrt sharding. are there other mechanisms i'm unaware of?","m.mentions":{},"m.new_content":{"body":"sure, but i'd say the same applies with a filesystem or IPC wrt sharding. are there other mechanisms i'm unaware of?","m.mentions":{"user_ids":["@searyanc:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9UpUgiRaPuIge0iy6-Nc-5WBVd-I8C7ZlvJh-FmfmOQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758565618044,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AOCZB8wQnNzPN7U2H5U-MBFFGv6_tagwvudotClgKEw"},
{"content":{"body":"Though arguably, only `applyOperationalTransform` would be more general than `spliceFrom`.","format":"org.matrix.custom.html","formatted_body":"Though arguably, only <code>applyOperationalTransform</code> would be more general than <code>spliceFrom</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1758565635488,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$vExDkMK2_KNA8hlh-6_UYLzDxUc6rbvmVPFLAAEXLUs"},
{"content":{"body":"I've written a lot of code that operates in the range where sharding is not needed but `.push(...arg)` fails","format":"org.matrix.custom.html","formatted_body":"I've written a lot of code that operates in the range where sharding is not needed but <code>.push(...arg)</code> fails","m.mentions":{},"msgtype":"m.text"},"ts":1758565647387,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$Y4WmdJxEK-uqD-r_Wysjedq_vdysTodpOTdAj7VBh7Y"},
{"content":{"body":"We added the .to* ones. It's difficult  but possible","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uOdF15mJXBQgWCiMrGYE-pSiPklWp7RzxCUCZkdDSLY"}},"msgtype":"m.text"},"ts":1758565680776,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zX5uN-yBigw_yExTlL-mKvMfYzCpf2Hf_frcmaA63cM"},
{"content":{"body":"I think the problem is that it happens in production when it causes actual issues that are difficult to forsee.\nNo matter that I agree that it's better to chunk, I think this is going to prevent applications from crashing badly.","msgtype":"m.text"},"ts":1758565703045,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$1WbJtVYKm28oT8Z1zy-db19HZluZMupEEasrbGzF1WM"},
{"content":{"body":"sorry, I pressed the done speaking button!","m.mentions":{},"msgtype":"m.text"},"ts":1758565704481,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ixvQlZQ6bxaooGY3QugBFcV76jkhS-80pi8jCUWmEXY"},
{"content":{"body":"I had to rewrite a binding library to compensate for RangeError over `splice` in terms of a userspace `spliceFrom` in order to propagate changes that included initialization from as few as 10k values, about ten years ago.","format":"org.matrix.custom.html","formatted_body":"I had to rewrite a binding library to compensate for RangeError over <code>splice</code> in terms of a userspace <code>spliceFrom</code> in order to propagate changes that included initialization from as few as 10k values, about ten years ago.","m.mentions":{"user_ids":["@searyanc:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Y4WmdJxEK-uqD-r_Wysjedq_vdysTodpOTdAj7VBh7Y"}},"msgtype":"m.text"},"ts":1758565749892,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$1-ar81YkIVnNYDWNIz6JWog5K5nbbRuWC8_m6khJQJI"},
{"content":{"body":"(I called userspace `spliceFrom` `swap`)","format":"org.matrix.custom.html","formatted_body":"(I called userspace <code>spliceFrom</code> <code>swap</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1758565767577,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$sa-rBJbNEV0vbWmI_iVKtAmjh7hyYfsclbWA93LfOTI"},
{"content":{"body":"Like would anyone *support* saying that we should throw if `push(...args)` has args.length >= 10? No, right? But we're saying throwing at a nebulous unspecified number is fine","format":"org.matrix.custom.html","formatted_body":"Like would anyone <em>support</em> saying that we should throw if <code>push(...args)</code> has args.length &gt;= 10? No, right? But we're saying throwing at a nebulous unspecified number is fine","m.mentions":{},"msgtype":"m.text"},"ts":1758565772441,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$9P8QXBxmOPdB7dw53gm4tRGIZcl_fTS_ePFREc-yNHc"},
{"content":{"body":"the example from the slides fails for me in Safari","m.mentions":{},"msgtype":"m.text"},"ts":1758565879277,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60"},
{"content":{"body":"I guess maybe there's an optimization which I don't have yet?","m.mentions":{},"msgtype":"m.text"},"ts":1758565887261,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pkKthXn1jpxZ58Njo69THSfVwmSgsykTZN3lDSDdXKw"},
{"content":{"body":"@searyanc:matrix.org the spec assumes unlimited resources, there's violations like this all over the place","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@searyanc:matrix.org\">@Ryan Cavanaugh</a> the spec assumes unlimited resources, there&#39;s violations like this all over the place","m.mentions":{"user_ids":["@searyanc:matrix.org"]},"msgtype":"m.text"},"ts":1758565914501,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JpWCp1smJkIyL0hYnslOFpVez2aBkVGKhiZlzPf-UE4"},
{"content":{"body":"While its not necessary to tie to this proposal, I'd love to see a `Set.prototype.addAll` (or `.addRange`), i.e., a mutating `union`, in the same fashion as `pushAll`","format":"org.matrix.custom.html","formatted_body":"While its not necessary to tie to this proposal, I'd love to see a <code>Set.prototype.addAll</code> (or <code>.addRange</code>), i.e., a mutating <code>union</code>, in the same fashion as <code>pushAll</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758565942558,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A_ymsRenbBJJ1kCbFiJBe5qQoYSKLvDpMFllsvkrRho"},
{"content":{"body":".conpcat would be consistent with splice üôà","msgtype":"m.text"},"ts":1758565964692,"senderName":"Zb Tenerowicz (ZTZ/naugtur)","senderId":"@naugtur:matrix.org","id":"$r0hIcR0E9BgoFrkGZzl-v_0pqMZHSc9JjJj3R5e_CcM"},
{"content":{"body":"(instead of specifying Array specially here we should just freeze ArrayIterator :D )","m.mentions":{},"msgtype":"m.text"},"ts":1758565965605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cn0nJqWoKq2gHnIJEIpBXaU5hIT-z3G6SldqC5m7Uoc"},
{"content":{"body":"Oh I ran it in our CLI. Maybe it's different in the browser","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758566099308,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$BdZ83biT8LDpbAGYy9e5sLsjskH6Ez1M7LmBXOn70kE"},
{"content":{"body":"the current state of the art is people getting RangeErrors in production","m.mentions":{},"msgtype":"m.text"},"ts":1758566139686,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IbhODIcuvQgg89HMaCETaRjklzJQ2dRrvmc6ECl3Y_E"},
{"content":{"body":"@eemeli:mozilla.org https://github.com/DanielRosenwasser/proposal-array-push-all/issues/5","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli</a> https://github.com/DanielRosenwasser/proposal-array-push-all/issues/5","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1758566203829,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XP1g-_JgcSiucQBuAI7kDDvge0uCKkE3qmSZr3GhkQE"},
{"content":{"body":"they'll still do that, there's just an ergonomic way to do the right thing that their editor will suggest to them","format":"org.matrix.custom.html","formatted_body":"they&#39;ll still do that, there&#39;s just an ergonomic way to do the right thing that their editor will suggest to them","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IbhODIcuvQgg89HMaCETaRjklzJQ2dRrvmc6ECl3Y_E"}},"msgtype":"m.text"},"ts":1758566238497,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R-ppeqQpI81DXazuybOZhYsHtjgNEPW3b8Uxpc0W87c"},
{"content":{"body":"I'm on 17.6, which is quite old, because I refuse to update my computer because Apple keeps making the OS worse every time I update it","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$BdZ83biT8LDpbAGYy9e5sLsjskH6Ez1M7LmBXOn70kE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758566281672,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_sEvH2DoCfRdhrM5Ew7b7s-n7KrUUqaNKvosO5wsh-Q"},
{"content":{"body":"so it's reasonably likely there's a new optimization I'm missing","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$_sEvH2DoCfRdhrM5Ew7b7s-n7KrUUqaNKvosO5wsh-Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758566299927,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rrNprQM2pTjvKooUdCPoxI9KpzB-NaL0ABzEYRqgXck"},
{"content":{"body":"An infinite array!","m.mentions":{},"msgtype":"m.text"},"ts":1758566360498,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LSGabaDkl3gtUyeLjU_vyIMBWPcw90yBWz61UZTn8NI"},
{"content":{"body":"fwiw I would guess `pushFrom` would be web-compat, https://github.com/search?q=%28language%3Ajs+OR+language%3Ats%29+%22.pushFrom%28%22&type=code\n\n`group` had a conflict because it was a name you might put on other objects, and `flatten` had a conflict because it was an obvious name to use, but `pushFrom` is a pretty weird name to use unless you are following our language convention of \"from = iterable\"","format":"org.matrix.custom.html","formatted_body":"<p>fwiw I would guess <code>pushFrom</code> would be web-compat, https://github.com/search?q=%28language%3Ajs+OR+language%3Ats%29+%22.pushFrom%28%22&amp;type=code</p>\n<p><code>group</code> had a conflict because it was a name you might put on other objects, and <code>flatten</code> had a conflict because it was an obvious name to use, but <code>pushFrom</code> is a pretty weird name to use unless you are following our language convention of \"from = iterable\"</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758566442167,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KggPMXoyxCcYNL0Q_PnIoA8vQlniFkJzUGAT8gF8zx4"},
{"content":{"body":"If we optimize `ar.push(...ar2)`, we still have the issue with `ar.push(...ar2.values())` (or any other iterator generated over a large array)","format":"org.matrix.custom.html","formatted_body":"If we optimize <code>ar.push(...ar2)</code>, we still have the issue with <code>ar.push(...ar2.values())</code> (or any other iterator generated over a large array)","m.mentions":{},"msgtype":"m.text"},"ts":1758566457064,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XLcYD_N47C4wVbHO1eA0I5Jx9q72BzQEEYIkvickSNE"},
{"content":{"body":"I'm sure the spec already answers the question of mutating an array as it is iterated","format":"org.matrix.custom.html","formatted_body":"I&#39;m sure the spec already answers the question of mutating an array as it is iterated","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XLcYD_N47C4wVbHO1eA0I5Jx9q72BzQEEYIkvickSNE"}},"msgtype":"m.text"},"ts":1758566496907,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lPVXoluMJE4Z7xS29K-HYc6dwCn0If9m2RjKJiKLoFk"},
{"content":{"body":"That wasn't what my comment was about.","m.mentions":{},"msgtype":"m.text"},"ts":1758566516062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1CIgvyixU-bbuuKFNzah6IywLCmvI_fiOfMDZG2PWAA"},
{"content":{"body":"\".push(...arr) crashes but only on Suchandsuch browser\" is the worst-case scenario","m.mentions":{},"msgtype":"m.text"},"ts":1758566541373,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$ac5eDvRIFKwX8aYmbZ2HoJZ6q2sAHZupEil_M8Mksok"},
{"content":{"body":"I'm more stating that having engines work around `ar.push(...otherArray)` only solves the problem for arrays, not for arbitrary iterators.","format":"org.matrix.custom.html","formatted_body":"I'm more stating that having engines work around <code>ar.push(...otherArray)</code> only solves the problem for arrays, not for arbitrary iterators.","m.mentions":{},"msgtype":"m.text"},"ts":1758566564211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8OBvjjQ95uveQyx2WLdvBfjUPFHQ7dVee0uHNlnXwoQ"},
{"content":{"body":"I can't think of any optimizations that would have changed the behavior here remotely recently but maybe there's something","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$rrNprQM2pTjvKooUdCPoxI9KpzB-NaL0ABzEYRqgXck"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758566567326,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JahUaUvy0fKoj0zIdyodI2lBtqN50E38bsmFlaG4hLE"},
{"content":{"body":"* (ignore, matrix blip)","m.mentions":{},"m.new_content":{"body":"(ignore, matrix blip)","m.mentions":{"user_ids":["@searyanc:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9UpUgiRaPuIge0iy6-Nc-5WBVd-I8C7ZlvJh-FmfmOQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758566574587,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sYDgURqSHZ2XCsXWWHL2B_8MRyLI1hQCsjGzN0-JPkU"},
{"content":{"body":"It's version 26 now so you're way behind :P","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$JahUaUvy0fKoj0zIdyodI2lBtqN50E38bsmFlaG4hLE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758566596032,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$d_181Wd8vmbXNNcyCvhLBgFUXdpQi5MgfbKydSkAwXU"},
{"content":{"body":"Note that whether ... work doesn't depend only on which engine you are in, but also on how deep you are on the call stack","m.mentions":{},"msgtype":"m.text"},"ts":1758566733073,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UcERAI3OwegsvW7_n3R8bduQw_wJmrb9ANtwH1anlBQ"},
{"content":{"body":"* Note that whether ... works doesn't depend only on which engine you are in, but also on how deep you are on the call stack","m.mentions":{},"m.new_content":{"body":"Note that whether ... works doesn't depend only on which engine you are in, but also on how deep you are on the call stack","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UcERAI3OwegsvW7_n3R8bduQw_wJmrb9ANtwH1anlBQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758566738951,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sV_3QAJNRATrchm2p5jwa1xQJYKKWm6fJDULakhl8lA"},
{"content":{"body":"Would it be a better idea to change the spec that the limit for .push(...array) is removed or defined to a specific upper bound?","msgtype":"m.text"},"ts":1758566742442,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$jhIQL-rhpghY1ui0HeafqpYBI6HnHBlWCDRYgFdBs7g"},
{"content":{"body":"\"It should be straightforward and safe to add a large number of elements to an existing target array\"","m.mentions":{},"msgtype":"m.text"},"ts":1758566743385,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$HRcZWkxZufQdMOC7ltSBvETtYS09rYcqwU_MvlzeqPY"},
{"content":{"body":"there is no limit in the spec","m.mentions":{"user_ids":["@bridgear:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jhIQL-rhpghY1ui0HeafqpYBI6HnHBlWCDRYgFdBs7g"}},"msgtype":"m.text"},"ts":1758566757963,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-EFHpFEBy6_UJ5fsiP5G7BMqRwIfD9fPhClc-iebB4s"},
{"content":{"body":"* \"It should be straightforward and safe to add elements to an existing target array\"","m.mentions":{},"m.new_content":{"body":"\"It should be straightforward and safe to add elements to an existing target array\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HRcZWkxZufQdMOC7ltSBvETtYS09rYcqwU_MvlzeqPY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758566765908,"senderName":"Ryan Cavanaugh","senderId":"@searyanc:matrix.org","id":"$td746xnL8WU4dGYzfC5dm8tPZ5Rg2uu3hr57S0ly21E"},
{"content":{"body":"spec does not believe in stack size limitations","m.mentions":{},"msgtype":"m.text"},"ts":1758566767156,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lOlDu2YMjCTtFb_gpN4RXL3bd-FRrcamO2pfeJDsqZI"},
{"content":{"body":"> <@bakkot:matrix.org> there is no limit in the spec\n\nI meant to make it explicit that this should not happen in the spec","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-EFHpFEBy6_UJ5fsiP5G7BMqRwIfD9fPhClc-iebB4s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />there is no limit in the spec</blockquote></mx-reply>I meant to make it explicit that this should not happen in the spec","m.relates_to":{"m.in_reply_to":{"event_id":"$-EFHpFEBy6_UJ5fsiP5G7BMqRwIfD9fPhClc-iebB4s"}},"msgtype":"m.text"},"ts":1758566783516,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$oAs53hFrKwyMSkJHS7MDdpfeBK9gA3PHbhtOQuykQoA"},
{"content":{"body":"‚ûïÔ∏è also change the proposal name to reflect the problem statement before transferring to tc39-transfer","m.mentions":{},"msgtype":"m.text"},"ts":1758566803860,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HHiwtoWWAvje_6Xk4m_Be19jAEs1TT2dlfi-zOs4FaQ"},
{"content":{"body":"As far as how to handle `ar.push(...ar)` (or `ar.push(...ar.values())`), I would support that just exhausting resources and throwing rather than special casing, considering we also do that for `for (const e of ar) ar.push(e);`","format":"org.matrix.custom.html","formatted_body":"As far as how to handle <code>ar.push(...ar)</code> (or <code>ar.push(...ar.values())</code>), I would support that just exhausting resources and throwing rather than special casing, considering we also do that for <code>for (const e of ar) ar.push(e);</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758566804598,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BqzkfM__LLnTTwdk_TeECZa5Jta_ElCYTggffFk9mhA"},
{"content":{"body":"you can write down whatever you want but implementations are unlikely to start requiring unbounded hardware to run","m.mentions":{},"msgtype":"m.text"},"ts":1758566806701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zYDDq5iSg45OTw0Mr4U78hwYbVzbA6KcOeiw7zE77Go"},
{"content":{"body":"that is: there will always be a limit","m.mentions":{},"msgtype":"m.text"},"ts":1758566831957,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4ey1EpixNyWRFZlw6Xd-Qk7mDPKGzbu3j3cyD7HbfKw"},
{"content":{"body":"And there will never be a limit that is the right size for every job","m.mentions":{},"msgtype":"m.text"},"ts":1758566873089,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$cKh7_zmIdJtnAu_W0aA9M90ZaZJ_Raw6DatSHof3H6Q"},
{"content":{"body":"> <@bakkot:matrix.org> that is: there will always be a limit\n\nIt could be the array bound. That way, it would be consistent (while having an issue if the array already contains elements and would therefore overflow)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4ey1EpixNyWRFZlw6Xd-Qk7mDPKGzbu3j3cyD7HbfKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />that is: there will always be a limit</blockquote></mx-reply>It could be the array bound. That way, it would be consistent (while having an issue if the array already contains elements and would therefore overflow)","m.relates_to":{"m.in_reply_to":{"event_id":"$4ey1EpixNyWRFZlw6Xd-Qk7mDPKGzbu3j3cyD7HbfKw"}},"msgtype":"m.text"},"ts":1758567008511,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$q7XzlNy23BWrFMMchowXV8DwLrrDjUrCs4SjnfvANlY"},
{"content":{"body":"there's lots of JS implementations which run on less than 4gb of memory, so even that would be violated in practice","m.mentions":{},"msgtype":"m.text"},"ts":1758567149036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cnvqulEjuWUOOqqGZp2-Nrvie66_KV_5EGOR--ldtL4"},
{"content":{"body":"but yes, we could. in practice I suspect implementations would not want to rewrite their calling conventions to make that work","m.mentions":{},"msgtype":"m.text"},"ts":1758567163808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2UifnBpLRCuQ1GhGDkpvBCAKd7Icvo9T4_g7dccjcpg"},
{"content":{"body":"Zb Tenerowicz (ZTZ/naugtur): I think you have some option that turns `aaa` into monospace aaa. Could you try disabling it?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@naugtur:matrix.org\">Zb Tenerowicz (ZTZ/naugtur)</a>: I think you have some option that turns <code>aaa</code> into monospace aaa. Could you try disabling it?","m.mentions":{"user_ids":["@naugtur:matrix.org"]},"msgtype":"m.text"},"ts":1758567173703,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$IO6e0KshvUzsssx9rkDzWdh3uACatysjfh0XXtkfj7Q"},
{"content":{"body":"https://github.com/microsoft/TypeScript/issues/8240","m.mentions":{"user_ids":["@naugtur:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x8DWQEQrG9CBuLgX-PKwgFcdwVEWqweeN2QXHkEUiH8"}},"msgtype":"m.text"},"ts":1758567481206,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n1DUQkRGuFYXKlb_JB6TPenc3jSH_1T5jEuuI8ZpYoQ"},
{"content":{"body":"Rob Palmer (I had an <EOM> point of order). Can you ask for new note takers? Or, I see maybe it's not needed?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> (I had an &lt;EOM&gt; point of order). Can you ask for new note takers? Or, I see maybe it's not needed?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1758567794538,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$VprCjChBtqcvo3lfdfTcHRoENepzUALY6W5iyDbR6Gk"},
{"content":{"body":"For the record, this is false in SM. We collect spread-called arguments into an array (with a fast-path for spreading an existing dense array) before pushing them onto the stack. If we optimized Array.push to avoid stack overflow (which we already to with Math.min/max), that would fix the problem for arbitrary iterators, not just arrays.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8OBvjjQ95uveQyx2WLdvBfjUPFHQ7dVee0uHNlnXwoQ"}},"msgtype":"m.text"},"ts":1758568263458,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$1HSoCXcpgKMA0ZOtsaYmkzFn0_0RxoteCHoNxOK35us"},
{"content":{"body":"* For the record, this is false in SM. We collect spread-called arguments into an array (with a fast-path for spreading an existing dense array) before pushing them onto the stack. If we optimized Array.push to avoid stack overflow (which we already do with Math.min/max), that would fix the problem for arbitrary iterators, not just arrays.","m.mentions":{},"m.new_content":{"body":"For the record, this is false in SM. We collect spread-called arguments into an array (with a fast-path for spreading an existing dense array) before pushing them onto the stack. If we optimized Array.push to avoid stack overflow (which we already do with Math.min/max), that would fix the problem for arbitrary iterators, not just arrays.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1HSoCXcpgKMA0ZOtsaYmkzFn0_0RxoteCHoNxOK35us","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758568288909,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$Hxdi9ClXwm4EZWgkd0RfUKWMBs_L1weY8aTkijcJYdQ"},
{"content":{"body":"There are other builtins (Math.min/max, String.fromCharCode, ...) where similar problems arise. Adding a new variant for each of those seems unwieldy. I wonder if it would be sufficient to have a note listing specific functions that are expected to take a large number of arguments, with a Strong Recommendation that engines should consider optimizing them to avoid stack overflow.","m.mentions":{},"msgtype":"m.text"},"ts":1758568809890,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$cv3QLEuzZa4U0_kOVwoBA8iIAUf6uurCr6GK16S93CY"},
{"content":{"body":"fwiw I have actually been intending to pursue adding new variants for at least those specific functions","m.mentions":{},"msgtype":"m.text"},"ts":1758568878486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KVSPvT7olUNQdzCjZmtQJZbaESOXssuJiBVyWywKov8"},
{"content":{"body":"FWIW, this does throw if you change it to 200_000_000","m.mentions":{},"m.relates_to":{"event_id":"$acDNhaVHwwtCK8rFjAnLzVxyVRJRXGwlMkSVES5Ce60","is_falling_back":true,"m.in_reply_to":{"event_id":"$d_181Wd8vmbXNNcyCvhLBgFUXdpQi5MgfbKydSkAwXU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1758568919207,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$B3ANFpv2LZw8c83mZhc9FYy9IdARdLjo1wq6lgV2hr8"},
{"content":{"body":"* FWIW, this does throw if you change it to 200\\_000\\_000 for me too","format":"org.matrix.custom.html","formatted_body":"* FWIW, this does throw if you change it to 200_000_000 for me too","m.mentions":{},"m.new_content":{"body":"FWIW, this does throw if you change it to 200\\_000\\_000 for me too","format":"org.matrix.custom.html","formatted_body":"FWIW, this does throw if you change it to 200_000_000 for me too","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$B3ANFpv2LZw8c83mZhc9FYy9IdARdLjo1wq6lgV2hr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758568928840,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Cd8946VZH6sQatWKwGyzFrl5sJ7aaKLvt4X8M4qqOyc"},
{"content":{"body":"not Object.assign or the Function constructor or .bind, probably not String.prototype.concat, and I think that's the whole list?","m.mentions":{},"msgtype":"m.text"},"ts":1758569002040,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AUWfQclSYfaihqDjSi3rRuHMujTCfzXOxWSrvE3vKto"},
{"content":{"body":"* not Object.assign or the Function constructor or .bind/etc, probably not String.prototype.concat, and I think that's the whole list?","m.mentions":{},"m.new_content":{"body":"not Object.assign or the Function constructor or .bind/etc, probably not String.prototype.concat, and I think that's the whole list?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AUWfQclSYfaihqDjSi3rRuHMujTCfzXOxWSrvE3vKto","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758569012741,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W5WdTXPDk-CvomIOqEMnjfjryau-f19q0tBUzAXl-qU"},
{"content":{"body":"undecided on Math.hypot","m.mentions":{},"msgtype":"m.text"},"ts":1758569041252,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oFvYy3bal5fHtTqSs6h3s60Ip3nCrJXr-xo3KuEyNnY"},
{"content":{"body":"Mathieu Hofman: I'll need your help to validate if we're capturing what you are looking for, but we have [thenable instrumentation already](https://searchfox.org/firefox-main/rev/767c44c1cde821258288378998f4bb481bec8908/js/src/builtin/Promise.cpp#1416-1422,1480); -- the basic gist here being that -when- we look for \"then\" we track where the thenable came from; was it an own property, on a standard prototype, or on object.proto. Notably we [don't report for Promise.prototype.then](https://searchfox.org/firefox-main/source/js/src/builtin/Promise.cpp#1319-1351) ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: I'll need your help to validate if we're capturing what you are looking for, but we have <a href=\"https://searchfox.org/firefox-main/rev/767c44c1cde821258288378998f4bb481bec8908/js/src/builtin/Promise.cpp#1416-1422,1480\">thenable instrumentation already</a>; -- the basic gist here being that -when- we look for \"then\" we track where the thenable came from; was it an own property, on a standard prototype, or on object.proto. Notably we <a href=\"https://searchfox.org/firefox-main/source/js/src/builtin/Promise.cpp#1319-1351\">don't report for Promise.prototype.then</a>","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1758569240006,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$Lk1em-SbZ2kuug7pXdFFQ4sySZpD3FPzA-mcwyn29EI"},
{"content":{"body":"Reflect.ObjectIsNativePromise","m.mentions":{},"msgtype":"m.text"},"ts":1758569430697,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$ApDS7xemMeEYdD2bX20fgW_CB7PEBr23f-tBlZt4RLk"},
{"content":{"body":"I can't speak for other vendors, but from SM's point of view, if it's just this handful of functions, it would be a day or two of work to implement.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KVSPvT7olUNQdzCjZmtQJZbaESOXssuJiBVyWywKov8"}},"msgtype":"m.text"},"ts":1758569443587,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$K5eDXvZ95c83N5-X1fbXUPlj_zOIaDllsc-mK_KRbKQ"},
{"content":{"body":"I am actually not sure if we have precedent for such an optimization or if it would be a larger change to calling conventions in v8.","m.mentions":{},"msgtype":"m.text"},"ts":1758569502879,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$2EwRPNBJw1WKd-qleq-RofQ9WMh1rLklvjidR3m_gbk"},
{"content":{"body":"But in general it seems more invasive to add this as a blanket capability.","m.mentions":{},"msgtype":"m.text"},"ts":1758569565809,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$KtgMCPd-PEsuZsNJh12tgz_UtPqF5AimjtVLmzvn6Zc"},
{"content":{"body":"given thus far stack overflow is purely implementation defined","m.mentions":{},"msgtype":"m.text"},"ts":1758569609270,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$E21zvDDguaOREzxB54Wrfq7dGEjwdGafIFS0u8HsCzA"},
{"content":{"body":"What isThenable should be? just typeof p.then == \"function\" ?","m.mentions":{},"msgtype":"m.text"},"ts":1758569610192,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6I2PTiUP2cBP9aPG7ee1kOzVNydG_qZSceakaLvSH7k"},
{"content":{"body":"`p &&`, but yes","format":"org.matrix.custom.html","formatted_body":"<code>p &amp;&amp;</code>, but yes","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6I2PTiUP2cBP9aPG7ee1kOzVNydG_qZSceakaLvSH7k"}},"msgtype":"m.text"},"ts":1758569620280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FVielqqraxmOqaQBSEklua-2L0Ilzlpk8vW0a4RlMVA"},
{"content":{"body":"You mean it would be invasive in general to divert large variadic arguments to the heap? (I would assume so)","m.mentions":{},"msgtype":"m.text"},"ts":1758569621257,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$LwsRS08zZc5iCevZcso9hdCVyQrpVMmWMNwQstj59do"},
{"content":{"body":"Though, I suppose you might mean that in some specific cases, just not copying to the stack _or_ heap is an optimization that might work.","format":"org.matrix.custom.html","formatted_body":"Though, I suppose you might mean that in some specific cases, just not copying to the stack <em>or</em> heap is an optimization that might work.","m.mentions":{},"msgtype":"m.text"},"ts":1758569673894,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$CUjsL5PQ71j91MZtW7ExbS7nmi91PbKjXCJ7EIQhub0"},
{"content":{"body":"`typeof p === object && p !== null && typeof p.then == \"function\"`, primitives aren't thenable ","format":"org.matrix.custom.html","formatted_body":"<code>typeof p === object &amp;&amp; p !== null &amp;&amp; typeof p.then == \"function\"</code>, primitives aren't thenable","m.mentions":{},"msgtype":"m.text"},"ts":1758569691725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$53-DSBceVFWqrfy0pwyUS34Yn8D1WrLAQ-ILEH-knOM"},
{"content":{"body":"(this assumes that if someone puts `.then` on `document.all` then the computer will set itself on fire in self defense)","format":"org.matrix.custom.html","formatted_body":"(this assumes that if someone puts <code>.then</code> on <code>document.all</code> then the computer will set itself on fire in self defense)","m.mentions":{},"msgtype":"m.text"},"ts":1758569730597,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GYqpIj1b56F11uF2Y7cVdHTfdr4KBesxDfykd5EzRqw"},
{"content":{"body":"that is a possible implementation strategy, but I guess we would not spec it with these words. but rather something like \"should not fail if creating such an array does not fail\".","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LwsRS08zZc5iCevZcso9hdCVyQrpVMmWMNwQstj59do"}},"msgtype":"m.text"},"ts":1758569768136,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$3l-v4pXfxUqiEEV9JRYHJXZO0xWCeW7DYZkUhYXUde8"},
{"content":{"body":"but if you add that as a \"capability\" for calls it essentially means that every engine needs a generic implementation that can support that","m.mentions":{},"msgtype":"m.text"},"ts":1758569798264,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$3dvLSgIOWOycR8vwOUKKCGSLKkjc1UG9qwp8ViCthsw"},
{"content":{"body":"can we specify this?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GYqpIj1b56F11uF2Y7cVdHTfdr4KBesxDfykd5EzRqw"}},"msgtype":"m.text"},"ts":1758569811423,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$63YmUtt52lmTdlTpED55JbcfxgO8DzEvmH6c3M7DiHM"},
{"content":{"body":"* but if you add that as a \"capability\" for calls it essentially means that every engine needs a generic implementation that can support that. (and that is what I meant by invasive)","m.mentions":{},"m.new_content":{"body":"but if you add that as a \"capability\" for calls it essentially means that every engine needs a generic implementation that can support that. (and that is what I meant by invasive)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3dvLSgIOWOycR8vwOUKKCGSLKkjc1UG9qwp8ViCthsw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758569833780,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$KZCsAtL6akS8l-bKy5LmzEfC77Hnsi7B91NthL6we2s"},
{"content":{"body":":halt-and-catch-fire:","m.mentions":{},"msgtype":"m.text"},"ts":1758569854754,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KhexVZ0meh32PW1usIDaMeXTVM07cEqI0fNUcVtLKjw"},
{"content":{"body":"* `(typeof p === \"object\" || typeof === \"function\") && p !== null && typeof p.then == \"function\"`, primitives aren't thenable","format":"org.matrix.custom.html","formatted_body":"* <code>(typeof p === \"object\" || typeof === \"function\") &amp;&amp; p !== null &amp;&amp; typeof p.then == \"function\"</code>, primitives aren't thenable","m.mentions":{},"m.new_content":{"body":"`(typeof p === \"object\" || typeof === \"function\") && p !== null && typeof p.then == \"function\"`, primitives aren't thenable","format":"org.matrix.custom.html","formatted_body":"<code>(typeof p === \"object\" || typeof === \"function\") &amp;&amp; p !== null &amp;&amp; typeof p.then == \"function\"</code>, primitives aren't thenable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$53-DSBceVFWqrfy0pwyUS34Yn8D1WrLAQ-ILEH-knOM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758569871279,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SCbdAE5D98FMPxiEX6drWzgoWWl4hDCJysVtgQMs1zY"},
{"content":{"body":"sure - items with the isHTMLDDA internal slot can have a custom internal [[DefineOwnProperty]] that normatively requires the program to terminate if the key is \"then\", right?","m.mentions":{},"msgtype":"m.text"},"ts":1758569884975,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D7IUHDU-s28YXUepbGZmigJbsmp-B8A7l0w1vRh7nhQ"},
{"content":{"body":"* sure - items with the isHTMLDDA internal slot can have a custom internal \\[\\[DefineOwnProperty\\]\\] that normatively requires the program to terminate if the key is \"then\", right? :-p","format":"org.matrix.custom.html","formatted_body":"* sure - items with the isHTMLDDA internal slot can have a custom internal [[DefineOwnProperty]] that normatively requires the program to terminate if the key is &quot;then&quot;, right? :-p","m.mentions":{},"m.new_content":{"body":"sure - items with the isHTMLDDA internal slot can have a custom internal \\[\\[DefineOwnProperty\\]\\] that normatively requires the program to terminate if the key is \"then\", right? :-p","format":"org.matrix.custom.html","formatted_body":"sure - items with the isHTMLDDA internal slot can have a custom internal [[DefineOwnProperty]] that normatively requires the program to terminate if the key is &quot;then&quot;, right? :-p","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$D7IUHDU-s28YXUepbGZmigJbsmp-B8A7l0w1vRh7nhQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758569913089,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ByIi8_LvB8SNqTghv95rXVXmjOHIhCYwZRh2Dl7DT5I"},
{"content":{"body":"personally I actually like the idea of making `push(...x)` \"just work\". but I need to figure out if we would want the implementation.","format":"org.matrix.custom.html","formatted_body":"personally I actually like the idea of making <code>push(...x)</code> \"just work\". but I need to figure out if we would want the implementation.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$3dvLSgIOWOycR8vwOUKKCGSLKkjc1UG9qwp8ViCthsw"}},"msgtype":"m.text"},"ts":1758570237032,"senderName":"Olivier Fl√ºckiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$mqNAL74pi5xmBq3J__lr9IF2quxrC4SKrJxlKO7sicg"},
{"content":{"body":"I believe this is necessary but not sufficient. The case we're concerned about is when the `resolution` is a native promise. So basically we need the existing `GetThenValue` instrumentation, but also add a check after `.then` is found whether `IsPromise(resolution)` is true.  Only on those native promises, we're concerned with `.then` found that comes from an unexpected place.","format":"org.matrix.custom.html","formatted_body":"I believe this is necessary but not sufficient. The case we're concerned about is when the <code>resolution</code> is a native promise. So basically we need the existing <code>GetThenValue</code> instrumentation, but also add a check after <code>.then</code> is found whether <code>IsPromise(resolution)</code> is true.  Only on those native promises, we're concerned with <code>.then</code> found that comes from an unexpected place.","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Lk1em-SbZ2kuug7pXdFFQ4sySZpD3FPzA-mcwyn29EI"}},"msgtype":"m.text"},"ts":1758570518777,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0oQDwKjSNV93rm2P2lWm04l3tJF2HwgcxJcPl5NR5iA"},
{"content":{"body":"Ok. Let me open a bug -- I can't promise I'll get to this _shortly_ but we'll see if someone else (perhaps a volunteer) can do so","format":"org.matrix.custom.html","formatted_body":"Ok. Let me open a bug -- I can't promise I'll get to this <em>shortly</em> but we'll see if someone else (perhaps a volunteer) can do so","m.mentions":{},"msgtype":"m.text"},"ts":1758570582830,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$8iYr1GUN4UXoRU4TeUgNcrraYpSrhX3Nk1sp2B-Iid4"},
{"content":{"body":"Happy to add details to the issue. I assume we need new instrumentation for the `.constructor` check in `PromiseResolve` too","format":"org.matrix.custom.html","formatted_body":"Happy to add details to the issue. I assume we need new instrumentation for the <code>.constructor</code> check in <code>PromiseResolve</code> too","m.mentions":{},"msgtype":"m.text"},"ts":1758570698318,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1S4lyhezmnhRNkx9Yb7moQFwIHHmrc6NQmwQsMzXx-o"},
{"content":{"body":"I actually have to run unexpectedly, so I just dumped what I had here: if you could expand, we can see who can maybe pick this up: https://bugzilla.mozilla.org/show_bug.cgi?id=1990075 ","m.mentions":{},"msgtype":"m.text"},"ts":1758570794929,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$OQK9kv5wx4motXJZWsHDfgzN5KCZWdNptq-AXz_-k68"},
{"content":{"body":"Thank you very much! ","m.mentions":{},"msgtype":"m.text"},"ts":1758570805852,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$r9Ezcp40P7wLRGHf5BOcmrlZ4ZWxNOEOd_hbk5TCnSE"}
]