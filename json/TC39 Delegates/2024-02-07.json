[
{"content":{"body":"bakkot: I've run into this when working with non async/await code (i.e., working directly with `Promise`). ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I've run into this when working with non async/await code (i.e., working directly with <code>Promise</code>).","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707264005824,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X13yQvDr6rfMxITLTt56hgJvxIlJseAmxzvqLIdz0NM"},
{"content":{"body":"> <@littledan:matrix.org> it turned out it was fine\n\nlove to hear it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4ehQEiBLJftK36yLtC4iooSh0ThD9jEJLvosyp3cAT8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>it turned out it was fine</blockquote></mx-reply>love to hear it","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4ehQEiBLJftK36yLtC4iooSh0ThD9jEJLvosyp3cAT8"}},"msgtype":"m.text"},"ts":1707264028993,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wY3aYJqJKK7vkG34McWC6WoPAa9Nnw08KzjUx_auwCc"},
{"content":{"body":"shu: finally found the example that AMP hit: https://github.com/ampproject/amphtml/pull/15107","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: finally found the example that AMP hit: https://github.com/ampproject/amphtml/pull/15107","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707264082937,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Gf8g6t7CVHpBFULYvDhBXkiy0SYdwNKHfriAhBKo4FE"},
{"content":{"body":"A better (but maybe harder to answer) question, is how may people incorrectly write `Promise.resolve(f())`? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","format":"org.matrix.custom.html","formatted_body":"A better (but maybe harder to answer) question, is how may people incorrectly write <code>Promise.resolve(f())</code>? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","m.mentions":{},"msgtype":"m.text"},"ts":1707264105985,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KYPBW7n6YqEGAPbdwmFpvqXNwif1fEkqkU7U9XiVdNU"},
{"content":{"body":"After this, we forced all `Promise.resolve(fn())` to use `tryResolve(fn)` helper","format":"org.matrix.custom.html","formatted_body":"After this, we forced all <code>Promise.resolve(fn())</code> to use <code>tryResolve(fn)</code> helper","m.mentions":{},"msgtype":"m.text"},"ts":1707264112254,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$E1V6UYVqZKAq-yPEliKoHg5Yn5X35zxQCg5WjDfGvns"},
{"content":{"body":" * A better (but maybe harder to answer) question is, how may people incorrectly write `Promise.resolve(f())`? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","format":"org.matrix.custom.html","formatted_body":" * A better (but maybe harder to answer) question is, how may people incorrectly write <code>Promise.resolve(f())</code>? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","m.mentions":{},"m.new_content":{"body":"A better (but maybe harder to answer) question is, how may people incorrectly write `Promise.resolve(f())`? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","format":"org.matrix.custom.html","formatted_body":"A better (but maybe harder to answer) question is, how may people incorrectly write <code>Promise.resolve(f())</code>? This wouldn't fix those cases, but would give those developers something easier to reach for when they're looking for a solution.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KYPBW7n6YqEGAPbdwmFpvqXNwif1fEkqkU7U9XiVdNU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707264118170,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tmpM2ISCdSDz-IZdM0M-f24-iHhJN6Vq-_lRs9G5J6M"},
{"content":{"body":"is jest bad","m.mentions":{},"msgtype":"m.text"},"ts":1707264145080,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cYulbx-ewNLeyT-0JYtkw1KFJdKGyqM09iZXF_uRLDQ"},
{"content":{"body":"i feel like i've picked up some subtext somewhere that jest is bad, but unsure","m.mentions":{},"msgtype":"m.text"},"ts":1707264155617,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6bXVAojZANgOTvaPnuXkzf5OmiM14OAd4ji0KIgJ2cg"},
{"content":{"body":"jest is a good test framework that unfortunately does some very bad things.","m.mentions":{},"msgtype":"m.text"},"ts":1707264165910,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tkqykdusQBvi3sKt7i-OVTB0gom757z9zPw62rKPm7E"},
{"content":{"body":"i think jest is ok?","m.mentions":{},"msgtype":"m.text"},"ts":1707264167605,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qRoasaDxGFiEVktfUkAF_rluyj5Nu1J_1VJkLBda414"},
{"content":{"body":"I feel like I'm the only one in the world that still likes Jest","m.mentions":{},"msgtype":"m.text"},"ts":1707264167895,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HyR-wINrtQv1g_x_cYEaoGJ04iE1NlS7bQxfBV1Uw3w"},
{"content":{"body":"i don't use it often","m.mentions":{},"msgtype":"m.text"},"ts":1707264170411,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A0UyDzsPR_-CZ0bQUo-ZSjE4Wieu_xas17g6TyaUnbc"},
{"content":{"body":"> <@shuyuguo:matrix.org> is jest bad\n\nyou don't want to open this can of worms in this group ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cYulbx-ewNLeyT-0JYtkw1KFJdKGyqM09iZXF_uRLDQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is jest bad</blockquote></mx-reply>you don't want to open this can of worms in this group","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cYulbx-ewNLeyT-0JYtkw1KFJdKGyqM09iZXF_uRLDQ"}},"msgtype":"m.text"},"ts":1707264178832,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$MxrXA_RZn7oxp5Kou6wYD1uCHEy_KS4ZsGV6Zveh-KM"},
{"content":{"body":"Jest does Bad Things ^TM just because we haven't shadow realms yet","m.mentions":{},"msgtype":"m.text"},"ts":1707264191116,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QbBNbCHt8J1zNNZ8omhAHr_hHi5XIwDpV_4uyicmK78"},
{"content":{"body":"`Promise.resolve((async () => fn())())` ?","format":"org.matrix.custom.html","formatted_body":"<code>Promise.resolve((async () =&gt; fn())())</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1707264195156,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$SN4IF_CFT9WY3gOwYTNVOea-SOE1P0ivlRpr3T0fKdU"},
{"content":{"body":"So Node folks hate it","m.mentions":{},"msgtype":"m.text"},"ts":1707264196155,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pikiHHAL8ODW9s8zzKcgffJjD-PjB0BpZ1Drf44WVA4"},
{"content":{"body":"only some parts of Jest are bad...","m.mentions":{},"msgtype":"m.text"},"ts":1707264203065,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pb3FwzFmuSaw9FewU4UUTyNVuwdOgWWgXceDMGryd84"},
{"content":{"body":"node folks hate everything, i say this as a node folk","m.mentions":{},"msgtype":"m.text"},"ts":1707264209409,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VxnreHpLMmoGa5ZQb7gDsaFbG2s9CFnCLYnjnTFxGbw"},
{"content":{"body":"> <@haxjs:matrix.org> `Promise.resolve((async () => fn())())` ?\n\nOr just `(async () => fn())()`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SN4IF_CFT9WY3gOwYTNVOea-SOE1P0ivlRpr3T0fKdU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br><code>Promise.resolve((async () =&gt; fn())())</code> ?</blockquote></mx-reply>Or just <code>(async () =&gt; fn())()</code>.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SN4IF_CFT9WY3gOwYTNVOea-SOE1P0ivlRpr3T0fKdU"}},"msgtype":"m.text"},"ts":1707264217845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bbyZmwpy94S-R-eR6K8JRp9TBtDOd5fNNt2HsV2rYWU"},
{"content":{"body":"I think we should start using more the number of dependents as a metric, rather than the number of downloads, since it tells us how many people actually needed to write that code","m.mentions":{},"msgtype":"m.text"},"ts":1707264335396,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q4VSciLydw57IoOQVjPeWFNvN5Ox-U3NVjxxuHOPQvc"},
{"content":{"body":"A very popular library can still have shitty code","m.mentions":{},"msgtype":"m.text"},"ts":1707264351613,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RRkqBQc6Y-BRntG96n_e2suD8J6JHd66Wwsbz1K14fE"},
{"content":{"body":"i will continue to use whatever number best supports my position","m.mentions":{},"msgtype":"m.text"},"ts":1707264380633,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fMSxibIskq2iF5AUh6Ttrn8oRgOZRhBRjrLtES7nTPQ"},
{"content":{"body":"> <@devsnek:matrix.org> i will continue to use whatever number best supports my position\n\nNumber of dependencies","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fMSxibIskq2iF5AUh6Ttrn8oRgOZRhBRjrLtES7nTPQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i will continue to use whatever number best supports my position</blockquote></mx-reply>Number of dependencies","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fMSxibIskq2iF5AUh6Ttrn8oRgOZRhBRjrLtES7nTPQ"}},"msgtype":"m.text"},"ts":1707264392909,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rG3lbiZzutwdb8-Y9szIQhZY8hGgaKFp_3VieR_H2ak"},
{"content":{"body":"ljharb: npm apparently doesn't let you fetch more than 10 pages of dependents so this is useless but since I've written it now https://gist.github.com/bakkot/61a9bddb1c88155297f4c6f0880189f6","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: npm apparently doesn't let you fetch more than 10 pages of dependents so this is useless but since I've written it now https://gist.github.com/bakkot/61a9bddb1c88155297f4c6f0880189f6","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707264399632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0K9qycA8_AexZyMjIxlpr71h1iMszUq0Hq-ZsU-RWX8"},
{"content":{"body":"ljharb: Justin Ridgewell shoot i missed your message before i didn't give consensus if it came before","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> shoot i missed your message before i didn't give consensus if it came before","m.mentions":{"user_ids":["@ljharb:matrix.org","@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1707264436525,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y-eQg8kvyjNjiqsHMs5M17uuQuvBReG2gHBeV_Ns2e4"},
{"content":{"body":"that diff is convincing enough for me, stage 2 sgtm, if ljharb wanna come back at end of today","format":"org.matrix.custom.html","formatted_body":"that diff is convincing enough for me, stage 2 sgtm, if <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> wanna come back at end of today","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707264452499,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$baCzbVxSHwB_MjmPwzykiYr8WqS7axXvjltBzWUEsMc"},
{"content":{"body":"but not 2.7 yet because i think it probably needs to pass along ...arguments","m.mentions":{},"msgtype":"m.text"},"ts":1707264461754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rYUP3m_lGP0iYC0wSVhPHkLK87IPQ8YpkPnPuMjK7Cc"},
{"content":{"body":"> <@jridgewell:matrix.org> shu: finally found the example that AMP hit: https://github.com/ampproject/amphtml/pull/15107\n\nThis one? yeah, huh...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Gf8g6t7CVHpBFULYvDhBXkiy0SYdwNKHfriAhBKo4FE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: finally found the example that AMP hit: https://github.com/ampproject/amphtml/pull/15107</blockquote></mx-reply>This one? yeah, huh...","m.mentions":{"user_ids":["@jridgewell:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Gf8g6t7CVHpBFULYvDhBXkiy0SYdwNKHfriAhBKo4FE"}},"msgtype":"m.text"},"ts":1707264558993,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x-7JNhyikvqwrT77WSYuOTieEz6MnbZuGfoysioQcTY"},
{"content":{"body":"Justin Ridgewell: so wait actually now i'm reading MDN page for play()","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: so wait actually now i'm reading MDN page for play()","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1707264572296,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$C97kuxQ13ol7Wd2244H89U88yduHYirE064SFQFiuZ4"},
{"content":{"body":"it says if it can't play(), a rejected Promise is returned","m.mentions":{},"msgtype":"m.text"},"ts":1707264580161,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eFuyBHv5Z4ps9Msh30FKmQlrWBEJbcV2lIWaH-ZGZWg"},
{"content":{"body":"was the sync throw a Chrome bug or is MDN wrong?","m.mentions":{},"msgtype":"m.text"},"ts":1707264590163,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bYaYdQ4mipaw6-LX8AcahHTwfnwbWn1ZBVBQAC7xOfA"},
{"content":{"body":"If I remember correctly, `el.play()` used to sync return, then it was changed to return a promise, but it can still sync throw.","format":"org.matrix.custom.html","formatted_body":"If I remember correctly, <code>el.play()</code> used to sync return, then it was changed to return a promise, but it can still sync throw.","m.mentions":{},"msgtype":"m.text"},"ts":1707264600012,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yumhSz6aqO1xgWWGcMgqIZewDDFKV1aDK-YsGk_2z1A"},
{"content":{"body":"> <@shuyuguo:matrix.org> that diff is convincing enough for me, stage 2 sgtm, if ljharb wanna come back at end of today\n\nawesome, thanks. i'll ask about that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$baCzbVxSHwB_MjmPwzykiYr8WqS7axXvjltBzWUEsMc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that diff is convincing enough for me, stage 2 sgtm, if <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> wanna come back at end of today</blockquote></mx-reply>awesome, thanks. i'll ask about that","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$baCzbVxSHwB_MjmPwzykiYr8WqS7axXvjltBzWUEsMc"}},"msgtype":"m.text"},"ts":1707264604134,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Btk5nH64Ch-hCoDH5j26L1aVw-u90sb964QsHe3H8_g"},
{"content":{"body":"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play says rejected Promise","m.mentions":{},"msgtype":"m.text"},"ts":1707264610319,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F-sXZbbiXbW-w_27Hr3YDi7BlzE_bvVp5XINGlfDNQc"},
{"content":{"body":"okay if the most compelling argument is \"sometimes there are bugs and people do the bad thing\", i guess that's fine with me","m.mentions":{},"msgtype":"m.text"},"ts":1707264622629,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$achNl6k748wB8Du785wSuNZ7HBPpePX6avahrgl6B7E"},
{"content":{"body":"the cost for this is pretty trivial","m.mentions":{},"msgtype":"m.text"},"ts":1707264627909,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ar9szImn8tFUlO7nMiuQqznzahrvhRqB5yaI-DftSbk"},
{"content":{"body":"shu: https://github.com/ampproject/amphtml/pull/6083#discussion_r87054018","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: https://github.com/ampproject/amphtml/pull/6083#discussion_r87054018","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707264792142,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cH2nkIPfKuXrCJPZHupRY65P-21vOvyjDE7h6jd9DQ8"},
{"content":{"body":"I asked the exact same thing","m.mentions":{},"msgtype":"m.text"},"ts":1707264797452,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0UZMGiFwreCVp8ojhWPVGodWaKqndSBd4Fa2pLgvcfI"},
{"content":{"body":"so `zip` is `product` on iterator (in the type-theory sense). `sum` doesn't really make sense on sync iterators (you can do zip+flat but there's not much reason) but on async iterators `sum` totally works, as `AsyncIterator.merge` or `race` or something like that. I will probably propose that at some point","format":"org.matrix.custom.html","formatted_body":"so <code>zip</code> is <code>product</code> on iterator (in the type-theory sense). <code>sum</code> doesn't really make sense on sync iterators (you can do zip+flat but there's not much reason) but on async iterators <code>sum</code> totally works, as <code>AsyncIterator.merge</code> or <code>race</code> or something like that. I will probably propose that at some point","m.mentions":{},"msgtype":"m.text"},"ts":1707264887550,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bNBU09q74c_L51rAmjQC7VNA29GX4NiiWRTQwqatQ78"},
{"content":{"body":"Justin Ridgewell: cursed that just changed it, thanks for the knowledge","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: cursed that just changed it, thanks for the knowledge","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1707264963971,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J3QwBJPfUgqX5vdhuhnSOG6PwMlJ1D44ZueDfuYb1II"},
{"content":{"body":" * Justin Ridgewell: cursed that they just changed it, thanks for the knowledge","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: cursed that they just changed it, thanks for the knowledge","m.mentions":{},"m.new_content":{"body":"Justin Ridgewell: cursed that they just changed it, thanks for the knowledge","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: cursed that they just changed it, thanks for the knowledge","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J3QwBJPfUgqX5vdhuhnSOG6PwMlJ1D44ZueDfuYb1II","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707264971236,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3HX-iUzznxmah1CQX-MniOrTSn2Qo2QnJcb599aFzN0"},
{"content":{"body":"shu: https://github.com/tc39/proposal-promise-try/issues/9 btw for the passing arguments thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: https://github.com/tc39/proposal-promise-try/issues/9 btw for the passing arguments thing","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707265117233,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i98bVihC7Tb1hY8iJtfPaFHJL_cpOPfGqmeYUX8v7rc"},
{"content":{"body":"thanks","m.mentions":{},"msgtype":"m.text"},"ts":1707265168270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QLhUUJKRK02e56GdSkUXItxPch-AvvUg-nNWPa_LyKY"},
{"content":{"body":"> <@ljharb:matrix.org> shu: https://github.com/tc39/proposal-promise-try/issues/9 btw for the passing arguments thing\n\nok wait if you're ok with arrows why not just use `(async () => fn())()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i98bVihC7Tb1hY8iJtfPaFHJL_cpOPfGqmeYUX8v7rc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: https://github.com/tc39/proposal-promise-try/issues/9 btw for the passing arguments thing</blockquote></mx-reply>ok wait if you're ok with arrows why not just use <code>(async () =&gt; fn())()</code>","m.mentions":{"user_ids":["@ljharb:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i98bVihC7Tb1hY8iJtfPaFHJL_cpOPfGqmeYUX8v7rc"}},"msgtype":"m.text"},"ts":1707265202292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xwh5Mw3tNgMNPJ2iJzh5rUUQBM97Ldlk3nkY81eEGac"},
{"content":{"body":"am I missing something about that","m.mentions":{},"msgtype":"m.text"},"ts":1707265217194,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-ym643aYT1twt6I7uDj1XJ9zqF8E3wQ_5qDf87JSB_8"},
{"content":{"body":"i mean *i* am not personally ok with using syntax here","format":"org.matrix.custom.html","formatted_body":"i mean <em>i</em> am not personally ok with using syntax here","m.mentions":{},"msgtype":"m.text"},"ts":1707265228351,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4ys79WNtz68MSqHNZzABSwJ2xe4OcuzmsANloz-GQ7A"},
{"content":{"body":"sorry, that was re: your first comment in that thread","m.mentions":{},"msgtype":"m.text"},"ts":1707265249196,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UCGzpd52G5gYzYfvNuew7TkyQxeySe6f9bvXIpIyK2U"},
{"content":{"body":"`Promise.try(() => f(a, b, c))`","format":"org.matrix.custom.html","formatted_body":"<code>Promise.try(() =&gt; f(a, b, c))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1707265267235,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_YDq7x_COq8U_8OE7STKZN7ABW2k2D9VeGoToM2fF6g"},
{"content":{"body":"> <@bakkot:matrix.org> ok wait if you're ok with arrows why not just use `(async () => fn())()`\n\nyeah i'm okay with that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xwh5Mw3tNgMNPJ2iJzh5rUUQBM97Ldlk3nkY81eEGac?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>ok wait if you're ok with arrows why not just use <code>(async () =&gt; fn())()</code></blockquote></mx-reply>yeah i'm okay with that?","m.mentions":{"user_ids":["@bakkot:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xwh5Mw3tNgMNPJ2iJzh5rUUQBM97Ldlk3nkY81eEGac"}},"msgtype":"m.text"},"ts":1707265272962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UugenCbQUBS13kpMTyfR1wDdI5xpqlbsfdif6a6s3vo"},
{"content":{"body":"but i mean i'm willing to take other people's words for what forms they want to type","m.mentions":{},"msgtype":"m.text"},"ts":1707265282327,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2wVRLVMmsKsOUUYIaKvXc2FcTGh9_9ynWmdSnKN7t2I"},
{"content":{"body":"\"wrapping in an arrow function\" is how i spell \"wrapping in a function\" for people that can't ship that syntax :-p","m.mentions":{},"msgtype":"m.text"},"ts":1707265284124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OYeRNagQN0rVX--CIfm_gBvABfUPZ6tb-hRYEyIdrGM"},
{"content":{"body":"no deeper reason than that","m.mentions":{},"msgtype":"m.text"},"ts":1707265286089,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vgiLF4Y-1xQk_rpGh8qok63ZlqZ5M4yH01p6gQl4ZzY"},
{"content":{"body":" * \"wrapping in an arrow function\" is how i spell \"wrapping in a function\" for people that can't ship that syntax, like myself :-p","m.mentions":{},"m.new_content":{"body":"\"wrapping in an arrow function\" is how i spell \"wrapping in a function\" for people that can't ship that syntax, like myself :-p","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OYeRNagQN0rVX--CIfm_gBvABfUPZ6tb-hRYEyIdrGM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707265293406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rGLShGhpSW9kHbUiaZSIe4VyguRJab9FHLlRM45CYX8"},
{"content":{"body":"i think the readability/confusion thing still applies for an AIIFE tho, arrow or no","m.mentions":{},"msgtype":"m.text"},"ts":1707265318006,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3QSFB0DkqxvxDObu6FJVPas2AwL2m03oqrqaLeqfdbk"},
{"content":{"body":"which tbf is an argument in favor of passing arguments","m.mentions":{},"msgtype":"m.text"},"ts":1707265329382,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wxykRkcamm-8RWNC6MLENPkhUkiCS23Vg9ey8EcAqg0"},
{"content":{"body":"what if we let prefix `^` be a shorter way to write `()=>`? Could make a lot of these arrows shorter. [but it wouldn't scale to the async case]","format":"org.matrix.custom.html","formatted_body":"what if we let prefix <code>^</code> be a shorter way to write <code>()=&gt;</code>? Could make a lot of these arrows shorter. [but it wouldn't scale to the async case]","m.mentions":{},"msgtype":"m.text"},"ts":1707265348069,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EtN7WkcmCX3YbgPdeNbyMQENHLJBm0sEEtmuKG-2X_I"},
{"content":{"body":"however, this facility of setTimeout has proven very confusing for practitioners, so i'm not anxious to repeat it","m.mentions":{},"msgtype":"m.text"},"ts":1707265353106,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg"},
{"content":{"body":" * however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i'm not anxious to repeat it","m.mentions":{},"m.new_content":{"body":"however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i'm not anxious to repeat it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707265401496,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w2P2P2gnHpwjCuVBjCe66i2_zCnOPVHkMg7PLjxreYQ"},
{"content":{"body":"> <@littledan:matrix.org> what if we let prefix `^` be a shorter way to write `()=>`? Could make a lot of these arrows shorter. [but it wouldn't scale to the async case]\n\n`& &1` in elixir is like `(a) => a`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EtN7WkcmCX3YbgPdeNbyMQENHLJBm0sEEtmuKG-2X_I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>what if we let prefix <code>^</code> be a shorter way to write <code>()=&gt;</code>? Could make a lot of these arrows shorter. [but it wouldn't scale to the async case]</blockquote></mx-reply><code>&amp; &amp;1</code> in elixir is like <code>(a) =&gt; a</code>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EtN7WkcmCX3YbgPdeNbyMQENHLJBm0sEEtmuKG-2X_I"}},"msgtype":"m.text"},"ts":1707265402283,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A"},
{"content":{"body":"> <@ljharb:matrix.org> however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i'm not anxious to repeat it\n\n`setTimeout` is strange because it injects a timeout between the callback and the arguments. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i&#39;m not anxious to repeat it</blockquote></mx-reply><code>setTimeout</code> is strange because it injects a timeout between the callback and the arguments.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg"}},"msgtype":"m.text"},"ts":1707265437290,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I123Q1JbDDEcjd3JnfBYXYr1E9m4ruJCmEP5lcOSByA"},
{"content":{"body":"> <@ljharb:matrix.org> however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i'm not anxious to repeat it\n\nsetTimeout is confusing because\n- it also accepts a string\n- it accepts not only the fn and the params, but also the time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>however, this facility of setTimeout (passing args) has proven very confusing for practitioners, so i&#39;m not anxious to repeat it</blockquote></mx-reply><p>setTimeout is confusing because</p>\n<ul>\n<li>it also accepts a string</li>\n<li>it accepts not only the fn and the params, but also the time</li>\n</ul>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sHIo65ErFjmEyoWqSKFrPDzOSDb5wTOH45e76BFgZkg"}},"msgtype":"m.text"},"ts":1707265437297,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KdsA7iB43HbAoTXXPaFh_PQDJzYCgmjn4OcXedy9QhE"},
{"content":{"body":"i think arrow functions and bind are both better solutions than making everything that takes a callback also accept arguments somewhere","m.mentions":{},"msgtype":"m.text"},"ts":1707265477433,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GSbeuIMEbC0JWup647N3vgG3UFk9mY09MnfrDfruzmc"},
{"content":{"body":"> <@devsnek:matrix.org> `& &1` in elixir is like `(a) => a`\n\nhttps://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have `+> %` mean `x => x`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><code>&amp; &amp;1</code> in elixir is like <code>(a) =&gt; a</code></blockquote></mx-reply>https://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have <code>+&gt; %</code> mean <code>x =&gt; x</code>.","m.mentions":{"user_ids":["@devsnek:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A"}},"msgtype":"m.text"},"ts":1707265482395,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$y7NBqb5mtWdC-t_fJTtfRW6HEEZ_LzOiNJDNTitDaS4"},
{"content":{"body":"For setTimeout, there's a potentially noticeable difference between `setTimeout(f, 1000, a, b, c)` and `setTimeout(()=>f(a,b,c), 1000)`, which is that a/b/c are evaluated eagerly or late.","format":"org.matrix.custom.html","formatted_body":"For setTimeout, there's a potentially noticeable difference between <code>setTimeout(f, 1000, a, b, c)</code> and <code>setTimeout(()=&gt;f(a,b,c), 1000)</code>, which is that a/b/c are evaluated eagerly or late.","m.mentions":{},"msgtype":"m.text"},"ts":1707265482441,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DJ4zZedjFQ5EAAmfuj95knd3l1OB6ZZ2WEN6niZcgeA"},
{"content":{"body":"accepting a string is the way PHP and god intended","m.mentions":{},"msgtype":"m.text"},"ts":1707265485873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TQhMeh5rqElOfVSb1SIAhfTtRCSeQc19wHI_wYBU5-o"},
{"content":{"body":"There's no such difference in Promise.try()","m.mentions":{},"msgtype":"m.text"},"ts":1707265494006,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iUgIatgP3aLNPZIMtUfY010gFbnoZZcjPyXiXGr63Ys"},
{"content":{"body":"> <@devsnek:matrix.org> `& &1` in elixir is like `(a) => a`\n\n * https://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have `+> %` mean `x => x`.\nEr, meant to reply to littledan there.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><code>&amp; &amp;1</code> in elixir is like <code>(a) =&gt; a</code></blockquote></mx-reply> * https://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have <code>+&gt; %</code> mean <code>x =&gt; x</code>.<br>Er, meant to reply to <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> there.","m.mentions":{},"m.new_content":{"body":"https://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have `+> %` mean `x => x`.\nEr, meant to reply to littledan there.","format":"org.matrix.custom.html","formatted_body":"https://github.com/tc39/proposal-pipeline-operator/blob/main/README.md#tacit-unary-function-application-syntax would cover this and have <code>+&gt; %</code> mean <code>x =&gt; x</code>.<br>Er, meant to reply to <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> there.","m.mentions":{"user_ids":["@devsnek:matrix.org","@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$y7NBqb5mtWdC-t_fJTtfRW6HEEZ_LzOiNJDNTitDaS4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707265499208,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$kSz96X5R2jvz54iRxJWOaDvMJ9Yo79yf83RGrLCbNJo"},
{"content":{"body":"> <@devsnek:matrix.org> `& &1` in elixir is like `(a) => a`\n\nAnd we already have partial application at stage 1 if we want to make arrows shorter.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><code>&amp; &amp;1</code> in elixir is like <code>(a) =&gt; a</code></blockquote></mx-reply>And we already have partial application at stage 1 if we want to make arrows shorter.","m.mentions":{"user_ids":["@devsnek:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$R8ONo239MFdZeSO8Qfi2kINAdgPerCyQGlBRuZ6I03A"}},"msgtype":"m.text"},"ts":1707265507300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yI6zkiG72Q5CeDBl1RcjoJ8eIFUFE_THgxsmr_RHd34"},
{"content":{"body":"what is going on with matrix","m.mentions":{},"msgtype":"m.text"},"ts":1707265512815,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qhYKyepF4bPZuonP2k4oe8zcj_8JMngpJ6Uo5n9MzVQ"},
{"content":{"body":"i'm seeing like, decoherence","m.mentions":{},"msgtype":"m.text"},"ts":1707265518186,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QAFETNtWThO2TRJJueWlfXeGRrUThIjptxc1WFkJT0Q"},
{"content":{"body":"Explici t support","msgtype":"m.text"},"ts":1707265563261,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qONQVLNl-anhyffaV-_UQjOhF9rTUvJW7SMS8swyJWM"},
{"content":{"body":"Can’t talk","msgtype":"m.text"},"ts":1707265578686,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pJj9vOocRsyUqvBmJrwMF2idSBXA7vkl7z1PczjSj_U"},
{"content":{"body":"who was i talking to earlier about discord message logs","m.mentions":{},"msgtype":"m.text"},"ts":1707265592182,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$z-6N5ilbDdMA7HQG1ef4Ts2wIkImXAQWfcOqenPkmEo"},
{"content":{"body":"> <@devsnek:matrix.org> i think arrow functions and bind are both better solutions than making everything that takes a callback also accept arguments somewhere\n\nWhat are your thoughts on https://github.com/tc39/proposal-partial-application?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GSbeuIMEbC0JWup647N3vgG3UFk9mY09MnfrDfruzmc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think arrow functions and bind are both better solutions than making everything that takes a callback also accept arguments somewhere</blockquote></mx-reply>What are your thoughts on https://github.com/tc39/proposal-partial-application?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GSbeuIMEbC0JWup647N3vgG3UFk9mY09MnfrDfruzmc"}},"msgtype":"m.text"},"ts":1707265695364,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gyikiDsTH428HDeELUMJKFuV1rtChzX02FRWQRcsX6k"},
{"content":{"body":"> <@rbuckton:matrix.org> What are your thoughts on https://github.com/tc39/proposal-partial-application?\n\nneutral to slightly negative","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gyikiDsTH428HDeELUMJKFuV1rtChzX02FRWQRcsX6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What are your thoughts on https://github.com/tc39/proposal-partial-application?</blockquote></mx-reply>neutral to slightly negative","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gyikiDsTH428HDeELUMJKFuV1rtChzX02FRWQRcsX6k"}},"msgtype":"m.text"},"ts":1707265717409,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6k6GSk9rizr4Hyq3A4szb92atPCGFm4jwFOBw4XzYv4"},
{"content":{"body":"i don't write javascript in a super fp heavy way","m.mentions":{},"msgtype":"m.text"},"ts":1707265726443,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aqfMWiob0fThJdYNaLVbCD7ooZNrxN7KXgkzRFIRFlA"},
{"content":{"body":"That's fair. I'm still planning on coming back to that one at some point. I admit it paired far better with F#-style pipelines, but I still think it has value.","m.mentions":{},"msgtype":"m.text"},"ts":1707265841881,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5X4AAJ6FoIfaXHVPGTRHRrZaKgMfk8VFgMAayBRm2io"},
{"content":{"body":"Feedback, someone needs to turn off a mic","m.mentions":{},"msgtype":"m.text"},"ts":1707266151192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JOueWG9rG9mFCP-vydrWNH3_1uNBMCFBjBBLNc4wN_c"},
{"content":{"body":"Did I disappear from the queue? ","m.mentions":{},"msgtype":"m.text"},"ts":1707266275248,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KSHWLsC2U6IG8OGeLIvdVBqmDlDQ_G1ImmRR4gQUnns"},
{"content":{"body":"jschoi: refresh","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: refresh","m.mentions":{"user_ids":["@jschoi:matrix.org"]},"msgtype":"m.text"},"ts":1707266291756,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uKjJQUoCU0vRg01Ep0mDUjVrWs42f7A6BeXdNVGZ4WU"},
{"content":{"body":"> <@jschoi:matrix.org> Did I disappear from the queue?\n\nI see you as the next topic on the queue","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KSHWLsC2U6IG8OGeLIvdVBqmDlDQ_G1ImmRR4gQUnns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Did I disappear from the queue? </blockquote></mx-reply>I see you as the next topic on the queue","m.mentions":{"user_ids":["@jschoi:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KSHWLsC2U6IG8OGeLIvdVBqmDlDQ_G1ImmRR4gQUnns"}},"msgtype":"m.text"},"ts":1707266301233,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jmWSPzzzx2fHW7Jm6QI6vijtrEksI3DDNCrryfzCHDs"},
{"content":{"body":"isn't it typed differently because it's not representable as an integer?","m.mentions":{},"msgtype":"m.text"},"ts":1707266386998,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vxYWAKnmVaP_NRNJVheVUMP8l-iAMmZz9F3NF18A8Bk"},
{"content":{"body":"ye","m.mentions":{},"msgtype":"m.text"},"ts":1707266405953,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$RpAmuHdFkjQZl4sqqTH79W_RvhAAyvwPwGTLdeNqmPA"},
{"content":{"body":"the best thing is in v8 there's a parameter you have to pass when converting where you explicitly opt into checking for -0 or not","m.mentions":{},"msgtype":"m.text"},"ts":1707266452747,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$RIm8uQqd_iLeZvoyArOLtcT1T1hrHy9oEQykOE8FCAw"},
{"content":{"body":"surely no bugs have ever come of this 😄","m.mentions":{},"msgtype":"m.text"},"ts":1707266463072,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lhDEYTWWdkEgqNmrYsBPMYur2-Rj1MgnjQLfykwD7ME"},
{"content":{"body":"> <@littledan:matrix.org> isn't it typed differently because it's not representable as an integer?\n\nyeah that sounds right","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vxYWAKnmVaP_NRNJVheVUMP8l-iAMmZz9F3NF18A8Bk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>isn&#39;t it typed differently because it&#39;s not representable as an integer?</blockquote></mx-reply>yeah that sounds right","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vxYWAKnmVaP_NRNJVheVUMP8l-iAMmZz9F3NF18A8Bk"}},"msgtype":"m.text"},"ts":1707266474793,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OpAbYenK0u2EPXP59bap1uY40QSD9Vg80WsM7N49YYo"},
{"content":{"body":"I understand the issue of -0, but I don't think it should be considered in Math.sum proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1707266492249,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$VIAG5bG2tOsgRYgmq4WEjGG49CjxJozKLpjKZjZpoTA"},
{"content":{"body":"I'd need a stronger argument to convince me to return +0 when passed an empty input","m.mentions":{},"msgtype":"m.text"},"ts":1707266532259,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QQf_pv6G8GO5LN_9JIpdBdEoc5KZD1JG3VsuroFDUCs"},
{"content":{"body":"hax (HE Shi-Jun): in which direction?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">hax (HE Shi-Jun)</a>: in which direction?","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"msgtype":"m.text"},"ts":1707266540563,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$B6oMjDFDwPZSCkGrzS7I7PinjuXFW5AdUXIR6Cs5vEI"},
{"content":{"body":"Michael Ficarra: well it's confusing!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: well it's confusing!","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1707266545095,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FtLuN7G5vXFSJf3oOjz_O9ghVc328pSXv0YnggTP9C4"},
{"content":{"body":"wait why wouldn't empty input produce NaN","m.mentions":{},"msgtype":"m.text"},"ts":1707266558049,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$50yREVKCna2Z2czMfIgHGA3e_zzORex6xPVTB_gW5sI"},
{"content":{"body":"i'd want to hear from someone who knows how binary64 works on whether its problematic. if it isn't, we should do +0","m.mentions":{},"msgtype":"m.text"},"ts":1707266574350,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WI2GlVnyRc3Y1MedONzR0p3JqkwOjHUcbF-XxlP9bCY"},
{"content":{"body":"shu: it toStrings as 0!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: it toStrings as 0!","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707266577824,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UYrQqc9KMtD423WtyrnjX3fWLUNAq_b0Hi3uTFLf3PQ"},
{"content":{"body":"> <@ljharb:matrix.org> wait why wouldn't empty input produce NaN\n\nSo that `sum(...arr)` and `arr[0] + sum(..arr.splice(1))` do the same thing for non-empty arr :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$50yREVKCna2Z2czMfIgHGA3e_zzORex6xPVTB_gW5sI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>wait why wouldn&#39;t empty input produce NaN</blockquote></mx-reply>So that <code>sum(...arr)</code> and <code>arr[0] + sum(..arr.splice(1))</code> do the same thing for non-empty arr :)","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$50yREVKCna2Z2czMfIgHGA3e_zzORex6xPVTB_gW5sI"}},"msgtype":"m.text"},"ts":1707266594564,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$67FMudY4os2bKejdlcj0w0LhGOOPKsKiKtvxfVfYSbk"},
{"content":{"body":"they wouldn't anyways because of the current slide","m.mentions":{},"msgtype":"m.text"},"ts":1707266615831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cP1VCWG94JAiDV3vLpxxiLz416mNBLLeBJkAFiojgvM"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> So that `sum(...arr)` and `arr[0] + sum(..arr.splice(1))` do the same thing for non-empty arr :)\n\nOh actually, with Kevin's algorithm this isn't trye","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$67FMudY4os2bKejdlcj0w0LhGOOPKsKiKtvxfVfYSbk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>So that <code>sum(...arr)</code> and <code>arr[0] + sum(..arr.splice(1))</code> do the same thing for non-empty arr :)</blockquote></mx-reply>Oh actually, with Kevin's algorithm this isn't trye","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$67FMudY4os2bKejdlcj0w0LhGOOPKsKiKtvxfVfYSbk"}},"msgtype":"m.text"},"ts":1707266618300,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$H1ttZ1e93sfP6fHLCWgEr7RGWfleDSgsKk6xRzoPIiw"},
{"content":{"body":" * they wouldn't anyways because of the current slide, right?","m.mentions":{},"m.new_content":{"body":"they wouldn't anyways because of the current slide, right?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cP1VCWG94JAiDV3vLpxxiLz416mNBLLeBJkAFiojgvM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707266619552,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5OgDNFmY8BhBuQ6dumbpLAoMux8awaS_balUtIL-BsU"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> So that `sum(...arr)` and `arr[0] + sum(..arr.splice(1))` do the same thing for non-empty arr :)\n\n * Oh actually, with Kevin's algorithm this isn't true","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$67FMudY4os2bKejdlcj0w0LhGOOPKsKiKtvxfVfYSbk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>So that <code>sum(...arr)</code> and <code>arr[0] + sum(..arr.splice(1))</code> do the same thing for non-empty arr :)</blockquote></mx-reply> * Oh actually, with Kevin's algorithm this isn't true","m.mentions":{},"m.new_content":{"body":"Oh actually, with Kevin's algorithm this isn't true","format":"org.matrix.custom.html","formatted_body":"Oh actually, with Kevin's algorithm this isn't true","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$H1ttZ1e93sfP6fHLCWgEr7RGWfleDSgsKk6xRzoPIiw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707266621841,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HnSCD9hQki3E0qoWrBq8_AG7ZQZXuOQXkiGiI4VZmaw"},
{"content":{"body":"`let getNegativeZero = () => Math.sum([])` please don't break my code","format":"org.matrix.custom.html","formatted_body":"<code>let getNegativeZero = () =&gt; Math.sum([])</code> please don't break my code","m.mentions":{},"msgtype":"m.text"},"ts":1707266623753,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gtl-JAjWJ616-1bFeivLun8mNbX40-G0LTLMR2OPJl4"},
{"content":{"body":"Yeah good point","m.mentions":{},"msgtype":"m.text"},"ts":1707266625052,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gE3fJtuPlJIRiHZuy-tlKLznhbuI6fwhq8MB-rKP-5A"},
{"content":{"body":" * Yeah good point jordan","m.mentions":{},"m.new_content":{"body":"Yeah good point jordan","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gE3fJtuPlJIRiHZuy-tlKLznhbuI6fwhq8MB-rKP-5A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707266633251,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kS5Lgw34dlimCIDdPJpPi_33nM_D1_UWnehEuEAR-OA"},
{"content":{"body":"this is IEEE floats, math and real numbers have nothing to do with anything. \"the sum of nothing\" can be whatever we want","m.mentions":{},"msgtype":"m.text"},"ts":1707266642933,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QqKFYqEM8qrSnou-AXtjSW4rQ_NTcBr1VKGsI65C0NQ"},
{"content":{"body":"> <@ljharb:matrix.org> this is IEEE floats, math and real numbers have nothing to do with anything. \"the sum of nothing\" can be whatever we want\n\n`Math.sum([]) === 1`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QqKFYqEM8qrSnou-AXtjSW4rQ_NTcBr1VKGsI65C0NQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>this is IEEE floats, math and real numbers have nothing to do with anything. &quot;the sum of nothing&quot; can be whatever we want</blockquote></mx-reply><code>Math.sum([]) === 1</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QqKFYqEM8qrSnou-AXtjSW4rQ_NTcBr1VKGsI65C0NQ"}},"msgtype":"m.text"},"ts":1707266658415,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gap_-OHRZlaEc0D2aUX_yysfyJCvdqe1Nqc4X8qFE_s"},
{"content":{"body":"like is there maybe some implication if you do `Math.sum(Math.sum(x), y)`?","format":"org.matrix.custom.html","formatted_body":"like is there maybe some implication if you do <code>Math.sum(Math.sum(x), y)</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1707266666487,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nbqzArKucrO7EKYkknjZNL4OIR3IRTdWrjtwmmKV8X0"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'd need a stronger argument to convince me to return +0 when passed an empty input\n\ni'm hearing you like exploits","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QQf_pv6G8GO5LN_9JIpdBdEoc5KZD1JG3VsuroFDUCs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I&#39;d need a stronger argument to convince me to return +0 when passed an empty input</blockquote></mx-reply>i'm hearing you like exploits","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QQf_pv6G8GO5LN_9JIpdBdEoc5KZD1JG3VsuroFDUCs"}},"msgtype":"m.text"},"ts":1707266686532,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h7bKg_xCU9m8xUqqGGCsAFC7G04NN1t-0RGcWhuv7X8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> `Math.sum([]) === 1`\n\ni mean we can all point to dumb things in JS :-p doesn't mean we have to repeat the mistakes in `sumExact`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gap_-OHRZlaEc0D2aUX_yysfyJCvdqe1Nqc4X8qFE_s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><code>Math.sum([]) === 1</code></blockquote></mx-reply>i mean we can all point to dumb things in JS :-p doesn't mean we have to repeat the mistakes in <code>sumExact</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gap_-OHRZlaEc0D2aUX_yysfyJCvdqe1Nqc4X8qFE_s"}},"msgtype":"m.text"},"ts":1707266686649,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iE8PV5hGNTYO7kHVoWysKTVt0RWOLDYB4aXz8hHJzYo"},
{"content":{"body":"or use it in other random places","m.mentions":{},"msgtype":"m.text"},"ts":1707266689721,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eI1lH0IIYe7pOGAoxBuM7m1-0J0_1uwnDAh3cTShSgc"},
{"content":{"body":"> <@shuyuguo:matrix.org> hax (HE Shi-Jun): in which direction?\n\nI mean I feel -0 issue is irrelevant.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B6oMjDFDwPZSCkGrzS7I7PinjuXFW5AdUXIR6Cs5vEI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@haxjs:matrix.org\">hax (HE Shi-Jun)</a>: in which direction?</blockquote></mx-reply>I mean I feel -0 issue is irrelevant.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$B6oMjDFDwPZSCkGrzS7I7PinjuXFW5AdUXIR6Cs5vEI"}},"msgtype":"m.text"},"ts":1707266741246,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$3SAf9J5ST6-YGz3wZyAiYliHdYxuBp3G0KNz2XPOmHc"},
{"content":{"body":"python also implicitly has ints in places tho","m.mentions":{},"msgtype":"m.text"},"ts":1707266743259,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DaZSO2N7t1lOv2gWKXpp4CxkuY_SevYyiAa5XuPRzXA"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'm hearing you like exploits\n\nthis doesn't prevent -0 from flowing to the wrong place *intentionally*","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h7bKg_xCU9m8xUqqGGCsAFC7G04NN1t-0RGcWhuv7X8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i'm hearing you like exploits</blockquote></mx-reply>this doesn't prevent -0 from flowing to the wrong place <em>intentionally</em>","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$h7bKg_xCU9m8xUqqGGCsAFC7G04NN1t-0RGcWhuv7X8"}},"msgtype":"m.text"},"ts":1707266760789,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iKLhiHhoOdynnckw63l2m44Obd4XpeePb0iEyNK_798"},
{"content":{"body":"hax (HE Shi-Jun): i have already said why it's not irrelevant to v8","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">hax (HE Shi-Jun)</a>: i have already said why it's not irrelevant to v8","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"msgtype":"m.text"},"ts":1707266762221,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_vYG50QglNmw1ijAl_QlcUGywULMDej20jgcA1y3zW8"},
{"content":{"body":"> <@michaelficarra:matrix.org> this doesn't prevent -0 from flowing to the wrong place *intentionally*\n\nit's about minimizing surface, not eliminating surface","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iKLhiHhoOdynnckw63l2m44Obd4XpeePb0iEyNK_798?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>this doesn't prevent -0 from flowing to the wrong place <em>intentionally</em></blockquote></mx-reply>it's about minimizing surface, not eliminating surface","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iKLhiHhoOdynnckw63l2m44Obd4XpeePb0iEyNK_798"}},"msgtype":"m.text"},"ts":1707266774417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kWXRecy19PQfLEmRh31lIkgsBYLzI_8WiWEBjtNghGo"},
{"content":{"body":"yeah but that's no the surface","m.mentions":{},"msgtype":"m.text"},"ts":1707266793275,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_P72tCveNzHx7ogtU7DkxQa5HjjzlTXwOK_Dar8Raac"},
{"content":{"body":" * yeah but that's not the surface","m.mentions":{},"m.new_content":{"body":"yeah but that's not the surface","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_P72tCveNzHx7ogtU7DkxQa5HjjzlTXwOK_Dar8Raac","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707266801656,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hEidCClrIXttYmXZj_Bpoe7_e7sfeJkwbzqj3ighSGQ"},
{"content":{"body":"manual inlines in the JIT for builtins is a surface","m.mentions":{},"msgtype":"m.text"},"ts":1707266812608,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yQ7QooovhNzvzkjB7BpOpfFgIkJtfiE6FHI2XOiRUMk"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'm hearing you like exploits\n\nI don't find this convincing here because -0 is already in the language, and returing it from a new function just adds more places to be careful by a limited number (in the places where you are inlining this built-in). \n\nAnd now we are explicitly aware about this -0, it could be even be explicitly called out in the spec by saying _why_ we return it so that implementers don't miss it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h7bKg_xCU9m8xUqqGGCsAFC7G04NN1t-0RGcWhuv7X8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i'm hearing you like exploits</blockquote></mx-reply><p>I don't find this convincing here because -0 is already in the language, and returing it from a new function just adds more places to be careful by a limited number (in the places where you are inlining this built-in).</p>\n<p>And now we are explicitly aware about this -0, it could be even be explicitly called out in the spec by saying <em>why</em> we return it so that implementers don't miss it.</p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$h7bKg_xCU9m8xUqqGGCsAFC7G04NN1t-0RGcWhuv7X8"}},"msgtype":"m.text"},"ts":1707266848494,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GlhCLCW3_BIN8Hc7YDazewqDEkIc1WUZZunptoJvODQ"},
{"content":{"body":"Otoh, Jordan's observation made me less storngly in favor of -0","m.mentions":{},"msgtype":"m.text"},"ts":1707266861019,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Wjw1-YsS95Yqv_9dxHRCKPiBetrkfoSYmCMSenZwGno"},
{"content":{"body":"Me too Kevin, me too :P","m.mentions":{},"msgtype":"m.text"},"ts":1707266865999,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$lwoy2RWbiLh7bGZ3Vx4CIWKV2Kbg9bakOBLYmxIoL6s"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I don't find this convincing here because -0 is already in the language, and returing it from a new function just adds more places to be careful by a limited number (in the places where you are inlining this built-in). \n> \n> And now we are explicitly aware about this -0, it could be even be explicitly called out in the spec by saying _why_ we return it so that implementers don't miss it.\n\nyou don't find what i said about manual inlines convincing because we can be more vigilant?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GlhCLCW3_BIN8Hc7YDazewqDEkIc1WUZZunptoJvODQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>I don't find this convincing here because -0 is already in the language, and returing it from a new function just adds more places to be careful by a limited number (in the places where you are inlining this built-in).</p>\n<p>And now we are explicitly aware about this -0, it could be even be explicitly called out in the spec by saying <em>why</em> we return it so that implementers don't miss it.</p>\n</blockquote></mx-reply>you don't find what i said about manual inlines convincing because we can be more vigilant?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GlhCLCW3_BIN8Hc7YDazewqDEkIc1WUZZunptoJvODQ"}},"msgtype":"m.text"},"ts":1707266885431,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bg54VEFMzXcec440ENau-LDczUlYMo9t6Rjhh3qTK8o"},
{"content":{"body":"For additional reference, C#'s `Enumerable.Sum` also returns positive zero for an empty list.","format":"org.matrix.custom.html","formatted_body":"For additional reference, C#'s <code>Enumerable.Sum</code> also returns positive zero for an empty list.","m.mentions":{},"msgtype":"m.text"},"ts":1707266897635,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8vpg5jYiq4TWpZQnnCacf8kF8YoQVfSrn2Snobda3Y0"},
{"content":{"body":"`parseInt('-0')` oh no exploits","format":"org.matrix.custom.html","formatted_body":"<code>parseInt('-0')</code> oh no exploits","m.mentions":{},"msgtype":"m.text"},"ts":1707266898952,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tu0qGF-QQ-tvna2qS-OJTIDghOzUX423PMwWUM2w7zE"},
{"content":{"body":"i mean can i hear a positive argument for why you want it to be -0","m.mentions":{},"msgtype":"m.text"},"ts":1707266904431,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8W6st_9sYS8i_1FS7Dq4UBFjnYIlkZSemDBIK_9tiHI"},
{"content":{"body":"technically you *can* subtracft a list, its just not a thing","format":"org.matrix.custom.html","formatted_body":"technically you <em>can</em> subtracft a list, its just not a thing","m.mentions":{},"msgtype":"m.text"},"ts":1707266910151,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yYtGu9NhJnQjUCDjHwIqZRs836zRmahhF3v_9QHadM8"},
{"content":{"body":" * technically you _can_ subtract a list, its just not a thing","format":"org.matrix.custom.html","formatted_body":" * technically you <em>can</em> subtract a list, its just not a thing","m.mentions":{},"m.new_content":{"body":"technically you _can_ subtract a list, its just not a thing","format":"org.matrix.custom.html","formatted_body":"technically you <em>can</em> subtract a list, its just not a thing","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yYtGu9NhJnQjUCDjHwIqZRs836zRmahhF3v_9QHadM8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707266914825,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LR8bc1KLXJ-h-foVu-RkjYqaKnDINNpxFxyRNCQJgCs"},
{"content":{"body":"i said the exploit thing tongue in cheek","m.mentions":{},"msgtype":"m.text"},"ts":1707266914879,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$poy3rGK6bYJBzNBblcsIWybP8qBP7hRZVC11u7UBTOY"},
{"content":{"body":"maybe ask Duncan MacGregor for pointers to the examples from other languages he was referring to?","format":"org.matrix.custom.html","formatted_body":"maybe ask <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> for pointers to the examples from other languages he was referring to?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1707266948508,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$H71EW4e3so0_DPnsdoTueTATwpNnopTzJzsoaitOOCE"},
{"content":{"body":"> <@shuyuguo:matrix.org> i mean can i hear a positive argument for why you want it to be -0\n\nWell, because all the number combinators return their identity when called with 0 args","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8W6st_9sYS8i_1FS7Dq4UBFjnYIlkZSemDBIK_9tiHI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i mean can i hear a positive argument for why you want it to be -0</blockquote></mx-reply>Well, because all the number combinators return their identity when called with 0 args","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8W6st_9sYS8i_1FS7Dq4UBFjnYIlkZSemDBIK_9tiHI"}},"msgtype":"m.text"},"ts":1707266954764,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M1dOAkTRpLP9nVavKwBkVyRjCvT82bCDU_V5Xtel0yU"},
{"content":{"body":"is that property relied on","m.mentions":{},"msgtype":"m.text"},"ts":1707266967140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EKjv-JTdKIYCTpKByGgk4RD0nJX_xDnzWRpfqJ8FNso"},
{"content":{"body":"like, for the use cases here","m.mentions":{},"msgtype":"m.text"},"ts":1707266992916,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-zcbOsfTbNZqtRgGBhbd3a_c55ewgJ6Paw9nYb5j8b0"},
{"content":{"body":"if Python returns +0, i _know_ that ecosystem does a lot of numerical stuff and it doesn't bother them, that gives me one signal","format":"org.matrix.custom.html","formatted_body":"if Python returns +0, i <em>know</em> that ecosystem does a lot of numerical stuff and it doesn't bother them, that gives me one signal","m.mentions":{},"msgtype":"m.text"},"ts":1707267022722,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZUWqFz_hz-4jSpXdTgHdj5_MbvRcAo5tI8xdlU6cxPk"},
{"content":{"body":"Duncan MacGregor said ruby experienced the opposite thing, i'd like to learn more about that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> said ruby experienced the opposite thing, i'd like to learn more about that","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1707267033168,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DmVYnlmb4c3qxdYpdj5xEAzJpsU6pQ0YXOcX1P4Uiq8"},
{"content":{"body":"> <@shuyuguo:matrix.org> if Python returns +0, i _know_ that ecosystem does a lot of numerical stuff and it doesn't bother them, that gives me one signal\n\nit doesn't return +0, it returns the integer 0. not a float!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZUWqFz_hz-4jSpXdTgHdj5_MbvRcAo5tI8xdlU6cxPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if Python returns +0, i <em>know</em> that ecosystem does a lot of numerical stuff and it doesn't bother them, that gives me one signal</blockquote></mx-reply>it doesn't return +0, it returns the integer 0. not a float!","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZUWqFz_hz-4jSpXdTgHdj5_MbvRcAo5tI8xdlU6cxPk"}},"msgtype":"m.text"},"ts":1707267049875,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tvaNDXrxAjVb2_tLI-iN6SwaYRyCBZz86kXRNOhgrNk"},
{"content":{"body":"its `fsum` returns an integer?","format":"org.matrix.custom.html","formatted_body":"its <code>fsum</code> returns an integer?","m.mentions":{},"msgtype":"m.text"},"ts":1707267067377,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6KlCxsmFugdm-CeFIkEjQYwQumq_2VUusaWCa6nlqjA"},
{"content":{"body":"oh fsum probably does not","m.mentions":{},"msgtype":"m.text"},"ts":1707267075617,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mbwdApdW87qr9z9q34jjx9en7mebSCYc9sCAFvIbLPk"},
{"content":{"body":"is fsum a thing","m.mentions":{},"msgtype":"m.text"},"ts":1707267085674,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Go3ha-29WGwo_yT009yK1RznKj6jql8z8IqZS8bHIVo"},
{"content":{"body":"i'm specifically talking about fsum because that's what kevin was talking about (i thought)","m.mentions":{},"msgtype":"m.text"},"ts":1707267088652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CXXowblWQsdhIjWQdDWoniY6Xvs7jkvvi_89GLhCORc"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1707267089155,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$slWZELulp6seeOiFnGEJ9tbQIWK7rOdlVngrDg4IDXw"},
{"content":{"body":"I've relied it for `.min`/`.max` when I get values some values initially and then other later, so I have an \"intermediate min\".\n\nAs Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"","format":"org.matrix.custom.html","formatted_body":"<p>I've relied it for <code>.min</code>/<code>.max</code> when I get values some values initially and then other later, so I have an \"intermediate min\".</p>\n<p>As Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707267092144,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Axz4gwrqPInEuspjg37WkjuB0lwAvy7CQerzANAnqko"},
{"content":{"body":" * I've relied ib it for `.min`/`.max` when I get values some values initially and then other later, so I have an \"intermediate min\".\n\nAs Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"","format":"org.matrix.custom.html","formatted_body":" * <p>I've relied ib it for <code>.min</code>/<code>.max</code> when I get values some values initially and then other later, so I have an \"intermediate min\".</p>\n<p>As Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"</p>\n","m.mentions":{},"m.new_content":{"body":"I've relied ib it for `.min`/`.max` when I get values some values initially and then other later, so I have an \"intermediate min\".\n\nAs Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"","format":"org.matrix.custom.html","formatted_body":"<p>I've relied ib it for <code>.min</code>/<code>.max</code> when I get values some values initially and then other later, so I have an \"intermediate min\".</p>\n<p>As Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Axz4gwrqPInEuspjg37WkjuB0lwAvy7CQerzANAnqko","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267096416,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4_itAKkamTwC3Fxtg7wQLPaVbUYy3ERoAXrYd7EbNsM"},
{"content":{"body":"ah math.fsum","m.mentions":{},"msgtype":"m.text"},"ts":1707267097096,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$M3LQpJIaC6pvL2MedWZTvX6np7kT-d309c7gsvqOF3g"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I've relied ib it for `.min`/`.max` when I get values some values initially and then other later, so I have an \"intermediate min\".\n> \n> As Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"\n\nbut others do not do this, cf python!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Axz4gwrqPInEuspjg37WkjuB0lwAvy7CQerzANAnqko?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>I've relied ib it for <code>.min</code>/<code>.max</code> when I get values some values initially and then other later, so I have an \"intermediate min\".</p>\n<p>As Jordan pointed out however, that doesn't work here so my main argument is \"all the others do this, we should not diverge\"</p>\n</blockquote></mx-reply>but others do not do this, cf python!","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Axz4gwrqPInEuspjg37WkjuB0lwAvy7CQerzANAnqko"}},"msgtype":"m.text"},"ts":1707267115385,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qliDY3XxSqTCLRx1-V4TZQv_u3sgiT5GM1E5cBKD4aA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Well, because all the number combinators return their identity when called with 0 args\n\nWhether `+0` is not an identity of Math.sum depends on what equivalence relation you’re applying to that identity:\n`===` versus `Object.is`.\n\nIn other words, the question here is which equivalence relation we think is most useful (or least risky) for general code that needs to use Math.sum.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M1dOAkTRpLP9nVavKwBkVyRjCvT82bCDU_V5Xtel0yU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Well, because all the number combinators return their identity when called with 0 args</blockquote></mx-reply><p>Whether <code>+0</code> is not an identity of Math.sum depends on what equivalence relation you’re applying to that identity:<br><code>===</code> versus <code>Object.is</code>.</p>\n<p>In other words, the question here is which equivalence relation we think is most useful (or least risky) for general code that needs to use Math.sum.</p>\n","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M1dOAkTRpLP9nVavKwBkVyRjCvT82bCDU_V5Xtel0yU"}},"msgtype":"m.text"},"ts":1707267121931,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Avac_M5sBr0RIV21tg-AFr-2xf-i5t5r_-1C-RsbqvE"},
{"content":{"body":"> <@jschoi:matrix.org> Whether `+0` is not an identity of Math.sum depends on what equivalence relation you’re applying to that identity:\n> `===` versus `Object.is`.\n> \n> In other words, the question here is which equivalence relation we think is most useful (or least risky) for general code that needs to use Math.sum.\n\nthat's not my understanding at all, the identity is over `+` over floats","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Avac_M5sBr0RIV21tg-AFr-2xf-i5t5r_-1C-RsbqvE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br><p>Whether <code>+0</code> is not an identity of Math.sum depends on what equivalence relation you’re applying to that identity:<br /><code>===</code> versus <code>Object.is</code>.</p>\n<p>In other words, the question here is which equivalence relation we think is most useful (or least risky) for general code that needs to use Math.sum.</p>\n</blockquote></mx-reply>that's not my understanding at all, the identity is over <code>+</code> over floats","m.mentions":{"user_ids":["@jschoi:matrix.org","@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Avac_M5sBr0RIV21tg-AFr-2xf-i5t5r_-1C-RsbqvE"}},"msgtype":"m.text"},"ts":1707267157595,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t6LH4R_vgE8m4kQATGvRUr-VyAkbvPVAS19pHBUuWqk"},
{"content":{"body":"how do `===` and `Object.is` figure into it?","format":"org.matrix.custom.html","formatted_body":"how do <code>===</code> and <code>Object.is</code> figure into it?","m.mentions":{},"msgtype":"m.text"},"ts":1707267178269,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yScTYZQTMrhh3BSW5WEh8QYWpkAZgT7EROBCD5RvdJo"},
{"content":{"body":"If there should only be one answer, we either need a reference implementation or comprehensive test cases to ensure all implements do arrive at the same answer.","m.mentions":{},"msgtype":"m.text"},"ts":1707267204691,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0Fe9VC02iWhY4tieTmRF1rJZxGkbc_GBn0Hdf1YYDjM"},
{"content":{"body":"oh i see, you mean `x+id === x` or `Object.is(x+id, x)`?","format":"org.matrix.custom.html","formatted_body":"oh i see, you mean <code>x+id === x</code> or <code>Object.is(x+id, x)</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1707267205516,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ht7btfIPkTN7bC4Neze-Ak0cRbC7Gbtsj9rcUf1eSEw"},
{"content":{"body":"> <@shuyuguo:matrix.org> how do `===` and `Object.is` figure into it?\n\nWell, from JS you can only observe that +0 is not the identity if you use `Object.is` at some point, since it's not the identity only for the -0 vs +0 case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yScTYZQTMrhh3BSW5WEh8QYWpkAZgT7EROBCD5RvdJo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>how do <code>===</code> and <code>Object.is</code> figure into it?</blockquote></mx-reply>Well, from JS you can only observe that +0 is not the identity if you use <code>Object.is</code> at some point, since it's not the identity only for the -0 vs +0 case","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yScTYZQTMrhh3BSW5WEh8QYWpkAZgT7EROBCD5RvdJo"}},"msgtype":"m.text"},"ts":1707267211688,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9o1q5-1wm5T8ZXak3N2l2Zk04GQatpm_ID5qrzAuaqk"},
{"content":{"body":"yeah fair enough","m.mentions":{},"msgtype":"m.text"},"ts":1707267226730,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oIRzKOOPD23X-EdBagTUqfKC91wkRkVM1VFPYapHvXo"},
{"content":{"body":"> <@shuyuguo:matrix.org> how do `===` and `Object.is` figure into it?\n\nSorry, I mean whether `-0` and `+0` are considered “equivalent” or different is related to whether we consider *both* `-0` and `+0` to be identities on the `+` operation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yScTYZQTMrhh3BSW5WEh8QYWpkAZgT7EROBCD5RvdJo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>how do <code>===</code> and <code>Object.is</code> figure into it?</blockquote></mx-reply>Sorry, I mean whether <code>-0</code> and <code>+0</code> are considered “equivalent”&nbsp;or different is related to whether we consider <em>both</em> <code>-0</code> and <code>+0</code> to be identities&nbsp;on the <code>+</code> operation.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yScTYZQTMrhh3BSW5WEh8QYWpkAZgT7EROBCD5RvdJo"}},"msgtype":"m.text"},"ts":1707267234546,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_S6Rd8AyU89Ds4OW1aau2pv_voJzUs0UgKSvFcXKEMg"},
{"content":{"body":"Basically what Nicolo just said.","m.mentions":{},"msgtype":"m.text"},"ts":1707267249188,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$13QC0FYgxFZn0U-JHk7Z-wfwe7zMyY8ICCiDp6xdl78"},
{"content":{"body":"is that an argument for one direction over the other?","m.mentions":{},"msgtype":"m.text"},"ts":1707267249813,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JN2PQptHYUdWn658_a3H6EY4ieTMuTXYH747aLGZzfU"},
{"content":{"body":"I think it’s reasonable to return `+0` and call it an “identity” (loosely).","format":"org.matrix.custom.html","formatted_body":"I think it’s reasonable to return <code>+0</code> and call it an “identity” (loosely).","m.mentions":{},"msgtype":"m.text"},"ts":1707267266681,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4rIfi3vfrWzyV6YXApKjSd-VGGm_ihSqjgXNj2qjYBg"},
{"content":{"body":"sgtm","m.mentions":{},"msgtype":"m.text"},"ts":1707267281218,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M32Co4ivfHqdhKl2JDfyD9mIhcXGuSYPMeLHzd3G1aY"},
{"content":{"body":" * I think it’s reasonable to return `+0` and call it an “identity” (loosely, based on `===`).","format":"org.matrix.custom.html","formatted_body":" * I think it’s reasonable to return <code>+0</code> and call it an “identity” (loosely, based on <code>===</code>).","m.mentions":{},"m.new_content":{"body":"I think it’s reasonable to return `+0` and call it an “identity” (loosely, based on `===`).","format":"org.matrix.custom.html","formatted_body":"I think it’s reasonable to return <code>+0</code> and call it an “identity” (loosely, based on <code>===</code>).","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4rIfi3vfrWzyV6YXApKjSd-VGGm_ihSqjgXNj2qjYBg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267293451,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eh-4sH4HT2lY2XJdKerQFeFTekal8eBjdbfQbFflofU"},
{"content":{"body":"> <@shuyuguo:matrix.org> Duncan MacGregor said ruby experienced the opposite thing, i'd like to learn more about that\n\nNot returning -0.0 has the weird effect that summing two arrays (1 empty) can give a different result from summing the concatenated array.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DmVYnlmb4c3qxdYpdj5xEAzJpsU6pQ0YXOcX1P4Uiq8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a> said ruby experienced the opposite thing, i'd like to learn more about that</blockquote></mx-reply>Not returning -0.0 has the weird effect that summing two arrays (1 empty) can give a different result from summing the concatenated array.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DmVYnlmb4c3qxdYpdj5xEAzJpsU6pQ0YXOcX1P4Uiq8"}},"msgtype":"m.text"},"ts":1707267350282,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$H3TEvpMXHDICXEtaQgRJ1h4dMYCb2HHit_D8ZZNBIoI"},
{"content":{"body":"Ruby's array summing is a bit of a disaster area in my experience, it has a load of gotchas depending on whether the whole array is floats or not, and other fun things.","m.mentions":{},"msgtype":"m.text"},"ts":1707267408552,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$xfVBk3FKu0po4DhsEgaRXrV3eKlgvk0O6i3wCLBxPsw"},
{"content":{"body":"On the SQL and null note we couldn't return null because null is not the identity under addition in JS. null + null give 0. :-(","m.mentions":{},"msgtype":"m.text"},"ts":1707267499159,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$aJjm4qKCV5aIVC_Jr91YuUz5KSzz2txWIkqtY0nsP2w"},
{"content":{"body":"NaN + NaN is NaN tho","m.mentions":{},"msgtype":"m.text"},"ts":1707267515781,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yXvU85XQjY4ExzAEISfFwdjR17g5qwd7VsDdEHuJ4w4"},
{"content":{"body":" * NaN + NaN is NaN tho :-p","m.mentions":{},"m.new_content":{"body":"NaN + NaN is NaN tho :-p","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yXvU85XQjY4ExzAEISfFwdjR17g5qwd7VsDdEHuJ4w4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267522411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sNqn6Ix-B2tJHX0ldwv-apxf7IIJ_N7BOd0GvtPGfJ4"},
{"content":{"body":"> <@aardvark179:matrix.org> Not returning -0.0 has the weird effect that summing two arrays (1 empty) can give a different result from summing the concatenated array.\n\nsorry being slow, meaning if you do `sum([]) + sum([1])` vs `sum([].concat([1]))`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H3TEvpMXHDICXEtaQgRJ1h4dMYCb2HHit_D8ZZNBIoI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Not returning -0.0 has the weird effect that summing two arrays (1 empty) can give a different result from summing the concatenated array.</blockquote></mx-reply>sorry being slow, meaning if you do <code>sum([]) + sum([1])</code> vs <code>sum([].concat([1]))</code>?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$H3TEvpMXHDICXEtaQgRJ1h4dMYCb2HHit_D8ZZNBIoI"}},"msgtype":"m.text"},"ts":1707267581224,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ke8zcSzwwExnV_9UkGVBWle6BicnISFhB9E1oEtjO5k"},
{"content":{"body":"New topic:  How come we don't have a table of Stage 2.7 proposals?  Is it that none have landed into that bucket yet?\n\nhttps://github.com/tc39/proposals","m.mentions":{},"msgtype":"m.text"},"ts":1707267586344,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$i1IVSUJ35JN9jWXEC43StiAT9t45Z1BW-yNmDHQgacU"},
{"content":{"body":"The engines nowadays would optimize `Math.sum([0, 1, 2])` such that the intermediate array doesn’t get allocated then GCed, right?","format":"org.matrix.custom.html","formatted_body":"The engines nowadays would optimize <code>Math.sum([0, 1, 2])</code> such that the intermediate array doesn’t get allocated then GCed, right?","m.mentions":{},"msgtype":"m.text"},"ts":1707267592114,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vnvd7kNuu8X_uVorcEBWMfuA3EKt9KvSIkYMc7hRbOA"},
{"content":{"body":"> <@robpalme:matrix.org> New topic:  How come we don't have a table of Stage 2.7 proposals?  Is it that none have landed into that bucket yet?\n> \n> https://github.com/tc39/proposals\n\nyes, that's correct","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i1IVSUJ35JN9jWXEC43StiAT9t45Z1BW-yNmDHQgacU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>New topic:  How come we don&#39;t have a table of Stage 2.7 proposals?  Is it that none have landed into that bucket yet?<br/><br/>https://github.com/tc39/proposals</blockquote></mx-reply>yes, that's correct","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i1IVSUJ35JN9jWXEC43StiAT9t45Z1BW-yNmDHQgacU"}},"msgtype":"m.text"},"ts":1707267618965,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O2plEWqjlQqgfMPUq25rfr47yOUDM7B9TOx6_a01Hl0"},
{"content":{"body":" * yes, that's correct. i'll make a table for it once we have one","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i1IVSUJ35JN9jWXEC43StiAT9t45Z1BW-yNmDHQgacU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>New topic:  How come we don't have a table of Stage 2.7 proposals?  Is it that none have landed into that bucket yet?<br><br>https://github.com/tc39/proposals</blockquote></mx-reply> * yes, that's correct. i'll make a table for it once we have one","m.mentions":{},"m.new_content":{"body":"yes, that's correct. i'll make a table for it once we have one","format":"org.matrix.custom.html","formatted_body":"yes, that's correct. i'll make a table for it once we have one","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$O2plEWqjlQqgfMPUq25rfr47yOUDM7B9TOx6_a01Hl0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267626550,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WoW1X3Ab2o0WP5qeWYdwlhA7aPuQOG6_DLrrnO0mn0Y"},
{"content":{"body":"even if we wrote down the full algorithm, we would still need to write somewhere that it was computing full precision summation because that is not immediately obvious from looking at 100 algorithm steps","m.mentions":{},"msgtype":"m.text"},"ts":1707267637938,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fLy2lB2XSed7JCiAfnn7TIRwDzwPhun_YINOwpN17Pc"},
{"content":{"body":"ljharb: Would you be satisfied with the spec pointing to documentation for an example known-good algorithm?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Would you be satisfied with the spec pointing to documentation for an example known-good algorithm?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707267647651,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$1FqOCVXRngtHyI3rnvCc2Ju82kyy4D0FsyWrrSwrHNA"},
{"content":{"body":"why not put both?","m.mentions":{},"msgtype":"m.text"},"ts":1707267652503,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X3PnDVpq9V6hKJI4Un-zSx-gov3qu6CB2FpxrrbClzU"},
{"content":{"body":" * why not put both? (to both the last two comments)","m.mentions":{},"m.new_content":{"body":"why not put both? (to both the last two comments)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$X3PnDVpq9V6hKJI4Un-zSx-gov3qu6CB2FpxrrbClzU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267664289,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9_sJOSWNtxnoHws4fHO5m7sbFLaX6x-jdSXiSatbVy4"},
{"content":{"body":"as an implementor i don't think writing out an algorithm would be helpful","m.mentions":{},"msgtype":"m.text"},"ts":1707267670992,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gLxBPhnBK6UaNEJ6cN54y8UbCzZnb6tWCUnguo5IyWU"},
{"content":{"body":"shu: `Math.sum([-0])` what would you expect it to return?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <code>Math.sum([-0])</code> what would you expect it to return?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707267674030,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I"},
{"content":{"body":"it would be helpful to me ¯\\_(ツ)_/¯ ","format":"org.matrix.custom.html","formatted_body":"it would be helpful to me ¯_(ツ)_/¯","m.mentions":{},"msgtype":"m.text"},"ts":1707267683012,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4XmQsBvUFJXQhirRSw7aE3QWJxPe8oVprUkNPK-uDPs"},
{"content":{"body":" * as an implementor i don't think writing out an algorithm would be helpful, it would just be noise ","m.mentions":{},"m.new_content":{"body":"as an implementor i don't think writing out an algorithm would be helpful, it would just be noise ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gLxBPhnBK6UaNEJ6cN54y8UbCzZnb6tWCUnguo5IyWU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267684830,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kKLSGbCK8BbvSbhZF1tnpKzowz6d1bOhJuxAt1MYpDg"},
{"content":{"body":" * it would be helpful to me ¯\\\\\\_(ツ)\\_/¯","format":"org.matrix.custom.html","formatted_body":" * it would be helpful to me ¯\\_(ツ)_/¯","m.mentions":{},"m.new_content":{"body":"it would be helpful to me ¯\\\\\\_(ツ)\\_/¯","format":"org.matrix.custom.html","formatted_body":"it would be helpful to me ¯\\_(ツ)_/¯","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4XmQsBvUFJXQhirRSw7aE3QWJxPe8oVprUkNPK-uDPs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267685957,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-CfqJtp8lhnPyqbhImvUZ32GAdGiD9PDG_IYw3F48E0"},
{"content":{"body":"i think linking to an example is far better","m.mentions":{},"msgtype":"m.text"},"ts":1707267700959,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tF5MeaiiyTN4SL082OZGm5OS_0QilScz0J_BHF-3Mzo"},
{"content":{"body":"> <@ljharb:matrix.org> yes, that's correct. i'll make a table for it once we have one\n\nDoes a prior “Stage 3 conditional on approval by reviewers” status retroactively count as “Stage 2.7”? Regarding proposal-array-from-async.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O2plEWqjlQqgfMPUq25rfr47yOUDM7B9TOx6_a01Hl0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes, that's correct. i'll make a table for it once we have one</blockquote></mx-reply>Does a prior “Stage&nbsp;3 conditional on approval by reviewers” status retroactively count as “Stage&nbsp;2.7”? Regarding proposal-array-from-async.","m.mentions":{"user_ids":["@ljharb:matrix.org","@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$O2plEWqjlQqgfMPUq25rfr47yOUDM7B9TOx6_a01Hl0"}},"msgtype":"m.text"},"ts":1707267725988,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dJAkYDTzoLHBktiSQklmtr5WEQvP9uqoodtqubAyigw"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> shu: `Math.sum([-0])` what would you expect it to return?\n\nIf this returns `+0`, I think it's ok to say \"we always ignore -0\". But if it can return -0, than you already have to be careful about it when implementing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <code>Math.sum([-0])</code> what would you expect it to return?</blockquote></mx-reply>If this returns <code>+0</code>, I think it's ok to say \"we always ignore -0\". But if it can return -0, than you already have to be careful about it when implementing","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I"}},"msgtype":"m.text"},"ts":1707267731839,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$o3FFPPWufd-uEnLEZuJz8c1TzfsNLexGDm_fIR7WSbM"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> shu: `Math.sum([-0])` what would you expect it to return?\n\ni would expect it to return +0 i think?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <code>Math.sum([-0])</code> what would you expect it to return?</blockquote></mx-reply>i would expect it to return +0 i think?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I"}},"msgtype":"m.text"},"ts":1707267733461,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eSLG-rjmD5fSAwGIzxbpssdKTUjnI1htzakIB1zI_XQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> shu: `Math.sum([-0])` what would you expect it to return?\n\n * If this returns `+0`, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y1WZ4PPtYRUF8SIBzsIdHEr8H_OdA_Bpo0gFILBFq2I?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <code>Math.sum([-0])</code> what would you expect it to return?</blockquote></mx-reply> * If this returns <code>+0</code>, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing","m.mentions":{},"m.new_content":{"body":"If this returns `+0`, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing","format":"org.matrix.custom.html","formatted_body":"If this returns <code>+0</code>, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$o3FFPPWufd-uEnLEZuJz8c1TzfsNLexGDm_fIR7WSbM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707267744534,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9J1mNPZy_Kxd-76xubrLi2yXH3YS8LwCcPNVwGFgDm0"},
{"content":{"body":"> <@shuyuguo:matrix.org> sorry being slow, meaning if you do `sum([]) + sum([1])` vs `sum([].concat([1]))`?\n\nSo if you have [-0.0].sum + [].sum that would give a different result to ([-0.0] + []).sum.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ke8zcSzwwExnV_9UkGVBWle6BicnISFhB9E1oEtjO5k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>sorry being slow, meaning if you do <code>sum([]) + sum([1])</code> vs <code>sum([].concat([1]))</code>?</blockquote></mx-reply>So if you have [-0.0].sum + [].sum that would give a different result to ([-0.0] + []).sum.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ke8zcSzwwExnV_9UkGVBWle6BicnISFhB9E1oEtjO5k"}},"msgtype":"m.text"},"ts":1707267752466,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$QymiHN453SZG-M4m_FQlbpmSso6mArCLEdEPOctjYLE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> If this returns `+0`, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing\n\nyes, that's a good point to call out","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o3FFPPWufd-uEnLEZuJz8c1TzfsNLexGDm_fIR7WSbM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>If this returns <code>+0</code>, I think it's ok to say \"we always normalize -0\". But if it can return -0, than you already have to be careful about it when implementing</blockquote></mx-reply>yes, that's a good point to call out","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o3FFPPWufd-uEnLEZuJz8c1TzfsNLexGDm_fIR7WSbM"}},"msgtype":"m.text"},"ts":1707267753789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WnpLAtrSAMywXn5z__r3pZMX0LnCU28kqP5FwlcZ3SQ"},
{"content":{"body":"On ruby those actually give the same answer because ruby starts with 0 and adds the elements...","m.mentions":{},"msgtype":"m.text"},"ts":1707267773210,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$BU0f9pjoznQ8o2HYDTXgWySY5w2S3_WtXb6rCihQA1k"},
{"content":{"body":"> <@michaelficarra:matrix.org> even if we wrote down the full algorithm, we would still need to write somewhere that it was computing full precision summation because that is not immediately obvious from looking at 100 algorithm steps\n\nAre there corner cases in arbitrary precision arithmetic that would be useful to point out in the specification? We do that in a number of places in the spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fLy2lB2XSed7JCiAfnn7TIRwDzwPhun_YINOwpN17Pc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>even if we wrote down the full algorithm, we would still need to write somewhere that it was computing full precision summation because that is not immediately obvious from looking at 100 algorithm steps</blockquote></mx-reply>Are there corner cases in arbitrary precision arithmetic that would be useful to point out in the specification? We do that in a number of places in the spec.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fLy2lB2XSed7JCiAfnn7TIRwDzwPhun_YINOwpN17Pc"}},"msgtype":"m.text"},"ts":1707267773306,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_VltQMTphAh-WVA8HGyVTFpISwoPvC9_1u2OosqFYdQ"},
{"content":{"body":"> <@aardvark179:matrix.org> So if you have [-0.0].sum + [].sum that would give a different result to ([-0.0] + []).sum.\n\nwhat are the two sums? +0.0 for the former and -0.0 for the latter?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QymiHN453SZG-M4m_FQlbpmSso6mArCLEdEPOctjYLE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So if you have [-0.0].sum + [].sum that would give a different result to ([-0.0] + []).sum.</blockquote></mx-reply>what are the two sums? +0.0 for the former and -0.0 for the latter?","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QymiHN453SZG-M4m_FQlbpmSso6mArCLEdEPOctjYLE"}},"msgtype":"m.text"},"ts":1707267785507,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P3X0YMndgaKdjJR2DskyXGhtkM__-rwiVK7cfyvjKOs"},
{"content":{"body":"Ok so my position is that `Math.sum([-0])` and `Math.sum([])` must return the same result. I would prefer both to return -0, but as long as they return the same value I'm fine","format":"org.matrix.custom.html","formatted_body":"Ok so my position is that <code>Math.sum([-0])</code> and <code>Math.sum([])</code> must return the same result. I would prefer both to return -0, but as long as they return the same value I'm fine","m.mentions":{},"msgtype":"m.text"},"ts":1707267789269,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$f8DJi3Uc-75eWeGr9xjes5-U0LbiBtBTMPQqll5wmd4"},
{"content":{"body":"> <@jschoi:matrix.org> Does a prior “Stage 3 conditional on approval by reviewers” status retroactively count as “Stage 2.7”? Regarding proposal-array-from-async.\n\ni believe we need explicit consensus on 2.7 in plenary for anything to go in the table","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dJAkYDTzoLHBktiSQklmtr5WEQvP9uqoodtqubAyigw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Does a prior “Stage 3 conditional on approval by reviewers” status retroactively count as “Stage 2.7”? Regarding proposal-array-from-async.</blockquote></mx-reply>i believe we need explicit consensus on 2.7 in plenary for anything to go in the table","m.mentions":{"user_ids":["@jschoi:matrix.org","@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dJAkYDTzoLHBktiSQklmtr5WEQvP9uqoodtqubAyigw"}},"msgtype":"m.text"},"ts":1707267809210,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X4rTJaEp3WW7su5UeiYZw6yyIFMSoLw_jr6I5QygELA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Ok so my position is that `Math.sum([-0])` and `Math.sum([])` must return the same result. I would prefer both to return -0, but as long as they return the same value I'm fine\n\nthat's pretty reasonable, i agree with that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f8DJi3Uc-75eWeGr9xjes5-U0LbiBtBTMPQqll5wmd4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Ok so my position is that <code>Math.sum([-0])</code> and <code>Math.sum([])</code> must return the same result. I would prefer both to return -0, but as long as they return the same value I'm fine</blockquote></mx-reply>that's pretty reasonable, i agree with that","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f8DJi3Uc-75eWeGr9xjes5-U0LbiBtBTMPQqll5wmd4"}},"msgtype":"m.text"},"ts":1707267819192,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HVC_tn7SejUrbLzvusQzH99WwW7PdJD91Pd8EPzhZi8"},
{"content":{"body":"> <@shuyuguo:matrix.org> what are the two sums? +0.0 for the former and -0.0 for the latter?\n\nThat's what they should be, if ruby didn't have the bug that [-0.0].sum gives +0.0","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P3X0YMndgaKdjJR2DskyXGhtkM__-rwiVK7cfyvjKOs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what are the two sums? +0.0 for the former and -0.0 for the latter?</blockquote></mx-reply>That's what they should be, if ruby didn't have the bug that [-0.0].sum gives +0.0","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$P3X0YMndgaKdjJR2DskyXGhtkM__-rwiVK7cfyvjKOs"}},"msgtype":"m.text"},"ts":1707267826383,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$tS_RHuIeltRB9Ppb80OTEK1HaHx86CHXStQLTj_nqPU"},
{"content":{"body":"bakkot: mark me reviewed; altho i think the example should be a link and not \"i have to google now\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: mark me reviewed; altho i think the example should be a link and not \"i have to google now\"","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707267852592,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FsAi7X1BreNRl1bslBY8x_v3aMEfotUi_PQxS7UG1qg"},
{"content":{"body":"what i'm confused","m.mentions":{},"msgtype":"m.text"},"ts":1707267855540,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LX86IPQsc953HVKT8znYYGQwc-KqZUynPaSPhlDMa1k"},
{"content":{"body":"I did say Ruby's summation was a mess. :-)","m.mentions":{},"msgtype":"m.text"},"ts":1707267859608,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jNlXTepAXllKquQSooQHyovIHb0rVKRNkmJy2jhqUGw"},
{"content":{"body":"> <@rbuckton:matrix.org> Are there corner cases in arbitrary precision arithmetic that would be useful to point out in the specification? We do that in a number of places in the spec.\n\nthere's cases with NaN/infinity/-0, which are handled explicitly; no other corner cases except overflow as long as inputs are finite (and it's hard to write down the overflow one)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_VltQMTphAh-WVA8HGyVTFpISwoPvC9_1u2OosqFYdQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Are there corner cases in arbitrary precision arithmetic that would be useful to point out in the specification? We do that in a number of places in the spec.</blockquote></mx-reply>there's cases with NaN/infinity/-0, which are handled explicitly; no other corner cases except overflow as long as inputs are finite (and it's hard to write down the overflow one)","m.mentions":{"user_ids":["@rbuckton:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_VltQMTphAh-WVA8HGyVTFpISwoPvC9_1u2OosqFYdQ"}},"msgtype":"m.text"},"ts":1707268056038,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lYhhM_M5g0_qzlvNH6qK0V66CZgUomU7W4R6NtVH65E"},
{"content":{"body":"for the notes, which Justin offered explicit support to advance math.sum ?","m.mentions":{},"msgtype":"m.text"},"ts":1707287161572,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$oheVJTpRUAOY_9gXMAbr2nSyuRtYR8GCpHEBIsIUiWI"},
{"content":{"body":"I _think_ it was JRL... ?","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> it was JRL... ?","m.mentions":{},"msgtype":"m.text"},"ts":1707287183239,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$PG1lD8trVV4ndqFTpOPQNalKlhIn6q9xFaVKjTqqhlk"},
{"content":{"body":"Not me","msgtype":"m.text"},"ts":1707298889020,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$c0JuhDUqnHwDJP8Wtl6uKy1s03o5dtnmotPIh_ZSuqI"},
{"content":{"body":"Too many Justins.","msgtype":"m.text"},"ts":1707298910510,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Nz0J-mVPX6GuLAAXVGpyYBErgzW1p2fK6uDYTPM2nX8"},
{"content":{"body":"Can someone in the room find someone from ServiceNow to pick us up from the reception? There is 10 of us stuck at reception here","format":"org.matrix.custom.html","formatted_body":"Can someone in the room find someone from ServiceNow to pick us up from the reception? There is 10 of us stuck at reception here","m.mentions":{},"msgtype":"m.text"},"ts":1707328632015,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$apEN56xiMpB6Gxu_TgyNOydi-xej533qmdn0TU5Ev1s"},
{"content":{"body":"please add your name to the attendees list at the top of the meeting notes","m.mentions":{},"msgtype":"m.text"},"ts":1707329685135,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_yNBgaGIEuF_QuC6T-cTEBScDNtdG_HsjojHTQM3FvQ"},
{"content":{"body":"I disagree that \"the syntax part of it would be the part slowing it down\"","m.mentions":{},"msgtype":"m.text"},"ts":1707330009786,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UdijchcTVDtzdHYq3TC1diJ7QxkIYm0VFZeOT8F-kB4"},
{"content":{"body":"the data model is just as likely to be problematic as the syntax","m.mentions":{},"msgtype":"m.text"},"ts":1707330021629,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0KFvnF6iAej8gHL2pFpy2i1yOLhBN3I7gR1YJFyQfQ8"},
{"content":{"body":"> <@michaelficarra:matrix.org> the data model is just as likely to be problematic as the syntax\n\nEemeli mentioned that this data model ends up working also with the other known formats thou","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0KFvnF6iAej8gHL2pFpy2i1yOLhBN3I7gR1YJFyQfQ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the data model is just as likely to be problematic as the syntax</blockquote></mx-reply>Eemeli mentioned that this data model ends up working also with the other known formats thou","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0KFvnF6iAej8gHL2pFpy2i1yOLhBN3I7gR1YJFyQfQ8"}},"msgtype":"m.text"},"ts":1707330077399,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2WfBQRidJ6AATuV8Y0kk326Zb0-J1ACJ8LxNkckIKk4"},
{"content":{"body":"> <@michaelficarra:matrix.org> the data model is just as likely to be problematic as the syntax\n\n * Eemeli mentioned that this data model ends up working also with the other known formats though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0KFvnF6iAej8gHL2pFpy2i1yOLhBN3I7gR1YJFyQfQ8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the data model is just as likely to be problematic as the syntax</blockquote></mx-reply> * Eemeli mentioned that this data model ends up working also with the other known formats though","m.mentions":{},"m.new_content":{"body":"Eemeli mentioned that this data model ends up working also with the other known formats though","format":"org.matrix.custom.html","formatted_body":"Eemeli mentioned that this data model ends up working also with the other known formats though","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2WfBQRidJ6AATuV8Y0kk326Zb0-J1ACJ8LxNkckIKk4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707330088981,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$MTpwZ1cCwJmfu1G9pbK0NXs4DiJk3dbP1wwp7CVMny8"},
{"content":{"body":"FYI, the data model is at https://github.com/unicode-org/message-format-wg/tree/main/spec/data-model","m.mentions":{},"msgtype":"m.text"},"ts":1707330163038,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$_Urap_TuQcwBrkkT_ZYOAnZdez4_bXQcOSuxOo-M7jw"},
{"content":{"body":"a Message is either a PatternMessage (with `declarations` and a `pattern`) or a SelectMessage (with `declarations` and `selectors` for indexing into `variants`, where each Variant is a list of `keys` to match and a `pattern`. And Pattern is an array in which each element is either a string or an Expression (representing e.g. a variable) or a Markup (representing something analogous to an HTML/XML start/end tag).","format":"org.matrix.custom.html","formatted_body":"a Message is either a PatternMessage (with <code>declarations</code> and a <code>pattern</code>) or a SelectMessage (with <code>declarations</code> and <code>selectors</code> for indexing into <code>variants</code>, where each Variant is a list of <code>keys</code> to match and a <code>pattern</code>. And Pattern is an array in which each element is either a string or an Expression (representing e.g. a variable) or a Markup (representing something analogous to an HTML/XML start/end tag).","m.mentions":{},"msgtype":"m.text"},"ts":1707330464452,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$0GZtZbCLS_N_eHMmgMkx-q3n1dx4eW2Bd6DZNmGkzrc"},
{"content":{"body":"Can we just version the syntax parser? Sorry, haven’t been able to listen to most of the proposal.","msgtype":"m.text"},"ts":1707330892446,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PVFlsAndIsDewO2MbdDlnGkMhDOAs30g1FogaTtLP3I"},
{"content":{"body":"If this is already going to be a spec at another standards body.","msgtype":"m.text"},"ts":1707331030389,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$i0FCo4OQqBlhD5xUypOjlnRZpQFjS_9S0QGb6gQ_IWs"},
{"content":{"body":"it already is versioned: 2","m.mentions":{},"msgtype":"m.text"},"ts":1707331046752,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4-tx_iBJLQpbVAodgxwZKjKZnBxnK7kq4BgtflFRGIo"},
{"content":{"body":"shu: did not hear comments from you on intl.messageFormat; would you be ok with it going for stage 2 with just the data model and not the syntax?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: did not hear comments from you on intl.messageFormat; would you be ok with it going for stage 2 with just the data model and not the syntax?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707331090900,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$co8fF5wHmbzWvW3Ro6j2B3fGsG4yQ1dde9S-sMj4z90"},
{"content":{"body":"yes, that's fine with me","m.mentions":{},"msgtype":"m.text"},"ts":1707331218545,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vE_O-wGufBMUNQlt59r6q5CSnCsfUq_Jmtp9M5_-lE8"},
{"content":{"body":"my concerns need some systemic approach to address, and wouldn't be productive to ask individual proposals to deal with them","m.mentions":{},"msgtype":"m.text"},"ts":1707331235932,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rJe4H6Syye7MeiEVGyvdcwW1efRsQh-fjVK8gJFNugo"},
{"content":{"body":"to wit, concerns with how we distribute stdlib additions that won't benefit from independent implementations","m.mentions":{},"msgtype":"m.text"},"ts":1707331274209,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jE_K0a_xmyxhpnDQB88RlfE8JGKwaE4LkTAxg4txkYY"},
{"content":{"body":"I wouldn't want to add all identity escapes to Unicode RegExps; that'd limit our evolution possibilities","m.mentions":{},"msgtype":"m.text"},"ts":1707331545689,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zMqOYEQZBOImq7eh0O1wJ69gLNqF3bYoa42nMZQ2Rqo"},
{"content":{"body":"agreed but I wouldn't want to use any `\\`+punctuator escapes for anything other than identity escapes, that would be very confusing","format":"org.matrix.custom.html","formatted_body":"agreed but I wouldn't want to use any <code>\\</code>+punctuator escapes for anything other than identity escapes, that would be very confusing","m.mentions":{},"msgtype":"m.text"},"ts":1707331602364,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AnYTXxEAQD48FaFvnmKV0OfVUZ7qlUkvb8fbas3hxJY"},
{"content":{"body":"so I don't think this actually meaningfully limits the languages","m.mentions":{},"msgtype":"m.text"},"ts":1707331608693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ttsp0i6nX0qRW74BlwOYQ61aDr-rY71pbM1uLyc_59E"},
{"content":{"body":" * so I don't think this actually meaningfully limits the language evolution","m.mentions":{},"m.new_content":{"body":"so I don't think this actually meaningfully limits the language evolution","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ttsp0i6nX0qRW74BlwOYQ61aDr-rY71pbM1uLyc_59E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707331612147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ypWz5Liu_e2v2jq2QZBPCrXuU9j-twiTdUiei7j5SiM"},
{"content":{"body":"> <@bakkot:matrix.org> agreed but I wouldn't want to use any `\\`+punctuator escapes for anything other than identity escapes, that would be very confusing\n\nyes, I agree with that as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AnYTXxEAQD48FaFvnmKV0OfVUZ7qlUkvb8fbas3hxJY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>agreed but I wouldn't want to use any <code>\\</code>+punctuator escapes for anything other than identity escapes, that would be very confusing</blockquote></mx-reply>yes, I agree with that as well","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AnYTXxEAQD48FaFvnmKV0OfVUZ7qlUkvb8fbas3hxJY"}},"msgtype":"m.text"},"ts":1707331648869,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bloRAOFFFFeegx2KfdoRBKnMdUTpVYfYAbWQ6A1gA4g"},
{"content":{"body":"ljharb: Didn't you intend to ask for stage 2.7?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Didn't you intend to ask for stage 2.7?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707331810115,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$JQO-a0fVgo3iZF-9Ax2utgyqmlQhbggOq65uXIM2Tsw"},
{"content":{"body":"did I miss that?","m.mentions":{},"msgtype":"m.text"},"ts":1707331812711,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$j2MGyKGH0EpF7Kj-_UElfxazOxvBJVduteWK_CEsqLs"},
{"content":{"body":"only if no changes were to be made","m.mentions":{},"msgtype":"m.text"},"ts":1707331853440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VqUf5j6Fwu582qzl8m_7JCJfywm9kUCe1wcD6kg2erM"},
{"content":{"body":"> <@bakkot:matrix.org> agreed but I wouldn't want to use any `\\`+punctuator escapes for anything other than identity escapes, that would be very confusing\n\nIn general I agree that would be a bad idea, but I'd still rather not carve out syntax space across the board","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AnYTXxEAQD48FaFvnmKV0OfVUZ7qlUkvb8fbas3hxJY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>agreed but I wouldn't want to use any <code>\\</code>+punctuator escapes for anything other than identity escapes, that would be very confusing</blockquote></mx-reply>In general I agree that would be a bad idea, but I'd still rather not carve out syntax space across the board","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AnYTXxEAQD48FaFvnmKV0OfVUZ7qlUkvb8fbas3hxJY"}},"msgtype":"m.text"},"ts":1707331858876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2OD0-p_Noe5qWLHPlPhhElwSPqi-h1LTf7vRiR9DX48"},
{"content":{"body":"since everyone wanted the change, i'll ask for it at the next meeting instead","m.mentions":{},"msgtype":"m.text"},"ts":1707331862464,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9HjH7-AiORHzFe8ys74SsKB6yabT29TXpEP__SBeOsA"},
{"content":{"body":"right, ok","m.mentions":{},"msgtype":"m.text"},"ts":1707331871695,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$tSyPH6XfEBcVNrSkdWAK__T3rGNU_PvlLaHjcqipTZg"},
{"content":{"body":" * since nearly everyone wanted the change, i'll ask for it at the next meeting instead","m.mentions":{},"m.new_content":{"body":"since nearly everyone wanted the change, i'll ask for it at the next meeting instead","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9HjH7-AiORHzFe8ys74SsKB6yabT29TXpEP__SBeOsA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707331873946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$26VlgAflaTfzoWast24hTvvxbOXwOv6MguO8ZOqWEEg"},
{"content":{"body":"bakkot: I like Haskell's `\\&` which terminates variable-length escapes that precede it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I like Haskell's <code>\\&amp;</code> which terminates variable-length escapes that precede it","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707331890606,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8WuK7DYY0wiCW_zTRh-uCT3NpzVgty7ba9tHZBrpvgY"},
{"content":{"body":"oof, white on light blue is a very hard to read contrast :-/","m.mentions":{},"msgtype":"m.text"},"ts":1707331957746,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WDuhYBVdBnC_F4QInqrdhWawyHmHGd6l3zIejaNith4"},
{"content":{"body":"this slide needs a bright red drop shadow on the text","m.mentions":{},"msgtype":"m.text"},"ts":1707332043265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w7iGmjrrgEa3-2x9bZ-hExGqzqcdbfpsyeikL2QDwvc"},
{"content":{"body":"This transcriptionist is getting capitalization right even for terms not on the slides (SharedArrayBuffer)","m.mentions":{},"msgtype":"m.text"},"ts":1707332047609,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1X-OUEU3bLfA9Jo3tCtg7fMBIGqX0wAnA_J6y3078Tk"},
{"content":{"body":"for readability :)","m.mentions":{},"msgtype":"m.text"},"ts":1707332048064,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5cm37ab0HDBKNRuTWwpylz_kJARirYYXlj4Y9gOtHTw"},
{"content":{"body":"I love them","m.mentions":{},"msgtype":"m.text"},"ts":1707332049594,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$EzNr8HVyBURGr77y7o-WupTMaHl0GtAFgF-GpGpPuYQ"},
{"content":{"body":"Time to audit Shu’s slides for WCAG compliance.","m.mentions":{},"msgtype":"m.text"},"ts":1707332074617,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5_lbK3rZgYgF1N7ronUVp65dVvAocOmqwuSd6UuQZE8"},
{"content":{"body":"yeah this transcriptionist seemed much better than usual","m.mentions":{},"msgtype":"m.text"},"ts":1707332217061,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2rmVZXrZelllfeOMplUh7vDx7kzPfAUTkfBXaxX7wcU"},
{"content":{"body":"> <@michaelficarra:matrix.org> it already is versioned: 2\n\nBut the concern was that it would change. Well, if it changes, give the new DSL a different parser version.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%244-tx_iBJLQpbVAodgxwZKjKZnBxnK7kq4BgtflFRGIo\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>it already is versioned: 2</blockquote></mx-reply>But the concern was that it would change. Well, if it changes, give the new DSL a different parser version.","m.relates_to":{"m.in_reply_to":{"event_id":"$4-tx_iBJLQpbVAodgxwZKjKZnBxnK7kq4BgtflFRGIo"}},"msgtype":"m.text"},"ts":1707332400655,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dMWIO8sgi85UJDh1UN2i6JTDg7FDzMquvxH7r1zUSSQ"},
{"content":{"body":"Ie, split the parser from the format. ","format":"org.matrix.custom.html","formatted_body":"Ie, split the parser from the format.","msgtype":"m.text"},"ts":1707332427949,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Km3rB72q4DiDO-voDmRbPeGOy-AN90EqIGWZOZZG03Q"},
{"content":{"body":"uhhhh why is the meeting being recorded now","m.mentions":{},"msgtype":"m.text"},"ts":1707332429376,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nh8U_Y2yQ6iKSSE4KUfC8qJPxZpGDPcHj35pfYzu97w"},
{"content":{"body":"did the presentation just say someone is recording","m.mentions":{},"msgtype":"m.text"},"ts":1707332436833,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6394r384NCtV1pKUmt36dZewcNszULmimXsOsh6c8gQ"},
{"content":{"body":"I am fine with Shu being recorded if he wants that but I would prefer not to be recorded","m.mentions":{},"msgtype":"m.text"},"ts":1707332451140,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cSpS9883_41I0z_2L_alUJPVaBpnw968ahTxg7o2P54"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> This transcriptionist is getting capitalization right even for terms not on the slides (SharedArrayBuffer)\n\nAaand they just switched to somebody that puts newlines everywhere","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1X-OUEU3bLfA9Jo3tCtg7fMBIGqX0wAnA_J6y3078Tk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>This transcriptionist is getting capitalization right even for terms not on the slides (SharedArrayBuffer)</blockquote></mx-reply>Aaand they just switched to somebody that puts newlines everywhere","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$1X-OUEU3bLfA9Jo3tCtg7fMBIGqX0wAnA_J6y3078Tk"}},"msgtype":"m.text"},"ts":1707332456212,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ib7rfvzeKGyrPdBscTTcBf8NH48COKqlEp4MfV9YTJE"},
{"content":{"body":"noooooooooo","m.mentions":{},"msgtype":"m.text"},"ts":1707332522232,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DrCGNZtmU7eB42_CHJqrdX7Eorsg_SqPROK00ikYtbE"},
{"content":{"body":"to reiterate: I accidentally triggered a kb shortcut that started the recording in zoom and immediately stopped it. I think it was recording for maybe... 1 second? ","m.mentions":{},"msgtype":"m.text"},"ts":1707332943485,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AhqcszpVikH3xxkghR-gyNPptEzV89CBeSxLmEzwNRM"},
{"content":{"body":"why there is no confirmation for that, I have no idea","m.mentions":{},"msgtype":"m.text"},"ts":1707332977927,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$tfd9bJFAWF39AkpXJK_Ky877kqbS1ic7zkkOSqcs1vU"},
{"content":{"body":"zoom pops up a warning when it starts, but doesn't remove the recording when it stops, so i didn't realize it had stopped","m.mentions":{},"msgtype":"m.text"},"ts":1707332984953,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kh9AkxoTcQjqRozcjR6iG7kZRHa9MvXjpRIK6vCAvt0"},
{"content":{"body":"zoom would show it's recording near the top of the window IIRC","m.mentions":{},"msgtype":"m.text"},"ts":1707333042572,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$NsDrMMxOVIP5z8GpFy7Kf0aKCvqbyHGK1pOnphXR7DA"},
{"content":{"body":"in any case, def not recording, and apologies for the scare!","m.mentions":{},"msgtype":"m.text"},"ts":1707333057480,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$d3qKTr8Ofde6VuI7SFyFMJ1_CHviT3n5JfV4Em4cDSQ"},
{"content":{"body":"Duncan MacGregor: Based on our conversations in the shared structs proposal, anything that could block would also have an async counterpart that could be used in the main thread (e.g., the \"async locking\" primitives discussed on one of the slides). ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a>: Based on our conversations in the shared structs proposal, anything that could block would also have an async counterpart that could be used in the main thread (e.g., the \"async locking\" primitives discussed on one of the slides).","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"msgtype":"m.text"},"ts":1707333097522,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SkWBfvlqzjCJ0GhRoctq04gBGpdo1Fa_DeS-VujoeDI"},
{"content":{"body":"Very much want non-blocking, concurrent collections for this case.","m.mentions":{},"msgtype":"m.text"},"ts":1707333267304,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6hKhQF4JoNX2D11XBYJCxxoHPfsKHTXYIexiDXb5cI"},
{"content":{"body":"Luca Casonato: do you have pointers where the move to remove the wasm handshake was discussed? I'd like to follow the developments, in particular regarding to this agent global syscall table it would likely introduce","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: do you have pointers where the move to remove the wasm handshake was discussed? I'd like to follow the developments, in particular regarding to this agent global syscall table it would likely introduce","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"ts":1707333342797,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4ygMg2TPgUzr9hL689RW6-MtzIS17fAJWjClfztN8yk"},
{"content":{"body":"since danielrosenwasser's question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards","format":"org.matrix.custom.html","formatted_body":"since <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>'s question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1707333493087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc"},
{"content":{"body":"> <@rbuckton:matrix.org> Duncan MacGregor: Based on our conversations in the shared structs proposal, anything that could block would also have an async counterpart that could be used in the main thread (e.g., the \"async locking\" primitives discussed on one of the slides).\n\nThanks, I think an async API for condition varialbe might work, but my experience of writing concurrency libraries and reviewing concurrent code in general is that we should absolutely aim for higher level constructs because building them correctly from lower level ones is really hard and is not something we should generally be steering developers towards doing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SkWBfvlqzjCJ0GhRoctq04gBGpdo1Fa_DeS-VujoeDI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@aardvark179:matrix.org\">Duncan MacGregor</a>: Based on our conversations in the shared structs proposal, anything that could block would also have an async counterpart that could be used in the main thread (e.g., the \"async locking\" primitives discussed on one of the slides).</blockquote></mx-reply>Thanks, I think an async API for condition varialbe might work, but my experience of writing concurrency libraries and reviewing concurrent code in general is that we should absolutely aim for higher level constructs because building them correctly from lower level ones is really hard and is not something we should generally be steering developers towards doing.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SkWBfvlqzjCJ0GhRoctq04gBGpdo1Fa_DeS-VujoeDI"}},"msgtype":"m.text"},"ts":1707333499272,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$qgItz1vrFSIPQ87y8n_A9b_LDfoiRlsf65T2f3AC9nI"},
{"content":{"body":"> <@rbuckton:matrix.org> since danielrosenwasser's question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards\n\nDonw","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />since <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>'s question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards</blockquote></mx-reply>Donw","m.relates_to":{"m.in_reply_to":{"event_id":"$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc"}},"msgtype":"m.text"},"ts":1707333533673,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UYgAJoU26xUIoA4oFKts1VV4R4P2JFwuw4pF3PKhOxE"},
{"content":{"body":"tokio is a good prior art for async concurrency primitives ","m.mentions":{},"msgtype":"m.text"},"ts":1707333545331,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PhOV4PNMppndh67X9MAcxYdPc3GjvmSd5UrZNgVqRdg"},
{"content":{"body":"> <@rbuckton:matrix.org> since danielrosenwasser's question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards\n\n * Done","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>since <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>'s question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards</blockquote></mx-reply> * Done","m.mentions":{"user_ids":["@rbuckton:matrix.org","@danielrosenwasser:matrix.org"]},"m.new_content":{"body":"Done","format":"org.matrix.custom.html","formatted_body":"Done","m.mentions":{"user_ids":["@rbuckton:matrix.org","@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UYgAJoU26xUIoA4oFKts1VV4R4P2JFwuw4pF3PKhOxE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707333548303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3FSWmXrRs_1JZZnQ7babnK3VdbdMDEgszhoi4inF24k"},
{"content":{"body":"> <@aardvark179:matrix.org> Thanks, I think an async API for condition varialbe might work, but my experience of writing concurrency libraries and reviewing concurrent code in general is that we should absolutely aim for higher level constructs because building them correctly from lower level ones is really hard and is not something we should generally be steering developers towards doing.\n\nIn general, if you are depending on asynchrony to handle concurrency you can't expect performance if you are granular with locks in the main thread. In the browser, you're more likely to see Worker to Worker interactions with fine-grained locks, and more coarse-grained locks from UI thread to Workers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qgItz1vrFSIPQ87y8n_A9b_LDfoiRlsf65T2f3AC9nI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>Thanks, I think an async API for condition varialbe might work, but my experience of writing concurrency libraries and reviewing concurrent code in general is that we should absolutely aim for higher level constructs because building them correctly from lower level ones is really hard and is not something we should generally be steering developers towards doing.</blockquote></mx-reply>In general, if you are depending on asynchrony to handle concurrency you can't expect performance if you are granular with locks in the main thread. In the browser, you're more likely to see Worker to Worker interactions with fine-grained locks, and more coarse-grained locks from UI thread to Workers.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qgItz1vrFSIPQ87y8n_A9b_LDfoiRlsf65T2f3AC9nI"}},"msgtype":"m.text"},"ts":1707333597612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dBM4OUCroDxred3GXhhsyc8GhwroNnlL9W99gTcQ-FM"},
{"content":{"body":"i think mark would say we should be building erlang instead of c++","m.mentions":{},"msgtype":"m.text"},"ts":1707333706874,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZDX0Gziqpi9Vgap3UvHasTmD7Q4aENh0eTD-3zqjNJ8"},
{"content":{"body":"> <@rbuckton:matrix.org> since danielrosenwasser's question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards\n\napologies, didn't want to exhaust the timebox while I scrambled for the mic","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>since <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>'s question wasn't asked verbally, it may be worthwhile to copy it into the notes for anyone reading afterwards</blockquote></mx-reply>apologies, didn't want to exhaust the timebox while I scrambled for the mic","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bw4VG-h4D_anJlG15znyvRRwlGifF30bUI0bF-75kUc"}},"msgtype":"m.text"},"ts":1707333724102,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$o1kp16neiZ8AfU9dOd0exoBd3sCxFkfO4aAMSgZB36k"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> apologies, didn't want to exhaust the timebox while I scrambled for the mic\n\nNah it's perfectly fine to not speak -- everybody sees TCQ anyway and the notes are manually edited for a reason :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o1kp16neiZ8AfU9dOd0exoBd3sCxFkfO4aAMSgZB36k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>apologies, didn't want to exhaust the timebox while I scrambled for the mic</blockquote></mx-reply>Nah it's perfectly fine to not speak -- everybody sees TCQ anyway and the notes are manually edited for a reason :)","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o1kp16neiZ8AfU9dOd0exoBd3sCxFkfO4aAMSgZB36k"}},"msgtype":"m.text"},"ts":1707333769015,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_aJc_ZQMYzlmNDkBdg0_rEhozzN9iZsbYsSB9DB_LT4"},
{"content":{"body":"can i get a timebox check?","m.mentions":{},"msgtype":"m.text"},"ts":1707333891808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-U17XvEoZdvbapU-2amgX4OzakfxV9735heTDb6zs18"},
{"content":{"body":"10m","m.mentions":{},"msgtype":"m.text"},"ts":1707333961667,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$jkUNmkXstcoR4aBOJN8ovXtRMrfBHGsUMuGDzzH0iT4"},
{"content":{"body":"9 min","m.mentions":{},"msgtype":"m.text"},"ts":1707333967955,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$trxtYusd6fRlgMLWd4H1sljz0BEKMf1gHxT0_MdASUg"},
{"content":{"body":"8 min","m.mentions":{},"msgtype":"m.text"},"ts":1707334020748,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$D7A2fQNPAoKfdwwpTuGOO_5MTnzKLkxv4wOMZCLUdIQ"},
{"content":{"body":"we really need TCQ to display the time remaining","m.mentions":{},"msgtype":"m.text"},"ts":1707334072438,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aujCwiZn5HnXE1Ym1jnTVPkbA3YF1untiqINQiRXpUs"},
{"content":{"body":"6 and three quarters","m.mentions":{},"msgtype":"m.text"},"ts":1707334092835,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3dnKLwNoaZEeUQqCVZCrJxXzj3PHwas4HAVzz9ZjjRo"},
{"content":{"body":"3 mins","m.mentions":{},"msgtype":"m.text"},"ts":1707334378568,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$LL70F4FeVYr3Tu_TLYB-_FWgGXbKhIjI1ph0468RfbU"},
{"content":{"body":"1 min","m.mentions":{},"msgtype":"m.text"},"ts":1707334446454,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$u5ss7xbxhDiJd7_0piWH0LnDAhVVDnGY0Igjvk54ibg"},
{"content":{"body":"55 seconds","m.mentions":{},"msgtype":"m.text"},"ts":1707334455489,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$I7PS4Y2LNwC3x8ENWS3RODvgvwueRIQRBZ58vsjQLHQ"},
{"content":{"body":"50","m.mentions":{},"msgtype":"m.text"},"ts":1707334459810,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AvLQR6ml_C_xQ-y4qBWRarPXA-lN-J_OknqHLqe97tU"},
{"content":{"body":"what else are we even going to do in the remaining time before lunch though?","m.mentions":{},"msgtype":"m.text"},"ts":1707334479037,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KwG6GwMaRP7RHQ4Xb92-fPtniwAar2t9hLBKdLT8gDQ"},
{"content":{"body":"> <@mhofman:matrix.org> Luca Casonato: do you have pointers where the move to remove the wasm handshake was discussed? I'd like to follow the developments, in particular regarding to this agent global syscall table it would likely introduce\n\nNo. This is just what I understood from our initial call with Conrad.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4ygMg2TPgUzr9hL689RW6-MtzIS17fAJWjClfztN8yk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: do you have pointers where the move to remove the wasm handshake was discussed? I'd like to follow the developments, in particular regarding to this agent global syscall table it would likely introduce</blockquote></mx-reply>No. This is just what I understood from our initial call with Conrad.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4ygMg2TPgUzr9hL689RW6-MtzIS17fAJWjClfztN8yk"}},"msgtype":"m.text"},"ts":1707334493922,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$8CaI8WZArCij-PdEUFzbkU__2I29ehoR_wmiZnei4Zo"},
{"content":{"body":"i am also curious of this kevin","m.mentions":{},"msgtype":"m.text"},"ts":1707334495577,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Xb_uZlvnZl4AISKtZ8g08aD1x6eZCDdkB4FygMJn98A"},
{"content":{"body":"If WASM has shared structs and concurrency primitives, and JS doesn't, it will be almost no time between availability in WASM and the first `shared-structs` package on NPM that makes it available in JS with a poorer experience than we could provide.","format":"org.matrix.custom.html","formatted_body":"If WASM has shared structs and concurrency primitives, and JS doesn't, it will be almost no time between availability in WASM and the first <code>shared-structs</code> package on NPM that makes it available in JS with a poorer experience than we could provide.","m.mentions":{},"msgtype":"m.text"},"ts":1707334693253,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HtK4C7jZLdDHRuXK8lS-ciBz7uPlG_PGnLm5pnQa6c0"},
{"content":{"body":"Improving the JS/Wasm API seems like a good thing to do independent of our decision here","m.mentions":{},"msgtype":"m.text"},"ts":1707334739369,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$X8t4QXANfRJhtHXc1TniTpm-QAvuVqKYDdllEQDjjSc"},
{"content":{"body":"> <@bakkot:matrix.org> what else are we even going to do in the remaining time before lunch though?\n\nchairs asked me to do iterator chunking","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KwG6GwMaRP7RHQ4Xb92-fPtniwAar2t9hLBKdLT8gDQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>what else are we even going to do in the remaining time before lunch though?</blockquote></mx-reply>chairs asked me to do iterator chunking","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KwG6GwMaRP7RHQ4Xb92-fPtniwAar2t9hLBKdLT8gDQ"}},"msgtype":"m.text"},"ts":1707334742671,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BFPuddj-tasJnDnCLwe9j1LQBXCeXGJsvM4QwTm5AUM"},
{"content":{"body":"if we get wasm shared objects I'm immediately going to write a JS library which uses wasm and proxies to implement the shared structs proposal","m.mentions":{},"msgtype":"m.text"},"ts":1707334748464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uzhe9wqdPMaqYIaqsDIPYykOQYXSSsPmwwa8ZlaZaE0"},
{"content":{"body":"I think the JS proposal can be almost completely polyfilled based on the wasm one","m.mentions":{},"msgtype":"m.text"},"ts":1707334761889,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mpq2iZBh0av0mE_XfY5M_OoHT3XcOLeAp5IGAFXmNUY"},
{"content":{"body":"binaryen about to get a lot of npm downloads","m.mentions":{},"msgtype":"m.text"},"ts":1707334775889,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$37hfkPv1zsmsiQK5DCgND8Oi9l9PMY8-rwKaIY5HmlU"},
{"content":{"body":"Is Ben Allen in this room?","m.mentions":{},"msgtype":"m.text"},"ts":1707334804144,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$2ZdNQ06WlWRaTlxXNYo0fzqjUfRO_bXYgXpT-HyzauU"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1707334813527,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$S6yGxyqhTeBIGZEkHmFdvY0kvdfRT5FQYAUGd9lM4uo"},
{"content":{"body":"> <@bakkot:matrix.org> I think the JS proposal can be almost completely polyfilled based on the wasm one\n\nExcept syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mpq2iZBh0av0mE_XfY5M_OoHT3XcOLeAp5IGAFXmNUY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think the JS proposal can be almost completely polyfilled based on the wasm one</blockquote></mx-reply>Except syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mpq2iZBh0av0mE_XfY5M_OoHT3XcOLeAp5IGAFXmNUY"}},"msgtype":"m.text"},"ts":1707334814049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FfZ75eC6j4Mtme7Tbn-uTiLa15oGkPKWbybgKvIwmKw"},
{"content":{"body":"> <@rbuckton:matrix.org> Except syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.\n\nthe current proposal has no syntax, does it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FfZ75eC6j4Mtme7Tbn-uTiLa15oGkPKWbybgKvIwmKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Except syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.</blockquote></mx-reply>the current proposal has no syntax, does it?","m.mentions":{"user_ids":["@rbuckton:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FfZ75eC6j4Mtme7Tbn-uTiLa15oGkPKWbybgKvIwmKw"}},"msgtype":"m.text"},"ts":1707334850097,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iz9o_7fbwH97Sd4vZFDjUlo5JX6BqemVrWUQjwd-ius"},
{"content":{"body":"I've used the dev trial for shared structs, and syntax is so much better.","m.mentions":{},"msgtype":"m.text"},"ts":1707334854285,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wNmiYCafWIOAX0J6-2yfyN4-OG8A0RX8sxzwUkZ2Lkk"},
{"content":{"body":"> <@ljharb:matrix.org> the current proposal has no syntax, does it?\n\nThe proposal intends to have syntax by stage 2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iz9o_7fbwH97Sd4vZFDjUlo5JX6BqemVrWUQjwd-ius?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the current proposal has no syntax, does it?</blockquote></mx-reply>The proposal intends to have syntax by stage 2.","m.mentions":{"user_ids":["@ljharb:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iz9o_7fbwH97Sd4vZFDjUlo5JX6BqemVrWUQjwd-ius"}},"msgtype":"m.text"},"ts":1707334863832,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$br5Ws_XSeUwu5D3RxUNwM5885JW9pJeGji0RIPJKwTk"},
{"content":{"body":"The dev trial does not","m.mentions":{},"msgtype":"m.text"},"ts":1707334869884,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2diKT1ovCD4qqqE7CortRBRzOhO8NWU6eYBl6bRnfAs"},
{"content":{"body":"ah :-/","m.mentions":{},"msgtype":"m.text"},"ts":1707334873232,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J2iA0r7xS1fwtlYQ2I5DRp-Ahykm-1N6dGDtpxatoOs"},
{"content":{"body":"> <@rbuckton:matrix.org> Except syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.\n\nhandshake you can do if the library is run in the worker as well. for sure agreed that syntax would be good. this is mostly pointing out that erights' objection just does not make sense because we'll do it in JS anyway","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FfZ75eC6j4Mtme7Tbn-uTiLa15oGkPKWbybgKvIwmKw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Except syntax and the handshake complexity, and I'd really prefer we have actual syntax for this in JS.</blockquote></mx-reply>handshake you can do if the library is run in the worker as well. for sure agreed that syntax would be good. this is mostly pointing out that <a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>' objection just does not make sense because we'll do it in JS anyway","m.mentions":{"user_ids":["@rbuckton:matrix.org","@erights:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FfZ75eC6j4Mtme7Tbn-uTiLa15oGkPKWbybgKvIwmKw"}},"msgtype":"m.text"},"ts":1707334883448,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ddZ9SN69MDyevlUPdwTpdYLRJcU8KfRIMOeD8zmMZCU"},
{"content":{"body":"syntax, but the things produced are objects, not primitives?","m.mentions":{},"msgtype":"m.text"},"ts":1707334884302,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e0Sd_l7fJYT89TO5RH_DvrCDApe7U_2_w3JIA3o-uIg"},
{"content":{"body":"yes, objects","m.mentions":{},"msgtype":"m.text"},"ts":1707334904196,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3qwwCqGvFkxKHTRfuVBLTkhuS7apwBtr3lbbDs_rBjE"},
{"content":{"body":"> <@ljharb:matrix.org> syntax, but the things produced are objects, not primitives?\n\nthe syntax is mostly just a special kind of `class` declaration","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e0Sd_l7fJYT89TO5RH_DvrCDApe7U_2_w3JIA3o-uIg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>syntax, but the things produced are objects, not primitives?</blockquote></mx-reply>the syntax is mostly just a special kind of <code>class</code> declaration","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e0Sd_l7fJYT89TO5RH_DvrCDApe7U_2_w3JIA3o-uIg"}},"msgtype":"m.text"},"ts":1707334919468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XRyIV7a7CDxhSQh2tt7g1xGQkoyOKQ4Ck9PzQNmSJqg"},
{"content":{"body":"seems strange to have syntax for that then","m.mentions":{},"msgtype":"m.text"},"ts":1707334920434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q9vbKEXh6w_xVyxnSM8iSOAPZyLu5k0eDZpp-6ri8X8"},
{"content":{"body":"oh ok, for declaration but not usage?","m.mentions":{},"msgtype":"m.text"},"ts":1707334929987,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j84mKfPZkOSXczR947UlD87okLEiFrH7tNN6x7jY6fo"},
{"content":{"body":"yeah it's for declaring the \"types\"","m.mentions":{},"msgtype":"m.text"},"ts":1707334944676,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xCNGSUj9JhXcAKHwDi4WrfJvRt6MxuZvcZT3vVAeesI"},
{"content":{"body":"We cannot leverage `class` as is due to how fixed layout is determined, but the syntax is very close to `class` syntax.","format":"org.matrix.custom.html","formatted_body":"We cannot leverage <code>class</code> as is due to how fixed layout is determined, but the syntax is very close to <code>class</code> syntax.","m.mentions":{},"msgtype":"m.text"},"ts":1707334945679,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Un2hfb1LXLjqOymStCJ2Dh2UzN_1HnG2T6UepVi5zcc"},
{"content":{"body":"`class(shared)`","format":"org.matrix.custom.html","formatted_body":"<code>class(shared)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1707334964979,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NTzoBdv_-mOme-Sd-KPCLvYkrmoWsRgUYhDgw2dgSuc"},
{"content":{"body":"The are a number of additional restrictions on shared structs that aren't compatible with `class` construction semantics, and one of our areas of exploration was how to handle thread-local prototypes and correlating struct definitions between two threads.","format":"org.matrix.custom.html","formatted_body":"The are a number of additional restrictions on shared structs that aren't compatible with <code>class</code> construction semantics, and one of our areas of exploration was how to handle thread-local prototypes and correlating struct definitions between two threads.","m.mentions":{},"msgtype":"m.text"},"ts":1707335092887,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QcNxmZ7rNn7x4JFrt5qRL53-PUfZt5yoP4dZTV7pZzk"},
{"content":{"body":"but essentially the _syntax_ is the same as `class`. The `struct` keyword essentially indicates the difference in construction and layout. IIRC, syntax is also helpful for VMs that want to do static analysis and leverage the declaration to determine fixed layout.","format":"org.matrix.custom.html","formatted_body":"but essentially the <em>syntax</em> is the same as <code>class</code>. The <code>struct</code> keyword essentially indicates the difference in construction and layout. IIRC, syntax is also helpful for VMs that want to do static analysis and leverage the declaration to determine fixed layout.","m.mentions":{},"msgtype":"m.text"},"ts":1707335243612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tEdcfccVmFGxe7jWHsaNdrxAUvoisSeNwaMmcNd30XM"},
{"content":{"body":"> <@bakkot:matrix.org> handshake you can do if the library is run in the worker as well. for sure agreed that syntax would be good. this is mostly pointing out that erights' objection just does not make sense because we'll do it in JS anyway\n\nI'd started experimenting with building this on top of a growable SharedArrayBuffer as well, though in that case you need to roll your own malloc and per-thread ref counting. And its not as fast due to all of the indirection and wrapping.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ddZ9SN69MDyevlUPdwTpdYLRJcU8KfRIMOeD8zmMZCU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>handshake you can do if the library is run in the worker as well. for sure agreed that syntax would be good. this is mostly pointing out that <a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>' objection just does not make sense because we'll do it in JS anyway</blockquote></mx-reply>I'd started experimenting with building this on top of a growable SharedArrayBuffer as well, though in that case you need to roll your own malloc and per-thread ref counting. And its not as fast due to all of the indirection and wrapping.","m.mentions":{"user_ids":["@bakkot:matrix.org","@erights:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ddZ9SN69MDyevlUPdwTpdYLRJcU8KfRIMOeD8zmMZCU"}},"msgtype":"m.text"},"ts":1707335450367,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pdxtJDE_dVouZWQbANVjuk1ZfxdhKLpVEZsWimlBXds"},
{"content":{"body":"and also serialization, presumably","m.mentions":{},"msgtype":"m.text"},"ts":1707335468908,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Zs4YGfHJ3Q0I4TPU-deOQMvhba7_g8SfRwx08OhMKvQ"},
{"content":{"body":"There's one possible world where this gets implemented in Wasm and then the syntax / polyfill is (at least initially) provided via build-time tooling. In particular, because Wasm functions don't close over nearly as much state as JS functions, shared behaviour seems strictly easier / cleaner to specify and implement in Wasm.","m.mentions":{},"msgtype":"m.text"},"ts":1707335473431,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$HC_SMa_IjzKbBKRtM0-aVsKpEWCCUemEGJJZ3i6qq4M"},
{"content":{"body":"There has been a lot of interest inside of Microsoft around the shared structs proposal. ","m.mentions":{},"msgtype":"m.text"},"ts":1707335505663,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4PQvSOngLUlL37azAc98Kjqe1uvLQsxHwpHaW1tuvOs"},
{"content":{"body":"> <@iain:mozilla.org> There's one possible world where this gets implemented in Wasm and then the syntax / polyfill is (at least initially) provided via build-time tooling. In particular, because Wasm functions don't close over nearly as much state as JS functions, shared behaviour seems strictly easier / cleaner to specify and implement in Wasm.\n\nI've been very tempted to build `struct` syntax in TypeScript using the dev-trial implementation, even if only to test out the syntax. I'm not sure it is something we would ship if we never shipped syntax in JS.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HC_SMa_IjzKbBKRtM0-aVsKpEWCCUemEGJJZ3i6qq4M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>There&#39;s one possible world where this gets implemented in Wasm and then the syntax / polyfill is (at least initially) provided via build-time tooling. In particular, because Wasm functions don&#39;t close over nearly as much state as JS functions, shared behaviour seems strictly easier / cleaner to specify and implement in Wasm.</blockquote></mx-reply>I've been very tempted to build <code>struct</code> syntax in TypeScript using the dev-trial implementation, even if only to test out the syntax. I'm not sure it is something we would ship if we never shipped syntax in JS.","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HC_SMa_IjzKbBKRtM0-aVsKpEWCCUemEGJJZ3i6qq4M"}},"msgtype":"m.text"},"ts":1707335609655,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vQnjVlORP-HFX5pU7M38_t24yGhBZxC7lcTYxh08ltM"},
{"content":{"body":"> <@iain:mozilla.org> There's one possible world where this gets implemented in Wasm and then the syntax / polyfill is (at least initially) provided via build-time tooling. In particular, because Wasm functions don't close over nearly as much state as JS functions, shared behaviour seems strictly easier / cleaner to specify and implement in Wasm.\n\ni think this is a misunderstanding -- wasm behavior easier _within wasm_. once it crosses the boundary you have the exact same problem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HC_SMa_IjzKbBKRtM0-aVsKpEWCCUemEGJJZ3i6qq4M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>There&#39;s one possible world where this gets implemented in Wasm and then the syntax / polyfill is (at least initially) provided via build-time tooling. In particular, because Wasm functions don&#39;t close over nearly as much state as JS functions, shared behaviour seems strictly easier / cleaner to specify and implement in Wasm.</blockquote></mx-reply>i think this is a misunderstanding -- wasm behavior easier <em>within wasm</em>. once it crosses the boundary you have the exact same problem","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HC_SMa_IjzKbBKRtM0-aVsKpEWCCUemEGJJZ3i6qq4M"}},"msgtype":"m.text"},"ts":1707335734418,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WoeFt0OfIbqaN53AsHhgFLRUtCy1cyFWcHATB8lWRlY"},
{"content":{"body":"another way to look at it is, the TLS syscall table _is_ solving the attaching behavior problem","format":"org.matrix.custom.html","formatted_body":"another way to look at it is, the TLS syscall table <em>is</em> solving the attaching behavior problem","m.mentions":{},"msgtype":"m.text"},"ts":1707335757953,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fvcsCjRh9LuoF5LYr9AUVcLjeHp7Hn4E9exjxfQo6nQ"},
{"content":{"body":"bakkot: it's much easier to write your own function for it yes, but it's still as ergonomic and readable as something built-in would be","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's much easier to write your own function for it yes, but it's still as ergonomic and readable as something built-in would be","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707335779182,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MgY92uFN4BNxvOBBmpAe1_XyaaX4ZgpplALOCW8kxrw"},
{"content":{"body":" * bakkot: it's much easier to write your own function for it yes, but it's still not as ergonomic and readable as something built-in would be","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's much easier to write your own function for it yes, but it's still not as ergonomic and readable as something built-in would be","m.mentions":{},"m.new_content":{"body":"bakkot: it's much easier to write your own function for it yes, but it's still not as ergonomic and readable as something built-in would be","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's much easier to write your own function for it yes, but it's still not as ergonomic and readable as something built-in would be","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MgY92uFN4BNxvOBBmpAe1_XyaaX4ZgpplALOCW8kxrw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707335784358,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GdJQd-0sxYQlMR4tFx4e6ZlqtRNMRFq3mXgZIB7HWdY"},
{"content":{"body":"I think in Java, because it go for structural types but only nomitative ones, you woul chunk things in a stream by using a collector to build the objects that represent the chunks.","m.mentions":{},"msgtype":"m.text"},"ts":1707335888404,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$nhw5vWIVTTVE5Cgf7ICRXuQSNowQtEFS7yvGiXjUjaE"},
{"content":{"body":"shu: What do you mean by crossing the boundary? Suppose we improve Wasm-JS interop by (eg) adding a section to wasm that lists the exposed fields/methods, and expose those to JS. My understanding is that in that case, your shared wasm object would have a shared shape that points to shared methods, all of which live in the shared heap, and you don't have to worry about shared->unshared edges in the same way you do with thread-local shapes.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: What do you mean by crossing the boundary? Suppose we improve Wasm-JS interop by (eg) adding a section to wasm that lists the exposed fields/methods, and expose those to JS. My understanding is that in that case, your shared wasm object would have a shared shape that points to shared methods, all of which live in the shared heap, and you don't have to worry about shared-&gt;unshared edges in the same way you do with thread-local shapes.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707335994051,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$mZY4lM9jv1EmT0tN2hkdHnDO0aXYj4XIPM2lMtgfUZI"},
{"content":{"body":"The obvious downside is that the shared methods all have to be written in wasm","m.mentions":{},"msgtype":"m.text"},"ts":1707336012431,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$oTWrEgbxaXl0X_T7-NmyslTLWs0HJYtheyINOgdpRWI"},
{"content":{"body":"iain: how do you call the shared methods?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: how do you call the shared methods?","m.mentions":{"user_ids":["@iain:mozilla.org"]},"msgtype":"m.text"},"ts":1707336020332,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VVOIL98Vc_xbtl48Xcv0djtNwEn9-I4bME6nTa7zkgU"},
{"content":{"body":"As a counterpoint to Mark's argument: `Worker` and `SharedArrayBuffer` already exist in JS and you can already get into trouble if you try to write multithreaded code and do so poorly, but that trouble often stems by JS not having adequate support for synchronization primitives and shared data, such that everyone needs to roll their own concurrency mechanism, and that's just plain worse.","format":"org.matrix.custom.html","formatted_body":"As a counterpoint to Mark's argument: <code>Worker</code> and <code>SharedArrayBuffer</code> already exist in JS and you can already get into trouble if you try to write multithreaded code and do so poorly, but that trouble often stems by JS not having adequate support for synchronization primitives and shared data, such that everyone needs to roll their own concurrency mechanism, and that's just plain worse.","m.mentions":{},"msgtype":"m.text"},"ts":1707336051098,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DTtkqXgSqMzWiWLYKy7bXzIiNpbGi7N28Qg17bDhyu4"},
{"content":{"body":"You can implement `Mutex` and `ConditionVariable` on top of SAB using Atomics today (and I have). You can implement a very limited shared structs on top of SAB today as well (and I have). What's missing is object references and GC support.","format":"org.matrix.custom.html","formatted_body":"You can implement <code>Mutex</code> and <code>ConditionVariable</code> on top of SAB using Atomics today (and I have). You can implement a very limited shared structs on top of SAB today as well (and I have). What's missing is object references and GC support.","m.mentions":{},"msgtype":"m.text"},"ts":1707336174031,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_fpqZs1OZ9KUb0rUrUIIO8MmjvmJKrCBhLo4FQUs1t0"},
{"content":{"body":"shu: Hmm. You access the property, you get some sort of wrapper back that has a local->shared edge, and then you invoke it. Are you saying that the wrapper has the same problem?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Hmm. You access the property, you get some sort of wrapper back that has a local-&gt;shared edge, and then you invoke it. Are you saying that the wrapper has the same problem?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707336246916,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$fksMDumYkaKmTtuAWXTGu1y41_Go25rgIt-1Rdg2Ucc"},
{"content":{"body":"It seems like we could spec the wrapper as some sort of opaque immutable type where identity is unobservable, and then avoiding repeated allocations of the wrapper is an implementation detail","m.mentions":{},"msgtype":"m.text"},"ts":1707336298993,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$mtGy4X1zNd069jHDljUhM4npqLx_cqophhjRdwqCYiI"},
{"content":{"body":"I guess identity is observable via comparison","m.mentions":{},"msgtype":"m.text"},"ts":1707336417046,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$uE8Rwj3SX2ps8kVkoJcxtr_LpuZY_edtF324bi2CSsQ"},
{"content":{"body":"Alternatively, couldn't the wrapper be a shared object itself?","m.mentions":{},"msgtype":"m.text"},"ts":1707336531891,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$OgJc-HNvBYKv60yl6-wepVeZPSHCf1SWmccH70ZwA5M"},
{"content":{"body":"> <@iain:mozilla.org> shu: Hmm. You access the property, you get some sort of wrapper back that has a local->shared edge, and then you invoke it. Are you saying that the wrapper has the same problem?\n\nyep, exactly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fksMDumYkaKmTtuAWXTGu1y41_Go25rgIt-1Rdg2Ucc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Hmm. You access the property, you get some sort of wrapper back that has a local-&gt;shared edge, and then you invoke it. Are you saying that the wrapper has the same problem?</blockquote></mx-reply>yep, exactly","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fksMDumYkaKmTtuAWXTGu1y41_Go25rgIt-1Rdg2Ucc"}},"msgtype":"m.text"},"ts":1707339494742,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LAYsD-sTdKiwKsVxr0evxY5kt-z2hk9i6I-ffbPArFQ"},
{"content":{"body":"> <@iain:mozilla.org> Alternatively, couldn't the wrapper be a shared object itself?\n\nit _could_ be, but if it's a callable object, that basically means some weird, new exotic function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OgJc-HNvBYKv60yl6-wepVeZPSHCf1SWmccH70ZwA5M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>Alternatively, couldn&#39;t the wrapper be a shared object itself?</blockquote></mx-reply>it <em>could</em> be, but if it's a callable object, that basically means some weird, new exotic function","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OgJc-HNvBYKv60yl6-wepVeZPSHCf1SWmccH70ZwA5M"}},"msgtype":"m.text"},"ts":1707339519822,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xiOvS_24pwP7gffZf973STEAo6QzLQ3gNZ5-TXD_erc"},
{"content":{"body":"That still seems preferable to the TLS ephemeron scheme","m.mentions":{},"msgtype":"m.text"},"ts":1707339623161,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$Fgln8HaMMZHURwUFz292rS-7_FGZIRlpR-xYTaq9TOY"},
{"content":{"body":"i'm confused, how is this connected to the TLS ephemeron scheme?","m.mentions":{},"msgtype":"m.text"},"ts":1707339665437,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eQjzX3vett1qV9XyRuMmGvAuzX5fNNd3hVZpwYigGOY"},
{"content":{"body":"is this the same thing i wanted all those months ago","m.mentions":{},"msgtype":"m.text"},"ts":1707339668133,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IIgsgWD4j3-om90ui-ZiNM2hcy953HI9Zm0xxC-F-2A"},
{"content":{"body":"I liked the idea of avoiding the wrapper using TLS... aren't these wrappers expensive? how would you avoid repeat allocation?","m.mentions":{},"msgtype":"m.text"},"ts":1707339681703,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EE06cDbaA4YRXhjOpScWxfmzApRL5JuBuM4f3Qn8gnQ"},
{"content":{"body":"i might be misunderstanding this doesn't seem connected to the TLS thing","m.mentions":{},"msgtype":"m.text"},"ts":1707339696612,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p2FiPqljVbKaWgdgjdBc5cD0FRT2QV8LBL4miR6dUWk"},
{"content":{"body":"the TLS thing is needed for shared wasm to use unshared JS functions (web APIs)","m.mentions":{},"msgtype":"m.text"},"ts":1707339707883,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6YjLhoHdDrs5nyZz2SiLjZAEq9us8VrZqcw8Vz3k3GA"},
{"content":{"body":"i thought iain was talking about the other direction: JS calling shared wasm function","format":"org.matrix.custom.html","formatted_body":"i thought <a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a> was talking about the other direction: JS calling shared wasm function","m.mentions":{"user_ids":["@iain:mozilla.org"]},"msgtype":"m.text"},"ts":1707339718648,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p3Cm93Z18v9mgWgv72m13_HyVyXrc4XNKsTZcbFc_r4"},
{"content":{"body":"oh sorry for changing the subject; just catching up","m.mentions":{},"msgtype":"m.text"},"ts":1707339729639,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r_-ZXvggiccGLJQ1yApKd5woCOMAQ8bpTyQZc09El_Q"},
{"content":{"body":"shu: I was talking about the local shape thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I was talking about the local shape thing","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707339741661,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$UsZtX0aM6Ps6docbRlFZJauJRKR7gdpEpsz3Tr2b93c"},
{"content":{"body":"local shape?","m.mentions":{},"msgtype":"m.text"},"ts":1707339751319,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UNGPawkHVBlI_Qs0u2dh51S7F4g6i6L39USOnSocnKI"},
{"content":{"body":"there are too many streams, sorry, might need to take it from the top at a later time","m.mentions":{},"msgtype":"m.text"},"ts":1707339763162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZMnPRfXfDM0poKFtuEHagAD1wgLLpHdhv_IluQep44c"},
{"content":{"body":"shu: Thread-local prototypes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Thread-local prototypes","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707339779556,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$cTSitKzNuxkHrKLStnUaGzV8RKSSgzlCZVIcSmp2n2I"},
{"content":{"body":"iain: how do wrappers help there?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: how do wrappers help there?","m.mentions":{"user_ids":["@iain:mozilla.org"]},"msgtype":"m.text"},"ts":1707339819639,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_gwI9sT4PIIMBUqneg8xDAwc3FefTiXZY7UGqN2d8dk"},
{"content":{"body":"My understanding of [this slide deck](https://docs.google.com/presentation/d/1iCuezMHZhTN560v9OuoLFIhKfjw5opV8LVilrZzOojw/edit#slide=id.g203f865f98c_0_373) is that we want to be able to attach behaviour to shared structs, but JS functions are necessarily not shared, so we need the TLS weakmap to assign thread-local prototypes. If wasm functions can be shared, then instead of thread-local prototypes, we can have shared prototypes, so we don't need the TLS weakmap or the ephemeron tracing.","format":"org.matrix.custom.html","formatted_body":"My understanding of <a href=\"https://docs.google.com/presentation/d/1iCuezMHZhTN560v9OuoLFIhKfjw5opV8LVilrZzOojw/edit#slide=id.g203f865f98c_0_373\">this slide deck</a> is that we want to be able to attach behaviour to shared structs, but JS functions are necessarily not shared, so we need the TLS weakmap to assign thread-local prototypes. If wasm functions can be shared, then instead of thread-local prototypes, we can have shared prototypes, so we don't need the TLS weakmap or the ephemeron tracing.","m.mentions":{},"msgtype":"m.text"},"ts":1707339900433,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$0JvBoapMhLjsmhea1OylMdIBj7YbTuvTacNvByRxG44"},
{"content":{"body":"ah i see what you're saying","m.mentions":{},"msgtype":"m.text"},"ts":1707339951439,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RxKPpBjSAJW3RA0FZQt73AMwBhM1DHhdUI-vLNAFTkM"},
{"content":{"body":"I like the idea for sharing behavior by having this TLS point to an object which serves as the prototype of an object. This lets you have getters for fields.","m.mentions":{},"msgtype":"m.text"},"ts":1707339974037,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zjp6AmSW4SvuJuIpXErw0hbECfG0v-Y0wKCM4-cvJDs"},
{"content":{"body":"so then you need a way to allocate a Wasm GC object with a particular TLS field as a prototype [and presumably also a non-shared version, without using TLS]","m.mentions":{},"msgtype":"m.text"},"ts":1707340009195,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZwKE8TMbhLHG-1i97Edu408DaheJYz-rTB-yhNLq79c"},
{"content":{"body":"iain: i think that's morally equivalent to a new exotic callable that's sorta-kinda dynamically scoped. this was written off earlier in the design process because nobody i asked wanted new exotic callables","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: i think that's morally equivalent to a new exotic callable that's sorta-kinda dynamically scoped. this was written off earlier in the design process because nobody i asked wanted new exotic callables","m.mentions":{"user_ids":["@iain:mozilla.org"]},"msgtype":"m.text"},"ts":1707340015291,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G-F-rkYNp8t4nw5OD3ChTZ1_xVRmtERO_OZNo1kgDsQ"},
{"content":{"body":"i'm not deathly opposed to it but it's also a can of worms (i think)","m.mentions":{},"msgtype":"m.text"},"ts":1707340026411,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uKT2TvvZFHKPMdt-Y-9oOxtPrrDHWDA-5EKsRFIX7zo"},
{"content":{"body":"Not sure I understand where dynamic scoping comes in","m.mentions":{},"msgtype":"m.text"},"ts":1707340031009,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$QpPZeG314lp4MNzdc3PHSYy27RNHHv-21QHOrxRl11w"},
{"content":{"body":"I was also under the impression that (aside from the question of how we expose it to JS) we got it mostly for free from the Wasm proposal, although I admit that I have been paying more attention to the JS side","m.mentions":{},"msgtype":"m.text"},"ts":1707340100690,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$lK_R0zcxV7NajA1cRwZfA0SAGvDZGji61PxjM7SUj14"},
{"content":{"body":"suppose the wasm function traps and needs to throw an exception. this exception needs to be materialized somehow. currently this is one of the ways in which functions are \"deeply unshareable\" in that you create Error instances from the _realm in which the function was created_","format":"org.matrix.custom.html","formatted_body":"suppose the wasm function traps and needs to throw an exception. this exception needs to be materialized somehow. currently this is one of the ways in which functions are \"deeply unshareable\" in that you create Error instances from the <em>realm in which the function was created</em>","m.mentions":{},"msgtype":"m.text"},"ts":1707340148789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$geOD34GGxPP-xCgRODgW2wKf02G8Yvte1my5__MNono"},
{"content":{"body":"this is a question that JS wrappers of shared wasm functions still need to answer","m.mentions":{},"msgtype":"m.text"},"ts":1707340161198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8kUCvipgKOgVcoyfXd-4ZCnPhZlh9XGfGIOmOnQnR9s"},
{"content":{"body":"an easy answer is: the realm of the wrapper, the wrapper is unshared","m.mentions":{},"msgtype":"m.text"},"ts":1707340170873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DyeWUUJwkjHJ2wNvshtYyLl049ROzcILRYFZxukjD0E"},
{"content":{"body":"a harder answer is: maybe the caller realm (what i meant by dynamic scope), since it's a special exotic callable","m.mentions":{},"msgtype":"m.text"},"ts":1707340184871,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ocVrbXoHNOkmUyU9R1GQKBVtMA9LqD7J2jy1JYwd6E8"},
{"content":{"body":"but i take the point this may be a promising avenue to explore again, in light of the wasm angle","m.mentions":{},"msgtype":"m.text"},"ts":1707340248686,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8jHPmk0P8WykrxT8ynWLD76nTRT8-55fAmBHGJqJZ9k"},
{"content":{"body":"Ah, I see. And the wasm proposal doesn't have to deal with this because the Error instance doesn't exist in wasm","m.mentions":{},"msgtype":"m.text"},"ts":1707340277752,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$aYgxagj46vwB8tCykeImD4Nbe6Ql0RYdMUOClGYlmyU"},
{"content":{"body":"It's just trapping and then the world ends?","m.mentions":{},"msgtype":"m.text"},"ts":1707340289282,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$u3srP77L5L9C0HcOlTsGQTqs0wNb9WeJXqVZmzjUXlA"},
{"content":{"body":"yep","m.mentions":{},"msgtype":"m.text"},"ts":1707340298285,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D1GWJ9m2TdGVGdbN7qDuwcwZD1BFXSrTSNg_Zk3eMeQ"},
{"content":{"body":"and it doesn't have a notion of like \"this realm's Array constructor\" or whatever either","m.mentions":{},"msgtype":"m.text"},"ts":1707340313128,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bsG-KgI6q-Fn_75-q-tIDXqCHVqhs7DfVJxGsvnxHD8"},
{"content":{"body":"a lot of the \"original sin\" comes down imo to JS functions being _too_ first class","format":"org.matrix.custom.html","formatted_body":"a lot of the \"original sin\" comes down imo to JS functions being <em>too</em> first class","m.mentions":{},"msgtype":"m.text"},"ts":1707340326758,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lPWgUal8IdF5tGYAqu_-GiLtRe_jvM9IJqGlWEAlKbM"},
{"content":{"body":"... I remember using \"LiveScript\" on the server around the same time it was introduced for the browser and became known as JavaScript ...","m.mentions":{},"msgtype":"m.text"},"ts":1707340358381,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZD_sNulTFMMzVLo44w5b2Z8vuC2dOiM3yYoB-8w_6ZU"},
{"content":{"body":"in Netscape SuiteSpot Server, IIRC","m.mentions":{},"msgtype":"m.text"},"ts":1707340404174,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j23Srj9Gm2hiNYIKEX7CoMvh1K0EnCssXeKhLzmEP1U"},
{"content":{"body":"Are there implementation issues with a special exotic callable, or is the blocker there just the problem of specifying it?","m.mentions":{},"msgtype":"m.text"},"ts":1707340404241,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$k4Hal7TRteFIAWfxIJytvUzLVw0vcMmGlhEnUOgLzWM"},
{"content":{"body":"i haven't thought deeply about impl concerns","m.mentions":{},"msgtype":"m.text"},"ts":1707340422276,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e6kcWTe9y5uAdDJyHZwM22AqCpUjgeCKfFghsP70vh8"},
{"content":{"body":"IIRC it was more about language complexity","m.mentions":{},"msgtype":"m.text"},"ts":1707340436895,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P1P2mbdT-MnoFRaVyPf4paMjK8YLGZ6h6Y0oCcQkbHU"},
{"content":{"body":"From an implementation perspective I think I would prefer the exotic callable, but maybe there's something I'm missing","m.mentions":{},"msgtype":"m.text"},"ts":1707340456212,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$abQp79ut79R4XNScMWjZiYQbDay6o0MMCyr78BB_T4M"},
{"content":{"body":"(like, these special things have a different `.apply` or something? different `.bind`?)","format":"org.matrix.custom.html","formatted_body":"(like, these special things have a different <code>.apply</code> or something? different <code>.bind</code>?)","m.mentions":{},"msgtype":"m.text"},"ts":1707340462350,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OJINu8PAu_XAJaVnY1tcc0O8z2Vn2slFEFdxlQtKXWg"},
{"content":{"body":"Let's go back to the wrapper idea for a second. Regular non-shared JS object, with the Function prototype for `.apply` and friends. Freeze it so that it's completely immutable. ","format":"org.matrix.custom.html","formatted_body":"Let's go back to the wrapper idea for a second. Regular non-shared JS object, with the Function prototype for <code>.apply</code> and friends. Freeze it so that it's completely immutable.","m.mentions":{},"msgtype":"m.text"},"ts":1707340607563,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$ZS6omfi6G8X5pYzxB-c0qbyx2WY61g-l8db1TSZH0s0"},
{"content":{"body":"which realm's Function prototype?","m.mentions":{},"msgtype":"m.text"},"ts":1707340656163,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GsWPmVysNjUZ1VKrhpEi38s5QgeS6xmiSXFxhROluZQ"},
{"content":{"body":"The current realm? Maybe there's a separate instance per-realm.","m.mentions":{},"msgtype":"m.text"},"ts":1707340692977,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$khSrQgia03WjUks3elJgZh1vXCxQeYLKFJ_HGLUtgrc"},
{"content":{"body":"then isn't that... TLS prototypes","m.mentions":{},"msgtype":"m.text"},"ts":1707340713395,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bXGUcZp09oCA7ZPUh3diZITGbqeFLAmbrxNpgF9SqAc"},
{"content":{"body":"What I'm trying to think through is whether we can just keep it in a weak map that doesn't care about other threads, because if there's no local edge to it and you collect it, then you just create it again from scratch","m.mentions":{},"msgtype":"m.text"},"ts":1707340752940,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$cTLkXKYze8szUx9UAzJN2H7pkEPaNy4gE6fL-DMpogY"},
{"content":{"body":"You won't have pointer identity, but that's unobservable because we've postulated that we could collect it, so there wasn't another copy of the pointer","m.mentions":{},"msgtype":"m.text"},"ts":1707340781237,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$AqSb37IC-_axKbMCT_9N9XeACJpxgZPkOPzKkMiSh5w"},
{"content":{"body":"oh","m.mentions":{},"msgtype":"m.text"},"ts":1707340783339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZI-meBHNxEPEOJLtqdzIXwEHslI4rh54pueqpQKKIeQ"},
{"content":{"body":"that's a different semantics that Luke Wagner brought up in a different context","m.mentions":{},"msgtype":"m.text"},"ts":1707340797472,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qzOR4tim-JkF_-ApxLWIN_ln2ZKNcfwzRKL5BXBpIxU"},
{"content":{"body":"i didn't have time to get to it during the agenda item","m.mentions":{},"msgtype":"m.text"},"ts":1707340804162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sC6XztEJL9mhZLT7s2Obo8hGAUKypraWueIxond43hw"},
{"content":{"body":"it's just kinda slow to have all these weak maps and wrappers, isn't it?","m.mentions":{},"msgtype":"m.text"},"ts":1707340835602,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LoK_M5PHw682jwT9r7lV68vHX_G43UUmPDVi6ITJWE8"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1707340847957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ojcPV_ZJA-UZwjtHiEzpHYFpG9y2QOtS4Vo2Wwot8XE"},
{"content":{"body":"definitely needs to be validated","m.mentions":{},"msgtype":"m.text"},"ts":1707340857178,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2I864MT7y2vn1VszNRyGZMbOj_QckCVL9RFmRfS9oGw"},
{"content":{"body":"leobalter: can you add your name to the notes document?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: can you add your name to the notes document?","m.mentions":{"user_ids":["@leobalter:matrix.org"]},"msgtype":"m.text"},"ts":1707340868850,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$d-LSP7laEj0-T0caYjZqAwXbx4xMK8O129P-piOVCNE"},
{"content":{"body":"i feel like there is too much nuance for us to ever come up with a more concrete process than what we currently have","m.mentions":{},"msgtype":"m.text"},"ts":1707340889857,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_z_mY-iC7kmDSRI9X-k2H8DQXIMCOxc5cYIKvh3qDmY"},
{"content":{"body":"shu: SM is working on an architectural review of shared structs. Hoping to have it ready soon, although there's been enough new information today that it will take a little bit to digest it.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: SM is working on an architectural review of shared structs. Hoping to have it ready soon, although there's been enough new information today that it will take a little bit to digest it.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1707340959686,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$Jy2LB24RF0zuNQ5pDqMuiCv8p0tJfvPGiyR3Q7P_Tf4"},
{"content":{"body":"Are there regular meetings for this proposal? Maybe I should be attending them","m.mentions":{},"msgtype":"m.text"},"ts":1707340972074,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$hehnn6vyZX9TOmt8L262j3NUqy8jUsdGnhBMh1Y3otQ"},
{"content":{"body":"> <@iain:mozilla.org> shu: SM is working on an architectural review of shared structs. Hoping to have it ready soon, although there's been enough new information today that it will take a little bit to digest it.\n\nthere is a working call on the TC39 calendar, yeah","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Jy2LB24RF0zuNQ5pDqMuiCv8p0tJfvPGiyR3Q7P_Tf4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: SM is working on an architectural review of shared structs. Hoping to have it ready soon, although there's been enough new information today that it will take a little bit to digest it.</blockquote></mx-reply>there is a working call on the TC39 calendar, yeah","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Jy2LB24RF0zuNQ5pDqMuiCv8p0tJfvPGiyR3Q7P_Tf4"}},"msgtype":"m.text"},"ts":1707341017184,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2kEmGIjbLNgrNmDidf1eGaSMM-sCtkmrdVsYVG2gw_4"},
{"content":{"body":"and cool! looking forward to review","m.mentions":{},"msgtype":"m.text"},"ts":1707341028107,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8MmUPQyr_1FQzY9xkh02ZZStXjVw428swPVYqhbk_GU"},
{"content":{"body":"that was a beautiful point Richard Gibson: \"lone\" objectors are possibly only alone because the people they represent aren't in the room","format":"org.matrix.custom.html","formatted_body":"that was a beautiful point <a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: \"lone\" objectors are possibly only alone because the people they represent aren't in the room","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1707341097799,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R7nKPS-wEjC9ajNM4MkSR3UQnYjo2weQkVlq8xqhCOw"},
{"content":{"body":"or, are in the room but unwilling to speak up - not everyone has the same comfort level with dissent","m.mentions":{},"msgtype":"m.text"},"ts":1707341157977,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$59Y09Bz3IdhG0TjAiCE62Df1B-vXBfowA2WpYnlRE8w"},
{"content":{"body":"I'm not as sympathetic to that ljharb ","format":"org.matrix.custom.html","formatted_body":"I'm not as sympathetic to that <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707341180212,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7DbaJhSIbrad0BL-KWE4HOiRKhWNk2N517sjCdbtGbg"},
{"content":{"body":"Shane (SFC) can you add your name to the notes document?","m.mentions":{},"msgtype":"m.text"},"ts":1707341192634,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$UsXNUxjKb4-LvAam07A8CfRWJdbU-Ts06YNd0ZdeH8c"},
{"content":{"body":"dissenting typically implies responsibility for finding a solution as well","m.mentions":{},"msgtype":"m.text"},"ts":1707341192639,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wdL5mrwpV0_DAch0G6Ax-Ggp9LrkSXOOTkG2nZ5M8ZA"},
{"content":{"body":" * dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with","m.mentions":{},"m.new_content":{"body":"dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wdL5mrwpV0_DAch0G6Ax-Ggp9LrkSXOOTkG2nZ5M8ZA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341201480,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$blxOz23fHVNaCuO02LPEMdtnv0DtDdHPr23IoUHgEuM"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'm not as sympathetic to that ljharb\n\ni think sympathy to that should match 1:1 with sympathy to concerns about inhibiting newcomers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7DbaJhSIbrad0BL-KWE4HOiRKhWNk2N517sjCdbtGbg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I'm not as sympathetic to that <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a></blockquote></mx-reply>i think sympathy to that should match 1:1 with sympathy to concerns about inhibiting newcomers","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7DbaJhSIbrad0BL-KWE4HOiRKhWNk2N517sjCdbtGbg"}},"msgtype":"m.text"},"ts":1707341204861,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h9lofTmoLfcaUtIqHo0ILQXJZkyfTidDQFvffSroGMw"},
{"content":{"body":"while that's sometimes true, it's also often not true; some delegates work on things that no one else is really doing, or have concerns about language specification purity which are relevant only to consumers of the language specification, rather than to developers","m.mentions":{},"msgtype":"m.text"},"ts":1707341208738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MaZb7s0LLgO41tryFszLiiTi3Hd7hVzKRiO2x-e3oss"},
{"content":{"body":"> <@devsnek:matrix.org> dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with\n\nsometimes yes. but there isn't always a solution to be had, and people often have trouble accepting that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wdL5mrwpV0_DAch0G6Ax-Ggp9LrkSXOOTkG2nZ5M8ZA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with</blockquote></mx-reply>sometimes yes. but there isn't always a solution to be had, and people often have trouble accepting that.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wdL5mrwpV0_DAch0G6Ax-Ggp9LrkSXOOTkG2nZ5M8ZA"}},"msgtype":"m.text"},"ts":1707341227678,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hlkDb74aWzkqOhkS0himU444ysVkGtGjw0Zf0Qh1IF8"},
{"content":{"body":"> <@devsnek:matrix.org> dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with\n\n * sometimes yes. but there isn't always a solution to be had, and people often have trouble accepting it when there is none.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wdL5mrwpV0_DAch0G6Ax-Ggp9LrkSXOOTkG2nZ5M8ZA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>dissenting typically implies responsibility for finding a solution as well, its not something you always want to deal with</blockquote></mx-reply> * sometimes yes. but there isn't always a solution to be had, and people often have trouble accepting it when there is none.","m.mentions":{},"m.new_content":{"body":"sometimes yes. but there isn't always a solution to be had, and people often have trouble accepting it when there is none.","format":"org.matrix.custom.html","formatted_body":"sometimes yes. but there isn't always a solution to be had, and people often have trouble accepting it when there is none.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hlkDb74aWzkqOhkS0himU444ysVkGtGjw0Zf0Qh1IF8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341239436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vhhsh1ydgDzjYyO4iy7Jmx3s4tTTL_qE1E1viYGej68"},
{"content":{"body":"diffusion of responsibility is often at play","m.mentions":{},"msgtype":"m.text"},"ts":1707341244588,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4ZdXUHjsQCwISXZMLDzjXjfRN0VGqN5ybznGXTHFjGs"},
{"content":{"body":"At the time that unanimity was established was when only VM implementers were present at the table and there was no point in making a standard that any one of them was unwilling to implement.","m.mentions":{},"msgtype":"m.text"},"ts":1707341428038,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KUzrVVkl1xQ29peS5L1jB2w97kVfqHTgOcc85o6uAdM"},
{"content":{"body":"I’m in favor of keeping the consensus by unanimity, even though we’re not living in that historical context.","m.mentions":{},"msgtype":"m.text"},"ts":1707341472110,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$f3PY03GORlBCzkAmq74QjO74Bjq1FUtoRdjjn0BSCfU"},
{"content":{"body":"i very strongly agree with everything mark is saying right now","m.mentions":{},"msgtype":"m.text"},"ts":1707341486319,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nSamkHuJ_7_JuaM9SAixmFPF0TUnE16FwWrwq8O92Fc"},
{"content":{"body":"Is there a list of \"known phrases\" that the bot knows about?","m.mentions":{},"msgtype":"m.text"},"ts":1707341499153,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$izn5cPAJTQaYV_sW91GFI9BAj6ifB_tloYNgWnnAzFc"},
{"content":{"body":" * Is there a list of \"known phrases\" that the transcription bot knows about?","m.mentions":{},"m.new_content":{"body":"Is there a list of \"known phrases\" that the transcription bot knows about?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$izn5cPAJTQaYV_sW91GFI9BAj6ifB_tloYNgWnnAzFc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341503891,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$izBiu6kRNHn0lWCflS5Dc-pL1tDXzZD4anc5zsn0usE"},
{"content":{"body":"danielrosenwasser: we have a human transcriptionist","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: we have a human transcriptionist","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1707341508259,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ourpoj_6udartZ4FvbAKAKJGUrFf9ojy9n0kFJv4XQc"},
{"content":{"body":"oh but for the transcribe bot? yes but it's very very short","m.mentions":{},"msgtype":"m.text"},"ts":1707341516885,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QV1yo1b1Qd211jc8vzKg3afKB6xBAM71dq9xdHu_F1o"},
{"content":{"body":"`EMCAScript` keeps getting put in the notes","format":"org.matrix.custom.html","formatted_body":"<code>EMCAScript</code> keeps getting put in the notes","m.mentions":{},"msgtype":"m.text"},"ts":1707341530207,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$2IXekCMLvMc7-W8dXXELILb4s1i-uWINIQbGVh5nGk0"},
{"content":{"body":"```\nconst REPLACEMENTS = [\n  [/\\bsho(?:e|ot?)\\b/gi, 'Shu'],\n  [/\\b(, )?u(h|m),?\\b/gi, ''],\n  [/\\bIntel\\b/gi, 'Intl'],\n  [/\\bagalya\\b/gi, 'Igalia'],\n  [/\\bregalia\\b/gi, 'Igalia'],\n  [/\\bgalia\\b/gi, 'Igalia'],\n];\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>const REPLACEMENTS = [\n  [/\\bsho(?:e|ot?)\\b/gi, 'Shu'],\n  [/\\b(, )?u(h|m),?\\b/gi, ''],\n  [/\\bIntel\\b/gi, 'Intl'],\n  [/\\bagalya\\b/gi, 'Igalia'],\n  [/\\bregalia\\b/gi, 'Igalia'],\n  [/\\bgalia\\b/gi, 'Igalia'],\n];\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707341532761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UbefpP6gN5g9lYcdpXqSh-ZhY3WjVRX2j3SFGMrvWig"},
{"content":{"body":"I truly wonder if a decision regarding the consensus process requires TC consensus or actual member vote.","m.mentions":{},"msgtype":"m.text"},"ts":1707341553223,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$4XGs6SYKU2W6GAS296nDaHDHKzSNUeiF2JQhyMEcr9I"},
{"content":{"body":"the catch 22 which must not be named","m.mentions":{},"msgtype":"m.text"},"ts":1707341591395,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$kaOyu7PqLXbF6IEYfZUL9_OkqE81FnumvVa-g0PxIgg"},
{"content":{"body":"a member vote would suffice but that'd be a failure of the consensus process that we all currently agree to follow","m.mentions":{},"m.relates_to":{"event_id":"$4XGs6SYKU2W6GAS296nDaHDHKzSNUeiF2JQhyMEcr9I","is_falling_back":true,"m.in_reply_to":{"event_id":"$4XGs6SYKU2W6GAS296nDaHDHKzSNUeiF2JQhyMEcr9I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707341594616,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rYUUN8tIWiQUVHM5ojPFJHrYqVm8hk4XBTgx-KPTGOE"},
{"content":{"body":"Consensus should be ideal, but it seems like a can of worms otherwise.\n\nWe are using consensus to change what consensus means. It's not a simple process.","m.mentions":{},"m.relates_to":{"event_id":"$4XGs6SYKU2W6GAS296nDaHDHKzSNUeiF2JQhyMEcr9I","is_falling_back":true,"m.in_reply_to":{"event_id":"$rYUUN8tIWiQUVHM5ojPFJHrYqVm8hk4XBTgx-KPTGOE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707341688573,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$-L4b0BUey0WfcwWg2gDtpMfR2wUghS-rT-96m7hGqmI"},
{"content":{"body":"> <@devsnek:matrix.org> i very strongly agree with everything mark is saying right now\n\nI disagree with the idea that \"do nothing\" is \"fail safe\". I particularly disagree with it in light of the previous conversation; I really wish it were better understood that failing to provide a good story for parallelism on the web means the experience of using the web is notably slower than it should be, and that is a cost which is measured in small fractions of billions people's lives every day","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nSamkHuJ_7_JuaM9SAixmFPF0TUnE16FwWrwq8O92Fc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i very strongly agree with everything mark is saying right now</blockquote></mx-reply>I disagree with the idea that \"do nothing\" is \"fail safe\". I particularly disagree with it in light of the previous conversation; I really wish it were better understood that failing to provide a good story for parallelism on the web means the experience of using the web is notably slower than it should be, and that is a cost which is measured in small fractions of billions people's lives every day","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nSamkHuJ_7_JuaM9SAixmFPF0TUnE16FwWrwq8O92Fc"}},"msgtype":"m.text"},"ts":1707341705435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QprS3XeYSRGawzT-LpIUWyU-jFRdqf7AFzUmZlSjae0"},
{"content":{"body":"I realize that is maybe dramatic but it's also true and we ought to care about that cost","m.mentions":{},"msgtype":"m.text"},"ts":1707341728438,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kBh4UJQI5UZjFwd7nUTBDgAyYt9fLcCCi1R3iET8tfA"},
{"content":{"body":"ps if it takes 2 member companies to veto, then that means it only costs $7000 to block anything.","m.mentions":{},"msgtype":"m.text"},"ts":1707341735865,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IN4-xnbr4g_HBCKVp1b5Geg8c70eSW6rZZW6Y5s2cCY"},
{"content":{"body":"Too much that can be discussed as formality. We need this to evolve more to discuss the format ","m.mentions":{},"m.relates_to":{"event_id":"$4XGs6SYKU2W6GAS296nDaHDHKzSNUeiF2JQhyMEcr9I","is_falling_back":true,"m.in_reply_to":{"event_id":"$-L4b0BUey0WfcwWg2gDtpMfR2wUghS-rT-96m7hGqmI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707341744993,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$RU0k-bhXN5YW4iP7VHWr-ah5X3IZkCA6kiRW-9zdF1Q"},
{"content":{"body":"> <@bakkot:matrix.org> I realize that is maybe dramatic but it's also true and we ought to care about that cost\n\nif persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kBh4UJQI5UZjFwd7nUTBDgAyYt9fLcCCi1R3iET8tfA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I realize that is maybe dramatic but it&#39;s also true and we ought to care about that cost</blockquote></mx-reply>if persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kBh4UJQI5UZjFwd7nUTBDgAyYt9fLcCCi1R3iET8tfA"}},"msgtype":"m.text"},"ts":1707341774265,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YtY8OfjdnWtIxd_3lSwpvPaYUZ9iQwbEk6WC0J7xftQ"},
{"content":{"body":"ecma is literally pay to participate though","m.mentions":{},"msgtype":"m.text"},"ts":1707341775120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e1DNPeK6GvPPrccdtotp4T24W_iBi13AR6OKi4dyJH0"},
{"content":{"body":"ljharb: that would be bad faith","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: that would be bad faith","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1707341780412,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$541mhpIIejyZ7WuGBeod88_hvHLmrD3YZp4Mkl4y9IE"},
{"content":{"body":"we would just ignore it","m.mentions":{},"msgtype":"m.text"},"ts":1707341787474,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Jykb63gyEkoqcBm6gmCtqo7rxWDs9UXGYx8n6XLl8c0"},
{"content":{"body":"> <@michaelficarra:matrix.org> ljharb: that would be bad faith\n\nabsolutely it would. but it wouldn't be provable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$541mhpIIejyZ7WuGBeod88_hvHLmrD3YZp4Mkl4y9IE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: that would be bad faith</blockquote></mx-reply>absolutely it would. but it wouldn't be provable.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$541mhpIIejyZ7WuGBeod88_hvHLmrD3YZp4Mkl4y9IE"}},"msgtype":"m.text"},"ts":1707341805717,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UMNqpLofmTFxIGA0rtZJH4xk0SEIk5sxBAkQgxUbcmo"},
{"content":{"body":"i'm not saying it's a reasonable tactic, i'm just reinforcing that it's impossible to prevent weaponization","m.mentions":{},"msgtype":"m.text"},"ts":1707341834572,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7viGUKPnrqyfc_ON8R7Uf29LH4xmo83diCsl6_XYkHY"},
{"content":{"body":"> <@bakkot:matrix.org> I disagree with the idea that \"do nothing\" is \"fail safe\". I particularly disagree with it in light of the previous conversation; I really wish it were better understood that failing to provide a good story for parallelism on the web means the experience of using the web is notably slower than it should be, and that is a cost which is measured in small fractions of billions people's lives every day\n\ni agree that this is frustrating but i can't think of a process that strictly improves this problem in the general sense","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QprS3XeYSRGawzT-LpIUWyU-jFRdqf7AFzUmZlSjae0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I disagree with the idea that \"do nothing\" is \"fail safe\". I particularly disagree with it in light of the previous conversation; I really wish it were better understood that failing to provide a good story for parallelism on the web means the experience of using the web is notably slower than it should be, and that is a cost which is measured in small fractions of billions people's lives every day</blockquote></mx-reply>i agree that this is frustrating but i can't think of a process that strictly improves this problem in the general sense","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QprS3XeYSRGawzT-LpIUWyU-jFRdqf7AFzUmZlSjae0"}},"msgtype":"m.text"},"ts":1707341834750,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0QkY4ImnN0J1tGh06ZeL12YZVlblolfxjr2UYxfALDo"},
{"content":{"body":"> <@ljharb:matrix.org> if persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice\n\nif the objector will not change their mind, then we weight the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is _overwhelmingly_ higher","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YtY8OfjdnWtIxd_3lSwpvPaYUZ9iQwbEk6WC0J7xftQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice</blockquote></mx-reply>if the objector will not change their mind, then we weight the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is <em>overwhelmingly</em> higher","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YtY8OfjdnWtIxd_3lSwpvPaYUZ9iQwbEk6WC0J7xftQ"}},"msgtype":"m.text"},"ts":1707341838766,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kD9OtrqdG85cZY5mXsbbFk6xLvE8u_eBr2OLihe7IkE"},
{"content":{"body":"> <@ljharb:matrix.org> if persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice\n\n * if the objector will not change their mind, then we weigh the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is _overwhelmingly_ higher","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YtY8OfjdnWtIxd_3lSwpvPaYUZ9iQwbEk6WC0J7xftQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if persuasion and discussion are not effective at convincing objectors to care about that cost then i don't think the solution is silencing that objector's voice</blockquote></mx-reply> * if the objector will not change their mind, then we weigh the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is <em>overwhelmingly</em> higher","m.mentions":{},"m.new_content":{"body":"if the objector will not change their mind, then we weigh the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is _overwhelmingly_ higher","format":"org.matrix.custom.html","formatted_body":"if the objector will not change their mind, then we weigh the cost of overruling them against the cost of doing nothing, and I think in some cases - notably in the case of parallelism - the cost of doing nothing is <em>overwhelmingly</em> higher","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kD9OtrqdG85cZY5mXsbbFk6xLvE8u_eBr2OLihe7IkE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341847136,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xrZj_7zgCVvJB3FxzaF0x3J8BP377yP8VFGexGqMD3k"},
{"content":{"body":"> <@ljharb:matrix.org> ps if it takes 2 member companies to veto, then that means it only costs $7000 to block anything.\n\nyou can't just pay to block things. Hax tried this and it didn't work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IN4-xnbr4g_HBCKVp1b5Geg8c70eSW6rZZW6Y5s2cCY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ps if it takes 2 member companies to veto, then that means it only costs $7000 to block anything.</blockquote></mx-reply>you can't just pay to block things. Hax tried this and it didn't work.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IN4-xnbr4g_HBCKVp1b5Geg8c70eSW6rZZW6Y5s2cCY"}},"msgtype":"m.text"},"ts":1707341849606,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gcUGgZOeOJRzn_0brkXcnvNDanzjt3U-0X3r5An7_Qk"},
{"content":{"body":"right. so it didn't work despite our current process","m.mentions":{},"msgtype":"m.text"},"ts":1707341874078,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uxFzvh2NrAstVdXouXXtS7CNH47DpLcIBlasr1yyOY8"},
{"content":{"body":" * right. so it didn't work despite our current process. so changing it won't stop it from working any further.","m.mentions":{},"m.new_content":{"body":"right. so it didn't work despite our current process. so changing it won't stop it from working any further.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uxFzvh2NrAstVdXouXXtS7CNH47DpLcIBlasr1yyOY8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341884540,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tEKBNnQZdh2Y26ZpM0Seygt22wMYL5lvOKVk60F35G8"},
{"content":{"body":" * right. so it didn't work despite our current process. so changing our process won't stop it _more_ from working.","format":"org.matrix.custom.html","formatted_body":" * right. so it didn't work despite our current process. so changing our process won't stop it <em>more</em> from working.","m.mentions":{},"m.new_content":{"body":"right. so it didn't work despite our current process. so changing our process won't stop it _more_ from working.","format":"org.matrix.custom.html","formatted_body":"right. so it didn't work despite our current process. so changing our process won't stop it <em>more</em> from working.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uxFzvh2NrAstVdXouXXtS7CNH47DpLcIBlasr1yyOY8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707341906304,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$40D_CiiDzohnHpcjhn46Bo-PlhIowUOvkiGbbwcPJPI"},
{"content":{"body":"it didn't work for one main reason, which is that he was part of the outgroup","m.mentions":{},"msgtype":"m.text"},"ts":1707341912398,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4D-XiTpj0tSenp6MX2suMXxEriCWVUCnqxCXuceOWAc"},
{"content":{"body":"the weaponization msaboff alludes to is by members of the long-standing ingroup","m.mentions":{},"msgtype":"m.text"},"ts":1707341926445,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dekOULW2xusVVmtFBccobaA03H3x20SggjB14wMn6fg"},
{"content":{"body":"As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking process. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require _sustained_ objection to block a thing with a small minority.","format":"org.matrix.custom.html","formatted_body":"As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking process. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require <em>sustained</em> objection to block a thing with a small minority.","m.mentions":{},"msgtype":"m.text"},"ts":1707342029310,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$kbGBPxk-JkpJsvGuygBiTLZg5Lva9fexMxfWsGrYKlA"},
{"content":{"body":"😞 this was nowhere near enough time for this topic","m.mentions":{},"msgtype":"m.text"},"ts":1707342029903,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JwVhOfaFCyvMyuhi_Iq8C52l4A_hmgPuxND4PPFBo4U"},
{"content":{"body":" * As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require _sustained_ objection to block a thing with a small minority.","format":"org.matrix.custom.html","formatted_body":" * As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require <em>sustained</em> objection to block a thing with a small minority.","m.mentions":{},"m.new_content":{"body":"As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require _sustained_ objection to block a thing with a small minority.","format":"org.matrix.custom.html","formatted_body":"As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require <em>sustained</em> objection to block a thing with a small minority.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kbGBPxk-JkpJsvGuygBiTLZg5Lva9fexMxfWsGrYKlA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707342054333,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$CN0-fV8bYVTnMOtjSEQhiYyh9hIS1z4lD_29RElokP0"},
{"content":{"body":"> <@eemeli:mozilla.org> As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require _sustained_ objection to block a thing with a small minority.\n\nI think that would actually be _worse_ than the current process; I don't think anyone who lone-objects at one meeting under the current process would not also want to lone-object at the next meeting, so it would just be about whether they had the resources to attend the next meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kbGBPxk-JkpJsvGuygBiTLZg5Lva9fexMxfWsGrYKlA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>As we'll likely run out of time here, my thought: We should mitigate the negatives of a lone objector blocking progress. One way to do that would be to automate the re-presentation of decisions with a lone objector at a near-future meeting, allowing and expecting discussion to happen in the interim. So effectively require <em>sustained</em> objection to block a thing with a small minority.</blockquote></mx-reply>I think that would actually be <em>worse</em> than the current process; I don't think anyone who lone-objects at one meeting under the current process would not also want to lone-object at the next meeting, so it would just be about whether they had the resources to attend the next meeting","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kbGBPxk-JkpJsvGuygBiTLZg5Lva9fexMxfWsGrYKlA"}},"msgtype":"m.text"},"ts":1707342110405,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eNp73gvq27B6i-mxirV9ll2ONBkVOciHm7k-scaJ8Ps"},
{"content":{"body":"which is very much not the criteria we ought to use","m.mentions":{},"msgtype":"m.text"},"ts":1707342121530,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AAEuSpZS-eKD1UfP7VJ8sINOMp75ASOSeVrLCzlvizk"},
{"content":{"body":"omg I agree so hard with Dan right now","m.mentions":{},"msgtype":"m.text"},"ts":1707342141157,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_lk6QeQKN5f_91WBmHdipKbJedM3uyifDLyne2nJ7hs"},
{"content":{"body":"you also agreed hard with mark earlier","m.mentions":{},"msgtype":"m.text"},"ts":1707342157137,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LuIGf6F3nfr0aDixx0Fn-G-tI5Bs7YpbisjVVzfnPsw"},
{"content":{"body":"confused","m.mentions":{},"msgtype":"m.text"},"ts":1707342160042,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mOmYnfVZldLOO1GC5Osk2TpCQtsrappmCR_SDyvLpOg"},
{"content":{"body":"not me","m.mentions":{},"msgtype":"m.text"},"ts":1707342167071,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5FlQrJAqAvktH5hXKYgnjdMzqRukHz_Fhph5nYcmubg"},
{"content":{"body":"ah, my bad","m.mentions":{},"msgtype":"m.text"},"ts":1707342171500,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wv38VCt0so_qijKcVa_r3mk8gdk4z7TGVENCrCE86AA"},
{"content":{"body":"i agreed with mark","m.mentions":{},"msgtype":"m.text"},"ts":1707342173060,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tRQovwfcuCpmWOacDm4PUEFmTG4WMpX3Onj3gzXlYEE"},
{"content":{"body":"but yes i also agree with dan","m.mentions":{},"msgtype":"m.text"},"ts":1707342190441,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$no04seBbwvVSDG32taoKl1518lCLRJo0DtgCSXeR_Ak"},
{"content":{"body":"I should've also said: blocks are really really really discouraging and *do* stop progress, even if people don't mean it to","format":"org.matrix.custom.html","formatted_body":"I should've also said: blocks are really really really discouraging and <em>do</em> stop progress, even if people don't mean it to","m.mentions":{},"msgtype":"m.text"},"ts":1707342257785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BZKAqcW_RmluhYcvmBpLknT-1jb966UFCfUea5TAmiU"},
{"content":{"body":"i'm not against improving things, i just feel like we're playing with a very delicately balanced bomb","m.mentions":{},"msgtype":"m.text"},"ts":1707342258765,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xlyeD1C2XOssc5jwCgncIGcX7T_b3Ue5W2Cianqcqpg"},
{"content":{"body":"I honestly just hope we end some paths for delegate burnout. This is a very sensitive topic and I'd love to keep the convo when time allows.","m.mentions":{},"msgtype":"m.text"},"ts":1707342279758,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$fV4frVkoAbWiB-tQBs1UmeBL5xRGUXxI-XgRBB1GG-Y"},
{"content":{"body":"Blocks definitely cause delegate burnout, this is unquestionable","m.mentions":{},"msgtype":"m.text"},"ts":1707342292238,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XHiC8J_L-_SrZEdX7Kd2PJ4N-nBs0Jka3w_hMC0EGYg"},
{"content":{"body":"it has many knock on effects, delegate burnout the worst among them for individual well-being","m.mentions":{},"msgtype":"m.text"},"ts":1707342315880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p7Zy-aiCIdixqH14jUdbcln8wVldqeUWmQc8jeC7qqk"},
{"content":{"body":"I also should've said: I'm really confident that everyone here just wants what's best for JS, and we're just trying to figure out the way to collect the data and judgements we're all bringing","m.mentions":{},"msgtype":"m.text"},"ts":1707342317687,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lUjvfnnRuSg2rK78TA2XG7YY4XWJfnHdBRpHPoQYEHE"},
{"content":{"body":"TC39 lost some considerate participations and I totally sympathize with the idea of trying to resolve this. I don't have an answer ready on how we do this. ","m.mentions":{},"msgtype":"m.text"},"ts":1707342350900,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$BjlQ-7Nz1wzoonY9RbjWhap-ClTRS1fBOq8yidTJyK4"},
{"content":{"body":"it encourages shop venue, and in the limit, it encourages erosion of the weight of tc39 itself","m.mentions":{},"msgtype":"m.text"},"ts":1707342354365,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LqsPX9zS4nPE8wWq-vA7op0OlmnmORRowiplk5YIWIo"},
{"content":{"body":" * it encourages to shop venues, and in the limit, it encourages erosion of the weight of tc39 itself","m.mentions":{},"m.new_content":{"body":"it encourages to shop venues, and in the limit, it encourages erosion of the weight of tc39 itself","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LqsPX9zS4nPE8wWq-vA7op0OlmnmORRowiplk5YIWIo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707342361752,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4EKrKNckabctAoL1Nd8suqmE1ZVoXjyd06k_i2YGqm8"},
{"content":{"body":"lol stop putting new things on the queue please, we're trying to drain it","m.mentions":{},"msgtype":"m.text"},"ts":1707342658119,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vAt3NXW_VvM4occALWNZjSOpSAXi7rIzD-Lc9RYmZ-Y"},
{"content":{"body":"it would be an improvement if voices had the same weight. Right now, we weigh people higher if they have a propensity to veto","m.mentions":{},"msgtype":"m.text"},"ts":1707342661587,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P228nrRt76h18pRmZv74rMH19KdnO-MvL6qRY5bmarU"},
{"content":{"body":"i don't think voices should have the same weight","m.mentions":{},"msgtype":"m.text"},"ts":1707342745624,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9Zx6es92migV7zU5hiWiro64sMBym65WdkY7K_5uX3w"},
{"content":{"body":"but giving propensity to veto higher veto is much worse than equal weight","m.mentions":{},"msgtype":"m.text"},"ts":1707342753611,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m-dI3mJxSZqetnYie-KwalntWLgammUQcnHuDtJKI1A"},
{"content":{"body":" * but giving propensity to veto higher weight is much worse than equal weight","m.mentions":{},"m.new_content":{"body":"but giving propensity to veto higher weight is much worse than equal weight","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$m-dI3mJxSZqetnYie-KwalntWLgammUQcnHuDtJKI1A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707342764772,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jLIc-TpQ541iCgZVKUbT5QFZpW-1hMeaVy1hqS7cHz8"},
{"content":{"body":"We should understand what different stakeholders represent, and make decisions with that in mind. But I think the committee currently has equality as a goal/mostly shared value, and I hope it stays that way, and that we can reinforce it more.","m.mentions":{},"msgtype":"m.text"},"ts":1707342790674,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vKESeCUd_jGJQwSjYE2tp3rwH9i8VCWoIEwpazVFATs"},
{"content":{"body":"I think I would put it this way:\n\nThe veto process means that we say the risk of doing the wrong thing is _always_ more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, new capabilities and APIs for performance, the cost of doing nothing is actually quite high.\n\nOur process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.","format":"org.matrix.custom.html","formatted_body":"<p>I think I would put it this way:</p>\n<p>The veto process means that we say the risk of doing the wrong thing is <em>always</em> more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, new capabilities and APIs for performance, the cost of doing nothing is actually quite high.</p>\n<p>Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707342936636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY"},
{"content":{"body":"msaboff: I highly encourage we continue discussing this. Thank you for bringing it up to TC39!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: I highly encourage we continue discussing this. Thank you for bringing it up to TC39!","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"msgtype":"m.text"},"ts":1707342983598,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$jr8fBzJzITN4v9rm6u7sAfbMUTFN9GmHvTF59wI-ggY"},
{"content":{"body":" * I think I would put it this way:\n\nThe veto process means that we say the risk of doing the wrong thing is _always_ more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.\n\nOur process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.","format":"org.matrix.custom.html","formatted_body":" * <p>I think I would put it this way:</p>\n<p>The veto process means that we say the risk of doing the wrong thing is <em>always</em> more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.</p>\n<p>Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.</p>\n","m.mentions":{},"m.new_content":{"body":"I think I would put it this way:\n\nThe veto process means that we say the risk of doing the wrong thing is _always_ more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.\n\nOur process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.","format":"org.matrix.custom.html","formatted_body":"<p>I think I would put it this way:</p>\n<p>The veto process means that we say the risk of doing the wrong thing is <em>always</em> more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.</p>\n<p>Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343007986,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EYxJ5ruoD7iABnsmbH1_lfi28y8izTJDgwqMh6UAvcw"},
{"content":{"body":"does anyone remember which meeting shadowrealms was dropped to stage 2?","m.mentions":{},"msgtype":"m.text"},"ts":1707343086632,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$brbjySslI12gH-4RPLoxsv2wUqdo03ru5XCjJBbYV1E"},
{"content":{"body":"Per what danielrosenwasser said, it would definitely help if lone dissenters became actively involved in the proposal to help address concerns. Vetoing a proposal and walking away when that proposal has otherwise broad support isn't helpful.","format":"org.matrix.custom.html","formatted_body":"Per what <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a> said, it would definitely help if lone dissenters became actively involved in the proposal to help address concerns. Vetoing a proposal and walking away when that proposal has otherwise broad support isn't helpful.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1707343095069,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BmdwDc7ASitqmGJfjfmE28EWRIaxg5C8oC_KUu_Gvas"},
{"content":{"body":"> <@ljharb:matrix.org> does anyone remember which meeting shadowrealms was dropped to stage 2?\n\nsept 2023 iirc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$brbjySslI12gH-4RPLoxsv2wUqdo03ru5XCjJBbYV1E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>does anyone remember which meeting shadowrealms was dropped to stage 2?</blockquote></mx-reply>sept 2023 iirc","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$brbjySslI12gH-4RPLoxsv2wUqdo03ru5XCjJBbYV1E"}},"msgtype":"m.text"},"ts":1707343115822,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ItAWY5b7WokvGtv9XJP3ScyXXUWA-MCIrlysYQ9bcoQ"},
{"content":{"body":"(\"relatively costless\" is the wrong way of putting it, since in every case blocking certainly has costs on delegates, which are quite real and I don't want to leave those out.)","m.mentions":{},"msgtype":"m.text"},"ts":1707343118631,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S9C-qNoQhZlWq0g-g1twFlF1iSos5dgBRq1JExHzAoQ"},
{"content":{"body":" * (\"relatively costless\" is the wrong way of putting it, since in every case blocking certainly has costs on delegates, which are quite real and I don't want to leave those out. but the costs are of a different kind than the costs of the web being slower)","m.mentions":{},"m.new_content":{"body":"(\"relatively costless\" is the wrong way of putting it, since in every case blocking certainly has costs on delegates, which are quite real and I don't want to leave those out. but the costs are of a different kind than the costs of the web being slower)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$S9C-qNoQhZlWq0g-g1twFlF1iSos5dgBRq1JExHzAoQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343136197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SmjNq-Xs1dFJteda6uKUS6hxWLOG4CMFrbFYm3CwsJo"},
{"content":{"body":"To be clear, I am okay with people saying \"this is just a matter of taste\", but I am frustrated when the feedback is left as an exercise to the champion.","m.mentions":{},"msgtype":"m.text"},"ts":1707343145152,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$wZYnle3wIxpvPvbVrnKq7oZh42xGj_QcP3_qvJwiNhM"},
{"content":{"body":" * (\"relatively costless\" is the wrong way of putting it, since in every case blocking certainly has costs on delegates, which are quite real and I don't want to leave those out. but the costs are of a different kind than the costs of the web being slower or otherwise worse for users)","m.mentions":{},"m.new_content":{"body":"(\"relatively costless\" is the wrong way of putting it, since in every case blocking certainly has costs on delegates, which are quite real and I don't want to leave those out. but the costs are of a different kind than the costs of the web being slower or otherwise worse for users)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$S9C-qNoQhZlWq0g-g1twFlF1iSos5dgBRq1JExHzAoQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343147130,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ermv3gR7s2hX-A55BxXI8fMomnbJFtJUsQ9kXvtGlzc"},
{"content":{"body":" * To be clear, I am *somewhat* okay with people saying \"this is just a matter of taste\", but I am frustrated when the feedback is left as an exercise to the champion.","format":"org.matrix.custom.html","formatted_body":" * To be clear, I am <em>somewhat</em> okay with people saying \"this is just a matter of taste\", but I am frustrated when the feedback is left as an exercise to the champion.","m.mentions":{},"m.new_content":{"body":"To be clear, I am *somewhat* okay with people saying \"this is just a matter of taste\", but I am frustrated when the feedback is left as an exercise to the champion.","format":"org.matrix.custom.html","formatted_body":"To be clear, I am <em>somewhat</em> okay with people saying \"this is just a matter of taste\", but I am frustrated when the feedback is left as an exercise to the champion.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wZYnle3wIxpvPvbVrnKq7oZh42xGj_QcP3_qvJwiNhM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343165045,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$cZ8xuEpN-yZ8SQsFI4piehZXuWxYOTR85KWyVvKfjyA"},
{"content":{"body":"i am not okay with people saying it's a matter of taste when it's not a matter of taste though!","m.mentions":{},"msgtype":"m.text"},"ts":1707343170338,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NFnpaBkaYdINLR5-lrSdfA69Qgu1QMr8rSuuPHkhQIE"},
{"content":{"body":"chairs: queue needs advancing","m.mentions":{},"msgtype":"m.text"},"ts":1707343188036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$By3yy2D1284ZcbzRXLLU946sUyXbEBDs0CzSPwKp_0c"},
{"content":{"body":"> <@bakkot:matrix.org> I think I would put it this way:\n> \n> The veto process means that we say the risk of doing the wrong thing is _always_ more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.\n> \n> Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.\n\ni agree with this but its also a subjective judgement","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>I think I would put it this way:</p>\n<p>The veto process means that we say the risk of doing the wrong thing is <em>always</em> more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.</p>\n<p>Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.</p>\n</blockquote></mx-reply>i agree with this but its also a subjective judgement","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY"}},"msgtype":"m.text"},"ts":1707343190983,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IYLZboI0QmgpBDNHTOO_EuawBgQvCulHdV9rJbMkzwk"},
{"content":{"body":"how do you come to agreement on it","m.mentions":{},"msgtype":"m.text"},"ts":1707343196756,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$r4rScepFuXkY9z4mVxpFEwlZAHb-9jcXqdM3zU31cXs"},
{"content":{"body":"bakkot: That would seem to suggest that we would need different rules for consensus for different kinds of changes. Perhaps we can use consensus to weaken consensus selectively.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: That would seem to suggest that we would need different rules for consensus for different kinds of changes. Perhaps we can use consensus to weaken consensus selectively.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707343203415,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0VKLG0dy6fTHSD72ObLv4GRdZ2SMFrUxcJdSiE52luA"},
{"content":{"body":"but a person \"abusing the process\" could just... not agree to weaken it","m.mentions":{},"msgtype":"m.text"},"ts":1707343246440,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aaAUwwFhSpXuTcqT-V74AH5DSKEE7URWin-ihUsT7GE"},
{"content":{"body":"> <@kriskowal:matrix.org> bakkot: That would seem to suggest that we would need different rules for consensus for different kinds of changes. Perhaps we can use consensus to weaken consensus selectively.\n\nwell, in some way we've already been cautiously starting to do this, with non-binding polls for choices that we all agree are aesthetic/unimportant. I think this is really positive and should continue!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0VKLG0dy6fTHSD72ObLv4GRdZ2SMFrUxcJdSiE52luA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: That would seem to suggest that we would need different rules for consensus for different kinds of changes. Perhaps we can use consensus to weaken consensus selectively.</blockquote></mx-reply>well, in some way we've already been cautiously starting to do this, with non-binding polls for choices that we all agree are aesthetic/unimportant. I think this is really positive and should continue!","m.mentions":{"user_ids":["@kriskowal:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0VKLG0dy6fTHSD72ObLv4GRdZ2SMFrUxcJdSiE52luA"}},"msgtype":"m.text"},"ts":1707343294153,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aC56ATfugdWYEF5W-1sj83QtYzPgB4Izao7INBzp4ms"},
{"content":{"body":"i agree - ad hoc consensus to allow a lower bar to agreement is a wonderful way to preserve the safety of complete consensus while reducing friction where it's not necessary","m.mentions":{},"msgtype":"m.text"},"ts":1707343437198,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OKUXhgU8rZc3qO9vuCxtqpvl6hhxWM3PjN5oadIpVfE"},
{"content":{"body":"if we can come up with a way to do that in general, as opposed to ad hoc, that would be great","m.mentions":{},"msgtype":"m.text"},"ts":1707343453529,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QaamPwwWv0qfC6NDamebHQzYjzUSQOt61LPWnl0UsTU"},
{"content":{"body":" * if we can come up with a way to do that in general, as opposed to ad hoc, that would be great (for scenarios where it applies)","m.mentions":{},"m.new_content":{"body":"if we can come up with a way to do that in general, as opposed to ad hoc, that would be great (for scenarios where it applies)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QaamPwwWv0qfC6NDamebHQzYjzUSQOt61LPWnl0UsTU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343461683,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_ZjI1CtYz-xok6JJ4IqhTLkt39sAeHw3m1l-CPMpAlI"},
{"content":{"body":"> <@ljharb:matrix.org> i agree - ad hoc consensus to allow a lower bar to agreement is a wonderful way to preserve the safety of complete consensus while reducing friction where it's not necessary\n\nI think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their consensus","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OKUXhgU8rZc3qO9vuCxtqpvl6hhxWM3PjN5oadIpVfE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i agree - ad hoc consensus to allow a lower bar to agreement is a wonderful way to preserve the safety of complete consensus while reducing friction where it&#39;s not necessary</blockquote></mx-reply>I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their consensus","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OKUXhgU8rZc3qO9vuCxtqpvl6hhxWM3PjN5oadIpVfE"}},"msgtype":"m.text"},"ts":1707343475493,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xAihFCKwe3zapkF0R9B7VEY1y1cVI8CA0RZQrFG89Nw"},
{"content":{"body":"> <@ljharb:matrix.org> i agree - ad hoc consensus to allow a lower bar to agreement is a wonderful way to preserve the safety of complete consensus while reducing friction where it's not necessary\n\n * I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OKUXhgU8rZc3qO9vuCxtqpvl6hhxWM3PjN5oadIpVfE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i agree - ad hoc consensus to allow a lower bar to agreement is a wonderful way to preserve the safety of complete consensus while reducing friction where it's not necessary</blockquote></mx-reply> * I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus","m.mentions":{},"m.new_content":{"body":"I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus","format":"org.matrix.custom.html","formatted_body":"I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xAihFCKwe3zapkF0R9B7VEY1y1cVI8CA0RZQrFG89Nw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707343480414,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jcR6MMlt_WeP4sK_iRIt9QL-aI9SbOe6LqX80JX1-8w"},
{"content":{"body":"i agree with snek tho that it'll be difficult to come up with an objective rubric for that","m.mentions":{},"msgtype":"m.text"},"ts":1707343486200,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JXJsaqEFDKc_ACNMhDYU-rIpdW-wQ7aLADk5u_tjf50"},
{"content":{"body":"These sorts of consensual processes can definitely help us, but we still need some way of handling situations of contentious vetoes.","m.mentions":{},"msgtype":"m.text"},"ts":1707343505086,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GLhkPxRawNoGrmlQn-sC5aO7LUp-vKIkcUxxSB8iGVU"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus\n\ni agree that solving it in general prevents that kind of potential conflict on an ad-hoc basis","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xAihFCKwe3zapkF0R9B7VEY1y1cVI8CA0RZQrFG89Nw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I think we need to solve this in abstract, since once somebody wants to block something concrete there is no reason for them to give consensus to ignore their non-consensus</blockquote></mx-reply>i agree that solving it in general prevents that kind of potential conflict on an ad-hoc basis","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xAihFCKwe3zapkF0R9B7VEY1y1cVI8CA0RZQrFG89Nw"}},"msgtype":"m.text"},"ts":1707343513340,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hBkC-Bdxm2Qqt3CJKi6lm66Npe6Y6dw02PsFZexTSYQ"},
{"content":{"body":"> <@ljharb:matrix.org> does anyone remember which meeting shadowrealms was dropped to stage 2?\n\nSeptember 23","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24brbjySslI12gH-4RPLoxsv2wUqdo03ru5XCjJBbYV1E\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>does anyone remember which meeting shadowrealms was dropped to stage 2?</blockquote></mx-reply>September 23","m.relates_to":{"m.in_reply_to":{"event_id":"$brbjySslI12gH-4RPLoxsv2wUqdo03ru5XCjJBbYV1E"}},"msgtype":"m.text"},"ts":1707343522201,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$hVyDfExJH5Sc31fDzBzODGzzgN0HPtlv-TuWIeSGUCg"},
{"content":{"body":"> <@littledan:matrix.org> well, in some way we've already been cautiously starting to do this, with non-binding polls for choices that we all agree are aesthetic/unimportant. I think this is really positive and should continue!\n\nyes.. voting on advancing a proposal is a very different kettle of fish compared to voting for bikeshedding-type decisions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aC56ATfugdWYEF5W-1sj83QtYzPgB4Izao7INBzp4ms?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, in some way we've already been cautiously starting to do this, with non-binding polls for choices that we all agree are aesthetic/unimportant. I think this is really positive and should continue!</blockquote></mx-reply>yes.. voting on advancing a proposal is a very different kettle of fish compared to voting for bikeshedding-type decisions","m.mentions":{"user_ids":["@littledan:matrix.org","@kriskowal:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aC56ATfugdWYEF5W-1sj83QtYzPgB4Izao7INBzp4ms"}},"msgtype":"m.text"},"ts":1707343543693,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4"},
{"content":{"body":"> <@bakkot:matrix.org> I think I would put it this way:\n> \n> The veto process means that we say the risk of doing the wrong thing is _always_ more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.\n> \n> Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.\n\nthis is a really important point","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>I think I would put it this way:</p>\n<p>The veto process means that we say the risk of doing the wrong thing is <em>always</em> more than the risk of doing nothing. And that's just not true. Some things, sugar especially, doing nothing is relatively costless; some things, like new capabilities and APIs for performance, the cost of doing nothing is actually quite high.</p>\n<p>Our process should allow seriously weighing the costs of doing nothing, and not privilege the costs of doing the wrong thing as the ultimate determinant.</p>\n</blockquote></mx-reply>this is a really important point","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VUxcZYGMJ165FT720MH1HOs_Ybzc_K2I104J8PN-fiY"}},"msgtype":"m.text"},"ts":1707343576656,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$efwzvRcFAXH-zQNfCCkR1458D91xCNjDJ22YWfKND5M"},
{"content":{"body":"> <@softwarechris:matrix.org> yes.. voting on advancing a proposal is a very different kettle of fish compared to voting for bikeshedding-type decisions\n\none issue is, there isn't always a shared understanding about what's bikeshedding and what's very significant. I often find myself thinking that something is bikeshedding that others thing is very significant.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>yes.. voting on advancing a proposal is a very different kettle of fish compared to voting for bikeshedding-type decisions</blockquote></mx-reply>one issue is, there isn't always a shared understanding about what's bikeshedding and what's very significant. I often find myself thinking that something is bikeshedding that others thing is very significant.","m.mentions":{"user_ids":["@softwarechris:matrix.org","@kriskowal:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4"}},"msgtype":"m.text"},"ts":1707343636598,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uhzfiBlJnPgKErQMTcAgr1MgSrIwZGlpnzG3TPSVz8g"},
{"content":{"body":"it is probably a very small number of times it would come up but if there are decisions that need to be made in a timely manner, that could mean the need to vote.  this is what the CSS WG does.. but again, ONLY if a decision must be made ","m.mentions":{},"msgtype":"m.text"},"ts":1707343639932,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$-ob08QtxqkrZho-n1k4cwHFqjBCiMoXCoo5NKh5xza0"},
{"content":{"body":"> <@littledan:matrix.org> one issue is, there isn't always a shared understanding about what's bikeshedding and what's very significant. I often find myself thinking that something is bikeshedding that others thing is very significant.\n\nsure, err on the side of caution in those cases then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uhzfiBlJnPgKErQMTcAgr1MgSrIwZGlpnzG3TPSVz8g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>one issue is, there isn't always a shared understanding about what's bikeshedding and what's very significant. I often find myself thinking that something is bikeshedding that others thing is very significant.</blockquote></mx-reply>sure, err on the side of caution in those cases then","m.mentions":{"user_ids":["@littledan:matrix.org","@kriskowal:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uhzfiBlJnPgKErQMTcAgr1MgSrIwZGlpnzG3TPSVz8g"}},"msgtype":"m.text"},"ts":1707343665650,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GvtSv56EYhLQgR8W-wWdaSRt59cIxtpzlrnvWvfxqU8"},
{"content":{"body":"TIL","m.mentions":{},"m.relates_to":{"event_id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4","is_falling_back":true,"m.in_reply_to":{"event_id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707343677593,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZjYL0rMw3WfkXJ1McuCWmI2dC4ybSOWq7HatHVM0pQQ"},
{"content":{"body":"i think that's exactly the problem - if we all agree it's bikeshedding the contention doesn't manifest","m.mentions":{},"msgtype":"m.text"},"ts":1707343679431,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y1zQtSfAWBmn8LBMP8wZVbq5mKbVNe1naR3XMMIZo8Y"},
{"content":{"body":"makes you wonder where these phrases come from","m.mentions":{},"m.relates_to":{"event_id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZjYL0rMw3WfkXJ1McuCWmI2dC4ybSOWq7HatHVM0pQQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707343690556,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ykrx_nof3CojoggK9ZewPipnJUQ2MmVw0wOLpYxNfbQ"},
{"content":{"body":"> However, if a decision is necessary for timely progress and consensus is not achieved after careful consideration of the range of views presented, the Chairs may call for a group vote and record a decision along with any objections.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>However, if a decision is necessary for timely progress and consensus is not achieved after careful consideration of the range of views presented, the Chairs may call for a group vote and record a decision along with any objections.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707343693188,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4T7rGs0ugi_UeruQbm1997izIQLeSPARiZj0s8S1KSA"},
{"content":{"body":"but when one person thinks something is critical and another thinks it's trivial, it often gets tense","m.mentions":{},"msgtype":"m.text"},"ts":1707343693876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pFUpwZWcd8ky3mLihPzw56gdiviNDp3qB1XYVJqFtJk"},
{"content":{"body":"> <@softwarechris:matrix.org> > However, if a decision is necessary for timely progress and consensus is not achieved after careful consideration of the range of views presented, the Chairs may call for a group vote and record a decision along with any objections.\n\nfrom CSS WG charter","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4T7rGs0ugi_UeruQbm1997izIQLeSPARiZj0s8S1KSA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br><blockquote>\n<p>However, if a decision is necessary for timely progress and consensus is not achieved after careful consideration of the range of views presented, the Chairs may call for a group vote and record a decision along with any objections.</p>\n</blockquote>\n</blockquote></mx-reply>from CSS WG charter","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$4T7rGs0ugi_UeruQbm1997izIQLeSPARiZj0s8S1KSA"}},"msgtype":"m.text"},"ts":1707343699454,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$gC-SdGjQVNT19bJj_k_d1UykoWQnqgNRMLDMPwvN4cg"},
{"content":{"body":"maybe! I find that a lot of these cases are the ones where we make decisions by being held hostage, which can be suboptimal.","m.mentions":{},"m.relates_to":{"event_id":"$GvtSv56EYhLQgR8W-wWdaSRt59cIxtpzlrnvWvfxqU8","is_falling_back":true,"m.in_reply_to":{"event_id":"$GvtSv56EYhLQgR8W-wWdaSRt59cIxtpzlrnvWvfxqU8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707343745168,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l9zzYOnQiB8hKpfcpQ9snX0ZXZIFbeYAphdC3Kv3mqY"},
{"content":{"body":"what is timely progress","m.mentions":{},"msgtype":"m.text"},"ts":1707343820930,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$y6WIQ76J6UsWt5q4Jqbb1Y4ymBicTts9QsmD88Sdgz0"},
{"content":{"body":"chair discretion","m.mentions":{},"msgtype":"m.text"},"ts":1707343840822,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1Wdkr2KfoYh1Mpvhl1R74_gr7SoZgeenRPlQcktllMc"},
{"content":{"body":"the chair is a very powerful role and I think we kind of take that for granted in this group","m.mentions":{},"msgtype":"m.text"},"ts":1707343862435,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vVPYJa_WM8syONC3rOnQfVfVmegnYGdI2u1xkiXVzgg"},
{"content":{"body":"they don't need to be this generous","m.mentions":{},"msgtype":"m.text"},"ts":1707343874587,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nBbx5A_mJ_BVkbigCg9By9Vd6rlnS8yL4E3xFjWIGhU"},
{"content":{"body":"historically the chair has had zero power","m.mentions":{},"msgtype":"m.text"},"ts":1707343878507,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YJSud6fu1eG6LGub7z8p09XfNqxZv5vOJtYPVe5a8MU"},
{"content":{"body":"i think historically the TC39 chair is one of the weaker positions as far as standards body chairs go","m.mentions":{},"msgtype":"m.text"},"ts":1707343880770,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b3pYvtdq13o2MeWXW_fywcqYKV0ZEyZMFCgRhu9hbIA"},
{"content":{"body":"that power has been slowly increasing, in a good way","m.mentions":{},"msgtype":"m.text"},"ts":1707343889236,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IOEDwy54IKLHvqtHeWAklnpOIocrJ3JfUhAHEPAtusU"},
{"content":{"body":"our chairs are also delegates, we can't escalate decisions to them without conflict of interest","m.mentions":{},"msgtype":"m.text"},"ts":1707343891064,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cVeCECJTDjhoxQiuxjBIO5pPtb2fdNOoTdN68SGudi8"},
{"content":{"body":"our chairs reliably recuse themselves when there is a conflict","m.mentions":{},"msgtype":"m.text"},"ts":1707343925245,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$unobushXrZxIA7ggidXQXvhkaG2OfJk8uh13JIj9-ow"},
{"content":{"body":"historically also, the chair had no interest in the specifics of language changes.","m.mentions":{},"msgtype":"m.text"},"ts":1707343927323,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZMa3WtH2JOqoZli6IPxTdeG_bd4etQzxpp3zjcGL30Q"},
{"content":{"body":"don't ever elect me as chair because I wouldn't hesitate to wield its power (thoughtfully)","m.mentions":{},"msgtype":"m.text"},"ts":1707344006667,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wsvRmbHqqfNB4CiR8IZc8ocCfCykRRunqv-VnbEjR0Q"},
{"content":{"body":"Thank you for noticing Michael. Each the chairs maintain a list of topics that we have an interest in to ensure that we do not chair those topics. But we don't really shout about this.","m.mentions":{},"msgtype":"m.text"},"ts":1707344013721,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4rrd6amQRQxzIGan9pUOWX0YyEajcvVcK5Omfkh3MTI"},
{"content":{"body":" * Thank you for noticing Michael. Each meeting the chairs maintain a list of topics in advance that we have an interest in to ensure that we do not chair those topics. But we don't really shout about this.","m.mentions":{},"m.new_content":{"body":"Thank you for noticing Michael. Each meeting the chairs maintain a list of topics in advance that we have an interest in to ensure that we do not chair those topics. But we don't really shout about this.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4rrd6amQRQxzIGan9pUOWX0YyEajcvVcK5Omfkh3MTI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707344025805,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Wq8RR1I2M-vn6TBigAGkSYp-7RdizacxC-QjmzrNBO8"},
{"content":{"body":"I can tell you unequivocally that the chairs, as chairs, feel strongly about making absolutely no decisions for the committee, as much as possible, beyond purely administrative things and similar things where burdensome to committee","m.mentions":{},"msgtype":"m.text"},"ts":1707344048443,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GVh4oM3M8XyfFhpt3zwoa2FU8xN4vumerN6ESGrAFiQ"},
{"content":{"body":"I would also be fine with the chairs being a little more authoritative, especially during plenary","m.mentions":{},"msgtype":"m.text"},"ts":1707344088935,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kGjFTDjuvPUkESeqQt5ILmsNC8olRoCrvPVugII0gv8"},
{"content":{"body":"honestly, if we did strongly decide to do something like this, I'd recommend this be done by the secretaries ","m.mentions":{},"msgtype":"m.text"},"ts":1707344110847,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q"},
{"content":{"body":"the less noticeable we are, the better","m.mentions":{},"msgtype":"m.text"},"ts":1707344121318,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$RxPVLUMthkUGn-zsb6vw3H8W-YUXpYcIDQbvb9kq0gA"},
{"content":{"body":"> <@usharma:igalia.com> honestly, if we did strongly decide to do something like this, I'd recommend this be done by the secretaries\n\ndo you mean by Samina, the TC39 secretary?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>honestly, if we did strongly decide to do something like this, I&#39;d recommend this be done by the secretaries </blockquote></mx-reply>do you mean by Samina, the TC39 secretary?","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q"}},"msgtype":"m.text"},"ts":1707344163262,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F0VUxM8wiPKSPHh2lB9UleAbVCgaZ5G0zgPXwbHZQwU"},
{"content":{"body":"> <@littledan:matrix.org> do you mean by Samina, the TC39 secretary?\n\nyes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F0VUxM8wiPKSPHh2lB9UleAbVCgaZ5G0zgPXwbHZQwU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>do you mean by Samina, the TC39 secretary?</blockquote></mx-reply>yes","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$F0VUxM8wiPKSPHh2lB9UleAbVCgaZ5G0zgPXwbHZQwU"}},"msgtype":"m.text"},"ts":1707344169828,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$MM3vZKb-__Y0d6Fd5_uzWpWaJYxEE2QCcmXBqnN0OvI"},
{"content":{"body":"> <@usharma:igalia.com> honestly, if we did strongly decide to do something like this, I'd recommend this be done by the secretaries\n\nif we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a conflict there","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>honestly, if we did strongly decide to do something like this, I&#39;d recommend this be done by the secretaries </blockquote></mx-reply>if we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a conflict there","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q"}},"msgtype":"m.text"},"ts":1707344170183,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qTHB7xAhNsEeSftTwEBCiI2OIO9DkU3JlQ8dkQFghkY"},
{"content":{"body":"as pointed out above, chairing the meeting is an administrative role that allows us to facilitate while being delegates ","m.mentions":{},"msgtype":"m.text"},"ts":1707344170871,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Ui3dLlRrA6_OH7iz6mGS6Ql5U-48rzSweXkSmQGoqGA"},
{"content":{"body":"> <@usharma:igalia.com> honestly, if we did strongly decide to do something like this, I'd recommend this be done by the secretaries\n\n * if we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a potential conflict there (obv,. hopefully not)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i-Kv4KlxUY3Y0avDoSV8ToAIBGYJseReiHWXxw8e85Q?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>honestly, if we did strongly decide to do something like this, I'd recommend this be done by the secretaries </blockquote></mx-reply> * if we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a potential conflict there (obv,. hopefully not)","m.mentions":{},"m.new_content":{"body":"if we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a potential conflict there (obv,. hopefully not)","format":"org.matrix.custom.html","formatted_body":"if we're worried about a conflict of interest, ecma receives more money from ordinary members than associates, so there may be a potential conflict there (obv,. hopefully not)","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qTHB7xAhNsEeSftTwEBCiI2OIO9DkU3JlQ8dkQFghkY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707344189693,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1-vo48Ei6Q7J1ncLgkXV2g33-NbAcIUgW5LvZxDqGq8"},
{"content":{"body":" * as pointed out above, chairing the meeting is an administrative role that allows us to facilitate topics we are neutral about while being delegates ","m.mentions":{},"m.new_content":{"body":"as pointed out above, chairing the meeting is an administrative role that allows us to facilitate topics we are neutral about while being delegates ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ui3dLlRrA6_OH7iz6mGS6Ql5U-48rzSweXkSmQGoqGA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707344191874,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Nljdj54z45KR7VAAKbas1EX8MDODtBUMIJKY3tGpGNY"},
{"content":{"body":"> <@usharma:igalia.com> as pointed out above, chairing the meeting is an administrative role that allows us to facilitate topics we are neutral about while being delegates\n\nyeah it just sounds like too much work to do this and also mediate all conflicts...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ui3dLlRrA6_OH7iz6mGS6Ql5U-48rzSweXkSmQGoqGA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>as pointed out above, chairing the meeting is an administrative role that allows us to facilitate topics we are neutral about while being delegates </blockquote></mx-reply>yeah it just sounds like too much work to do this and also mediate all conflicts...","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ui3dLlRrA6_OH7iz6mGS6Ql5U-48rzSweXkSmQGoqGA"}},"msgtype":"m.text"},"ts":1707344205261,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nxHh0tM9vvIKPfh0ZZe14WAfFE5elWUf32w0F6sAia8"},
{"content":{"body":"> <@softwarechris:matrix.org> the less noticeable we are, the better\n\nwe used to have a chair that you could forget was even in the room (aside from the snoring), and I can assure you, I prefer the chairs to be more noticeable than that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RxPVLUMthkUGn-zsb6vw3H8W-YUXpYcIDQbvb9kq0gA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>the less noticeable we are, the better</blockquote></mx-reply>we used to have a chair that you could forget was even in the room (aside from the snoring), and I can assure you, I prefer the chairs to be more noticeable than that","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RxPVLUMthkUGn-zsb6vw3H8W-YUXpYcIDQbvb9kq0gA"}},"msgtype":"m.text"},"ts":1707344271773,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5q_XlXyygE-OFFB6s_kdSyyhIyM6ETgL06pxvuTyXLI"},
{"content":{"body":"I mean, there's nuance, but I think you get what I mean 🙂","m.mentions":{},"msgtype":"m.text"},"ts":1707344306418,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$a9LMPG8Mjc_Z7AVFuHnYNKTSJM75qM6RwJqAEZBzVKQ"},
{"content":{"body":"doesn't mean we want to overcorrect tho :-)","m.mentions":{},"msgtype":"m.text"},"ts":1707344307807,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DXdus1vFbhHAdU3OpdX3HwVYSysWmvaTB5g2C_TJ-Hc"},
{"content":{"body":"> <@littledan:matrix.org> yeah it just sounds like too much work to do this and also mediate all conflicts...\n\nsuddenly the role has a lot more responsibility and weight and I don't think any organization would be incentivized to allow delegates to be in this position","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nxHh0tM9vvIKPfh0ZZe14WAfFE5elWUf32w0F6sAia8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yeah it just sounds like too much work to do this and also mediate all conflicts...</blockquote></mx-reply>suddenly the role has a lot more responsibility and weight and I don't think any organization would be incentivized to allow delegates to be in this position","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nxHh0tM9vvIKPfh0ZZe14WAfFE5elWUf32w0F6sAia8"}},"msgtype":"m.text"},"ts":1707344342126,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$1cuB84Cfh0nkPlYT0IPkMgIXbIJoF1YDhR0tL7_aNc0"},
{"content":{"body":"I like the charis giving chocolate and hats to bribe delegates","m.mentions":{},"msgtype":"m.text"},"ts":1707344355712,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$iW5O9VSJ4-WMy-jfbwqR3y6crhaXq1HHhXqxGDKLKSw"},
{"content":{"body":"to put it simply, we don't want to be making decisions that are committee decisions","m.mentions":{},"msgtype":"m.text"},"ts":1707344361257,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GjjPj4otM8NIUy3u6CbH1ZQM4sAemN5LA9QhBZ400Ow"},
{"content":{"body":"right so I think we need a procedure for *delegates* to contest vetoes (after the meeting, since during the same meeting would be too fast/chaotic/unconsidered)","format":"org.matrix.custom.html","formatted_body":"right so I think we need a procedure for <em>delegates</em> to contest vetoes (after the meeting, since during the same meeting would be too fast/chaotic/unconsidered)","m.mentions":{},"msgtype":"m.text"},"ts":1707344471997,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GfSDDrqM5MjkZVHWv-zxGPYoY9x0CD1rAMFwknCRuv4"},
{"content":{"body":"rather than asking the chairs to constantly adjudicate by themselves on everything","m.mentions":{},"msgtype":"m.text"},"ts":1707344492527,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a-q7gwSy7w31tKFUwETCc1OKvXf94ebM6IkXJpst_70"},
{"content":{"body":"and we now have a Stage 2.7 section https://github.com/tc39/proposals?tab=readme-ov-file#stage-27","m.mentions":{},"msgtype":"m.text"},"ts":1707344638479,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DLRT0pT8JEU4wQgKsQf7HV-45RPhWx3eP5wGDWFZZuM"},
{"content":{"body":"anyway more dispassionately i also think the lone veto thing actually is great for small groups (the older, smaller, closer-knit TC39) but doesn't scale","m.mentions":{},"msgtype":"m.text"},"ts":1707344697007,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aKzucWBUQiNPl7iqHVu87H_Nvac0JszWEy9UbUAC06A"},
{"content":{"body":"like you don't want a family of 4 to vote on all decisions, that will be bad","m.mentions":{},"msgtype":"m.text"},"ts":1707344722992,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZsnnlaIItlvEdRDNdCLP5nDa_mT6Jfo2SRaikay-qGY"},
{"content":{"body":"Spec invariants and subgroups would go a long way to making TC39 scale. I am eager to write a blank check to Intl.","m.mentions":{},"msgtype":"m.text"},"ts":1707344807745,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yORzheqniYg6k8u_oErw8sz0fcDGpGDlKoFIq9bvGoA"},
{"content":{"body":"I am somewhat less eager to write a blank check to Intl","m.mentions":{},"msgtype":"m.text"},"ts":1707344841209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y9bZ7-Kp2IxoO3rnsxuyOh53er2JcQNZdsZ7vh1Jl4M"},
{"content":{"body":"Yeah, I don’t mean everyone. I mean me.","m.mentions":{},"msgtype":"m.text"},"ts":1707344858692,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pSH7jcHUXtQEgxCiS0WIAPHW1mNXwdEbtwKDXBy112c"},
{"content":{"body":"I am fine leaving the decisions which are just internationalization to subgroups, but not overall questions of API design","m.mentions":{},"msgtype":"m.text"},"ts":1707344858979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$04D5pv9s2H0rwlKU-czITNHqJtAgNq8OZ3vGhULpzmI"},
{"content":{"body":"bakkot you'll need to sustain your objection to writing a blank check to intl","m.mentions":{},"msgtype":"m.text"},"ts":1707344871613,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A3pfW1pt0dQ9elYU0fNRbl-uTPqZ8RswvXW0QjlB1Go"},
{"content":{"body":"A “I hereby waive my interest in a veto on Intl provided it maintains these here invariants.”","m.mentions":{},"msgtype":"m.text"},"ts":1707344882231,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QworkvmfdVwVCjiYqVsmkeNgz24rjL7hhg5CiL4TH-c"},
{"content":{"body":"> <@bakkot:matrix.org> I am fine leaving the decisions which are just internationalization to subgroups, but not overall questions of API design\n\nNot even if its a subgroup focused on general API design within JS?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$04D5pv9s2H0rwlKU-czITNHqJtAgNq8OZ3vGhULpzmI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I am fine leaving the decisions which are just internationalization to subgroups, but not overall questions of API design</blockquote></mx-reply>Not even if its a subgroup focused on general API design within JS?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$04D5pv9s2H0rwlKU-czITNHqJtAgNq8OZ3vGhULpzmI"}},"msgtype":"m.text"},"ts":1707344913090,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$spuUVED4kkSClOPbguiHeAZtX2_qS09REkuBmFBwbZY"},
{"content":{"body":"rbuckton: sorry, I was referring only to Intl specifically","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: sorry, I was referring only to Intl specifically","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1707344938455,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9tGMDJMWBxtMaJoC2Iz225yq41vY1mYrbWExTXZi564"},
{"content":{"body":"I am fine with subgroups in general but not taking the output of any subgroup wholesale into the language","m.mentions":{},"msgtype":"m.text"},"ts":1707344955053,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zfjnhwXNqOXh8ppfIm8yKMRdrWQPQTq08THJVCiXcyc"},
{"content":{"body":"there are some questions best left to subgroups but most things involve some questions which are not of that kind","m.mentions":{},"msgtype":"m.text"},"ts":1707344978125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JZWIyNVE6jV0T0A1m2BALJHOdVZAKGVwH2q4opxVrZQ"},
{"content":{"body":" * there are some questions best left to subgroups but most proposals involve some questions which are not of that kind","m.mentions":{},"m.new_content":{"body":"there are some questions best left to subgroups but most proposals involve some questions which are not of that kind","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JZWIyNVE6jV0T0A1m2BALJHOdVZAKGVwH2q4opxVrZQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707344984474,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bxUjUm3OhWhoEB4JG6vDyE2s3MyHVJGdVm0JB9P1EtU"},
{"content":{"body":"The DOM as an API subgroup.","m.mentions":{},"msgtype":"m.text"},"ts":1707345029988,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1YO9mX_mKl6dqRvf-1yA3CXTOxhUhckvnLkAN2QROiI"},
{"content":{"body":"my brother i'm pretty sure we are the subgroup","m.mentions":{},"msgtype":"m.text"},"ts":1707345054961,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d-zC5YZZpBNJw8e1P8TmO30IPwryrkEDq-M5mv1Q6Z8"},
{"content":{"body":"i definitely think that establishing a thorough list of invariants will drastically reduce lone objections","m.mentions":{},"msgtype":"m.text"},"ts":1707345063486,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TIgBKkgwPHNgMuyiLsvmeVQ-F93ljnWyjikYxiXjHCg"},
{"content":{"body":"seems pretty obvious to me","m.mentions":{},"m.relates_to":{"event_id":"$8h9sJgyTUAfzbKPTBS51vQdvYAEw_BocyhtMEWbvOb4","is_falling_back":true,"m.in_reply_to":{"event_id":"$ykrx_nof3CojoggK9ZewPipnJUQ2MmVw0wOLpYxNfbQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1707345142278,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$OKaY58A5P48mbCpErK0UjL6NSKfdYa6N3bMrY6m7cho"},
{"content":{"body":"thinking about the lone objections I can remember I am not sure I can think of any which could have been handled by a list of invariants? except invariants like \"no new unreachable intrinsics\" or \"no shared-state parallelism\", neither of which would have gotten consensus to be on such a list","m.mentions":{},"msgtype":"m.text"},"ts":1707345195927,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IoicDr7v_F-0bONnhq5OXNyxu4SBJIRJdEnbx2EDHWg"},
{"content":{"body":"I would like to see a thorough list of invariants be a high-priority goal regardless, but I agree with Kevin here","msgtype":"m.text"},"ts":1707345256461,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$DByLVyc9EnQZJzJxbvCbZ7tNuDFe9xqST9o69XkhTk4"},
{"content":{"body":"the invariants project will need to contend with the fact that a lot of the invariants that people care about the most will be absent from the list of invariants which has committee consensus. For this reason, I think the first step should be to document all the concerns that some people are thinking about (as has already begun in how-we-work), rather than get consensus on it.","m.mentions":{},"msgtype":"m.text"},"ts":1707345341526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T1F16lJ6t0gnW9czTDJIjWdojyGbTDQ9sKsY-jXC5LU"},
{"content":{"body":"i don't like the idea of consensus seeking on invariants","m.mentions":{},"msgtype":"m.text"},"ts":1707345393937,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AZ5UrBjd5CrZWBAl2jNUfUctbT7Aj_CL60BP-eyYY3k"},
{"content":{"body":"invariants i think are particular reflections of goals","m.mentions":{},"msgtype":"m.text"},"ts":1707345400181,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$T95cKZCSOaLT2SQqhOPCy47lKW-6s1_ugBXTDR-3_II"},
{"content":{"body":"i want some semblance of understanding of goals","m.mentions":{},"msgtype":"m.text"},"ts":1707345409109,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_8q0Hs2ZmpZY0_PkYp22RGPeB0nzjd10eJN_09Tm60w"},
{"content":{"body":"that's a fair point. having a list of invariants, some of which have consensus and many of which won't, would still be helpful","m.mentions":{},"msgtype":"m.text"},"ts":1707345412861,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yoJXc1x4mKtkHmUVTUsohCq3jdOU6ibl7k0gbWyOGiw"},
{"content":{"body":" * (re kevin and dan) that's a fair point. having a list of invariants, some of which have consensus and many of which won't, would still be helpful","m.mentions":{},"m.new_content":{"body":"(re kevin and dan) that's a fair point. having a list of invariants, some of which have consensus and many of which won't, would still be helpful","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yoJXc1x4mKtkHmUVTUsohCq3jdOU6ibl7k0gbWyOGiw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707345430972,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HxlR_HdmpL9Mo2gTaMAvFrKr2sSN_F9meorLzj-Vv4I"},
{"content":{"body":"goals as scoped as possible, of course","m.mentions":{},"msgtype":"m.text"},"ts":1707345432586,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4BH77OiAPO1xOoJWaqbaUD8pmI7tlmIYZGZ9c6gKkBI"},
{"content":{"body":"(re shu) also a good point","m.mentions":{},"msgtype":"m.text"},"ts":1707345437921,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GfEjc_PkrL_UOCSfKHkyDaej5sJySqcN5R1Lg0BTy3A"},
{"content":{"body":"i don't think \"more better js\" is a valid goal","m.mentions":{},"msgtype":"m.text"},"ts":1707345440395,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D3XZ_ckE0wnpzSJlKZnRqeu9X5-LcRWblJ8Z4rbOkCU"},
{"content":{"body":"@shu would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.","m.mentions":{},"msgtype":"m.text"},"ts":1707345823422,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$p2ADxLTEU5lNB6u1c-VgyFTp5RUEuUf6BaJrTVZsutc"},
{"content":{"body":" * shu:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.new_content":{"body":"shu:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$p2ADxLTEU5lNB6u1c-VgyFTp5RUEuUf6BaJrTVZsutc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707345832413,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$LciNtZRRe_UskXSwzahTG-ew6lsDfflQ6tx9JzMl1iA"},
{"content":{"body":"I kind of like the idea of markdown fences as an alternative to escaping `` ` `` and ` ${ ` and end-of-string `\\`, but I don't have a strong preference.","format":"org.matrix.custom.html","formatted_body":"I kind of like the idea of markdown fences as an alternative to escaping <code>`</code> and <code>${</code> and end-of-string <code>\\</code>, but I don't have a strong preference.","m.mentions":{},"msgtype":"m.text"},"ts":1707345922987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Let7mjOd6jL-wMArL-uaSY9w0tCBbl55sL3TbvoRJ3c"},
{"content":{"body":"it might be nice to allow N backticks, paired, to change what needs to be escaped?","m.mentions":{},"msgtype":"m.text"},"ts":1707346000277,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yFmldTMMmERVmu-TedG4T3Mkk2bnZ7L7DS5YhGfnf4g"},
{"content":{"body":"```\nfoo````\n```\nis already legal, alas","format":"org.matrix.custom.html","formatted_body":"<pre><code>foo````\n</code></pre>\n<p>is already legal, alas</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1707346022145,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wmeyWzbB7FuXViJUNR0jGAMHkLYgEAoRQT6Qlxp8wJs"},
{"content":{"body":"like with a single backtick, you have to escape backticks; but if you put, say, three, you'd only have to escape a set of triple backticks","m.mentions":{},"msgtype":"m.text"},"ts":1707346022386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gr7yUZ-t71VlDUJqZkr-pDUwldZZ86aCwwPUowM8aE0"},
{"content":{"body":"I thought that was in the proposal when I reviewed it last week. ","m.mentions":{},"msgtype":"m.text"},"ts":1707346023708,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-JccOUlOTRRFgyIOffcF8-JHQfQujIG2rc85n6W0QdU"},
{"content":{"body":"ah true","m.mentions":{},"msgtype":"m.text"},"ts":1707346025839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jNtko-7fPg9QlUoi-3OcVZHgbPKdffno10uxwatnW-8"},
{"content":{"body":"> <@leobalter:matrix.org> shu:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e\n\ndone, lgtm","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$p2ADxLTEU5lNB6u1c-VgyFTp5RUEuUf6BaJrTVZsutc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@leobalter:matrix.org\">@leobalter:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>:  would you mind taking a quick look at the conclusion/resolution for ShadowRealm? I want to make sure I'm not missing anything.e</blockquote></mx-reply>done, lgtm","m.mentions":{"user_ids":["@leobalter:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$p2ADxLTEU5lNB6u1c-VgyFTp5RUEuUf6BaJrTVZsutc"}},"msgtype":"m.text"},"ts":1707346055509,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g3IvTEvf56RT4UliTNGIH7lei3nIFjEcO0bJzEmXVoU"},
{"content":{"body":"> <@bakkot:matrix.org> ```\n> foo````\n> ```\n> is already legal, alas\n\nlegal and at least possibly sensible e.g. https://gist.github.com/michaelficarra/70ce798feb25fdc91508f387190053a1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wmeyWzbB7FuXViJUNR0jGAMHkLYgEAoRQT6Qlxp8wJs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><pre><code>foo````\n</code></pre>\n<p>is already legal, alas</p>\n</blockquote></mx-reply>legal and at least possibly sensible e.g. https://gist.github.com/michaelficarra/70ce798feb25fdc91508f387190053a1","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$wmeyWzbB7FuXViJUNR0jGAMHkLYgEAoRQT6Qlxp8wJs"}},"msgtype":"m.text"},"ts":1707346065489,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M5yj6pMHcMEwlnv7Eg4ZDjYCxdf9bMGT4W30EECC7W0"},
{"content":{"body":"that said, it might still be web-compat","m.mentions":{},"msgtype":"m.text"},"ts":1707346077709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$57xzZZwGDM0xVWu0JKrmc7D_tR3i3Bts5YnfiJBvh3s"},
{"content":{"body":"but changing existing parses is scary","m.mentions":{},"msgtype":"m.text"},"ts":1707346088943,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_PsPY8jWX_GKumTOrBJ9trGx0kfO1qvmdAktKQfO3yQ"},
{"content":{"body":"When I looked at it before, it was ```` @``` ````, with a n+3 backticks that must be matched, as long as its one more backtick than the number of contiguous backticks in the body.","format":"org.matrix.custom.html","formatted_body":"When I looked at it before, it was <code>@```</code>, with a n+3 backticks that must be matched, as long as its one more backtick than the number of contiguous backticks in the body.","m.mentions":{},"msgtype":"m.text"},"ts":1707346113049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sHi-jxqHLoRO5tYJyA5PmIN48IWRagtOtKxjJz_E4cI"},
{"content":{"body":"> <@bakkot:matrix.org> ```\n> foo````\n> ```\n> is already legal, alas\n\n…Wait, what does this parse as, again?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wmeyWzbB7FuXViJUNR0jGAMHkLYgEAoRQT6Qlxp8wJs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><pre><code>foo````\n</code></pre>\n<p>is already legal, alas</p>\n</blockquote></mx-reply>…Wait, what does this parse as, again?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wmeyWzbB7FuXViJUNR0jGAMHkLYgEAoRQT6Qlxp8wJs"}},"msgtype":"m.text"},"ts":1707346171314,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$bmonvnzw3EKwOu4hI35VAxW4KP2Vd-Bkv66XOlBc55k"},
{"content":{"body":"Syntax isn't a Stage 1 concern…","m.mentions":{},"msgtype":"m.text"},"ts":1707346181559,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fdZC1l_A8v-SdGEalxYkKIXLwFImiO_b1XzwH3FPb6Y"},
{"content":{"body":"Do we want to explore this? If so, we'll define syntax when we explore it.","m.mentions":{},"msgtype":"m.text"},"ts":1707346196476,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dnKeT7ef5H-4KJmwx8xSI6TAFWtITWVRi1SrqArvfr0"},
{"content":{"body":"but markdown fences are tricky in that ``` `` ` `` ``` ignores the leading and trailing whitespace to avoid it being treated as a contiguous run of backticks","format":"org.matrix.custom.html","formatted_body":"but markdown fences are tricky in that <code>`` ` ``</code> ignores the leading and trailing whitespace to avoid it being treated as a contiguous run of backticks","m.mentions":{},"msgtype":"m.text"},"ts":1707346216889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BpSVIca9MN3wAwmrL2zyAsm4Jbq1ciFKWpRMvUD3qcs"},
{"content":{"body":"> <@jschoi:matrix.org> …Wait, what does this parse as, again?\n\n```\n(foo``)``\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bmonvnzw3EKwOu4hI35VAxW4KP2Vd-Bkv66XOlBc55k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>…Wait, what does this parse as, again?</blockquote></mx-reply><pre><code>(foo``)``\n</code></pre>\n","m.mentions":{"user_ids":["@jschoi:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bmonvnzw3EKwOu4hI35VAxW4KP2Vd-Bkv66XOlBc55k"}},"msgtype":"m.text"},"ts":1707346251245,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3FhIkOx2bx5NfNWnrX4z2Rs_DUh2AJjHE1VRS1wtzIA"},
{"content":{"body":"> <@jschoi:matrix.org> …Wait, what does this parse as, again?\n\n``````\nfoo````\n``````\nis the same as\n``````\n(foo``)``\n``````","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bmonvnzw3EKwOu4hI35VAxW4KP2Vd-Bkv66XOlBc55k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>…Wait, what does this parse as, again?</blockquote></mx-reply><pre><code>foo````\n</code></pre>\n<p>is the same as</p>\n<pre><code>(foo``)``\n</code></pre>\n","m.mentions":{"user_ids":["@jschoi:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bmonvnzw3EKwOu4hI35VAxW4KP2Vd-Bkv66XOlBc55k"}},"msgtype":"m.text"},"ts":1707346258496,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$X3uCKCDrU0VmZKUwFOGzGJoJobHH-itDX-qN4CgyOkE"},
{"content":{"body":"should've added an early error on that","m.mentions":{},"msgtype":"m.text"},"ts":1707346283144,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UuXUmt9ry1bl7LaA1S-vSGE8hPypEXuEYheEd8EN5DA"},
{"content":{"body":"or a lookahead","m.mentions":{},"msgtype":"m.text"},"ts":1707346294127,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5NNuKsPkYyEi2ztT4vJj4xgaLVHJcKyOxv1Ik9cQTKs"},
{"content":{"body":"yeah I tend to agree","m.mentions":{},"msgtype":"m.text"},"ts":1707346314466,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rj-LHu31j1QzP7VzhOweEwdkhFVHx-ytbb53M6nFEp0"},
{"content":{"body":"oh well","m.mentions":{},"msgtype":"m.text"},"ts":1707346315679,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$65YgRTRl4PsqO9VyKaSXO9bZlcnHTnDUmz7Jb79k_5M"},
{"content":{"body":"where's the fun in that snek ?","format":"org.matrix.custom.html","formatted_body":"where's the fun in that <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a> ?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1707346323949,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7RFp2pap0KHjpX5Ry4EHGvM-zH1PWLWJryhFWhBoK0M"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1707346333255,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8wZIzWjbllAXCv8oI2xytJtrluOikfmaDRRm3ndFd2M"},
{"content":{"body":"doubled punctuators being special is well-precedented","m.mentions":{},"msgtype":"m.text"},"ts":1707346340822,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6EgKb7XtRC1AYqYPNvGlAs1ihF7DR1dGW_MEHSyaUJA"},
{"content":{"body":"it's JavaScript, you're supposed to be able to construct horrors","m.mentions":{},"msgtype":"m.text"},"ts":1707346345552,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xBa9wXr0n5y0wjhuLCnvnnzBEo6rI-3tg06u-kjguyw"},
{"content":{"body":"lets use `r#\"\"#` like rust","format":"org.matrix.custom.html","formatted_body":"lets use <code>r#\"\"#</code> like rust","m.mentions":{},"msgtype":"m.text"},"ts":1707346350568,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5BEUDp3a7Vfer0JJNHBVp_TpA_PMa2pmL61NFUVfaqI"},
{"content":{"body":"> <@michaelficarra:matrix.org> it's JavaScript, you're supposed to be able to construct horrors\n\n```\nfoo`` ``\n```\nis not... less horrible","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xBa9wXr0n5y0wjhuLCnvnnzBEo6rI-3tg06u-kjguyw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>it&#39;s JavaScript, you&#39;re supposed to be able to construct horrors</blockquote></mx-reply><pre><code>foo`` ``\n</code></pre>\n<p>is not... less horrible</p>\n","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xBa9wXr0n5y0wjhuLCnvnnzBEo6rI-3tg06u-kjguyw"}},"msgtype":"m.text"},"ts":1707346396650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fVfE_ojdgsqIUhOhrTi4r3kOvvI_YVJ9h6IzyWCEdaA"},
{"content":{"body":"> <@jridgewell:matrix.org> Syntax isn't a Stage 1 concern…\n\nMeta: do people find it valuable to get constraints earlier even at proposal advancement meetings? I would think it is helpful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdZC1l_A8v-SdGEalxYkKIXLwFImiO_b1XzwH3FPb6Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Syntax isn&#39;t a Stage 1 concern…</blockquote></mx-reply>Meta: do people find it valuable to get constraints earlier even at proposal advancement meetings? I would think it is helpful.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fdZC1l_A8v-SdGEalxYkKIXLwFImiO_b1XzwH3FPb6Y"}},"msgtype":"m.text"},"ts":1707346427175,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo"},
{"content":{"body":"> <@devsnek:matrix.org> lets use `r#\"\"#` like rust\n\nor just `r\"\" \"\"`, I don't think you need the `#`s?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5BEUDp3a7Vfer0JJNHBVp_TpA_PMa2pmL61NFUVfaqI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>lets use <code>r#\"\"#</code> like rust</blockquote></mx-reply>or just <code>r\"\" \"\"</code>, I don't think you need the <code>#</code>s?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5BEUDp3a7Vfer0JJNHBVp_TpA_PMa2pmL61NFUVfaqI"}},"msgtype":"m.text"},"ts":1707346439287,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ddj73-n7FVMjqY-RrN-Vr6e-aXfIsuKf3Og6JRF_zBQ"},
{"content":{"body":"I really like the problem we are trying to resolve having used this feature within different languages ie Perl. Even thou, I don't know if I'd have the energy to pursue this string proposal considering it needs us to elect a token ","m.mentions":{},"msgtype":"m.text"},"ts":1707346450851,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$p9yWp6adP49hvhJdVsIlDyTMJQS_cGNTZSo8MR-hiJk"},
{"content":{"body":"> <@jridgewell:matrix.org> Syntax isn't a Stage 1 concern…\n\n * Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdZC1l_A8v-SdGEalxYkKIXLwFImiO_b1XzwH3FPb6Y?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Syntax isn't a Stage 1 concern…</blockquote></mx-reply> * Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.","m.mentions":{},"m.new_content":{"body":"Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.","format":"org.matrix.custom.html","formatted_body":"Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707346460975,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$LIFDQtuJAIdSxITyb7F6zz3FNmx4KNzSFtT2zufhddI"},
{"content":{"body":"Sure, I think \"desire for minimal syntax\" is a good thing to bring up, but \"I don't like `#\" isn't","m.mentions":{},"msgtype":"m.text"},"ts":1707346469419,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7SeTLwHluupxbNyp7skGsp_tgbUAXX9vtGNeG6YaIFk"},
{"content":{"body":"yeah Mark's reaction was basically my reaction too","m.mentions":{},"msgtype":"m.text"},"ts":1707346512521,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Oqqq4hIgSyQ4v2aTYAasS3RIKeEaa-g5ppKgMTzUUTg"},
{"content":{"body":"I want a better `String.raw` and would consider that in scope for this proposal...","format":"org.matrix.custom.html","formatted_body":"I want a better <code>String.raw</code> and would consider that in scope for this proposal...","m.mentions":{},"msgtype":"m.text"},"ts":1707346521583,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IN7EGCnF6W6zX4NamErT-UNRRQJkdXrGxiZwD-KmhwI"},
{"content":{"body":"https://github.com/tc39/proposal-string-cooked/issues/13","m.mentions":{},"msgtype":"m.text"},"ts":1707346549756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8-I3bber4Kx_gZbs87P1V_7_iaucf5gh3bGc9tANI3g"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.\n\nfor me personally, yes; although in the form of 'potential concerns', rather than 'constraints'; I believe it's premature to have dealbreakers for future stages at that point","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.</blockquote></mx-reply>for me personally, yes; although in the form of 'potential concerns', rather than 'constraints'; I believe it's premature to have dealbreakers for future stages at that point","m.relates_to":{"m.in_reply_to":{"event_id":"$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo"}},"msgtype":"m.text"},"ts":1707346581106,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$_KKZejZ6bS3MfVo8sSokhk10TgAYeCeLNqaSRIzSD3M"},
{"content":{"body":"> <@bakkot:matrix.org> I want a better `String.raw` and would consider that in scope for this proposal...\n\nIsn't the point of this that you don't need `String.raw` with it? Why would that be in scope?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IN7EGCnF6W6zX4NamErT-UNRRQJkdXrGxiZwD-KmhwI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I want a better <code>String.raw</code> and would consider that in scope for this proposal...</blockquote></mx-reply>Isn't the point of this that you don't need <code>String.raw</code> with it? Why would that be in scope?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IN7EGCnF6W6zX4NamErT-UNRRQJkdXrGxiZwD-KmhwI"}},"msgtype":"m.text"},"ts":1707346649802,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IiVJlDSb8El1LLUEJAQsI-Y8gwrjzK0Txid4RWMNuDU"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.\n\nI would prefer to not always ask for consensus at the end of the timebox, but have some time _after_ getting stage 1 for \"ok now, anything else I should consider?\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>Meta: do people find it valuable to get constraints for later stages, even at earlier proposal advancement meetings? I would think it is helpful.</blockquote></mx-reply>I would prefer to not always ask for consensus at the end of the timebox, but have some time <em>after</em> getting stage 1 for \"ok now, anything else I should consider?\"","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org","@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EPwSNgx2-m0iQtwaMd3M_GDUAfW_wq0JK9FzLGmyhRo"}},"msgtype":"m.text"},"ts":1707346666917,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qdIklOMAhUmBRM2xlb1Ghe_KeCgBW-bNLHJl5qfo8cc"},
{"content":{"body":"> <@rbuckton:matrix.org> Isn't the point of this that you don't need `String.raw` with it? Why would that be in scope?\n\npart of the problem statement, which is the stage 1 thing, is that `String.raw` doesn't work","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IiVJlDSb8El1LLUEJAQsI-Y8gwrjzK0Txid4RWMNuDU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Isn't the point of this that you don't need <code>String.raw</code> with it? Why would that be in scope?</blockquote></mx-reply>part of the problem statement, which is the stage 1 thing, is that <code>String.raw</code> doesn't work","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IiVJlDSb8El1LLUEJAQsI-Y8gwrjzK0Txid4RWMNuDU"}},"msgtype":"m.text"},"ts":1707346692265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yDl_BXjuGh3mg2uleJ2DFzn4YwPOdqE2r8MmRaX1N_A"},
{"content":{"body":"Maybe \"here documents for JS\"","m.mentions":{},"msgtype":"m.text"},"ts":1707346701570,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$stYNoJoGJp7bdSPS5sgj5EQJHJcRj2DzjMvcesM4zPk"},
{"content":{"body":"hence if we could have a version of `String.raw` which had fewer edges, that would be in the direction of solving the problem","format":"org.matrix.custom.html","formatted_body":"hence if we could have a version of <code>String.raw</code> which had fewer edges, that would be in the direction of solving the problem","m.mentions":{},"msgtype":"m.text"},"ts":1707346713198,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JvcH_iKHt_ruchGeSupryh0esmSJP8Oi2KuGv7iZqgU"},
{"content":{"body":" * hence if we could have a version of `String.raw` which had fewer sharp edges, that would be in the direction of solving the problem","format":"org.matrix.custom.html","formatted_body":" * hence if we could have a version of <code>String.raw</code> which had fewer sharp edges, that would be in the direction of solving the problem","m.mentions":{},"m.new_content":{"body":"hence if we could have a version of `String.raw` which had fewer sharp edges, that would be in the direction of solving the problem","format":"org.matrix.custom.html","formatted_body":"hence if we could have a version of <code>String.raw</code> which had fewer sharp edges, that would be in the direction of solving the problem","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JvcH_iKHt_ruchGeSupryh0esmSJP8Oi2KuGv7iZqgU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707346719895,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7MGbhtG2JryOfmad1FFKxwYgXccZTY5Vzll3b5U6ZLg"},
{"content":{"body":"Isn't that just a side-effect of special `\\` escapes?","format":"org.matrix.custom.html","formatted_body":"Isn't that just a side-effect of special <code>\\</code> escapes?","m.mentions":{},"msgtype":"m.text"},"ts":1707346730300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GmlsF4sO-LoJFkh4Xqz_gT3tz2o2VUjvZo4KnUtBnVQ"},
{"content":{"body":"what's the exact title?","m.mentions":{},"msgtype":"m.text"},"ts":1707346730381,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q97FA1muGcl2kT7BRMgZNsSSW9UIqBEu_MyDksvOLt0"},
{"content":{"body":"bakkot: Did you agree with my problem statement? Please feel free to edit it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Did you agree with my problem statement? Please feel free to edit it","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1707346740577,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9XqmXDoYHlGMbbblPP0lkBhbo8otjIFyy9ZB3ZkUCoI"},
{"content":{"body":"> <@ljharb:matrix.org> what's the exact title?\n\n\"Improved escapes for template literals\" I think?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q97FA1muGcl2kT7BRMgZNsSSW9UIqBEu_MyDksvOLt0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what&#39;s the exact title?</blockquote></mx-reply>\"Improved escapes for template literals\" I think?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q97FA1muGcl2kT7BRMgZNsSSW9UIqBEu_MyDksvOLt0"}},"msgtype":"m.text"},"ts":1707346755751,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$g_OKBZ1ONVVkjTB8MXgX1RtYq05tVgtAIiQqCkXj8j8"},
{"content":{"body":"A better `String.raw` doesn't solve `` \\` ``, `` \\${ `` and end-of-string `\\`","format":"org.matrix.custom.html","formatted_body":"A better <code>String.raw</code> doesn't solve <code>\\`</code>, <code>\\${</code> and end-of-string <code>\\</code>","m.mentions":{},"msgtype":"m.text"},"ts":1707346772641,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YmHiEiuhT1sk0HOkbPYD2LXXtVY8Yy4BBePwR_YIM4s"},
{"content":{"body":"> <@littledan:matrix.org> bakkot: Did you agree with my problem statement? Please feel free to edit it\n\nsgtm","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9XqmXDoYHlGMbbblPP0lkBhbo8otjIFyy9ZB3ZkUCoI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Did you agree with my problem statement? Please feel free to edit it</blockquote></mx-reply>sgtm","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9XqmXDoYHlGMbbblPP0lkBhbo8otjIFyy9ZB3ZkUCoI"}},"msgtype":"m.text"},"ts":1707346778307,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bLRQK16mUQuJtCQYn5Qe5eDJGwISjIHePe2MOu4t8b8"},
{"content":{"body":" * A better `String.raw` doesn't solve `\\${` and end-of-string `\\`","format":"org.matrix.custom.html","formatted_body":" * A better <code>String.raw</code> doesn't solve <code>\\${</code> and end-of-string <code>\\</code>","m.mentions":{},"m.new_content":{"body":"A better `String.raw` doesn't solve `\\${` and end-of-string `\\`","format":"org.matrix.custom.html","formatted_body":"A better <code>String.raw</code> doesn't solve <code>\\${</code> and end-of-string <code>\\</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YmHiEiuhT1sk0HOkbPYD2LXXtVY8Yy4BBePwR_YIM4s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707346794369,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kYE_pxSf4--XL3Zo7k85Tx5_-BVEEXoN2SZRkvcWIXc"},
{"content":{"body":" * A better `String.raw` doesn't solve `` \\` ``, `\\${`, and end-of-string `\\`","format":"org.matrix.custom.html","formatted_body":" * A better <code>String.raw</code> doesn't solve <code>\\`</code>, <code>\\${</code>, and end-of-string <code>\\</code>","m.mentions":{},"m.new_content":{"body":"A better `String.raw` doesn't solve `` \\` ``, `\\${`, and end-of-string `\\`","format":"org.matrix.custom.html","formatted_body":"A better <code>String.raw</code> doesn't solve <code>\\`</code>, <code>\\${</code>, and end-of-string <code>\\</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YmHiEiuhT1sk0HOkbPYD2LXXtVY8Yy4BBePwR_YIM4s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707346819738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Uy6G8HkYEPObsKpmPNLBOxG9qNqGAdQ_UsX7jCTl0xo"},
{"content":{"body":"That is 100% a syntax issue, no amount of API support can fix it.","m.mentions":{},"msgtype":"m.text"},"ts":1707346845134,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QuSoM44VQL1WEw6Au_5SVm15kwUfrJ_0fZZl-v4NGi4"},
{"content":{"body":"Maybe there are improvements that could be made for `String.raw`, but that won't address the main concerns this proposal seeks to address.","format":"org.matrix.custom.html","formatted_body":"Maybe there are improvements that could be made for <code>String.raw</code>, but that won't address the main concerns this proposal seeks to address.","m.mentions":{},"msgtype":"m.text"},"ts":1707346900883,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2lZld9Ky4ugubKwGIxuJ8qUNYCwbND68aIL590qX4HY"},
{"content":{"body":"> <@bakkot:matrix.org> https://github.com/tc39/proposal-string-cooked/issues/13\n\n`String.rare` does not really solve the problem, u still need to do many escaping, and it also make the escaping rule much complex.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8-I3bber4Kx_gZbs87P1V_7_iaucf5gh3bGc9tANI3g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>https://github.com/tc39/proposal-string-cooked/issues/13</blockquote></mx-reply><code>String.rare</code> does not really solve the problem, u still need to do many escaping, and it also make the escaping rule much complex.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8-I3bber4Kx_gZbs87P1V_7_iaucf5gh3bGc9tANI3g"}},"msgtype":"m.text"},"ts":1707346949731,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$7d0pGpdMd08RbGQFicGHKHTcPCfn_F_Uxxvo2DCLYr8"},
{"content":{"body":"NB: topics have shuffled a bit on the schedule","m.mentions":{},"msgtype":"m.text"},"ts":1707347047285,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$8C1M_9JxqtbdQ-oXYBulrXxRjKIxZEpeR3VCeDzpAqo"},
{"content":{"body":"> <@rbuckton:matrix.org> When I looked at it before, it was ```` @``` ````, with a n+3 backticks that must be matched, as long as its one more backtick than the number of contiguous backticks in the body.\n\nThis is the draft in repo, I use Swift-style in the slides because I thought the concrete syntax is not important in stage 1 meeting. Sorry for bring confusion. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sHi-jxqHLoRO5tYJyA5PmIN48IWRagtOtKxjJz_E4cI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>When I looked at it before, it was <code>@```</code>, with a n+3 backticks that must be matched, as long as its one more backtick than the number of contiguous backticks in the body.</blockquote></mx-reply>This is the draft in repo, I use Swift-style in the slides because I thought the concrete syntax is not important in stage 1 meeting. Sorry for bring confusion.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sHi-jxqHLoRO5tYJyA5PmIN48IWRagtOtKxjJz_E4cI"}},"msgtype":"m.text"},"ts":1707347175175,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$-zEzdv_9Bx4TyEfQrcec1lPH6OJsW_KJkgpxfu2F2Ek"},
{"content":{"body":"As a syntax, you don't need to limit yourself to `@` and `#` as there are other infix tokens that could be made into a prefix token. For example, you could use ```` \\``` ... ``` ```` to mean \"I've done all the escaping I need to do at the start and end of the string\"","format":"org.matrix.custom.html","formatted_body":"As a syntax, you don't need to limit yourself to <code>@</code> and <code>#</code> as there are other infix tokens that could be made into a prefix token. For example, you could use <code>\\``` ... ```</code> to mean \"I've done all the escaping I need to do at the start and end of the string\"","m.mentions":{},"msgtype":"m.text"},"ts":1707347178531,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI"},
{"content":{"body":"Yeah, I understand there are many possibilities, I just use the syntax which already have precedents in other languages as example.","m.mentions":{},"msgtype":"m.text"},"ts":1707347245093,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$jYAzj83vadJ4X9utx_bFwQWIOYjlWuPfHQHS85TvXWA"},
{"content":{"body":"It does cause problems for tagged templates though...","m.mentions":{},"msgtype":"m.text"},"ts":1707347255331,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$30WZz_GCKHZmsHSNODHO6bUrlCC5-iIhj_tZsiSjrD4"},
{"content":{"body":" * Infix tokens do cause problems for tagged templates, though ```` \\``` ```` doesnt","format":"org.matrix.custom.html","formatted_body":" * Infix tokens do cause problems for tagged templates, though <code>\\```</code> doesnt","m.mentions":{},"m.new_content":{"body":"Infix tokens do cause problems for tagged templates, though ```` \\``` ```` doesnt","format":"org.matrix.custom.html","formatted_body":"Infix tokens do cause problems for tagged templates, though <code>\\```</code> doesnt","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$30WZz_GCKHZmsHSNODHO6bUrlCC5-iIhj_tZsiSjrD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707347290611,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DflmM8kyeQnpRG36kRP2nM5DZj_6GY-29AIL3HCsJFM"},
{"content":{"body":" * Infix tokens do cause problems for tagged templates, though ````\\``````` doesn't","format":"org.matrix.custom.html","formatted_body":" * Infix tokens do cause problems for tagged templates, though ``````````` doesn't","m.mentions":{},"m.new_content":{"body":"Infix tokens do cause problems for tagged templates, though ````\\``````` doesn't","format":"org.matrix.custom.html","formatted_body":"Infix tokens do cause problems for tagged templates, though ``````````` doesn't","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$30WZz_GCKHZmsHSNODHO6bUrlCC5-iIhj_tZsiSjrD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707347293723,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sWRW7AhrX-16QQ4-GaAGHT30An27x7SQvSoFwxHixow"},
{"content":{"body":" * Infix tokens do cause problems for tagged templates, though ```` \\``` ```` doesn't","format":"org.matrix.custom.html","formatted_body":" * Infix tokens do cause problems for tagged templates, though <code>\\```</code> doesn't","m.mentions":{},"m.new_content":{"body":"Infix tokens do cause problems for tagged templates, though ```` \\``` ```` doesn't","format":"org.matrix.custom.html","formatted_body":"Infix tokens do cause problems for tagged templates, though <code>\\```</code> doesn't","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$30WZz_GCKHZmsHSNODHO6bUrlCC5-iIhj_tZsiSjrD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707347310327,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RtleR6kz_-_bHmyps8zZUwaajlx-TLlkOqjO9zN_MmE"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> Maybe \"here documents for JS\"\n\nBut if \"improved template literal\" it very unlikely we could have \"here doc\" style solution. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$stYNoJoGJp7bdSPS5sgj5EQJHJcRj2DzjMvcesM4zPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>Maybe &quot;here documents for JS&quot;</blockquote></mx-reply>But if \"improved template literal\" it very unlikely we could have \"here doc\" style solution.","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$stYNoJoGJp7bdSPS5sgj5EQJHJcRj2DzjMvcesM4zPk"}},"msgtype":"m.text"},"ts":1707347334243,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$BSDDUjEHZPKG15lg7BAZB_sTNF3C7JaMCzhqvMJLLX4"},
{"content":{"body":"> <@rbuckton:matrix.org> Maybe there are improvements that could be made for `String.raw`, but that won't address the main concerns this proposal seeks to address.\n\nI think you just need to partially cook the `raw` string","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2lZld9Ky4ugubKwGIxuJ8qUNYCwbND68aIL590qX4HY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Maybe there are improvements that could be made for <code>String.raw</code>, but that won't address the main concerns this proposal seeks to address.</blockquote></mx-reply>I think you just need to partially cook the <code>raw</code> string","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2lZld9Ky4ugubKwGIxuJ8qUNYCwbND68aIL590qX4HY"}},"msgtype":"m.text"},"ts":1707347809448,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bOo7IapObTHIPCdMYACpff86PMHCW4eUTTP0Byf0IjU"},
{"content":{"body":"The same way dedent is (fully) cooking the dedented raw string","m.mentions":{},"msgtype":"m.text"},"ts":1707347825212,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OI3d8XI4R_ObMFnt82qX5yNM7WbCRlyK7NVacg83b14"},
{"content":{"body":"You'll still need to escape the 3 cases, but those escape sequences won't appear in the rare output (all other escapes would)","m.mentions":{},"msgtype":"m.text"},"ts":1707347879546,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0nFri3fjXYPzJA7oY-0E-yIYxa1q84ogPLcEnIX2tDY"},
{"content":{"body":" * You'll still need to escape the [3 cases](https://gist.github.com/jridgewell/2685608246f0a43cd1c3f3177eabb5ef), but those escape sequences won't appear in the rare output (all other escapes would)","format":"org.matrix.custom.html","formatted_body":" * You'll still need to escape the <a href=\"https://gist.github.com/jridgewell/2685608246f0a43cd1c3f3177eabb5ef\">3 cases</a>, but those escape sequences won't appear in the rare output (all other escapes would)","m.mentions":{},"m.new_content":{"body":"You'll still need to escape the [3 cases](https://gist.github.com/jridgewell/2685608246f0a43cd1c3f3177eabb5ef), but those escape sequences won't appear in the rare output (all other escapes would)","format":"org.matrix.custom.html","formatted_body":"You'll still need to escape the <a href=\"https://gist.github.com/jridgewell/2685608246f0a43cd1c3f3177eabb5ef\">3 cases</a>, but those escape sequences won't appear in the rare output (all other escapes would)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0nFri3fjXYPzJA7oY-0E-yIYxa1q84ogPLcEnIX2tDY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707347930284,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sDBy8gehiR1OSiyVYE3FZV6CM5hJqBJrdky8DTneyUE"},
{"content":{"body":"> <@haxjs:matrix.org> But if \"improved template literal\" it very unlikely we could have \"here doc\" style solution.\n\n```\nconst myEmbeddedString = String.dedent(\n``delimiter text``\n    Whatever I want\n    to have here\n    as long as this ends with\n``delimiter text``);\n```\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BSDDUjEHZPKG15lg7BAZB_sTNF3C7JaMCzhqvMJLLX4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>But if \"improved template literal\" it very unlikely we could have \"here doc\" style solution.</blockquote></mx-reply><pre><code>const myEmbeddedString = String.dedent(\n``delimiter text``\n    Whatever I want\n    to have here\n    as long as this ends with\n``delimiter text``);\n</code></pre>\n","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BSDDUjEHZPKG15lg7BAZB_sTNF3C7JaMCzhqvMJLLX4"}},"msgtype":"m.text"},"ts":1707348004666,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$2i5BkVBYucKqd21cU0qUhyxrNG8Kry7qjyBlwZPULxo"},
{"content":{"body":"I think the interesting thing about the proposal is that you don't need to escape anything, with the exception being `${`, but that could also be tied to the opening of the fenced string literal. The Explainer used n+1 `@` tokens, but could just as easily use n+1 `\\` tokens, etc.","format":"org.matrix.custom.html","formatted_body":"I think the interesting thing about the proposal is that you don't need to escape anything, with the exception being <code>${</code>, but that could also be tied to the opening of the fenced string literal. The Explainer used n+1 <code>@</code> tokens, but could just as easily use n+1 <code>\\</code> tokens, etc.","m.mentions":{},"msgtype":"m.text"},"ts":1707348035429,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nYK5o-0UM5cQGXpGVCL-GeCVAlR3DdkcemmFx12dBFM"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> ```\n> const myEmbeddedString = String.dedent(\n> ``delimiter text``\n>     Whatever I want\n>     to have here\n>     as long as this ends with\n> ``delimiter text``);\n> ```\n\nNot sure how it look like template string (except it use backticks :P ), a problem of here doc style is normally it only support defining end delimiter but we also need to deal with interpolation delimiter.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2i5BkVBYucKqd21cU0qUhyxrNG8Kry7qjyBlwZPULxo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br><pre><code>const myEmbeddedString = String.dedent(\n``delimiter text``\n    Whatever I want\n    to have here\n    as long as this ends with\n``delimiter text``);\n</code></pre>\n</blockquote></mx-reply>Not sure how it look like template string (except it use backticks :P ), a problem of here doc style is normally it only support defining end delimiter but we also need to deal with interpolation delimiter.","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$2i5BkVBYucKqd21cU0qUhyxrNG8Kry7qjyBlwZPULxo"}},"msgtype":"m.text"},"ts":1707348201910,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$kCLwVftIzippaXG-ZTKtvW79pW32suNITT26s4Y0RGk"},
{"content":{"body":"> <@rbuckton:matrix.org> Maybe there are improvements that could be made for `String.raw`, but that won't address the main concerns this proposal seeks to address.\n\nA string tag that is like `String.raw` but it replaces `\\<backtick>` with `<backtick>` and removes backslashes at the end of template parts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2lZld9Ky4ugubKwGIxuJ8qUNYCwbND68aIL590qX4HY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Maybe there are improvements that could be made for <code>String.raw</code>, but that won't address the main concerns this proposal seeks to address.</blockquote></mx-reply>A string tag that is like <code>String.raw</code> but it replaces <code>\\&lt;backtick&gt;</code> with <code>&lt;backtick&gt;</code> and removes backslashes at the end of template parts","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2lZld9Ky4ugubKwGIxuJ8qUNYCwbND68aIL590qX4HY"}},"msgtype":"m.text"},"ts":1707348210144,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$B9KLxXit5HQCB6lvjA9tiAIpHMSonIzsMckl3ZP5j-k"},
{"content":{"body":"That still requires escaping in the literal","m.mentions":{},"msgtype":"m.text"},"ts":1707348293230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J7N9Ww_jGem2SctlbBzHHCRLoDmPEIQ5AUPGKeIFa30"},
{"content":{"body":"> <@haxjs:matrix.org> Not sure how it look like template string (except it use backticks :P ), a problem of here doc style is normally it only support defining end delimiter but we also need to deal with interpolation delimiter.\n\nBetter: normal template literal but new substitution syntax.\nconst myEmbeddedString = String.dedent(`\n    Normal template content\n    ${<<hereDocEndText>>\n        Whatever I want\n        to have here\n        as long as this ends with\n    <<hereDocEndText>>}\n`);","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kCLwVftIzippaXG-ZTKtvW79pW32suNITT26s4Y0RGk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Not sure how it look like template string (except it use backticks :P ), a problem of here doc style is normally it only support defining end delimiter but we also need to deal with interpolation delimiter.</blockquote></mx-reply>Better: normal template literal but new substitution syntax.<br>const myEmbeddedString = String.dedent(<code>Normal template content ${&lt;&lt;hereDocEndText&gt;&gt; Whatever I want to have here as long as this ends with &lt;&lt;hereDocEndText&gt;&gt;}</code>);","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kCLwVftIzippaXG-ZTKtvW79pW32suNITT26s4Y0RGk"}},"msgtype":"m.text"},"ts":1707348338299,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$loTS6mNieahaFjBkJI3J5mJFureaO34Tfhlqm9Ea2Jw"},
{"content":{"body":"yeah, my goal is to avoid escaping. which means, whatever text you have, u could just paste it to js source code , wrap it in a raw literal, without modifcations.","m.mentions":{},"msgtype":"m.text"},"ts":1707348347325,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$69DL3ewIRupq_AWoSaCKUqc4Y3LxAl8dzSw_md-BG9E"},
{"content":{"body":"> <@rbuckton:matrix.org> I think the interesting thing about the proposal is that you don't need to escape anything, with the exception being `${`, but that could also be tied to the opening of the fenced string literal. The Explainer used n+1 `@` tokens, but could just as easily use n+1 `\\` tokens, etc.\n\nIt still doesn't address `\\` at the end of the template, so some escaping will be needed regardless. There was a thread in Google's internal TypeScript chat group about why this case wasn't working with `String.raw`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nYK5o-0UM5cQGXpGVCL-GeCVAlR3DdkcemmFx12dBFM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I think the interesting thing about the proposal is that you don't need to escape anything, with the exception being <code>${</code>, but that could also be tied to the opening of the fenced string literal. The Explainer used n+1 <code>@</code> tokens, but could just as easily use n+1 <code>\\</code> tokens, etc.</blockquote></mx-reply>It still doesn't address <code>\\</code> at the end of the template, so some escaping will be needed regardless. There was a thread in Google's internal TypeScript chat group about why this case wasn't working with <code>String.raw</code>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nYK5o-0UM5cQGXpGVCL-GeCVAlR3DdkcemmFx12dBFM"}},"msgtype":"m.text"},"ts":1707348416140,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G5ol8EvjQVS-j0HLHma1wb3yQMvUdR0brcgc6hEvMEg"},
{"content":{"body":"> <@jridgewell:matrix.org> It still doesn't address `\\` at the end of the template, so some escaping will be needed regardless. There was a thread in Google's internal TypeScript chat group about why this case wasn't working with `String.raw`\n\nit could. `\\` should have no effect on parsing raw literal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$G5ol8EvjQVS-j0HLHma1wb3yQMvUdR0brcgc6hEvMEg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>It still doesn't address <code>\\</code> at the end of the template, so some escaping will be needed regardless. There was a thread in Google's internal TypeScript chat group about why this case wasn't working with <code>String.raw</code></blockquote></mx-reply>it could. <code>\\</code> should have no effect on parsing raw literal.","m.mentions":{"user_ids":["@jridgewell:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G5ol8EvjQVS-j0HLHma1wb3yQMvUdR0brcgc6hEvMEg"}},"msgtype":"m.text"},"ts":1707348499063,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$JlW8AzowrUrbK9psvYAEP7CElCMFNkmqho2G0CqJ-FA"},
{"content":{"body":"If a raw literal syntax does no escaping, then a trailing `\\` is just a `\\`. the only thing it looks for is a balanced set of `` ` `` characters","format":"org.matrix.custom.html","formatted_body":"If a raw literal syntax does no escaping, then a trailing <code>\\</code> is just a <code>\\</code>. the only thing it looks for is a balanced set of <code>`</code> characters","m.mentions":{},"msgtype":"m.text"},"ts":1707348508041,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fBInpfCrD46tlFUGMrZ5USD02aGJDDlBXwbnVkPqr8E"},
{"content":{"body":"Yeah, we just need some mechanism to define the ending token and the interpolation token.","m.mentions":{},"msgtype":"m.text"},"ts":1707348555322,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$vXdJy-ucMYbRXJXQ7m0dwqQBwH73_OJ2i1gcbUbVSO0"},
{"content":{"body":"```` \\```\\``` ``` would be the string `\\`. The only caveat, being a string consisting only of `` ` ``","format":"org.matrix.custom.html","formatted_body":"```` `<code>\\``` ``` would be the string `\\`. The only caveat, being a string consisting only of </code> ` ``","m.mentions":{},"msgtype":"m.text"},"ts":1707348599557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XJ-yBLNPITTYVViyloD7JFgVaJ72ayl63X42aINPIpg"},
{"content":{"body":"element or matrix did not like that...","m.mentions":{},"msgtype":"m.text"},"ts":1707348614272,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pNekCgjjYbo8L4Ggd-QYNHZAL23XCTLCtP2U6Kj_Ppw"},
{"content":{"body":"Even `\\x20` isn't transformed? I need to pay better attention.","format":"org.matrix.custom.html","formatted_body":"Even <code>\\x20</code> isn't transformed? I need to pay better attention.","m.mentions":{},"msgtype":"m.text"},"ts":1707348621607,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$453G_1H08PBixb-UVcgnwzrpLcsPKAy5NOg3MGHK1AA"},
{"content":{"body":"This is why I use swift-style in the slide, because swift style only use number of `#` to define both token, which IMO the simplest solution. But I don't know how others think about \"simple\"...","format":"org.matrix.custom.html","formatted_body":"This is why I use swift-style in the slide, because swift style only use number of <code>#</code> to define both token, which IMO the simplest solution. But I don't know how others think about \"simple\"...","m.mentions":{},"msgtype":"m.text"},"ts":1707348646535,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$LyEANz3Ef0pn1rgE3ddk3aZUwD34eX2CzYm8P0iMToE"},
{"content":{"body":" * ```\n\\```\\```\n```\nwould be the string `\\`. The only caveat, being a string consisting only of `` ` ``","format":"org.matrix.custom.html","formatted_body":" * <pre><code>\\```\\```\n</code></pre>\n<p>would be the string <code>\\</code>. The only caveat, being a string consisting only of <code>`</code></p>\n","m.mentions":{},"m.new_content":{"body":"```\n\\```\\```\n```\nwould be the string `\\`. The only caveat, being a string consisting only of `` ` ``","format":"org.matrix.custom.html","formatted_body":"<pre><code>\\```\\```\n</code></pre>\n<p>would be the string <code>\\</code>. The only caveat, being a string consisting only of <code>`</code></p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XJ-yBLNPITTYVViyloD7JFgVaJ72ayl63X42aINPIpg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707348671092,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UPzwj-bROun5v0IWwe0yAhtnCSp0__ZTA8pxgIWkivs"},
{"content":{"body":"> <@jridgewell:matrix.org> Even `\\x20` isn't transformed? I need to pay better attention.\n\nif Swift style, it allow u to reenable escaping by `\\#x20` ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$453G_1H08PBixb-UVcgnwzrpLcsPKAy5NOg3MGHK1AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Even <code>\\x20</code> isn't transformed? I need to pay better attention.</blockquote></mx-reply>if Swift style, it allow u to reenable escaping by <code>\\#x20</code>","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$453G_1H08PBixb-UVcgnwzrpLcsPKAy5NOg3MGHK1AA"}},"msgtype":"m.text"},"ts":1707348689004,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$ZfWa1L7yt0RafiWgxMzCZmT3D9F48PiM1Y4npdBnec4"},
{"content":{"body":"> <@haxjs:matrix.org> This is why I use swift-style in the slide, because swift style only use number of `#` to define both token, which IMO the simplest solution. But I don't know how others think about \"simple\"...\n\nIf there are concerns about \"wasting\" `#`, you could consider using `@` since I don't think anybody would ever want to use it for anything other than decorators anyway","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LyEANz3Ef0pn1rgE3ddk3aZUwD34eX2CzYm8P0iMToE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>This is why I use swift-style in the slide, because swift style only use number of <code>#</code> to define both token, which IMO the simplest solution. But I don't know how others think about \"simple\"...</blockquote></mx-reply>If there are concerns about \"wasting\" <code>#</code>, you could consider using <code>@</code> since I don't think anybody would ever want to use it for anything other than decorators anyway","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LyEANz3Ef0pn1rgE3ddk3aZUwD34eX2CzYm8P0iMToE"}},"msgtype":"m.text"},"ts":1707348710527,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$S90tCfljD7pCmGER0jYk1p5_8suU5X5GpM2O11AMifk"},
{"content":{"body":"> <@jridgewell:matrix.org> Even `\\x20` isn't transformed? I need to pay better attention.\n\nI think that's correct, from my interpretation of the proposal repo","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$453G_1H08PBixb-UVcgnwzrpLcsPKAy5NOg3MGHK1AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Even <code>\\x20</code> isn't transformed? I need to pay better attention.</blockquote></mx-reply>I think that's correct, from my interpretation of the proposal repo","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$453G_1H08PBixb-UVcgnwzrpLcsPKAy5NOg3MGHK1AA"}},"msgtype":"m.text"},"ts":1707348729720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WXpBARB5uDcvOFXtO6pfHmdgcoqB4smogsViupS8yp4"},
{"content":{"body":"> <@haxjs:matrix.org> if Swift style, it allow u to reenable escaping by `\\#x20`\n\nHow do you represent that inside a string, then?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZfWa1L7yt0RafiWgxMzCZmT3D9F48PiM1Y4npdBnec4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>if Swift style, it allow u to reenable escaping by <code>\\#x20</code></blockquote></mx-reply>How do you represent that inside a string, then?","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZfWa1L7yt0RafiWgxMzCZmT3D9F48PiM1Y4npdBnec4"}},"msgtype":"m.text"},"ts":1707348744685,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VTseXxs6_dUxx_4dFKZ4qoBJmG_uuw692mefWPZCDtw"},
{"content":{"body":"> <@jridgewell:matrix.org> How do you represent that inside a string, then?\n\nIncrease the number of # ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VTseXxs6_dUxx_4dFKZ4qoBJmG_uuw692mefWPZCDtw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>How do you represent that inside a string, then?</blockquote></mx-reply>Increase the number of #","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VTseXxs6_dUxx_4dFKZ4qoBJmG_uuw692mefWPZCDtw"}},"msgtype":"m.text"},"ts":1707348776651,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$mQCKl_TVxp43z4_tuhptSNEG2XJlzJTY2f69MzFvxpo"},
{"content":{"body":"More `#`?","format":"org.matrix.custom.html","formatted_body":"More <code>#</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1707348777970,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G6waKl0Z6fJYwbncpYOfrM61obj-UjmFFkIvkCbb7b0"},
{"content":{"body":"Yah","m.mentions":{},"msgtype":"m.text"},"ts":1707348780448,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OAQWTplKDiGsaYKM3V-ZHd6WkMOsIn_7WYn3BScqu-8"},
{"content":{"body":"Ok","m.mentions":{},"msgtype":"m.text"},"ts":1707348781246,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5ts-o7mVQPAB4ZBOsLqJ-Taqc7yH_X7pva6aaNIW92U"},
{"content":{"body":"On the other side, C# raw strings use two symbols: the number of \" for end token, the number of $ for interpolation token.","m.mentions":{},"msgtype":"m.text"},"ts":1707348840293,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$O5XxRoyY6BUAyPbytCYBUbH5450Plwf0jHMDpIlI3vA"},
{"content":{"body":"The draft in the repo use C# style.","m.mentions":{},"msgtype":"m.text"},"ts":1707348859605,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$splKPujQfZsvEa7fxcfg89AAYEHLuUDmkqFCrjBneDU"},
{"content":{"body":"Personally I feel Swift style is much \"simple\" :P","m.mentions":{},"msgtype":"m.text"},"ts":1707348885270,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$D5xv1rULRpWAyZAQcJbi-R6Gcb6G4BoQIMiFjtATnmo"},
{"content":{"body":"> <@rbuckton:matrix.org> As a syntax, you don't need to limit yourself to `@` and `#` as there are other infix tokens that could be made into a prefix token. For example, you could use ```` \\``` ... ``` ```` to mean \"I've done all the escaping I need to do at the start and end of the string\"\n\n One point is, if only use repeated ` (or any repeated single char) as end token, it significantly has more conflict probability than combinations like `` `#`` .\n  ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>As a syntax, you don't need to limit yourself to <code>@</code> and <code>#</code> as there are other infix tokens that could be made into a prefix token. For example, you could use <code>\\``` ... ```</code> to mean \"I've done all the escaping I need to do at the start and end of the string\"</blockquote></mx-reply>One point is, if only use repeated <code>(or any repeated single char) as end token, it significantly has more conflict probability than combinations like ``</code>#`` .","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI"}},"msgtype":"m.text"},"ts":1707349363801,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$pw01SZxProWflw1oe1V2JkRu5ie7CfNwgfGV0TRH9QY"},
{"content":{"body":"> <@rbuckton:matrix.org> As a syntax, you don't need to limit yourself to `@` and `#` as there are other infix tokens that could be made into a prefix token. For example, you could use ```` \\``` ... ``` ```` to mean \"I've done all the escaping I need to do at the start and end of the string\"\n\n * One point is, if only use repeated `` ` ``(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `````#\\`\\` .","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>As a syntax, you don't need to limit yourself to <code>@</code> and <code>#</code> as there are other infix tokens that could be made into a prefix token. For example, you could use <code>\\``` ... ```</code> to mean \"I've done all the escaping I need to do at the start and end of the string\"</blockquote></mx-reply> * One point is, if only use repeated <code>`</code>(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `````#`` .","m.mentions":{},"m.new_content":{"body":"One point is, if only use repeated `` ` ``(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `````#\\`\\` .","format":"org.matrix.custom.html","formatted_body":"One point is, if only use repeated <code>`</code>(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `````#`` .","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pw01SZxProWflw1oe1V2JkRu5ie7CfNwgfGV0TRH9QY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707349391345,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$mdudJNwRmbo-LI0r-tG4swhVCiAHZElofmGM0jdxJos"},
{"content":{"body":" * One point is, if only use repeated `` ` ``(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `` `#``.","format":"org.matrix.custom.html","formatted_body":" * One point is, if only use repeated <code>`</code>(or any repeated single char) as end token, it significantly has more conflict probability than combinations like <code> `#</code>.","m.mentions":{},"m.new_content":{"body":"One point is, if only use repeated `` ` ``(or any repeated single char) as end token, it significantly has more conflict probability than combinations like `` `#``.","format":"org.matrix.custom.html","formatted_body":"One point is, if only use repeated <code>`</code>(or any repeated single char) as end token, it significantly has more conflict probability than combinations like <code> `#</code>.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pw01SZxProWflw1oe1V2JkRu5ie7CfNwgfGV0TRH9QY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1707349423553,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$Nw81vxNKyLsUblRMqIYS_WYdALL613ysFglRAuY8lIM"},
{"content":{"body":"The removal of the curly brackets dramatically helps me absorb the syntax here.","m.mentions":{},"msgtype":"m.text"},"ts":1707349971612,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$XPjBXbTkTMruaIHKqTR1XEM4YONYTrWNepIIPgQxp4k"},
{"content":{"body":"> <@rbuckton:matrix.org> As a syntax, you don't need to limit yourself to `@` and `#` as there are other infix tokens that could be made into a prefix token. For example, you could use ```` \\``` ... ``` ```` to mean \"I've done all the escaping I need to do at the start and end of the string\"\n\nWith this syntax, how would you write a string that starts with a backtick?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>As a syntax, you don't need to limit yourself to <code>@</code> and <code>#</code> as there are other infix tokens that could be made into a prefix token. For example, you could use <code>\\``` ... ```</code> to mean \"I've done all the escaping I need to do at the start and end of the string\"</blockquote></mx-reply>With this syntax, how would you write a string that starts with a backtick?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1r6IWd5_cmqpx_jwJ7XENLYcaw7av6s2sagIDN0zloI"}},"msgtype":"m.text"},"ts":1707349984244,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$b-RZZ2NfMZW5AdrYIRDRARUh2jNZfnS8u5--KmwyzUQ"},
{"content":{"body":"^ Is this problem solvable in any way?","m.mentions":{},"msgtype":"m.text"},"ts":1707350006720,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JOOtK6WwPDeEH8CymhmfJqDjo2AuU-1srMjCfhjYaV4"},
{"content":{"body":"nicolo-ribaudo: require that triple-backtick strings have a leading and trailing newline, and strip those from the output","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: require that triple-backtick strings have a leading and trailing newline, and strip those from the output","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1707350077620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z-lqYmMWiaOSq2iivum-4cHNOVd5vUXWjKqoU4dYKCY"}
]