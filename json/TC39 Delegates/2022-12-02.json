[
{"content":{"body":"> <@alex.vincent:matrix.org> rbuckton: I do want to confer with you sometime in December (but not in the next few days) about the resource management, cancellation, and proxy revocation proposals.  Do you attend SES's strategy sessions occasionally?\n\nI haven't so far, mostly due to time constraints. I can make some time though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LXcsRgGKx716dB1BpIkXhnawacNsZvwcW76_qLdGsAQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I do want to confer with you sometime in December (but not in the next few days) about the resource management, cancellation, and proxy revocation proposals.  Do you attend SES's strategy sessions occasionally?</blockquote></mx-reply>I haven't so far, mostly due to time constraints. I can make some time though.","m.relates_to":{"m.in_reply_to":{"event_id":"$LXcsRgGKx716dB1BpIkXhnawacNsZvwcW76_qLdGsAQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@alex.vincent:matrix.org> rbuckton: I do want to confer with you sometime in December (but not in the next few days) about the resource management, cancellation, and proxy revocation proposals.  Do you attend SES's strategy sessions occasionally?\n\nI haven't so far, mostly due to time constraints. I can make some time though.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LXcsRgGKx716dB1BpIkXhnawacNsZvwcW76_qLdGsAQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I do want to confer with you sometime in December (but not in the next few days) about the resource management, cancellation, and proxy revocation proposals.  Do you attend SES's strategy sessions occasionally?</blockquote></mx-reply>I haven't so far, mostly due to time constraints. I can make some time though.","mimetype":"text/html"}]},"ts":1669940625827,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SO8IKp_ZFPn_YSR100cEvW8GdnXGd4ZLNhHI60Kkz6o"},
{"content":{"body":"My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","format":"org.matrix.custom.html","formatted_body":"<p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","mimetype":"text/plain"},{"body":"<p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$P9TwzPG7Qr3PhAyChKux2JqhUc_1mh4_Z79qxkQ2LRk"}}},"ts":1669940897138,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UHXhzVOvGqNkK84zWxXmF_6YAY4HYnveTVUNkd9AZS0"},
{"content":{"body":" * My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P9TwzPG7Qr3PhAyChKux2JqhUc_1mh4_Z79qxkQ2LRk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><p>Honestly it sounds like we're starting to get at, module fragments should be in a separate namespace. Neither variables nor strings, but a secret third thing. As an obviously unusable strawman, let's say they begin with <code>##</code> :). So the example would be:</p>\n<pre><code class=\"language-js\">module ##a { let b = getAModule(); await import(b); /* obviously targets the lexically scoped variable */ }\nmodule ##b { import ##a; /* obviously targets the module declaration */ }\n</code></pre>\n</blockquote></mx-reply> * <p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","m.new_content":{"body":"My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","format":"org.matrix.custom.html","formatted_body":"<p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","mimetype":"text/plain"},{"body":"<p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$UHXhzVOvGqNkK84zWxXmF_6YAY4HYnveTVUNkd9AZS0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My suggestion was to just close over regular bindings, and when serializing determine if the binding is:\n\n1. rewritable (i.e., globals)\n2. serializable (such as another `module`)\n3. non-portable (anything else)\nand throw if there are any non-portable values.\n\nA side benefit would be that it would be an error to accidentally reference a variable that shadows a global.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P9TwzPG7Qr3PhAyChKux2JqhUc_1mh4_Z79qxkQ2LRk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><p>Honestly it sounds like we're starting to get at, module fragments should be in a separate namespace. Neither variables nor strings, but a secret third thing. As an obviously unusable strawman, let's say they begin with <code>##</code> :). So the example would be:</p>\n<pre><code class=\"language-js\">module ##a { let b = getAModule(); await import(b); /* obviously targets the lexically scoped variable */ }\nmodule ##b { import ##a; /* obviously targets the module declaration */ }\n</code></pre>\n</blockquote></mx-reply> * <p>My suggestion was to just close over regular bindings, and when serializing determine if the binding is:</p>\n<ol>\n<li>rewritable (i.e., globals)</li>\n<li>serializable (such as another <code>module</code>)</li>\n<li>non-portable (anything else)<br>and throw if there are any non-portable values.</li>\n</ol>\n<p>A side benefit would be that it would be an error to accidentally reference a variable that shadows a global.</p>\n","mimetype":"text/html"}]},"ts":1669940920867,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PlYf0hxCvO8MfawG1h6I__c12sQtuZIlzs4U2Jjv5do"},
{"content":{"body":"To further clarify, we'd determine if a _binding_ is rewritable or not rewritable, and if the binding is not rewritable, determine if its _value_ is portable (i.e., serializable) or non-portable.","format":"org.matrix.custom.html","formatted_body":"To further clarify, we'd determine if a <em>binding</em> is rewritable or not rewritable, and if the binding is not rewritable, determine if its <em>value</em> is portable (i.e., serializable) or non-portable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"To further clarify, we'd determine if a _binding_ is rewritable or not rewritable, and if the binding is not rewritable, determine if its _value_ is portable (i.e., serializable) or non-portable.","mimetype":"text/plain"},{"body":"To further clarify, we'd determine if a <em>binding</em> is rewritable or not rewritable, and if the binding is not rewritable, determine if its <em>value</em> is portable (i.e., serializable) or non-portable.","mimetype":"text/html"}]},"ts":1669940978541,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wy_I9y-pVrlrDdZ8Nbe_VFCy6P9W_Qtbc8B1b_B7I80"},
{"content":{"body":"When blöcks was presented, there was a lot of skepticism about this particular aspect of the proposal. It is very deliberate that module blocks omits it.","msgtype":"m.text"},"ts":1669941006573,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$17Xi1UgMPeo-qiLdz7w9DPexXZtmGd4lblT4S25_nj4"},
{"content":{"body":"I honestly don’t understand how we could make this mechanism work well enough, given how dynamic JS is and how this committee tries to meet expectations of all the edge cases working well (eg with eval)","msgtype":"m.text"},"ts":1669941079235,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hBGAZMfldFqGepkE_OvK88OJCzB5FNTq00tDvIzJW88"},
{"content":{"body":"I like that you have some details spelled out though ","format":"org.matrix.custom.html","formatted_body":"I like that you have some details spelled out though","msgtype":"m.text"},"ts":1669941105546,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AfnrLpeVPt2lLlFdYmWmUjBfrsB6iUmqIyW1BoRUBaM"},
{"content":{"body":"IIRC, the blöcks proposal wanted you to substitute the bindings explicitly when you instantiated the block ","msgtype":"m.text","org.matrix.msc1767.text":"IIRC, the blöcks proposal wanted you to substitute the bindings explicitly when you instantiated the block "},"ts":1669941165145,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hzt3K2K9kkaGD6JaSQ4X6c5WOwnxaBsXNHPD3JNdtFc"},
{"content":{"body":"In particular I don’t know how “rewritable” would work. Module blocks is content with just reevaluating in the other realm.","msgtype":"m.text"},"ts":1669941177831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$j5r4a-iouwGwXCC8o42S6gvqr3lkkKpGIh-akdTanwM"},
{"content":{"body":"> <@littledan:matrix.org> In particular I don’t know how “rewritable” would work. Module blocks is content with just reevaluating in the other realm.\n\nThat's exactly what I mean by rewritable: \"these are the things that you just reevaluate in the other realm\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$j5r4a-iouwGwXCC8o42S6gvqr3lkkKpGIh-akdTanwM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>In particular I don’t know how “rewritable” would work. Module blocks is content with just reevaluating in the other realm.</blockquote></mx-reply>That's exactly what I mean by rewritable: &quot;these are the things that you just reevaluate in the other realm&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$j5r4a-iouwGwXCC8o42S6gvqr3lkkKpGIh-akdTanwM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> In particular I don’t know how “rewritable” would work. Module blocks is content with just reevaluating in the other realm.\n\nThat's exactly what I mean by rewritable: \"these are the things that you just reevaluate in the other realm\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$j5r4a-iouwGwXCC8o42S6gvqr3lkkKpGIh-akdTanwM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>In particular I don’t know how “rewritable” would work. Module blocks is content with just reevaluating in the other realm.</blockquote></mx-reply>That's exactly what I mean by rewritable: &quot;these are the things that you just reevaluate in the other realm&quot;","mimetype":"text/html"}]},"ts":1669941209309,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sOeyvPyAcsYcw8YHEAcgcxejg0eM25QhKgVmw6J2Hhs"},
{"content":{"body":"Ah Ok","msgtype":"m.text"},"ts":1669941216922,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AW9HMwjgMw8cdA8ogRbO1iLVg9M1vUmqMit_LCD05-c"},
{"content":{"body":"The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","format":"org.matrix.custom.html","formatted_body":"The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/plain"},{"body":"The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/html"}]},"ts":1669941245021,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xp5HrrmO0IGKB9zgUI-YA6P1T2qc56RLTPgu7GGEZ2E"},
{"content":{"body":" * The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","format":"org.matrix.custom.html","formatted_body":" * The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","m.new_content":{"body":"The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","format":"org.matrix.custom.html","formatted_body":"The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/plain"},{"body":"The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xp5HrrmO0IGKB9zgUI-YA6P1T2qc56RLTPgu7GGEZ2E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The current proposal allows you to lexically reference another `module` and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/plain"},{"body":" * The current proposal allows you to lexically reference another <code>module</code> and explicitly breaks that model, since you're not just looking up that name in another realm.","mimetype":"text/html"}]},"ts":1669941261843,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xGElc9LGSlgLXCe2MO2aC2g4BN924I7tQBVxlr91vTo"},
{"content":{"body":"So the other thing is, given module blocks, you can define a system which serializes a list of things and then passes them as arguments to a default-exported function. I guess a bit more unergonomic due to the duplication though.","msgtype":"m.text"},"ts":1669941278139,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AwhIBHugvApgRTNQ0wTXtTjYf5NM4tmNTOBCtm_fWog"}
]