[
{"content":{"body":"change-array-by-copy methods dropped from 10 to 4\nhttps://github.com/tc39/proposal-change-array-by-copy/issues/27","msgtype":"m.text"},"ts":1630503468472,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KHs7w13trBcvft6MrwQWVLhq06kLkAF5wzbEgmYMUmM"},
{"content":{"body":"do we want to take notes for the \"Response to ECMA / LF Proposed Partnership | Michael Saboff\" item?","msgtype":"m.text"},"ts":1630504057167,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G9hGdpCKmvYFmV9F8GuSDPcWW7Hy4K9JUFbzMnQr6T0"},
{"content":{"body":"I'm never sure for the administrative rather than technical items","msgtype":"m.text"},"ts":1630504074207,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xly-rwl9xTWg8eMZwrqeUBxPRbKuLoNuLlr-ACrn8GI"},
{"content":{"body":"yes, take notes, but we won't make them publish them publicly","msgtype":"m.text"},"ts":1630504214762,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$h0sp00SO_ubFCItHQBi-rXd2OiWTbHJls-U8IHVN8AU"},
{"content":{"body":"the jitsi is open - same passcode as yesterday","msgtype":"m.text"},"ts":1630504364375,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dYryF5T5c8RU24tPNrIaX5d0bfpgd-tk_lUOcz4JSqw"},
{"content":{"body":"I also strongly support the \"safety value\" of permissive copyright agreements/forkability","msgtype":"m.text"},"ts":1630507452054,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$qQ1wUcgsxS4fJyF8w86ASPmQy3rjPMYEccz2YSDG80g"},
{"content":{"body":"just FYI here's the list of ecma members: https://www.ecma-international.org/about-ecma/members/","msgtype":"m.text"},"ts":1630507787242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BElDsWD9ksLmwmaYmoPr15YWkrI4f2zXJqyNE5Pjuck"},
{"content":{"body":"ceil, floor, round, trunc, really?","msgtype":"m.text"},"ts":1630508931456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pSiowl1M4mxtXeGu6Gr9l-ZKSmZs52DdxieGBAIzljI"},
{"content":{"body":"I'd actually say that stage 1 shouldn't be about extending Math specifically, just about adding more math operations for bigints","msgtype":"m.text"},"ts":1630508951847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3KGEjrbKMiVPITtwB0XKWdVOTc0yFJEtlLU462FW164"},
{"content":{"body":"\"bigint math\" indeed doesn't necessarily mean it has to be on `Math`","format":"org.matrix.custom.html","formatted_body":"&quot;bigint math&quot; indeed doesn't necessarily mean it has to be on <code>Math</code>","msgtype":"m.text"},"ts":1630508971082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MQUsruOf51-X22g6SkoHctYaSINMHxBXunBSe2Tr3y4"},
{"content":{"body":"It could just be on `BigInt`","format":"org.matrix.custom.html","formatted_body":"It could just be on <code>BigInt</code>","msgtype":"m.text"},"ts":1630508984513,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QyC6p7vi334bW3I03CQtIteeZSq2eDJM2FbGt2TI-hw"},
{"content":{"body":"the challenge there is, \"why are these things on Number too?\"","msgtype":"m.text"},"ts":1630508996939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$isGKd1MjLWXlZhqU1qZZdJ--9Q7O1GOIWJ6ZwP5MZbE"},
{"content":{"body":" * the challenge there is, \"why aren't these things on Number too?\"","m.new_content":{"body":"the challenge there is, \"why aren't these things on Number too?\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$isGKd1MjLWXlZhqU1qZZdJ--9Q7O1GOIWJ6ZwP5MZbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509001219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WgSTgjd4n6BX9uLhmwanhsBdeEc5Xaj6FZxxbEJinNU"},
{"content":{"body":"iow, perhaps most of the Math methods belonged on Number, but here we are","msgtype":"m.text"},"ts":1630509015017,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r4-OFzetu_i_z-2nXgtLTnqwwI-duRri3iK4pBBbnFM"},
{"content":{"body":"maybe we could later add aliases on `Number` 😀 ","format":"org.matrix.custom.html","formatted_body":"maybe we could later add aliases on <code>Number</code> 😀","msgtype":"m.text"},"ts":1630509021410,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rOAZ7dJNBFS6zFysE6TPoggQsgIkWbp0T40ujNNcDrg"},
{"content":{"body":"Also possible to introduce a separate global, i.e., `MathN` or `BigMath`, but I'd hate to have to do this over and over if we add more number types in the future.","format":"org.matrix.custom.html","formatted_body":"Also possible to introduce a separate global, i.e., <code>MathN</code> or <code>BigMath</code>, but I'd hate to have to do this over and over if we add more number types in the future.","msgtype":"m.text"},"ts":1630509052748,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wKKoPJfnR_nQPEMevuZ1AcrQPnVPPk5JSxpOdct4GD0"},
{"content":{"body":"It could be namespaced, `Math.BigInt.*`","format":"org.matrix.custom.html","formatted_body":"It could be namespaced, <code>Math.BigInt.*</code>","msgtype":"m.text"},"ts":1630509084229,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fYnk2aiQH06DVXnDM_91EmrmRIq4kUlzU7U-AxpRu50"},
{"content":{"body":"what about `mixedArrayWithNumbersAndBigInts.map(Math.abs)`?","format":"org.matrix.custom.html","formatted_body":"what about <code>mixedArrayWithNumbersAndBigInts.map(Math.abs)</code>?","msgtype":"m.text"},"ts":1630509097382,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Jvpwnle5PSqra2xF14YJX5GBRx4Qps2OGhK91jq7IUY"},
{"content":{"body":" * would have to be `Math.bigint.*` then, thanks to `Temporal.Now`","format":"org.matrix.custom.html","formatted_body":" * would have to be <code>Math.bigint.*</code> then, thanks to <code>Temporal.Now</code>","m.new_content":{"body":"would have to be `Math.bigint.*` then, thanks to `Temporal.Now`","format":"org.matrix.custom.html","formatted_body":"would have to be <code>Math.bigint.*</code> then, thanks to <code>Temporal.Now</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$qBMJJSd9txf4tGP-S87521cHfWFEAs6Uu5uiCPNJrZk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509109483,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wXG0YD45Bb9xefl70eyxySvZegDaZwx3A-mdhGYZfno"},
{"content":{"body":"wait, isn't it a namespace too?","msgtype":"m.text"},"ts":1630509123900,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$WMp3PopBqOLVH6vQ8odIJ_pRclhrnIpkn_tnVf1Qsy4"},
{"content":{"body":"lol nvm, i'm tired and confused myself","msgtype":"m.text"},"ts":1630509130637,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W6UD86re032CzCvS2AoaNOFMf94xCE33z6YnGHoqcyI"},
{"content":{"body":"so same capitalization","msgtype":"m.text"},"ts":1630509130674,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Mz-_6dKvzrlyWC9BhSslbclb4YKeQIUmLiOngnYXlRE"},
{"content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work.","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work.","msgtype":"m.text"},"ts":1630509281954,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509311194,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q8RcDyr1IwytJV9S39hSOdeGOV_otcUOPSEZdU99Z8s"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509324493,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uRpnY4JyTy1CD77eU3pmswiWRmC-U2-5iRVhsx61ncA"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509362655,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8eZX6ocI3Wm8OtJu7lbTHvEzvAA8ceaPVG0_niQT6so"},
{"content":{"body":"I fully support \"maths operations for BigInts\", not so sure about the choice of functions listed here","msgtype":"m.text"},"ts":1630509405828,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9a_PNqRCvuZ0BK8D6GhozpcYeKQIJ97mDKY0ZZzWmi0"},
{"content":{"body":"yeah, +1 for excluding transcedentals","msgtype":"m.text"},"ts":1630509423605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oDrYx92TB-bTITp3JGWYgMbt2B03Zy2SPkF9YbrdA1g"},
{"content":{"body":"support for some kind of NS instead of `bigMax` and `bigMin`","format":"org.matrix.custom.html","formatted_body":"support for some kind of NS instead of <code>bigMax</code> and <code>bigMin</code>","msgtype":"m.text"},"ts":1630509502742,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5OfKdAoJGevIGMJFCR3yEAOqc2Jmlex-NFo01DrW9qM"},
{"content":{"body":"though also, +1 for hashing out the exact list in stage 1","msgtype":"m.text"},"ts":1630509509027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1P-s3IFRna8p4mPycjr3r9pZkq7Jv-XANmogUABajEw"},
{"content":{"body":"i don't know if it's bizarre that arbitrary precision math doesn't \"just work\"...","msgtype":"m.text"},"ts":1630509570105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3CeF-6l4tbL6nXA_Eex-P9Gmj3Ti03JYTPWrIC5ptQk"},
{"content":{"body":"max/min isn't \"arbitrary precision\", it's a form of `>` and `<`","format":"org.matrix.custom.html","formatted_body":"max/min isn't &quot;arbitrary precision&quot;, it's a form of <code>&gt;</code> and <code>&lt;</code>","msgtype":"m.text"},"ts":1630509595247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X5DqOx8kdHd0bl1NrvyNFOjq6p2s3eSiB3R6shhOiXI"},
{"content":{"body":"if i can do `999999999999999999999999999999999999999999999999999999999999999n > 1`, why can't i put those in max or min?","format":"org.matrix.custom.html","formatted_body":"if i can do <code>999999999999999999999999999999999999999999999999999999999999999n &gt; 1</code>, why can't i put those in max or min?","msgtype":"m.text"},"ts":1630509618626,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hnFppUQqizHFjntwrlYRoOQPXXSuqidOrNWCTJnWarg"},
{"content":{"body":"> because there's no accidental precision loss\n\n`10000000000000000000000n < 10000000000000000000000.1`\n\n`> false`\n\n🤨","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>because there's no accidental precision loss</p>\n</blockquote>\n<p><code>10000000000000000000000n &lt; 10000000000000000000000.1</code></p>\n<p><code>&gt; false</code></p>\n<p>🤨</p>\n","msgtype":"m.text"},"ts":1630509640241,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$ijiQcmFXbEV_4r6xjRqfMQVs-Jr2_0Ayyr-ogIQ3xtw"},
{"content":{"body":"ljharb: yes, my comment is about unqualified \"math\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yes, my comment is about unqualified &quot;math&quot;","msgtype":"m.text"},"ts":1630509660873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ASu5uWjaEjPZL-ZmkNzRF-pScTAjdq0VLBZfQYJIl8Q"},
{"content":{"body":"in that case the loss happens on the number creation, not part of the `<`","format":"org.matrix.custom.html","formatted_body":"in that case the loss happens on the number creation, not part of the <code>&lt;</code>","msgtype":"m.text"},"ts":1630509661063,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZF_lsIQD-QilZU_I_GHWiBQQUwZmLX8An5WfuXP2O8g"},
{"content":{"body":"You don't know the return type of `Math.min(x, y)` when `x` is a number and `y` is a bigint","format":"org.matrix.custom.html","formatted_body":"You don't know the return type of <code>Math.min(x, y)</code> when <code>x</code> is a number and <code>y</code> is a bigint","msgtype":"m.text"},"ts":1630509661465,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$B_jK0aQETKZ9gFWmt7OK3zfShxJeC-WgANGJis5O1jg"},
{"content":{"body":"I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","msgtype":"m.text"},"ts":1630509697181,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$tg1o2kwT6yQfZ1R4iFIdYdNQKWdoZdRowRW-91n331U"},
{"content":{"body":"nicolo-ribaudo: the return type is T, the type of your inputs - number if all numbers or non-numbers, bigint if all bigints, number or bigint if both","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: the return type is T, the type of your inputs - number if all numbers or non-numbers, bigint if all bigints, number or bigint if both","msgtype":"m.text"},"ts":1630509698934,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L5plv1DA9FWJLflj--0wpyuoCpRNm2P3F7V7BhSpR2Y"},
{"content":{"body":"RangeError, surely?","msgtype":"m.text"},"ts":1630509704118,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fX3L_9ucSenENJoS0wc90BwDEqm-3_9X4gapgpqixo8"},
{"content":{"body":" * I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","m.new_content":{"body":"I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","msgtype":"m.text"},"m.relates_to":{"event_id":"$tg1o2kwT6yQfZ1R4iFIdYdNQKWdoZdRowRW-91n331U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509705488,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$zmza0cBY7yT362P3bwdhMpw7HURkJVUtcTqqno3YSY4"},
{"content":{"body":"I guess TypeError makes sense from one perspective","msgtype":"m.text"},"ts":1630509712464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rnRwr_dVLPKk4DkHwc93mucEbtsrHLysEiQPqUfHHLo"},
{"content":{"body":"why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":"why would it be an error of any kind if <code>&lt;</code> with them isn't","msgtype":"m.text"},"ts":1630509720250,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BiaQx8-dV1Zt9tZ7GUfw_QQPApODoRT9zE0Oz423bBs"},
{"content":{"body":" * why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":" * why would it be an error of any kind if <code>&lt;</code> with them isn't","m.new_content":{"body":"why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":"why would it be an error of any kind if <code>&lt;</code> with them isn't","msgtype":"m.text"},"m.relates_to":{"event_id":"$BiaQx8-dV1Zt9tZ7GUfw_QQPApODoRT9zE0Oz423bBs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509725554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HBi73BCRAnlD8Ao_BVto6YP8cqjT-iRZWVpOtn9HRG4"},
{"content":{"body":"bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":"bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","msgtype":"m.text"},"ts":1630509737505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gkH9_8wgnSHT0hdpwIm63HY28dt5FKWYkly0Hy3HLbE"},
{"content":{"body":" * bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":" * bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","m.new_content":{"body":"bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":"bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gkH9_8wgnSHT0hdpwIm63HY28dt5FKWYkly0Hy3HLbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509754789,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z2C5Y6qf3TBjjwK8eyt6jsas3LiHkuC0nMCKc7zO_Do"},
{"content":{"body":"ljharb: you can't `<` with 0 operands","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: you can't <code>&lt;</code> with 0 operands","msgtype":"m.text"},"ts":1630509755780,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$l4PFRenWKK9JhBCM6Zk8Hcpm1SiiIfQruzWMENFIYZk"},
{"content":{"body":"sure?","msgtype":"m.text"},"ts":1630509793572,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nRMRLUH493e0vfy2ah__DnN0i801Yf8ES8mkk9KMzzA"},
{"content":{"body":"so min/max with 0 arguments should do what?","msgtype":"m.text"},"ts":1630509815998,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-su6UTofHIOUm1cASyruBiVQsMs5vUK447E6-dJ6rPg"},
{"content":{"body":"`Math.max()` is `-Infinity`, `Math.max(x)` is `x`, and 2+ operands is where it's useful, and also where it matters","format":"org.matrix.custom.html","formatted_body":"<code>Math.max()</code> is <code>-Infinity</code>, <code>Math.max(x)</code> is <code>x</code>, and 2+ operands is where it's useful, and also where it matters","msgtype":"m.text"},"ts":1630509822396,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ji_6h9qGdq0ZYHDel7YpN3ZCI_3S5oK3kWzrxdiowHI"},
{"content":{"body":"i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 2+ items.","format":"org.matrix.custom.html","formatted_body":"i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 2+ items.","msgtype":"m.text"},"ts":1630509852732,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HV5lpbwWI9fUZnoaU4CnsxTbBWVID8e36K5_MCl4PQ0"},
{"content":{"body":" * i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 1+ items.","format":"org.matrix.custom.html","formatted_body":" * i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 1+ items.","m.new_content":{"body":"i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 1+ items.","format":"org.matrix.custom.html","formatted_body":"i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 1+ items.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HV5lpbwWI9fUZnoaU4CnsxTbBWVID8e36K5_MCl4PQ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509883324,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6iZaFE-wxfNQVnXqWJrczY9ltj_TLwV6vJQ2PXhgD6I"},
{"content":{"body":"since bigint lacks an ultimate max/min value (infinity) it's nonsensical to put in < 1 items and expect a bigint back, no?","msgtype":"m.text"},"ts":1630509886801,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Yjn65XAwxLxG3AWvl1ZxCUbQoICB80oP33plHBFVJLU"},
{"content":{"body":"yes, so RangeError","msgtype":"m.text"},"ts":1630509906047,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jdkgEMi-YiowlRiBZxw1Y1FkdGYPTQ8KLHgy010-lOo"},
{"content":{"body":"if it were a bigint-only method, sure","msgtype":"m.text"},"ts":1630509917627,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9SA_j_5lAAI8ELdlIXkOTKqxNB4_5cvgdqC43nrFyNM"},
{"content":{"body":"but in this scenario it's a bigint and/or number method.","msgtype":"m.text"},"ts":1630509926119,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CyNYYuISWDKdYbjUUC84QoYb0hhUTBDKJuaQGghBeWA"},
{"content":{"body":"and it already doesn't throw an error, so it can't start now","msgtype":"m.text"},"ts":1630509932115,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EDrkbdDFp14Y7U4zwSbYYbkioe_dJI4b6Z4klpSKxXM"},
{"content":{"body":"and making a new method, that still mixes (because not allowing mixing here is ridiculous), only to throw an error on 0 items (or maybe to satisfy some type system-like mental model?), doesn't seem sufficiently motivated to me","msgtype":"m.text"},"ts":1630509968589,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fPDEavS86GaM-Ve_7lzmstRIhVRovP_-LpPgI9KceZg"},
{"content":{"body":" * and making a new method, that still mixes (because not allowing mixing here is ridiculous), only to throw an error on 0 items (or maybe to satisfy some type system-like mental model?), doesn't seem sufficiently motivated to me","m.new_content":{"body":"and making a new method, that still mixes (because not allowing mixing here is ridiculous), only to throw an error on 0 items (or maybe to satisfy some type system-like mental model?), doesn't seem sufficiently motivated to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$fPDEavS86GaM-Ve_7lzmstRIhVRovP_-LpPgI9KceZg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509983556,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aiPIHgoE10oZRykI4UOQHfCqIdp6ww7oNeSmuY0J6hY"},
{"content":{"body":"I'm leaning toward new methods on BigInt here","msgtype":"m.text"},"ts":1630509991710,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e6bTl5JiUnirQg135_xwjKjNc3iCt9j3UKi_54-bL2o"},
{"content":{"body":"sqrt is easy I think, but it's the only obvious sometimes-irrational one which works","msgtype":"m.text"},"ts":1630510001393,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G9p7HCy1y0hET9AP-kH2wyTNF-9o5rHQUSOQB-Sa3HE"},
{"content":{"body":"and cbrt, of course","msgtype":"m.text"},"ts":1630510005798,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D1x4qbnOwM8hHMVCZ0F8Z5QyxUP7fYIuGPREfa60Xn4"},
{"content":{"body":"for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and `BigInt.max` allowing both seems odd.","format":"org.matrix.custom.html","formatted_body":"for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and <code>BigInt.max</code> allowing both seems odd.","msgtype":"m.text"},"ts":1630510020643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0k70aap9oMAdnWZpSPn_J2iel9_8BpXkA0t56_Afw34"},
{"content":{"body":" * for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and `BigInt.max` allowing both seems odd.","format":"org.matrix.custom.html","formatted_body":" * for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and <code>BigInt.max</code> allowing both seems odd.","m.new_content":{"body":"for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and `BigInt.max` allowing both seems odd.","format":"org.matrix.custom.html","formatted_body":"for max and min specifically, i would be staunchly opposed to a bigint-only one. these methods only should allow mixing. and <code>BigInt.max</code> allowing both seems odd.","msgtype":"m.text"},"m.relates_to":{"event_id":"$0k70aap9oMAdnWZpSPn_J2iel9_8BpXkA0t56_Afw34","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510031655,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qtTt2slWOS0urgZoD-SnqFBE6ly66NAhhg2J1AGHyI8"},
{"content":{"body":"you can already sort a mixed array, right? ","msgtype":"m.text"},"ts":1630510068362,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$NpMP_Zim3purzTcFBsbgqYLu8ze2WypAv-dF_2UJEKA"},
{"content":{"body":"ljharb: the only reason to allow mixing is if you have a list which has both bigint and numbers, which you should not have and it is not clear to me that the language ought to have explicit support for","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: the only reason to allow mixing is if you have a list which has both bigint and numbers, which you should not have and it is not clear to me that the language ought to have explicit support for","msgtype":"m.text"},"ts":1630510086760,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1jECIAr2ObxfEEiUxkRSXrlZSWpDMHlpiP_z287b4Lw"},
{"content":{"body":"so then Max and Min is logical","msgtype":"m.text"},"ts":1630510091017,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$O_xnmoVcaqL7hUi-dffPe1kGDaDirePg1Uk6EHR8d9k"},
{"content":{"body":"i don't understand \"should not have\"","msgtype":"m.text"},"ts":1630510102434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tiW7_ZlXm-BaKtmLk9ZbBm3Xo9GVa6P5vRv8pc_fkDI"},
{"content":{"body":"me neither, why should you not have mixed arrays?","msgtype":"m.text"},"ts":1630510116276,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$RVA5YsfeMCVQ9kf3AXEerCBA-2uAwCJqcLKKu5BO-J0"},
{"content":{"body":"sarahghp: are you referring to the default sort comparator? you can sort anything","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: are you referring to the default sort comparator? you can sort anything","msgtype":"m.text"},"ts":1630510117323,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sptrHLjRRkkEU-dSmjVO4hMtV_Er0uUFnhlgzoqAObw"},
{"content":{"body":"Oh but I have some question about BigInt or Decimals in general","msgtype":"m.text"},"ts":1630510135605,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$zJ1WBrG1UdR8HyD0yYfBdsy3tmxKLqY6-AVse1IIt6w"},
{"content":{"body":" * also the language already has explicit support for it - `mixedArray.reduce((a, b) => a + b)` works fine, eg.","format":"org.matrix.custom.html","formatted_body":" * also the language already has explicit support for it - <code>mixedArray.reduce((a, b) =&gt; a + b)</code> works fine, eg.","m.new_content":{"body":"also the language already has explicit support for it - `mixedArray.reduce((a, b) => a + b)` works fine, eg.","format":"org.matrix.custom.html","formatted_body":"also the language already has explicit support for it - <code>mixedArray.reduce((a, b) =&gt; a + b)</code> works fine, eg.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Dhud54wu5ATP83N7j1RhDk2ChHuOJ255VPuwh_7vG7s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510141897,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EmKOXFaOcTpnOHwPLEFRk2oekGFZTBddNugshI1JmKI"},
{"content":{"body":"what if I do `1m/3m`? Can I get a infinite precise decimal number to represent `1/3` in Math?","format":"org.matrix.custom.html","formatted_body":"what if I do <code>1m/3m</code>? Can I get a infinite precise decimal number to represent <code>1/3</code> in Math?","msgtype":"m.text"},"ts":1630510181020,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RG2H4rj40gOwDuV-uvGHE5CbZmd5__jVNjkYW2OQvao"},
{"content":{"body":"Jack Works: that's an open question for the bigdecimal proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: that's an open question for the bigdecimal proposal","msgtype":"m.text"},"ts":1630510204119,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$8JTPhnvojHqEnZrrsdVbjGl9hB0EC7FbZzNs4cjd6vQ"},
{"content":{"body":"but for decimal128 that's not as big as issue","msgtype":"m.text"},"ts":1630510215436,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$VomL4j023qHBVdum2mP4u7Vos6lDCRinVzDic-ItVmc"},
{"content":{"body":"or for fractions","msgtype":"m.text"},"ts":1630510223344,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$meRE7may19yeNdc583WMsulN_b3tNMIHTzGsIbRuKUA"},
{"content":{"body":"> <@michaelficarra:matrix.org> sarahghp: are you referring to the default sort comparator? you can sort anything\n\nI mean the default sort on array works, and so, as a practitioner, I would expect max and min to work as well. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sptrHLjRRkkEU-dSmjVO4hMtV_Er0uUFnhlgzoqAObw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: are you referring to the default sort comparator? you can sort anything</blockquote></mx-reply>I mean the default sort on array works, and so, as a practitioner, I would expect max and min to work as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$sptrHLjRRkkEU-dSmjVO4hMtV_Er0uUFnhlgzoqAObw"}},"msgtype":"m.text"},"ts":1630510231998,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$Q8Zcn7NT_t8ygQWCsSKgeGo9R5l_0_kZUrdDCO0dsrQ"},
{"content":{"body":"the default sort on array uses strings","msgtype":"m.text"},"ts":1630510251527,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bI11O7zoltVWDmtqs23ZUqThJkzWt4o232Vp40w3Sto"},
{"content":{"body":"sounds like we need Fractions? syntax like `1/3r` ","format":"org.matrix.custom.html","formatted_body":"sounds like we need Fractions? syntax like <code>1/3r</code>","msgtype":"m.text"},"ts":1630510252796,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$3urkLx_r3Gm7gpFTegeLw1MBfIr8ROFGEs8_yvyjGJM"},
{"content":{"body":"that is, sorts by string order","msgtype":"m.text"},"ts":1630510263564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fLp2tKfgXLtFSUR0ifA0-KlaGjEI-2myJWa0iKZqUyQ"},
{"content":{"body":"yeah, either fractions or decimal128 would avoid the 1/3 issue","msgtype":"m.text"},"ts":1630510271600,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$mzkog073hUsyha9_-Z7gt4n-_H26opUirWJNd3LRI5s"},
{"content":{"body":"yes I know why it works, but I am saying from DX not an internal reason why it would be expected to work","msgtype":"m.text"},"ts":1630510272291,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$v5d6Ze0EAW-p_bQl4oSSxcLg3JQ9opBaD7OcAEtJS4w"},
{"content":{"body":"but then there's other issues that bigdecimals solve... it's a complicated tradeoff","msgtype":"m.text"},"ts":1630510285113,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$0kIYfVYJdCkUnA47xZn095C06RMjmuIERSeaA9Mh8GI"},
{"content":{"body":" * yes I know why it works, but I am saying from DX not an internal reason why it would be expected to work","m.new_content":{"body":"yes I know why it works, but I am saying from DX not an internal reason why it would be expected to work","msgtype":"m.text"},"m.relates_to":{"event_id":"$v5d6Ze0EAW-p_bQl4oSSxcLg3JQ9opBaD7OcAEtJS4w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510285138,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$hVMl9xXhPh1mR3NoJ9kQi5gT5rJjGQefQ-NKm1dGjgc"},
{"content":{"body":"I do strongly think that a `bigSqrt` should truncate to a bigint rather than returning a number or decimal or anything","format":"org.matrix.custom.html","formatted_body":"I do strongly think that a <code>bigSqrt</code> should truncate to a bigint rather than returning a number or decimal or anything","msgtype":"m.text"},"ts":1630510325101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D8lqQb3OWdzbDkuBszCbadYsDPjfLddrL-eviOUtVYA"},
{"content":{"body":"+1 for stage 1.","msgtype":"m.text"},"ts":1630510388843,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$BBEMozyf8_j4mC0sZLP5Eu3xhzqQhzkpdydefpVF5HE"},
{"content":{"body":"not sure we really need `bigMin/bigMax`, it seems `Infinity` is ok for empty... because the worst case is just throw TypeError so no need to have `bigMin/bigMax` if it also throw TypeError 😂","format":"org.matrix.custom.html","formatted_body":"not sure we really need <code>bigMin/bigMax</code>, it seems <code>Infinity</code> is ok for empty... because the worst case is just throw TypeError so no need to have <code>bigMin/bigMax</code> if it also throw TypeError 😂","msgtype":"m.text"},"ts":1630510424801,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Z2J_f83Ng081Q2cJAxOsIsOaMa2e4N-gGsMT-724dnQ"},
{"content":{"body":"always love to see improved math","msgtype":"m.text"},"ts":1630510427794,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$f4EZoNVlORsZsxRoixkgC_HTY_Pw_xnD5G0ckON2n7Y"},
{"content":{"body":"and for example, in 6.1.6.2.3 BigInt::exponentiate, it doesn't say what will happen if the result is too big to represent. Should the engine give a rounded/approximated result or should the engine throw a TypeError?","msgtype":"m.text"},"ts":1630510449413,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZJrxLF0YoW18ZjOYdFRS1RdbdnkHZKcyotRyTO5GMVg"},
{"content":{"body":"> <@jackworks:matrix.org> and for example, in 6.1.6.2.3 BigInt::exponentiate, it doesn't say what will happen if the result is too big to represent. Should the engine give a rounded/approximated result or should the engine throw a TypeError?\n\nI suppose it should throw TypeError or OOM ??","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZJrxLF0YoW18ZjOYdFRS1RdbdnkHZKcyotRyTO5GMVg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>and for example, in 6.1.6.2.3 BigInt::exponentiate, it doesn&#39;t say what will happen if the result is too big to represent. Should the engine give a rounded/approximated result or should the engine throw a TypeError?</blockquote></mx-reply>I suppose it should throw TypeError or OOM ??","m.relates_to":{"m.in_reply_to":{"event_id":"$ZJrxLF0YoW18ZjOYdFRS1RdbdnkHZKcyotRyTO5GMVg"}},"msgtype":"m.text"},"ts":1630510496012,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$U3_L6R5BmjWTF3HNWgzbXAJWIxrOMxyMjCG04c-Kgbc"},
{"content":{"body":"RangeError","msgtype":"m.text"},"ts":1630510521320,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$gXe2gNs2SNEmA77_LlLB1iOk-_T4EqFLL1j_6Xse4Mk"},
{"content":{"body":"I think it currently OOMs","msgtype":"m.text"},"ts":1630510540536,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5J8G-Ra7TK8EkVJcwRqCoN9R19j1YXCqwGZcji4Hey8"},
{"content":{"body":"sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n[10n, 200].sort()\n> [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n[10n, 200].sort()\n&gt; [10n, 200]\n</code></pre>\n","msgtype":"m.text"},"ts":1630510548234,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Fd9TFgELBxmmxRNqvEFjEKQr9RHKRCq4Zcp63AK7iJs"},
{"content":{"body":"which, presumably we could fix","msgtype":"m.text"},"ts":1630510550539,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fkdq4L173jWVp9-xtHQTgUsFydcvm-7zkmPQJFIGhsc"},
{"content":{"body":" * which, presumably we could fix","m.new_content":{"body":"which, presumably we could fix","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fkdq4L173jWVp9-xtHQTgUsFydcvm-7zkmPQJFIGhsc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510555194,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-SmH9dV4oVS6c6TishZ6UDLTVw-us5kHh3X5Gswr98s"},
{"content":{"body":"(could, not should)","msgtype":"m.text"},"ts":1630510557961,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pMF5vELF9M-PZU9u8bhsguqfPK8KNC8hhnBNrO8RJ4w"},
{"content":{"body":" * sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n> [10n, 200].sort()\n>  [10n, 200]\n```\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n&gt; [10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n<pre><code></code></pre>\n","m.new_content":{"body":"sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n> [10n, 200].sort()\n>  [10n, 200]\n```\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n&gt; [10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n<pre><code></code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fd9TFgELBxmmxRNqvEFjEKQr9RHKRCq4Zcp63AK7iJs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510563342,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$c5gosLcfa3YfEHVVmS7ZDJe_7OOwumfgVYRrJU6jCwU"},
{"content":{"body":" * sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n> [10n, 200].sort()\n>  [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n&gt; [10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n","m.new_content":{"body":"sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n> [10n, 200].sort()\n>  [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n&gt; [10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fd9TFgELBxmmxRNqvEFjEKQr9RHKRCq4Zcp63AK7iJs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510571651,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uI6oywo-htGWsskn2Xqm0ZI5tr_6IRx68sBuP4-sFRU"},
{"content":{"body":"bakkot: implementations all throw RangeError exceptions. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: implementations all throw RangeError exceptions.","msgtype":"m.text"},"ts":1630510598622,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$18uTN0tzcU2fdrhaAF5EdtFhdQW-S47pqBlS_dhGHEQ"},
{"content":{"body":"Michael Ficarra: sort (without pass comparator) is always strange 😂","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: sort (without pass comparator) is always strange 😂","msgtype":"m.text"},"ts":1630510602101,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$I-Pd3I4JBOezMVU00FW-_jiPXCYW0vYc0X_EOfSS30s"},
{"content":{"body":"Rick Waldron: oh, huh, good to know","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: oh, huh, good to know","msgtype":"m.text"},"ts":1630510607162,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6Eo2BoPofFkCpySLSCvagg5a98afsEScfDhFIZPm-qs"},
{"content":{"body":"my recollection is evidently incorrect then","msgtype":"m.text"},"ts":1630510623034,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dMHzaSRxvs7KHIO7QVubvDgDCqUbE5YNcIkmC0VEEyY"},
{"content":{"body":"Michael Ficarra: in this case \"works\" stands for \"does not throw error\" 😆. Since > < works/works on a mixed array too, I think it's an argument for why it's surprising when Math functions throw on BigInt","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: in this case &quot;works&quot; stands for &quot;does not throw error&quot; 😆. Since &gt; &lt; works/works on a mixed array too, I think it's an argument for why it's surprising when Math functions throw on BigInt","msgtype":"m.text"},"ts":1630510628955,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$8TAFmesM_qf09n61kjVZq6pxZMeNWOeqJNfYhuC-0Fg"},
{"content":{"body":"bakkot: 262 specifies it. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: 262 specifies it.","msgtype":"m.text"},"ts":1630510634319,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$Tq1TWswaflnb3W2FTjolCU4VOdF-euCgA-P_2sTEWpk"},
{"content":{"body":"huh!","msgtype":"m.text"},"ts":1630510641314,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AIlZPw79aqlZFmuNsqyqgRTktS3oHiHVBJH2XHkOq2g"},
{"content":{"body":"https://tc39.es/ecma262/#sec-numeric-types","msgtype":"m.text"},"ts":1630510643770,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$IvxgSx8ww5PcM1S9KItgYseglqKmg_a67f7aWo-T9tk"},
{"content":{"body":"I did not think we ever specified what to do when you hit implementation limits","msgtype":"m.text"},"ts":1630510653718,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lC1AkQEwLCnOCJ97exW5TOd102sADG7fb0k7kQPmUgA"},
{"content":{"body":"T::exponentiate(x, y) -> T, may throw RangeError","msgtype":"m.text"},"ts":1630510659728,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$TcyUUnYOaZ4toCtV6LHm8nkcd-pUdIweV9TVeKQ6-Bg"},
{"content":{"body":"I thought we just assumed infinite memory etc","msgtype":"m.text"},"ts":1630510662254,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vYwihyiWPdI2hzYbIli_KzXKV7vHiAeMg2Thp9ZpZ3s"},
{"content":{"body":"TIL.","msgtype":"m.text"},"ts":1630510665495,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EvupRm7si6pgja9uGbaWLqZAfRuW-FPNBJaRwxEQVd0"},
{"content":{"body":"sarahghp: but `<` and `>` don't Tostring, I'm confused how this is related at all","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: but <code>&lt;</code> and <code>&gt;</code> don't Tostring, I'm confused how this is related at all","msgtype":"m.text"},"ts":1630510673968,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3gBIKjZXYLyRwpd8mKYUtvePqqeNzl_v4jGMk2Fa3K4"},
{"content":{"body":" * sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n[10n, 200].sort()\n>  [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n[10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n","m.new_content":{"body":"sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n[10n, 200].sort()\n>  [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n[10n, 200].sort()\n&gt;  [10n, 200]\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fd9TFgELBxmmxRNqvEFjEKQr9RHKRCq4Zcp63AK7iJs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510743206,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Bj-HDAUPX2fkQyGR2xYTPPq3cXJgdPQ1g1vDMDVkW3I"},
{"content":{"body":" * sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n[10n, 200].sort()\n> [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n[10n, 200].sort()\n&gt; [10n, 200]\n</code></pre>\n","m.new_content":{"body":"sarahghp: I wouldn't call this \"working\":\n```\n[10n, 2].sort()\n> [10n, 2]\n[10n, 200].sort()\n> [10n, 200]\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: I wouldn't call this &quot;working&quot;:</p>\n<pre><code>[10n, 2].sort()\n&gt; [10n, 2]\n[10n, 200].sort()\n&gt; [10n, 200]\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fd9TFgELBxmmxRNqvEFjEKQr9RHKRCq4Zcp63AK7iJs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630510755056,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xTqzRDVG4WFOkK5QRvsygKuuGpAKYbiradWzqOHoenQ"},
{"content":{"body":"Michael Ficarra: I'm saying that from a practitioner perspective, given `[].sort()` and `<` and `>` work on mixed types, it is surprising that `max` and `min` do not. I do understand why it makes sense internally.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: I'm saying that from a practitioner perspective, given <code>[].sort()</code> and <code>&lt;</code> and <code>&gt;</code> work on mixed types, it is surprising that <code>max</code> and <code>min</code> do not. I do understand why it makes sense internally.","msgtype":"m.text"},"ts":1630510839772,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$04479erGd1dSNodjRlPar5tznRC15cUM7rEUxVb-sx4"},
{"content":{"body":"POO: can we get another note taker?","msgtype":"m.text"},"ts":1630511026867,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r0W9DPUjEVEDKK8vBntSteYLFbHOlhetvNJv5hmcm4M"},
{"content":{"body":"I'm distracted currently","msgtype":"m.text"},"ts":1630511031045,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-43fXZ9_gdCiJscztaAMcga79F9c9o6b348eqw74yis"},
{"content":{"body":"missed most of Shu","msgtype":"m.text"},"ts":1630511041115,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZE_BIVCQP-K9GmawdvBMBPJHdFjQrl3lHnEFrnZMDzQ"},
{"content":{"body":"I can help until the break","msgtype":"m.text"},"ts":1630511047677,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SZN4sfDukgL_CGTokCF6EPOSNZdhQWEKRyaAC7lef78"},
{"content":{"body":"I can help","msgtype":"m.text"},"ts":1630511047806,"senderName":"Josh Blaney","senderId":"@joshbdev:matrix.org","id":"$UpGgOSPHhAchfpOwpM2vgsIhm2qb7rjIfSP3oh5leC8"},
{"content":{"body":"am I hearing someone's discord notifications lmao","msgtype":"m.text"},"ts":1630511192865,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$SiUrCP0zd7tWtuC1HOLJET7sGOgTNIrLDc60VIS6zhU"},
{"content":{"body":"I keep thinking I'm getting pinged","msgtype":"m.text"},"ts":1630511201882,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$ZpHd3LFypcOMCD3T2vkVgUyNvhUfwILQfnwun6bEFDM"},
{"content":{"body":"lol same","msgtype":"m.text"},"ts":1630511202196,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$zVZGEQLNNaIJj2g72aSi-XVF0AbeTfk7AYpiHzT1qpM"},
{"content":{"body":"same :)","msgtype":"m.text"},"ts":1630511213002,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$aMKSur6W_KHguy3KnLI5A7pqRpHDU4S6Vv9A4c0NeVg"},
{"content":{"body":"`Math.max(1, 1n)`?","format":"org.matrix.custom.html","formatted_body":"<code>Math.max(1, 1n)</code>?","msgtype":"m.text"},"ts":1630511332774,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hHexpzJyphDkRIv9QOYlB4ib_kRSL5IkT3K8CPSx4eI"},
{"content":{"body":"Richard Gibson: first-wins, I think","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: first-wins, I think","msgtype":"m.text"},"ts":1630511373009,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kQouQcKRzCF1SWWdnao_PjvoDJnnxfNJnANtb4dM9D4"},
{"content":{"body":"same for `Math.min`?","format":"org.matrix.custom.html","formatted_body":"same for <code>Math.min</code>?","msgtype":"m.text"},"ts":1630511434255,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5io6P82QXPPyk3LV_1YM_H0olPVuOHs-79c0SbnkeY0"},
{"content":{"body":"presumably","msgtype":"m.text"},"ts":1630511470251,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9r7JI3BpME6Hi0oFZWbVSfzwQZZAgq_u-Xr3QQITFiE"},
{"content":{"body":"it should be equivalent to \"stable-sort by `<`, then take the first element\"","format":"org.matrix.custom.html","formatted_body":"it should be equivalent to &quot;stable-sort by <code>&lt;</code>, then take the first element&quot;","msgtype":"m.text"},"ts":1630511507706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6jT1LMiAt-shHJpgehPxaK8DQb0L9U_KHWuDrW6VQqY"},
{"content":{"body":"or, equivalently, a loop which does `if (cur > max) cur = max`","format":"org.matrix.custom.html","formatted_body":"or, equivalently, a loop which does <code>if (cur &gt; max) cur = max</code>","msgtype":"m.text"},"ts":1630511532906,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sTYw-ssk1WBSEWOlH7_FukDtscWYFzX_rh34jTEWU6w"},
{"content":{"body":"`max = cur`, surely","format":"org.matrix.custom.html","formatted_body":"<code>max = cur</code>, surely","msgtype":"m.text"},"ts":1630511725726,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5L5hYRtghdTK5dnYzRSy1_mrmO_SxUIuuXYbe5cucRU"},
{"content":{"body":"uhhh yeah that one","msgtype":"m.text"},"ts":1630511878081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Zg6UAw16bvO_G4dfK8AjNmQntFSUHQn6ib0q5SmFr9E"},
{"content":{"body":"https://github.com/js-choi/proposal-bigint-math/issues/3","msgtype":"m.text"},"ts":1630511878471,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DQeJXuk0MaBaj6RzX8rCQf0e8AsXyREk3wzD5lLxazQ"},
{"content":{"body":"shu: to expand on something ljharb said in the last remark, there's a lot of transitive code that depends on this pattern, but arguably there's also a lot that _should_ but does not yet, because they haven't realized it's a problem","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: to expand on something <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> said in the last remark, there's a lot of transitive code that depends on this pattern, but arguably there's also a lot that <em>should</em> but does not yet, because they haven't realized it's a problem","msgtype":"m.text"},"ts":1630512417555,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$qld-6db7NGje5ZxIOkb-A0XgoX4V57rNLIb8cSpBTBE"},
{"content":{"body":"(was going to put this as a reply on the queue, but we were out of time)","msgtype":"m.text"},"ts":1630512437874,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$D8cMMibOtjdceANOhI7CKe1pTqCz-PBhSm5u4vgudPs"},
{"content":{"body":"i hear you, and that helps convince me this is of higher importance","msgtype":"m.text"},"ts":1630512459702,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wxaqg1vOSL2GL6--42s5NVIRPs00tu-ng22JAp_hx94"},
{"content":{"body":"re \"holistic\": imo, pipeline + method extraction syntax + getIntrinsic would make for a much more ergonomic approach, on top of which perhaps a very ergonomic syntactic solution could be developed if it were warranted","msgtype":"m.text"},"ts":1630512487359,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zwbTn69sCjwAJdtCfTvrxx0DBMKCuyuw-KvMd8sHCW8"},
{"content":{"body":"but you know, what i hear is also not that this is _impossible_ today, just that it sucks to have to write","format":"org.matrix.custom.html","formatted_body":"but you know, what i hear is also not that this is <em>impossible</em> today, just that it sucks to have to write","msgtype":"m.text"},"ts":1630512501903,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QwFC5f7m0NgX2KXakGpuUeajs4dh2qNV424vKEbPn8Q"},
{"content":{"body":"very true","msgtype":"m.text"},"ts":1630512519949,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dMujtsJyJvVTK4J0N460nVN4Z9acOwYsUWbxURuTXXA"},
{"content":{"body":"altho CSP makes some of it impossible","msgtype":"m.text"},"ts":1630512526853,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$th6jitNbrJUCz8aU5aOd7uCr_w1anDbG_FXCwI5MKdM"},
{"content":{"body":"don't put that evil on me","msgtype":"m.text"},"ts":1630512544308,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WtL-RccZkeTFjyZJmTFNYevE5JF_Lzsh_rmWaz80DQo"},
{"content":{"body":" * altho CSP makes some of it impossible (but, \"make syntax-reachable intrinsics just be global\" would address that part)","m.new_content":{"body":"altho CSP makes some of it impossible (but, \"make syntax-reachable intrinsics just be global\" would address that part)","msgtype":"m.text"},"m.relates_to":{"event_id":"$th6jitNbrJUCz8aU5aOd7uCr_w1anDbG_FXCwI5MKdM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630512545876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VpqoDuLH6-I1WI4ttz_UcZ6SeCJrnzgfUiAXmYKEzcU"},
{"content":{"body":"i want to remain not touching csp","msgtype":"m.text"},"ts":1630512561481,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oSaDXO10EtHnNT7F0NuVkbl9QfaKC87md32JaVSovKM"},
{"content":{"body":"ljharb: oh one thing i forgot to say was i probably don't want enumeration","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: oh one thing i forgot to say was i probably don't want enumeration","msgtype":"m.text"},"ts":1630512724917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kE6_xq7SlXa7I_bUpMO9JgkscYtCxIrIC3ThS1gjYHU"},
{"content":{"body":"so preference from me is separate proposal there","msgtype":"m.text"},"ts":1630512746016,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e6DROiXOypc9spoQmgCS80HxodOmvIwMqSFAZQ1Ipqs"},
{"content":{"body":"> <@ljharb:matrix.org> re \"holistic\": imo, pipeline + method extraction syntax + getIntrinsic would make for a much more ergonomic approach, on top of which perhaps a very ergonomic syntactic solution could be developed if it were warranted\n\nI plan to collaborate with you and hopefully HE Shi-Jun on a simple method-extraction proposal (https://github.com/js-choi/proposal-bind-operator/).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zwbTn69sCjwAJdtCfTvrxx0DBMKCuyuw-KvMd8sHCW8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>re &quot;holistic&quot;: imo, pipeline + method extraction syntax + getIntrinsic would make for a much more ergonomic approach, on top of which perhaps a very ergonomic syntactic solution could be developed if it were warranted</blockquote></mx-reply>I plan to collaborate with you and hopefully <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> on a simple method-extraction proposal (https://github.com/js-choi/proposal-bind-operator/).","m.relates_to":{"m.in_reply_to":{"event_id":"$zwbTn69sCjwAJdtCfTvrxx0DBMKCuyuw-KvMd8sHCW8"}},"msgtype":"m.text"},"ts":1630512757674,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eNSzCalG3WTY4I6TrKAavedMJuJgKdzyURcC4ZxIPuQ"},
{"content":{"body":"I plan to propose it next meeting. ","msgtype":"m.text"},"ts":1630512786310,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$-yipge0AGHzjyTqiOVyywkNvyyzmwePdfVAJ-dgsefU"},
{"content":{"body":"looking forward to it","msgtype":"m.text"},"ts":1630512877976,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P45nASM2BZjOjr1m7hU0M1VARw9GgicrkUHELigoA0Y"},
{"content":{"body":"> <@shuyuguo:matrix.org> ljharb: oh one thing i forgot to say was i probably don't want enumeration\n\ni agree \"that preference\" means it should be a separate proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kE6_xq7SlXa7I_bUpMO9JgkscYtCxIrIC3ThS1gjYHU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: oh one thing i forgot to say was i probably don't want enumeration</blockquote></mx-reply>i agree &quot;that preference&quot; means it should be a separate proposal","m.relates_to":{"m.in_reply_to":{"event_id":"$kE6_xq7SlXa7I_bUpMO9JgkscYtCxIrIC3ThS1gjYHU"}},"msgtype":"m.text"},"ts":1630512901551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l9XgypTCqAftLxbCPS9LB4zWamv8s9T0IvGQbBtt3Sw"},
{"content":{"body":"Do all the chairs have edit access to Reflector issues? I just learned of the HackMD for the agenda because it was left in the comments for the reflector issue and not put in the initial post as well.","msgtype":"m.text"},"ts":1630512952629,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CT8fGA0Vzwwr297IBjV9M8qAsYLuSYbuoUpMwxu5rOc"},
{"content":{"body":"all the delegates do","msgtype":"m.text"},"ts":1630512974874,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bWD4hN6lqDR2q6JfQcoeM5RajjPFHchtWwWMWj3caEg"},
{"content":{"body":"i thought they didn't like posting it because it's usually under significant flux","msgtype":"m.text"},"ts":1630512979198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mfVqNBuXk-p9o-xvvptai6JSKcH5tlv8tKwcoWMklJY"},
{"content":{"body":"it's a source of truth in the sense that that's the document they use to coordinate among themselves and to resolve rescheduling conflicts","msgtype":"m.text"},"ts":1630512999287,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-qoPMmwkUa5o_4-Rv7kugDKXvhXP0Z8KGrgXoNlwOzw"},
{"content":{"body":"note that some people may not like it if you edit their comments, so best to only do it with explicit permission; for the record everyone is always free to fix my typos, update URLs, add missing info, things like that, as long as it's correct :-p","msgtype":"m.text"},"ts":1630513020285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cj_pkmTtVzBty6AE7Ln-E5gjMIdo9MzPZu9BM-Ug1Oc"},
{"content":{"body":"i'm hearing in TDZ that it shoudl be trusted over the tcq, so I'm not sure","msgtype":"m.text"},"ts":1630513027353,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$eypwV0WBkzkQ5TIN-2OFpQGWwjGGok2xVp-z-c3ptLI"},
{"content":{"body":"it should be is my understanding","msgtype":"m.text"},"ts":1630513038919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zjRVe1k4M4dYi89J191aTsdRB_p35kH1ZCDr1Pzu2sg"},
{"content":{"body":"i've only ever used TCQ as a source of \"what's happening now\"","msgtype":"m.text"},"ts":1630513042376,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LjY7qXmP3gZ-LX5rAlR6-CZvPxWMZNXcsozu1q25VsU"},
{"content":{"body":"right","msgtype":"m.text"},"ts":1630513049758,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iaxRBcXzE8evGbTSP7k-FPHSbcOQFJKSaNuO0eAUFoI"},
{"content":{"body":" * i've only ever used TCQ as a source of \"what's happening now\", as opposed to relying on it to predict the future","m.new_content":{"body":"i've only ever used TCQ as a source of \"what's happening now\", as opposed to relying on it to predict the future","msgtype":"m.text"},"m.relates_to":{"event_id":"$LjY7qXmP3gZ-LX5rAlR6-CZvPxWMZNXcsozu1q25VsU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630513051277,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$06UjRs0aLIeVfaOtCLpihlcPKMwSUNNhkXz9Sm2hYfU"},
{"content":{"body":"TCQ hasn't been updated with the agenda items we will bring forward, will work on that","msgtype":"m.text"},"ts":1630513069225,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$NOlOMxUs_MS_dLV4TL1G4PEifrTeq7s0ZtrryHK-qeI"},
{"content":{"body":"bterlson: am i up next? i.e. is it possible to accommodate adam klein's constraint request? it was added pretty late so understandable if not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: am i up next? i.e. is it possible to accommodate adam klein's constraint request? it was added pretty late so understandable if not","msgtype":"m.text"},"ts":1630513203952,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1QfoF_DF7fpa09AI8vGhyotC8ryXyq5ZJtCDmNlFDwQ"},
{"content":{"body":"checking","msgtype":"m.text"},"ts":1630513225019,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$Q3m9hzgcplBPgU1tTysF8S2cUJkvQUMjK8F3t50Hjjc"},
{"content":{"body":"shu: confirm you mean the fixed shape item?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: confirm you mean the fixed shape item?","msgtype":"m.text"},"ts":1630513288611,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$zNMXpER5w8kib7CDxRxERI-wx5dXY-to0IRM7EWKzfo"},
{"content":{"body":"i do, yes","msgtype":"m.text"},"ts":1630513295072,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sKLsJgW7smodNhyUVemYNw56n23gQ7lgznZtVbFo7Iw"},
{"content":{"body":"adam is unable to make 10-11 AM PT, so if we switch my two items to the last hour that resolves that. just not sure if possible","msgtype":"m.text"},"ts":1630513333565,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JBybDnrWdB8kcL_SVnRs7yiD_W6pXo2oBvacrtFKfcc"},
{"content":{"body":"shu in this case I'll need to sync with Caridy too as he should join for this discussion.","msgtype":"m.text"},"ts":1630513572092,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$x7bEXAvWuw6pZRdiGAuSdHQaCnD-vU_VTrQsoMt0_nw"},
{"content":{"body":"shu: I think we can make it work, plan to present 1100 PDT","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I think we can make it work, plan to present 1100 PDT","msgtype":"m.text"},"ts":1630513585047,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$n3xenGuAPobELLAJms9Xx7iv4DHiehZm51I5rZ_vDVk"},
{"content":{"body":" * shu:  in this case I'll need to sync with Caridy too as he should join for this discussion.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>:  in this case I'll need to sync with Caridy too as he should join for this discussion.","m.new_content":{"body":"shu:  in this case I'll need to sync with Caridy too as he should join for this discussion.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>:  in this case I'll need to sync with Caridy too as he should join for this discussion.","msgtype":"m.text"},"m.relates_to":{"event_id":"$x7bEXAvWuw6pZRdiGAuSdHQaCnD-vU_VTrQsoMt0_nw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630513587000,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$-a1eah_zwi5_aCEgQrRbJbfc-7y331e6RQ4MQDDWzvI"},
{"content":{"body":"leobalter: hopefully that will work for caridy?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@leobalter:matrix.org\">leobalter</a>: hopefully that will work for caridy?","msgtype":"m.text"},"ts":1630513601157,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$Y0Rd6y2w-e9uHVrD3gjLYGew15pcCJIYtpH6eA-6eac"},
{"content":{"body":"bterlson: I hope so, let me ping him","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: I hope so, let me ping him","msgtype":"m.text"},"ts":1630513635439,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$rVvsYNfiZYh3Kj1JL4esm5GeHbIJBxFmRtlbMl4yN24"},
{"content":{"body":"rbuckton: would you be able to present regexp at 1000 PDT?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: would you be able to present regexp at 1000 PDT?","msgtype":"m.text"},"ts":1630513639313,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$Gog2qzC2Lfb-Sy0qDeFLksczftOFmAfNyCz_4nW0ULE"},
{"content":{"body":"I understand we have overflow for this meeting, but in this case, and I'll miss discussing Jordan's topic \"Tightening host restrictions to improve testing\". I believe this relates to EcmaScript improvements/fixes and I'm biased to prefer that over new features, but my same bias also wants some of the Stage 1 features.","msgtype":"m.text"},"ts":1630513792638,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$TdAUORbKPps5d9H2IeR7YtQZwFx3i3IVOLBUlztUXA0"},
{"content":{"body":"time is unfair","msgtype":"m.text"},"ts":1630513795120,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$6iaGfv8v0Sf424GC_JOl9kQm6xcrjW3qeKfmiewsOmc"},
{"content":{"body":"The emerging plan is thus: 1:00 EDT RegExp feature parity rbuckton (with ljharb tightening host restrictions as backup in case Ron cannot present), 2:00 EDT fixed shape for objects shu, 2:45 small resizable buffers shu ","format":"org.matrix.custom.html","formatted_body":"The emerging plan is thus: 1:00 EDT RegExp feature parity <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> (with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> tightening host restrictions as backup in case Ron cannot present), 2:00 EDT fixed shape for objects <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>, 2:45 small resizable buffers <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1630513973069,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$qEkYofV3nBkFBwSTytVKNFlEB9VdYXqrTmJjaCrxPzQ"},
{"content":{"body":"will update TCQ in a few moments","msgtype":"m.text"},"ts":1630514001501,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$CQvXp6LC52gQUQtCnPSwid5G3TE_Qr6JAclxBi_-dx8"},
{"content":{"body":"great, thank you!","msgtype":"m.text"},"ts":1630514089248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$T-cVm7SgifnDttFjhC4RWk0z-qfhjbdK4SdgwLIJSrQ"},
{"content":{"body":"sorry for last minute request","msgtype":"m.text"},"ts":1630514164916,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$881m4uJtWKbLKn7JOoAjr7Y1X1QK5mM7pB1xqKj8dxg"},
{"content":{"body":"TCQ is now updated. And HackMD","msgtype":"m.text"},"ts":1630514175786,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1rTST9iOoXP6k1tD47HAerhYwLynJx0jY4wE3IIjhIA"},
{"content":{"body":"Next is Ron Buckton with RegExp Feature Parity","msgtype":"m.text"},"ts":1630514186312,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$qKFeUQBeenJmy-K1FztENKRDa4R5ypNl8BB1TzYLxHM"},
{"content":{"body":"please go to the reflector for the result from this morning's session","msgtype":"m.text"},"ts":1630514313889,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nuDXaTRDSTa_sCTjr5bmk8UAat29hUtVB-ocrsxQ7DY"},
{"content":{"body":"i will get dinner","msgtype":"m.text"},"ts":1630514388577,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nAR6dkazpAFKQfgnP7zO2vkH50ERIfMHaBdaqxwU1mA"},
{"content":{"body":"Yulia's Reflector post:  https://github.com/tc39/Reflector/issues/397","msgtype":"m.text"},"ts":1630515789413,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$pxbI1xcGIhXKqV13OX851lybRaMYcfyVkQ4VV6GQlSU"},
{"content":{"body":"I have no interest in just importing regexp features wholesale","msgtype":"m.text"},"ts":1630515989276,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UOPMEDMJEum5RXJNj9o9d5zqZCfvN0igRsuBuWbHSP8"},
{"content":{"body":"i like some of these features, but parity for the sake of parity does not sound like a good thing to me","msgtype":"m.text"},"ts":1630516051438,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hqeihd3bJGuCnBMe2vhl3t3pbl250cUoUUa-tnLYip8"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1630516100244,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$q56a-aunwCM-9FA1Z6lbxzxnkRGFUgBamT3RLb6SwVk"},
{"content":{"body":"and we should not be forced to take on unwanted features because some of them are good","msgtype":"m.text"},"ts":1630516113947,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CtculihaditSvMWdJscg5PiAa6BIZncuWx5Pu6U3w00"},
{"content":{"body":"these could all be individual proposals","msgtype":"m.text"},"ts":1630516131749,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QmVojuKSngSrjfdUwx2sPdxmK_96W24PxjLRmfDgeQ4"},
{"content":{"body":"I think it'd make more sense to choose a specific scope, for bringing something to Stage 1","msgtype":"m.text"},"ts":1630516457046,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$u2Zx-PcxIKvsquvIbK53otB63R-bWSY6owfWV0p5GhQ"},
{"content":{"body":"like one of these inner proposals","msgtype":"m.text"},"ts":1630516464188,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$mNHZtks8RnCcW83NZpyX60_ok1mSJ-_VU-87cPpNA4U"},
{"content":{"body":"sounds like that's what Ron is looking for now","msgtype":"m.text"},"ts":1630516485243,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CCaNQxGguczWLKUNr_QNBrxz_XMzkuTEX9NTzdhODtc"},
{"content":{"body":"It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps.","msgtype":"m.text"},"ts":1630516487393,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uVwenkCy6V6lfi8sqaXPfc4X12S7pZ8yyeR0va4ujJQ"},
{"content":{"body":" * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals.","m.new_content":{"body":"It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uVwenkCy6V6lfi8sqaXPfc4X12S7pZ8yyeR0va4ujJQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630516499621,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$KPm_F08hBoJR8snfcDiXBHUAv8Te-Q_iVPGNrEGFkCs"},
{"content":{"body":"OK, that sounds good to me. I'm happy to see discussion reopened here","msgtype":"m.text"},"ts":1630516501648,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$qjBEs48KjGgCYB9GsZPDeWZSIfDDvjtpIBUfyWF9t8g"},
{"content":{"body":" * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals for identified gaps.","m.new_content":{"body":"It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps, with individual subsequent proposals for identified gaps.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uVwenkCy6V6lfi8sqaXPfc4X12S7pZ8yyeR0va4ujJQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630516504535,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$XMppzI24ROYSewTL4BOrwByNMoDFDvELgevBs32fc3A"},
{"content":{"body":"the feature that lets you change the flags in the middle of the pattern scares me quite a bit","msgtype":"m.text"},"ts":1630516527557,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$y2KuWHEVK_cyIwUKfxNJUaKDKpTgzIjbOHqbsujCii8"},
{"content":{"body":"yeah, that's how the committee reacted last time Brian brought it up","msgtype":"m.text"},"ts":1630516540977,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$xHov4umgo-fupY5NS9Ww9ElTKTGFOVVIq45i2JrGMSI"},
{"content":{"body":"well, if ron is actually proposing another TG he should be explicit?","msgtype":"m.text"},"ts":1630516545990,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JoDLRBQCfeOQAFYvlbfDkR5p8AQCVOXNHCNoQGJESNg"},
{"content":{"body":" * It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps with regard to other languages, with individual subsequent proposals for identified gaps.","m.new_content":{"body":"It seems like Ron is proposing forming something like a subcommittee to investigate regex gaps with regard to other languages, with individual subsequent proposals for identified gaps.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uVwenkCy6V6lfi8sqaXPfc4X12S7pZ8yyeR0va4ujJQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630516551972,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZbEGpKrWHNf69eCf4seRhjEjcC4RVeAjazqh6hJoiYw"},
{"content":{"body":"the context-dependency in the regexp grammar is already hard enough for people","msgtype":"m.text"},"ts":1630516557622,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ANBogfa0draYbJ5RpkZOTdWTXVMgYRClF2hjaXoUXZs"},
{"content":{"body":"> <@shuyuguo:matrix.org> well, if ron is actually proposing another TG he should be explicit?\n\nI guess this would be more of a temporary ad-hoc set of calls?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JoDLRBQCfeOQAFYvlbfDkR5p8AQCVOXNHCNoQGJESNg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>well, if ron is actually proposing another TG he should be explicit?</blockquote></mx-reply>I guess this would be more of a temporary ad-hoc set of calls?","m.relates_to":{"m.in_reply_to":{"event_id":"$JoDLRBQCfeOQAFYvlbfDkR5p8AQCVOXNHCNoQGJESNg"}},"msgtype":"m.text"},"ts":1630516570819,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$FOBv0waJOWbKDtQoXbKKW3rkEfkyicazURMCgLQcUes"},
{"content":{"body":"stupid question","msgtype":"m.text"},"ts":1630516622810,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xb-KB_UoDsuP0TyzVP3lQwn13rZxm72TDPtulcIWmxw"},
{"content":{"body":"why are textmate grammar parsers not rewritten to simply not use regexps","msgtype":"m.text"},"ts":1630516638000,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ND70dtV5Euon3vie5JanXsrCGtJBsWvENPozPSjB4nw"},
{"content":{"body":"> <@shuyuguo:matrix.org> why are textmate grammar parsers not rewritten to simply not use regexps\n\nWithout writing a whole scripting engine?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ND70dtV5Euon3vie5JanXsrCGtJBsWvENPozPSjB4nw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>why are textmate grammar parsers not rewritten to simply not use regexps</blockquote></mx-reply>Without writing a whole scripting engine?","m.relates_to":{"m.in_reply_to":{"event_id":"$ND70dtV5Euon3vie5JanXsrCGtJBsWvENPozPSjB4nw"}},"msgtype":"m.text"},"ts":1630516751375,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FBDTMxsDyozE-VIwGTEG0QofJwxg7e2BYAMBFabZjEo"},
{"content":{"body":"maybe it's because i don't know what textmate grammars do","msgtype":"m.text"},"ts":1630516765460,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n1RXZ9g3no5GuysRbi_rRIlRLGOX_3Q0QIuOsZnR6_Q"},
{"content":{"body":"textmate grammars themselves have regexps to define what an e.g. identifier should be?","msgtype":"m.text"},"ts":1630516776964,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SsZ1idcae4zl8O6IMcTwxOi77AzhRRXP9M06rIsDUuU"},
{"content":{"body":"Basically. https://macromates.com/manual/en/language_grammars","msgtype":"m.text"},"ts":1630516785616,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$y3gmptF3I0lPORN6jSVpGp5ZHexv7EOu8a5MvGtZ3Lg"},
{"content":{"body":"we don't need any of these textmate things because we have a *language* around our regexps, our language isn't just regexp","format":"org.matrix.custom.html","formatted_body":"we don't need any of these textmate things because we have a <em>language</em> around our regexps, our language isn't just regexp","msgtype":"m.text"},"ts":1630516789184,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$un8mOG6RYa8C4y9fNRez0XHdHockNKJI8AxN34j-vY0"},
{"content":{"body":"https://github.com/textmate/javascript.tmbundle/blob/master/Syntaxes/Regular%20Expressions%20(JavaScript).tmLanguage","msgtype":"m.text"},"ts":1630516799281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fJfOTITpwf4XkCiGlffwB0aqu7C0FxWX6_dqKAvmHUo"},
{"content":{"body":"VIM syntax parsers are very similar","msgtype":"m.text"},"ts":1630516830478,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1GpoD6eNpBPfvbAVDd01DUbubky5sqdy8_-0eYOp8rU"},
{"content":{"body":"there's been a proposal for regex composition, which seems strictly better than this `define` thing","format":"org.matrix.custom.html","formatted_body":"there's been a proposal for regex composition, which seems strictly better than this <code>define</code> thing","msgtype":"m.text"},"ts":1630516839013,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E_L72oTRHIG5SdZzCgKTy6ZqB2Wnyho94DlKwj5zDk0"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1630516844814,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Xjw5wR9-E4vuMUsQjtvnBXEmXd19fY3L95CQuTd4-4U"},
{"content":{"body":"(also lots of people like RegExp.escape better)","msgtype":"m.text"},"ts":1630516859097,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$5rito8LVl05CsApw4nVbOFM5lt7-AH0Anu9BS7uk17k"},
{"content":{"body":"Context-Free Expressions!","msgtype":"m.text"},"ts":1630516876595,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$wzhSzcZTlQ_rRWqHPasESRwGB_-a7Wu-IqgkeAnh7Fk"},
{"content":{"body":"at the whole-stack level, it seems easier to extend TextMate grammars to have functions in place of regexps than to... keep extending regexps?","msgtype":"m.text"},"ts":1630516884271,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vjDQBJz1u-xvhfZuybooPie8NtMzNR-ZEGTFtt9Dm9U"},
{"content":{"body":"TextMate grammars are a de facto standard, so it’d have to be a de-facto extension from one vendor to do that, heh…","msgtype":"m.text"},"ts":1630517041690,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9a-7QHwcU04d88bnutbTkd_mrYT1dGfqrZ9T9szN7XU"},
{"content":{"body":" * TextMate grammars are a de-facto standard, so it’d have to be a de-facto extension from one vendor to do that, heh…","m.new_content":{"body":"TextMate grammars are a de-facto standard, so it’d have to be a de-facto extension from one vendor to do that, heh…","msgtype":"m.text"},"m.relates_to":{"event_id":"$9a-7QHwcU04d88bnutbTkd_mrYT1dGfqrZ9T9szN7XU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517048585,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DGXGwIanSxgin3h5GRxKOLJFGKchVLzXccofXDEyJXs"},
{"content":{"body":"that seems cheaper to me than changing JS","msgtype":"m.text"},"ts":1630517079023,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e7yS7LslsPLiHEDU2tS3n7ng7QVD6sbkD_VEyqeqDUg"},
{"content":{"body":"I don't see why JS should have part of a TextMate interpreter built-in, even if TextMate won't change","msgtype":"m.text"},"ts":1630517113422,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$OZt8VFhiLjMjR37Es8_ftYyhqeEsIg3dK_i8qdk44EY"},
{"content":{"body":"I think it's more like, TextMate may show that some things are useful","msgtype":"m.text"},"ts":1630517130006,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$wJhNt9msSktQeX_rsSR4mlm7Bq3cfdnF0n9SgUdo2zo"},
{"content":{"body":"rather than that, we should completely align","msgtype":"m.text"},"ts":1630517135663,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$T9D8OFi5WWbZ2ST2vRJqWjBvW8ZRZKEHGBhUZY3_YHU"},
{"content":{"body":"i'm not saying that, i'll try to explain better when the queue item comes up","msgtype":"m.text"},"ts":1630517165706,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OJfaqJ6y-ONk-xZyYgNrT_3R_eZxfWN5NfKqActWyg8"},
{"content":{"body":"totally agree with Waldemar here about the x flag","msgtype":"m.text"},"ts":1630517325603,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HWo5xL3lK4OFlmOVj9dfopvr-nbh-L5NWUOekOb4aIo"},
{"content":{"body":"I think that Ron’s review of existing regex functionality is very broad, impressive, and useful—if only to see precedent and existing practice, although of course JavaScript should not adopt features from other languages wholesale.","msgtype":"m.text"},"ts":1630517421708,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$tsTosOyk7_OA9fS7lsR0FqEK2pAQw23zquTOo7OhCgk"},
{"content":{"body":" * I think that Ron’s review of existing regex functionality is very broad, impressive, and useful—if only to see precedent and existing practice, although of course JavaScript should not adopt features from other languages wholesale.","m.new_content":{"body":"I think that Ron’s review of existing regex functionality is very broad, impressive, and useful—if only to see precedent and existing practice, although of course JavaScript should not adopt features from other languages wholesale.","msgtype":"m.text"},"m.relates_to":{"event_id":"$tsTosOyk7_OA9fS7lsR0FqEK2pAQw23zquTOo7OhCgk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517435038,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rde_iEW2EgrmLp1G-XIkmi-2oQFDYwPgvnwnQwQlcBE"},
{"content":{"body":"I do know that lots of people in Perl have happily used whitespace in regexes with a flag for decades, although whether it’d work in JS now is tough.","msgtype":"m.text"},"ts":1630517485361,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Qpr357EnSTk3VzcfYUPoEqH5Z7241sHN0AZuE19EONI"},
{"content":{"body":" * I do know that lots of people in Perl have happily used whitespace and comments in regexes with a flag for decades, and it helps them quite a bit, although whether that’d work in JS now is tough.","m.new_content":{"body":"I do know that lots of people in Perl have happily used whitespace and comments in regexes with a flag for decades, and it helps them quite a bit, although whether that’d work in JS now is tough.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qpr357EnSTk3VzcfYUPoEqH5Z7241sHN0AZuE19EONI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517499408,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$U-QBp3vJush-2V8q929U2HOtMbInUk1raFiXPTT9wOw"},
{"content":{"body":"agree, I really want whitespaces and comments in regexp 😃","msgtype":"m.text"},"ts":1630517543213,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$DnN6pDgh4k3uzvQjKQn6_G9X2i5wzZR3I663YWekvs8"},
{"content":{"body":" * I do know that lots of people in Perl have happily used whitespace and comments in regexes with a flag for decades. Regex whitespace and comments help them quite a bit…although whether that’d work in JS now is tough.","m.new_content":{"body":"I do know that lots of people in Perl have happily used whitespace and comments in regexes with a flag for decades. Regex whitespace and comments help them quite a bit…although whether that’d work in JS now is tough.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qpr357EnSTk3VzcfYUPoEqH5Z7241sHN0AZuE19EONI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517560569,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$MCjboQdnI6S34dzUZH9JlBe-HcdVWII8HFJHEd0vPQo"},
{"content":{"body":"i want those too, but \"i want to be like perl\" is not a thought i can ever recall having","msgtype":"m.text"},"ts":1630517643648,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a1WQu0w6o--ToiwxffgE3oDO7Xi1Ux69J3zMVOEE8dI"},
{"content":{"body":"Regexp is actually a sublanguage , so I also support a RegExp TG like Chip post in the queue 😂","msgtype":"m.text"},"ts":1630517656376,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$fhipT5ZjuqSPz39V2vzjJIDyA9-sOuu6IbJOelf6ooc"},
{"content":{"body":"to clarify, what I was referring to earlier when I said \"with few exceptions, proposals are for single features\", I was thinking about Rick Waldron's Math functions proposal which brought in a lot of new things at once but was all done as a single proposal","msgtype":"m.text"},"ts":1630517895741,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$835FtwE3wpkHJtY-cwTeXcGUdtTQ2nigsoSWEbbx5OY"},
{"content":{"body":"ljharb: The buffet was presented in 2015 believe it or not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: The buffet was presented in 2015 believe it or not","msgtype":"m.text"},"ts":1630517927707,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$ulSEROirw5f8x6puExyxo3SwJ1uGU3J9Z8W6JzP9_xo"},
{"content":{"body":"https://esdiscuss.org/notes/2015-11-18","msgtype":"m.text"},"ts":1630517943765,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$8uBEXyNSugDDWeDd_PcjBzPLa079fM6phbB9Ie_NaPU"},
{"content":{"body":"was that at the MSFT meeting?","msgtype":"m.text"},"ts":1630517948827,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YXzNBk7f4AFbSW4pxTBvTQwC4CbiFpjgyeC2ZoAyRHg"},
{"content":{"body":"oh, I guess not, not in November","msgtype":"m.text"},"ts":1630517963543,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mrpzvA82plXQ8FIz4ARN_BKi38cvf0VS5G2OABEqaFo"},
{"content":{"body":"Yeah, this is the impressive website. I think this is great as a general reference, something like a CanIUse.","msgtype":"m.text"},"ts":1630517965231,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$aDSq1K11X0JbdlfbwLjt50hrebYzNz9eoBFoKMoGltI"},
{"content":{"body":"It wasn't, but I don't remember where it was","msgtype":"m.text"},"ts":1630517969734,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$X9N4ucotp2VOEjLZ-Ok7fQqJSa7am3HqGBjHwcSZdOM"},
{"content":{"body":" * Yeah, this is the impressive website. I think this is great as a general reference, something like a CanIUse.\nhttps://rbuckton.github.io/regexp-features/","m.new_content":{"body":"Yeah, this is the impressive website. I think this is great as a general reference, something like a CanIUse.\nhttps://rbuckton.github.io/regexp-features/","msgtype":"m.text"},"m.relates_to":{"event_id":"$aDSq1K11X0JbdlfbwLjt50hrebYzNz9eoBFoKMoGltI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517982077,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$G5gJRdXsWDsz02jLfRD0daWzncGkmy4zOzhis3J1Jrs"},
{"content":{"body":" * Yeah, this is the impressive website. rbuckton: I think this is great as a general reference, something like a CanIUse. \nhttps://rbuckton.github.io/regexp-features/","format":"org.matrix.custom.html","formatted_body":" * Yeah, this is the impressive website. <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think this is great as a general reference, something like a CanIUse.<br>https://rbuckton.github.io/regexp-features/","m.new_content":{"body":"Yeah, this is the impressive website. rbuckton: I think this is great as a general reference, something like a CanIUse. \nhttps://rbuckton.github.io/regexp-features/","format":"org.matrix.custom.html","formatted_body":"Yeah, this is the impressive website. <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think this is great as a general reference, something like a CanIUse.<br>https://rbuckton.github.io/regexp-features/","msgtype":"m.text"},"m.relates_to":{"event_id":"$aDSq1K11X0JbdlfbwLjt50hrebYzNz9eoBFoKMoGltI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630517998932,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$B_DvHpVuCWr-nFZj900DkIIm8CwmG2r3HeBAUiDbbIM"},
{"content":{"body":"shorter ljharb: this already has stage 1, bring the individual proposals now?","format":"org.matrix.custom.html","formatted_body":"shorter <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: this already has stage 1, bring the individual proposals now?","msgtype":"m.text"},"ts":1630518226721,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$zucf4joGl13dtEHKY_i44aU6rzY2UiIIz_Bfq6n8VGg"},
{"content":{"body":"yes, exactly that","msgtype":"m.text"},"ts":1630518326720,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SgAldYNVMAgplhhuTvpzFmEpCnI0BTXKkt99nTDvv7o"},
{"content":{"body":"So, roll this into \"regexp buffet\" and break down the proposals?","msgtype":"m.text"},"ts":1630518366570,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hc2Eh6xY97IChzX5FK9KLpuxyzVL1aui_c23_bwWDrU"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1630518498487,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Xr2GcKIYIcOhbNVK_Btcmt6I4fDkHVQxzKhxh3o1sKo"},
{"content":{"body":"i usually don't consider terseness a top goal","msgtype":"m.text"},"ts":1630518709510,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kcm_ompOgU8-zb__Nfm0TCtoMh5hFaf4mR_VWco21QY"},
{"content":{"body":"By terse I mean, better than assembly. A goal of any high level language is to remove unnecessary complexity where possible to improve expressivity and readability","msgtype":"m.text"},"ts":1630518787061,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iUyAdzi3XgFJvK720Dzo_oohav3YUBg0nAis8G3YDjw"},
{"content":{"body":"with a program containing regexes, often the unnecessary complexity is removed by moving logic away from regees","msgtype":"m.text"},"ts":1630518928848,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I9pnJIZ8AcGgLTfbxThh09wxHDeUQDnYV-gQOdXodfk"},
{"content":{"body":" * with a program containing regexes, often the unnecessary complexity is removed by moving logic away from regexes","m.new_content":{"body":"with a program containing regexes, often the unnecessary complexity is removed by moving logic away from regexes","msgtype":"m.text"},"m.relates_to":{"event_id":"$I9pnJIZ8AcGgLTfbxThh09wxHDeUQDnYV-gQOdXodfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630518930419,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hs_gI5E5n1_JZicUwNxAub8PWchNBzYYL_yfgEvpiMI"},
{"content":{"body":" * with a program containing regexes, often the unnecessary complexity is removed by moving logic away from using regexes","m.new_content":{"body":"with a program containing regexes, often the unnecessary complexity is removed by moving logic away from using regexes","msgtype":"m.text"},"m.relates_to":{"event_id":"$I9pnJIZ8AcGgLTfbxThh09wxHDeUQDnYV-gQOdXodfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630518935960,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zMqSHfgyzTzQZMXpkSZuh9iTxch4u9Hmxv7I4Z99ims"},
{"content":{"body":"“Now you have two problems…”","msgtype":"m.text"},"ts":1630518964221,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YaNQ896lJ31OFwlobhrKWi8gXOU_IsW_WVlLkKl5L34"},
{"content":{"body":" * “Now you have two problems”…","m.new_content":{"body":"“Now you have two problems”…","msgtype":"m.text"},"m.relates_to":{"event_id":"$YaNQ896lJ31OFwlobhrKWi8gXOU_IsW_WVlLkKl5L34","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630518973162,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cXmQNVZgurLigaffW1NAbkd7iSzm7yfldCDjAOgwS4o"},
{"content":{"body":"I think textmate is just a convenient generalization, not a motivation in and of itself, fwiw. There exists a set of use cases that textmate grammars are very good at (if frustrating to use) that would also be useful for many JS use cases as well.","msgtype":"m.text"},"ts":1630519203895,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$p3Iib6VZPgDlC7gAwbvsgWdpTFPDU_CVZLoHwp2QhDQ"},
{"content":{"body":"I continue to be sad that a dfa-based engine with all-matches semantics isn't being discussed more","msgtype":"m.text"},"ts":1630519267030,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$p3GyRlHkpj07H7888aacuBbXtkeBiaaadGgt_3yfjrI"},
{"content":{"body":"bterlson: I dunno, when implementing parsers in JS, you shouldn't be trying to shove as much of the code into regexps","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: I dunno, when implementing parsers in JS, you shouldn't be trying to shove as much of the code into regexps","msgtype":"m.text"},"ts":1630519299114,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$esy0-ZF6W03Ovq-ALq8vY1_o9pnXr9H5Rr7tfyPPnWg"},
{"content":{"body":"you have this whole language to use","msgtype":"m.text"},"ts":1630519309676,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qBS1iwJKUnu6U_OW2ThwS9dHnNql9mCfFhXzIcvchgA"},
{"content":{"body":"parsing with regexp isn't a motivator","msgtype":"m.text"},"ts":1630519334010,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$7ZKceVrF-V3bqGVOGJfxKqCtCmrHdasC3d6Fmbs27s4"},
{"content":{"body":"scanning, though...","msgtype":"m.text"},"ts":1630519338246,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$wW0VeItT4GT6O0UAPMhMB9xdf3o2_6ltO18CwNZ9PJg"},
{"content":{"body":"sure you could implement these things using js code and a while (pos < str.length) loop but","msgtype":"m.text"},"ts":1630519361298,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$faNaVgWkbW7v0ovwENWeE1XnRPXWnlsyceWlWtY2e-w"},
{"content":{"body":"you don't need recursion in your regexps for scanning","msgtype":"m.text"},"ts":1630519366296,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$f5S_bMFujeSVbLdTL-pLBIIsiiIv6rFz26ut6kf0P8k"},
{"content":{"body":"I agree that regexps can be complicated, but they can also significantly cut down on equivalent javascript code in quite a few cases.","msgtype":"m.text"},"ts":1630519370535,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$56SEJSdxZP0t8gjphrNmQ614gRQ4cbCeD9bMjBpEiv4"},
{"content":{"body":"I'm not going to argue specifically for recursion, but it's safe to say in general that parsing JS is also not the motivator behind these :)","msgtype":"m.text"},"ts":1630519401493,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$-PYLJfL-6ZdF7zYskWwZG-m3HEfTLI63_eX-SHWs0CM"},
{"content":{"body":"less code !== less complexity","msgtype":"m.text"},"ts":1630519410700,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jU6imp2_Jg-q0nNny_YT3k0rwp2XdmfHl3TAhBF0mpg"},
{"content":{"body":"rbuckton: but why? you have nice debugging tools for JS and nice high-level language features","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: but why? you have nice debugging tools for JS and nice high-level language features","msgtype":"m.text"},"ts":1630519414472,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$z1p7tpEF7IjfDx9Cyc3KThDOeRzQWBCLx3_hWYMd2R4"},
{"content":{"body":"Recursion is a huge stretch, to be fair. I'd really like support for subroutines as it improves readability.","msgtype":"m.text"},"ts":1630519429224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0SO4NvvxZyRjdq8iTQJaus5HkyG8bOvkJTxBwTrv1Qg"},
{"content":{"body":"the DEFINE feature was a perfect example of something we definitely do not need because we have a language outside of the regexp","msgtype":"m.text"},"ts":1630519462735,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kVTsr--jcy11HROX-5D5oo0t9fJR_kSf2t4ouBJ5Tak"},
{"content":{"body":"if the whole language was the regexp, fair, those are nice features, but that's just not the case","msgtype":"m.text"},"ts":1630519491108,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ggZyTbBG0tZUyNDkmm20vY54MMcG2jeOGEZ4nPDFuHI"},
{"content":{"body":"I've written ISO8601 date/time parsers, its a lot easier with DEFINE. Without it you end up with a lot of string concatentation + `new RegExp(..)`. Writing it as pure JS is a mess :/","format":"org.matrix.custom.html","formatted_body":"I've written ISO8601 date/time parsers, its a lot easier with DEFINE. Without it you end up with a lot of string concatentation + <code>new RegExp(..)</code>. Writing it as pure JS is a mess :/","msgtype":"m.text"},"ts":1630519570142,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RzbEQt6gmNlzp3qxQOIbVep34VJye0SUQE4cy38_ZWY"},
{"content":{"body":"okay and what's wrong with the string concatenation?","msgtype":"m.text"},"ts":1630519608264,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lj1dHCwm0MnM1zE77OD76Ajv7XlLJV4MpTYrJOmJVgo"},
{"content":{"body":"(part of the reason the DEFINE example was an ISO8601 date)","msgtype":"m.text"},"ts":1630519613942,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$66eCJphMF9Lc_6YU2ykIMZgme16SAihG9-Q83Bk_JXU"},
{"content":{"body":"i am so hyped for shared memory","msgtype":"m.text"},"ts":1630519681965,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6cAW1Nahx_VRoBobJnT-Hv1BdXifw2_ofF7-nKxKcOo"},
{"content":{"body":"> <@michaelficarra:matrix.org> okay and what's wrong with the string concatenation?\n\nYou mention debugging. String concat a bunch of regexp patterns together to achieve what you could with DEFINE, then look at the regexp in the watch window and its unreadable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lj1dHCwm0MnM1zE77OD76Ajv7XlLJV4MpTYrJOmJVgo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>okay and what&#39;s wrong with the string concatenation?</blockquote></mx-reply>You mention debugging. String concat a bunch of regexp patterns together to achieve what you could with DEFINE, then look at the regexp in the watch window and its unreadable.","m.relates_to":{"m.in_reply_to":{"event_id":"$lj1dHCwm0MnM1zE77OD76Ajv7XlLJV4MpTYrJOmJVgo"}},"msgtype":"m.text"},"ts":1630519688885,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R3MaVEpCx_-iFihEVIpiK5FZrB3Szi5t4nJOLqlP69E"},
{"content":{"body":"> <@devsnek:matrix.org> i am so hyped for shared memory\n\nI am as well. May be a longer term goal but really need code sharing/shared functions as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6cAW1Nahx_VRoBobJnT-Hv1BdXifw2_ofF7-nKxKcOo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i am so hyped for shared memory</blockquote></mx-reply>I am as well. May be a longer term goal but really need code sharing/shared functions as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$6cAW1Nahx_VRoBobJnT-Hv1BdXifw2_ofF7-nKxKcOo"}},"msgtype":"m.text"},"ts":1630519770181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hTiVZKftJPkFjM8Yd4wW9pp9zFC3U3PGqQlUL8Kqb-U"},
{"content":{"body":"i wish webkit pushed more on their shared memory strawman","msgtype":"m.text"},"ts":1630519810158,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$SeceLCTUmU80JVgXJBoGsGzkzCqnIrWL5fEMibBT2BA"},
{"content":{"body":"Rather than building variables into regex, couldn't we have an escape-hatch in regex similar to `${}` that lets you sub in arbitrary sub-regexes?","format":"org.matrix.custom.html","formatted_body":"Rather than building variables into regex, couldn't we have an escape-hatch in regex similar to <code>${}</code> that lets you sub in arbitrary sub-regexes?","msgtype":"m.text"},"ts":1630519814816,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2TTgCLvc8nuXfTELrpU0QiJnS6mdIWWnRsU2o9ANywQ"},
{"content":{"body":"> <@tabatkins:matrix.org> Rather than building variables into regex, couldn't we have an escape-hatch in regex similar to `${}` that lets you sub in arbitrary sub-regexes?\n\nThat's Callouts and they're not great.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2TTgCLvc8nuXfTELrpU0QiJnS6mdIWWnRsU2o9ANywQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Rather than building variables into regex, couldn't we have an escape-hatch in regex similar to <code>${}</code> that lets you sub in arbitrary sub-regexes?</blockquote></mx-reply>That's Callouts and they're not great.","m.relates_to":{"m.in_reply_to":{"event_id":"$2TTgCLvc8nuXfTELrpU0QiJnS6mdIWWnRsU2o9ANywQ"}},"msgtype":"m.text"},"ts":1630519834267,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hAJo9Tzbcgi2I217aHn9e-WZ3g78gid5ZuSEy3XYgfc"},
{"content":{"body":"Unless its just Regexp.tag with string interpolation, which is still hard to read in a watch window.","msgtype":"m.text"},"ts":1630519892263,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1UCCRmOaEN7q-5KLNnIe-SzDobRkZrTxo0qeebIgHZ8"},
{"content":{"body":"Yeah suppose it's just Regexp.tag. My fear is that the moment you want to do anything slightly more complex with the definition, you'll have to fall back on string interpolation *anyway*","format":"org.matrix.custom.html","formatted_body":"Yeah suppose it's just Regexp.tag. My fear is that the moment you want to do anything slightly more complex with the definition, you'll have to fall back on string interpolation <em>anyway</em>","msgtype":"m.text"},"ts":1630519961285,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$sqfVY1zHCsKn2ZfQiUIjLCG67psh4qD7E3o1ihDrX8E"},
{"content":{"body":"My primary wishlist for RegExp syntax is, in order:\n\n1. Modifiers `(?imsx-imsx)` and `(?imsx-imsx:subexpr)`\n2. Possessive Quantifiers/Atomic Groups\n3. Conditionals `(?(cond)yes|no)` (even w/o DEFINE)\n4. `x` mode and comments\n5. Subroutines\n6. `n` mode\n7. `\\R`\n8. `\\A`, `\\z`, `\\Z`\n9. Rercursion (but not bullish on this one)","format":"org.matrix.custom.html","formatted_body":"<p>My primary wishlist for RegExp syntax is, in order:</p>\n<ol>\n<li>Modifiers <code>(?imsx-imsx)</code> and <code>(?imsx-imsx:subexpr)</code></li>\n<li>Possessive Quantifiers/Atomic Groups</li>\n<li>Conditionals <code>(?(cond)yes|no)</code> (even w/o DEFINE)</li>\n<li><code>x</code> mode and comments</li>\n<li>Subroutines</li>\n<li><code>n</code> mode</li>\n<li><code>\\R</code></li>\n<li><code>\\A</code>, <code>\\z</code>, <code>\\Z</code></li>\n<li>Rercursion (but not bullish on this one)</li>\n</ol>\n","msgtype":"m.text"},"ts":1630520087836,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2USN3pw-9gGdA68Ea6gCTZ0RGKA3csvY0exuLh6sQ9s"},
{"content":{"body":"i think out of that list, for me it's 4,6,7,8, and maybe 2,1","msgtype":"m.text"},"ts":1630520162411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cSvfMMd7jGLjmZs9TQIYhzyyG8ziAtEPrrOgnXe19UA"},
{"content":{"body":"It allow create struct objects in JS, so I don't understand why this proposal is for wasmGC -> JS ?  ","msgtype":"m.text"},"ts":1630520178717,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ujQn-8tuPFXvIehTu5RM0BouIksKN42xmDiRdd2kBJ8"},
{"content":{"body":"for me it's 8, 7, 2, and... that's probably it","msgtype":"m.text"},"ts":1630520200516,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dQlgjk3hxaZEJDQuKqXFxC-LLUL4vURUSQZV0USSnBs"},
{"content":{"body":" * for me it's 8, 7, 2, and... that's probably it","m.new_content":{"body":"for me it's 8, 7, 2, and... that's probably it","msgtype":"m.text"},"m.relates_to":{"event_id":"$dQlgjk3hxaZEJDQuKqXFxC-LLUL4vURUSQZV0USSnBs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630520259889,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VKTslE-2Kw0Ps_6SXhtofhDWaUQ1AZf_b8suGNjGHVU"},
{"content":{"body":"i think comments are critical","msgtype":"m.text"},"ts":1630520286259,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$plbb4tanJ6EY-_w7VrVKOV9Wa7kkc1A2lkhrW0ZVYMk"},
{"content":{"body":"ime any regex longer than like 10 characters is unreadable, and i always have to write an \"x mode\" version of it in a multiline comment so it's annotated","msgtype":"m.text"},"ts":1630520307145,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wn66jBZrzcyizMXAQevf_xERSgL2Mizdls1sdIlGvKM"},
{"content":{"body":" * ime any regex longer than like 10 characters tends to be unreadable, and i always have to write an \"x mode\" version of it in a multiline comment so it's annotated","m.new_content":{"body":"ime any regex longer than like 10 characters tends to be unreadable, and i always have to write an \"x mode\" version of it in a multiline comment so it's annotated","msgtype":"m.text"},"m.relates_to":{"event_id":"$Wn66jBZrzcyizMXAQevf_xERSgL2Mizdls1sdIlGvKM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630520313601,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Oin97E_AxPEDGzS8bGo4B0Fj5r6Xw80Vssq6ujM-QqA"},
{"content":{"body":"was waldemar's argument not convincing, ljharb ?","format":"org.matrix.custom.html","formatted_body":"was waldemar's argument not convincing, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> ?","msgtype":"m.text"},"ts":1630520325937,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OEVSSvpvA_gWb6u_2hI3fZL6gqHxiBEcWJNyb95QEEQ"},
{"content":{"body":"ron you're asking for turing completeness","msgtype":"m.text"},"ts":1630520327486,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$xA7jJs4QIw0NXJWRMxOz3p7gIa1MR-60x0u6X5us8x8"},
{"content":{"body":"Plain structs seems just sealed object... so what's the diff between this with `@seal class Box {}` ?","format":"org.matrix.custom.html","formatted_body":"Plain structs seems just sealed object... so what's the diff between this with <code>@seal class Box {}</code> ?","msgtype":"m.text"},"ts":1630520327866,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$WCU0z5YUNJewwx4Uy60HfM9EBDVI-jcYZhlznAQs3Dk"},
{"content":{"body":"Michael Ficarra: i must have missed it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i must have missed it","msgtype":"m.text"},"ts":1630520335420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6saoUmpbs3ttKbiX8aYQNtKDD7d_TZVg4x_UNv4POIY"},
{"content":{"body":"Can achieve 8 with 1, which is one reason I find 1 more useful. `\\A` is `(?-m:^)`, `\\z` is `(?-m:$)`","format":"org.matrix.custom.html","formatted_body":"Can achieve 8 with 1, which is one reason I find 1 more useful. <code>\\A</code> is <code>(?-m:^)</code>, <code>\\z</code> is <code>(?-m:$)</code>","msgtype":"m.text"},"ts":1630520360156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZOwNwbKGK7TXywAL6s0B1EZxiAD7w850YimjSHJY6J0"},
{"content":{"body":"ljharb: we can't have x mode in literals because of the grammar, and if you're using the RegExp constructor, you can just concat strings and put comments between them","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: we can't have x mode in literals because of the grammar, and if you're using the RegExp constructor, you can just concat strings and put comments between them","msgtype":"m.text"},"ts":1630520375882,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$eVeN8gJd1C2NL51Ylqcc5fHV19SKQ5JK1CNyhHJ3cWA"},
{"content":{"body":"`x` mode improves readability by making whitespace insignificant. Its more than just x-mode comments","format":"org.matrix.custom.html","formatted_body":"<code>x</code> mode improves readability by making whitespace insignificant. Its more than just x-mode comments","msgtype":"m.text"},"ts":1630520426385,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4kIB0acnaVs5Nvr0-c-E4S7MTXiAtQXNM9914vgJ7ds"},
{"content":{"body":"yeah, `x` mode is real critical imo, i use it constantly in python *both* for whitespace and comments","format":"org.matrix.custom.html","formatted_body":"yeah, <code>x</code> mode is real critical imo, i use it constantly in python <em>both</em> for whitespace and comments","msgtype":"m.text"},"ts":1630520459797,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lqnwLCXd1x8HmLsTAM5ugGYnCnenyjziZVw8VOMDYg8"},
{"content":{"body":"> <@haxjs:matrix.org> It allow create struct objects in JS, so I don't understand why this proposal is for wasmGC -> JS ?\n\nThe struct objects created in JS would (at least initially, in this minimal proposal) not be importable as Wasm GC structs as there isn't enough type information. The intention is that this proposal helps explain how the Wasm GC struct gets reflected as a JS object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ujQn-8tuPFXvIehTu5RM0BouIksKN42xmDiRdd2kBJ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>It allow create struct objects in JS, so I don&#39;t understand why this proposal is for wasmGC -&gt; JS ?  </blockquote></mx-reply>The struct objects created in JS would (at least initially, in this minimal proposal) not be importable as Wasm GC structs as there isn't enough type information. The intention is that this proposal helps explain how the Wasm GC struct gets reflected as a JS object.","m.relates_to":{"m.in_reply_to":{"event_id":"$ujQn-8tuPFXvIehTu5RM0BouIksKN42xmDiRdd2kBJ8"}},"msgtype":"m.text"},"ts":1630520480283,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$V4Or5o-ThmyvfC6z9kjNrny8LGw5zt5amwCqQaJtnAo"},
{"content":{"body":"... you both know that you can put whitespace between concatenations too","msgtype":"m.text"},"ts":1630520495565,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MUHM69JMNTzFR6ScU8LCKDqJPD4FMIgWRu1oP7KPN0w"},
{"content":{"body":"string concat is not workable; that's not statically analyzeable (linting) or syntax highlightable (human review) and it's too easy to have bugs caused by dynamic string creation","msgtype":"m.text"},"ts":1630520497226,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uzMn0fy5AplT92jecEppyfJSCxEY5667Hv3yiWSM3zc"},
{"content":{"body":"Python even makes it easier to do comments outside of the strings, since it auto-concats consecutive strings, but it would still be decently uglier to write","msgtype":"m.text"},"ts":1630520501799,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$uJHC7wE5ZVUyMExkiJHLCjXCVRKMZObSeXC6idMqQ1g"},
{"content":{"body":"Could someone give an example that shows why `x` in (possibly multiline) literals is impossible?","format":"org.matrix.custom.html","formatted_body":"Could someone give an example that shows why <code>x</code> in (possibly multiline) literals is impossible?","msgtype":"m.text"},"ts":1630520514291,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Xya-IKYxXt5JzZgE3opEUZUCnMqImaj2eSmSL7adUNc"},
{"content":{"body":"iow if it can't be done in literals then i think it can't be done, but doing it in literals is the sole value prop","msgtype":"m.text"},"ts":1630520516763,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NS50SvFzq0SfQWNPSTpJcp6pDfNGBBLaFTJOfenhGH0"},
{"content":{"body":"ljharb: what do you propose we do then? x mode doesn't work with our grammar","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: what do you propose we do then? x mode doesn't work with our grammar","msgtype":"m.text"},"ts":1630520528005,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LCp5_daWqUmrZGWae7kvl2NcEQPGQT5-3CthSk9HTII"},
{"content":{"body":"is there a spec for x mode that makes that a foregone conclusion?","msgtype":"m.text"},"ts":1630520545880,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vgROXGmow_e3qqNyxBpGaE2S1XPmHCEDONnqpGN_39E"},
{"content":{"body":"\"doing it in literals is sole value prop\" strong disagree from Python experience","msgtype":"m.text"},"ts":1630520560391,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$k17BQkUNqlUgfeZM2a-8x9nECuTQ-NeVwlqbp3FEFls"},
{"content":{"body":"i certainly don't understand the grammar well enough to disagree with that assertion, but it seems overly strong at this early stage","msgtype":"m.text"},"ts":1630520561003,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zAMVPQxbJEZUAHKHGNduOzDOJmdnin6C4KYOWK0bMNk"},
{"content":{"body":"we could have x mode affect non-lineterminator whitespace","msgtype":"m.text"},"ts":1630520579198,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VwSuLYdg_lQ4UlK2PTCuYQO2twQBPmJMduMD_uiWwtg"},
{"content":{"body":"but I think people would expect it to allow you to split the regexp across lines, too","msgtype":"m.text"},"ts":1630520607203,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9hPhYQgSOwXkuX-0tWbvkzAmaxBM45IwfLesqrDcgwE"},
{"content":{"body":"which we cannot do","msgtype":"m.text"},"ts":1630520615883,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ng87ZoLv7_OjiZyATbPG8jMl_qJyNVwTmE7ptT8JkS8"},
{"content":{"body":"why can't we split it across lines","msgtype":"m.text"},"ts":1630520625133,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$gfp9ZCVlaPwEH1GZ7mw6Nhu95irjkG_O0kyGF4e3NNI"},
{"content":{"body":"it would already be valid syntax","msgtype":"m.text"},"ts":1630520640029,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4Q_5AYdBqZfZgsr8ESQ3l0Cpf0-xvdlnFjhZjynbvTo"},
{"content":{"body":"No, regexps cannot currently contain line breaks","msgtype":"m.text"},"ts":1630520652523,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uxUS_qBX7q7atpfzycGaVvlHYBsah7sXaS-eOsppbas"},
{"content":{"body":"I didn't say it would be a regexp","msgtype":"m.text"},"ts":1630520664587,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vq6fdtkt5XlKVINQfmkXl3xdOIcU9K974yjd1Ih15yU"},
{"content":{"body":"Then, an expression cannot start with `/`","format":"org.matrix.custom.html","formatted_body":"Then, an expression cannot start with <code>/</code>","msgtype":"m.text"},"ts":1630520678019,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5AtfoF9IUKpPtrwGrub4FAYs5oEDdSc8BB_MEnp-gvU"},
{"content":{"body":" * Then, an expression cannot currently start with `/` (if it's not a regexp)","format":"org.matrix.custom.html","formatted_body":" * Then, an expression cannot currently start with <code>/</code> (if it's not a regexp)","m.new_content":{"body":"Then, an expression cannot currently start with `/` (if it's not a regexp)","format":"org.matrix.custom.html","formatted_body":"Then, an expression cannot currently start with <code>/</code> (if it's not a regexp)","msgtype":"m.text"},"m.relates_to":{"event_id":"$5AtfoF9IUKpPtrwGrub4FAYs5oEDdSc8BB_MEnp-gvU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630520704440,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7iuXvFWprGrnHSd8J18Mh2l6Q2eHKoIgolr6swZxPGs"},
{"content":{"body":"can one of the people saying this is ambiguous please say which production(s) it is ambiguous with","msgtype":"m.text"},"ts":1630520750233,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$1wiT11JY2M9qPC9Z3L2nhxDttBeFqhXJEEMpo2CMRHo"},
{"content":{"body":"hold on, let me try to come up with the ambiguous case that waldemar posted earlier","msgtype":"m.text"},"ts":1630520775599,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GtNcd4Ixdrjljg0-AKjG5AsNXO-NWRa1kDHx9cVZf3E"},
{"content":{"body":"Which is easier to read?\n\n```js\n// inline (taken from ecmarkdown)\n/^<[/!]?(\\w[\\w-]*)(\\s+[\\w]+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^><\"'=``]+))?)*\\s*>/\n\n// string concat (could use String.raw`` but its even harder to read)\nnew RegExp(\n  // start of tag\n  \"^<[/!]?\" +\n  // tag name\n  \"(\\\\w[\\\\w-]*)\" +\n  // attribute(s)\n  \"(\\\\s+\" +\n    // attribute name\n    \"[\\\\w]+\" +\n    // attribute value\n    \"(\\\\s*=\\\\s*(\\\"[^\\\"]*\\\"|'[^']*'|[^><\\\"'=``]+))?\" +\n  // repeat attribute\n  \")*\" +\n  // end tag\n  \"\\\\s*>\");\n\n// x mode\nnew Regexp(String.raw`\n  # start of tag\n  ^<[/!]?\n\n  # tag name\n  (\\w[\\w-]*)\n\n  # attribute(s)\n  (\\s+\n\n    # attribute name\n    [\\w]+\n\n    # attribute value\n    (\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^><\"'=``]+))?\n\n  # repeat attribute\n  )*\n\n  # end tag\n  \\s*>\n`, \"x\");\n```","format":"org.matrix.custom.html","formatted_body":"<p>Which is easier to read?</p>\n<pre><code class=\"language-js\">// inline (taken from ecmarkdown)\n/^&lt;[/!]?(\\w[\\w-]*)(\\s+[\\w]+(\\s*=\\s*(&quot;[^&quot;]*&quot;|'[^']*'|[^&gt;&lt;&quot;'=``]+))?)*\\s*&gt;/\n\n// string concat (could use String.raw`` but its even harder to read)\nnew RegExp(\n  // start of tag\n  &quot;^&lt;[/!]?&quot; +\n  // tag name\n  &quot;(\\\\w[\\\\w-]*)&quot; +\n  // attribute(s)\n  &quot;(\\\\s+&quot; +\n    // attribute name\n    &quot;[\\\\w]+&quot; +\n    // attribute value\n    &quot;(\\\\s*=\\\\s*(\\&quot;[^\\&quot;]*\\&quot;|'[^']*'|[^&gt;&lt;\\&quot;'=``]+))?&quot; +\n  // repeat attribute\n  &quot;)*&quot; +\n  // end tag\n  &quot;\\\\s*&gt;&quot;);\n\n// x mode\nnew Regexp(String.raw`\n  # start of tag\n  ^&lt;[/!]?\n\n  # tag name\n  (\\w[\\w-]*)\n\n  # attribute(s)\n  (\\s+\n\n    # attribute name\n    [\\w]+\n\n    # attribute value\n    (\\s*=\\s*(&quot;[^&quot;]*&quot;|'[^']*'|[^&gt;&lt;&quot;'=``]+))?\n\n  # repeat attribute\n  )*\n\n  # end tag\n  \\s*&gt;\n`, &quot;x&quot;);\n</code></pre>\n","msgtype":"m.text"},"ts":1630520881476,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GpJTmtFAmTNQE68MAfFM8RcveCQHYIMKTcO8-yK790o"},
{"content":{"body":"Ugh with element's rendering of tagged templates in a fenced code block :/","msgtype":"m.text"},"ts":1630520911166,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1fvRPZf41msXr8yB4iqiGo2dfxi_ncBEbn5KRatSY7M"},
{"content":{"body":"Better format here: https://gist.github.com/rbuckton/856f61c4b3d9dbd8a048d0a2e99cfe73","msgtype":"m.text"},"ts":1630520950694,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d5u0RNcmdtkvVJVuYIWzCHaQ2l_Ifu2ide3tP9lKzpM"},
{"content":{"body":"as a note, the person speaking is not in the delegates text file","msgtype":"m.text"},"ts":1630521037871,"senderName":"Josh Blaney","senderId":"@joshbdev:matrix.org","id":"$rxmkaCWuGpWySZCDltXDxVpDDyS5YXuBLajR-JnUCgo"},
{"content":{"body":"String concat means double-escaping, or prefixing String.raw for every line, which reduces readability and makes it easier to make mistakes.","msgtype":"m.text"},"ts":1630521043492,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4p2Bvv9I6KoZVLVdshZkiVwvmHdbXL-mNHbzBkLhR9g"},
{"content":{"body":"the previous speaker was Asumu Takikawa","msgtype":"m.text"},"ts":1630521105175,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$tiOtAEFxDH6PhtycpiRT1Qbo_dsMTJQZkjfwiWdVyXc"},
{"content":{"body":"The string part is excellent. Just being able to postMessage a string to a Worker cheaply is a huge.","msgtype":"m.text"},"ts":1630521197177,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$MiHGND5auYC9NwUBg18KVDGoKXjjmEReGgvVNRT7m80"},
{"content":{"body":"(and this doesn't require a spec change)","msgtype":"m.text"},"ts":1630521204164,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$wVp2Dvny4WmQdUi81swzi9cwAqcfDfdp1sjaE98m4Qw"},
{"content":{"body":"+1 for mark's perspective","msgtype":"m.text"},"ts":1630521636237,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p_l1PfQITPdZ-90qLXQ9RToM7rUDMV5tB6tBQJL3wyE"},
{"content":{"body":"idk i get rust send/sync vibes from this, which is a good thing","msgtype":"m.text"},"ts":1630521761290,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ZwfEhffwcOfID2QHXJnFz3hNb6YX8RUK0OE39GO7zKA"}
]