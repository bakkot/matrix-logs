[
{"content":{"body":"change-array-by-copy methods dropped from 10 to 4\nhttps://github.com/tc39/proposal-change-array-by-copy/issues/27","msgtype":"m.text"},"ts":1630503468472,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KHs7w13trBcvft6MrwQWVLhq06kLkAF5wzbEgmYMUmM"},
{"content":{"body":"do we want to take notes for the \"Response to ECMA / LF Proposed Partnership | Michael Saboff\" item?","msgtype":"m.text"},"ts":1630504057167,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G9hGdpCKmvYFmV9F8GuSDPcWW7Hy4K9JUFbzMnQr6T0"},
{"content":{"body":"I'm never sure for the administrative rather than technical items","msgtype":"m.text"},"ts":1630504074207,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xly-rwl9xTWg8eMZwrqeUBxPRbKuLoNuLlr-ACrn8GI"},
{"content":{"body":"yes, take notes, but we won't make them publish them publicly","msgtype":"m.text"},"ts":1630504214762,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$h0sp00SO_ubFCItHQBi-rXd2OiWTbHJls-U8IHVN8AU"},
{"content":{"body":"the jitsi is open - same passcode as yesterday","msgtype":"m.text"},"ts":1630504364375,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dYryF5T5c8RU24tPNrIaX5d0bfpgd-tk_lUOcz4JSqw"},
{"content":{"body":"I also strongly support the \"safety value\" of permissive copyright agreements/forkability","msgtype":"m.text"},"ts":1630507452054,"senderName":"littledan","senderId":"@dehrenberg:igalia.com","id":"$qQ1wUcgsxS4fJyF8w86ASPmQy3rjPMYEccz2YSDG80g"},
{"content":{"body":"just FYI here's the list of ecma members: https://www.ecma-international.org/about-ecma/members/","msgtype":"m.text"},"ts":1630507787242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BElDsWD9ksLmwmaYmoPr15YWkrI4f2zXJqyNE5Pjuck"},
{"content":{"body":"ceil, floor, round, trunc, really?","msgtype":"m.text"},"ts":1630508931456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pSiowl1M4mxtXeGu6Gr9l-ZKSmZs52DdxieGBAIzljI"},
{"content":{"body":"I'd actually say that stage 1 shouldn't be about extending Math specifically, just about adding more math operations for bigints","msgtype":"m.text"},"ts":1630508951847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3KGEjrbKMiVPITtwB0XKWdVOTc0yFJEtlLU462FW164"},
{"content":{"body":"\"bigint math\" indeed doesn't necessarily mean it has to be on `Math`","format":"org.matrix.custom.html","formatted_body":"&quot;bigint math&quot; indeed doesn't necessarily mean it has to be on <code>Math</code>","msgtype":"m.text"},"ts":1630508971082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MQUsruOf51-X22g6SkoHctYaSINMHxBXunBSe2Tr3y4"},
{"content":{"body":"It could just be on `BigInt`","format":"org.matrix.custom.html","formatted_body":"It could just be on <code>BigInt</code>","msgtype":"m.text"},"ts":1630508984513,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QyC6p7vi334bW3I03CQtIteeZSq2eDJM2FbGt2TI-hw"},
{"content":{"body":"the challenge there is, \"why are these things on Number too?\"","msgtype":"m.text"},"ts":1630508996939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$isGKd1MjLWXlZhqU1qZZdJ--9Q7O1GOIWJ6ZwP5MZbE"},
{"content":{"body":" * the challenge there is, \"why aren't these things on Number too?\"","m.new_content":{"body":"the challenge there is, \"why aren't these things on Number too?\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$isGKd1MjLWXlZhqU1qZZdJ--9Q7O1GOIWJ6ZwP5MZbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509001219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WgSTgjd4n6BX9uLhmwanhsBdeEc5Xaj6FZxxbEJinNU"},
{"content":{"body":"iow, perhaps most of the Math methods belonged on Number, but here we are","msgtype":"m.text"},"ts":1630509015017,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r4-OFzetu_i_z-2nXgtLTnqwwI-duRri3iK4pBBbnFM"},
{"content":{"body":"maybe we could later add aliases on `Number` ðŸ˜€ ","format":"org.matrix.custom.html","formatted_body":"maybe we could later add aliases on <code>Number</code> ðŸ˜€","msgtype":"m.text"},"ts":1630509021410,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rOAZ7dJNBFS6zFysE6TPoggQsgIkWbp0T40ujNNcDrg"},
{"content":{"body":"Also possible to introduce a separate global, i.e., `MathN` or `BigMath`, but I'd hate to have to do this over and over if we add more number types in the future.","format":"org.matrix.custom.html","formatted_body":"Also possible to introduce a separate global, i.e., <code>MathN</code> or <code>BigMath</code>, but I'd hate to have to do this over and over if we add more number types in the future.","msgtype":"m.text"},"ts":1630509052748,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wKKoPJfnR_nQPEMevuZ1AcrQPnVPPk5JSxpOdct4GD0"},
{"content":{"body":"It could be namespaced, `Math.BigInt.*`","format":"org.matrix.custom.html","formatted_body":"It could be namespaced, <code>Math.BigInt.*</code>","msgtype":"m.text"},"ts":1630509084229,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fYnk2aiQH06DVXnDM_91EmrmRIq4kUlzU7U-AxpRu50"},
{"content":{"body":"what about `mixedArrayWithNumbersAndBigInts.map(Math.abs)`?","format":"org.matrix.custom.html","formatted_body":"what about <code>mixedArrayWithNumbersAndBigInts.map(Math.abs)</code>?","msgtype":"m.text"},"ts":1630509097382,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Jvpwnle5PSqra2xF14YJX5GBRx4Qps2OGhK91jq7IUY"},
{"content":{"body":" * would have to be `Math.bigint.*` then, thanks to `Temporal.Now`","format":"org.matrix.custom.html","formatted_body":" * would have to be <code>Math.bigint.*</code> then, thanks to <code>Temporal.Now</code>","m.new_content":{"body":"would have to be `Math.bigint.*` then, thanks to `Temporal.Now`","format":"org.matrix.custom.html","formatted_body":"would have to be <code>Math.bigint.*</code> then, thanks to <code>Temporal.Now</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$qBMJJSd9txf4tGP-S87521cHfWFEAs6Uu5uiCPNJrZk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509109483,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wXG0YD45Bb9xefl70eyxySvZegDaZwx3A-mdhGYZfno"},
{"content":{"body":"wait, isn't it a namespace too?","msgtype":"m.text"},"ts":1630509123900,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$WMp3PopBqOLVH6vQ8odIJ_pRclhrnIpkn_tnVf1Qsy4"},
{"content":{"body":"lol nvm, i'm tired and confused myself","msgtype":"m.text"},"ts":1630509130637,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W6UD86re032CzCvS2AoaNOFMf94xCE33z6YnGHoqcyI"},
{"content":{"body":"so same capitalization","msgtype":"m.text"},"ts":1630509130674,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Mz-_6dKvzrlyWC9BhSslbclb4YKeQIUmLiOngnYXlRE"},
{"content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work.","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work.","msgtype":"m.text"},"ts":1630509281954,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509311194,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q8RcDyr1IwytJV9S39hSOdeGOV_otcUOPSEZdU99Z8s"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors i recall","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509324493,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uRpnY4JyTy1CD77eU3pmswiWRmC-U2-5iRVhsx61ncA"},
{"content":{"body":" * re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","format":"org.matrix.custom.html","formatted_body":" * re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","m.new_content":{"body":"re max/min, `1n < 3` works, so `Math.max(1n, 3)` should work. i see zero concern with \"mixing\" in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","format":"org.matrix.custom.html","formatted_body":"re max/min, <code>1n &lt; 3</code> works, so <code>Math.max(1n, 3)</code> should work. i see zero concern with &quot;mixing&quot; in max/min, because there's no accidental precision loss, which was the only motivation for mixing errors that i recall","msgtype":"m.text"},"m.relates_to":{"event_id":"$z7LPBSNd6l4LCkPSLjpcEhGomH7HxdpvierXzYh0pvI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509362655,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8eZX6ocI3Wm8OtJu7lbTHvEzvAA8ceaPVG0_niQT6so"},
{"content":{"body":"I fully support \"maths operations for BigInts\", not so sure about the choice of functions listed here","msgtype":"m.text"},"ts":1630509405828,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9a_PNqRCvuZ0BK8D6GhozpcYeKQIJ97mDKY0ZZzWmi0"},
{"content":{"body":"yeah, +1 for excluding transcedentals","msgtype":"m.text"},"ts":1630509423605,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oDrYx92TB-bTITp3JGWYgMbt2B03Zy2SPkF9YbrdA1g"},
{"content":{"body":"support for some kind of NS instead of `bigMax` and `bigMin`","format":"org.matrix.custom.html","formatted_body":"support for some kind of NS instead of <code>bigMax</code> and <code>bigMin</code>","msgtype":"m.text"},"ts":1630509502742,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5OfKdAoJGevIGMJFCR3yEAOqc2Jmlex-NFo01DrW9qM"},
{"content":{"body":"though also, +1 for hashing out the exact list in stage 1","msgtype":"m.text"},"ts":1630509509027,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1P-s3IFRna8p4mPycjr3r9pZkq7Jv-XANmogUABajEw"},
{"content":{"body":"i don't know if it's bizarre that arbitrary precision math doesn't \"just work\"...","msgtype":"m.text"},"ts":1630509570105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3CeF-6l4tbL6nXA_Eex-P9Gmj3Ti03JYTPWrIC5ptQk"},
{"content":{"body":"max/min isn't \"arbitrary precision\", it's a form of `>` and `<`","format":"org.matrix.custom.html","formatted_body":"max/min isn't &quot;arbitrary precision&quot;, it's a form of <code>&gt;</code> and <code>&lt;</code>","msgtype":"m.text"},"ts":1630509595247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$X5DqOx8kdHd0bl1NrvyNFOjq6p2s3eSiB3R6shhOiXI"},
{"content":{"body":"if i can do `999999999999999999999999999999999999999999999999999999999999999n > 1`, why can't i put those in max or min?","format":"org.matrix.custom.html","formatted_body":"if i can do <code>999999999999999999999999999999999999999999999999999999999999999n &gt; 1</code>, why can't i put those in max or min?","msgtype":"m.text"},"ts":1630509618626,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hnFppUQqizHFjntwrlYRoOQPXXSuqidOrNWCTJnWarg"},
{"content":{"body":"> because there's no accidental precision loss\n\n`10000000000000000000000n < 10000000000000000000000.1`\n\n`> false`\n\nðŸ¤¨","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>because there's no accidental precision loss</p>\n</blockquote>\n<p><code>10000000000000000000000n &lt; 10000000000000000000000.1</code></p>\n<p><code>&gt; false</code></p>\n<p>ðŸ¤¨</p>\n","msgtype":"m.text"},"ts":1630509640241,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$ijiQcmFXbEV_4r6xjRqfMQVs-Jr2_0Ayyr-ogIQ3xtw"},
{"content":{"body":"ljharb: yes, my comment is about unqualified \"math\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yes, my comment is about unqualified &quot;math&quot;","msgtype":"m.text"},"ts":1630509660873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ASu5uWjaEjPZL-ZmkNzRF-pScTAjdq0VLBZfQYJIl8Q"},
{"content":{"body":"in that case the loss happens on the number creation, not part of the `<`","format":"org.matrix.custom.html","formatted_body":"in that case the loss happens on the number creation, not part of the <code>&lt;</code>","msgtype":"m.text"},"ts":1630509661063,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZF_lsIQD-QilZU_I_GHWiBQQUwZmLX8An5WfuXP2O8g"},
{"content":{"body":"You don't know the return type of `Math.min(x, y)` when `x` is a number and `y` is a bigint","format":"org.matrix.custom.html","formatted_body":"You don't know the return type of <code>Math.min(x, y)</code> when <code>x</code> is a number and <code>y</code> is a bigint","msgtype":"m.text"},"ts":1630509661465,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$B_jK0aQETKZ9gFWmt7OK3zfShxJeC-WgANGJis5O1jg"},
{"content":{"body":"I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","msgtype":"m.text"},"ts":1630509697181,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$tg1o2kwT6yQfZ1R4iFIdYdNQKWdoZdRowRW-91n331U"},
{"content":{"body":"nicolo-ribaudo: the return type is T, the type of your inputs - number if all numbers or non-numbers, bigint if all bigints, number or bigint if both","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: the return type is T, the type of your inputs - number if all numbers or non-numbers, bigint if all bigints, number or bigint if both","msgtype":"m.text"},"ts":1630509698934,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L5plv1DA9FWJLflj--0wpyuoCpRNm2P3F7V7BhSpR2Y"},
{"content":{"body":"RangeError, surely?","msgtype":"m.text"},"ts":1630509704118,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fX3L_9ucSenENJoS0wc90BwDEqm-3_9X4gapgpqixo8"},
{"content":{"body":" * I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","m.new_content":{"body":"I don't really think it's a problem in practice, but it's not like most people know the behavior off-hand","msgtype":"m.text"},"m.relates_to":{"event_id":"$tg1o2kwT6yQfZ1R4iFIdYdNQKWdoZdRowRW-91n331U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509705488,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$zmza0cBY7yT362P3bwdhMpw7HURkJVUtcTqqno3YSY4"},
{"content":{"body":"I guess TypeError makes sense from one perspective","msgtype":"m.text"},"ts":1630509712464,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rnRwr_dVLPKk4DkHwc93mucEbtsrHLysEiQPqUfHHLo"},
{"content":{"body":"why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":"why would it be an error of any kind if <code>&lt;</code> with them isn't","msgtype":"m.text"},"ts":1630509720250,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BiaQx8-dV1Zt9tZ7GUfw_QQPApODoRT9zE0Oz423bBs"},
{"content":{"body":" * why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":" * why would it be an error of any kind if <code>&lt;</code> with them isn't","m.new_content":{"body":"why would it be an error of any kind if `<` with them isn't","format":"org.matrix.custom.html","formatted_body":"why would it be an error of any kind if <code>&lt;</code> with them isn't","msgtype":"m.text"},"m.relates_to":{"event_id":"$BiaQx8-dV1Zt9tZ7GUfw_QQPApODoRT9zE0Oz423bBs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509725554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HBi73BCRAnlD8Ao_BVto6YP8cqjT-iRZWVpOtn9HRG4"},
{"content":{"body":"bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":"bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","msgtype":"m.text"},"ts":1630509737505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gkH9_8wgnSHT0hdpwIm63HY28dt5FKWYkly0Hy3HLbE"},
{"content":{"body":" * bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":" * bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","m.new_content":{"body":"bigint/number mixing errors are about losing precision _by the mixing_. this is not a problem for max/min, just like it's not one for comparison.","format":"org.matrix.custom.html","formatted_body":"bigint/number mixing errors are about losing precision <em>by the mixing</em>. this is not a problem for max/min, just like it's not one for comparison.","msgtype":"m.text"},"m.relates_to":{"event_id":"$gkH9_8wgnSHT0hdpwIm63HY28dt5FKWYkly0Hy3HLbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509754789,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z2C5Y6qf3TBjjwK8eyt6jsas3LiHkuC0nMCKc7zO_Do"},
{"content":{"body":"ljharb: you can't `<` with 0 operands","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: you can't <code>&lt;</code> with 0 operands","msgtype":"m.text"},"ts":1630509755780,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$l4PFRenWKK9JhBCM6Zk8Hcpm1SiiIfQruzWMENFIYZk"},
{"content":{"body":"sure?","msgtype":"m.text"},"ts":1630509793572,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nRMRLUH493e0vfy2ah__DnN0i801Yf8ES8mkk9KMzzA"},
{"content":{"body":"so min/max with 0 arguments should do what?","msgtype":"m.text"},"ts":1630509815998,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-su6UTofHIOUm1cASyruBiVQsMs5vUK447E6-dJ6rPg"},
{"content":{"body":"`Math.max()` is `-Infinity`, `Math.max(x)` is `x`, and 2+ operands is where it's useful, and also where it matters","format":"org.matrix.custom.html","formatted_body":"<code>Math.max()</code> is <code>-Infinity</code>, <code>Math.max(x)</code> is <code>x</code>, and 2+ operands is where it's useful, and also where it matters","msgtype":"m.text"},"ts":1630509822396,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ji_6h9qGdq0ZYHDel7YpN3ZCI_3S5oK3kWzrxdiowHI"},
{"content":{"body":"i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 2+ items.","format":"org.matrix.custom.html","formatted_body":"i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 2+ items.","msgtype":"m.text"},"ts":1630509852732,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HV5lpbwWI9fUZnoaU4CnsxTbBWVID8e36K5_MCl4PQ0"},
{"content":{"body":" * i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 1+ items.","format":"org.matrix.custom.html","formatted_body":" * i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 1+ items.","m.new_content":{"body":"i don't see any issue with `Math.max(...x)` possibly returning either type. if you cared about that, you'd already be ensuring `x` has 1+ items.","format":"org.matrix.custom.html","formatted_body":"i don't see any issue with <code>Math.max(...x)</code> possibly returning either type. if you cared about that, you'd already be ensuring <code>x</code> has 1+ items.","msgtype":"m.text"},"m.relates_to":{"event_id":"$HV5lpbwWI9fUZnoaU4CnsxTbBWVID8e36K5_MCl4PQ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1630509883324,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6iZaFE-wxfNQVnXqWJrczY9ltj_TLwV6vJQ2PXhgD6I"},
{"content":{"body":"since bigint lacks an ultimate max/min value (infinity) it's nonsensical to put in < 1 items and expect a bigint back, no?","msgtype":"m.text"},"ts":1630509886801,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Yjn65XAwxLxG3AWvl1ZxCUbQoICB80oP33plHBFVJLU"},
{"content":{"body":"yes, so RangeError","msgtype":"m.text"},"ts":1630509906047,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jdkgEMi-YiowlRiBZxw1Y1FkdGYPTQ8KLHgy010-lOo"}
]