[
{"content":{"body":"well, cleanupSome is at Stage 2, so those need to be fixed anyway","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$zJ-mAOdVNJQoStrpCu2iX2wstsHDm13cu1_Xw68oLag"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689692677991,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EUa6vsUqdazC4-VkwTUcUHexdKP83sgjW7GXshaTNJU"},
{"content":{"body":"it was taken out of the WeakRef/FinalizationRegistry proposal a while ago","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$EUa6vsUqdazC4-VkwTUcUHexdKP83sgjW7GXshaTNJU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689692694800,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Kw-wpuonZ3GDIPAGZa0pAGFhZkwG9wX0m9KhSpbeWgk"},
{"content":{"body":"> <@tabatkins:matrix.org> The only use-case that's remotely reasonable is treating bools as 0 and 1 for bitflag purposes.\n\nand that's something you'd want to do with syntax (`(prop << 2) | prop2`, etc), not with boolean-taking APIs, so even that use case doesn't imply boolean-taking APIs ought to accept numbers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lgtGbzBu0m016lMkdpMg6EzXY7kpyuYTaVOvAcyR7Cg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>The only use-case that&#39;s remotely reasonable is treating bools as 0 and 1 for bitflag purposes.</blockquote></mx-reply>and that's something you'd want to do with syntax (<code>(prop &lt;&lt; 2) | prop2</code>, etc), not with boolean-taking APIs, so even that use case doesn't imply boolean-taking APIs ought to accept numbers","m.relates_to":{"m.in_reply_to":{"event_id":"$lgtGbzBu0m016lMkdpMg6EzXY7kpyuYTaVOvAcyR7Cg"}},"msgtype":"m.text"},"ts":1689699306477,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5GzZqNU5vtagesoicxksedimWuqPTnPvPfbGWEOmem8"},
{"content":{"body":"yes, i was replying to \"boolean to string or number\"","msgtype":"m.text"},"ts":1689702950916,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$31q_XJxTlv8d5vWDJAsnaQ_MDF7kEjsU0_O9SiVybRc"},
{"content":{"body":"(twice now you've replied to me about the opposite direction of what i was talking about when responding to chris - you might want to read the convo a little more closely ^_^)","msgtype":"m.text"},"ts":1689702984499,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9jbf2Wq1TLOMDuqBEqYKJrGAkxziv8o_zuXAy2Et2ec"},
{"content":{"body":"> <@tabatkins:matrix.org> The only use-case that's remotely reasonable is treating bools as 0 and 1 for bitflag purposes.\n\n * and that's something you'd want to do with syntax (`(prop << 2) | prop2`, etc), not with number-taking APIs, so even that use case doesn't imply number-taking APIs ought to accept booleans","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lgtGbzBu0m016lMkdpMg6EzXY7kpyuYTaVOvAcyR7Cg?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>The only use-case that's remotely reasonable is treating bools as 0 and 1 for bitflag purposes.</blockquote></mx-reply> * and that's something you'd want to do with syntax (<code>(prop &lt;&lt; 2) | prop2</code>, etc), not with number-taking APIs, so even that use case doesn't imply number-taking APIs ought to accept booleans","m.new_content":{"body":"and that's something you'd want to do with syntax (`(prop << 2) | prop2`, etc), not with number-taking APIs, so even that use case doesn't imply number-taking APIs ought to accept booleans","format":"org.matrix.custom.html","formatted_body":"and that's something you'd want to do with syntax (<code>(prop &lt;&lt; 2) | prop2</code>, etc), not with number-taking APIs, so even that use case doesn't imply number-taking APIs ought to accept booleans","msgtype":"m.text"},"m.relates_to":{"event_id":"$5GzZqNU5vtagesoicxksedimWuqPTnPvPfbGWEOmem8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689703179036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zl833N7oOVpSpC3x5tVDK7frIzQy993pWnLF6D5Ga8M"},
{"content":{"body":"sorry, I got my nouns switched in previous comment; fixed now","msgtype":"m.text"},"ts":1689703179984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZP-QrUpJNBU_at_StrgnQIt8Mh1X5zID4uNpTahFKwM"},
{"content":{"body":"didn't misread you, just misspoke","msgtype":"m.text"},"ts":1689703190964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YQVPEFn2ci7H97v9O0TIhlWqTAaIHIAKrw-bU3T0M7o"},
{"content":{"body":"ah yes, then, still agree that outside of that operator-mangling case there's really no argument for a bool to coerce to a number","msgtype":"m.text"},"ts":1689703232341,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VQPouosasYJGlwg8bnK9vYmQkK2Iz6XIJEXiViFw2yc"},
{"content":{"body":"though the earlier comment, I don't see how it's the opposite direction of what you said?","msgtype":"m.text"},"ts":1689703240296,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6vv0WG4sGT3AEfrEOcLDrF1cMzxIpeKGohTL9ju_NZk"},
{"content":{"body":"maybe i'd misread what Chris said in \"I think \"true\" and \"false\" should be fair game for implicit conversion to boolean\"","msgtype":"m.text"},"ts":1689703293767,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$3puwIbAaqtak-6C__iBwNs_bSBP1B4cR0ap1G709uQw"},
{"content":{"body":"i thought they were implying that converting \"true\" and \"false\" to true and false was fair game?","msgtype":"m.text"},"ts":1689703311572,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$aW5N12qGXs7bqjF-plZ5L5mNZITqtwiJaPrmUETqGeA"},
{"content":{"body":"(which i oppose)","msgtype":"m.text"},"ts":1689703327477,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HeoQeVk8uZIeGVFLIjqj3nBjvyKJ634i_nK6-tsMWX8"},
{"content":{"body":"ok, so you meant \"we can't make `\"false\"` coerce to `false` in future boolean-taking APIs\", rather than \"we can't change how `\"false\"` is handled in existing APIs\", which is how I read you","format":"org.matrix.custom.html","formatted_body":"ok, so you meant \"we can't make <code>\"false\"</code> coerce to <code>false</code> in future boolean-taking APIs\", rather than \"we can't change how <code>\"false\"</code> is handled in existing APIs\", which is how I read you","msgtype":"m.text"},"ts":1689703525919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z2rvC9TNPP-v-PLxsIWqYBWh7TWU6nnS4pCuR1Ktk6U"},
{"content":{"body":"anyway yes agreed that `\"false\"` should not coerce to `false` in any new or future API","format":"org.matrix.custom.html","formatted_body":"anyway yes agreed that <code>\"false\"</code> should not coerce to <code>false</code> in any new or future API","msgtype":"m.text"},"ts":1689703565303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hSuEndvVwMRb9M1TjSlmP0u8v8rzYeCGlDKzNRYQzMw"},
{"content":{"body":"incidentally, that reminds me of this excellent example of why coercing strings to booleans is a bad idea: https://github.com/tc39/proposal-intl-numberformat-v3/pull/107","msgtype":"m.text"},"ts":1689703713204,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eFjV9-BF8iph1Jbpx6h3Xh3HA3L7GDgl1Y8zeEpwkCM"},
{"content":{"body":"API was being expanded to take more than two values, but people were already passing strings, and some people were passing the string `\"false\"` and (apparently) relying on that being `true`","format":"org.matrix.custom.html","formatted_body":"API was being expanded to take more than two values, but people were already passing strings, and some people were passing the string <code>\"false\"</code> and (apparently) relying on that being <code>true</code>","msgtype":"m.text"},"ts":1689703748249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NdRbWOazu6SF6NzQbMilyMlnFNG-jwOPCuyWEsf2aMY"},
{"content":{"body":"leading to this lovely bit of spec:\n```\n1. NOTE: For historical reasons, the strings *\"true\"* and *\"false\"* are treated the same as the boolean value *true*.\n```","format":"org.matrix.custom.html","formatted_body":"<p>leading to this lovely bit of spec:</p>\n<pre><code>1. NOTE: For historical reasons, the strings *\"true\"* and *\"false\"* are treated the same as the boolean value *true*.\n</code></pre>\n","msgtype":"m.text"},"ts":1689703769321,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xYrJIn0JA6DzJyHtLPGYQhKgGgTxmPtC45dBqoJurnY"},
{"content":{"body":" * leading to this lovely bit of spec:\n\n> 1. NOTE: For historical reasons, the strings *\"true\"* and *\"false\"* are treated the same as the boolean value *true*.\n","format":"org.matrix.custom.html","formatted_body":" * <p>leading to this lovely bit of spec:</p>\n<blockquote>\n<ol>\n<li>NOTE: For historical reasons, the strings <em>\"true\"</em> and <em>\"false\"</em> are treated the same as the boolean value <em>true</em>.</li>\n</ol>\n</blockquote>\n","m.new_content":{"body":"leading to this lovely bit of spec:\n\n> 1. NOTE: For historical reasons, the strings *\"true\"* and *\"false\"* are treated the same as the boolean value *true*.\n","format":"org.matrix.custom.html","formatted_body":"<p>leading to this lovely bit of spec:</p>\n<blockquote>\n<ol>\n<li>NOTE: For historical reasons, the strings <em>\"true\"</em> and <em>\"false\"</em> are treated the same as the boolean value <em>true</em>.</li>\n</ol>\n</blockquote>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$xYrJIn0JA6DzJyHtLPGYQhKgGgTxmPtC45dBqoJurnY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689703775856,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qYQzGn-0a1k9l5EMm2gq4ngxh4tsxjIQss-3pjyzBE4"},
{"content":{"body":"yeah that's annoying","msgtype":"m.text"},"ts":1689703786404,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$kQznUejMkiBVy3D08ZmzLZPqdDw_sJCcLFn7WUl1tv0"},
{"content":{"body":"I walk back what I said about boolean strings being implicitly converted","msgtype":"m.text"},"ts":1689703939129,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$8v0M3AovciypIwn4mrV_uDOyMbS3E0oHGi9r8wrl--s"},
{"content":{"body":"especially as it would fly in the face of my first point about existing behavior for conditions re: truthy/falsey","msgtype":"m.text"},"ts":1689703986292,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$rZXBtkduBPVVs2HI93QSEtKX7DEUEiAWfgPmc8-PxZU"},
{"content":{"body":"Given how long its been since I last presented `throw` expressions, one of my current stage 2 reviewers is no longer a delegate and is unable to review, while the other has minimal involvement in TC39 at this time. I plan to bring back `throw` expressions at the next plenary meeting given the discussion at the last meeting, and will ask for new reviewers at that time. If anyone is willing to review the changes that bakkot and I discussed last week, I'd appreciate it. I'd be especially grateful if you would be willing to volunteer as a reviewer at the next plenary as well.\n\nThe PR for the relevant changes to the `throw` expressions proposal can be found here: https://github.com/tc39/proposal-throw-expressions/pull/17\n\nThe relevant change since this was last proposed for advancement from Stage 2 to Stage 3 is the addition of a new lookahead restriction at the end of the expression that would disallow any trailing binary operator or `?` so that `throw` expressions would not require parentheses in most places, but would disallow syntax that would have different semantics compared to `throw` as a statement.\n\nMy hope is that I can propose advancement to Stage 3 at the next plenary assuming I can find willing volunteers for reviewers in advance of the meeting.","format":"org.matrix.custom.html","formatted_body":"<p>Given how long its been since I last presented <code>throw</code> expressions, one of my current stage 2 reviewers is no longer a delegate and is unable to review, while the other has minimal involvement in TC39 at this time. I plan to bring back <code>throw</code> expressions at the next plenary meeting given the discussion at the last meeting, and will ask for new reviewers at that time. If anyone is willing to review the changes that <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> and I discussed last week, I'd appreciate it. I'd be especially grateful if you would be willing to volunteer as a reviewer at the next plenary as well.</p>\n<p>The PR for the relevant changes to the <code>throw</code> expressions proposal can be found here: https://github.com/tc39/proposal-throw-expressions/pull/17</p>\n<p>The relevant change since this was last proposed for advancement from Stage 2 to Stage 3 is the addition of a new lookahead restriction at the end of the expression that would disallow any trailing binary operator or <code>?</code> so that <code>throw</code> expressions would not require parentheses in most places, but would disallow syntax that would have different semantics compared to <code>throw</code> as a statement.</p>\n<p>My hope is that I can propose advancement to Stage 3 at the next plenary assuming I can find willing volunteers for reviewers in advance of the meeting.</p>\n","msgtype":"m.text"},"ts":1689708096724,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XlXYZvGtATq3UkSBkJ1oKxzzOpZRZrRLKibqPNEM0cY"},
{"content":{"body":"Did anyone happen to make a summary of what advanced from last plenary?","msgtype":"m.text"},"ts":1689721210918,"senderName":"davethegr8","senderId":"@davethegr8:matrix.org","id":"$RaeMs_t9Q3VpmZUX3Pe54vMgsW5SbzJ4qAhlLHuiJls"}
]