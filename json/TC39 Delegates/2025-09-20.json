[
{"content":{"body":"Something is confusing me about AsyncGeneratorStart / AsyncGeneratorCompleteStep. Is the return value of an async generator not awaited? Does that mean the final iterator result may have a promise as its `value` ? From my testing that doesn't seem to be the case, but I don't see how that's happening in the spec.\n```\n(async function * () { return Promise.resolve(42); })().next().then(x => console.log(x)); // { value: 42, done: true }\n```","format":"org.matrix.custom.html","formatted_body":"<p>Something is confusing me about AsyncGeneratorStart / AsyncGeneratorCompleteStep. Is the return value of an async generator not awaited? Does that mean the final iterator result may have a promise as its <code>value</code> ? From my testing that doesn't seem to be the case, but I don't see how that's happening in the spec.</p>\n<pre><code>(async function * () { return Promise.resolve(42); })().next().then(x =&gt; console.log(x)); // { value: 42, done: true }\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758329779381,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$bUDfzL8idhSjweQFbf_Sq4IEJ6liZ25-YNvcRXyvH3g"},
{"content":{"body":"awaiting of `return` values actually happens as part of the evaluation of the `return` itself","format":"org.matrix.custom.html","formatted_body":"awaiting of <code>return</code> values actually happens as part of the evaluation of the <code>return</code> itself","m.mentions":{},"msgtype":"m.text"},"ts":1758331315198,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iqF3sP_9_OOn-xhNN6kswLgP5KWs9sfKiZFFCE-jM4U"},
{"content":{"body":"https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-return-statement-runtime-semantics-evaluation ","m.mentions":{},"msgtype":"m.text"},"ts":1758331322510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$arJAGyaQi_5ixKjiLHNk73ltCri-oGsnhYgCAdGFfjk"},
{"content":{"body":"Oh that is wild!","m.mentions":{},"msgtype":"m.text"},"ts":1758331488381,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$q2NfChAvx6btu2usLJmPZR-DovM5I0Py_y1KNqVHZTk"},
{"content":{"body":"This way it triggers finally statements ","msgtype":"m.text"},"ts":1758331921010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IL4-7mVbSIBwAYBIPv8Y60Q0OVXv_8HTSoJTeMJjEdY"},
{"content":{"body":"Which, also kinda weird","msgtype":"m.text"},"ts":1758331925803,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pdv_M5USmixEWvdXx25l_c-ULQq52f2-5ufXRIRpX7Y"},
{"content":{"body":"I'm not sure I understand, `finally` always executes if a `return` is in a `try`. Internally awaiting the return expression shouldn't change that. And if there was a `catch` it shouldn't trigger it, in the same way `yield`ing a rejected promise only triggers a `catch` if the consumer of the iterator called `throw`. (I might have gotten myself confused again with generator behaviors and afk so can't easily double check)","msgtype":"m.text"},"ts":1758337147594,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B4HRJdZ7ZNWmJVrD8B50iBOKIMJUCU5IfSV2Q7J29eU"},
{"content":{"body":"sorry, I meant `catch` not `finally`","format":"org.matrix.custom.html","formatted_body":"sorry, I meant <code>catch</code> not <code>finally</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758341296729,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4b5DJwFRxYTFCf8lJ5bohFV3Snu_yB3atbCB_IDBHKg"},
{"content":{"body":"and it doe trigger a `catch`","format":"org.matrix.custom.html","formatted_body":"and it doe trigger a <code>catch</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758341301429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fsKQUgJalpBBWy0Z3oic12gsQI2y5xyeoWsa3aNXnag"},
{"content":{"body":"```\n(async function*(){ try { return Promise.reject('hi'); } catch (e) { console.log('caught', e); } })().next()\n// caught hi\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>(async function*(){ try { return Promise.reject('hi'); } catch (e) { console.log('caught', e); } })().next()\n// caught hi\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758341317974,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OxfKxZgCahd8qik9km0_fm7UqUQAQjdLIW6ZRfSHkRM"},
{"content":{"body":"this is in contrast to async functions\n```\n(async function(){ try { return Promise.reject('hi'); } catch (e) { console.log('caught', e); } })().catch(e => console.log('did not catch', e))\n// did not catch hi\n```","format":"org.matrix.custom.html","formatted_body":"<p>this is in contrast to async functions</p>\n<pre><code>(async function(){ try { return Promise.reject('hi'); } catch (e) { console.log('caught', e); } })().catch(e =&gt; console.log('did not catch', e))\n// did not catch hi\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1758341353006,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Za-fs7NvVUE-vaRD_6RrOu8EKxRkKq9cPH2IWBLvFRo"},
{"content":{"body":"yielding a rejected promise does also trigger a `catch` incidentally","format":"org.matrix.custom.html","formatted_body":"yielding a rejected promise does also trigger a <code>catch</code> incidentally","m.mentions":{},"msgtype":"m.text"},"ts":1758341393187,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$abGgZgPgo4413EssMjtLtbGyEK-JPLOe22dPbtQ5Qek"},
{"content":{"body":"which I am pretty sure is why `return` works that way in async generators","format":"org.matrix.custom.html","formatted_body":"which I am pretty sure is why <code>return</code> works that way in async generators","m.mentions":{},"msgtype":"m.text"},"ts":1758341418504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oghHffaxD2xMnGx1ZpCUs5NGZhavfrF2WxT231q-qjM"}
]