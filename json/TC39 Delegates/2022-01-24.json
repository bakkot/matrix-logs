[
{"content":{"body":"üëÄ is there drafted agenda for this meeting so I can schedule my sleeping time? thanks!","msgtype":"m.text"},"ts":1643015881927,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6g_c78daTMzIIDYtMN3tikb-v1GOxThqPM0c1Y_Q2TA"},
{"content":{"body":"jschoi: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","msgtype":"m.text"},"ts":1643022874838,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM"},
{"content":{"body":" * jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","m.new_content":{"body":"jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","msgtype":"m.text"},"m.relates_to":{"event_id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643023021295,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-QEX0XEz0sXkhZVku_PlxgxQaZPUHUhh2OlxvCIjOFk"},
{"content":{"body":"The draft schedule for today's meeting is now posted:  https://hackmd.io/s3ovtgLsTa-QAhFqYTl_YA","msgtype":"m.text"},"ts":1643030937100,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs"},
{"content":{"body":" * The draft schedule for today's meeting is now posted","m.new_content":{"body":"The draft schedule for today's meeting is now posted","msgtype":"m.text"},"m.relates_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643030946829,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$x3OojhDljhgIYrkIxNvDYLz3ucOZn4dPh9GadTvQj5g"},
{"content":{"body":" * The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411","m.new_content":{"body":"The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411","msgtype":"m.text"},"m.relates_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643030966725,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$nhcusgzKHWC8jYr6N9rpdO3OQ38vzUEmD9x3-ev_USQ"},
{"content":{"body":"> <@robpalme:matrix.org> The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411\n\nThanks! üôè","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411</blockquote></mx-reply>Thanks! üôè","m.relates_to":{"m.in_reply_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs"}},"msgtype":"m.text"},"ts":1643031108122,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$R8Md_GPUm4sep5mcZjRIzMY6M_P9Pr1MDXBlwoRQO-0"},
{"content":{"body":"> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM"}},"msgtype":"m.text"},"ts":1643039993759,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9PdWopGywE4L8L18E7h9B4KghPfE4MF_lGoZKT5eFBY"},
{"content":{"body":"I see, thanks!","msgtype":"m.text"},"ts":1643040030717,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NP2NZWtkZ9QFJCDLdjwnrZrf_JYYlEnLK8XDRG-fyhI"},
{"content":{"body":"* > <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","m.new_content":{"body":"> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$9PdWopGywE4L8L18E7h9B4KghPfE4MF_lGoZKT5eFBY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643041053102,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sZPWI5s-NII0i-y778o4A2EdODhQPmqZkLDdPeLND-Q"},
{"content":{"body":"We will start the meeting in 12 minutes!","msgtype":"m.text"},"ts":1643046489063,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dOsmJvfOPztZ92UYzW3GTZFsY8qyGl6C8Kq5F6yzaPc"},
{"content":{"body":"I like the formal votes, but fine with it going without it.\n\nI also have no opposition to ryzokuken being on both roles (402 Editor + TC39 Co-Chair).","format":"org.matrix.custom.html","formatted_body":"<p>I like the formal votes, but fine with it going without it.</p>\n<p>I also have no opposition to <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> being on both roles (402 Editor + TC39 Co-Chair).</p>\n","msgtype":"m.text"},"ts":1643048667713,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$65HjuxCebEOLGa0iFrA0Vsu8k-Y2uTPfkroezilSw3w"}
]